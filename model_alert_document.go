/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AlertDocument Specifies documentation about the Alert such as name, description, cause and how to resolve the Alert.
type AlertDocument struct {
	// Specifies cause of the Alert that is included in the body of the email or any other type of notification.
	AlertCause NullableString `json:"alertCause,omitempty"`
	// Specifies brief description about the Alert that is used in the subject line when sending a notification email for an Alert.
	AlertDescription NullableString `json:"alertDescription,omitempty"`
	// Specifies instructions describing how to resolve the Alert that is included in the body of the email or any other type of notification.
	AlertHelpText NullableString `json:"alertHelpText,omitempty"`
	// Specifies short name that describes the Alert type such as DiskBad, HighCpuUsage, FrequentProcessRestarts, etc.
	AlertName NullableString `json:"alertName,omitempty"`
}

// NewAlertDocument instantiates a new AlertDocument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertDocument() *AlertDocument {
	this := AlertDocument{}
	return &this
}

// NewAlertDocumentWithDefaults instantiates a new AlertDocument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertDocumentWithDefaults() *AlertDocument {
	this := AlertDocument{}
	return &this
}

// GetAlertCause returns the AlertCause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertDocument) GetAlertCause() string {
	if o == nil || o.AlertCause.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlertCause.Get()
}

// GetAlertCauseOk returns a tuple with the AlertCause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertDocument) GetAlertCauseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertCause.Get(), o.AlertCause.IsSet()
}

// HasAlertCause returns a boolean if a field has been set.
func (o *AlertDocument) HasAlertCause() bool {
	if o != nil && o.AlertCause.IsSet() {
		return true
	}

	return false
}

// SetAlertCause gets a reference to the given NullableString and assigns it to the AlertCause field.
func (o *AlertDocument) SetAlertCause(v string) {
	o.AlertCause.Set(&v)
}
// SetAlertCauseNil sets the value for AlertCause to be an explicit nil
func (o *AlertDocument) SetAlertCauseNil() {
	o.AlertCause.Set(nil)
}

// UnsetAlertCause ensures that no value is present for AlertCause, not even an explicit nil
func (o *AlertDocument) UnsetAlertCause() {
	o.AlertCause.Unset()
}

// GetAlertDescription returns the AlertDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertDocument) GetAlertDescription() string {
	if o == nil || o.AlertDescription.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlertDescription.Get()
}

// GetAlertDescriptionOk returns a tuple with the AlertDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertDocument) GetAlertDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertDescription.Get(), o.AlertDescription.IsSet()
}

// HasAlertDescription returns a boolean if a field has been set.
func (o *AlertDocument) HasAlertDescription() bool {
	if o != nil && o.AlertDescription.IsSet() {
		return true
	}

	return false
}

// SetAlertDescription gets a reference to the given NullableString and assigns it to the AlertDescription field.
func (o *AlertDocument) SetAlertDescription(v string) {
	o.AlertDescription.Set(&v)
}
// SetAlertDescriptionNil sets the value for AlertDescription to be an explicit nil
func (o *AlertDocument) SetAlertDescriptionNil() {
	o.AlertDescription.Set(nil)
}

// UnsetAlertDescription ensures that no value is present for AlertDescription, not even an explicit nil
func (o *AlertDocument) UnsetAlertDescription() {
	o.AlertDescription.Unset()
}

// GetAlertHelpText returns the AlertHelpText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertDocument) GetAlertHelpText() string {
	if o == nil || o.AlertHelpText.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlertHelpText.Get()
}

// GetAlertHelpTextOk returns a tuple with the AlertHelpText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertDocument) GetAlertHelpTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertHelpText.Get(), o.AlertHelpText.IsSet()
}

// HasAlertHelpText returns a boolean if a field has been set.
func (o *AlertDocument) HasAlertHelpText() bool {
	if o != nil && o.AlertHelpText.IsSet() {
		return true
	}

	return false
}

// SetAlertHelpText gets a reference to the given NullableString and assigns it to the AlertHelpText field.
func (o *AlertDocument) SetAlertHelpText(v string) {
	o.AlertHelpText.Set(&v)
}
// SetAlertHelpTextNil sets the value for AlertHelpText to be an explicit nil
func (o *AlertDocument) SetAlertHelpTextNil() {
	o.AlertHelpText.Set(nil)
}

// UnsetAlertHelpText ensures that no value is present for AlertHelpText, not even an explicit nil
func (o *AlertDocument) UnsetAlertHelpText() {
	o.AlertHelpText.Unset()
}

// GetAlertName returns the AlertName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertDocument) GetAlertName() string {
	if o == nil || o.AlertName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlertName.Get()
}

// GetAlertNameOk returns a tuple with the AlertName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertDocument) GetAlertNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlertName.Get(), o.AlertName.IsSet()
}

// HasAlertName returns a boolean if a field has been set.
func (o *AlertDocument) HasAlertName() bool {
	if o != nil && o.AlertName.IsSet() {
		return true
	}

	return false
}

// SetAlertName gets a reference to the given NullableString and assigns it to the AlertName field.
func (o *AlertDocument) SetAlertName(v string) {
	o.AlertName.Set(&v)
}
// SetAlertNameNil sets the value for AlertName to be an explicit nil
func (o *AlertDocument) SetAlertNameNil() {
	o.AlertName.Set(nil)
}

// UnsetAlertName ensures that no value is present for AlertName, not even an explicit nil
func (o *AlertDocument) UnsetAlertName() {
	o.AlertName.Unset()
}

func (o AlertDocument) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlertCause.IsSet() {
		toSerialize["alertCause"] = o.AlertCause.Get()
	}
	if o.AlertDescription.IsSet() {
		toSerialize["alertDescription"] = o.AlertDescription.Get()
	}
	if o.AlertHelpText.IsSet() {
		toSerialize["alertHelpText"] = o.AlertHelpText.Get()
	}
	if o.AlertName.IsSet() {
		toSerialize["alertName"] = o.AlertName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAlertDocument struct {
	value *AlertDocument
	isSet bool
}

func (v NullableAlertDocument) Get() *AlertDocument {
	return v.value
}

func (v *NullableAlertDocument) Set(val *AlertDocument) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertDocument(val *AlertDocument) *NullableAlertDocument {
	return &NullableAlertDocument{value: val, isSet: true}
}

func (v NullableAlertDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


