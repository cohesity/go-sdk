/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleSpecialParameters Specifies special settings applicable for 'kOracle' environment.
type OracleSpecialParameters struct {
	// Array of application parameters i.e. database parameters for standalone/RAC and DG parameters for data guard.  Specifies the list of parameters required at app entity level.
	AppParamsList []OracleAppParams `json:"appParamsList,omitempty"`
	// Array of Ids of Application Entities like Oracle instances, and databases that should be protected in a Protection Source.  Specifies the subset of application entities like Oracle instances, and databases to protect in a Protection Source of type kOracle'. If not specified, all application entities on the Protection Source.
	ApplicationEntityIds []int64 `json:"applicationEntityIds,omitempty"`
	// Specifies if the mountpoints for Oracle view for the current host are to be persisted.
	PersistMountpoints NullableBool `json:"persistMountpoints,omitempty"`
}

// NewOracleSpecialParameters instantiates a new OracleSpecialParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleSpecialParameters() *OracleSpecialParameters {
	this := OracleSpecialParameters{}
	return &this
}

// NewOracleSpecialParametersWithDefaults instantiates a new OracleSpecialParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleSpecialParametersWithDefaults() *OracleSpecialParameters {
	this := OracleSpecialParameters{}
	return &this
}

// GetAppParamsList returns the AppParamsList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSpecialParameters) GetAppParamsList() []OracleAppParams {
	if o == nil  {
		var ret []OracleAppParams
		return ret
	}
	return o.AppParamsList
}

// GetAppParamsListOk returns a tuple with the AppParamsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSpecialParameters) GetAppParamsListOk() (*[]OracleAppParams, bool) {
	if o == nil || o.AppParamsList == nil {
		return nil, false
	}
	return &o.AppParamsList, true
}

// HasAppParamsList returns a boolean if a field has been set.
func (o *OracleSpecialParameters) HasAppParamsList() bool {
	if o != nil && o.AppParamsList != nil {
		return true
	}

	return false
}

// SetAppParamsList gets a reference to the given []OracleAppParams and assigns it to the AppParamsList field.
func (o *OracleSpecialParameters) SetAppParamsList(v []OracleAppParams) {
	o.AppParamsList = v
}

// GetApplicationEntityIds returns the ApplicationEntityIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSpecialParameters) GetApplicationEntityIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ApplicationEntityIds
}

// GetApplicationEntityIdsOk returns a tuple with the ApplicationEntityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSpecialParameters) GetApplicationEntityIdsOk() (*[]int64, bool) {
	if o == nil || o.ApplicationEntityIds == nil {
		return nil, false
	}
	return &o.ApplicationEntityIds, true
}

// HasApplicationEntityIds returns a boolean if a field has been set.
func (o *OracleSpecialParameters) HasApplicationEntityIds() bool {
	if o != nil && o.ApplicationEntityIds != nil {
		return true
	}

	return false
}

// SetApplicationEntityIds gets a reference to the given []int64 and assigns it to the ApplicationEntityIds field.
func (o *OracleSpecialParameters) SetApplicationEntityIds(v []int64) {
	o.ApplicationEntityIds = v
}

// GetPersistMountpoints returns the PersistMountpoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSpecialParameters) GetPersistMountpoints() bool {
	if o == nil || o.PersistMountpoints.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PersistMountpoints.Get()
}

// GetPersistMountpointsOk returns a tuple with the PersistMountpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSpecialParameters) GetPersistMountpointsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PersistMountpoints.Get(), o.PersistMountpoints.IsSet()
}

// HasPersistMountpoints returns a boolean if a field has been set.
func (o *OracleSpecialParameters) HasPersistMountpoints() bool {
	if o != nil && o.PersistMountpoints.IsSet() {
		return true
	}

	return false
}

// SetPersistMountpoints gets a reference to the given NullableBool and assigns it to the PersistMountpoints field.
func (o *OracleSpecialParameters) SetPersistMountpoints(v bool) {
	o.PersistMountpoints.Set(&v)
}
// SetPersistMountpointsNil sets the value for PersistMountpoints to be an explicit nil
func (o *OracleSpecialParameters) SetPersistMountpointsNil() {
	o.PersistMountpoints.Set(nil)
}

// UnsetPersistMountpoints ensures that no value is present for PersistMountpoints, not even an explicit nil
func (o *OracleSpecialParameters) UnsetPersistMountpoints() {
	o.PersistMountpoints.Unset()
}

func (o OracleSpecialParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppParamsList != nil {
		toSerialize["appParamsList"] = o.AppParamsList
	}
	if o.ApplicationEntityIds != nil {
		toSerialize["applicationEntityIds"] = o.ApplicationEntityIds
	}
	if o.PersistMountpoints.IsSet() {
		toSerialize["persistMountpoints"] = o.PersistMountpoints.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleSpecialParameters struct {
	value *OracleSpecialParameters
	isSet bool
}

func (v NullableOracleSpecialParameters) Get() *OracleSpecialParameters {
	return v.value
}

func (v *NullableOracleSpecialParameters) Set(val *OracleSpecialParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleSpecialParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleSpecialParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleSpecialParameters(val *OracleSpecialParameters) *NullableOracleSpecialParameters {
	return &NullableOracleSpecialParameters{value: val, isSet: true}
}

func (v NullableOracleSpecialParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleSpecialParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


