/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreObjectState Specifies the state of an individual object in a Restore Task.
type RestoreObjectState struct {
	Error *RequestError `json:"error,omitempty"`
	// Specifies the status of an object during a Restore Task. 'kFilesCloned' indicates that the cloning has completed. 'kFetchedEntityInfo' indicates that information about the object was fetched from the primary source. 'kVMCreated' indicates that the new VM was created. 'kRelocationStarted' indicates that restoring to a different resource pool has started. 'kFinished' indicates that the Restore Task has finished. Whether it was successful or not is indicated by the error code that that is stored with the Restore Task. 'kAborted' indicates that the Restore Task was aborted before trying to restore this object. This can happen if the Restore Task encounters a global error. For example during a 'kCloneVMs' Restore Task, the datastore could not be mounted. The entire Restore Task is aborted before trying to create VMs on the primary source. 'kDataCopyStarted' indicates that the disk copy is started. 'kInProgress' captures a generic in-progress state and can be used by restore operations that don't track individual states.
	ObjectStatus NullableString `json:"objectStatus,omitempty"`
	// Specifies the id of the Resource Pool that the restored object is attached to. For a 'kRecoverVMs' Restore Task, an object can be recovered back to its original resource pool. This means while recovering a set of objects, this field can reference different resource pools. For a 'kCloneVMs' Restore Task, all objects are attached to the same resource pool. However, this field will still be populated. NOTE: This field may not be populated if the restore of the object fails.
	ResourcePoolId NullableInt64 `json:"resourcePoolId,omitempty"`
	// Specifies the Id of the recovered or cloned object. NOTE: For a Restore Task that is recovering or cloning an object in the VMware environment, after the VM is created it is storage vMotioned to its primary datastore. If storage vMotion fails, the Cohesity Cluster marks the recovery task as failed. However, this field is still populated with the id of the recovered VM. This id can be used later to clean up the VM from primary environment (i.e, the vCenter Server).
	RestoredObjectId NullableInt64 `json:"restoredObjectId,omitempty"`
	// Specifies the Protection Source id of the object to be recovered or cloned.
	SourceObjectId NullableInt64 `json:"sourceObjectId,omitempty"`
}

// NewRestoreObjectState instantiates a new RestoreObjectState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreObjectState() *RestoreObjectState {
	this := RestoreObjectState{}
	return &this
}

// NewRestoreObjectStateWithDefaults instantiates a new RestoreObjectState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreObjectStateWithDefaults() *RestoreObjectState {
	this := RestoreObjectState{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *RestoreObjectState) GetError() RequestError {
	if o == nil || o.Error == nil {
		var ret RequestError
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreObjectState) GetErrorOk() (*RequestError, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *RestoreObjectState) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given RequestError and assigns it to the Error field.
func (o *RestoreObjectState) SetError(v RequestError) {
	o.Error = &v
}

// GetObjectStatus returns the ObjectStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObjectState) GetObjectStatus() string {
	if o == nil || o.ObjectStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectStatus.Get()
}

// GetObjectStatusOk returns a tuple with the ObjectStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObjectState) GetObjectStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectStatus.Get(), o.ObjectStatus.IsSet()
}

// HasObjectStatus returns a boolean if a field has been set.
func (o *RestoreObjectState) HasObjectStatus() bool {
	if o != nil && o.ObjectStatus.IsSet() {
		return true
	}

	return false
}

// SetObjectStatus gets a reference to the given NullableString and assigns it to the ObjectStatus field.
func (o *RestoreObjectState) SetObjectStatus(v string) {
	o.ObjectStatus.Set(&v)
}
// SetObjectStatusNil sets the value for ObjectStatus to be an explicit nil
func (o *RestoreObjectState) SetObjectStatusNil() {
	o.ObjectStatus.Set(nil)
}

// UnsetObjectStatus ensures that no value is present for ObjectStatus, not even an explicit nil
func (o *RestoreObjectState) UnsetObjectStatus() {
	o.ObjectStatus.Unset()
}

// GetResourcePoolId returns the ResourcePoolId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObjectState) GetResourcePoolId() int64 {
	if o == nil || o.ResourcePoolId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ResourcePoolId.Get()
}

// GetResourcePoolIdOk returns a tuple with the ResourcePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObjectState) GetResourcePoolIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResourcePoolId.Get(), o.ResourcePoolId.IsSet()
}

// HasResourcePoolId returns a boolean if a field has been set.
func (o *RestoreObjectState) HasResourcePoolId() bool {
	if o != nil && o.ResourcePoolId.IsSet() {
		return true
	}

	return false
}

// SetResourcePoolId gets a reference to the given NullableInt64 and assigns it to the ResourcePoolId field.
func (o *RestoreObjectState) SetResourcePoolId(v int64) {
	o.ResourcePoolId.Set(&v)
}
// SetResourcePoolIdNil sets the value for ResourcePoolId to be an explicit nil
func (o *RestoreObjectState) SetResourcePoolIdNil() {
	o.ResourcePoolId.Set(nil)
}

// UnsetResourcePoolId ensures that no value is present for ResourcePoolId, not even an explicit nil
func (o *RestoreObjectState) UnsetResourcePoolId() {
	o.ResourcePoolId.Unset()
}

// GetRestoredObjectId returns the RestoredObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObjectState) GetRestoredObjectId() int64 {
	if o == nil || o.RestoredObjectId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RestoredObjectId.Get()
}

// GetRestoredObjectIdOk returns a tuple with the RestoredObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObjectState) GetRestoredObjectIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoredObjectId.Get(), o.RestoredObjectId.IsSet()
}

// HasRestoredObjectId returns a boolean if a field has been set.
func (o *RestoreObjectState) HasRestoredObjectId() bool {
	if o != nil && o.RestoredObjectId.IsSet() {
		return true
	}

	return false
}

// SetRestoredObjectId gets a reference to the given NullableInt64 and assigns it to the RestoredObjectId field.
func (o *RestoreObjectState) SetRestoredObjectId(v int64) {
	o.RestoredObjectId.Set(&v)
}
// SetRestoredObjectIdNil sets the value for RestoredObjectId to be an explicit nil
func (o *RestoreObjectState) SetRestoredObjectIdNil() {
	o.RestoredObjectId.Set(nil)
}

// UnsetRestoredObjectId ensures that no value is present for RestoredObjectId, not even an explicit nil
func (o *RestoreObjectState) UnsetRestoredObjectId() {
	o.RestoredObjectId.Unset()
}

// GetSourceObjectId returns the SourceObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreObjectState) GetSourceObjectId() int64 {
	if o == nil || o.SourceObjectId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceObjectId.Get()
}

// GetSourceObjectIdOk returns a tuple with the SourceObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreObjectState) GetSourceObjectIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceObjectId.Get(), o.SourceObjectId.IsSet()
}

// HasSourceObjectId returns a boolean if a field has been set.
func (o *RestoreObjectState) HasSourceObjectId() bool {
	if o != nil && o.SourceObjectId.IsSet() {
		return true
	}

	return false
}

// SetSourceObjectId gets a reference to the given NullableInt64 and assigns it to the SourceObjectId field.
func (o *RestoreObjectState) SetSourceObjectId(v int64) {
	o.SourceObjectId.Set(&v)
}
// SetSourceObjectIdNil sets the value for SourceObjectId to be an explicit nil
func (o *RestoreObjectState) SetSourceObjectIdNil() {
	o.SourceObjectId.Set(nil)
}

// UnsetSourceObjectId ensures that no value is present for SourceObjectId, not even an explicit nil
func (o *RestoreObjectState) UnsetSourceObjectId() {
	o.SourceObjectId.Unset()
}

func (o RestoreObjectState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.ObjectStatus.IsSet() {
		toSerialize["objectStatus"] = o.ObjectStatus.Get()
	}
	if o.ResourcePoolId.IsSet() {
		toSerialize["resourcePoolId"] = o.ResourcePoolId.Get()
	}
	if o.RestoredObjectId.IsSet() {
		toSerialize["restoredObjectId"] = o.RestoredObjectId.Get()
	}
	if o.SourceObjectId.IsSet() {
		toSerialize["sourceObjectId"] = o.SourceObjectId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreObjectState struct {
	value *RestoreObjectState
	isSet bool
}

func (v NullableRestoreObjectState) Get() *RestoreObjectState {
	return v.value
}

func (v *NullableRestoreObjectState) Set(val *RestoreObjectState) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreObjectState) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreObjectState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreObjectState(val *RestoreObjectState) *NullableRestoreObjectState {
	return &NullableRestoreObjectState{value: val, isSet: true}
}

func (v NullableRestoreObjectState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreObjectState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


