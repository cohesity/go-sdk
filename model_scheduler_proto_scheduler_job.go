/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SchedulerProtoSchedulerJob Specifies the structure of the scheduler job along with its attributes.
type SchedulerProtoSchedulerJob struct {
	// The boolean which specifies if this job is to be scheduled or not.
	EnableRecurringEmail NullableBool `json:"enableRecurringEmail,omitempty"`
	// The unique id for the scheduled job assigned by the cluster.
	Id NullableInt64 `json:"id,omitempty"`
	// The name of the scheduled job given by the user.
	Name NullableString `json:"name,omitempty"`
	ScheduleJobParameters *SchedulerProtoSchedulerJobScheduleJobParameters `json:"scheduleJobParameters,omitempty"`
	// The frequency of schedule execution.
	Schedules []SchedulerProtoSchedulerJobSchedule `json:"schedules,omitempty"`
	// Specifies id of tenant who created the scheduler job.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the type of the job. The enum which defines the Job type of the job.
	Type NullableString `json:"type,omitempty"`
}

// NewSchedulerProtoSchedulerJob instantiates a new SchedulerProtoSchedulerJob object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulerProtoSchedulerJob() *SchedulerProtoSchedulerJob {
	this := SchedulerProtoSchedulerJob{}
	return &this
}

// NewSchedulerProtoSchedulerJobWithDefaults instantiates a new SchedulerProtoSchedulerJob object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulerProtoSchedulerJobWithDefaults() *SchedulerProtoSchedulerJob {
	this := SchedulerProtoSchedulerJob{}
	return &this
}

// GetEnableRecurringEmail returns the EnableRecurringEmail field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerProtoSchedulerJob) GetEnableRecurringEmail() bool {
	if o == nil || o.EnableRecurringEmail.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableRecurringEmail.Get()
}

// GetEnableRecurringEmailOk returns a tuple with the EnableRecurringEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerProtoSchedulerJob) GetEnableRecurringEmailOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableRecurringEmail.Get(), o.EnableRecurringEmail.IsSet()
}

// HasEnableRecurringEmail returns a boolean if a field has been set.
func (o *SchedulerProtoSchedulerJob) HasEnableRecurringEmail() bool {
	if o != nil && o.EnableRecurringEmail.IsSet() {
		return true
	}

	return false
}

// SetEnableRecurringEmail gets a reference to the given NullableBool and assigns it to the EnableRecurringEmail field.
func (o *SchedulerProtoSchedulerJob) SetEnableRecurringEmail(v bool) {
	o.EnableRecurringEmail.Set(&v)
}
// SetEnableRecurringEmailNil sets the value for EnableRecurringEmail to be an explicit nil
func (o *SchedulerProtoSchedulerJob) SetEnableRecurringEmailNil() {
	o.EnableRecurringEmail.Set(nil)
}

// UnsetEnableRecurringEmail ensures that no value is present for EnableRecurringEmail, not even an explicit nil
func (o *SchedulerProtoSchedulerJob) UnsetEnableRecurringEmail() {
	o.EnableRecurringEmail.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerProtoSchedulerJob) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerProtoSchedulerJob) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SchedulerProtoSchedulerJob) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *SchedulerProtoSchedulerJob) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SchedulerProtoSchedulerJob) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SchedulerProtoSchedulerJob) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerProtoSchedulerJob) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerProtoSchedulerJob) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SchedulerProtoSchedulerJob) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SchedulerProtoSchedulerJob) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SchedulerProtoSchedulerJob) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SchedulerProtoSchedulerJob) UnsetName() {
	o.Name.Unset()
}

// GetScheduleJobParameters returns the ScheduleJobParameters field value if set, zero value otherwise.
func (o *SchedulerProtoSchedulerJob) GetScheduleJobParameters() SchedulerProtoSchedulerJobScheduleJobParameters {
	if o == nil || o.ScheduleJobParameters == nil {
		var ret SchedulerProtoSchedulerJobScheduleJobParameters
		return ret
	}
	return *o.ScheduleJobParameters
}

// GetScheduleJobParametersOk returns a tuple with the ScheduleJobParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulerProtoSchedulerJob) GetScheduleJobParametersOk() (*SchedulerProtoSchedulerJobScheduleJobParameters, bool) {
	if o == nil || o.ScheduleJobParameters == nil {
		return nil, false
	}
	return o.ScheduleJobParameters, true
}

// HasScheduleJobParameters returns a boolean if a field has been set.
func (o *SchedulerProtoSchedulerJob) HasScheduleJobParameters() bool {
	if o != nil && o.ScheduleJobParameters != nil {
		return true
	}

	return false
}

// SetScheduleJobParameters gets a reference to the given SchedulerProtoSchedulerJobScheduleJobParameters and assigns it to the ScheduleJobParameters field.
func (o *SchedulerProtoSchedulerJob) SetScheduleJobParameters(v SchedulerProtoSchedulerJobScheduleJobParameters) {
	o.ScheduleJobParameters = &v
}

// GetSchedules returns the Schedules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerProtoSchedulerJob) GetSchedules() []SchedulerProtoSchedulerJobSchedule {
	if o == nil  {
		var ret []SchedulerProtoSchedulerJobSchedule
		return ret
	}
	return o.Schedules
}

// GetSchedulesOk returns a tuple with the Schedules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerProtoSchedulerJob) GetSchedulesOk() (*[]SchedulerProtoSchedulerJobSchedule, bool) {
	if o == nil || o.Schedules == nil {
		return nil, false
	}
	return &o.Schedules, true
}

// HasSchedules returns a boolean if a field has been set.
func (o *SchedulerProtoSchedulerJob) HasSchedules() bool {
	if o != nil && o.Schedules != nil {
		return true
	}

	return false
}

// SetSchedules gets a reference to the given []SchedulerProtoSchedulerJobSchedule and assigns it to the Schedules field.
func (o *SchedulerProtoSchedulerJob) SetSchedules(v []SchedulerProtoSchedulerJobSchedule) {
	o.Schedules = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerProtoSchedulerJob) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerProtoSchedulerJob) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *SchedulerProtoSchedulerJob) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *SchedulerProtoSchedulerJob) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *SchedulerProtoSchedulerJob) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *SchedulerProtoSchedulerJob) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulerProtoSchedulerJob) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulerProtoSchedulerJob) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *SchedulerProtoSchedulerJob) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *SchedulerProtoSchedulerJob) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *SchedulerProtoSchedulerJob) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *SchedulerProtoSchedulerJob) UnsetType() {
	o.Type.Unset()
}

func (o SchedulerProtoSchedulerJob) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableRecurringEmail.IsSet() {
		toSerialize["enableRecurringEmail"] = o.EnableRecurringEmail.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ScheduleJobParameters != nil {
		toSerialize["scheduleJobParameters"] = o.ScheduleJobParameters
	}
	if o.Schedules != nil {
		toSerialize["schedules"] = o.Schedules
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSchedulerProtoSchedulerJob struct {
	value *SchedulerProtoSchedulerJob
	isSet bool
}

func (v NullableSchedulerProtoSchedulerJob) Get() *SchedulerProtoSchedulerJob {
	return v.value
}

func (v *NullableSchedulerProtoSchedulerJob) Set(val *SchedulerProtoSchedulerJob) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulerProtoSchedulerJob) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulerProtoSchedulerJob) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulerProtoSchedulerJob(val *SchedulerProtoSchedulerJob) *NullableSchedulerProtoSchedulerJob {
	return &NullableSchedulerProtoSchedulerJob{value: val, isSet: true}
}

func (v NullableSchedulerProtoSchedulerJob) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulerProtoSchedulerJob) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


