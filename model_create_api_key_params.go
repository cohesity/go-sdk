/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CreateApiKeyParams Specifies the parameters to create an API key.
type CreateApiKeyParams struct {
	// Specifies a time stamp when the API key will expire in milli seconds.
	ExpiringTimeMsecs NullableInt64 `json:"expiringTimeMsecs,omitempty"`
	// Specifies if the API key is active. Only an active and not expired API key can be used for authentication.
	IsActive NullableBool `json:"isActive,omitempty"`
	// Specifies the name of API key.
	Name NullableString `json:"name"`
}

// NewCreateApiKeyParams instantiates a new CreateApiKeyParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateApiKeyParams(name NullableString) *CreateApiKeyParams {
	this := CreateApiKeyParams{}
	this.Name = name
	return &this
}

// NewCreateApiKeyParamsWithDefaults instantiates a new CreateApiKeyParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateApiKeyParamsWithDefaults() *CreateApiKeyParams {
	this := CreateApiKeyParams{}
	return &this
}

// GetExpiringTimeMsecs returns the ExpiringTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateApiKeyParams) GetExpiringTimeMsecs() int64 {
	if o == nil || o.ExpiringTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiringTimeMsecs.Get()
}

// GetExpiringTimeMsecsOk returns a tuple with the ExpiringTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateApiKeyParams) GetExpiringTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiringTimeMsecs.Get(), o.ExpiringTimeMsecs.IsSet()
}

// HasExpiringTimeMsecs returns a boolean if a field has been set.
func (o *CreateApiKeyParams) HasExpiringTimeMsecs() bool {
	if o != nil && o.ExpiringTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiringTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ExpiringTimeMsecs field.
func (o *CreateApiKeyParams) SetExpiringTimeMsecs(v int64) {
	o.ExpiringTimeMsecs.Set(&v)
}
// SetExpiringTimeMsecsNil sets the value for ExpiringTimeMsecs to be an explicit nil
func (o *CreateApiKeyParams) SetExpiringTimeMsecsNil() {
	o.ExpiringTimeMsecs.Set(nil)
}

// UnsetExpiringTimeMsecs ensures that no value is present for ExpiringTimeMsecs, not even an explicit nil
func (o *CreateApiKeyParams) UnsetExpiringTimeMsecs() {
	o.ExpiringTimeMsecs.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateApiKeyParams) GetIsActive() bool {
	if o == nil || o.IsActive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateApiKeyParams) GetIsActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *CreateApiKeyParams) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *CreateApiKeyParams) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *CreateApiKeyParams) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *CreateApiKeyParams) UnsetIsActive() {
	o.IsActive.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateApiKeyParams) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateApiKeyParams) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CreateApiKeyParams) SetName(v string) {
	o.Name.Set(&v)
}

func (o CreateApiKeyParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpiringTimeMsecs.IsSet() {
		toSerialize["expiringTimeMsecs"] = o.ExpiringTimeMsecs.Get()
	}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateApiKeyParams struct {
	value *CreateApiKeyParams
	isSet bool
}

func (v NullableCreateApiKeyParams) Get() *CreateApiKeyParams {
	return v.value
}

func (v *NullableCreateApiKeyParams) Set(val *CreateApiKeyParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateApiKeyParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateApiKeyParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateApiKeyParams(val *CreateApiKeyParams) *NullableCreateApiKeyParams {
	return &NullableCreateApiKeyParams{value: val, isSet: true}
}

func (v NullableCreateApiKeyParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateApiKeyParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


