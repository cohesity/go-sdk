/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CreatedApiKey Specifies a created API key.
type CreatedApiKey struct {
	// Specifies the API key created time in milli seconds.
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies the user sid who created this API key.
	CreatedUserSid NullableString `json:"createdUserSid,omitempty"`
	// Specifies the username who created this API key.
	CreatedUsername NullableString `json:"createdUsername,omitempty"`
	// Specifies a time stamp when the API key will expire in milli seconds.
	ExpiringTimeMsecs NullableInt64 `json:"expiringTimeMsecs,omitempty"`
	// Specifies the API key id.
	Id NullableString `json:"id,omitempty"`
	// Specifies if the API key is active. Only an active and not expired API key can be used for authentication.
	IsActive NullableBool `json:"isActive,omitempty"`
	// Specifies if the API key is expired. Expired API keys cannot be used for authentication.
	IsExpired NullableBool `json:"isExpired,omitempty"`
	// Specifies the created key.
	Key NullableString `json:"key,omitempty"`
	// Specifies the API key name.
	Name NullableString `json:"name,omitempty"`
	// Specifies the user sid who owns this API key.
	OwnerUserSid NullableString `json:"ownerUserSid,omitempty"`
	// Specifies the username who owns this API key.
	OwnerUsername NullableString `json:"ownerUsername,omitempty"`
}

// NewCreatedApiKey instantiates a new CreatedApiKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatedApiKey() *CreatedApiKey {
	this := CreatedApiKey{}
	return &this
}

// NewCreatedApiKeyWithDefaults instantiates a new CreatedApiKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatedApiKeyWithDefaults() *CreatedApiKey {
	this := CreatedApiKey{}
	return &this
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetCreatedTimeMsecs() int64 {
	if o == nil || o.CreatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *CreatedApiKey) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *CreatedApiKey) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *CreatedApiKey) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *CreatedApiKey) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetCreatedUserSid returns the CreatedUserSid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetCreatedUserSid() string {
	if o == nil || o.CreatedUserSid.Get() == nil {
		var ret string
		return ret
	}
	return *o.CreatedUserSid.Get()
}

// GetCreatedUserSidOk returns a tuple with the CreatedUserSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetCreatedUserSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedUserSid.Get(), o.CreatedUserSid.IsSet()
}

// HasCreatedUserSid returns a boolean if a field has been set.
func (o *CreatedApiKey) HasCreatedUserSid() bool {
	if o != nil && o.CreatedUserSid.IsSet() {
		return true
	}

	return false
}

// SetCreatedUserSid gets a reference to the given NullableString and assigns it to the CreatedUserSid field.
func (o *CreatedApiKey) SetCreatedUserSid(v string) {
	o.CreatedUserSid.Set(&v)
}
// SetCreatedUserSidNil sets the value for CreatedUserSid to be an explicit nil
func (o *CreatedApiKey) SetCreatedUserSidNil() {
	o.CreatedUserSid.Set(nil)
}

// UnsetCreatedUserSid ensures that no value is present for CreatedUserSid, not even an explicit nil
func (o *CreatedApiKey) UnsetCreatedUserSid() {
	o.CreatedUserSid.Unset()
}

// GetCreatedUsername returns the CreatedUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetCreatedUsername() string {
	if o == nil || o.CreatedUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.CreatedUsername.Get()
}

// GetCreatedUsernameOk returns a tuple with the CreatedUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetCreatedUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedUsername.Get(), o.CreatedUsername.IsSet()
}

// HasCreatedUsername returns a boolean if a field has been set.
func (o *CreatedApiKey) HasCreatedUsername() bool {
	if o != nil && o.CreatedUsername.IsSet() {
		return true
	}

	return false
}

// SetCreatedUsername gets a reference to the given NullableString and assigns it to the CreatedUsername field.
func (o *CreatedApiKey) SetCreatedUsername(v string) {
	o.CreatedUsername.Set(&v)
}
// SetCreatedUsernameNil sets the value for CreatedUsername to be an explicit nil
func (o *CreatedApiKey) SetCreatedUsernameNil() {
	o.CreatedUsername.Set(nil)
}

// UnsetCreatedUsername ensures that no value is present for CreatedUsername, not even an explicit nil
func (o *CreatedApiKey) UnsetCreatedUsername() {
	o.CreatedUsername.Unset()
}

// GetExpiringTimeMsecs returns the ExpiringTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetExpiringTimeMsecs() int64 {
	if o == nil || o.ExpiringTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiringTimeMsecs.Get()
}

// GetExpiringTimeMsecsOk returns a tuple with the ExpiringTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetExpiringTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiringTimeMsecs.Get(), o.ExpiringTimeMsecs.IsSet()
}

// HasExpiringTimeMsecs returns a boolean if a field has been set.
func (o *CreatedApiKey) HasExpiringTimeMsecs() bool {
	if o != nil && o.ExpiringTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiringTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ExpiringTimeMsecs field.
func (o *CreatedApiKey) SetExpiringTimeMsecs(v int64) {
	o.ExpiringTimeMsecs.Set(&v)
}
// SetExpiringTimeMsecsNil sets the value for ExpiringTimeMsecs to be an explicit nil
func (o *CreatedApiKey) SetExpiringTimeMsecsNil() {
	o.ExpiringTimeMsecs.Set(nil)
}

// UnsetExpiringTimeMsecs ensures that no value is present for ExpiringTimeMsecs, not even an explicit nil
func (o *CreatedApiKey) UnsetExpiringTimeMsecs() {
	o.ExpiringTimeMsecs.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CreatedApiKey) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CreatedApiKey) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CreatedApiKey) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CreatedApiKey) UnsetId() {
	o.Id.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetIsActive() bool {
	if o == nil || o.IsActive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetIsActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *CreatedApiKey) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *CreatedApiKey) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *CreatedApiKey) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *CreatedApiKey) UnsetIsActive() {
	o.IsActive.Unset()
}

// GetIsExpired returns the IsExpired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetIsExpired() bool {
	if o == nil || o.IsExpired.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsExpired.Get()
}

// GetIsExpiredOk returns a tuple with the IsExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetIsExpiredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsExpired.Get(), o.IsExpired.IsSet()
}

// HasIsExpired returns a boolean if a field has been set.
func (o *CreatedApiKey) HasIsExpired() bool {
	if o != nil && o.IsExpired.IsSet() {
		return true
	}

	return false
}

// SetIsExpired gets a reference to the given NullableBool and assigns it to the IsExpired field.
func (o *CreatedApiKey) SetIsExpired(v bool) {
	o.IsExpired.Set(&v)
}
// SetIsExpiredNil sets the value for IsExpired to be an explicit nil
func (o *CreatedApiKey) SetIsExpiredNil() {
	o.IsExpired.Set(nil)
}

// UnsetIsExpired ensures that no value is present for IsExpired, not even an explicit nil
func (o *CreatedApiKey) UnsetIsExpired() {
	o.IsExpired.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetKey() string {
	if o == nil || o.Key.Get() == nil {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *CreatedApiKey) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *CreatedApiKey) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *CreatedApiKey) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *CreatedApiKey) UnsetKey() {
	o.Key.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CreatedApiKey) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CreatedApiKey) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CreatedApiKey) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CreatedApiKey) UnsetName() {
	o.Name.Unset()
}

// GetOwnerUserSid returns the OwnerUserSid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetOwnerUserSid() string {
	if o == nil || o.OwnerUserSid.Get() == nil {
		var ret string
		return ret
	}
	return *o.OwnerUserSid.Get()
}

// GetOwnerUserSidOk returns a tuple with the OwnerUserSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetOwnerUserSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerUserSid.Get(), o.OwnerUserSid.IsSet()
}

// HasOwnerUserSid returns a boolean if a field has been set.
func (o *CreatedApiKey) HasOwnerUserSid() bool {
	if o != nil && o.OwnerUserSid.IsSet() {
		return true
	}

	return false
}

// SetOwnerUserSid gets a reference to the given NullableString and assigns it to the OwnerUserSid field.
func (o *CreatedApiKey) SetOwnerUserSid(v string) {
	o.OwnerUserSid.Set(&v)
}
// SetOwnerUserSidNil sets the value for OwnerUserSid to be an explicit nil
func (o *CreatedApiKey) SetOwnerUserSidNil() {
	o.OwnerUserSid.Set(nil)
}

// UnsetOwnerUserSid ensures that no value is present for OwnerUserSid, not even an explicit nil
func (o *CreatedApiKey) UnsetOwnerUserSid() {
	o.OwnerUserSid.Unset()
}

// GetOwnerUsername returns the OwnerUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatedApiKey) GetOwnerUsername() string {
	if o == nil || o.OwnerUsername.Get() == nil {
		var ret string
		return ret
	}
	return *o.OwnerUsername.Get()
}

// GetOwnerUsernameOk returns a tuple with the OwnerUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatedApiKey) GetOwnerUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerUsername.Get(), o.OwnerUsername.IsSet()
}

// HasOwnerUsername returns a boolean if a field has been set.
func (o *CreatedApiKey) HasOwnerUsername() bool {
	if o != nil && o.OwnerUsername.IsSet() {
		return true
	}

	return false
}

// SetOwnerUsername gets a reference to the given NullableString and assigns it to the OwnerUsername field.
func (o *CreatedApiKey) SetOwnerUsername(v string) {
	o.OwnerUsername.Set(&v)
}
// SetOwnerUsernameNil sets the value for OwnerUsername to be an explicit nil
func (o *CreatedApiKey) SetOwnerUsernameNil() {
	o.OwnerUsername.Set(nil)
}

// UnsetOwnerUsername ensures that no value is present for OwnerUsername, not even an explicit nil
func (o *CreatedApiKey) UnsetOwnerUsername() {
	o.OwnerUsername.Unset()
}

func (o CreatedApiKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if o.CreatedUserSid.IsSet() {
		toSerialize["createdUserSid"] = o.CreatedUserSid.Get()
	}
	if o.CreatedUsername.IsSet() {
		toSerialize["createdUsername"] = o.CreatedUsername.Get()
	}
	if o.ExpiringTimeMsecs.IsSet() {
		toSerialize["expiringTimeMsecs"] = o.ExpiringTimeMsecs.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	if o.IsExpired.IsSet() {
		toSerialize["isExpired"] = o.IsExpired.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.OwnerUserSid.IsSet() {
		toSerialize["ownerUserSid"] = o.OwnerUserSid.Get()
	}
	if o.OwnerUsername.IsSet() {
		toSerialize["ownerUsername"] = o.OwnerUsername.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreatedApiKey struct {
	value *CreatedApiKey
	isSet bool
}

func (v NullableCreatedApiKey) Get() *CreatedApiKey {
	return v.value
}

func (v *NullableCreatedApiKey) Set(val *CreatedApiKey) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatedApiKey) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatedApiKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatedApiKey(val *CreatedApiKey) *NullableCreatedApiKey {
	return &NullableCreatedApiKey{value: val, isSet: true}
}

func (v NullableCreatedApiKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatedApiKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


