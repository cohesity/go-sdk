/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AzureManagedDiskParams Contains managed disk parameters needed to deploy to Azure using managed disk.
type AzureManagedDiskParams struct {
	// SKU type for data disks.
	DataDisksSkuType NullableInt32 `json:"dataDisksSkuType,omitempty"`
	// SKU type for OS disk.
	OsDiskSkuType NullableInt32 `json:"osDiskSkuType,omitempty"`
}

// NewAzureManagedDiskParams instantiates a new AzureManagedDiskParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureManagedDiskParams() *AzureManagedDiskParams {
	this := AzureManagedDiskParams{}
	return &this
}

// NewAzureManagedDiskParamsWithDefaults instantiates a new AzureManagedDiskParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureManagedDiskParamsWithDefaults() *AzureManagedDiskParams {
	this := AzureManagedDiskParams{}
	return &this
}

// GetDataDisksSkuType returns the DataDisksSkuType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureManagedDiskParams) GetDataDisksSkuType() int32 {
	if o == nil || o.DataDisksSkuType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DataDisksSkuType.Get()
}

// GetDataDisksSkuTypeOk returns a tuple with the DataDisksSkuType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureManagedDiskParams) GetDataDisksSkuTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataDisksSkuType.Get(), o.DataDisksSkuType.IsSet()
}

// HasDataDisksSkuType returns a boolean if a field has been set.
func (o *AzureManagedDiskParams) HasDataDisksSkuType() bool {
	if o != nil && o.DataDisksSkuType.IsSet() {
		return true
	}

	return false
}

// SetDataDisksSkuType gets a reference to the given NullableInt32 and assigns it to the DataDisksSkuType field.
func (o *AzureManagedDiskParams) SetDataDisksSkuType(v int32) {
	o.DataDisksSkuType.Set(&v)
}
// SetDataDisksSkuTypeNil sets the value for DataDisksSkuType to be an explicit nil
func (o *AzureManagedDiskParams) SetDataDisksSkuTypeNil() {
	o.DataDisksSkuType.Set(nil)
}

// UnsetDataDisksSkuType ensures that no value is present for DataDisksSkuType, not even an explicit nil
func (o *AzureManagedDiskParams) UnsetDataDisksSkuType() {
	o.DataDisksSkuType.Unset()
}

// GetOsDiskSkuType returns the OsDiskSkuType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureManagedDiskParams) GetOsDiskSkuType() int32 {
	if o == nil || o.OsDiskSkuType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.OsDiskSkuType.Get()
}

// GetOsDiskSkuTypeOk returns a tuple with the OsDiskSkuType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureManagedDiskParams) GetOsDiskSkuTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OsDiskSkuType.Get(), o.OsDiskSkuType.IsSet()
}

// HasOsDiskSkuType returns a boolean if a field has been set.
func (o *AzureManagedDiskParams) HasOsDiskSkuType() bool {
	if o != nil && o.OsDiskSkuType.IsSet() {
		return true
	}

	return false
}

// SetOsDiskSkuType gets a reference to the given NullableInt32 and assigns it to the OsDiskSkuType field.
func (o *AzureManagedDiskParams) SetOsDiskSkuType(v int32) {
	o.OsDiskSkuType.Set(&v)
}
// SetOsDiskSkuTypeNil sets the value for OsDiskSkuType to be an explicit nil
func (o *AzureManagedDiskParams) SetOsDiskSkuTypeNil() {
	o.OsDiskSkuType.Set(nil)
}

// UnsetOsDiskSkuType ensures that no value is present for OsDiskSkuType, not even an explicit nil
func (o *AzureManagedDiskParams) UnsetOsDiskSkuType() {
	o.OsDiskSkuType.Unset()
}

func (o AzureManagedDiskParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataDisksSkuType.IsSet() {
		toSerialize["dataDisksSkuType"] = o.DataDisksSkuType.Get()
	}
	if o.OsDiskSkuType.IsSet() {
		toSerialize["osDiskSkuType"] = o.OsDiskSkuType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAzureManagedDiskParams struct {
	value *AzureManagedDiskParams
	isSet bool
}

func (v NullableAzureManagedDiskParams) Get() *AzureManagedDiskParams {
	return v.value
}

func (v *NullableAzureManagedDiskParams) Set(val *AzureManagedDiskParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureManagedDiskParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureManagedDiskParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureManagedDiskParams(val *AzureManagedDiskParams) *NullableAzureManagedDiskParams {
	return &NullableAzureManagedDiskParams{value: val, isSet: true}
}

func (v NullableAzureManagedDiskParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureManagedDiskParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


