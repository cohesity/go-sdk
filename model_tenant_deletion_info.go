/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TenantDeletionInfo TenantDeletionInfo captures the individual deletion state of a category of objects marked tagged with a tenant_id (which has been marked for deletion).
type TenantDeletionInfo struct {
	// Specifies the category of objects whose deletion state is being captured.
	Category NullableInt32 `json:"category,omitempty"`
	// Specifies the time when the process finished.
	FinishedAtTimeMsecs NullableInt64 `json:"finishedAtTimeMsecs,omitempty"`
	// Specifies the node ip where the process ran. Typically this would be Iris Master.
	ProcessedAtNode NullableString `json:"processedAtNode,omitempty"`
	// Specifies the number of times this task has been retried.
	RetryCount NullableInt64 `json:"retryCount,omitempty"`
	// Specifies the time when the process started.
	StartedAtTimeMsecs NullableInt64 `json:"startedAtTimeMsecs,omitempty"`
	// Specifies the deletion completion state of the object category.
	State NullableInt32 `json:"state,omitempty"`
}

// NewTenantDeletionInfo instantiates a new TenantDeletionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantDeletionInfo() *TenantDeletionInfo {
	this := TenantDeletionInfo{}
	return &this
}

// NewTenantDeletionInfoWithDefaults instantiates a new TenantDeletionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantDeletionInfoWithDefaults() *TenantDeletionInfo {
	this := TenantDeletionInfo{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDeletionInfo) GetCategory() int32 {
	if o == nil || o.Category.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDeletionInfo) GetCategoryOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *TenantDeletionInfo) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableInt32 and assigns it to the Category field.
func (o *TenantDeletionInfo) SetCategory(v int32) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *TenantDeletionInfo) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *TenantDeletionInfo) UnsetCategory() {
	o.Category.Unset()
}

// GetFinishedAtTimeMsecs returns the FinishedAtTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDeletionInfo) GetFinishedAtTimeMsecs() int64 {
	if o == nil || o.FinishedAtTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FinishedAtTimeMsecs.Get()
}

// GetFinishedAtTimeMsecsOk returns a tuple with the FinishedAtTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDeletionInfo) GetFinishedAtTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FinishedAtTimeMsecs.Get(), o.FinishedAtTimeMsecs.IsSet()
}

// HasFinishedAtTimeMsecs returns a boolean if a field has been set.
func (o *TenantDeletionInfo) HasFinishedAtTimeMsecs() bool {
	if o != nil && o.FinishedAtTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetFinishedAtTimeMsecs gets a reference to the given NullableInt64 and assigns it to the FinishedAtTimeMsecs field.
func (o *TenantDeletionInfo) SetFinishedAtTimeMsecs(v int64) {
	o.FinishedAtTimeMsecs.Set(&v)
}
// SetFinishedAtTimeMsecsNil sets the value for FinishedAtTimeMsecs to be an explicit nil
func (o *TenantDeletionInfo) SetFinishedAtTimeMsecsNil() {
	o.FinishedAtTimeMsecs.Set(nil)
}

// UnsetFinishedAtTimeMsecs ensures that no value is present for FinishedAtTimeMsecs, not even an explicit nil
func (o *TenantDeletionInfo) UnsetFinishedAtTimeMsecs() {
	o.FinishedAtTimeMsecs.Unset()
}

// GetProcessedAtNode returns the ProcessedAtNode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDeletionInfo) GetProcessedAtNode() string {
	if o == nil || o.ProcessedAtNode.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProcessedAtNode.Get()
}

// GetProcessedAtNodeOk returns a tuple with the ProcessedAtNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDeletionInfo) GetProcessedAtNodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProcessedAtNode.Get(), o.ProcessedAtNode.IsSet()
}

// HasProcessedAtNode returns a boolean if a field has been set.
func (o *TenantDeletionInfo) HasProcessedAtNode() bool {
	if o != nil && o.ProcessedAtNode.IsSet() {
		return true
	}

	return false
}

// SetProcessedAtNode gets a reference to the given NullableString and assigns it to the ProcessedAtNode field.
func (o *TenantDeletionInfo) SetProcessedAtNode(v string) {
	o.ProcessedAtNode.Set(&v)
}
// SetProcessedAtNodeNil sets the value for ProcessedAtNode to be an explicit nil
func (o *TenantDeletionInfo) SetProcessedAtNodeNil() {
	o.ProcessedAtNode.Set(nil)
}

// UnsetProcessedAtNode ensures that no value is present for ProcessedAtNode, not even an explicit nil
func (o *TenantDeletionInfo) UnsetProcessedAtNode() {
	o.ProcessedAtNode.Unset()
}

// GetRetryCount returns the RetryCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDeletionInfo) GetRetryCount() int64 {
	if o == nil || o.RetryCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RetryCount.Get()
}

// GetRetryCountOk returns a tuple with the RetryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDeletionInfo) GetRetryCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RetryCount.Get(), o.RetryCount.IsSet()
}

// HasRetryCount returns a boolean if a field has been set.
func (o *TenantDeletionInfo) HasRetryCount() bool {
	if o != nil && o.RetryCount.IsSet() {
		return true
	}

	return false
}

// SetRetryCount gets a reference to the given NullableInt64 and assigns it to the RetryCount field.
func (o *TenantDeletionInfo) SetRetryCount(v int64) {
	o.RetryCount.Set(&v)
}
// SetRetryCountNil sets the value for RetryCount to be an explicit nil
func (o *TenantDeletionInfo) SetRetryCountNil() {
	o.RetryCount.Set(nil)
}

// UnsetRetryCount ensures that no value is present for RetryCount, not even an explicit nil
func (o *TenantDeletionInfo) UnsetRetryCount() {
	o.RetryCount.Unset()
}

// GetStartedAtTimeMsecs returns the StartedAtTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDeletionInfo) GetStartedAtTimeMsecs() int64 {
	if o == nil || o.StartedAtTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartedAtTimeMsecs.Get()
}

// GetStartedAtTimeMsecsOk returns a tuple with the StartedAtTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDeletionInfo) GetStartedAtTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartedAtTimeMsecs.Get(), o.StartedAtTimeMsecs.IsSet()
}

// HasStartedAtTimeMsecs returns a boolean if a field has been set.
func (o *TenantDeletionInfo) HasStartedAtTimeMsecs() bool {
	if o != nil && o.StartedAtTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetStartedAtTimeMsecs gets a reference to the given NullableInt64 and assigns it to the StartedAtTimeMsecs field.
func (o *TenantDeletionInfo) SetStartedAtTimeMsecs(v int64) {
	o.StartedAtTimeMsecs.Set(&v)
}
// SetStartedAtTimeMsecsNil sets the value for StartedAtTimeMsecs to be an explicit nil
func (o *TenantDeletionInfo) SetStartedAtTimeMsecsNil() {
	o.StartedAtTimeMsecs.Set(nil)
}

// UnsetStartedAtTimeMsecs ensures that no value is present for StartedAtTimeMsecs, not even an explicit nil
func (o *TenantDeletionInfo) UnsetStartedAtTimeMsecs() {
	o.StartedAtTimeMsecs.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDeletionInfo) GetState() int32 {
	if o == nil || o.State.Get() == nil {
		var ret int32
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDeletionInfo) GetStateOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *TenantDeletionInfo) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableInt32 and assigns it to the State field.
func (o *TenantDeletionInfo) SetState(v int32) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *TenantDeletionInfo) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *TenantDeletionInfo) UnsetState() {
	o.State.Unset()
}

func (o TenantDeletionInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.FinishedAtTimeMsecs.IsSet() {
		toSerialize["finishedAtTimeMsecs"] = o.FinishedAtTimeMsecs.Get()
	}
	if o.ProcessedAtNode.IsSet() {
		toSerialize["processedAtNode"] = o.ProcessedAtNode.Get()
	}
	if o.RetryCount.IsSet() {
		toSerialize["retryCount"] = o.RetryCount.Get()
	}
	if o.StartedAtTimeMsecs.IsSet() {
		toSerialize["startedAtTimeMsecs"] = o.StartedAtTimeMsecs.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTenantDeletionInfo struct {
	value *TenantDeletionInfo
	isSet bool
}

func (v NullableTenantDeletionInfo) Get() *TenantDeletionInfo {
	return v.value
}

func (v *NullableTenantDeletionInfo) Set(val *TenantDeletionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantDeletionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantDeletionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantDeletionInfo(val *TenantDeletionInfo) *NullableTenantDeletionInfo {
	return &NullableTenantDeletionInfo{value: val, isSet: true}
}

func (v NullableTenantDeletionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantDeletionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


