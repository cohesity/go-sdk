/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ArchivalTarget Message that specifies the details about an archival target (such as cloud or tape) where backup snapshots may be archived to.
type ArchivalTarget struct {
	// The name of the archival target.
	Name NullableString `json:"name,omitempty"`
	// The type of the archival target.
	Type NullableInt32 `json:"type,omitempty"`
	// The id of the archival vault.
	VaultId NullableInt64 `json:"vaultId,omitempty"`
}

// NewArchivalTarget instantiates a new ArchivalTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalTarget() *ArchivalTarget {
	this := ArchivalTarget{}
	return &this
}

// NewArchivalTargetWithDefaults instantiates a new ArchivalTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalTargetWithDefaults() *ArchivalTarget {
	this := ArchivalTarget{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTarget) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTarget) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ArchivalTarget) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ArchivalTarget) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ArchivalTarget) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ArchivalTarget) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTarget) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTarget) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ArchivalTarget) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *ArchivalTarget) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ArchivalTarget) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ArchivalTarget) UnsetType() {
	o.Type.Unset()
}

// GetVaultId returns the VaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTarget) GetVaultId() int64 {
	if o == nil || o.VaultId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VaultId.Get()
}

// GetVaultIdOk returns a tuple with the VaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTarget) GetVaultIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VaultId.Get(), o.VaultId.IsSet()
}

// HasVaultId returns a boolean if a field has been set.
func (o *ArchivalTarget) HasVaultId() bool {
	if o != nil && o.VaultId.IsSet() {
		return true
	}

	return false
}

// SetVaultId gets a reference to the given NullableInt64 and assigns it to the VaultId field.
func (o *ArchivalTarget) SetVaultId(v int64) {
	o.VaultId.Set(&v)
}
// SetVaultIdNil sets the value for VaultId to be an explicit nil
func (o *ArchivalTarget) SetVaultIdNil() {
	o.VaultId.Set(nil)
}

// UnsetVaultId ensures that no value is present for VaultId, not even an explicit nil
func (o *ArchivalTarget) UnsetVaultId() {
	o.VaultId.Unset()
}

func (o ArchivalTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.VaultId.IsSet() {
		toSerialize["vaultId"] = o.VaultId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableArchivalTarget struct {
	value *ArchivalTarget
	isSet bool
}

func (v NullableArchivalTarget) Get() *ArchivalTarget {
	return v.value
}

func (v *NullableArchivalTarget) Set(val *ArchivalTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalTarget(val *ArchivalTarget) *NullableArchivalTarget {
	return &NullableArchivalTarget{value: val, isSet: true}
}

func (v NullableArchivalTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


