/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ObjectsByEnv Number of Objects by Type.
type ObjectsByEnv struct {
	// Environment Type.
	EnvType NullableString `json:"envType,omitempty"`
	// Number of Objects.
	NumObjects NullableInt32 `json:"numObjects,omitempty"`
}

// NewObjectsByEnv instantiates a new ObjectsByEnv object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectsByEnv() *ObjectsByEnv {
	this := ObjectsByEnv{}
	return &this
}

// NewObjectsByEnvWithDefaults instantiates a new ObjectsByEnv object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectsByEnvWithDefaults() *ObjectsByEnv {
	this := ObjectsByEnv{}
	return &this
}

// GetEnvType returns the EnvType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectsByEnv) GetEnvType() string {
	if o == nil || o.EnvType.Get() == nil {
		var ret string
		return ret
	}
	return *o.EnvType.Get()
}

// GetEnvTypeOk returns a tuple with the EnvType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectsByEnv) GetEnvTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnvType.Get(), o.EnvType.IsSet()
}

// HasEnvType returns a boolean if a field has been set.
func (o *ObjectsByEnv) HasEnvType() bool {
	if o != nil && o.EnvType.IsSet() {
		return true
	}

	return false
}

// SetEnvType gets a reference to the given NullableString and assigns it to the EnvType field.
func (o *ObjectsByEnv) SetEnvType(v string) {
	o.EnvType.Set(&v)
}
// SetEnvTypeNil sets the value for EnvType to be an explicit nil
func (o *ObjectsByEnv) SetEnvTypeNil() {
	o.EnvType.Set(nil)
}

// UnsetEnvType ensures that no value is present for EnvType, not even an explicit nil
func (o *ObjectsByEnv) UnsetEnvType() {
	o.EnvType.Unset()
}

// GetNumObjects returns the NumObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectsByEnv) GetNumObjects() int32 {
	if o == nil || o.NumObjects.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumObjects.Get()
}

// GetNumObjectsOk returns a tuple with the NumObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectsByEnv) GetNumObjectsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumObjects.Get(), o.NumObjects.IsSet()
}

// HasNumObjects returns a boolean if a field has been set.
func (o *ObjectsByEnv) HasNumObjects() bool {
	if o != nil && o.NumObjects.IsSet() {
		return true
	}

	return false
}

// SetNumObjects gets a reference to the given NullableInt32 and assigns it to the NumObjects field.
func (o *ObjectsByEnv) SetNumObjects(v int32) {
	o.NumObjects.Set(&v)
}
// SetNumObjectsNil sets the value for NumObjects to be an explicit nil
func (o *ObjectsByEnv) SetNumObjectsNil() {
	o.NumObjects.Set(nil)
}

// UnsetNumObjects ensures that no value is present for NumObjects, not even an explicit nil
func (o *ObjectsByEnv) UnsetNumObjects() {
	o.NumObjects.Unset()
}

func (o ObjectsByEnv) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnvType.IsSet() {
		toSerialize["envType"] = o.EnvType.Get()
	}
	if o.NumObjects.IsSet() {
		toSerialize["numObjects"] = o.NumObjects.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableObjectsByEnv struct {
	value *ObjectsByEnv
	isSet bool
}

func (v NullableObjectsByEnv) Get() *ObjectsByEnv {
	return v.value
}

func (v *NullableObjectsByEnv) Set(val *ObjectsByEnv) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectsByEnv) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectsByEnv) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectsByEnv(val *ObjectsByEnv) *NullableObjectsByEnv {
	return &NullableObjectsByEnv{value: val, isSet: true}
}

func (v NullableObjectsByEnv) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectsByEnv) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


