/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CreateBondParameters Specifies the parameters needed to create a bond.
type CreateBondParameters struct {
	// Specifies the bonding mode to use for this bond. If not specified, this value will default to 'kActiveBackup'. 'kActiveBackup' indicates active backup bonding mode. 'k802_3ad' indicates 802.3ad bonding mode.
	BondingMode NullableString `json:"bondingMode,omitempty"`
	// Specifies a unique name to identify the bond being created.
	Name NullableString `json:"name"`
	// Specifies the names of the slaves of this bond.
	Slaves []string `json:"slaves"`
}

// NewCreateBondParameters instantiates a new CreateBondParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateBondParameters(name NullableString, slaves []string) *CreateBondParameters {
	this := CreateBondParameters{}
	this.Name = name
	this.Slaves = slaves
	return &this
}

// NewCreateBondParametersWithDefaults instantiates a new CreateBondParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateBondParametersWithDefaults() *CreateBondParameters {
	this := CreateBondParameters{}
	return &this
}

// GetBondingMode returns the BondingMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateBondParameters) GetBondingMode() string {
	if o == nil || o.BondingMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.BondingMode.Get()
}

// GetBondingModeOk returns a tuple with the BondingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateBondParameters) GetBondingModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BondingMode.Get(), o.BondingMode.IsSet()
}

// HasBondingMode returns a boolean if a field has been set.
func (o *CreateBondParameters) HasBondingMode() bool {
	if o != nil && o.BondingMode.IsSet() {
		return true
	}

	return false
}

// SetBondingMode gets a reference to the given NullableString and assigns it to the BondingMode field.
func (o *CreateBondParameters) SetBondingMode(v string) {
	o.BondingMode.Set(&v)
}
// SetBondingModeNil sets the value for BondingMode to be an explicit nil
func (o *CreateBondParameters) SetBondingModeNil() {
	o.BondingMode.Set(nil)
}

// UnsetBondingMode ensures that no value is present for BondingMode, not even an explicit nil
func (o *CreateBondParameters) UnsetBondingMode() {
	o.BondingMode.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateBondParameters) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateBondParameters) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CreateBondParameters) SetName(v string) {
	o.Name.Set(&v)
}

// GetSlaves returns the Slaves field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *CreateBondParameters) GetSlaves() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Slaves
}

// GetSlavesOk returns a tuple with the Slaves field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateBondParameters) GetSlavesOk() (*[]string, bool) {
	if o == nil || o.Slaves == nil {
		return nil, false
	}
	return &o.Slaves, true
}

// SetSlaves sets field value
func (o *CreateBondParameters) SetSlaves(v []string) {
	o.Slaves = v
}

func (o CreateBondParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BondingMode.IsSet() {
		toSerialize["bondingMode"] = o.BondingMode.Get()
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Slaves != nil {
		toSerialize["slaves"] = o.Slaves
	}
	return json.Marshal(toSerialize)
}

type NullableCreateBondParameters struct {
	value *CreateBondParameters
	isSet bool
}

func (v NullableCreateBondParameters) Get() *CreateBondParameters {
	return v.value
}

func (v *NullableCreateBondParameters) Set(val *CreateBondParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateBondParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateBondParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateBondParameters(val *CreateBondParameters) *NullableCreateBondParameters {
	return &NullableCreateBondParameters{value: val, isSet: true}
}

func (v NullableCreateBondParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateBondParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


