/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SourceBackupStatus Specifies the source object to protect and the current backup status.
type SourceBackupStatus struct {
	// Specifies the backup status at app/DB level.
	AppsBackupStatus []AppEntityBackupStatusInfo `json:"appsBackupStatus,omitempty"`
	CurrentSnapshotInfo *SnapshotInfo `json:"currentSnapshotInfo,omitempty"`
	// Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.
	Error NullableString `json:"error,omitempty"`
	// Specifies whether this is a 'kFull' or 'kRegular' backup of the Run. This may be true even if the scheduled backup type is 'kRegular'. This will happen when this run corresponds to the first backup run of the Job or if no previous snapshot information is found.
	IsFullBackup NullableBool `json:"isFullBackup,omitempty"`
	// Specifies the number of times the task was restarted because of the changes on the backup source host.
	NumRestarts NullableInt32 `json:"numRestarts,omitempty"`
	// Specifies the id of the registered Protection Source that is the parent of the Objects that are protected by this Job Run.
	ParentSourceId NullableInt64 `json:"parentSourceId,omitempty"`
	// Specifies the yoda progress monitor task path which is used to get pulse information about the source that is being backed up.
	ProgressMonitorTaskPath NullableString `json:"progressMonitorTaskPath,omitempty"`
	// Specifies if app-consistent snapshot was captured. This field is set to true, if an app-consistent snapshot was taken by quiescing applications and the file system before taking a backup.
	Quiesced NullableBool `json:"quiesced,omitempty"`
	// Specifies if the SLA was violated for the Job Run. This field is set to true, if time to complete the Job Run is longer than the SLA specified. This field is populated when the status is set to 'kSuccess' or 'kFailure'.
	SlaViolated NullableBool `json:"slaViolated,omitempty"`
	Source *ProtectionSource `json:"source,omitempty"`
	Stats *BackupSourceStats `json:"stats,omitempty"`
	// Specifies the status of the source object being protected. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed. 'kWarning' indicates the task has finished with warning. 'kOnHold' indicates the task is kept onHold. 'kMissed' indicates the task is missed.
	Status NullableString `json:"status,omitempty"`
	// Array of Warnings.  Specifies the warnings that occurred (if any) while running this task.
	Warnings []string `json:"warnings,omitempty"`
}

// NewSourceBackupStatus instantiates a new SourceBackupStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceBackupStatus() *SourceBackupStatus {
	this := SourceBackupStatus{}
	return &this
}

// NewSourceBackupStatusWithDefaults instantiates a new SourceBackupStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceBackupStatusWithDefaults() *SourceBackupStatus {
	this := SourceBackupStatus{}
	return &this
}

// GetAppsBackupStatus returns the AppsBackupStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceBackupStatus) GetAppsBackupStatus() []AppEntityBackupStatusInfo {
	if o == nil  {
		var ret []AppEntityBackupStatusInfo
		return ret
	}
	return o.AppsBackupStatus
}

// GetAppsBackupStatusOk returns a tuple with the AppsBackupStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceBackupStatus) GetAppsBackupStatusOk() (*[]AppEntityBackupStatusInfo, bool) {
	if o == nil || o.AppsBackupStatus == nil {
		return nil, false
	}
	return &o.AppsBackupStatus, true
}

// HasAppsBackupStatus returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasAppsBackupStatus() bool {
	if o != nil && o.AppsBackupStatus != nil {
		return true
	}

	return false
}

// SetAppsBackupStatus gets a reference to the given []AppEntityBackupStatusInfo and assigns it to the AppsBackupStatus field.
func (o *SourceBackupStatus) SetAppsBackupStatus(v []AppEntityBackupStatusInfo) {
	o.AppsBackupStatus = v
}

// GetCurrentSnapshotInfo returns the CurrentSnapshotInfo field value if set, zero value otherwise.
func (o *SourceBackupStatus) GetCurrentSnapshotInfo() SnapshotInfo {
	if o == nil || o.CurrentSnapshotInfo == nil {
		var ret SnapshotInfo
		return ret
	}
	return *o.CurrentSnapshotInfo
}

// GetCurrentSnapshotInfoOk returns a tuple with the CurrentSnapshotInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceBackupStatus) GetCurrentSnapshotInfoOk() (*SnapshotInfo, bool) {
	if o == nil || o.CurrentSnapshotInfo == nil {
		return nil, false
	}
	return o.CurrentSnapshotInfo, true
}

// HasCurrentSnapshotInfo returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasCurrentSnapshotInfo() bool {
	if o != nil && o.CurrentSnapshotInfo != nil {
		return true
	}

	return false
}

// SetCurrentSnapshotInfo gets a reference to the given SnapshotInfo and assigns it to the CurrentSnapshotInfo field.
func (o *SourceBackupStatus) SetCurrentSnapshotInfo(v SnapshotInfo) {
	o.CurrentSnapshotInfo = &v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceBackupStatus) GetError() string {
	if o == nil || o.Error.Get() == nil {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceBackupStatus) GetErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *SourceBackupStatus) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *SourceBackupStatus) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *SourceBackupStatus) UnsetError() {
	o.Error.Unset()
}

// GetIsFullBackup returns the IsFullBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceBackupStatus) GetIsFullBackup() bool {
	if o == nil || o.IsFullBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsFullBackup.Get()
}

// GetIsFullBackupOk returns a tuple with the IsFullBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceBackupStatus) GetIsFullBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsFullBackup.Get(), o.IsFullBackup.IsSet()
}

// HasIsFullBackup returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasIsFullBackup() bool {
	if o != nil && o.IsFullBackup.IsSet() {
		return true
	}

	return false
}

// SetIsFullBackup gets a reference to the given NullableBool and assigns it to the IsFullBackup field.
func (o *SourceBackupStatus) SetIsFullBackup(v bool) {
	o.IsFullBackup.Set(&v)
}
// SetIsFullBackupNil sets the value for IsFullBackup to be an explicit nil
func (o *SourceBackupStatus) SetIsFullBackupNil() {
	o.IsFullBackup.Set(nil)
}

// UnsetIsFullBackup ensures that no value is present for IsFullBackup, not even an explicit nil
func (o *SourceBackupStatus) UnsetIsFullBackup() {
	o.IsFullBackup.Unset()
}

// GetNumRestarts returns the NumRestarts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceBackupStatus) GetNumRestarts() int32 {
	if o == nil || o.NumRestarts.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumRestarts.Get()
}

// GetNumRestartsOk returns a tuple with the NumRestarts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceBackupStatus) GetNumRestartsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumRestarts.Get(), o.NumRestarts.IsSet()
}

// HasNumRestarts returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasNumRestarts() bool {
	if o != nil && o.NumRestarts.IsSet() {
		return true
	}

	return false
}

// SetNumRestarts gets a reference to the given NullableInt32 and assigns it to the NumRestarts field.
func (o *SourceBackupStatus) SetNumRestarts(v int32) {
	o.NumRestarts.Set(&v)
}
// SetNumRestartsNil sets the value for NumRestarts to be an explicit nil
func (o *SourceBackupStatus) SetNumRestartsNil() {
	o.NumRestarts.Set(nil)
}

// UnsetNumRestarts ensures that no value is present for NumRestarts, not even an explicit nil
func (o *SourceBackupStatus) UnsetNumRestarts() {
	o.NumRestarts.Unset()
}

// GetParentSourceId returns the ParentSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceBackupStatus) GetParentSourceId() int64 {
	if o == nil || o.ParentSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ParentSourceId.Get()
}

// GetParentSourceIdOk returns a tuple with the ParentSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceBackupStatus) GetParentSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentSourceId.Get(), o.ParentSourceId.IsSet()
}

// HasParentSourceId returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasParentSourceId() bool {
	if o != nil && o.ParentSourceId.IsSet() {
		return true
	}

	return false
}

// SetParentSourceId gets a reference to the given NullableInt64 and assigns it to the ParentSourceId field.
func (o *SourceBackupStatus) SetParentSourceId(v int64) {
	o.ParentSourceId.Set(&v)
}
// SetParentSourceIdNil sets the value for ParentSourceId to be an explicit nil
func (o *SourceBackupStatus) SetParentSourceIdNil() {
	o.ParentSourceId.Set(nil)
}

// UnsetParentSourceId ensures that no value is present for ParentSourceId, not even an explicit nil
func (o *SourceBackupStatus) UnsetParentSourceId() {
	o.ParentSourceId.Unset()
}

// GetProgressMonitorTaskPath returns the ProgressMonitorTaskPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceBackupStatus) GetProgressMonitorTaskPath() string {
	if o == nil || o.ProgressMonitorTaskPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProgressMonitorTaskPath.Get()
}

// GetProgressMonitorTaskPathOk returns a tuple with the ProgressMonitorTaskPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceBackupStatus) GetProgressMonitorTaskPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProgressMonitorTaskPath.Get(), o.ProgressMonitorTaskPath.IsSet()
}

// HasProgressMonitorTaskPath returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasProgressMonitorTaskPath() bool {
	if o != nil && o.ProgressMonitorTaskPath.IsSet() {
		return true
	}

	return false
}

// SetProgressMonitorTaskPath gets a reference to the given NullableString and assigns it to the ProgressMonitorTaskPath field.
func (o *SourceBackupStatus) SetProgressMonitorTaskPath(v string) {
	o.ProgressMonitorTaskPath.Set(&v)
}
// SetProgressMonitorTaskPathNil sets the value for ProgressMonitorTaskPath to be an explicit nil
func (o *SourceBackupStatus) SetProgressMonitorTaskPathNil() {
	o.ProgressMonitorTaskPath.Set(nil)
}

// UnsetProgressMonitorTaskPath ensures that no value is present for ProgressMonitorTaskPath, not even an explicit nil
func (o *SourceBackupStatus) UnsetProgressMonitorTaskPath() {
	o.ProgressMonitorTaskPath.Unset()
}

// GetQuiesced returns the Quiesced field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceBackupStatus) GetQuiesced() bool {
	if o == nil || o.Quiesced.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Quiesced.Get()
}

// GetQuiescedOk returns a tuple with the Quiesced field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceBackupStatus) GetQuiescedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Quiesced.Get(), o.Quiesced.IsSet()
}

// HasQuiesced returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasQuiesced() bool {
	if o != nil && o.Quiesced.IsSet() {
		return true
	}

	return false
}

// SetQuiesced gets a reference to the given NullableBool and assigns it to the Quiesced field.
func (o *SourceBackupStatus) SetQuiesced(v bool) {
	o.Quiesced.Set(&v)
}
// SetQuiescedNil sets the value for Quiesced to be an explicit nil
func (o *SourceBackupStatus) SetQuiescedNil() {
	o.Quiesced.Set(nil)
}

// UnsetQuiesced ensures that no value is present for Quiesced, not even an explicit nil
func (o *SourceBackupStatus) UnsetQuiesced() {
	o.Quiesced.Unset()
}

// GetSlaViolated returns the SlaViolated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceBackupStatus) GetSlaViolated() bool {
	if o == nil || o.SlaViolated.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SlaViolated.Get()
}

// GetSlaViolatedOk returns a tuple with the SlaViolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceBackupStatus) GetSlaViolatedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SlaViolated.Get(), o.SlaViolated.IsSet()
}

// HasSlaViolated returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasSlaViolated() bool {
	if o != nil && o.SlaViolated.IsSet() {
		return true
	}

	return false
}

// SetSlaViolated gets a reference to the given NullableBool and assigns it to the SlaViolated field.
func (o *SourceBackupStatus) SetSlaViolated(v bool) {
	o.SlaViolated.Set(&v)
}
// SetSlaViolatedNil sets the value for SlaViolated to be an explicit nil
func (o *SourceBackupStatus) SetSlaViolatedNil() {
	o.SlaViolated.Set(nil)
}

// UnsetSlaViolated ensures that no value is present for SlaViolated, not even an explicit nil
func (o *SourceBackupStatus) UnsetSlaViolated() {
	o.SlaViolated.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *SourceBackupStatus) GetSource() ProtectionSource {
	if o == nil || o.Source == nil {
		var ret ProtectionSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceBackupStatus) GetSourceOk() (*ProtectionSource, bool) {
	if o == nil || o.Source == nil {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasSource() bool {
	if o != nil && o.Source != nil {
		return true
	}

	return false
}

// SetSource gets a reference to the given ProtectionSource and assigns it to the Source field.
func (o *SourceBackupStatus) SetSource(v ProtectionSource) {
	o.Source = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *SourceBackupStatus) GetStats() BackupSourceStats {
	if o == nil || o.Stats == nil {
		var ret BackupSourceStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceBackupStatus) GetStatsOk() (*BackupSourceStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given BackupSourceStats and assigns it to the Stats field.
func (o *SourceBackupStatus) SetStats(v BackupSourceStats) {
	o.Stats = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceBackupStatus) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceBackupStatus) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *SourceBackupStatus) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *SourceBackupStatus) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *SourceBackupStatus) UnsetStatus() {
	o.Status.Unset()
}

// GetWarnings returns the Warnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceBackupStatus) GetWarnings() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceBackupStatus) GetWarningsOk() (*[]string, bool) {
	if o == nil || o.Warnings == nil {
		return nil, false
	}
	return &o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *SourceBackupStatus) HasWarnings() bool {
	if o != nil && o.Warnings != nil {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *SourceBackupStatus) SetWarnings(v []string) {
	o.Warnings = v
}

func (o SourceBackupStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppsBackupStatus != nil {
		toSerialize["appsBackupStatus"] = o.AppsBackupStatus
	}
	if o.CurrentSnapshotInfo != nil {
		toSerialize["currentSnapshotInfo"] = o.CurrentSnapshotInfo
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.IsFullBackup.IsSet() {
		toSerialize["isFullBackup"] = o.IsFullBackup.Get()
	}
	if o.NumRestarts.IsSet() {
		toSerialize["numRestarts"] = o.NumRestarts.Get()
	}
	if o.ParentSourceId.IsSet() {
		toSerialize["parentSourceId"] = o.ParentSourceId.Get()
	}
	if o.ProgressMonitorTaskPath.IsSet() {
		toSerialize["progressMonitorTaskPath"] = o.ProgressMonitorTaskPath.Get()
	}
	if o.Quiesced.IsSet() {
		toSerialize["quiesced"] = o.Quiesced.Get()
	}
	if o.SlaViolated.IsSet() {
		toSerialize["slaViolated"] = o.SlaViolated.Get()
	}
	if o.Source != nil {
		toSerialize["source"] = o.Source
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return json.Marshal(toSerialize)
}

type NullableSourceBackupStatus struct {
	value *SourceBackupStatus
	isSet bool
}

func (v NullableSourceBackupStatus) Get() *SourceBackupStatus {
	return v.value
}

func (v *NullableSourceBackupStatus) Set(val *SourceBackupStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceBackupStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceBackupStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceBackupStatus(val *SourceBackupStatus) *NullableSourceBackupStatus {
	return &NullableSourceBackupStatus{value: val, isSet: true}
}

func (v NullableSourceBackupStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceBackupStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


