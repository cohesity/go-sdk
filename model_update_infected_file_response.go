/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UpdateInfectedFileResponse struct for UpdateInfectedFileResponse
type UpdateInfectedFileResponse struct {
	// Specifies the failed update infected files.
	UpdateFailedInfectedFiles []InfectedFileId `json:"updateFailedInfectedFiles,omitempty"`
	// Specifies the successfully updated infected files.
	UpdateSucceededInfectedFiles []InfectedFileId `json:"updateSucceededInfectedFiles,omitempty"`
}

// NewUpdateInfectedFileResponse instantiates a new UpdateInfectedFileResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInfectedFileResponse() *UpdateInfectedFileResponse {
	this := UpdateInfectedFileResponse{}
	return &this
}

// NewUpdateInfectedFileResponseWithDefaults instantiates a new UpdateInfectedFileResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInfectedFileResponseWithDefaults() *UpdateInfectedFileResponse {
	this := UpdateInfectedFileResponse{}
	return &this
}

// GetUpdateFailedInfectedFiles returns the UpdateFailedInfectedFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInfectedFileResponse) GetUpdateFailedInfectedFiles() []InfectedFileId {
	if o == nil  {
		var ret []InfectedFileId
		return ret
	}
	return o.UpdateFailedInfectedFiles
}

// GetUpdateFailedInfectedFilesOk returns a tuple with the UpdateFailedInfectedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInfectedFileResponse) GetUpdateFailedInfectedFilesOk() (*[]InfectedFileId, bool) {
	if o == nil || o.UpdateFailedInfectedFiles == nil {
		return nil, false
	}
	return &o.UpdateFailedInfectedFiles, true
}

// HasUpdateFailedInfectedFiles returns a boolean if a field has been set.
func (o *UpdateInfectedFileResponse) HasUpdateFailedInfectedFiles() bool {
	if o != nil && o.UpdateFailedInfectedFiles != nil {
		return true
	}

	return false
}

// SetUpdateFailedInfectedFiles gets a reference to the given []InfectedFileId and assigns it to the UpdateFailedInfectedFiles field.
func (o *UpdateInfectedFileResponse) SetUpdateFailedInfectedFiles(v []InfectedFileId) {
	o.UpdateFailedInfectedFiles = v
}

// GetUpdateSucceededInfectedFiles returns the UpdateSucceededInfectedFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInfectedFileResponse) GetUpdateSucceededInfectedFiles() []InfectedFileId {
	if o == nil  {
		var ret []InfectedFileId
		return ret
	}
	return o.UpdateSucceededInfectedFiles
}

// GetUpdateSucceededInfectedFilesOk returns a tuple with the UpdateSucceededInfectedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInfectedFileResponse) GetUpdateSucceededInfectedFilesOk() (*[]InfectedFileId, bool) {
	if o == nil || o.UpdateSucceededInfectedFiles == nil {
		return nil, false
	}
	return &o.UpdateSucceededInfectedFiles, true
}

// HasUpdateSucceededInfectedFiles returns a boolean if a field has been set.
func (o *UpdateInfectedFileResponse) HasUpdateSucceededInfectedFiles() bool {
	if o != nil && o.UpdateSucceededInfectedFiles != nil {
		return true
	}

	return false
}

// SetUpdateSucceededInfectedFiles gets a reference to the given []InfectedFileId and assigns it to the UpdateSucceededInfectedFiles field.
func (o *UpdateInfectedFileResponse) SetUpdateSucceededInfectedFiles(v []InfectedFileId) {
	o.UpdateSucceededInfectedFiles = v
}

func (o UpdateInfectedFileResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UpdateFailedInfectedFiles != nil {
		toSerialize["updateFailedInfectedFiles"] = o.UpdateFailedInfectedFiles
	}
	if o.UpdateSucceededInfectedFiles != nil {
		toSerialize["updateSucceededInfectedFiles"] = o.UpdateSucceededInfectedFiles
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateInfectedFileResponse struct {
	value *UpdateInfectedFileResponse
	isSet bool
}

func (v NullableUpdateInfectedFileResponse) Get() *UpdateInfectedFileResponse {
	return v.value
}

func (v *NullableUpdateInfectedFileResponse) Set(val *UpdateInfectedFileResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInfectedFileResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInfectedFileResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInfectedFileResponse(val *UpdateInfectedFileResponse) *NullableUpdateInfectedFileResponse {
	return &NullableUpdateInfectedFileResponse{value: val, isSet: true}
}

func (v NullableUpdateInfectedFileResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInfectedFileResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


