/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ExchangeProtectionSource Specifies an object representing an Exchange entity. DAG - Database availability group
type ExchangeProtectionSource struct {
	DagInfo *DagInfo `json:"DagInfo,omitempty"`
	ApplicationServerInfo *ApplicationServerInfo `json:"applicationServerInfo,omitempty"`
	DagDatabaseCopyInfo *ExchangeDatabaseCopyInfo `json:"dagDatabaseCopyInfo,omitempty"`
	DagDatabaseInfo *ExchangeDAGDatabase `json:"dagDatabaseInfo,omitempty"`
	Name NullableString `json:"name,omitempty"`
	// Specifies the entity id of the owner of the Exchange Protection Source.
	OwnerId NullableInt64 `json:"ownerId,omitempty"`
	StandaloneDatabaseCopyInfo *ExchangeDatabaseInfo `json:"standaloneDatabaseCopyInfo,omitempty"`
	// Specifies the type of the Exchange Protection Source.
	Type NullableInt32 `json:"type,omitempty"`
	// Specifies the UUID for the Exchange entity.
	Uuid NullableString `json:"uuid,omitempty"`
}

// NewExchangeProtectionSource instantiates a new ExchangeProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeProtectionSource() *ExchangeProtectionSource {
	this := ExchangeProtectionSource{}
	return &this
}

// NewExchangeProtectionSourceWithDefaults instantiates a new ExchangeProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeProtectionSourceWithDefaults() *ExchangeProtectionSource {
	this := ExchangeProtectionSource{}
	return &this
}

// GetDagInfo returns the DagInfo field value if set, zero value otherwise.
func (o *ExchangeProtectionSource) GetDagInfo() DagInfo {
	if o == nil || o.DagInfo == nil {
		var ret DagInfo
		return ret
	}
	return *o.DagInfo
}

// GetDagInfoOk returns a tuple with the DagInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeProtectionSource) GetDagInfoOk() (*DagInfo, bool) {
	if o == nil || o.DagInfo == nil {
		return nil, false
	}
	return o.DagInfo, true
}

// HasDagInfo returns a boolean if a field has been set.
func (o *ExchangeProtectionSource) HasDagInfo() bool {
	if o != nil && o.DagInfo != nil {
		return true
	}

	return false
}

// SetDagInfo gets a reference to the given DagInfo and assigns it to the DagInfo field.
func (o *ExchangeProtectionSource) SetDagInfo(v DagInfo) {
	o.DagInfo = &v
}

// GetApplicationServerInfo returns the ApplicationServerInfo field value if set, zero value otherwise.
func (o *ExchangeProtectionSource) GetApplicationServerInfo() ApplicationServerInfo {
	if o == nil || o.ApplicationServerInfo == nil {
		var ret ApplicationServerInfo
		return ret
	}
	return *o.ApplicationServerInfo
}

// GetApplicationServerInfoOk returns a tuple with the ApplicationServerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeProtectionSource) GetApplicationServerInfoOk() (*ApplicationServerInfo, bool) {
	if o == nil || o.ApplicationServerInfo == nil {
		return nil, false
	}
	return o.ApplicationServerInfo, true
}

// HasApplicationServerInfo returns a boolean if a field has been set.
func (o *ExchangeProtectionSource) HasApplicationServerInfo() bool {
	if o != nil && o.ApplicationServerInfo != nil {
		return true
	}

	return false
}

// SetApplicationServerInfo gets a reference to the given ApplicationServerInfo and assigns it to the ApplicationServerInfo field.
func (o *ExchangeProtectionSource) SetApplicationServerInfo(v ApplicationServerInfo) {
	o.ApplicationServerInfo = &v
}

// GetDagDatabaseCopyInfo returns the DagDatabaseCopyInfo field value if set, zero value otherwise.
func (o *ExchangeProtectionSource) GetDagDatabaseCopyInfo() ExchangeDatabaseCopyInfo {
	if o == nil || o.DagDatabaseCopyInfo == nil {
		var ret ExchangeDatabaseCopyInfo
		return ret
	}
	return *o.DagDatabaseCopyInfo
}

// GetDagDatabaseCopyInfoOk returns a tuple with the DagDatabaseCopyInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeProtectionSource) GetDagDatabaseCopyInfoOk() (*ExchangeDatabaseCopyInfo, bool) {
	if o == nil || o.DagDatabaseCopyInfo == nil {
		return nil, false
	}
	return o.DagDatabaseCopyInfo, true
}

// HasDagDatabaseCopyInfo returns a boolean if a field has been set.
func (o *ExchangeProtectionSource) HasDagDatabaseCopyInfo() bool {
	if o != nil && o.DagDatabaseCopyInfo != nil {
		return true
	}

	return false
}

// SetDagDatabaseCopyInfo gets a reference to the given ExchangeDatabaseCopyInfo and assigns it to the DagDatabaseCopyInfo field.
func (o *ExchangeProtectionSource) SetDagDatabaseCopyInfo(v ExchangeDatabaseCopyInfo) {
	o.DagDatabaseCopyInfo = &v
}

// GetDagDatabaseInfo returns the DagDatabaseInfo field value if set, zero value otherwise.
func (o *ExchangeProtectionSource) GetDagDatabaseInfo() ExchangeDAGDatabase {
	if o == nil || o.DagDatabaseInfo == nil {
		var ret ExchangeDAGDatabase
		return ret
	}
	return *o.DagDatabaseInfo
}

// GetDagDatabaseInfoOk returns a tuple with the DagDatabaseInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeProtectionSource) GetDagDatabaseInfoOk() (*ExchangeDAGDatabase, bool) {
	if o == nil || o.DagDatabaseInfo == nil {
		return nil, false
	}
	return o.DagDatabaseInfo, true
}

// HasDagDatabaseInfo returns a boolean if a field has been set.
func (o *ExchangeProtectionSource) HasDagDatabaseInfo() bool {
	if o != nil && o.DagDatabaseInfo != nil {
		return true
	}

	return false
}

// SetDagDatabaseInfo gets a reference to the given ExchangeDAGDatabase and assigns it to the DagDatabaseInfo field.
func (o *ExchangeProtectionSource) SetDagDatabaseInfo(v ExchangeDAGDatabase) {
	o.DagDatabaseInfo = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ExchangeProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ExchangeProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ExchangeProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ExchangeProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetOwnerId returns the OwnerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeProtectionSource) GetOwnerId() int64 {
	if o == nil || o.OwnerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OwnerId.Get()
}

// GetOwnerIdOk returns a tuple with the OwnerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeProtectionSource) GetOwnerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OwnerId.Get(), o.OwnerId.IsSet()
}

// HasOwnerId returns a boolean if a field has been set.
func (o *ExchangeProtectionSource) HasOwnerId() bool {
	if o != nil && o.OwnerId.IsSet() {
		return true
	}

	return false
}

// SetOwnerId gets a reference to the given NullableInt64 and assigns it to the OwnerId field.
func (o *ExchangeProtectionSource) SetOwnerId(v int64) {
	o.OwnerId.Set(&v)
}
// SetOwnerIdNil sets the value for OwnerId to be an explicit nil
func (o *ExchangeProtectionSource) SetOwnerIdNil() {
	o.OwnerId.Set(nil)
}

// UnsetOwnerId ensures that no value is present for OwnerId, not even an explicit nil
func (o *ExchangeProtectionSource) UnsetOwnerId() {
	o.OwnerId.Unset()
}

// GetStandaloneDatabaseCopyInfo returns the StandaloneDatabaseCopyInfo field value if set, zero value otherwise.
func (o *ExchangeProtectionSource) GetStandaloneDatabaseCopyInfo() ExchangeDatabaseInfo {
	if o == nil || o.StandaloneDatabaseCopyInfo == nil {
		var ret ExchangeDatabaseInfo
		return ret
	}
	return *o.StandaloneDatabaseCopyInfo
}

// GetStandaloneDatabaseCopyInfoOk returns a tuple with the StandaloneDatabaseCopyInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExchangeProtectionSource) GetStandaloneDatabaseCopyInfoOk() (*ExchangeDatabaseInfo, bool) {
	if o == nil || o.StandaloneDatabaseCopyInfo == nil {
		return nil, false
	}
	return o.StandaloneDatabaseCopyInfo, true
}

// HasStandaloneDatabaseCopyInfo returns a boolean if a field has been set.
func (o *ExchangeProtectionSource) HasStandaloneDatabaseCopyInfo() bool {
	if o != nil && o.StandaloneDatabaseCopyInfo != nil {
		return true
	}

	return false
}

// SetStandaloneDatabaseCopyInfo gets a reference to the given ExchangeDatabaseInfo and assigns it to the StandaloneDatabaseCopyInfo field.
func (o *ExchangeProtectionSource) SetStandaloneDatabaseCopyInfo(v ExchangeDatabaseInfo) {
	o.StandaloneDatabaseCopyInfo = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeProtectionSource) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeProtectionSource) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ExchangeProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *ExchangeProtectionSource) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ExchangeProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ExchangeProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeProtectionSource) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeProtectionSource) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *ExchangeProtectionSource) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *ExchangeProtectionSource) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *ExchangeProtectionSource) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *ExchangeProtectionSource) UnsetUuid() {
	o.Uuid.Unset()
}

func (o ExchangeProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DagInfo != nil {
		toSerialize["DagInfo"] = o.DagInfo
	}
	if o.ApplicationServerInfo != nil {
		toSerialize["applicationServerInfo"] = o.ApplicationServerInfo
	}
	if o.DagDatabaseCopyInfo != nil {
		toSerialize["dagDatabaseCopyInfo"] = o.DagDatabaseCopyInfo
	}
	if o.DagDatabaseInfo != nil {
		toSerialize["dagDatabaseInfo"] = o.DagDatabaseInfo
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.OwnerId.IsSet() {
		toSerialize["ownerId"] = o.OwnerId.Get()
	}
	if o.StandaloneDatabaseCopyInfo != nil {
		toSerialize["standaloneDatabaseCopyInfo"] = o.StandaloneDatabaseCopyInfo
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeProtectionSource struct {
	value *ExchangeProtectionSource
	isSet bool
}

func (v NullableExchangeProtectionSource) Get() *ExchangeProtectionSource {
	return v.value
}

func (v *NullableExchangeProtectionSource) Set(val *ExchangeProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeProtectionSource(val *ExchangeProtectionSource) *NullableExchangeProtectionSource {
	return &NullableExchangeProtectionSource{value: val, isSet: true}
}

func (v NullableExchangeProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


