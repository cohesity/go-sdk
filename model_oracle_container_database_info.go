/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleContainerDatabaseInfo Specifies the Container Database information along with the Pluggable DBs within the container. The multitenant architecture enables an Oracle database to function as a multitenant container database (CDB). A CDB includes zero, one, or many customer-created pluggable databases (PDBs).
type OracleContainerDatabaseInfo struct {
	// Specifies the list of Pluggable databases within this Container Database.
	PluggableDatabaseInfoList []OraclePluggableDatabaseInfo `json:"pluggableDatabaseInfoList,omitempty"`
}

// NewOracleContainerDatabaseInfo instantiates a new OracleContainerDatabaseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleContainerDatabaseInfo() *OracleContainerDatabaseInfo {
	this := OracleContainerDatabaseInfo{}
	return &this
}

// NewOracleContainerDatabaseInfoWithDefaults instantiates a new OracleContainerDatabaseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleContainerDatabaseInfoWithDefaults() *OracleContainerDatabaseInfo {
	this := OracleContainerDatabaseInfo{}
	return &this
}

// GetPluggableDatabaseInfoList returns the PluggableDatabaseInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleContainerDatabaseInfo) GetPluggableDatabaseInfoList() []OraclePluggableDatabaseInfo {
	if o == nil  {
		var ret []OraclePluggableDatabaseInfo
		return ret
	}
	return o.PluggableDatabaseInfoList
}

// GetPluggableDatabaseInfoListOk returns a tuple with the PluggableDatabaseInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleContainerDatabaseInfo) GetPluggableDatabaseInfoListOk() (*[]OraclePluggableDatabaseInfo, bool) {
	if o == nil || o.PluggableDatabaseInfoList == nil {
		return nil, false
	}
	return &o.PluggableDatabaseInfoList, true
}

// HasPluggableDatabaseInfoList returns a boolean if a field has been set.
func (o *OracleContainerDatabaseInfo) HasPluggableDatabaseInfoList() bool {
	if o != nil && o.PluggableDatabaseInfoList != nil {
		return true
	}

	return false
}

// SetPluggableDatabaseInfoList gets a reference to the given []OraclePluggableDatabaseInfo and assigns it to the PluggableDatabaseInfoList field.
func (o *OracleContainerDatabaseInfo) SetPluggableDatabaseInfoList(v []OraclePluggableDatabaseInfo) {
	o.PluggableDatabaseInfoList = v
}

func (o OracleContainerDatabaseInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PluggableDatabaseInfoList != nil {
		toSerialize["pluggableDatabaseInfoList"] = o.PluggableDatabaseInfoList
	}
	return json.Marshal(toSerialize)
}

type NullableOracleContainerDatabaseInfo struct {
	value *OracleContainerDatabaseInfo
	isSet bool
}

func (v NullableOracleContainerDatabaseInfo) Get() *OracleContainerDatabaseInfo {
	return v.value
}

func (v *NullableOracleContainerDatabaseInfo) Set(val *OracleContainerDatabaseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleContainerDatabaseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleContainerDatabaseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleContainerDatabaseInfo(val *OracleContainerDatabaseInfo) *NullableOracleContainerDatabaseInfo {
	return &NullableOracleContainerDatabaseInfo{value: val, isSet: true}
}

func (v NullableOracleContainerDatabaseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleContainerDatabaseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


