/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// MapReduceInfoRequiredProperty A required property represents a property that user must set before invoking a mapreduction instance. e.g., SimpleGrepMapper will require a property named searchPattern to be set.
type MapReduceInfoRequiredProperty struct {
	// Default Value of the property.
	DefaultValue NullableString `json:"defaultValue,omitempty"`
	// Description of this property
	Description NullableString `json:"description,omitempty"`
	// Whether the property is required or optional.
	IsRequired NullableBool `json:"isRequired,omitempty"`
	// Name of the property.
	Name NullableString `json:"name,omitempty"`
}

// NewMapReduceInfoRequiredProperty instantiates a new MapReduceInfoRequiredProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapReduceInfoRequiredProperty() *MapReduceInfoRequiredProperty {
	this := MapReduceInfoRequiredProperty{}
	return &this
}

// NewMapReduceInfoRequiredPropertyWithDefaults instantiates a new MapReduceInfoRequiredProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapReduceInfoRequiredPropertyWithDefaults() *MapReduceInfoRequiredProperty {
	this := MapReduceInfoRequiredProperty{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfoRequiredProperty) GetDefaultValue() string {
	if o == nil || o.DefaultValue.Get() == nil {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfoRequiredProperty) GetDefaultValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *MapReduceInfoRequiredProperty) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *MapReduceInfoRequiredProperty) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}
// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *MapReduceInfoRequiredProperty) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *MapReduceInfoRequiredProperty) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfoRequiredProperty) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfoRequiredProperty) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *MapReduceInfoRequiredProperty) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *MapReduceInfoRequiredProperty) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *MapReduceInfoRequiredProperty) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *MapReduceInfoRequiredProperty) UnsetDescription() {
	o.Description.Unset()
}

// GetIsRequired returns the IsRequired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfoRequiredProperty) GetIsRequired() bool {
	if o == nil || o.IsRequired.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsRequired.Get()
}

// GetIsRequiredOk returns a tuple with the IsRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfoRequiredProperty) GetIsRequiredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsRequired.Get(), o.IsRequired.IsSet()
}

// HasIsRequired returns a boolean if a field has been set.
func (o *MapReduceInfoRequiredProperty) HasIsRequired() bool {
	if o != nil && o.IsRequired.IsSet() {
		return true
	}

	return false
}

// SetIsRequired gets a reference to the given NullableBool and assigns it to the IsRequired field.
func (o *MapReduceInfoRequiredProperty) SetIsRequired(v bool) {
	o.IsRequired.Set(&v)
}
// SetIsRequiredNil sets the value for IsRequired to be an explicit nil
func (o *MapReduceInfoRequiredProperty) SetIsRequiredNil() {
	o.IsRequired.Set(nil)
}

// UnsetIsRequired ensures that no value is present for IsRequired, not even an explicit nil
func (o *MapReduceInfoRequiredProperty) UnsetIsRequired() {
	o.IsRequired.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceInfoRequiredProperty) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceInfoRequiredProperty) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *MapReduceInfoRequiredProperty) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *MapReduceInfoRequiredProperty) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *MapReduceInfoRequiredProperty) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *MapReduceInfoRequiredProperty) UnsetName() {
	o.Name.Unset()
}

func (o MapReduceInfoRequiredProperty) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.IsRequired.IsSet() {
		toSerialize["isRequired"] = o.IsRequired.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMapReduceInfoRequiredProperty struct {
	value *MapReduceInfoRequiredProperty
	isSet bool
}

func (v NullableMapReduceInfoRequiredProperty) Get() *MapReduceInfoRequiredProperty {
	return v.value
}

func (v *NullableMapReduceInfoRequiredProperty) Set(val *MapReduceInfoRequiredProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableMapReduceInfoRequiredProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableMapReduceInfoRequiredProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapReduceInfoRequiredProperty(val *MapReduceInfoRequiredProperty) *NullableMapReduceInfoRequiredProperty {
	return &NullableMapReduceInfoRequiredProperty{value: val, isSet: true}
}

func (v NullableMapReduceInfoRequiredProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapReduceInfoRequiredProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


