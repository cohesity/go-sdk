/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreSqlAppObjectParams struct for RestoreSqlAppObjectParams
type RestoreSqlAppObjectParams struct {
	// Set to true if tail logs are to be captured before the restore operation. This is only applicable if we are restoring the SQL database to its original source, and the database is not being renamed.
	CaptureTailLogs NullableBool `json:"captureTailLogs,omitempty"`
	// Whether restore should continue after encountering a page checksum error.
	ContinueAfterError NullableBool `json:"continueAfterError,omitempty"`
	// Which directory to put the database data files. Missing directory will be automatically created. Cannot be empty if not restoring to the original SQL instance.
	DataFileDestination NullableString `json:"dataFileDestination,omitempty"`
	// Policy to overwrite an existing DB during a restore operation.
	DbRestoreOverwritePolicy NullableInt32 `json:"dbRestoreOverwritePolicy,omitempty"`
	// Whether restore checksums are enabled.
	EnableChecksum NullableBool `json:"enableChecksum,omitempty"`
	// The name of the SQL instance that we restore database to. If target_host is not empty, this also cannot be empty.
	InstanceName NullableString `json:"instanceName,omitempty"`
	// The following field is set if auto_sync for multi-stage SQL restore task is enabled. This field is valid only if is_multi_state_restore is set to true.
	IsAutoSyncEnabled NullableBool `json:"isAutoSyncEnabled,omitempty"`
	// The following field is set if we are creating a multi-stage SQL restore task needed for features such as Hot-Standby.
	IsMultiStageRestore NullableBool `json:"isMultiStageRestore,omitempty"`
	// Set to true to keep cdc on restored database.
	KeepCdc NullableBool `json:"keepCdc,omitempty"`
	// Which directory to put the database log files. Missing directory will be automatically created. Cannot be empty if not restoring to the original SQL instance.
	LogFileDestination NullableString `json:"logFileDestination,omitempty"`
	MultiStageRestoreOptions *SqlUpdateRestoreTaskOptions `json:"multiStageRestoreOptions,omitempty"`
	// The new name of the database, if it is going to be renamed. app_entity in RestoreAppObject has to be non-empty for the renaming, otherwise it does not make sense to rename all databases in the owner.
	NewDatabaseName NullableString `json:"newDatabaseName,omitempty"`
	// The time to which the SQL database needs to be restored. This allows for granular recovery of SQL databases. If this is not set, the SQL database will be recovered to the full/incremental snapshot (specified in the owner's restore object in AppOwnerRestoreInfo).
	RestoreTimeSecs NullableInt64 `json:"restoreTimeSecs,omitempty"`
	// Resume restore if sql instance/database exist in restore/recovering state. The database might be in restore/recovering state if previous restore failed or previous  restore was attempted  with norecovery option.
	ResumeRestore NullableBool `json:"resumeRestore,omitempty"`
	// Which directory to put the secondary data files of the database. Secondary data files are optional and are user defined. The recommended file name extension for these is \".ndf\".  If this option is specified, the directory will be automatically created if its missing.
	SecondaryDataFileDestination NullableString `json:"secondaryDataFileDestination,omitempty"`
	// Specify the secondary data files and corresponding direcories of the DB. Secondary data files are optional and are user defined. The recommended file extension for secondary files is \".ndf\".  If this option is specified and the destination folders do not exist they will be automatically created.
	SecondaryDataFileDestinationVec []FilesToDirectoryMapping `json:"secondaryDataFileDestinationVec,omitempty"`
	// 'with_clause' contains 'with clause' to be used in native sql restore command. This is only applicable for db restore of native sql backup. Here user can specify multiple restore options. Example: \"WITH BUFFERCOUNT = 575, MAXTRANSFERSIZE = 2097152\". If this is not specified, we use the value specified in magneto_sql_native_restore_with_clause gflag.
	WithClause NullableString `json:"withClause,omitempty"`
	// Set to true if we want to recover the database in \"NO_RECOVERY\" mode which does not bring it online after restore.
	WithNoRecovery NullableBool `json:"withNoRecovery,omitempty"`
}

// NewRestoreSqlAppObjectParams instantiates a new RestoreSqlAppObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreSqlAppObjectParams() *RestoreSqlAppObjectParams {
	this := RestoreSqlAppObjectParams{}
	return &this
}

// NewRestoreSqlAppObjectParamsWithDefaults instantiates a new RestoreSqlAppObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreSqlAppObjectParamsWithDefaults() *RestoreSqlAppObjectParams {
	this := RestoreSqlAppObjectParams{}
	return &this
}

// GetCaptureTailLogs returns the CaptureTailLogs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetCaptureTailLogs() bool {
	if o == nil || o.CaptureTailLogs.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CaptureTailLogs.Get()
}

// GetCaptureTailLogsOk returns a tuple with the CaptureTailLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetCaptureTailLogsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaptureTailLogs.Get(), o.CaptureTailLogs.IsSet()
}

// HasCaptureTailLogs returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasCaptureTailLogs() bool {
	if o != nil && o.CaptureTailLogs.IsSet() {
		return true
	}

	return false
}

// SetCaptureTailLogs gets a reference to the given NullableBool and assigns it to the CaptureTailLogs field.
func (o *RestoreSqlAppObjectParams) SetCaptureTailLogs(v bool) {
	o.CaptureTailLogs.Set(&v)
}
// SetCaptureTailLogsNil sets the value for CaptureTailLogs to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetCaptureTailLogsNil() {
	o.CaptureTailLogs.Set(nil)
}

// UnsetCaptureTailLogs ensures that no value is present for CaptureTailLogs, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetCaptureTailLogs() {
	o.CaptureTailLogs.Unset()
}

// GetContinueAfterError returns the ContinueAfterError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetContinueAfterError() bool {
	if o == nil || o.ContinueAfterError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueAfterError.Get()
}

// GetContinueAfterErrorOk returns a tuple with the ContinueAfterError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetContinueAfterErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueAfterError.Get(), o.ContinueAfterError.IsSet()
}

// HasContinueAfterError returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasContinueAfterError() bool {
	if o != nil && o.ContinueAfterError.IsSet() {
		return true
	}

	return false
}

// SetContinueAfterError gets a reference to the given NullableBool and assigns it to the ContinueAfterError field.
func (o *RestoreSqlAppObjectParams) SetContinueAfterError(v bool) {
	o.ContinueAfterError.Set(&v)
}
// SetContinueAfterErrorNil sets the value for ContinueAfterError to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetContinueAfterErrorNil() {
	o.ContinueAfterError.Set(nil)
}

// UnsetContinueAfterError ensures that no value is present for ContinueAfterError, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetContinueAfterError() {
	o.ContinueAfterError.Unset()
}

// GetDataFileDestination returns the DataFileDestination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetDataFileDestination() string {
	if o == nil || o.DataFileDestination.Get() == nil {
		var ret string
		return ret
	}
	return *o.DataFileDestination.Get()
}

// GetDataFileDestinationOk returns a tuple with the DataFileDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetDataFileDestinationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataFileDestination.Get(), o.DataFileDestination.IsSet()
}

// HasDataFileDestination returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasDataFileDestination() bool {
	if o != nil && o.DataFileDestination.IsSet() {
		return true
	}

	return false
}

// SetDataFileDestination gets a reference to the given NullableString and assigns it to the DataFileDestination field.
func (o *RestoreSqlAppObjectParams) SetDataFileDestination(v string) {
	o.DataFileDestination.Set(&v)
}
// SetDataFileDestinationNil sets the value for DataFileDestination to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetDataFileDestinationNil() {
	o.DataFileDestination.Set(nil)
}

// UnsetDataFileDestination ensures that no value is present for DataFileDestination, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetDataFileDestination() {
	o.DataFileDestination.Unset()
}

// GetDbRestoreOverwritePolicy returns the DbRestoreOverwritePolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetDbRestoreOverwritePolicy() int32 {
	if o == nil || o.DbRestoreOverwritePolicy.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DbRestoreOverwritePolicy.Get()
}

// GetDbRestoreOverwritePolicyOk returns a tuple with the DbRestoreOverwritePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetDbRestoreOverwritePolicyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbRestoreOverwritePolicy.Get(), o.DbRestoreOverwritePolicy.IsSet()
}

// HasDbRestoreOverwritePolicy returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasDbRestoreOverwritePolicy() bool {
	if o != nil && o.DbRestoreOverwritePolicy.IsSet() {
		return true
	}

	return false
}

// SetDbRestoreOverwritePolicy gets a reference to the given NullableInt32 and assigns it to the DbRestoreOverwritePolicy field.
func (o *RestoreSqlAppObjectParams) SetDbRestoreOverwritePolicy(v int32) {
	o.DbRestoreOverwritePolicy.Set(&v)
}
// SetDbRestoreOverwritePolicyNil sets the value for DbRestoreOverwritePolicy to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetDbRestoreOverwritePolicyNil() {
	o.DbRestoreOverwritePolicy.Set(nil)
}

// UnsetDbRestoreOverwritePolicy ensures that no value is present for DbRestoreOverwritePolicy, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetDbRestoreOverwritePolicy() {
	o.DbRestoreOverwritePolicy.Unset()
}

// GetEnableChecksum returns the EnableChecksum field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetEnableChecksum() bool {
	if o == nil || o.EnableChecksum.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableChecksum.Get()
}

// GetEnableChecksumOk returns a tuple with the EnableChecksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetEnableChecksumOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableChecksum.Get(), o.EnableChecksum.IsSet()
}

// HasEnableChecksum returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasEnableChecksum() bool {
	if o != nil && o.EnableChecksum.IsSet() {
		return true
	}

	return false
}

// SetEnableChecksum gets a reference to the given NullableBool and assigns it to the EnableChecksum field.
func (o *RestoreSqlAppObjectParams) SetEnableChecksum(v bool) {
	o.EnableChecksum.Set(&v)
}
// SetEnableChecksumNil sets the value for EnableChecksum to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetEnableChecksumNil() {
	o.EnableChecksum.Set(nil)
}

// UnsetEnableChecksum ensures that no value is present for EnableChecksum, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetEnableChecksum() {
	o.EnableChecksum.Unset()
}

// GetInstanceName returns the InstanceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetInstanceName() string {
	if o == nil || o.InstanceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.InstanceName.Get()
}

// GetInstanceNameOk returns a tuple with the InstanceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetInstanceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InstanceName.Get(), o.InstanceName.IsSet()
}

// HasInstanceName returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasInstanceName() bool {
	if o != nil && o.InstanceName.IsSet() {
		return true
	}

	return false
}

// SetInstanceName gets a reference to the given NullableString and assigns it to the InstanceName field.
func (o *RestoreSqlAppObjectParams) SetInstanceName(v string) {
	o.InstanceName.Set(&v)
}
// SetInstanceNameNil sets the value for InstanceName to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetInstanceNameNil() {
	o.InstanceName.Set(nil)
}

// UnsetInstanceName ensures that no value is present for InstanceName, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetInstanceName() {
	o.InstanceName.Unset()
}

// GetIsAutoSyncEnabled returns the IsAutoSyncEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetIsAutoSyncEnabled() bool {
	if o == nil || o.IsAutoSyncEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAutoSyncEnabled.Get()
}

// GetIsAutoSyncEnabledOk returns a tuple with the IsAutoSyncEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetIsAutoSyncEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAutoSyncEnabled.Get(), o.IsAutoSyncEnabled.IsSet()
}

// HasIsAutoSyncEnabled returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasIsAutoSyncEnabled() bool {
	if o != nil && o.IsAutoSyncEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsAutoSyncEnabled gets a reference to the given NullableBool and assigns it to the IsAutoSyncEnabled field.
func (o *RestoreSqlAppObjectParams) SetIsAutoSyncEnabled(v bool) {
	o.IsAutoSyncEnabled.Set(&v)
}
// SetIsAutoSyncEnabledNil sets the value for IsAutoSyncEnabled to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetIsAutoSyncEnabledNil() {
	o.IsAutoSyncEnabled.Set(nil)
}

// UnsetIsAutoSyncEnabled ensures that no value is present for IsAutoSyncEnabled, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetIsAutoSyncEnabled() {
	o.IsAutoSyncEnabled.Unset()
}

// GetIsMultiStageRestore returns the IsMultiStageRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetIsMultiStageRestore() bool {
	if o == nil || o.IsMultiStageRestore.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsMultiStageRestore.Get()
}

// GetIsMultiStageRestoreOk returns a tuple with the IsMultiStageRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetIsMultiStageRestoreOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsMultiStageRestore.Get(), o.IsMultiStageRestore.IsSet()
}

// HasIsMultiStageRestore returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasIsMultiStageRestore() bool {
	if o != nil && o.IsMultiStageRestore.IsSet() {
		return true
	}

	return false
}

// SetIsMultiStageRestore gets a reference to the given NullableBool and assigns it to the IsMultiStageRestore field.
func (o *RestoreSqlAppObjectParams) SetIsMultiStageRestore(v bool) {
	o.IsMultiStageRestore.Set(&v)
}
// SetIsMultiStageRestoreNil sets the value for IsMultiStageRestore to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetIsMultiStageRestoreNil() {
	o.IsMultiStageRestore.Set(nil)
}

// UnsetIsMultiStageRestore ensures that no value is present for IsMultiStageRestore, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetIsMultiStageRestore() {
	o.IsMultiStageRestore.Unset()
}

// GetKeepCdc returns the KeepCdc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetKeepCdc() bool {
	if o == nil || o.KeepCdc.Get() == nil {
		var ret bool
		return ret
	}
	return *o.KeepCdc.Get()
}

// GetKeepCdcOk returns a tuple with the KeepCdc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetKeepCdcOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeepCdc.Get(), o.KeepCdc.IsSet()
}

// HasKeepCdc returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasKeepCdc() bool {
	if o != nil && o.KeepCdc.IsSet() {
		return true
	}

	return false
}

// SetKeepCdc gets a reference to the given NullableBool and assigns it to the KeepCdc field.
func (o *RestoreSqlAppObjectParams) SetKeepCdc(v bool) {
	o.KeepCdc.Set(&v)
}
// SetKeepCdcNil sets the value for KeepCdc to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetKeepCdcNil() {
	o.KeepCdc.Set(nil)
}

// UnsetKeepCdc ensures that no value is present for KeepCdc, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetKeepCdc() {
	o.KeepCdc.Unset()
}

// GetLogFileDestination returns the LogFileDestination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetLogFileDestination() string {
	if o == nil || o.LogFileDestination.Get() == nil {
		var ret string
		return ret
	}
	return *o.LogFileDestination.Get()
}

// GetLogFileDestinationOk returns a tuple with the LogFileDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetLogFileDestinationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogFileDestination.Get(), o.LogFileDestination.IsSet()
}

// HasLogFileDestination returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasLogFileDestination() bool {
	if o != nil && o.LogFileDestination.IsSet() {
		return true
	}

	return false
}

// SetLogFileDestination gets a reference to the given NullableString and assigns it to the LogFileDestination field.
func (o *RestoreSqlAppObjectParams) SetLogFileDestination(v string) {
	o.LogFileDestination.Set(&v)
}
// SetLogFileDestinationNil sets the value for LogFileDestination to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetLogFileDestinationNil() {
	o.LogFileDestination.Set(nil)
}

// UnsetLogFileDestination ensures that no value is present for LogFileDestination, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetLogFileDestination() {
	o.LogFileDestination.Unset()
}

// GetMultiStageRestoreOptions returns the MultiStageRestoreOptions field value if set, zero value otherwise.
func (o *RestoreSqlAppObjectParams) GetMultiStageRestoreOptions() SqlUpdateRestoreTaskOptions {
	if o == nil || o.MultiStageRestoreOptions == nil {
		var ret SqlUpdateRestoreTaskOptions
		return ret
	}
	return *o.MultiStageRestoreOptions
}

// GetMultiStageRestoreOptionsOk returns a tuple with the MultiStageRestoreOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreSqlAppObjectParams) GetMultiStageRestoreOptionsOk() (*SqlUpdateRestoreTaskOptions, bool) {
	if o == nil || o.MultiStageRestoreOptions == nil {
		return nil, false
	}
	return o.MultiStageRestoreOptions, true
}

// HasMultiStageRestoreOptions returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasMultiStageRestoreOptions() bool {
	if o != nil && o.MultiStageRestoreOptions != nil {
		return true
	}

	return false
}

// SetMultiStageRestoreOptions gets a reference to the given SqlUpdateRestoreTaskOptions and assigns it to the MultiStageRestoreOptions field.
func (o *RestoreSqlAppObjectParams) SetMultiStageRestoreOptions(v SqlUpdateRestoreTaskOptions) {
	o.MultiStageRestoreOptions = &v
}

// GetNewDatabaseName returns the NewDatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetNewDatabaseName() string {
	if o == nil || o.NewDatabaseName.Get() == nil {
		var ret string
		return ret
	}
	return *o.NewDatabaseName.Get()
}

// GetNewDatabaseNameOk returns a tuple with the NewDatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetNewDatabaseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewDatabaseName.Get(), o.NewDatabaseName.IsSet()
}

// HasNewDatabaseName returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasNewDatabaseName() bool {
	if o != nil && o.NewDatabaseName.IsSet() {
		return true
	}

	return false
}

// SetNewDatabaseName gets a reference to the given NullableString and assigns it to the NewDatabaseName field.
func (o *RestoreSqlAppObjectParams) SetNewDatabaseName(v string) {
	o.NewDatabaseName.Set(&v)
}
// SetNewDatabaseNameNil sets the value for NewDatabaseName to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetNewDatabaseNameNil() {
	o.NewDatabaseName.Set(nil)
}

// UnsetNewDatabaseName ensures that no value is present for NewDatabaseName, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetNewDatabaseName() {
	o.NewDatabaseName.Unset()
}

// GetRestoreTimeSecs returns the RestoreTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetRestoreTimeSecs() int64 {
	if o == nil || o.RestoreTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RestoreTimeSecs.Get()
}

// GetRestoreTimeSecsOk returns a tuple with the RestoreTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetRestoreTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreTimeSecs.Get(), o.RestoreTimeSecs.IsSet()
}

// HasRestoreTimeSecs returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasRestoreTimeSecs() bool {
	if o != nil && o.RestoreTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetRestoreTimeSecs gets a reference to the given NullableInt64 and assigns it to the RestoreTimeSecs field.
func (o *RestoreSqlAppObjectParams) SetRestoreTimeSecs(v int64) {
	o.RestoreTimeSecs.Set(&v)
}
// SetRestoreTimeSecsNil sets the value for RestoreTimeSecs to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetRestoreTimeSecsNil() {
	o.RestoreTimeSecs.Set(nil)
}

// UnsetRestoreTimeSecs ensures that no value is present for RestoreTimeSecs, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetRestoreTimeSecs() {
	o.RestoreTimeSecs.Unset()
}

// GetResumeRestore returns the ResumeRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetResumeRestore() bool {
	if o == nil || o.ResumeRestore.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ResumeRestore.Get()
}

// GetResumeRestoreOk returns a tuple with the ResumeRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetResumeRestoreOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResumeRestore.Get(), o.ResumeRestore.IsSet()
}

// HasResumeRestore returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasResumeRestore() bool {
	if o != nil && o.ResumeRestore.IsSet() {
		return true
	}

	return false
}

// SetResumeRestore gets a reference to the given NullableBool and assigns it to the ResumeRestore field.
func (o *RestoreSqlAppObjectParams) SetResumeRestore(v bool) {
	o.ResumeRestore.Set(&v)
}
// SetResumeRestoreNil sets the value for ResumeRestore to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetResumeRestoreNil() {
	o.ResumeRestore.Set(nil)
}

// UnsetResumeRestore ensures that no value is present for ResumeRestore, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetResumeRestore() {
	o.ResumeRestore.Unset()
}

// GetSecondaryDataFileDestination returns the SecondaryDataFileDestination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetSecondaryDataFileDestination() string {
	if o == nil || o.SecondaryDataFileDestination.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecondaryDataFileDestination.Get()
}

// GetSecondaryDataFileDestinationOk returns a tuple with the SecondaryDataFileDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetSecondaryDataFileDestinationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecondaryDataFileDestination.Get(), o.SecondaryDataFileDestination.IsSet()
}

// HasSecondaryDataFileDestination returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasSecondaryDataFileDestination() bool {
	if o != nil && o.SecondaryDataFileDestination.IsSet() {
		return true
	}

	return false
}

// SetSecondaryDataFileDestination gets a reference to the given NullableString and assigns it to the SecondaryDataFileDestination field.
func (o *RestoreSqlAppObjectParams) SetSecondaryDataFileDestination(v string) {
	o.SecondaryDataFileDestination.Set(&v)
}
// SetSecondaryDataFileDestinationNil sets the value for SecondaryDataFileDestination to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetSecondaryDataFileDestinationNil() {
	o.SecondaryDataFileDestination.Set(nil)
}

// UnsetSecondaryDataFileDestination ensures that no value is present for SecondaryDataFileDestination, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetSecondaryDataFileDestination() {
	o.SecondaryDataFileDestination.Unset()
}

// GetSecondaryDataFileDestinationVec returns the SecondaryDataFileDestinationVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetSecondaryDataFileDestinationVec() []FilesToDirectoryMapping {
	if o == nil  {
		var ret []FilesToDirectoryMapping
		return ret
	}
	return o.SecondaryDataFileDestinationVec
}

// GetSecondaryDataFileDestinationVecOk returns a tuple with the SecondaryDataFileDestinationVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetSecondaryDataFileDestinationVecOk() (*[]FilesToDirectoryMapping, bool) {
	if o == nil || o.SecondaryDataFileDestinationVec == nil {
		return nil, false
	}
	return &o.SecondaryDataFileDestinationVec, true
}

// HasSecondaryDataFileDestinationVec returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasSecondaryDataFileDestinationVec() bool {
	if o != nil && o.SecondaryDataFileDestinationVec != nil {
		return true
	}

	return false
}

// SetSecondaryDataFileDestinationVec gets a reference to the given []FilesToDirectoryMapping and assigns it to the SecondaryDataFileDestinationVec field.
func (o *RestoreSqlAppObjectParams) SetSecondaryDataFileDestinationVec(v []FilesToDirectoryMapping) {
	o.SecondaryDataFileDestinationVec = v
}

// GetWithClause returns the WithClause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetWithClause() string {
	if o == nil || o.WithClause.Get() == nil {
		var ret string
		return ret
	}
	return *o.WithClause.Get()
}

// GetWithClauseOk returns a tuple with the WithClause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetWithClauseOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WithClause.Get(), o.WithClause.IsSet()
}

// HasWithClause returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasWithClause() bool {
	if o != nil && o.WithClause.IsSet() {
		return true
	}

	return false
}

// SetWithClause gets a reference to the given NullableString and assigns it to the WithClause field.
func (o *RestoreSqlAppObjectParams) SetWithClause(v string) {
	o.WithClause.Set(&v)
}
// SetWithClauseNil sets the value for WithClause to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetWithClauseNil() {
	o.WithClause.Set(nil)
}

// UnsetWithClause ensures that no value is present for WithClause, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetWithClause() {
	o.WithClause.Unset()
}

// GetWithNoRecovery returns the WithNoRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSqlAppObjectParams) GetWithNoRecovery() bool {
	if o == nil || o.WithNoRecovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.WithNoRecovery.Get()
}

// GetWithNoRecoveryOk returns a tuple with the WithNoRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSqlAppObjectParams) GetWithNoRecoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WithNoRecovery.Get(), o.WithNoRecovery.IsSet()
}

// HasWithNoRecovery returns a boolean if a field has been set.
func (o *RestoreSqlAppObjectParams) HasWithNoRecovery() bool {
	if o != nil && o.WithNoRecovery.IsSet() {
		return true
	}

	return false
}

// SetWithNoRecovery gets a reference to the given NullableBool and assigns it to the WithNoRecovery field.
func (o *RestoreSqlAppObjectParams) SetWithNoRecovery(v bool) {
	o.WithNoRecovery.Set(&v)
}
// SetWithNoRecoveryNil sets the value for WithNoRecovery to be an explicit nil
func (o *RestoreSqlAppObjectParams) SetWithNoRecoveryNil() {
	o.WithNoRecovery.Set(nil)
}

// UnsetWithNoRecovery ensures that no value is present for WithNoRecovery, not even an explicit nil
func (o *RestoreSqlAppObjectParams) UnsetWithNoRecovery() {
	o.WithNoRecovery.Unset()
}

func (o RestoreSqlAppObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CaptureTailLogs.IsSet() {
		toSerialize["captureTailLogs"] = o.CaptureTailLogs.Get()
	}
	if o.ContinueAfterError.IsSet() {
		toSerialize["continueAfterError"] = o.ContinueAfterError.Get()
	}
	if o.DataFileDestination.IsSet() {
		toSerialize["dataFileDestination"] = o.DataFileDestination.Get()
	}
	if o.DbRestoreOverwritePolicy.IsSet() {
		toSerialize["dbRestoreOverwritePolicy"] = o.DbRestoreOverwritePolicy.Get()
	}
	if o.EnableChecksum.IsSet() {
		toSerialize["enableChecksum"] = o.EnableChecksum.Get()
	}
	if o.InstanceName.IsSet() {
		toSerialize["instanceName"] = o.InstanceName.Get()
	}
	if o.IsAutoSyncEnabled.IsSet() {
		toSerialize["isAutoSyncEnabled"] = o.IsAutoSyncEnabled.Get()
	}
	if o.IsMultiStageRestore.IsSet() {
		toSerialize["isMultiStageRestore"] = o.IsMultiStageRestore.Get()
	}
	if o.KeepCdc.IsSet() {
		toSerialize["keepCdc"] = o.KeepCdc.Get()
	}
	if o.LogFileDestination.IsSet() {
		toSerialize["logFileDestination"] = o.LogFileDestination.Get()
	}
	if o.MultiStageRestoreOptions != nil {
		toSerialize["multiStageRestoreOptions"] = o.MultiStageRestoreOptions
	}
	if o.NewDatabaseName.IsSet() {
		toSerialize["newDatabaseName"] = o.NewDatabaseName.Get()
	}
	if o.RestoreTimeSecs.IsSet() {
		toSerialize["restoreTimeSecs"] = o.RestoreTimeSecs.Get()
	}
	if o.ResumeRestore.IsSet() {
		toSerialize["resumeRestore"] = o.ResumeRestore.Get()
	}
	if o.SecondaryDataFileDestination.IsSet() {
		toSerialize["secondaryDataFileDestination"] = o.SecondaryDataFileDestination.Get()
	}
	if o.SecondaryDataFileDestinationVec != nil {
		toSerialize["secondaryDataFileDestinationVec"] = o.SecondaryDataFileDestinationVec
	}
	if o.WithClause.IsSet() {
		toSerialize["withClause"] = o.WithClause.Get()
	}
	if o.WithNoRecovery.IsSet() {
		toSerialize["withNoRecovery"] = o.WithNoRecovery.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreSqlAppObjectParams struct {
	value *RestoreSqlAppObjectParams
	isSet bool
}

func (v NullableRestoreSqlAppObjectParams) Get() *RestoreSqlAppObjectParams {
	return v.value
}

func (v *NullableRestoreSqlAppObjectParams) Set(val *RestoreSqlAppObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreSqlAppObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreSqlAppObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreSqlAppObjectParams(val *RestoreSqlAppObjectParams) *NullableRestoreSqlAppObjectParams {
	return &NullableRestoreSqlAppObjectParams{value: val, isSet: true}
}

func (v NullableRestoreSqlAppObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreSqlAppObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


