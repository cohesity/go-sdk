/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreSiteParamsSiteOwner struct for RestoreSiteParamsSiteOwner
type RestoreSiteParamsSiteOwner struct {
	// The list of drives that are being restored.
	DriveVec []RestoreSiteParamsSiteOwnerDrive `json:"driveVec,omitempty"`
	Object *RestoreObject `json:"object,omitempty"`
}

// NewRestoreSiteParamsSiteOwner instantiates a new RestoreSiteParamsSiteOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreSiteParamsSiteOwner() *RestoreSiteParamsSiteOwner {
	this := RestoreSiteParamsSiteOwner{}
	return &this
}

// NewRestoreSiteParamsSiteOwnerWithDefaults instantiates a new RestoreSiteParamsSiteOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreSiteParamsSiteOwnerWithDefaults() *RestoreSiteParamsSiteOwner {
	this := RestoreSiteParamsSiteOwner{}
	return &this
}

// GetDriveVec returns the DriveVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSiteParamsSiteOwner) GetDriveVec() []RestoreSiteParamsSiteOwnerDrive {
	if o == nil  {
		var ret []RestoreSiteParamsSiteOwnerDrive
		return ret
	}
	return o.DriveVec
}

// GetDriveVecOk returns a tuple with the DriveVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSiteParamsSiteOwner) GetDriveVecOk() (*[]RestoreSiteParamsSiteOwnerDrive, bool) {
	if o == nil || o.DriveVec == nil {
		return nil, false
	}
	return &o.DriveVec, true
}

// HasDriveVec returns a boolean if a field has been set.
func (o *RestoreSiteParamsSiteOwner) HasDriveVec() bool {
	if o != nil && o.DriveVec != nil {
		return true
	}

	return false
}

// SetDriveVec gets a reference to the given []RestoreSiteParamsSiteOwnerDrive and assigns it to the DriveVec field.
func (o *RestoreSiteParamsSiteOwner) SetDriveVec(v []RestoreSiteParamsSiteOwnerDrive) {
	o.DriveVec = v
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *RestoreSiteParamsSiteOwner) GetObject() RestoreObject {
	if o == nil || o.Object == nil {
		var ret RestoreObject
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreSiteParamsSiteOwner) GetObjectOk() (*RestoreObject, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *RestoreSiteParamsSiteOwner) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given RestoreObject and assigns it to the Object field.
func (o *RestoreSiteParamsSiteOwner) SetObject(v RestoreObject) {
	o.Object = &v
}

func (o RestoreSiteParamsSiteOwner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DriveVec != nil {
		toSerialize["driveVec"] = o.DriveVec
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreSiteParamsSiteOwner struct {
	value *RestoreSiteParamsSiteOwner
	isSet bool
}

func (v NullableRestoreSiteParamsSiteOwner) Get() *RestoreSiteParamsSiteOwner {
	return v.value
}

func (v *NullableRestoreSiteParamsSiteOwner) Set(val *RestoreSiteParamsSiteOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreSiteParamsSiteOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreSiteParamsSiteOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreSiteParamsSiteOwner(val *RestoreSiteParamsSiteOwner) *NullableRestoreSiteParamsSiteOwner {
	return &NullableRestoreSiteParamsSiteOwner{value: val, isSet: true}
}

func (v NullableRestoreSiteParamsSiteOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreSiteParamsSiteOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


