/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DownloadFilesAndFoldersParams DownloadFilesAndFoldersParams holds the information to create a task for downloading list of files or folders
type DownloadFilesAndFoldersParams struct {
	// Specifies the absolute paths for list of files and folders to download.
	FilesAndFoldersInfo []FilesAndFoldersInfo `json:"filesAndFoldersInfo,omitempty"`
	// Specifies the name of the Download Task. This field must be set and must be a unique name.
	Name NullableString `json:"name"`
	SourceObjectInfo *RestoreObjectDetails `json:"sourceObjectInfo,omitempty"`
}

// NewDownloadFilesAndFoldersParams instantiates a new DownloadFilesAndFoldersParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownloadFilesAndFoldersParams(name NullableString) *DownloadFilesAndFoldersParams {
	this := DownloadFilesAndFoldersParams{}
	this.Name = name
	return &this
}

// NewDownloadFilesAndFoldersParamsWithDefaults instantiates a new DownloadFilesAndFoldersParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownloadFilesAndFoldersParamsWithDefaults() *DownloadFilesAndFoldersParams {
	this := DownloadFilesAndFoldersParams{}
	return &this
}

// GetFilesAndFoldersInfo returns the FilesAndFoldersInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DownloadFilesAndFoldersParams) GetFilesAndFoldersInfo() []FilesAndFoldersInfo {
	if o == nil  {
		var ret []FilesAndFoldersInfo
		return ret
	}
	return o.FilesAndFoldersInfo
}

// GetFilesAndFoldersInfoOk returns a tuple with the FilesAndFoldersInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DownloadFilesAndFoldersParams) GetFilesAndFoldersInfoOk() (*[]FilesAndFoldersInfo, bool) {
	if o == nil || o.FilesAndFoldersInfo == nil {
		return nil, false
	}
	return &o.FilesAndFoldersInfo, true
}

// HasFilesAndFoldersInfo returns a boolean if a field has been set.
func (o *DownloadFilesAndFoldersParams) HasFilesAndFoldersInfo() bool {
	if o != nil && o.FilesAndFoldersInfo != nil {
		return true
	}

	return false
}

// SetFilesAndFoldersInfo gets a reference to the given []FilesAndFoldersInfo and assigns it to the FilesAndFoldersInfo field.
func (o *DownloadFilesAndFoldersParams) SetFilesAndFoldersInfo(v []FilesAndFoldersInfo) {
	o.FilesAndFoldersInfo = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DownloadFilesAndFoldersParams) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DownloadFilesAndFoldersParams) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *DownloadFilesAndFoldersParams) SetName(v string) {
	o.Name.Set(&v)
}

// GetSourceObjectInfo returns the SourceObjectInfo field value if set, zero value otherwise.
func (o *DownloadFilesAndFoldersParams) GetSourceObjectInfo() RestoreObjectDetails {
	if o == nil || o.SourceObjectInfo == nil {
		var ret RestoreObjectDetails
		return ret
	}
	return *o.SourceObjectInfo
}

// GetSourceObjectInfoOk returns a tuple with the SourceObjectInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadFilesAndFoldersParams) GetSourceObjectInfoOk() (*RestoreObjectDetails, bool) {
	if o == nil || o.SourceObjectInfo == nil {
		return nil, false
	}
	return o.SourceObjectInfo, true
}

// HasSourceObjectInfo returns a boolean if a field has been set.
func (o *DownloadFilesAndFoldersParams) HasSourceObjectInfo() bool {
	if o != nil && o.SourceObjectInfo != nil {
		return true
	}

	return false
}

// SetSourceObjectInfo gets a reference to the given RestoreObjectDetails and assigns it to the SourceObjectInfo field.
func (o *DownloadFilesAndFoldersParams) SetSourceObjectInfo(v RestoreObjectDetails) {
	o.SourceObjectInfo = &v
}

func (o DownloadFilesAndFoldersParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesAndFoldersInfo != nil {
		toSerialize["filesAndFoldersInfo"] = o.FilesAndFoldersInfo
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.SourceObjectInfo != nil {
		toSerialize["sourceObjectInfo"] = o.SourceObjectInfo
	}
	return json.Marshal(toSerialize)
}

type NullableDownloadFilesAndFoldersParams struct {
	value *DownloadFilesAndFoldersParams
	isSet bool
}

func (v NullableDownloadFilesAndFoldersParams) Get() *DownloadFilesAndFoldersParams {
	return v.value
}

func (v *NullableDownloadFilesAndFoldersParams) Set(val *DownloadFilesAndFoldersParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDownloadFilesAndFoldersParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDownloadFilesAndFoldersParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownloadFilesAndFoldersParams(val *DownloadFilesAndFoldersParams) *NullableDownloadFilesAndFoldersParams {
	return &NullableDownloadFilesAndFoldersParams{value: val, isSet: true}
}

func (v NullableDownloadFilesAndFoldersParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownloadFilesAndFoldersParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


