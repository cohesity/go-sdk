/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UpdateApplicationServerParameters Specifies the parameters required to modify the parameters of previously registered Application Servers in a Protection Source.
type UpdateApplicationServerParameters struct {
	// Specifies the types of applications such as 'kSQL', 'kExchange', 'kAD' running on the Protection Source. overrideDescription: true Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	Applications []string `json:"applications,omitempty"`
	// Set this to true if a persistent agent is running on the host. If this is specified, then credentials would not be used to log into the host environment. This mechanism may be used in environments such as VMware to get around UAC permission issues by running the agent as a service with the right credentials. If this field is not specified, credentials must be specified.
	HasPersistentAgent NullableBool `json:"hasPersistentAgent,omitempty"`
	// Specifies password of the username to access the target source.
	Password NullableString `json:"password,omitempty"`
	// Specifies the Id of the Protection Source that contains one or more Application Servers running on it.
	ProtectionSourceId NullableInt64 `json:"protectionSourceId,omitempty"`
	// Specifies username to access the target source.
	Username NullableString `json:"username,omitempty"`
}

// NewUpdateApplicationServerParameters instantiates a new UpdateApplicationServerParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateApplicationServerParameters() *UpdateApplicationServerParameters {
	this := UpdateApplicationServerParameters{}
	return &this
}

// NewUpdateApplicationServerParametersWithDefaults instantiates a new UpdateApplicationServerParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateApplicationServerParametersWithDefaults() *UpdateApplicationServerParameters {
	this := UpdateApplicationServerParameters{}
	return &this
}

// GetApplications returns the Applications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateApplicationServerParameters) GetApplications() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateApplicationServerParameters) GetApplicationsOk() (*[]string, bool) {
	if o == nil || o.Applications == nil {
		return nil, false
	}
	return &o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *UpdateApplicationServerParameters) HasApplications() bool {
	if o != nil && o.Applications != nil {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []string and assigns it to the Applications field.
func (o *UpdateApplicationServerParameters) SetApplications(v []string) {
	o.Applications = v
}

// GetHasPersistentAgent returns the HasPersistentAgent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateApplicationServerParameters) GetHasPersistentAgent() bool {
	if o == nil || o.HasPersistentAgent.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasPersistentAgent.Get()
}

// GetHasPersistentAgentOk returns a tuple with the HasPersistentAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateApplicationServerParameters) GetHasPersistentAgentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasPersistentAgent.Get(), o.HasPersistentAgent.IsSet()
}

// HasHasPersistentAgent returns a boolean if a field has been set.
func (o *UpdateApplicationServerParameters) HasHasPersistentAgent() bool {
	if o != nil && o.HasPersistentAgent.IsSet() {
		return true
	}

	return false
}

// SetHasPersistentAgent gets a reference to the given NullableBool and assigns it to the HasPersistentAgent field.
func (o *UpdateApplicationServerParameters) SetHasPersistentAgent(v bool) {
	o.HasPersistentAgent.Set(&v)
}
// SetHasPersistentAgentNil sets the value for HasPersistentAgent to be an explicit nil
func (o *UpdateApplicationServerParameters) SetHasPersistentAgentNil() {
	o.HasPersistentAgent.Set(nil)
}

// UnsetHasPersistentAgent ensures that no value is present for HasPersistentAgent, not even an explicit nil
func (o *UpdateApplicationServerParameters) UnsetHasPersistentAgent() {
	o.HasPersistentAgent.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateApplicationServerParameters) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateApplicationServerParameters) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *UpdateApplicationServerParameters) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *UpdateApplicationServerParameters) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *UpdateApplicationServerParameters) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *UpdateApplicationServerParameters) UnsetPassword() {
	o.Password.Unset()
}

// GetProtectionSourceId returns the ProtectionSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateApplicationServerParameters) GetProtectionSourceId() int64 {
	if o == nil || o.ProtectionSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ProtectionSourceId.Get()
}

// GetProtectionSourceIdOk returns a tuple with the ProtectionSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateApplicationServerParameters) GetProtectionSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionSourceId.Get(), o.ProtectionSourceId.IsSet()
}

// HasProtectionSourceId returns a boolean if a field has been set.
func (o *UpdateApplicationServerParameters) HasProtectionSourceId() bool {
	if o != nil && o.ProtectionSourceId.IsSet() {
		return true
	}

	return false
}

// SetProtectionSourceId gets a reference to the given NullableInt64 and assigns it to the ProtectionSourceId field.
func (o *UpdateApplicationServerParameters) SetProtectionSourceId(v int64) {
	o.ProtectionSourceId.Set(&v)
}
// SetProtectionSourceIdNil sets the value for ProtectionSourceId to be an explicit nil
func (o *UpdateApplicationServerParameters) SetProtectionSourceIdNil() {
	o.ProtectionSourceId.Set(nil)
}

// UnsetProtectionSourceId ensures that no value is present for ProtectionSourceId, not even an explicit nil
func (o *UpdateApplicationServerParameters) UnsetProtectionSourceId() {
	o.ProtectionSourceId.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateApplicationServerParameters) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateApplicationServerParameters) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *UpdateApplicationServerParameters) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *UpdateApplicationServerParameters) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *UpdateApplicationServerParameters) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *UpdateApplicationServerParameters) UnsetUsername() {
	o.Username.Unset()
}

func (o UpdateApplicationServerParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Applications != nil {
		toSerialize["applications"] = o.Applications
	}
	if o.HasPersistentAgent.IsSet() {
		toSerialize["hasPersistentAgent"] = o.HasPersistentAgent.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.ProtectionSourceId.IsSet() {
		toSerialize["protectionSourceId"] = o.ProtectionSourceId.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateApplicationServerParameters struct {
	value *UpdateApplicationServerParameters
	isSet bool
}

func (v NullableUpdateApplicationServerParameters) Get() *UpdateApplicationServerParameters {
	return v.value
}

func (v *NullableUpdateApplicationServerParameters) Set(val *UpdateApplicationServerParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateApplicationServerParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateApplicationServerParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateApplicationServerParameters(val *UpdateApplicationServerParameters) *NullableUpdateApplicationServerParameters {
	return &NullableUpdateApplicationServerParameters{value: val, isSet: true}
}

func (v NullableUpdateApplicationServerParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateApplicationServerParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


