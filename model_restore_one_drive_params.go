/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreOneDriveParams struct for RestoreOneDriveParams
type RestoreOneDriveParams struct {
	// The list of users/groups whose drives are being restored.
	DriveOwnerVec []RestoreOneDriveParamsDriveOwner `json:"driveOwnerVec,omitempty"`
	// Whether or not all drive items are restored to original location.
	RestoreToOriginal NullableBool `json:"restoreToOriginal,omitempty"`
	// The id of the drive in which items will be restored.
	TargetDriveId NullableString `json:"targetDriveId,omitempty"`
	// All drives part of various users listed in drive_owner_vec will be restored to the drive belonging to target_user having id target_drive_id. Let's say drive_owner_vec is A and B; drive_vec of A and B is 111 and 222 respectively; target_user is C; target_drive_id is 333. The final folder-hierarchy after restore job is finished will look like this : C:333: {target_folder_path}/| |A/111/{whatever is there in restore_item_vec of 111} |B/222/{whatever is there in restore_item_vec of 222}
	TargetFolderPath NullableString `json:"targetFolderPath,omitempty"`
	TargetUser *EntityProto `json:"targetUser,omitempty"`
}

// NewRestoreOneDriveParams instantiates a new RestoreOneDriveParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreOneDriveParams() *RestoreOneDriveParams {
	this := RestoreOneDriveParams{}
	return &this
}

// NewRestoreOneDriveParamsWithDefaults instantiates a new RestoreOneDriveParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreOneDriveParamsWithDefaults() *RestoreOneDriveParams {
	this := RestoreOneDriveParams{}
	return &this
}

// GetDriveOwnerVec returns the DriveOwnerVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOneDriveParams) GetDriveOwnerVec() []RestoreOneDriveParamsDriveOwner {
	if o == nil  {
		var ret []RestoreOneDriveParamsDriveOwner
		return ret
	}
	return o.DriveOwnerVec
}

// GetDriveOwnerVecOk returns a tuple with the DriveOwnerVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOneDriveParams) GetDriveOwnerVecOk() (*[]RestoreOneDriveParamsDriveOwner, bool) {
	if o == nil || o.DriveOwnerVec == nil {
		return nil, false
	}
	return &o.DriveOwnerVec, true
}

// HasDriveOwnerVec returns a boolean if a field has been set.
func (o *RestoreOneDriveParams) HasDriveOwnerVec() bool {
	if o != nil && o.DriveOwnerVec != nil {
		return true
	}

	return false
}

// SetDriveOwnerVec gets a reference to the given []RestoreOneDriveParamsDriveOwner and assigns it to the DriveOwnerVec field.
func (o *RestoreOneDriveParams) SetDriveOwnerVec(v []RestoreOneDriveParamsDriveOwner) {
	o.DriveOwnerVec = v
}

// GetRestoreToOriginal returns the RestoreToOriginal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOneDriveParams) GetRestoreToOriginal() bool {
	if o == nil || o.RestoreToOriginal.Get() == nil {
		var ret bool
		return ret
	}
	return *o.RestoreToOriginal.Get()
}

// GetRestoreToOriginalOk returns a tuple with the RestoreToOriginal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOneDriveParams) GetRestoreToOriginalOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreToOriginal.Get(), o.RestoreToOriginal.IsSet()
}

// HasRestoreToOriginal returns a boolean if a field has been set.
func (o *RestoreOneDriveParams) HasRestoreToOriginal() bool {
	if o != nil && o.RestoreToOriginal.IsSet() {
		return true
	}

	return false
}

// SetRestoreToOriginal gets a reference to the given NullableBool and assigns it to the RestoreToOriginal field.
func (o *RestoreOneDriveParams) SetRestoreToOriginal(v bool) {
	o.RestoreToOriginal.Set(&v)
}
// SetRestoreToOriginalNil sets the value for RestoreToOriginal to be an explicit nil
func (o *RestoreOneDriveParams) SetRestoreToOriginalNil() {
	o.RestoreToOriginal.Set(nil)
}

// UnsetRestoreToOriginal ensures that no value is present for RestoreToOriginal, not even an explicit nil
func (o *RestoreOneDriveParams) UnsetRestoreToOriginal() {
	o.RestoreToOriginal.Unset()
}

// GetTargetDriveId returns the TargetDriveId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOneDriveParams) GetTargetDriveId() string {
	if o == nil || o.TargetDriveId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetDriveId.Get()
}

// GetTargetDriveIdOk returns a tuple with the TargetDriveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOneDriveParams) GetTargetDriveIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetDriveId.Get(), o.TargetDriveId.IsSet()
}

// HasTargetDriveId returns a boolean if a field has been set.
func (o *RestoreOneDriveParams) HasTargetDriveId() bool {
	if o != nil && o.TargetDriveId.IsSet() {
		return true
	}

	return false
}

// SetTargetDriveId gets a reference to the given NullableString and assigns it to the TargetDriveId field.
func (o *RestoreOneDriveParams) SetTargetDriveId(v string) {
	o.TargetDriveId.Set(&v)
}
// SetTargetDriveIdNil sets the value for TargetDriveId to be an explicit nil
func (o *RestoreOneDriveParams) SetTargetDriveIdNil() {
	o.TargetDriveId.Set(nil)
}

// UnsetTargetDriveId ensures that no value is present for TargetDriveId, not even an explicit nil
func (o *RestoreOneDriveParams) UnsetTargetDriveId() {
	o.TargetDriveId.Unset()
}

// GetTargetFolderPath returns the TargetFolderPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOneDriveParams) GetTargetFolderPath() string {
	if o == nil || o.TargetFolderPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetFolderPath.Get()
}

// GetTargetFolderPathOk returns a tuple with the TargetFolderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOneDriveParams) GetTargetFolderPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetFolderPath.Get(), o.TargetFolderPath.IsSet()
}

// HasTargetFolderPath returns a boolean if a field has been set.
func (o *RestoreOneDriveParams) HasTargetFolderPath() bool {
	if o != nil && o.TargetFolderPath.IsSet() {
		return true
	}

	return false
}

// SetTargetFolderPath gets a reference to the given NullableString and assigns it to the TargetFolderPath field.
func (o *RestoreOneDriveParams) SetTargetFolderPath(v string) {
	o.TargetFolderPath.Set(&v)
}
// SetTargetFolderPathNil sets the value for TargetFolderPath to be an explicit nil
func (o *RestoreOneDriveParams) SetTargetFolderPathNil() {
	o.TargetFolderPath.Set(nil)
}

// UnsetTargetFolderPath ensures that no value is present for TargetFolderPath, not even an explicit nil
func (o *RestoreOneDriveParams) UnsetTargetFolderPath() {
	o.TargetFolderPath.Unset()
}

// GetTargetUser returns the TargetUser field value if set, zero value otherwise.
func (o *RestoreOneDriveParams) GetTargetUser() EntityProto {
	if o == nil || o.TargetUser == nil {
		var ret EntityProto
		return ret
	}
	return *o.TargetUser
}

// GetTargetUserOk returns a tuple with the TargetUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreOneDriveParams) GetTargetUserOk() (*EntityProto, bool) {
	if o == nil || o.TargetUser == nil {
		return nil, false
	}
	return o.TargetUser, true
}

// HasTargetUser returns a boolean if a field has been set.
func (o *RestoreOneDriveParams) HasTargetUser() bool {
	if o != nil && o.TargetUser != nil {
		return true
	}

	return false
}

// SetTargetUser gets a reference to the given EntityProto and assigns it to the TargetUser field.
func (o *RestoreOneDriveParams) SetTargetUser(v EntityProto) {
	o.TargetUser = &v
}

func (o RestoreOneDriveParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DriveOwnerVec != nil {
		toSerialize["driveOwnerVec"] = o.DriveOwnerVec
	}
	if o.RestoreToOriginal.IsSet() {
		toSerialize["restoreToOriginal"] = o.RestoreToOriginal.Get()
	}
	if o.TargetDriveId.IsSet() {
		toSerialize["targetDriveId"] = o.TargetDriveId.Get()
	}
	if o.TargetFolderPath.IsSet() {
		toSerialize["targetFolderPath"] = o.TargetFolderPath.Get()
	}
	if o.TargetUser != nil {
		toSerialize["targetUser"] = o.TargetUser
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreOneDriveParams struct {
	value *RestoreOneDriveParams
	isSet bool
}

func (v NullableRestoreOneDriveParams) Get() *RestoreOneDriveParams {
	return v.value
}

func (v *NullableRestoreOneDriveParams) Set(val *RestoreOneDriveParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreOneDriveParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreOneDriveParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreOneDriveParams(val *RestoreOneDriveParams) *NullableRestoreOneDriveParams {
	return &NullableRestoreOneDriveParams{value: val, isSet: true}
}

func (v NullableRestoreOneDriveParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreOneDriveParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


