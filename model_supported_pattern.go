/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SupportedPattern Specifies details of the pattern available for search available in an application such as Pattern Finder within Analytics Work Bench.
type SupportedPattern struct {
	// Specifies whether the pattern has been defined by the system or the user.
	IsSystemDefined NullableBool `json:"isSystemDefined,omitempty"`
	// Specifies the name of the Pattern.
	Name NullableString `json:"name,omitempty"`
	// Specifies the value of the pattern(Regex).
	Pattern NullableString `json:"pattern,omitempty"`
	// Specifies the Pattern type. 'REGULAR' indicates that the pattern contains a regular expression. 'TEMPLATE' indicates that the pattern has a pre defined input pattern such as date of the form 'DD-MM-YYYY'.
	PatternType NullableString `json:"patternType,omitempty"`
}

// NewSupportedPattern instantiates a new SupportedPattern object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportedPattern() *SupportedPattern {
	this := SupportedPattern{}
	return &this
}

// NewSupportedPatternWithDefaults instantiates a new SupportedPattern object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportedPatternWithDefaults() *SupportedPattern {
	this := SupportedPattern{}
	return &this
}

// GetIsSystemDefined returns the IsSystemDefined field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportedPattern) GetIsSystemDefined() bool {
	if o == nil || o.IsSystemDefined.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSystemDefined.Get()
}

// GetIsSystemDefinedOk returns a tuple with the IsSystemDefined field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportedPattern) GetIsSystemDefinedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSystemDefined.Get(), o.IsSystemDefined.IsSet()
}

// HasIsSystemDefined returns a boolean if a field has been set.
func (o *SupportedPattern) HasIsSystemDefined() bool {
	if o != nil && o.IsSystemDefined.IsSet() {
		return true
	}

	return false
}

// SetIsSystemDefined gets a reference to the given NullableBool and assigns it to the IsSystemDefined field.
func (o *SupportedPattern) SetIsSystemDefined(v bool) {
	o.IsSystemDefined.Set(&v)
}
// SetIsSystemDefinedNil sets the value for IsSystemDefined to be an explicit nil
func (o *SupportedPattern) SetIsSystemDefinedNil() {
	o.IsSystemDefined.Set(nil)
}

// UnsetIsSystemDefined ensures that no value is present for IsSystemDefined, not even an explicit nil
func (o *SupportedPattern) UnsetIsSystemDefined() {
	o.IsSystemDefined.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportedPattern) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportedPattern) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SupportedPattern) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SupportedPattern) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SupportedPattern) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SupportedPattern) UnsetName() {
	o.Name.Unset()
}

// GetPattern returns the Pattern field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportedPattern) GetPattern() string {
	if o == nil || o.Pattern.Get() == nil {
		var ret string
		return ret
	}
	return *o.Pattern.Get()
}

// GetPatternOk returns a tuple with the Pattern field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportedPattern) GetPatternOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Pattern.Get(), o.Pattern.IsSet()
}

// HasPattern returns a boolean if a field has been set.
func (o *SupportedPattern) HasPattern() bool {
	if o != nil && o.Pattern.IsSet() {
		return true
	}

	return false
}

// SetPattern gets a reference to the given NullableString and assigns it to the Pattern field.
func (o *SupportedPattern) SetPattern(v string) {
	o.Pattern.Set(&v)
}
// SetPatternNil sets the value for Pattern to be an explicit nil
func (o *SupportedPattern) SetPatternNil() {
	o.Pattern.Set(nil)
}

// UnsetPattern ensures that no value is present for Pattern, not even an explicit nil
func (o *SupportedPattern) UnsetPattern() {
	o.Pattern.Unset()
}

// GetPatternType returns the PatternType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportedPattern) GetPatternType() string {
	if o == nil || o.PatternType.Get() == nil {
		var ret string
		return ret
	}
	return *o.PatternType.Get()
}

// GetPatternTypeOk returns a tuple with the PatternType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportedPattern) GetPatternTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PatternType.Get(), o.PatternType.IsSet()
}

// HasPatternType returns a boolean if a field has been set.
func (o *SupportedPattern) HasPatternType() bool {
	if o != nil && o.PatternType.IsSet() {
		return true
	}

	return false
}

// SetPatternType gets a reference to the given NullableString and assigns it to the PatternType field.
func (o *SupportedPattern) SetPatternType(v string) {
	o.PatternType.Set(&v)
}
// SetPatternTypeNil sets the value for PatternType to be an explicit nil
func (o *SupportedPattern) SetPatternTypeNil() {
	o.PatternType.Set(nil)
}

// UnsetPatternType ensures that no value is present for PatternType, not even an explicit nil
func (o *SupportedPattern) UnsetPatternType() {
	o.PatternType.Unset()
}

func (o SupportedPattern) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsSystemDefined.IsSet() {
		toSerialize["isSystemDefined"] = o.IsSystemDefined.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Pattern.IsSet() {
		toSerialize["pattern"] = o.Pattern.Get()
	}
	if o.PatternType.IsSet() {
		toSerialize["patternType"] = o.PatternType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSupportedPattern struct {
	value *SupportedPattern
	isSet bool
}

func (v NullableSupportedPattern) Get() *SupportedPattern {
	return v.value
}

func (v *NullableSupportedPattern) Set(val *SupportedPattern) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportedPattern) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportedPattern) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportedPattern(val *SupportedPattern) *NullableSupportedPattern {
	return &NullableSupportedPattern{value: val, isSet: true}
}

func (v NullableSupportedPattern) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportedPattern) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


