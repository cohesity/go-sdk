/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreStats Specifies the restore statistics details.
type RestoreStats struct {
	// Specifies the count of cloned objects in the given time frame.
	NumClonedObjects NullableInt64 `json:"numClonedObjects,omitempty"`
	// Specifies the count of recovered objects in the given time frame.
	NumRecoveredObjects NullableInt64 `json:"numRecoveredObjects,omitempty"`
	// Specifies the stats of recovery jobs aggregated by the environment type.
	StatsByEnvironment *[]RestoreEnvStats `json:"statsByEnvironment,omitempty"`
}

// NewRestoreStats instantiates a new RestoreStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreStats() *RestoreStats {
	this := RestoreStats{}
	return &this
}

// NewRestoreStatsWithDefaults instantiates a new RestoreStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreStatsWithDefaults() *RestoreStats {
	this := RestoreStats{}
	return &this
}

// GetNumClonedObjects returns the NumClonedObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreStats) GetNumClonedObjects() int64 {
	if o == nil || o.NumClonedObjects.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumClonedObjects.Get()
}

// GetNumClonedObjectsOk returns a tuple with the NumClonedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreStats) GetNumClonedObjectsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumClonedObjects.Get(), o.NumClonedObjects.IsSet()
}

// HasNumClonedObjects returns a boolean if a field has been set.
func (o *RestoreStats) HasNumClonedObjects() bool {
	if o != nil && o.NumClonedObjects.IsSet() {
		return true
	}

	return false
}

// SetNumClonedObjects gets a reference to the given NullableInt64 and assigns it to the NumClonedObjects field.
func (o *RestoreStats) SetNumClonedObjects(v int64) {
	o.NumClonedObjects.Set(&v)
}
// SetNumClonedObjectsNil sets the value for NumClonedObjects to be an explicit nil
func (o *RestoreStats) SetNumClonedObjectsNil() {
	o.NumClonedObjects.Set(nil)
}

// UnsetNumClonedObjects ensures that no value is present for NumClonedObjects, not even an explicit nil
func (o *RestoreStats) UnsetNumClonedObjects() {
	o.NumClonedObjects.Unset()
}

// GetNumRecoveredObjects returns the NumRecoveredObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreStats) GetNumRecoveredObjects() int64 {
	if o == nil || o.NumRecoveredObjects.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumRecoveredObjects.Get()
}

// GetNumRecoveredObjectsOk returns a tuple with the NumRecoveredObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreStats) GetNumRecoveredObjectsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumRecoveredObjects.Get(), o.NumRecoveredObjects.IsSet()
}

// HasNumRecoveredObjects returns a boolean if a field has been set.
func (o *RestoreStats) HasNumRecoveredObjects() bool {
	if o != nil && o.NumRecoveredObjects.IsSet() {
		return true
	}

	return false
}

// SetNumRecoveredObjects gets a reference to the given NullableInt64 and assigns it to the NumRecoveredObjects field.
func (o *RestoreStats) SetNumRecoveredObjects(v int64) {
	o.NumRecoveredObjects.Set(&v)
}
// SetNumRecoveredObjectsNil sets the value for NumRecoveredObjects to be an explicit nil
func (o *RestoreStats) SetNumRecoveredObjectsNil() {
	o.NumRecoveredObjects.Set(nil)
}

// UnsetNumRecoveredObjects ensures that no value is present for NumRecoveredObjects, not even an explicit nil
func (o *RestoreStats) UnsetNumRecoveredObjects() {
	o.NumRecoveredObjects.Unset()
}

// GetStatsByEnvironment returns the StatsByEnvironment field value if set, zero value otherwise.
func (o *RestoreStats) GetStatsByEnvironment() []RestoreEnvStats {
	if o == nil || o.StatsByEnvironment == nil {
		var ret []RestoreEnvStats
		return ret
	}
	return *o.StatsByEnvironment
}

// GetStatsByEnvironmentOk returns a tuple with the StatsByEnvironment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreStats) GetStatsByEnvironmentOk() (*[]RestoreEnvStats, bool) {
	if o == nil || o.StatsByEnvironment == nil {
		return nil, false
	}
	return o.StatsByEnvironment, true
}

// HasStatsByEnvironment returns a boolean if a field has been set.
func (o *RestoreStats) HasStatsByEnvironment() bool {
	if o != nil && o.StatsByEnvironment != nil {
		return true
	}

	return false
}

// SetStatsByEnvironment gets a reference to the given []RestoreEnvStats and assigns it to the StatsByEnvironment field.
func (o *RestoreStats) SetStatsByEnvironment(v []RestoreEnvStats) {
	o.StatsByEnvironment = &v
}

func (o RestoreStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumClonedObjects.IsSet() {
		toSerialize["numClonedObjects"] = o.NumClonedObjects.Get()
	}
	if o.NumRecoveredObjects.IsSet() {
		toSerialize["numRecoveredObjects"] = o.NumRecoveredObjects.Get()
	}
	if o.StatsByEnvironment != nil {
		toSerialize["statsByEnvironment"] = o.StatsByEnvironment
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreStats struct {
	value *RestoreStats
	isSet bool
}

func (v NullableRestoreStats) Get() *RestoreStats {
	return v.value
}

func (v *NullableRestoreStats) Set(val *RestoreStats) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreStats) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreStats(val *RestoreStats) *NullableRestoreStats {
	return &NullableRestoreStats{value: val, isSet: true}
}

func (v NullableRestoreStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


