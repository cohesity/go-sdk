/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// EntitySchemaProtoKeyValueDescriptor Specifies a key/value pair.
type EntitySchemaProtoKeyValueDescriptor struct {
	// Specifies the name of a key.
	KeyName NullableString `json:"keyName,omitempty"`
	// Specifies the type of the value that is associated with the key. 0 specifies a value type of Int64. 1 specifies a value type of Double. 2 specifies a value type of String. 3 specifies a value type of Bytes.
	ValueType NullableInt32 `json:"valueType,omitempty"`
}

// NewEntitySchemaProtoKeyValueDescriptor instantiates a new EntitySchemaProtoKeyValueDescriptor object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitySchemaProtoKeyValueDescriptor() *EntitySchemaProtoKeyValueDescriptor {
	this := EntitySchemaProtoKeyValueDescriptor{}
	return &this
}

// NewEntitySchemaProtoKeyValueDescriptorWithDefaults instantiates a new EntitySchemaProtoKeyValueDescriptor object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitySchemaProtoKeyValueDescriptorWithDefaults() *EntitySchemaProtoKeyValueDescriptor {
	this := EntitySchemaProtoKeyValueDescriptor{}
	return &this
}

// GetKeyName returns the KeyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoKeyValueDescriptor) GetKeyName() string {
	if o == nil || o.KeyName.Get() == nil {
		var ret string
		return ret
	}
	return *o.KeyName.Get()
}

// GetKeyNameOk returns a tuple with the KeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoKeyValueDescriptor) GetKeyNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeyName.Get(), o.KeyName.IsSet()
}

// HasKeyName returns a boolean if a field has been set.
func (o *EntitySchemaProtoKeyValueDescriptor) HasKeyName() bool {
	if o != nil && o.KeyName.IsSet() {
		return true
	}

	return false
}

// SetKeyName gets a reference to the given NullableString and assigns it to the KeyName field.
func (o *EntitySchemaProtoKeyValueDescriptor) SetKeyName(v string) {
	o.KeyName.Set(&v)
}
// SetKeyNameNil sets the value for KeyName to be an explicit nil
func (o *EntitySchemaProtoKeyValueDescriptor) SetKeyNameNil() {
	o.KeyName.Set(nil)
}

// UnsetKeyName ensures that no value is present for KeyName, not even an explicit nil
func (o *EntitySchemaProtoKeyValueDescriptor) UnsetKeyName() {
	o.KeyName.Unset()
}

// GetValueType returns the ValueType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProtoKeyValueDescriptor) GetValueType() int32 {
	if o == nil || o.ValueType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ValueType.Get()
}

// GetValueTypeOk returns a tuple with the ValueType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProtoKeyValueDescriptor) GetValueTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ValueType.Get(), o.ValueType.IsSet()
}

// HasValueType returns a boolean if a field has been set.
func (o *EntitySchemaProtoKeyValueDescriptor) HasValueType() bool {
	if o != nil && o.ValueType.IsSet() {
		return true
	}

	return false
}

// SetValueType gets a reference to the given NullableInt32 and assigns it to the ValueType field.
func (o *EntitySchemaProtoKeyValueDescriptor) SetValueType(v int32) {
	o.ValueType.Set(&v)
}
// SetValueTypeNil sets the value for ValueType to be an explicit nil
func (o *EntitySchemaProtoKeyValueDescriptor) SetValueTypeNil() {
	o.ValueType.Set(nil)
}

// UnsetValueType ensures that no value is present for ValueType, not even an explicit nil
func (o *EntitySchemaProtoKeyValueDescriptor) UnsetValueType() {
	o.ValueType.Unset()
}

func (o EntitySchemaProtoKeyValueDescriptor) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KeyName.IsSet() {
		toSerialize["keyName"] = o.KeyName.Get()
	}
	if o.ValueType.IsSet() {
		toSerialize["valueType"] = o.ValueType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEntitySchemaProtoKeyValueDescriptor struct {
	value *EntitySchemaProtoKeyValueDescriptor
	isSet bool
}

func (v NullableEntitySchemaProtoKeyValueDescriptor) Get() *EntitySchemaProtoKeyValueDescriptor {
	return v.value
}

func (v *NullableEntitySchemaProtoKeyValueDescriptor) Set(val *EntitySchemaProtoKeyValueDescriptor) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitySchemaProtoKeyValueDescriptor) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitySchemaProtoKeyValueDescriptor) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitySchemaProtoKeyValueDescriptor(val *EntitySchemaProtoKeyValueDescriptor) *NullableEntitySchemaProtoKeyValueDescriptor {
	return &NullableEntitySchemaProtoKeyValueDescriptor{value: val, isSet: true}
}

func (v NullableEntitySchemaProtoKeyValueDescriptor) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitySchemaProtoKeyValueDescriptor) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


