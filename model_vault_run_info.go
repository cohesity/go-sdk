/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VaultRunInfo Specifies the information about a specific vault run.
type VaultRunInfo struct {
	// Specifies the count of runs that ended in the specified state between the start time passed in and the current timestamp.
	Count NullableInt64 `json:"count,omitempty"`
	// Specifies the Unix timestamp at which the run entered the specified state.
	Timestamp NullableInt64 `json:"timestamp,omitempty"`
}

// NewVaultRunInfo instantiates a new VaultRunInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultRunInfo() *VaultRunInfo {
	this := VaultRunInfo{}
	return &this
}

// NewVaultRunInfoWithDefaults instantiates a new VaultRunInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultRunInfoWithDefaults() *VaultRunInfo {
	this := VaultRunInfo{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultRunInfo) GetCount() int64 {
	if o == nil || o.Count.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultRunInfo) GetCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *VaultRunInfo) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt64 and assigns it to the Count field.
func (o *VaultRunInfo) SetCount(v int64) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *VaultRunInfo) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *VaultRunInfo) UnsetCount() {
	o.Count.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultRunInfo) GetTimestamp() int64 {
	if o == nil || o.Timestamp.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultRunInfo) GetTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *VaultRunInfo) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableInt64 and assigns it to the Timestamp field.
func (o *VaultRunInfo) SetTimestamp(v int64) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *VaultRunInfo) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *VaultRunInfo) UnsetTimestamp() {
	o.Timestamp.Unset()
}

func (o VaultRunInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVaultRunInfo struct {
	value *VaultRunInfo
	isSet bool
}

func (v NullableVaultRunInfo) Get() *VaultRunInfo {
	return v.value
}

func (v *NullableVaultRunInfo) Set(val *VaultRunInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultRunInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultRunInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultRunInfo(val *VaultRunInfo) *NullableVaultRunInfo {
	return &NullableVaultRunInfo{value: val, isSet: true}
}

func (v NullableVaultRunInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultRunInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


