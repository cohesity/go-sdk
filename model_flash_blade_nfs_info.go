/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FlashBladeNfsInfo Specifies information specific to NFS protocol exposed by Pure Flash Blade file system.
type FlashBladeNfsInfo struct {
	// Specifies NFS protocol export rules. Rules are in the form host(options). host represents one of the following categories:  IP address in the form ddd.ddd.ddd.ddd for IPv4, or xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx for IPv6.  Netmask in the form ddd.ddd.ddd.ddd/dd for IPv4, or xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx:xxxx/xxx for IPv6.  Wildcard in the form * to represent all clients  options in parenthesis represents a comma-separated list of NFS export options. Valid export options are rw, ro, root_squash, no_root_squash, and fileid_32bit.
	ExportRules NullableString `json:"exportRules,omitempty"`
}

// NewFlashBladeNfsInfo instantiates a new FlashBladeNfsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlashBladeNfsInfo() *FlashBladeNfsInfo {
	this := FlashBladeNfsInfo{}
	return &this
}

// NewFlashBladeNfsInfoWithDefaults instantiates a new FlashBladeNfsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlashBladeNfsInfoWithDefaults() *FlashBladeNfsInfo {
	this := FlashBladeNfsInfo{}
	return &this
}

// GetExportRules returns the ExportRules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashBladeNfsInfo) GetExportRules() string {
	if o == nil || o.ExportRules.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExportRules.Get()
}

// GetExportRulesOk returns a tuple with the ExportRules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashBladeNfsInfo) GetExportRulesOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExportRules.Get(), o.ExportRules.IsSet()
}

// HasExportRules returns a boolean if a field has been set.
func (o *FlashBladeNfsInfo) HasExportRules() bool {
	if o != nil && o.ExportRules.IsSet() {
		return true
	}

	return false
}

// SetExportRules gets a reference to the given NullableString and assigns it to the ExportRules field.
func (o *FlashBladeNfsInfo) SetExportRules(v string) {
	o.ExportRules.Set(&v)
}
// SetExportRulesNil sets the value for ExportRules to be an explicit nil
func (o *FlashBladeNfsInfo) SetExportRulesNil() {
	o.ExportRules.Set(nil)
}

// UnsetExportRules ensures that no value is present for ExportRules, not even an explicit nil
func (o *FlashBladeNfsInfo) UnsetExportRules() {
	o.ExportRules.Unset()
}

func (o FlashBladeNfsInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExportRules.IsSet() {
		toSerialize["exportRules"] = o.ExportRules.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFlashBladeNfsInfo struct {
	value *FlashBladeNfsInfo
	isSet bool
}

func (v NullableFlashBladeNfsInfo) Get() *FlashBladeNfsInfo {
	return v.value
}

func (v *NullableFlashBladeNfsInfo) Set(val *FlashBladeNfsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFlashBladeNfsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFlashBladeNfsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlashBladeNfsInfo(val *FlashBladeNfsInfo) *NullableFlashBladeNfsInfo {
	return &NullableFlashBladeNfsInfo{value: val, isSet: true}
}

func (v NullableFlashBladeNfsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlashBladeNfsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


