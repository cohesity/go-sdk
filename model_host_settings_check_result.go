/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// HostSettingsCheckResult Specifies the result of various checks performed internally on host.
type HostSettingsCheckResult struct {
	// Specifies the type of the check internally performed. Specifies the type of the host check performed internally. 'kIsAgentPortAccessible' indicates the check for agent port access. 'kIsAgentRunning' indicates the status for the Cohesity agent service. 'kIsSQLWriterRunning' indicates the status for SQLWriter service. 'kAreSQLInstancesRunning' indicates the run status for all the SQL instances in the host. 'kCheckServiceLoginsConfig' checks the privileges and sysadmin status of the logins used by the SQL instance services, Cohesity agent service and the SQLWriter service. 'kCheckSQLFCIVIP' checks whether the SQL FCI is registered with a valid VIP or FQDN. 'kCheckSQLDiskSpace' checks whether volumes containing SQL DBs have at least 10% free space.
	CheckType NullableString `json:"checkType,omitempty"`
	// Specifies the type of the result returned after performing the internal host check. Specifies the type of the host check result performed internally. 'kPass' indicates that the respective check was successful. 'kFail' indicates that the respective check failed as some mandatory setting is not met 'kWarning' indicates that the respective check has warning as certain non-mandatory setting is not met.
	ResultType NullableString `json:"resultType,omitempty"`
	// Specifies a descriptive message for failed/warning types.
	UserMessage NullableString `json:"userMessage,omitempty"`
}

// NewHostSettingsCheckResult instantiates a new HostSettingsCheckResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostSettingsCheckResult() *HostSettingsCheckResult {
	this := HostSettingsCheckResult{}
	return &this
}

// NewHostSettingsCheckResultWithDefaults instantiates a new HostSettingsCheckResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostSettingsCheckResultWithDefaults() *HostSettingsCheckResult {
	this := HostSettingsCheckResult{}
	return &this
}

// GetCheckType returns the CheckType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HostSettingsCheckResult) GetCheckType() string {
	if o == nil || o.CheckType.Get() == nil {
		var ret string
		return ret
	}
	return *o.CheckType.Get()
}

// GetCheckTypeOk returns a tuple with the CheckType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HostSettingsCheckResult) GetCheckTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CheckType.Get(), o.CheckType.IsSet()
}

// HasCheckType returns a boolean if a field has been set.
func (o *HostSettingsCheckResult) HasCheckType() bool {
	if o != nil && o.CheckType.IsSet() {
		return true
	}

	return false
}

// SetCheckType gets a reference to the given NullableString and assigns it to the CheckType field.
func (o *HostSettingsCheckResult) SetCheckType(v string) {
	o.CheckType.Set(&v)
}
// SetCheckTypeNil sets the value for CheckType to be an explicit nil
func (o *HostSettingsCheckResult) SetCheckTypeNil() {
	o.CheckType.Set(nil)
}

// UnsetCheckType ensures that no value is present for CheckType, not even an explicit nil
func (o *HostSettingsCheckResult) UnsetCheckType() {
	o.CheckType.Unset()
}

// GetResultType returns the ResultType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HostSettingsCheckResult) GetResultType() string {
	if o == nil || o.ResultType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ResultType.Get()
}

// GetResultTypeOk returns a tuple with the ResultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HostSettingsCheckResult) GetResultTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ResultType.Get(), o.ResultType.IsSet()
}

// HasResultType returns a boolean if a field has been set.
func (o *HostSettingsCheckResult) HasResultType() bool {
	if o != nil && o.ResultType.IsSet() {
		return true
	}

	return false
}

// SetResultType gets a reference to the given NullableString and assigns it to the ResultType field.
func (o *HostSettingsCheckResult) SetResultType(v string) {
	o.ResultType.Set(&v)
}
// SetResultTypeNil sets the value for ResultType to be an explicit nil
func (o *HostSettingsCheckResult) SetResultTypeNil() {
	o.ResultType.Set(nil)
}

// UnsetResultType ensures that no value is present for ResultType, not even an explicit nil
func (o *HostSettingsCheckResult) UnsetResultType() {
	o.ResultType.Unset()
}

// GetUserMessage returns the UserMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HostSettingsCheckResult) GetUserMessage() string {
	if o == nil || o.UserMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserMessage.Get()
}

// GetUserMessageOk returns a tuple with the UserMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HostSettingsCheckResult) GetUserMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserMessage.Get(), o.UserMessage.IsSet()
}

// HasUserMessage returns a boolean if a field has been set.
func (o *HostSettingsCheckResult) HasUserMessage() bool {
	if o != nil && o.UserMessage.IsSet() {
		return true
	}

	return false
}

// SetUserMessage gets a reference to the given NullableString and assigns it to the UserMessage field.
func (o *HostSettingsCheckResult) SetUserMessage(v string) {
	o.UserMessage.Set(&v)
}
// SetUserMessageNil sets the value for UserMessage to be an explicit nil
func (o *HostSettingsCheckResult) SetUserMessageNil() {
	o.UserMessage.Set(nil)
}

// UnsetUserMessage ensures that no value is present for UserMessage, not even an explicit nil
func (o *HostSettingsCheckResult) UnsetUserMessage() {
	o.UserMessage.Unset()
}

func (o HostSettingsCheckResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CheckType.IsSet() {
		toSerialize["checkType"] = o.CheckType.Get()
	}
	if o.ResultType.IsSet() {
		toSerialize["resultType"] = o.ResultType.Get()
	}
	if o.UserMessage.IsSet() {
		toSerialize["userMessage"] = o.UserMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHostSettingsCheckResult struct {
	value *HostSettingsCheckResult
	isSet bool
}

func (v NullableHostSettingsCheckResult) Get() *HostSettingsCheckResult {
	return v.value
}

func (v *NullableHostSettingsCheckResult) Set(val *HostSettingsCheckResult) {
	v.value = val
	v.isSet = true
}

func (v NullableHostSettingsCheckResult) IsSet() bool {
	return v.isSet
}

func (v *NullableHostSettingsCheckResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostSettingsCheckResult(val *HostSettingsCheckResult) *NullableHostSettingsCheckResult {
	return &NullableHostSettingsCheckResult{value: val, isSet: true}
}

func (v NullableHostSettingsCheckResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostSettingsCheckResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


