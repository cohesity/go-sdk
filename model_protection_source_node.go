/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ProtectionSourceNode Many different node types are supported such as 'kComputeResource' and 'kResourcePool'.
type ProtectionSourceNode struct {
	// Array of Child Subtrees.  Specifies the child subtree used to store additional application-level Objects. Different environments use the subtree to store application-level information. For example for SQL Server, this subtree stores the SQL Server instances running on a VM.
	ApplicationNodes []map[string]interface{} `json:"applicationNodes,omitempty"`
	EntityPaginationParameters *PaginationParameters `json:"entityPaginationParameters,omitempty"`
	EntityPermissionInfo *EntityPermissionInformation `json:"entityPermissionInfo,omitempty"`
	// Specifies the logical size of the data in bytes for the Object on this node. Presence of this field indicates this node is a leaf node.
	LogicalSize NullableInt64 `json:"logicalSize,omitempty"`
	// Array of Child Nodes.  Specifies children of the current node in the Protection Sources hierarchy. When representing Objects in memory, the entire Object subtree hierarchy is represented. You can use this subtree to navigate down the Object hierarchy.
	Nodes []map[string]interface{} `json:"nodes,omitempty"`
	// Array of Protected Objects.  Specifies aggregated information about all the child Objects of this node that are currently protected by a Protection Job. There is one entry for each environment that is being backed up. The aggregated information for the Object hierarchy's environment will be available at the 0th index of the vector.
	ProtectedSourcesSummary []AggregatedSubtreeInfo `json:"protectedSourcesSummary,omitempty"`
	// Specifies the Protection Source for the current node.
	ProtectionSource NullableProtectionSource `json:"protectionSource,omitempty"`
	// Specifies registration information for a root node in a Protection Sources tree. A root node represents a registered Source on the Cohesity Cluster, such as a vCenter Server.
	RegistrationInfo NullableRegisteredSourceInfo `json:"registrationInfo,omitempty"`
	// Array of Unprotected Sources.  Specifies aggregated information about all the child Objects of this node that are not protected by any Protection Jobs. The aggregated information for the Objects hierarchy's environment will be available at the 0th index of the vector. NOTE: This list includes Objects that were protected at some point in the past but are no longer actively protected. Snapshots containing these Objects may even exist on the Cohesity Cluster and be available to recover from.
	UnprotectedSourcesSummary []AggregatedSubtreeInfo `json:"unprotectedSourcesSummary,omitempty"`
}

// NewProtectionSourceNode instantiates a new ProtectionSourceNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionSourceNode() *ProtectionSourceNode {
	this := ProtectionSourceNode{}
	return &this
}

// NewProtectionSourceNodeWithDefaults instantiates a new ProtectionSourceNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionSourceNodeWithDefaults() *ProtectionSourceNode {
	this := ProtectionSourceNode{}
	return &this
}

// GetApplicationNodes returns the ApplicationNodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceNode) GetApplicationNodes() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.ApplicationNodes
}

// GetApplicationNodesOk returns a tuple with the ApplicationNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceNode) GetApplicationNodesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.ApplicationNodes == nil {
		return nil, false
	}
	return &o.ApplicationNodes, true
}

// HasApplicationNodes returns a boolean if a field has been set.
func (o *ProtectionSourceNode) HasApplicationNodes() bool {
	if o != nil && o.ApplicationNodes != nil {
		return true
	}

	return false
}

// SetApplicationNodes gets a reference to the given []map[string]interface{} and assigns it to the ApplicationNodes field.
func (o *ProtectionSourceNode) SetApplicationNodes(v []map[string]interface{}) {
	o.ApplicationNodes = v
}

// GetEntityPaginationParameters returns the EntityPaginationParameters field value if set, zero value otherwise.
func (o *ProtectionSourceNode) GetEntityPaginationParameters() PaginationParameters {
	if o == nil || o.EntityPaginationParameters == nil {
		var ret PaginationParameters
		return ret
	}
	return *o.EntityPaginationParameters
}

// GetEntityPaginationParametersOk returns a tuple with the EntityPaginationParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionSourceNode) GetEntityPaginationParametersOk() (*PaginationParameters, bool) {
	if o == nil || o.EntityPaginationParameters == nil {
		return nil, false
	}
	return o.EntityPaginationParameters, true
}

// HasEntityPaginationParameters returns a boolean if a field has been set.
func (o *ProtectionSourceNode) HasEntityPaginationParameters() bool {
	if o != nil && o.EntityPaginationParameters != nil {
		return true
	}

	return false
}

// SetEntityPaginationParameters gets a reference to the given PaginationParameters and assigns it to the EntityPaginationParameters field.
func (o *ProtectionSourceNode) SetEntityPaginationParameters(v PaginationParameters) {
	o.EntityPaginationParameters = &v
}

// GetEntityPermissionInfo returns the EntityPermissionInfo field value if set, zero value otherwise.
func (o *ProtectionSourceNode) GetEntityPermissionInfo() EntityPermissionInformation {
	if o == nil || o.EntityPermissionInfo == nil {
		var ret EntityPermissionInformation
		return ret
	}
	return *o.EntityPermissionInfo
}

// GetEntityPermissionInfoOk returns a tuple with the EntityPermissionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionSourceNode) GetEntityPermissionInfoOk() (*EntityPermissionInformation, bool) {
	if o == nil || o.EntityPermissionInfo == nil {
		return nil, false
	}
	return o.EntityPermissionInfo, true
}

// HasEntityPermissionInfo returns a boolean if a field has been set.
func (o *ProtectionSourceNode) HasEntityPermissionInfo() bool {
	if o != nil && o.EntityPermissionInfo != nil {
		return true
	}

	return false
}

// SetEntityPermissionInfo gets a reference to the given EntityPermissionInformation and assigns it to the EntityPermissionInfo field.
func (o *ProtectionSourceNode) SetEntityPermissionInfo(v EntityPermissionInformation) {
	o.EntityPermissionInfo = &v
}

// GetLogicalSize returns the LogicalSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceNode) GetLogicalSize() int64 {
	if o == nil || o.LogicalSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalSize.Get()
}

// GetLogicalSizeOk returns a tuple with the LogicalSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceNode) GetLogicalSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSize.Get(), o.LogicalSize.IsSet()
}

// HasLogicalSize returns a boolean if a field has been set.
func (o *ProtectionSourceNode) HasLogicalSize() bool {
	if o != nil && o.LogicalSize.IsSet() {
		return true
	}

	return false
}

// SetLogicalSize gets a reference to the given NullableInt64 and assigns it to the LogicalSize field.
func (o *ProtectionSourceNode) SetLogicalSize(v int64) {
	o.LogicalSize.Set(&v)
}
// SetLogicalSizeNil sets the value for LogicalSize to be an explicit nil
func (o *ProtectionSourceNode) SetLogicalSizeNil() {
	o.LogicalSize.Set(nil)
}

// UnsetLogicalSize ensures that no value is present for LogicalSize, not even an explicit nil
func (o *ProtectionSourceNode) UnsetLogicalSize() {
	o.LogicalSize.Unset()
}

// GetNodes returns the Nodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceNode) GetNodes() []map[string]interface{} {
	if o == nil  {
		var ret []map[string]interface{}
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceNode) GetNodesOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Nodes == nil {
		return nil, false
	}
	return &o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *ProtectionSourceNode) HasNodes() bool {
	if o != nil && o.Nodes != nil {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []map[string]interface{} and assigns it to the Nodes field.
func (o *ProtectionSourceNode) SetNodes(v []map[string]interface{}) {
	o.Nodes = v
}

// GetProtectedSourcesSummary returns the ProtectedSourcesSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceNode) GetProtectedSourcesSummary() []AggregatedSubtreeInfo {
	if o == nil  {
		var ret []AggregatedSubtreeInfo
		return ret
	}
	return o.ProtectedSourcesSummary
}

// GetProtectedSourcesSummaryOk returns a tuple with the ProtectedSourcesSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceNode) GetProtectedSourcesSummaryOk() (*[]AggregatedSubtreeInfo, bool) {
	if o == nil || o.ProtectedSourcesSummary == nil {
		return nil, false
	}
	return &o.ProtectedSourcesSummary, true
}

// HasProtectedSourcesSummary returns a boolean if a field has been set.
func (o *ProtectionSourceNode) HasProtectedSourcesSummary() bool {
	if o != nil && o.ProtectedSourcesSummary != nil {
		return true
	}

	return false
}

// SetProtectedSourcesSummary gets a reference to the given []AggregatedSubtreeInfo and assigns it to the ProtectedSourcesSummary field.
func (o *ProtectionSourceNode) SetProtectedSourcesSummary(v []AggregatedSubtreeInfo) {
	o.ProtectedSourcesSummary = v
}

// GetProtectionSource returns the ProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceNode) GetProtectionSource() ProtectionSource {
	if o == nil || o.ProtectionSource.Get() == nil {
		var ret ProtectionSource
		return ret
	}
	return *o.ProtectionSource.Get()
}

// GetProtectionSourceOk returns a tuple with the ProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceNode) GetProtectionSourceOk() (*ProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionSource.Get(), o.ProtectionSource.IsSet()
}

// HasProtectionSource returns a boolean if a field has been set.
func (o *ProtectionSourceNode) HasProtectionSource() bool {
	if o != nil && o.ProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetProtectionSource gets a reference to the given NullableProtectionSource and assigns it to the ProtectionSource field.
func (o *ProtectionSourceNode) SetProtectionSource(v ProtectionSource) {
	o.ProtectionSource.Set(&v)
}
// SetProtectionSourceNil sets the value for ProtectionSource to be an explicit nil
func (o *ProtectionSourceNode) SetProtectionSourceNil() {
	o.ProtectionSource.Set(nil)
}

// UnsetProtectionSource ensures that no value is present for ProtectionSource, not even an explicit nil
func (o *ProtectionSourceNode) UnsetProtectionSource() {
	o.ProtectionSource.Unset()
}

// GetRegistrationInfo returns the RegistrationInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceNode) GetRegistrationInfo() RegisteredSourceInfo {
	if o == nil || o.RegistrationInfo.Get() == nil {
		var ret RegisteredSourceInfo
		return ret
	}
	return *o.RegistrationInfo.Get()
}

// GetRegistrationInfoOk returns a tuple with the RegistrationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceNode) GetRegistrationInfoOk() (*RegisteredSourceInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegistrationInfo.Get(), o.RegistrationInfo.IsSet()
}

// HasRegistrationInfo returns a boolean if a field has been set.
func (o *ProtectionSourceNode) HasRegistrationInfo() bool {
	if o != nil && o.RegistrationInfo.IsSet() {
		return true
	}

	return false
}

// SetRegistrationInfo gets a reference to the given NullableRegisteredSourceInfo and assigns it to the RegistrationInfo field.
func (o *ProtectionSourceNode) SetRegistrationInfo(v RegisteredSourceInfo) {
	o.RegistrationInfo.Set(&v)
}
// SetRegistrationInfoNil sets the value for RegistrationInfo to be an explicit nil
func (o *ProtectionSourceNode) SetRegistrationInfoNil() {
	o.RegistrationInfo.Set(nil)
}

// UnsetRegistrationInfo ensures that no value is present for RegistrationInfo, not even an explicit nil
func (o *ProtectionSourceNode) UnsetRegistrationInfo() {
	o.RegistrationInfo.Unset()
}

// GetUnprotectedSourcesSummary returns the UnprotectedSourcesSummary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceNode) GetUnprotectedSourcesSummary() []AggregatedSubtreeInfo {
	if o == nil  {
		var ret []AggregatedSubtreeInfo
		return ret
	}
	return o.UnprotectedSourcesSummary
}

// GetUnprotectedSourcesSummaryOk returns a tuple with the UnprotectedSourcesSummary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceNode) GetUnprotectedSourcesSummaryOk() (*[]AggregatedSubtreeInfo, bool) {
	if o == nil || o.UnprotectedSourcesSummary == nil {
		return nil, false
	}
	return &o.UnprotectedSourcesSummary, true
}

// HasUnprotectedSourcesSummary returns a boolean if a field has been set.
func (o *ProtectionSourceNode) HasUnprotectedSourcesSummary() bool {
	if o != nil && o.UnprotectedSourcesSummary != nil {
		return true
	}

	return false
}

// SetUnprotectedSourcesSummary gets a reference to the given []AggregatedSubtreeInfo and assigns it to the UnprotectedSourcesSummary field.
func (o *ProtectionSourceNode) SetUnprotectedSourcesSummary(v []AggregatedSubtreeInfo) {
	o.UnprotectedSourcesSummary = v
}

func (o ProtectionSourceNode) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplicationNodes != nil {
		toSerialize["applicationNodes"] = o.ApplicationNodes
	}
	if o.EntityPaginationParameters != nil {
		toSerialize["entityPaginationParameters"] = o.EntityPaginationParameters
	}
	if o.EntityPermissionInfo != nil {
		toSerialize["entityPermissionInfo"] = o.EntityPermissionInfo
	}
	if o.LogicalSize.IsSet() {
		toSerialize["logicalSize"] = o.LogicalSize.Get()
	}
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	if o.ProtectedSourcesSummary != nil {
		toSerialize["protectedSourcesSummary"] = o.ProtectedSourcesSummary
	}
	if o.ProtectionSource.IsSet() {
		toSerialize["protectionSource"] = o.ProtectionSource.Get()
	}
	if o.RegistrationInfo.IsSet() {
		toSerialize["registrationInfo"] = o.RegistrationInfo.Get()
	}
	if o.UnprotectedSourcesSummary != nil {
		toSerialize["unprotectedSourcesSummary"] = o.UnprotectedSourcesSummary
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionSourceNode struct {
	value *ProtectionSourceNode
	isSet bool
}

func (v NullableProtectionSourceNode) Get() *ProtectionSourceNode {
	return v.value
}

func (v *NullableProtectionSourceNode) Set(val *ProtectionSourceNode) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionSourceNode) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionSourceNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionSourceNode(val *ProtectionSourceNode) *NullableProtectionSourceNode {
	return &NullableProtectionSourceNode{value: val, isSet: true}
}

func (v NullableProtectionSourceNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionSourceNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


