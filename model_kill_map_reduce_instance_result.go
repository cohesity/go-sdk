/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// KillMapReduceInstanceResult struct for KillMapReduceInstanceResult
type KillMapReduceInstanceResult struct {
	Error *ErrorProto `json:"error,omitempty"`
}

// NewKillMapReduceInstanceResult instantiates a new KillMapReduceInstanceResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKillMapReduceInstanceResult() *KillMapReduceInstanceResult {
	this := KillMapReduceInstanceResult{}
	return &this
}

// NewKillMapReduceInstanceResultWithDefaults instantiates a new KillMapReduceInstanceResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKillMapReduceInstanceResultWithDefaults() *KillMapReduceInstanceResult {
	this := KillMapReduceInstanceResult{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *KillMapReduceInstanceResult) GetError() ErrorProto {
	if o == nil || o.Error == nil {
		var ret ErrorProto
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KillMapReduceInstanceResult) GetErrorOk() (*ErrorProto, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *KillMapReduceInstanceResult) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorProto and assigns it to the Error field.
func (o *KillMapReduceInstanceResult) SetError(v ErrorProto) {
	o.Error = &v
}

func (o KillMapReduceInstanceResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableKillMapReduceInstanceResult struct {
	value *KillMapReduceInstanceResult
	isSet bool
}

func (v NullableKillMapReduceInstanceResult) Get() *KillMapReduceInstanceResult {
	return v.value
}

func (v *NullableKillMapReduceInstanceResult) Set(val *KillMapReduceInstanceResult) {
	v.value = val
	v.isSet = true
}

func (v NullableKillMapReduceInstanceResult) IsSet() bool {
	return v.isSet
}

func (v *NullableKillMapReduceInstanceResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKillMapReduceInstanceResult(val *KillMapReduceInstanceResult) *NullableKillMapReduceInstanceResult {
	return &NullableKillMapReduceInstanceResult{value: val, isSet: true}
}

func (v NullableKillMapReduceInstanceResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKillMapReduceInstanceResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


