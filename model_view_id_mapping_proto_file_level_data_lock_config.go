/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ViewIdMappingProtoFileLevelDataLockConfig struct for ViewIdMappingProtoFileLevelDataLockConfig
type ViewIdMappingProtoFileLevelDataLockConfig struct {
	// Auto-lock automatically commit files to WORM state in the filesystem if they have not been modified for an administrator-specified period of time. When the auto-lock is enabled, this field must be set to idle time duration after which file would be automatically locked. Auto locking will be disabled when configured with default value of -1.
	AutoLockDurationUsecs NullableInt64 `json:"autoLockDurationUsecs,omitempty"`
	// Default retention duration is used when an explicit retention timestamp is not set by user/application when locking a file. If the administrator does not want to enforce this, this field must not be set. If file requires being retained forever by default, this must be set to INT64_MAX. If minimum and maximum retention are enforced, then this must be always between these two durations.
	DefaultRetentionDurationUsecs NullableInt64 `json:"defaultRetentionDurationUsecs,omitempty"`
	// Specifies timestamp to protect locked files until a specific date. This would override retention periods and deny any mutable or remove operations on locked files until a specific date.
	HoldTimestampUsecs NullableInt64 `json:"holdTimestampUsecs,omitempty"`
	// Specifies maximum retention duration of worm locked file. If the administrator does not want to enforce this, this must not be set. If default and max retention duration are enforced, max retention duration must be greater than or equal to default retention duration. If min and max retention duration are enforced, max retention duration must be greater than and equal to min retention duration.
	MaxRetentionDurationUsecs NullableInt64 `json:"maxRetentionDurationUsecs,omitempty"`
	// Minimum and maximum retention duration allow the administrator to enforce retention duration that falls within a specified range. If the administrator does not want to enforce this, this must not be set. If the file requires being retained forever, this must be set to INT64_MAX. If default retention is enforced, this must be less than or equal to default retention. If max retention are enforced, default retention duration must be less than and equal to max retention duration.
	MinRetentionDurationUsecs NullableInt64 `json:"minRetentionDurationUsecs,omitempty"`
	// Explicit locking mode.
	Mode NullableInt32 `json:"mode,omitempty"`
	// Explicit locking protocol.
	Protocol NullableInt32 `json:"protocol,omitempty"`
}

// NewViewIdMappingProtoFileLevelDataLockConfig instantiates a new ViewIdMappingProtoFileLevelDataLockConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewIdMappingProtoFileLevelDataLockConfig() *ViewIdMappingProtoFileLevelDataLockConfig {
	this := ViewIdMappingProtoFileLevelDataLockConfig{}
	return &this
}

// NewViewIdMappingProtoFileLevelDataLockConfigWithDefaults instantiates a new ViewIdMappingProtoFileLevelDataLockConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewIdMappingProtoFileLevelDataLockConfigWithDefaults() *ViewIdMappingProtoFileLevelDataLockConfig {
	this := ViewIdMappingProtoFileLevelDataLockConfig{}
	return &this
}

// GetAutoLockDurationUsecs returns the AutoLockDurationUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetAutoLockDurationUsecs() int64 {
	if o == nil || o.AutoLockDurationUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AutoLockDurationUsecs.Get()
}

// GetAutoLockDurationUsecsOk returns a tuple with the AutoLockDurationUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetAutoLockDurationUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AutoLockDurationUsecs.Get(), o.AutoLockDurationUsecs.IsSet()
}

// HasAutoLockDurationUsecs returns a boolean if a field has been set.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) HasAutoLockDurationUsecs() bool {
	if o != nil && o.AutoLockDurationUsecs.IsSet() {
		return true
	}

	return false
}

// SetAutoLockDurationUsecs gets a reference to the given NullableInt64 and assigns it to the AutoLockDurationUsecs field.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetAutoLockDurationUsecs(v int64) {
	o.AutoLockDurationUsecs.Set(&v)
}
// SetAutoLockDurationUsecsNil sets the value for AutoLockDurationUsecs to be an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetAutoLockDurationUsecsNil() {
	o.AutoLockDurationUsecs.Set(nil)
}

// UnsetAutoLockDurationUsecs ensures that no value is present for AutoLockDurationUsecs, not even an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) UnsetAutoLockDurationUsecs() {
	o.AutoLockDurationUsecs.Unset()
}

// GetDefaultRetentionDurationUsecs returns the DefaultRetentionDurationUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetDefaultRetentionDurationUsecs() int64 {
	if o == nil || o.DefaultRetentionDurationUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DefaultRetentionDurationUsecs.Get()
}

// GetDefaultRetentionDurationUsecsOk returns a tuple with the DefaultRetentionDurationUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetDefaultRetentionDurationUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultRetentionDurationUsecs.Get(), o.DefaultRetentionDurationUsecs.IsSet()
}

// HasDefaultRetentionDurationUsecs returns a boolean if a field has been set.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) HasDefaultRetentionDurationUsecs() bool {
	if o != nil && o.DefaultRetentionDurationUsecs.IsSet() {
		return true
	}

	return false
}

// SetDefaultRetentionDurationUsecs gets a reference to the given NullableInt64 and assigns it to the DefaultRetentionDurationUsecs field.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetDefaultRetentionDurationUsecs(v int64) {
	o.DefaultRetentionDurationUsecs.Set(&v)
}
// SetDefaultRetentionDurationUsecsNil sets the value for DefaultRetentionDurationUsecs to be an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetDefaultRetentionDurationUsecsNil() {
	o.DefaultRetentionDurationUsecs.Set(nil)
}

// UnsetDefaultRetentionDurationUsecs ensures that no value is present for DefaultRetentionDurationUsecs, not even an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) UnsetDefaultRetentionDurationUsecs() {
	o.DefaultRetentionDurationUsecs.Unset()
}

// GetHoldTimestampUsecs returns the HoldTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetHoldTimestampUsecs() int64 {
	if o == nil || o.HoldTimestampUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.HoldTimestampUsecs.Get()
}

// GetHoldTimestampUsecsOk returns a tuple with the HoldTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetHoldTimestampUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HoldTimestampUsecs.Get(), o.HoldTimestampUsecs.IsSet()
}

// HasHoldTimestampUsecs returns a boolean if a field has been set.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) HasHoldTimestampUsecs() bool {
	if o != nil && o.HoldTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetHoldTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the HoldTimestampUsecs field.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetHoldTimestampUsecs(v int64) {
	o.HoldTimestampUsecs.Set(&v)
}
// SetHoldTimestampUsecsNil sets the value for HoldTimestampUsecs to be an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetHoldTimestampUsecsNil() {
	o.HoldTimestampUsecs.Set(nil)
}

// UnsetHoldTimestampUsecs ensures that no value is present for HoldTimestampUsecs, not even an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) UnsetHoldTimestampUsecs() {
	o.HoldTimestampUsecs.Unset()
}

// GetMaxRetentionDurationUsecs returns the MaxRetentionDurationUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetMaxRetentionDurationUsecs() int64 {
	if o == nil || o.MaxRetentionDurationUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MaxRetentionDurationUsecs.Get()
}

// GetMaxRetentionDurationUsecsOk returns a tuple with the MaxRetentionDurationUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetMaxRetentionDurationUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxRetentionDurationUsecs.Get(), o.MaxRetentionDurationUsecs.IsSet()
}

// HasMaxRetentionDurationUsecs returns a boolean if a field has been set.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) HasMaxRetentionDurationUsecs() bool {
	if o != nil && o.MaxRetentionDurationUsecs.IsSet() {
		return true
	}

	return false
}

// SetMaxRetentionDurationUsecs gets a reference to the given NullableInt64 and assigns it to the MaxRetentionDurationUsecs field.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetMaxRetentionDurationUsecs(v int64) {
	o.MaxRetentionDurationUsecs.Set(&v)
}
// SetMaxRetentionDurationUsecsNil sets the value for MaxRetentionDurationUsecs to be an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetMaxRetentionDurationUsecsNil() {
	o.MaxRetentionDurationUsecs.Set(nil)
}

// UnsetMaxRetentionDurationUsecs ensures that no value is present for MaxRetentionDurationUsecs, not even an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) UnsetMaxRetentionDurationUsecs() {
	o.MaxRetentionDurationUsecs.Unset()
}

// GetMinRetentionDurationUsecs returns the MinRetentionDurationUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetMinRetentionDurationUsecs() int64 {
	if o == nil || o.MinRetentionDurationUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MinRetentionDurationUsecs.Get()
}

// GetMinRetentionDurationUsecsOk returns a tuple with the MinRetentionDurationUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetMinRetentionDurationUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinRetentionDurationUsecs.Get(), o.MinRetentionDurationUsecs.IsSet()
}

// HasMinRetentionDurationUsecs returns a boolean if a field has been set.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) HasMinRetentionDurationUsecs() bool {
	if o != nil && o.MinRetentionDurationUsecs.IsSet() {
		return true
	}

	return false
}

// SetMinRetentionDurationUsecs gets a reference to the given NullableInt64 and assigns it to the MinRetentionDurationUsecs field.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetMinRetentionDurationUsecs(v int64) {
	o.MinRetentionDurationUsecs.Set(&v)
}
// SetMinRetentionDurationUsecsNil sets the value for MinRetentionDurationUsecs to be an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetMinRetentionDurationUsecsNil() {
	o.MinRetentionDurationUsecs.Set(nil)
}

// UnsetMinRetentionDurationUsecs ensures that no value is present for MinRetentionDurationUsecs, not even an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) UnsetMinRetentionDurationUsecs() {
	o.MinRetentionDurationUsecs.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetMode() int32 {
	if o == nil || o.Mode.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetModeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableInt32 and assigns it to the Mode field.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetMode(v int32) {
	o.Mode.Set(&v)
}
// SetModeNil sets the value for Mode to be an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) UnsetMode() {
	o.Mode.Unset()
}

// GetProtocol returns the Protocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetProtocol() int32 {
	if o == nil || o.Protocol.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIdMappingProtoFileLevelDataLockConfig) GetProtocolOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// HasProtocol returns a boolean if a field has been set.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) HasProtocol() bool {
	if o != nil && o.Protocol.IsSet() {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given NullableInt32 and assigns it to the Protocol field.
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetProtocol(v int32) {
	o.Protocol.Set(&v)
}
// SetProtocolNil sets the value for Protocol to be an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) SetProtocolNil() {
	o.Protocol.Set(nil)
}

// UnsetProtocol ensures that no value is present for Protocol, not even an explicit nil
func (o *ViewIdMappingProtoFileLevelDataLockConfig) UnsetProtocol() {
	o.Protocol.Unset()
}

func (o ViewIdMappingProtoFileLevelDataLockConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AutoLockDurationUsecs.IsSet() {
		toSerialize["autoLockDurationUsecs"] = o.AutoLockDurationUsecs.Get()
	}
	if o.DefaultRetentionDurationUsecs.IsSet() {
		toSerialize["defaultRetentionDurationUsecs"] = o.DefaultRetentionDurationUsecs.Get()
	}
	if o.HoldTimestampUsecs.IsSet() {
		toSerialize["holdTimestampUsecs"] = o.HoldTimestampUsecs.Get()
	}
	if o.MaxRetentionDurationUsecs.IsSet() {
		toSerialize["maxRetentionDurationUsecs"] = o.MaxRetentionDurationUsecs.Get()
	}
	if o.MinRetentionDurationUsecs.IsSet() {
		toSerialize["minRetentionDurationUsecs"] = o.MinRetentionDurationUsecs.Get()
	}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	if o.Protocol.IsSet() {
		toSerialize["protocol"] = o.Protocol.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewIdMappingProtoFileLevelDataLockConfig struct {
	value *ViewIdMappingProtoFileLevelDataLockConfig
	isSet bool
}

func (v NullableViewIdMappingProtoFileLevelDataLockConfig) Get() *ViewIdMappingProtoFileLevelDataLockConfig {
	return v.value
}

func (v *NullableViewIdMappingProtoFileLevelDataLockConfig) Set(val *ViewIdMappingProtoFileLevelDataLockConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableViewIdMappingProtoFileLevelDataLockConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableViewIdMappingProtoFileLevelDataLockConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewIdMappingProtoFileLevelDataLockConfig(val *ViewIdMappingProtoFileLevelDataLockConfig) *NullableViewIdMappingProtoFileLevelDataLockConfig {
	return &NullableViewIdMappingProtoFileLevelDataLockConfig{value: val, isSet: true}
}

func (v NullableViewIdMappingProtoFileLevelDataLockConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewIdMappingProtoFileLevelDataLockConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


