/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UpdateNotifications Specifies the list of notificationIds and the operation to be performed.
type UpdateNotifications struct {
	// Specifies the operation to be performed on the resource. Eg. \"action\":\"dismiss\"
	Action NullableString `json:"action,omitempty"`
	// Specifies the list of NotificationIds to be operated upon.
	NotificationIds []string `json:"notificationIds,omitempty"`
}

// NewUpdateNotifications instantiates a new UpdateNotifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateNotifications() *UpdateNotifications {
	this := UpdateNotifications{}
	return &this
}

// NewUpdateNotificationsWithDefaults instantiates a new UpdateNotifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateNotificationsWithDefaults() *UpdateNotifications {
	this := UpdateNotifications{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateNotifications) GetAction() string {
	if o == nil || o.Action.Get() == nil {
		var ret string
		return ret
	}
	return *o.Action.Get()
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateNotifications) GetActionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Action.Get(), o.Action.IsSet()
}

// HasAction returns a boolean if a field has been set.
func (o *UpdateNotifications) HasAction() bool {
	if o != nil && o.Action.IsSet() {
		return true
	}

	return false
}

// SetAction gets a reference to the given NullableString and assigns it to the Action field.
func (o *UpdateNotifications) SetAction(v string) {
	o.Action.Set(&v)
}
// SetActionNil sets the value for Action to be an explicit nil
func (o *UpdateNotifications) SetActionNil() {
	o.Action.Set(nil)
}

// UnsetAction ensures that no value is present for Action, not even an explicit nil
func (o *UpdateNotifications) UnsetAction() {
	o.Action.Unset()
}

// GetNotificationIds returns the NotificationIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateNotifications) GetNotificationIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.NotificationIds
}

// GetNotificationIdsOk returns a tuple with the NotificationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateNotifications) GetNotificationIdsOk() (*[]string, bool) {
	if o == nil || o.NotificationIds == nil {
		return nil, false
	}
	return &o.NotificationIds, true
}

// HasNotificationIds returns a boolean if a field has been set.
func (o *UpdateNotifications) HasNotificationIds() bool {
	if o != nil && o.NotificationIds != nil {
		return true
	}

	return false
}

// SetNotificationIds gets a reference to the given []string and assigns it to the NotificationIds field.
func (o *UpdateNotifications) SetNotificationIds(v []string) {
	o.NotificationIds = v
}

func (o UpdateNotifications) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action.IsSet() {
		toSerialize["action"] = o.Action.Get()
	}
	if o.NotificationIds != nil {
		toSerialize["notificationIds"] = o.NotificationIds
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateNotifications struct {
	value *UpdateNotifications
	isSet bool
}

func (v NullableUpdateNotifications) Get() *UpdateNotifications {
	return v.value
}

func (v *NullableUpdateNotifications) Set(val *UpdateNotifications) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateNotifications(val *UpdateNotifications) *NullableUpdateNotifications {
	return &NullableUpdateNotifications{value: val, isSet: true}
}

func (v NullableUpdateNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


