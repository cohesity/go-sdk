/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NasBackupParams Message to capture any additional backup params for a NAS environment.
type NasBackupParams struct {
	// This bool parameter will be set only for DP volumes when customer doesn't select the full_backup_snapshot_label and incremental_backup_snapshot_label. When set to true, backend will be using existing oldest snapshot for the first backup. Each incremental will be selected in ascending of snapshot create time on the source.
	BackupExistingSnapshot NullableBool `json:"backupExistingSnapshot,omitempty"`
	// A list of IP addresses that should not be used.
	BlacklistedIpAddrs []string `json:"blacklistedIpAddrs,omitempty"`
	// Whether the backup job should continue on errors for snapshot based backups. For non-snapshot-based generic NAS backup jobs, Magneto always continues on errors.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Whether this backup job should use encryption.
	EncryptionEnabled NullableBool `json:"encryptionEnabled,omitempty"`
	FilteringPolicy *FilteringPolicyProto `json:"filteringPolicy,omitempty"`
	FldConfig *ViewIdMappingProtoFileLevelDataLockConfig `json:"fldConfig,omitempty"`
	// Only used when we backup using discovered snapshots. This prefix is to figure out which discovered snapshot we need to use for full backup.
	FullBackupSnapshotLabel NullableString `json:"fullBackupSnapshotLabel,omitempty"`
	// Only used when we backup using discovered snapshots. This prefix is to figure out which discovered snapshot we need to use for incremental backup.
	IncrementalBackupSnapshotLabel NullableString `json:"incrementalBackupSnapshotLabel,omitempty"`
	// Source initiated backup when the source sends pushes the data like for example snapmirror based backup for netapp.
	IsSourceInitiatedBackup NullableBool `json:"isSourceInitiatedBackup,omitempty"`
	// If the target entity is a mixed mode volume, which NAS protocol type the user prefer to backup. This does not apply to generic NAS and will be ignored.
	MixedModePreference NullableInt32 `json:"mixedModePreference,omitempty"`
	S3Viewbackupproperties *S3ViewBackupProperties `json:"s3Viewbackupproperties,omitempty"`
	// Whether this backup job should utilize changelist like API when available for faster incremental backups.
	SnapshotChangeEnabled NullableBool `json:"snapshotChangeEnabled,omitempty"`
}

// NewNasBackupParams instantiates a new NasBackupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNasBackupParams() *NasBackupParams {
	this := NasBackupParams{}
	return &this
}

// NewNasBackupParamsWithDefaults instantiates a new NasBackupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNasBackupParamsWithDefaults() *NasBackupParams {
	this := NasBackupParams{}
	return &this
}

// GetBackupExistingSnapshot returns the BackupExistingSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasBackupParams) GetBackupExistingSnapshot() bool {
	if o == nil || o.BackupExistingSnapshot.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackupExistingSnapshot.Get()
}

// GetBackupExistingSnapshotOk returns a tuple with the BackupExistingSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasBackupParams) GetBackupExistingSnapshotOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupExistingSnapshot.Get(), o.BackupExistingSnapshot.IsSet()
}

// HasBackupExistingSnapshot returns a boolean if a field has been set.
func (o *NasBackupParams) HasBackupExistingSnapshot() bool {
	if o != nil && o.BackupExistingSnapshot.IsSet() {
		return true
	}

	return false
}

// SetBackupExistingSnapshot gets a reference to the given NullableBool and assigns it to the BackupExistingSnapshot field.
func (o *NasBackupParams) SetBackupExistingSnapshot(v bool) {
	o.BackupExistingSnapshot.Set(&v)
}
// SetBackupExistingSnapshotNil sets the value for BackupExistingSnapshot to be an explicit nil
func (o *NasBackupParams) SetBackupExistingSnapshotNil() {
	o.BackupExistingSnapshot.Set(nil)
}

// UnsetBackupExistingSnapshot ensures that no value is present for BackupExistingSnapshot, not even an explicit nil
func (o *NasBackupParams) UnsetBackupExistingSnapshot() {
	o.BackupExistingSnapshot.Unset()
}

// GetBlacklistedIpAddrs returns the BlacklistedIpAddrs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasBackupParams) GetBlacklistedIpAddrs() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.BlacklistedIpAddrs
}

// GetBlacklistedIpAddrsOk returns a tuple with the BlacklistedIpAddrs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasBackupParams) GetBlacklistedIpAddrsOk() (*[]string, bool) {
	if o == nil || o.BlacklistedIpAddrs == nil {
		return nil, false
	}
	return &o.BlacklistedIpAddrs, true
}

// HasBlacklistedIpAddrs returns a boolean if a field has been set.
func (o *NasBackupParams) HasBlacklistedIpAddrs() bool {
	if o != nil && o.BlacklistedIpAddrs != nil {
		return true
	}

	return false
}

// SetBlacklistedIpAddrs gets a reference to the given []string and assigns it to the BlacklistedIpAddrs field.
func (o *NasBackupParams) SetBlacklistedIpAddrs(v []string) {
	o.BlacklistedIpAddrs = v
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasBackupParams) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasBackupParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *NasBackupParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *NasBackupParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *NasBackupParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *NasBackupParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetEncryptionEnabled returns the EncryptionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasBackupParams) GetEncryptionEnabled() bool {
	if o == nil || o.EncryptionEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EncryptionEnabled.Get()
}

// GetEncryptionEnabledOk returns a tuple with the EncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasBackupParams) GetEncryptionEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionEnabled.Get(), o.EncryptionEnabled.IsSet()
}

// HasEncryptionEnabled returns a boolean if a field has been set.
func (o *NasBackupParams) HasEncryptionEnabled() bool {
	if o != nil && o.EncryptionEnabled.IsSet() {
		return true
	}

	return false
}

// SetEncryptionEnabled gets a reference to the given NullableBool and assigns it to the EncryptionEnabled field.
func (o *NasBackupParams) SetEncryptionEnabled(v bool) {
	o.EncryptionEnabled.Set(&v)
}
// SetEncryptionEnabledNil sets the value for EncryptionEnabled to be an explicit nil
func (o *NasBackupParams) SetEncryptionEnabledNil() {
	o.EncryptionEnabled.Set(nil)
}

// UnsetEncryptionEnabled ensures that no value is present for EncryptionEnabled, not even an explicit nil
func (o *NasBackupParams) UnsetEncryptionEnabled() {
	o.EncryptionEnabled.Unset()
}

// GetFilteringPolicy returns the FilteringPolicy field value if set, zero value otherwise.
func (o *NasBackupParams) GetFilteringPolicy() FilteringPolicyProto {
	if o == nil || o.FilteringPolicy == nil {
		var ret FilteringPolicyProto
		return ret
	}
	return *o.FilteringPolicy
}

// GetFilteringPolicyOk returns a tuple with the FilteringPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasBackupParams) GetFilteringPolicyOk() (*FilteringPolicyProto, bool) {
	if o == nil || o.FilteringPolicy == nil {
		return nil, false
	}
	return o.FilteringPolicy, true
}

// HasFilteringPolicy returns a boolean if a field has been set.
func (o *NasBackupParams) HasFilteringPolicy() bool {
	if o != nil && o.FilteringPolicy != nil {
		return true
	}

	return false
}

// SetFilteringPolicy gets a reference to the given FilteringPolicyProto and assigns it to the FilteringPolicy field.
func (o *NasBackupParams) SetFilteringPolicy(v FilteringPolicyProto) {
	o.FilteringPolicy = &v
}

// GetFldConfig returns the FldConfig field value if set, zero value otherwise.
func (o *NasBackupParams) GetFldConfig() ViewIdMappingProtoFileLevelDataLockConfig {
	if o == nil || o.FldConfig == nil {
		var ret ViewIdMappingProtoFileLevelDataLockConfig
		return ret
	}
	return *o.FldConfig
}

// GetFldConfigOk returns a tuple with the FldConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasBackupParams) GetFldConfigOk() (*ViewIdMappingProtoFileLevelDataLockConfig, bool) {
	if o == nil || o.FldConfig == nil {
		return nil, false
	}
	return o.FldConfig, true
}

// HasFldConfig returns a boolean if a field has been set.
func (o *NasBackupParams) HasFldConfig() bool {
	if o != nil && o.FldConfig != nil {
		return true
	}

	return false
}

// SetFldConfig gets a reference to the given ViewIdMappingProtoFileLevelDataLockConfig and assigns it to the FldConfig field.
func (o *NasBackupParams) SetFldConfig(v ViewIdMappingProtoFileLevelDataLockConfig) {
	o.FldConfig = &v
}

// GetFullBackupSnapshotLabel returns the FullBackupSnapshotLabel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasBackupParams) GetFullBackupSnapshotLabel() string {
	if o == nil || o.FullBackupSnapshotLabel.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullBackupSnapshotLabel.Get()
}

// GetFullBackupSnapshotLabelOk returns a tuple with the FullBackupSnapshotLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasBackupParams) GetFullBackupSnapshotLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullBackupSnapshotLabel.Get(), o.FullBackupSnapshotLabel.IsSet()
}

// HasFullBackupSnapshotLabel returns a boolean if a field has been set.
func (o *NasBackupParams) HasFullBackupSnapshotLabel() bool {
	if o != nil && o.FullBackupSnapshotLabel.IsSet() {
		return true
	}

	return false
}

// SetFullBackupSnapshotLabel gets a reference to the given NullableString and assigns it to the FullBackupSnapshotLabel field.
func (o *NasBackupParams) SetFullBackupSnapshotLabel(v string) {
	o.FullBackupSnapshotLabel.Set(&v)
}
// SetFullBackupSnapshotLabelNil sets the value for FullBackupSnapshotLabel to be an explicit nil
func (o *NasBackupParams) SetFullBackupSnapshotLabelNil() {
	o.FullBackupSnapshotLabel.Set(nil)
}

// UnsetFullBackupSnapshotLabel ensures that no value is present for FullBackupSnapshotLabel, not even an explicit nil
func (o *NasBackupParams) UnsetFullBackupSnapshotLabel() {
	o.FullBackupSnapshotLabel.Unset()
}

// GetIncrementalBackupSnapshotLabel returns the IncrementalBackupSnapshotLabel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasBackupParams) GetIncrementalBackupSnapshotLabel() string {
	if o == nil || o.IncrementalBackupSnapshotLabel.Get() == nil {
		var ret string
		return ret
	}
	return *o.IncrementalBackupSnapshotLabel.Get()
}

// GetIncrementalBackupSnapshotLabelOk returns a tuple with the IncrementalBackupSnapshotLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasBackupParams) GetIncrementalBackupSnapshotLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncrementalBackupSnapshotLabel.Get(), o.IncrementalBackupSnapshotLabel.IsSet()
}

// HasIncrementalBackupSnapshotLabel returns a boolean if a field has been set.
func (o *NasBackupParams) HasIncrementalBackupSnapshotLabel() bool {
	if o != nil && o.IncrementalBackupSnapshotLabel.IsSet() {
		return true
	}

	return false
}

// SetIncrementalBackupSnapshotLabel gets a reference to the given NullableString and assigns it to the IncrementalBackupSnapshotLabel field.
func (o *NasBackupParams) SetIncrementalBackupSnapshotLabel(v string) {
	o.IncrementalBackupSnapshotLabel.Set(&v)
}
// SetIncrementalBackupSnapshotLabelNil sets the value for IncrementalBackupSnapshotLabel to be an explicit nil
func (o *NasBackupParams) SetIncrementalBackupSnapshotLabelNil() {
	o.IncrementalBackupSnapshotLabel.Set(nil)
}

// UnsetIncrementalBackupSnapshotLabel ensures that no value is present for IncrementalBackupSnapshotLabel, not even an explicit nil
func (o *NasBackupParams) UnsetIncrementalBackupSnapshotLabel() {
	o.IncrementalBackupSnapshotLabel.Unset()
}

// GetIsSourceInitiatedBackup returns the IsSourceInitiatedBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasBackupParams) GetIsSourceInitiatedBackup() bool {
	if o == nil || o.IsSourceInitiatedBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSourceInitiatedBackup.Get()
}

// GetIsSourceInitiatedBackupOk returns a tuple with the IsSourceInitiatedBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasBackupParams) GetIsSourceInitiatedBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSourceInitiatedBackup.Get(), o.IsSourceInitiatedBackup.IsSet()
}

// HasIsSourceInitiatedBackup returns a boolean if a field has been set.
func (o *NasBackupParams) HasIsSourceInitiatedBackup() bool {
	if o != nil && o.IsSourceInitiatedBackup.IsSet() {
		return true
	}

	return false
}

// SetIsSourceInitiatedBackup gets a reference to the given NullableBool and assigns it to the IsSourceInitiatedBackup field.
func (o *NasBackupParams) SetIsSourceInitiatedBackup(v bool) {
	o.IsSourceInitiatedBackup.Set(&v)
}
// SetIsSourceInitiatedBackupNil sets the value for IsSourceInitiatedBackup to be an explicit nil
func (o *NasBackupParams) SetIsSourceInitiatedBackupNil() {
	o.IsSourceInitiatedBackup.Set(nil)
}

// UnsetIsSourceInitiatedBackup ensures that no value is present for IsSourceInitiatedBackup, not even an explicit nil
func (o *NasBackupParams) UnsetIsSourceInitiatedBackup() {
	o.IsSourceInitiatedBackup.Unset()
}

// GetMixedModePreference returns the MixedModePreference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasBackupParams) GetMixedModePreference() int32 {
	if o == nil || o.MixedModePreference.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MixedModePreference.Get()
}

// GetMixedModePreferenceOk returns a tuple with the MixedModePreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasBackupParams) GetMixedModePreferenceOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MixedModePreference.Get(), o.MixedModePreference.IsSet()
}

// HasMixedModePreference returns a boolean if a field has been set.
func (o *NasBackupParams) HasMixedModePreference() bool {
	if o != nil && o.MixedModePreference.IsSet() {
		return true
	}

	return false
}

// SetMixedModePreference gets a reference to the given NullableInt32 and assigns it to the MixedModePreference field.
func (o *NasBackupParams) SetMixedModePreference(v int32) {
	o.MixedModePreference.Set(&v)
}
// SetMixedModePreferenceNil sets the value for MixedModePreference to be an explicit nil
func (o *NasBackupParams) SetMixedModePreferenceNil() {
	o.MixedModePreference.Set(nil)
}

// UnsetMixedModePreference ensures that no value is present for MixedModePreference, not even an explicit nil
func (o *NasBackupParams) UnsetMixedModePreference() {
	o.MixedModePreference.Unset()
}

// GetS3Viewbackupproperties returns the S3Viewbackupproperties field value if set, zero value otherwise.
func (o *NasBackupParams) GetS3Viewbackupproperties() S3ViewBackupProperties {
	if o == nil || o.S3Viewbackupproperties == nil {
		var ret S3ViewBackupProperties
		return ret
	}
	return *o.S3Viewbackupproperties
}

// GetS3ViewbackuppropertiesOk returns a tuple with the S3Viewbackupproperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasBackupParams) GetS3ViewbackuppropertiesOk() (*S3ViewBackupProperties, bool) {
	if o == nil || o.S3Viewbackupproperties == nil {
		return nil, false
	}
	return o.S3Viewbackupproperties, true
}

// HasS3Viewbackupproperties returns a boolean if a field has been set.
func (o *NasBackupParams) HasS3Viewbackupproperties() bool {
	if o != nil && o.S3Viewbackupproperties != nil {
		return true
	}

	return false
}

// SetS3Viewbackupproperties gets a reference to the given S3ViewBackupProperties and assigns it to the S3Viewbackupproperties field.
func (o *NasBackupParams) SetS3Viewbackupproperties(v S3ViewBackupProperties) {
	o.S3Viewbackupproperties = &v
}

// GetSnapshotChangeEnabled returns the SnapshotChangeEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasBackupParams) GetSnapshotChangeEnabled() bool {
	if o == nil || o.SnapshotChangeEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SnapshotChangeEnabled.Get()
}

// GetSnapshotChangeEnabledOk returns a tuple with the SnapshotChangeEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasBackupParams) GetSnapshotChangeEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotChangeEnabled.Get(), o.SnapshotChangeEnabled.IsSet()
}

// HasSnapshotChangeEnabled returns a boolean if a field has been set.
func (o *NasBackupParams) HasSnapshotChangeEnabled() bool {
	if o != nil && o.SnapshotChangeEnabled.IsSet() {
		return true
	}

	return false
}

// SetSnapshotChangeEnabled gets a reference to the given NullableBool and assigns it to the SnapshotChangeEnabled field.
func (o *NasBackupParams) SetSnapshotChangeEnabled(v bool) {
	o.SnapshotChangeEnabled.Set(&v)
}
// SetSnapshotChangeEnabledNil sets the value for SnapshotChangeEnabled to be an explicit nil
func (o *NasBackupParams) SetSnapshotChangeEnabledNil() {
	o.SnapshotChangeEnabled.Set(nil)
}

// UnsetSnapshotChangeEnabled ensures that no value is present for SnapshotChangeEnabled, not even an explicit nil
func (o *NasBackupParams) UnsetSnapshotChangeEnabled() {
	o.SnapshotChangeEnabled.Unset()
}

func (o NasBackupParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupExistingSnapshot.IsSet() {
		toSerialize["backupExistingSnapshot"] = o.BackupExistingSnapshot.Get()
	}
	if o.BlacklistedIpAddrs != nil {
		toSerialize["blacklistedIpAddrs"] = o.BlacklistedIpAddrs
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.EncryptionEnabled.IsSet() {
		toSerialize["encryptionEnabled"] = o.EncryptionEnabled.Get()
	}
	if o.FilteringPolicy != nil {
		toSerialize["filteringPolicy"] = o.FilteringPolicy
	}
	if o.FldConfig != nil {
		toSerialize["fldConfig"] = o.FldConfig
	}
	if o.FullBackupSnapshotLabel.IsSet() {
		toSerialize["fullBackupSnapshotLabel"] = o.FullBackupSnapshotLabel.Get()
	}
	if o.IncrementalBackupSnapshotLabel.IsSet() {
		toSerialize["incrementalBackupSnapshotLabel"] = o.IncrementalBackupSnapshotLabel.Get()
	}
	if o.IsSourceInitiatedBackup.IsSet() {
		toSerialize["isSourceInitiatedBackup"] = o.IsSourceInitiatedBackup.Get()
	}
	if o.MixedModePreference.IsSet() {
		toSerialize["mixedModePreference"] = o.MixedModePreference.Get()
	}
	if o.S3Viewbackupproperties != nil {
		toSerialize["s3Viewbackupproperties"] = o.S3Viewbackupproperties
	}
	if o.SnapshotChangeEnabled.IsSet() {
		toSerialize["snapshotChangeEnabled"] = o.SnapshotChangeEnabled.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNasBackupParams struct {
	value *NasBackupParams
	isSet bool
}

func (v NullableNasBackupParams) Get() *NasBackupParams {
	return v.value
}

func (v *NullableNasBackupParams) Set(val *NasBackupParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNasBackupParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNasBackupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNasBackupParams(val *NasBackupParams) *NullableNasBackupParams {
	return &NullableNasBackupParams{value: val, isSet: true}
}

func (v NullableNasBackupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNasBackupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


