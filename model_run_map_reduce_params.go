/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RunMapReduceParams RunMapReduceParams specifies the input params to run a map reduce instance.
type RunMapReduceParams struct {
	// ApplicationId is the Id of the map reduce application to run.
	AppId NullableInt64 `json:"appId,omitempty"`
	// InputParams specifies optional list of key=value input params specified for running the map reduce instance.
	InputParams []MapReduceInstanceInputParam `json:"inputParams,omitempty"`
	MrInput *InputSpec `json:"mrInput,omitempty"`
	MrOutput *OutputSpec `json:"mrOutput,omitempty"`
}

// NewRunMapReduceParams instantiates a new RunMapReduceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunMapReduceParams() *RunMapReduceParams {
	this := RunMapReduceParams{}
	return &this
}

// NewRunMapReduceParamsWithDefaults instantiates a new RunMapReduceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunMapReduceParamsWithDefaults() *RunMapReduceParams {
	this := RunMapReduceParams{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunMapReduceParams) GetAppId() int64 {
	if o == nil || o.AppId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AppId.Get()
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunMapReduceParams) GetAppIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppId.Get(), o.AppId.IsSet()
}

// HasAppId returns a boolean if a field has been set.
func (o *RunMapReduceParams) HasAppId() bool {
	if o != nil && o.AppId.IsSet() {
		return true
	}

	return false
}

// SetAppId gets a reference to the given NullableInt64 and assigns it to the AppId field.
func (o *RunMapReduceParams) SetAppId(v int64) {
	o.AppId.Set(&v)
}
// SetAppIdNil sets the value for AppId to be an explicit nil
func (o *RunMapReduceParams) SetAppIdNil() {
	o.AppId.Set(nil)
}

// UnsetAppId ensures that no value is present for AppId, not even an explicit nil
func (o *RunMapReduceParams) UnsetAppId() {
	o.AppId.Unset()
}

// GetInputParams returns the InputParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunMapReduceParams) GetInputParams() []MapReduceInstanceInputParam {
	if o == nil  {
		var ret []MapReduceInstanceInputParam
		return ret
	}
	return o.InputParams
}

// GetInputParamsOk returns a tuple with the InputParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunMapReduceParams) GetInputParamsOk() (*[]MapReduceInstanceInputParam, bool) {
	if o == nil || o.InputParams == nil {
		return nil, false
	}
	return &o.InputParams, true
}

// HasInputParams returns a boolean if a field has been set.
func (o *RunMapReduceParams) HasInputParams() bool {
	if o != nil && o.InputParams != nil {
		return true
	}

	return false
}

// SetInputParams gets a reference to the given []MapReduceInstanceInputParam and assigns it to the InputParams field.
func (o *RunMapReduceParams) SetInputParams(v []MapReduceInstanceInputParam) {
	o.InputParams = v
}

// GetMrInput returns the MrInput field value if set, zero value otherwise.
func (o *RunMapReduceParams) GetMrInput() InputSpec {
	if o == nil || o.MrInput == nil {
		var ret InputSpec
		return ret
	}
	return *o.MrInput
}

// GetMrInputOk returns a tuple with the MrInput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunMapReduceParams) GetMrInputOk() (*InputSpec, bool) {
	if o == nil || o.MrInput == nil {
		return nil, false
	}
	return o.MrInput, true
}

// HasMrInput returns a boolean if a field has been set.
func (o *RunMapReduceParams) HasMrInput() bool {
	if o != nil && o.MrInput != nil {
		return true
	}

	return false
}

// SetMrInput gets a reference to the given InputSpec and assigns it to the MrInput field.
func (o *RunMapReduceParams) SetMrInput(v InputSpec) {
	o.MrInput = &v
}

// GetMrOutput returns the MrOutput field value if set, zero value otherwise.
func (o *RunMapReduceParams) GetMrOutput() OutputSpec {
	if o == nil || o.MrOutput == nil {
		var ret OutputSpec
		return ret
	}
	return *o.MrOutput
}

// GetMrOutputOk returns a tuple with the MrOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunMapReduceParams) GetMrOutputOk() (*OutputSpec, bool) {
	if o == nil || o.MrOutput == nil {
		return nil, false
	}
	return o.MrOutput, true
}

// HasMrOutput returns a boolean if a field has been set.
func (o *RunMapReduceParams) HasMrOutput() bool {
	if o != nil && o.MrOutput != nil {
		return true
	}

	return false
}

// SetMrOutput gets a reference to the given OutputSpec and assigns it to the MrOutput field.
func (o *RunMapReduceParams) SetMrOutput(v OutputSpec) {
	o.MrOutput = &v
}

func (o RunMapReduceParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppId.IsSet() {
		toSerialize["appId"] = o.AppId.Get()
	}
	if o.InputParams != nil {
		toSerialize["inputParams"] = o.InputParams
	}
	if o.MrInput != nil {
		toSerialize["mrInput"] = o.MrInput
	}
	if o.MrOutput != nil {
		toSerialize["mrOutput"] = o.MrOutput
	}
	return json.Marshal(toSerialize)
}

type NullableRunMapReduceParams struct {
	value *RunMapReduceParams
	isSet bool
}

func (v NullableRunMapReduceParams) Get() *RunMapReduceParams {
	return v.value
}

func (v *NullableRunMapReduceParams) Set(val *RunMapReduceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRunMapReduceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRunMapReduceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunMapReduceParams(val *RunMapReduceParams) *NullableRunMapReduceParams {
	return &NullableRunMapReduceParams{value: val, isSet: true}
}

func (v NullableRunMapReduceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunMapReduceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


