/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RunJobSnapshotTarget Specifies settings for a Copy Task when a Protection is run. It gives the target location for the Snapshot and its retention.
type RunJobSnapshotTarget struct {
	ArchivalTarget *ArchivalExternalTarget `json:"archivalTarget,omitempty"`
	CloudReplicationTarget *CloudDeployTargetDetails `json:"cloudReplicationTarget,omitempty"`
	// Specifies the number of days to retain copied Snapshots on the target.
	DaysToKeep NullableInt64 `json:"daysToKeep,omitempty"`
	// Specifies optionally whether to retain the snapshot for legal purpose. If set to true, the run cannot be deleted until the retention period. Note that using this option may cause the Cluster to run out of space. If set to false explicitly, the hold is removed, and the run will expire as specified in the policy of the Protection Job. If this field is not specified, there is no change to the hold of the run. This field can be set only by a User having Data Security Role.
	HoldForLegalPurpose NullableBool `json:"holdForLegalPurpose,omitempty"`
	ReplicationTarget *ReplicationTargetSettings `json:"replicationTarget,omitempty"`
	// Specifies the type of a Snapshot target such as 'kLocal', 'kRemote' or 'kArchival'. 'kLocal' means the Snapshot is stored on a local Cohesity Cluster. 'kRemote' means the Snapshot is stored on a Remote Cohesity Cluster. (It was copied to the Remote Cohesity Cluster using replication.) 'kArchival' means the Snapshot is stored on a Archival External Target (such as Tape or AWS). 'kCloudDeploy' means the Snapshot is stored on a Cloud platform.
	Type NullableString `json:"type,omitempty"`
}

// NewRunJobSnapshotTarget instantiates a new RunJobSnapshotTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunJobSnapshotTarget() *RunJobSnapshotTarget {
	this := RunJobSnapshotTarget{}
	return &this
}

// NewRunJobSnapshotTargetWithDefaults instantiates a new RunJobSnapshotTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunJobSnapshotTargetWithDefaults() *RunJobSnapshotTarget {
	this := RunJobSnapshotTarget{}
	return &this
}

// GetArchivalTarget returns the ArchivalTarget field value if set, zero value otherwise.
func (o *RunJobSnapshotTarget) GetArchivalTarget() ArchivalExternalTarget {
	if o == nil || o.ArchivalTarget == nil {
		var ret ArchivalExternalTarget
		return ret
	}
	return *o.ArchivalTarget
}

// GetArchivalTargetOk returns a tuple with the ArchivalTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunJobSnapshotTarget) GetArchivalTargetOk() (*ArchivalExternalTarget, bool) {
	if o == nil || o.ArchivalTarget == nil {
		return nil, false
	}
	return o.ArchivalTarget, true
}

// HasArchivalTarget returns a boolean if a field has been set.
func (o *RunJobSnapshotTarget) HasArchivalTarget() bool {
	if o != nil && o.ArchivalTarget != nil {
		return true
	}

	return false
}

// SetArchivalTarget gets a reference to the given ArchivalExternalTarget and assigns it to the ArchivalTarget field.
func (o *RunJobSnapshotTarget) SetArchivalTarget(v ArchivalExternalTarget) {
	o.ArchivalTarget = &v
}

// GetCloudReplicationTarget returns the CloudReplicationTarget field value if set, zero value otherwise.
func (o *RunJobSnapshotTarget) GetCloudReplicationTarget() CloudDeployTargetDetails {
	if o == nil || o.CloudReplicationTarget == nil {
		var ret CloudDeployTargetDetails
		return ret
	}
	return *o.CloudReplicationTarget
}

// GetCloudReplicationTargetOk returns a tuple with the CloudReplicationTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunJobSnapshotTarget) GetCloudReplicationTargetOk() (*CloudDeployTargetDetails, bool) {
	if o == nil || o.CloudReplicationTarget == nil {
		return nil, false
	}
	return o.CloudReplicationTarget, true
}

// HasCloudReplicationTarget returns a boolean if a field has been set.
func (o *RunJobSnapshotTarget) HasCloudReplicationTarget() bool {
	if o != nil && o.CloudReplicationTarget != nil {
		return true
	}

	return false
}

// SetCloudReplicationTarget gets a reference to the given CloudDeployTargetDetails and assigns it to the CloudReplicationTarget field.
func (o *RunJobSnapshotTarget) SetCloudReplicationTarget(v CloudDeployTargetDetails) {
	o.CloudReplicationTarget = &v
}

// GetDaysToKeep returns the DaysToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunJobSnapshotTarget) GetDaysToKeep() int64 {
	if o == nil || o.DaysToKeep.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DaysToKeep.Get()
}

// GetDaysToKeepOk returns a tuple with the DaysToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunJobSnapshotTarget) GetDaysToKeepOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DaysToKeep.Get(), o.DaysToKeep.IsSet()
}

// HasDaysToKeep returns a boolean if a field has been set.
func (o *RunJobSnapshotTarget) HasDaysToKeep() bool {
	if o != nil && o.DaysToKeep.IsSet() {
		return true
	}

	return false
}

// SetDaysToKeep gets a reference to the given NullableInt64 and assigns it to the DaysToKeep field.
func (o *RunJobSnapshotTarget) SetDaysToKeep(v int64) {
	o.DaysToKeep.Set(&v)
}
// SetDaysToKeepNil sets the value for DaysToKeep to be an explicit nil
func (o *RunJobSnapshotTarget) SetDaysToKeepNil() {
	o.DaysToKeep.Set(nil)
}

// UnsetDaysToKeep ensures that no value is present for DaysToKeep, not even an explicit nil
func (o *RunJobSnapshotTarget) UnsetDaysToKeep() {
	o.DaysToKeep.Unset()
}

// GetHoldForLegalPurpose returns the HoldForLegalPurpose field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunJobSnapshotTarget) GetHoldForLegalPurpose() bool {
	if o == nil || o.HoldForLegalPurpose.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HoldForLegalPurpose.Get()
}

// GetHoldForLegalPurposeOk returns a tuple with the HoldForLegalPurpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunJobSnapshotTarget) GetHoldForLegalPurposeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HoldForLegalPurpose.Get(), o.HoldForLegalPurpose.IsSet()
}

// HasHoldForLegalPurpose returns a boolean if a field has been set.
func (o *RunJobSnapshotTarget) HasHoldForLegalPurpose() bool {
	if o != nil && o.HoldForLegalPurpose.IsSet() {
		return true
	}

	return false
}

// SetHoldForLegalPurpose gets a reference to the given NullableBool and assigns it to the HoldForLegalPurpose field.
func (o *RunJobSnapshotTarget) SetHoldForLegalPurpose(v bool) {
	o.HoldForLegalPurpose.Set(&v)
}
// SetHoldForLegalPurposeNil sets the value for HoldForLegalPurpose to be an explicit nil
func (o *RunJobSnapshotTarget) SetHoldForLegalPurposeNil() {
	o.HoldForLegalPurpose.Set(nil)
}

// UnsetHoldForLegalPurpose ensures that no value is present for HoldForLegalPurpose, not even an explicit nil
func (o *RunJobSnapshotTarget) UnsetHoldForLegalPurpose() {
	o.HoldForLegalPurpose.Unset()
}

// GetReplicationTarget returns the ReplicationTarget field value if set, zero value otherwise.
func (o *RunJobSnapshotTarget) GetReplicationTarget() ReplicationTargetSettings {
	if o == nil || o.ReplicationTarget == nil {
		var ret ReplicationTargetSettings
		return ret
	}
	return *o.ReplicationTarget
}

// GetReplicationTargetOk returns a tuple with the ReplicationTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunJobSnapshotTarget) GetReplicationTargetOk() (*ReplicationTargetSettings, bool) {
	if o == nil || o.ReplicationTarget == nil {
		return nil, false
	}
	return o.ReplicationTarget, true
}

// HasReplicationTarget returns a boolean if a field has been set.
func (o *RunJobSnapshotTarget) HasReplicationTarget() bool {
	if o != nil && o.ReplicationTarget != nil {
		return true
	}

	return false
}

// SetReplicationTarget gets a reference to the given ReplicationTargetSettings and assigns it to the ReplicationTarget field.
func (o *RunJobSnapshotTarget) SetReplicationTarget(v ReplicationTargetSettings) {
	o.ReplicationTarget = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunJobSnapshotTarget) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunJobSnapshotTarget) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *RunJobSnapshotTarget) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *RunJobSnapshotTarget) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *RunJobSnapshotTarget) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *RunJobSnapshotTarget) UnsetType() {
	o.Type.Unset()
}

func (o RunJobSnapshotTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchivalTarget != nil {
		toSerialize["archivalTarget"] = o.ArchivalTarget
	}
	if o.CloudReplicationTarget != nil {
		toSerialize["cloudReplicationTarget"] = o.CloudReplicationTarget
	}
	if o.DaysToKeep.IsSet() {
		toSerialize["daysToKeep"] = o.DaysToKeep.Get()
	}
	if o.HoldForLegalPurpose.IsSet() {
		toSerialize["holdForLegalPurpose"] = o.HoldForLegalPurpose.Get()
	}
	if o.ReplicationTarget != nil {
		toSerialize["replicationTarget"] = o.ReplicationTarget
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRunJobSnapshotTarget struct {
	value *RunJobSnapshotTarget
	isSet bool
}

func (v NullableRunJobSnapshotTarget) Get() *RunJobSnapshotTarget {
	return v.value
}

func (v *NullableRunJobSnapshotTarget) Set(val *RunJobSnapshotTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableRunJobSnapshotTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableRunJobSnapshotTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunJobSnapshotTarget(val *RunJobSnapshotTarget) *NullableRunJobSnapshotTarget {
	return &NullableRunJobSnapshotTarget{value: val, isSet: true}
}

func (v NullableRunJobSnapshotTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunJobSnapshotTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


