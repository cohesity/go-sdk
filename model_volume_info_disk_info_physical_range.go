/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VolumeInfoDiskInfoPhysicalRange struct for VolumeInfoDiskInfoPhysicalRange
type VolumeInfoDiskInfoPhysicalRange struct {
	// Length of this range in bytes.
	Length NullableInt64 `json:"length,omitempty"`
	// Offset of this range in disk file from beginning of file.
	Offset NullableInt64 `json:"offset,omitempty"`
}

// NewVolumeInfoDiskInfoPhysicalRange instantiates a new VolumeInfoDiskInfoPhysicalRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeInfoDiskInfoPhysicalRange() *VolumeInfoDiskInfoPhysicalRange {
	this := VolumeInfoDiskInfoPhysicalRange{}
	return &this
}

// NewVolumeInfoDiskInfoPhysicalRangeWithDefaults instantiates a new VolumeInfoDiskInfoPhysicalRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeInfoDiskInfoPhysicalRangeWithDefaults() *VolumeInfoDiskInfoPhysicalRange {
	this := VolumeInfoDiskInfoPhysicalRange{}
	return &this
}

// GetLength returns the Length field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfoPhysicalRange) GetLength() int64 {
	if o == nil || o.Length.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Length.Get()
}

// GetLengthOk returns a tuple with the Length field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfoPhysicalRange) GetLengthOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Length.Get(), o.Length.IsSet()
}

// HasLength returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfoPhysicalRange) HasLength() bool {
	if o != nil && o.Length.IsSet() {
		return true
	}

	return false
}

// SetLength gets a reference to the given NullableInt64 and assigns it to the Length field.
func (o *VolumeInfoDiskInfoPhysicalRange) SetLength(v int64) {
	o.Length.Set(&v)
}
// SetLengthNil sets the value for Length to be an explicit nil
func (o *VolumeInfoDiskInfoPhysicalRange) SetLengthNil() {
	o.Length.Set(nil)
}

// UnsetLength ensures that no value is present for Length, not even an explicit nil
func (o *VolumeInfoDiskInfoPhysicalRange) UnsetLength() {
	o.Length.Unset()
}

// GetOffset returns the Offset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfoDiskInfoPhysicalRange) GetOffset() int64 {
	if o == nil || o.Offset.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Offset.Get()
}

// GetOffsetOk returns a tuple with the Offset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfoDiskInfoPhysicalRange) GetOffsetOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Offset.Get(), o.Offset.IsSet()
}

// HasOffset returns a boolean if a field has been set.
func (o *VolumeInfoDiskInfoPhysicalRange) HasOffset() bool {
	if o != nil && o.Offset.IsSet() {
		return true
	}

	return false
}

// SetOffset gets a reference to the given NullableInt64 and assigns it to the Offset field.
func (o *VolumeInfoDiskInfoPhysicalRange) SetOffset(v int64) {
	o.Offset.Set(&v)
}
// SetOffsetNil sets the value for Offset to be an explicit nil
func (o *VolumeInfoDiskInfoPhysicalRange) SetOffsetNil() {
	o.Offset.Set(nil)
}

// UnsetOffset ensures that no value is present for Offset, not even an explicit nil
func (o *VolumeInfoDiskInfoPhysicalRange) UnsetOffset() {
	o.Offset.Unset()
}

func (o VolumeInfoDiskInfoPhysicalRange) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Length.IsSet() {
		toSerialize["length"] = o.Length.Get()
	}
	if o.Offset.IsSet() {
		toSerialize["offset"] = o.Offset.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVolumeInfoDiskInfoPhysicalRange struct {
	value *VolumeInfoDiskInfoPhysicalRange
	isSet bool
}

func (v NullableVolumeInfoDiskInfoPhysicalRange) Get() *VolumeInfoDiskInfoPhysicalRange {
	return v.value
}

func (v *NullableVolumeInfoDiskInfoPhysicalRange) Set(val *VolumeInfoDiskInfoPhysicalRange) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeInfoDiskInfoPhysicalRange) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeInfoDiskInfoPhysicalRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeInfoDiskInfoPhysicalRange(val *VolumeInfoDiskInfoPhysicalRange) *NullableVolumeInfoDiskInfoPhysicalRange {
	return &NullableVolumeInfoDiskInfoPhysicalRange{value: val, isSet: true}
}

func (v NullableVolumeInfoDiskInfoPhysicalRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeInfoDiskInfoPhysicalRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


