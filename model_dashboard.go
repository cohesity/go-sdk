/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// Dashboard Data shown on Dashboard.
type Dashboard struct {
	AuditLogs *AuditLogsTile `json:"auditLogs,omitempty"`
	// Id of the cluster for which dashboard is given.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	Health *HealthTile `json:"health,omitempty"`
	Iops *IopsTile `json:"iops,omitempty"`
	JobRuns *JobRunsTile `json:"jobRuns,omitempty"`
	ProtectedObjects *ProtectedObjectsTile `json:"protectedObjects,omitempty"`
	Protection *ProtectionTile `json:"protection,omitempty"`
	Recoveries *RecoveriesTile `json:"recoveries,omitempty"`
	StorageEfficiency *StorageEfficiencyTile `json:"storageEfficiency,omitempty"`
	Throughput *ThroughputTile `json:"throughput,omitempty"`
}

// NewDashboard instantiates a new Dashboard object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDashboard() *Dashboard {
	this := Dashboard{}
	return &this
}

// NewDashboardWithDefaults instantiates a new Dashboard object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDashboardWithDefaults() *Dashboard {
	this := Dashboard{}
	return &this
}

// GetAuditLogs returns the AuditLogs field value if set, zero value otherwise.
func (o *Dashboard) GetAuditLogs() AuditLogsTile {
	if o == nil || o.AuditLogs == nil {
		var ret AuditLogsTile
		return ret
	}
	return *o.AuditLogs
}

// GetAuditLogsOk returns a tuple with the AuditLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetAuditLogsOk() (*AuditLogsTile, bool) {
	if o == nil || o.AuditLogs == nil {
		return nil, false
	}
	return o.AuditLogs, true
}

// HasAuditLogs returns a boolean if a field has been set.
func (o *Dashboard) HasAuditLogs() bool {
	if o != nil && o.AuditLogs != nil {
		return true
	}

	return false
}

// SetAuditLogs gets a reference to the given AuditLogsTile and assigns it to the AuditLogs field.
func (o *Dashboard) SetAuditLogs(v AuditLogsTile) {
	o.AuditLogs = &v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Dashboard) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Dashboard) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *Dashboard) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *Dashboard) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *Dashboard) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *Dashboard) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetHealth returns the Health field value if set, zero value otherwise.
func (o *Dashboard) GetHealth() HealthTile {
	if o == nil || o.Health == nil {
		var ret HealthTile
		return ret
	}
	return *o.Health
}

// GetHealthOk returns a tuple with the Health field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetHealthOk() (*HealthTile, bool) {
	if o == nil || o.Health == nil {
		return nil, false
	}
	return o.Health, true
}

// HasHealth returns a boolean if a field has been set.
func (o *Dashboard) HasHealth() bool {
	if o != nil && o.Health != nil {
		return true
	}

	return false
}

// SetHealth gets a reference to the given HealthTile and assigns it to the Health field.
func (o *Dashboard) SetHealth(v HealthTile) {
	o.Health = &v
}

// GetIops returns the Iops field value if set, zero value otherwise.
func (o *Dashboard) GetIops() IopsTile {
	if o == nil || o.Iops == nil {
		var ret IopsTile
		return ret
	}
	return *o.Iops
}

// GetIopsOk returns a tuple with the Iops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetIopsOk() (*IopsTile, bool) {
	if o == nil || o.Iops == nil {
		return nil, false
	}
	return o.Iops, true
}

// HasIops returns a boolean if a field has been set.
func (o *Dashboard) HasIops() bool {
	if o != nil && o.Iops != nil {
		return true
	}

	return false
}

// SetIops gets a reference to the given IopsTile and assigns it to the Iops field.
func (o *Dashboard) SetIops(v IopsTile) {
	o.Iops = &v
}

// GetJobRuns returns the JobRuns field value if set, zero value otherwise.
func (o *Dashboard) GetJobRuns() JobRunsTile {
	if o == nil || o.JobRuns == nil {
		var ret JobRunsTile
		return ret
	}
	return *o.JobRuns
}

// GetJobRunsOk returns a tuple with the JobRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetJobRunsOk() (*JobRunsTile, bool) {
	if o == nil || o.JobRuns == nil {
		return nil, false
	}
	return o.JobRuns, true
}

// HasJobRuns returns a boolean if a field has been set.
func (o *Dashboard) HasJobRuns() bool {
	if o != nil && o.JobRuns != nil {
		return true
	}

	return false
}

// SetJobRuns gets a reference to the given JobRunsTile and assigns it to the JobRuns field.
func (o *Dashboard) SetJobRuns(v JobRunsTile) {
	o.JobRuns = &v
}

// GetProtectedObjects returns the ProtectedObjects field value if set, zero value otherwise.
func (o *Dashboard) GetProtectedObjects() ProtectedObjectsTile {
	if o == nil || o.ProtectedObjects == nil {
		var ret ProtectedObjectsTile
		return ret
	}
	return *o.ProtectedObjects
}

// GetProtectedObjectsOk returns a tuple with the ProtectedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetProtectedObjectsOk() (*ProtectedObjectsTile, bool) {
	if o == nil || o.ProtectedObjects == nil {
		return nil, false
	}
	return o.ProtectedObjects, true
}

// HasProtectedObjects returns a boolean if a field has been set.
func (o *Dashboard) HasProtectedObjects() bool {
	if o != nil && o.ProtectedObjects != nil {
		return true
	}

	return false
}

// SetProtectedObjects gets a reference to the given ProtectedObjectsTile and assigns it to the ProtectedObjects field.
func (o *Dashboard) SetProtectedObjects(v ProtectedObjectsTile) {
	o.ProtectedObjects = &v
}

// GetProtection returns the Protection field value if set, zero value otherwise.
func (o *Dashboard) GetProtection() ProtectionTile {
	if o == nil || o.Protection == nil {
		var ret ProtectionTile
		return ret
	}
	return *o.Protection
}

// GetProtectionOk returns a tuple with the Protection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetProtectionOk() (*ProtectionTile, bool) {
	if o == nil || o.Protection == nil {
		return nil, false
	}
	return o.Protection, true
}

// HasProtection returns a boolean if a field has been set.
func (o *Dashboard) HasProtection() bool {
	if o != nil && o.Protection != nil {
		return true
	}

	return false
}

// SetProtection gets a reference to the given ProtectionTile and assigns it to the Protection field.
func (o *Dashboard) SetProtection(v ProtectionTile) {
	o.Protection = &v
}

// GetRecoveries returns the Recoveries field value if set, zero value otherwise.
func (o *Dashboard) GetRecoveries() RecoveriesTile {
	if o == nil || o.Recoveries == nil {
		var ret RecoveriesTile
		return ret
	}
	return *o.Recoveries
}

// GetRecoveriesOk returns a tuple with the Recoveries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetRecoveriesOk() (*RecoveriesTile, bool) {
	if o == nil || o.Recoveries == nil {
		return nil, false
	}
	return o.Recoveries, true
}

// HasRecoveries returns a boolean if a field has been set.
func (o *Dashboard) HasRecoveries() bool {
	if o != nil && o.Recoveries != nil {
		return true
	}

	return false
}

// SetRecoveries gets a reference to the given RecoveriesTile and assigns it to the Recoveries field.
func (o *Dashboard) SetRecoveries(v RecoveriesTile) {
	o.Recoveries = &v
}

// GetStorageEfficiency returns the StorageEfficiency field value if set, zero value otherwise.
func (o *Dashboard) GetStorageEfficiency() StorageEfficiencyTile {
	if o == nil || o.StorageEfficiency == nil {
		var ret StorageEfficiencyTile
		return ret
	}
	return *o.StorageEfficiency
}

// GetStorageEfficiencyOk returns a tuple with the StorageEfficiency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetStorageEfficiencyOk() (*StorageEfficiencyTile, bool) {
	if o == nil || o.StorageEfficiency == nil {
		return nil, false
	}
	return o.StorageEfficiency, true
}

// HasStorageEfficiency returns a boolean if a field has been set.
func (o *Dashboard) HasStorageEfficiency() bool {
	if o != nil && o.StorageEfficiency != nil {
		return true
	}

	return false
}

// SetStorageEfficiency gets a reference to the given StorageEfficiencyTile and assigns it to the StorageEfficiency field.
func (o *Dashboard) SetStorageEfficiency(v StorageEfficiencyTile) {
	o.StorageEfficiency = &v
}

// GetThroughput returns the Throughput field value if set, zero value otherwise.
func (o *Dashboard) GetThroughput() ThroughputTile {
	if o == nil || o.Throughput == nil {
		var ret ThroughputTile
		return ret
	}
	return *o.Throughput
}

// GetThroughputOk returns a tuple with the Throughput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Dashboard) GetThroughputOk() (*ThroughputTile, bool) {
	if o == nil || o.Throughput == nil {
		return nil, false
	}
	return o.Throughput, true
}

// HasThroughput returns a boolean if a field has been set.
func (o *Dashboard) HasThroughput() bool {
	if o != nil && o.Throughput != nil {
		return true
	}

	return false
}

// SetThroughput gets a reference to the given ThroughputTile and assigns it to the Throughput field.
func (o *Dashboard) SetThroughput(v ThroughputTile) {
	o.Throughput = &v
}

func (o Dashboard) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuditLogs != nil {
		toSerialize["auditLogs"] = o.AuditLogs
	}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.Health != nil {
		toSerialize["health"] = o.Health
	}
	if o.Iops != nil {
		toSerialize["iops"] = o.Iops
	}
	if o.JobRuns != nil {
		toSerialize["jobRuns"] = o.JobRuns
	}
	if o.ProtectedObjects != nil {
		toSerialize["protectedObjects"] = o.ProtectedObjects
	}
	if o.Protection != nil {
		toSerialize["protection"] = o.Protection
	}
	if o.Recoveries != nil {
		toSerialize["recoveries"] = o.Recoveries
	}
	if o.StorageEfficiency != nil {
		toSerialize["storageEfficiency"] = o.StorageEfficiency
	}
	if o.Throughput != nil {
		toSerialize["throughput"] = o.Throughput
	}
	return json.Marshal(toSerialize)
}

type NullableDashboard struct {
	value *Dashboard
	isSet bool
}

func (v NullableDashboard) Get() *Dashboard {
	return v.value
}

func (v *NullableDashboard) Set(val *Dashboard) {
	v.value = val
	v.isSet = true
}

func (v NullableDashboard) IsSet() bool {
	return v.isSet
}

func (v *NullableDashboard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDashboard(val *Dashboard) *NullableDashboard {
	return &NullableDashboard{value: val, isSet: true}
}

func (v NullableDashboard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDashboard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


