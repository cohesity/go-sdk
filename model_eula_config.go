/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// EulaConfig Specifies the End User License Agreement acceptance information.
type EulaConfig struct {
	// Specifies the license key.
	LicenseKey NullableString `json:"licenseKey"`
	// Specifies the login account name for the Cohesity user who accepted the End User License Agreement.
	SignedByUser NullableString `json:"signedByUser,omitempty"`
	// Specifies the time that the End User License Agreement was accepted.
	SignedTime NullableInt64 `json:"signedTime,omitempty"`
	// Specifies the version of the End User License Agreement that was accepted.
	SignedVersion NullableInt64 `json:"signedVersion"`
}

// NewEulaConfig instantiates a new EulaConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEulaConfig(licenseKey NullableString, signedVersion NullableInt64) *EulaConfig {
	this := EulaConfig{}
	this.LicenseKey = licenseKey
	this.SignedVersion = signedVersion
	return &this
}

// NewEulaConfigWithDefaults instantiates a new EulaConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEulaConfigWithDefaults() *EulaConfig {
	this := EulaConfig{}
	return &this
}

// GetLicenseKey returns the LicenseKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EulaConfig) GetLicenseKey() string {
	if o == nil || o.LicenseKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.LicenseKey.Get()
}

// GetLicenseKeyOk returns a tuple with the LicenseKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EulaConfig) GetLicenseKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LicenseKey.Get(), o.LicenseKey.IsSet()
}

// SetLicenseKey sets field value
func (o *EulaConfig) SetLicenseKey(v string) {
	o.LicenseKey.Set(&v)
}

// GetSignedByUser returns the SignedByUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EulaConfig) GetSignedByUser() string {
	if o == nil || o.SignedByUser.Get() == nil {
		var ret string
		return ret
	}
	return *o.SignedByUser.Get()
}

// GetSignedByUserOk returns a tuple with the SignedByUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EulaConfig) GetSignedByUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SignedByUser.Get(), o.SignedByUser.IsSet()
}

// HasSignedByUser returns a boolean if a field has been set.
func (o *EulaConfig) HasSignedByUser() bool {
	if o != nil && o.SignedByUser.IsSet() {
		return true
	}

	return false
}

// SetSignedByUser gets a reference to the given NullableString and assigns it to the SignedByUser field.
func (o *EulaConfig) SetSignedByUser(v string) {
	o.SignedByUser.Set(&v)
}
// SetSignedByUserNil sets the value for SignedByUser to be an explicit nil
func (o *EulaConfig) SetSignedByUserNil() {
	o.SignedByUser.Set(nil)
}

// UnsetSignedByUser ensures that no value is present for SignedByUser, not even an explicit nil
func (o *EulaConfig) UnsetSignedByUser() {
	o.SignedByUser.Unset()
}

// GetSignedTime returns the SignedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EulaConfig) GetSignedTime() int64 {
	if o == nil || o.SignedTime.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SignedTime.Get()
}

// GetSignedTimeOk returns a tuple with the SignedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EulaConfig) GetSignedTimeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SignedTime.Get(), o.SignedTime.IsSet()
}

// HasSignedTime returns a boolean if a field has been set.
func (o *EulaConfig) HasSignedTime() bool {
	if o != nil && o.SignedTime.IsSet() {
		return true
	}

	return false
}

// SetSignedTime gets a reference to the given NullableInt64 and assigns it to the SignedTime field.
func (o *EulaConfig) SetSignedTime(v int64) {
	o.SignedTime.Set(&v)
}
// SetSignedTimeNil sets the value for SignedTime to be an explicit nil
func (o *EulaConfig) SetSignedTimeNil() {
	o.SignedTime.Set(nil)
}

// UnsetSignedTime ensures that no value is present for SignedTime, not even an explicit nil
func (o *EulaConfig) UnsetSignedTime() {
	o.SignedTime.Unset()
}

// GetSignedVersion returns the SignedVersion field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *EulaConfig) GetSignedVersion() int64 {
	if o == nil || o.SignedVersion.Get() == nil {
		var ret int64
		return ret
	}

	return *o.SignedVersion.Get()
}

// GetSignedVersionOk returns a tuple with the SignedVersion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EulaConfig) GetSignedVersionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SignedVersion.Get(), o.SignedVersion.IsSet()
}

// SetSignedVersion sets field value
func (o *EulaConfig) SetSignedVersion(v int64) {
	o.SignedVersion.Set(&v)
}

func (o EulaConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["licenseKey"] = o.LicenseKey.Get()
	}
	if o.SignedByUser.IsSet() {
		toSerialize["signedByUser"] = o.SignedByUser.Get()
	}
	if o.SignedTime.IsSet() {
		toSerialize["signedTime"] = o.SignedTime.Get()
	}
	if true {
		toSerialize["signedVersion"] = o.SignedVersion.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEulaConfig struct {
	value *EulaConfig
	isSet bool
}

func (v NullableEulaConfig) Get() *EulaConfig {
	return v.value
}

func (v *NullableEulaConfig) Set(val *EulaConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableEulaConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableEulaConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEulaConfig(val *EulaConfig) *NullableEulaConfig {
	return &NullableEulaConfig{value: val, isSet: true}
}

func (v NullableEulaConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEulaConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


