/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CouchbaseCluster Specifies an Object containing information about a couchbase cluster.
type CouchbaseCluster struct {
	// Seeds of this Couchbase Cluster.
	Seeds []string `json:"seeds,omitempty"`
}

// NewCouchbaseCluster instantiates a new CouchbaseCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouchbaseCluster() *CouchbaseCluster {
	this := CouchbaseCluster{}
	return &this
}

// NewCouchbaseClusterWithDefaults instantiates a new CouchbaseCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouchbaseClusterWithDefaults() *CouchbaseCluster {
	this := CouchbaseCluster{}
	return &this
}

// GetSeeds returns the Seeds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchbaseCluster) GetSeeds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Seeds
}

// GetSeedsOk returns a tuple with the Seeds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseCluster) GetSeedsOk() (*[]string, bool) {
	if o == nil || o.Seeds == nil {
		return nil, false
	}
	return &o.Seeds, true
}

// HasSeeds returns a boolean if a field has been set.
func (o *CouchbaseCluster) HasSeeds() bool {
	if o != nil && o.Seeds != nil {
		return true
	}

	return false
}

// SetSeeds gets a reference to the given []string and assigns it to the Seeds field.
func (o *CouchbaseCluster) SetSeeds(v []string) {
	o.Seeds = v
}

func (o CouchbaseCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Seeds != nil {
		toSerialize["seeds"] = o.Seeds
	}
	return json.Marshal(toSerialize)
}

type NullableCouchbaseCluster struct {
	value *CouchbaseCluster
	isSet bool
}

func (v NullableCouchbaseCluster) Get() *CouchbaseCluster {
	return v.value
}

func (v *NullableCouchbaseCluster) Set(val *CouchbaseCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableCouchbaseCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableCouchbaseCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouchbaseCluster(val *CouchbaseCluster) *NullableCouchbaseCluster {
	return &NullableCouchbaseCluster{value: val, isSet: true}
}

func (v NullableCouchbaseCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouchbaseCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


