/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// HyperVBackupEnvParams Message to capture any additional backup params for a HyperV environment.
type HyperVBackupEnvParams struct {
	// Whether to fallback to take a crash-consistent snapshot incase taking an app-consistent snapshot fails.
	AllowCrashConsistentSnapshot NullableBool `json:"allowCrashConsistentSnapshot,omitempty"`
	// The type of backup job to use. Default is to auto-detect the best type to use based on the VMs to backup. End user may select RCT or VSS also.
	BackupJobType NullableInt32 `json:"backupJobType,omitempty"`
}

// NewHyperVBackupEnvParams instantiates a new HyperVBackupEnvParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperVBackupEnvParams() *HyperVBackupEnvParams {
	this := HyperVBackupEnvParams{}
	return &this
}

// NewHyperVBackupEnvParamsWithDefaults instantiates a new HyperVBackupEnvParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperVBackupEnvParamsWithDefaults() *HyperVBackupEnvParams {
	this := HyperVBackupEnvParams{}
	return &this
}

// GetAllowCrashConsistentSnapshot returns the AllowCrashConsistentSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVBackupEnvParams) GetAllowCrashConsistentSnapshot() bool {
	if o == nil || o.AllowCrashConsistentSnapshot.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllowCrashConsistentSnapshot.Get()
}

// GetAllowCrashConsistentSnapshotOk returns a tuple with the AllowCrashConsistentSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVBackupEnvParams) GetAllowCrashConsistentSnapshotOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllowCrashConsistentSnapshot.Get(), o.AllowCrashConsistentSnapshot.IsSet()
}

// HasAllowCrashConsistentSnapshot returns a boolean if a field has been set.
func (o *HyperVBackupEnvParams) HasAllowCrashConsistentSnapshot() bool {
	if o != nil && o.AllowCrashConsistentSnapshot.IsSet() {
		return true
	}

	return false
}

// SetAllowCrashConsistentSnapshot gets a reference to the given NullableBool and assigns it to the AllowCrashConsistentSnapshot field.
func (o *HyperVBackupEnvParams) SetAllowCrashConsistentSnapshot(v bool) {
	o.AllowCrashConsistentSnapshot.Set(&v)
}
// SetAllowCrashConsistentSnapshotNil sets the value for AllowCrashConsistentSnapshot to be an explicit nil
func (o *HyperVBackupEnvParams) SetAllowCrashConsistentSnapshotNil() {
	o.AllowCrashConsistentSnapshot.Set(nil)
}

// UnsetAllowCrashConsistentSnapshot ensures that no value is present for AllowCrashConsistentSnapshot, not even an explicit nil
func (o *HyperVBackupEnvParams) UnsetAllowCrashConsistentSnapshot() {
	o.AllowCrashConsistentSnapshot.Unset()
}

// GetBackupJobType returns the BackupJobType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVBackupEnvParams) GetBackupJobType() int32 {
	if o == nil || o.BackupJobType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.BackupJobType.Get()
}

// GetBackupJobTypeOk returns a tuple with the BackupJobType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVBackupEnvParams) GetBackupJobTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackupJobType.Get(), o.BackupJobType.IsSet()
}

// HasBackupJobType returns a boolean if a field has been set.
func (o *HyperVBackupEnvParams) HasBackupJobType() bool {
	if o != nil && o.BackupJobType.IsSet() {
		return true
	}

	return false
}

// SetBackupJobType gets a reference to the given NullableInt32 and assigns it to the BackupJobType field.
func (o *HyperVBackupEnvParams) SetBackupJobType(v int32) {
	o.BackupJobType.Set(&v)
}
// SetBackupJobTypeNil sets the value for BackupJobType to be an explicit nil
func (o *HyperVBackupEnvParams) SetBackupJobTypeNil() {
	o.BackupJobType.Set(nil)
}

// UnsetBackupJobType ensures that no value is present for BackupJobType, not even an explicit nil
func (o *HyperVBackupEnvParams) UnsetBackupJobType() {
	o.BackupJobType.Unset()
}

func (o HyperVBackupEnvParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowCrashConsistentSnapshot.IsSet() {
		toSerialize["allowCrashConsistentSnapshot"] = o.AllowCrashConsistentSnapshot.Get()
	}
	if o.BackupJobType.IsSet() {
		toSerialize["backupJobType"] = o.BackupJobType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHyperVBackupEnvParams struct {
	value *HyperVBackupEnvParams
	isSet bool
}

func (v NullableHyperVBackupEnvParams) Get() *HyperVBackupEnvParams {
	return v.value
}

func (v *NullableHyperVBackupEnvParams) Set(val *HyperVBackupEnvParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperVBackupEnvParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperVBackupEnvParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperVBackupEnvParams(val *HyperVBackupEnvParams) *NullableHyperVBackupEnvParams {
	return &NullableHyperVBackupEnvParams{value: val, isSet: true}
}

func (v NullableHyperVBackupEnvParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperVBackupEnvParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


