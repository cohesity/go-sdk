/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// PhysicalFileBackupParamsBackupPathInfo Describes a set of files rooted under a path that need to be backed up.
type PhysicalFileBackupParamsBackupPathInfo struct {
	// A list of absolute paths on the Physical source that should not be backed up. Any path that is a descendant of these paths will also be skipped.
	ExcludePaths []string `json:"excludePaths,omitempty"`
	// An absolute path on the Physical source that should be backed up. Any path that is a descendant of this path will also be backed up, unless (a) it is excluded from backup by exclude_paths below, OR (b) it belongs to a volume that is different from the volume include_path belongs to and there are no relevant paths in that volume being backed up.
	IncludePath NullableString `json:"includePath,omitempty"`
	// Whether to skip any nested volumes (both local and network) that are mounted under 'include_path'. Note that if a path to a nested volume is specified as an include_path in another BackupPathInfo entry, that path will still get backed up.
	SkipNestedVolumes NullableBool `json:"skipNestedVolumes,omitempty"`
}

// NewPhysicalFileBackupParamsBackupPathInfo instantiates a new PhysicalFileBackupParamsBackupPathInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalFileBackupParamsBackupPathInfo() *PhysicalFileBackupParamsBackupPathInfo {
	this := PhysicalFileBackupParamsBackupPathInfo{}
	return &this
}

// NewPhysicalFileBackupParamsBackupPathInfoWithDefaults instantiates a new PhysicalFileBackupParamsBackupPathInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalFileBackupParamsBackupPathInfoWithDefaults() *PhysicalFileBackupParamsBackupPathInfo {
	this := PhysicalFileBackupParamsBackupPathInfo{}
	return &this
}

// GetExcludePaths returns the ExcludePaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupParamsBackupPathInfo) GetExcludePaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.ExcludePaths
}

// GetExcludePathsOk returns a tuple with the ExcludePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupParamsBackupPathInfo) GetExcludePathsOk() (*[]string, bool) {
	if o == nil || o.ExcludePaths == nil {
		return nil, false
	}
	return &o.ExcludePaths, true
}

// HasExcludePaths returns a boolean if a field has been set.
func (o *PhysicalFileBackupParamsBackupPathInfo) HasExcludePaths() bool {
	if o != nil && o.ExcludePaths != nil {
		return true
	}

	return false
}

// SetExcludePaths gets a reference to the given []string and assigns it to the ExcludePaths field.
func (o *PhysicalFileBackupParamsBackupPathInfo) SetExcludePaths(v []string) {
	o.ExcludePaths = v
}

// GetIncludePath returns the IncludePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupParamsBackupPathInfo) GetIncludePath() string {
	if o == nil || o.IncludePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.IncludePath.Get()
}

// GetIncludePathOk returns a tuple with the IncludePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupParamsBackupPathInfo) GetIncludePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncludePath.Get(), o.IncludePath.IsSet()
}

// HasIncludePath returns a boolean if a field has been set.
func (o *PhysicalFileBackupParamsBackupPathInfo) HasIncludePath() bool {
	if o != nil && o.IncludePath.IsSet() {
		return true
	}

	return false
}

// SetIncludePath gets a reference to the given NullableString and assigns it to the IncludePath field.
func (o *PhysicalFileBackupParamsBackupPathInfo) SetIncludePath(v string) {
	o.IncludePath.Set(&v)
}
// SetIncludePathNil sets the value for IncludePath to be an explicit nil
func (o *PhysicalFileBackupParamsBackupPathInfo) SetIncludePathNil() {
	o.IncludePath.Set(nil)
}

// UnsetIncludePath ensures that no value is present for IncludePath, not even an explicit nil
func (o *PhysicalFileBackupParamsBackupPathInfo) UnsetIncludePath() {
	o.IncludePath.Unset()
}

// GetSkipNestedVolumes returns the SkipNestedVolumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupParamsBackupPathInfo) GetSkipNestedVolumes() bool {
	if o == nil || o.SkipNestedVolumes.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipNestedVolumes.Get()
}

// GetSkipNestedVolumesOk returns a tuple with the SkipNestedVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupParamsBackupPathInfo) GetSkipNestedVolumesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipNestedVolumes.Get(), o.SkipNestedVolumes.IsSet()
}

// HasSkipNestedVolumes returns a boolean if a field has been set.
func (o *PhysicalFileBackupParamsBackupPathInfo) HasSkipNestedVolumes() bool {
	if o != nil && o.SkipNestedVolumes.IsSet() {
		return true
	}

	return false
}

// SetSkipNestedVolumes gets a reference to the given NullableBool and assigns it to the SkipNestedVolumes field.
func (o *PhysicalFileBackupParamsBackupPathInfo) SetSkipNestedVolumes(v bool) {
	o.SkipNestedVolumes.Set(&v)
}
// SetSkipNestedVolumesNil sets the value for SkipNestedVolumes to be an explicit nil
func (o *PhysicalFileBackupParamsBackupPathInfo) SetSkipNestedVolumesNil() {
	o.SkipNestedVolumes.Set(nil)
}

// UnsetSkipNestedVolumes ensures that no value is present for SkipNestedVolumes, not even an explicit nil
func (o *PhysicalFileBackupParamsBackupPathInfo) UnsetSkipNestedVolumes() {
	o.SkipNestedVolumes.Unset()
}

func (o PhysicalFileBackupParamsBackupPathInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludePaths != nil {
		toSerialize["excludePaths"] = o.ExcludePaths
	}
	if o.IncludePath.IsSet() {
		toSerialize["includePath"] = o.IncludePath.Get()
	}
	if o.SkipNestedVolumes.IsSet() {
		toSerialize["skipNestedVolumes"] = o.SkipNestedVolumes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalFileBackupParamsBackupPathInfo struct {
	value *PhysicalFileBackupParamsBackupPathInfo
	isSet bool
}

func (v NullablePhysicalFileBackupParamsBackupPathInfo) Get() *PhysicalFileBackupParamsBackupPathInfo {
	return v.value
}

func (v *NullablePhysicalFileBackupParamsBackupPathInfo) Set(val *PhysicalFileBackupParamsBackupPathInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalFileBackupParamsBackupPathInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalFileBackupParamsBackupPathInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalFileBackupParamsBackupPathInfo(val *PhysicalFileBackupParamsBackupPathInfo) *NullablePhysicalFileBackupParamsBackupPathInfo {
	return &NullablePhysicalFileBackupParamsBackupPathInfo{value: val, isSet: true}
}

func (v NullablePhysicalFileBackupParamsBackupPathInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalFileBackupParamsBackupPathInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


