/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// Gflag Specifies the attributes of a service gflag.
type Gflag struct {
	// Specifies name of the gflag.
	Name NullableString `json:"name"`
	// Specifies product model this gflag set on.
	ProductModel NullableString `json:"productModel,omitempty"`
	// Specifies reason for setting the gflag.
	Reason NullableString `json:"reason,omitempty"`
	// Specifies timestamp when gflag was set.
	Timestamp NullableInt64 `json:"timestamp,omitempty"`
	// Specifies value of the gflag.
	Value NullableString `json:"value,omitempty"`
}

// NewGflag instantiates a new Gflag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGflag(name NullableString) *Gflag {
	this := Gflag{}
	this.Name = name
	return &this
}

// NewGflagWithDefaults instantiates a new Gflag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGflagWithDefaults() *Gflag {
	this := Gflag{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Gflag) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Gflag) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *Gflag) SetName(v string) {
	o.Name.Set(&v)
}

// GetProductModel returns the ProductModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Gflag) GetProductModel() string {
	if o == nil || o.ProductModel.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProductModel.Get()
}

// GetProductModelOk returns a tuple with the ProductModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Gflag) GetProductModelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProductModel.Get(), o.ProductModel.IsSet()
}

// HasProductModel returns a boolean if a field has been set.
func (o *Gflag) HasProductModel() bool {
	if o != nil && o.ProductModel.IsSet() {
		return true
	}

	return false
}

// SetProductModel gets a reference to the given NullableString and assigns it to the ProductModel field.
func (o *Gflag) SetProductModel(v string) {
	o.ProductModel.Set(&v)
}
// SetProductModelNil sets the value for ProductModel to be an explicit nil
func (o *Gflag) SetProductModelNil() {
	o.ProductModel.Set(nil)
}

// UnsetProductModel ensures that no value is present for ProductModel, not even an explicit nil
func (o *Gflag) UnsetProductModel() {
	o.ProductModel.Unset()
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Gflag) GetReason() string {
	if o == nil || o.Reason.Get() == nil {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Gflag) GetReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *Gflag) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *Gflag) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *Gflag) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *Gflag) UnsetReason() {
	o.Reason.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Gflag) GetTimestamp() int64 {
	if o == nil || o.Timestamp.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Gflag) GetTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Gflag) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableInt64 and assigns it to the Timestamp field.
func (o *Gflag) SetTimestamp(v int64) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *Gflag) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *Gflag) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Gflag) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Gflag) GetValueOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *Gflag) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *Gflag) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *Gflag) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *Gflag) UnsetValue() {
	o.Value.Unset()
}

func (o Gflag) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ProductModel.IsSet() {
		toSerialize["productModel"] = o.ProductModel.Get()
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGflag struct {
	value *Gflag
	isSet bool
}

func (v NullableGflag) Get() *Gflag {
	return v.value
}

func (v *NullableGflag) Set(val *Gflag) {
	v.value = val
	v.isSet = true
}

func (v NullableGflag) IsSet() bool {
	return v.isSet
}

func (v *NullableGflag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGflag(val *Gflag) *NullableGflag {
	return &NullableGflag{value: val, isSet: true}
}

func (v NullableGflag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGflag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


