/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CreatePhysicalClusterParameters Specifies the parameters needed for creation of a new Cluster.
type CreatePhysicalClusterParameters struct {
	// Specifies the name of the new Cluster.
	ClusterName NullableString `json:"clusterName"`
	EncryptionConfig *EncryptionConfiguration `json:"encryptionConfig,omitempty"`
	// Specifies IP preference.
	IpPreference NullableInt32 `json:"ipPreference,omitempty"`
	IpmiConfig IpmiConfiguration `json:"ipmiConfig"`
	// Specifies the metadata fault tolerance.
	MetadataFaultTolerance NullableInt32 `json:"metadataFaultTolerance,omitempty"`
	NetworkConfig NetworkConfiguration `json:"networkConfig"`
	// Specifies the configuration for the nodes in the new cluster.
	NodeConfigs []PhysicalNodeConfiguration `json:"nodeConfigs"`
}

// NewCreatePhysicalClusterParameters instantiates a new CreatePhysicalClusterParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreatePhysicalClusterParameters(clusterName NullableString, ipmiConfig IpmiConfiguration, networkConfig NetworkConfiguration, nodeConfigs []PhysicalNodeConfiguration) *CreatePhysicalClusterParameters {
	this := CreatePhysicalClusterParameters{}
	this.ClusterName = clusterName
	this.IpmiConfig = ipmiConfig
	this.NetworkConfig = networkConfig
	this.NodeConfigs = nodeConfigs
	return &this
}

// NewCreatePhysicalClusterParametersWithDefaults instantiates a new CreatePhysicalClusterParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreatePhysicalClusterParametersWithDefaults() *CreatePhysicalClusterParameters {
	this := CreatePhysicalClusterParameters{}
	return &this
}

// GetClusterName returns the ClusterName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreatePhysicalClusterParameters) GetClusterName() string {
	if o == nil || o.ClusterName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ClusterName.Get()
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePhysicalClusterParameters) GetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterName.Get(), o.ClusterName.IsSet()
}

// SetClusterName sets field value
func (o *CreatePhysicalClusterParameters) SetClusterName(v string) {
	o.ClusterName.Set(&v)
}

// GetEncryptionConfig returns the EncryptionConfig field value if set, zero value otherwise.
func (o *CreatePhysicalClusterParameters) GetEncryptionConfig() EncryptionConfiguration {
	if o == nil || o.EncryptionConfig == nil {
		var ret EncryptionConfiguration
		return ret
	}
	return *o.EncryptionConfig
}

// GetEncryptionConfigOk returns a tuple with the EncryptionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreatePhysicalClusterParameters) GetEncryptionConfigOk() (*EncryptionConfiguration, bool) {
	if o == nil || o.EncryptionConfig == nil {
		return nil, false
	}
	return o.EncryptionConfig, true
}

// HasEncryptionConfig returns a boolean if a field has been set.
func (o *CreatePhysicalClusterParameters) HasEncryptionConfig() bool {
	if o != nil && o.EncryptionConfig != nil {
		return true
	}

	return false
}

// SetEncryptionConfig gets a reference to the given EncryptionConfiguration and assigns it to the EncryptionConfig field.
func (o *CreatePhysicalClusterParameters) SetEncryptionConfig(v EncryptionConfiguration) {
	o.EncryptionConfig = &v
}

// GetIpPreference returns the IpPreference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePhysicalClusterParameters) GetIpPreference() int32 {
	if o == nil || o.IpPreference.Get() == nil {
		var ret int32
		return ret
	}
	return *o.IpPreference.Get()
}

// GetIpPreferenceOk returns a tuple with the IpPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePhysicalClusterParameters) GetIpPreferenceOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpPreference.Get(), o.IpPreference.IsSet()
}

// HasIpPreference returns a boolean if a field has been set.
func (o *CreatePhysicalClusterParameters) HasIpPreference() bool {
	if o != nil && o.IpPreference.IsSet() {
		return true
	}

	return false
}

// SetIpPreference gets a reference to the given NullableInt32 and assigns it to the IpPreference field.
func (o *CreatePhysicalClusterParameters) SetIpPreference(v int32) {
	o.IpPreference.Set(&v)
}
// SetIpPreferenceNil sets the value for IpPreference to be an explicit nil
func (o *CreatePhysicalClusterParameters) SetIpPreferenceNil() {
	o.IpPreference.Set(nil)
}

// UnsetIpPreference ensures that no value is present for IpPreference, not even an explicit nil
func (o *CreatePhysicalClusterParameters) UnsetIpPreference() {
	o.IpPreference.Unset()
}

// GetIpmiConfig returns the IpmiConfig field value
func (o *CreatePhysicalClusterParameters) GetIpmiConfig() IpmiConfiguration {
	if o == nil {
		var ret IpmiConfiguration
		return ret
	}

	return o.IpmiConfig
}

// GetIpmiConfigOk returns a tuple with the IpmiConfig field value
// and a boolean to check if the value has been set.
func (o *CreatePhysicalClusterParameters) GetIpmiConfigOk() (*IpmiConfiguration, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IpmiConfig, true
}

// SetIpmiConfig sets field value
func (o *CreatePhysicalClusterParameters) SetIpmiConfig(v IpmiConfiguration) {
	o.IpmiConfig = v
}

// GetMetadataFaultTolerance returns the MetadataFaultTolerance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreatePhysicalClusterParameters) GetMetadataFaultTolerance() int32 {
	if o == nil || o.MetadataFaultTolerance.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MetadataFaultTolerance.Get()
}

// GetMetadataFaultToleranceOk returns a tuple with the MetadataFaultTolerance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePhysicalClusterParameters) GetMetadataFaultToleranceOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetadataFaultTolerance.Get(), o.MetadataFaultTolerance.IsSet()
}

// HasMetadataFaultTolerance returns a boolean if a field has been set.
func (o *CreatePhysicalClusterParameters) HasMetadataFaultTolerance() bool {
	if o != nil && o.MetadataFaultTolerance.IsSet() {
		return true
	}

	return false
}

// SetMetadataFaultTolerance gets a reference to the given NullableInt32 and assigns it to the MetadataFaultTolerance field.
func (o *CreatePhysicalClusterParameters) SetMetadataFaultTolerance(v int32) {
	o.MetadataFaultTolerance.Set(&v)
}
// SetMetadataFaultToleranceNil sets the value for MetadataFaultTolerance to be an explicit nil
func (o *CreatePhysicalClusterParameters) SetMetadataFaultToleranceNil() {
	o.MetadataFaultTolerance.Set(nil)
}

// UnsetMetadataFaultTolerance ensures that no value is present for MetadataFaultTolerance, not even an explicit nil
func (o *CreatePhysicalClusterParameters) UnsetMetadataFaultTolerance() {
	o.MetadataFaultTolerance.Unset()
}

// GetNetworkConfig returns the NetworkConfig field value
func (o *CreatePhysicalClusterParameters) GetNetworkConfig() NetworkConfiguration {
	if o == nil {
		var ret NetworkConfiguration
		return ret
	}

	return o.NetworkConfig
}

// GetNetworkConfigOk returns a tuple with the NetworkConfig field value
// and a boolean to check if the value has been set.
func (o *CreatePhysicalClusterParameters) GetNetworkConfigOk() (*NetworkConfiguration, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.NetworkConfig, true
}

// SetNetworkConfig sets field value
func (o *CreatePhysicalClusterParameters) SetNetworkConfig(v NetworkConfiguration) {
	o.NetworkConfig = v
}

// GetNodeConfigs returns the NodeConfigs field value
// If the value is explicit nil, the zero value for []PhysicalNodeConfiguration will be returned
func (o *CreatePhysicalClusterParameters) GetNodeConfigs() []PhysicalNodeConfiguration {
	if o == nil {
		var ret []PhysicalNodeConfiguration
		return ret
	}

	return o.NodeConfigs
}

// GetNodeConfigsOk returns a tuple with the NodeConfigs field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreatePhysicalClusterParameters) GetNodeConfigsOk() (*[]PhysicalNodeConfiguration, bool) {
	if o == nil || o.NodeConfigs == nil {
		return nil, false
	}
	return &o.NodeConfigs, true
}

// SetNodeConfigs sets field value
func (o *CreatePhysicalClusterParameters) SetNodeConfigs(v []PhysicalNodeConfiguration) {
	o.NodeConfigs = v
}

func (o CreatePhysicalClusterParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clusterName"] = o.ClusterName.Get()
	}
	if o.EncryptionConfig != nil {
		toSerialize["encryptionConfig"] = o.EncryptionConfig
	}
	if o.IpPreference.IsSet() {
		toSerialize["ipPreference"] = o.IpPreference.Get()
	}
	if true {
		toSerialize["ipmiConfig"] = o.IpmiConfig
	}
	if o.MetadataFaultTolerance.IsSet() {
		toSerialize["metadataFaultTolerance"] = o.MetadataFaultTolerance.Get()
	}
	if true {
		toSerialize["networkConfig"] = o.NetworkConfig
	}
	if o.NodeConfigs != nil {
		toSerialize["nodeConfigs"] = o.NodeConfigs
	}
	return json.Marshal(toSerialize)
}

type NullableCreatePhysicalClusterParameters struct {
	value *CreatePhysicalClusterParameters
	isSet bool
}

func (v NullableCreatePhysicalClusterParameters) Get() *CreatePhysicalClusterParameters {
	return v.value
}

func (v *NullableCreatePhysicalClusterParameters) Set(val *CreatePhysicalClusterParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCreatePhysicalClusterParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCreatePhysicalClusterParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreatePhysicalClusterParameters(val *CreatePhysicalClusterParameters) *NullableCreatePhysicalClusterParameters {
	return &NullableCreatePhysicalClusterParameters{value: val, isSet: true}
}

func (v NullableCreatePhysicalClusterParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreatePhysicalClusterParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


