/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AagAndDatabases Specifies an AAG and the database members of the AAG.
type AagAndDatabases struct {
	Aag *ProtectionSource `json:"aag,omitempty"`
	// Specifies databases found that are members of the AAG.
	Databases []ProtectionSource `json:"databases,omitempty"`
}

// NewAagAndDatabases instantiates a new AagAndDatabases object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAagAndDatabases() *AagAndDatabases {
	this := AagAndDatabases{}
	return &this
}

// NewAagAndDatabasesWithDefaults instantiates a new AagAndDatabases object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAagAndDatabasesWithDefaults() *AagAndDatabases {
	this := AagAndDatabases{}
	return &this
}

// GetAag returns the Aag field value if set, zero value otherwise.
func (o *AagAndDatabases) GetAag() ProtectionSource {
	if o == nil || o.Aag == nil {
		var ret ProtectionSource
		return ret
	}
	return *o.Aag
}

// GetAagOk returns a tuple with the Aag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AagAndDatabases) GetAagOk() (*ProtectionSource, bool) {
	if o == nil || o.Aag == nil {
		return nil, false
	}
	return o.Aag, true
}

// HasAag returns a boolean if a field has been set.
func (o *AagAndDatabases) HasAag() bool {
	if o != nil && o.Aag != nil {
		return true
	}

	return false
}

// SetAag gets a reference to the given ProtectionSource and assigns it to the Aag field.
func (o *AagAndDatabases) SetAag(v ProtectionSource) {
	o.Aag = &v
}

// GetDatabases returns the Databases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AagAndDatabases) GetDatabases() []ProtectionSource {
	if o == nil  {
		var ret []ProtectionSource
		return ret
	}
	return o.Databases
}

// GetDatabasesOk returns a tuple with the Databases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AagAndDatabases) GetDatabasesOk() (*[]ProtectionSource, bool) {
	if o == nil || o.Databases == nil {
		return nil, false
	}
	return &o.Databases, true
}

// HasDatabases returns a boolean if a field has been set.
func (o *AagAndDatabases) HasDatabases() bool {
	if o != nil && o.Databases != nil {
		return true
	}

	return false
}

// SetDatabases gets a reference to the given []ProtectionSource and assigns it to the Databases field.
func (o *AagAndDatabases) SetDatabases(v []ProtectionSource) {
	o.Databases = v
}

func (o AagAndDatabases) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Aag != nil {
		toSerialize["aag"] = o.Aag
	}
	if o.Databases != nil {
		toSerialize["databases"] = o.Databases
	}
	return json.Marshal(toSerialize)
}

type NullableAagAndDatabases struct {
	value *AagAndDatabases
	isSet bool
}

func (v NullableAagAndDatabases) Get() *AagAndDatabases {
	return v.value
}

func (v *NullableAagAndDatabases) Set(val *AagAndDatabases) {
	v.value = val
	v.isSet = true
}

func (v NullableAagAndDatabases) IsSet() bool {
	return v.isSet
}

func (v *NullableAagAndDatabases) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAagAndDatabases(val *AagAndDatabases) *NullableAagAndDatabases {
	return &NullableAagAndDatabases{value: val, isSet: true}
}

func (v NullableAagAndDatabases) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAagAndDatabases) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


