/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// MapReduceFileFormats Specifies information about file formats produced by a mapo reduce instance.
type MapReduceFileFormats struct {
	// Specifies the list of formats supported with integer enum mapping to file format.
	SupportedFormats []string `json:"supportedFormats,omitempty"`
}

// NewMapReduceFileFormats instantiates a new MapReduceFileFormats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapReduceFileFormats() *MapReduceFileFormats {
	this := MapReduceFileFormats{}
	return &this
}

// NewMapReduceFileFormatsWithDefaults instantiates a new MapReduceFileFormats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapReduceFileFormatsWithDefaults() *MapReduceFileFormats {
	this := MapReduceFileFormats{}
	return &this
}

// GetSupportedFormats returns the SupportedFormats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceFileFormats) GetSupportedFormats() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SupportedFormats
}

// GetSupportedFormatsOk returns a tuple with the SupportedFormats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceFileFormats) GetSupportedFormatsOk() (*[]string, bool) {
	if o == nil || o.SupportedFormats == nil {
		return nil, false
	}
	return &o.SupportedFormats, true
}

// HasSupportedFormats returns a boolean if a field has been set.
func (o *MapReduceFileFormats) HasSupportedFormats() bool {
	if o != nil && o.SupportedFormats != nil {
		return true
	}

	return false
}

// SetSupportedFormats gets a reference to the given []string and assigns it to the SupportedFormats field.
func (o *MapReduceFileFormats) SetSupportedFormats(v []string) {
	o.SupportedFormats = v
}

func (o MapReduceFileFormats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SupportedFormats != nil {
		toSerialize["supportedFormats"] = o.SupportedFormats
	}
	return json.Marshal(toSerialize)
}

type NullableMapReduceFileFormats struct {
	value *MapReduceFileFormats
	isSet bool
}

func (v NullableMapReduceFileFormats) Get() *MapReduceFileFormats {
	return v.value
}

func (v *NullableMapReduceFileFormats) Set(val *MapReduceFileFormats) {
	v.value = val
	v.isSet = true
}

func (v NullableMapReduceFileFormats) IsSet() bool {
	return v.isSet
}

func (v *NullableMapReduceFileFormats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapReduceFileFormats(val *MapReduceFileFormats) *NullableMapReduceFileFormats {
	return &NullableMapReduceFileFormats{value: val, isSet: true}
}

func (v NullableMapReduceFileFormats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapReduceFileFormats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


