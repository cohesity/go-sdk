/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CreateRemoteVaultRestoreTaskParameters Specifies settings required to create a task that restores the index and/or the Snapshots of a Protection Job from a remote Vault to the current Cluster.
type CreateRemoteVaultRestoreTaskParameters struct {
	// Specifies the way data needs to be retrieved from the external target. This information will be filled in by Iris and Magneto will pass it along to the Icebox as it is to support bulk retrieval from Glacier. Specifies the type of Restore Task.  'kStandard' specifies retrievals that allow to access any of your archives within several hours. Standard retrievals typically complete within 3–5 hours. This is the default option for retrieval requests that do not specify the retrieval option. 'kBulk' specifies retrievals that are Glacier’s lowest-cost retrieval option, which can be used to retrieve large amounts, even petabytes, of data inexpensively in a day. Bulk retrieval typically complete within 5–12 hours. 'kExpedited' specifies retrievals that allows to quickly access your data when occasional urgent requests for a subset of archives are required. For all but the largest archives (250 MB+), data accessed using Expedited retrievals are typically made available within 1–5 minutes.
	GlacierRetrievalType NullableString `json:"glacierRetrievalType,omitempty"`
	// Array of Restore Objects.  Specifies the list of Snapshots and the index to be restored from the remote Vault. The data on the remote Vault may have been originally archived from multiple remote Clusters.
	RestoreObjects []IndexAndSnapshots `json:"restoreObjects,omitempty"`
	// Specifies the unique id of the remote Vault search Job.
	SearchJobUid NullableUniversalId `json:"searchJobUid"`
	// Specifies a name of the restore task.
	TaskName NullableString `json:"taskName"`
	// Specifies the id of the Vault that contains the index and Snapshots to restore to the current Cluster. This is the id assigned by the Cohesity Cluster when Vault was registered as an External Target.
	VaultId NullableInt64 `json:"vaultId"`
}

// NewCreateRemoteVaultRestoreTaskParameters instantiates a new CreateRemoteVaultRestoreTaskParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRemoteVaultRestoreTaskParameters(searchJobUid NullableUniversalId, taskName NullableString, vaultId NullableInt64) *CreateRemoteVaultRestoreTaskParameters {
	this := CreateRemoteVaultRestoreTaskParameters{}
	this.SearchJobUid = searchJobUid
	this.TaskName = taskName
	this.VaultId = vaultId
	return &this
}

// NewCreateRemoteVaultRestoreTaskParametersWithDefaults instantiates a new CreateRemoteVaultRestoreTaskParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRemoteVaultRestoreTaskParametersWithDefaults() *CreateRemoteVaultRestoreTaskParameters {
	this := CreateRemoteVaultRestoreTaskParameters{}
	return &this
}

// GetGlacierRetrievalType returns the GlacierRetrievalType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateRemoteVaultRestoreTaskParameters) GetGlacierRetrievalType() string {
	if o == nil || o.GlacierRetrievalType.Get() == nil {
		var ret string
		return ret
	}
	return *o.GlacierRetrievalType.Get()
}

// GetGlacierRetrievalTypeOk returns a tuple with the GlacierRetrievalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRemoteVaultRestoreTaskParameters) GetGlacierRetrievalTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GlacierRetrievalType.Get(), o.GlacierRetrievalType.IsSet()
}

// HasGlacierRetrievalType returns a boolean if a field has been set.
func (o *CreateRemoteVaultRestoreTaskParameters) HasGlacierRetrievalType() bool {
	if o != nil && o.GlacierRetrievalType.IsSet() {
		return true
	}

	return false
}

// SetGlacierRetrievalType gets a reference to the given NullableString and assigns it to the GlacierRetrievalType field.
func (o *CreateRemoteVaultRestoreTaskParameters) SetGlacierRetrievalType(v string) {
	o.GlacierRetrievalType.Set(&v)
}
// SetGlacierRetrievalTypeNil sets the value for GlacierRetrievalType to be an explicit nil
func (o *CreateRemoteVaultRestoreTaskParameters) SetGlacierRetrievalTypeNil() {
	o.GlacierRetrievalType.Set(nil)
}

// UnsetGlacierRetrievalType ensures that no value is present for GlacierRetrievalType, not even an explicit nil
func (o *CreateRemoteVaultRestoreTaskParameters) UnsetGlacierRetrievalType() {
	o.GlacierRetrievalType.Unset()
}

// GetRestoreObjects returns the RestoreObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateRemoteVaultRestoreTaskParameters) GetRestoreObjects() []IndexAndSnapshots {
	if o == nil  {
		var ret []IndexAndSnapshots
		return ret
	}
	return o.RestoreObjects
}

// GetRestoreObjectsOk returns a tuple with the RestoreObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRemoteVaultRestoreTaskParameters) GetRestoreObjectsOk() (*[]IndexAndSnapshots, bool) {
	if o == nil || o.RestoreObjects == nil {
		return nil, false
	}
	return &o.RestoreObjects, true
}

// HasRestoreObjects returns a boolean if a field has been set.
func (o *CreateRemoteVaultRestoreTaskParameters) HasRestoreObjects() bool {
	if o != nil && o.RestoreObjects != nil {
		return true
	}

	return false
}

// SetRestoreObjects gets a reference to the given []IndexAndSnapshots and assigns it to the RestoreObjects field.
func (o *CreateRemoteVaultRestoreTaskParameters) SetRestoreObjects(v []IndexAndSnapshots) {
	o.RestoreObjects = v
}

// GetSearchJobUid returns the SearchJobUid field value
// If the value is explicit nil, the zero value for UniversalId will be returned
func (o *CreateRemoteVaultRestoreTaskParameters) GetSearchJobUid() UniversalId {
	if o == nil || o.SearchJobUid.Get() == nil {
		var ret UniversalId
		return ret
	}

	return *o.SearchJobUid.Get()
}

// GetSearchJobUidOk returns a tuple with the SearchJobUid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRemoteVaultRestoreTaskParameters) GetSearchJobUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SearchJobUid.Get(), o.SearchJobUid.IsSet()
}

// SetSearchJobUid sets field value
func (o *CreateRemoteVaultRestoreTaskParameters) SetSearchJobUid(v UniversalId) {
	o.SearchJobUid.Set(&v)
}

// GetTaskName returns the TaskName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateRemoteVaultRestoreTaskParameters) GetTaskName() string {
	if o == nil || o.TaskName.Get() == nil {
		var ret string
		return ret
	}

	return *o.TaskName.Get()
}

// GetTaskNameOk returns a tuple with the TaskName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRemoteVaultRestoreTaskParameters) GetTaskNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskName.Get(), o.TaskName.IsSet()
}

// SetTaskName sets field value
func (o *CreateRemoteVaultRestoreTaskParameters) SetTaskName(v string) {
	o.TaskName.Set(&v)
}

// GetVaultId returns the VaultId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *CreateRemoteVaultRestoreTaskParameters) GetVaultId() int64 {
	if o == nil || o.VaultId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.VaultId.Get()
}

// GetVaultIdOk returns a tuple with the VaultId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRemoteVaultRestoreTaskParameters) GetVaultIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VaultId.Get(), o.VaultId.IsSet()
}

// SetVaultId sets field value
func (o *CreateRemoteVaultRestoreTaskParameters) SetVaultId(v int64) {
	o.VaultId.Set(&v)
}

func (o CreateRemoteVaultRestoreTaskParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GlacierRetrievalType.IsSet() {
		toSerialize["glacierRetrievalType"] = o.GlacierRetrievalType.Get()
	}
	if o.RestoreObjects != nil {
		toSerialize["restoreObjects"] = o.RestoreObjects
	}
	if true {
		toSerialize["searchJobUid"] = o.SearchJobUid.Get()
	}
	if true {
		toSerialize["taskName"] = o.TaskName.Get()
	}
	if true {
		toSerialize["vaultId"] = o.VaultId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateRemoteVaultRestoreTaskParameters struct {
	value *CreateRemoteVaultRestoreTaskParameters
	isSet bool
}

func (v NullableCreateRemoteVaultRestoreTaskParameters) Get() *CreateRemoteVaultRestoreTaskParameters {
	return v.value
}

func (v *NullableCreateRemoteVaultRestoreTaskParameters) Set(val *CreateRemoteVaultRestoreTaskParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRemoteVaultRestoreTaskParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRemoteVaultRestoreTaskParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRemoteVaultRestoreTaskParameters(val *CreateRemoteVaultRestoreTaskParameters) *NullableCreateRemoteVaultRestoreTaskParameters {
	return &NullableCreateRemoteVaultRestoreTaskParameters{value: val, isSet: true}
}

func (v NullableCreateRemoteVaultRestoreTaskParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRemoteVaultRestoreTaskParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


