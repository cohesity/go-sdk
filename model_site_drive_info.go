/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SiteDriveInfo Specifies the Site's Document Library drive info.
type SiteDriveInfo struct {
	// Specifies the Id of the Drive.
	DriveId NullableString `json:"driveId,omitempty"`
	// Specifies the Drive items such as files/folders.
	DriveItemList []SiteDriveItem `json:"driveItemList,omitempty"`
	// Specifies the drive name for the document repsitory. Incase of drive Id not present, this field must be populated to trigger restore.
	DriveName NullableString `json:"driveName,omitempty"`
	// Specifies whether entire drive is to be restored. This should be set to false if specific drive items are to be restored within 'DriveItemList'.
	RestoreEntireDrive NullableBool `json:"restoreEntireDrive,omitempty"`
}

// NewSiteDriveInfo instantiates a new SiteDriveInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSiteDriveInfo() *SiteDriveInfo {
	this := SiteDriveInfo{}
	return &this
}

// NewSiteDriveInfoWithDefaults instantiates a new SiteDriveInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSiteDriveInfoWithDefaults() *SiteDriveInfo {
	this := SiteDriveInfo{}
	return &this
}

// GetDriveId returns the DriveId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteDriveInfo) GetDriveId() string {
	if o == nil || o.DriveId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DriveId.Get()
}

// GetDriveIdOk returns a tuple with the DriveId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteDriveInfo) GetDriveIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DriveId.Get(), o.DriveId.IsSet()
}

// HasDriveId returns a boolean if a field has been set.
func (o *SiteDriveInfo) HasDriveId() bool {
	if o != nil && o.DriveId.IsSet() {
		return true
	}

	return false
}

// SetDriveId gets a reference to the given NullableString and assigns it to the DriveId field.
func (o *SiteDriveInfo) SetDriveId(v string) {
	o.DriveId.Set(&v)
}
// SetDriveIdNil sets the value for DriveId to be an explicit nil
func (o *SiteDriveInfo) SetDriveIdNil() {
	o.DriveId.Set(nil)
}

// UnsetDriveId ensures that no value is present for DriveId, not even an explicit nil
func (o *SiteDriveInfo) UnsetDriveId() {
	o.DriveId.Unset()
}

// GetDriveItemList returns the DriveItemList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteDriveInfo) GetDriveItemList() []SiteDriveItem {
	if o == nil  {
		var ret []SiteDriveItem
		return ret
	}
	return o.DriveItemList
}

// GetDriveItemListOk returns a tuple with the DriveItemList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteDriveInfo) GetDriveItemListOk() (*[]SiteDriveItem, bool) {
	if o == nil || o.DriveItemList == nil {
		return nil, false
	}
	return &o.DriveItemList, true
}

// HasDriveItemList returns a boolean if a field has been set.
func (o *SiteDriveInfo) HasDriveItemList() bool {
	if o != nil && o.DriveItemList != nil {
		return true
	}

	return false
}

// SetDriveItemList gets a reference to the given []SiteDriveItem and assigns it to the DriveItemList field.
func (o *SiteDriveInfo) SetDriveItemList(v []SiteDriveItem) {
	o.DriveItemList = v
}

// GetDriveName returns the DriveName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteDriveInfo) GetDriveName() string {
	if o == nil || o.DriveName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DriveName.Get()
}

// GetDriveNameOk returns a tuple with the DriveName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteDriveInfo) GetDriveNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DriveName.Get(), o.DriveName.IsSet()
}

// HasDriveName returns a boolean if a field has been set.
func (o *SiteDriveInfo) HasDriveName() bool {
	if o != nil && o.DriveName.IsSet() {
		return true
	}

	return false
}

// SetDriveName gets a reference to the given NullableString and assigns it to the DriveName field.
func (o *SiteDriveInfo) SetDriveName(v string) {
	o.DriveName.Set(&v)
}
// SetDriveNameNil sets the value for DriveName to be an explicit nil
func (o *SiteDriveInfo) SetDriveNameNil() {
	o.DriveName.Set(nil)
}

// UnsetDriveName ensures that no value is present for DriveName, not even an explicit nil
func (o *SiteDriveInfo) UnsetDriveName() {
	o.DriveName.Unset()
}

// GetRestoreEntireDrive returns the RestoreEntireDrive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SiteDriveInfo) GetRestoreEntireDrive() bool {
	if o == nil || o.RestoreEntireDrive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.RestoreEntireDrive.Get()
}

// GetRestoreEntireDriveOk returns a tuple with the RestoreEntireDrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SiteDriveInfo) GetRestoreEntireDriveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RestoreEntireDrive.Get(), o.RestoreEntireDrive.IsSet()
}

// HasRestoreEntireDrive returns a boolean if a field has been set.
func (o *SiteDriveInfo) HasRestoreEntireDrive() bool {
	if o != nil && o.RestoreEntireDrive.IsSet() {
		return true
	}

	return false
}

// SetRestoreEntireDrive gets a reference to the given NullableBool and assigns it to the RestoreEntireDrive field.
func (o *SiteDriveInfo) SetRestoreEntireDrive(v bool) {
	o.RestoreEntireDrive.Set(&v)
}
// SetRestoreEntireDriveNil sets the value for RestoreEntireDrive to be an explicit nil
func (o *SiteDriveInfo) SetRestoreEntireDriveNil() {
	o.RestoreEntireDrive.Set(nil)
}

// UnsetRestoreEntireDrive ensures that no value is present for RestoreEntireDrive, not even an explicit nil
func (o *SiteDriveInfo) UnsetRestoreEntireDrive() {
	o.RestoreEntireDrive.Unset()
}

func (o SiteDriveInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DriveId.IsSet() {
		toSerialize["driveId"] = o.DriveId.Get()
	}
	if o.DriveItemList != nil {
		toSerialize["driveItemList"] = o.DriveItemList
	}
	if o.DriveName.IsSet() {
		toSerialize["driveName"] = o.DriveName.Get()
	}
	if o.RestoreEntireDrive.IsSet() {
		toSerialize["restoreEntireDrive"] = o.RestoreEntireDrive.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSiteDriveInfo struct {
	value *SiteDriveInfo
	isSet bool
}

func (v NullableSiteDriveInfo) Get() *SiteDriveInfo {
	return v.value
}

func (v *NullableSiteDriveInfo) Set(val *SiteDriveInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSiteDriveInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSiteDriveInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSiteDriveInfo(val *SiteDriveInfo) *NullableSiteDriveInfo {
	return &NullableSiteDriveInfo{value: val, isSet: true}
}

func (v NullableSiteDriveInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSiteDriveInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


