// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RemoteVaultRestoreTaskStatus Remote Vault Restore Task Status.
//
// Specifies the status of a remote Vault restore task.
//
// swagger:model RemoteVaultRestoreTaskStatus
type RemoteVaultRestoreTaskStatus struct {

	// current indexing status
	CurrentIndexingStatus *RemoteVaultRestoreTaskStatusCurrentIndexingStatus `json:"currentIndexingStatus,omitempty"`

	// current snapshot status
	CurrentSnapshotStatus *RemoteVaultRestoreTaskStatusCurrentSnapshotStatus `json:"currentSnapshotStatus,omitempty"`

	// local protection job Uid
	LocalProtectionJobUID *RemoteVaultRestoreTaskStatusLocalProtectionJobUID `json:"localProtectionJobUid,omitempty"`

	// parent job Uid
	ParentJobUID *RemoteVaultRestoreTaskStatusParentJobUID `json:"parentJobUid,omitempty"`

	// Remote Protection Job Information.
	//
	// Specifies the details about the original Protection Job that archived data
	// to the remote Vault (External Target).
	RemoteProtectionJobInformation *RemoteProtectionJobInformation `json:"remoteProtectionJobInformation,omitempty"`

	// search job Uid
	SearchJobUID *RemoteVaultRestoreTaskStatusSearchJobUID `json:"searchJobUid,omitempty"`

	// Vault Id
	//
	// Specifies the Id of the vault from which the restore is going on.
	VaultID *int64 `json:"vaultId,omitempty"`

	// Vault Name
	//
	// Specifies the name of the vault from which the restore is going on.
	VaultName *string `json:"vaultName,omitempty"`
}

// Validate validates this remote vault restore task status
func (m *RemoteVaultRestoreTaskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrentIndexingStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentSnapshotStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalProtectionJobUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParentJobUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteProtectionJobInformation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSearchJobUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteVaultRestoreTaskStatus) validateCurrentIndexingStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentIndexingStatus) { // not required
		return nil
	}

	if m.CurrentIndexingStatus != nil {
		if err := m.CurrentIndexingStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentIndexingStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentIndexingStatus")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteVaultRestoreTaskStatus) validateCurrentSnapshotStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CurrentSnapshotStatus) { // not required
		return nil
	}

	if m.CurrentSnapshotStatus != nil {
		if err := m.CurrentSnapshotStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentSnapshotStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentSnapshotStatus")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteVaultRestoreTaskStatus) validateLocalProtectionJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalProtectionJobUID) { // not required
		return nil
	}

	if m.LocalProtectionJobUID != nil {
		if err := m.LocalProtectionJobUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localProtectionJobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localProtectionJobUid")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteVaultRestoreTaskStatus) validateParentJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ParentJobUID) { // not required
		return nil
	}

	if m.ParentJobUID != nil {
		if err := m.ParentJobUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentJobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentJobUid")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteVaultRestoreTaskStatus) validateRemoteProtectionJobInformation(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteProtectionJobInformation) { // not required
		return nil
	}

	if m.RemoteProtectionJobInformation != nil {
		if err := m.RemoteProtectionJobInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteProtectionJobInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteProtectionJobInformation")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteVaultRestoreTaskStatus) validateSearchJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.SearchJobUID) { // not required
		return nil
	}

	if m.SearchJobUID != nil {
		if err := m.SearchJobUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("searchJobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("searchJobUid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this remote vault restore task status based on the context it is used
func (m *RemoteVaultRestoreTaskStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCurrentIndexingStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCurrentSnapshotStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalProtectionJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParentJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteProtectionJobInformation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSearchJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteVaultRestoreTaskStatus) contextValidateCurrentIndexingStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentIndexingStatus != nil {

		if swag.IsZero(m.CurrentIndexingStatus) { // not required
			return nil
		}

		if err := m.CurrentIndexingStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentIndexingStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentIndexingStatus")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteVaultRestoreTaskStatus) contextValidateCurrentSnapshotStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.CurrentSnapshotStatus != nil {

		if swag.IsZero(m.CurrentSnapshotStatus) { // not required
			return nil
		}

		if err := m.CurrentSnapshotStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("currentSnapshotStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("currentSnapshotStatus")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteVaultRestoreTaskStatus) contextValidateLocalProtectionJobUID(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalProtectionJobUID != nil {

		if swag.IsZero(m.LocalProtectionJobUID) { // not required
			return nil
		}

		if err := m.LocalProtectionJobUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localProtectionJobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localProtectionJobUid")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteVaultRestoreTaskStatus) contextValidateParentJobUID(ctx context.Context, formats strfmt.Registry) error {

	if m.ParentJobUID != nil {

		if swag.IsZero(m.ParentJobUID) { // not required
			return nil
		}

		if err := m.ParentJobUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("parentJobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("parentJobUid")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteVaultRestoreTaskStatus) contextValidateRemoteProtectionJobInformation(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteProtectionJobInformation != nil {

		if swag.IsZero(m.RemoteProtectionJobInformation) { // not required
			return nil
		}

		if err := m.RemoteProtectionJobInformation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteProtectionJobInformation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteProtectionJobInformation")
			}
			return err
		}
	}

	return nil
}

func (m *RemoteVaultRestoreTaskStatus) contextValidateSearchJobUID(ctx context.Context, formats strfmt.Registry) error {

	if m.SearchJobUID != nil {

		if swag.IsZero(m.SearchJobUID) { // not required
			return nil
		}

		if err := m.SearchJobUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("searchJobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("searchJobUid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteVaultRestoreTaskStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteVaultRestoreTaskStatus) UnmarshalBinary(b []byte) error {
	var res RemoteVaultRestoreTaskStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
