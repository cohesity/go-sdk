// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Condition Protobuf that describes the condition.
//
// swagger:model Condition
type Condition struct {

	// This field describes the operator to use to perform the condition checks.
	CondOperator *int32 `json:"condOperator,omitempty"`

	// This field describes the condition keys and the values specified for that
	// key. An example of key is "s3:x-amz-acl" with values like "public-read",
	// meaning that the request should include "public-read" in the ACL header.
	ConditionKeyValuesMap []*ConditionConditionKeyValuesMapEntry `json:"conditionKeyValuesMap"`

	// This field describes whether the condition matches all of the input values
	// matches against any at least one of the values in
	// 'condition_key_values_map'.
	ForAllValues *bool `json:"forAllValues,omitempty"`

	// This field describes whether the condition matches any of the input values
	// matches against any one of the values in 'condition_key_values_map'.
	ForAnyValue *bool `json:"forAnyValue,omitempty"`

	// This field describes whether to evaluate condition as true if the
	// condition key does not exist and if it exists then it should match the
	// values from 'condition_key_values_map'.
	IfExists *bool `json:"ifExists,omitempty"`
}

// Validate validates this condition
func (m *Condition) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConditionKeyValuesMap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Condition) validateConditionKeyValuesMap(formats strfmt.Registry) error {
	if swag.IsZero(m.ConditionKeyValuesMap) { // not required
		return nil
	}

	for i := 0; i < len(m.ConditionKeyValuesMap); i++ {
		if swag.IsZero(m.ConditionKeyValuesMap[i]) { // not required
			continue
		}

		if m.ConditionKeyValuesMap[i] != nil {
			if err := m.ConditionKeyValuesMap[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditionKeyValuesMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditionKeyValuesMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this condition based on the context it is used
func (m *Condition) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConditionKeyValuesMap(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Condition) contextValidateConditionKeyValuesMap(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ConditionKeyValuesMap); i++ {

		if m.ConditionKeyValuesMap[i] != nil {

			if swag.IsZero(m.ConditionKeyValuesMap[i]) { // not required
				return nil
			}

			if err := m.ConditionKeyValuesMap[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("conditionKeyValuesMap" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("conditionKeyValuesMap" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Condition) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Condition) UnmarshalBinary(b []byte) error {
	var res Condition
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
