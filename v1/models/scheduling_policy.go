// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SchedulingPolicy Scheduling Policy.
//
// Specifies settings that define a backup schedule for a Protection Job.
//
// swagger:model SchedulingPolicy
type SchedulingPolicy struct {

	// continuous schedule
	ContinuousSchedule *SchedulingPolicyContinuousSchedule `json:"continuousSchedule,omitempty"`

	// daily schedule
	DailySchedule *SchedulingPolicyDailySchedule `json:"dailySchedule,omitempty"`

	// monthly schedule
	MonthlySchedule *SchedulingPolicyMonthlySchedule `json:"monthlySchedule,omitempty"`

	// Specifies how often to start new Job Runs of a Protection Job.
	// 'kDaily' means new Job Runs start daily.
	// 'kMonthly' means new Job Runs start monthly.
	// 'kContinuous' means new Job Runs repetitively start at the
	// beginning of the specified time interval (in hours or minutes).
	// 'kContinuousRPO' means this is an RPO schedule.
	// 'kCDP' means this is a continuous data protection policy.
	// Enum: ["kContinuous","kDaily","kMonthly","kContinuousRPO","kCDP"]
	Periodicity *string `json:"periodicity,omitempty"`

	// rpo schedule
	RpoSchedule *SchedulingPolicyRpoSchedule `json:"rpoSchedule,omitempty"`
}

// Validate validates this scheduling policy
func (m *SchedulingPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContinuousSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDailySchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthlySchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriodicity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRpoSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulingPolicy) validateContinuousSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.ContinuousSchedule) { // not required
		return nil
	}

	if m.ContinuousSchedule != nil {
		if err := m.ContinuousSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuousSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("continuousSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicy) validateDailySchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.DailySchedule) { // not required
		return nil
	}

	if m.DailySchedule != nil {
		if err := m.DailySchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dailySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dailySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicy) validateMonthlySchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.MonthlySchedule) { // not required
		return nil
	}

	if m.MonthlySchedule != nil {
		if err := m.MonthlySchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthlySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthlySchedule")
			}
			return err
		}
	}

	return nil
}

var schedulingPolicyTypePeriodicityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kContinuous","kDaily","kMonthly","kContinuousRPO","kCDP"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		schedulingPolicyTypePeriodicityPropEnum = append(schedulingPolicyTypePeriodicityPropEnum, v)
	}
}

const (

	// SchedulingPolicyPeriodicityKContinuous captures enum value "kContinuous"
	SchedulingPolicyPeriodicityKContinuous string = "kContinuous"

	// SchedulingPolicyPeriodicityKDaily captures enum value "kDaily"
	SchedulingPolicyPeriodicityKDaily string = "kDaily"

	// SchedulingPolicyPeriodicityKMonthly captures enum value "kMonthly"
	SchedulingPolicyPeriodicityKMonthly string = "kMonthly"

	// SchedulingPolicyPeriodicityKContinuousRPO captures enum value "kContinuousRPO"
	SchedulingPolicyPeriodicityKContinuousRPO string = "kContinuousRPO"

	// SchedulingPolicyPeriodicityKCDP captures enum value "kCDP"
	SchedulingPolicyPeriodicityKCDP string = "kCDP"
)

// prop value enum
func (m *SchedulingPolicy) validatePeriodicityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, schedulingPolicyTypePeriodicityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SchedulingPolicy) validatePeriodicity(formats strfmt.Registry) error {
	if swag.IsZero(m.Periodicity) { // not required
		return nil
	}

	// value enum
	if err := m.validatePeriodicityEnum("periodicity", "body", *m.Periodicity); err != nil {
		return err
	}

	return nil
}

func (m *SchedulingPolicy) validateRpoSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.RpoSchedule) { // not required
		return nil
	}

	if m.RpoSchedule != nil {
		if err := m.RpoSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rpoSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rpoSchedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this scheduling policy based on the context it is used
func (m *SchedulingPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateContinuousSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDailySchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonthlySchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRpoSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SchedulingPolicy) contextValidateContinuousSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.ContinuousSchedule != nil {

		if swag.IsZero(m.ContinuousSchedule) { // not required
			return nil
		}

		if err := m.ContinuousSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("continuousSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("continuousSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicy) contextValidateDailySchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.DailySchedule != nil {

		if swag.IsZero(m.DailySchedule) { // not required
			return nil
		}

		if err := m.DailySchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dailySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dailySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicy) contextValidateMonthlySchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.MonthlySchedule != nil {

		if swag.IsZero(m.MonthlySchedule) { // not required
			return nil
		}

		if err := m.MonthlySchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthlySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthlySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *SchedulingPolicy) contextValidateRpoSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.RpoSchedule != nil {

		if swag.IsZero(m.RpoSchedule) { // not required
			return nil
		}

		if err := m.RpoSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rpoSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rpoSchedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SchedulingPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SchedulingPolicy) UnmarshalBinary(b []byte) error {
	var res SchedulingPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
