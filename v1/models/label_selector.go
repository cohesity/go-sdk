// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// LabelSelector label selector
//
// swagger:model LabelSelector
type LabelSelector struct {

	// This field is an object which consists of key-value pairs
	// of all labels that must be matched by the selector
	MatchLabels []*LabelSelectorMatchLabelsEntry `json:"matchLabels"`

	// Select all objects which have a label with
	// key : "name" and value specified by this field.
	Name *string `json:"name,omitempty"`

	// Select all objects which have a label with.
	// key: "serviceName" and value as specified by this field.
	ServiceName *string `json:"serviceName,omitempty"`
}

// Validate validates this label selector
func (m *LabelSelector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMatchLabels(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelSelector) validateMatchLabels(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchLabels) { // not required
		return nil
	}

	for i := 0; i < len(m.MatchLabels); i++ {
		if swag.IsZero(m.MatchLabels[i]) { // not required
			continue
		}

		if m.MatchLabels[i] != nil {
			if err := m.MatchLabels[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("matchLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this label selector based on the context it is used
func (m *LabelSelector) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMatchLabels(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LabelSelector) contextValidateMatchLabels(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.MatchLabels); i++ {

		if m.MatchLabels[i] != nil {

			if swag.IsZero(m.MatchLabels[i]) { // not required
				return nil
			}

			if err := m.MatchLabels[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("matchLabels" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("matchLabels" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *LabelSelector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LabelSelector) UnmarshalBinary(b []byte) error {
	var res LabelSelector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
