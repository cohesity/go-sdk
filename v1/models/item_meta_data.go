// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ItemMetaData Message encapsulating the metadata for an outlook item. This has data which
// can be indexed by yoda for searching individual items.
//
// swagger:model ItemMetaData
type ItemMetaData struct {

	// List of attachment ids.
	AttachmentVec []*Attachment `json:"attachmentVec"`

	// List of BccRecipients.
	BccRecipientVec []*PrivateUser `json:"bccRecipientVec"`

	// Birthday of the Contact.
	Birthday *int64 `json:"birthday,omitempty"`

	// List of CcRecipients.
	CcRecipientVec []*PrivateUser `json:"ccRecipientVec"`

	// Version of the item that changed.
	ChangeKey *string `json:"changeKey,omitempty"`

	// Task completion date.
	CompletionDate *int64 `json:"completionDate,omitempty"`

	// Additional common fields for all item types.
	// Time at which the item is created - DateTimeCreated.
	CreationTime *int64 `json:"creationTime,omitempty"`

	// Task due date.
	DueDate *int64 `json:"dueDate,omitempty"`

	// Email addresses assigned to the Contact.
	EmailAddressesVec []string `json:"emailAddressesVec"`

	// End date/time for the single occurence events.
	EndTime *int64 `json:"endTime,omitempty"`

	// Contact items specific fields.
	// First name of the Contact.
	FirstName *string `json:"firstName,omitempty"`

	// Date/time for the first occurence of the recurring events.
	FirstOccurrence *ItemMetaDataOccurrence `json:"firstOccurrence,omitempty"`

	// From whom the mail is received.
	From *PrivateUser `json:"from,omitempty"`

	// Does the item have attachments?
	HasAttachments *bool `json:"hasAttachments,omitempty"`

	// Id of the item.
	ID *string `json:"id,omitempty"`

	// Item importance.
	Importance *int32 `json:"importance,omitempty"`

	// Is this recurring calendar event or task.
	IsRecurring *bool `json:"isRecurring,omitempty"`

	// Class of the item.
	ItemClass *string `json:"itemClass,omitempty"`

	// The item was last modified by.
	LastModifiedName *string `json:"lastModifiedName,omitempty"`

	// Last modificiation time of the item.
	LastModifiedTime *int64 `json:"lastModifiedTime,omitempty"`

	// Last name of the Contact.
	LastName *string `json:"lastName,omitempty"`

	// Date/time for the last occurence of the recurring events.
	LastOccurrence *ItemMetaDataOccurrence `json:"lastOccurrence,omitempty"`

	// Parent folder id returned with GetItem API call of the item.
	MetadataParentFolderID *string `json:"metadataParentFolderId,omitempty"`

	// Middle name of the Contact.
	MiddleName *string `json:"middleName,omitempty"`

	// Optional Attendee list - OptionalAttendees.
	OptionalAttendeesVec []*PrivateUser `json:"optionalAttendeesVec"`

	// Calendar item spcific fields.
	// Appointment/meeting Organizer.
	Organizer *PrivateUser `json:"organizer,omitempty"`

	// Task items specific fields.
	// Task owner.
	Owner *string `json:"owner,omitempty"`

	// Parent folder id of the item.
	ParentFolderID *string `json:"parentFolderId,omitempty"`

	// Time at which the mail is received.
	ReceivedTime *int64 `json:"receivedTime,omitempty"`

	// Recurrence pattern information for the recurring calendar events and
	// tasks.
	RecurrencePattern *int32 `json:"recurrencePattern,omitempty"`

	// Attendee list - RequiredAttendees.
	RequiredAttendeesVec []*PrivateUser `json:"requiredAttendeesVec"`

	// Item sensitivity.
	Sensitivity *int32 `json:"sensitivity,omitempty"`

	// Time at which the mail is sent.
	SentTime *int64 `json:"sentTime,omitempty"`

	// Sha-256 for the data.
	Sha256Checksum *string `json:"sha_256Checksum,omitempty"`

	// Size of the item.
	Size *int64 `json:"size,omitempty"`

	// Start date/time for the single occurence events.
	StartTime *int64 `json:"startTime,omitempty"`

	// Subject of the item.
	Subject *string `json:"subject,omitempty"`

	// Status of the task.
	TaskStatus *int32 `json:"taskStatus,omitempty"`

	// List of ToRecipients.
	ToRecipientVec []*PrivateUser `json:"toRecipientVec"`

	// Type of the item.
	Type *int32 `json:"type,omitempty"`
}

// Validate validates this item meta data
func (m *ItemMetaData) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachmentVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBccRecipientVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCcRecipientVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFrom(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastOccurrence(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOptionalAttendeesVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizer(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequiredAttendeesVec(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateToRecipientVec(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemMetaData) validateAttachmentVec(formats strfmt.Registry) error {
	if swag.IsZero(m.AttachmentVec) { // not required
		return nil
	}

	for i := 0; i < len(m.AttachmentVec); i++ {
		if swag.IsZero(m.AttachmentVec[i]) { // not required
			continue
		}

		if m.AttachmentVec[i] != nil {
			if err := m.AttachmentVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachmentVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachmentVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemMetaData) validateBccRecipientVec(formats strfmt.Registry) error {
	if swag.IsZero(m.BccRecipientVec) { // not required
		return nil
	}

	for i := 0; i < len(m.BccRecipientVec); i++ {
		if swag.IsZero(m.BccRecipientVec[i]) { // not required
			continue
		}

		if m.BccRecipientVec[i] != nil {
			if err := m.BccRecipientVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bccRecipientVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bccRecipientVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemMetaData) validateCcRecipientVec(formats strfmt.Registry) error {
	if swag.IsZero(m.CcRecipientVec) { // not required
		return nil
	}

	for i := 0; i < len(m.CcRecipientVec); i++ {
		if swag.IsZero(m.CcRecipientVec[i]) { // not required
			continue
		}

		if m.CcRecipientVec[i] != nil {
			if err := m.CcRecipientVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ccRecipientVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ccRecipientVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemMetaData) validateFirstOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.FirstOccurrence) { // not required
		return nil
	}

	if m.FirstOccurrence != nil {
		if err := m.FirstOccurrence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firstOccurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firstOccurrence")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaData) validateFrom(formats strfmt.Registry) error {
	if swag.IsZero(m.From) { // not required
		return nil
	}

	if m.From != nil {
		if err := m.From.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaData) validateLastOccurrence(formats strfmt.Registry) error {
	if swag.IsZero(m.LastOccurrence) { // not required
		return nil
	}

	if m.LastOccurrence != nil {
		if err := m.LastOccurrence.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastOccurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastOccurrence")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaData) validateOptionalAttendeesVec(formats strfmt.Registry) error {
	if swag.IsZero(m.OptionalAttendeesVec) { // not required
		return nil
	}

	for i := 0; i < len(m.OptionalAttendeesVec); i++ {
		if swag.IsZero(m.OptionalAttendeesVec[i]) { // not required
			continue
		}

		if m.OptionalAttendeesVec[i] != nil {
			if err := m.OptionalAttendeesVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("optionalAttendeesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("optionalAttendeesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemMetaData) validateOrganizer(formats strfmt.Registry) error {
	if swag.IsZero(m.Organizer) { // not required
		return nil
	}

	if m.Organizer != nil {
		if err := m.Organizer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizer")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaData) validateRequiredAttendeesVec(formats strfmt.Registry) error {
	if swag.IsZero(m.RequiredAttendeesVec) { // not required
		return nil
	}

	for i := 0; i < len(m.RequiredAttendeesVec); i++ {
		if swag.IsZero(m.RequiredAttendeesVec[i]) { // not required
			continue
		}

		if m.RequiredAttendeesVec[i] != nil {
			if err := m.RequiredAttendeesVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requiredAttendeesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requiredAttendeesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemMetaData) validateToRecipientVec(formats strfmt.Registry) error {
	if swag.IsZero(m.ToRecipientVec) { // not required
		return nil
	}

	for i := 0; i < len(m.ToRecipientVec); i++ {
		if swag.IsZero(m.ToRecipientVec[i]) { // not required
			continue
		}

		if m.ToRecipientVec[i] != nil {
			if err := m.ToRecipientVec[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("toRecipientVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("toRecipientVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this item meta data based on the context it is used
func (m *ItemMetaData) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAttachmentVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBccRecipientVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCcRecipientVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFirstOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFrom(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastOccurrence(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOptionalAttendeesVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOrganizer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRequiredAttendeesVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateToRecipientVec(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ItemMetaData) contextValidateAttachmentVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.AttachmentVec); i++ {

		if m.AttachmentVec[i] != nil {

			if swag.IsZero(m.AttachmentVec[i]) { // not required
				return nil
			}

			if err := m.AttachmentVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachmentVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("attachmentVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemMetaData) contextValidateBccRecipientVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BccRecipientVec); i++ {

		if m.BccRecipientVec[i] != nil {

			if swag.IsZero(m.BccRecipientVec[i]) { // not required
				return nil
			}

			if err := m.BccRecipientVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bccRecipientVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bccRecipientVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemMetaData) contextValidateCcRecipientVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.CcRecipientVec); i++ {

		if m.CcRecipientVec[i] != nil {

			if swag.IsZero(m.CcRecipientVec[i]) { // not required
				return nil
			}

			if err := m.CcRecipientVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("ccRecipientVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("ccRecipientVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemMetaData) contextValidateFirstOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if m.FirstOccurrence != nil {

		if swag.IsZero(m.FirstOccurrence) { // not required
			return nil
		}

		if err := m.FirstOccurrence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("firstOccurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("firstOccurrence")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaData) contextValidateFrom(ctx context.Context, formats strfmt.Registry) error {

	if m.From != nil {

		if swag.IsZero(m.From) { // not required
			return nil
		}

		if err := m.From.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("from")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("from")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaData) contextValidateLastOccurrence(ctx context.Context, formats strfmt.Registry) error {

	if m.LastOccurrence != nil {

		if swag.IsZero(m.LastOccurrence) { // not required
			return nil
		}

		if err := m.LastOccurrence.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lastOccurrence")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lastOccurrence")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaData) contextValidateOptionalAttendeesVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OptionalAttendeesVec); i++ {

		if m.OptionalAttendeesVec[i] != nil {

			if swag.IsZero(m.OptionalAttendeesVec[i]) { // not required
				return nil
			}

			if err := m.OptionalAttendeesVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("optionalAttendeesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("optionalAttendeesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemMetaData) contextValidateOrganizer(ctx context.Context, formats strfmt.Registry) error {

	if m.Organizer != nil {

		if swag.IsZero(m.Organizer) { // not required
			return nil
		}

		if err := m.Organizer.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("organizer")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("organizer")
			}
			return err
		}
	}

	return nil
}

func (m *ItemMetaData) contextValidateRequiredAttendeesVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.RequiredAttendeesVec); i++ {

		if m.RequiredAttendeesVec[i] != nil {

			if swag.IsZero(m.RequiredAttendeesVec[i]) { // not required
				return nil
			}

			if err := m.RequiredAttendeesVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("requiredAttendeesVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("requiredAttendeesVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ItemMetaData) contextValidateToRecipientVec(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ToRecipientVec); i++ {

		if m.ToRecipientVec[i] != nil {

			if swag.IsZero(m.ToRecipientVec[i]) { // not required
				return nil
			}

			if err := m.ToRecipientVec[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("toRecipientVec" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("toRecipientVec" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ItemMetaData) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ItemMetaData) UnmarshalBinary(b []byte) error {
	var res ItemMetaData
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
