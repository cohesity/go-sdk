// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BackupScript Backup Script.
//
// Specifies details about the pre and post backup scripts for 'kPhysical'
// jobs.
//
// swagger:model BackupScript
type BackupScript struct {

	// full backup script
	FullBackupScript *BackupScriptFullBackupScript `json:"fullBackupScript,omitempty"`

	// incremental backup script
	IncrementalBackupScript *BackupScriptIncrementalBackupScript `json:"incrementalBackupScript,omitempty"`

	// log backup script
	LogBackupScript *BackupScriptLogBackupScript `json:"logBackupScript,omitempty"`

	// remote host
	RemoteHost *BackupScriptRemoteHost `json:"remoteHost,omitempty"`

	// Specifies the username that will be used to login to the remote host.
	// For host type 'kLinux', it is expected that user has setup the
	// password-less access. So only username field is required.
	Username *string `json:"username,omitempty"`
}

// Validate validates this backup script
func (m *BackupScript) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFullBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIncrementalBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogBackupScript(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteHost(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupScript) validateFullBackupScript(formats strfmt.Registry) error {
	if swag.IsZero(m.FullBackupScript) { // not required
		return nil
	}

	if m.FullBackupScript != nil {
		if err := m.FullBackupScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScript) validateIncrementalBackupScript(formats strfmt.Registry) error {
	if swag.IsZero(m.IncrementalBackupScript) { // not required
		return nil
	}

	if m.IncrementalBackupScript != nil {
		if err := m.IncrementalBackupScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incrementalBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incrementalBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScript) validateLogBackupScript(formats strfmt.Registry) error {
	if swag.IsZero(m.LogBackupScript) { // not required
		return nil
	}

	if m.LogBackupScript != nil {
		if err := m.LogBackupScript.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScript) validateRemoteHost(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteHost) { // not required
		return nil
	}

	if m.RemoteHost != nil {
		if err := m.RemoteHost.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteHost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteHost")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this backup script based on the context it is used
func (m *BackupScript) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateFullBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIncrementalBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogBackupScript(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteHost(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BackupScript) contextValidateFullBackupScript(ctx context.Context, formats strfmt.Registry) error {

	if m.FullBackupScript != nil {

		if swag.IsZero(m.FullBackupScript) { // not required
			return nil
		}

		if err := m.FullBackupScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fullBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("fullBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScript) contextValidateIncrementalBackupScript(ctx context.Context, formats strfmt.Registry) error {

	if m.IncrementalBackupScript != nil {

		if swag.IsZero(m.IncrementalBackupScript) { // not required
			return nil
		}

		if err := m.IncrementalBackupScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incrementalBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incrementalBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScript) contextValidateLogBackupScript(ctx context.Context, formats strfmt.Registry) error {

	if m.LogBackupScript != nil {

		if swag.IsZero(m.LogBackupScript) { // not required
			return nil
		}

		if err := m.LogBackupScript.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logBackupScript")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logBackupScript")
			}
			return err
		}
	}

	return nil
}

func (m *BackupScript) contextValidateRemoteHost(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteHost != nil {

		if swag.IsZero(m.RemoteHost) { // not required
			return nil
		}

		if err := m.RemoteHost.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteHost")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteHost")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BackupScript) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BackupScript) UnmarshalBinary(b []byte) error {
	var res BackupScript
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
