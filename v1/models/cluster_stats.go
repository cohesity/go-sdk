// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ClusterStats Cohesity Cluster Statistics.
//
// Specifies statistics about this Cohesity Cluster.
//
// swagger:model ClusterStats
type ClusterStats struct {

	// cloud usage perf stats
	CloudUsagePerfStats *ClusterStatsCloudUsagePerfStats `json:"cloudUsagePerfStats,omitempty"`

	// Provides the ratio of Cluster Logical Data (totalLogicalUsageBytes)
	// Managed to Cluster Storage Used (totalPhysicalUsageBytes)
	DataReductionRatio *float64 `json:"dataReductionRatio,omitempty"`

	// Data Usage Statistics.
	//
	// Specifies the data usage metric of the data stored by the Cohesity
	// Cluster.
	DataUsageStats *DataUsageStats `json:"dataUsageStats,omitempty"`

	// Specifies the id of the Cohesity Cluster.
	ID *int64 `json:"id,omitempty"`

	// local usage perf stats
	LocalUsagePerfStats *ClusterStatsLocalUsagePerfStats `json:"localUsagePerfStats,omitempty"`

	// logical stats
	LogicalStats *ClusterStatsLogicalStats `json:"logicalStats,omitempty"`

	// usage perf stats
	UsagePerfStats *ClusterStatsUsagePerfStats `json:"usagePerfStats,omitempty"`
}

// Validate validates this cluster stats
func (m *ClusterStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudUsagePerfStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataUsageStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocalUsagePerfStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogicalStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsagePerfStats(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStats) validateCloudUsagePerfStats(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudUsagePerfStats) { // not required
		return nil
	}

	if m.CloudUsagePerfStats != nil {
		if err := m.CloudUsagePerfStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudUsagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudUsagePerfStats")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) validateDataUsageStats(formats strfmt.Registry) error {
	if swag.IsZero(m.DataUsageStats) { // not required
		return nil
	}

	if m.DataUsageStats != nil {
		if err := m.DataUsageStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataUsageStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataUsageStats")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) validateLocalUsagePerfStats(formats strfmt.Registry) error {
	if swag.IsZero(m.LocalUsagePerfStats) { // not required
		return nil
	}

	if m.LocalUsagePerfStats != nil {
		if err := m.LocalUsagePerfStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localUsagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localUsagePerfStats")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) validateLogicalStats(formats strfmt.Registry) error {
	if swag.IsZero(m.LogicalStats) { // not required
		return nil
	}

	if m.LogicalStats != nil {
		if err := m.LogicalStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logicalStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logicalStats")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) validateUsagePerfStats(formats strfmt.Registry) error {
	if swag.IsZero(m.UsagePerfStats) { // not required
		return nil
	}

	if m.UsagePerfStats != nil {
		if err := m.UsagePerfStats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usagePerfStats")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster stats based on the context it is used
func (m *ClusterStats) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudUsagePerfStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataUsageStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLocalUsagePerfStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLogicalStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUsagePerfStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterStats) contextValidateCloudUsagePerfStats(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudUsagePerfStats != nil {

		if swag.IsZero(m.CloudUsagePerfStats) { // not required
			return nil
		}

		if err := m.CloudUsagePerfStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudUsagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudUsagePerfStats")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) contextValidateDataUsageStats(ctx context.Context, formats strfmt.Registry) error {

	if m.DataUsageStats != nil {

		if swag.IsZero(m.DataUsageStats) { // not required
			return nil
		}

		if err := m.DataUsageStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataUsageStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataUsageStats")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) contextValidateLocalUsagePerfStats(ctx context.Context, formats strfmt.Registry) error {

	if m.LocalUsagePerfStats != nil {

		if swag.IsZero(m.LocalUsagePerfStats) { // not required
			return nil
		}

		if err := m.LocalUsagePerfStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("localUsagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("localUsagePerfStats")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) contextValidateLogicalStats(ctx context.Context, formats strfmt.Registry) error {

	if m.LogicalStats != nil {

		if swag.IsZero(m.LogicalStats) { // not required
			return nil
		}

		if err := m.LogicalStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("logicalStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("logicalStats")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterStats) contextValidateUsagePerfStats(ctx context.Context, formats strfmt.Registry) error {

	if m.UsagePerfStats != nil {

		if swag.IsZero(m.UsagePerfStats) { // not required
			return nil
		}

		if err := m.UsagePerfStats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("usagePerfStats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("usagePerfStats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterStats) UnmarshalBinary(b []byte) error {
	var res ClusterStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
