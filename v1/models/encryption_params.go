// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// EncryptionParams Encryption params for restore type krecoverVms.
//
// swagger:model EncryptionParams
type EncryptionParams struct {

	// String containing kms key arn in case of custom key option.
	// Example: arn:aws:kms:<region>:<account_id>:key/<key_id>
	CustomKmsKeyArn *string `json:"customKmsKeyArn,omitempty"`

	// KMS key to be used to encrypt the restored volume. This is only
	// valid for selection from dropdown.
	KmsKey *EntityProto `json:"kmsKey,omitempty"`

	// Whether to encrypt the restored instance's volumes or not. For recovery to
	// new location, this will be true by default.
	ShouldEncrypt *bool `json:"shouldEncrypt,omitempty"`
}

// Validate validates this encryption params
func (m *EncryptionParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKmsKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncryptionParams) validateKmsKey(formats strfmt.Registry) error {
	if swag.IsZero(m.KmsKey) { // not required
		return nil
	}

	if m.KmsKey != nil {
		if err := m.KmsKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kmsKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kmsKey")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this encryption params based on the context it is used
func (m *EncryptionParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateKmsKey(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EncryptionParams) contextValidateKmsKey(ctx context.Context, formats strfmt.Registry) error {

	if m.KmsKey != nil {

		if swag.IsZero(m.KmsKey) { // not required
			return nil
		}

		if err := m.KmsKey.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kmsKey")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kmsKey")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EncryptionParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EncryptionParams) UnmarshalBinary(b []byte) error {
	var res EncryptionParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
