// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtectionSource Protection Source.
//
// Specifies a generic structure that represents a node
// in the Protection Source tree. Node details will depend on the
// environment of the Protection Source.
//
// swagger:model ProtectionSource
type ProtectionSource struct {

	// acropolis protection source
	AcropolisProtectionSource *ProtectionSourceAcropolisProtectionSource `json:"acropolisProtectionSource,omitempty"`

	// ad protection source
	AdProtectionSource *ProtectionSourceAdProtectionSource `json:"adProtectionSource,omitempty"`

	// aws protection source
	AwsProtectionSource *ProtectionSourceAwsProtectionSource `json:"awsProtectionSource,omitempty"`

	// azure protection source
	AzureProtectionSource *ProtectionSourceAzureProtectionSource `json:"azureProtectionSource,omitempty"`

	// cassandra protection source
	CassandraProtectionSource *ProtectionSourceCassandraProtectionSource `json:"cassandraProtectionSource,omitempty"`

	// Specifies the connection id of the tenant.
	ConnectionID *int64 `json:"connectionId,omitempty"`

	// Specifies the connector group id of the connector groups.
	ConnectorGroupID *int64 `json:"connectorGroupId,omitempty"`

	// couchbase protection source
	CouchbaseProtectionSource *ProtectionSourceCouchbaseProtectionSource `json:"couchbaseProtectionSource,omitempty"`

	// Specifies the user provided custom name of the Protection Source.
	CustomName *string `json:"customName,omitempty"`

	// elastifile protection source
	ElastifileProtectionSource *ProtectionSourceElastifileProtectionSource `json:"elastifileProtectionSource,omitempty"`

	// Specifies the environment (such as 'kVMware' or 'kSQL') where the
	// Protection Source exists. Depending on the environment, one of the
	// following Protection Sources are initialized.
	//
	// NOTE: kPuppeteer refers to Cohesity's Remote Adapter.
	// Supported environment types such as 'kView', 'kSQL', 'kVMware', etc.
	// NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter.
	// 'kVMware' indicates the VMware Protection Source environment.
	// 'kHyperV' indicates the HyperV Protection Source environment.
	// 'kSQL' indicates the SQL Protection Source environment.
	// 'kView' indicates the View Protection Source environment.
	// 'kPuppeteer' indicates the Cohesity's Remote Adapter.
	// 'kPhysical' indicates the physical Protection Source environment.
	// 'kPure' indicates the Pure Storage Protection Source environment.
	// 'kNimble' indicates the Nimble Storage Protection Source environment.
	// 'kAzure' indicates the Microsoft's Azure Protection Source environment.
	// 'kNetapp' indicates the Netapp Protection Source environment.
	// 'kAgent' indicates the Agent Protection Source environment.
	// 'kGenericNas' indicates the Generic Network Attached Storage Protection
	// Source environment.
	// 'kAcropolis' indicates the Acropolis Protection Source environment.
	// 'kPhysicalFiles' indicates the Physical Files Protection Source environment.
	// 'kIbmFlashSystem' indicates the IBM Flash System Protection Source environment.
	// 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment.
	// 'kGPFS' indicates IBM's GPFS Protection Source environment.
	// 'kKVM' indicates the KVM Protection Source environment.
	// 'kAWS' indicates the AWS Protection Source environment.
	// 'kExchange' indicates the Exchange Protection Source environment.
	// 'kHyperVVSS' indicates the HyperV VSS Protection Source
	// environment.
	// 'kOracle' indicates the Oracle Protection Source environment.
	// 'kGCP' indicates the Google Cloud Platform Protection Source environment.
	// 'kFlashBlade' indicates the Flash Blade Protection Source environment.
	// 'kAWSNative' indicates the AWS Native Protection Source environment.
	// 'kO365' indicates the Office 365 Protection Source environment.
	// 'kO365Outlook' indicates Office 365 outlook Protection Source environment.
	// 'kHyperFlex' indicates the Hyper Flex Protection Source environment.
	// 'kGCPNative' indicates the GCP Native Protection Source environment.
	// 'kAzureNative' indicates the Azure Native Protection Source environment.
	// 'kKubernetes' indicates a Kubernetes Protection Source environment.
	// 'kElastifile' indicates Elastifile Protection Source environment.
	// 'kAD' indicates Active Directory Protection Source environment.
	// 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment.
	// 'kCassandra' indicates Cassandra Protection Source environment.
	// 'kMongoDB' indicates MongoDB Protection Source environment.
	// 'kCouchbase' indicates Couchbase Protection Source environment.
	// 'kHdfs' indicates Hdfs Protection Source environment.
	// 'kHive' indicates Hive Protection Source environment.
	// 'kHBase' indicates HBase Protection Source environment.
	// 'kUDA' indicates Universal Data Adapter Protection Source environment.
	// 'kO365Teams' indicates the Office365 Teams Protection Source environment.
	// 'kO365Group' indicates the Office365 Groups Protection Source environment.
	// 'kO365Exchange' indicates the Office365 Mailbox Protection Source environment.
	// 'kO365OneDrive' indicates the Office365 OneDrive Protection Source environment.
	// 'kO365Sharepoint' indicates the Office365 SharePoint Protection Source environment.
	// 'kO365PublicFolders' indicates the Office365 PublicFolders Protection Source environment.
	// Enum: ["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble","kIbmFlashSystem","kAzure","kNetapp","kAgent","kGenericNas","kAcropolis","kPhysicalFiles","kIsilon","kGPFS","kKVM","kAWS","kExchange","kHyperVVSS","kOracle","kGCP","kFlashBlade","kAWSNative","kO365","kO365Outlook","kHyperFlex","kGCPNative","kAzureNative","kKubernetes","kElastifile","kAD","kRDSSnapshotManager","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kUDA","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kO365PublicFolders"]
	Environment *string `json:"environment,omitempty"`

	// exchange protection source
	ExchangeProtectionSource *ProtectionSourceExchangeProtectionSource `json:"exchangeProtectionSource,omitempty"`

	// flash blade protection source
	FlashBladeProtectionSource *ProtectionSourceFlashBladeProtectionSource `json:"flashBladeProtectionSource,omitempty"`

	// gcp protection source
	GcpProtectionSource *ProtectionSourceGcpProtectionSource `json:"gcpProtectionSource,omitempty"`

	// gpfs protection source
	GpfsProtectionSource *ProtectionSourceGpfsProtectionSource `json:"gpfsProtectionSource,omitempty"`

	// hbase protection source
	HbaseProtectionSource *ProtectionSourceHbaseProtectionSource `json:"hbaseProtectionSource,omitempty"`

	// hdfs protection source
	HdfsProtectionSource *ProtectionSourceHdfsProtectionSource `json:"hdfsProtectionSource,omitempty"`

	// hive protection source
	HiveProtectionSource *ProtectionSourceHiveProtectionSource `json:"hiveProtectionSource,omitempty"`

	// hyper flex protection source
	HyperFlexProtectionSource *ProtectionSourceHyperFlexProtectionSource `json:"hyperFlexProtectionSource,omitempty"`

	// hyperv protection source
	HypervProtectionSource *ProtectionSourceHypervProtectionSource `json:"hypervProtectionSource,omitempty"`

	// ibm flash system protection source
	IbmFlashSystemProtectionSource *ProtectionSourceIbmFlashSystemProtectionSource `json:"ibmFlashSystemProtectionSource,omitempty"`

	// Specifies an id of the Protection Source.
	ID *int64 `json:"id,omitempty"`

	// isilon protection source
	IsilonProtectionSource *ProtectionSourceIsilonProtectionSource `json:"isilonProtectionSource,omitempty"`

	// kubernetes protection source
	KubernetesProtectionSource *ProtectionSourceKubernetesProtectionSource `json:"kubernetesProtectionSource,omitempty"`

	// kvm protection source
	KvmProtectionSource *ProtectionSourceKvmProtectionSource `json:"kvmProtectionSource,omitempty"`

	// mongodb protection source
	MongodbProtectionSource *ProtectionSourceMongodbProtectionSource `json:"mongodbProtectionSource,omitempty"`

	// Specifies a name of the Protection Source.
	Name *string `json:"name,omitempty"`

	// nas protection source
	NasProtectionSource *ProtectionSourceNasProtectionSource `json:"nasProtectionSource,omitempty"`

	// netapp protection source
	NetappProtectionSource *ProtectionSourceNetappProtectionSource `json:"netappProtectionSource,omitempty"`

	// nimble protection source
	NimbleProtectionSource *ProtectionSourceNimbleProtectionSource `json:"nimbleProtectionSource,omitempty"`

	// office365 protection source
	Office365ProtectionSource *ProtectionSourceOffice365ProtectionSource `json:"office365ProtectionSource,omitempty"`

	// oracle protection source
	OracleProtectionSource *ProtectionSourceOracleProtectionSource `json:"oracleProtectionSource,omitempty"`

	// Specifies an id of the parent of the Protection Source.
	ParentID *int64 `json:"parentId,omitempty"`

	// physical protection source
	PhysicalProtectionSource *ProtectionSourcePhysicalProtectionSource `json:"physicalProtectionSource,omitempty"`

	// pure protection source
	PureProtectionSource *ProtectionSourcePureProtectionSource `json:"pureProtectionSource,omitempty"`

	// sfdc protection source
	SfdcProtectionSource *ProtectionSourceSfdcProtectionSource `json:"sfdcProtectionSource,omitempty"`

	// sql protection source
	SQLProtectionSource *ProtectionSourceSQLProtectionSource `json:"sqlProtectionSource,omitempty"`

	// uda protection source
	UdaProtectionSource *ProtectionSourceUdaProtectionSource `json:"udaProtectionSource,omitempty"`

	// view protection source
	ViewProtectionSource *ProtectionSourceViewProtectionSource `json:"viewProtectionSource,omitempty"`

	// vm ware protection source
	VMWareProtectionSource *ProtectionSourceVMWareProtectionSource `json:"vmWareProtectionSource,omitempty"`
}

// Validate validates this protection source
func (m *ProtectionSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAcropolisProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAwsProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouchbaseProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateElastifileProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlashBladeProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGpfsProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHyperFlexProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHypervProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmFlashSystemProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsilonProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKvmProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongodbProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNasProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetappProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNimbleProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOffice365ProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOracleProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePureProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSQLProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUdaProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMWareProtectionSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSource) validateAcropolisProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AcropolisProtectionSource) { // not required
		return nil
	}

	if m.AcropolisProtectionSource != nil {
		if err := m.AcropolisProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateAdProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AdProtectionSource) { // not required
		return nil
	}

	if m.AdProtectionSource != nil {
		if err := m.AdProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateAwsProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AwsProtectionSource) { // not required
		return nil
	}

	if m.AwsProtectionSource != nil {
		if err := m.AwsProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateAzureProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.AzureProtectionSource) { // not required
		return nil
	}

	if m.AzureProtectionSource != nil {
		if err := m.AzureProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateCassandraProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.CassandraProtectionSource) { // not required
		return nil
	}

	if m.CassandraProtectionSource != nil {
		if err := m.CassandraProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateCouchbaseProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.CouchbaseProtectionSource) { // not required
		return nil
	}

	if m.CouchbaseProtectionSource != nil {
		if err := m.CouchbaseProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateElastifileProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ElastifileProtectionSource) { // not required
		return nil
	}

	if m.ElastifileProtectionSource != nil {
		if err := m.ElastifileProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileProtectionSource")
			}
			return err
		}
	}

	return nil
}

var protectionSourceTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kSQL","kView","kPuppeteer","kPhysical","kPure","kNimble","kIbmFlashSystem","kAzure","kNetapp","kAgent","kGenericNas","kAcropolis","kPhysicalFiles","kIsilon","kGPFS","kKVM","kAWS","kExchange","kHyperVVSS","kOracle","kGCP","kFlashBlade","kAWSNative","kO365","kO365Outlook","kHyperFlex","kGCPNative","kAzureNative","kKubernetes","kElastifile","kAD","kRDSSnapshotManager","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kUDA","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kO365PublicFolders"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protectionSourceTypeEnvironmentPropEnum = append(protectionSourceTypeEnvironmentPropEnum, v)
	}
}

const (

	// ProtectionSourceEnvironmentKVMware captures enum value "kVMware"
	ProtectionSourceEnvironmentKVMware string = "kVMware"

	// ProtectionSourceEnvironmentKHyperV captures enum value "kHyperV"
	ProtectionSourceEnvironmentKHyperV string = "kHyperV"

	// ProtectionSourceEnvironmentKSQL captures enum value "kSQL"
	ProtectionSourceEnvironmentKSQL string = "kSQL"

	// ProtectionSourceEnvironmentKView captures enum value "kView"
	ProtectionSourceEnvironmentKView string = "kView"

	// ProtectionSourceEnvironmentKPuppeteer captures enum value "kPuppeteer"
	ProtectionSourceEnvironmentKPuppeteer string = "kPuppeteer"

	// ProtectionSourceEnvironmentKPhysical captures enum value "kPhysical"
	ProtectionSourceEnvironmentKPhysical string = "kPhysical"

	// ProtectionSourceEnvironmentKPure captures enum value "kPure"
	ProtectionSourceEnvironmentKPure string = "kPure"

	// ProtectionSourceEnvironmentKNimble captures enum value "kNimble"
	ProtectionSourceEnvironmentKNimble string = "kNimble"

	// ProtectionSourceEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	ProtectionSourceEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// ProtectionSourceEnvironmentKAzure captures enum value "kAzure"
	ProtectionSourceEnvironmentKAzure string = "kAzure"

	// ProtectionSourceEnvironmentKNetapp captures enum value "kNetapp"
	ProtectionSourceEnvironmentKNetapp string = "kNetapp"

	// ProtectionSourceEnvironmentKAgent captures enum value "kAgent"
	ProtectionSourceEnvironmentKAgent string = "kAgent"

	// ProtectionSourceEnvironmentKGenericNas captures enum value "kGenericNas"
	ProtectionSourceEnvironmentKGenericNas string = "kGenericNas"

	// ProtectionSourceEnvironmentKAcropolis captures enum value "kAcropolis"
	ProtectionSourceEnvironmentKAcropolis string = "kAcropolis"

	// ProtectionSourceEnvironmentKPhysicalFiles captures enum value "kPhysicalFiles"
	ProtectionSourceEnvironmentKPhysicalFiles string = "kPhysicalFiles"

	// ProtectionSourceEnvironmentKIsilon captures enum value "kIsilon"
	ProtectionSourceEnvironmentKIsilon string = "kIsilon"

	// ProtectionSourceEnvironmentKGPFS captures enum value "kGPFS"
	ProtectionSourceEnvironmentKGPFS string = "kGPFS"

	// ProtectionSourceEnvironmentKKVM captures enum value "kKVM"
	ProtectionSourceEnvironmentKKVM string = "kKVM"

	// ProtectionSourceEnvironmentKAWS captures enum value "kAWS"
	ProtectionSourceEnvironmentKAWS string = "kAWS"

	// ProtectionSourceEnvironmentKExchange captures enum value "kExchange"
	ProtectionSourceEnvironmentKExchange string = "kExchange"

	// ProtectionSourceEnvironmentKHyperVVSS captures enum value "kHyperVVSS"
	ProtectionSourceEnvironmentKHyperVVSS string = "kHyperVVSS"

	// ProtectionSourceEnvironmentKOracle captures enum value "kOracle"
	ProtectionSourceEnvironmentKOracle string = "kOracle"

	// ProtectionSourceEnvironmentKGCP captures enum value "kGCP"
	ProtectionSourceEnvironmentKGCP string = "kGCP"

	// ProtectionSourceEnvironmentKFlashBlade captures enum value "kFlashBlade"
	ProtectionSourceEnvironmentKFlashBlade string = "kFlashBlade"

	// ProtectionSourceEnvironmentKAWSNative captures enum value "kAWSNative"
	ProtectionSourceEnvironmentKAWSNative string = "kAWSNative"

	// ProtectionSourceEnvironmentKO365 captures enum value "kO365"
	ProtectionSourceEnvironmentKO365 string = "kO365"

	// ProtectionSourceEnvironmentKO365Outlook captures enum value "kO365Outlook"
	ProtectionSourceEnvironmentKO365Outlook string = "kO365Outlook"

	// ProtectionSourceEnvironmentKHyperFlex captures enum value "kHyperFlex"
	ProtectionSourceEnvironmentKHyperFlex string = "kHyperFlex"

	// ProtectionSourceEnvironmentKGCPNative captures enum value "kGCPNative"
	ProtectionSourceEnvironmentKGCPNative string = "kGCPNative"

	// ProtectionSourceEnvironmentKAzureNative captures enum value "kAzureNative"
	ProtectionSourceEnvironmentKAzureNative string = "kAzureNative"

	// ProtectionSourceEnvironmentKKubernetes captures enum value "kKubernetes"
	ProtectionSourceEnvironmentKKubernetes string = "kKubernetes"

	// ProtectionSourceEnvironmentKElastifile captures enum value "kElastifile"
	ProtectionSourceEnvironmentKElastifile string = "kElastifile"

	// ProtectionSourceEnvironmentKAD captures enum value "kAD"
	ProtectionSourceEnvironmentKAD string = "kAD"

	// ProtectionSourceEnvironmentKRDSSnapshotManager captures enum value "kRDSSnapshotManager"
	ProtectionSourceEnvironmentKRDSSnapshotManager string = "kRDSSnapshotManager"

	// ProtectionSourceEnvironmentKCassandra captures enum value "kCassandra"
	ProtectionSourceEnvironmentKCassandra string = "kCassandra"

	// ProtectionSourceEnvironmentKMongoDB captures enum value "kMongoDB"
	ProtectionSourceEnvironmentKMongoDB string = "kMongoDB"

	// ProtectionSourceEnvironmentKCouchbase captures enum value "kCouchbase"
	ProtectionSourceEnvironmentKCouchbase string = "kCouchbase"

	// ProtectionSourceEnvironmentKHdfs captures enum value "kHdfs"
	ProtectionSourceEnvironmentKHdfs string = "kHdfs"

	// ProtectionSourceEnvironmentKHive captures enum value "kHive"
	ProtectionSourceEnvironmentKHive string = "kHive"

	// ProtectionSourceEnvironmentKHBase captures enum value "kHBase"
	ProtectionSourceEnvironmentKHBase string = "kHBase"

	// ProtectionSourceEnvironmentKUDA captures enum value "kUDA"
	ProtectionSourceEnvironmentKUDA string = "kUDA"

	// ProtectionSourceEnvironmentKO365Teams captures enum value "kO365Teams"
	ProtectionSourceEnvironmentKO365Teams string = "kO365Teams"

	// ProtectionSourceEnvironmentKO365Group captures enum value "kO365Group"
	ProtectionSourceEnvironmentKO365Group string = "kO365Group"

	// ProtectionSourceEnvironmentKO365Exchange captures enum value "kO365Exchange"
	ProtectionSourceEnvironmentKO365Exchange string = "kO365Exchange"

	// ProtectionSourceEnvironmentKO365OneDrive captures enum value "kO365OneDrive"
	ProtectionSourceEnvironmentKO365OneDrive string = "kO365OneDrive"

	// ProtectionSourceEnvironmentKO365Sharepoint captures enum value "kO365Sharepoint"
	ProtectionSourceEnvironmentKO365Sharepoint string = "kO365Sharepoint"

	// ProtectionSourceEnvironmentKO365PublicFolders captures enum value "kO365PublicFolders"
	ProtectionSourceEnvironmentKO365PublicFolders string = "kO365PublicFolders"
)

// prop value enum
func (m *ProtectionSource) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, protectionSourceTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProtectionSource) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

func (m *ProtectionSource) validateExchangeProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ExchangeProtectionSource) { // not required
		return nil
	}

	if m.ExchangeProtectionSource != nil {
		if err := m.ExchangeProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateFlashBladeProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.FlashBladeProtectionSource) { // not required
		return nil
	}

	if m.FlashBladeProtectionSource != nil {
		if err := m.FlashBladeProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashBladeProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashBladeProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateGcpProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.GcpProtectionSource) { // not required
		return nil
	}

	if m.GcpProtectionSource != nil {
		if err := m.GcpProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateGpfsProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.GpfsProtectionSource) { // not required
		return nil
	}

	if m.GpfsProtectionSource != nil {
		if err := m.GpfsProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateHbaseProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.HbaseProtectionSource) { // not required
		return nil
	}

	if m.HbaseProtectionSource != nil {
		if err := m.HbaseProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateHdfsProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.HdfsProtectionSource) { // not required
		return nil
	}

	if m.HdfsProtectionSource != nil {
		if err := m.HdfsProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateHiveProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.HiveProtectionSource) { // not required
		return nil
	}

	if m.HiveProtectionSource != nil {
		if err := m.HiveProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateHyperFlexProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.HyperFlexProtectionSource) { // not required
		return nil
	}

	if m.HyperFlexProtectionSource != nil {
		if err := m.HyperFlexProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hyperFlexProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hyperFlexProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateHypervProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.HypervProtectionSource) { // not required
		return nil
	}

	if m.HypervProtectionSource != nil {
		if err := m.HypervProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateIbmFlashSystemProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.IbmFlashSystemProtectionSource) { // not required
		return nil
	}

	if m.IbmFlashSystemProtectionSource != nil {
		if err := m.IbmFlashSystemProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibmFlashSystemProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibmFlashSystemProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateIsilonProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonProtectionSource) { // not required
		return nil
	}

	if m.IsilonProtectionSource != nil {
		if err := m.IsilonProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateKubernetesProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.KubernetesProtectionSource) { // not required
		return nil
	}

	if m.KubernetesProtectionSource != nil {
		if err := m.KubernetesProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateKvmProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.KvmProtectionSource) { // not required
		return nil
	}

	if m.KvmProtectionSource != nil {
		if err := m.KvmProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvmProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kvmProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateMongodbProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.MongodbProtectionSource) { // not required
		return nil
	}

	if m.MongodbProtectionSource != nil {
		if err := m.MongodbProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateNasProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.NasProtectionSource) { // not required
		return nil
	}

	if m.NasProtectionSource != nil {
		if err := m.NasProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateNetappProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.NetappProtectionSource) { // not required
		return nil
	}

	if m.NetappProtectionSource != nil {
		if err := m.NetappProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateNimbleProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.NimbleProtectionSource) { // not required
		return nil
	}

	if m.NimbleProtectionSource != nil {
		if err := m.NimbleProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nimbleProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nimbleProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateOffice365ProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.Office365ProtectionSource) { // not required
		return nil
	}

	if m.Office365ProtectionSource != nil {
		if err := m.Office365ProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365ProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365ProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateOracleProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleProtectionSource) { // not required
		return nil
	}

	if m.OracleProtectionSource != nil {
		if err := m.OracleProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validatePhysicalProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalProtectionSource) { // not required
		return nil
	}

	if m.PhysicalProtectionSource != nil {
		if err := m.PhysicalProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validatePureProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.PureProtectionSource) { // not required
		return nil
	}

	if m.PureProtectionSource != nil {
		if err := m.PureProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pureProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pureProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateSfdcProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.SfdcProtectionSource) { // not required
		return nil
	}

	if m.SfdcProtectionSource != nil {
		if err := m.SfdcProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateSQLProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.SQLProtectionSource) { // not required
		return nil
	}

	if m.SQLProtectionSource != nil {
		if err := m.SQLProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateUdaProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.UdaProtectionSource) { // not required
		return nil
	}

	if m.UdaProtectionSource != nil {
		if err := m.UdaProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateViewProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ViewProtectionSource) { // not required
		return nil
	}

	if m.ViewProtectionSource != nil {
		if err := m.ViewProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) validateVMWareProtectionSource(formats strfmt.Registry) error {
	if swag.IsZero(m.VMWareProtectionSource) { // not required
		return nil
	}

	if m.VMWareProtectionSource != nil {
		if err := m.VMWareProtectionSource.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmWareProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmWareProtectionSource")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this protection source based on the context it is used
func (m *ProtectionSource) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAcropolisProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAdProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAwsProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAzureProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCouchbaseProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateElastifileProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFlashBladeProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGcpProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGpfsProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHyperFlexProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHypervProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIbmFlashSystemProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIsilonProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKubernetesProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateKvmProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongodbProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNasProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNetappProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNimbleProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOffice365ProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOracleProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePureProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSQLProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUdaProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateViewProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateVMWareProtectionSource(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProtectionSource) contextValidateAcropolisProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.AcropolisProtectionSource != nil {

		if swag.IsZero(m.AcropolisProtectionSource) { // not required
			return nil
		}

		if err := m.AcropolisProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("acropolisProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("acropolisProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateAdProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.AdProtectionSource != nil {

		if swag.IsZero(m.AdProtectionSource) { // not required
			return nil
		}

		if err := m.AdProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("adProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateAwsProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.AwsProtectionSource != nil {

		if swag.IsZero(m.AwsProtectionSource) { // not required
			return nil
		}

		if err := m.AwsProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("awsProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateAzureProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.AzureProtectionSource != nil {

		if swag.IsZero(m.AzureProtectionSource) { // not required
			return nil
		}

		if err := m.AzureProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("azureProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateCassandraProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.CassandraProtectionSource != nil {

		if swag.IsZero(m.CassandraProtectionSource) { // not required
			return nil
		}

		if err := m.CassandraProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cassandraProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cassandraProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateCouchbaseProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.CouchbaseProtectionSource != nil {

		if swag.IsZero(m.CouchbaseProtectionSource) { // not required
			return nil
		}

		if err := m.CouchbaseProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("couchbaseProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("couchbaseProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateElastifileProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ElastifileProtectionSource != nil {

		if swag.IsZero(m.ElastifileProtectionSource) { // not required
			return nil
		}

		if err := m.ElastifileProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("elastifileProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("elastifileProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateExchangeProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ExchangeProtectionSource != nil {

		if swag.IsZero(m.ExchangeProtectionSource) { // not required
			return nil
		}

		if err := m.ExchangeProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("exchangeProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("exchangeProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateFlashBladeProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.FlashBladeProtectionSource != nil {

		if swag.IsZero(m.FlashBladeProtectionSource) { // not required
			return nil
		}

		if err := m.FlashBladeProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flashBladeProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("flashBladeProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateGcpProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.GcpProtectionSource != nil {

		if swag.IsZero(m.GcpProtectionSource) { // not required
			return nil
		}

		if err := m.GcpProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcpProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gcpProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateGpfsProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.GpfsProtectionSource != nil {

		if swag.IsZero(m.GpfsProtectionSource) { // not required
			return nil
		}

		if err := m.GpfsProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gpfsProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gpfsProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateHbaseProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.HbaseProtectionSource != nil {

		if swag.IsZero(m.HbaseProtectionSource) { // not required
			return nil
		}

		if err := m.HbaseProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hbaseProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hbaseProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateHdfsProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.HdfsProtectionSource != nil {

		if swag.IsZero(m.HdfsProtectionSource) { // not required
			return nil
		}

		if err := m.HdfsProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hdfsProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hdfsProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateHiveProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.HiveProtectionSource != nil {

		if swag.IsZero(m.HiveProtectionSource) { // not required
			return nil
		}

		if err := m.HiveProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hiveProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hiveProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateHyperFlexProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.HyperFlexProtectionSource != nil {

		if swag.IsZero(m.HyperFlexProtectionSource) { // not required
			return nil
		}

		if err := m.HyperFlexProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hyperFlexProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hyperFlexProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateHypervProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.HypervProtectionSource != nil {

		if swag.IsZero(m.HypervProtectionSource) { // not required
			return nil
		}

		if err := m.HypervProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hypervProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hypervProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateIbmFlashSystemProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.IbmFlashSystemProtectionSource != nil {

		if swag.IsZero(m.IbmFlashSystemProtectionSource) { // not required
			return nil
		}

		if err := m.IbmFlashSystemProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibmFlashSystemProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibmFlashSystemProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateIsilonProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.IsilonProtectionSource != nil {

		if swag.IsZero(m.IsilonProtectionSource) { // not required
			return nil
		}

		if err := m.IsilonProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("isilonProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("isilonProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateKubernetesProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.KubernetesProtectionSource != nil {

		if swag.IsZero(m.KubernetesProtectionSource) { // not required
			return nil
		}

		if err := m.KubernetesProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kubernetesProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kubernetesProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateKvmProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.KvmProtectionSource != nil {

		if swag.IsZero(m.KvmProtectionSource) { // not required
			return nil
		}

		if err := m.KvmProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kvmProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("kvmProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateMongodbProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.MongodbProtectionSource != nil {

		if swag.IsZero(m.MongodbProtectionSource) { // not required
			return nil
		}

		if err := m.MongodbProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mongodbProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("mongodbProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateNasProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.NasProtectionSource != nil {

		if swag.IsZero(m.NasProtectionSource) { // not required
			return nil
		}

		if err := m.NasProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nasProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nasProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateNetappProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.NetappProtectionSource != nil {

		if swag.IsZero(m.NetappProtectionSource) { // not required
			return nil
		}

		if err := m.NetappProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("netappProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("netappProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateNimbleProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.NimbleProtectionSource != nil {

		if swag.IsZero(m.NimbleProtectionSource) { // not required
			return nil
		}

		if err := m.NimbleProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nimbleProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("nimbleProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateOffice365ProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.Office365ProtectionSource != nil {

		if swag.IsZero(m.Office365ProtectionSource) { // not required
			return nil
		}

		if err := m.Office365ProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("office365ProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("office365ProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateOracleProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.OracleProtectionSource != nil {

		if swag.IsZero(m.OracleProtectionSource) { // not required
			return nil
		}

		if err := m.OracleProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("oracleProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("oracleProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidatePhysicalProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalProtectionSource != nil {

		if swag.IsZero(m.PhysicalProtectionSource) { // not required
			return nil
		}

		if err := m.PhysicalProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidatePureProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.PureProtectionSource != nil {

		if swag.IsZero(m.PureProtectionSource) { // not required
			return nil
		}

		if err := m.PureProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("pureProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("pureProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateSfdcProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcProtectionSource != nil {

		if swag.IsZero(m.SfdcProtectionSource) { // not required
			return nil
		}

		if err := m.SfdcProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateSQLProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.SQLProtectionSource != nil {

		if swag.IsZero(m.SQLProtectionSource) { // not required
			return nil
		}

		if err := m.SQLProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sqlProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sqlProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateUdaProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.UdaProtectionSource != nil {

		if swag.IsZero(m.UdaProtectionSource) { // not required
			return nil
		}

		if err := m.UdaProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("udaProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("udaProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateViewProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.ViewProtectionSource != nil {

		if swag.IsZero(m.ViewProtectionSource) { // not required
			return nil
		}

		if err := m.ViewProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("viewProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("viewProtectionSource")
			}
			return err
		}
	}

	return nil
}

func (m *ProtectionSource) contextValidateVMWareProtectionSource(ctx context.Context, formats strfmt.Registry) error {

	if m.VMWareProtectionSource != nil {

		if swag.IsZero(m.VMWareProtectionSource) { // not required
			return nil
		}

		if err := m.VMWareProtectionSource.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vmWareProtectionSource")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vmWareProtectionSource")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProtectionSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtectionSource) UnmarshalBinary(b []byte) error {
	var res ProtectionSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
