// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IndexAndSnapshots Restore Protection Job Index and Snapshots.
//
// Specifies settings required to restore the index and Snapshots of
// a Protection Job.
//
// swagger:model IndexAndSnapshots
type IndexAndSnapshots struct {

	// archive task Uid
	ArchiveTaskUID *IndexAndSnapshotsArchiveTaskUID `json:"archiveTaskUid,omitempty"`

	// Specifies the end time as a Unix epoch Timestamp (in microseconds).
	// If set, only index and Snapshots for Protection Job Runs that
	// started before the specified end time are restored.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// remote protection job Uid
	RemoteProtectionJobUID *IndexAndSnapshotsRemoteProtectionJobUID `json:"remoteProtectionJobUid,omitempty"`

	// Specifies the start time as a Unix epoch Timestamp (in microseconds).
	// If set, only the index and Snapshots for Protection Job Runs that
	// started after the specified start time are restored.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the id of the local Storage Domain (View Box) where the index
	// and the Snapshot will be restored to.
	ViewBoxID *int64 `json:"viewBoxId,omitempty"`
}

// Validate validates this index and snapshots
func (m *IndexAndSnapshots) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchiveTaskUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRemoteProtectionJobUID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndexAndSnapshots) validateArchiveTaskUID(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchiveTaskUID) { // not required
		return nil
	}

	if m.ArchiveTaskUID != nil {
		if err := m.ArchiveTaskUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveTaskUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archiveTaskUid")
			}
			return err
		}
	}

	return nil
}

func (m *IndexAndSnapshots) validateRemoteProtectionJobUID(formats strfmt.Registry) error {
	if swag.IsZero(m.RemoteProtectionJobUID) { // not required
		return nil
	}

	if m.RemoteProtectionJobUID != nil {
		if err := m.RemoteProtectionJobUID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteProtectionJobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteProtectionJobUid")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this index and snapshots based on the context it is used
func (m *IndexAndSnapshots) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateArchiveTaskUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRemoteProtectionJobUID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IndexAndSnapshots) contextValidateArchiveTaskUID(ctx context.Context, formats strfmt.Registry) error {

	if m.ArchiveTaskUID != nil {

		if swag.IsZero(m.ArchiveTaskUID) { // not required
			return nil
		}

		if err := m.ArchiveTaskUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("archiveTaskUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("archiveTaskUid")
			}
			return err
		}
	}

	return nil
}

func (m *IndexAndSnapshots) contextValidateRemoteProtectionJobUID(ctx context.Context, formats strfmt.Registry) error {

	if m.RemoteProtectionJobUID != nil {

		if swag.IsZero(m.RemoteProtectionJobUID) { // not required
			return nil
		}

		if err := m.RemoteProtectionJobUID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("remoteProtectionJobUid")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("remoteProtectionJobUid")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IndexAndSnapshots) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IndexAndSnapshots) UnmarshalBinary(b []byte) error {
	var res IndexAndSnapshots
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
