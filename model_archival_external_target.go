/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ArchivalExternalTarget Specifies settings about the Archival External Target (such as Tape or AWS).
type ArchivalExternalTarget struct {
	// Specifies the id of Archival Vault assigned by the Cohesity Cluster.
	VaultId NullableInt64 `json:"vaultId,omitempty"`
	// Name of the Archival Vault.
	VaultName NullableString `json:"vaultName,omitempty"`
	// Specifies the type of the Archival External Target such as 'kCloud', 'kTape' or 'kNas'. 'kCloud' indicates the archival location as Cloud. 'kTape' indicates the archival location as Tape. 'kNas' indicates the archival location as Network Attached Storage (Nas).
	VaultType NullableString `json:"vaultType,omitempty"`
}

// NewArchivalExternalTarget instantiates a new ArchivalExternalTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalExternalTarget() *ArchivalExternalTarget {
	this := ArchivalExternalTarget{}
	return &this
}

// NewArchivalExternalTargetWithDefaults instantiates a new ArchivalExternalTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalExternalTargetWithDefaults() *ArchivalExternalTarget {
	this := ArchivalExternalTarget{}
	return &this
}

// GetVaultId returns the VaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalExternalTarget) GetVaultId() int64 {
	if o == nil || o.VaultId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VaultId.Get()
}

// GetVaultIdOk returns a tuple with the VaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalExternalTarget) GetVaultIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VaultId.Get(), o.VaultId.IsSet()
}

// HasVaultId returns a boolean if a field has been set.
func (o *ArchivalExternalTarget) HasVaultId() bool {
	if o != nil && o.VaultId.IsSet() {
		return true
	}

	return false
}

// SetVaultId gets a reference to the given NullableInt64 and assigns it to the VaultId field.
func (o *ArchivalExternalTarget) SetVaultId(v int64) {
	o.VaultId.Set(&v)
}
// SetVaultIdNil sets the value for VaultId to be an explicit nil
func (o *ArchivalExternalTarget) SetVaultIdNil() {
	o.VaultId.Set(nil)
}

// UnsetVaultId ensures that no value is present for VaultId, not even an explicit nil
func (o *ArchivalExternalTarget) UnsetVaultId() {
	o.VaultId.Unset()
}

// GetVaultName returns the VaultName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalExternalTarget) GetVaultName() string {
	if o == nil || o.VaultName.Get() == nil {
		var ret string
		return ret
	}
	return *o.VaultName.Get()
}

// GetVaultNameOk returns a tuple with the VaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalExternalTarget) GetVaultNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VaultName.Get(), o.VaultName.IsSet()
}

// HasVaultName returns a boolean if a field has been set.
func (o *ArchivalExternalTarget) HasVaultName() bool {
	if o != nil && o.VaultName.IsSet() {
		return true
	}

	return false
}

// SetVaultName gets a reference to the given NullableString and assigns it to the VaultName field.
func (o *ArchivalExternalTarget) SetVaultName(v string) {
	o.VaultName.Set(&v)
}
// SetVaultNameNil sets the value for VaultName to be an explicit nil
func (o *ArchivalExternalTarget) SetVaultNameNil() {
	o.VaultName.Set(nil)
}

// UnsetVaultName ensures that no value is present for VaultName, not even an explicit nil
func (o *ArchivalExternalTarget) UnsetVaultName() {
	o.VaultName.Unset()
}

// GetVaultType returns the VaultType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalExternalTarget) GetVaultType() string {
	if o == nil || o.VaultType.Get() == nil {
		var ret string
		return ret
	}
	return *o.VaultType.Get()
}

// GetVaultTypeOk returns a tuple with the VaultType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalExternalTarget) GetVaultTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VaultType.Get(), o.VaultType.IsSet()
}

// HasVaultType returns a boolean if a field has been set.
func (o *ArchivalExternalTarget) HasVaultType() bool {
	if o != nil && o.VaultType.IsSet() {
		return true
	}

	return false
}

// SetVaultType gets a reference to the given NullableString and assigns it to the VaultType field.
func (o *ArchivalExternalTarget) SetVaultType(v string) {
	o.VaultType.Set(&v)
}
// SetVaultTypeNil sets the value for VaultType to be an explicit nil
func (o *ArchivalExternalTarget) SetVaultTypeNil() {
	o.VaultType.Set(nil)
}

// UnsetVaultType ensures that no value is present for VaultType, not even an explicit nil
func (o *ArchivalExternalTarget) UnsetVaultType() {
	o.VaultType.Unset()
}

func (o ArchivalExternalTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VaultId.IsSet() {
		toSerialize["vaultId"] = o.VaultId.Get()
	}
	if o.VaultName.IsSet() {
		toSerialize["vaultName"] = o.VaultName.Get()
	}
	if o.VaultType.IsSet() {
		toSerialize["vaultType"] = o.VaultType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableArchivalExternalTarget struct {
	value *ArchivalExternalTarget
	isSet bool
}

func (v NullableArchivalExternalTarget) Get() *ArchivalExternalTarget {
	return v.value
}

func (v *NullableArchivalExternalTarget) Set(val *ArchivalExternalTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalExternalTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalExternalTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalExternalTarget(val *ArchivalExternalTarget) *NullableArchivalExternalTarget {
	return &NullableArchivalExternalTarget{value: val, isSet: true}
}

func (v NullableArchivalExternalTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalExternalTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


