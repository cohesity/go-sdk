/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ProtectionRunsStats Specifies the Protection Runs statistics response.
type ProtectionRunsStats struct {
	// Specifies the count of archival Runs.
	NumArchivalRuns NullableInt64 `json:"numArchivalRuns,omitempty"`
	// Specifies the count of backup Runs.
	NumBackupRuns NullableInt64 `json:"numBackupRuns,omitempty"`
	// Specifies the count of replication Runs.
	NumReplicationRuns NullableInt64 `json:"numReplicationRuns,omitempty"`
}

// NewProtectionRunsStats instantiates a new ProtectionRunsStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionRunsStats() *ProtectionRunsStats {
	this := ProtectionRunsStats{}
	return &this
}

// NewProtectionRunsStatsWithDefaults instantiates a new ProtectionRunsStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionRunsStatsWithDefaults() *ProtectionRunsStats {
	this := ProtectionRunsStats{}
	return &this
}

// GetNumArchivalRuns returns the NumArchivalRuns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionRunsStats) GetNumArchivalRuns() int64 {
	if o == nil || o.NumArchivalRuns.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumArchivalRuns.Get()
}

// GetNumArchivalRunsOk returns a tuple with the NumArchivalRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionRunsStats) GetNumArchivalRunsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumArchivalRuns.Get(), o.NumArchivalRuns.IsSet()
}

// HasNumArchivalRuns returns a boolean if a field has been set.
func (o *ProtectionRunsStats) HasNumArchivalRuns() bool {
	if o != nil && o.NumArchivalRuns.IsSet() {
		return true
	}

	return false
}

// SetNumArchivalRuns gets a reference to the given NullableInt64 and assigns it to the NumArchivalRuns field.
func (o *ProtectionRunsStats) SetNumArchivalRuns(v int64) {
	o.NumArchivalRuns.Set(&v)
}
// SetNumArchivalRunsNil sets the value for NumArchivalRuns to be an explicit nil
func (o *ProtectionRunsStats) SetNumArchivalRunsNil() {
	o.NumArchivalRuns.Set(nil)
}

// UnsetNumArchivalRuns ensures that no value is present for NumArchivalRuns, not even an explicit nil
func (o *ProtectionRunsStats) UnsetNumArchivalRuns() {
	o.NumArchivalRuns.Unset()
}

// GetNumBackupRuns returns the NumBackupRuns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionRunsStats) GetNumBackupRuns() int64 {
	if o == nil || o.NumBackupRuns.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumBackupRuns.Get()
}

// GetNumBackupRunsOk returns a tuple with the NumBackupRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionRunsStats) GetNumBackupRunsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumBackupRuns.Get(), o.NumBackupRuns.IsSet()
}

// HasNumBackupRuns returns a boolean if a field has been set.
func (o *ProtectionRunsStats) HasNumBackupRuns() bool {
	if o != nil && o.NumBackupRuns.IsSet() {
		return true
	}

	return false
}

// SetNumBackupRuns gets a reference to the given NullableInt64 and assigns it to the NumBackupRuns field.
func (o *ProtectionRunsStats) SetNumBackupRuns(v int64) {
	o.NumBackupRuns.Set(&v)
}
// SetNumBackupRunsNil sets the value for NumBackupRuns to be an explicit nil
func (o *ProtectionRunsStats) SetNumBackupRunsNil() {
	o.NumBackupRuns.Set(nil)
}

// UnsetNumBackupRuns ensures that no value is present for NumBackupRuns, not even an explicit nil
func (o *ProtectionRunsStats) UnsetNumBackupRuns() {
	o.NumBackupRuns.Unset()
}

// GetNumReplicationRuns returns the NumReplicationRuns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionRunsStats) GetNumReplicationRuns() int64 {
	if o == nil || o.NumReplicationRuns.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumReplicationRuns.Get()
}

// GetNumReplicationRunsOk returns a tuple with the NumReplicationRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionRunsStats) GetNumReplicationRunsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumReplicationRuns.Get(), o.NumReplicationRuns.IsSet()
}

// HasNumReplicationRuns returns a boolean if a field has been set.
func (o *ProtectionRunsStats) HasNumReplicationRuns() bool {
	if o != nil && o.NumReplicationRuns.IsSet() {
		return true
	}

	return false
}

// SetNumReplicationRuns gets a reference to the given NullableInt64 and assigns it to the NumReplicationRuns field.
func (o *ProtectionRunsStats) SetNumReplicationRuns(v int64) {
	o.NumReplicationRuns.Set(&v)
}
// SetNumReplicationRunsNil sets the value for NumReplicationRuns to be an explicit nil
func (o *ProtectionRunsStats) SetNumReplicationRunsNil() {
	o.NumReplicationRuns.Set(nil)
}

// UnsetNumReplicationRuns ensures that no value is present for NumReplicationRuns, not even an explicit nil
func (o *ProtectionRunsStats) UnsetNumReplicationRuns() {
	o.NumReplicationRuns.Unset()
}

func (o ProtectionRunsStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumArchivalRuns.IsSet() {
		toSerialize["numArchivalRuns"] = o.NumArchivalRuns.Get()
	}
	if o.NumBackupRuns.IsSet() {
		toSerialize["numBackupRuns"] = o.NumBackupRuns.Get()
	}
	if o.NumReplicationRuns.IsSet() {
		toSerialize["numReplicationRuns"] = o.NumReplicationRuns.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionRunsStats struct {
	value *ProtectionRunsStats
	isSet bool
}

func (v NullableProtectionRunsStats) Get() *ProtectionRunsStats {
	return v.value
}

func (v *NullableProtectionRunsStats) Set(val *ProtectionRunsStats) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionRunsStats) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionRunsStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionRunsStats(val *ProtectionRunsStats) *NullableProtectionRunsStats {
	return &NullableProtectionRunsStats{value: val, isSet: true}
}

func (v NullableProtectionRunsStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionRunsStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


