/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CommonACLProtoGrantees struct for CommonACLProtoGrantees
type CommonACLProtoGrantees struct {
	// This field indicates if all users are granted ACL permission.
	AllUsers NullableBool `json:"allUsers,omitempty"`
	// This field holds a list of referers who are denied ACL permission.
	DeniedReferrerVec []string `json:"deniedReferrerVec,omitempty"`
	// This field holds a list of referers who are granted ACL permission.
	GrantedReferrerVec []string `json:"grantedReferrerVec,omitempty"`
	// This fields indicates if container GET and HEAD operations are permitted provided that read access is granted (using referer ACL) on objects.
	Rlistings NullableBool `json:"rlistings,omitempty"`
}

// NewCommonACLProtoGrantees instantiates a new CommonACLProtoGrantees object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonACLProtoGrantees() *CommonACLProtoGrantees {
	this := CommonACLProtoGrantees{}
	return &this
}

// NewCommonACLProtoGranteesWithDefaults instantiates a new CommonACLProtoGrantees object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonACLProtoGranteesWithDefaults() *CommonACLProtoGrantees {
	this := CommonACLProtoGrantees{}
	return &this
}

// GetAllUsers returns the AllUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonACLProtoGrantees) GetAllUsers() bool {
	if o == nil || o.AllUsers.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllUsers.Get()
}

// GetAllUsersOk returns a tuple with the AllUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonACLProtoGrantees) GetAllUsersOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllUsers.Get(), o.AllUsers.IsSet()
}

// HasAllUsers returns a boolean if a field has been set.
func (o *CommonACLProtoGrantees) HasAllUsers() bool {
	if o != nil && o.AllUsers.IsSet() {
		return true
	}

	return false
}

// SetAllUsers gets a reference to the given NullableBool and assigns it to the AllUsers field.
func (o *CommonACLProtoGrantees) SetAllUsers(v bool) {
	o.AllUsers.Set(&v)
}
// SetAllUsersNil sets the value for AllUsers to be an explicit nil
func (o *CommonACLProtoGrantees) SetAllUsersNil() {
	o.AllUsers.Set(nil)
}

// UnsetAllUsers ensures that no value is present for AllUsers, not even an explicit nil
func (o *CommonACLProtoGrantees) UnsetAllUsers() {
	o.AllUsers.Unset()
}

// GetDeniedReferrerVec returns the DeniedReferrerVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonACLProtoGrantees) GetDeniedReferrerVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DeniedReferrerVec
}

// GetDeniedReferrerVecOk returns a tuple with the DeniedReferrerVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonACLProtoGrantees) GetDeniedReferrerVecOk() (*[]string, bool) {
	if o == nil || o.DeniedReferrerVec == nil {
		return nil, false
	}
	return &o.DeniedReferrerVec, true
}

// HasDeniedReferrerVec returns a boolean if a field has been set.
func (o *CommonACLProtoGrantees) HasDeniedReferrerVec() bool {
	if o != nil && o.DeniedReferrerVec != nil {
		return true
	}

	return false
}

// SetDeniedReferrerVec gets a reference to the given []string and assigns it to the DeniedReferrerVec field.
func (o *CommonACLProtoGrantees) SetDeniedReferrerVec(v []string) {
	o.DeniedReferrerVec = v
}

// GetGrantedReferrerVec returns the GrantedReferrerVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonACLProtoGrantees) GetGrantedReferrerVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.GrantedReferrerVec
}

// GetGrantedReferrerVecOk returns a tuple with the GrantedReferrerVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonACLProtoGrantees) GetGrantedReferrerVecOk() (*[]string, bool) {
	if o == nil || o.GrantedReferrerVec == nil {
		return nil, false
	}
	return &o.GrantedReferrerVec, true
}

// HasGrantedReferrerVec returns a boolean if a field has been set.
func (o *CommonACLProtoGrantees) HasGrantedReferrerVec() bool {
	if o != nil && o.GrantedReferrerVec != nil {
		return true
	}

	return false
}

// SetGrantedReferrerVec gets a reference to the given []string and assigns it to the GrantedReferrerVec field.
func (o *CommonACLProtoGrantees) SetGrantedReferrerVec(v []string) {
	o.GrantedReferrerVec = v
}

// GetRlistings returns the Rlistings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonACLProtoGrantees) GetRlistings() bool {
	if o == nil || o.Rlistings.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Rlistings.Get()
}

// GetRlistingsOk returns a tuple with the Rlistings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonACLProtoGrantees) GetRlistingsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Rlistings.Get(), o.Rlistings.IsSet()
}

// HasRlistings returns a boolean if a field has been set.
func (o *CommonACLProtoGrantees) HasRlistings() bool {
	if o != nil && o.Rlistings.IsSet() {
		return true
	}

	return false
}

// SetRlistings gets a reference to the given NullableBool and assigns it to the Rlistings field.
func (o *CommonACLProtoGrantees) SetRlistings(v bool) {
	o.Rlistings.Set(&v)
}
// SetRlistingsNil sets the value for Rlistings to be an explicit nil
func (o *CommonACLProtoGrantees) SetRlistingsNil() {
	o.Rlistings.Set(nil)
}

// UnsetRlistings ensures that no value is present for Rlistings, not even an explicit nil
func (o *CommonACLProtoGrantees) UnsetRlistings() {
	o.Rlistings.Unset()
}

func (o CommonACLProtoGrantees) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllUsers.IsSet() {
		toSerialize["allUsers"] = o.AllUsers.Get()
	}
	if o.DeniedReferrerVec != nil {
		toSerialize["deniedReferrerVec"] = o.DeniedReferrerVec
	}
	if o.GrantedReferrerVec != nil {
		toSerialize["grantedReferrerVec"] = o.GrantedReferrerVec
	}
	if o.Rlistings.IsSet() {
		toSerialize["rlistings"] = o.Rlistings.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCommonACLProtoGrantees struct {
	value *CommonACLProtoGrantees
	isSet bool
}

func (v NullableCommonACLProtoGrantees) Get() *CommonACLProtoGrantees {
	return v.value
}

func (v *NullableCommonACLProtoGrantees) Set(val *CommonACLProtoGrantees) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonACLProtoGrantees) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonACLProtoGrantees) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonACLProtoGrantees(val *CommonACLProtoGrantees) *NullableCommonACLProtoGrantees {
	return &NullableCommonACLProtoGrantees{value: val, isSet: true}
}

func (v NullableCommonACLProtoGrantees) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonACLProtoGrantees) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


