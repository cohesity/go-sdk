/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ClusterHardwareInfo Specifies a hardware type for motherboard of the Nodes that make up this Cohesity Cluster such as S2600WB for Ivy Bridge or S2600TP for Haswell.
type ClusterHardwareInfo struct {
	HardwareModels []string `json:"hardwareModels,omitempty"`
	HardwareVendors []string `json:"hardwareVendors,omitempty"`
}

// NewClusterHardwareInfo instantiates a new ClusterHardwareInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterHardwareInfo() *ClusterHardwareInfo {
	this := ClusterHardwareInfo{}
	return &this
}

// NewClusterHardwareInfoWithDefaults instantiates a new ClusterHardwareInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterHardwareInfoWithDefaults() *ClusterHardwareInfo {
	this := ClusterHardwareInfo{}
	return &this
}

// GetHardwareModels returns the HardwareModels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterHardwareInfo) GetHardwareModels() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.HardwareModels
}

// GetHardwareModelsOk returns a tuple with the HardwareModels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterHardwareInfo) GetHardwareModelsOk() (*[]string, bool) {
	if o == nil || o.HardwareModels == nil {
		return nil, false
	}
	return &o.HardwareModels, true
}

// HasHardwareModels returns a boolean if a field has been set.
func (o *ClusterHardwareInfo) HasHardwareModels() bool {
	if o != nil && o.HardwareModels != nil {
		return true
	}

	return false
}

// SetHardwareModels gets a reference to the given []string and assigns it to the HardwareModels field.
func (o *ClusterHardwareInfo) SetHardwareModels(v []string) {
	o.HardwareModels = v
}

// GetHardwareVendors returns the HardwareVendors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterHardwareInfo) GetHardwareVendors() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.HardwareVendors
}

// GetHardwareVendorsOk returns a tuple with the HardwareVendors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterHardwareInfo) GetHardwareVendorsOk() (*[]string, bool) {
	if o == nil || o.HardwareVendors == nil {
		return nil, false
	}
	return &o.HardwareVendors, true
}

// HasHardwareVendors returns a boolean if a field has been set.
func (o *ClusterHardwareInfo) HasHardwareVendors() bool {
	if o != nil && o.HardwareVendors != nil {
		return true
	}

	return false
}

// SetHardwareVendors gets a reference to the given []string and assigns it to the HardwareVendors field.
func (o *ClusterHardwareInfo) SetHardwareVendors(v []string) {
	o.HardwareVendors = v
}

func (o ClusterHardwareInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HardwareModels != nil {
		toSerialize["hardwareModels"] = o.HardwareModels
	}
	if o.HardwareVendors != nil {
		toSerialize["hardwareVendors"] = o.HardwareVendors
	}
	return json.Marshal(toSerialize)
}

type NullableClusterHardwareInfo struct {
	value *ClusterHardwareInfo
	isSet bool
}

func (v NullableClusterHardwareInfo) Get() *ClusterHardwareInfo {
	return v.value
}

func (v *NullableClusterHardwareInfo) Set(val *ClusterHardwareInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterHardwareInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterHardwareInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterHardwareInfo(val *ClusterHardwareInfo) *NullableClusterHardwareInfo {
	return &NullableClusterHardwareInfo{value: val, isSet: true}
}

func (v NullableClusterHardwareInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterHardwareInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


