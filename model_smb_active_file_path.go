/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SmbActiveFilePath Specifies a file path in an SMB view that has active sessions and opens.
type SmbActiveFilePath struct {
	// Specifies the sessions where the file is open.
	ActiveSessions []SmbActiveSession `json:"activeSessions,omitempty"`
	// Specifies the filepath in the view.
	FilePath NullableString `json:"filePath,omitempty"`
	// Specifies the id of the View assigned by the Cohesity Cluster. Either viewName or viewId must be specified.
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// Specifies the name of the View.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewSmbActiveFilePath instantiates a new SmbActiveFilePath object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbActiveFilePath() *SmbActiveFilePath {
	this := SmbActiveFilePath{}
	return &this
}

// NewSmbActiveFilePathWithDefaults instantiates a new SmbActiveFilePath object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbActiveFilePathWithDefaults() *SmbActiveFilePath {
	this := SmbActiveFilePath{}
	return &this
}

// GetActiveSessions returns the ActiveSessions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveFilePath) GetActiveSessions() []SmbActiveSession {
	if o == nil  {
		var ret []SmbActiveSession
		return ret
	}
	return o.ActiveSessions
}

// GetActiveSessionsOk returns a tuple with the ActiveSessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveFilePath) GetActiveSessionsOk() (*[]SmbActiveSession, bool) {
	if o == nil || o.ActiveSessions == nil {
		return nil, false
	}
	return &o.ActiveSessions, true
}

// HasActiveSessions returns a boolean if a field has been set.
func (o *SmbActiveFilePath) HasActiveSessions() bool {
	if o != nil && o.ActiveSessions != nil {
		return true
	}

	return false
}

// SetActiveSessions gets a reference to the given []SmbActiveSession and assigns it to the ActiveSessions field.
func (o *SmbActiveFilePath) SetActiveSessions(v []SmbActiveSession) {
	o.ActiveSessions = v
}

// GetFilePath returns the FilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveFilePath) GetFilePath() string {
	if o == nil || o.FilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilePath.Get()
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveFilePath) GetFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilePath.Get(), o.FilePath.IsSet()
}

// HasFilePath returns a boolean if a field has been set.
func (o *SmbActiveFilePath) HasFilePath() bool {
	if o != nil && o.FilePath.IsSet() {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given NullableString and assigns it to the FilePath field.
func (o *SmbActiveFilePath) SetFilePath(v string) {
	o.FilePath.Set(&v)
}
// SetFilePathNil sets the value for FilePath to be an explicit nil
func (o *SmbActiveFilePath) SetFilePathNil() {
	o.FilePath.Set(nil)
}

// UnsetFilePath ensures that no value is present for FilePath, not even an explicit nil
func (o *SmbActiveFilePath) UnsetFilePath() {
	o.FilePath.Unset()
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveFilePath) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveFilePath) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *SmbActiveFilePath) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *SmbActiveFilePath) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *SmbActiveFilePath) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *SmbActiveFilePath) UnsetViewId() {
	o.ViewId.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbActiveFilePath) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbActiveFilePath) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *SmbActiveFilePath) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *SmbActiveFilePath) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *SmbActiveFilePath) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *SmbActiveFilePath) UnsetViewName() {
	o.ViewName.Unset()
}

func (o SmbActiveFilePath) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveSessions != nil {
		toSerialize["activeSessions"] = o.ActiveSessions
	}
	if o.FilePath.IsSet() {
		toSerialize["filePath"] = o.FilePath.Get()
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSmbActiveFilePath struct {
	value *SmbActiveFilePath
	isSet bool
}

func (v NullableSmbActiveFilePath) Get() *SmbActiveFilePath {
	return v.value
}

func (v *NullableSmbActiveFilePath) Set(val *SmbActiveFilePath) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbActiveFilePath) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbActiveFilePath) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbActiveFilePath(val *SmbActiveFilePath) *NullableSmbActiveFilePath {
	return &NullableSmbActiveFilePath{value: val, isSet: true}
}

func (v NullableSmbActiveFilePath) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbActiveFilePath) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


