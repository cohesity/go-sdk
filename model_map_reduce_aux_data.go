/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// MapReduceAuxData This message encapsulates auxillary data for a MapReduce. One example of such data is saved patterns for Pattern finder app.
type MapReduceAuxData struct {
	// Pattern auxiliary data for a MapReduce.
	PatternVec []Pattern `json:"patternVec,omitempty"`
}

// NewMapReduceAuxData instantiates a new MapReduceAuxData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMapReduceAuxData() *MapReduceAuxData {
	this := MapReduceAuxData{}
	return &this
}

// NewMapReduceAuxDataWithDefaults instantiates a new MapReduceAuxData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMapReduceAuxDataWithDefaults() *MapReduceAuxData {
	this := MapReduceAuxData{}
	return &this
}

// GetPatternVec returns the PatternVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MapReduceAuxData) GetPatternVec() []Pattern {
	if o == nil  {
		var ret []Pattern
		return ret
	}
	return o.PatternVec
}

// GetPatternVecOk returns a tuple with the PatternVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MapReduceAuxData) GetPatternVecOk() (*[]Pattern, bool) {
	if o == nil || o.PatternVec == nil {
		return nil, false
	}
	return &o.PatternVec, true
}

// HasPatternVec returns a boolean if a field has been set.
func (o *MapReduceAuxData) HasPatternVec() bool {
	if o != nil && o.PatternVec != nil {
		return true
	}

	return false
}

// SetPatternVec gets a reference to the given []Pattern and assigns it to the PatternVec field.
func (o *MapReduceAuxData) SetPatternVec(v []Pattern) {
	o.PatternVec = v
}

func (o MapReduceAuxData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PatternVec != nil {
		toSerialize["patternVec"] = o.PatternVec
	}
	return json.Marshal(toSerialize)
}

type NullableMapReduceAuxData struct {
	value *MapReduceAuxData
	isSet bool
}

func (v NullableMapReduceAuxData) Get() *MapReduceAuxData {
	return v.value
}

func (v *NullableMapReduceAuxData) Set(val *MapReduceAuxData) {
	v.value = val
	v.isSet = true
}

func (v NullableMapReduceAuxData) IsSet() bool {
	return v.isSet
}

func (v *NullableMapReduceAuxData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMapReduceAuxData(val *MapReduceAuxData) *NullableMapReduceAuxData {
	return &NullableMapReduceAuxData{value: val, isSet: true}
}

func (v NullableMapReduceAuxData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMapReduceAuxData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


