/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ExternalClientSubnets struct for ExternalClientSubnets
type ExternalClientSubnets struct {
	// Specifies the Client Subnets for the cluster.
	ClientSubnets []Subnet `json:"clientSubnets,omitempty"`
}

// NewExternalClientSubnets instantiates a new ExternalClientSubnets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalClientSubnets() *ExternalClientSubnets {
	this := ExternalClientSubnets{}
	return &this
}

// NewExternalClientSubnetsWithDefaults instantiates a new ExternalClientSubnets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalClientSubnetsWithDefaults() *ExternalClientSubnets {
	this := ExternalClientSubnets{}
	return &this
}

// GetClientSubnets returns the ClientSubnets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalClientSubnets) GetClientSubnets() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.ClientSubnets
}

// GetClientSubnetsOk returns a tuple with the ClientSubnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalClientSubnets) GetClientSubnetsOk() (*[]Subnet, bool) {
	if o == nil || o.ClientSubnets == nil {
		return nil, false
	}
	return &o.ClientSubnets, true
}

// HasClientSubnets returns a boolean if a field has been set.
func (o *ExternalClientSubnets) HasClientSubnets() bool {
	if o != nil && o.ClientSubnets != nil {
		return true
	}

	return false
}

// SetClientSubnets gets a reference to the given []Subnet and assigns it to the ClientSubnets field.
func (o *ExternalClientSubnets) SetClientSubnets(v []Subnet) {
	o.ClientSubnets = v
}

func (o ExternalClientSubnets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientSubnets != nil {
		toSerialize["clientSubnets"] = o.ClientSubnets
	}
	return json.Marshal(toSerialize)
}

type NullableExternalClientSubnets struct {
	value *ExternalClientSubnets
	isSet bool
}

func (v NullableExternalClientSubnets) Get() *ExternalClientSubnets {
	return v.value
}

func (v *NullableExternalClientSubnets) Set(val *ExternalClientSubnets) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalClientSubnets) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalClientSubnets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalClientSubnets(val *ExternalClientSubnets) *NullableExternalClientSubnets {
	return &NullableExternalClientSubnets{value: val, isSet: true}
}

func (v NullableExternalClientSubnets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalClientSubnets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


