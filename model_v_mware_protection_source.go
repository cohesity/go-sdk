/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VMwareProtectionSource Specifies a Protection Source in a VMware environment.
type VMwareProtectionSource struct {
	// Specifies the id of the persistent agent.
	AgentId NullableInt64 `json:"agentId,omitempty"`
	// Specifies the list of agent information on the Virtual Machine. This is set only if the Virtual Machine has persistent agent.
	Agents []AgentInformation `json:"agents,omitempty"`
	// Specifies the connection state of the Object and are only valid for ESXi hosts ('kHostSystem') or Virtual Machines ('kVirtualMachine'). These enums are equivalent to the connection states documented in VMware's reference documentation. Examples of Cohesity connection states include 'kConnected', 'kDisconnected', 'kInacccessible', etc. 'kConnected' indicates that server has access to virtual machine. 'kDisconnected' indicates that server is currently disconnected to virtual machine. 'kInaccessible' indicates that one or more configuration files are inacccessible. 'kInvalid' indicates that virtual machine configuration is invalid. 'kOrphaned' indicates that virtual machine is no longer registered on the host it is associated with. 'kNotResponding' indicates that virtual machine has failed to respond due to external issues such as network connectivity, host not running etc.
	ConnectionState NullableString `json:"connectionState,omitempty"`
	DatastoreInfo *DatastoreInfo `json:"datastoreInfo,omitempty"`
	// Specifies the folder type for the 'kFolder' Object. 'kVMFolder' indicates folder can hold VMs or vApps. 'kHostFolder' indicates folder can hold hosts and compute resources. 'kDatastoreFolder' indicates folder can hold datastores and storage pods. 'kNetworkFolder' indicates folder can hold networks and switches. 'kRootFolder' indicates folder can hold datacenters.
	FolderType NullableString `json:"folderType,omitempty"`
	// Set to true if a persistent agent is running on the Virtual Machine. This is populated for entities of type 'kVirtualMachine'.
	HasPersistentAgent NullableBool `json:"hasPersistentAgent,omitempty"`
	// Specifies the host type for the 'kVirtualMachine' Object. 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system. 'kAix' indicates the IBM AIX operating system. 'kSolaris' indicates the Oracle Solaris operating system. 'kSapHana' indicates the Sap Hana database system developed by SAP SE. 'kOther' indicates the other types of operating system.
	HostType NullableString `json:"hostType,omitempty"`
	Id *VMwareObjectId `json:"id,omitempty"`
	IpDetails *IpDetails `json:"ipDetails,omitempty"`
	// IsTemplate specifies if the VM is a template or not.
	IsVmTemplate NullableBool `json:"isVmTemplate,omitempty"`
	// Specifies a human readable name of the Protection Source.
	Name NullableString `json:"name,omitempty"`
	// Specifies the optional list of VM Tag attributes associated with this Object.
	TagAttributes []TagAttribute `json:"tagAttributes,omitempty"`
	// Specifies the status of VMware Tools for the guest OS on the VM. This is only valid for the 'kVirtualMachine' type. 'kGuestToolsRunning' means the VMware tools are running on the guest OS. 'kGuestToolsNotRunning' means the VMware tools are not running on the guest OS. 'kUnknown' means the state of the VMware tools on the guest OS is not known. 'kGuestToolsExecutingScripts' means the guest OS is currently executing scripts using VMware tools.
	ToolsRunningStatus NullableString `json:"toolsRunningStatus,omitempty"`
	// Specifies the type of managed Object in a VMware Protection Source. Examples of VMware Objects include 'kVCenter', 'kFolder', 'kDatacenter', 'kResourcePool', 'kDatastore', 'kVirtualMachine', etc. 'kVCenter' indicates the vCenter entity in a VMware protection source type. 'kFolder indicates the folder entity (of any kind) in a VMware protection source type. 'kDatacenter' indicates the datacenter entity in a VMware protection source type. 'kComputeResource' indicates the physical compute resource entity in a VMware protection source type. 'kResourcePool' indicates the set of physical resources within a compute resource or cloudcompute resource. 'kDataStore' indicates the datastore entity in a VMware protection source type. 'kHostSystem' indicates the ESXi host entity in a VMware protection source type. 'kVirtualMachine' indicates the virtual machine entity in a VMware protection source type. 'kVirtualApp' indicates the virtual app entity in a VMware protection source type. 'kStandaloneHost' indicates the standalone ESXi host entity (not managed by vCenter) in a VMware protection source type. 'kStoragePod' indicates the storage pod entity in a VMware protection source type. 'kNetwork' indicates the standard vSwitch in a VMware protection source type. 'kDistributedVirtualPortgroup' indicates a distributed vSwitch port group in a VMware protection source type. 'kTagCategory' indicates a tag category entity in a VMware protection source type. 'kTag' indicates a tag entity in a VMware protection source type. 'kOpaqueNetwork' indicates an opaque network which is created and managed by an entity outside of vSphere. 'kvCloudDirector' indicates a vCloud director entity in a VMware protection source type. 'kOrganization' indicates an Organization under a vCD in a VMware protection source type. 'kVirtualDatacenter' indicates a virtual datacenter entity in a VMware protection source type. 'kCatalog' indicates a VCD catalog entity in a VMware protection source type. 'kOrgMetadata' indicates an VCD organization metadata in a VMware protection source type. 'kStoragePolicy' indicates a storage policy associated with the vApp in a VMware protection source type.
	Type NullableString `json:"type,omitempty"`
	// Specifies an array of vCenters to be registered
	VCloudDirectorInfo []VCloudDirectorInfo `json:"vCloudDirectorInfo,omitempty"`
	// For vCenter and ESXi, this will show the software version. For VMs, this will show the hardware version.
	Version NullableString `json:"version,omitempty"`
	// Specifies an array of virtual disks that are part of the Virtual Machine. This is populated for entities of type 'kVirtualMachine'.
	VirtualDisks []VirtualDiskInfo `json:"virtualDisks,omitempty"`
}

// NewVMwareProtectionSource instantiates a new VMwareProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMwareProtectionSource() *VMwareProtectionSource {
	this := VMwareProtectionSource{}
	return &this
}

// NewVMwareProtectionSourceWithDefaults instantiates a new VMwareProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMwareProtectionSourceWithDefaults() *VMwareProtectionSource {
	this := VMwareProtectionSource{}
	return &this
}

// GetAgentId returns the AgentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetAgentId() int64 {
	if o == nil || o.AgentId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AgentId.Get()
}

// GetAgentIdOk returns a tuple with the AgentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetAgentIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AgentId.Get(), o.AgentId.IsSet()
}

// HasAgentId returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasAgentId() bool {
	if o != nil && o.AgentId.IsSet() {
		return true
	}

	return false
}

// SetAgentId gets a reference to the given NullableInt64 and assigns it to the AgentId field.
func (o *VMwareProtectionSource) SetAgentId(v int64) {
	o.AgentId.Set(&v)
}
// SetAgentIdNil sets the value for AgentId to be an explicit nil
func (o *VMwareProtectionSource) SetAgentIdNil() {
	o.AgentId.Set(nil)
}

// UnsetAgentId ensures that no value is present for AgentId, not even an explicit nil
func (o *VMwareProtectionSource) UnsetAgentId() {
	o.AgentId.Unset()
}

// GetAgents returns the Agents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetAgents() []AgentInformation {
	if o == nil  {
		var ret []AgentInformation
		return ret
	}
	return o.Agents
}

// GetAgentsOk returns a tuple with the Agents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetAgentsOk() (*[]AgentInformation, bool) {
	if o == nil || o.Agents == nil {
		return nil, false
	}
	return &o.Agents, true
}

// HasAgents returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasAgents() bool {
	if o != nil && o.Agents != nil {
		return true
	}

	return false
}

// SetAgents gets a reference to the given []AgentInformation and assigns it to the Agents field.
func (o *VMwareProtectionSource) SetAgents(v []AgentInformation) {
	o.Agents = v
}

// GetConnectionState returns the ConnectionState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetConnectionState() string {
	if o == nil || o.ConnectionState.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConnectionState.Get()
}

// GetConnectionStateOk returns a tuple with the ConnectionState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetConnectionStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConnectionState.Get(), o.ConnectionState.IsSet()
}

// HasConnectionState returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasConnectionState() bool {
	if o != nil && o.ConnectionState.IsSet() {
		return true
	}

	return false
}

// SetConnectionState gets a reference to the given NullableString and assigns it to the ConnectionState field.
func (o *VMwareProtectionSource) SetConnectionState(v string) {
	o.ConnectionState.Set(&v)
}
// SetConnectionStateNil sets the value for ConnectionState to be an explicit nil
func (o *VMwareProtectionSource) SetConnectionStateNil() {
	o.ConnectionState.Set(nil)
}

// UnsetConnectionState ensures that no value is present for ConnectionState, not even an explicit nil
func (o *VMwareProtectionSource) UnsetConnectionState() {
	o.ConnectionState.Unset()
}

// GetDatastoreInfo returns the DatastoreInfo field value if set, zero value otherwise.
func (o *VMwareProtectionSource) GetDatastoreInfo() DatastoreInfo {
	if o == nil || o.DatastoreInfo == nil {
		var ret DatastoreInfo
		return ret
	}
	return *o.DatastoreInfo
}

// GetDatastoreInfoOk returns a tuple with the DatastoreInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMwareProtectionSource) GetDatastoreInfoOk() (*DatastoreInfo, bool) {
	if o == nil || o.DatastoreInfo == nil {
		return nil, false
	}
	return o.DatastoreInfo, true
}

// HasDatastoreInfo returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasDatastoreInfo() bool {
	if o != nil && o.DatastoreInfo != nil {
		return true
	}

	return false
}

// SetDatastoreInfo gets a reference to the given DatastoreInfo and assigns it to the DatastoreInfo field.
func (o *VMwareProtectionSource) SetDatastoreInfo(v DatastoreInfo) {
	o.DatastoreInfo = &v
}

// GetFolderType returns the FolderType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetFolderType() string {
	if o == nil || o.FolderType.Get() == nil {
		var ret string
		return ret
	}
	return *o.FolderType.Get()
}

// GetFolderTypeOk returns a tuple with the FolderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetFolderTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FolderType.Get(), o.FolderType.IsSet()
}

// HasFolderType returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasFolderType() bool {
	if o != nil && o.FolderType.IsSet() {
		return true
	}

	return false
}

// SetFolderType gets a reference to the given NullableString and assigns it to the FolderType field.
func (o *VMwareProtectionSource) SetFolderType(v string) {
	o.FolderType.Set(&v)
}
// SetFolderTypeNil sets the value for FolderType to be an explicit nil
func (o *VMwareProtectionSource) SetFolderTypeNil() {
	o.FolderType.Set(nil)
}

// UnsetFolderType ensures that no value is present for FolderType, not even an explicit nil
func (o *VMwareProtectionSource) UnsetFolderType() {
	o.FolderType.Unset()
}

// GetHasPersistentAgent returns the HasPersistentAgent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetHasPersistentAgent() bool {
	if o == nil || o.HasPersistentAgent.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasPersistentAgent.Get()
}

// GetHasPersistentAgentOk returns a tuple with the HasPersistentAgent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetHasPersistentAgentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasPersistentAgent.Get(), o.HasPersistentAgent.IsSet()
}

// HasHasPersistentAgent returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasHasPersistentAgent() bool {
	if o != nil && o.HasPersistentAgent.IsSet() {
		return true
	}

	return false
}

// SetHasPersistentAgent gets a reference to the given NullableBool and assigns it to the HasPersistentAgent field.
func (o *VMwareProtectionSource) SetHasPersistentAgent(v bool) {
	o.HasPersistentAgent.Set(&v)
}
// SetHasPersistentAgentNil sets the value for HasPersistentAgent to be an explicit nil
func (o *VMwareProtectionSource) SetHasPersistentAgentNil() {
	o.HasPersistentAgent.Set(nil)
}

// UnsetHasPersistentAgent ensures that no value is present for HasPersistentAgent, not even an explicit nil
func (o *VMwareProtectionSource) UnsetHasPersistentAgent() {
	o.HasPersistentAgent.Unset()
}

// GetHostType returns the HostType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetHostType() string {
	if o == nil || o.HostType.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostType.Get()
}

// GetHostTypeOk returns a tuple with the HostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetHostTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostType.Get(), o.HostType.IsSet()
}

// HasHostType returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasHostType() bool {
	if o != nil && o.HostType.IsSet() {
		return true
	}

	return false
}

// SetHostType gets a reference to the given NullableString and assigns it to the HostType field.
func (o *VMwareProtectionSource) SetHostType(v string) {
	o.HostType.Set(&v)
}
// SetHostTypeNil sets the value for HostType to be an explicit nil
func (o *VMwareProtectionSource) SetHostTypeNil() {
	o.HostType.Set(nil)
}

// UnsetHostType ensures that no value is present for HostType, not even an explicit nil
func (o *VMwareProtectionSource) UnsetHostType() {
	o.HostType.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *VMwareProtectionSource) GetId() VMwareObjectId {
	if o == nil || o.Id == nil {
		var ret VMwareObjectId
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMwareProtectionSource) GetIdOk() (*VMwareObjectId, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given VMwareObjectId and assigns it to the Id field.
func (o *VMwareProtectionSource) SetId(v VMwareObjectId) {
	o.Id = &v
}

// GetIpDetails returns the IpDetails field value if set, zero value otherwise.
func (o *VMwareProtectionSource) GetIpDetails() IpDetails {
	if o == nil || o.IpDetails == nil {
		var ret IpDetails
		return ret
	}
	return *o.IpDetails
}

// GetIpDetailsOk returns a tuple with the IpDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VMwareProtectionSource) GetIpDetailsOk() (*IpDetails, bool) {
	if o == nil || o.IpDetails == nil {
		return nil, false
	}
	return o.IpDetails, true
}

// HasIpDetails returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasIpDetails() bool {
	if o != nil && o.IpDetails != nil {
		return true
	}

	return false
}

// SetIpDetails gets a reference to the given IpDetails and assigns it to the IpDetails field.
func (o *VMwareProtectionSource) SetIpDetails(v IpDetails) {
	o.IpDetails = &v
}

// GetIsVmTemplate returns the IsVmTemplate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetIsVmTemplate() bool {
	if o == nil || o.IsVmTemplate.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsVmTemplate.Get()
}

// GetIsVmTemplateOk returns a tuple with the IsVmTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetIsVmTemplateOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsVmTemplate.Get(), o.IsVmTemplate.IsSet()
}

// HasIsVmTemplate returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasIsVmTemplate() bool {
	if o != nil && o.IsVmTemplate.IsSet() {
		return true
	}

	return false
}

// SetIsVmTemplate gets a reference to the given NullableBool and assigns it to the IsVmTemplate field.
func (o *VMwareProtectionSource) SetIsVmTemplate(v bool) {
	o.IsVmTemplate.Set(&v)
}
// SetIsVmTemplateNil sets the value for IsVmTemplate to be an explicit nil
func (o *VMwareProtectionSource) SetIsVmTemplateNil() {
	o.IsVmTemplate.Set(nil)
}

// UnsetIsVmTemplate ensures that no value is present for IsVmTemplate, not even an explicit nil
func (o *VMwareProtectionSource) UnsetIsVmTemplate() {
	o.IsVmTemplate.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *VMwareProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *VMwareProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *VMwareProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetTagAttributes returns the TagAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetTagAttributes() []TagAttribute {
	if o == nil  {
		var ret []TagAttribute
		return ret
	}
	return o.TagAttributes
}

// GetTagAttributesOk returns a tuple with the TagAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetTagAttributesOk() (*[]TagAttribute, bool) {
	if o == nil || o.TagAttributes == nil {
		return nil, false
	}
	return &o.TagAttributes, true
}

// HasTagAttributes returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasTagAttributes() bool {
	if o != nil && o.TagAttributes != nil {
		return true
	}

	return false
}

// SetTagAttributes gets a reference to the given []TagAttribute and assigns it to the TagAttributes field.
func (o *VMwareProtectionSource) SetTagAttributes(v []TagAttribute) {
	o.TagAttributes = v
}

// GetToolsRunningStatus returns the ToolsRunningStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetToolsRunningStatus() string {
	if o == nil || o.ToolsRunningStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.ToolsRunningStatus.Get()
}

// GetToolsRunningStatusOk returns a tuple with the ToolsRunningStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetToolsRunningStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ToolsRunningStatus.Get(), o.ToolsRunningStatus.IsSet()
}

// HasToolsRunningStatus returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasToolsRunningStatus() bool {
	if o != nil && o.ToolsRunningStatus.IsSet() {
		return true
	}

	return false
}

// SetToolsRunningStatus gets a reference to the given NullableString and assigns it to the ToolsRunningStatus field.
func (o *VMwareProtectionSource) SetToolsRunningStatus(v string) {
	o.ToolsRunningStatus.Set(&v)
}
// SetToolsRunningStatusNil sets the value for ToolsRunningStatus to be an explicit nil
func (o *VMwareProtectionSource) SetToolsRunningStatusNil() {
	o.ToolsRunningStatus.Set(nil)
}

// UnsetToolsRunningStatus ensures that no value is present for ToolsRunningStatus, not even an explicit nil
func (o *VMwareProtectionSource) UnsetToolsRunningStatus() {
	o.ToolsRunningStatus.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *VMwareProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *VMwareProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *VMwareProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetVCloudDirectorInfo returns the VCloudDirectorInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetVCloudDirectorInfo() []VCloudDirectorInfo {
	if o == nil  {
		var ret []VCloudDirectorInfo
		return ret
	}
	return o.VCloudDirectorInfo
}

// GetVCloudDirectorInfoOk returns a tuple with the VCloudDirectorInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetVCloudDirectorInfoOk() (*[]VCloudDirectorInfo, bool) {
	if o == nil || o.VCloudDirectorInfo == nil {
		return nil, false
	}
	return &o.VCloudDirectorInfo, true
}

// HasVCloudDirectorInfo returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasVCloudDirectorInfo() bool {
	if o != nil && o.VCloudDirectorInfo != nil {
		return true
	}

	return false
}

// SetVCloudDirectorInfo gets a reference to the given []VCloudDirectorInfo and assigns it to the VCloudDirectorInfo field.
func (o *VMwareProtectionSource) SetVCloudDirectorInfo(v []VCloudDirectorInfo) {
	o.VCloudDirectorInfo = v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetVersion() string {
	if o == nil || o.Version.Get() == nil {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *VMwareProtectionSource) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *VMwareProtectionSource) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *VMwareProtectionSource) UnsetVersion() {
	o.Version.Unset()
}

// GetVirtualDisks returns the VirtualDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareProtectionSource) GetVirtualDisks() []VirtualDiskInfo {
	if o == nil  {
		var ret []VirtualDiskInfo
		return ret
	}
	return o.VirtualDisks
}

// GetVirtualDisksOk returns a tuple with the VirtualDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareProtectionSource) GetVirtualDisksOk() (*[]VirtualDiskInfo, bool) {
	if o == nil || o.VirtualDisks == nil {
		return nil, false
	}
	return &o.VirtualDisks, true
}

// HasVirtualDisks returns a boolean if a field has been set.
func (o *VMwareProtectionSource) HasVirtualDisks() bool {
	if o != nil && o.VirtualDisks != nil {
		return true
	}

	return false
}

// SetVirtualDisks gets a reference to the given []VirtualDiskInfo and assigns it to the VirtualDisks field.
func (o *VMwareProtectionSource) SetVirtualDisks(v []VirtualDiskInfo) {
	o.VirtualDisks = v
}

func (o VMwareProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AgentId.IsSet() {
		toSerialize["agentId"] = o.AgentId.Get()
	}
	if o.Agents != nil {
		toSerialize["agents"] = o.Agents
	}
	if o.ConnectionState.IsSet() {
		toSerialize["connectionState"] = o.ConnectionState.Get()
	}
	if o.DatastoreInfo != nil {
		toSerialize["datastoreInfo"] = o.DatastoreInfo
	}
	if o.FolderType.IsSet() {
		toSerialize["folderType"] = o.FolderType.Get()
	}
	if o.HasPersistentAgent.IsSet() {
		toSerialize["hasPersistentAgent"] = o.HasPersistentAgent.Get()
	}
	if o.HostType.IsSet() {
		toSerialize["hostType"] = o.HostType.Get()
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.IpDetails != nil {
		toSerialize["ipDetails"] = o.IpDetails
	}
	if o.IsVmTemplate.IsSet() {
		toSerialize["isVmTemplate"] = o.IsVmTemplate.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.TagAttributes != nil {
		toSerialize["tagAttributes"] = o.TagAttributes
	}
	if o.ToolsRunningStatus.IsSet() {
		toSerialize["toolsRunningStatus"] = o.ToolsRunningStatus.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.VCloudDirectorInfo != nil {
		toSerialize["vCloudDirectorInfo"] = o.VCloudDirectorInfo
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.VirtualDisks != nil {
		toSerialize["virtualDisks"] = o.VirtualDisks
	}
	return json.Marshal(toSerialize)
}

type NullableVMwareProtectionSource struct {
	value *VMwareProtectionSource
	isSet bool
}

func (v NullableVMwareProtectionSource) Get() *VMwareProtectionSource {
	return v.value
}

func (v *NullableVMwareProtectionSource) Set(val *VMwareProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableVMwareProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableVMwareProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMwareProtectionSource(val *VMwareProtectionSource) *NullableVMwareProtectionSource {
	return &NullableVMwareProtectionSource{value: val, isSet: true}
}

func (v NullableVMwareProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMwareProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


