/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// BackupPolicyProtoMonthlySchedule struct for BackupPolicyProtoMonthlySchedule
type BackupPolicyProtoMonthlySchedule struct {
	// Count of the day on which to perform the backup (look above for a more detailed description).
	Count NullableInt32 `json:"count,omitempty"`
	// The day of the month the backup is to be performed.
	Day NullableInt32 `json:"day,omitempty"`
	Time *Time `json:"time,omitempty"`
}

// NewBackupPolicyProtoMonthlySchedule instantiates a new BackupPolicyProtoMonthlySchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupPolicyProtoMonthlySchedule() *BackupPolicyProtoMonthlySchedule {
	this := BackupPolicyProtoMonthlySchedule{}
	return &this
}

// NewBackupPolicyProtoMonthlyScheduleWithDefaults instantiates a new BackupPolicyProtoMonthlySchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupPolicyProtoMonthlyScheduleWithDefaults() *BackupPolicyProtoMonthlySchedule {
	this := BackupPolicyProtoMonthlySchedule{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyProtoMonthlySchedule) GetCount() int32 {
	if o == nil || o.Count.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyProtoMonthlySchedule) GetCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *BackupPolicyProtoMonthlySchedule) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt32 and assigns it to the Count field.
func (o *BackupPolicyProtoMonthlySchedule) SetCount(v int32) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *BackupPolicyProtoMonthlySchedule) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *BackupPolicyProtoMonthlySchedule) UnsetCount() {
	o.Count.Unset()
}

// GetDay returns the Day field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupPolicyProtoMonthlySchedule) GetDay() int32 {
	if o == nil || o.Day.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Day.Get()
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupPolicyProtoMonthlySchedule) GetDayOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Day.Get(), o.Day.IsSet()
}

// HasDay returns a boolean if a field has been set.
func (o *BackupPolicyProtoMonthlySchedule) HasDay() bool {
	if o != nil && o.Day.IsSet() {
		return true
	}

	return false
}

// SetDay gets a reference to the given NullableInt32 and assigns it to the Day field.
func (o *BackupPolicyProtoMonthlySchedule) SetDay(v int32) {
	o.Day.Set(&v)
}
// SetDayNil sets the value for Day to be an explicit nil
func (o *BackupPolicyProtoMonthlySchedule) SetDayNil() {
	o.Day.Set(nil)
}

// UnsetDay ensures that no value is present for Day, not even an explicit nil
func (o *BackupPolicyProtoMonthlySchedule) UnsetDay() {
	o.Day.Unset()
}

// GetTime returns the Time field value if set, zero value otherwise.
func (o *BackupPolicyProtoMonthlySchedule) GetTime() Time {
	if o == nil || o.Time == nil {
		var ret Time
		return ret
	}
	return *o.Time
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupPolicyProtoMonthlySchedule) GetTimeOk() (*Time, bool) {
	if o == nil || o.Time == nil {
		return nil, false
	}
	return o.Time, true
}

// HasTime returns a boolean if a field has been set.
func (o *BackupPolicyProtoMonthlySchedule) HasTime() bool {
	if o != nil && o.Time != nil {
		return true
	}

	return false
}

// SetTime gets a reference to the given Time and assigns it to the Time field.
func (o *BackupPolicyProtoMonthlySchedule) SetTime(v Time) {
	o.Time = &v
}

func (o BackupPolicyProtoMonthlySchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.Day.IsSet() {
		toSerialize["day"] = o.Day.Get()
	}
	if o.Time != nil {
		toSerialize["time"] = o.Time
	}
	return json.Marshal(toSerialize)
}

type NullableBackupPolicyProtoMonthlySchedule struct {
	value *BackupPolicyProtoMonthlySchedule
	isSet bool
}

func (v NullableBackupPolicyProtoMonthlySchedule) Get() *BackupPolicyProtoMonthlySchedule {
	return v.value
}

func (v *NullableBackupPolicyProtoMonthlySchedule) Set(val *BackupPolicyProtoMonthlySchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupPolicyProtoMonthlySchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupPolicyProtoMonthlySchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupPolicyProtoMonthlySchedule(val *BackupPolicyProtoMonthlySchedule) *NullableBackupPolicyProtoMonthlySchedule {
	return &NullableBackupPolicyProtoMonthlySchedule{value: val, isSet: true}
}

func (v NullableBackupPolicyProtoMonthlySchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupPolicyProtoMonthlySchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


