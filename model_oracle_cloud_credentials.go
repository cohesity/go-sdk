/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleCloudCredentials Specifies the Oracle Cloud Credentials to connect to an Oracle S3 Compatible vault account.  Oracle Cloud Credentials Region, Access-Key-Id and Secret-Access-Key. Oracle Cloud properties Tenant and Tier Type.
type OracleCloudCredentials struct {
	// Specifies access key to connect to Oracle S3 Compatible vault account.
	AccessKeyId NullableString `json:"accessKeyId,omitempty"`
	// Specifies the region for Oracle S3 Compatible vault account.
	Region NullableString `json:"region,omitempty"`
	// Specifies the secret access key for Oracle S3 Compatible vault account.
	SecretAccessKey NullableString `json:"secretAccessKey,omitempty"`
	// Specifies the tenant which is part of the REST endpoints for Oracle S3 compatible vaults.
	Tenant NullableString `json:"tenant,omitempty"`
	// Specifies the storage class of Oracle vault. OracleTierType specifies the storage class for Oracle. 'kOracleTierStandard' indicates a tier type of Oracle properties that requires fast, immediate and frequent access. 'kOracleTierArchive' indicates a tier type of Oracle properties that is rarely accesed and preserved for long times.
	TierType NullableString `json:"tierType,omitempty"`
}

// NewOracleCloudCredentials instantiates a new OracleCloudCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleCloudCredentials() *OracleCloudCredentials {
	this := OracleCloudCredentials{}
	return &this
}

// NewOracleCloudCredentialsWithDefaults instantiates a new OracleCloudCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleCloudCredentialsWithDefaults() *OracleCloudCredentials {
	this := OracleCloudCredentials{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleCloudCredentials) GetAccessKeyId() string {
	if o == nil || o.AccessKeyId.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccessKeyId.Get()
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloudCredentials) GetAccessKeyIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccessKeyId.Get(), o.AccessKeyId.IsSet()
}

// HasAccessKeyId returns a boolean if a field has been set.
func (o *OracleCloudCredentials) HasAccessKeyId() bool {
	if o != nil && o.AccessKeyId.IsSet() {
		return true
	}

	return false
}

// SetAccessKeyId gets a reference to the given NullableString and assigns it to the AccessKeyId field.
func (o *OracleCloudCredentials) SetAccessKeyId(v string) {
	o.AccessKeyId.Set(&v)
}
// SetAccessKeyIdNil sets the value for AccessKeyId to be an explicit nil
func (o *OracleCloudCredentials) SetAccessKeyIdNil() {
	o.AccessKeyId.Set(nil)
}

// UnsetAccessKeyId ensures that no value is present for AccessKeyId, not even an explicit nil
func (o *OracleCloudCredentials) UnsetAccessKeyId() {
	o.AccessKeyId.Unset()
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleCloudCredentials) GetRegion() string {
	if o == nil || o.Region.Get() == nil {
		var ret string
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloudCredentials) GetRegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *OracleCloudCredentials) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableString and assigns it to the Region field.
func (o *OracleCloudCredentials) SetRegion(v string) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *OracleCloudCredentials) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *OracleCloudCredentials) UnsetRegion() {
	o.Region.Unset()
}

// GetSecretAccessKey returns the SecretAccessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleCloudCredentials) GetSecretAccessKey() string {
	if o == nil || o.SecretAccessKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.SecretAccessKey.Get()
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloudCredentials) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SecretAccessKey.Get(), o.SecretAccessKey.IsSet()
}

// HasSecretAccessKey returns a boolean if a field has been set.
func (o *OracleCloudCredentials) HasSecretAccessKey() bool {
	if o != nil && o.SecretAccessKey.IsSet() {
		return true
	}

	return false
}

// SetSecretAccessKey gets a reference to the given NullableString and assigns it to the SecretAccessKey field.
func (o *OracleCloudCredentials) SetSecretAccessKey(v string) {
	o.SecretAccessKey.Set(&v)
}
// SetSecretAccessKeyNil sets the value for SecretAccessKey to be an explicit nil
func (o *OracleCloudCredentials) SetSecretAccessKeyNil() {
	o.SecretAccessKey.Set(nil)
}

// UnsetSecretAccessKey ensures that no value is present for SecretAccessKey, not even an explicit nil
func (o *OracleCloudCredentials) UnsetSecretAccessKey() {
	o.SecretAccessKey.Unset()
}

// GetTenant returns the Tenant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleCloudCredentials) GetTenant() string {
	if o == nil || o.Tenant.Get() == nil {
		var ret string
		return ret
	}
	return *o.Tenant.Get()
}

// GetTenantOk returns a tuple with the Tenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloudCredentials) GetTenantOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Tenant.Get(), o.Tenant.IsSet()
}

// HasTenant returns a boolean if a field has been set.
func (o *OracleCloudCredentials) HasTenant() bool {
	if o != nil && o.Tenant.IsSet() {
		return true
	}

	return false
}

// SetTenant gets a reference to the given NullableString and assigns it to the Tenant field.
func (o *OracleCloudCredentials) SetTenant(v string) {
	o.Tenant.Set(&v)
}
// SetTenantNil sets the value for Tenant to be an explicit nil
func (o *OracleCloudCredentials) SetTenantNil() {
	o.Tenant.Set(nil)
}

// UnsetTenant ensures that no value is present for Tenant, not even an explicit nil
func (o *OracleCloudCredentials) UnsetTenant() {
	o.Tenant.Unset()
}

// GetTierType returns the TierType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleCloudCredentials) GetTierType() string {
	if o == nil || o.TierType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TierType.Get()
}

// GetTierTypeOk returns a tuple with the TierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloudCredentials) GetTierTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TierType.Get(), o.TierType.IsSet()
}

// HasTierType returns a boolean if a field has been set.
func (o *OracleCloudCredentials) HasTierType() bool {
	if o != nil && o.TierType.IsSet() {
		return true
	}

	return false
}

// SetTierType gets a reference to the given NullableString and assigns it to the TierType field.
func (o *OracleCloudCredentials) SetTierType(v string) {
	o.TierType.Set(&v)
}
// SetTierTypeNil sets the value for TierType to be an explicit nil
func (o *OracleCloudCredentials) SetTierTypeNil() {
	o.TierType.Set(nil)
}

// UnsetTierType ensures that no value is present for TierType, not even an explicit nil
func (o *OracleCloudCredentials) UnsetTierType() {
	o.TierType.Unset()
}

func (o OracleCloudCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessKeyId.IsSet() {
		toSerialize["accessKeyId"] = o.AccessKeyId.Get()
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	if o.SecretAccessKey.IsSet() {
		toSerialize["secretAccessKey"] = o.SecretAccessKey.Get()
	}
	if o.Tenant.IsSet() {
		toSerialize["tenant"] = o.Tenant.Get()
	}
	if o.TierType.IsSet() {
		toSerialize["tierType"] = o.TierType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleCloudCredentials struct {
	value *OracleCloudCredentials
	isSet bool
}

func (v NullableOracleCloudCredentials) Get() *OracleCloudCredentials {
	return v.value
}

func (v *NullableOracleCloudCredentials) Set(val *OracleCloudCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleCloudCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleCloudCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleCloudCredentials(val *OracleCloudCredentials) *NullableOracleCloudCredentials {
	return &NullableOracleCloudCredentials{value: val, isSet: true}
}

func (v NullableOracleCloudCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleCloudCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


