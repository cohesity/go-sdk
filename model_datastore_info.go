/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DatastoreInfo struct for DatastoreInfo
type DatastoreInfo struct {
	// Specifies the capacity of the datastore in bytes.
	Capacity NullableInt32 `json:"capacity,omitempty"`
	// Specifies the available space on the datastore in bytes.
	FreeSpace NullableInt32 `json:"freeSpace,omitempty"`
}

// NewDatastoreInfo instantiates a new DatastoreInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreInfo() *DatastoreInfo {
	this := DatastoreInfo{}
	return &this
}

// NewDatastoreInfoWithDefaults instantiates a new DatastoreInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreInfoWithDefaults() *DatastoreInfo {
	this := DatastoreInfo{}
	return &this
}

// GetCapacity returns the Capacity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatastoreInfo) GetCapacity() int32 {
	if o == nil || o.Capacity.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Capacity.Get()
}

// GetCapacityOk returns a tuple with the Capacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatastoreInfo) GetCapacityOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Capacity.Get(), o.Capacity.IsSet()
}

// HasCapacity returns a boolean if a field has been set.
func (o *DatastoreInfo) HasCapacity() bool {
	if o != nil && o.Capacity.IsSet() {
		return true
	}

	return false
}

// SetCapacity gets a reference to the given NullableInt32 and assigns it to the Capacity field.
func (o *DatastoreInfo) SetCapacity(v int32) {
	o.Capacity.Set(&v)
}
// SetCapacityNil sets the value for Capacity to be an explicit nil
func (o *DatastoreInfo) SetCapacityNil() {
	o.Capacity.Set(nil)
}

// UnsetCapacity ensures that no value is present for Capacity, not even an explicit nil
func (o *DatastoreInfo) UnsetCapacity() {
	o.Capacity.Unset()
}

// GetFreeSpace returns the FreeSpace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatastoreInfo) GetFreeSpace() int32 {
	if o == nil || o.FreeSpace.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FreeSpace.Get()
}

// GetFreeSpaceOk returns a tuple with the FreeSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatastoreInfo) GetFreeSpaceOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FreeSpace.Get(), o.FreeSpace.IsSet()
}

// HasFreeSpace returns a boolean if a field has been set.
func (o *DatastoreInfo) HasFreeSpace() bool {
	if o != nil && o.FreeSpace.IsSet() {
		return true
	}

	return false
}

// SetFreeSpace gets a reference to the given NullableInt32 and assigns it to the FreeSpace field.
func (o *DatastoreInfo) SetFreeSpace(v int32) {
	o.FreeSpace.Set(&v)
}
// SetFreeSpaceNil sets the value for FreeSpace to be an explicit nil
func (o *DatastoreInfo) SetFreeSpaceNil() {
	o.FreeSpace.Set(nil)
}

// UnsetFreeSpace ensures that no value is present for FreeSpace, not even an explicit nil
func (o *DatastoreInfo) UnsetFreeSpace() {
	o.FreeSpace.Unset()
}

func (o DatastoreInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Capacity.IsSet() {
		toSerialize["capacity"] = o.Capacity.Get()
	}
	if o.FreeSpace.IsSet() {
		toSerialize["freeSpace"] = o.FreeSpace.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDatastoreInfo struct {
	value *DatastoreInfo
	isSet bool
}

func (v NullableDatastoreInfo) Get() *DatastoreInfo {
	return v.value
}

func (v *NullableDatastoreInfo) Set(val *DatastoreInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreInfo(val *DatastoreInfo) *NullableDatastoreInfo {
	return &NullableDatastoreInfo{value: val, isSet: true}
}

func (v NullableDatastoreInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


