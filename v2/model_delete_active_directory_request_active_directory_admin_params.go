/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeleteActiveDirectoryRequestActiveDirectoryAdminParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteActiveDirectoryRequestActiveDirectoryAdminParams{}

// DeleteActiveDirectoryRequestActiveDirectoryAdminParams Specifies the params of a user with administrative privilege of this Active Directory. This field is mandatory if machine accounts are updated.
type DeleteActiveDirectoryRequestActiveDirectoryAdminParams struct {
	// Specifies the password of the user.
	Password NullableString `json:"password"`
	// Specifies the user name.
	Username NullableString `json:"username"`
}

type _DeleteActiveDirectoryRequestActiveDirectoryAdminParams DeleteActiveDirectoryRequestActiveDirectoryAdminParams

// NewDeleteActiveDirectoryRequestActiveDirectoryAdminParams instantiates a new DeleteActiveDirectoryRequestActiveDirectoryAdminParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteActiveDirectoryRequestActiveDirectoryAdminParams(password NullableString, username NullableString) *DeleteActiveDirectoryRequestActiveDirectoryAdminParams {
	this := DeleteActiveDirectoryRequestActiveDirectoryAdminParams{}
	this.Password = password
	this.Username = username
	return &this
}

// NewDeleteActiveDirectoryRequestActiveDirectoryAdminParamsWithDefaults instantiates a new DeleteActiveDirectoryRequestActiveDirectoryAdminParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteActiveDirectoryRequestActiveDirectoryAdminParamsWithDefaults() *DeleteActiveDirectoryRequestActiveDirectoryAdminParams {
	this := DeleteActiveDirectoryRequestActiveDirectoryAdminParams{}
	return &this
}

// GetPassword returns the Password field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DeleteActiveDirectoryRequestActiveDirectoryAdminParams) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}

	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteActiveDirectoryRequestActiveDirectoryAdminParams) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// SetPassword sets field value
func (o *DeleteActiveDirectoryRequestActiveDirectoryAdminParams) SetPassword(v string) {
	o.Password.Set(&v)
}

// GetUsername returns the Username field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DeleteActiveDirectoryRequestActiveDirectoryAdminParams) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}

	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteActiveDirectoryRequestActiveDirectoryAdminParams) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// SetUsername sets field value
func (o *DeleteActiveDirectoryRequestActiveDirectoryAdminParams) SetUsername(v string) {
	o.Username.Set(&v)
}

func (o DeleteActiveDirectoryRequestActiveDirectoryAdminParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteActiveDirectoryRequestActiveDirectoryAdminParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password.Get()
	toSerialize["username"] = o.Username.Get()
	return toSerialize, nil
}

func (o *DeleteActiveDirectoryRequestActiveDirectoryAdminParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteActiveDirectoryRequestActiveDirectoryAdminParams := _DeleteActiveDirectoryRequestActiveDirectoryAdminParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteActiveDirectoryRequestActiveDirectoryAdminParams)

	if err != nil {
		return err
	}

	*o = DeleteActiveDirectoryRequestActiveDirectoryAdminParams(varDeleteActiveDirectoryRequestActiveDirectoryAdminParams)

	return err
}

type NullableDeleteActiveDirectoryRequestActiveDirectoryAdminParams struct {
	value *DeleteActiveDirectoryRequestActiveDirectoryAdminParams
	isSet bool
}

func (v NullableDeleteActiveDirectoryRequestActiveDirectoryAdminParams) Get() *DeleteActiveDirectoryRequestActiveDirectoryAdminParams {
	return v.value
}

func (v *NullableDeleteActiveDirectoryRequestActiveDirectoryAdminParams) Set(val *DeleteActiveDirectoryRequestActiveDirectoryAdminParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteActiveDirectoryRequestActiveDirectoryAdminParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteActiveDirectoryRequestActiveDirectoryAdminParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteActiveDirectoryRequestActiveDirectoryAdminParams(val *DeleteActiveDirectoryRequestActiveDirectoryAdminParams) *NullableDeleteActiveDirectoryRequestActiveDirectoryAdminParams {
	return &NullableDeleteActiveDirectoryRequestActiveDirectoryAdminParams{value: val, isSet: true}
}

func (v NullableDeleteActiveDirectoryRequestActiveDirectoryAdminParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteActiveDirectoryRequestActiveDirectoryAdminParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


