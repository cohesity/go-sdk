/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterPackageStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterPackageStatus{}

// ClusterPackageStatus Status of a package along with error message, if any.
type ClusterPackageStatus struct {
	// Error message if package is not available. 
	ErrorMsg *string `json:"errorMsg,omitempty"`
	// Status of the package * `Available` - Package is available for use. * `DownloadFailed` - Package download has failed. 
	Status string `json:"status"`
}

type _ClusterPackageStatus ClusterPackageStatus

// NewClusterPackageStatus instantiates a new ClusterPackageStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterPackageStatus(status string) *ClusterPackageStatus {
	this := ClusterPackageStatus{}
	this.Status = status
	return &this
}

// NewClusterPackageStatusWithDefaults instantiates a new ClusterPackageStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterPackageStatusWithDefaults() *ClusterPackageStatus {
	this := ClusterPackageStatus{}
	return &this
}

// GetErrorMsg returns the ErrorMsg field value if set, zero value otherwise.
func (o *ClusterPackageStatus) GetErrorMsg() string {
	if o == nil || IsNil(o.ErrorMsg) {
		var ret string
		return ret
	}
	return *o.ErrorMsg
}

// GetErrorMsgOk returns a tuple with the ErrorMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageStatus) GetErrorMsgOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMsg) {
		return nil, false
	}
	return o.ErrorMsg, true
}

// HasErrorMsg returns a boolean if a field has been set.
func (o *ClusterPackageStatus) HasErrorMsg() bool {
	if o != nil && !IsNil(o.ErrorMsg) {
		return true
	}

	return false
}

// SetErrorMsg gets a reference to the given string and assigns it to the ErrorMsg field.
func (o *ClusterPackageStatus) SetErrorMsg(v string) {
	o.ErrorMsg = &v
}

// GetStatus returns the Status field value
func (o *ClusterPackageStatus) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ClusterPackageStatus) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ClusterPackageStatus) SetStatus(v string) {
	o.Status = v
}

func (o ClusterPackageStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterPackageStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorMsg) {
		toSerialize["errorMsg"] = o.ErrorMsg
	}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *ClusterPackageStatus) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterPackageStatus := _ClusterPackageStatus{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterPackageStatus)

	if err != nil {
		return err
	}

	*o = ClusterPackageStatus(varClusterPackageStatus)

	return err
}

type NullableClusterPackageStatus struct {
	value *ClusterPackageStatus
	isSet bool
}

func (v NullableClusterPackageStatus) Get() *ClusterPackageStatus {
	return v.value
}

func (v *NullableClusterPackageStatus) Set(val *ClusterPackageStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterPackageStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterPackageStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterPackageStatus(val *ClusterPackageStatus) *NullableClusterPackageStatus {
	return &NullableClusterPackageStatus{value: val, isSet: true}
}

func (v NullableClusterPackageStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterPackageStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


