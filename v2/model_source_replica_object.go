/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SourceReplicaObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceReplicaObject{}

// SourceReplicaObject Specifies the response after succesfully initiating the failover request.
type SourceReplicaObject struct {
	// Specifies the object Id existing on the replciation cluster.
	ReplicaObjectId NullableInt64 `json:"replicaObjectId,omitempty"`
	// Specifies the corrosponding object id existing on the source cluster.
	SourceObjectId NullableInt64 `json:"sourceObjectId,omitempty"`
}

// NewSourceReplicaObject instantiates a new SourceReplicaObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceReplicaObject() *SourceReplicaObject {
	this := SourceReplicaObject{}
	return &this
}

// NewSourceReplicaObjectWithDefaults instantiates a new SourceReplicaObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceReplicaObjectWithDefaults() *SourceReplicaObject {
	this := SourceReplicaObject{}
	return &this
}

// GetReplicaObjectId returns the ReplicaObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceReplicaObject) GetReplicaObjectId() int64 {
	if o == nil || IsNil(o.ReplicaObjectId.Get()) {
		var ret int64
		return ret
	}
	return *o.ReplicaObjectId.Get()
}

// GetReplicaObjectIdOk returns a tuple with the ReplicaObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceReplicaObject) GetReplicaObjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReplicaObjectId.Get(), o.ReplicaObjectId.IsSet()
}

// HasReplicaObjectId returns a boolean if a field has been set.
func (o *SourceReplicaObject) HasReplicaObjectId() bool {
	if o != nil && o.ReplicaObjectId.IsSet() {
		return true
	}

	return false
}

// SetReplicaObjectId gets a reference to the given NullableInt64 and assigns it to the ReplicaObjectId field.
func (o *SourceReplicaObject) SetReplicaObjectId(v int64) {
	o.ReplicaObjectId.Set(&v)
}
// SetReplicaObjectIdNil sets the value for ReplicaObjectId to be an explicit nil
func (o *SourceReplicaObject) SetReplicaObjectIdNil() {
	o.ReplicaObjectId.Set(nil)
}

// UnsetReplicaObjectId ensures that no value is present for ReplicaObjectId, not even an explicit nil
func (o *SourceReplicaObject) UnsetReplicaObjectId() {
	o.ReplicaObjectId.Unset()
}

// GetSourceObjectId returns the SourceObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceReplicaObject) GetSourceObjectId() int64 {
	if o == nil || IsNil(o.SourceObjectId.Get()) {
		var ret int64
		return ret
	}
	return *o.SourceObjectId.Get()
}

// GetSourceObjectIdOk returns a tuple with the SourceObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceReplicaObject) GetSourceObjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceObjectId.Get(), o.SourceObjectId.IsSet()
}

// HasSourceObjectId returns a boolean if a field has been set.
func (o *SourceReplicaObject) HasSourceObjectId() bool {
	if o != nil && o.SourceObjectId.IsSet() {
		return true
	}

	return false
}

// SetSourceObjectId gets a reference to the given NullableInt64 and assigns it to the SourceObjectId field.
func (o *SourceReplicaObject) SetSourceObjectId(v int64) {
	o.SourceObjectId.Set(&v)
}
// SetSourceObjectIdNil sets the value for SourceObjectId to be an explicit nil
func (o *SourceReplicaObject) SetSourceObjectIdNil() {
	o.SourceObjectId.Set(nil)
}

// UnsetSourceObjectId ensures that no value is present for SourceObjectId, not even an explicit nil
func (o *SourceReplicaObject) UnsetSourceObjectId() {
	o.SourceObjectId.Unset()
}

func (o SourceReplicaObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceReplicaObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ReplicaObjectId.IsSet() {
		toSerialize["replicaObjectId"] = o.ReplicaObjectId.Get()
	}
	if o.SourceObjectId.IsSet() {
		toSerialize["sourceObjectId"] = o.SourceObjectId.Get()
	}
	return toSerialize, nil
}

type NullableSourceReplicaObject struct {
	value *SourceReplicaObject
	isSet bool
}

func (v NullableSourceReplicaObject) Get() *SourceReplicaObject {
	return v.value
}

func (v *NullableSourceReplicaObject) Set(val *SourceReplicaObject) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceReplicaObject) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceReplicaObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceReplicaObject(val *SourceReplicaObject) *NullableSourceReplicaObject {
	return &NullableSourceReplicaObject{value: val, isSet: true}
}

func (v NullableSourceReplicaObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceReplicaObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


