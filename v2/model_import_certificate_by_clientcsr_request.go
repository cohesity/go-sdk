/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImportCertificateByClientcsrRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportCertificateByClientcsrRequest{}

// ImportCertificateByClientcsrRequest Specifies the request to import a certificate.
type ImportCertificateByClientcsrRequest struct {
	// Specifies the client certificate to be imported.
	CertificateClient NullableString `json:"certificateClient"`
	// Specifies the server certificate to be imported.
	CertificateServer NullableString `json:"certificateServer"`
}

type _ImportCertificateByClientcsrRequest ImportCertificateByClientcsrRequest

// NewImportCertificateByClientcsrRequest instantiates a new ImportCertificateByClientcsrRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportCertificateByClientcsrRequest(certificateClient NullableString, certificateServer NullableString) *ImportCertificateByClientcsrRequest {
	this := ImportCertificateByClientcsrRequest{}
	this.CertificateClient = certificateClient
	this.CertificateServer = certificateServer
	return &this
}

// NewImportCertificateByClientcsrRequestWithDefaults instantiates a new ImportCertificateByClientcsrRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportCertificateByClientcsrRequestWithDefaults() *ImportCertificateByClientcsrRequest {
	this := ImportCertificateByClientcsrRequest{}
	return &this
}

// GetCertificateClient returns the CertificateClient field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ImportCertificateByClientcsrRequest) GetCertificateClient() string {
	if o == nil || o.CertificateClient.Get() == nil {
		var ret string
		return ret
	}

	return *o.CertificateClient.Get()
}

// GetCertificateClientOk returns a tuple with the CertificateClient field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportCertificateByClientcsrRequest) GetCertificateClientOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateClient.Get(), o.CertificateClient.IsSet()
}

// SetCertificateClient sets field value
func (o *ImportCertificateByClientcsrRequest) SetCertificateClient(v string) {
	o.CertificateClient.Set(&v)
}

// GetCertificateServer returns the CertificateServer field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ImportCertificateByClientcsrRequest) GetCertificateServer() string {
	if o == nil || o.CertificateServer.Get() == nil {
		var ret string
		return ret
	}

	return *o.CertificateServer.Get()
}

// GetCertificateServerOk returns a tuple with the CertificateServer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportCertificateByClientcsrRequest) GetCertificateServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateServer.Get(), o.CertificateServer.IsSet()
}

// SetCertificateServer sets field value
func (o *ImportCertificateByClientcsrRequest) SetCertificateServer(v string) {
	o.CertificateServer.Set(&v)
}

func (o ImportCertificateByClientcsrRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportCertificateByClientcsrRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificateClient"] = o.CertificateClient.Get()
	toSerialize["certificateServer"] = o.CertificateServer.Get()
	return toSerialize, nil
}

func (o *ImportCertificateByClientcsrRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificateClient",
		"certificateServer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportCertificateByClientcsrRequest := _ImportCertificateByClientcsrRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportCertificateByClientcsrRequest)

	if err != nil {
		return err
	}

	*o = ImportCertificateByClientcsrRequest(varImportCertificateByClientcsrRequest)

	return err
}

type NullableImportCertificateByClientcsrRequest struct {
	value *ImportCertificateByClientcsrRequest
	isSet bool
}

func (v NullableImportCertificateByClientcsrRequest) Get() *ImportCertificateByClientcsrRequest {
	return v.value
}

func (v *NullableImportCertificateByClientcsrRequest) Set(val *ImportCertificateByClientcsrRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportCertificateByClientcsrRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportCertificateByClientcsrRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportCertificateByClientcsrRequest(val *ImportCertificateByClientcsrRequest) *NullableImportCertificateByClientcsrRequest {
	return &NullableImportCertificateByClientcsrRequest{value: val, isSet: true}
}

func (v NullableImportCertificateByClientcsrRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportCertificateByClientcsrRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


