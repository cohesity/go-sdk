/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsSourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsSourceRegistrationParams{}

// AwsSourceRegistrationParams Specifies the paramaters to register an AWS source.
type AwsSourceRegistrationParams struct {
	DynamoDBParams *DynamoDBSpecificParams `json:"dynamoDBParams,omitempty"`
	// Specifies the dataplane region of cluster.
	RegionId NullableString `json:"regionId,omitempty"`
	S3Params *S3SpecificParams `json:"s3Params,omitempty"`
	StandardParams *StandardParams `json:"standardParams,omitempty"`
	// Specifies the AWS Subscription type (Commercial/Gov).
	SubscriptionType NullableString `json:"subscriptionType"`
	// The use cases for which the source is to be registered.
	UseCases []string `json:"useCases,omitempty"`
}

type _AwsSourceRegistrationParams AwsSourceRegistrationParams

// NewAwsSourceRegistrationParams instantiates a new AwsSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsSourceRegistrationParams(subscriptionType NullableString) *AwsSourceRegistrationParams {
	this := AwsSourceRegistrationParams{}
	this.SubscriptionType = subscriptionType
	return &this
}

// NewAwsSourceRegistrationParamsWithDefaults instantiates a new AwsSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsSourceRegistrationParamsWithDefaults() *AwsSourceRegistrationParams {
	this := AwsSourceRegistrationParams{}
	return &this
}

// GetDynamoDBParams returns the DynamoDBParams field value if set, zero value otherwise.
func (o *AwsSourceRegistrationParams) GetDynamoDBParams() DynamoDBSpecificParams {
	if o == nil || IsNil(o.DynamoDBParams) {
		var ret DynamoDBSpecificParams
		return ret
	}
	return *o.DynamoDBParams
}

// GetDynamoDBParamsOk returns a tuple with the DynamoDBParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsSourceRegistrationParams) GetDynamoDBParamsOk() (*DynamoDBSpecificParams, bool) {
	if o == nil || IsNil(o.DynamoDBParams) {
		return nil, false
	}
	return o.DynamoDBParams, true
}

// HasDynamoDBParams returns a boolean if a field has been set.
func (o *AwsSourceRegistrationParams) HasDynamoDBParams() bool {
	if o != nil && !IsNil(o.DynamoDBParams) {
		return true
	}

	return false
}

// SetDynamoDBParams gets a reference to the given DynamoDBSpecificParams and assigns it to the DynamoDBParams field.
func (o *AwsSourceRegistrationParams) SetDynamoDBParams(v DynamoDBSpecificParams) {
	o.DynamoDBParams = &v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsSourceRegistrationParams) GetRegionId() string {
	if o == nil || IsNil(o.RegionId.Get()) {
		var ret string
		return ret
	}
	return *o.RegionId.Get()
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsSourceRegistrationParams) GetRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegionId.Get(), o.RegionId.IsSet()
}

// HasRegionId returns a boolean if a field has been set.
func (o *AwsSourceRegistrationParams) HasRegionId() bool {
	if o != nil && o.RegionId.IsSet() {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given NullableString and assigns it to the RegionId field.
func (o *AwsSourceRegistrationParams) SetRegionId(v string) {
	o.RegionId.Set(&v)
}
// SetRegionIdNil sets the value for RegionId to be an explicit nil
func (o *AwsSourceRegistrationParams) SetRegionIdNil() {
	o.RegionId.Set(nil)
}

// UnsetRegionId ensures that no value is present for RegionId, not even an explicit nil
func (o *AwsSourceRegistrationParams) UnsetRegionId() {
	o.RegionId.Unset()
}

// GetS3Params returns the S3Params field value if set, zero value otherwise.
func (o *AwsSourceRegistrationParams) GetS3Params() S3SpecificParams {
	if o == nil || IsNil(o.S3Params) {
		var ret S3SpecificParams
		return ret
	}
	return *o.S3Params
}

// GetS3ParamsOk returns a tuple with the S3Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsSourceRegistrationParams) GetS3ParamsOk() (*S3SpecificParams, bool) {
	if o == nil || IsNil(o.S3Params) {
		return nil, false
	}
	return o.S3Params, true
}

// HasS3Params returns a boolean if a field has been set.
func (o *AwsSourceRegistrationParams) HasS3Params() bool {
	if o != nil && !IsNil(o.S3Params) {
		return true
	}

	return false
}

// SetS3Params gets a reference to the given S3SpecificParams and assigns it to the S3Params field.
func (o *AwsSourceRegistrationParams) SetS3Params(v S3SpecificParams) {
	o.S3Params = &v
}

// GetStandardParams returns the StandardParams field value if set, zero value otherwise.
func (o *AwsSourceRegistrationParams) GetStandardParams() StandardParams {
	if o == nil || IsNil(o.StandardParams) {
		var ret StandardParams
		return ret
	}
	return *o.StandardParams
}

// GetStandardParamsOk returns a tuple with the StandardParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsSourceRegistrationParams) GetStandardParamsOk() (*StandardParams, bool) {
	if o == nil || IsNil(o.StandardParams) {
		return nil, false
	}
	return o.StandardParams, true
}

// HasStandardParams returns a boolean if a field has been set.
func (o *AwsSourceRegistrationParams) HasStandardParams() bool {
	if o != nil && !IsNil(o.StandardParams) {
		return true
	}

	return false
}

// SetStandardParams gets a reference to the given StandardParams and assigns it to the StandardParams field.
func (o *AwsSourceRegistrationParams) SetStandardParams(v StandardParams) {
	o.StandardParams = &v
}

// GetSubscriptionType returns the SubscriptionType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsSourceRegistrationParams) GetSubscriptionType() string {
	if o == nil || o.SubscriptionType.Get() == nil {
		var ret string
		return ret
	}

	return *o.SubscriptionType.Get()
}

// GetSubscriptionTypeOk returns a tuple with the SubscriptionType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsSourceRegistrationParams) GetSubscriptionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubscriptionType.Get(), o.SubscriptionType.IsSet()
}

// SetSubscriptionType sets field value
func (o *AwsSourceRegistrationParams) SetSubscriptionType(v string) {
	o.SubscriptionType.Set(&v)
}

// GetUseCases returns the UseCases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsSourceRegistrationParams) GetUseCases() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UseCases
}

// GetUseCasesOk returns a tuple with the UseCases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsSourceRegistrationParams) GetUseCasesOk() ([]string, bool) {
	if o == nil || IsNil(o.UseCases) {
		return nil, false
	}
	return o.UseCases, true
}

// HasUseCases returns a boolean if a field has been set.
func (o *AwsSourceRegistrationParams) HasUseCases() bool {
	if o != nil && !IsNil(o.UseCases) {
		return true
	}

	return false
}

// SetUseCases gets a reference to the given []string and assigns it to the UseCases field.
func (o *AwsSourceRegistrationParams) SetUseCases(v []string) {
	o.UseCases = v
}

func (o AwsSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsSourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DynamoDBParams) {
		toSerialize["dynamoDBParams"] = o.DynamoDBParams
	}
	if o.RegionId.IsSet() {
		toSerialize["regionId"] = o.RegionId.Get()
	}
	if !IsNil(o.S3Params) {
		toSerialize["s3Params"] = o.S3Params
	}
	if !IsNil(o.StandardParams) {
		toSerialize["standardParams"] = o.StandardParams
	}
	toSerialize["subscriptionType"] = o.SubscriptionType.Get()
	if o.UseCases != nil {
		toSerialize["useCases"] = o.UseCases
	}
	return toSerialize, nil
}

func (o *AwsSourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subscriptionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsSourceRegistrationParams := _AwsSourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsSourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = AwsSourceRegistrationParams(varAwsSourceRegistrationParams)

	return err
}

type NullableAwsSourceRegistrationParams struct {
	value *AwsSourceRegistrationParams
	isSet bool
}

func (v NullableAwsSourceRegistrationParams) Get() *AwsSourceRegistrationParams {
	return v.value
}

func (v *NullableAwsSourceRegistrationParams) Set(val *AwsSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsSourceRegistrationParams(val *AwsSourceRegistrationParams) *NullableAwsSourceRegistrationParams {
	return &NullableAwsSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableAwsSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


