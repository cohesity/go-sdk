/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterCreateNetworkConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterCreateNetworkConfig{}

// ClusterCreateNetworkConfig Specifies all of the parameters needed for network configuration of the new Cluster.
type ClusterCreateNetworkConfig struct {
	DhcpNetworkConfig *ClusterDhcpNetworkConfig `json:"dhcpNetworkConfig,omitempty"`
	// Specifies the list of Domain Names new cluster should be configured with.
	DomainNames []string `json:"domainNames"`
	// Specifies IP preference of the cluster to be Ipv4/Ipv6. It is Ipv4 by default.
	IpPreference NullableString `json:"ipPreference,omitempty"`
	ManualNetworkConfig *ClusterManualNetworkConfig `json:"manualNetworkConfig,omitempty"`
	// Specifies the list of NTP Servers new cluster should be configured with.
	NtpServers []string `json:"ntpServers"`
	SecondaryDhcpNetworkConfig *ClusterDhcpNetworkConfig `json:"secondaryDhcpNetworkConfig,omitempty"`
	SecondaryManualNetworkConfig *ClusterManualNetworkConfig `json:"secondaryManualNetworkConfig,omitempty"`
	// Specifies whether or not to use DHCP to configure the network of the Cluster.
	UseDhcp NullableBool `json:"useDhcp"`
	// Specifies the FQDN hostname of the cluster.
	VipHostName NullableString `json:"vipHostName,omitempty"`
}

type _ClusterCreateNetworkConfig ClusterCreateNetworkConfig

// NewClusterCreateNetworkConfig instantiates a new ClusterCreateNetworkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterCreateNetworkConfig(domainNames []string, ntpServers []string, useDhcp NullableBool) *ClusterCreateNetworkConfig {
	this := ClusterCreateNetworkConfig{}
	this.DomainNames = domainNames
	this.NtpServers = ntpServers
	this.UseDhcp = useDhcp
	return &this
}

// NewClusterCreateNetworkConfigWithDefaults instantiates a new ClusterCreateNetworkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterCreateNetworkConfigWithDefaults() *ClusterCreateNetworkConfig {
	this := ClusterCreateNetworkConfig{}
	return &this
}

// GetDhcpNetworkConfig returns the DhcpNetworkConfig field value if set, zero value otherwise.
func (o *ClusterCreateNetworkConfig) GetDhcpNetworkConfig() ClusterDhcpNetworkConfig {
	if o == nil || IsNil(o.DhcpNetworkConfig) {
		var ret ClusterDhcpNetworkConfig
		return ret
	}
	return *o.DhcpNetworkConfig
}

// GetDhcpNetworkConfigOk returns a tuple with the DhcpNetworkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterCreateNetworkConfig) GetDhcpNetworkConfigOk() (*ClusterDhcpNetworkConfig, bool) {
	if o == nil || IsNil(o.DhcpNetworkConfig) {
		return nil, false
	}
	return o.DhcpNetworkConfig, true
}

// HasDhcpNetworkConfig returns a boolean if a field has been set.
func (o *ClusterCreateNetworkConfig) HasDhcpNetworkConfig() bool {
	if o != nil && !IsNil(o.DhcpNetworkConfig) {
		return true
	}

	return false
}

// SetDhcpNetworkConfig gets a reference to the given ClusterDhcpNetworkConfig and assigns it to the DhcpNetworkConfig field.
func (o *ClusterCreateNetworkConfig) SetDhcpNetworkConfig(v ClusterDhcpNetworkConfig) {
	o.DhcpNetworkConfig = &v
}

// GetDomainNames returns the DomainNames field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ClusterCreateNetworkConfig) GetDomainNames() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DomainNames
}

// GetDomainNamesOk returns a tuple with the DomainNames field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterCreateNetworkConfig) GetDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.DomainNames) {
		return nil, false
	}
	return o.DomainNames, true
}

// SetDomainNames sets field value
func (o *ClusterCreateNetworkConfig) SetDomainNames(v []string) {
	o.DomainNames = v
}

// GetIpPreference returns the IpPreference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterCreateNetworkConfig) GetIpPreference() string {
	if o == nil || IsNil(o.IpPreference.Get()) {
		var ret string
		return ret
	}
	return *o.IpPreference.Get()
}

// GetIpPreferenceOk returns a tuple with the IpPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterCreateNetworkConfig) GetIpPreferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpPreference.Get(), o.IpPreference.IsSet()
}

// HasIpPreference returns a boolean if a field has been set.
func (o *ClusterCreateNetworkConfig) HasIpPreference() bool {
	if o != nil && o.IpPreference.IsSet() {
		return true
	}

	return false
}

// SetIpPreference gets a reference to the given NullableString and assigns it to the IpPreference field.
func (o *ClusterCreateNetworkConfig) SetIpPreference(v string) {
	o.IpPreference.Set(&v)
}
// SetIpPreferenceNil sets the value for IpPreference to be an explicit nil
func (o *ClusterCreateNetworkConfig) SetIpPreferenceNil() {
	o.IpPreference.Set(nil)
}

// UnsetIpPreference ensures that no value is present for IpPreference, not even an explicit nil
func (o *ClusterCreateNetworkConfig) UnsetIpPreference() {
	o.IpPreference.Unset()
}

// GetManualNetworkConfig returns the ManualNetworkConfig field value if set, zero value otherwise.
func (o *ClusterCreateNetworkConfig) GetManualNetworkConfig() ClusterManualNetworkConfig {
	if o == nil || IsNil(o.ManualNetworkConfig) {
		var ret ClusterManualNetworkConfig
		return ret
	}
	return *o.ManualNetworkConfig
}

// GetManualNetworkConfigOk returns a tuple with the ManualNetworkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterCreateNetworkConfig) GetManualNetworkConfigOk() (*ClusterManualNetworkConfig, bool) {
	if o == nil || IsNil(o.ManualNetworkConfig) {
		return nil, false
	}
	return o.ManualNetworkConfig, true
}

// HasManualNetworkConfig returns a boolean if a field has been set.
func (o *ClusterCreateNetworkConfig) HasManualNetworkConfig() bool {
	if o != nil && !IsNil(o.ManualNetworkConfig) {
		return true
	}

	return false
}

// SetManualNetworkConfig gets a reference to the given ClusterManualNetworkConfig and assigns it to the ManualNetworkConfig field.
func (o *ClusterCreateNetworkConfig) SetManualNetworkConfig(v ClusterManualNetworkConfig) {
	o.ManualNetworkConfig = &v
}

// GetNtpServers returns the NtpServers field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ClusterCreateNetworkConfig) GetNtpServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.NtpServers
}

// GetNtpServersOk returns a tuple with the NtpServers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterCreateNetworkConfig) GetNtpServersOk() ([]string, bool) {
	if o == nil || IsNil(o.NtpServers) {
		return nil, false
	}
	return o.NtpServers, true
}

// SetNtpServers sets field value
func (o *ClusterCreateNetworkConfig) SetNtpServers(v []string) {
	o.NtpServers = v
}

// GetSecondaryDhcpNetworkConfig returns the SecondaryDhcpNetworkConfig field value if set, zero value otherwise.
func (o *ClusterCreateNetworkConfig) GetSecondaryDhcpNetworkConfig() ClusterDhcpNetworkConfig {
	if o == nil || IsNil(o.SecondaryDhcpNetworkConfig) {
		var ret ClusterDhcpNetworkConfig
		return ret
	}
	return *o.SecondaryDhcpNetworkConfig
}

// GetSecondaryDhcpNetworkConfigOk returns a tuple with the SecondaryDhcpNetworkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterCreateNetworkConfig) GetSecondaryDhcpNetworkConfigOk() (*ClusterDhcpNetworkConfig, bool) {
	if o == nil || IsNil(o.SecondaryDhcpNetworkConfig) {
		return nil, false
	}
	return o.SecondaryDhcpNetworkConfig, true
}

// HasSecondaryDhcpNetworkConfig returns a boolean if a field has been set.
func (o *ClusterCreateNetworkConfig) HasSecondaryDhcpNetworkConfig() bool {
	if o != nil && !IsNil(o.SecondaryDhcpNetworkConfig) {
		return true
	}

	return false
}

// SetSecondaryDhcpNetworkConfig gets a reference to the given ClusterDhcpNetworkConfig and assigns it to the SecondaryDhcpNetworkConfig field.
func (o *ClusterCreateNetworkConfig) SetSecondaryDhcpNetworkConfig(v ClusterDhcpNetworkConfig) {
	o.SecondaryDhcpNetworkConfig = &v
}

// GetSecondaryManualNetworkConfig returns the SecondaryManualNetworkConfig field value if set, zero value otherwise.
func (o *ClusterCreateNetworkConfig) GetSecondaryManualNetworkConfig() ClusterManualNetworkConfig {
	if o == nil || IsNil(o.SecondaryManualNetworkConfig) {
		var ret ClusterManualNetworkConfig
		return ret
	}
	return *o.SecondaryManualNetworkConfig
}

// GetSecondaryManualNetworkConfigOk returns a tuple with the SecondaryManualNetworkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterCreateNetworkConfig) GetSecondaryManualNetworkConfigOk() (*ClusterManualNetworkConfig, bool) {
	if o == nil || IsNil(o.SecondaryManualNetworkConfig) {
		return nil, false
	}
	return o.SecondaryManualNetworkConfig, true
}

// HasSecondaryManualNetworkConfig returns a boolean if a field has been set.
func (o *ClusterCreateNetworkConfig) HasSecondaryManualNetworkConfig() bool {
	if o != nil && !IsNil(o.SecondaryManualNetworkConfig) {
		return true
	}

	return false
}

// SetSecondaryManualNetworkConfig gets a reference to the given ClusterManualNetworkConfig and assigns it to the SecondaryManualNetworkConfig field.
func (o *ClusterCreateNetworkConfig) SetSecondaryManualNetworkConfig(v ClusterManualNetworkConfig) {
	o.SecondaryManualNetworkConfig = &v
}

// GetUseDhcp returns the UseDhcp field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ClusterCreateNetworkConfig) GetUseDhcp() bool {
	if o == nil || o.UseDhcp.Get() == nil {
		var ret bool
		return ret
	}

	return *o.UseDhcp.Get()
}

// GetUseDhcpOk returns a tuple with the UseDhcp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterCreateNetworkConfig) GetUseDhcpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseDhcp.Get(), o.UseDhcp.IsSet()
}

// SetUseDhcp sets field value
func (o *ClusterCreateNetworkConfig) SetUseDhcp(v bool) {
	o.UseDhcp.Set(&v)
}

// GetVipHostName returns the VipHostName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterCreateNetworkConfig) GetVipHostName() string {
	if o == nil || IsNil(o.VipHostName.Get()) {
		var ret string
		return ret
	}
	return *o.VipHostName.Get()
}

// GetVipHostNameOk returns a tuple with the VipHostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterCreateNetworkConfig) GetVipHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VipHostName.Get(), o.VipHostName.IsSet()
}

// HasVipHostName returns a boolean if a field has been set.
func (o *ClusterCreateNetworkConfig) HasVipHostName() bool {
	if o != nil && o.VipHostName.IsSet() {
		return true
	}

	return false
}

// SetVipHostName gets a reference to the given NullableString and assigns it to the VipHostName field.
func (o *ClusterCreateNetworkConfig) SetVipHostName(v string) {
	o.VipHostName.Set(&v)
}
// SetVipHostNameNil sets the value for VipHostName to be an explicit nil
func (o *ClusterCreateNetworkConfig) SetVipHostNameNil() {
	o.VipHostName.Set(nil)
}

// UnsetVipHostName ensures that no value is present for VipHostName, not even an explicit nil
func (o *ClusterCreateNetworkConfig) UnsetVipHostName() {
	o.VipHostName.Unset()
}

func (o ClusterCreateNetworkConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterCreateNetworkConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DhcpNetworkConfig) {
		toSerialize["dhcpNetworkConfig"] = o.DhcpNetworkConfig
	}
	if o.DomainNames != nil {
		toSerialize["domainNames"] = o.DomainNames
	}
	if o.IpPreference.IsSet() {
		toSerialize["ipPreference"] = o.IpPreference.Get()
	}
	if !IsNil(o.ManualNetworkConfig) {
		toSerialize["manualNetworkConfig"] = o.ManualNetworkConfig
	}
	if o.NtpServers != nil {
		toSerialize["ntpServers"] = o.NtpServers
	}
	if !IsNil(o.SecondaryDhcpNetworkConfig) {
		toSerialize["secondaryDhcpNetworkConfig"] = o.SecondaryDhcpNetworkConfig
	}
	if !IsNil(o.SecondaryManualNetworkConfig) {
		toSerialize["secondaryManualNetworkConfig"] = o.SecondaryManualNetworkConfig
	}
	toSerialize["useDhcp"] = o.UseDhcp.Get()
	if o.VipHostName.IsSet() {
		toSerialize["vipHostName"] = o.VipHostName.Get()
	}
	return toSerialize, nil
}

func (o *ClusterCreateNetworkConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domainNames",
		"ntpServers",
		"useDhcp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterCreateNetworkConfig := _ClusterCreateNetworkConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterCreateNetworkConfig)

	if err != nil {
		return err
	}

	*o = ClusterCreateNetworkConfig(varClusterCreateNetworkConfig)

	return err
}

type NullableClusterCreateNetworkConfig struct {
	value *ClusterCreateNetworkConfig
	isSet bool
}

func (v NullableClusterCreateNetworkConfig) Get() *ClusterCreateNetworkConfig {
	return v.value
}

func (v *NullableClusterCreateNetworkConfig) Set(val *ClusterCreateNetworkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterCreateNetworkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterCreateNetworkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterCreateNetworkConfig(val *ClusterCreateNetworkConfig) *NullableClusterCreateNetworkConfig {
	return &NullableClusterCreateNetworkConfig{value: val, isSet: true}
}

func (v NullableClusterCreateNetworkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterCreateNetworkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


