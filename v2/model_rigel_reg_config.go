/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RigelRegConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RigelRegConfig{}

// RigelRegConfig Specifies the Rigel Registration Config.
type RigelRegConfig struct {
	ControlPlaneConnectionInfo *RigelConnectionInfo `json:"controlPlaneConnectionInfo,omitempty"`
	DataPlaneConnectionInfo *RigelConnectionInfo `json:"dataPlaneConnectionInfo,omitempty"`
	// Flag to indicate if certificate is valid.
	IsCertificateValid NullableBool `json:"isCertificateValid,omitempty"`
	RegInfo *RigelClaimInfo `json:"regInfo,omitempty"`
}

// NewRigelRegConfig instantiates a new RigelRegConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRigelRegConfig() *RigelRegConfig {
	this := RigelRegConfig{}
	return &this
}

// NewRigelRegConfigWithDefaults instantiates a new RigelRegConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRigelRegConfigWithDefaults() *RigelRegConfig {
	this := RigelRegConfig{}
	return &this
}

// GetControlPlaneConnectionInfo returns the ControlPlaneConnectionInfo field value if set, zero value otherwise.
func (o *RigelRegConfig) GetControlPlaneConnectionInfo() RigelConnectionInfo {
	if o == nil || IsNil(o.ControlPlaneConnectionInfo) {
		var ret RigelConnectionInfo
		return ret
	}
	return *o.ControlPlaneConnectionInfo
}

// GetControlPlaneConnectionInfoOk returns a tuple with the ControlPlaneConnectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RigelRegConfig) GetControlPlaneConnectionInfoOk() (*RigelConnectionInfo, bool) {
	if o == nil || IsNil(o.ControlPlaneConnectionInfo) {
		return nil, false
	}
	return o.ControlPlaneConnectionInfo, true
}

// HasControlPlaneConnectionInfo returns a boolean if a field has been set.
func (o *RigelRegConfig) HasControlPlaneConnectionInfo() bool {
	if o != nil && !IsNil(o.ControlPlaneConnectionInfo) {
		return true
	}

	return false
}

// SetControlPlaneConnectionInfo gets a reference to the given RigelConnectionInfo and assigns it to the ControlPlaneConnectionInfo field.
func (o *RigelRegConfig) SetControlPlaneConnectionInfo(v RigelConnectionInfo) {
	o.ControlPlaneConnectionInfo = &v
}

// GetDataPlaneConnectionInfo returns the DataPlaneConnectionInfo field value if set, zero value otherwise.
func (o *RigelRegConfig) GetDataPlaneConnectionInfo() RigelConnectionInfo {
	if o == nil || IsNil(o.DataPlaneConnectionInfo) {
		var ret RigelConnectionInfo
		return ret
	}
	return *o.DataPlaneConnectionInfo
}

// GetDataPlaneConnectionInfoOk returns a tuple with the DataPlaneConnectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RigelRegConfig) GetDataPlaneConnectionInfoOk() (*RigelConnectionInfo, bool) {
	if o == nil || IsNil(o.DataPlaneConnectionInfo) {
		return nil, false
	}
	return o.DataPlaneConnectionInfo, true
}

// HasDataPlaneConnectionInfo returns a boolean if a field has been set.
func (o *RigelRegConfig) HasDataPlaneConnectionInfo() bool {
	if o != nil && !IsNil(o.DataPlaneConnectionInfo) {
		return true
	}

	return false
}

// SetDataPlaneConnectionInfo gets a reference to the given RigelConnectionInfo and assigns it to the DataPlaneConnectionInfo field.
func (o *RigelRegConfig) SetDataPlaneConnectionInfo(v RigelConnectionInfo) {
	o.DataPlaneConnectionInfo = &v
}

// GetIsCertificateValid returns the IsCertificateValid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelRegConfig) GetIsCertificateValid() bool {
	if o == nil || IsNil(o.IsCertificateValid.Get()) {
		var ret bool
		return ret
	}
	return *o.IsCertificateValid.Get()
}

// GetIsCertificateValidOk returns a tuple with the IsCertificateValid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelRegConfig) GetIsCertificateValidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsCertificateValid.Get(), o.IsCertificateValid.IsSet()
}

// HasIsCertificateValid returns a boolean if a field has been set.
func (o *RigelRegConfig) HasIsCertificateValid() bool {
	if o != nil && o.IsCertificateValid.IsSet() {
		return true
	}

	return false
}

// SetIsCertificateValid gets a reference to the given NullableBool and assigns it to the IsCertificateValid field.
func (o *RigelRegConfig) SetIsCertificateValid(v bool) {
	o.IsCertificateValid.Set(&v)
}
// SetIsCertificateValidNil sets the value for IsCertificateValid to be an explicit nil
func (o *RigelRegConfig) SetIsCertificateValidNil() {
	o.IsCertificateValid.Set(nil)
}

// UnsetIsCertificateValid ensures that no value is present for IsCertificateValid, not even an explicit nil
func (o *RigelRegConfig) UnsetIsCertificateValid() {
	o.IsCertificateValid.Unset()
}

// GetRegInfo returns the RegInfo field value if set, zero value otherwise.
func (o *RigelRegConfig) GetRegInfo() RigelClaimInfo {
	if o == nil || IsNil(o.RegInfo) {
		var ret RigelClaimInfo
		return ret
	}
	return *o.RegInfo
}

// GetRegInfoOk returns a tuple with the RegInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RigelRegConfig) GetRegInfoOk() (*RigelClaimInfo, bool) {
	if o == nil || IsNil(o.RegInfo) {
		return nil, false
	}
	return o.RegInfo, true
}

// HasRegInfo returns a boolean if a field has been set.
func (o *RigelRegConfig) HasRegInfo() bool {
	if o != nil && !IsNil(o.RegInfo) {
		return true
	}

	return false
}

// SetRegInfo gets a reference to the given RigelClaimInfo and assigns it to the RegInfo field.
func (o *RigelRegConfig) SetRegInfo(v RigelClaimInfo) {
	o.RegInfo = &v
}

func (o RigelRegConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RigelRegConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ControlPlaneConnectionInfo) {
		toSerialize["controlPlaneConnectionInfo"] = o.ControlPlaneConnectionInfo
	}
	if !IsNil(o.DataPlaneConnectionInfo) {
		toSerialize["dataPlaneConnectionInfo"] = o.DataPlaneConnectionInfo
	}
	if o.IsCertificateValid.IsSet() {
		toSerialize["isCertificateValid"] = o.IsCertificateValid.Get()
	}
	if !IsNil(o.RegInfo) {
		toSerialize["regInfo"] = o.RegInfo
	}
	return toSerialize, nil
}

type NullableRigelRegConfig struct {
	value *RigelRegConfig
	isSet bool
}

func (v NullableRigelRegConfig) Get() *RigelRegConfig {
	return v.value
}

func (v *NullableRigelRegConfig) Set(val *RigelRegConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRigelRegConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRigelRegConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRigelRegConfig(val *RigelRegConfig) *NullableRigelRegConfig {
	return &NullableRigelRegConfig{value: val, isSet: true}
}

func (v NullableRigelRegConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRigelRegConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


