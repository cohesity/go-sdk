/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NasThrottlingConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NasThrottlingConfig{}

// NasThrottlingConfig Specifies the source throttling parameters to be used during full or incremental backup of the NAS source.
type NasThrottlingConfig struct {
	FullBackupConfig *NasFullThrottlingConfig `json:"fullBackupConfig,omitempty"`
	IncrementalBackupConfig *NasIncrementalThrottlingConfig `json:"incrementalBackupConfig,omitempty"`
}

// NewNasThrottlingConfig instantiates a new NasThrottlingConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNasThrottlingConfig() *NasThrottlingConfig {
	this := NasThrottlingConfig{}
	return &this
}

// NewNasThrottlingConfigWithDefaults instantiates a new NasThrottlingConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNasThrottlingConfigWithDefaults() *NasThrottlingConfig {
	this := NasThrottlingConfig{}
	return &this
}

// GetFullBackupConfig returns the FullBackupConfig field value if set, zero value otherwise.
func (o *NasThrottlingConfig) GetFullBackupConfig() NasFullThrottlingConfig {
	if o == nil || IsNil(o.FullBackupConfig) {
		var ret NasFullThrottlingConfig
		return ret
	}
	return *o.FullBackupConfig
}

// GetFullBackupConfigOk returns a tuple with the FullBackupConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasThrottlingConfig) GetFullBackupConfigOk() (*NasFullThrottlingConfig, bool) {
	if o == nil || IsNil(o.FullBackupConfig) {
		return nil, false
	}
	return o.FullBackupConfig, true
}

// HasFullBackupConfig returns a boolean if a field has been set.
func (o *NasThrottlingConfig) HasFullBackupConfig() bool {
	if o != nil && !IsNil(o.FullBackupConfig) {
		return true
	}

	return false
}

// SetFullBackupConfig gets a reference to the given NasFullThrottlingConfig and assigns it to the FullBackupConfig field.
func (o *NasThrottlingConfig) SetFullBackupConfig(v NasFullThrottlingConfig) {
	o.FullBackupConfig = &v
}

// GetIncrementalBackupConfig returns the IncrementalBackupConfig field value if set, zero value otherwise.
func (o *NasThrottlingConfig) GetIncrementalBackupConfig() NasIncrementalThrottlingConfig {
	if o == nil || IsNil(o.IncrementalBackupConfig) {
		var ret NasIncrementalThrottlingConfig
		return ret
	}
	return *o.IncrementalBackupConfig
}

// GetIncrementalBackupConfigOk returns a tuple with the IncrementalBackupConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasThrottlingConfig) GetIncrementalBackupConfigOk() (*NasIncrementalThrottlingConfig, bool) {
	if o == nil || IsNil(o.IncrementalBackupConfig) {
		return nil, false
	}
	return o.IncrementalBackupConfig, true
}

// HasIncrementalBackupConfig returns a boolean if a field has been set.
func (o *NasThrottlingConfig) HasIncrementalBackupConfig() bool {
	if o != nil && !IsNil(o.IncrementalBackupConfig) {
		return true
	}

	return false
}

// SetIncrementalBackupConfig gets a reference to the given NasIncrementalThrottlingConfig and assigns it to the IncrementalBackupConfig field.
func (o *NasThrottlingConfig) SetIncrementalBackupConfig(v NasIncrementalThrottlingConfig) {
	o.IncrementalBackupConfig = &v
}

func (o NasThrottlingConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NasThrottlingConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FullBackupConfig) {
		toSerialize["fullBackupConfig"] = o.FullBackupConfig
	}
	if !IsNil(o.IncrementalBackupConfig) {
		toSerialize["incrementalBackupConfig"] = o.IncrementalBackupConfig
	}
	return toSerialize, nil
}

type NullableNasThrottlingConfig struct {
	value *NasThrottlingConfig
	isSet bool
}

func (v NullableNasThrottlingConfig) Get() *NasThrottlingConfig {
	return v.value
}

func (v *NullableNasThrottlingConfig) Set(val *NasThrottlingConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNasThrottlingConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNasThrottlingConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNasThrottlingConfig(val *NasThrottlingConfig) *NullableNasThrottlingConfig {
	return &NullableNasThrottlingConfig{value: val, isSet: true}
}

func (v NullableNasThrottlingConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNasThrottlingConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


