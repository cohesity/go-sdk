/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HdfsSourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HdfsSourceRegistrationParams{}

// HdfsSourceRegistrationParams Specifies parameters to register an HDFS source.
type HdfsSourceRegistrationParams struct {
	// Authentication type.
	AuthType NullableString `json:"authType,omitempty"`
	// The HDFS Namenode IP or hostname.
	NamenodeAddress *string `json:"namenodeAddress,omitempty"`
	// The HDFS WebHDFS port.
	WebhdfsPort *int32 `json:"webhdfsPort,omitempty"`
	// The directory containing the core-site.xml and hdfs-site.xml configuration files.
	ConfigurationDirectory string `json:"configurationDirectory"`
	// HDFS Connection Type.
	ConnectionType NullableString `json:"connectionType,omitempty"`
	// The hadoop distribution for this cluster. This can be either 'CDH' or 'HDP'
	HadoopDistribution string `json:"hadoopDistribution"`
	// The hadoop version for this cluster.
	HadoopVersion string `json:"hadoopVersion"`
	// IP or hostname of any host from which the HDFS configuration files core-site.xml and hdfs-site.xml can be read.
	Host string `json:"host"`
	// The kerberos principal to be used to connect to this HDFS source.
	KerberosPrincipal NullableString `json:"kerberosPrincipal,omitempty"`
	SshPasswordCredentials NullableHbaseSourceRegistrationParamsAllOfSshPasswordCredentials `json:"sshPasswordCredentials,omitempty"`
	SshPrivateKeyCredentials NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
}

type _HdfsSourceRegistrationParams HdfsSourceRegistrationParams

// NewHdfsSourceRegistrationParams instantiates a new HdfsSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHdfsSourceRegistrationParams(configurationDirectory string, hadoopDistribution string, hadoopVersion string, host string) *HdfsSourceRegistrationParams {
	this := HdfsSourceRegistrationParams{}
	this.ConfigurationDirectory = configurationDirectory
	this.HadoopDistribution = hadoopDistribution
	this.HadoopVersion = hadoopVersion
	this.Host = host
	return &this
}

// NewHdfsSourceRegistrationParamsWithDefaults instantiates a new HdfsSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHdfsSourceRegistrationParamsWithDefaults() *HdfsSourceRegistrationParams {
	this := HdfsSourceRegistrationParams{}
	return &this
}

// GetAuthType returns the AuthType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationParams) GetAuthType() string {
	if o == nil || IsNil(o.AuthType.Get()) {
		var ret string
		return ret
	}
	return *o.AuthType.Get()
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationParams) GetAuthTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthType.Get(), o.AuthType.IsSet()
}

// HasAuthType returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationParams) HasAuthType() bool {
	if o != nil && o.AuthType.IsSet() {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given NullableString and assigns it to the AuthType field.
func (o *HdfsSourceRegistrationParams) SetAuthType(v string) {
	o.AuthType.Set(&v)
}
// SetAuthTypeNil sets the value for AuthType to be an explicit nil
func (o *HdfsSourceRegistrationParams) SetAuthTypeNil() {
	o.AuthType.Set(nil)
}

// UnsetAuthType ensures that no value is present for AuthType, not even an explicit nil
func (o *HdfsSourceRegistrationParams) UnsetAuthType() {
	o.AuthType.Unset()
}

// GetNamenodeAddress returns the NamenodeAddress field value if set, zero value otherwise.
func (o *HdfsSourceRegistrationParams) GetNamenodeAddress() string {
	if o == nil || IsNil(o.NamenodeAddress) {
		var ret string
		return ret
	}
	return *o.NamenodeAddress
}

// GetNamenodeAddressOk returns a tuple with the NamenodeAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HdfsSourceRegistrationParams) GetNamenodeAddressOk() (*string, bool) {
	if o == nil || IsNil(o.NamenodeAddress) {
		return nil, false
	}
	return o.NamenodeAddress, true
}

// HasNamenodeAddress returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationParams) HasNamenodeAddress() bool {
	if o != nil && !IsNil(o.NamenodeAddress) {
		return true
	}

	return false
}

// SetNamenodeAddress gets a reference to the given string and assigns it to the NamenodeAddress field.
func (o *HdfsSourceRegistrationParams) SetNamenodeAddress(v string) {
	o.NamenodeAddress = &v
}

// GetWebhdfsPort returns the WebhdfsPort field value if set, zero value otherwise.
func (o *HdfsSourceRegistrationParams) GetWebhdfsPort() int32 {
	if o == nil || IsNil(o.WebhdfsPort) {
		var ret int32
		return ret
	}
	return *o.WebhdfsPort
}

// GetWebhdfsPortOk returns a tuple with the WebhdfsPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HdfsSourceRegistrationParams) GetWebhdfsPortOk() (*int32, bool) {
	if o == nil || IsNil(o.WebhdfsPort) {
		return nil, false
	}
	return o.WebhdfsPort, true
}

// HasWebhdfsPort returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationParams) HasWebhdfsPort() bool {
	if o != nil && !IsNil(o.WebhdfsPort) {
		return true
	}

	return false
}

// SetWebhdfsPort gets a reference to the given int32 and assigns it to the WebhdfsPort field.
func (o *HdfsSourceRegistrationParams) SetWebhdfsPort(v int32) {
	o.WebhdfsPort = &v
}

// GetConfigurationDirectory returns the ConfigurationDirectory field value
func (o *HdfsSourceRegistrationParams) GetConfigurationDirectory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigurationDirectory
}

// GetConfigurationDirectoryOk returns a tuple with the ConfigurationDirectory field value
// and a boolean to check if the value has been set.
func (o *HdfsSourceRegistrationParams) GetConfigurationDirectoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConfigurationDirectory, true
}

// SetConfigurationDirectory sets field value
func (o *HdfsSourceRegistrationParams) SetConfigurationDirectory(v string) {
	o.ConfigurationDirectory = v
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationParams) GetConnectionType() string {
	if o == nil || IsNil(o.ConnectionType.Get()) {
		var ret string
		return ret
	}
	return *o.ConnectionType.Get()
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationParams) GetConnectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionType.Get(), o.ConnectionType.IsSet()
}

// HasConnectionType returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationParams) HasConnectionType() bool {
	if o != nil && o.ConnectionType.IsSet() {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given NullableString and assigns it to the ConnectionType field.
func (o *HdfsSourceRegistrationParams) SetConnectionType(v string) {
	o.ConnectionType.Set(&v)
}
// SetConnectionTypeNil sets the value for ConnectionType to be an explicit nil
func (o *HdfsSourceRegistrationParams) SetConnectionTypeNil() {
	o.ConnectionType.Set(nil)
}

// UnsetConnectionType ensures that no value is present for ConnectionType, not even an explicit nil
func (o *HdfsSourceRegistrationParams) UnsetConnectionType() {
	o.ConnectionType.Unset()
}

// GetHadoopDistribution returns the HadoopDistribution field value
func (o *HdfsSourceRegistrationParams) GetHadoopDistribution() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HadoopDistribution
}

// GetHadoopDistributionOk returns a tuple with the HadoopDistribution field value
// and a boolean to check if the value has been set.
func (o *HdfsSourceRegistrationParams) GetHadoopDistributionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HadoopDistribution, true
}

// SetHadoopDistribution sets field value
func (o *HdfsSourceRegistrationParams) SetHadoopDistribution(v string) {
	o.HadoopDistribution = v
}

// GetHadoopVersion returns the HadoopVersion field value
func (o *HdfsSourceRegistrationParams) GetHadoopVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HadoopVersion
}

// GetHadoopVersionOk returns a tuple with the HadoopVersion field value
// and a boolean to check if the value has been set.
func (o *HdfsSourceRegistrationParams) GetHadoopVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HadoopVersion, true
}

// SetHadoopVersion sets field value
func (o *HdfsSourceRegistrationParams) SetHadoopVersion(v string) {
	o.HadoopVersion = v
}

// GetHost returns the Host field value
func (o *HdfsSourceRegistrationParams) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *HdfsSourceRegistrationParams) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *HdfsSourceRegistrationParams) SetHost(v string) {
	o.Host = v
}

// GetKerberosPrincipal returns the KerberosPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationParams) GetKerberosPrincipal() string {
	if o == nil || IsNil(o.KerberosPrincipal.Get()) {
		var ret string
		return ret
	}
	return *o.KerberosPrincipal.Get()
}

// GetKerberosPrincipalOk returns a tuple with the KerberosPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationParams) GetKerberosPrincipalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KerberosPrincipal.Get(), o.KerberosPrincipal.IsSet()
}

// HasKerberosPrincipal returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationParams) HasKerberosPrincipal() bool {
	if o != nil && o.KerberosPrincipal.IsSet() {
		return true
	}

	return false
}

// SetKerberosPrincipal gets a reference to the given NullableString and assigns it to the KerberosPrincipal field.
func (o *HdfsSourceRegistrationParams) SetKerberosPrincipal(v string) {
	o.KerberosPrincipal.Set(&v)
}
// SetKerberosPrincipalNil sets the value for KerberosPrincipal to be an explicit nil
func (o *HdfsSourceRegistrationParams) SetKerberosPrincipalNil() {
	o.KerberosPrincipal.Set(nil)
}

// UnsetKerberosPrincipal ensures that no value is present for KerberosPrincipal, not even an explicit nil
func (o *HdfsSourceRegistrationParams) UnsetKerberosPrincipal() {
	o.KerberosPrincipal.Unset()
}

// GetSshPasswordCredentials returns the SshPasswordCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationParams) GetSshPasswordCredentials() HbaseSourceRegistrationParamsAllOfSshPasswordCredentials {
	if o == nil || IsNil(o.SshPasswordCredentials.Get()) {
		var ret HbaseSourceRegistrationParamsAllOfSshPasswordCredentials
		return ret
	}
	return *o.SshPasswordCredentials.Get()
}

// GetSshPasswordCredentialsOk returns a tuple with the SshPasswordCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationParams) GetSshPasswordCredentialsOk() (*HbaseSourceRegistrationParamsAllOfSshPasswordCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshPasswordCredentials.Get(), o.SshPasswordCredentials.IsSet()
}

// HasSshPasswordCredentials returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationParams) HasSshPasswordCredentials() bool {
	if o != nil && o.SshPasswordCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshPasswordCredentials gets a reference to the given NullableHbaseSourceRegistrationParamsAllOfSshPasswordCredentials and assigns it to the SshPasswordCredentials field.
func (o *HdfsSourceRegistrationParams) SetSshPasswordCredentials(v HbaseSourceRegistrationParamsAllOfSshPasswordCredentials) {
	o.SshPasswordCredentials.Set(&v)
}
// SetSshPasswordCredentialsNil sets the value for SshPasswordCredentials to be an explicit nil
func (o *HdfsSourceRegistrationParams) SetSshPasswordCredentialsNil() {
	o.SshPasswordCredentials.Set(nil)
}

// UnsetSshPasswordCredentials ensures that no value is present for SshPasswordCredentials, not even an explicit nil
func (o *HdfsSourceRegistrationParams) UnsetSshPasswordCredentials() {
	o.SshPasswordCredentials.Unset()
}

// GetSshPrivateKeyCredentials returns the SshPrivateKeyCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationParams) GetSshPrivateKeyCredentials() HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials {
	if o == nil || IsNil(o.SshPrivateKeyCredentials.Get()) {
		var ret HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials
		return ret
	}
	return *o.SshPrivateKeyCredentials.Get()
}

// GetSshPrivateKeyCredentialsOk returns a tuple with the SshPrivateKeyCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationParams) GetSshPrivateKeyCredentialsOk() (*HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshPrivateKeyCredentials.Get(), o.SshPrivateKeyCredentials.IsSet()
}

// HasSshPrivateKeyCredentials returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationParams) HasSshPrivateKeyCredentials() bool {
	if o != nil && o.SshPrivateKeyCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshPrivateKeyCredentials gets a reference to the given NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials and assigns it to the SshPrivateKeyCredentials field.
func (o *HdfsSourceRegistrationParams) SetSshPrivateKeyCredentials(v HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) {
	o.SshPrivateKeyCredentials.Set(&v)
}
// SetSshPrivateKeyCredentialsNil sets the value for SshPrivateKeyCredentials to be an explicit nil
func (o *HdfsSourceRegistrationParams) SetSshPrivateKeyCredentialsNil() {
	o.SshPrivateKeyCredentials.Set(nil)
}

// UnsetSshPrivateKeyCredentials ensures that no value is present for SshPrivateKeyCredentials, not even an explicit nil
func (o *HdfsSourceRegistrationParams) UnsetSshPrivateKeyCredentials() {
	o.SshPrivateKeyCredentials.Unset()
}

func (o HdfsSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HdfsSourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthType.IsSet() {
		toSerialize["authType"] = o.AuthType.Get()
	}
	if !IsNil(o.NamenodeAddress) {
		toSerialize["namenodeAddress"] = o.NamenodeAddress
	}
	if !IsNil(o.WebhdfsPort) {
		toSerialize["webhdfsPort"] = o.WebhdfsPort
	}
	toSerialize["configurationDirectory"] = o.ConfigurationDirectory
	if o.ConnectionType.IsSet() {
		toSerialize["connectionType"] = o.ConnectionType.Get()
	}
	toSerialize["hadoopDistribution"] = o.HadoopDistribution
	toSerialize["hadoopVersion"] = o.HadoopVersion
	toSerialize["host"] = o.Host
	if o.KerberosPrincipal.IsSet() {
		toSerialize["kerberosPrincipal"] = o.KerberosPrincipal.Get()
	}
	if o.SshPasswordCredentials.IsSet() {
		toSerialize["sshPasswordCredentials"] = o.SshPasswordCredentials.Get()
	}
	if o.SshPrivateKeyCredentials.IsSet() {
		toSerialize["sshPrivateKeyCredentials"] = o.SshPrivateKeyCredentials.Get()
	}
	return toSerialize, nil
}

func (o *HdfsSourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"configurationDirectory",
		"hadoopDistribution",
		"hadoopVersion",
		"host",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHdfsSourceRegistrationParams := _HdfsSourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHdfsSourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = HdfsSourceRegistrationParams(varHdfsSourceRegistrationParams)

	return err
}

type NullableHdfsSourceRegistrationParams struct {
	value *HdfsSourceRegistrationParams
	isSet bool
}

func (v NullableHdfsSourceRegistrationParams) Get() *HdfsSourceRegistrationParams {
	return v.value
}

func (v *NullableHdfsSourceRegistrationParams) Set(val *HdfsSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHdfsSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHdfsSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHdfsSourceRegistrationParams(val *HdfsSourceRegistrationParams) *NullableHdfsSourceRegistrationParams {
	return &NullableHdfsSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableHdfsSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHdfsSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


