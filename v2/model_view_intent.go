/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewIntent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewIntent{}

// ViewIntent Sepcifies the intent of the View.
type ViewIntent struct {
	// Used for uniquely indentifying a default template
	DefaultTemplateName NullableString `json:"defaultTemplateName,omitempty"`
	// Specifies the template id from which the View is created.
	TemplateId NullableInt64 `json:"templateId,omitempty"`
	// Specifies the template name from which the View is created.
	TemplateName NullableString `json:"templateName,omitempty"`
}

// NewViewIntent instantiates a new ViewIntent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewIntent() *ViewIntent {
	this := ViewIntent{}
	return &this
}

// NewViewIntentWithDefaults instantiates a new ViewIntent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewIntentWithDefaults() *ViewIntent {
	this := ViewIntent{}
	return &this
}

// GetDefaultTemplateName returns the DefaultTemplateName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIntent) GetDefaultTemplateName() string {
	if o == nil || IsNil(o.DefaultTemplateName.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultTemplateName.Get()
}

// GetDefaultTemplateNameOk returns a tuple with the DefaultTemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIntent) GetDefaultTemplateNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultTemplateName.Get(), o.DefaultTemplateName.IsSet()
}

// HasDefaultTemplateName returns a boolean if a field has been set.
func (o *ViewIntent) HasDefaultTemplateName() bool {
	if o != nil && o.DefaultTemplateName.IsSet() {
		return true
	}

	return false
}

// SetDefaultTemplateName gets a reference to the given NullableString and assigns it to the DefaultTemplateName field.
func (o *ViewIntent) SetDefaultTemplateName(v string) {
	o.DefaultTemplateName.Set(&v)
}
// SetDefaultTemplateNameNil sets the value for DefaultTemplateName to be an explicit nil
func (o *ViewIntent) SetDefaultTemplateNameNil() {
	o.DefaultTemplateName.Set(nil)
}

// UnsetDefaultTemplateName ensures that no value is present for DefaultTemplateName, not even an explicit nil
func (o *ViewIntent) UnsetDefaultTemplateName() {
	o.DefaultTemplateName.Unset()
}

// GetTemplateId returns the TemplateId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIntent) GetTemplateId() int64 {
	if o == nil || IsNil(o.TemplateId.Get()) {
		var ret int64
		return ret
	}
	return *o.TemplateId.Get()
}

// GetTemplateIdOk returns a tuple with the TemplateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIntent) GetTemplateIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateId.Get(), o.TemplateId.IsSet()
}

// HasTemplateId returns a boolean if a field has been set.
func (o *ViewIntent) HasTemplateId() bool {
	if o != nil && o.TemplateId.IsSet() {
		return true
	}

	return false
}

// SetTemplateId gets a reference to the given NullableInt64 and assigns it to the TemplateId field.
func (o *ViewIntent) SetTemplateId(v int64) {
	o.TemplateId.Set(&v)
}
// SetTemplateIdNil sets the value for TemplateId to be an explicit nil
func (o *ViewIntent) SetTemplateIdNil() {
	o.TemplateId.Set(nil)
}

// UnsetTemplateId ensures that no value is present for TemplateId, not even an explicit nil
func (o *ViewIntent) UnsetTemplateId() {
	o.TemplateId.Unset()
}

// GetTemplateName returns the TemplateName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewIntent) GetTemplateName() string {
	if o == nil || IsNil(o.TemplateName.Get()) {
		var ret string
		return ret
	}
	return *o.TemplateName.Get()
}

// GetTemplateNameOk returns a tuple with the TemplateName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewIntent) GetTemplateNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TemplateName.Get(), o.TemplateName.IsSet()
}

// HasTemplateName returns a boolean if a field has been set.
func (o *ViewIntent) HasTemplateName() bool {
	if o != nil && o.TemplateName.IsSet() {
		return true
	}

	return false
}

// SetTemplateName gets a reference to the given NullableString and assigns it to the TemplateName field.
func (o *ViewIntent) SetTemplateName(v string) {
	o.TemplateName.Set(&v)
}
// SetTemplateNameNil sets the value for TemplateName to be an explicit nil
func (o *ViewIntent) SetTemplateNameNil() {
	o.TemplateName.Set(nil)
}

// UnsetTemplateName ensures that no value is present for TemplateName, not even an explicit nil
func (o *ViewIntent) UnsetTemplateName() {
	o.TemplateName.Unset()
}

func (o ViewIntent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewIntent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultTemplateName.IsSet() {
		toSerialize["defaultTemplateName"] = o.DefaultTemplateName.Get()
	}
	if o.TemplateId.IsSet() {
		toSerialize["templateId"] = o.TemplateId.Get()
	}
	if o.TemplateName.IsSet() {
		toSerialize["templateName"] = o.TemplateName.Get()
	}
	return toSerialize, nil
}

type NullableViewIntent struct {
	value *ViewIntent
	isSet bool
}

func (v NullableViewIntent) Get() *ViewIntent {
	return v.value
}

func (v *NullableViewIntent) Set(val *ViewIntent) {
	v.value = val
	v.isSet = true
}

func (v NullableViewIntent) IsSet() bool {
	return v.isSet
}

func (v *NullableViewIntent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewIntent(val *ViewIntent) *NullableViewIntent {
	return &NullableViewIntent{value: val, isSet: true}
}

func (v NullableViewIntent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewIntent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


