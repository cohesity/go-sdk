/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the IpmiSelNonVerboseEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpmiSelNonVerboseEntry{}

// IpmiSelNonVerboseEntry Specifies each entry in the sel verbose response.
type IpmiSelNonVerboseEntry struct {
	// Specifies whether the event is asserted or not. This is only returned in case of verbose = false.
	RecordAssertionType NullableString `json:"recordAssertionType,omitempty"`
	// Specifies the date on which the record is added to SEL. This is only returned in case of verbose = false.
	RecordDate NullableString `json:"recordDate,omitempty"`
	// Specifies a short description corresponding to the sensor event for which record is added to SEL.
	RecordDescription NullableString `json:"recordDescription,omitempty"`
	// Provides a short description related to sensor action. This is only returned in case of verbose = false.
	RecordEvent NullableString `json:"recordEvent,omitempty"`
	// Specifies the ID corresponding to record in SEL(System Event Log) for given node.
	RecordId NullableString `json:"recordId,omitempty"`
	// Specifies the time at which the record is added to SEL. This is only returned in case of verbose = false.
	RecordTime NullableString `json:"recordTime,omitempty"`
}

// NewIpmiSelNonVerboseEntry instantiates a new IpmiSelNonVerboseEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpmiSelNonVerboseEntry() *IpmiSelNonVerboseEntry {
	this := IpmiSelNonVerboseEntry{}
	return &this
}

// NewIpmiSelNonVerboseEntryWithDefaults instantiates a new IpmiSelNonVerboseEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpmiSelNonVerboseEntryWithDefaults() *IpmiSelNonVerboseEntry {
	this := IpmiSelNonVerboseEntry{}
	return &this
}

// GetRecordAssertionType returns the RecordAssertionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelNonVerboseEntry) GetRecordAssertionType() string {
	if o == nil || IsNil(o.RecordAssertionType.Get()) {
		var ret string
		return ret
	}
	return *o.RecordAssertionType.Get()
}

// GetRecordAssertionTypeOk returns a tuple with the RecordAssertionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelNonVerboseEntry) GetRecordAssertionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordAssertionType.Get(), o.RecordAssertionType.IsSet()
}

// HasRecordAssertionType returns a boolean if a field has been set.
func (o *IpmiSelNonVerboseEntry) HasRecordAssertionType() bool {
	if o != nil && o.RecordAssertionType.IsSet() {
		return true
	}

	return false
}

// SetRecordAssertionType gets a reference to the given NullableString and assigns it to the RecordAssertionType field.
func (o *IpmiSelNonVerboseEntry) SetRecordAssertionType(v string) {
	o.RecordAssertionType.Set(&v)
}
// SetRecordAssertionTypeNil sets the value for RecordAssertionType to be an explicit nil
func (o *IpmiSelNonVerboseEntry) SetRecordAssertionTypeNil() {
	o.RecordAssertionType.Set(nil)
}

// UnsetRecordAssertionType ensures that no value is present for RecordAssertionType, not even an explicit nil
func (o *IpmiSelNonVerboseEntry) UnsetRecordAssertionType() {
	o.RecordAssertionType.Unset()
}

// GetRecordDate returns the RecordDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelNonVerboseEntry) GetRecordDate() string {
	if o == nil || IsNil(o.RecordDate.Get()) {
		var ret string
		return ret
	}
	return *o.RecordDate.Get()
}

// GetRecordDateOk returns a tuple with the RecordDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelNonVerboseEntry) GetRecordDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordDate.Get(), o.RecordDate.IsSet()
}

// HasRecordDate returns a boolean if a field has been set.
func (o *IpmiSelNonVerboseEntry) HasRecordDate() bool {
	if o != nil && o.RecordDate.IsSet() {
		return true
	}

	return false
}

// SetRecordDate gets a reference to the given NullableString and assigns it to the RecordDate field.
func (o *IpmiSelNonVerboseEntry) SetRecordDate(v string) {
	o.RecordDate.Set(&v)
}
// SetRecordDateNil sets the value for RecordDate to be an explicit nil
func (o *IpmiSelNonVerboseEntry) SetRecordDateNil() {
	o.RecordDate.Set(nil)
}

// UnsetRecordDate ensures that no value is present for RecordDate, not even an explicit nil
func (o *IpmiSelNonVerboseEntry) UnsetRecordDate() {
	o.RecordDate.Unset()
}

// GetRecordDescription returns the RecordDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelNonVerboseEntry) GetRecordDescription() string {
	if o == nil || IsNil(o.RecordDescription.Get()) {
		var ret string
		return ret
	}
	return *o.RecordDescription.Get()
}

// GetRecordDescriptionOk returns a tuple with the RecordDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelNonVerboseEntry) GetRecordDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordDescription.Get(), o.RecordDescription.IsSet()
}

// HasRecordDescription returns a boolean if a field has been set.
func (o *IpmiSelNonVerboseEntry) HasRecordDescription() bool {
	if o != nil && o.RecordDescription.IsSet() {
		return true
	}

	return false
}

// SetRecordDescription gets a reference to the given NullableString and assigns it to the RecordDescription field.
func (o *IpmiSelNonVerboseEntry) SetRecordDescription(v string) {
	o.RecordDescription.Set(&v)
}
// SetRecordDescriptionNil sets the value for RecordDescription to be an explicit nil
func (o *IpmiSelNonVerboseEntry) SetRecordDescriptionNil() {
	o.RecordDescription.Set(nil)
}

// UnsetRecordDescription ensures that no value is present for RecordDescription, not even an explicit nil
func (o *IpmiSelNonVerboseEntry) UnsetRecordDescription() {
	o.RecordDescription.Unset()
}

// GetRecordEvent returns the RecordEvent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelNonVerboseEntry) GetRecordEvent() string {
	if o == nil || IsNil(o.RecordEvent.Get()) {
		var ret string
		return ret
	}
	return *o.RecordEvent.Get()
}

// GetRecordEventOk returns a tuple with the RecordEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelNonVerboseEntry) GetRecordEventOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordEvent.Get(), o.RecordEvent.IsSet()
}

// HasRecordEvent returns a boolean if a field has been set.
func (o *IpmiSelNonVerboseEntry) HasRecordEvent() bool {
	if o != nil && o.RecordEvent.IsSet() {
		return true
	}

	return false
}

// SetRecordEvent gets a reference to the given NullableString and assigns it to the RecordEvent field.
func (o *IpmiSelNonVerboseEntry) SetRecordEvent(v string) {
	o.RecordEvent.Set(&v)
}
// SetRecordEventNil sets the value for RecordEvent to be an explicit nil
func (o *IpmiSelNonVerboseEntry) SetRecordEventNil() {
	o.RecordEvent.Set(nil)
}

// UnsetRecordEvent ensures that no value is present for RecordEvent, not even an explicit nil
func (o *IpmiSelNonVerboseEntry) UnsetRecordEvent() {
	o.RecordEvent.Unset()
}

// GetRecordId returns the RecordId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelNonVerboseEntry) GetRecordId() string {
	if o == nil || IsNil(o.RecordId.Get()) {
		var ret string
		return ret
	}
	return *o.RecordId.Get()
}

// GetRecordIdOk returns a tuple with the RecordId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelNonVerboseEntry) GetRecordIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordId.Get(), o.RecordId.IsSet()
}

// HasRecordId returns a boolean if a field has been set.
func (o *IpmiSelNonVerboseEntry) HasRecordId() bool {
	if o != nil && o.RecordId.IsSet() {
		return true
	}

	return false
}

// SetRecordId gets a reference to the given NullableString and assigns it to the RecordId field.
func (o *IpmiSelNonVerboseEntry) SetRecordId(v string) {
	o.RecordId.Set(&v)
}
// SetRecordIdNil sets the value for RecordId to be an explicit nil
func (o *IpmiSelNonVerboseEntry) SetRecordIdNil() {
	o.RecordId.Set(nil)
}

// UnsetRecordId ensures that no value is present for RecordId, not even an explicit nil
func (o *IpmiSelNonVerboseEntry) UnsetRecordId() {
	o.RecordId.Unset()
}

// GetRecordTime returns the RecordTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelNonVerboseEntry) GetRecordTime() string {
	if o == nil || IsNil(o.RecordTime.Get()) {
		var ret string
		return ret
	}
	return *o.RecordTime.Get()
}

// GetRecordTimeOk returns a tuple with the RecordTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelNonVerboseEntry) GetRecordTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordTime.Get(), o.RecordTime.IsSet()
}

// HasRecordTime returns a boolean if a field has been set.
func (o *IpmiSelNonVerboseEntry) HasRecordTime() bool {
	if o != nil && o.RecordTime.IsSet() {
		return true
	}

	return false
}

// SetRecordTime gets a reference to the given NullableString and assigns it to the RecordTime field.
func (o *IpmiSelNonVerboseEntry) SetRecordTime(v string) {
	o.RecordTime.Set(&v)
}
// SetRecordTimeNil sets the value for RecordTime to be an explicit nil
func (o *IpmiSelNonVerboseEntry) SetRecordTimeNil() {
	o.RecordTime.Set(nil)
}

// UnsetRecordTime ensures that no value is present for RecordTime, not even an explicit nil
func (o *IpmiSelNonVerboseEntry) UnsetRecordTime() {
	o.RecordTime.Unset()
}

func (o IpmiSelNonVerboseEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpmiSelNonVerboseEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RecordAssertionType.IsSet() {
		toSerialize["recordAssertionType"] = o.RecordAssertionType.Get()
	}
	if o.RecordDate.IsSet() {
		toSerialize["recordDate"] = o.RecordDate.Get()
	}
	if o.RecordDescription.IsSet() {
		toSerialize["recordDescription"] = o.RecordDescription.Get()
	}
	if o.RecordEvent.IsSet() {
		toSerialize["recordEvent"] = o.RecordEvent.Get()
	}
	if o.RecordId.IsSet() {
		toSerialize["recordId"] = o.RecordId.Get()
	}
	if o.RecordTime.IsSet() {
		toSerialize["recordTime"] = o.RecordTime.Get()
	}
	return toSerialize, nil
}

type NullableIpmiSelNonVerboseEntry struct {
	value *IpmiSelNonVerboseEntry
	isSet bool
}

func (v NullableIpmiSelNonVerboseEntry) Get() *IpmiSelNonVerboseEntry {
	return v.value
}

func (v *NullableIpmiSelNonVerboseEntry) Set(val *IpmiSelNonVerboseEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableIpmiSelNonVerboseEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableIpmiSelNonVerboseEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpmiSelNonVerboseEntry(val *IpmiSelNonVerboseEntry) *NullableIpmiSelNonVerboseEntry {
	return &NullableIpmiSelNonVerboseEntry{value: val, isSet: true}
}

func (v NullableIpmiSelNonVerboseEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpmiSelNonVerboseEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


