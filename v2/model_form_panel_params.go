/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FormPanelParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormPanelParams{}

// FormPanelParams Specifies parameters for a form panel. A form panel is a grouping of form fields.
type FormPanelParams struct {
	// Array of fields
	Fields []FormFieldParams `json:"fields,omitempty"`
	// Id to identify the panel. This is also be used for assigning component html ids which can be leveraged for writing automation against the panel.
	Id NullableString `json:"id,omitempty"`
	// Specifies whether the panel is optional and kept behind a toggle slider/collapsed state
	Optional NullableBool `json:"optional,omitempty"`
	// Title for the panel to be shown on UI screen
	Title NullableString `json:"title,omitempty"`
}

// NewFormPanelParams instantiates a new FormPanelParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormPanelParams() *FormPanelParams {
	this := FormPanelParams{}
	return &this
}

// NewFormPanelParamsWithDefaults instantiates a new FormPanelParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormPanelParamsWithDefaults() *FormPanelParams {
	this := FormPanelParams{}
	return &this
}

// GetFields returns the Fields field value if set, zero value otherwise.
func (o *FormPanelParams) GetFields() []FormFieldParams {
	if o == nil || IsNil(o.Fields) {
		var ret []FormFieldParams
		return ret
	}
	return o.Fields
}

// GetFieldsOk returns a tuple with the Fields field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FormPanelParams) GetFieldsOk() ([]FormFieldParams, bool) {
	if o == nil || IsNil(o.Fields) {
		return nil, false
	}
	return o.Fields, true
}

// HasFields returns a boolean if a field has been set.
func (o *FormPanelParams) HasFields() bool {
	if o != nil && !IsNil(o.Fields) {
		return true
	}

	return false
}

// SetFields gets a reference to the given []FormFieldParams and assigns it to the Fields field.
func (o *FormPanelParams) SetFields(v []FormFieldParams) {
	o.Fields = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormPanelParams) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormPanelParams) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *FormPanelParams) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *FormPanelParams) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *FormPanelParams) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *FormPanelParams) UnsetId() {
	o.Id.Unset()
}

// GetOptional returns the Optional field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormPanelParams) GetOptional() bool {
	if o == nil || IsNil(o.Optional.Get()) {
		var ret bool
		return ret
	}
	return *o.Optional.Get()
}

// GetOptionalOk returns a tuple with the Optional field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormPanelParams) GetOptionalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Optional.Get(), o.Optional.IsSet()
}

// HasOptional returns a boolean if a field has been set.
func (o *FormPanelParams) HasOptional() bool {
	if o != nil && o.Optional.IsSet() {
		return true
	}

	return false
}

// SetOptional gets a reference to the given NullableBool and assigns it to the Optional field.
func (o *FormPanelParams) SetOptional(v bool) {
	o.Optional.Set(&v)
}
// SetOptionalNil sets the value for Optional to be an explicit nil
func (o *FormPanelParams) SetOptionalNil() {
	o.Optional.Set(nil)
}

// UnsetOptional ensures that no value is present for Optional, not even an explicit nil
func (o *FormPanelParams) UnsetOptional() {
	o.Optional.Unset()
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormPanelParams) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormPanelParams) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *FormPanelParams) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *FormPanelParams) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *FormPanelParams) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *FormPanelParams) UnsetTitle() {
	o.Title.Unset()
}

func (o FormPanelParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormPanelParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fields) {
		toSerialize["fields"] = o.Fields
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Optional.IsSet() {
		toSerialize["optional"] = o.Optional.Get()
	}
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	return toSerialize, nil
}

type NullableFormPanelParams struct {
	value *FormPanelParams
	isSet bool
}

func (v NullableFormPanelParams) Get() *FormPanelParams {
	return v.value
}

func (v *NullableFormPanelParams) Set(val *FormPanelParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFormPanelParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFormPanelParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormPanelParams(val *FormPanelParams) *NullableFormPanelParams {
	return &NullableFormPanelParams{value: val, isSet: true}
}

func (v NullableFormPanelParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormPanelParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


