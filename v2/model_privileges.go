/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Privileges type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Privileges{}

// Privileges Specifies a list of Privileges.
type Privileges struct {
	// Specifies the list of Privileges.
	Privileges []Privilege `json:"privileges,omitempty"`
}

// NewPrivileges instantiates a new Privileges object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivileges() *Privileges {
	this := Privileges{}
	return &this
}

// NewPrivilegesWithDefaults instantiates a new Privileges object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegesWithDefaults() *Privileges {
	this := Privileges{}
	return &this
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Privileges) GetPrivileges() []Privilege {
	if o == nil {
		var ret []Privilege
		return ret
	}
	return o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Privileges) GetPrivilegesOk() ([]Privilege, bool) {
	if o == nil || IsNil(o.Privileges) {
		return nil, false
	}
	return o.Privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *Privileges) HasPrivileges() bool {
	if o != nil && !IsNil(o.Privileges) {
		return true
	}

	return false
}

// SetPrivileges gets a reference to the given []Privilege and assigns it to the Privileges field.
func (o *Privileges) SetPrivileges(v []Privilege) {
	o.Privileges = v
}

func (o Privileges) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Privileges) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Privileges != nil {
		toSerialize["privileges"] = o.Privileges
	}
	return toSerialize, nil
}

type NullablePrivileges struct {
	value *Privileges
	isSet bool
}

func (v NullablePrivileges) Get() *Privileges {
	return v.value
}

func (v *NullablePrivileges) Set(val *Privileges) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivileges) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivileges) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivileges(val *Privileges) *NullablePrivileges {
	return &NullablePrivileges{value: val, isSet: true}
}

func (v NullablePrivileges) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivileges) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


