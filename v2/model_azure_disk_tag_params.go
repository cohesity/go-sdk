/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AzureDiskTagParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureDiskTagParams{}

// AzureDiskTagParams Specifies the tag vectors used to exclude Azure Disks attached to Azure instance at global and object level. Contains two vectors: exclusion and inclusion. E.g., {exclusionTagArray: [(K1, V1),  (K2, V2)], inclusionTagArray: [(K3, V3)]} => This will exclude a particular volume iff it has all the tags in exclusionTagArray((K1, V1),  (K2, V2)) and has none of the tags in the inclusionTagArray((K3, V3)).
type AzureDiskTagParams struct {
	// Array which contains tags for AND exclusion. E.g., exclusionTagArray: [(K1, V1),  (K2, V2)] => This will exclude a particular volume iff it has both these tags.
	ExclusionTagArray []AzureDiskTag `json:"exclusionTagArray,omitempty"`
	// Array which contains tags for AND inclusion. E.g., inclusionTagArray: [(K3, V3),  (K4, V4)] => This will exclude a particular volume iff it does not have both these tags.
	InclusionTagArray []AzureDiskTag `json:"inclusionTagArray,omitempty"`
}

// NewAzureDiskTagParams instantiates a new AzureDiskTagParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureDiskTagParams() *AzureDiskTagParams {
	this := AzureDiskTagParams{}
	return &this
}

// NewAzureDiskTagParamsWithDefaults instantiates a new AzureDiskTagParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureDiskTagParamsWithDefaults() *AzureDiskTagParams {
	this := AzureDiskTagParams{}
	return &this
}

// GetExclusionTagArray returns the ExclusionTagArray field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureDiskTagParams) GetExclusionTagArray() []AzureDiskTag {
	if o == nil {
		var ret []AzureDiskTag
		return ret
	}
	return o.ExclusionTagArray
}

// GetExclusionTagArrayOk returns a tuple with the ExclusionTagArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureDiskTagParams) GetExclusionTagArrayOk() ([]AzureDiskTag, bool) {
	if o == nil || IsNil(o.ExclusionTagArray) {
		return nil, false
	}
	return o.ExclusionTagArray, true
}

// HasExclusionTagArray returns a boolean if a field has been set.
func (o *AzureDiskTagParams) HasExclusionTagArray() bool {
	if o != nil && !IsNil(o.ExclusionTagArray) {
		return true
	}

	return false
}

// SetExclusionTagArray gets a reference to the given []AzureDiskTag and assigns it to the ExclusionTagArray field.
func (o *AzureDiskTagParams) SetExclusionTagArray(v []AzureDiskTag) {
	o.ExclusionTagArray = v
}

// GetInclusionTagArray returns the InclusionTagArray field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureDiskTagParams) GetInclusionTagArray() []AzureDiskTag {
	if o == nil {
		var ret []AzureDiskTag
		return ret
	}
	return o.InclusionTagArray
}

// GetInclusionTagArrayOk returns a tuple with the InclusionTagArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureDiskTagParams) GetInclusionTagArrayOk() ([]AzureDiskTag, bool) {
	if o == nil || IsNil(o.InclusionTagArray) {
		return nil, false
	}
	return o.InclusionTagArray, true
}

// HasInclusionTagArray returns a boolean if a field has been set.
func (o *AzureDiskTagParams) HasInclusionTagArray() bool {
	if o != nil && !IsNil(o.InclusionTagArray) {
		return true
	}

	return false
}

// SetInclusionTagArray gets a reference to the given []AzureDiskTag and assigns it to the InclusionTagArray field.
func (o *AzureDiskTagParams) SetInclusionTagArray(v []AzureDiskTag) {
	o.InclusionTagArray = v
}

func (o AzureDiskTagParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureDiskTagParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExclusionTagArray != nil {
		toSerialize["exclusionTagArray"] = o.ExclusionTagArray
	}
	if o.InclusionTagArray != nil {
		toSerialize["inclusionTagArray"] = o.InclusionTagArray
	}
	return toSerialize, nil
}

type NullableAzureDiskTagParams struct {
	value *AzureDiskTagParams
	isSet bool
}

func (v NullableAzureDiskTagParams) Get() *AzureDiskTagParams {
	return v.value
}

func (v *NullableAzureDiskTagParams) Set(val *AzureDiskTagParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureDiskTagParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureDiskTagParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureDiskTagParams(val *AzureDiskTagParams) *NullableAzureDiskTagParams {
	return &NullableAzureDiskTagParams{value: val, isSet: true}
}

func (v NullableAzureDiskTagParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureDiskTagParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


