/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClusterDocsMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterDocsMetadata{}

// ClusterDocsMetadata Specifies the docs related metadata specific to the cluster. This metadata mainly consists of any external hyperlinks to service provider's documentation.
type ClusterDocsMetadata struct {
	// Specifies the purpose for having external hyperlink to documentation.
	Purpose NullableString `json:"purpose,omitempty"`
	// Specifies the URL to access the endpoint for the given documentation purpose.
	Url NullableString `json:"url,omitempty"`
}

// NewClusterDocsMetadata instantiates a new ClusterDocsMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterDocsMetadata() *ClusterDocsMetadata {
	this := ClusterDocsMetadata{}
	return &this
}

// NewClusterDocsMetadataWithDefaults instantiates a new ClusterDocsMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterDocsMetadataWithDefaults() *ClusterDocsMetadata {
	this := ClusterDocsMetadata{}
	return &this
}

// GetPurpose returns the Purpose field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterDocsMetadata) GetPurpose() string {
	if o == nil || IsNil(o.Purpose.Get()) {
		var ret string
		return ret
	}
	return *o.Purpose.Get()
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterDocsMetadata) GetPurposeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Purpose.Get(), o.Purpose.IsSet()
}

// HasPurpose returns a boolean if a field has been set.
func (o *ClusterDocsMetadata) HasPurpose() bool {
	if o != nil && o.Purpose.IsSet() {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given NullableString and assigns it to the Purpose field.
func (o *ClusterDocsMetadata) SetPurpose(v string) {
	o.Purpose.Set(&v)
}
// SetPurposeNil sets the value for Purpose to be an explicit nil
func (o *ClusterDocsMetadata) SetPurposeNil() {
	o.Purpose.Set(nil)
}

// UnsetPurpose ensures that no value is present for Purpose, not even an explicit nil
func (o *ClusterDocsMetadata) UnsetPurpose() {
	o.Purpose.Unset()
}

// GetUrl returns the Url field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterDocsMetadata) GetUrl() string {
	if o == nil || IsNil(o.Url.Get()) {
		var ret string
		return ret
	}
	return *o.Url.Get()
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterDocsMetadata) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Url.Get(), o.Url.IsSet()
}

// HasUrl returns a boolean if a field has been set.
func (o *ClusterDocsMetadata) HasUrl() bool {
	if o != nil && o.Url.IsSet() {
		return true
	}

	return false
}

// SetUrl gets a reference to the given NullableString and assigns it to the Url field.
func (o *ClusterDocsMetadata) SetUrl(v string) {
	o.Url.Set(&v)
}
// SetUrlNil sets the value for Url to be an explicit nil
func (o *ClusterDocsMetadata) SetUrlNil() {
	o.Url.Set(nil)
}

// UnsetUrl ensures that no value is present for Url, not even an explicit nil
func (o *ClusterDocsMetadata) UnsetUrl() {
	o.Url.Unset()
}

func (o ClusterDocsMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterDocsMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Purpose.IsSet() {
		toSerialize["purpose"] = o.Purpose.Get()
	}
	if o.Url.IsSet() {
		toSerialize["url"] = o.Url.Get()
	}
	return toSerialize, nil
}

type NullableClusterDocsMetadata struct {
	value *ClusterDocsMetadata
	isSet bool
}

func (v NullableClusterDocsMetadata) Get() *ClusterDocsMetadata {
	return v.value
}

func (v *NullableClusterDocsMetadata) Set(val *ClusterDocsMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterDocsMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterDocsMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterDocsMetadata(val *ClusterDocsMetadata) *NullableClusterDocsMetadata {
	return &NullableClusterDocsMetadata{value: val, isSet: true}
}

func (v NullableClusterDocsMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterDocsMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


