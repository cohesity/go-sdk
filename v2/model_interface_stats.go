/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the InterfaceStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceStats{}

// InterfaceStats Interface stats.
type InterfaceStats struct {
	// Total bytes received over the interface.
	RxBytes NullableInt64 `json:"rxBytes,omitempty"`
	// Number of packets received but not processed.
	RxDropped NullableInt64 `json:"rxDropped,omitempty"`
	// Total number of bad packets received.
	RxErrors NullableInt64 `json:"rxErrors,omitempty"`
	// Total number of packets received over the interface.
	RxPkts NullableInt64 `json:"rxPkts,omitempty"`
	// Total bytes transmitted over the interface.
	TxBytes NullableInt64 `json:"txBytes,omitempty"`
	// Number of packets dropped on their way to transmission.
	TxDropped NullableInt64 `json:"txDropped,omitempty"`
	// Total number of transmit problems.
	TxErrors NullableInt64 `json:"txErrors,omitempty"`
	// Total number of packets transmitted over the interface.
	TxPkts NullableInt64 `json:"txPkts,omitempty"`
}

// NewInterfaceStats instantiates a new InterfaceStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceStats() *InterfaceStats {
	this := InterfaceStats{}
	return &this
}

// NewInterfaceStatsWithDefaults instantiates a new InterfaceStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceStatsWithDefaults() *InterfaceStats {
	this := InterfaceStats{}
	return &this
}

// GetRxBytes returns the RxBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceStats) GetRxBytes() int64 {
	if o == nil || IsNil(o.RxBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.RxBytes.Get()
}

// GetRxBytesOk returns a tuple with the RxBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceStats) GetRxBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RxBytes.Get(), o.RxBytes.IsSet()
}

// HasRxBytes returns a boolean if a field has been set.
func (o *InterfaceStats) HasRxBytes() bool {
	if o != nil && o.RxBytes.IsSet() {
		return true
	}

	return false
}

// SetRxBytes gets a reference to the given NullableInt64 and assigns it to the RxBytes field.
func (o *InterfaceStats) SetRxBytes(v int64) {
	o.RxBytes.Set(&v)
}
// SetRxBytesNil sets the value for RxBytes to be an explicit nil
func (o *InterfaceStats) SetRxBytesNil() {
	o.RxBytes.Set(nil)
}

// UnsetRxBytes ensures that no value is present for RxBytes, not even an explicit nil
func (o *InterfaceStats) UnsetRxBytes() {
	o.RxBytes.Unset()
}

// GetRxDropped returns the RxDropped field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceStats) GetRxDropped() int64 {
	if o == nil || IsNil(o.RxDropped.Get()) {
		var ret int64
		return ret
	}
	return *o.RxDropped.Get()
}

// GetRxDroppedOk returns a tuple with the RxDropped field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceStats) GetRxDroppedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RxDropped.Get(), o.RxDropped.IsSet()
}

// HasRxDropped returns a boolean if a field has been set.
func (o *InterfaceStats) HasRxDropped() bool {
	if o != nil && o.RxDropped.IsSet() {
		return true
	}

	return false
}

// SetRxDropped gets a reference to the given NullableInt64 and assigns it to the RxDropped field.
func (o *InterfaceStats) SetRxDropped(v int64) {
	o.RxDropped.Set(&v)
}
// SetRxDroppedNil sets the value for RxDropped to be an explicit nil
func (o *InterfaceStats) SetRxDroppedNil() {
	o.RxDropped.Set(nil)
}

// UnsetRxDropped ensures that no value is present for RxDropped, not even an explicit nil
func (o *InterfaceStats) UnsetRxDropped() {
	o.RxDropped.Unset()
}

// GetRxErrors returns the RxErrors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceStats) GetRxErrors() int64 {
	if o == nil || IsNil(o.RxErrors.Get()) {
		var ret int64
		return ret
	}
	return *o.RxErrors.Get()
}

// GetRxErrorsOk returns a tuple with the RxErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceStats) GetRxErrorsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RxErrors.Get(), o.RxErrors.IsSet()
}

// HasRxErrors returns a boolean if a field has been set.
func (o *InterfaceStats) HasRxErrors() bool {
	if o != nil && o.RxErrors.IsSet() {
		return true
	}

	return false
}

// SetRxErrors gets a reference to the given NullableInt64 and assigns it to the RxErrors field.
func (o *InterfaceStats) SetRxErrors(v int64) {
	o.RxErrors.Set(&v)
}
// SetRxErrorsNil sets the value for RxErrors to be an explicit nil
func (o *InterfaceStats) SetRxErrorsNil() {
	o.RxErrors.Set(nil)
}

// UnsetRxErrors ensures that no value is present for RxErrors, not even an explicit nil
func (o *InterfaceStats) UnsetRxErrors() {
	o.RxErrors.Unset()
}

// GetRxPkts returns the RxPkts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceStats) GetRxPkts() int64 {
	if o == nil || IsNil(o.RxPkts.Get()) {
		var ret int64
		return ret
	}
	return *o.RxPkts.Get()
}

// GetRxPktsOk returns a tuple with the RxPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceStats) GetRxPktsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RxPkts.Get(), o.RxPkts.IsSet()
}

// HasRxPkts returns a boolean if a field has been set.
func (o *InterfaceStats) HasRxPkts() bool {
	if o != nil && o.RxPkts.IsSet() {
		return true
	}

	return false
}

// SetRxPkts gets a reference to the given NullableInt64 and assigns it to the RxPkts field.
func (o *InterfaceStats) SetRxPkts(v int64) {
	o.RxPkts.Set(&v)
}
// SetRxPktsNil sets the value for RxPkts to be an explicit nil
func (o *InterfaceStats) SetRxPktsNil() {
	o.RxPkts.Set(nil)
}

// UnsetRxPkts ensures that no value is present for RxPkts, not even an explicit nil
func (o *InterfaceStats) UnsetRxPkts() {
	o.RxPkts.Unset()
}

// GetTxBytes returns the TxBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceStats) GetTxBytes() int64 {
	if o == nil || IsNil(o.TxBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.TxBytes.Get()
}

// GetTxBytesOk returns a tuple with the TxBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceStats) GetTxBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxBytes.Get(), o.TxBytes.IsSet()
}

// HasTxBytes returns a boolean if a field has been set.
func (o *InterfaceStats) HasTxBytes() bool {
	if o != nil && o.TxBytes.IsSet() {
		return true
	}

	return false
}

// SetTxBytes gets a reference to the given NullableInt64 and assigns it to the TxBytes field.
func (o *InterfaceStats) SetTxBytes(v int64) {
	o.TxBytes.Set(&v)
}
// SetTxBytesNil sets the value for TxBytes to be an explicit nil
func (o *InterfaceStats) SetTxBytesNil() {
	o.TxBytes.Set(nil)
}

// UnsetTxBytes ensures that no value is present for TxBytes, not even an explicit nil
func (o *InterfaceStats) UnsetTxBytes() {
	o.TxBytes.Unset()
}

// GetTxDropped returns the TxDropped field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceStats) GetTxDropped() int64 {
	if o == nil || IsNil(o.TxDropped.Get()) {
		var ret int64
		return ret
	}
	return *o.TxDropped.Get()
}

// GetTxDroppedOk returns a tuple with the TxDropped field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceStats) GetTxDroppedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxDropped.Get(), o.TxDropped.IsSet()
}

// HasTxDropped returns a boolean if a field has been set.
func (o *InterfaceStats) HasTxDropped() bool {
	if o != nil && o.TxDropped.IsSet() {
		return true
	}

	return false
}

// SetTxDropped gets a reference to the given NullableInt64 and assigns it to the TxDropped field.
func (o *InterfaceStats) SetTxDropped(v int64) {
	o.TxDropped.Set(&v)
}
// SetTxDroppedNil sets the value for TxDropped to be an explicit nil
func (o *InterfaceStats) SetTxDroppedNil() {
	o.TxDropped.Set(nil)
}

// UnsetTxDropped ensures that no value is present for TxDropped, not even an explicit nil
func (o *InterfaceStats) UnsetTxDropped() {
	o.TxDropped.Unset()
}

// GetTxErrors returns the TxErrors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceStats) GetTxErrors() int64 {
	if o == nil || IsNil(o.TxErrors.Get()) {
		var ret int64
		return ret
	}
	return *o.TxErrors.Get()
}

// GetTxErrorsOk returns a tuple with the TxErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceStats) GetTxErrorsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxErrors.Get(), o.TxErrors.IsSet()
}

// HasTxErrors returns a boolean if a field has been set.
func (o *InterfaceStats) HasTxErrors() bool {
	if o != nil && o.TxErrors.IsSet() {
		return true
	}

	return false
}

// SetTxErrors gets a reference to the given NullableInt64 and assigns it to the TxErrors field.
func (o *InterfaceStats) SetTxErrors(v int64) {
	o.TxErrors.Set(&v)
}
// SetTxErrorsNil sets the value for TxErrors to be an explicit nil
func (o *InterfaceStats) SetTxErrorsNil() {
	o.TxErrors.Set(nil)
}

// UnsetTxErrors ensures that no value is present for TxErrors, not even an explicit nil
func (o *InterfaceStats) UnsetTxErrors() {
	o.TxErrors.Unset()
}

// GetTxPkts returns the TxPkts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InterfaceStats) GetTxPkts() int64 {
	if o == nil || IsNil(o.TxPkts.Get()) {
		var ret int64
		return ret
	}
	return *o.TxPkts.Get()
}

// GetTxPktsOk returns a tuple with the TxPkts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InterfaceStats) GetTxPktsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TxPkts.Get(), o.TxPkts.IsSet()
}

// HasTxPkts returns a boolean if a field has been set.
func (o *InterfaceStats) HasTxPkts() bool {
	if o != nil && o.TxPkts.IsSet() {
		return true
	}

	return false
}

// SetTxPkts gets a reference to the given NullableInt64 and assigns it to the TxPkts field.
func (o *InterfaceStats) SetTxPkts(v int64) {
	o.TxPkts.Set(&v)
}
// SetTxPktsNil sets the value for TxPkts to be an explicit nil
func (o *InterfaceStats) SetTxPktsNil() {
	o.TxPkts.Set(nil)
}

// UnsetTxPkts ensures that no value is present for TxPkts, not even an explicit nil
func (o *InterfaceStats) UnsetTxPkts() {
	o.TxPkts.Unset()
}

func (o InterfaceStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RxBytes.IsSet() {
		toSerialize["rxBytes"] = o.RxBytes.Get()
	}
	if o.RxDropped.IsSet() {
		toSerialize["rxDropped"] = o.RxDropped.Get()
	}
	if o.RxErrors.IsSet() {
		toSerialize["rxErrors"] = o.RxErrors.Get()
	}
	if o.RxPkts.IsSet() {
		toSerialize["rxPkts"] = o.RxPkts.Get()
	}
	if o.TxBytes.IsSet() {
		toSerialize["txBytes"] = o.TxBytes.Get()
	}
	if o.TxDropped.IsSet() {
		toSerialize["txDropped"] = o.TxDropped.Get()
	}
	if o.TxErrors.IsSet() {
		toSerialize["txErrors"] = o.TxErrors.Get()
	}
	if o.TxPkts.IsSet() {
		toSerialize["txPkts"] = o.TxPkts.Get()
	}
	return toSerialize, nil
}

type NullableInterfaceStats struct {
	value *InterfaceStats
	isSet bool
}

func (v NullableInterfaceStats) Get() *InterfaceStats {
	return v.value
}

func (v *NullableInterfaceStats) Set(val *InterfaceStats) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceStats) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceStats(val *InterfaceStats) *NullableInterfaceStats {
	return &NullableInterfaceStats{value: val, isSet: true}
}

func (v NullableInterfaceStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


