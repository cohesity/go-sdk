/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeBondInterfaceParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeBondInterfaceParams{}

// NodeBondInterfaceParams Bond interface parameters.
type NodeBondInterfaceParams struct {
	// Names of the secondary interfaces.
	Members []string `json:"members"`
	// Id of the node, this is required when node is part of a cluster i.e when nodeType is 'ClusterNode'.
	NodeId NullableInt64 `json:"nodeId,omitempty"`
	// Type of the node where the interface has to be created. 'ClusterNode' indicates a node that is part of a cluster. 'FreeNode' indicates a node that is not part of cluster.
	NodeType string `json:"nodeType"`
	// Bonding mode of the interface.
	BondingMode string `json:"bondingMode"`
	// Name of the bond interface.
	Name string `json:"name"`
}

type _NodeBondInterfaceParams NodeBondInterfaceParams

// NewNodeBondInterfaceParams instantiates a new NodeBondInterfaceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeBondInterfaceParams(members []string, nodeType string, bondingMode string, name string) *NodeBondInterfaceParams {
	this := NodeBondInterfaceParams{}
	this.Members = members
	this.NodeType = nodeType
	this.BondingMode = bondingMode
	this.Name = name
	return &this
}

// NewNodeBondInterfaceParamsWithDefaults instantiates a new NodeBondInterfaceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeBondInterfaceParamsWithDefaults() *NodeBondInterfaceParams {
	this := NodeBondInterfaceParams{}
	return &this
}

// GetMembers returns the Members field value
func (o *NodeBondInterfaceParams) GetMembers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *NodeBondInterfaceParams) GetMembersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *NodeBondInterfaceParams) SetMembers(v []string) {
	o.Members = v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeBondInterfaceParams) GetNodeId() int64 {
	if o == nil || IsNil(o.NodeId.Get()) {
		var ret int64
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeBondInterfaceParams) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *NodeBondInterfaceParams) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableInt64 and assigns it to the NodeId field.
func (o *NodeBondInterfaceParams) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *NodeBondInterfaceParams) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *NodeBondInterfaceParams) UnsetNodeId() {
	o.NodeId.Unset()
}

// GetNodeType returns the NodeType field value
func (o *NodeBondInterfaceParams) GetNodeType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeType
}

// GetNodeTypeOk returns a tuple with the NodeType field value
// and a boolean to check if the value has been set.
func (o *NodeBondInterfaceParams) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeType, true
}

// SetNodeType sets field value
func (o *NodeBondInterfaceParams) SetNodeType(v string) {
	o.NodeType = v
}

// GetBondingMode returns the BondingMode field value
func (o *NodeBondInterfaceParams) GetBondingMode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.BondingMode
}

// GetBondingModeOk returns a tuple with the BondingMode field value
// and a boolean to check if the value has been set.
func (o *NodeBondInterfaceParams) GetBondingModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BondingMode, true
}

// SetBondingMode sets field value
func (o *NodeBondInterfaceParams) SetBondingMode(v string) {
	o.BondingMode = v
}

// GetName returns the Name field value
func (o *NodeBondInterfaceParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NodeBondInterfaceParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NodeBondInterfaceParams) SetName(v string) {
	o.Name = v
}

func (o NodeBondInterfaceParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeBondInterfaceParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["members"] = o.Members
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	toSerialize["nodeType"] = o.NodeType
	toSerialize["bondingMode"] = o.BondingMode
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *NodeBondInterfaceParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"members",
		"nodeType",
		"bondingMode",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeBondInterfaceParams := _NodeBondInterfaceParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeBondInterfaceParams)

	if err != nil {
		return err
	}

	*o = NodeBondInterfaceParams(varNodeBondInterfaceParams)

	return err
}

type NullableNodeBondInterfaceParams struct {
	value *NodeBondInterfaceParams
	isSet bool
}

func (v NullableNodeBondInterfaceParams) Get() *NodeBondInterfaceParams {
	return v.value
}

func (v *NullableNodeBondInterfaceParams) Set(val *NodeBondInterfaceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeBondInterfaceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeBondInterfaceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeBondInterfaceParams(val *NodeBondInterfaceParams) *NullableNodeBondInterfaceParams {
	return &NullableNodeBondInterfaceParams{value: val, isSet: true}
}

func (v NullableNodeBondInterfaceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeBondInterfaceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


