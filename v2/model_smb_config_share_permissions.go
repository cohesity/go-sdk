/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SmbConfigSharePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmbConfigSharePermissions{}

// SmbConfigSharePermissions Specifies share level permissions of the view.
type SmbConfigSharePermissions struct {
	// Specifies a list of share permissions.
	Permissions []SmbPermission `json:"permissions,omitempty"`
	// Specifies a list of super user sids.
	SuperUserSids []string `json:"superUserSids,omitempty"`
}

// NewSmbConfigSharePermissions instantiates a new SmbConfigSharePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbConfigSharePermissions() *SmbConfigSharePermissions {
	this := SmbConfigSharePermissions{}
	return &this
}

// NewSmbConfigSharePermissionsWithDefaults instantiates a new SmbConfigSharePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbConfigSharePermissionsWithDefaults() *SmbConfigSharePermissions {
	this := SmbConfigSharePermissions{}
	return &this
}

// GetPermissions returns the Permissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbConfigSharePermissions) GetPermissions() []SmbPermission {
	if o == nil {
		var ret []SmbPermission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbConfigSharePermissions) GetPermissionsOk() ([]SmbPermission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *SmbConfigSharePermissions) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []SmbPermission and assigns it to the Permissions field.
func (o *SmbConfigSharePermissions) SetPermissions(v []SmbPermission) {
	o.Permissions = v
}

// GetSuperUserSids returns the SuperUserSids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbConfigSharePermissions) GetSuperUserSids() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SuperUserSids
}

// GetSuperUserSidsOk returns a tuple with the SuperUserSids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbConfigSharePermissions) GetSuperUserSidsOk() ([]string, bool) {
	if o == nil || IsNil(o.SuperUserSids) {
		return nil, false
	}
	return o.SuperUserSids, true
}

// HasSuperUserSids returns a boolean if a field has been set.
func (o *SmbConfigSharePermissions) HasSuperUserSids() bool {
	if o != nil && !IsNil(o.SuperUserSids) {
		return true
	}

	return false
}

// SetSuperUserSids gets a reference to the given []string and assigns it to the SuperUserSids field.
func (o *SmbConfigSharePermissions) SetSuperUserSids(v []string) {
	o.SuperUserSids = v
}

func (o SmbConfigSharePermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmbConfigSharePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if o.SuperUserSids != nil {
		toSerialize["superUserSids"] = o.SuperUserSids
	}
	return toSerialize, nil
}

type NullableSmbConfigSharePermissions struct {
	value *SmbConfigSharePermissions
	isSet bool
}

func (v NullableSmbConfigSharePermissions) Get() *SmbConfigSharePermissions {
	return v.value
}

func (v *NullableSmbConfigSharePermissions) Set(val *SmbConfigSharePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbConfigSharePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbConfigSharePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbConfigSharePermissions(val *SmbConfigSharePermissions) *NullableSmbConfigSharePermissions {
	return &NullableSmbConfigSharePermissions{value: val, isSet: true}
}

func (v NullableSmbConfigSharePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbConfigSharePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


