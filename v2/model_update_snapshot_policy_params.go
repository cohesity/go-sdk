/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpdateSnapshotPolicyParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSnapshotPolicyParams{}

// UpdateSnapshotPolicyParams Describes update snapshot policy request params.
type UpdateSnapshotPolicyParams struct {
	// Days of the month.
	DaysOfMonth []int32 `json:"daysOfMonth,omitempty"`
	// Days of the week.
	DaysOfWeek []string `json:"daysOfWeek,omitempty"`
	// Number of days to keep the snapshot.
	NumOfDaysToKeep NullableInt64 `json:"numOfDaysToKeep,omitempty"`
	// Number of snapshot versions to keep.
	NumOfVersionsToKeep NullableInt64 `json:"numOfVersionsToKeep,omitempty"`
	// Suspend snapshot retention policy.
	SuspendRetentionPolicy NullableBool `json:"suspendRetentionPolicy,omitempty"`
	// Suspend snapshot schedule policy.
	SuspendSchedulePolicy NullableBool `json:"suspendSchedulePolicy,omitempty"`
	// Time of the day.
	Time NullableString `json:"time,omitempty"`
	// Time zone.
	TimeZone NullableString `json:"timeZone,omitempty"`
}

// NewUpdateSnapshotPolicyParams instantiates a new UpdateSnapshotPolicyParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSnapshotPolicyParams() *UpdateSnapshotPolicyParams {
	this := UpdateSnapshotPolicyParams{}
	return &this
}

// NewUpdateSnapshotPolicyParamsWithDefaults instantiates a new UpdateSnapshotPolicyParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSnapshotPolicyParamsWithDefaults() *UpdateSnapshotPolicyParams {
	this := UpdateSnapshotPolicyParams{}
	return &this
}

// GetDaysOfMonth returns the DaysOfMonth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSnapshotPolicyParams) GetDaysOfMonth() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.DaysOfMonth
}

// GetDaysOfMonthOk returns a tuple with the DaysOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSnapshotPolicyParams) GetDaysOfMonthOk() ([]int32, bool) {
	if o == nil || IsNil(o.DaysOfMonth) {
		return nil, false
	}
	return o.DaysOfMonth, true
}

// HasDaysOfMonth returns a boolean if a field has been set.
func (o *UpdateSnapshotPolicyParams) HasDaysOfMonth() bool {
	if o != nil && !IsNil(o.DaysOfMonth) {
		return true
	}

	return false
}

// SetDaysOfMonth gets a reference to the given []int32 and assigns it to the DaysOfMonth field.
func (o *UpdateSnapshotPolicyParams) SetDaysOfMonth(v []int32) {
	o.DaysOfMonth = v
}

// GetDaysOfWeek returns the DaysOfWeek field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSnapshotPolicyParams) GetDaysOfWeek() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DaysOfWeek
}

// GetDaysOfWeekOk returns a tuple with the DaysOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSnapshotPolicyParams) GetDaysOfWeekOk() ([]string, bool) {
	if o == nil || IsNil(o.DaysOfWeek) {
		return nil, false
	}
	return o.DaysOfWeek, true
}

// HasDaysOfWeek returns a boolean if a field has been set.
func (o *UpdateSnapshotPolicyParams) HasDaysOfWeek() bool {
	if o != nil && !IsNil(o.DaysOfWeek) {
		return true
	}

	return false
}

// SetDaysOfWeek gets a reference to the given []string and assigns it to the DaysOfWeek field.
func (o *UpdateSnapshotPolicyParams) SetDaysOfWeek(v []string) {
	o.DaysOfWeek = v
}

// GetNumOfDaysToKeep returns the NumOfDaysToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSnapshotPolicyParams) GetNumOfDaysToKeep() int64 {
	if o == nil || IsNil(o.NumOfDaysToKeep.Get()) {
		var ret int64
		return ret
	}
	return *o.NumOfDaysToKeep.Get()
}

// GetNumOfDaysToKeepOk returns a tuple with the NumOfDaysToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSnapshotPolicyParams) GetNumOfDaysToKeepOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumOfDaysToKeep.Get(), o.NumOfDaysToKeep.IsSet()
}

// HasNumOfDaysToKeep returns a boolean if a field has been set.
func (o *UpdateSnapshotPolicyParams) HasNumOfDaysToKeep() bool {
	if o != nil && o.NumOfDaysToKeep.IsSet() {
		return true
	}

	return false
}

// SetNumOfDaysToKeep gets a reference to the given NullableInt64 and assigns it to the NumOfDaysToKeep field.
func (o *UpdateSnapshotPolicyParams) SetNumOfDaysToKeep(v int64) {
	o.NumOfDaysToKeep.Set(&v)
}
// SetNumOfDaysToKeepNil sets the value for NumOfDaysToKeep to be an explicit nil
func (o *UpdateSnapshotPolicyParams) SetNumOfDaysToKeepNil() {
	o.NumOfDaysToKeep.Set(nil)
}

// UnsetNumOfDaysToKeep ensures that no value is present for NumOfDaysToKeep, not even an explicit nil
func (o *UpdateSnapshotPolicyParams) UnsetNumOfDaysToKeep() {
	o.NumOfDaysToKeep.Unset()
}

// GetNumOfVersionsToKeep returns the NumOfVersionsToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSnapshotPolicyParams) GetNumOfVersionsToKeep() int64 {
	if o == nil || IsNil(o.NumOfVersionsToKeep.Get()) {
		var ret int64
		return ret
	}
	return *o.NumOfVersionsToKeep.Get()
}

// GetNumOfVersionsToKeepOk returns a tuple with the NumOfVersionsToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSnapshotPolicyParams) GetNumOfVersionsToKeepOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumOfVersionsToKeep.Get(), o.NumOfVersionsToKeep.IsSet()
}

// HasNumOfVersionsToKeep returns a boolean if a field has been set.
func (o *UpdateSnapshotPolicyParams) HasNumOfVersionsToKeep() bool {
	if o != nil && o.NumOfVersionsToKeep.IsSet() {
		return true
	}

	return false
}

// SetNumOfVersionsToKeep gets a reference to the given NullableInt64 and assigns it to the NumOfVersionsToKeep field.
func (o *UpdateSnapshotPolicyParams) SetNumOfVersionsToKeep(v int64) {
	o.NumOfVersionsToKeep.Set(&v)
}
// SetNumOfVersionsToKeepNil sets the value for NumOfVersionsToKeep to be an explicit nil
func (o *UpdateSnapshotPolicyParams) SetNumOfVersionsToKeepNil() {
	o.NumOfVersionsToKeep.Set(nil)
}

// UnsetNumOfVersionsToKeep ensures that no value is present for NumOfVersionsToKeep, not even an explicit nil
func (o *UpdateSnapshotPolicyParams) UnsetNumOfVersionsToKeep() {
	o.NumOfVersionsToKeep.Unset()
}

// GetSuspendRetentionPolicy returns the SuspendRetentionPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSnapshotPolicyParams) GetSuspendRetentionPolicy() bool {
	if o == nil || IsNil(o.SuspendRetentionPolicy.Get()) {
		var ret bool
		return ret
	}
	return *o.SuspendRetentionPolicy.Get()
}

// GetSuspendRetentionPolicyOk returns a tuple with the SuspendRetentionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSnapshotPolicyParams) GetSuspendRetentionPolicyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuspendRetentionPolicy.Get(), o.SuspendRetentionPolicy.IsSet()
}

// HasSuspendRetentionPolicy returns a boolean if a field has been set.
func (o *UpdateSnapshotPolicyParams) HasSuspendRetentionPolicy() bool {
	if o != nil && o.SuspendRetentionPolicy.IsSet() {
		return true
	}

	return false
}

// SetSuspendRetentionPolicy gets a reference to the given NullableBool and assigns it to the SuspendRetentionPolicy field.
func (o *UpdateSnapshotPolicyParams) SetSuspendRetentionPolicy(v bool) {
	o.SuspendRetentionPolicy.Set(&v)
}
// SetSuspendRetentionPolicyNil sets the value for SuspendRetentionPolicy to be an explicit nil
func (o *UpdateSnapshotPolicyParams) SetSuspendRetentionPolicyNil() {
	o.SuspendRetentionPolicy.Set(nil)
}

// UnsetSuspendRetentionPolicy ensures that no value is present for SuspendRetentionPolicy, not even an explicit nil
func (o *UpdateSnapshotPolicyParams) UnsetSuspendRetentionPolicy() {
	o.SuspendRetentionPolicy.Unset()
}

// GetSuspendSchedulePolicy returns the SuspendSchedulePolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSnapshotPolicyParams) GetSuspendSchedulePolicy() bool {
	if o == nil || IsNil(o.SuspendSchedulePolicy.Get()) {
		var ret bool
		return ret
	}
	return *o.SuspendSchedulePolicy.Get()
}

// GetSuspendSchedulePolicyOk returns a tuple with the SuspendSchedulePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSnapshotPolicyParams) GetSuspendSchedulePolicyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuspendSchedulePolicy.Get(), o.SuspendSchedulePolicy.IsSet()
}

// HasSuspendSchedulePolicy returns a boolean if a field has been set.
func (o *UpdateSnapshotPolicyParams) HasSuspendSchedulePolicy() bool {
	if o != nil && o.SuspendSchedulePolicy.IsSet() {
		return true
	}

	return false
}

// SetSuspendSchedulePolicy gets a reference to the given NullableBool and assigns it to the SuspendSchedulePolicy field.
func (o *UpdateSnapshotPolicyParams) SetSuspendSchedulePolicy(v bool) {
	o.SuspendSchedulePolicy.Set(&v)
}
// SetSuspendSchedulePolicyNil sets the value for SuspendSchedulePolicy to be an explicit nil
func (o *UpdateSnapshotPolicyParams) SetSuspendSchedulePolicyNil() {
	o.SuspendSchedulePolicy.Set(nil)
}

// UnsetSuspendSchedulePolicy ensures that no value is present for SuspendSchedulePolicy, not even an explicit nil
func (o *UpdateSnapshotPolicyParams) UnsetSuspendSchedulePolicy() {
	o.SuspendSchedulePolicy.Unset()
}

// GetTime returns the Time field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSnapshotPolicyParams) GetTime() string {
	if o == nil || IsNil(o.Time.Get()) {
		var ret string
		return ret
	}
	return *o.Time.Get()
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSnapshotPolicyParams) GetTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Time.Get(), o.Time.IsSet()
}

// HasTime returns a boolean if a field has been set.
func (o *UpdateSnapshotPolicyParams) HasTime() bool {
	if o != nil && o.Time.IsSet() {
		return true
	}

	return false
}

// SetTime gets a reference to the given NullableString and assigns it to the Time field.
func (o *UpdateSnapshotPolicyParams) SetTime(v string) {
	o.Time.Set(&v)
}
// SetTimeNil sets the value for Time to be an explicit nil
func (o *UpdateSnapshotPolicyParams) SetTimeNil() {
	o.Time.Set(nil)
}

// UnsetTime ensures that no value is present for Time, not even an explicit nil
func (o *UpdateSnapshotPolicyParams) UnsetTime() {
	o.Time.Unset()
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSnapshotPolicyParams) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone.Get()) {
		var ret string
		return ret
	}
	return *o.TimeZone.Get()
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSnapshotPolicyParams) GetTimeZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeZone.Get(), o.TimeZone.IsSet()
}

// HasTimeZone returns a boolean if a field has been set.
func (o *UpdateSnapshotPolicyParams) HasTimeZone() bool {
	if o != nil && o.TimeZone.IsSet() {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given NullableString and assigns it to the TimeZone field.
func (o *UpdateSnapshotPolicyParams) SetTimeZone(v string) {
	o.TimeZone.Set(&v)
}
// SetTimeZoneNil sets the value for TimeZone to be an explicit nil
func (o *UpdateSnapshotPolicyParams) SetTimeZoneNil() {
	o.TimeZone.Set(nil)
}

// UnsetTimeZone ensures that no value is present for TimeZone, not even an explicit nil
func (o *UpdateSnapshotPolicyParams) UnsetTimeZone() {
	o.TimeZone.Unset()
}

func (o UpdateSnapshotPolicyParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSnapshotPolicyParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DaysOfMonth != nil {
		toSerialize["daysOfMonth"] = o.DaysOfMonth
	}
	if o.DaysOfWeek != nil {
		toSerialize["daysOfWeek"] = o.DaysOfWeek
	}
	if o.NumOfDaysToKeep.IsSet() {
		toSerialize["numOfDaysToKeep"] = o.NumOfDaysToKeep.Get()
	}
	if o.NumOfVersionsToKeep.IsSet() {
		toSerialize["numOfVersionsToKeep"] = o.NumOfVersionsToKeep.Get()
	}
	if o.SuspendRetentionPolicy.IsSet() {
		toSerialize["suspendRetentionPolicy"] = o.SuspendRetentionPolicy.Get()
	}
	if o.SuspendSchedulePolicy.IsSet() {
		toSerialize["suspendSchedulePolicy"] = o.SuspendSchedulePolicy.Get()
	}
	if o.Time.IsSet() {
		toSerialize["time"] = o.Time.Get()
	}
	if o.TimeZone.IsSet() {
		toSerialize["timeZone"] = o.TimeZone.Get()
	}
	return toSerialize, nil
}

type NullableUpdateSnapshotPolicyParams struct {
	value *UpdateSnapshotPolicyParams
	isSet bool
}

func (v NullableUpdateSnapshotPolicyParams) Get() *UpdateSnapshotPolicyParams {
	return v.value
}

func (v *NullableUpdateSnapshotPolicyParams) Set(val *UpdateSnapshotPolicyParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSnapshotPolicyParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSnapshotPolicyParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSnapshotPolicyParams(val *UpdateSnapshotPolicyParams) *NullableUpdateSnapshotPolicyParams {
	return &NullableUpdateSnapshotPolicyParams{value: val, isSet: true}
}

func (v NullableUpdateSnapshotPolicyParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSnapshotPolicyParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


