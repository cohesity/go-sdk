/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectMailboxParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectMailboxParam{}

// ObjectMailboxParam Specifies Mailbox recovery parameters associated with a user.
type ObjectMailboxParam struct {
	MailboxParams ObjectMailboxParamMailboxParams `json:"mailboxParams"`
	OwnerInfo ObjectMailboxParamOwnerInfo `json:"ownerInfo"`
}

type _ObjectMailboxParam ObjectMailboxParam

// NewObjectMailboxParam instantiates a new ObjectMailboxParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectMailboxParam(mailboxParams ObjectMailboxParamMailboxParams, ownerInfo ObjectMailboxParamOwnerInfo) *ObjectMailboxParam {
	this := ObjectMailboxParam{}
	this.MailboxParams = mailboxParams
	this.OwnerInfo = ownerInfo
	return &this
}

// NewObjectMailboxParamWithDefaults instantiates a new ObjectMailboxParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectMailboxParamWithDefaults() *ObjectMailboxParam {
	this := ObjectMailboxParam{}
	return &this
}

// GetMailboxParams returns the MailboxParams field value
func (o *ObjectMailboxParam) GetMailboxParams() ObjectMailboxParamMailboxParams {
	if o == nil {
		var ret ObjectMailboxParamMailboxParams
		return ret
	}

	return o.MailboxParams
}

// GetMailboxParamsOk returns a tuple with the MailboxParams field value
// and a boolean to check if the value has been set.
func (o *ObjectMailboxParam) GetMailboxParamsOk() (*ObjectMailboxParamMailboxParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MailboxParams, true
}

// SetMailboxParams sets field value
func (o *ObjectMailboxParam) SetMailboxParams(v ObjectMailboxParamMailboxParams) {
	o.MailboxParams = v
}

// GetOwnerInfo returns the OwnerInfo field value
func (o *ObjectMailboxParam) GetOwnerInfo() ObjectMailboxParamOwnerInfo {
	if o == nil {
		var ret ObjectMailboxParamOwnerInfo
		return ret
	}

	return o.OwnerInfo
}

// GetOwnerInfoOk returns a tuple with the OwnerInfo field value
// and a boolean to check if the value has been set.
func (o *ObjectMailboxParam) GetOwnerInfoOk() (*ObjectMailboxParamOwnerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerInfo, true
}

// SetOwnerInfo sets field value
func (o *ObjectMailboxParam) SetOwnerInfo(v ObjectMailboxParamOwnerInfo) {
	o.OwnerInfo = v
}

func (o ObjectMailboxParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectMailboxParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mailboxParams"] = o.MailboxParams
	toSerialize["ownerInfo"] = o.OwnerInfo
	return toSerialize, nil
}

func (o *ObjectMailboxParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mailboxParams",
		"ownerInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectMailboxParam := _ObjectMailboxParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectMailboxParam)

	if err != nil {
		return err
	}

	*o = ObjectMailboxParam(varObjectMailboxParam)

	return err
}

type NullableObjectMailboxParam struct {
	value *ObjectMailboxParam
	isSet bool
}

func (v NullableObjectMailboxParam) Get() *ObjectMailboxParam {
	return v.value
}

func (v *NullableObjectMailboxParam) Set(val *ObjectMailboxParam) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectMailboxParam) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectMailboxParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectMailboxParam(val *ObjectMailboxParam) *NullableObjectMailboxParam {
	return &NullableObjectMailboxParam{value: val, isSet: true}
}

func (v NullableObjectMailboxParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectMailboxParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


