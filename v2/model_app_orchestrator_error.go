/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AppOrchestratorError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppOrchestratorError{}

// AppOrchestratorError Error Object.
type AppOrchestratorError struct {
	// The error code indicating the type of error.
	ErrorCode *int32 `json:"errorCode,omitempty"`
	// A descriptive error message explaining the issue.
	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// NewAppOrchestratorError instantiates a new AppOrchestratorError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppOrchestratorError() *AppOrchestratorError {
	this := AppOrchestratorError{}
	return &this
}

// NewAppOrchestratorErrorWithDefaults instantiates a new AppOrchestratorError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppOrchestratorErrorWithDefaults() *AppOrchestratorError {
	this := AppOrchestratorError{}
	return &this
}

// GetErrorCode returns the ErrorCode field value if set, zero value otherwise.
func (o *AppOrchestratorError) GetErrorCode() int32 {
	if o == nil || IsNil(o.ErrorCode) {
		var ret int32
		return ret
	}
	return *o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppOrchestratorError) GetErrorCodeOk() (*int32, bool) {
	if o == nil || IsNil(o.ErrorCode) {
		return nil, false
	}
	return o.ErrorCode, true
}

// HasErrorCode returns a boolean if a field has been set.
func (o *AppOrchestratorError) HasErrorCode() bool {
	if o != nil && !IsNil(o.ErrorCode) {
		return true
	}

	return false
}

// SetErrorCode gets a reference to the given int32 and assigns it to the ErrorCode field.
func (o *AppOrchestratorError) SetErrorCode(v int32) {
	o.ErrorCode = &v
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *AppOrchestratorError) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppOrchestratorError) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *AppOrchestratorError) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *AppOrchestratorError) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

func (o AppOrchestratorError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppOrchestratorError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorCode) {
		toSerialize["errorCode"] = o.ErrorCode
	}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	return toSerialize, nil
}

type NullableAppOrchestratorError struct {
	value *AppOrchestratorError
	isSet bool
}

func (v NullableAppOrchestratorError) Get() *AppOrchestratorError {
	return v.value
}

func (v *NullableAppOrchestratorError) Set(val *AppOrchestratorError) {
	v.value = val
	v.isSet = true
}

func (v NullableAppOrchestratorError) IsSet() bool {
	return v.isSet
}

func (v *NullableAppOrchestratorError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppOrchestratorError(val *AppOrchestratorError) *NullableAppOrchestratorError {
	return &NullableAppOrchestratorError{value: val, isSet: true}
}

func (v NullableAppOrchestratorError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppOrchestratorError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


