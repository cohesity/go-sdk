/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GraphNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphNode{}

// GraphNode Determines information about a node in the graph.
type GraphNode struct {
	// Specifies the aad specific node information.
	AadParams NullableAadNodeInfo `json:"aadParams,omitempty"`
	// Boolean to indicate if this is a root node or not.
	IsRootNode NullableBool `json:"isRootNode,omitempty"`
	// Specifies the display name of the node.
	Name NullableString `json:"name,omitempty"`
	// Specifies the unique id of the node.
	NodeId string `json:"nodeId"`
}

type _GraphNode GraphNode

// NewGraphNode instantiates a new GraphNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphNode(nodeId string) *GraphNode {
	this := GraphNode{}
	this.NodeId = nodeId
	return &this
}

// NewGraphNodeWithDefaults instantiates a new GraphNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphNodeWithDefaults() *GraphNode {
	this := GraphNode{}
	return &this
}

// GetAadParams returns the AadParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphNode) GetAadParams() AadNodeInfo {
	if o == nil || IsNil(o.AadParams.Get()) {
		var ret AadNodeInfo
		return ret
	}
	return *o.AadParams.Get()
}

// GetAadParamsOk returns a tuple with the AadParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphNode) GetAadParamsOk() (*AadNodeInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.AadParams.Get(), o.AadParams.IsSet()
}

// HasAadParams returns a boolean if a field has been set.
func (o *GraphNode) HasAadParams() bool {
	if o != nil && o.AadParams.IsSet() {
		return true
	}

	return false
}

// SetAadParams gets a reference to the given NullableAadNodeInfo and assigns it to the AadParams field.
func (o *GraphNode) SetAadParams(v AadNodeInfo) {
	o.AadParams.Set(&v)
}
// SetAadParamsNil sets the value for AadParams to be an explicit nil
func (o *GraphNode) SetAadParamsNil() {
	o.AadParams.Set(nil)
}

// UnsetAadParams ensures that no value is present for AadParams, not even an explicit nil
func (o *GraphNode) UnsetAadParams() {
	o.AadParams.Unset()
}

// GetIsRootNode returns the IsRootNode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphNode) GetIsRootNode() bool {
	if o == nil || IsNil(o.IsRootNode.Get()) {
		var ret bool
		return ret
	}
	return *o.IsRootNode.Get()
}

// GetIsRootNodeOk returns a tuple with the IsRootNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphNode) GetIsRootNodeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsRootNode.Get(), o.IsRootNode.IsSet()
}

// HasIsRootNode returns a boolean if a field has been set.
func (o *GraphNode) HasIsRootNode() bool {
	if o != nil && o.IsRootNode.IsSet() {
		return true
	}

	return false
}

// SetIsRootNode gets a reference to the given NullableBool and assigns it to the IsRootNode field.
func (o *GraphNode) SetIsRootNode(v bool) {
	o.IsRootNode.Set(&v)
}
// SetIsRootNodeNil sets the value for IsRootNode to be an explicit nil
func (o *GraphNode) SetIsRootNodeNil() {
	o.IsRootNode.Set(nil)
}

// UnsetIsRootNode ensures that no value is present for IsRootNode, not even an explicit nil
func (o *GraphNode) UnsetIsRootNode() {
	o.IsRootNode.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphNode) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphNode) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *GraphNode) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *GraphNode) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *GraphNode) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *GraphNode) UnsetName() {
	o.Name.Unset()
}

// GetNodeId returns the NodeId field value
func (o *GraphNode) GetNodeId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *GraphNode) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *GraphNode) SetNodeId(v string) {
	o.NodeId = v
}

func (o GraphNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AadParams.IsSet() {
		toSerialize["aadParams"] = o.AadParams.Get()
	}
	if o.IsRootNode.IsSet() {
		toSerialize["isRootNode"] = o.IsRootNode.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	toSerialize["nodeId"] = o.NodeId
	return toSerialize, nil
}

func (o *GraphNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGraphNode := _GraphNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGraphNode)

	if err != nil {
		return err
	}

	*o = GraphNode(varGraphNode)

	return err
}

type NullableGraphNode struct {
	value *GraphNode
	isSet bool
}

func (v NullableGraphNode) Get() *GraphNode {
	return v.value
}

func (v *NullableGraphNode) Set(val *GraphNode) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphNode) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphNode(val *GraphNode) *NullableGraphNode {
	return &NullableGraphNode{value: val, isSet: true}
}

func (v NullableGraphNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


