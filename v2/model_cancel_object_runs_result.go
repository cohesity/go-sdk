/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CancelObjectRunsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelObjectRunsResult{}

// CancelObjectRunsResult Result after canceling object runs.
type CancelObjectRunsResult struct {
	// Specifies the error message if any error happens.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Specifies the id of the object.
	ObjectId NullableInt64 `json:"objectId,omitempty"`
}

// NewCancelObjectRunsResult instantiates a new CancelObjectRunsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelObjectRunsResult() *CancelObjectRunsResult {
	this := CancelObjectRunsResult{}
	return &this
}

// NewCancelObjectRunsResultWithDefaults instantiates a new CancelObjectRunsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelObjectRunsResultWithDefaults() *CancelObjectRunsResult {
	this := CancelObjectRunsResult{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancelObjectRunsResult) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunsResult) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *CancelObjectRunsResult) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *CancelObjectRunsResult) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *CancelObjectRunsResult) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *CancelObjectRunsResult) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancelObjectRunsResult) GetObjectId() int64 {
	if o == nil || IsNil(o.ObjectId.Get()) {
		var ret int64
		return ret
	}
	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunsResult) GetObjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// HasObjectId returns a boolean if a field has been set.
func (o *CancelObjectRunsResult) HasObjectId() bool {
	if o != nil && o.ObjectId.IsSet() {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given NullableInt64 and assigns it to the ObjectId field.
func (o *CancelObjectRunsResult) SetObjectId(v int64) {
	o.ObjectId.Set(&v)
}
// SetObjectIdNil sets the value for ObjectId to be an explicit nil
func (o *CancelObjectRunsResult) SetObjectIdNil() {
	o.ObjectId.Set(nil)
}

// UnsetObjectId ensures that no value is present for ObjectId, not even an explicit nil
func (o *CancelObjectRunsResult) UnsetObjectId() {
	o.ObjectId.Unset()
}

func (o CancelObjectRunsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelObjectRunsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.ObjectId.IsSet() {
		toSerialize["objectId"] = o.ObjectId.Get()
	}
	return toSerialize, nil
}

type NullableCancelObjectRunsResult struct {
	value *CancelObjectRunsResult
	isSet bool
}

func (v NullableCancelObjectRunsResult) Get() *CancelObjectRunsResult {
	return v.value
}

func (v *NullableCancelObjectRunsResult) Set(val *CancelObjectRunsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelObjectRunsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelObjectRunsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelObjectRunsResult(val *CancelObjectRunsResult) *NullableCancelObjectRunsResult {
	return &NullableCancelObjectRunsResult{value: val, isSet: true}
}

func (v NullableCancelObjectRunsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelObjectRunsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


