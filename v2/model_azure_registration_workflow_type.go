/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AzureRegistrationWorkflowType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureRegistrationWorkflowType{}

// AzureRegistrationWorkflowType Azure Registration Workflow Type.
type AzureRegistrationWorkflowType struct {
	// Specifies Azure Registration Workflow Type.
	Enum *string `json:"enum,omitempty"`
}

// NewAzureRegistrationWorkflowType instantiates a new AzureRegistrationWorkflowType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureRegistrationWorkflowType() *AzureRegistrationWorkflowType {
	this := AzureRegistrationWorkflowType{}
	return &this
}

// NewAzureRegistrationWorkflowTypeWithDefaults instantiates a new AzureRegistrationWorkflowType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureRegistrationWorkflowTypeWithDefaults() *AzureRegistrationWorkflowType {
	this := AzureRegistrationWorkflowType{}
	return &this
}

// GetEnum returns the Enum field value if set, zero value otherwise.
func (o *AzureRegistrationWorkflowType) GetEnum() string {
	if o == nil || IsNil(o.Enum) {
		var ret string
		return ret
	}
	return *o.Enum
}

// GetEnumOk returns a tuple with the Enum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureRegistrationWorkflowType) GetEnumOk() (*string, bool) {
	if o == nil || IsNil(o.Enum) {
		return nil, false
	}
	return o.Enum, true
}

// HasEnum returns a boolean if a field has been set.
func (o *AzureRegistrationWorkflowType) HasEnum() bool {
	if o != nil && !IsNil(o.Enum) {
		return true
	}

	return false
}

// SetEnum gets a reference to the given string and assigns it to the Enum field.
func (o *AzureRegistrationWorkflowType) SetEnum(v string) {
	o.Enum = &v
}

func (o AzureRegistrationWorkflowType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureRegistrationWorkflowType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enum) {
		toSerialize["enum"] = o.Enum
	}
	return toSerialize, nil
}

type NullableAzureRegistrationWorkflowType struct {
	value *AzureRegistrationWorkflowType
	isSet bool
}

func (v NullableAzureRegistrationWorkflowType) Get() *AzureRegistrationWorkflowType {
	return v.value
}

func (v *NullableAzureRegistrationWorkflowType) Set(val *AzureRegistrationWorkflowType) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureRegistrationWorkflowType) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureRegistrationWorkflowType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureRegistrationWorkflowType(val *AzureRegistrationWorkflowType) *NullableAzureRegistrationWorkflowType {
	return &NullableAzureRegistrationWorkflowType{value: val, isSet: true}
}

func (v NullableAzureRegistrationWorkflowType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureRegistrationWorkflowType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


