/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UptieringFileAgePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UptieringFileAgePolicy{}

// UptieringFileAgePolicy Specifies the file's selection rule by file age for up tiering data tiering task eg. 1. select files last accessed 2 weeks ago. 2. select files last modified 1 month ago.
type UptieringFileAgePolicy struct {
	// Specifies the number of msecs used for file selection.
	AgeMsecs NullableInt64 `json:"ageMsecs,omitempty"`
	// Specifies the condition for the file age.
	Condition NullableString `json:"condition,omitempty"`
	// Specifies number of file access in last ageMsecs.
	NumFileAccess NullableInt32 `json:"numFileAccess,omitempty"`
}

// NewUptieringFileAgePolicy instantiates a new UptieringFileAgePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUptieringFileAgePolicy() *UptieringFileAgePolicy {
	this := UptieringFileAgePolicy{}
	return &this
}

// NewUptieringFileAgePolicyWithDefaults instantiates a new UptieringFileAgePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUptieringFileAgePolicyWithDefaults() *UptieringFileAgePolicy {
	this := UptieringFileAgePolicy{}
	return &this
}

// GetAgeMsecs returns the AgeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UptieringFileAgePolicy) GetAgeMsecs() int64 {
	if o == nil || IsNil(o.AgeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.AgeMsecs.Get()
}

// GetAgeMsecsOk returns a tuple with the AgeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UptieringFileAgePolicy) GetAgeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgeMsecs.Get(), o.AgeMsecs.IsSet()
}

// HasAgeMsecs returns a boolean if a field has been set.
func (o *UptieringFileAgePolicy) HasAgeMsecs() bool {
	if o != nil && o.AgeMsecs.IsSet() {
		return true
	}

	return false
}

// SetAgeMsecs gets a reference to the given NullableInt64 and assigns it to the AgeMsecs field.
func (o *UptieringFileAgePolicy) SetAgeMsecs(v int64) {
	o.AgeMsecs.Set(&v)
}
// SetAgeMsecsNil sets the value for AgeMsecs to be an explicit nil
func (o *UptieringFileAgePolicy) SetAgeMsecsNil() {
	o.AgeMsecs.Set(nil)
}

// UnsetAgeMsecs ensures that no value is present for AgeMsecs, not even an explicit nil
func (o *UptieringFileAgePolicy) UnsetAgeMsecs() {
	o.AgeMsecs.Unset()
}

// GetCondition returns the Condition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UptieringFileAgePolicy) GetCondition() string {
	if o == nil || IsNil(o.Condition.Get()) {
		var ret string
		return ret
	}
	return *o.Condition.Get()
}

// GetConditionOk returns a tuple with the Condition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UptieringFileAgePolicy) GetConditionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Condition.Get(), o.Condition.IsSet()
}

// HasCondition returns a boolean if a field has been set.
func (o *UptieringFileAgePolicy) HasCondition() bool {
	if o != nil && o.Condition.IsSet() {
		return true
	}

	return false
}

// SetCondition gets a reference to the given NullableString and assigns it to the Condition field.
func (o *UptieringFileAgePolicy) SetCondition(v string) {
	o.Condition.Set(&v)
}
// SetConditionNil sets the value for Condition to be an explicit nil
func (o *UptieringFileAgePolicy) SetConditionNil() {
	o.Condition.Set(nil)
}

// UnsetCondition ensures that no value is present for Condition, not even an explicit nil
func (o *UptieringFileAgePolicy) UnsetCondition() {
	o.Condition.Unset()
}

// GetNumFileAccess returns the NumFileAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UptieringFileAgePolicy) GetNumFileAccess() int32 {
	if o == nil || IsNil(o.NumFileAccess.Get()) {
		var ret int32
		return ret
	}
	return *o.NumFileAccess.Get()
}

// GetNumFileAccessOk returns a tuple with the NumFileAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UptieringFileAgePolicy) GetNumFileAccessOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumFileAccess.Get(), o.NumFileAccess.IsSet()
}

// HasNumFileAccess returns a boolean if a field has been set.
func (o *UptieringFileAgePolicy) HasNumFileAccess() bool {
	if o != nil && o.NumFileAccess.IsSet() {
		return true
	}

	return false
}

// SetNumFileAccess gets a reference to the given NullableInt32 and assigns it to the NumFileAccess field.
func (o *UptieringFileAgePolicy) SetNumFileAccess(v int32) {
	o.NumFileAccess.Set(&v)
}
// SetNumFileAccessNil sets the value for NumFileAccess to be an explicit nil
func (o *UptieringFileAgePolicy) SetNumFileAccessNil() {
	o.NumFileAccess.Set(nil)
}

// UnsetNumFileAccess ensures that no value is present for NumFileAccess, not even an explicit nil
func (o *UptieringFileAgePolicy) UnsetNumFileAccess() {
	o.NumFileAccess.Unset()
}

func (o UptieringFileAgePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UptieringFileAgePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AgeMsecs.IsSet() {
		toSerialize["ageMsecs"] = o.AgeMsecs.Get()
	}
	if o.Condition.IsSet() {
		toSerialize["condition"] = o.Condition.Get()
	}
	if o.NumFileAccess.IsSet() {
		toSerialize["numFileAccess"] = o.NumFileAccess.Get()
	}
	return toSerialize, nil
}

type NullableUptieringFileAgePolicy struct {
	value *UptieringFileAgePolicy
	isSet bool
}

func (v NullableUptieringFileAgePolicy) Get() *UptieringFileAgePolicy {
	return v.value
}

func (v *NullableUptieringFileAgePolicy) Set(val *UptieringFileAgePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableUptieringFileAgePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableUptieringFileAgePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUptieringFileAgePolicy(val *UptieringFileAgePolicy) *NullableUptieringFileAgePolicy {
	return &NullableUptieringFileAgePolicy{value: val, isSet: true}
}

func (v NullableUptieringFileAgePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUptieringFileAgePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


