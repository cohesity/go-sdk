/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsAuthenticationMethodsParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsAuthenticationMethodsParams{}

// AwsAuthenticationMethodsParams Specifies the Authentication Methods parameters which are specific to AWS related External Targets.
type AwsAuthenticationMethodsParams struct {
	// Specifies the AWS External Target Authentication type.
	AuthenticationType NullableString `json:"authenticationType"`
	IAmRoleParams *AwsIAmRoleParams `json:"iAmRoleParams,omitempty"`
	IAmRolesAnywhereParams *AwsIAmRolesAnywhereParams `json:"iAmRolesAnywhereParams,omitempty"`
	IAmUserParams *AwsIAmUserParams `json:"iAmUserParams,omitempty"`
	UseSTSParams *AwsUseSTSParams `json:"useSTSParams,omitempty"`
}

type _AwsAuthenticationMethodsParams AwsAuthenticationMethodsParams

// NewAwsAuthenticationMethodsParams instantiates a new AwsAuthenticationMethodsParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsAuthenticationMethodsParams(authenticationType NullableString) *AwsAuthenticationMethodsParams {
	this := AwsAuthenticationMethodsParams{}
	this.AuthenticationType = authenticationType
	return &this
}

// NewAwsAuthenticationMethodsParamsWithDefaults instantiates a new AwsAuthenticationMethodsParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsAuthenticationMethodsParamsWithDefaults() *AwsAuthenticationMethodsParams {
	this := AwsAuthenticationMethodsParams{}
	return &this
}

// GetAuthenticationType returns the AuthenticationType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsAuthenticationMethodsParams) GetAuthenticationType() string {
	if o == nil || o.AuthenticationType.Get() == nil {
		var ret string
		return ret
	}

	return *o.AuthenticationType.Get()
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsAuthenticationMethodsParams) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticationType.Get(), o.AuthenticationType.IsSet()
}

// SetAuthenticationType sets field value
func (o *AwsAuthenticationMethodsParams) SetAuthenticationType(v string) {
	o.AuthenticationType.Set(&v)
}

// GetIAmRoleParams returns the IAmRoleParams field value if set, zero value otherwise.
func (o *AwsAuthenticationMethodsParams) GetIAmRoleParams() AwsIAmRoleParams {
	if o == nil || IsNil(o.IAmRoleParams) {
		var ret AwsIAmRoleParams
		return ret
	}
	return *o.IAmRoleParams
}

// GetIAmRoleParamsOk returns a tuple with the IAmRoleParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsAuthenticationMethodsParams) GetIAmRoleParamsOk() (*AwsIAmRoleParams, bool) {
	if o == nil || IsNil(o.IAmRoleParams) {
		return nil, false
	}
	return o.IAmRoleParams, true
}

// HasIAmRoleParams returns a boolean if a field has been set.
func (o *AwsAuthenticationMethodsParams) HasIAmRoleParams() bool {
	if o != nil && !IsNil(o.IAmRoleParams) {
		return true
	}

	return false
}

// SetIAmRoleParams gets a reference to the given AwsIAmRoleParams and assigns it to the IAmRoleParams field.
func (o *AwsAuthenticationMethodsParams) SetIAmRoleParams(v AwsIAmRoleParams) {
	o.IAmRoleParams = &v
}

// GetIAmRolesAnywhereParams returns the IAmRolesAnywhereParams field value if set, zero value otherwise.
func (o *AwsAuthenticationMethodsParams) GetIAmRolesAnywhereParams() AwsIAmRolesAnywhereParams {
	if o == nil || IsNil(o.IAmRolesAnywhereParams) {
		var ret AwsIAmRolesAnywhereParams
		return ret
	}
	return *o.IAmRolesAnywhereParams
}

// GetIAmRolesAnywhereParamsOk returns a tuple with the IAmRolesAnywhereParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsAuthenticationMethodsParams) GetIAmRolesAnywhereParamsOk() (*AwsIAmRolesAnywhereParams, bool) {
	if o == nil || IsNil(o.IAmRolesAnywhereParams) {
		return nil, false
	}
	return o.IAmRolesAnywhereParams, true
}

// HasIAmRolesAnywhereParams returns a boolean if a field has been set.
func (o *AwsAuthenticationMethodsParams) HasIAmRolesAnywhereParams() bool {
	if o != nil && !IsNil(o.IAmRolesAnywhereParams) {
		return true
	}

	return false
}

// SetIAmRolesAnywhereParams gets a reference to the given AwsIAmRolesAnywhereParams and assigns it to the IAmRolesAnywhereParams field.
func (o *AwsAuthenticationMethodsParams) SetIAmRolesAnywhereParams(v AwsIAmRolesAnywhereParams) {
	o.IAmRolesAnywhereParams = &v
}

// GetIAmUserParams returns the IAmUserParams field value if set, zero value otherwise.
func (o *AwsAuthenticationMethodsParams) GetIAmUserParams() AwsIAmUserParams {
	if o == nil || IsNil(o.IAmUserParams) {
		var ret AwsIAmUserParams
		return ret
	}
	return *o.IAmUserParams
}

// GetIAmUserParamsOk returns a tuple with the IAmUserParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsAuthenticationMethodsParams) GetIAmUserParamsOk() (*AwsIAmUserParams, bool) {
	if o == nil || IsNil(o.IAmUserParams) {
		return nil, false
	}
	return o.IAmUserParams, true
}

// HasIAmUserParams returns a boolean if a field has been set.
func (o *AwsAuthenticationMethodsParams) HasIAmUserParams() bool {
	if o != nil && !IsNil(o.IAmUserParams) {
		return true
	}

	return false
}

// SetIAmUserParams gets a reference to the given AwsIAmUserParams and assigns it to the IAmUserParams field.
func (o *AwsAuthenticationMethodsParams) SetIAmUserParams(v AwsIAmUserParams) {
	o.IAmUserParams = &v
}

// GetUseSTSParams returns the UseSTSParams field value if set, zero value otherwise.
func (o *AwsAuthenticationMethodsParams) GetUseSTSParams() AwsUseSTSParams {
	if o == nil || IsNil(o.UseSTSParams) {
		var ret AwsUseSTSParams
		return ret
	}
	return *o.UseSTSParams
}

// GetUseSTSParamsOk returns a tuple with the UseSTSParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsAuthenticationMethodsParams) GetUseSTSParamsOk() (*AwsUseSTSParams, bool) {
	if o == nil || IsNil(o.UseSTSParams) {
		return nil, false
	}
	return o.UseSTSParams, true
}

// HasUseSTSParams returns a boolean if a field has been set.
func (o *AwsAuthenticationMethodsParams) HasUseSTSParams() bool {
	if o != nil && !IsNil(o.UseSTSParams) {
		return true
	}

	return false
}

// SetUseSTSParams gets a reference to the given AwsUseSTSParams and assigns it to the UseSTSParams field.
func (o *AwsAuthenticationMethodsParams) SetUseSTSParams(v AwsUseSTSParams) {
	o.UseSTSParams = &v
}

func (o AwsAuthenticationMethodsParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsAuthenticationMethodsParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authenticationType"] = o.AuthenticationType.Get()
	if !IsNil(o.IAmRoleParams) {
		toSerialize["iAmRoleParams"] = o.IAmRoleParams
	}
	if !IsNil(o.IAmRolesAnywhereParams) {
		toSerialize["iAmRolesAnywhereParams"] = o.IAmRolesAnywhereParams
	}
	if !IsNil(o.IAmUserParams) {
		toSerialize["iAmUserParams"] = o.IAmUserParams
	}
	if !IsNil(o.UseSTSParams) {
		toSerialize["useSTSParams"] = o.UseSTSParams
	}
	return toSerialize, nil
}

func (o *AwsAuthenticationMethodsParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authenticationType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsAuthenticationMethodsParams := _AwsAuthenticationMethodsParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsAuthenticationMethodsParams)

	if err != nil {
		return err
	}

	*o = AwsAuthenticationMethodsParams(varAwsAuthenticationMethodsParams)

	return err
}

type NullableAwsAuthenticationMethodsParams struct {
	value *AwsAuthenticationMethodsParams
	isSet bool
}

func (v NullableAwsAuthenticationMethodsParams) Get() *AwsAuthenticationMethodsParams {
	return v.value
}

func (v *NullableAwsAuthenticationMethodsParams) Set(val *AwsAuthenticationMethodsParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsAuthenticationMethodsParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsAuthenticationMethodsParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsAuthenticationMethodsParams(val *AwsAuthenticationMethodsParams) *NullableAwsAuthenticationMethodsParams {
	return &NullableAwsAuthenticationMethodsParams{value: val, isSet: true}
}

func (v NullableAwsAuthenticationMethodsParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsAuthenticationMethodsParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


