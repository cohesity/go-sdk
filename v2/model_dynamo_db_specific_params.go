/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DynamoDBSpecificParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DynamoDBSpecificParams{}

// DynamoDBSpecificParams Specifies the Dynamo DB specific parameters for source registration
type DynamoDBSpecificParams struct {
	// Specifies the s3 bucket URI which is used for import and export during backup and recovery.
	S3URI NullableString `json:"s3URI,omitempty"`
}

// NewDynamoDBSpecificParams instantiates a new DynamoDBSpecificParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDynamoDBSpecificParams() *DynamoDBSpecificParams {
	this := DynamoDBSpecificParams{}
	return &this
}

// NewDynamoDBSpecificParamsWithDefaults instantiates a new DynamoDBSpecificParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDynamoDBSpecificParamsWithDefaults() *DynamoDBSpecificParams {
	this := DynamoDBSpecificParams{}
	return &this
}

// GetS3URI returns the S3URI field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DynamoDBSpecificParams) GetS3URI() string {
	if o == nil || IsNil(o.S3URI.Get()) {
		var ret string
		return ret
	}
	return *o.S3URI.Get()
}

// GetS3URIOk returns a tuple with the S3URI field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DynamoDBSpecificParams) GetS3URIOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3URI.Get(), o.S3URI.IsSet()
}

// HasS3URI returns a boolean if a field has been set.
func (o *DynamoDBSpecificParams) HasS3URI() bool {
	if o != nil && o.S3URI.IsSet() {
		return true
	}

	return false
}

// SetS3URI gets a reference to the given NullableString and assigns it to the S3URI field.
func (o *DynamoDBSpecificParams) SetS3URI(v string) {
	o.S3URI.Set(&v)
}
// SetS3URINil sets the value for S3URI to be an explicit nil
func (o *DynamoDBSpecificParams) SetS3URINil() {
	o.S3URI.Set(nil)
}

// UnsetS3URI ensures that no value is present for S3URI, not even an explicit nil
func (o *DynamoDBSpecificParams) UnsetS3URI() {
	o.S3URI.Unset()
}

func (o DynamoDBSpecificParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DynamoDBSpecificParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.S3URI.IsSet() {
		toSerialize["s3URI"] = o.S3URI.Get()
	}
	return toSerialize, nil
}

type NullableDynamoDBSpecificParams struct {
	value *DynamoDBSpecificParams
	isSet bool
}

func (v NullableDynamoDBSpecificParams) Get() *DynamoDBSpecificParams {
	return v.value
}

func (v *NullableDynamoDBSpecificParams) Set(val *DynamoDBSpecificParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDynamoDBSpecificParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDynamoDBSpecificParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDynamoDBSpecificParams(val *DynamoDBSpecificParams) *NullableDynamoDBSpecificParams {
	return &NullableDynamoDBSpecificParams{value: val, isSet: true}
}

func (v NullableDynamoDBSpecificParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDynamoDBSpecificParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


