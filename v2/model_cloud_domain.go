/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CloudDomain type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudDomain{}

// CloudDomain Specifies the parameters which are specific to cloud domain.
type CloudDomain struct {
	// Specifies the Id of the cloud domain..
	DomainId NullableInt64 `json:"domainId,omitempty"`
	// Specifies the Name of StorageDomain related to the cloud domain.
	StorageDomainName NullableString `json:"storageDomainName,omitempty"`
	// Specifies the Id of ViewBox related to the cloud domain.
	ViewBoxId NullableInt64 `json:"viewBoxId,omitempty"`
}

// NewCloudDomain instantiates a new CloudDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudDomain() *CloudDomain {
	this := CloudDomain{}
	return &this
}

// NewCloudDomainWithDefaults instantiates a new CloudDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudDomainWithDefaults() *CloudDomain {
	this := CloudDomain{}
	return &this
}

// GetDomainId returns the DomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudDomain) GetDomainId() int64 {
	if o == nil || IsNil(o.DomainId.Get()) {
		var ret int64
		return ret
	}
	return *o.DomainId.Get()
}

// GetDomainIdOk returns a tuple with the DomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudDomain) GetDomainIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomainId.Get(), o.DomainId.IsSet()
}

// HasDomainId returns a boolean if a field has been set.
func (o *CloudDomain) HasDomainId() bool {
	if o != nil && o.DomainId.IsSet() {
		return true
	}

	return false
}

// SetDomainId gets a reference to the given NullableInt64 and assigns it to the DomainId field.
func (o *CloudDomain) SetDomainId(v int64) {
	o.DomainId.Set(&v)
}
// SetDomainIdNil sets the value for DomainId to be an explicit nil
func (o *CloudDomain) SetDomainIdNil() {
	o.DomainId.Set(nil)
}

// UnsetDomainId ensures that no value is present for DomainId, not even an explicit nil
func (o *CloudDomain) UnsetDomainId() {
	o.DomainId.Unset()
}

// GetStorageDomainName returns the StorageDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudDomain) GetStorageDomainName() string {
	if o == nil || IsNil(o.StorageDomainName.Get()) {
		var ret string
		return ret
	}
	return *o.StorageDomainName.Get()
}

// GetStorageDomainNameOk returns a tuple with the StorageDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudDomain) GetStorageDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageDomainName.Get(), o.StorageDomainName.IsSet()
}

// HasStorageDomainName returns a boolean if a field has been set.
func (o *CloudDomain) HasStorageDomainName() bool {
	if o != nil && o.StorageDomainName.IsSet() {
		return true
	}

	return false
}

// SetStorageDomainName gets a reference to the given NullableString and assigns it to the StorageDomainName field.
func (o *CloudDomain) SetStorageDomainName(v string) {
	o.StorageDomainName.Set(&v)
}
// SetStorageDomainNameNil sets the value for StorageDomainName to be an explicit nil
func (o *CloudDomain) SetStorageDomainNameNil() {
	o.StorageDomainName.Set(nil)
}

// UnsetStorageDomainName ensures that no value is present for StorageDomainName, not even an explicit nil
func (o *CloudDomain) UnsetStorageDomainName() {
	o.StorageDomainName.Unset()
}

// GetViewBoxId returns the ViewBoxId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloudDomain) GetViewBoxId() int64 {
	if o == nil || IsNil(o.ViewBoxId.Get()) {
		var ret int64
		return ret
	}
	return *o.ViewBoxId.Get()
}

// GetViewBoxIdOk returns a tuple with the ViewBoxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloudDomain) GetViewBoxIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewBoxId.Get(), o.ViewBoxId.IsSet()
}

// HasViewBoxId returns a boolean if a field has been set.
func (o *CloudDomain) HasViewBoxId() bool {
	if o != nil && o.ViewBoxId.IsSet() {
		return true
	}

	return false
}

// SetViewBoxId gets a reference to the given NullableInt64 and assigns it to the ViewBoxId field.
func (o *CloudDomain) SetViewBoxId(v int64) {
	o.ViewBoxId.Set(&v)
}
// SetViewBoxIdNil sets the value for ViewBoxId to be an explicit nil
func (o *CloudDomain) SetViewBoxIdNil() {
	o.ViewBoxId.Set(nil)
}

// UnsetViewBoxId ensures that no value is present for ViewBoxId, not even an explicit nil
func (o *CloudDomain) UnsetViewBoxId() {
	o.ViewBoxId.Unset()
}

func (o CloudDomain) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudDomain) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DomainId.IsSet() {
		toSerialize["domainId"] = o.DomainId.Get()
	}
	if o.StorageDomainName.IsSet() {
		toSerialize["storageDomainName"] = o.StorageDomainName.Get()
	}
	if o.ViewBoxId.IsSet() {
		toSerialize["viewBoxId"] = o.ViewBoxId.Get()
	}
	return toSerialize, nil
}

type NullableCloudDomain struct {
	value *CloudDomain
	isSet bool
}

func (v NullableCloudDomain) Get() *CloudDomain {
	return v.value
}

func (v *NullableCloudDomain) Set(val *CloudDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudDomain(val *CloudDomain) *NullableCloudDomain {
	return &NullableCloudDomain{value: val, isSet: true}
}

func (v NullableCloudDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


