/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MarkBaseosUpgradeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarkBaseosUpgradeInfo{}

// MarkBaseosUpgradeInfo Specifies info about BaseOS upgrade operation.
type MarkBaseosUpgradeInfo struct {
	// Specifies optional message related to operation status.
	Message NullableString `json:"message,omitempty"`
	// Specifies whether the operation is set or not.
	SetOperation NullableBool `json:"setOperation"`
}

type _MarkBaseosUpgradeInfo MarkBaseosUpgradeInfo

// NewMarkBaseosUpgradeInfo instantiates a new MarkBaseosUpgradeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkBaseosUpgradeInfo(setOperation NullableBool) *MarkBaseosUpgradeInfo {
	this := MarkBaseosUpgradeInfo{}
	this.SetOperation = setOperation
	return &this
}

// NewMarkBaseosUpgradeInfoWithDefaults instantiates a new MarkBaseosUpgradeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkBaseosUpgradeInfoWithDefaults() *MarkBaseosUpgradeInfo {
	this := MarkBaseosUpgradeInfo{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MarkBaseosUpgradeInfo) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarkBaseosUpgradeInfo) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *MarkBaseosUpgradeInfo) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *MarkBaseosUpgradeInfo) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *MarkBaseosUpgradeInfo) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *MarkBaseosUpgradeInfo) UnsetMessage() {
	o.Message.Unset()
}

// GetSetOperation returns the SetOperation field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *MarkBaseosUpgradeInfo) GetSetOperation() bool {
	if o == nil || o.SetOperation.Get() == nil {
		var ret bool
		return ret
	}

	return *o.SetOperation.Get()
}

// GetSetOperationOk returns a tuple with the SetOperation field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MarkBaseosUpgradeInfo) GetSetOperationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SetOperation.Get(), o.SetOperation.IsSet()
}

// SetSetOperation sets field value
func (o *MarkBaseosUpgradeInfo) SetSetOperation(v bool) {
	o.SetOperation.Set(&v)
}

func (o MarkBaseosUpgradeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarkBaseosUpgradeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	toSerialize["setOperation"] = o.SetOperation.Get()
	return toSerialize, nil
}

func (o *MarkBaseosUpgradeInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"setOperation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMarkBaseosUpgradeInfo := _MarkBaseosUpgradeInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMarkBaseosUpgradeInfo)

	if err != nil {
		return err
	}

	*o = MarkBaseosUpgradeInfo(varMarkBaseosUpgradeInfo)

	return err
}

type NullableMarkBaseosUpgradeInfo struct {
	value *MarkBaseosUpgradeInfo
	isSet bool
}

func (v NullableMarkBaseosUpgradeInfo) Get() *MarkBaseosUpgradeInfo {
	return v.value
}

func (v *NullableMarkBaseosUpgradeInfo) Set(val *MarkBaseosUpgradeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkBaseosUpgradeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkBaseosUpgradeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkBaseosUpgradeInfo(val *MarkBaseosUpgradeInfo) *NullableMarkBaseosUpgradeInfo {
	return &NullableMarkBaseosUpgradeInfo{value: val, isSet: true}
}

func (v NullableMarkBaseosUpgradeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkBaseosUpgradeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


