/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverPhysicalVolumeParamsPhysicalTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverPhysicalVolumeParamsPhysicalTargetParams{}

// RecoverPhysicalVolumeParamsPhysicalTargetParams Specifies the params for recovering to a physical target.
type RecoverPhysicalVolumeParamsPhysicalTargetParams struct {
	// Specifies whether volume would be dismounted first during LockVolume failure. If not specified, default is false.
	ForceUnmountVolume NullableBool `json:"forceUnmountVolume,omitempty"`
	MountTarget NullablePhysicalTargetParamsForRecoverVolumeMountTarget `json:"mountTarget"`
	VlanConfig NullableAcropolisTargetParamsForRecoverVmVlanConfig `json:"vlanConfig,omitempty"`
	// Specifies the mapping from source volumes to destination volumes.
	VolumeMapping []RecoverVolumeMapping `json:"volumeMapping"`
}

type _RecoverPhysicalVolumeParamsPhysicalTargetParams RecoverPhysicalVolumeParamsPhysicalTargetParams

// NewRecoverPhysicalVolumeParamsPhysicalTargetParams instantiates a new RecoverPhysicalVolumeParamsPhysicalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverPhysicalVolumeParamsPhysicalTargetParams(mountTarget NullablePhysicalTargetParamsForRecoverVolumeMountTarget, volumeMapping []RecoverVolumeMapping) *RecoverPhysicalVolumeParamsPhysicalTargetParams {
	this := RecoverPhysicalVolumeParamsPhysicalTargetParams{}
	this.MountTarget = mountTarget
	this.VolumeMapping = volumeMapping
	return &this
}

// NewRecoverPhysicalVolumeParamsPhysicalTargetParamsWithDefaults instantiates a new RecoverPhysicalVolumeParamsPhysicalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverPhysicalVolumeParamsPhysicalTargetParamsWithDefaults() *RecoverPhysicalVolumeParamsPhysicalTargetParams {
	this := RecoverPhysicalVolumeParamsPhysicalTargetParams{}
	return &this
}

// GetForceUnmountVolume returns the ForceUnmountVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) GetForceUnmountVolume() bool {
	if o == nil || IsNil(o.ForceUnmountVolume.Get()) {
		var ret bool
		return ret
	}
	return *o.ForceUnmountVolume.Get()
}

// GetForceUnmountVolumeOk returns a tuple with the ForceUnmountVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) GetForceUnmountVolumeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForceUnmountVolume.Get(), o.ForceUnmountVolume.IsSet()
}

// HasForceUnmountVolume returns a boolean if a field has been set.
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) HasForceUnmountVolume() bool {
	if o != nil && o.ForceUnmountVolume.IsSet() {
		return true
	}

	return false
}

// SetForceUnmountVolume gets a reference to the given NullableBool and assigns it to the ForceUnmountVolume field.
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) SetForceUnmountVolume(v bool) {
	o.ForceUnmountVolume.Set(&v)
}
// SetForceUnmountVolumeNil sets the value for ForceUnmountVolume to be an explicit nil
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) SetForceUnmountVolumeNil() {
	o.ForceUnmountVolume.Set(nil)
}

// UnsetForceUnmountVolume ensures that no value is present for ForceUnmountVolume, not even an explicit nil
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) UnsetForceUnmountVolume() {
	o.ForceUnmountVolume.Unset()
}

// GetMountTarget returns the MountTarget field value
// If the value is explicit nil, the zero value for PhysicalTargetParamsForRecoverVolumeMountTarget will be returned
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) GetMountTarget() PhysicalTargetParamsForRecoverVolumeMountTarget {
	if o == nil || o.MountTarget.Get() == nil {
		var ret PhysicalTargetParamsForRecoverVolumeMountTarget
		return ret
	}

	return *o.MountTarget.Get()
}

// GetMountTargetOk returns a tuple with the MountTarget field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) GetMountTargetOk() (*PhysicalTargetParamsForRecoverVolumeMountTarget, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountTarget.Get(), o.MountTarget.IsSet()
}

// SetMountTarget sets field value
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) SetMountTarget(v PhysicalTargetParamsForRecoverVolumeMountTarget) {
	o.MountTarget.Set(&v)
}

// GetVlanConfig returns the VlanConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) GetVlanConfig() AcropolisTargetParamsForRecoverVmVlanConfig {
	if o == nil || IsNil(o.VlanConfig.Get()) {
		var ret AcropolisTargetParamsForRecoverVmVlanConfig
		return ret
	}
	return *o.VlanConfig.Get()
}

// GetVlanConfigOk returns a tuple with the VlanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) GetVlanConfigOk() (*AcropolisTargetParamsForRecoverVmVlanConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.VlanConfig.Get(), o.VlanConfig.IsSet()
}

// HasVlanConfig returns a boolean if a field has been set.
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) HasVlanConfig() bool {
	if o != nil && o.VlanConfig.IsSet() {
		return true
	}

	return false
}

// SetVlanConfig gets a reference to the given NullableAcropolisTargetParamsForRecoverVmVlanConfig and assigns it to the VlanConfig field.
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) SetVlanConfig(v AcropolisTargetParamsForRecoverVmVlanConfig) {
	o.VlanConfig.Set(&v)
}
// SetVlanConfigNil sets the value for VlanConfig to be an explicit nil
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) SetVlanConfigNil() {
	o.VlanConfig.Set(nil)
}

// UnsetVlanConfig ensures that no value is present for VlanConfig, not even an explicit nil
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) UnsetVlanConfig() {
	o.VlanConfig.Unset()
}

// GetVolumeMapping returns the VolumeMapping field value
// If the value is explicit nil, the zero value for []RecoverVolumeMapping will be returned
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) GetVolumeMapping() []RecoverVolumeMapping {
	if o == nil {
		var ret []RecoverVolumeMapping
		return ret
	}

	return o.VolumeMapping
}

// GetVolumeMappingOk returns a tuple with the VolumeMapping field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) GetVolumeMappingOk() ([]RecoverVolumeMapping, bool) {
	if o == nil || IsNil(o.VolumeMapping) {
		return nil, false
	}
	return o.VolumeMapping, true
}

// SetVolumeMapping sets field value
func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) SetVolumeMapping(v []RecoverVolumeMapping) {
	o.VolumeMapping = v
}

func (o RecoverPhysicalVolumeParamsPhysicalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverPhysicalVolumeParamsPhysicalTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ForceUnmountVolume.IsSet() {
		toSerialize["forceUnmountVolume"] = o.ForceUnmountVolume.Get()
	}
	toSerialize["mountTarget"] = o.MountTarget.Get()
	if o.VlanConfig.IsSet() {
		toSerialize["vlanConfig"] = o.VlanConfig.Get()
	}
	if o.VolumeMapping != nil {
		toSerialize["volumeMapping"] = o.VolumeMapping
	}
	return toSerialize, nil
}

func (o *RecoverPhysicalVolumeParamsPhysicalTargetParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mountTarget",
		"volumeMapping",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverPhysicalVolumeParamsPhysicalTargetParams := _RecoverPhysicalVolumeParamsPhysicalTargetParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverPhysicalVolumeParamsPhysicalTargetParams)

	if err != nil {
		return err
	}

	*o = RecoverPhysicalVolumeParamsPhysicalTargetParams(varRecoverPhysicalVolumeParamsPhysicalTargetParams)

	return err
}

type NullableRecoverPhysicalVolumeParamsPhysicalTargetParams struct {
	value *RecoverPhysicalVolumeParamsPhysicalTargetParams
	isSet bool
}

func (v NullableRecoverPhysicalVolumeParamsPhysicalTargetParams) Get() *RecoverPhysicalVolumeParamsPhysicalTargetParams {
	return v.value
}

func (v *NullableRecoverPhysicalVolumeParamsPhysicalTargetParams) Set(val *RecoverPhysicalVolumeParamsPhysicalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverPhysicalVolumeParamsPhysicalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverPhysicalVolumeParamsPhysicalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverPhysicalVolumeParamsPhysicalTargetParams(val *RecoverPhysicalVolumeParamsPhysicalTargetParams) *NullableRecoverPhysicalVolumeParamsPhysicalTargetParams {
	return &NullableRecoverPhysicalVolumeParamsPhysicalTargetParams{value: val, isSet: true}
}

func (v NullableRecoverPhysicalVolumeParamsPhysicalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverPhysicalVolumeParamsPhysicalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


