/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeliosClaimRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosClaimRequest{}

// HeliosClaimRequest Specifies the request to register to Helios.
type HeliosClaimRequest struct {
	// Specifies the Helios registration token.
	RegistrationToken NullableString `json:"registrationToken"`
	// Specifies the rigel guid to be used for registration.
	RigelGuid NullableInt64 `json:"rigelGuid,omitempty"`
}

type _HeliosClaimRequest HeliosClaimRequest

// NewHeliosClaimRequest instantiates a new HeliosClaimRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosClaimRequest(registrationToken NullableString) *HeliosClaimRequest {
	this := HeliosClaimRequest{}
	this.RegistrationToken = registrationToken
	return &this
}

// NewHeliosClaimRequestWithDefaults instantiates a new HeliosClaimRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosClaimRequestWithDefaults() *HeliosClaimRequest {
	this := HeliosClaimRequest{}
	return &this
}

// GetRegistrationToken returns the RegistrationToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HeliosClaimRequest) GetRegistrationToken() string {
	if o == nil || o.RegistrationToken.Get() == nil {
		var ret string
		return ret
	}

	return *o.RegistrationToken.Get()
}

// GetRegistrationTokenOk returns a tuple with the RegistrationToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosClaimRequest) GetRegistrationTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationToken.Get(), o.RegistrationToken.IsSet()
}

// SetRegistrationToken sets field value
func (o *HeliosClaimRequest) SetRegistrationToken(v string) {
	o.RegistrationToken.Set(&v)
}

// GetRigelGuid returns the RigelGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosClaimRequest) GetRigelGuid() int64 {
	if o == nil || IsNil(o.RigelGuid.Get()) {
		var ret int64
		return ret
	}
	return *o.RigelGuid.Get()
}

// GetRigelGuidOk returns a tuple with the RigelGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosClaimRequest) GetRigelGuidOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RigelGuid.Get(), o.RigelGuid.IsSet()
}

// HasRigelGuid returns a boolean if a field has been set.
func (o *HeliosClaimRequest) HasRigelGuid() bool {
	if o != nil && o.RigelGuid.IsSet() {
		return true
	}

	return false
}

// SetRigelGuid gets a reference to the given NullableInt64 and assigns it to the RigelGuid field.
func (o *HeliosClaimRequest) SetRigelGuid(v int64) {
	o.RigelGuid.Set(&v)
}
// SetRigelGuidNil sets the value for RigelGuid to be an explicit nil
func (o *HeliosClaimRequest) SetRigelGuidNil() {
	o.RigelGuid.Set(nil)
}

// UnsetRigelGuid ensures that no value is present for RigelGuid, not even an explicit nil
func (o *HeliosClaimRequest) UnsetRigelGuid() {
	o.RigelGuid.Unset()
}

func (o HeliosClaimRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosClaimRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registrationToken"] = o.RegistrationToken.Get()
	if o.RigelGuid.IsSet() {
		toSerialize["rigelGuid"] = o.RigelGuid.Get()
	}
	return toSerialize, nil
}

func (o *HeliosClaimRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registrationToken",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeliosClaimRequest := _HeliosClaimRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeliosClaimRequest)

	if err != nil {
		return err
	}

	*o = HeliosClaimRequest(varHeliosClaimRequest)

	return err
}

type NullableHeliosClaimRequest struct {
	value *HeliosClaimRequest
	isSet bool
}

func (v NullableHeliosClaimRequest) Get() *HeliosClaimRequest {
	return v.value
}

func (v *NullableHeliosClaimRequest) Set(val *HeliosClaimRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosClaimRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosClaimRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosClaimRequest(val *HeliosClaimRequest) *NullableHeliosClaimRequest {
	return &NullableHeliosClaimRequest{value: val, isSet: true}
}

func (v NullableHeliosClaimRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosClaimRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


