/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewsGlobalSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewsGlobalSettings{}

// ViewsGlobalSettings Specifies the Global Settings for SmartFiles.
type ViewsGlobalSettings struct {
	// Specifies the visibility of Remote Cohesity Views on Cohesity GUI.
	EnableRemoteViewsGuiVisibility NullableBool `json:"enableRemoteViewsGuiVisibility,omitempty"`
	// Specifies the visibility of Remote Cohesity Views for external clients.
	EnableRemoteViewsVisibility NullableBool `json:"enableRemoteViewsVisibility,omitempty"`
	// Specifies if SMB Authentication should be enabled.
	EnableSmbAuth NullableBool `json:"enableSmbAuth,omitempty"`
	// Specifies if SMB Multi-Channel should be enabled.
	EnableSmbMultiChannel NullableBool `json:"enableSmbMultiChannel,omitempty"`
	// Specifies the list of domain names for S3 Virtual Hosted Style Paths. If set, all the Cohesity S3 Views in the cluster can be accessed using any of the specified domain names.
	S3VirtualHostedDomainNames []string `json:"s3VirtualHostedDomainNames,omitempty"`
}

// NewViewsGlobalSettings instantiates a new ViewsGlobalSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewsGlobalSettings() *ViewsGlobalSettings {
	this := ViewsGlobalSettings{}
	return &this
}

// NewViewsGlobalSettingsWithDefaults instantiates a new ViewsGlobalSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewsGlobalSettingsWithDefaults() *ViewsGlobalSettings {
	this := ViewsGlobalSettings{}
	return &this
}

// GetEnableRemoteViewsGuiVisibility returns the EnableRemoteViewsGuiVisibility field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsGlobalSettings) GetEnableRemoteViewsGuiVisibility() bool {
	if o == nil || IsNil(o.EnableRemoteViewsGuiVisibility.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableRemoteViewsGuiVisibility.Get()
}

// GetEnableRemoteViewsGuiVisibilityOk returns a tuple with the EnableRemoteViewsGuiVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsGlobalSettings) GetEnableRemoteViewsGuiVisibilityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableRemoteViewsGuiVisibility.Get(), o.EnableRemoteViewsGuiVisibility.IsSet()
}

// HasEnableRemoteViewsGuiVisibility returns a boolean if a field has been set.
func (o *ViewsGlobalSettings) HasEnableRemoteViewsGuiVisibility() bool {
	if o != nil && o.EnableRemoteViewsGuiVisibility.IsSet() {
		return true
	}

	return false
}

// SetEnableRemoteViewsGuiVisibility gets a reference to the given NullableBool and assigns it to the EnableRemoteViewsGuiVisibility field.
func (o *ViewsGlobalSettings) SetEnableRemoteViewsGuiVisibility(v bool) {
	o.EnableRemoteViewsGuiVisibility.Set(&v)
}
// SetEnableRemoteViewsGuiVisibilityNil sets the value for EnableRemoteViewsGuiVisibility to be an explicit nil
func (o *ViewsGlobalSettings) SetEnableRemoteViewsGuiVisibilityNil() {
	o.EnableRemoteViewsGuiVisibility.Set(nil)
}

// UnsetEnableRemoteViewsGuiVisibility ensures that no value is present for EnableRemoteViewsGuiVisibility, not even an explicit nil
func (o *ViewsGlobalSettings) UnsetEnableRemoteViewsGuiVisibility() {
	o.EnableRemoteViewsGuiVisibility.Unset()
}

// GetEnableRemoteViewsVisibility returns the EnableRemoteViewsVisibility field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsGlobalSettings) GetEnableRemoteViewsVisibility() bool {
	if o == nil || IsNil(o.EnableRemoteViewsVisibility.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableRemoteViewsVisibility.Get()
}

// GetEnableRemoteViewsVisibilityOk returns a tuple with the EnableRemoteViewsVisibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsGlobalSettings) GetEnableRemoteViewsVisibilityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableRemoteViewsVisibility.Get(), o.EnableRemoteViewsVisibility.IsSet()
}

// HasEnableRemoteViewsVisibility returns a boolean if a field has been set.
func (o *ViewsGlobalSettings) HasEnableRemoteViewsVisibility() bool {
	if o != nil && o.EnableRemoteViewsVisibility.IsSet() {
		return true
	}

	return false
}

// SetEnableRemoteViewsVisibility gets a reference to the given NullableBool and assigns it to the EnableRemoteViewsVisibility field.
func (o *ViewsGlobalSettings) SetEnableRemoteViewsVisibility(v bool) {
	o.EnableRemoteViewsVisibility.Set(&v)
}
// SetEnableRemoteViewsVisibilityNil sets the value for EnableRemoteViewsVisibility to be an explicit nil
func (o *ViewsGlobalSettings) SetEnableRemoteViewsVisibilityNil() {
	o.EnableRemoteViewsVisibility.Set(nil)
}

// UnsetEnableRemoteViewsVisibility ensures that no value is present for EnableRemoteViewsVisibility, not even an explicit nil
func (o *ViewsGlobalSettings) UnsetEnableRemoteViewsVisibility() {
	o.EnableRemoteViewsVisibility.Unset()
}

// GetEnableSmbAuth returns the EnableSmbAuth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsGlobalSettings) GetEnableSmbAuth() bool {
	if o == nil || IsNil(o.EnableSmbAuth.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSmbAuth.Get()
}

// GetEnableSmbAuthOk returns a tuple with the EnableSmbAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsGlobalSettings) GetEnableSmbAuthOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSmbAuth.Get(), o.EnableSmbAuth.IsSet()
}

// HasEnableSmbAuth returns a boolean if a field has been set.
func (o *ViewsGlobalSettings) HasEnableSmbAuth() bool {
	if o != nil && o.EnableSmbAuth.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbAuth gets a reference to the given NullableBool and assigns it to the EnableSmbAuth field.
func (o *ViewsGlobalSettings) SetEnableSmbAuth(v bool) {
	o.EnableSmbAuth.Set(&v)
}
// SetEnableSmbAuthNil sets the value for EnableSmbAuth to be an explicit nil
func (o *ViewsGlobalSettings) SetEnableSmbAuthNil() {
	o.EnableSmbAuth.Set(nil)
}

// UnsetEnableSmbAuth ensures that no value is present for EnableSmbAuth, not even an explicit nil
func (o *ViewsGlobalSettings) UnsetEnableSmbAuth() {
	o.EnableSmbAuth.Unset()
}

// GetEnableSmbMultiChannel returns the EnableSmbMultiChannel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsGlobalSettings) GetEnableSmbMultiChannel() bool {
	if o == nil || IsNil(o.EnableSmbMultiChannel.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSmbMultiChannel.Get()
}

// GetEnableSmbMultiChannelOk returns a tuple with the EnableSmbMultiChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsGlobalSettings) GetEnableSmbMultiChannelOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSmbMultiChannel.Get(), o.EnableSmbMultiChannel.IsSet()
}

// HasEnableSmbMultiChannel returns a boolean if a field has been set.
func (o *ViewsGlobalSettings) HasEnableSmbMultiChannel() bool {
	if o != nil && o.EnableSmbMultiChannel.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbMultiChannel gets a reference to the given NullableBool and assigns it to the EnableSmbMultiChannel field.
func (o *ViewsGlobalSettings) SetEnableSmbMultiChannel(v bool) {
	o.EnableSmbMultiChannel.Set(&v)
}
// SetEnableSmbMultiChannelNil sets the value for EnableSmbMultiChannel to be an explicit nil
func (o *ViewsGlobalSettings) SetEnableSmbMultiChannelNil() {
	o.EnableSmbMultiChannel.Set(nil)
}

// UnsetEnableSmbMultiChannel ensures that no value is present for EnableSmbMultiChannel, not even an explicit nil
func (o *ViewsGlobalSettings) UnsetEnableSmbMultiChannel() {
	o.EnableSmbMultiChannel.Unset()
}

// GetS3VirtualHostedDomainNames returns the S3VirtualHostedDomainNames field value if set, zero value otherwise.
func (o *ViewsGlobalSettings) GetS3VirtualHostedDomainNames() []string {
	if o == nil || IsNil(o.S3VirtualHostedDomainNames) {
		var ret []string
		return ret
	}
	return o.S3VirtualHostedDomainNames
}

// GetS3VirtualHostedDomainNamesOk returns a tuple with the S3VirtualHostedDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewsGlobalSettings) GetS3VirtualHostedDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.S3VirtualHostedDomainNames) {
		return nil, false
	}
	return o.S3VirtualHostedDomainNames, true
}

// HasS3VirtualHostedDomainNames returns a boolean if a field has been set.
func (o *ViewsGlobalSettings) HasS3VirtualHostedDomainNames() bool {
	if o != nil && !IsNil(o.S3VirtualHostedDomainNames) {
		return true
	}

	return false
}

// SetS3VirtualHostedDomainNames gets a reference to the given []string and assigns it to the S3VirtualHostedDomainNames field.
func (o *ViewsGlobalSettings) SetS3VirtualHostedDomainNames(v []string) {
	o.S3VirtualHostedDomainNames = v
}

func (o ViewsGlobalSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewsGlobalSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableRemoteViewsGuiVisibility.IsSet() {
		toSerialize["enableRemoteViewsGuiVisibility"] = o.EnableRemoteViewsGuiVisibility.Get()
	}
	if o.EnableRemoteViewsVisibility.IsSet() {
		toSerialize["enableRemoteViewsVisibility"] = o.EnableRemoteViewsVisibility.Get()
	}
	if o.EnableSmbAuth.IsSet() {
		toSerialize["enableSmbAuth"] = o.EnableSmbAuth.Get()
	}
	if o.EnableSmbMultiChannel.IsSet() {
		toSerialize["enableSmbMultiChannel"] = o.EnableSmbMultiChannel.Get()
	}
	if !IsNil(o.S3VirtualHostedDomainNames) {
		toSerialize["s3VirtualHostedDomainNames"] = o.S3VirtualHostedDomainNames
	}
	return toSerialize, nil
}

type NullableViewsGlobalSettings struct {
	value *ViewsGlobalSettings
	isSet bool
}

func (v NullableViewsGlobalSettings) Get() *ViewsGlobalSettings {
	return v.value
}

func (v *NullableViewsGlobalSettings) Set(val *ViewsGlobalSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableViewsGlobalSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableViewsGlobalSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewsGlobalSettings(val *ViewsGlobalSettings) *NullableViewsGlobalSettings {
	return &NullableViewsGlobalSettings{value: val, isSet: true}
}

func (v NullableViewsGlobalSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewsGlobalSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


