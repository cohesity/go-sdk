/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IdMappingParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdMappingParams{}

// IdMappingParams Specifies the params of the user id mapping info of an Active Directory.
type IdMappingParams struct {
	// Specifies the sid of an Active Directory domain user mapping to unix root user.
	SidMappedToUnixRootUser NullableString `json:"sidMappedToUnixRootUser"`
	UserIdMappingParams NullableIdMappingParamsUserIdMappingParams `json:"userIdMappingParams"`
}

type _IdMappingParams IdMappingParams

// NewIdMappingParams instantiates a new IdMappingParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdMappingParams(sidMappedToUnixRootUser NullableString, userIdMappingParams NullableIdMappingParamsUserIdMappingParams) *IdMappingParams {
	this := IdMappingParams{}
	this.SidMappedToUnixRootUser = sidMappedToUnixRootUser
	this.UserIdMappingParams = userIdMappingParams
	return &this
}

// NewIdMappingParamsWithDefaults instantiates a new IdMappingParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdMappingParamsWithDefaults() *IdMappingParams {
	this := IdMappingParams{}
	return &this
}

// GetSidMappedToUnixRootUser returns the SidMappedToUnixRootUser field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IdMappingParams) GetSidMappedToUnixRootUser() string {
	if o == nil || o.SidMappedToUnixRootUser.Get() == nil {
		var ret string
		return ret
	}

	return *o.SidMappedToUnixRootUser.Get()
}

// GetSidMappedToUnixRootUserOk returns a tuple with the SidMappedToUnixRootUser field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParams) GetSidMappedToUnixRootUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SidMappedToUnixRootUser.Get(), o.SidMappedToUnixRootUser.IsSet()
}

// SetSidMappedToUnixRootUser sets field value
func (o *IdMappingParams) SetSidMappedToUnixRootUser(v string) {
	o.SidMappedToUnixRootUser.Set(&v)
}

// GetUserIdMappingParams returns the UserIdMappingParams field value
// If the value is explicit nil, the zero value for IdMappingParamsUserIdMappingParams will be returned
func (o *IdMappingParams) GetUserIdMappingParams() IdMappingParamsUserIdMappingParams {
	if o == nil || o.UserIdMappingParams.Get() == nil {
		var ret IdMappingParamsUserIdMappingParams
		return ret
	}

	return *o.UserIdMappingParams.Get()
}

// GetUserIdMappingParamsOk returns a tuple with the UserIdMappingParams field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParams) GetUserIdMappingParamsOk() (*IdMappingParamsUserIdMappingParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserIdMappingParams.Get(), o.UserIdMappingParams.IsSet()
}

// SetUserIdMappingParams sets field value
func (o *IdMappingParams) SetUserIdMappingParams(v IdMappingParamsUserIdMappingParams) {
	o.UserIdMappingParams.Set(&v)
}

func (o IdMappingParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdMappingParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sidMappedToUnixRootUser"] = o.SidMappedToUnixRootUser.Get()
	toSerialize["userIdMappingParams"] = o.UserIdMappingParams.Get()
	return toSerialize, nil
}

func (o *IdMappingParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sidMappedToUnixRootUser",
		"userIdMappingParams",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdMappingParams := _IdMappingParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdMappingParams)

	if err != nil {
		return err
	}

	*o = IdMappingParams(varIdMappingParams)

	return err
}

type NullableIdMappingParams struct {
	value *IdMappingParams
	isSet bool
}

func (v NullableIdMappingParams) Get() *IdMappingParams {
	return v.value
}

func (v *NullableIdMappingParams) Set(val *IdMappingParams) {
	v.value = val
	v.isSet = true
}

func (v NullableIdMappingParams) IsSet() bool {
	return v.isSet
}

func (v *NullableIdMappingParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdMappingParams(val *IdMappingParams) *NullableIdMappingParams {
	return &NullableIdMappingParams{value: val, isSet: true}
}

func (v NullableIdMappingParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdMappingParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


