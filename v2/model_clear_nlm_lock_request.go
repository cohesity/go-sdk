/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClearNlmLockRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClearNlmLockRequest{}

// ClearNlmLockRequest Specifies details required to clear NLM lock.
type ClearNlmLockRequest struct {
	// Specifies the id of the client, related to which NLM locks needs to be clear.
	ClientId *string `json:"clientId,omitempty"`
	// Specifies the filepath in the view relative to the root filesystem. If this field is specified, viewName field must also be specified.
	FilePath *string `json:"filePath,omitempty"`
	// Specifies the name of the View in which to search. If a view name is not specified, all the views in the Cluster are searched. This field is mandatory if filePath field is specified.
	ViewName *string `json:"viewName,omitempty"`
}

// NewClearNlmLockRequest instantiates a new ClearNlmLockRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClearNlmLockRequest() *ClearNlmLockRequest {
	this := ClearNlmLockRequest{}
	return &this
}

// NewClearNlmLockRequestWithDefaults instantiates a new ClearNlmLockRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClearNlmLockRequestWithDefaults() *ClearNlmLockRequest {
	this := ClearNlmLockRequest{}
	return &this
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *ClearNlmLockRequest) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClearNlmLockRequest) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *ClearNlmLockRequest) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *ClearNlmLockRequest) SetClientId(v string) {
	o.ClientId = &v
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *ClearNlmLockRequest) GetFilePath() string {
	if o == nil || IsNil(o.FilePath) {
		var ret string
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClearNlmLockRequest) GetFilePathOk() (*string, bool) {
	if o == nil || IsNil(o.FilePath) {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *ClearNlmLockRequest) HasFilePath() bool {
	if o != nil && !IsNil(o.FilePath) {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given string and assigns it to the FilePath field.
func (o *ClearNlmLockRequest) SetFilePath(v string) {
	o.FilePath = &v
}

// GetViewName returns the ViewName field value if set, zero value otherwise.
func (o *ClearNlmLockRequest) GetViewName() string {
	if o == nil || IsNil(o.ViewName) {
		var ret string
		return ret
	}
	return *o.ViewName
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClearNlmLockRequest) GetViewNameOk() (*string, bool) {
	if o == nil || IsNil(o.ViewName) {
		return nil, false
	}
	return o.ViewName, true
}

// HasViewName returns a boolean if a field has been set.
func (o *ClearNlmLockRequest) HasViewName() bool {
	if o != nil && !IsNil(o.ViewName) {
		return true
	}

	return false
}

// SetViewName gets a reference to the given string and assigns it to the ViewName field.
func (o *ClearNlmLockRequest) SetViewName(v string) {
	o.ViewName = &v
}

func (o ClearNlmLockRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClearNlmLockRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.FilePath) {
		toSerialize["filePath"] = o.FilePath
	}
	if !IsNil(o.ViewName) {
		toSerialize["viewName"] = o.ViewName
	}
	return toSerialize, nil
}

type NullableClearNlmLockRequest struct {
	value *ClearNlmLockRequest
	isSet bool
}

func (v NullableClearNlmLockRequest) Get() *ClearNlmLockRequest {
	return v.value
}

func (v *NullableClearNlmLockRequest) Set(val *ClearNlmLockRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableClearNlmLockRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableClearNlmLockRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClearNlmLockRequest(val *ClearNlmLockRequest) *NullableClearNlmLockRequest {
	return &NullableClearNlmLockRequest{value: val, isSet: true}
}

func (v NullableClearNlmLockRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClearNlmLockRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


