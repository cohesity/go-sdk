/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CommonPrePostCloudScriptParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonPrePostCloudScriptParams{}

// CommonPrePostCloudScriptParams Specifies the common params for PrePost backup scripts specific for cloud-adapters. They have two different scripts for the two different shell types - windows and linux
type CommonPrePostCloudScriptParams struct {
	LinuxScript *CommonPreBackupScriptParams `json:"linuxScript,omitempty"`
	WindowsScript *CommonPreBackupScriptParams `json:"windowsScript,omitempty"`
}

// NewCommonPrePostCloudScriptParams instantiates a new CommonPrePostCloudScriptParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonPrePostCloudScriptParams() *CommonPrePostCloudScriptParams {
	this := CommonPrePostCloudScriptParams{}
	return &this
}

// NewCommonPrePostCloudScriptParamsWithDefaults instantiates a new CommonPrePostCloudScriptParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonPrePostCloudScriptParamsWithDefaults() *CommonPrePostCloudScriptParams {
	this := CommonPrePostCloudScriptParams{}
	return &this
}

// GetLinuxScript returns the LinuxScript field value if set, zero value otherwise.
func (o *CommonPrePostCloudScriptParams) GetLinuxScript() CommonPreBackupScriptParams {
	if o == nil || IsNil(o.LinuxScript) {
		var ret CommonPreBackupScriptParams
		return ret
	}
	return *o.LinuxScript
}

// GetLinuxScriptOk returns a tuple with the LinuxScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonPrePostCloudScriptParams) GetLinuxScriptOk() (*CommonPreBackupScriptParams, bool) {
	if o == nil || IsNil(o.LinuxScript) {
		return nil, false
	}
	return o.LinuxScript, true
}

// HasLinuxScript returns a boolean if a field has been set.
func (o *CommonPrePostCloudScriptParams) HasLinuxScript() bool {
	if o != nil && !IsNil(o.LinuxScript) {
		return true
	}

	return false
}

// SetLinuxScript gets a reference to the given CommonPreBackupScriptParams and assigns it to the LinuxScript field.
func (o *CommonPrePostCloudScriptParams) SetLinuxScript(v CommonPreBackupScriptParams) {
	o.LinuxScript = &v
}

// GetWindowsScript returns the WindowsScript field value if set, zero value otherwise.
func (o *CommonPrePostCloudScriptParams) GetWindowsScript() CommonPreBackupScriptParams {
	if o == nil || IsNil(o.WindowsScript) {
		var ret CommonPreBackupScriptParams
		return ret
	}
	return *o.WindowsScript
}

// GetWindowsScriptOk returns a tuple with the WindowsScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonPrePostCloudScriptParams) GetWindowsScriptOk() (*CommonPreBackupScriptParams, bool) {
	if o == nil || IsNil(o.WindowsScript) {
		return nil, false
	}
	return o.WindowsScript, true
}

// HasWindowsScript returns a boolean if a field has been set.
func (o *CommonPrePostCloudScriptParams) HasWindowsScript() bool {
	if o != nil && !IsNil(o.WindowsScript) {
		return true
	}

	return false
}

// SetWindowsScript gets a reference to the given CommonPreBackupScriptParams and assigns it to the WindowsScript field.
func (o *CommonPrePostCloudScriptParams) SetWindowsScript(v CommonPreBackupScriptParams) {
	o.WindowsScript = &v
}

func (o CommonPrePostCloudScriptParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonPrePostCloudScriptParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LinuxScript) {
		toSerialize["linuxScript"] = o.LinuxScript
	}
	if !IsNil(o.WindowsScript) {
		toSerialize["windowsScript"] = o.WindowsScript
	}
	return toSerialize, nil
}

type NullableCommonPrePostCloudScriptParams struct {
	value *CommonPrePostCloudScriptParams
	isSet bool
}

func (v NullableCommonPrePostCloudScriptParams) Get() *CommonPrePostCloudScriptParams {
	return v.value
}

func (v *NullableCommonPrePostCloudScriptParams) Set(val *CommonPrePostCloudScriptParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonPrePostCloudScriptParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonPrePostCloudScriptParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonPrePostCloudScriptParams(val *CommonPrePostCloudScriptParams) *NullableCommonPrePostCloudScriptParams {
	return &NullableCommonPrePostCloudScriptParams{value: val, isSet: true}
}

func (v NullableCommonPrePostCloudScriptParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonPrePostCloudScriptParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


