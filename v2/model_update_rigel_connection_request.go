/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateRigelConnectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateRigelConnectionRequest{}

// UpdateRigelConnectionRequest Specify the params to update a connection of Rigel.
type UpdateRigelConnectionRequest struct {
	// Specifies the name of the connection.
	Name NullableString `json:"name"`
	// Flag to specify if the connection is scalable.
	Scalable NullableBool `json:"scalable,omitempty"`
	// Specifies the id of the tenant which the connection belongs to.
	TenantId NullableString `json:"tenantId"`
	// Specifies the connector groups in the connection.
	ConnectorGroups []ConnectorGroup `json:"connectorGroups,omitempty"`
	// Specifies the ids of the connectors which are not grouped in this connection
	UngroupedConnectors []int64 `json:"ungroupedConnectors,omitempty"`
}

type _UpdateRigelConnectionRequest UpdateRigelConnectionRequest

// NewUpdateRigelConnectionRequest instantiates a new UpdateRigelConnectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateRigelConnectionRequest(name NullableString, tenantId NullableString) *UpdateRigelConnectionRequest {
	this := UpdateRigelConnectionRequest{}
	this.Name = name
	this.TenantId = tenantId
	return &this
}

// NewUpdateRigelConnectionRequestWithDefaults instantiates a new UpdateRigelConnectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateRigelConnectionRequestWithDefaults() *UpdateRigelConnectionRequest {
	this := UpdateRigelConnectionRequest{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateRigelConnectionRequest) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateRigelConnectionRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *UpdateRigelConnectionRequest) SetName(v string) {
	o.Name.Set(&v)
}

// GetScalable returns the Scalable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateRigelConnectionRequest) GetScalable() bool {
	if o == nil || IsNil(o.Scalable.Get()) {
		var ret bool
		return ret
	}
	return *o.Scalable.Get()
}

// GetScalableOk returns a tuple with the Scalable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateRigelConnectionRequest) GetScalableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scalable.Get(), o.Scalable.IsSet()
}

// HasScalable returns a boolean if a field has been set.
func (o *UpdateRigelConnectionRequest) HasScalable() bool {
	if o != nil && o.Scalable.IsSet() {
		return true
	}

	return false
}

// SetScalable gets a reference to the given NullableBool and assigns it to the Scalable field.
func (o *UpdateRigelConnectionRequest) SetScalable(v bool) {
	o.Scalable.Set(&v)
}
// SetScalableNil sets the value for Scalable to be an explicit nil
func (o *UpdateRigelConnectionRequest) SetScalableNil() {
	o.Scalable.Set(nil)
}

// UnsetScalable ensures that no value is present for Scalable, not even an explicit nil
func (o *UpdateRigelConnectionRequest) UnsetScalable() {
	o.Scalable.Unset()
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateRigelConnectionRequest) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateRigelConnectionRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *UpdateRigelConnectionRequest) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

// GetConnectorGroups returns the ConnectorGroups field value if set, zero value otherwise.
func (o *UpdateRigelConnectionRequest) GetConnectorGroups() []ConnectorGroup {
	if o == nil || IsNil(o.ConnectorGroups) {
		var ret []ConnectorGroup
		return ret
	}
	return o.ConnectorGroups
}

// GetConnectorGroupsOk returns a tuple with the ConnectorGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRigelConnectionRequest) GetConnectorGroupsOk() ([]ConnectorGroup, bool) {
	if o == nil || IsNil(o.ConnectorGroups) {
		return nil, false
	}
	return o.ConnectorGroups, true
}

// HasConnectorGroups returns a boolean if a field has been set.
func (o *UpdateRigelConnectionRequest) HasConnectorGroups() bool {
	if o != nil && !IsNil(o.ConnectorGroups) {
		return true
	}

	return false
}

// SetConnectorGroups gets a reference to the given []ConnectorGroup and assigns it to the ConnectorGroups field.
func (o *UpdateRigelConnectionRequest) SetConnectorGroups(v []ConnectorGroup) {
	o.ConnectorGroups = v
}

// GetUngroupedConnectors returns the UngroupedConnectors field value if set, zero value otherwise.
func (o *UpdateRigelConnectionRequest) GetUngroupedConnectors() []int64 {
	if o == nil || IsNil(o.UngroupedConnectors) {
		var ret []int64
		return ret
	}
	return o.UngroupedConnectors
}

// GetUngroupedConnectorsOk returns a tuple with the UngroupedConnectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateRigelConnectionRequest) GetUngroupedConnectorsOk() ([]int64, bool) {
	if o == nil || IsNil(o.UngroupedConnectors) {
		return nil, false
	}
	return o.UngroupedConnectors, true
}

// HasUngroupedConnectors returns a boolean if a field has been set.
func (o *UpdateRigelConnectionRequest) HasUngroupedConnectors() bool {
	if o != nil && !IsNil(o.UngroupedConnectors) {
		return true
	}

	return false
}

// SetUngroupedConnectors gets a reference to the given []int64 and assigns it to the UngroupedConnectors field.
func (o *UpdateRigelConnectionRequest) SetUngroupedConnectors(v []int64) {
	o.UngroupedConnectors = v
}

func (o UpdateRigelConnectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateRigelConnectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name.Get()
	if o.Scalable.IsSet() {
		toSerialize["scalable"] = o.Scalable.Get()
	}
	toSerialize["tenantId"] = o.TenantId.Get()
	if !IsNil(o.ConnectorGroups) {
		toSerialize["connectorGroups"] = o.ConnectorGroups
	}
	if !IsNil(o.UngroupedConnectors) {
		toSerialize["ungroupedConnectors"] = o.UngroupedConnectors
	}
	return toSerialize, nil
}

func (o *UpdateRigelConnectionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"tenantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateRigelConnectionRequest := _UpdateRigelConnectionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateRigelConnectionRequest)

	if err != nil {
		return err
	}

	*o = UpdateRigelConnectionRequest(varUpdateRigelConnectionRequest)

	return err
}

type NullableUpdateRigelConnectionRequest struct {
	value *UpdateRigelConnectionRequest
	isSet bool
}

func (v NullableUpdateRigelConnectionRequest) Get() *UpdateRigelConnectionRequest {
	return v.value
}

func (v *NullableUpdateRigelConnectionRequest) Set(val *UpdateRigelConnectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateRigelConnectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateRigelConnectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateRigelConnectionRequest(val *UpdateRigelConnectionRequest) *NullableUpdateRigelConnectionRequest {
	return &NullableUpdateRigelConnectionRequest{value: val, isSet: true}
}

func (v NullableUpdateRigelConnectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateRigelConnectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


