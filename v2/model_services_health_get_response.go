/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ServicesHealthGetResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicesHealthGetResponse{}

// ServicesHealthGetResponse \"Response containing the overall health status and health status for\" \" each service.\" 
type ServicesHealthGetResponse struct {
	// \"The overall health status of the services (e.g., Healthy, Degraded,\" \" Unhealthy).\" 
	HealthStatus *string `json:"healthStatus,omitempty"`
	// List of services with their respective health statuses.
	Services []ServiceHealth `json:"services,omitempty"`
}

// NewServicesHealthGetResponse instantiates a new ServicesHealthGetResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicesHealthGetResponse() *ServicesHealthGetResponse {
	this := ServicesHealthGetResponse{}
	return &this
}

// NewServicesHealthGetResponseWithDefaults instantiates a new ServicesHealthGetResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicesHealthGetResponseWithDefaults() *ServicesHealthGetResponse {
	this := ServicesHealthGetResponse{}
	return &this
}

// GetHealthStatus returns the HealthStatus field value if set, zero value otherwise.
func (o *ServicesHealthGetResponse) GetHealthStatus() string {
	if o == nil || IsNil(o.HealthStatus) {
		var ret string
		return ret
	}
	return *o.HealthStatus
}

// GetHealthStatusOk returns a tuple with the HealthStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesHealthGetResponse) GetHealthStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HealthStatus) {
		return nil, false
	}
	return o.HealthStatus, true
}

// HasHealthStatus returns a boolean if a field has been set.
func (o *ServicesHealthGetResponse) HasHealthStatus() bool {
	if o != nil && !IsNil(o.HealthStatus) {
		return true
	}

	return false
}

// SetHealthStatus gets a reference to the given string and assigns it to the HealthStatus field.
func (o *ServicesHealthGetResponse) SetHealthStatus(v string) {
	o.HealthStatus = &v
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *ServicesHealthGetResponse) GetServices() []ServiceHealth {
	if o == nil || IsNil(o.Services) {
		var ret []ServiceHealth
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServicesHealthGetResponse) GetServicesOk() ([]ServiceHealth, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *ServicesHealthGetResponse) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []ServiceHealth and assigns it to the Services field.
func (o *ServicesHealthGetResponse) SetServices(v []ServiceHealth) {
	o.Services = v
}

func (o ServicesHealthGetResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicesHealthGetResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HealthStatus) {
		toSerialize["healthStatus"] = o.HealthStatus
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	return toSerialize, nil
}

type NullableServicesHealthGetResponse struct {
	value *ServicesHealthGetResponse
	isSet bool
}

func (v NullableServicesHealthGetResponse) Get() *ServicesHealthGetResponse {
	return v.value
}

func (v *NullableServicesHealthGetResponse) Set(val *ServicesHealthGetResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServicesHealthGetResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServicesHealthGetResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicesHealthGetResponse(val *ServicesHealthGetResponse) *NullableServicesHealthGetResponse {
	return &NullableServicesHealthGetResponse{value: val, isSet: true}
}

func (v NullableServicesHealthGetResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicesHealthGetResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


