/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsIAmRolesAnywhereParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsIAmRolesAnywhereParams{}

// AwsIAmRolesAnywhereParams Specifies the parameters which are specific to IAmRolesAnywhere Authentication Method for AWS External Target.
type AwsIAmRolesAnywhereParams struct {
	// The certificate the customer obtains from the CA.
	Certificate NullableString `json:"certificate"`
	// The encrypted private key generated by the CA. Using the CA private key, we can sign client certificates on customers behalf and use them to gain access to customer's AWS account.
	PrivateKey NullableString `json:"privateKey"`
	// A profile defined with IAM policies, to specify what operations are allowed with the temporary credentials.
	Profile NullableString `json:"profile"`
	// IAM role which trusts the IAM Roles Anywhere service principal.
	Role NullableString `json:"role"`
	// Trust anchor to use for authentication. A trust anchor is a reference to either AWS Private CA or an external CA.
	TrustAnchor NullableString `json:"trustAnchor"`
}

type _AwsIAmRolesAnywhereParams AwsIAmRolesAnywhereParams

// NewAwsIAmRolesAnywhereParams instantiates a new AwsIAmRolesAnywhereParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsIAmRolesAnywhereParams(certificate NullableString, privateKey NullableString, profile NullableString, role NullableString, trustAnchor NullableString) *AwsIAmRolesAnywhereParams {
	this := AwsIAmRolesAnywhereParams{}
	this.Certificate = certificate
	this.PrivateKey = privateKey
	this.Profile = profile
	this.Role = role
	this.TrustAnchor = trustAnchor
	return &this
}

// NewAwsIAmRolesAnywhereParamsWithDefaults instantiates a new AwsIAmRolesAnywhereParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsIAmRolesAnywhereParamsWithDefaults() *AwsIAmRolesAnywhereParams {
	this := AwsIAmRolesAnywhereParams{}
	return &this
}

// GetCertificate returns the Certificate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsIAmRolesAnywhereParams) GetCertificate() string {
	if o == nil || o.Certificate.Get() == nil {
		var ret string
		return ret
	}

	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsIAmRolesAnywhereParams) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// SetCertificate sets field value
func (o *AwsIAmRolesAnywhereParams) SetCertificate(v string) {
	o.Certificate.Set(&v)
}

// GetPrivateKey returns the PrivateKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsIAmRolesAnywhereParams) GetPrivateKey() string {
	if o == nil || o.PrivateKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsIAmRolesAnywhereParams) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// SetPrivateKey sets field value
func (o *AwsIAmRolesAnywhereParams) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}

// GetProfile returns the Profile field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsIAmRolesAnywhereParams) GetProfile() string {
	if o == nil || o.Profile.Get() == nil {
		var ret string
		return ret
	}

	return *o.Profile.Get()
}

// GetProfileOk returns a tuple with the Profile field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsIAmRolesAnywhereParams) GetProfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Profile.Get(), o.Profile.IsSet()
}

// SetProfile sets field value
func (o *AwsIAmRolesAnywhereParams) SetProfile(v string) {
	o.Profile.Set(&v)
}

// GetRole returns the Role field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsIAmRolesAnywhereParams) GetRole() string {
	if o == nil || o.Role.Get() == nil {
		var ret string
		return ret
	}

	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsIAmRolesAnywhereParams) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// SetRole sets field value
func (o *AwsIAmRolesAnywhereParams) SetRole(v string) {
	o.Role.Set(&v)
}

// GetTrustAnchor returns the TrustAnchor field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsIAmRolesAnywhereParams) GetTrustAnchor() string {
	if o == nil || o.TrustAnchor.Get() == nil {
		var ret string
		return ret
	}

	return *o.TrustAnchor.Get()
}

// GetTrustAnchorOk returns a tuple with the TrustAnchor field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsIAmRolesAnywhereParams) GetTrustAnchorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrustAnchor.Get(), o.TrustAnchor.IsSet()
}

// SetTrustAnchor sets field value
func (o *AwsIAmRolesAnywhereParams) SetTrustAnchor(v string) {
	o.TrustAnchor.Set(&v)
}

func (o AwsIAmRolesAnywhereParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsIAmRolesAnywhereParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate"] = o.Certificate.Get()
	toSerialize["privateKey"] = o.PrivateKey.Get()
	toSerialize["profile"] = o.Profile.Get()
	toSerialize["role"] = o.Role.Get()
	toSerialize["trustAnchor"] = o.TrustAnchor.Get()
	return toSerialize, nil
}

func (o *AwsIAmRolesAnywhereParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate",
		"privateKey",
		"profile",
		"role",
		"trustAnchor",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsIAmRolesAnywhereParams := _AwsIAmRolesAnywhereParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsIAmRolesAnywhereParams)

	if err != nil {
		return err
	}

	*o = AwsIAmRolesAnywhereParams(varAwsIAmRolesAnywhereParams)

	return err
}

type NullableAwsIAmRolesAnywhereParams struct {
	value *AwsIAmRolesAnywhereParams
	isSet bool
}

func (v NullableAwsIAmRolesAnywhereParams) Get() *AwsIAmRolesAnywhereParams {
	return v.value
}

func (v *NullableAwsIAmRolesAnywhereParams) Set(val *AwsIAmRolesAnywhereParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsIAmRolesAnywhereParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsIAmRolesAnywhereParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsIAmRolesAnywhereParams(val *AwsIAmRolesAnywhereParams) *NullableAwsIAmRolesAnywhereParams {
	return &NullableAwsIAmRolesAnywhereParams{value: val, isSet: true}
}

func (v NullableAwsIAmRolesAnywhereParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsIAmRolesAnywhereParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


