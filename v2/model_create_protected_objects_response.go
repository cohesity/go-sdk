/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CreateProtectedObjectsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateProtectedObjectsResponse{}

// CreateProtectedObjectsResponse Specifies the protected objects response.
type CreateProtectedObjectsResponse struct {
	// Specifies the list of protected objects.
	ProtectedObjects []ObjectProtectionSummary `json:"protectedObjects,omitempty"`
}

// NewCreateProtectedObjectsResponse instantiates a new CreateProtectedObjectsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateProtectedObjectsResponse() *CreateProtectedObjectsResponse {
	this := CreateProtectedObjectsResponse{}
	return &this
}

// NewCreateProtectedObjectsResponseWithDefaults instantiates a new CreateProtectedObjectsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateProtectedObjectsResponseWithDefaults() *CreateProtectedObjectsResponse {
	this := CreateProtectedObjectsResponse{}
	return &this
}

// GetProtectedObjects returns the ProtectedObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateProtectedObjectsResponse) GetProtectedObjects() []ObjectProtectionSummary {
	if o == nil {
		var ret []ObjectProtectionSummary
		return ret
	}
	return o.ProtectedObjects
}

// GetProtectedObjectsOk returns a tuple with the ProtectedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateProtectedObjectsResponse) GetProtectedObjectsOk() ([]ObjectProtectionSummary, bool) {
	if o == nil || IsNil(o.ProtectedObjects) {
		return nil, false
	}
	return o.ProtectedObjects, true
}

// HasProtectedObjects returns a boolean if a field has been set.
func (o *CreateProtectedObjectsResponse) HasProtectedObjects() bool {
	if o != nil && !IsNil(o.ProtectedObjects) {
		return true
	}

	return false
}

// SetProtectedObjects gets a reference to the given []ObjectProtectionSummary and assigns it to the ProtectedObjects field.
func (o *CreateProtectedObjectsResponse) SetProtectedObjects(v []ObjectProtectionSummary) {
	o.ProtectedObjects = v
}

func (o CreateProtectedObjectsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateProtectedObjectsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProtectedObjects != nil {
		toSerialize["protectedObjects"] = o.ProtectedObjects
	}
	return toSerialize, nil
}

type NullableCreateProtectedObjectsResponse struct {
	value *CreateProtectedObjectsResponse
	isSet bool
}

func (v NullableCreateProtectedObjectsResponse) Get() *CreateProtectedObjectsResponse {
	return v.value
}

func (v *NullableCreateProtectedObjectsResponse) Set(val *CreateProtectedObjectsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateProtectedObjectsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateProtectedObjectsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateProtectedObjectsResponse(val *CreateProtectedObjectsResponse) *NullableCreateProtectedObjectsResponse {
	return &NullableCreateProtectedObjectsResponse{value: val, isSet: true}
}

func (v NullableCreateProtectedObjectsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateProtectedObjectsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


