/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClusterStateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterStateParams{}

// ClusterStateParams Specifies the current cluster state details.
type ClusterStateParams struct {
	// Specifies the id of the cluster.
	ClusterId *int64 `json:"clusterId,omitempty"`
	// Specifies the incarnation id of the cluster.
	ClusterIncarnationId *int64 `json:"clusterIncarnationId,omitempty"`
	// Specifies the name of the cluster.
	Name *string `json:"name,omitempty"`
	// Specifies the operations running on the cluster. * `None` indicates that there are no operations currently running on the cluster. * `Destroy` indicates that the cluster is currently being destroyed. * `Clean` indicates that the cluster is being cleaned. * `NodeRemoval` indicates that a node is being removed from the cluster. * `DiskRemoval` indicates that a disk is being removed from the cluster. * `DiskAddition` indicates that a disk is being added tos the cluster. * `Upgrade` indicates to upgrade the software on the cluster. * `ApplyPatch` indicates to apply the patch. * `RevertPatch` indicates to revert the patch. * `BaseOSUpgrade` indicates that the BaseOSUpgrade operation on the cluster is set. * `ServiceRestart` indicates that the services on the Cluster are currently being restarted. * `SystemServiceRestart' indicates that system services on the Cluster are currently being restarted. 
	Operations []string `json:"operations,omitempty"`
	// Specifies the software version of the cluster.
	SoftwareVersion *string `json:"softwareVersion,omitempty"`
	// Specifies the details of each system app state on the cluster.
	SystemApps []SystemAppStatusParams `json:"systemApps,omitempty"`
}

// NewClusterStateParams instantiates a new ClusterStateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterStateParams() *ClusterStateParams {
	this := ClusterStateParams{}
	return &this
}

// NewClusterStateParamsWithDefaults instantiates a new ClusterStateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterStateParamsWithDefaults() *ClusterStateParams {
	this := ClusterStateParams{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *ClusterStateParams) GetClusterId() int64 {
	if o == nil || IsNil(o.ClusterId) {
		var ret int64
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStateParams) GetClusterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *ClusterStateParams) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given int64 and assigns it to the ClusterId field.
func (o *ClusterStateParams) SetClusterId(v int64) {
	o.ClusterId = &v
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise.
func (o *ClusterStateParams) GetClusterIncarnationId() int64 {
	if o == nil || IsNil(o.ClusterIncarnationId) {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStateParams) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ClusterIncarnationId) {
		return nil, false
	}
	return o.ClusterIncarnationId, true
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *ClusterStateParams) HasClusterIncarnationId() bool {
	if o != nil && !IsNil(o.ClusterIncarnationId) {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given int64 and assigns it to the ClusterIncarnationId field.
func (o *ClusterStateParams) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ClusterStateParams) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStateParams) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ClusterStateParams) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ClusterStateParams) SetName(v string) {
	o.Name = &v
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *ClusterStateParams) GetOperations() []string {
	if o == nil || IsNil(o.Operations) {
		var ret []string
		return ret
	}
	return o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStateParams) GetOperationsOk() ([]string, bool) {
	if o == nil || IsNil(o.Operations) {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *ClusterStateParams) HasOperations() bool {
	if o != nil && !IsNil(o.Operations) {
		return true
	}

	return false
}

// SetOperations gets a reference to the given []string and assigns it to the Operations field.
func (o *ClusterStateParams) SetOperations(v []string) {
	o.Operations = v
}

// GetSoftwareVersion returns the SoftwareVersion field value if set, zero value otherwise.
func (o *ClusterStateParams) GetSoftwareVersion() string {
	if o == nil || IsNil(o.SoftwareVersion) {
		var ret string
		return ret
	}
	return *o.SoftwareVersion
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStateParams) GetSoftwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareVersion) {
		return nil, false
	}
	return o.SoftwareVersion, true
}

// HasSoftwareVersion returns a boolean if a field has been set.
func (o *ClusterStateParams) HasSoftwareVersion() bool {
	if o != nil && !IsNil(o.SoftwareVersion) {
		return true
	}

	return false
}

// SetSoftwareVersion gets a reference to the given string and assigns it to the SoftwareVersion field.
func (o *ClusterStateParams) SetSoftwareVersion(v string) {
	o.SoftwareVersion = &v
}

// GetSystemApps returns the SystemApps field value if set, zero value otherwise.
func (o *ClusterStateParams) GetSystemApps() []SystemAppStatusParams {
	if o == nil || IsNil(o.SystemApps) {
		var ret []SystemAppStatusParams
		return ret
	}
	return o.SystemApps
}

// GetSystemAppsOk returns a tuple with the SystemApps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStateParams) GetSystemAppsOk() ([]SystemAppStatusParams, bool) {
	if o == nil || IsNil(o.SystemApps) {
		return nil, false
	}
	return o.SystemApps, true
}

// HasSystemApps returns a boolean if a field has been set.
func (o *ClusterStateParams) HasSystemApps() bool {
	if o != nil && !IsNil(o.SystemApps) {
		return true
	}

	return false
}

// SetSystemApps gets a reference to the given []SystemAppStatusParams and assigns it to the SystemApps field.
func (o *ClusterStateParams) SetSystemApps(v []SystemAppStatusParams) {
	o.SystemApps = v
}

func (o ClusterStateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterStateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if !IsNil(o.ClusterIncarnationId) {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Operations) {
		toSerialize["operations"] = o.Operations
	}
	if !IsNil(o.SoftwareVersion) {
		toSerialize["softwareVersion"] = o.SoftwareVersion
	}
	if !IsNil(o.SystemApps) {
		toSerialize["systemApps"] = o.SystemApps
	}
	return toSerialize, nil
}

type NullableClusterStateParams struct {
	value *ClusterStateParams
	isSet bool
}

func (v NullableClusterStateParams) Get() *ClusterStateParams {
	return v.value
}

func (v *NullableClusterStateParams) Set(val *ClusterStateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStateParams(val *ClusterStateParams) *NullableClusterStateParams {
	return &NullableClusterStateParams{value: val, isSet: true}
}

func (v NullableClusterStateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


