/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PaginationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PaginationInfo{}

// PaginationInfo Specifies information needed to support pagination.
type PaginationInfo struct {
	// Specifies a cookie which can be passed in by the user in order to retrieve the next page of results.
	Cookie NullableString `json:"cookie,omitempty"`
}

// NewPaginationInfo instantiates a new PaginationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPaginationInfo() *PaginationInfo {
	this := PaginationInfo{}
	return &this
}

// NewPaginationInfoWithDefaults instantiates a new PaginationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPaginationInfoWithDefaults() *PaginationInfo {
	this := PaginationInfo{}
	return &this
}

// GetCookie returns the Cookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PaginationInfo) GetCookie() string {
	if o == nil || IsNil(o.Cookie.Get()) {
		var ret string
		return ret
	}
	return *o.Cookie.Get()
}

// GetCookieOk returns a tuple with the Cookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PaginationInfo) GetCookieOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cookie.Get(), o.Cookie.IsSet()
}

// HasCookie returns a boolean if a field has been set.
func (o *PaginationInfo) HasCookie() bool {
	if o != nil && o.Cookie.IsSet() {
		return true
	}

	return false
}

// SetCookie gets a reference to the given NullableString and assigns it to the Cookie field.
func (o *PaginationInfo) SetCookie(v string) {
	o.Cookie.Set(&v)
}
// SetCookieNil sets the value for Cookie to be an explicit nil
func (o *PaginationInfo) SetCookieNil() {
	o.Cookie.Set(nil)
}

// UnsetCookie ensures that no value is present for Cookie, not even an explicit nil
func (o *PaginationInfo) UnsetCookie() {
	o.Cookie.Unset()
}

func (o PaginationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PaginationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cookie.IsSet() {
		toSerialize["cookie"] = o.Cookie.Get()
	}
	return toSerialize, nil
}

type NullablePaginationInfo struct {
	value *PaginationInfo
	isSet bool
}

func (v NullablePaginationInfo) Get() *PaginationInfo {
	return v.value
}

func (v *NullablePaginationInfo) Set(val *PaginationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePaginationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePaginationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePaginationInfo(val *PaginationInfo) *NullablePaginationInfo {
	return &NullablePaginationInfo{value: val, isSet: true}
}

func (v NullablePaginationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePaginationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


