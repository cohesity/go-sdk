/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsIAmUserParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsIAmUserParams{}

// AwsIAmUserParams Specifies the parameters which are specific to IAmUSer Authentication Method for AWS External Target.
type AwsIAmUserParams struct {
	// Specifies the Access Key Id of the external target.
	AccessKeyId NullableString `json:"accessKeyId"`
	// Specifies the Secret Access Key of the external target.
	SecretAccessKey NullableString `json:"secretAccessKey,omitempty"`
}

type _AwsIAmUserParams AwsIAmUserParams

// NewAwsIAmUserParams instantiates a new AwsIAmUserParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsIAmUserParams(accessKeyId NullableString) *AwsIAmUserParams {
	this := AwsIAmUserParams{}
	this.AccessKeyId = accessKeyId
	return &this
}

// NewAwsIAmUserParamsWithDefaults instantiates a new AwsIAmUserParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsIAmUserParamsWithDefaults() *AwsIAmUserParams {
	this := AwsIAmUserParams{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsIAmUserParams) GetAccessKeyId() string {
	if o == nil || o.AccessKeyId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccessKeyId.Get()
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsIAmUserParams) GetAccessKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessKeyId.Get(), o.AccessKeyId.IsSet()
}

// SetAccessKeyId sets field value
func (o *AwsIAmUserParams) SetAccessKeyId(v string) {
	o.AccessKeyId.Set(&v)
}

// GetSecretAccessKey returns the SecretAccessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsIAmUserParams) GetSecretAccessKey() string {
	if o == nil || IsNil(o.SecretAccessKey.Get()) {
		var ret string
		return ret
	}
	return *o.SecretAccessKey.Get()
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsIAmUserParams) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecretAccessKey.Get(), o.SecretAccessKey.IsSet()
}

// HasSecretAccessKey returns a boolean if a field has been set.
func (o *AwsIAmUserParams) HasSecretAccessKey() bool {
	if o != nil && o.SecretAccessKey.IsSet() {
		return true
	}

	return false
}

// SetSecretAccessKey gets a reference to the given NullableString and assigns it to the SecretAccessKey field.
func (o *AwsIAmUserParams) SetSecretAccessKey(v string) {
	o.SecretAccessKey.Set(&v)
}
// SetSecretAccessKeyNil sets the value for SecretAccessKey to be an explicit nil
func (o *AwsIAmUserParams) SetSecretAccessKeyNil() {
	o.SecretAccessKey.Set(nil)
}

// UnsetSecretAccessKey ensures that no value is present for SecretAccessKey, not even an explicit nil
func (o *AwsIAmUserParams) UnsetSecretAccessKey() {
	o.SecretAccessKey.Unset()
}

func (o AwsIAmUserParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsIAmUserParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessKeyId"] = o.AccessKeyId.Get()
	if o.SecretAccessKey.IsSet() {
		toSerialize["secretAccessKey"] = o.SecretAccessKey.Get()
	}
	return toSerialize, nil
}

func (o *AwsIAmUserParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accessKeyId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsIAmUserParams := _AwsIAmUserParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsIAmUserParams)

	if err != nil {
		return err
	}

	*o = AwsIAmUserParams(varAwsIAmUserParams)

	return err
}

type NullableAwsIAmUserParams struct {
	value *AwsIAmUserParams
	isSet bool
}

func (v NullableAwsIAmUserParams) Get() *AwsIAmUserParams {
	return v.value
}

func (v *NullableAwsIAmUserParams) Set(val *AwsIAmUserParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsIAmUserParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsIAmUserParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsIAmUserParams(val *AwsIAmUserParams) *NullableAwsIAmUserParams {
	return &NullableAwsIAmUserParams{value: val, isSet: true}
}

func (v NullableAwsIAmUserParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsIAmUserParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


