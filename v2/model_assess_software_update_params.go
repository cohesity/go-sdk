/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssessSoftwareUpdateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssessSoftwareUpdateParams{}

// AssessSoftwareUpdateParams Specifies parameters to assess cluster state for the software update (upgrade/patch).
type AssessSoftwareUpdateParams struct {
	// Type of software package.
	PackageType NullableString `json:"packageType"`
	// Specifies the phase of software update.
	Phase NullableString `json:"phase"`
	// Version name of the package.
	VersionName string `json:"versionName"`
}

type _AssessSoftwareUpdateParams AssessSoftwareUpdateParams

// NewAssessSoftwareUpdateParams instantiates a new AssessSoftwareUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssessSoftwareUpdateParams(packageType NullableString, phase NullableString, versionName string) *AssessSoftwareUpdateParams {
	this := AssessSoftwareUpdateParams{}
	this.PackageType = packageType
	this.Phase = phase
	this.VersionName = versionName
	return &this
}

// NewAssessSoftwareUpdateParamsWithDefaults instantiates a new AssessSoftwareUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssessSoftwareUpdateParamsWithDefaults() *AssessSoftwareUpdateParams {
	this := AssessSoftwareUpdateParams{}
	return &this
}

// GetPackageType returns the PackageType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssessSoftwareUpdateParams) GetPackageType() string {
	if o == nil || o.PackageType.Get() == nil {
		var ret string
		return ret
	}

	return *o.PackageType.Get()
}

// GetPackageTypeOk returns a tuple with the PackageType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssessSoftwareUpdateParams) GetPackageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PackageType.Get(), o.PackageType.IsSet()
}

// SetPackageType sets field value
func (o *AssessSoftwareUpdateParams) SetPackageType(v string) {
	o.PackageType.Set(&v)
}

// GetPhase returns the Phase field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AssessSoftwareUpdateParams) GetPhase() string {
	if o == nil || o.Phase.Get() == nil {
		var ret string
		return ret
	}

	return *o.Phase.Get()
}

// GetPhaseOk returns a tuple with the Phase field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AssessSoftwareUpdateParams) GetPhaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phase.Get(), o.Phase.IsSet()
}

// SetPhase sets field value
func (o *AssessSoftwareUpdateParams) SetPhase(v string) {
	o.Phase.Set(&v)
}

// GetVersionName returns the VersionName field value
func (o *AssessSoftwareUpdateParams) GetVersionName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value
// and a boolean to check if the value has been set.
func (o *AssessSoftwareUpdateParams) GetVersionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VersionName, true
}

// SetVersionName sets field value
func (o *AssessSoftwareUpdateParams) SetVersionName(v string) {
	o.VersionName = v
}

func (o AssessSoftwareUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssessSoftwareUpdateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["packageType"] = o.PackageType.Get()
	toSerialize["phase"] = o.Phase.Get()
	toSerialize["versionName"] = o.VersionName
	return toSerialize, nil
}

func (o *AssessSoftwareUpdateParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"packageType",
		"phase",
		"versionName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssessSoftwareUpdateParams := _AssessSoftwareUpdateParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssessSoftwareUpdateParams)

	if err != nil {
		return err
	}

	*o = AssessSoftwareUpdateParams(varAssessSoftwareUpdateParams)

	return err
}

type NullableAssessSoftwareUpdateParams struct {
	value *AssessSoftwareUpdateParams
	isSet bool
}

func (v NullableAssessSoftwareUpdateParams) Get() *AssessSoftwareUpdateParams {
	return v.value
}

func (v *NullableAssessSoftwareUpdateParams) Set(val *AssessSoftwareUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAssessSoftwareUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAssessSoftwareUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssessSoftwareUpdateParams(val *AssessSoftwareUpdateParams) *NullableAssessSoftwareUpdateParams {
	return &NullableAssessSoftwareUpdateParams{value: val, isSet: true}
}

func (v NullableAssessSoftwareUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssessSoftwareUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


