/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BifrostConnectors type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BifrostConnectors{}

// BifrostConnectors Specify a list of Bifrost connectors.
type BifrostConnectors struct {
	// Specifies a list of Bifrost Connectors.
	BifrostConnectors []BifrostConnector `json:"BifrostConnectors,omitempty"`
}

// NewBifrostConnectors instantiates a new BifrostConnectors object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBifrostConnectors() *BifrostConnectors {
	this := BifrostConnectors{}
	return &this
}

// NewBifrostConnectorsWithDefaults instantiates a new BifrostConnectors object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBifrostConnectorsWithDefaults() *BifrostConnectors {
	this := BifrostConnectors{}
	return &this
}

// GetBifrostConnectors returns the BifrostConnectors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BifrostConnectors) GetBifrostConnectors() []BifrostConnector {
	if o == nil {
		var ret []BifrostConnector
		return ret
	}
	return o.BifrostConnectors
}

// GetBifrostConnectorsOk returns a tuple with the BifrostConnectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnectors) GetBifrostConnectorsOk() ([]BifrostConnector, bool) {
	if o == nil || IsNil(o.BifrostConnectors) {
		return nil, false
	}
	return o.BifrostConnectors, true
}

// HasBifrostConnectors returns a boolean if a field has been set.
func (o *BifrostConnectors) HasBifrostConnectors() bool {
	if o != nil && !IsNil(o.BifrostConnectors) {
		return true
	}

	return false
}

// SetBifrostConnectors gets a reference to the given []BifrostConnector and assigns it to the BifrostConnectors field.
func (o *BifrostConnectors) SetBifrostConnectors(v []BifrostConnector) {
	o.BifrostConnectors = v
}

func (o BifrostConnectors) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BifrostConnectors) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BifrostConnectors != nil {
		toSerialize["BifrostConnectors"] = o.BifrostConnectors
	}
	return toSerialize, nil
}

type NullableBifrostConnectors struct {
	value *BifrostConnectors
	isSet bool
}

func (v NullableBifrostConnectors) Get() *BifrostConnectors {
	return v.value
}

func (v *NullableBifrostConnectors) Set(val *BifrostConnectors) {
	v.value = val
	v.isSet = true
}

func (v NullableBifrostConnectors) IsSet() bool {
	return v.isSet
}

func (v *NullableBifrostConnectors) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBifrostConnectors(val *BifrostConnectors) *NullableBifrostConnectors {
	return &NullableBifrostConnectors{value: val, isSet: true}
}

func (v NullableBifrostConnectors) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBifrostConnectors) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


