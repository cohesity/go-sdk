/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeliosAWSTiers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosAWSTiers{}

// HeliosAWSTiers Specifies aws tiers.
type HeliosAWSTiers struct {
	// Specifies the tiers that are used to move the archived backup from current tier to next tier. The order of the tiers determines which tier will be used next for moving the archived backup. The first tier input should always be default tier where backup will be acrhived. Each tier specifies how much time after the backup will be moved to next tier from the current tier.
	Tiers []HeliosAWSTier `json:"tiers"`
}

type _HeliosAWSTiers HeliosAWSTiers

// NewHeliosAWSTiers instantiates a new HeliosAWSTiers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosAWSTiers(tiers []HeliosAWSTier) *HeliosAWSTiers {
	this := HeliosAWSTiers{}
	this.Tiers = tiers
	return &this
}

// NewHeliosAWSTiersWithDefaults instantiates a new HeliosAWSTiers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosAWSTiersWithDefaults() *HeliosAWSTiers {
	this := HeliosAWSTiers{}
	return &this
}

// GetTiers returns the Tiers field value
// If the value is explicit nil, the zero value for []HeliosAWSTier will be returned
func (o *HeliosAWSTiers) GetTiers() []HeliosAWSTier {
	if o == nil {
		var ret []HeliosAWSTier
		return ret
	}

	return o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosAWSTiers) GetTiersOk() ([]HeliosAWSTier, bool) {
	if o == nil || IsNil(o.Tiers) {
		return nil, false
	}
	return o.Tiers, true
}

// SetTiers sets field value
func (o *HeliosAWSTiers) SetTiers(v []HeliosAWSTier) {
	o.Tiers = v
}

func (o HeliosAWSTiers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosAWSTiers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Tiers != nil {
		toSerialize["tiers"] = o.Tiers
	}
	return toSerialize, nil
}

func (o *HeliosAWSTiers) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tiers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeliosAWSTiers := _HeliosAWSTiers{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeliosAWSTiers)

	if err != nil {
		return err
	}

	*o = HeliosAWSTiers(varHeliosAWSTiers)

	return err
}

type NullableHeliosAWSTiers struct {
	value *HeliosAWSTiers
	isSet bool
}

func (v NullableHeliosAWSTiers) Get() *HeliosAWSTiers {
	return v.value
}

func (v *NullableHeliosAWSTiers) Set(val *HeliosAWSTiers) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosAWSTiers) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosAWSTiers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosAWSTiers(val *HeliosAWSTiers) *NullableHeliosAWSTiers {
	return &NullableHeliosAWSTiers{value: val, isSet: true}
}

func (v NullableHeliosAWSTiers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosAWSTiers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


