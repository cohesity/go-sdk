/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModifyObjectStoreCiphersRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModifyObjectStoreCiphersRequestBody{}

// ModifyObjectStoreCiphersRequestBody Specifies object store ciphers to enable/disable on the cluster.
type ModifyObjectStoreCiphersRequestBody struct {
	// Specifies a list of object store ciphers to enable/disable on the cluster.
	Ciphers []string `json:"ciphers"`
	// If true, the ciphers passed in will be enabled on the cluster and all other ciphers will be disabled. If false, the ciphers specified will be disabled and all other ciphers on the cluster will be enabled.
	Enable NullableBool `json:"enable"`
}

type _ModifyObjectStoreCiphersRequestBody ModifyObjectStoreCiphersRequestBody

// NewModifyObjectStoreCiphersRequestBody instantiates a new ModifyObjectStoreCiphersRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyObjectStoreCiphersRequestBody(ciphers []string, enable NullableBool) *ModifyObjectStoreCiphersRequestBody {
	this := ModifyObjectStoreCiphersRequestBody{}
	this.Ciphers = ciphers
	this.Enable = enable
	return &this
}

// NewModifyObjectStoreCiphersRequestBodyWithDefaults instantiates a new ModifyObjectStoreCiphersRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyObjectStoreCiphersRequestBodyWithDefaults() *ModifyObjectStoreCiphersRequestBody {
	this := ModifyObjectStoreCiphersRequestBody{}
	return &this
}

// GetCiphers returns the Ciphers field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *ModifyObjectStoreCiphersRequestBody) GetCiphers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ciphers
}

// GetCiphersOk returns a tuple with the Ciphers field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModifyObjectStoreCiphersRequestBody) GetCiphersOk() ([]string, bool) {
	if o == nil || IsNil(o.Ciphers) {
		return nil, false
	}
	return o.Ciphers, true
}

// SetCiphers sets field value
func (o *ModifyObjectStoreCiphersRequestBody) SetCiphers(v []string) {
	o.Ciphers = v
}

// GetEnable returns the Enable field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ModifyObjectStoreCiphersRequestBody) GetEnable() bool {
	if o == nil || o.Enable.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Enable.Get()
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModifyObjectStoreCiphersRequestBody) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enable.Get(), o.Enable.IsSet()
}

// SetEnable sets field value
func (o *ModifyObjectStoreCiphersRequestBody) SetEnable(v bool) {
	o.Enable.Set(&v)
}

func (o ModifyObjectStoreCiphersRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyObjectStoreCiphersRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Ciphers != nil {
		toSerialize["ciphers"] = o.Ciphers
	}
	toSerialize["enable"] = o.Enable.Get()
	return toSerialize, nil
}

func (o *ModifyObjectStoreCiphersRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ciphers",
		"enable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyObjectStoreCiphersRequestBody := _ModifyObjectStoreCiphersRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyObjectStoreCiphersRequestBody)

	if err != nil {
		return err
	}

	*o = ModifyObjectStoreCiphersRequestBody(varModifyObjectStoreCiphersRequestBody)

	return err
}

type NullableModifyObjectStoreCiphersRequestBody struct {
	value *ModifyObjectStoreCiphersRequestBody
	isSet bool
}

func (v NullableModifyObjectStoreCiphersRequestBody) Get() *ModifyObjectStoreCiphersRequestBody {
	return v.value
}

func (v *NullableModifyObjectStoreCiphersRequestBody) Set(val *ModifyObjectStoreCiphersRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyObjectStoreCiphersRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyObjectStoreCiphersRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyObjectStoreCiphersRequestBody(val *ModifyObjectStoreCiphersRequestBody) *NullableModifyObjectStoreCiphersRequestBody {
	return &NullableModifyObjectStoreCiphersRequestBody{value: val, isSet: true}
}

func (v NullableModifyObjectStoreCiphersRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyObjectStoreCiphersRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


