/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SupportChannelConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportChannelConfig{}

// SupportChannelConfig Specifies the support channel configuration.
type SupportChannelConfig struct {
	// Specifies the support channel expiry time.
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs"`
	// Specifies id the support channel is enabled.
	IsEnabled NullableBool `json:"isEnabled"`
}

type _SupportChannelConfig SupportChannelConfig

// NewSupportChannelConfig instantiates a new SupportChannelConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportChannelConfig(endTimeUsecs NullableInt64, isEnabled NullableBool) *SupportChannelConfig {
	this := SupportChannelConfig{}
	this.EndTimeUsecs = endTimeUsecs
	this.IsEnabled = isEnabled
	return &this
}

// NewSupportChannelConfigWithDefaults instantiates a new SupportChannelConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportChannelConfigWithDefaults() *SupportChannelConfig {
	this := SupportChannelConfig{}
	return &this
}

// GetEndTimeUsecs returns the EndTimeUsecs field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *SupportChannelConfig) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}

	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportChannelConfig) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// SetEndTimeUsecs sets field value
func (o *SupportChannelConfig) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}

// GetIsEnabled returns the IsEnabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *SupportChannelConfig) GetIsEnabled() bool {
	if o == nil || o.IsEnabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportChannelConfig) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// SetIsEnabled sets field value
func (o *SupportChannelConfig) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}

func (o SupportChannelConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportChannelConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	toSerialize["isEnabled"] = o.IsEnabled.Get()
	return toSerialize, nil
}

func (o *SupportChannelConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endTimeUsecs",
		"isEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSupportChannelConfig := _SupportChannelConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSupportChannelConfig)

	if err != nil {
		return err
	}

	*o = SupportChannelConfig(varSupportChannelConfig)

	return err
}

type NullableSupportChannelConfig struct {
	value *SupportChannelConfig
	isSet bool
}

func (v NullableSupportChannelConfig) Get() *SupportChannelConfig {
	return v.value
}

func (v *NullableSupportChannelConfig) Set(val *SupportChannelConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportChannelConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportChannelConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportChannelConfig(val *SupportChannelConfig) *NullableSupportChannelConfig {
	return &NullableSupportChannelConfig{value: val, isSet: true}
}

func (v NullableSupportChannelConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportChannelConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


