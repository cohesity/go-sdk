/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PatchOperationStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchOperationStatus{}

// PatchOperationStatus Specifies the status of the current or the last patch operation.
type PatchOperationStatus struct {
	// Specifies whether a operation is in progress now.
	InProgress NullableBool `json:"inProgress,omitempty"`
	// Specifies the patch operation. It is either apply or revert patch operation.
	Operation NullableString `json:"operation,omitempty"`
	// Specifies a message about the patch operation.
	OperationMessage NullableString `json:"operationMessage,omitempty"`
	// Specifies the percentage of completion of the current patch operation in progress or the last patch operation completed.
	Percentage NullableInt64 `json:"percentage,omitempty"`
	// Specifies the details of patch operation services at each patch level.
	ServicesProgress []ServiceUnitProgress `json:"servicesProgress,omitempty"`
	// Specifies the time remaining to complete the patch operation.
	TimeRemainingSeconds NullableInt64 `json:"timeRemainingSeconds,omitempty"`
	// Specifies the time taken so far to complete the patch operation.
	TimeTakenSeconds NullableInt64 `json:"timeTakenSeconds,omitempty"`
}

// NewPatchOperationStatus instantiates a new PatchOperationStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchOperationStatus() *PatchOperationStatus {
	this := PatchOperationStatus{}
	return &this
}

// NewPatchOperationStatusWithDefaults instantiates a new PatchOperationStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchOperationStatusWithDefaults() *PatchOperationStatus {
	this := PatchOperationStatus{}
	return &this
}

// GetInProgress returns the InProgress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchOperationStatus) GetInProgress() bool {
	if o == nil || IsNil(o.InProgress.Get()) {
		var ret bool
		return ret
	}
	return *o.InProgress.Get()
}

// GetInProgressOk returns a tuple with the InProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchOperationStatus) GetInProgressOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InProgress.Get(), o.InProgress.IsSet()
}

// HasInProgress returns a boolean if a field has been set.
func (o *PatchOperationStatus) HasInProgress() bool {
	if o != nil && o.InProgress.IsSet() {
		return true
	}

	return false
}

// SetInProgress gets a reference to the given NullableBool and assigns it to the InProgress field.
func (o *PatchOperationStatus) SetInProgress(v bool) {
	o.InProgress.Set(&v)
}
// SetInProgressNil sets the value for InProgress to be an explicit nil
func (o *PatchOperationStatus) SetInProgressNil() {
	o.InProgress.Set(nil)
}

// UnsetInProgress ensures that no value is present for InProgress, not even an explicit nil
func (o *PatchOperationStatus) UnsetInProgress() {
	o.InProgress.Unset()
}

// GetOperation returns the Operation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchOperationStatus) GetOperation() string {
	if o == nil || IsNil(o.Operation.Get()) {
		var ret string
		return ret
	}
	return *o.Operation.Get()
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchOperationStatus) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operation.Get(), o.Operation.IsSet()
}

// HasOperation returns a boolean if a field has been set.
func (o *PatchOperationStatus) HasOperation() bool {
	if o != nil && o.Operation.IsSet() {
		return true
	}

	return false
}

// SetOperation gets a reference to the given NullableString and assigns it to the Operation field.
func (o *PatchOperationStatus) SetOperation(v string) {
	o.Operation.Set(&v)
}
// SetOperationNil sets the value for Operation to be an explicit nil
func (o *PatchOperationStatus) SetOperationNil() {
	o.Operation.Set(nil)
}

// UnsetOperation ensures that no value is present for Operation, not even an explicit nil
func (o *PatchOperationStatus) UnsetOperation() {
	o.Operation.Unset()
}

// GetOperationMessage returns the OperationMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchOperationStatus) GetOperationMessage() string {
	if o == nil || IsNil(o.OperationMessage.Get()) {
		var ret string
		return ret
	}
	return *o.OperationMessage.Get()
}

// GetOperationMessageOk returns a tuple with the OperationMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchOperationStatus) GetOperationMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperationMessage.Get(), o.OperationMessage.IsSet()
}

// HasOperationMessage returns a boolean if a field has been set.
func (o *PatchOperationStatus) HasOperationMessage() bool {
	if o != nil && o.OperationMessage.IsSet() {
		return true
	}

	return false
}

// SetOperationMessage gets a reference to the given NullableString and assigns it to the OperationMessage field.
func (o *PatchOperationStatus) SetOperationMessage(v string) {
	o.OperationMessage.Set(&v)
}
// SetOperationMessageNil sets the value for OperationMessage to be an explicit nil
func (o *PatchOperationStatus) SetOperationMessageNil() {
	o.OperationMessage.Set(nil)
}

// UnsetOperationMessage ensures that no value is present for OperationMessage, not even an explicit nil
func (o *PatchOperationStatus) UnsetOperationMessage() {
	o.OperationMessage.Unset()
}

// GetPercentage returns the Percentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchOperationStatus) GetPercentage() int64 {
	if o == nil || IsNil(o.Percentage.Get()) {
		var ret int64
		return ret
	}
	return *o.Percentage.Get()
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchOperationStatus) GetPercentageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Percentage.Get(), o.Percentage.IsSet()
}

// HasPercentage returns a boolean if a field has been set.
func (o *PatchOperationStatus) HasPercentage() bool {
	if o != nil && o.Percentage.IsSet() {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given NullableInt64 and assigns it to the Percentage field.
func (o *PatchOperationStatus) SetPercentage(v int64) {
	o.Percentage.Set(&v)
}
// SetPercentageNil sets the value for Percentage to be an explicit nil
func (o *PatchOperationStatus) SetPercentageNil() {
	o.Percentage.Set(nil)
}

// UnsetPercentage ensures that no value is present for Percentage, not even an explicit nil
func (o *PatchOperationStatus) UnsetPercentage() {
	o.Percentage.Unset()
}

// GetServicesProgress returns the ServicesProgress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchOperationStatus) GetServicesProgress() []ServiceUnitProgress {
	if o == nil {
		var ret []ServiceUnitProgress
		return ret
	}
	return o.ServicesProgress
}

// GetServicesProgressOk returns a tuple with the ServicesProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchOperationStatus) GetServicesProgressOk() ([]ServiceUnitProgress, bool) {
	if o == nil || IsNil(o.ServicesProgress) {
		return nil, false
	}
	return o.ServicesProgress, true
}

// HasServicesProgress returns a boolean if a field has been set.
func (o *PatchOperationStatus) HasServicesProgress() bool {
	if o != nil && !IsNil(o.ServicesProgress) {
		return true
	}

	return false
}

// SetServicesProgress gets a reference to the given []ServiceUnitProgress and assigns it to the ServicesProgress field.
func (o *PatchOperationStatus) SetServicesProgress(v []ServiceUnitProgress) {
	o.ServicesProgress = v
}

// GetTimeRemainingSeconds returns the TimeRemainingSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchOperationStatus) GetTimeRemainingSeconds() int64 {
	if o == nil || IsNil(o.TimeRemainingSeconds.Get()) {
		var ret int64
		return ret
	}
	return *o.TimeRemainingSeconds.Get()
}

// GetTimeRemainingSecondsOk returns a tuple with the TimeRemainingSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchOperationStatus) GetTimeRemainingSecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeRemainingSeconds.Get(), o.TimeRemainingSeconds.IsSet()
}

// HasTimeRemainingSeconds returns a boolean if a field has been set.
func (o *PatchOperationStatus) HasTimeRemainingSeconds() bool {
	if o != nil && o.TimeRemainingSeconds.IsSet() {
		return true
	}

	return false
}

// SetTimeRemainingSeconds gets a reference to the given NullableInt64 and assigns it to the TimeRemainingSeconds field.
func (o *PatchOperationStatus) SetTimeRemainingSeconds(v int64) {
	o.TimeRemainingSeconds.Set(&v)
}
// SetTimeRemainingSecondsNil sets the value for TimeRemainingSeconds to be an explicit nil
func (o *PatchOperationStatus) SetTimeRemainingSecondsNil() {
	o.TimeRemainingSeconds.Set(nil)
}

// UnsetTimeRemainingSeconds ensures that no value is present for TimeRemainingSeconds, not even an explicit nil
func (o *PatchOperationStatus) UnsetTimeRemainingSeconds() {
	o.TimeRemainingSeconds.Unset()
}

// GetTimeTakenSeconds returns the TimeTakenSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchOperationStatus) GetTimeTakenSeconds() int64 {
	if o == nil || IsNil(o.TimeTakenSeconds.Get()) {
		var ret int64
		return ret
	}
	return *o.TimeTakenSeconds.Get()
}

// GetTimeTakenSecondsOk returns a tuple with the TimeTakenSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchOperationStatus) GetTimeTakenSecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeTakenSeconds.Get(), o.TimeTakenSeconds.IsSet()
}

// HasTimeTakenSeconds returns a boolean if a field has been set.
func (o *PatchOperationStatus) HasTimeTakenSeconds() bool {
	if o != nil && o.TimeTakenSeconds.IsSet() {
		return true
	}

	return false
}

// SetTimeTakenSeconds gets a reference to the given NullableInt64 and assigns it to the TimeTakenSeconds field.
func (o *PatchOperationStatus) SetTimeTakenSeconds(v int64) {
	o.TimeTakenSeconds.Set(&v)
}
// SetTimeTakenSecondsNil sets the value for TimeTakenSeconds to be an explicit nil
func (o *PatchOperationStatus) SetTimeTakenSecondsNil() {
	o.TimeTakenSeconds.Set(nil)
}

// UnsetTimeTakenSeconds ensures that no value is present for TimeTakenSeconds, not even an explicit nil
func (o *PatchOperationStatus) UnsetTimeTakenSeconds() {
	o.TimeTakenSeconds.Unset()
}

func (o PatchOperationStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchOperationStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.InProgress.IsSet() {
		toSerialize["inProgress"] = o.InProgress.Get()
	}
	if o.Operation.IsSet() {
		toSerialize["operation"] = o.Operation.Get()
	}
	if o.OperationMessage.IsSet() {
		toSerialize["operationMessage"] = o.OperationMessage.Get()
	}
	if o.Percentage.IsSet() {
		toSerialize["percentage"] = o.Percentage.Get()
	}
	if o.ServicesProgress != nil {
		toSerialize["servicesProgress"] = o.ServicesProgress
	}
	if o.TimeRemainingSeconds.IsSet() {
		toSerialize["timeRemainingSeconds"] = o.TimeRemainingSeconds.Get()
	}
	if o.TimeTakenSeconds.IsSet() {
		toSerialize["timeTakenSeconds"] = o.TimeTakenSeconds.Get()
	}
	return toSerialize, nil
}

type NullablePatchOperationStatus struct {
	value *PatchOperationStatus
	isSet bool
}

func (v NullablePatchOperationStatus) Get() *PatchOperationStatus {
	return v.value
}

func (v *NullablePatchOperationStatus) Set(val *PatchOperationStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchOperationStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchOperationStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchOperationStatus(val *PatchOperationStatus) *NullablePatchOperationStatus {
	return &NullablePatchOperationStatus{value: val, isSet: true}
}

func (v NullablePatchOperationStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchOperationStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


