/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KmipKmsConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KmipKmsConfiguration{}

// KmipKmsConfiguration KMIP compliant KMS configuration parameters.
type KmipKmsConfiguration struct {
	// Additional KMS server IP address or FQDNs for fail over.
	AdditionalServerAddress []string `json:"AdditionalServerAddress,omitempty"`
	// CA certificate.
	CaCertificate string `json:"caCertificate"`
	// Specifies expiry date of client certificate in msecs.
	CertificateExpiryDate NullableInt64 `json:"certificateExpiryDate,omitempty"`
	// Client certificate.
	ClientCertificate string `json:"clientCertificate"`
	// Client key.
	ClientKey string `json:"clientKey"`
	// Port on which the KMS server is listening.
	Port NullableInt32 `json:"port,omitempty"`
	// KMIP protocol version used to communicate with the KMS.
	ProtocolVersion string `json:"protocolVersion"`
	// KMS server IP address or FQDN.
	Server string `json:"server"`
}

type _KmipKmsConfiguration KmipKmsConfiguration

// NewKmipKmsConfiguration instantiates a new KmipKmsConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKmipKmsConfiguration(caCertificate string, clientCertificate string, clientKey string, protocolVersion string, server string) *KmipKmsConfiguration {
	this := KmipKmsConfiguration{}
	this.CaCertificate = caCertificate
	this.ClientCertificate = clientCertificate
	this.ClientKey = clientKey
	var port int32 = 5696
	this.Port = *NewNullableInt32(&port)
	this.ProtocolVersion = protocolVersion
	this.Server = server
	return &this
}

// NewKmipKmsConfigurationWithDefaults instantiates a new KmipKmsConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKmipKmsConfigurationWithDefaults() *KmipKmsConfiguration {
	this := KmipKmsConfiguration{}
	var port int32 = 5696
	this.Port = *NewNullableInt32(&port)
	return &this
}

// GetAdditionalServerAddress returns the AdditionalServerAddress field value if set, zero value otherwise.
func (o *KmipKmsConfiguration) GetAdditionalServerAddress() []string {
	if o == nil || IsNil(o.AdditionalServerAddress) {
		var ret []string
		return ret
	}
	return o.AdditionalServerAddress
}

// GetAdditionalServerAddressOk returns a tuple with the AdditionalServerAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KmipKmsConfiguration) GetAdditionalServerAddressOk() ([]string, bool) {
	if o == nil || IsNil(o.AdditionalServerAddress) {
		return nil, false
	}
	return o.AdditionalServerAddress, true
}

// HasAdditionalServerAddress returns a boolean if a field has been set.
func (o *KmipKmsConfiguration) HasAdditionalServerAddress() bool {
	if o != nil && !IsNil(o.AdditionalServerAddress) {
		return true
	}

	return false
}

// SetAdditionalServerAddress gets a reference to the given []string and assigns it to the AdditionalServerAddress field.
func (o *KmipKmsConfiguration) SetAdditionalServerAddress(v []string) {
	o.AdditionalServerAddress = v
}

// GetCaCertificate returns the CaCertificate field value
func (o *KmipKmsConfiguration) GetCaCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CaCertificate
}

// GetCaCertificateOk returns a tuple with the CaCertificate field value
// and a boolean to check if the value has been set.
func (o *KmipKmsConfiguration) GetCaCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CaCertificate, true
}

// SetCaCertificate sets field value
func (o *KmipKmsConfiguration) SetCaCertificate(v string) {
	o.CaCertificate = v
}

// GetCertificateExpiryDate returns the CertificateExpiryDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KmipKmsConfiguration) GetCertificateExpiryDate() int64 {
	if o == nil || IsNil(o.CertificateExpiryDate.Get()) {
		var ret int64
		return ret
	}
	return *o.CertificateExpiryDate.Get()
}

// GetCertificateExpiryDateOk returns a tuple with the CertificateExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KmipKmsConfiguration) GetCertificateExpiryDateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateExpiryDate.Get(), o.CertificateExpiryDate.IsSet()
}

// HasCertificateExpiryDate returns a boolean if a field has been set.
func (o *KmipKmsConfiguration) HasCertificateExpiryDate() bool {
	if o != nil && o.CertificateExpiryDate.IsSet() {
		return true
	}

	return false
}

// SetCertificateExpiryDate gets a reference to the given NullableInt64 and assigns it to the CertificateExpiryDate field.
func (o *KmipKmsConfiguration) SetCertificateExpiryDate(v int64) {
	o.CertificateExpiryDate.Set(&v)
}
// SetCertificateExpiryDateNil sets the value for CertificateExpiryDate to be an explicit nil
func (o *KmipKmsConfiguration) SetCertificateExpiryDateNil() {
	o.CertificateExpiryDate.Set(nil)
}

// UnsetCertificateExpiryDate ensures that no value is present for CertificateExpiryDate, not even an explicit nil
func (o *KmipKmsConfiguration) UnsetCertificateExpiryDate() {
	o.CertificateExpiryDate.Unset()
}

// GetClientCertificate returns the ClientCertificate field value
func (o *KmipKmsConfiguration) GetClientCertificate() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientCertificate
}

// GetClientCertificateOk returns a tuple with the ClientCertificate field value
// and a boolean to check if the value has been set.
func (o *KmipKmsConfiguration) GetClientCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientCertificate, true
}

// SetClientCertificate sets field value
func (o *KmipKmsConfiguration) SetClientCertificate(v string) {
	o.ClientCertificate = v
}

// GetClientKey returns the ClientKey field value
func (o *KmipKmsConfiguration) GetClientKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClientKey
}

// GetClientKeyOk returns a tuple with the ClientKey field value
// and a boolean to check if the value has been set.
func (o *KmipKmsConfiguration) GetClientKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClientKey, true
}

// SetClientKey sets field value
func (o *KmipKmsConfiguration) SetClientKey(v string) {
	o.ClientKey = v
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KmipKmsConfiguration) GetPort() int32 {
	if o == nil || IsNil(o.Port.Get()) {
		var ret int32
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KmipKmsConfiguration) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *KmipKmsConfiguration) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableInt32 and assigns it to the Port field.
func (o *KmipKmsConfiguration) SetPort(v int32) {
	o.Port.Set(&v)
}
// SetPortNil sets the value for Port to be an explicit nil
func (o *KmipKmsConfiguration) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *KmipKmsConfiguration) UnsetPort() {
	o.Port.Unset()
}

// GetProtocolVersion returns the ProtocolVersion field value
func (o *KmipKmsConfiguration) GetProtocolVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProtocolVersion
}

// GetProtocolVersionOk returns a tuple with the ProtocolVersion field value
// and a boolean to check if the value has been set.
func (o *KmipKmsConfiguration) GetProtocolVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProtocolVersion, true
}

// SetProtocolVersion sets field value
func (o *KmipKmsConfiguration) SetProtocolVersion(v string) {
	o.ProtocolVersion = v
}

// GetServer returns the Server field value
func (o *KmipKmsConfiguration) GetServer() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Server
}

// GetServerOk returns a tuple with the Server field value
// and a boolean to check if the value has been set.
func (o *KmipKmsConfiguration) GetServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Server, true
}

// SetServer sets field value
func (o *KmipKmsConfiguration) SetServer(v string) {
	o.Server = v
}

func (o KmipKmsConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KmipKmsConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AdditionalServerAddress) {
		toSerialize["AdditionalServerAddress"] = o.AdditionalServerAddress
	}
	toSerialize["caCertificate"] = o.CaCertificate
	if o.CertificateExpiryDate.IsSet() {
		toSerialize["certificateExpiryDate"] = o.CertificateExpiryDate.Get()
	}
	toSerialize["clientCertificate"] = o.ClientCertificate
	toSerialize["clientKey"] = o.ClientKey
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	toSerialize["protocolVersion"] = o.ProtocolVersion
	toSerialize["server"] = o.Server
	return toSerialize, nil
}

func (o *KmipKmsConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"caCertificate",
		"clientCertificate",
		"clientKey",
		"protocolVersion",
		"server",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKmipKmsConfiguration := _KmipKmsConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKmipKmsConfiguration)

	if err != nil {
		return err
	}

	*o = KmipKmsConfiguration(varKmipKmsConfiguration)

	return err
}

type NullableKmipKmsConfiguration struct {
	value *KmipKmsConfiguration
	isSet bool
}

func (v NullableKmipKmsConfiguration) Get() *KmipKmsConfiguration {
	return v.value
}

func (v *NullableKmipKmsConfiguration) Set(val *KmipKmsConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableKmipKmsConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableKmipKmsConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKmipKmsConfiguration(val *KmipKmsConfiguration) *NullableKmipKmsConfiguration {
	return &NullableKmipKmsConfiguration{value: val, isSet: true}
}

func (v NullableKmipKmsConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKmipKmsConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


