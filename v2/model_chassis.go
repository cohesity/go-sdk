/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Chassis type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Chassis{}

// Chassis Specifies information about hardware chassis.
type Chassis struct {
	// This field is initialized as sum of maximum slots of all the chassis added to the cluster so far plus one. This is required to assign unique node index for the nodes when they are added to the cluster. Please refer to cluster_node_index in Node below.
	ChassisNodeBase *int32 `json:"chassisNodeBase,omitempty"`
	// Specifies the hardware model of the chassis.Like ivybridge, haswell.
	HardwareModel NullableString `json:"hardwareModel,omitempty"`
	// Each chassis in a cluster is assigned a unique id when the chassis is added to the cluster first time. The index starts from 1. The use of an integer id helps speed up internal computations involving chassis. This integer will not change during the lifetime of the chassis in the cluster.
	Id NullableInt64 `json:"id,omitempty"`
	// Location of the chassis within the rack.
	Location NullableString `json:"location,omitempty"`
	// Unique name assigned to this chassis. This is set to the serial number of the chassis by one of the following two ways. 1) by the chassis manufacturer for non-cohesity systems, and cohesity systems built before jira ticket ECO-2 was approved. 2) by a cohesity contract manufacturer for cohesity systems built after jira ticket ECO-2 was approved.
	Name NullableString `json:"name,omitempty"`
	// Specifies list of ids of all the nodes in chassis.
	NodeIds []int64 `json:"nodeIds,omitempty"`
	// Rack Id that this chassis belong to
	RackId NullableInt64 `json:"rackId,omitempty"`
	// Specifies the serial number of the chassis.
	SerialNumber NullableString `json:"serialNumber,omitempty"`
}

// NewChassis instantiates a new Chassis object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChassis() *Chassis {
	this := Chassis{}
	return &this
}

// NewChassisWithDefaults instantiates a new Chassis object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChassisWithDefaults() *Chassis {
	this := Chassis{}
	return &this
}

// GetChassisNodeBase returns the ChassisNodeBase field value if set, zero value otherwise.
func (o *Chassis) GetChassisNodeBase() int32 {
	if o == nil || IsNil(o.ChassisNodeBase) {
		var ret int32
		return ret
	}
	return *o.ChassisNodeBase
}

// GetChassisNodeBaseOk returns a tuple with the ChassisNodeBase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Chassis) GetChassisNodeBaseOk() (*int32, bool) {
	if o == nil || IsNil(o.ChassisNodeBase) {
		return nil, false
	}
	return o.ChassisNodeBase, true
}

// HasChassisNodeBase returns a boolean if a field has been set.
func (o *Chassis) HasChassisNodeBase() bool {
	if o != nil && !IsNil(o.ChassisNodeBase) {
		return true
	}

	return false
}

// SetChassisNodeBase gets a reference to the given int32 and assigns it to the ChassisNodeBase field.
func (o *Chassis) SetChassisNodeBase(v int32) {
	o.ChassisNodeBase = &v
}

// GetHardwareModel returns the HardwareModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetHardwareModel() string {
	if o == nil || IsNil(o.HardwareModel.Get()) {
		var ret string
		return ret
	}
	return *o.HardwareModel.Get()
}

// GetHardwareModelOk returns a tuple with the HardwareModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetHardwareModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HardwareModel.Get(), o.HardwareModel.IsSet()
}

// HasHardwareModel returns a boolean if a field has been set.
func (o *Chassis) HasHardwareModel() bool {
	if o != nil && o.HardwareModel.IsSet() {
		return true
	}

	return false
}

// SetHardwareModel gets a reference to the given NullableString and assigns it to the HardwareModel field.
func (o *Chassis) SetHardwareModel(v string) {
	o.HardwareModel.Set(&v)
}
// SetHardwareModelNil sets the value for HardwareModel to be an explicit nil
func (o *Chassis) SetHardwareModelNil() {
	o.HardwareModel.Set(nil)
}

// UnsetHardwareModel ensures that no value is present for HardwareModel, not even an explicit nil
func (o *Chassis) UnsetHardwareModel() {
	o.HardwareModel.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Chassis) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *Chassis) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Chassis) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Chassis) UnsetId() {
	o.Id.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetLocation() string {
	if o == nil || IsNil(o.Location.Get()) {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *Chassis) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *Chassis) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *Chassis) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *Chassis) UnsetLocation() {
	o.Location.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Chassis) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Chassis) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Chassis) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Chassis) UnsetName() {
	o.Name.Unset()
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetNodeIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetNodeIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.NodeIds) {
		return nil, false
	}
	return o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *Chassis) HasNodeIds() bool {
	if o != nil && !IsNil(o.NodeIds) {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []int64 and assigns it to the NodeIds field.
func (o *Chassis) SetNodeIds(v []int64) {
	o.NodeIds = v
}

// GetRackId returns the RackId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetRackId() int64 {
	if o == nil || IsNil(o.RackId.Get()) {
		var ret int64
		return ret
	}
	return *o.RackId.Get()
}

// GetRackIdOk returns a tuple with the RackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetRackIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RackId.Get(), o.RackId.IsSet()
}

// HasRackId returns a boolean if a field has been set.
func (o *Chassis) HasRackId() bool {
	if o != nil && o.RackId.IsSet() {
		return true
	}

	return false
}

// SetRackId gets a reference to the given NullableInt64 and assigns it to the RackId field.
func (o *Chassis) SetRackId(v int64) {
	o.RackId.Set(&v)
}
// SetRackIdNil sets the value for RackId to be an explicit nil
func (o *Chassis) SetRackIdNil() {
	o.RackId.Set(nil)
}

// UnsetRackId ensures that no value is present for RackId, not even an explicit nil
func (o *Chassis) UnsetRackId() {
	o.RackId.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Chassis) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber.Get()) {
		var ret string
		return ret
	}
	return *o.SerialNumber.Get()
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Chassis) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerialNumber.Get(), o.SerialNumber.IsSet()
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Chassis) HasSerialNumber() bool {
	if o != nil && o.SerialNumber.IsSet() {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given NullableString and assigns it to the SerialNumber field.
func (o *Chassis) SetSerialNumber(v string) {
	o.SerialNumber.Set(&v)
}
// SetSerialNumberNil sets the value for SerialNumber to be an explicit nil
func (o *Chassis) SetSerialNumberNil() {
	o.SerialNumber.Set(nil)
}

// UnsetSerialNumber ensures that no value is present for SerialNumber, not even an explicit nil
func (o *Chassis) UnsetSerialNumber() {
	o.SerialNumber.Unset()
}

func (o Chassis) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Chassis) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChassisNodeBase) {
		toSerialize["chassisNodeBase"] = o.ChassisNodeBase
	}
	if o.HardwareModel.IsSet() {
		toSerialize["hardwareModel"] = o.HardwareModel.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NodeIds != nil {
		toSerialize["nodeIds"] = o.NodeIds
	}
	if o.RackId.IsSet() {
		toSerialize["rackId"] = o.RackId.Get()
	}
	if o.SerialNumber.IsSet() {
		toSerialize["serialNumber"] = o.SerialNumber.Get()
	}
	return toSerialize, nil
}

type NullableChassis struct {
	value *Chassis
	isSet bool
}

func (v NullableChassis) Get() *Chassis {
	return v.value
}

func (v *NullableChassis) Set(val *Chassis) {
	v.value = val
	v.isSet = true
}

func (v NullableChassis) IsSet() bool {
	return v.isSet
}

func (v *NullableChassis) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChassis(val *Chassis) *NullableChassis {
	return &NullableChassis{value: val, isSet: true}
}

func (v NullableChassis) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChassis) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


