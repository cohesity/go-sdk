/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SapHanaParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SapHanaParams{}

// SapHanaParams Specifies the recovery options specific to SAP HANA environment.
type SapHanaParams struct {
	RecoverSapHanaParams RecoverSapHanaParams `json:"recoverSapHanaParams"`
	// Specifies the type of recover action to be performed.
	RecoveryAction string `json:"recoveryAction"`
}

type _SapHanaParams SapHanaParams

// NewSapHanaParams instantiates a new SapHanaParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSapHanaParams(recoverSapHanaParams RecoverSapHanaParams, recoveryAction string) *SapHanaParams {
	this := SapHanaParams{}
	this.RecoverSapHanaParams = recoverSapHanaParams
	this.RecoveryAction = recoveryAction
	return &this
}

// NewSapHanaParamsWithDefaults instantiates a new SapHanaParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSapHanaParamsWithDefaults() *SapHanaParams {
	this := SapHanaParams{}
	return &this
}

// GetRecoverSapHanaParams returns the RecoverSapHanaParams field value
func (o *SapHanaParams) GetRecoverSapHanaParams() RecoverSapHanaParams {
	if o == nil {
		var ret RecoverSapHanaParams
		return ret
	}

	return o.RecoverSapHanaParams
}

// GetRecoverSapHanaParamsOk returns a tuple with the RecoverSapHanaParams field value
// and a boolean to check if the value has been set.
func (o *SapHanaParams) GetRecoverSapHanaParamsOk() (*RecoverSapHanaParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoverSapHanaParams, true
}

// SetRecoverSapHanaParams sets field value
func (o *SapHanaParams) SetRecoverSapHanaParams(v RecoverSapHanaParams) {
	o.RecoverSapHanaParams = v
}

// GetRecoveryAction returns the RecoveryAction field value
func (o *SapHanaParams) GetRecoveryAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecoveryAction
}

// GetRecoveryActionOk returns a tuple with the RecoveryAction field value
// and a boolean to check if the value has been set.
func (o *SapHanaParams) GetRecoveryActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoveryAction, true
}

// SetRecoveryAction sets field value
func (o *SapHanaParams) SetRecoveryAction(v string) {
	o.RecoveryAction = v
}

func (o SapHanaParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SapHanaParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recoverSapHanaParams"] = o.RecoverSapHanaParams
	toSerialize["recoveryAction"] = o.RecoveryAction
	return toSerialize, nil
}

func (o *SapHanaParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoverSapHanaParams",
		"recoveryAction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSapHanaParams := _SapHanaParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSapHanaParams)

	if err != nil {
		return err
	}

	*o = SapHanaParams(varSapHanaParams)

	return err
}

type NullableSapHanaParams struct {
	value *SapHanaParams
	isSet bool
}

func (v NullableSapHanaParams) Get() *SapHanaParams {
	return v.value
}

func (v *NullableSapHanaParams) Set(val *SapHanaParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSapHanaParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSapHanaParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSapHanaParams(val *SapHanaParams) *NullableSapHanaParams {
	return &NullableSapHanaParams{value: val, isSet: true}
}

func (v NullableSapHanaParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSapHanaParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


