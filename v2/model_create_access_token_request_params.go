/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CreateAccessTokenRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateAccessTokenRequestParams{}

// CreateAccessTokenRequestParams Specifies the Cohesity credentials required for creating an access token.
type CreateAccessTokenRequestParams struct {
	// Specifies the certificate for logging in the cert base auth cluster.
	Certificate NullableString `json:"certificate,omitempty"`
	// Specifies the domain the user is logging in to. For a local user the domain is LOCAL. For LDAP/AD user, the domain will map to a LDAP connection string. A user is uniquely identified by a combination of username and domain. LOCAL is the default domain.
	Domain NullableString `json:"domain,omitempty"`
	MfaParams *MfaParams `json:"mfaParams,omitempty"`
	// Specifies the password of the Cohesity user account.
	Password NullableString `json:"password,omitempty"`
	// Specifies the matching private key of the above certificate.
	PrivateKey NullableString `json:"privateKey,omitempty"`
	// Specifies the login name of the Cohesity user.
	Username NullableString `json:"username,omitempty"`
}

// NewCreateAccessTokenRequestParams instantiates a new CreateAccessTokenRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateAccessTokenRequestParams() *CreateAccessTokenRequestParams {
	this := CreateAccessTokenRequestParams{}
	return &this
}

// NewCreateAccessTokenRequestParamsWithDefaults instantiates a new CreateAccessTokenRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateAccessTokenRequestParamsWithDefaults() *CreateAccessTokenRequestParams {
	this := CreateAccessTokenRequestParams{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAccessTokenRequestParams) GetCertificate() string {
	if o == nil || IsNil(o.Certificate.Get()) {
		var ret string
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAccessTokenRequestParams) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *CreateAccessTokenRequestParams) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableString and assigns it to the Certificate field.
func (o *CreateAccessTokenRequestParams) SetCertificate(v string) {
	o.Certificate.Set(&v)
}
// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *CreateAccessTokenRequestParams) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *CreateAccessTokenRequestParams) UnsetCertificate() {
	o.Certificate.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAccessTokenRequestParams) GetDomain() string {
	if o == nil || IsNil(o.Domain.Get()) {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAccessTokenRequestParams) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *CreateAccessTokenRequestParams) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *CreateAccessTokenRequestParams) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *CreateAccessTokenRequestParams) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *CreateAccessTokenRequestParams) UnsetDomain() {
	o.Domain.Unset()
}

// GetMfaParams returns the MfaParams field value if set, zero value otherwise.
func (o *CreateAccessTokenRequestParams) GetMfaParams() MfaParams {
	if o == nil || IsNil(o.MfaParams) {
		var ret MfaParams
		return ret
	}
	return *o.MfaParams
}

// GetMfaParamsOk returns a tuple with the MfaParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateAccessTokenRequestParams) GetMfaParamsOk() (*MfaParams, bool) {
	if o == nil || IsNil(o.MfaParams) {
		return nil, false
	}
	return o.MfaParams, true
}

// HasMfaParams returns a boolean if a field has been set.
func (o *CreateAccessTokenRequestParams) HasMfaParams() bool {
	if o != nil && !IsNil(o.MfaParams) {
		return true
	}

	return false
}

// SetMfaParams gets a reference to the given MfaParams and assigns it to the MfaParams field.
func (o *CreateAccessTokenRequestParams) SetMfaParams(v MfaParams) {
	o.MfaParams = &v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAccessTokenRequestParams) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAccessTokenRequestParams) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateAccessTokenRequestParams) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *CreateAccessTokenRequestParams) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *CreateAccessTokenRequestParams) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *CreateAccessTokenRequestParams) UnsetPassword() {
	o.Password.Unset()
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAccessTokenRequestParams) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey.Get()) {
		var ret string
		return ret
	}
	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAccessTokenRequestParams) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *CreateAccessTokenRequestParams) HasPrivateKey() bool {
	if o != nil && o.PrivateKey.IsSet() {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given NullableString and assigns it to the PrivateKey field.
func (o *CreateAccessTokenRequestParams) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}
// SetPrivateKeyNil sets the value for PrivateKey to be an explicit nil
func (o *CreateAccessTokenRequestParams) SetPrivateKeyNil() {
	o.PrivateKey.Set(nil)
}

// UnsetPrivateKey ensures that no value is present for PrivateKey, not even an explicit nil
func (o *CreateAccessTokenRequestParams) UnsetPrivateKey() {
	o.PrivateKey.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateAccessTokenRequestParams) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateAccessTokenRequestParams) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *CreateAccessTokenRequestParams) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *CreateAccessTokenRequestParams) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *CreateAccessTokenRequestParams) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *CreateAccessTokenRequestParams) UnsetUsername() {
	o.Username.Unset()
}

func (o CreateAccessTokenRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateAccessTokenRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if !IsNil(o.MfaParams) {
		toSerialize["mfaParams"] = o.MfaParams
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.PrivateKey.IsSet() {
		toSerialize["privateKey"] = o.PrivateKey.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return toSerialize, nil
}

type NullableCreateAccessTokenRequestParams struct {
	value *CreateAccessTokenRequestParams
	isSet bool
}

func (v NullableCreateAccessTokenRequestParams) Get() *CreateAccessTokenRequestParams {
	return v.value
}

func (v *NullableCreateAccessTokenRequestParams) Set(val *CreateAccessTokenRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateAccessTokenRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateAccessTokenRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateAccessTokenRequestParams(val *CreateAccessTokenRequestParams) *NullableCreateAccessTokenRequestParams {
	return &NullableCreateAccessTokenRequestParams{value: val, isSet: true}
}

func (v NullableCreateAccessTokenRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateAccessTokenRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


