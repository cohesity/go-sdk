/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AssociateEntityMetadataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AssociateEntityMetadataRequest{}

// AssociateEntityMetadataRequest Specifies the parameters to associate metadata with entities in the entity hierarchy.
type AssociateEntityMetadataRequest struct {
	// Specifies a list of entity and associated metadata mappings.
	EntityList []EntityMetadataParams `json:"entityList"`
	// Specifies the source id of the entities vector whose metadata is being updated.
	SourceId int64 `json:"sourceId"`
}

type _AssociateEntityMetadataRequest AssociateEntityMetadataRequest

// NewAssociateEntityMetadataRequest instantiates a new AssociateEntityMetadataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAssociateEntityMetadataRequest(entityList []EntityMetadataParams, sourceId int64) *AssociateEntityMetadataRequest {
	this := AssociateEntityMetadataRequest{}
	this.EntityList = entityList
	this.SourceId = sourceId
	return &this
}

// NewAssociateEntityMetadataRequestWithDefaults instantiates a new AssociateEntityMetadataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAssociateEntityMetadataRequestWithDefaults() *AssociateEntityMetadataRequest {
	this := AssociateEntityMetadataRequest{}
	return &this
}

// GetEntityList returns the EntityList field value
func (o *AssociateEntityMetadataRequest) GetEntityList() []EntityMetadataParams {
	if o == nil {
		var ret []EntityMetadataParams
		return ret
	}

	return o.EntityList
}

// GetEntityListOk returns a tuple with the EntityList field value
// and a boolean to check if the value has been set.
func (o *AssociateEntityMetadataRequest) GetEntityListOk() ([]EntityMetadataParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityList, true
}

// SetEntityList sets field value
func (o *AssociateEntityMetadataRequest) SetEntityList(v []EntityMetadataParams) {
	o.EntityList = v
}

// GetSourceId returns the SourceId field value
func (o *AssociateEntityMetadataRequest) GetSourceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *AssociateEntityMetadataRequest) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *AssociateEntityMetadataRequest) SetSourceId(v int64) {
	o.SourceId = v
}

func (o AssociateEntityMetadataRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AssociateEntityMetadataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["entityList"] = o.EntityList
	toSerialize["sourceId"] = o.SourceId
	return toSerialize, nil
}

func (o *AssociateEntityMetadataRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityList",
		"sourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAssociateEntityMetadataRequest := _AssociateEntityMetadataRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAssociateEntityMetadataRequest)

	if err != nil {
		return err
	}

	*o = AssociateEntityMetadataRequest(varAssociateEntityMetadataRequest)

	return err
}

type NullableAssociateEntityMetadataRequest struct {
	value *AssociateEntityMetadataRequest
	isSet bool
}

func (v NullableAssociateEntityMetadataRequest) Get() *AssociateEntityMetadataRequest {
	return v.value
}

func (v *NullableAssociateEntityMetadataRequest) Set(val *AssociateEntityMetadataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAssociateEntityMetadataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAssociateEntityMetadataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAssociateEntityMetadataRequest(val *AssociateEntityMetadataRequest) *NullableAssociateEntityMetadataRequest {
	return &NullableAssociateEntityMetadataRequest{value: val, isSet: true}
}

func (v NullableAssociateEntityMetadataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAssociateEntityMetadataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


