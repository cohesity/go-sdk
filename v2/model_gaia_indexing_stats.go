/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GaiaIndexingStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GaiaIndexingStats{}

// GaiaIndexingStats Containes stats about indexing process.
type GaiaIndexingStats struct {
	NumConvertedDocs NullableInt64 `json:"numConvertedDocs,omitempty"`
	NumErrorsSeen NullableInt64 `json:"numErrorsSeen,omitempty"`
	NumFinishedDocs NullableInt64 `json:"numFinishedDocs,omitempty"`
	NumFinishedObjects NullableInt64 `json:"numFinishedObjects,omitempty"`
	NumFinishedSnapshots NullableInt64 `json:"numFinishedSnapshots,omitempty"`
	NumFinishedSubObjects NullableInt64 `json:"numFinishedSubObjects,omitempty"`
	NumIndexedBytes NullableInt64 `json:"numIndexedBytes,omitempty"`
	// Embeddings are created over chunks of a doc
	NumIndexedChunks NullableInt64 `json:"numIndexedChunks,omitempty"`
	NumIndexedDocs NullableInt64 `json:"numIndexedDocs,omitempty"`
	NumObjects NullableInt64 `json:"numObjects,omitempty"`
	NumSnapshots NullableInt64 `json:"numSnapshots,omitempty"`
}

// NewGaiaIndexingStats instantiates a new GaiaIndexingStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGaiaIndexingStats() *GaiaIndexingStats {
	this := GaiaIndexingStats{}
	return &this
}

// NewGaiaIndexingStatsWithDefaults instantiates a new GaiaIndexingStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGaiaIndexingStatsWithDefaults() *GaiaIndexingStats {
	this := GaiaIndexingStats{}
	return &this
}

// GetNumConvertedDocs returns the NumConvertedDocs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumConvertedDocs() int64 {
	if o == nil || IsNil(o.NumConvertedDocs.Get()) {
		var ret int64
		return ret
	}
	return *o.NumConvertedDocs.Get()
}

// GetNumConvertedDocsOk returns a tuple with the NumConvertedDocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumConvertedDocsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumConvertedDocs.Get(), o.NumConvertedDocs.IsSet()
}

// HasNumConvertedDocs returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumConvertedDocs() bool {
	if o != nil && o.NumConvertedDocs.IsSet() {
		return true
	}

	return false
}

// SetNumConvertedDocs gets a reference to the given NullableInt64 and assigns it to the NumConvertedDocs field.
func (o *GaiaIndexingStats) SetNumConvertedDocs(v int64) {
	o.NumConvertedDocs.Set(&v)
}
// SetNumConvertedDocsNil sets the value for NumConvertedDocs to be an explicit nil
func (o *GaiaIndexingStats) SetNumConvertedDocsNil() {
	o.NumConvertedDocs.Set(nil)
}

// UnsetNumConvertedDocs ensures that no value is present for NumConvertedDocs, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumConvertedDocs() {
	o.NumConvertedDocs.Unset()
}

// GetNumErrorsSeen returns the NumErrorsSeen field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumErrorsSeen() int64 {
	if o == nil || IsNil(o.NumErrorsSeen.Get()) {
		var ret int64
		return ret
	}
	return *o.NumErrorsSeen.Get()
}

// GetNumErrorsSeenOk returns a tuple with the NumErrorsSeen field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumErrorsSeenOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumErrorsSeen.Get(), o.NumErrorsSeen.IsSet()
}

// HasNumErrorsSeen returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumErrorsSeen() bool {
	if o != nil && o.NumErrorsSeen.IsSet() {
		return true
	}

	return false
}

// SetNumErrorsSeen gets a reference to the given NullableInt64 and assigns it to the NumErrorsSeen field.
func (o *GaiaIndexingStats) SetNumErrorsSeen(v int64) {
	o.NumErrorsSeen.Set(&v)
}
// SetNumErrorsSeenNil sets the value for NumErrorsSeen to be an explicit nil
func (o *GaiaIndexingStats) SetNumErrorsSeenNil() {
	o.NumErrorsSeen.Set(nil)
}

// UnsetNumErrorsSeen ensures that no value is present for NumErrorsSeen, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumErrorsSeen() {
	o.NumErrorsSeen.Unset()
}

// GetNumFinishedDocs returns the NumFinishedDocs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumFinishedDocs() int64 {
	if o == nil || IsNil(o.NumFinishedDocs.Get()) {
		var ret int64
		return ret
	}
	return *o.NumFinishedDocs.Get()
}

// GetNumFinishedDocsOk returns a tuple with the NumFinishedDocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumFinishedDocsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumFinishedDocs.Get(), o.NumFinishedDocs.IsSet()
}

// HasNumFinishedDocs returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumFinishedDocs() bool {
	if o != nil && o.NumFinishedDocs.IsSet() {
		return true
	}

	return false
}

// SetNumFinishedDocs gets a reference to the given NullableInt64 and assigns it to the NumFinishedDocs field.
func (o *GaiaIndexingStats) SetNumFinishedDocs(v int64) {
	o.NumFinishedDocs.Set(&v)
}
// SetNumFinishedDocsNil sets the value for NumFinishedDocs to be an explicit nil
func (o *GaiaIndexingStats) SetNumFinishedDocsNil() {
	o.NumFinishedDocs.Set(nil)
}

// UnsetNumFinishedDocs ensures that no value is present for NumFinishedDocs, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumFinishedDocs() {
	o.NumFinishedDocs.Unset()
}

// GetNumFinishedObjects returns the NumFinishedObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumFinishedObjects() int64 {
	if o == nil || IsNil(o.NumFinishedObjects.Get()) {
		var ret int64
		return ret
	}
	return *o.NumFinishedObjects.Get()
}

// GetNumFinishedObjectsOk returns a tuple with the NumFinishedObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumFinishedObjectsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumFinishedObjects.Get(), o.NumFinishedObjects.IsSet()
}

// HasNumFinishedObjects returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumFinishedObjects() bool {
	if o != nil && o.NumFinishedObjects.IsSet() {
		return true
	}

	return false
}

// SetNumFinishedObjects gets a reference to the given NullableInt64 and assigns it to the NumFinishedObjects field.
func (o *GaiaIndexingStats) SetNumFinishedObjects(v int64) {
	o.NumFinishedObjects.Set(&v)
}
// SetNumFinishedObjectsNil sets the value for NumFinishedObjects to be an explicit nil
func (o *GaiaIndexingStats) SetNumFinishedObjectsNil() {
	o.NumFinishedObjects.Set(nil)
}

// UnsetNumFinishedObjects ensures that no value is present for NumFinishedObjects, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumFinishedObjects() {
	o.NumFinishedObjects.Unset()
}

// GetNumFinishedSnapshots returns the NumFinishedSnapshots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumFinishedSnapshots() int64 {
	if o == nil || IsNil(o.NumFinishedSnapshots.Get()) {
		var ret int64
		return ret
	}
	return *o.NumFinishedSnapshots.Get()
}

// GetNumFinishedSnapshotsOk returns a tuple with the NumFinishedSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumFinishedSnapshotsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumFinishedSnapshots.Get(), o.NumFinishedSnapshots.IsSet()
}

// HasNumFinishedSnapshots returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumFinishedSnapshots() bool {
	if o != nil && o.NumFinishedSnapshots.IsSet() {
		return true
	}

	return false
}

// SetNumFinishedSnapshots gets a reference to the given NullableInt64 and assigns it to the NumFinishedSnapshots field.
func (o *GaiaIndexingStats) SetNumFinishedSnapshots(v int64) {
	o.NumFinishedSnapshots.Set(&v)
}
// SetNumFinishedSnapshotsNil sets the value for NumFinishedSnapshots to be an explicit nil
func (o *GaiaIndexingStats) SetNumFinishedSnapshotsNil() {
	o.NumFinishedSnapshots.Set(nil)
}

// UnsetNumFinishedSnapshots ensures that no value is present for NumFinishedSnapshots, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumFinishedSnapshots() {
	o.NumFinishedSnapshots.Unset()
}

// GetNumFinishedSubObjects returns the NumFinishedSubObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumFinishedSubObjects() int64 {
	if o == nil || IsNil(o.NumFinishedSubObjects.Get()) {
		var ret int64
		return ret
	}
	return *o.NumFinishedSubObjects.Get()
}

// GetNumFinishedSubObjectsOk returns a tuple with the NumFinishedSubObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumFinishedSubObjectsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumFinishedSubObjects.Get(), o.NumFinishedSubObjects.IsSet()
}

// HasNumFinishedSubObjects returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumFinishedSubObjects() bool {
	if o != nil && o.NumFinishedSubObjects.IsSet() {
		return true
	}

	return false
}

// SetNumFinishedSubObjects gets a reference to the given NullableInt64 and assigns it to the NumFinishedSubObjects field.
func (o *GaiaIndexingStats) SetNumFinishedSubObjects(v int64) {
	o.NumFinishedSubObjects.Set(&v)
}
// SetNumFinishedSubObjectsNil sets the value for NumFinishedSubObjects to be an explicit nil
func (o *GaiaIndexingStats) SetNumFinishedSubObjectsNil() {
	o.NumFinishedSubObjects.Set(nil)
}

// UnsetNumFinishedSubObjects ensures that no value is present for NumFinishedSubObjects, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumFinishedSubObjects() {
	o.NumFinishedSubObjects.Unset()
}

// GetNumIndexedBytes returns the NumIndexedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumIndexedBytes() int64 {
	if o == nil || IsNil(o.NumIndexedBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.NumIndexedBytes.Get()
}

// GetNumIndexedBytesOk returns a tuple with the NumIndexedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumIndexedBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumIndexedBytes.Get(), o.NumIndexedBytes.IsSet()
}

// HasNumIndexedBytes returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumIndexedBytes() bool {
	if o != nil && o.NumIndexedBytes.IsSet() {
		return true
	}

	return false
}

// SetNumIndexedBytes gets a reference to the given NullableInt64 and assigns it to the NumIndexedBytes field.
func (o *GaiaIndexingStats) SetNumIndexedBytes(v int64) {
	o.NumIndexedBytes.Set(&v)
}
// SetNumIndexedBytesNil sets the value for NumIndexedBytes to be an explicit nil
func (o *GaiaIndexingStats) SetNumIndexedBytesNil() {
	o.NumIndexedBytes.Set(nil)
}

// UnsetNumIndexedBytes ensures that no value is present for NumIndexedBytes, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumIndexedBytes() {
	o.NumIndexedBytes.Unset()
}

// GetNumIndexedChunks returns the NumIndexedChunks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumIndexedChunks() int64 {
	if o == nil || IsNil(o.NumIndexedChunks.Get()) {
		var ret int64
		return ret
	}
	return *o.NumIndexedChunks.Get()
}

// GetNumIndexedChunksOk returns a tuple with the NumIndexedChunks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumIndexedChunksOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumIndexedChunks.Get(), o.NumIndexedChunks.IsSet()
}

// HasNumIndexedChunks returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumIndexedChunks() bool {
	if o != nil && o.NumIndexedChunks.IsSet() {
		return true
	}

	return false
}

// SetNumIndexedChunks gets a reference to the given NullableInt64 and assigns it to the NumIndexedChunks field.
func (o *GaiaIndexingStats) SetNumIndexedChunks(v int64) {
	o.NumIndexedChunks.Set(&v)
}
// SetNumIndexedChunksNil sets the value for NumIndexedChunks to be an explicit nil
func (o *GaiaIndexingStats) SetNumIndexedChunksNil() {
	o.NumIndexedChunks.Set(nil)
}

// UnsetNumIndexedChunks ensures that no value is present for NumIndexedChunks, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumIndexedChunks() {
	o.NumIndexedChunks.Unset()
}

// GetNumIndexedDocs returns the NumIndexedDocs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumIndexedDocs() int64 {
	if o == nil || IsNil(o.NumIndexedDocs.Get()) {
		var ret int64
		return ret
	}
	return *o.NumIndexedDocs.Get()
}

// GetNumIndexedDocsOk returns a tuple with the NumIndexedDocs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumIndexedDocsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumIndexedDocs.Get(), o.NumIndexedDocs.IsSet()
}

// HasNumIndexedDocs returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumIndexedDocs() bool {
	if o != nil && o.NumIndexedDocs.IsSet() {
		return true
	}

	return false
}

// SetNumIndexedDocs gets a reference to the given NullableInt64 and assigns it to the NumIndexedDocs field.
func (o *GaiaIndexingStats) SetNumIndexedDocs(v int64) {
	o.NumIndexedDocs.Set(&v)
}
// SetNumIndexedDocsNil sets the value for NumIndexedDocs to be an explicit nil
func (o *GaiaIndexingStats) SetNumIndexedDocsNil() {
	o.NumIndexedDocs.Set(nil)
}

// UnsetNumIndexedDocs ensures that no value is present for NumIndexedDocs, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumIndexedDocs() {
	o.NumIndexedDocs.Unset()
}

// GetNumObjects returns the NumObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumObjects() int64 {
	if o == nil || IsNil(o.NumObjects.Get()) {
		var ret int64
		return ret
	}
	return *o.NumObjects.Get()
}

// GetNumObjectsOk returns a tuple with the NumObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumObjectsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumObjects.Get(), o.NumObjects.IsSet()
}

// HasNumObjects returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumObjects() bool {
	if o != nil && o.NumObjects.IsSet() {
		return true
	}

	return false
}

// SetNumObjects gets a reference to the given NullableInt64 and assigns it to the NumObjects field.
func (o *GaiaIndexingStats) SetNumObjects(v int64) {
	o.NumObjects.Set(&v)
}
// SetNumObjectsNil sets the value for NumObjects to be an explicit nil
func (o *GaiaIndexingStats) SetNumObjectsNil() {
	o.NumObjects.Set(nil)
}

// UnsetNumObjects ensures that no value is present for NumObjects, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumObjects() {
	o.NumObjects.Unset()
}

// GetNumSnapshots returns the NumSnapshots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaIndexingStats) GetNumSnapshots() int64 {
	if o == nil || IsNil(o.NumSnapshots.Get()) {
		var ret int64
		return ret
	}
	return *o.NumSnapshots.Get()
}

// GetNumSnapshotsOk returns a tuple with the NumSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaIndexingStats) GetNumSnapshotsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumSnapshots.Get(), o.NumSnapshots.IsSet()
}

// HasNumSnapshots returns a boolean if a field has been set.
func (o *GaiaIndexingStats) HasNumSnapshots() bool {
	if o != nil && o.NumSnapshots.IsSet() {
		return true
	}

	return false
}

// SetNumSnapshots gets a reference to the given NullableInt64 and assigns it to the NumSnapshots field.
func (o *GaiaIndexingStats) SetNumSnapshots(v int64) {
	o.NumSnapshots.Set(&v)
}
// SetNumSnapshotsNil sets the value for NumSnapshots to be an explicit nil
func (o *GaiaIndexingStats) SetNumSnapshotsNil() {
	o.NumSnapshots.Set(nil)
}

// UnsetNumSnapshots ensures that no value is present for NumSnapshots, not even an explicit nil
func (o *GaiaIndexingStats) UnsetNumSnapshots() {
	o.NumSnapshots.Unset()
}

func (o GaiaIndexingStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GaiaIndexingStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NumConvertedDocs.IsSet() {
		toSerialize["numConvertedDocs"] = o.NumConvertedDocs.Get()
	}
	if o.NumErrorsSeen.IsSet() {
		toSerialize["numErrorsSeen"] = o.NumErrorsSeen.Get()
	}
	if o.NumFinishedDocs.IsSet() {
		toSerialize["numFinishedDocs"] = o.NumFinishedDocs.Get()
	}
	if o.NumFinishedObjects.IsSet() {
		toSerialize["numFinishedObjects"] = o.NumFinishedObjects.Get()
	}
	if o.NumFinishedSnapshots.IsSet() {
		toSerialize["numFinishedSnapshots"] = o.NumFinishedSnapshots.Get()
	}
	if o.NumFinishedSubObjects.IsSet() {
		toSerialize["numFinishedSubObjects"] = o.NumFinishedSubObjects.Get()
	}
	if o.NumIndexedBytes.IsSet() {
		toSerialize["numIndexedBytes"] = o.NumIndexedBytes.Get()
	}
	if o.NumIndexedChunks.IsSet() {
		toSerialize["numIndexedChunks"] = o.NumIndexedChunks.Get()
	}
	if o.NumIndexedDocs.IsSet() {
		toSerialize["numIndexedDocs"] = o.NumIndexedDocs.Get()
	}
	if o.NumObjects.IsSet() {
		toSerialize["numObjects"] = o.NumObjects.Get()
	}
	if o.NumSnapshots.IsSet() {
		toSerialize["numSnapshots"] = o.NumSnapshots.Get()
	}
	return toSerialize, nil
}

type NullableGaiaIndexingStats struct {
	value *GaiaIndexingStats
	isSet bool
}

func (v NullableGaiaIndexingStats) Get() *GaiaIndexingStats {
	return v.value
}

func (v *NullableGaiaIndexingStats) Set(val *GaiaIndexingStats) {
	v.value = val
	v.isSet = true
}

func (v NullableGaiaIndexingStats) IsSet() bool {
	return v.isSet
}

func (v *NullableGaiaIndexingStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaiaIndexingStats(val *GaiaIndexingStats) *NullableGaiaIndexingStats {
	return &NullableGaiaIndexingStats{value: val, isSet: true}
}

func (v NullableGaiaIndexingStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaiaIndexingStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


