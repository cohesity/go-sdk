/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UdaObjectParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaObjectParams{}

// UdaObjectParams Specifies the common parameters for UDA objects.
type UdaObjectParams struct {
	// Specifies whether this Object belongs to a source having entity support.
	HasEntitySupport NullableBool `json:"hasEntitySupport,omitempty"`
	// Specifies the source type for Universal Data Adapter object.
	SourceType NullableString `json:"sourceType,omitempty"`
}

// NewUdaObjectParams instantiates a new UdaObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaObjectParams() *UdaObjectParams {
	this := UdaObjectParams{}
	return &this
}

// NewUdaObjectParamsWithDefaults instantiates a new UdaObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaObjectParamsWithDefaults() *UdaObjectParams {
	this := UdaObjectParams{}
	return &this
}

// GetHasEntitySupport returns the HasEntitySupport field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaObjectParams) GetHasEntitySupport() bool {
	if o == nil || IsNil(o.HasEntitySupport.Get()) {
		var ret bool
		return ret
	}
	return *o.HasEntitySupport.Get()
}

// GetHasEntitySupportOk returns a tuple with the HasEntitySupport field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaObjectParams) GetHasEntitySupportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.HasEntitySupport.Get(), o.HasEntitySupport.IsSet()
}

// HasHasEntitySupport returns a boolean if a field has been set.
func (o *UdaObjectParams) HasHasEntitySupport() bool {
	if o != nil && o.HasEntitySupport.IsSet() {
		return true
	}

	return false
}

// SetHasEntitySupport gets a reference to the given NullableBool and assigns it to the HasEntitySupport field.
func (o *UdaObjectParams) SetHasEntitySupport(v bool) {
	o.HasEntitySupport.Set(&v)
}
// SetHasEntitySupportNil sets the value for HasEntitySupport to be an explicit nil
func (o *UdaObjectParams) SetHasEntitySupportNil() {
	o.HasEntitySupport.Set(nil)
}

// UnsetHasEntitySupport ensures that no value is present for HasEntitySupport, not even an explicit nil
func (o *UdaObjectParams) UnsetHasEntitySupport() {
	o.HasEntitySupport.Unset()
}

// GetSourceType returns the SourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaObjectParams) GetSourceType() string {
	if o == nil || IsNil(o.SourceType.Get()) {
		var ret string
		return ret
	}
	return *o.SourceType.Get()
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaObjectParams) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceType.Get(), o.SourceType.IsSet()
}

// HasSourceType returns a boolean if a field has been set.
func (o *UdaObjectParams) HasSourceType() bool {
	if o != nil && o.SourceType.IsSet() {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given NullableString and assigns it to the SourceType field.
func (o *UdaObjectParams) SetSourceType(v string) {
	o.SourceType.Set(&v)
}
// SetSourceTypeNil sets the value for SourceType to be an explicit nil
func (o *UdaObjectParams) SetSourceTypeNil() {
	o.SourceType.Set(nil)
}

// UnsetSourceType ensures that no value is present for SourceType, not even an explicit nil
func (o *UdaObjectParams) UnsetSourceType() {
	o.SourceType.Unset()
}

func (o UdaObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaObjectParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.HasEntitySupport.IsSet() {
		toSerialize["hasEntitySupport"] = o.HasEntitySupport.Get()
	}
	if o.SourceType.IsSet() {
		toSerialize["sourceType"] = o.SourceType.Get()
	}
	return toSerialize, nil
}

type NullableUdaObjectParams struct {
	value *UdaObjectParams
	isSet bool
}

func (v NullableUdaObjectParams) Get() *UdaObjectParams {
	return v.value
}

func (v *NullableUdaObjectParams) Set(val *UdaObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaObjectParams(val *UdaObjectParams) *NullableUdaObjectParams {
	return &NullableUdaObjectParams{value: val, isSet: true}
}

func (v NullableUdaObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


