/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SlaveData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SlaveData{}

// SlaveData Specifies the object info.
type SlaveData struct {
	// Expected gandalf session_id of the slave.
	ExpectedSessionId NullableInt64 `json:"expectedSessionId,omitempty"`
	// Information from where the slave can resume indexing work on the object.
	IndexingCookie NullableString `json:"indexingCookie,omitempty"`
	Stats NullableGaiaIndexingStats `json:"stats,omitempty"`
	// Task handle assigned by the master.
	TaskHandle NullableInt64 `json:"taskHandle,omitempty"`
}

// NewSlaveData instantiates a new SlaveData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSlaveData() *SlaveData {
	this := SlaveData{}
	return &this
}

// NewSlaveDataWithDefaults instantiates a new SlaveData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSlaveDataWithDefaults() *SlaveData {
	this := SlaveData{}
	return &this
}

// GetExpectedSessionId returns the ExpectedSessionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SlaveData) GetExpectedSessionId() int64 {
	if o == nil || IsNil(o.ExpectedSessionId.Get()) {
		var ret int64
		return ret
	}
	return *o.ExpectedSessionId.Get()
}

// GetExpectedSessionIdOk returns a tuple with the ExpectedSessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SlaveData) GetExpectedSessionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpectedSessionId.Get(), o.ExpectedSessionId.IsSet()
}

// HasExpectedSessionId returns a boolean if a field has been set.
func (o *SlaveData) HasExpectedSessionId() bool {
	if o != nil && o.ExpectedSessionId.IsSet() {
		return true
	}

	return false
}

// SetExpectedSessionId gets a reference to the given NullableInt64 and assigns it to the ExpectedSessionId field.
func (o *SlaveData) SetExpectedSessionId(v int64) {
	o.ExpectedSessionId.Set(&v)
}
// SetExpectedSessionIdNil sets the value for ExpectedSessionId to be an explicit nil
func (o *SlaveData) SetExpectedSessionIdNil() {
	o.ExpectedSessionId.Set(nil)
}

// UnsetExpectedSessionId ensures that no value is present for ExpectedSessionId, not even an explicit nil
func (o *SlaveData) UnsetExpectedSessionId() {
	o.ExpectedSessionId.Unset()
}

// GetIndexingCookie returns the IndexingCookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SlaveData) GetIndexingCookie() string {
	if o == nil || IsNil(o.IndexingCookie.Get()) {
		var ret string
		return ret
	}
	return *o.IndexingCookie.Get()
}

// GetIndexingCookieOk returns a tuple with the IndexingCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SlaveData) GetIndexingCookieOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IndexingCookie.Get(), o.IndexingCookie.IsSet()
}

// HasIndexingCookie returns a boolean if a field has been set.
func (o *SlaveData) HasIndexingCookie() bool {
	if o != nil && o.IndexingCookie.IsSet() {
		return true
	}

	return false
}

// SetIndexingCookie gets a reference to the given NullableString and assigns it to the IndexingCookie field.
func (o *SlaveData) SetIndexingCookie(v string) {
	o.IndexingCookie.Set(&v)
}
// SetIndexingCookieNil sets the value for IndexingCookie to be an explicit nil
func (o *SlaveData) SetIndexingCookieNil() {
	o.IndexingCookie.Set(nil)
}

// UnsetIndexingCookie ensures that no value is present for IndexingCookie, not even an explicit nil
func (o *SlaveData) UnsetIndexingCookie() {
	o.IndexingCookie.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SlaveData) GetStats() GaiaIndexingStats {
	if o == nil || IsNil(o.Stats.Get()) {
		var ret GaiaIndexingStats
		return ret
	}
	return *o.Stats.Get()
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SlaveData) GetStatsOk() (*GaiaIndexingStats, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stats.Get(), o.Stats.IsSet()
}

// HasStats returns a boolean if a field has been set.
func (o *SlaveData) HasStats() bool {
	if o != nil && o.Stats.IsSet() {
		return true
	}

	return false
}

// SetStats gets a reference to the given NullableGaiaIndexingStats and assigns it to the Stats field.
func (o *SlaveData) SetStats(v GaiaIndexingStats) {
	o.Stats.Set(&v)
}
// SetStatsNil sets the value for Stats to be an explicit nil
func (o *SlaveData) SetStatsNil() {
	o.Stats.Set(nil)
}

// UnsetStats ensures that no value is present for Stats, not even an explicit nil
func (o *SlaveData) UnsetStats() {
	o.Stats.Unset()
}

// GetTaskHandle returns the TaskHandle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SlaveData) GetTaskHandle() int64 {
	if o == nil || IsNil(o.TaskHandle.Get()) {
		var ret int64
		return ret
	}
	return *o.TaskHandle.Get()
}

// GetTaskHandleOk returns a tuple with the TaskHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SlaveData) GetTaskHandleOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskHandle.Get(), o.TaskHandle.IsSet()
}

// HasTaskHandle returns a boolean if a field has been set.
func (o *SlaveData) HasTaskHandle() bool {
	if o != nil && o.TaskHandle.IsSet() {
		return true
	}

	return false
}

// SetTaskHandle gets a reference to the given NullableInt64 and assigns it to the TaskHandle field.
func (o *SlaveData) SetTaskHandle(v int64) {
	o.TaskHandle.Set(&v)
}
// SetTaskHandleNil sets the value for TaskHandle to be an explicit nil
func (o *SlaveData) SetTaskHandleNil() {
	o.TaskHandle.Set(nil)
}

// UnsetTaskHandle ensures that no value is present for TaskHandle, not even an explicit nil
func (o *SlaveData) UnsetTaskHandle() {
	o.TaskHandle.Unset()
}

func (o SlaveData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SlaveData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExpectedSessionId.IsSet() {
		toSerialize["expectedSessionId"] = o.ExpectedSessionId.Get()
	}
	if o.IndexingCookie.IsSet() {
		toSerialize["indexingCookie"] = o.IndexingCookie.Get()
	}
	if o.Stats.IsSet() {
		toSerialize["stats"] = o.Stats.Get()
	}
	if o.TaskHandle.IsSet() {
		toSerialize["taskHandle"] = o.TaskHandle.Get()
	}
	return toSerialize, nil
}

type NullableSlaveData struct {
	value *SlaveData
	isSet bool
}

func (v NullableSlaveData) Get() *SlaveData {
	return v.value
}

func (v *NullableSlaveData) Set(val *SlaveData) {
	v.value = val
	v.isSet = true
}

func (v NullableSlaveData) IsSet() bool {
	return v.isSet
}

func (v *NullableSlaveData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSlaveData(val *SlaveData) *NullableSlaveData {
	return &NullableSlaveData{value: val, isSet: true}
}

func (v NullableSlaveData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSlaveData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


