/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CancellationTimeoutParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancellationTimeoutParams{}

// CancellationTimeoutParams Specifies timeouts for different backup types (kFull, kRegular etc.)
type CancellationTimeoutParams struct {
	// The scheduled backup type(kFull, kRegular etc.)
	BackupType NullableString `json:"backupType,omitempty"`
	// Specifies the timeout in mins
	TimeoutMins NullableInt64 `json:"timeoutMins,omitempty"`
}

// NewCancellationTimeoutParams instantiates a new CancellationTimeoutParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancellationTimeoutParams() *CancellationTimeoutParams {
	this := CancellationTimeoutParams{}
	return &this
}

// NewCancellationTimeoutParamsWithDefaults instantiates a new CancellationTimeoutParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancellationTimeoutParamsWithDefaults() *CancellationTimeoutParams {
	this := CancellationTimeoutParams{}
	return &this
}

// GetBackupType returns the BackupType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancellationTimeoutParams) GetBackupType() string {
	if o == nil || IsNil(o.BackupType.Get()) {
		var ret string
		return ret
	}
	return *o.BackupType.Get()
}

// GetBackupTypeOk returns a tuple with the BackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancellationTimeoutParams) GetBackupTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupType.Get(), o.BackupType.IsSet()
}

// HasBackupType returns a boolean if a field has been set.
func (o *CancellationTimeoutParams) HasBackupType() bool {
	if o != nil && o.BackupType.IsSet() {
		return true
	}

	return false
}

// SetBackupType gets a reference to the given NullableString and assigns it to the BackupType field.
func (o *CancellationTimeoutParams) SetBackupType(v string) {
	o.BackupType.Set(&v)
}
// SetBackupTypeNil sets the value for BackupType to be an explicit nil
func (o *CancellationTimeoutParams) SetBackupTypeNil() {
	o.BackupType.Set(nil)
}

// UnsetBackupType ensures that no value is present for BackupType, not even an explicit nil
func (o *CancellationTimeoutParams) UnsetBackupType() {
	o.BackupType.Unset()
}

// GetTimeoutMins returns the TimeoutMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancellationTimeoutParams) GetTimeoutMins() int64 {
	if o == nil || IsNil(o.TimeoutMins.Get()) {
		var ret int64
		return ret
	}
	return *o.TimeoutMins.Get()
}

// GetTimeoutMinsOk returns a tuple with the TimeoutMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancellationTimeoutParams) GetTimeoutMinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeoutMins.Get(), o.TimeoutMins.IsSet()
}

// HasTimeoutMins returns a boolean if a field has been set.
func (o *CancellationTimeoutParams) HasTimeoutMins() bool {
	if o != nil && o.TimeoutMins.IsSet() {
		return true
	}

	return false
}

// SetTimeoutMins gets a reference to the given NullableInt64 and assigns it to the TimeoutMins field.
func (o *CancellationTimeoutParams) SetTimeoutMins(v int64) {
	o.TimeoutMins.Set(&v)
}
// SetTimeoutMinsNil sets the value for TimeoutMins to be an explicit nil
func (o *CancellationTimeoutParams) SetTimeoutMinsNil() {
	o.TimeoutMins.Set(nil)
}

// UnsetTimeoutMins ensures that no value is present for TimeoutMins, not even an explicit nil
func (o *CancellationTimeoutParams) UnsetTimeoutMins() {
	o.TimeoutMins.Unset()
}

func (o CancellationTimeoutParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancellationTimeoutParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupType.IsSet() {
		toSerialize["backupType"] = o.BackupType.Get()
	}
	if o.TimeoutMins.IsSet() {
		toSerialize["timeoutMins"] = o.TimeoutMins.Get()
	}
	return toSerialize, nil
}

type NullableCancellationTimeoutParams struct {
	value *CancellationTimeoutParams
	isSet bool
}

func (v NullableCancellationTimeoutParams) Get() *CancellationTimeoutParams {
	return v.value
}

func (v *NullableCancellationTimeoutParams) Set(val *CancellationTimeoutParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCancellationTimeoutParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCancellationTimeoutParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancellationTimeoutParams(val *CancellationTimeoutParams) *NullableCancellationTimeoutParams {
	return &NullableCancellationTimeoutParams{value: val, isSet: true}
}

func (v NullableCancellationTimeoutParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancellationTimeoutParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


