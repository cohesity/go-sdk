/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PrimaryArchivalTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrimaryArchivalTarget{}

// PrimaryArchivalTarget Specifies the primary archival settings. Mainly used for cloud direct archive (CAD) policy where primary backup is stored on archival target.
type PrimaryArchivalTarget struct {
	// Specifies the Archival target id to take primary backup.
	TargetId NullableInt64 `json:"targetId"`
	// Specifies the Archival target name where Snapshots are copied.
	TargetName NullableString `json:"targetName,omitempty"`
	TierSettings *TierLevelSettings `json:"tierSettings,omitempty"`
}

type _PrimaryArchivalTarget PrimaryArchivalTarget

// NewPrimaryArchivalTarget instantiates a new PrimaryArchivalTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrimaryArchivalTarget(targetId NullableInt64) *PrimaryArchivalTarget {
	this := PrimaryArchivalTarget{}
	this.TargetId = targetId
	return &this
}

// NewPrimaryArchivalTargetWithDefaults instantiates a new PrimaryArchivalTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrimaryArchivalTargetWithDefaults() *PrimaryArchivalTarget {
	this := PrimaryArchivalTarget{}
	return &this
}

// GetTargetId returns the TargetId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *PrimaryArchivalTarget) GetTargetId() int64 {
	if o == nil || o.TargetId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.TargetId.Get()
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrimaryArchivalTarget) GetTargetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetId.Get(), o.TargetId.IsSet()
}

// SetTargetId sets field value
func (o *PrimaryArchivalTarget) SetTargetId(v int64) {
	o.TargetId.Set(&v)
}

// GetTargetName returns the TargetName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrimaryArchivalTarget) GetTargetName() string {
	if o == nil || IsNil(o.TargetName.Get()) {
		var ret string
		return ret
	}
	return *o.TargetName.Get()
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrimaryArchivalTarget) GetTargetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetName.Get(), o.TargetName.IsSet()
}

// HasTargetName returns a boolean if a field has been set.
func (o *PrimaryArchivalTarget) HasTargetName() bool {
	if o != nil && o.TargetName.IsSet() {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given NullableString and assigns it to the TargetName field.
func (o *PrimaryArchivalTarget) SetTargetName(v string) {
	o.TargetName.Set(&v)
}
// SetTargetNameNil sets the value for TargetName to be an explicit nil
func (o *PrimaryArchivalTarget) SetTargetNameNil() {
	o.TargetName.Set(nil)
}

// UnsetTargetName ensures that no value is present for TargetName, not even an explicit nil
func (o *PrimaryArchivalTarget) UnsetTargetName() {
	o.TargetName.Unset()
}

// GetTierSettings returns the TierSettings field value if set, zero value otherwise.
func (o *PrimaryArchivalTarget) GetTierSettings() TierLevelSettings {
	if o == nil || IsNil(o.TierSettings) {
		var ret TierLevelSettings
		return ret
	}
	return *o.TierSettings
}

// GetTierSettingsOk returns a tuple with the TierSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrimaryArchivalTarget) GetTierSettingsOk() (*TierLevelSettings, bool) {
	if o == nil || IsNil(o.TierSettings) {
		return nil, false
	}
	return o.TierSettings, true
}

// HasTierSettings returns a boolean if a field has been set.
func (o *PrimaryArchivalTarget) HasTierSettings() bool {
	if o != nil && !IsNil(o.TierSettings) {
		return true
	}

	return false
}

// SetTierSettings gets a reference to the given TierLevelSettings and assigns it to the TierSettings field.
func (o *PrimaryArchivalTarget) SetTierSettings(v TierLevelSettings) {
	o.TierSettings = &v
}

func (o PrimaryArchivalTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrimaryArchivalTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targetId"] = o.TargetId.Get()
	if o.TargetName.IsSet() {
		toSerialize["targetName"] = o.TargetName.Get()
	}
	if !IsNil(o.TierSettings) {
		toSerialize["tierSettings"] = o.TierSettings
	}
	return toSerialize, nil
}

func (o *PrimaryArchivalTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPrimaryArchivalTarget := _PrimaryArchivalTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPrimaryArchivalTarget)

	if err != nil {
		return err
	}

	*o = PrimaryArchivalTarget(varPrimaryArchivalTarget)

	return err
}

type NullablePrimaryArchivalTarget struct {
	value *PrimaryArchivalTarget
	isSet bool
}

func (v NullablePrimaryArchivalTarget) Get() *PrimaryArchivalTarget {
	return v.value
}

func (v *NullablePrimaryArchivalTarget) Set(val *PrimaryArchivalTarget) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimaryArchivalTarget) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimaryArchivalTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimaryArchivalTarget(val *PrimaryArchivalTarget) *NullablePrimaryArchivalTarget {
	return &NullablePrimaryArchivalTarget{value: val, isSet: true}
}

func (v NullablePrimaryArchivalTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimaryArchivalTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


