/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FixedIssue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedIssue{}

// FixedIssue Specifies the description of a fixed issue.
type FixedIssue struct {
	// Specifies a unique number of the bug.
	Id *int64 `json:"id,omitempty"`
	// Specifies the description of fix made for the issue.
	ReleaseNote *string `json:"releaseNote,omitempty"`
}

// NewFixedIssue instantiates a new FixedIssue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedIssue() *FixedIssue {
	this := FixedIssue{}
	return &this
}

// NewFixedIssueWithDefaults instantiates a new FixedIssue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedIssueWithDefaults() *FixedIssue {
	this := FixedIssue{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FixedIssue) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIssue) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FixedIssue) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *FixedIssue) SetId(v int64) {
	o.Id = &v
}

// GetReleaseNote returns the ReleaseNote field value if set, zero value otherwise.
func (o *FixedIssue) GetReleaseNote() string {
	if o == nil || IsNil(o.ReleaseNote) {
		var ret string
		return ret
	}
	return *o.ReleaseNote
}

// GetReleaseNoteOk returns a tuple with the ReleaseNote field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedIssue) GetReleaseNoteOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseNote) {
		return nil, false
	}
	return o.ReleaseNote, true
}

// HasReleaseNote returns a boolean if a field has been set.
func (o *FixedIssue) HasReleaseNote() bool {
	if o != nil && !IsNil(o.ReleaseNote) {
		return true
	}

	return false
}

// SetReleaseNote gets a reference to the given string and assigns it to the ReleaseNote field.
func (o *FixedIssue) SetReleaseNote(v string) {
	o.ReleaseNote = &v
}

func (o FixedIssue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedIssue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.ReleaseNote) {
		toSerialize["releaseNote"] = o.ReleaseNote
	}
	return toSerialize, nil
}

type NullableFixedIssue struct {
	value *FixedIssue
	isSet bool
}

func (v NullableFixedIssue) Get() *FixedIssue {
	return v.value
}

func (v *NullableFixedIssue) Set(val *FixedIssue) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedIssue) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedIssue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedIssue(val *FixedIssue) *NullableFixedIssue {
	return &NullableFixedIssue{value: val, isSet: true}
}

func (v NullableFixedIssue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedIssue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


