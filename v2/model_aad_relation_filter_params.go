/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AadRelationFilterParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AadRelationFilterParams{}

// AadRelationFilterParams Determines filter that can be applied for a Aad node edge.
type AadRelationFilterParams struct {
	// Filters the edges which matches with specified node relation types.
	RelationTypes []string `json:"relationTypes,omitempty"`
}

// NewAadRelationFilterParams instantiates a new AadRelationFilterParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAadRelationFilterParams() *AadRelationFilterParams {
	this := AadRelationFilterParams{}
	return &this
}

// NewAadRelationFilterParamsWithDefaults instantiates a new AadRelationFilterParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAadRelationFilterParamsWithDefaults() *AadRelationFilterParams {
	this := AadRelationFilterParams{}
	return &this
}

// GetRelationTypes returns the RelationTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AadRelationFilterParams) GetRelationTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RelationTypes
}

// GetRelationTypesOk returns a tuple with the RelationTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AadRelationFilterParams) GetRelationTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.RelationTypes) {
		return nil, false
	}
	return o.RelationTypes, true
}

// HasRelationTypes returns a boolean if a field has been set.
func (o *AadRelationFilterParams) HasRelationTypes() bool {
	if o != nil && !IsNil(o.RelationTypes) {
		return true
	}

	return false
}

// SetRelationTypes gets a reference to the given []string and assigns it to the RelationTypes field.
func (o *AadRelationFilterParams) SetRelationTypes(v []string) {
	o.RelationTypes = v
}

func (o AadRelationFilterParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AadRelationFilterParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RelationTypes != nil {
		toSerialize["relationTypes"] = o.RelationTypes
	}
	return toSerialize, nil
}

type NullableAadRelationFilterParams struct {
	value *AadRelationFilterParams
	isSet bool
}

func (v NullableAadRelationFilterParams) Get() *AadRelationFilterParams {
	return v.value
}

func (v *NullableAadRelationFilterParams) Set(val *AadRelationFilterParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAadRelationFilterParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAadRelationFilterParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAadRelationFilterParams(val *AadRelationFilterParams) *NullableAadRelationFilterParams {
	return &NullableAadRelationFilterParams{value: val, isSet: true}
}

func (v NullableAadRelationFilterParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAadRelationFilterParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


