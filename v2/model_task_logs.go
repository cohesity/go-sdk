/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TaskLogs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskLogs{}

// TaskLogs Specifies the id of the task log related to this active directory.
type TaskLogs struct {
	// Specifies the id of adding task.
	AddTaskId NullableString `json:"addTaskId,omitempty"`
	// Specifies the id of editing task.
	EditTaskId []string `json:"editTaskId,omitempty"`
}

// NewTaskLogs instantiates a new TaskLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskLogs() *TaskLogs {
	this := TaskLogs{}
	return &this
}

// NewTaskLogsWithDefaults instantiates a new TaskLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskLogsWithDefaults() *TaskLogs {
	this := TaskLogs{}
	return &this
}

// GetAddTaskId returns the AddTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskLogs) GetAddTaskId() string {
	if o == nil || IsNil(o.AddTaskId.Get()) {
		var ret string
		return ret
	}
	return *o.AddTaskId.Get()
}

// GetAddTaskIdOk returns a tuple with the AddTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskLogs) GetAddTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddTaskId.Get(), o.AddTaskId.IsSet()
}

// HasAddTaskId returns a boolean if a field has been set.
func (o *TaskLogs) HasAddTaskId() bool {
	if o != nil && o.AddTaskId.IsSet() {
		return true
	}

	return false
}

// SetAddTaskId gets a reference to the given NullableString and assigns it to the AddTaskId field.
func (o *TaskLogs) SetAddTaskId(v string) {
	o.AddTaskId.Set(&v)
}
// SetAddTaskIdNil sets the value for AddTaskId to be an explicit nil
func (o *TaskLogs) SetAddTaskIdNil() {
	o.AddTaskId.Set(nil)
}

// UnsetAddTaskId ensures that no value is present for AddTaskId, not even an explicit nil
func (o *TaskLogs) UnsetAddTaskId() {
	o.AddTaskId.Unset()
}

// GetEditTaskId returns the EditTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskLogs) GetEditTaskId() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.EditTaskId
}

// GetEditTaskIdOk returns a tuple with the EditTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskLogs) GetEditTaskIdOk() ([]string, bool) {
	if o == nil || IsNil(o.EditTaskId) {
		return nil, false
	}
	return o.EditTaskId, true
}

// HasEditTaskId returns a boolean if a field has been set.
func (o *TaskLogs) HasEditTaskId() bool {
	if o != nil && !IsNil(o.EditTaskId) {
		return true
	}

	return false
}

// SetEditTaskId gets a reference to the given []string and assigns it to the EditTaskId field.
func (o *TaskLogs) SetEditTaskId(v []string) {
	o.EditTaskId = v
}

func (o TaskLogs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskLogs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AddTaskId.IsSet() {
		toSerialize["addTaskId"] = o.AddTaskId.Get()
	}
	if o.EditTaskId != nil {
		toSerialize["editTaskId"] = o.EditTaskId
	}
	return toSerialize, nil
}

type NullableTaskLogs struct {
	value *TaskLogs
	isSet bool
}

func (v NullableTaskLogs) Get() *TaskLogs {
	return v.value
}

func (v *NullableTaskLogs) Set(val *TaskLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskLogs(val *TaskLogs) *NullableTaskLogs {
	return &NullableTaskLogs{value: val, isSet: true}
}

func (v NullableTaskLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


