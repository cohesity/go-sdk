/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SfdcRecords type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SfdcRecords{}

// SfdcRecords Specifies the list of salesforce records.
type SfdcRecords struct {
	// Specifies the column names for the records.
	ColumnNames []string `json:"columnNames,omitempty"`
	// Each record is represented by an array of strings having the same order as the 'columnNames'.
	Records [][]string `json:"records,omitempty"`
}

// NewSfdcRecords instantiates a new SfdcRecords object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSfdcRecords() *SfdcRecords {
	this := SfdcRecords{}
	return &this
}

// NewSfdcRecordsWithDefaults instantiates a new SfdcRecords object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSfdcRecordsWithDefaults() *SfdcRecords {
	this := SfdcRecords{}
	return &this
}

// GetColumnNames returns the ColumnNames field value if set, zero value otherwise.
func (o *SfdcRecords) GetColumnNames() []string {
	if o == nil || IsNil(o.ColumnNames) {
		var ret []string
		return ret
	}
	return o.ColumnNames
}

// GetColumnNamesOk returns a tuple with the ColumnNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfdcRecords) GetColumnNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ColumnNames) {
		return nil, false
	}
	return o.ColumnNames, true
}

// HasColumnNames returns a boolean if a field has been set.
func (o *SfdcRecords) HasColumnNames() bool {
	if o != nil && !IsNil(o.ColumnNames) {
		return true
	}

	return false
}

// SetColumnNames gets a reference to the given []string and assigns it to the ColumnNames field.
func (o *SfdcRecords) SetColumnNames(v []string) {
	o.ColumnNames = v
}

// GetRecords returns the Records field value if set, zero value otherwise.
func (o *SfdcRecords) GetRecords() [][]string {
	if o == nil || IsNil(o.Records) {
		var ret [][]string
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfdcRecords) GetRecordsOk() ([][]string, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *SfdcRecords) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given [][]string and assigns it to the Records field.
func (o *SfdcRecords) SetRecords(v [][]string) {
	o.Records = v
}

func (o SfdcRecords) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SfdcRecords) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ColumnNames) {
		toSerialize["columnNames"] = o.ColumnNames
	}
	if !IsNil(o.Records) {
		toSerialize["records"] = o.Records
	}
	return toSerialize, nil
}

type NullableSfdcRecords struct {
	value *SfdcRecords
	isSet bool
}

func (v NullableSfdcRecords) Get() *SfdcRecords {
	return v.value
}

func (v *NullableSfdcRecords) Set(val *SfdcRecords) {
	v.value = val
	v.isSet = true
}

func (v NullableSfdcRecords) IsSet() bool {
	return v.isSet
}

func (v *NullableSfdcRecords) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSfdcRecords(val *SfdcRecords) *NullableSfdcRecords {
	return &NullableSfdcRecords{value: val, isSet: true}
}

func (v NullableSfdcRecords) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSfdcRecords) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


