/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FormFieldParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FormFieldParams{}

// FormFieldParams Parameters to specify a form field
type FormFieldParams struct {
	BooleanConfig NullableBooleanFormFieldParams `json:"booleanConfig,omitempty"`
	// Id to identify the form field. This is also be used for assigning component html ids which can be leveraged for writing automation against the form field.
	Id NullableString `json:"id,omitempty"`
	// Key against which the form field value will be returned
	Key NullableString `json:"key,omitempty"`
	// Label to be shown on the UI screen
	Label NullableString `json:"label,omitempty"`
	NumberConfig NullableNumberFormFieldParams `json:"numberConfig,omitempty"`
	PasswordConfig NullablePasswordFormFieldParams `json:"passwordConfig,omitempty"`
	RadioGroupConfig NullableRadioGroupFormFieldParams `json:"radioGroupConfig,omitempty"`
	StringConfig NullableStringFormFieldParams `json:"stringConfig,omitempty"`
	// Type of the form field. Available types are 'string', 'password', 'number', 'boolean', 'radioGroup'
	Type NullableString `json:"type,omitempty"`
}

// NewFormFieldParams instantiates a new FormFieldParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFormFieldParams() *FormFieldParams {
	this := FormFieldParams{}
	return &this
}

// NewFormFieldParamsWithDefaults instantiates a new FormFieldParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFormFieldParamsWithDefaults() *FormFieldParams {
	this := FormFieldParams{}
	return &this
}

// GetBooleanConfig returns the BooleanConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormFieldParams) GetBooleanConfig() BooleanFormFieldParams {
	if o == nil || IsNil(o.BooleanConfig.Get()) {
		var ret BooleanFormFieldParams
		return ret
	}
	return *o.BooleanConfig.Get()
}

// GetBooleanConfigOk returns a tuple with the BooleanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormFieldParams) GetBooleanConfigOk() (*BooleanFormFieldParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.BooleanConfig.Get(), o.BooleanConfig.IsSet()
}

// HasBooleanConfig returns a boolean if a field has been set.
func (o *FormFieldParams) HasBooleanConfig() bool {
	if o != nil && o.BooleanConfig.IsSet() {
		return true
	}

	return false
}

// SetBooleanConfig gets a reference to the given NullableBooleanFormFieldParams and assigns it to the BooleanConfig field.
func (o *FormFieldParams) SetBooleanConfig(v BooleanFormFieldParams) {
	o.BooleanConfig.Set(&v)
}
// SetBooleanConfigNil sets the value for BooleanConfig to be an explicit nil
func (o *FormFieldParams) SetBooleanConfigNil() {
	o.BooleanConfig.Set(nil)
}

// UnsetBooleanConfig ensures that no value is present for BooleanConfig, not even an explicit nil
func (o *FormFieldParams) UnsetBooleanConfig() {
	o.BooleanConfig.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormFieldParams) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormFieldParams) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *FormFieldParams) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *FormFieldParams) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *FormFieldParams) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *FormFieldParams) UnsetId() {
	o.Id.Unset()
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormFieldParams) GetKey() string {
	if o == nil || IsNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormFieldParams) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *FormFieldParams) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *FormFieldParams) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *FormFieldParams) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *FormFieldParams) UnsetKey() {
	o.Key.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormFieldParams) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormFieldParams) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *FormFieldParams) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *FormFieldParams) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *FormFieldParams) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *FormFieldParams) UnsetLabel() {
	o.Label.Unset()
}

// GetNumberConfig returns the NumberConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormFieldParams) GetNumberConfig() NumberFormFieldParams {
	if o == nil || IsNil(o.NumberConfig.Get()) {
		var ret NumberFormFieldParams
		return ret
	}
	return *o.NumberConfig.Get()
}

// GetNumberConfigOk returns a tuple with the NumberConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormFieldParams) GetNumberConfigOk() (*NumberFormFieldParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumberConfig.Get(), o.NumberConfig.IsSet()
}

// HasNumberConfig returns a boolean if a field has been set.
func (o *FormFieldParams) HasNumberConfig() bool {
	if o != nil && o.NumberConfig.IsSet() {
		return true
	}

	return false
}

// SetNumberConfig gets a reference to the given NullableNumberFormFieldParams and assigns it to the NumberConfig field.
func (o *FormFieldParams) SetNumberConfig(v NumberFormFieldParams) {
	o.NumberConfig.Set(&v)
}
// SetNumberConfigNil sets the value for NumberConfig to be an explicit nil
func (o *FormFieldParams) SetNumberConfigNil() {
	o.NumberConfig.Set(nil)
}

// UnsetNumberConfig ensures that no value is present for NumberConfig, not even an explicit nil
func (o *FormFieldParams) UnsetNumberConfig() {
	o.NumberConfig.Unset()
}

// GetPasswordConfig returns the PasswordConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormFieldParams) GetPasswordConfig() PasswordFormFieldParams {
	if o == nil || IsNil(o.PasswordConfig.Get()) {
		var ret PasswordFormFieldParams
		return ret
	}
	return *o.PasswordConfig.Get()
}

// GetPasswordConfigOk returns a tuple with the PasswordConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormFieldParams) GetPasswordConfigOk() (*PasswordFormFieldParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.PasswordConfig.Get(), o.PasswordConfig.IsSet()
}

// HasPasswordConfig returns a boolean if a field has been set.
func (o *FormFieldParams) HasPasswordConfig() bool {
	if o != nil && o.PasswordConfig.IsSet() {
		return true
	}

	return false
}

// SetPasswordConfig gets a reference to the given NullablePasswordFormFieldParams and assigns it to the PasswordConfig field.
func (o *FormFieldParams) SetPasswordConfig(v PasswordFormFieldParams) {
	o.PasswordConfig.Set(&v)
}
// SetPasswordConfigNil sets the value for PasswordConfig to be an explicit nil
func (o *FormFieldParams) SetPasswordConfigNil() {
	o.PasswordConfig.Set(nil)
}

// UnsetPasswordConfig ensures that no value is present for PasswordConfig, not even an explicit nil
func (o *FormFieldParams) UnsetPasswordConfig() {
	o.PasswordConfig.Unset()
}

// GetRadioGroupConfig returns the RadioGroupConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormFieldParams) GetRadioGroupConfig() RadioGroupFormFieldParams {
	if o == nil || IsNil(o.RadioGroupConfig.Get()) {
		var ret RadioGroupFormFieldParams
		return ret
	}
	return *o.RadioGroupConfig.Get()
}

// GetRadioGroupConfigOk returns a tuple with the RadioGroupConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormFieldParams) GetRadioGroupConfigOk() (*RadioGroupFormFieldParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RadioGroupConfig.Get(), o.RadioGroupConfig.IsSet()
}

// HasRadioGroupConfig returns a boolean if a field has been set.
func (o *FormFieldParams) HasRadioGroupConfig() bool {
	if o != nil && o.RadioGroupConfig.IsSet() {
		return true
	}

	return false
}

// SetRadioGroupConfig gets a reference to the given NullableRadioGroupFormFieldParams and assigns it to the RadioGroupConfig field.
func (o *FormFieldParams) SetRadioGroupConfig(v RadioGroupFormFieldParams) {
	o.RadioGroupConfig.Set(&v)
}
// SetRadioGroupConfigNil sets the value for RadioGroupConfig to be an explicit nil
func (o *FormFieldParams) SetRadioGroupConfigNil() {
	o.RadioGroupConfig.Set(nil)
}

// UnsetRadioGroupConfig ensures that no value is present for RadioGroupConfig, not even an explicit nil
func (o *FormFieldParams) UnsetRadioGroupConfig() {
	o.RadioGroupConfig.Unset()
}

// GetStringConfig returns the StringConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormFieldParams) GetStringConfig() StringFormFieldParams {
	if o == nil || IsNil(o.StringConfig.Get()) {
		var ret StringFormFieldParams
		return ret
	}
	return *o.StringConfig.Get()
}

// GetStringConfigOk returns a tuple with the StringConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormFieldParams) GetStringConfigOk() (*StringFormFieldParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.StringConfig.Get(), o.StringConfig.IsSet()
}

// HasStringConfig returns a boolean if a field has been set.
func (o *FormFieldParams) HasStringConfig() bool {
	if o != nil && o.StringConfig.IsSet() {
		return true
	}

	return false
}

// SetStringConfig gets a reference to the given NullableStringFormFieldParams and assigns it to the StringConfig field.
func (o *FormFieldParams) SetStringConfig(v StringFormFieldParams) {
	o.StringConfig.Set(&v)
}
// SetStringConfigNil sets the value for StringConfig to be an explicit nil
func (o *FormFieldParams) SetStringConfigNil() {
	o.StringConfig.Set(nil)
}

// UnsetStringConfig ensures that no value is present for StringConfig, not even an explicit nil
func (o *FormFieldParams) UnsetStringConfig() {
	o.StringConfig.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FormFieldParams) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FormFieldParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *FormFieldParams) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *FormFieldParams) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *FormFieldParams) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *FormFieldParams) UnsetType() {
	o.Type.Unset()
}

func (o FormFieldParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FormFieldParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BooleanConfig.IsSet() {
		toSerialize["booleanConfig"] = o.BooleanConfig.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.NumberConfig.IsSet() {
		toSerialize["numberConfig"] = o.NumberConfig.Get()
	}
	if o.PasswordConfig.IsSet() {
		toSerialize["passwordConfig"] = o.PasswordConfig.Get()
	}
	if o.RadioGroupConfig.IsSet() {
		toSerialize["radioGroupConfig"] = o.RadioGroupConfig.Get()
	}
	if o.StringConfig.IsSet() {
		toSerialize["stringConfig"] = o.StringConfig.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableFormFieldParams struct {
	value *FormFieldParams
	isSet bool
}

func (v NullableFormFieldParams) Get() *FormFieldParams {
	return v.value
}

func (v *NullableFormFieldParams) Set(val *FormFieldParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFormFieldParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFormFieldParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormFieldParams(val *FormFieldParams) *NullableFormFieldParams {
	return &NullableFormFieldParams{value: val, isSet: true}
}

func (v NullableFormFieldParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormFieldParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


