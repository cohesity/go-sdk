/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClusterPackages type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterPackages{}

// ClusterPackages List of cluster software packages.
type ClusterPackages struct {
	// List of cluster software packages.
	Packages []ClusterPackageParams `json:"packages,omitempty"`
}

// NewClusterPackages instantiates a new ClusterPackages object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterPackages() *ClusterPackages {
	this := ClusterPackages{}
	return &this
}

// NewClusterPackagesWithDefaults instantiates a new ClusterPackages object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterPackagesWithDefaults() *ClusterPackages {
	this := ClusterPackages{}
	return &this
}

// GetPackages returns the Packages field value if set, zero value otherwise.
func (o *ClusterPackages) GetPackages() []ClusterPackageParams {
	if o == nil || IsNil(o.Packages) {
		var ret []ClusterPackageParams
		return ret
	}
	return o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackages) GetPackagesOk() ([]ClusterPackageParams, bool) {
	if o == nil || IsNil(o.Packages) {
		return nil, false
	}
	return o.Packages, true
}

// HasPackages returns a boolean if a field has been set.
func (o *ClusterPackages) HasPackages() bool {
	if o != nil && !IsNil(o.Packages) {
		return true
	}

	return false
}

// SetPackages gets a reference to the given []ClusterPackageParams and assigns it to the Packages field.
func (o *ClusterPackages) SetPackages(v []ClusterPackageParams) {
	o.Packages = v
}

func (o ClusterPackages) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterPackages) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Packages) {
		toSerialize["packages"] = o.Packages
	}
	return toSerialize, nil
}

type NullableClusterPackages struct {
	value *ClusterPackages
	isSet bool
}

func (v NullableClusterPackages) Get() *ClusterPackages {
	return v.value
}

func (v *NullableClusterPackages) Set(val *ClusterPackages) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterPackages) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterPackages) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterPackages(val *ClusterPackages) *NullableClusterPackages {
	return &NullableClusterPackages{value: val, isSet: true}
}

func (v NullableClusterPackages) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterPackages) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


