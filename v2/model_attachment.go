/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Attachment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Attachment{}

// Attachment Specifies the attachment information of a firewall profile.
type Attachment struct {
	// Specifies the action.
	Action NullableString `json:"action,omitempty"`
	// Specifies a description for the attachment.
	Description NullableString `json:"description,omitempty"`
	// Specifies the network interface groups.
	InterfaceGroups []string `json:"interfaceGroups,omitempty"`
	// Specifies the network interfaces
	Interfaces []string `json:"interfaces,omitempty"`
	// Specifies the ip sets.
	IpsetNames []string `json:"ipsetNames,omitempty"`
	IsImplicit NullableBool `json:"isImplicit,omitempty"`
	// Specifies the firewall profile.
	Profile NullableString `json:"profile,omitempty"`
	// Specifies the subnets.
	Subnets []string `json:"subnets,omitempty"`
}

// NewAttachment instantiates a new Attachment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAttachment() *Attachment {
	this := Attachment{}
	return &this
}

// NewAttachmentWithDefaults instantiates a new Attachment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAttachmentWithDefaults() *Attachment {
	this := Attachment{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Attachment) GetAction() string {
	if o == nil || IsNil(o.Action.Get()) {
		var ret string
		return ret
	}
	return *o.Action.Get()
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Attachment) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action.Get(), o.Action.IsSet()
}

// HasAction returns a boolean if a field has been set.
func (o *Attachment) HasAction() bool {
	if o != nil && o.Action.IsSet() {
		return true
	}

	return false
}

// SetAction gets a reference to the given NullableString and assigns it to the Action field.
func (o *Attachment) SetAction(v string) {
	o.Action.Set(&v)
}
// SetActionNil sets the value for Action to be an explicit nil
func (o *Attachment) SetActionNil() {
	o.Action.Set(nil)
}

// UnsetAction ensures that no value is present for Action, not even an explicit nil
func (o *Attachment) UnsetAction() {
	o.Action.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Attachment) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Attachment) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Attachment) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Attachment) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Attachment) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Attachment) UnsetDescription() {
	o.Description.Unset()
}

// GetInterfaceGroups returns the InterfaceGroups field value if set, zero value otherwise.
func (o *Attachment) GetInterfaceGroups() []string {
	if o == nil || IsNil(o.InterfaceGroups) {
		var ret []string
		return ret
	}
	return o.InterfaceGroups
}

// GetInterfaceGroupsOk returns a tuple with the InterfaceGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetInterfaceGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.InterfaceGroups) {
		return nil, false
	}
	return o.InterfaceGroups, true
}

// HasInterfaceGroups returns a boolean if a field has been set.
func (o *Attachment) HasInterfaceGroups() bool {
	if o != nil && !IsNil(o.InterfaceGroups) {
		return true
	}

	return false
}

// SetInterfaceGroups gets a reference to the given []string and assigns it to the InterfaceGroups field.
func (o *Attachment) SetInterfaceGroups(v []string) {
	o.InterfaceGroups = v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *Attachment) GetInterfaces() []string {
	if o == nil || IsNil(o.Interfaces) {
		var ret []string
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetInterfacesOk() ([]string, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *Attachment) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []string and assigns it to the Interfaces field.
func (o *Attachment) SetInterfaces(v []string) {
	o.Interfaces = v
}

// GetIpsetNames returns the IpsetNames field value if set, zero value otherwise.
func (o *Attachment) GetIpsetNames() []string {
	if o == nil || IsNil(o.IpsetNames) {
		var ret []string
		return ret
	}
	return o.IpsetNames
}

// GetIpsetNamesOk returns a tuple with the IpsetNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetIpsetNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpsetNames) {
		return nil, false
	}
	return o.IpsetNames, true
}

// HasIpsetNames returns a boolean if a field has been set.
func (o *Attachment) HasIpsetNames() bool {
	if o != nil && !IsNil(o.IpsetNames) {
		return true
	}

	return false
}

// SetIpsetNames gets a reference to the given []string and assigns it to the IpsetNames field.
func (o *Attachment) SetIpsetNames(v []string) {
	o.IpsetNames = v
}

// GetIsImplicit returns the IsImplicit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Attachment) GetIsImplicit() bool {
	if o == nil || IsNil(o.IsImplicit.Get()) {
		var ret bool
		return ret
	}
	return *o.IsImplicit.Get()
}

// GetIsImplicitOk returns a tuple with the IsImplicit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Attachment) GetIsImplicitOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsImplicit.Get(), o.IsImplicit.IsSet()
}

// HasIsImplicit returns a boolean if a field has been set.
func (o *Attachment) HasIsImplicit() bool {
	if o != nil && o.IsImplicit.IsSet() {
		return true
	}

	return false
}

// SetIsImplicit gets a reference to the given NullableBool and assigns it to the IsImplicit field.
func (o *Attachment) SetIsImplicit(v bool) {
	o.IsImplicit.Set(&v)
}
// SetIsImplicitNil sets the value for IsImplicit to be an explicit nil
func (o *Attachment) SetIsImplicitNil() {
	o.IsImplicit.Set(nil)
}

// UnsetIsImplicit ensures that no value is present for IsImplicit, not even an explicit nil
func (o *Attachment) UnsetIsImplicit() {
	o.IsImplicit.Unset()
}

// GetProfile returns the Profile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Attachment) GetProfile() string {
	if o == nil || IsNil(o.Profile.Get()) {
		var ret string
		return ret
	}
	return *o.Profile.Get()
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Attachment) GetProfileOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Profile.Get(), o.Profile.IsSet()
}

// HasProfile returns a boolean if a field has been set.
func (o *Attachment) HasProfile() bool {
	if o != nil && o.Profile.IsSet() {
		return true
	}

	return false
}

// SetProfile gets a reference to the given NullableString and assigns it to the Profile field.
func (o *Attachment) SetProfile(v string) {
	o.Profile.Set(&v)
}
// SetProfileNil sets the value for Profile to be an explicit nil
func (o *Attachment) SetProfileNil() {
	o.Profile.Set(nil)
}

// UnsetProfile ensures that no value is present for Profile, not even an explicit nil
func (o *Attachment) UnsetProfile() {
	o.Profile.Unset()
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *Attachment) GetSubnets() []string {
	if o == nil || IsNil(o.Subnets) {
		var ret []string
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Attachment) GetSubnetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *Attachment) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []string and assigns it to the Subnets field.
func (o *Attachment) SetSubnets(v []string) {
	o.Subnets = v
}

func (o Attachment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Attachment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Action.IsSet() {
		toSerialize["action"] = o.Action.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.InterfaceGroups) {
		toSerialize["interfaceGroups"] = o.InterfaceGroups
	}
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	if !IsNil(o.IpsetNames) {
		toSerialize["ipsetNames"] = o.IpsetNames
	}
	if o.IsImplicit.IsSet() {
		toSerialize["isImplicit"] = o.IsImplicit.Get()
	}
	if o.Profile.IsSet() {
		toSerialize["profile"] = o.Profile.Get()
	}
	if !IsNil(o.Subnets) {
		toSerialize["subnets"] = o.Subnets
	}
	return toSerialize, nil
}

type NullableAttachment struct {
	value *Attachment
	isSet bool
}

func (v NullableAttachment) Get() *Attachment {
	return v.value
}

func (v *NullableAttachment) Set(val *Attachment) {
	v.value = val
	v.isSet = true
}

func (v NullableAttachment) IsSet() bool {
	return v.isSet
}

func (v *NullableAttachment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAttachment(val *Attachment) *NullableAttachment {
	return &NullableAttachment{value: val, isSet: true}
}

func (v NullableAttachment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAttachment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


