/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewClientStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewClientStats{}

// ViewClientStats Specifies the View Client stats.
type ViewClientStats struct {
	// Specifies the client IP.
	ClientIp NullableString `json:"clientIp,omitempty"`
	// Specifies the list of Client stats.
	Stats []ClientStats `json:"stats,omitempty"`
}

// NewViewClientStats instantiates a new ViewClientStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewClientStats() *ViewClientStats {
	this := ViewClientStats{}
	return &this
}

// NewViewClientStatsWithDefaults instantiates a new ViewClientStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewClientStatsWithDefaults() *ViewClientStats {
	this := ViewClientStats{}
	return &this
}

// GetClientIp returns the ClientIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClientStats) GetClientIp() string {
	if o == nil || IsNil(o.ClientIp.Get()) {
		var ret string
		return ret
	}
	return *o.ClientIp.Get()
}

// GetClientIpOk returns a tuple with the ClientIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClientStats) GetClientIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientIp.Get(), o.ClientIp.IsSet()
}

// HasClientIp returns a boolean if a field has been set.
func (o *ViewClientStats) HasClientIp() bool {
	if o != nil && o.ClientIp.IsSet() {
		return true
	}

	return false
}

// SetClientIp gets a reference to the given NullableString and assigns it to the ClientIp field.
func (o *ViewClientStats) SetClientIp(v string) {
	o.ClientIp.Set(&v)
}
// SetClientIpNil sets the value for ClientIp to be an explicit nil
func (o *ViewClientStats) SetClientIpNil() {
	o.ClientIp.Set(nil)
}

// UnsetClientIp ensures that no value is present for ClientIp, not even an explicit nil
func (o *ViewClientStats) UnsetClientIp() {
	o.ClientIp.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClientStats) GetStats() []ClientStats {
	if o == nil {
		var ret []ClientStats
		return ret
	}
	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClientStats) GetStatsOk() ([]ClientStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ViewClientStats) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given []ClientStats and assigns it to the Stats field.
func (o *ViewClientStats) SetStats(v []ClientStats) {
	o.Stats = v
}

func (o ViewClientStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewClientStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientIp.IsSet() {
		toSerialize["clientIp"] = o.ClientIp.Get()
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	return toSerialize, nil
}

type NullableViewClientStats struct {
	value *ViewClientStats
	isSet bool
}

func (v NullableViewClientStats) Get() *ViewClientStats {
	return v.value
}

func (v *NullableViewClientStats) Set(val *ViewClientStats) {
	v.value = val
	v.isSet = true
}

func (v NullableViewClientStats) IsSet() bool {
	return v.isSet
}

func (v *NullableViewClientStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewClientStats(val *ViewClientStats) *NullableViewClientStats {
	return &NullableViewClientStats{value: val, isSet: true}
}

func (v NullableViewClientStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewClientStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


