/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RpaasProvisionStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RpaasProvisionStatus{}

// RpaasProvisionStatus Specifies the provision statuses for rpaas region provisioning.
type RpaasProvisionStatus struct {
	// Specifies the provision statuses for rpaas region provisioning.
	RpaasProvisionStatus *string `json:"rpaasProvisionStatus,omitempty"`
}

// NewRpaasProvisionStatus instantiates a new RpaasProvisionStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRpaasProvisionStatus() *RpaasProvisionStatus {
	this := RpaasProvisionStatus{}
	return &this
}

// NewRpaasProvisionStatusWithDefaults instantiates a new RpaasProvisionStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRpaasProvisionStatusWithDefaults() *RpaasProvisionStatus {
	this := RpaasProvisionStatus{}
	return &this
}

// GetRpaasProvisionStatus returns the RpaasProvisionStatus field value if set, zero value otherwise.
func (o *RpaasProvisionStatus) GetRpaasProvisionStatus() string {
	if o == nil || IsNil(o.RpaasProvisionStatus) {
		var ret string
		return ret
	}
	return *o.RpaasProvisionStatus
}

// GetRpaasProvisionStatusOk returns a tuple with the RpaasProvisionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpaasProvisionStatus) GetRpaasProvisionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.RpaasProvisionStatus) {
		return nil, false
	}
	return o.RpaasProvisionStatus, true
}

// HasRpaasProvisionStatus returns a boolean if a field has been set.
func (o *RpaasProvisionStatus) HasRpaasProvisionStatus() bool {
	if o != nil && !IsNil(o.RpaasProvisionStatus) {
		return true
	}

	return false
}

// SetRpaasProvisionStatus gets a reference to the given string and assigns it to the RpaasProvisionStatus field.
func (o *RpaasProvisionStatus) SetRpaasProvisionStatus(v string) {
	o.RpaasProvisionStatus = &v
}

func (o RpaasProvisionStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RpaasProvisionStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RpaasProvisionStatus) {
		toSerialize["rpaasProvisionStatus"] = o.RpaasProvisionStatus
	}
	return toSerialize, nil
}

type NullableRpaasProvisionStatus struct {
	value *RpaasProvisionStatus
	isSet bool
}

func (v NullableRpaasProvisionStatus) Get() *RpaasProvisionStatus {
	return v.value
}

func (v *NullableRpaasProvisionStatus) Set(val *RpaasProvisionStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRpaasProvisionStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRpaasProvisionStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRpaasProvisionStatus(val *RpaasProvisionStatus) *NullableRpaasProvisionStatus {
	return &NullableRpaasProvisionStatus{value: val, isSet: true}
}

func (v NullableRpaasProvisionStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRpaasProvisionStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


