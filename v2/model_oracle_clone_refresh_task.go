/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OracleCloneRefreshTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleCloneRefreshTask{}

// OracleCloneRefreshTask Specifies the information about an Oracle refresh task.
type OracleCloneRefreshTask struct {
	// Specifies the base folder of Oracle installation on the target host.
	BaseFolder NullableString `json:"baseFolder"`
	// Specifies the name of the cloned database.
	DbName NullableString `json:"dbName"`
	// Specifies the home folder for the cloned database.
	HomeFolder NullableString `json:"homeFolder"`
	// Specifies the System Global Area (SGA) for the clone database.
	Sga NullableString `json:"sga,omitempty"`
	// Specifies the version of the Oracle database.
	DbVersion NullableString `json:"dbVersion,omitempty"`
}

type _OracleCloneRefreshTask OracleCloneRefreshTask

// NewOracleCloneRefreshTask instantiates a new OracleCloneRefreshTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleCloneRefreshTask(baseFolder NullableString, dbName NullableString, homeFolder NullableString) *OracleCloneRefreshTask {
	this := OracleCloneRefreshTask{}
	this.BaseFolder = baseFolder
	this.DbName = dbName
	this.HomeFolder = homeFolder
	return &this
}

// NewOracleCloneRefreshTaskWithDefaults instantiates a new OracleCloneRefreshTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleCloneRefreshTaskWithDefaults() *OracleCloneRefreshTask {
	this := OracleCloneRefreshTask{}
	return &this
}

// GetBaseFolder returns the BaseFolder field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OracleCloneRefreshTask) GetBaseFolder() string {
	if o == nil || o.BaseFolder.Get() == nil {
		var ret string
		return ret
	}

	return *o.BaseFolder.Get()
}

// GetBaseFolderOk returns a tuple with the BaseFolder field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneRefreshTask) GetBaseFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseFolder.Get(), o.BaseFolder.IsSet()
}

// SetBaseFolder sets field value
func (o *OracleCloneRefreshTask) SetBaseFolder(v string) {
	o.BaseFolder.Set(&v)
}

// GetDbName returns the DbName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OracleCloneRefreshTask) GetDbName() string {
	if o == nil || o.DbName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DbName.Get()
}

// GetDbNameOk returns a tuple with the DbName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneRefreshTask) GetDbNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DbName.Get(), o.DbName.IsSet()
}

// SetDbName sets field value
func (o *OracleCloneRefreshTask) SetDbName(v string) {
	o.DbName.Set(&v)
}

// GetHomeFolder returns the HomeFolder field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OracleCloneRefreshTask) GetHomeFolder() string {
	if o == nil || o.HomeFolder.Get() == nil {
		var ret string
		return ret
	}

	return *o.HomeFolder.Get()
}

// GetHomeFolderOk returns a tuple with the HomeFolder field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneRefreshTask) GetHomeFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HomeFolder.Get(), o.HomeFolder.IsSet()
}

// SetHomeFolder sets field value
func (o *OracleCloneRefreshTask) SetHomeFolder(v string) {
	o.HomeFolder.Set(&v)
}

// GetSga returns the Sga field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleCloneRefreshTask) GetSga() string {
	if o == nil || IsNil(o.Sga.Get()) {
		var ret string
		return ret
	}
	return *o.Sga.Get()
}

// GetSgaOk returns a tuple with the Sga field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneRefreshTask) GetSgaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sga.Get(), o.Sga.IsSet()
}

// HasSga returns a boolean if a field has been set.
func (o *OracleCloneRefreshTask) HasSga() bool {
	if o != nil && o.Sga.IsSet() {
		return true
	}

	return false
}

// SetSga gets a reference to the given NullableString and assigns it to the Sga field.
func (o *OracleCloneRefreshTask) SetSga(v string) {
	o.Sga.Set(&v)
}
// SetSgaNil sets the value for Sga to be an explicit nil
func (o *OracleCloneRefreshTask) SetSgaNil() {
	o.Sga.Set(nil)
}

// UnsetSga ensures that no value is present for Sga, not even an explicit nil
func (o *OracleCloneRefreshTask) UnsetSga() {
	o.Sga.Unset()
}

// GetDbVersion returns the DbVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleCloneRefreshTask) GetDbVersion() string {
	if o == nil || IsNil(o.DbVersion.Get()) {
		var ret string
		return ret
	}
	return *o.DbVersion.Get()
}

// GetDbVersionOk returns a tuple with the DbVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneRefreshTask) GetDbVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DbVersion.Get(), o.DbVersion.IsSet()
}

// HasDbVersion returns a boolean if a field has been set.
func (o *OracleCloneRefreshTask) HasDbVersion() bool {
	if o != nil && o.DbVersion.IsSet() {
		return true
	}

	return false
}

// SetDbVersion gets a reference to the given NullableString and assigns it to the DbVersion field.
func (o *OracleCloneRefreshTask) SetDbVersion(v string) {
	o.DbVersion.Set(&v)
}
// SetDbVersionNil sets the value for DbVersion to be an explicit nil
func (o *OracleCloneRefreshTask) SetDbVersionNil() {
	o.DbVersion.Set(nil)
}

// UnsetDbVersion ensures that no value is present for DbVersion, not even an explicit nil
func (o *OracleCloneRefreshTask) UnsetDbVersion() {
	o.DbVersion.Unset()
}

func (o OracleCloneRefreshTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleCloneRefreshTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["baseFolder"] = o.BaseFolder.Get()
	toSerialize["dbName"] = o.DbName.Get()
	toSerialize["homeFolder"] = o.HomeFolder.Get()
	if o.Sga.IsSet() {
		toSerialize["sga"] = o.Sga.Get()
	}
	if o.DbVersion.IsSet() {
		toSerialize["dbVersion"] = o.DbVersion.Get()
	}
	return toSerialize, nil
}

func (o *OracleCloneRefreshTask) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"baseFolder",
		"dbName",
		"homeFolder",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOracleCloneRefreshTask := _OracleCloneRefreshTask{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOracleCloneRefreshTask)

	if err != nil {
		return err
	}

	*o = OracleCloneRefreshTask(varOracleCloneRefreshTask)

	return err
}

type NullableOracleCloneRefreshTask struct {
	value *OracleCloneRefreshTask
	isSet bool
}

func (v NullableOracleCloneRefreshTask) Get() *OracleCloneRefreshTask {
	return v.value
}

func (v *NullableOracleCloneRefreshTask) Set(val *OracleCloneRefreshTask) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleCloneRefreshTask) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleCloneRefreshTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleCloneRefreshTask(val *OracleCloneRefreshTask) *NullableOracleCloneRefreshTask {
	return &NullableOracleCloneRefreshTask{value: val, isSet: true}
}

func (v NullableOracleCloneRefreshTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleCloneRefreshTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


