/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ActiveDirectoryPrincipals type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryPrincipals{}

// ActiveDirectoryPrincipals Response of Active directory principals.
type ActiveDirectoryPrincipals struct {
	// A list of Active directory principals
	Principals []ActiveDirectoryPrincipal `json:"principals,omitempty"`
}

// NewActiveDirectoryPrincipals instantiates a new ActiveDirectoryPrincipals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryPrincipals() *ActiveDirectoryPrincipals {
	this := ActiveDirectoryPrincipals{}
	return &this
}

// NewActiveDirectoryPrincipalsWithDefaults instantiates a new ActiveDirectoryPrincipals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryPrincipalsWithDefaults() *ActiveDirectoryPrincipals {
	this := ActiveDirectoryPrincipals{}
	return &this
}

// GetPrincipals returns the Principals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipals) GetPrincipals() []ActiveDirectoryPrincipal {
	if o == nil {
		var ret []ActiveDirectoryPrincipal
		return ret
	}
	return o.Principals
}

// GetPrincipalsOk returns a tuple with the Principals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipals) GetPrincipalsOk() ([]ActiveDirectoryPrincipal, bool) {
	if o == nil || IsNil(o.Principals) {
		return nil, false
	}
	return o.Principals, true
}

// HasPrincipals returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipals) HasPrincipals() bool {
	if o != nil && !IsNil(o.Principals) {
		return true
	}

	return false
}

// SetPrincipals gets a reference to the given []ActiveDirectoryPrincipal and assigns it to the Principals field.
func (o *ActiveDirectoryPrincipals) SetPrincipals(v []ActiveDirectoryPrincipal) {
	o.Principals = v
}

func (o ActiveDirectoryPrincipals) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryPrincipals) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Principals != nil {
		toSerialize["principals"] = o.Principals
	}
	return toSerialize, nil
}

type NullableActiveDirectoryPrincipals struct {
	value *ActiveDirectoryPrincipals
	isSet bool
}

func (v NullableActiveDirectoryPrincipals) Get() *ActiveDirectoryPrincipals {
	return v.value
}

func (v *NullableActiveDirectoryPrincipals) Set(val *ActiveDirectoryPrincipals) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryPrincipals) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryPrincipals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryPrincipals(val *ActiveDirectoryPrincipals) *NullableActiveDirectoryPrincipals {
	return &NullableActiveDirectoryPrincipals{value: val, isSet: true}
}

func (v NullableActiveDirectoryPrincipals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryPrincipals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


