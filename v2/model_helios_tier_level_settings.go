/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeliosTierLevelSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosTierLevelSettings{}

// HeliosTierLevelSettings Specifies the settings tier levels configured with each archival target. The tier settings need to be applied in specific order and default tier should always be passed as first entry in tiers array. The following example illustrates how to configure tiering input for AWS tiering. Same type of input structure applied to other cloud platforms also. <br>If user wants to achieve following tiering for backup, <br>User Desired Tiering- <br><t>1.Archive Full back up for 12 Months <br><t>2.Tier Levels <br><t><t>[1,12] [ <br><t><t><t>s3 (1 to 2 months), (default tier) <br><t><t><t>s3 Intelligent tiering (3 to 6 months), <br><t><t><t>s3 One Zone (7 to 9 months) <br><t><t><t>Glacier (10 to 12 months)] <br><t>API Input <br><t><t>1.tiers-[ <br><t><t><t>{'tierType': 'S3','moveAfterUnit':'months', <br><t><t><t>'moveAfter':2 - move from s3 to s3Inte after 2 months}, <br><t><t><t>{'tierType': 'S3Inte','moveAfterUnit':'months', <br><t><t><t>'moveAfter':4 - move from S3Inte to Glacier after 4 months}, <br><t><t><t>{'tierType': 'Glacier', 'moveAfterUnit':'months', <br><t><t><t>'moveAfter': 3 - move from Glacier to S3 One Zone after 3 months }, <br><t><t><t>{'tierType': 'S3 One Zone', 'moveAfterUnit': nil, <br><t><t><t>'moveAfter': nil - For the last record, 'moveAfter' and 'moveAfterUnit' <br><t><t><t>will be ignored since there are no further tier for data movement } <br><t><t><t>}]
type HeliosTierLevelSettings struct {
	AwsTiering *HeliosAWSTiers `json:"awsTiering,omitempty"`
	AzureTiering *HeliosAzureTiers `json:"azureTiering,omitempty"`
	// Specifies the cloud platform to enable tiering.
	CloudPlatform NullableString `json:"cloudPlatform"`
	GoogleTiering *HeliosGoogleTiers `json:"googleTiering,omitempty"`
	OracleTiering *HeliosOracleTiers `json:"oracleTiering,omitempty"`
}

type _HeliosTierLevelSettings HeliosTierLevelSettings

// NewHeliosTierLevelSettings instantiates a new HeliosTierLevelSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosTierLevelSettings(cloudPlatform NullableString) *HeliosTierLevelSettings {
	this := HeliosTierLevelSettings{}
	this.CloudPlatform = cloudPlatform
	return &this
}

// NewHeliosTierLevelSettingsWithDefaults instantiates a new HeliosTierLevelSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosTierLevelSettingsWithDefaults() *HeliosTierLevelSettings {
	this := HeliosTierLevelSettings{}
	return &this
}

// GetAwsTiering returns the AwsTiering field value if set, zero value otherwise.
func (o *HeliosTierLevelSettings) GetAwsTiering() HeliosAWSTiers {
	if o == nil || IsNil(o.AwsTiering) {
		var ret HeliosAWSTiers
		return ret
	}
	return *o.AwsTiering
}

// GetAwsTieringOk returns a tuple with the AwsTiering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosTierLevelSettings) GetAwsTieringOk() (*HeliosAWSTiers, bool) {
	if o == nil || IsNil(o.AwsTiering) {
		return nil, false
	}
	return o.AwsTiering, true
}

// HasAwsTiering returns a boolean if a field has been set.
func (o *HeliosTierLevelSettings) HasAwsTiering() bool {
	if o != nil && !IsNil(o.AwsTiering) {
		return true
	}

	return false
}

// SetAwsTiering gets a reference to the given HeliosAWSTiers and assigns it to the AwsTiering field.
func (o *HeliosTierLevelSettings) SetAwsTiering(v HeliosAWSTiers) {
	o.AwsTiering = &v
}

// GetAzureTiering returns the AzureTiering field value if set, zero value otherwise.
func (o *HeliosTierLevelSettings) GetAzureTiering() HeliosAzureTiers {
	if o == nil || IsNil(o.AzureTiering) {
		var ret HeliosAzureTiers
		return ret
	}
	return *o.AzureTiering
}

// GetAzureTieringOk returns a tuple with the AzureTiering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosTierLevelSettings) GetAzureTieringOk() (*HeliosAzureTiers, bool) {
	if o == nil || IsNil(o.AzureTiering) {
		return nil, false
	}
	return o.AzureTiering, true
}

// HasAzureTiering returns a boolean if a field has been set.
func (o *HeliosTierLevelSettings) HasAzureTiering() bool {
	if o != nil && !IsNil(o.AzureTiering) {
		return true
	}

	return false
}

// SetAzureTiering gets a reference to the given HeliosAzureTiers and assigns it to the AzureTiering field.
func (o *HeliosTierLevelSettings) SetAzureTiering(v HeliosAzureTiers) {
	o.AzureTiering = &v
}

// GetCloudPlatform returns the CloudPlatform field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HeliosTierLevelSettings) GetCloudPlatform() string {
	if o == nil || o.CloudPlatform.Get() == nil {
		var ret string
		return ret
	}

	return *o.CloudPlatform.Get()
}

// GetCloudPlatformOk returns a tuple with the CloudPlatform field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTierLevelSettings) GetCloudPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudPlatform.Get(), o.CloudPlatform.IsSet()
}

// SetCloudPlatform sets field value
func (o *HeliosTierLevelSettings) SetCloudPlatform(v string) {
	o.CloudPlatform.Set(&v)
}

// GetGoogleTiering returns the GoogleTiering field value if set, zero value otherwise.
func (o *HeliosTierLevelSettings) GetGoogleTiering() HeliosGoogleTiers {
	if o == nil || IsNil(o.GoogleTiering) {
		var ret HeliosGoogleTiers
		return ret
	}
	return *o.GoogleTiering
}

// GetGoogleTieringOk returns a tuple with the GoogleTiering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosTierLevelSettings) GetGoogleTieringOk() (*HeliosGoogleTiers, bool) {
	if o == nil || IsNil(o.GoogleTiering) {
		return nil, false
	}
	return o.GoogleTiering, true
}

// HasGoogleTiering returns a boolean if a field has been set.
func (o *HeliosTierLevelSettings) HasGoogleTiering() bool {
	if o != nil && !IsNil(o.GoogleTiering) {
		return true
	}

	return false
}

// SetGoogleTiering gets a reference to the given HeliosGoogleTiers and assigns it to the GoogleTiering field.
func (o *HeliosTierLevelSettings) SetGoogleTiering(v HeliosGoogleTiers) {
	o.GoogleTiering = &v
}

// GetOracleTiering returns the OracleTiering field value if set, zero value otherwise.
func (o *HeliosTierLevelSettings) GetOracleTiering() HeliosOracleTiers {
	if o == nil || IsNil(o.OracleTiering) {
		var ret HeliosOracleTiers
		return ret
	}
	return *o.OracleTiering
}

// GetOracleTieringOk returns a tuple with the OracleTiering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosTierLevelSettings) GetOracleTieringOk() (*HeliosOracleTiers, bool) {
	if o == nil || IsNil(o.OracleTiering) {
		return nil, false
	}
	return o.OracleTiering, true
}

// HasOracleTiering returns a boolean if a field has been set.
func (o *HeliosTierLevelSettings) HasOracleTiering() bool {
	if o != nil && !IsNil(o.OracleTiering) {
		return true
	}

	return false
}

// SetOracleTiering gets a reference to the given HeliosOracleTiers and assigns it to the OracleTiering field.
func (o *HeliosTierLevelSettings) SetOracleTiering(v HeliosOracleTiers) {
	o.OracleTiering = &v
}

func (o HeliosTierLevelSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosTierLevelSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsTiering) {
		toSerialize["awsTiering"] = o.AwsTiering
	}
	if !IsNil(o.AzureTiering) {
		toSerialize["azureTiering"] = o.AzureTiering
	}
	toSerialize["cloudPlatform"] = o.CloudPlatform.Get()
	if !IsNil(o.GoogleTiering) {
		toSerialize["googleTiering"] = o.GoogleTiering
	}
	if !IsNil(o.OracleTiering) {
		toSerialize["oracleTiering"] = o.OracleTiering
	}
	return toSerialize, nil
}

func (o *HeliosTierLevelSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudPlatform",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeliosTierLevelSettings := _HeliosTierLevelSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeliosTierLevelSettings)

	if err != nil {
		return err
	}

	*o = HeliosTierLevelSettings(varHeliosTierLevelSettings)

	return err
}

type NullableHeliosTierLevelSettings struct {
	value *HeliosTierLevelSettings
	isSet bool
}

func (v NullableHeliosTierLevelSettings) Get() *HeliosTierLevelSettings {
	return v.value
}

func (v *NullableHeliosTierLevelSettings) Set(val *HeliosTierLevelSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosTierLevelSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosTierLevelSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosTierLevelSettings(val *HeliosTierLevelSettings) *NullableHeliosTierLevelSettings {
	return &NullableHeliosTierLevelSettings{value: val, isSet: true}
}

func (v NullableHeliosTierLevelSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosTierLevelSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


