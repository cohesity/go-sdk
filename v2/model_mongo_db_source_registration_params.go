/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MongoDBSourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MongoDBSourceRegistrationParams{}

// MongoDBSourceRegistrationParams Specifies parameters to register MongoDB source.
type MongoDBSourceRegistrationParams struct {
	// MongoDB authentication type.
	AuthType NullableString `json:"authType"`
	// Authenticating Database for this cluster. Should be set if 'authType' is 'LDAP' or 'SCRAM'.
	AuthenticatingDatabase NullableString `json:"authenticatingDatabase,omitempty"`
	// Specify the MongoS hosts for a sharded cluster and the MongoD hosts for a non-sharded cluster. You can specify a sub-set of the hosts.
	Hosts []string `json:"hosts"`
	// Set to true if connection to MongoDB has to be over SSL.
	IsSslRequired bool `json:"isSslRequired"`
	// Specifies the password for the MongoDB cluster. Should be set if 'authType' is 'LDAP' or 'SCRAM'.
	Password NullableString `json:"password,omitempty"`
	// Specifies the principal name of the MongoDB cluster. Should be set if 'authType' is 'KERBEROS'.
	Principal NullableString `json:"principal,omitempty"`
	// MongoDB Secondary node tag. Required only if 'useSecondaryForBackup' is true.The system will use this to identify the secondary nodes for reading backup data.
	SecondaryNodeTag *string `json:"secondaryNodeTag,omitempty"`
	// Set this to true if you want the system to peform backups from fixed node.
	UseFixedNodeForBackup bool `json:"useFixedNodeForBackup"`
	// Set this to true if you want the system to peform backups from secondary nodes.
	UseSecondaryForBackup bool `json:"useSecondaryForBackup"`
	// Specifies the username of the MongoDB cluster. Should be set if 'authType' is 'LDAP' or 'SCRAM'.
	Username NullableString `json:"username,omitempty"`
}

type _MongoDBSourceRegistrationParams MongoDBSourceRegistrationParams

// NewMongoDBSourceRegistrationParams instantiates a new MongoDBSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDBSourceRegistrationParams(authType NullableString, hosts []string, isSslRequired bool, useFixedNodeForBackup bool, useSecondaryForBackup bool) *MongoDBSourceRegistrationParams {
	this := MongoDBSourceRegistrationParams{}
	this.AuthType = authType
	this.Hosts = hosts
	this.IsSslRequired = isSslRequired
	this.UseFixedNodeForBackup = useFixedNodeForBackup
	this.UseSecondaryForBackup = useSecondaryForBackup
	return &this
}

// NewMongoDBSourceRegistrationParamsWithDefaults instantiates a new MongoDBSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDBSourceRegistrationParamsWithDefaults() *MongoDBSourceRegistrationParams {
	this := MongoDBSourceRegistrationParams{}
	return &this
}

// GetAuthType returns the AuthType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MongoDBSourceRegistrationParams) GetAuthType() string {
	if o == nil || o.AuthType.Get() == nil {
		var ret string
		return ret
	}

	return *o.AuthType.Get()
}

// GetAuthTypeOk returns a tuple with the AuthType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBSourceRegistrationParams) GetAuthTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthType.Get(), o.AuthType.IsSet()
}

// SetAuthType sets field value
func (o *MongoDBSourceRegistrationParams) SetAuthType(v string) {
	o.AuthType.Set(&v)
}

// GetAuthenticatingDatabase returns the AuthenticatingDatabase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBSourceRegistrationParams) GetAuthenticatingDatabase() string {
	if o == nil || IsNil(o.AuthenticatingDatabase.Get()) {
		var ret string
		return ret
	}
	return *o.AuthenticatingDatabase.Get()
}

// GetAuthenticatingDatabaseOk returns a tuple with the AuthenticatingDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBSourceRegistrationParams) GetAuthenticatingDatabaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthenticatingDatabase.Get(), o.AuthenticatingDatabase.IsSet()
}

// HasAuthenticatingDatabase returns a boolean if a field has been set.
func (o *MongoDBSourceRegistrationParams) HasAuthenticatingDatabase() bool {
	if o != nil && o.AuthenticatingDatabase.IsSet() {
		return true
	}

	return false
}

// SetAuthenticatingDatabase gets a reference to the given NullableString and assigns it to the AuthenticatingDatabase field.
func (o *MongoDBSourceRegistrationParams) SetAuthenticatingDatabase(v string) {
	o.AuthenticatingDatabase.Set(&v)
}
// SetAuthenticatingDatabaseNil sets the value for AuthenticatingDatabase to be an explicit nil
func (o *MongoDBSourceRegistrationParams) SetAuthenticatingDatabaseNil() {
	o.AuthenticatingDatabase.Set(nil)
}

// UnsetAuthenticatingDatabase ensures that no value is present for AuthenticatingDatabase, not even an explicit nil
func (o *MongoDBSourceRegistrationParams) UnsetAuthenticatingDatabase() {
	o.AuthenticatingDatabase.Unset()
}

// GetHosts returns the Hosts field value
func (o *MongoDBSourceRegistrationParams) GetHosts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value
// and a boolean to check if the value has been set.
func (o *MongoDBSourceRegistrationParams) GetHostsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hosts, true
}

// SetHosts sets field value
func (o *MongoDBSourceRegistrationParams) SetHosts(v []string) {
	o.Hosts = v
}

// GetIsSslRequired returns the IsSslRequired field value
func (o *MongoDBSourceRegistrationParams) GetIsSslRequired() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsSslRequired
}

// GetIsSslRequiredOk returns a tuple with the IsSslRequired field value
// and a boolean to check if the value has been set.
func (o *MongoDBSourceRegistrationParams) GetIsSslRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsSslRequired, true
}

// SetIsSslRequired sets field value
func (o *MongoDBSourceRegistrationParams) SetIsSslRequired(v bool) {
	o.IsSslRequired = v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBSourceRegistrationParams) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBSourceRegistrationParams) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *MongoDBSourceRegistrationParams) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *MongoDBSourceRegistrationParams) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *MongoDBSourceRegistrationParams) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *MongoDBSourceRegistrationParams) UnsetPassword() {
	o.Password.Unset()
}

// GetPrincipal returns the Principal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBSourceRegistrationParams) GetPrincipal() string {
	if o == nil || IsNil(o.Principal.Get()) {
		var ret string
		return ret
	}
	return *o.Principal.Get()
}

// GetPrincipalOk returns a tuple with the Principal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBSourceRegistrationParams) GetPrincipalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Principal.Get(), o.Principal.IsSet()
}

// HasPrincipal returns a boolean if a field has been set.
func (o *MongoDBSourceRegistrationParams) HasPrincipal() bool {
	if o != nil && o.Principal.IsSet() {
		return true
	}

	return false
}

// SetPrincipal gets a reference to the given NullableString and assigns it to the Principal field.
func (o *MongoDBSourceRegistrationParams) SetPrincipal(v string) {
	o.Principal.Set(&v)
}
// SetPrincipalNil sets the value for Principal to be an explicit nil
func (o *MongoDBSourceRegistrationParams) SetPrincipalNil() {
	o.Principal.Set(nil)
}

// UnsetPrincipal ensures that no value is present for Principal, not even an explicit nil
func (o *MongoDBSourceRegistrationParams) UnsetPrincipal() {
	o.Principal.Unset()
}

// GetSecondaryNodeTag returns the SecondaryNodeTag field value if set, zero value otherwise.
func (o *MongoDBSourceRegistrationParams) GetSecondaryNodeTag() string {
	if o == nil || IsNil(o.SecondaryNodeTag) {
		var ret string
		return ret
	}
	return *o.SecondaryNodeTag
}

// GetSecondaryNodeTagOk returns a tuple with the SecondaryNodeTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MongoDBSourceRegistrationParams) GetSecondaryNodeTagOk() (*string, bool) {
	if o == nil || IsNil(o.SecondaryNodeTag) {
		return nil, false
	}
	return o.SecondaryNodeTag, true
}

// HasSecondaryNodeTag returns a boolean if a field has been set.
func (o *MongoDBSourceRegistrationParams) HasSecondaryNodeTag() bool {
	if o != nil && !IsNil(o.SecondaryNodeTag) {
		return true
	}

	return false
}

// SetSecondaryNodeTag gets a reference to the given string and assigns it to the SecondaryNodeTag field.
func (o *MongoDBSourceRegistrationParams) SetSecondaryNodeTag(v string) {
	o.SecondaryNodeTag = &v
}

// GetUseFixedNodeForBackup returns the UseFixedNodeForBackup field value
func (o *MongoDBSourceRegistrationParams) GetUseFixedNodeForBackup() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseFixedNodeForBackup
}

// GetUseFixedNodeForBackupOk returns a tuple with the UseFixedNodeForBackup field value
// and a boolean to check if the value has been set.
func (o *MongoDBSourceRegistrationParams) GetUseFixedNodeForBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseFixedNodeForBackup, true
}

// SetUseFixedNodeForBackup sets field value
func (o *MongoDBSourceRegistrationParams) SetUseFixedNodeForBackup(v bool) {
	o.UseFixedNodeForBackup = v
}

// GetUseSecondaryForBackup returns the UseSecondaryForBackup field value
func (o *MongoDBSourceRegistrationParams) GetUseSecondaryForBackup() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.UseSecondaryForBackup
}

// GetUseSecondaryForBackupOk returns a tuple with the UseSecondaryForBackup field value
// and a boolean to check if the value has been set.
func (o *MongoDBSourceRegistrationParams) GetUseSecondaryForBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UseSecondaryForBackup, true
}

// SetUseSecondaryForBackup sets field value
func (o *MongoDBSourceRegistrationParams) SetUseSecondaryForBackup(v bool) {
	o.UseSecondaryForBackup = v
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBSourceRegistrationParams) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBSourceRegistrationParams) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *MongoDBSourceRegistrationParams) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *MongoDBSourceRegistrationParams) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *MongoDBSourceRegistrationParams) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *MongoDBSourceRegistrationParams) UnsetUsername() {
	o.Username.Unset()
}

func (o MongoDBSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MongoDBSourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authType"] = o.AuthType.Get()
	if o.AuthenticatingDatabase.IsSet() {
		toSerialize["authenticatingDatabase"] = o.AuthenticatingDatabase.Get()
	}
	toSerialize["hosts"] = o.Hosts
	toSerialize["isSslRequired"] = o.IsSslRequired
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.Principal.IsSet() {
		toSerialize["principal"] = o.Principal.Get()
	}
	if !IsNil(o.SecondaryNodeTag) {
		toSerialize["secondaryNodeTag"] = o.SecondaryNodeTag
	}
	toSerialize["useFixedNodeForBackup"] = o.UseFixedNodeForBackup
	toSerialize["useSecondaryForBackup"] = o.UseSecondaryForBackup
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return toSerialize, nil
}

func (o *MongoDBSourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authType",
		"hosts",
		"isSslRequired",
		"useFixedNodeForBackup",
		"useSecondaryForBackup",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMongoDBSourceRegistrationParams := _MongoDBSourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMongoDBSourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = MongoDBSourceRegistrationParams(varMongoDBSourceRegistrationParams)

	return err
}

type NullableMongoDBSourceRegistrationParams struct {
	value *MongoDBSourceRegistrationParams
	isSet bool
}

func (v NullableMongoDBSourceRegistrationParams) Get() *MongoDBSourceRegistrationParams {
	return v.value
}

func (v *NullableMongoDBSourceRegistrationParams) Set(val *MongoDBSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDBSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDBSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDBSourceRegistrationParams(val *MongoDBSourceRegistrationParams) *NullableMongoDBSourceRegistrationParams {
	return &NullableMongoDBSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableMongoDBSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDBSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


