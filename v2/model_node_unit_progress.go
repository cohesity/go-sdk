/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeUnitProgress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeUnitProgress{}

// NodeUnitProgress Specifies the progress of the patch operation on a node.
type NodeUnitProgress struct {
	// Specifies whether a operation is in progress on the node.
	InProgress NullableBool `json:"inProgress,omitempty"`
	// Specifies the IP address of the node.
	NodeIp NullableString `json:"nodeIp,omitempty"`
	// Specifies a message about the patch operation on the node.
	NodeMessage NullableString `json:"nodeMessage,omitempty"`
	// Specifies the patch level transition of the patch operation. For Apply operation, patch level goes up for each operation. For Revert operation, patch level goes down. Patch level zero is the base level where no patch was applied.
	PatchLevelTransition NullableString `json:"patchLevelTransition,omitempty"`
	// Specifies the percentage of completion of the patch operation on the node.
	Percentage NullableInt64 `json:"percentage,omitempty"`
	// Specifies the time taken so far in this patch unit operation on the node.
	TimeTakenSeconds NullableInt64 `json:"timeTakenSeconds,omitempty"`
}

// NewNodeUnitProgress instantiates a new NodeUnitProgress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeUnitProgress() *NodeUnitProgress {
	this := NodeUnitProgress{}
	return &this
}

// NewNodeUnitProgressWithDefaults instantiates a new NodeUnitProgress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeUnitProgressWithDefaults() *NodeUnitProgress {
	this := NodeUnitProgress{}
	return &this
}

// GetInProgress returns the InProgress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeUnitProgress) GetInProgress() bool {
	if o == nil || IsNil(o.InProgress.Get()) {
		var ret bool
		return ret
	}
	return *o.InProgress.Get()
}

// GetInProgressOk returns a tuple with the InProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeUnitProgress) GetInProgressOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InProgress.Get(), o.InProgress.IsSet()
}

// HasInProgress returns a boolean if a field has been set.
func (o *NodeUnitProgress) HasInProgress() bool {
	if o != nil && o.InProgress.IsSet() {
		return true
	}

	return false
}

// SetInProgress gets a reference to the given NullableBool and assigns it to the InProgress field.
func (o *NodeUnitProgress) SetInProgress(v bool) {
	o.InProgress.Set(&v)
}
// SetInProgressNil sets the value for InProgress to be an explicit nil
func (o *NodeUnitProgress) SetInProgressNil() {
	o.InProgress.Set(nil)
}

// UnsetInProgress ensures that no value is present for InProgress, not even an explicit nil
func (o *NodeUnitProgress) UnsetInProgress() {
	o.InProgress.Unset()
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeUnitProgress) GetNodeIp() string {
	if o == nil || IsNil(o.NodeIp.Get()) {
		var ret string
		return ret
	}
	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeUnitProgress) GetNodeIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// HasNodeIp returns a boolean if a field has been set.
func (o *NodeUnitProgress) HasNodeIp() bool {
	if o != nil && o.NodeIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given NullableString and assigns it to the NodeIp field.
func (o *NodeUnitProgress) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}
// SetNodeIpNil sets the value for NodeIp to be an explicit nil
func (o *NodeUnitProgress) SetNodeIpNil() {
	o.NodeIp.Set(nil)
}

// UnsetNodeIp ensures that no value is present for NodeIp, not even an explicit nil
func (o *NodeUnitProgress) UnsetNodeIp() {
	o.NodeIp.Unset()
}

// GetNodeMessage returns the NodeMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeUnitProgress) GetNodeMessage() string {
	if o == nil || IsNil(o.NodeMessage.Get()) {
		var ret string
		return ret
	}
	return *o.NodeMessage.Get()
}

// GetNodeMessageOk returns a tuple with the NodeMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeUnitProgress) GetNodeMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeMessage.Get(), o.NodeMessage.IsSet()
}

// HasNodeMessage returns a boolean if a field has been set.
func (o *NodeUnitProgress) HasNodeMessage() bool {
	if o != nil && o.NodeMessage.IsSet() {
		return true
	}

	return false
}

// SetNodeMessage gets a reference to the given NullableString and assigns it to the NodeMessage field.
func (o *NodeUnitProgress) SetNodeMessage(v string) {
	o.NodeMessage.Set(&v)
}
// SetNodeMessageNil sets the value for NodeMessage to be an explicit nil
func (o *NodeUnitProgress) SetNodeMessageNil() {
	o.NodeMessage.Set(nil)
}

// UnsetNodeMessage ensures that no value is present for NodeMessage, not even an explicit nil
func (o *NodeUnitProgress) UnsetNodeMessage() {
	o.NodeMessage.Unset()
}

// GetPatchLevelTransition returns the PatchLevelTransition field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeUnitProgress) GetPatchLevelTransition() string {
	if o == nil || IsNil(o.PatchLevelTransition.Get()) {
		var ret string
		return ret
	}
	return *o.PatchLevelTransition.Get()
}

// GetPatchLevelTransitionOk returns a tuple with the PatchLevelTransition field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeUnitProgress) GetPatchLevelTransitionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PatchLevelTransition.Get(), o.PatchLevelTransition.IsSet()
}

// HasPatchLevelTransition returns a boolean if a field has been set.
func (o *NodeUnitProgress) HasPatchLevelTransition() bool {
	if o != nil && o.PatchLevelTransition.IsSet() {
		return true
	}

	return false
}

// SetPatchLevelTransition gets a reference to the given NullableString and assigns it to the PatchLevelTransition field.
func (o *NodeUnitProgress) SetPatchLevelTransition(v string) {
	o.PatchLevelTransition.Set(&v)
}
// SetPatchLevelTransitionNil sets the value for PatchLevelTransition to be an explicit nil
func (o *NodeUnitProgress) SetPatchLevelTransitionNil() {
	o.PatchLevelTransition.Set(nil)
}

// UnsetPatchLevelTransition ensures that no value is present for PatchLevelTransition, not even an explicit nil
func (o *NodeUnitProgress) UnsetPatchLevelTransition() {
	o.PatchLevelTransition.Unset()
}

// GetPercentage returns the Percentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeUnitProgress) GetPercentage() int64 {
	if o == nil || IsNil(o.Percentage.Get()) {
		var ret int64
		return ret
	}
	return *o.Percentage.Get()
}

// GetPercentageOk returns a tuple with the Percentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeUnitProgress) GetPercentageOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Percentage.Get(), o.Percentage.IsSet()
}

// HasPercentage returns a boolean if a field has been set.
func (o *NodeUnitProgress) HasPercentage() bool {
	if o != nil && o.Percentage.IsSet() {
		return true
	}

	return false
}

// SetPercentage gets a reference to the given NullableInt64 and assigns it to the Percentage field.
func (o *NodeUnitProgress) SetPercentage(v int64) {
	o.Percentage.Set(&v)
}
// SetPercentageNil sets the value for Percentage to be an explicit nil
func (o *NodeUnitProgress) SetPercentageNil() {
	o.Percentage.Set(nil)
}

// UnsetPercentage ensures that no value is present for Percentage, not even an explicit nil
func (o *NodeUnitProgress) UnsetPercentage() {
	o.Percentage.Unset()
}

// GetTimeTakenSeconds returns the TimeTakenSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeUnitProgress) GetTimeTakenSeconds() int64 {
	if o == nil || IsNil(o.TimeTakenSeconds.Get()) {
		var ret int64
		return ret
	}
	return *o.TimeTakenSeconds.Get()
}

// GetTimeTakenSecondsOk returns a tuple with the TimeTakenSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeUnitProgress) GetTimeTakenSecondsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeTakenSeconds.Get(), o.TimeTakenSeconds.IsSet()
}

// HasTimeTakenSeconds returns a boolean if a field has been set.
func (o *NodeUnitProgress) HasTimeTakenSeconds() bool {
	if o != nil && o.TimeTakenSeconds.IsSet() {
		return true
	}

	return false
}

// SetTimeTakenSeconds gets a reference to the given NullableInt64 and assigns it to the TimeTakenSeconds field.
func (o *NodeUnitProgress) SetTimeTakenSeconds(v int64) {
	o.TimeTakenSeconds.Set(&v)
}
// SetTimeTakenSecondsNil sets the value for TimeTakenSeconds to be an explicit nil
func (o *NodeUnitProgress) SetTimeTakenSecondsNil() {
	o.TimeTakenSeconds.Set(nil)
}

// UnsetTimeTakenSeconds ensures that no value is present for TimeTakenSeconds, not even an explicit nil
func (o *NodeUnitProgress) UnsetTimeTakenSeconds() {
	o.TimeTakenSeconds.Unset()
}

func (o NodeUnitProgress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeUnitProgress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.InProgress.IsSet() {
		toSerialize["inProgress"] = o.InProgress.Get()
	}
	if o.NodeIp.IsSet() {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	if o.NodeMessage.IsSet() {
		toSerialize["nodeMessage"] = o.NodeMessage.Get()
	}
	if o.PatchLevelTransition.IsSet() {
		toSerialize["patchLevelTransition"] = o.PatchLevelTransition.Get()
	}
	if o.Percentage.IsSet() {
		toSerialize["percentage"] = o.Percentage.Get()
	}
	if o.TimeTakenSeconds.IsSet() {
		toSerialize["timeTakenSeconds"] = o.TimeTakenSeconds.Get()
	}
	return toSerialize, nil
}

type NullableNodeUnitProgress struct {
	value *NodeUnitProgress
	isSet bool
}

func (v NullableNodeUnitProgress) Get() *NodeUnitProgress {
	return v.value
}

func (v *NullableNodeUnitProgress) Set(val *NodeUnitProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeUnitProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeUnitProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeUnitProgress(val *NodeUnitProgress) *NullableNodeUnitProgress {
	return &NullableNodeUnitProgress{value: val, isSet: true}
}

func (v NullableNodeUnitProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeUnitProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


