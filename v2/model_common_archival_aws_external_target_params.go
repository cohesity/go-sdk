/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonArchivalAwsExternalTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonArchivalAwsExternalTargetParams{}

// CommonArchivalAwsExternalTargetParams Specifies the common parameters which are specific to AWS related External Targets of archival purpose type.
type CommonArchivalAwsExternalTargetParams struct {
	// Specifies bucket name of the External Target.
	BucketName NullableString `json:"bucketName"`
	// Specifies region of the External Target.
	Region NullableString `json:"region"`
	// Specifies the account Id of the S3 bucket owner.
	BucketOwnerAccountId NullableString `json:"bucketOwnerAccountId,omitempty"`
	// Specifies if Forever Incremental Archival setting is enabled or not.
	IsForeverIncrementalArchivalEnabled NullableBool `json:"isForeverIncrementalArchivalEnabled,omitempty"`
	// Specifies if Incremental Archival setting is enabled or not.
	IsIncrementalArchivalEnabled NullableBool `json:"isIncrementalArchivalEnabled,omitempty"`
	// Specifies the Source Side Deduplication setting for the AWS external target
	SourceSideDeduplication NullableBool `json:"sourceSideDeduplication,omitempty"`
	// Specifies the AWS External Target storage class.
	StorageClass NullableString `json:"storageClass"`
}

type _CommonArchivalAwsExternalTargetParams CommonArchivalAwsExternalTargetParams

// NewCommonArchivalAwsExternalTargetParams instantiates a new CommonArchivalAwsExternalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonArchivalAwsExternalTargetParams(bucketName NullableString, region NullableString, storageClass NullableString) *CommonArchivalAwsExternalTargetParams {
	this := CommonArchivalAwsExternalTargetParams{}
	this.BucketName = bucketName
	this.Region = region
	this.StorageClass = storageClass
	return &this
}

// NewCommonArchivalAwsExternalTargetParamsWithDefaults instantiates a new CommonArchivalAwsExternalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonArchivalAwsExternalTargetParamsWithDefaults() *CommonArchivalAwsExternalTargetParams {
	this := CommonArchivalAwsExternalTargetParams{}
	return &this
}

// GetBucketName returns the BucketName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonArchivalAwsExternalTargetParams) GetBucketName() string {
	if o == nil || o.BucketName.Get() == nil {
		var ret string
		return ret
	}

	return *o.BucketName.Get()
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonArchivalAwsExternalTargetParams) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BucketName.Get(), o.BucketName.IsSet()
}

// SetBucketName sets field value
func (o *CommonArchivalAwsExternalTargetParams) SetBucketName(v string) {
	o.BucketName.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonArchivalAwsExternalTargetParams) GetRegion() string {
	if o == nil || o.Region.Get() == nil {
		var ret string
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonArchivalAwsExternalTargetParams) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *CommonArchivalAwsExternalTargetParams) SetRegion(v string) {
	o.Region.Set(&v)
}

// GetBucketOwnerAccountId returns the BucketOwnerAccountId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonArchivalAwsExternalTargetParams) GetBucketOwnerAccountId() string {
	if o == nil || IsNil(o.BucketOwnerAccountId.Get()) {
		var ret string
		return ret
	}
	return *o.BucketOwnerAccountId.Get()
}

// GetBucketOwnerAccountIdOk returns a tuple with the BucketOwnerAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonArchivalAwsExternalTargetParams) GetBucketOwnerAccountIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BucketOwnerAccountId.Get(), o.BucketOwnerAccountId.IsSet()
}

// HasBucketOwnerAccountId returns a boolean if a field has been set.
func (o *CommonArchivalAwsExternalTargetParams) HasBucketOwnerAccountId() bool {
	if o != nil && o.BucketOwnerAccountId.IsSet() {
		return true
	}

	return false
}

// SetBucketOwnerAccountId gets a reference to the given NullableString and assigns it to the BucketOwnerAccountId field.
func (o *CommonArchivalAwsExternalTargetParams) SetBucketOwnerAccountId(v string) {
	o.BucketOwnerAccountId.Set(&v)
}
// SetBucketOwnerAccountIdNil sets the value for BucketOwnerAccountId to be an explicit nil
func (o *CommonArchivalAwsExternalTargetParams) SetBucketOwnerAccountIdNil() {
	o.BucketOwnerAccountId.Set(nil)
}

// UnsetBucketOwnerAccountId ensures that no value is present for BucketOwnerAccountId, not even an explicit nil
func (o *CommonArchivalAwsExternalTargetParams) UnsetBucketOwnerAccountId() {
	o.BucketOwnerAccountId.Unset()
}

// GetIsForeverIncrementalArchivalEnabled returns the IsForeverIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonArchivalAwsExternalTargetParams) GetIsForeverIncrementalArchivalEnabled() bool {
	if o == nil || IsNil(o.IsForeverIncrementalArchivalEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsForeverIncrementalArchivalEnabled.Get()
}

// GetIsForeverIncrementalArchivalEnabledOk returns a tuple with the IsForeverIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonArchivalAwsExternalTargetParams) GetIsForeverIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsForeverIncrementalArchivalEnabled.Get(), o.IsForeverIncrementalArchivalEnabled.IsSet()
}

// HasIsForeverIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *CommonArchivalAwsExternalTargetParams) HasIsForeverIncrementalArchivalEnabled() bool {
	if o != nil && o.IsForeverIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsForeverIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsForeverIncrementalArchivalEnabled field.
func (o *CommonArchivalAwsExternalTargetParams) SetIsForeverIncrementalArchivalEnabled(v bool) {
	o.IsForeverIncrementalArchivalEnabled.Set(&v)
}
// SetIsForeverIncrementalArchivalEnabledNil sets the value for IsForeverIncrementalArchivalEnabled to be an explicit nil
func (o *CommonArchivalAwsExternalTargetParams) SetIsForeverIncrementalArchivalEnabledNil() {
	o.IsForeverIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsForeverIncrementalArchivalEnabled ensures that no value is present for IsForeverIncrementalArchivalEnabled, not even an explicit nil
func (o *CommonArchivalAwsExternalTargetParams) UnsetIsForeverIncrementalArchivalEnabled() {
	o.IsForeverIncrementalArchivalEnabled.Unset()
}

// GetIsIncrementalArchivalEnabled returns the IsIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonArchivalAwsExternalTargetParams) GetIsIncrementalArchivalEnabled() bool {
	if o == nil || IsNil(o.IsIncrementalArchivalEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsIncrementalArchivalEnabled.Get()
}

// GetIsIncrementalArchivalEnabledOk returns a tuple with the IsIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonArchivalAwsExternalTargetParams) GetIsIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsIncrementalArchivalEnabled.Get(), o.IsIncrementalArchivalEnabled.IsSet()
}

// HasIsIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *CommonArchivalAwsExternalTargetParams) HasIsIncrementalArchivalEnabled() bool {
	if o != nil && o.IsIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsIncrementalArchivalEnabled field.
func (o *CommonArchivalAwsExternalTargetParams) SetIsIncrementalArchivalEnabled(v bool) {
	o.IsIncrementalArchivalEnabled.Set(&v)
}
// SetIsIncrementalArchivalEnabledNil sets the value for IsIncrementalArchivalEnabled to be an explicit nil
func (o *CommonArchivalAwsExternalTargetParams) SetIsIncrementalArchivalEnabledNil() {
	o.IsIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsIncrementalArchivalEnabled ensures that no value is present for IsIncrementalArchivalEnabled, not even an explicit nil
func (o *CommonArchivalAwsExternalTargetParams) UnsetIsIncrementalArchivalEnabled() {
	o.IsIncrementalArchivalEnabled.Unset()
}

// GetSourceSideDeduplication returns the SourceSideDeduplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonArchivalAwsExternalTargetParams) GetSourceSideDeduplication() bool {
	if o == nil || IsNil(o.SourceSideDeduplication.Get()) {
		var ret bool
		return ret
	}
	return *o.SourceSideDeduplication.Get()
}

// GetSourceSideDeduplicationOk returns a tuple with the SourceSideDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonArchivalAwsExternalTargetParams) GetSourceSideDeduplicationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceSideDeduplication.Get(), o.SourceSideDeduplication.IsSet()
}

// HasSourceSideDeduplication returns a boolean if a field has been set.
func (o *CommonArchivalAwsExternalTargetParams) HasSourceSideDeduplication() bool {
	if o != nil && o.SourceSideDeduplication.IsSet() {
		return true
	}

	return false
}

// SetSourceSideDeduplication gets a reference to the given NullableBool and assigns it to the SourceSideDeduplication field.
func (o *CommonArchivalAwsExternalTargetParams) SetSourceSideDeduplication(v bool) {
	o.SourceSideDeduplication.Set(&v)
}
// SetSourceSideDeduplicationNil sets the value for SourceSideDeduplication to be an explicit nil
func (o *CommonArchivalAwsExternalTargetParams) SetSourceSideDeduplicationNil() {
	o.SourceSideDeduplication.Set(nil)
}

// UnsetSourceSideDeduplication ensures that no value is present for SourceSideDeduplication, not even an explicit nil
func (o *CommonArchivalAwsExternalTargetParams) UnsetSourceSideDeduplication() {
	o.SourceSideDeduplication.Unset()
}

// GetStorageClass returns the StorageClass field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonArchivalAwsExternalTargetParams) GetStorageClass() string {
	if o == nil || o.StorageClass.Get() == nil {
		var ret string
		return ret
	}

	return *o.StorageClass.Get()
}

// GetStorageClassOk returns a tuple with the StorageClass field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonArchivalAwsExternalTargetParams) GetStorageClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageClass.Get(), o.StorageClass.IsSet()
}

// SetStorageClass sets field value
func (o *CommonArchivalAwsExternalTargetParams) SetStorageClass(v string) {
	o.StorageClass.Set(&v)
}

func (o CommonArchivalAwsExternalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonArchivalAwsExternalTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucketName"] = o.BucketName.Get()
	toSerialize["region"] = o.Region.Get()
	if o.BucketOwnerAccountId.IsSet() {
		toSerialize["bucketOwnerAccountId"] = o.BucketOwnerAccountId.Get()
	}
	if o.IsForeverIncrementalArchivalEnabled.IsSet() {
		toSerialize["isForeverIncrementalArchivalEnabled"] = o.IsForeverIncrementalArchivalEnabled.Get()
	}
	if o.IsIncrementalArchivalEnabled.IsSet() {
		toSerialize["isIncrementalArchivalEnabled"] = o.IsIncrementalArchivalEnabled.Get()
	}
	if o.SourceSideDeduplication.IsSet() {
		toSerialize["sourceSideDeduplication"] = o.SourceSideDeduplication.Get()
	}
	toSerialize["storageClass"] = o.StorageClass.Get()
	return toSerialize, nil
}

func (o *CommonArchivalAwsExternalTargetParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucketName",
		"region",
		"storageClass",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonArchivalAwsExternalTargetParams := _CommonArchivalAwsExternalTargetParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonArchivalAwsExternalTargetParams)

	if err != nil {
		return err
	}

	*o = CommonArchivalAwsExternalTargetParams(varCommonArchivalAwsExternalTargetParams)

	return err
}

type NullableCommonArchivalAwsExternalTargetParams struct {
	value *CommonArchivalAwsExternalTargetParams
	isSet bool
}

func (v NullableCommonArchivalAwsExternalTargetParams) Get() *CommonArchivalAwsExternalTargetParams {
	return v.value
}

func (v *NullableCommonArchivalAwsExternalTargetParams) Set(val *CommonArchivalAwsExternalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonArchivalAwsExternalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonArchivalAwsExternalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonArchivalAwsExternalTargetParams(val *CommonArchivalAwsExternalTargetParams) *NullableCommonArchivalAwsExternalTargetParams {
	return &NullableCommonArchivalAwsExternalTargetParams{value: val, isSet: true}
}

func (v NullableCommonArchivalAwsExternalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonArchivalAwsExternalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


