/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DownloadFilesAndFoldersRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DownloadFilesAndFoldersRequestParams{}

// DownloadFilesAndFoldersRequestParams Specifies the parameters to create a download files and folders Recovery.
type DownloadFilesAndFoldersRequestParams struct {
	// Specifies the list of documents to download using item ids. Only one of filesAndFolders or documents should be used. Currently only files are supported by documents.
	Documents []DocumentObject `json:"documents,omitempty"`
	// Specifies the list of files and folders to download. Only one of filesAndFolders or documents should be used.
	FilesAndFolders []FilesAndFoldersObject `json:"filesAndFolders,omitempty"`
	// Specifies the glacier retrieval type when restoring or downloding files or folders from a Glacier-based cloud snapshot.
	GlacierRetrievalType NullableString `json:"glacierRetrievalType,omitempty"`
	// Specifies the name of the recovery task. This field must be set and must be a unique name.
	Name NullableString `json:"name"`
	Object CommonRecoverObjectSnapshotParams `json:"object"`
	// If current recovery is child task triggered through another parent recovery operation, then this field will specify the id of the parent recovery.
	ParentRecoveryId NullableString `json:"parentRecoveryId,omitempty" validate:"regexp=^\\\\d+:\\\\d+:\\\\d+$"`
}

type _DownloadFilesAndFoldersRequestParams DownloadFilesAndFoldersRequestParams

// NewDownloadFilesAndFoldersRequestParams instantiates a new DownloadFilesAndFoldersRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownloadFilesAndFoldersRequestParams(name NullableString, object CommonRecoverObjectSnapshotParams) *DownloadFilesAndFoldersRequestParams {
	this := DownloadFilesAndFoldersRequestParams{}
	this.Name = name
	this.Object = object
	return &this
}

// NewDownloadFilesAndFoldersRequestParamsWithDefaults instantiates a new DownloadFilesAndFoldersRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownloadFilesAndFoldersRequestParamsWithDefaults() *DownloadFilesAndFoldersRequestParams {
	this := DownloadFilesAndFoldersRequestParams{}
	return &this
}

// GetDocuments returns the Documents field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DownloadFilesAndFoldersRequestParams) GetDocuments() []DocumentObject {
	if o == nil {
		var ret []DocumentObject
		return ret
	}
	return o.Documents
}

// GetDocumentsOk returns a tuple with the Documents field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DownloadFilesAndFoldersRequestParams) GetDocumentsOk() ([]DocumentObject, bool) {
	if o == nil || IsNil(o.Documents) {
		return nil, false
	}
	return o.Documents, true
}

// HasDocuments returns a boolean if a field has been set.
func (o *DownloadFilesAndFoldersRequestParams) HasDocuments() bool {
	if o != nil && !IsNil(o.Documents) {
		return true
	}

	return false
}

// SetDocuments gets a reference to the given []DocumentObject and assigns it to the Documents field.
func (o *DownloadFilesAndFoldersRequestParams) SetDocuments(v []DocumentObject) {
	o.Documents = v
}

// GetFilesAndFolders returns the FilesAndFolders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DownloadFilesAndFoldersRequestParams) GetFilesAndFolders() []FilesAndFoldersObject {
	if o == nil {
		var ret []FilesAndFoldersObject
		return ret
	}
	return o.FilesAndFolders
}

// GetFilesAndFoldersOk returns a tuple with the FilesAndFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DownloadFilesAndFoldersRequestParams) GetFilesAndFoldersOk() ([]FilesAndFoldersObject, bool) {
	if o == nil || IsNil(o.FilesAndFolders) {
		return nil, false
	}
	return o.FilesAndFolders, true
}

// HasFilesAndFolders returns a boolean if a field has been set.
func (o *DownloadFilesAndFoldersRequestParams) HasFilesAndFolders() bool {
	if o != nil && !IsNil(o.FilesAndFolders) {
		return true
	}

	return false
}

// SetFilesAndFolders gets a reference to the given []FilesAndFoldersObject and assigns it to the FilesAndFolders field.
func (o *DownloadFilesAndFoldersRequestParams) SetFilesAndFolders(v []FilesAndFoldersObject) {
	o.FilesAndFolders = v
}

// GetGlacierRetrievalType returns the GlacierRetrievalType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DownloadFilesAndFoldersRequestParams) GetGlacierRetrievalType() string {
	if o == nil || IsNil(o.GlacierRetrievalType.Get()) {
		var ret string
		return ret
	}
	return *o.GlacierRetrievalType.Get()
}

// GetGlacierRetrievalTypeOk returns a tuple with the GlacierRetrievalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DownloadFilesAndFoldersRequestParams) GetGlacierRetrievalTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlacierRetrievalType.Get(), o.GlacierRetrievalType.IsSet()
}

// HasGlacierRetrievalType returns a boolean if a field has been set.
func (o *DownloadFilesAndFoldersRequestParams) HasGlacierRetrievalType() bool {
	if o != nil && o.GlacierRetrievalType.IsSet() {
		return true
	}

	return false
}

// SetGlacierRetrievalType gets a reference to the given NullableString and assigns it to the GlacierRetrievalType field.
func (o *DownloadFilesAndFoldersRequestParams) SetGlacierRetrievalType(v string) {
	o.GlacierRetrievalType.Set(&v)
}
// SetGlacierRetrievalTypeNil sets the value for GlacierRetrievalType to be an explicit nil
func (o *DownloadFilesAndFoldersRequestParams) SetGlacierRetrievalTypeNil() {
	o.GlacierRetrievalType.Set(nil)
}

// UnsetGlacierRetrievalType ensures that no value is present for GlacierRetrievalType, not even an explicit nil
func (o *DownloadFilesAndFoldersRequestParams) UnsetGlacierRetrievalType() {
	o.GlacierRetrievalType.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DownloadFilesAndFoldersRequestParams) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DownloadFilesAndFoldersRequestParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *DownloadFilesAndFoldersRequestParams) SetName(v string) {
	o.Name.Set(&v)
}

// GetObject returns the Object field value
func (o *DownloadFilesAndFoldersRequestParams) GetObject() CommonRecoverObjectSnapshotParams {
	if o == nil {
		var ret CommonRecoverObjectSnapshotParams
		return ret
	}

	return o.Object
}

// GetObjectOk returns a tuple with the Object field value
// and a boolean to check if the value has been set.
func (o *DownloadFilesAndFoldersRequestParams) GetObjectOk() (*CommonRecoverObjectSnapshotParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Object, true
}

// SetObject sets field value
func (o *DownloadFilesAndFoldersRequestParams) SetObject(v CommonRecoverObjectSnapshotParams) {
	o.Object = v
}

// GetParentRecoveryId returns the ParentRecoveryId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DownloadFilesAndFoldersRequestParams) GetParentRecoveryId() string {
	if o == nil || IsNil(o.ParentRecoveryId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentRecoveryId.Get()
}

// GetParentRecoveryIdOk returns a tuple with the ParentRecoveryId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DownloadFilesAndFoldersRequestParams) GetParentRecoveryIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentRecoveryId.Get(), o.ParentRecoveryId.IsSet()
}

// HasParentRecoveryId returns a boolean if a field has been set.
func (o *DownloadFilesAndFoldersRequestParams) HasParentRecoveryId() bool {
	if o != nil && o.ParentRecoveryId.IsSet() {
		return true
	}

	return false
}

// SetParentRecoveryId gets a reference to the given NullableString and assigns it to the ParentRecoveryId field.
func (o *DownloadFilesAndFoldersRequestParams) SetParentRecoveryId(v string) {
	o.ParentRecoveryId.Set(&v)
}
// SetParentRecoveryIdNil sets the value for ParentRecoveryId to be an explicit nil
func (o *DownloadFilesAndFoldersRequestParams) SetParentRecoveryIdNil() {
	o.ParentRecoveryId.Set(nil)
}

// UnsetParentRecoveryId ensures that no value is present for ParentRecoveryId, not even an explicit nil
func (o *DownloadFilesAndFoldersRequestParams) UnsetParentRecoveryId() {
	o.ParentRecoveryId.Unset()
}

func (o DownloadFilesAndFoldersRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DownloadFilesAndFoldersRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Documents != nil {
		toSerialize["documents"] = o.Documents
	}
	if o.FilesAndFolders != nil {
		toSerialize["filesAndFolders"] = o.FilesAndFolders
	}
	if o.GlacierRetrievalType.IsSet() {
		toSerialize["glacierRetrievalType"] = o.GlacierRetrievalType.Get()
	}
	toSerialize["name"] = o.Name.Get()
	toSerialize["object"] = o.Object
	if o.ParentRecoveryId.IsSet() {
		toSerialize["parentRecoveryId"] = o.ParentRecoveryId.Get()
	}
	return toSerialize, nil
}

func (o *DownloadFilesAndFoldersRequestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"object",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDownloadFilesAndFoldersRequestParams := _DownloadFilesAndFoldersRequestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDownloadFilesAndFoldersRequestParams)

	if err != nil {
		return err
	}

	*o = DownloadFilesAndFoldersRequestParams(varDownloadFilesAndFoldersRequestParams)

	return err
}

type NullableDownloadFilesAndFoldersRequestParams struct {
	value *DownloadFilesAndFoldersRequestParams
	isSet bool
}

func (v NullableDownloadFilesAndFoldersRequestParams) Get() *DownloadFilesAndFoldersRequestParams {
	return v.value
}

func (v *NullableDownloadFilesAndFoldersRequestParams) Set(val *DownloadFilesAndFoldersRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDownloadFilesAndFoldersRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDownloadFilesAndFoldersRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownloadFilesAndFoldersRequestParams(val *DownloadFilesAndFoldersRequestParams) *NullableDownloadFilesAndFoldersRequestParams {
	return &NullableDownloadFilesAndFoldersRequestParams{value: val, isSet: true}
}

func (v NullableDownloadFilesAndFoldersRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownloadFilesAndFoldersRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


