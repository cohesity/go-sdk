/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverAwsParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverAwsParams{}

// RecoverAwsParams Specifies the recovery options specific to AWS environment.
type RecoverAwsParams struct {
	DownloadFileAndFolderParams NullableRecoverAwsParamsDownloadFileAndFolderParams `json:"downloadFileAndFolderParams,omitempty"`
	// Specifies the list of recover Object parameters. This property is mandatory for all recovery action types except recover vms. While recovering VMs, a user can specify snapshots of VM's or a Protection Group Run details to recover all the VM's that are backed up by that Run. For recovering files, specifies the object contains the file to recover.
	Objects []CommonRecoverObjectSnapshotParams `json:"objects,omitempty"`
	RecoverAuroraParams NullableRecoverAwsParamsRecoverAuroraParams `json:"recoverAuroraParams,omitempty"`
	RecoverFileAndFolderParams NullableRecoverAwsParamsRecoverFileAndFolderParams `json:"recoverFileAndFolderParams,omitempty"`
	RecoverRdsIngestParams NullableRecoverAwsParamsRecoverRdsIngestParams `json:"recoverRdsIngestParams,omitempty"`
	RecoverRdsParams NullableRecoverAwsParamsRecoverRdsParams `json:"recoverRdsParams,omitempty"`
	RecoverS3BucketParams NullableRecoverAwsParamsRecoverS3BucketParams `json:"recoverS3BucketParams,omitempty"`
	RecoverVmParams NullableRecoverAwsParamsRecoverVmParams `json:"recoverVmParams,omitempty"`
	// Specifies the type of recover action to be performed.
	RecoveryAction string `json:"recoveryAction"`
}

type _RecoverAwsParams RecoverAwsParams

// NewRecoverAwsParams instantiates a new RecoverAwsParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAwsParams(recoveryAction string) *RecoverAwsParams {
	this := RecoverAwsParams{}
	this.RecoveryAction = recoveryAction
	return &this
}

// NewRecoverAwsParamsWithDefaults instantiates a new RecoverAwsParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAwsParamsWithDefaults() *RecoverAwsParams {
	this := RecoverAwsParams{}
	return &this
}

// GetDownloadFileAndFolderParams returns the DownloadFileAndFolderParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParams) GetDownloadFileAndFolderParams() RecoverAwsParamsDownloadFileAndFolderParams {
	if o == nil || IsNil(o.DownloadFileAndFolderParams.Get()) {
		var ret RecoverAwsParamsDownloadFileAndFolderParams
		return ret
	}
	return *o.DownloadFileAndFolderParams.Get()
}

// GetDownloadFileAndFolderParamsOk returns a tuple with the DownloadFileAndFolderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParams) GetDownloadFileAndFolderParamsOk() (*RecoverAwsParamsDownloadFileAndFolderParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadFileAndFolderParams.Get(), o.DownloadFileAndFolderParams.IsSet()
}

// HasDownloadFileAndFolderParams returns a boolean if a field has been set.
func (o *RecoverAwsParams) HasDownloadFileAndFolderParams() bool {
	if o != nil && o.DownloadFileAndFolderParams.IsSet() {
		return true
	}

	return false
}

// SetDownloadFileAndFolderParams gets a reference to the given NullableRecoverAwsParamsDownloadFileAndFolderParams and assigns it to the DownloadFileAndFolderParams field.
func (o *RecoverAwsParams) SetDownloadFileAndFolderParams(v RecoverAwsParamsDownloadFileAndFolderParams) {
	o.DownloadFileAndFolderParams.Set(&v)
}
// SetDownloadFileAndFolderParamsNil sets the value for DownloadFileAndFolderParams to be an explicit nil
func (o *RecoverAwsParams) SetDownloadFileAndFolderParamsNil() {
	o.DownloadFileAndFolderParams.Set(nil)
}

// UnsetDownloadFileAndFolderParams ensures that no value is present for DownloadFileAndFolderParams, not even an explicit nil
func (o *RecoverAwsParams) UnsetDownloadFileAndFolderParams() {
	o.DownloadFileAndFolderParams.Unset()
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParams) GetObjects() []CommonRecoverObjectSnapshotParams {
	if o == nil {
		var ret []CommonRecoverObjectSnapshotParams
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParams) GetObjectsOk() ([]CommonRecoverObjectSnapshotParams, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *RecoverAwsParams) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []CommonRecoverObjectSnapshotParams and assigns it to the Objects field.
func (o *RecoverAwsParams) SetObjects(v []CommonRecoverObjectSnapshotParams) {
	o.Objects = v
}

// GetRecoverAuroraParams returns the RecoverAuroraParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParams) GetRecoverAuroraParams() RecoverAwsParamsRecoverAuroraParams {
	if o == nil || IsNil(o.RecoverAuroraParams.Get()) {
		var ret RecoverAwsParamsRecoverAuroraParams
		return ret
	}
	return *o.RecoverAuroraParams.Get()
}

// GetRecoverAuroraParamsOk returns a tuple with the RecoverAuroraParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParams) GetRecoverAuroraParamsOk() (*RecoverAwsParamsRecoverAuroraParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverAuroraParams.Get(), o.RecoverAuroraParams.IsSet()
}

// HasRecoverAuroraParams returns a boolean if a field has been set.
func (o *RecoverAwsParams) HasRecoverAuroraParams() bool {
	if o != nil && o.RecoverAuroraParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverAuroraParams gets a reference to the given NullableRecoverAwsParamsRecoverAuroraParams and assigns it to the RecoverAuroraParams field.
func (o *RecoverAwsParams) SetRecoverAuroraParams(v RecoverAwsParamsRecoverAuroraParams) {
	o.RecoverAuroraParams.Set(&v)
}
// SetRecoverAuroraParamsNil sets the value for RecoverAuroraParams to be an explicit nil
func (o *RecoverAwsParams) SetRecoverAuroraParamsNil() {
	o.RecoverAuroraParams.Set(nil)
}

// UnsetRecoverAuroraParams ensures that no value is present for RecoverAuroraParams, not even an explicit nil
func (o *RecoverAwsParams) UnsetRecoverAuroraParams() {
	o.RecoverAuroraParams.Unset()
}

// GetRecoverFileAndFolderParams returns the RecoverFileAndFolderParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParams) GetRecoverFileAndFolderParams() RecoverAwsParamsRecoverFileAndFolderParams {
	if o == nil || IsNil(o.RecoverFileAndFolderParams.Get()) {
		var ret RecoverAwsParamsRecoverFileAndFolderParams
		return ret
	}
	return *o.RecoverFileAndFolderParams.Get()
}

// GetRecoverFileAndFolderParamsOk returns a tuple with the RecoverFileAndFolderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParams) GetRecoverFileAndFolderParamsOk() (*RecoverAwsParamsRecoverFileAndFolderParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverFileAndFolderParams.Get(), o.RecoverFileAndFolderParams.IsSet()
}

// HasRecoverFileAndFolderParams returns a boolean if a field has been set.
func (o *RecoverAwsParams) HasRecoverFileAndFolderParams() bool {
	if o != nil && o.RecoverFileAndFolderParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverFileAndFolderParams gets a reference to the given NullableRecoverAwsParamsRecoverFileAndFolderParams and assigns it to the RecoverFileAndFolderParams field.
func (o *RecoverAwsParams) SetRecoverFileAndFolderParams(v RecoverAwsParamsRecoverFileAndFolderParams) {
	o.RecoverFileAndFolderParams.Set(&v)
}
// SetRecoverFileAndFolderParamsNil sets the value for RecoverFileAndFolderParams to be an explicit nil
func (o *RecoverAwsParams) SetRecoverFileAndFolderParamsNil() {
	o.RecoverFileAndFolderParams.Set(nil)
}

// UnsetRecoverFileAndFolderParams ensures that no value is present for RecoverFileAndFolderParams, not even an explicit nil
func (o *RecoverAwsParams) UnsetRecoverFileAndFolderParams() {
	o.RecoverFileAndFolderParams.Unset()
}

// GetRecoverRdsIngestParams returns the RecoverRdsIngestParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParams) GetRecoverRdsIngestParams() RecoverAwsParamsRecoverRdsIngestParams {
	if o == nil || IsNil(o.RecoverRdsIngestParams.Get()) {
		var ret RecoverAwsParamsRecoverRdsIngestParams
		return ret
	}
	return *o.RecoverRdsIngestParams.Get()
}

// GetRecoverRdsIngestParamsOk returns a tuple with the RecoverRdsIngestParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParams) GetRecoverRdsIngestParamsOk() (*RecoverAwsParamsRecoverRdsIngestParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverRdsIngestParams.Get(), o.RecoverRdsIngestParams.IsSet()
}

// HasRecoverRdsIngestParams returns a boolean if a field has been set.
func (o *RecoverAwsParams) HasRecoverRdsIngestParams() bool {
	if o != nil && o.RecoverRdsIngestParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverRdsIngestParams gets a reference to the given NullableRecoverAwsParamsRecoverRdsIngestParams and assigns it to the RecoverRdsIngestParams field.
func (o *RecoverAwsParams) SetRecoverRdsIngestParams(v RecoverAwsParamsRecoverRdsIngestParams) {
	o.RecoverRdsIngestParams.Set(&v)
}
// SetRecoverRdsIngestParamsNil sets the value for RecoverRdsIngestParams to be an explicit nil
func (o *RecoverAwsParams) SetRecoverRdsIngestParamsNil() {
	o.RecoverRdsIngestParams.Set(nil)
}

// UnsetRecoverRdsIngestParams ensures that no value is present for RecoverRdsIngestParams, not even an explicit nil
func (o *RecoverAwsParams) UnsetRecoverRdsIngestParams() {
	o.RecoverRdsIngestParams.Unset()
}

// GetRecoverRdsParams returns the RecoverRdsParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParams) GetRecoverRdsParams() RecoverAwsParamsRecoverRdsParams {
	if o == nil || IsNil(o.RecoverRdsParams.Get()) {
		var ret RecoverAwsParamsRecoverRdsParams
		return ret
	}
	return *o.RecoverRdsParams.Get()
}

// GetRecoverRdsParamsOk returns a tuple with the RecoverRdsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParams) GetRecoverRdsParamsOk() (*RecoverAwsParamsRecoverRdsParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverRdsParams.Get(), o.RecoverRdsParams.IsSet()
}

// HasRecoverRdsParams returns a boolean if a field has been set.
func (o *RecoverAwsParams) HasRecoverRdsParams() bool {
	if o != nil && o.RecoverRdsParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverRdsParams gets a reference to the given NullableRecoverAwsParamsRecoverRdsParams and assigns it to the RecoverRdsParams field.
func (o *RecoverAwsParams) SetRecoverRdsParams(v RecoverAwsParamsRecoverRdsParams) {
	o.RecoverRdsParams.Set(&v)
}
// SetRecoverRdsParamsNil sets the value for RecoverRdsParams to be an explicit nil
func (o *RecoverAwsParams) SetRecoverRdsParamsNil() {
	o.RecoverRdsParams.Set(nil)
}

// UnsetRecoverRdsParams ensures that no value is present for RecoverRdsParams, not even an explicit nil
func (o *RecoverAwsParams) UnsetRecoverRdsParams() {
	o.RecoverRdsParams.Unset()
}

// GetRecoverS3BucketParams returns the RecoverS3BucketParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParams) GetRecoverS3BucketParams() RecoverAwsParamsRecoverS3BucketParams {
	if o == nil || IsNil(o.RecoverS3BucketParams.Get()) {
		var ret RecoverAwsParamsRecoverS3BucketParams
		return ret
	}
	return *o.RecoverS3BucketParams.Get()
}

// GetRecoverS3BucketParamsOk returns a tuple with the RecoverS3BucketParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParams) GetRecoverS3BucketParamsOk() (*RecoverAwsParamsRecoverS3BucketParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverS3BucketParams.Get(), o.RecoverS3BucketParams.IsSet()
}

// HasRecoverS3BucketParams returns a boolean if a field has been set.
func (o *RecoverAwsParams) HasRecoverS3BucketParams() bool {
	if o != nil && o.RecoverS3BucketParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverS3BucketParams gets a reference to the given NullableRecoverAwsParamsRecoverS3BucketParams and assigns it to the RecoverS3BucketParams field.
func (o *RecoverAwsParams) SetRecoverS3BucketParams(v RecoverAwsParamsRecoverS3BucketParams) {
	o.RecoverS3BucketParams.Set(&v)
}
// SetRecoverS3BucketParamsNil sets the value for RecoverS3BucketParams to be an explicit nil
func (o *RecoverAwsParams) SetRecoverS3BucketParamsNil() {
	o.RecoverS3BucketParams.Set(nil)
}

// UnsetRecoverS3BucketParams ensures that no value is present for RecoverS3BucketParams, not even an explicit nil
func (o *RecoverAwsParams) UnsetRecoverS3BucketParams() {
	o.RecoverS3BucketParams.Unset()
}

// GetRecoverVmParams returns the RecoverVmParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParams) GetRecoverVmParams() RecoverAwsParamsRecoverVmParams {
	if o == nil || IsNil(o.RecoverVmParams.Get()) {
		var ret RecoverAwsParamsRecoverVmParams
		return ret
	}
	return *o.RecoverVmParams.Get()
}

// GetRecoverVmParamsOk returns a tuple with the RecoverVmParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParams) GetRecoverVmParamsOk() (*RecoverAwsParamsRecoverVmParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverVmParams.Get(), o.RecoverVmParams.IsSet()
}

// HasRecoverVmParams returns a boolean if a field has been set.
func (o *RecoverAwsParams) HasRecoverVmParams() bool {
	if o != nil && o.RecoverVmParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverVmParams gets a reference to the given NullableRecoverAwsParamsRecoverVmParams and assigns it to the RecoverVmParams field.
func (o *RecoverAwsParams) SetRecoverVmParams(v RecoverAwsParamsRecoverVmParams) {
	o.RecoverVmParams.Set(&v)
}
// SetRecoverVmParamsNil sets the value for RecoverVmParams to be an explicit nil
func (o *RecoverAwsParams) SetRecoverVmParamsNil() {
	o.RecoverVmParams.Set(nil)
}

// UnsetRecoverVmParams ensures that no value is present for RecoverVmParams, not even an explicit nil
func (o *RecoverAwsParams) UnsetRecoverVmParams() {
	o.RecoverVmParams.Unset()
}

// GetRecoveryAction returns the RecoveryAction field value
func (o *RecoverAwsParams) GetRecoveryAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecoveryAction
}

// GetRecoveryActionOk returns a tuple with the RecoveryAction field value
// and a boolean to check if the value has been set.
func (o *RecoverAwsParams) GetRecoveryActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoveryAction, true
}

// SetRecoveryAction sets field value
func (o *RecoverAwsParams) SetRecoveryAction(v string) {
	o.RecoveryAction = v
}

func (o RecoverAwsParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverAwsParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DownloadFileAndFolderParams.IsSet() {
		toSerialize["downloadFileAndFolderParams"] = o.DownloadFileAndFolderParams.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.RecoverAuroraParams.IsSet() {
		toSerialize["recoverAuroraParams"] = o.RecoverAuroraParams.Get()
	}
	if o.RecoverFileAndFolderParams.IsSet() {
		toSerialize["recoverFileAndFolderParams"] = o.RecoverFileAndFolderParams.Get()
	}
	if o.RecoverRdsIngestParams.IsSet() {
		toSerialize["recoverRdsIngestParams"] = o.RecoverRdsIngestParams.Get()
	}
	if o.RecoverRdsParams.IsSet() {
		toSerialize["recoverRdsParams"] = o.RecoverRdsParams.Get()
	}
	if o.RecoverS3BucketParams.IsSet() {
		toSerialize["recoverS3BucketParams"] = o.RecoverS3BucketParams.Get()
	}
	if o.RecoverVmParams.IsSet() {
		toSerialize["recoverVmParams"] = o.RecoverVmParams.Get()
	}
	toSerialize["recoveryAction"] = o.RecoveryAction
	return toSerialize, nil
}

func (o *RecoverAwsParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoveryAction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverAwsParams := _RecoverAwsParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverAwsParams)

	if err != nil {
		return err
	}

	*o = RecoverAwsParams(varRecoverAwsParams)

	return err
}

type NullableRecoverAwsParams struct {
	value *RecoverAwsParams
	isSet bool
}

func (v NullableRecoverAwsParams) Get() *RecoverAwsParams {
	return v.value
}

func (v *NullableRecoverAwsParams) Set(val *RecoverAwsParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAwsParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAwsParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAwsParams(val *RecoverAwsParams) *NullableRecoverAwsParams {
	return &NullableRecoverAwsParams{value: val, isSet: true}
}

func (v NullableRecoverAwsParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAwsParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


