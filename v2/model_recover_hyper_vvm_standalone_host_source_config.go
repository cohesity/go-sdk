/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverHyperVVmStandaloneHostSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverHyperVVmStandaloneHostSourceConfig{}

// RecoverHyperVVmStandaloneHostSourceConfig Specifies the new destination Source configuration where the VMs will be recovered.
type RecoverHyperVVmStandaloneHostSourceConfig struct {
	NetworkConfig NullableRecoverHyperVVmStandaloneHostSourceConfigNetworkConfig `json:"networkConfig,omitempty"`
	Source NullableRecoverAcropolisVmNewSourceConfigSource `json:"source"`
	Volume NullableRecoverHyperVVmStandaloneHostSourceConfigVolume `json:"volume"`
}

type _RecoverHyperVVmStandaloneHostSourceConfig RecoverHyperVVmStandaloneHostSourceConfig

// NewRecoverHyperVVmStandaloneHostSourceConfig instantiates a new RecoverHyperVVmStandaloneHostSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverHyperVVmStandaloneHostSourceConfig(source NullableRecoverAcropolisVmNewSourceConfigSource, volume NullableRecoverHyperVVmStandaloneHostSourceConfigVolume) *RecoverHyperVVmStandaloneHostSourceConfig {
	this := RecoverHyperVVmStandaloneHostSourceConfig{}
	this.Source = source
	this.Volume = volume
	return &this
}

// NewRecoverHyperVVmStandaloneHostSourceConfigWithDefaults instantiates a new RecoverHyperVVmStandaloneHostSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverHyperVVmStandaloneHostSourceConfigWithDefaults() *RecoverHyperVVmStandaloneHostSourceConfig {
	this := RecoverHyperVVmStandaloneHostSourceConfig{}
	return &this
}

// GetNetworkConfig returns the NetworkConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverHyperVVmStandaloneHostSourceConfig) GetNetworkConfig() RecoverHyperVVmStandaloneHostSourceConfigNetworkConfig {
	if o == nil || IsNil(o.NetworkConfig.Get()) {
		var ret RecoverHyperVVmStandaloneHostSourceConfigNetworkConfig
		return ret
	}
	return *o.NetworkConfig.Get()
}

// GetNetworkConfigOk returns a tuple with the NetworkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHyperVVmStandaloneHostSourceConfig) GetNetworkConfigOk() (*RecoverHyperVVmStandaloneHostSourceConfigNetworkConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkConfig.Get(), o.NetworkConfig.IsSet()
}

// HasNetworkConfig returns a boolean if a field has been set.
func (o *RecoverHyperVVmStandaloneHostSourceConfig) HasNetworkConfig() bool {
	if o != nil && o.NetworkConfig.IsSet() {
		return true
	}

	return false
}

// SetNetworkConfig gets a reference to the given NullableRecoverHyperVVmStandaloneHostSourceConfigNetworkConfig and assigns it to the NetworkConfig field.
func (o *RecoverHyperVVmStandaloneHostSourceConfig) SetNetworkConfig(v RecoverHyperVVmStandaloneHostSourceConfigNetworkConfig) {
	o.NetworkConfig.Set(&v)
}
// SetNetworkConfigNil sets the value for NetworkConfig to be an explicit nil
func (o *RecoverHyperVVmStandaloneHostSourceConfig) SetNetworkConfigNil() {
	o.NetworkConfig.Set(nil)
}

// UnsetNetworkConfig ensures that no value is present for NetworkConfig, not even an explicit nil
func (o *RecoverHyperVVmStandaloneHostSourceConfig) UnsetNetworkConfig() {
	o.NetworkConfig.Unset()
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoverAcropolisVmNewSourceConfigSource will be returned
func (o *RecoverHyperVVmStandaloneHostSourceConfig) GetSource() RecoverAcropolisVmNewSourceConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret RecoverAcropolisVmNewSourceConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHyperVVmStandaloneHostSourceConfig) GetSourceOk() (*RecoverAcropolisVmNewSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *RecoverHyperVVmStandaloneHostSourceConfig) SetSource(v RecoverAcropolisVmNewSourceConfigSource) {
	o.Source.Set(&v)
}

// GetVolume returns the Volume field value
// If the value is explicit nil, the zero value for RecoverHyperVVmStandaloneHostSourceConfigVolume will be returned
func (o *RecoverHyperVVmStandaloneHostSourceConfig) GetVolume() RecoverHyperVVmStandaloneHostSourceConfigVolume {
	if o == nil || o.Volume.Get() == nil {
		var ret RecoverHyperVVmStandaloneHostSourceConfigVolume
		return ret
	}

	return *o.Volume.Get()
}

// GetVolumeOk returns a tuple with the Volume field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHyperVVmStandaloneHostSourceConfig) GetVolumeOk() (*RecoverHyperVVmStandaloneHostSourceConfigVolume, bool) {
	if o == nil {
		return nil, false
	}
	return o.Volume.Get(), o.Volume.IsSet()
}

// SetVolume sets field value
func (o *RecoverHyperVVmStandaloneHostSourceConfig) SetVolume(v RecoverHyperVVmStandaloneHostSourceConfigVolume) {
	o.Volume.Set(&v)
}

func (o RecoverHyperVVmStandaloneHostSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverHyperVVmStandaloneHostSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkConfig.IsSet() {
		toSerialize["networkConfig"] = o.NetworkConfig.Get()
	}
	toSerialize["source"] = o.Source.Get()
	toSerialize["volume"] = o.Volume.Get()
	return toSerialize, nil
}

func (o *RecoverHyperVVmStandaloneHostSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"volume",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverHyperVVmStandaloneHostSourceConfig := _RecoverHyperVVmStandaloneHostSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverHyperVVmStandaloneHostSourceConfig)

	if err != nil {
		return err
	}

	*o = RecoverHyperVVmStandaloneHostSourceConfig(varRecoverHyperVVmStandaloneHostSourceConfig)

	return err
}

type NullableRecoverHyperVVmStandaloneHostSourceConfig struct {
	value *RecoverHyperVVmStandaloneHostSourceConfig
	isSet bool
}

func (v NullableRecoverHyperVVmStandaloneHostSourceConfig) Get() *RecoverHyperVVmStandaloneHostSourceConfig {
	return v.value
}

func (v *NullableRecoverHyperVVmStandaloneHostSourceConfig) Set(val *RecoverHyperVVmStandaloneHostSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverHyperVVmStandaloneHostSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverHyperVVmStandaloneHostSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverHyperVVmStandaloneHostSourceConfig(val *RecoverHyperVVmStandaloneHostSourceConfig) *NullableRecoverHyperVVmStandaloneHostSourceConfig {
	return &NullableRecoverHyperVVmStandaloneHostSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverHyperVVmStandaloneHostSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverHyperVVmStandaloneHostSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


