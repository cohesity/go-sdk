/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the WorkloadSubType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadSubType{}

// WorkloadSubType Specifies the Workload Sub-Type.
type WorkloadSubType struct {
	// Specifies the Id of an Entity.
	EntityId NullableString `json:"entityId,omitempty"`
	// Specifies the name of an Entity.
	Name NullableString `json:"name,omitempty"`
	// Specifies the entities part of Workload schema.
	Entities []EntityIdentifier `json:"entities,omitempty"`
	// Specifies the Schema Name of Workload.
	Schema NullableString `json:"schema,omitempty"`
}

// NewWorkloadSubType instantiates a new WorkloadSubType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadSubType() *WorkloadSubType {
	this := WorkloadSubType{}
	return &this
}

// NewWorkloadSubTypeWithDefaults instantiates a new WorkloadSubType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadSubTypeWithDefaults() *WorkloadSubType {
	this := WorkloadSubType{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadSubType) GetEntityId() string {
	if o == nil || IsNil(o.EntityId.Get()) {
		var ret string
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadSubType) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *WorkloadSubType) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableString and assigns it to the EntityId field.
func (o *WorkloadSubType) SetEntityId(v string) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *WorkloadSubType) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *WorkloadSubType) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadSubType) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadSubType) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *WorkloadSubType) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *WorkloadSubType) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *WorkloadSubType) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *WorkloadSubType) UnsetName() {
	o.Name.Unset()
}

// GetEntities returns the Entities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadSubType) GetEntities() []EntityIdentifier {
	if o == nil {
		var ret []EntityIdentifier
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadSubType) GetEntitiesOk() ([]EntityIdentifier, bool) {
	if o == nil || IsNil(o.Entities) {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *WorkloadSubType) HasEntities() bool {
	if o != nil && !IsNil(o.Entities) {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []EntityIdentifier and assigns it to the Entities field.
func (o *WorkloadSubType) SetEntities(v []EntityIdentifier) {
	o.Entities = v
}

// GetSchema returns the Schema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadSubType) GetSchema() string {
	if o == nil || IsNil(o.Schema.Get()) {
		var ret string
		return ret
	}
	return *o.Schema.Get()
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadSubType) GetSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schema.Get(), o.Schema.IsSet()
}

// HasSchema returns a boolean if a field has been set.
func (o *WorkloadSubType) HasSchema() bool {
	if o != nil && o.Schema.IsSet() {
		return true
	}

	return false
}

// SetSchema gets a reference to the given NullableString and assigns it to the Schema field.
func (o *WorkloadSubType) SetSchema(v string) {
	o.Schema.Set(&v)
}
// SetSchemaNil sets the value for Schema to be an explicit nil
func (o *WorkloadSubType) SetSchemaNil() {
	o.Schema.Set(nil)
}

// UnsetSchema ensures that no value is present for Schema, not even an explicit nil
func (o *WorkloadSubType) UnsetSchema() {
	o.Schema.Unset()
}

func (o WorkloadSubType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadSubType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Entities != nil {
		toSerialize["entities"] = o.Entities
	}
	if o.Schema.IsSet() {
		toSerialize["schema"] = o.Schema.Get()
	}
	return toSerialize, nil
}

type NullableWorkloadSubType struct {
	value *WorkloadSubType
	isSet bool
}

func (v NullableWorkloadSubType) Get() *WorkloadSubType {
	return v.value
}

func (v *NullableWorkloadSubType) Set(val *WorkloadSubType) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadSubType) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadSubType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadSubType(val *WorkloadSubType) *NullableWorkloadSubType {
	return &NullableWorkloadSubType{value: val, isSet: true}
}

func (v NullableWorkloadSubType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadSubType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


