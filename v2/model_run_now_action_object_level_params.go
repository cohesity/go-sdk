/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunNowActionObjectLevelParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunNowActionObjectLevelParams{}

// RunNowActionObjectLevelParams Specifies the request parameters for RunNow action on a Protected object.
type RunNowActionObjectLevelParams struct {
	// Specifies the ID of the object.
	Id NullableInt64 `json:"id"`
	// Specifies the name of the object.
	Name NullableString `json:"name,omitempty"`
	// Specifies the backup type should be used for RunNow action.
	BackupType *string `json:"backupType,omitempty"`
	// If sepcified as true then runNow will only take local snapshot ignoring all other targets such as replication, archivals etc. If not sepcified or specified as false then runNow will follow the policy settings.
	TakeLocalSnapshotOnly NullableBool `json:"takeLocalSnapshotOnly,omitempty"`
}

type _RunNowActionObjectLevelParams RunNowActionObjectLevelParams

// NewRunNowActionObjectLevelParams instantiates a new RunNowActionObjectLevelParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunNowActionObjectLevelParams(id NullableInt64) *RunNowActionObjectLevelParams {
	this := RunNowActionObjectLevelParams{}
	this.Id = id
	return &this
}

// NewRunNowActionObjectLevelParamsWithDefaults instantiates a new RunNowActionObjectLevelParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunNowActionObjectLevelParamsWithDefaults() *RunNowActionObjectLevelParams {
	this := RunNowActionObjectLevelParams{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RunNowActionObjectLevelParams) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunNowActionObjectLevelParams) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *RunNowActionObjectLevelParams) SetId(v int64) {
	o.Id.Set(&v)
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunNowActionObjectLevelParams) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunNowActionObjectLevelParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RunNowActionObjectLevelParams) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RunNowActionObjectLevelParams) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RunNowActionObjectLevelParams) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RunNowActionObjectLevelParams) UnsetName() {
	o.Name.Unset()
}

// GetBackupType returns the BackupType field value if set, zero value otherwise.
func (o *RunNowActionObjectLevelParams) GetBackupType() string {
	if o == nil || IsNil(o.BackupType) {
		var ret string
		return ret
	}
	return *o.BackupType
}

// GetBackupTypeOk returns a tuple with the BackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunNowActionObjectLevelParams) GetBackupTypeOk() (*string, bool) {
	if o == nil || IsNil(o.BackupType) {
		return nil, false
	}
	return o.BackupType, true
}

// HasBackupType returns a boolean if a field has been set.
func (o *RunNowActionObjectLevelParams) HasBackupType() bool {
	if o != nil && !IsNil(o.BackupType) {
		return true
	}

	return false
}

// SetBackupType gets a reference to the given string and assigns it to the BackupType field.
func (o *RunNowActionObjectLevelParams) SetBackupType(v string) {
	o.BackupType = &v
}

// GetTakeLocalSnapshotOnly returns the TakeLocalSnapshotOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunNowActionObjectLevelParams) GetTakeLocalSnapshotOnly() bool {
	if o == nil || IsNil(o.TakeLocalSnapshotOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.TakeLocalSnapshotOnly.Get()
}

// GetTakeLocalSnapshotOnlyOk returns a tuple with the TakeLocalSnapshotOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunNowActionObjectLevelParams) GetTakeLocalSnapshotOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TakeLocalSnapshotOnly.Get(), o.TakeLocalSnapshotOnly.IsSet()
}

// HasTakeLocalSnapshotOnly returns a boolean if a field has been set.
func (o *RunNowActionObjectLevelParams) HasTakeLocalSnapshotOnly() bool {
	if o != nil && o.TakeLocalSnapshotOnly.IsSet() {
		return true
	}

	return false
}

// SetTakeLocalSnapshotOnly gets a reference to the given NullableBool and assigns it to the TakeLocalSnapshotOnly field.
func (o *RunNowActionObjectLevelParams) SetTakeLocalSnapshotOnly(v bool) {
	o.TakeLocalSnapshotOnly.Set(&v)
}
// SetTakeLocalSnapshotOnlyNil sets the value for TakeLocalSnapshotOnly to be an explicit nil
func (o *RunNowActionObjectLevelParams) SetTakeLocalSnapshotOnlyNil() {
	o.TakeLocalSnapshotOnly.Set(nil)
}

// UnsetTakeLocalSnapshotOnly ensures that no value is present for TakeLocalSnapshotOnly, not even an explicit nil
func (o *RunNowActionObjectLevelParams) UnsetTakeLocalSnapshotOnly() {
	o.TakeLocalSnapshotOnly.Unset()
}

func (o RunNowActionObjectLevelParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunNowActionObjectLevelParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.BackupType) {
		toSerialize["backupType"] = o.BackupType
	}
	if o.TakeLocalSnapshotOnly.IsSet() {
		toSerialize["takeLocalSnapshotOnly"] = o.TakeLocalSnapshotOnly.Get()
	}
	return toSerialize, nil
}

func (o *RunNowActionObjectLevelParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunNowActionObjectLevelParams := _RunNowActionObjectLevelParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunNowActionObjectLevelParams)

	if err != nil {
		return err
	}

	*o = RunNowActionObjectLevelParams(varRunNowActionObjectLevelParams)

	return err
}

type NullableRunNowActionObjectLevelParams struct {
	value *RunNowActionObjectLevelParams
	isSet bool
}

func (v NullableRunNowActionObjectLevelParams) Get() *RunNowActionObjectLevelParams {
	return v.value
}

func (v *NullableRunNowActionObjectLevelParams) Set(val *RunNowActionObjectLevelParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRunNowActionObjectLevelParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRunNowActionObjectLevelParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunNowActionObjectLevelParams(val *RunNowActionObjectLevelParams) *NullableRunNowActionObjectLevelParams {
	return &NullableRunNowActionObjectLevelParams{value: val, isSet: true}
}

func (v NullableRunNowActionObjectLevelParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunNowActionObjectLevelParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


