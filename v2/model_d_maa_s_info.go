/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DMaaSInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DMaaSInfo{}

// DMaaSInfo Specifies the DMaaS info about the cluster.
type DMaaSInfo struct {
	// Specifies whether the cluster is a DMaaS cluster.
	IsDmaas NullableBool `json:"isDmaas"`
}

type _DMaaSInfo DMaaSInfo

// NewDMaaSInfo instantiates a new DMaaSInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDMaaSInfo(isDmaas NullableBool) *DMaaSInfo {
	this := DMaaSInfo{}
	this.IsDmaas = isDmaas
	return &this
}

// NewDMaaSInfoWithDefaults instantiates a new DMaaSInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDMaaSInfoWithDefaults() *DMaaSInfo {
	this := DMaaSInfo{}
	return &this
}

// GetIsDmaas returns the IsDmaas field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *DMaaSInfo) GetIsDmaas() bool {
	if o == nil || o.IsDmaas.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsDmaas.Get()
}

// GetIsDmaasOk returns a tuple with the IsDmaas field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DMaaSInfo) GetIsDmaasOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDmaas.Get(), o.IsDmaas.IsSet()
}

// SetIsDmaas sets field value
func (o *DMaaSInfo) SetIsDmaas(v bool) {
	o.IsDmaas.Set(&v)
}

func (o DMaaSInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DMaaSInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isDmaas"] = o.IsDmaas.Get()
	return toSerialize, nil
}

func (o *DMaaSInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isDmaas",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDMaaSInfo := _DMaaSInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDMaaSInfo)

	if err != nil {
		return err
	}

	*o = DMaaSInfo(varDMaaSInfo)

	return err
}

type NullableDMaaSInfo struct {
	value *DMaaSInfo
	isSet bool
}

func (v NullableDMaaSInfo) Get() *DMaaSInfo {
	return v.value
}

func (v *NullableDMaaSInfo) Set(val *DMaaSInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDMaaSInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDMaaSInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDMaaSInfo(val *DMaaSInfo) *NullableDMaaSInfo {
	return &NullableDMaaSInfo{value: val, isSet: true}
}

func (v NullableDMaaSInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDMaaSInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


