/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnregisterKerberosRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnregisterKerberosRequest{}

// UnregisterKerberosRequest Specifies the request to unregister a Kerberos Provider.
type UnregisterKerberosRequest struct {
	// Specifies the password of Kerberos admin principal.
	AdminPassword NullableString `json:"adminPassword"`
	// Specifies the name of the Kerberos admin principal.
	AdminPrincipal NullableString `json:"adminPrincipal,omitempty"`
}

type _UnregisterKerberosRequest UnregisterKerberosRequest

// NewUnregisterKerberosRequest instantiates a new UnregisterKerberosRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnregisterKerberosRequest(adminPassword NullableString) *UnregisterKerberosRequest {
	this := UnregisterKerberosRequest{}
	this.AdminPassword = adminPassword
	return &this
}

// NewUnregisterKerberosRequestWithDefaults instantiates a new UnregisterKerberosRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnregisterKerberosRequestWithDefaults() *UnregisterKerberosRequest {
	this := UnregisterKerberosRequest{}
	return &this
}

// GetAdminPassword returns the AdminPassword field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UnregisterKerberosRequest) GetAdminPassword() string {
	if o == nil || o.AdminPassword.Get() == nil {
		var ret string
		return ret
	}

	return *o.AdminPassword.Get()
}

// GetAdminPasswordOk returns a tuple with the AdminPassword field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnregisterKerberosRequest) GetAdminPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminPassword.Get(), o.AdminPassword.IsSet()
}

// SetAdminPassword sets field value
func (o *UnregisterKerberosRequest) SetAdminPassword(v string) {
	o.AdminPassword.Set(&v)
}

// GetAdminPrincipal returns the AdminPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UnregisterKerberosRequest) GetAdminPrincipal() string {
	if o == nil || IsNil(o.AdminPrincipal.Get()) {
		var ret string
		return ret
	}
	return *o.AdminPrincipal.Get()
}

// GetAdminPrincipalOk returns a tuple with the AdminPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnregisterKerberosRequest) GetAdminPrincipalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminPrincipal.Get(), o.AdminPrincipal.IsSet()
}

// HasAdminPrincipal returns a boolean if a field has been set.
func (o *UnregisterKerberosRequest) HasAdminPrincipal() bool {
	if o != nil && o.AdminPrincipal.IsSet() {
		return true
	}

	return false
}

// SetAdminPrincipal gets a reference to the given NullableString and assigns it to the AdminPrincipal field.
func (o *UnregisterKerberosRequest) SetAdminPrincipal(v string) {
	o.AdminPrincipal.Set(&v)
}
// SetAdminPrincipalNil sets the value for AdminPrincipal to be an explicit nil
func (o *UnregisterKerberosRequest) SetAdminPrincipalNil() {
	o.AdminPrincipal.Set(nil)
}

// UnsetAdminPrincipal ensures that no value is present for AdminPrincipal, not even an explicit nil
func (o *UnregisterKerberosRequest) UnsetAdminPrincipal() {
	o.AdminPrincipal.Unset()
}

func (o UnregisterKerberosRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnregisterKerberosRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["adminPassword"] = o.AdminPassword.Get()
	if o.AdminPrincipal.IsSet() {
		toSerialize["adminPrincipal"] = o.AdminPrincipal.Get()
	}
	return toSerialize, nil
}

func (o *UnregisterKerberosRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"adminPassword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnregisterKerberosRequest := _UnregisterKerberosRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnregisterKerberosRequest)

	if err != nil {
		return err
	}

	*o = UnregisterKerberosRequest(varUnregisterKerberosRequest)

	return err
}

type NullableUnregisterKerberosRequest struct {
	value *UnregisterKerberosRequest
	isSet bool
}

func (v NullableUnregisterKerberosRequest) Get() *UnregisterKerberosRequest {
	return v.value
}

func (v *NullableUnregisterKerberosRequest) Set(val *UnregisterKerberosRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUnregisterKerberosRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUnregisterKerberosRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnregisterKerberosRequest(val *UnregisterKerberosRequest) *NullableUnregisterKerberosRequest {
	return &NullableUnregisterKerberosRequest{value: val, isSet: true}
}

func (v NullableUnregisterKerberosRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnregisterKerberosRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


