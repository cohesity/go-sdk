/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OverwriteViewParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OverwriteViewParams{}

// OverwriteViewParams Specifies the parameters to overwrite a View.
type OverwriteViewParams struct {
	// Specifies the source View id. Target View will be overwritten by the source View.
	SourceViewId NullableInt64 `json:"sourceViewId"`
}

type _OverwriteViewParams OverwriteViewParams

// NewOverwriteViewParams instantiates a new OverwriteViewParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverwriteViewParams(sourceViewId NullableInt64) *OverwriteViewParams {
	this := OverwriteViewParams{}
	this.SourceViewId = sourceViewId
	return &this
}

// NewOverwriteViewParamsWithDefaults instantiates a new OverwriteViewParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverwriteViewParamsWithDefaults() *OverwriteViewParams {
	this := OverwriteViewParams{}
	return &this
}

// GetSourceViewId returns the SourceViewId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *OverwriteViewParams) GetSourceViewId() int64 {
	if o == nil || o.SourceViewId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.SourceViewId.Get()
}

// GetSourceViewIdOk returns a tuple with the SourceViewId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OverwriteViewParams) GetSourceViewIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceViewId.Get(), o.SourceViewId.IsSet()
}

// SetSourceViewId sets field value
func (o *OverwriteViewParams) SetSourceViewId(v int64) {
	o.SourceViewId.Set(&v)
}

func (o OverwriteViewParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OverwriteViewParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sourceViewId"] = o.SourceViewId.Get()
	return toSerialize, nil
}

func (o *OverwriteViewParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourceViewId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOverwriteViewParams := _OverwriteViewParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOverwriteViewParams)

	if err != nil {
		return err
	}

	*o = OverwriteViewParams(varOverwriteViewParams)

	return err
}

type NullableOverwriteViewParams struct {
	value *OverwriteViewParams
	isSet bool
}

func (v NullableOverwriteViewParams) Get() *OverwriteViewParams {
	return v.value
}

func (v *NullableOverwriteViewParams) Set(val *OverwriteViewParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOverwriteViewParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOverwriteViewParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverwriteViewParams(val *OverwriteViewParams) *NullableOverwriteViewParams {
	return &NullableOverwriteViewParams{value: val, isSet: true}
}

func (v NullableOverwriteViewParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverwriteViewParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


