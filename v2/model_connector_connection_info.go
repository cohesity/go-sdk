/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ConnectorConnectionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorConnectionInfo{}

// ConnectorConnectionInfo Specifies the connection info of a connector.
type ConnectorConnectionInfo struct {
	// Specifies whether the connector is currently connected to cohesity server.
	IsActive NullableBool `json:"isActive,omitempty"`
	// Specifies last timestamp for which connection status was known.
	LastConnectedTimestampMsecs NullableInt64 `json:"lastConnectedTimestampMsecs,omitempty"`
	// Specifies possible error message when the connector is not able to connect.
	Message NullableString `json:"message,omitempty"`
}

// NewConnectorConnectionInfo instantiates a new ConnectorConnectionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorConnectionInfo() *ConnectorConnectionInfo {
	this := ConnectorConnectionInfo{}
	return &this
}

// NewConnectorConnectionInfoWithDefaults instantiates a new ConnectorConnectionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorConnectionInfoWithDefaults() *ConnectorConnectionInfo {
	this := ConnectorConnectionInfo{}
	return &this
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorConnectionInfo) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive.Get()) {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorConnectionInfo) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *ConnectorConnectionInfo) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *ConnectorConnectionInfo) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *ConnectorConnectionInfo) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *ConnectorConnectionInfo) UnsetIsActive() {
	o.IsActive.Unset()
}

// GetLastConnectedTimestampMsecs returns the LastConnectedTimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorConnectionInfo) GetLastConnectedTimestampMsecs() int64 {
	if o == nil || IsNil(o.LastConnectedTimestampMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.LastConnectedTimestampMsecs.Get()
}

// GetLastConnectedTimestampMsecsOk returns a tuple with the LastConnectedTimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorConnectionInfo) GetLastConnectedTimestampMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastConnectedTimestampMsecs.Get(), o.LastConnectedTimestampMsecs.IsSet()
}

// HasLastConnectedTimestampMsecs returns a boolean if a field has been set.
func (o *ConnectorConnectionInfo) HasLastConnectedTimestampMsecs() bool {
	if o != nil && o.LastConnectedTimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastConnectedTimestampMsecs gets a reference to the given NullableInt64 and assigns it to the LastConnectedTimestampMsecs field.
func (o *ConnectorConnectionInfo) SetLastConnectedTimestampMsecs(v int64) {
	o.LastConnectedTimestampMsecs.Set(&v)
}
// SetLastConnectedTimestampMsecsNil sets the value for LastConnectedTimestampMsecs to be an explicit nil
func (o *ConnectorConnectionInfo) SetLastConnectedTimestampMsecsNil() {
	o.LastConnectedTimestampMsecs.Set(nil)
}

// UnsetLastConnectedTimestampMsecs ensures that no value is present for LastConnectedTimestampMsecs, not even an explicit nil
func (o *ConnectorConnectionInfo) UnsetLastConnectedTimestampMsecs() {
	o.LastConnectedTimestampMsecs.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorConnectionInfo) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorConnectionInfo) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *ConnectorConnectionInfo) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *ConnectorConnectionInfo) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *ConnectorConnectionInfo) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *ConnectorConnectionInfo) UnsetMessage() {
	o.Message.Unset()
}

func (o ConnectorConnectionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorConnectionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	if o.LastConnectedTimestampMsecs.IsSet() {
		toSerialize["lastConnectedTimestampMsecs"] = o.LastConnectedTimestampMsecs.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	return toSerialize, nil
}

type NullableConnectorConnectionInfo struct {
	value *ConnectorConnectionInfo
	isSet bool
}

func (v NullableConnectorConnectionInfo) Get() *ConnectorConnectionInfo {
	return v.value
}

func (v *NullableConnectorConnectionInfo) Set(val *ConnectorConnectionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorConnectionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorConnectionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorConnectionInfo(val *ConnectorConnectionInfo) *NullableConnectorConnectionInfo {
	return &NullableConnectorConnectionInfo{value: val, isSet: true}
}

func (v NullableConnectorConnectionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorConnectionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


