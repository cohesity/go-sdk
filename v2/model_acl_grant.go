/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AclGrant type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AclGrant{}

// AclGrant Specifies an ACL grant.
type AclGrant struct {
	Grantee AclGrantGrantee `json:"grantee"`
	// Specifies a list of permissions granted to the grantees.
	Permissions []string `json:"permissions"`
}

type _AclGrant AclGrant

// NewAclGrant instantiates a new AclGrant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAclGrant(grantee AclGrantGrantee, permissions []string) *AclGrant {
	this := AclGrant{}
	this.Grantee = grantee
	this.Permissions = permissions
	return &this
}

// NewAclGrantWithDefaults instantiates a new AclGrant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAclGrantWithDefaults() *AclGrant {
	this := AclGrant{}
	return &this
}

// GetGrantee returns the Grantee field value
func (o *AclGrant) GetGrantee() AclGrantGrantee {
	if o == nil {
		var ret AclGrantGrantee
		return ret
	}

	return o.Grantee
}

// GetGranteeOk returns a tuple with the Grantee field value
// and a boolean to check if the value has been set.
func (o *AclGrant) GetGranteeOk() (*AclGrantGrantee, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Grantee, true
}

// SetGrantee sets field value
func (o *AclGrant) SetGrantee(v AclGrantGrantee) {
	o.Grantee = v
}

// GetPermissions returns the Permissions field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *AclGrant) GetPermissions() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AclGrant) GetPermissionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// SetPermissions sets field value
func (o *AclGrant) SetPermissions(v []string) {
	o.Permissions = v
}

func (o AclGrant) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AclGrant) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["grantee"] = o.Grantee
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	return toSerialize, nil
}

func (o *AclGrant) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"grantee",
		"permissions",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAclGrant := _AclGrant{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAclGrant)

	if err != nil {
		return err
	}

	*o = AclGrant(varAclGrant)

	return err
}

type NullableAclGrant struct {
	value *AclGrant
	isSet bool
}

func (v NullableAclGrant) Get() *AclGrant {
	return v.value
}

func (v *NullableAclGrant) Set(val *AclGrant) {
	v.value = val
	v.isSet = true
}

func (v NullableAclGrant) IsSet() bool {
	return v.isSet
}

func (v *NullableAclGrant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclGrant(val *AclGrant) *NullableAclGrant {
	return &NullableAclGrant{value: val, isSet: true}
}

func (v NullableAclGrant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclGrant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


