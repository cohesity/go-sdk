/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NasIncrementalThrottlingConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NasIncrementalThrottlingConfig{}

// NasIncrementalThrottlingConfig Specifies the throttling configuration during incremental backup run.
type NasIncrementalThrottlingConfig struct {
	// Specifies the percentage value of maximum concurrent metadata to be fetched during incremental backup of the source.
	MaxMetadataFetchPercentage NullableInt32 `json:"maxMetadataFetchPercentage,omitempty"`
	// Specifies the percentage value of maximum concurrent read/write during incremental backup of the source.
	MaxReadWritePercentage NullableInt32 `json:"maxReadWritePercentage,omitempty"`
}

// NewNasIncrementalThrottlingConfig instantiates a new NasIncrementalThrottlingConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNasIncrementalThrottlingConfig() *NasIncrementalThrottlingConfig {
	this := NasIncrementalThrottlingConfig{}
	return &this
}

// NewNasIncrementalThrottlingConfigWithDefaults instantiates a new NasIncrementalThrottlingConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNasIncrementalThrottlingConfigWithDefaults() *NasIncrementalThrottlingConfig {
	this := NasIncrementalThrottlingConfig{}
	return &this
}

// GetMaxMetadataFetchPercentage returns the MaxMetadataFetchPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasIncrementalThrottlingConfig) GetMaxMetadataFetchPercentage() int32 {
	if o == nil || IsNil(o.MaxMetadataFetchPercentage.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxMetadataFetchPercentage.Get()
}

// GetMaxMetadataFetchPercentageOk returns a tuple with the MaxMetadataFetchPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasIncrementalThrottlingConfig) GetMaxMetadataFetchPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxMetadataFetchPercentage.Get(), o.MaxMetadataFetchPercentage.IsSet()
}

// HasMaxMetadataFetchPercentage returns a boolean if a field has been set.
func (o *NasIncrementalThrottlingConfig) HasMaxMetadataFetchPercentage() bool {
	if o != nil && o.MaxMetadataFetchPercentage.IsSet() {
		return true
	}

	return false
}

// SetMaxMetadataFetchPercentage gets a reference to the given NullableInt32 and assigns it to the MaxMetadataFetchPercentage field.
func (o *NasIncrementalThrottlingConfig) SetMaxMetadataFetchPercentage(v int32) {
	o.MaxMetadataFetchPercentage.Set(&v)
}
// SetMaxMetadataFetchPercentageNil sets the value for MaxMetadataFetchPercentage to be an explicit nil
func (o *NasIncrementalThrottlingConfig) SetMaxMetadataFetchPercentageNil() {
	o.MaxMetadataFetchPercentage.Set(nil)
}

// UnsetMaxMetadataFetchPercentage ensures that no value is present for MaxMetadataFetchPercentage, not even an explicit nil
func (o *NasIncrementalThrottlingConfig) UnsetMaxMetadataFetchPercentage() {
	o.MaxMetadataFetchPercentage.Unset()
}

// GetMaxReadWritePercentage returns the MaxReadWritePercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasIncrementalThrottlingConfig) GetMaxReadWritePercentage() int32 {
	if o == nil || IsNil(o.MaxReadWritePercentage.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxReadWritePercentage.Get()
}

// GetMaxReadWritePercentageOk returns a tuple with the MaxReadWritePercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasIncrementalThrottlingConfig) GetMaxReadWritePercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxReadWritePercentage.Get(), o.MaxReadWritePercentage.IsSet()
}

// HasMaxReadWritePercentage returns a boolean if a field has been set.
func (o *NasIncrementalThrottlingConfig) HasMaxReadWritePercentage() bool {
	if o != nil && o.MaxReadWritePercentage.IsSet() {
		return true
	}

	return false
}

// SetMaxReadWritePercentage gets a reference to the given NullableInt32 and assigns it to the MaxReadWritePercentage field.
func (o *NasIncrementalThrottlingConfig) SetMaxReadWritePercentage(v int32) {
	o.MaxReadWritePercentage.Set(&v)
}
// SetMaxReadWritePercentageNil sets the value for MaxReadWritePercentage to be an explicit nil
func (o *NasIncrementalThrottlingConfig) SetMaxReadWritePercentageNil() {
	o.MaxReadWritePercentage.Set(nil)
}

// UnsetMaxReadWritePercentage ensures that no value is present for MaxReadWritePercentage, not even an explicit nil
func (o *NasIncrementalThrottlingConfig) UnsetMaxReadWritePercentage() {
	o.MaxReadWritePercentage.Unset()
}

func (o NasIncrementalThrottlingConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NasIncrementalThrottlingConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxMetadataFetchPercentage.IsSet() {
		toSerialize["maxMetadataFetchPercentage"] = o.MaxMetadataFetchPercentage.Get()
	}
	if o.MaxReadWritePercentage.IsSet() {
		toSerialize["maxReadWritePercentage"] = o.MaxReadWritePercentage.Get()
	}
	return toSerialize, nil
}

type NullableNasIncrementalThrottlingConfig struct {
	value *NasIncrementalThrottlingConfig
	isSet bool
}

func (v NullableNasIncrementalThrottlingConfig) Get() *NasIncrementalThrottlingConfig {
	return v.value
}

func (v *NullableNasIncrementalThrottlingConfig) Set(val *NasIncrementalThrottlingConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNasIncrementalThrottlingConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNasIncrementalThrottlingConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNasIncrementalThrottlingConfig(val *NasIncrementalThrottlingConfig) *NullableNasIncrementalThrottlingConfig {
	return &NullableNasIncrementalThrottlingConfig{value: val, isSet: true}
}

func (v NullableNasIncrementalThrottlingConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNasIncrementalThrottlingConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


