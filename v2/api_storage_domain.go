/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// StorageDomainAPIService StorageDomainAPI service
type StorageDomainAPIService service

type ApiCreateStorageDomainRequest struct {
	ctx context.Context
	ApiService *StorageDomainAPIService
	body *CreateStorageDomainParam
}

// Specified the request to create a Storage Domain.
func (r ApiCreateStorageDomainRequest) Body(body CreateStorageDomainParam) ApiCreateStorageDomainRequest {
	r.body = &body
	return r
}

func (r ApiCreateStorageDomainRequest) Execute() (*StorageDomain, *http.Response, error) {
	return r.ApiService.CreateStorageDomainExecute(r)
}

/*
CreateStorageDomain Create a Storage Domain.

Create a Storage Domain.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateStorageDomainRequest
*/
func (a *StorageDomainAPIService) CreateStorageDomain(ctx context.Context) ApiCreateStorageDomainRequest {
	return ApiCreateStorageDomainRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StorageDomain
func (a *StorageDomainAPIService) CreateStorageDomainExecute(r ApiCreateStorageDomainRequest) (*StorageDomain, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StorageDomain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageDomainAPIService.CreateStorageDomain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-domains"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteStorageDomainRequest struct {
	ctx context.Context
	ApiService *StorageDomainAPIService
	id int64
}

func (r ApiDeleteStorageDomainRequest) Execute() (*http.Response, error) {
	return r.ApiService.DeleteStorageDomainExecute(r)
}

/*
DeleteStorageDomain Delete a Storage Domain.

Delete a Storage Domain.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Specified the Storage Domain id to delete.
 @return ApiDeleteStorageDomainRequest
*/
func (a *StorageDomainAPIService) DeleteStorageDomain(ctx context.Context, id int64) ApiDeleteStorageDomainRequest {
	return ApiDeleteStorageDomainRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
func (a *StorageDomainAPIService) DeleteStorageDomainExecute(r ApiDeleteStorageDomainRequest) (*http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageDomainAPIService.DeleteStorageDomain")
	if err != nil {
		return nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-domains/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiGetStorageDomainByIdRequest struct {
	ctx context.Context
	ApiService *StorageDomainAPIService
	id int64
	includeStats *bool
	includeTimeSeriesSchema *bool
	includeFileCountBySize *bool
	includeTenants *bool
}

// Whether to include Storage Domain stats in response.
func (r ApiGetStorageDomainByIdRequest) IncludeStats(includeStats bool) ApiGetStorageDomainByIdRequest {
	r.includeStats = &includeStats
	return r
}

// Whether to include Storage Domain time series schema in response.
func (r ApiGetStorageDomainByIdRequest) IncludeTimeSeriesSchema(includeTimeSeriesSchema bool) ApiGetStorageDomainByIdRequest {
	r.includeTimeSeriesSchema = &includeTimeSeriesSchema
	return r
}

// Whether to include Storage Domain file count by size.
func (r ApiGetStorageDomainByIdRequest) IncludeFileCountBySize(includeFileCountBySize bool) ApiGetStorageDomainByIdRequest {
	r.includeFileCountBySize = &includeFileCountBySize
	return r
}

// Whether to include Storage Domains that belong to Tenants. This param is only effective when the User has privilege to view Storage Domain details of a tenant.
func (r ApiGetStorageDomainByIdRequest) IncludeTenants(includeTenants bool) ApiGetStorageDomainByIdRequest {
	r.includeTenants = &includeTenants
	return r
}

func (r ApiGetStorageDomainByIdRequest) Execute() (*StorageDomain, *http.Response, error) {
	return r.ApiService.GetStorageDomainByIdExecute(r)
}

/*
GetStorageDomainById Get a Storage Domain by id.

Get a Storage Domain by id.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Specified the Storage Domain id to fetch.
 @return ApiGetStorageDomainByIdRequest
*/
func (a *StorageDomainAPIService) GetStorageDomainById(ctx context.Context, id int64) ApiGetStorageDomainByIdRequest {
	return ApiGetStorageDomainByIdRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StorageDomain
func (a *StorageDomainAPIService) GetStorageDomainByIdExecute(r ApiGetStorageDomainByIdRequest) (*StorageDomain, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StorageDomain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageDomainAPIService.GetStorageDomainById")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-domains/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.includeStats != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeStats", r.includeStats, "")
	}
	if r.includeTimeSeriesSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTimeSeriesSchema", r.includeTimeSeriesSchema, "")
	}
	if r.includeFileCountBySize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFileCountBySize", r.includeFileCountBySize, "")
	}
	if r.includeTenants != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTenants", r.includeTenants, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetStorageDomainsRequest struct {
	ctx context.Context
	ApiService *StorageDomainAPIService
	ids *[]int64
	names *[]string
	clusterPartitionIds *[]int64
	tenantIds *[]string
	includeTenants *bool
	includeStats *bool
	includeTimeSeriesSchema *bool
	includeFileCountBySize *bool
	matchPartialNames *bool
	viewTemplateId *int64
}

// Filter by a list of Storage Domain ids.
func (r ApiGetStorageDomainsRequest) Ids(ids []int64) ApiGetStorageDomainsRequest {
	r.ids = &ids
	return r
}

// Filter by a list of Storage Domain names.
func (r ApiGetStorageDomainsRequest) Names(names []string) ApiGetStorageDomainsRequest {
	r.names = &names
	return r
}

// Filter by a list of cluster partition ids.
func (r ApiGetStorageDomainsRequest) ClusterPartitionIds(clusterPartitionIds []int64) ApiGetStorageDomainsRequest {
	r.clusterPartitionIds = &clusterPartitionIds
	return r
}

// TenantIds contains ids of the tenants for which Storage Domains are to be returned.
func (r ApiGetStorageDomainsRequest) TenantIds(tenantIds []string) ApiGetStorageDomainsRequest {
	r.tenantIds = &tenantIds
	return r
}

// IncludeTenants specifies if Storage Domains of all the tenants under the hierarchy of the logged in user&#39;s organization should be returned.
func (r ApiGetStorageDomainsRequest) IncludeTenants(includeTenants bool) ApiGetStorageDomainsRequest {
	r.includeTenants = &includeTenants
	return r
}

// Whether to include Storage Domain stats in response.
func (r ApiGetStorageDomainsRequest) IncludeStats(includeStats bool) ApiGetStorageDomainsRequest {
	r.includeStats = &includeStats
	return r
}

// Whether to include Storage Domain time series schema in response.
func (r ApiGetStorageDomainsRequest) IncludeTimeSeriesSchema(includeTimeSeriesSchema bool) ApiGetStorageDomainsRequest {
	r.includeTimeSeriesSchema = &includeTimeSeriesSchema
	return r
}

// Whether to include Storage Domain file count by size.
func (r ApiGetStorageDomainsRequest) IncludeFileCountBySize(includeFileCountBySize bool) ApiGetStorageDomainsRequest {
	r.includeFileCountBySize = &includeFileCountBySize
	return r
}

// If true, the names in viewNames are matched by any partial rather than exactly matched.
func (r ApiGetStorageDomainsRequest) MatchPartialNames(matchPartialNames bool) ApiGetStorageDomainsRequest {
	r.matchPartialNames = &matchPartialNames
	return r
}

// Specifies a view template id for Storage Domain. Storage Domains with same deduplication and compression settings will be recommended.
func (r ApiGetStorageDomainsRequest) ViewTemplateId(viewTemplateId int64) ApiGetStorageDomainsRequest {
	r.viewTemplateId = &viewTemplateId
	return r
}

func (r ApiGetStorageDomainsRequest) Execute() (*StorageDomains, *http.Response, error) {
	return r.ApiService.GetStorageDomainsExecute(r)
}

/*
GetStorageDomains Get Storage Domains.

Get Storage Domains.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetStorageDomainsRequest
*/
func (a *StorageDomainAPIService) GetStorageDomains(ctx context.Context) ApiGetStorageDomainsRequest {
	return ApiGetStorageDomainsRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return StorageDomains
func (a *StorageDomainAPIService) GetStorageDomainsExecute(r ApiGetStorageDomainsRequest) (*StorageDomains, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StorageDomains
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageDomainAPIService.GetStorageDomains")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-domains"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.ids != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "ids", r.ids, "csv")
	}
	if r.names != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "names", r.names, "csv")
	}
	if r.clusterPartitionIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "clusterPartitionIds", r.clusterPartitionIds, "csv")
	}
	if r.tenantIds != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "tenantIds", r.tenantIds, "csv")
	}
	if r.includeTenants != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTenants", r.includeTenants, "")
	}
	if r.includeStats != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeStats", r.includeStats, "")
	}
	if r.includeTimeSeriesSchema != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeTimeSeriesSchema", r.includeTimeSeriesSchema, "")
	}
	if r.includeFileCountBySize != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "includeFileCountBySize", r.includeFileCountBySize, "")
	}
	if r.matchPartialNames != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "matchPartialNames", r.matchPartialNames, "")
	}
	if r.viewTemplateId != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "viewTemplateId", r.viewTemplateId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateStorageDomainRequest struct {
	ctx context.Context
	ApiService *StorageDomainAPIService
	id int64
	body *UpdateStorageDomainParam
}

// Specified the request to update a Storage Domain.
func (r ApiUpdateStorageDomainRequest) Body(body UpdateStorageDomainParam) ApiUpdateStorageDomainRequest {
	r.body = &body
	return r
}

func (r ApiUpdateStorageDomainRequest) Execute() (*StorageDomain, *http.Response, error) {
	return r.ApiService.UpdateStorageDomainExecute(r)
}

/*
UpdateStorageDomain Update a Storage Domain.

Update a Storage Domain.

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id Specified the Storage Domain id to update.
 @return ApiUpdateStorageDomainRequest
*/
func (a *StorageDomainAPIService) UpdateStorageDomain(ctx context.Context, id int64) ApiUpdateStorageDomainRequest {
	return ApiUpdateStorageDomainRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return StorageDomain
func (a *StorageDomainAPIService) UpdateStorageDomainExecute(r ApiUpdateStorageDomainRequest) (*StorageDomain, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *StorageDomain
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "StorageDomainAPIService.UpdateStorageDomain")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/storage-domains/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.body == nil {
		return localVarReturnValue, nil, reportError("body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
