/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UdaConfigParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaConfigParams{}

// UdaConfigParams Specifies parameters for a UDA connector.
type UdaConfigParams struct {
	// Array of parameters for different host operating systems.
	HostOsSpecificConfigurations []UdaHostOsSpecificParams `json:"hostOsSpecificConfigurations,omitempty"`
	Index NullableUdaIndexParams `json:"index,omitempty"`
}

// NewUdaConfigParams instantiates a new UdaConfigParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaConfigParams() *UdaConfigParams {
	this := UdaConfigParams{}
	return &this
}

// NewUdaConfigParamsWithDefaults instantiates a new UdaConfigParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaConfigParamsWithDefaults() *UdaConfigParams {
	this := UdaConfigParams{}
	return &this
}

// GetHostOsSpecificConfigurations returns the HostOsSpecificConfigurations field value if set, zero value otherwise.
func (o *UdaConfigParams) GetHostOsSpecificConfigurations() []UdaHostOsSpecificParams {
	if o == nil || IsNil(o.HostOsSpecificConfigurations) {
		var ret []UdaHostOsSpecificParams
		return ret
	}
	return o.HostOsSpecificConfigurations
}

// GetHostOsSpecificConfigurationsOk returns a tuple with the HostOsSpecificConfigurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdaConfigParams) GetHostOsSpecificConfigurationsOk() ([]UdaHostOsSpecificParams, bool) {
	if o == nil || IsNil(o.HostOsSpecificConfigurations) {
		return nil, false
	}
	return o.HostOsSpecificConfigurations, true
}

// HasHostOsSpecificConfigurations returns a boolean if a field has been set.
func (o *UdaConfigParams) HasHostOsSpecificConfigurations() bool {
	if o != nil && !IsNil(o.HostOsSpecificConfigurations) {
		return true
	}

	return false
}

// SetHostOsSpecificConfigurations gets a reference to the given []UdaHostOsSpecificParams and assigns it to the HostOsSpecificConfigurations field.
func (o *UdaConfigParams) SetHostOsSpecificConfigurations(v []UdaHostOsSpecificParams) {
	o.HostOsSpecificConfigurations = v
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaConfigParams) GetIndex() UdaIndexParams {
	if o == nil || IsNil(o.Index.Get()) {
		var ret UdaIndexParams
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaConfigParams) GetIndexOk() (*UdaIndexParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *UdaConfigParams) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableUdaIndexParams and assigns it to the Index field.
func (o *UdaConfigParams) SetIndex(v UdaIndexParams) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *UdaConfigParams) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *UdaConfigParams) UnsetIndex() {
	o.Index.Unset()
}

func (o UdaConfigParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaConfigParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HostOsSpecificConfigurations) {
		toSerialize["hostOsSpecificConfigurations"] = o.HostOsSpecificConfigurations
	}
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	return toSerialize, nil
}

type NullableUdaConfigParams struct {
	value *UdaConfigParams
	isSet bool
}

func (v NullableUdaConfigParams) Get() *UdaConfigParams {
	return v.value
}

func (v *NullableUdaConfigParams) Set(val *UdaConfigParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaConfigParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaConfigParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaConfigParams(val *UdaConfigParams) *NullableUdaConfigParams {
	return &NullableUdaConfigParams{value: val, isSet: true}
}

func (v NullableUdaConfigParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaConfigParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


