/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BifrostConnections type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BifrostConnections{}

// BifrostConnections Specify a list of connection of Bifrost.
type BifrostConnections struct {
	// Specifies a list of connection of Bifrost.
	BifrostConnections []BifrostConnection `json:"BifrostConnections,omitempty"`
}

// NewBifrostConnections instantiates a new BifrostConnections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBifrostConnections() *BifrostConnections {
	this := BifrostConnections{}
	return &this
}

// NewBifrostConnectionsWithDefaults instantiates a new BifrostConnections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBifrostConnectionsWithDefaults() *BifrostConnections {
	this := BifrostConnections{}
	return &this
}

// GetBifrostConnections returns the BifrostConnections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BifrostConnections) GetBifrostConnections() []BifrostConnection {
	if o == nil {
		var ret []BifrostConnection
		return ret
	}
	return o.BifrostConnections
}

// GetBifrostConnectionsOk returns a tuple with the BifrostConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnections) GetBifrostConnectionsOk() ([]BifrostConnection, bool) {
	if o == nil || IsNil(o.BifrostConnections) {
		return nil, false
	}
	return o.BifrostConnections, true
}

// HasBifrostConnections returns a boolean if a field has been set.
func (o *BifrostConnections) HasBifrostConnections() bool {
	if o != nil && !IsNil(o.BifrostConnections) {
		return true
	}

	return false
}

// SetBifrostConnections gets a reference to the given []BifrostConnection and assigns it to the BifrostConnections field.
func (o *BifrostConnections) SetBifrostConnections(v []BifrostConnection) {
	o.BifrostConnections = v
}

func (o BifrostConnections) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BifrostConnections) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BifrostConnections != nil {
		toSerialize["BifrostConnections"] = o.BifrostConnections
	}
	return toSerialize, nil
}

type NullableBifrostConnections struct {
	value *BifrostConnections
	isSet bool
}

func (v NullableBifrostConnections) Get() *BifrostConnections {
	return v.value
}

func (v *NullableBifrostConnections) Set(val *BifrostConnections) {
	v.value = val
	v.isSet = true
}

func (v NullableBifrostConnections) IsSet() bool {
	return v.isSet
}

func (v *NullableBifrostConnections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBifrostConnections(val *BifrostConnections) *NullableBifrostConnections {
	return &NullableBifrostConnections{value: val, isSet: true}
}

func (v NullableBifrostConnections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBifrostConnections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


