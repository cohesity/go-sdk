/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the VmwareTargetParamsForRecoverVApp type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmwareTargetParamsForRecoverVApp{}

// VmwareTargetParamsForRecoverVApp Specifies the parameters for a VMware recovery target.
type VmwareTargetParamsForRecoverVApp struct {
	// Specifies whether to attempt differential restore.
	AttemptDifferentialRestore NullableBool `json:"attemptDifferentialRestore,omitempty"`
	// Specifies whether to continue recovering other vms if one of vms failed to recover. Default value is false.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies the Virtual Disk Provisioning Policies for Vmware VM
	DiskProvisionType NullableString `json:"diskProvisionType,omitempty"`
	// If this field is set to true and SAN transport recovery fails, then recovery will fallback to use NBDSSL transport. This field only applies if 'leverageSanTransport' is set to true.
	EnableNBDSSLFallback NullableBool `json:"enableNBDSSLFallback,omitempty"`
	// Specifies whether to enable SAN transport for copy recovery or not
	LeverageSanTransport NullableBool `json:"leverageSanTransport,omitempty"`
	// Specifies whether to power on vms after recovery. If not specified, or false, recovered vms will be in powered off state.
	PowerOnVms NullableBool `json:"powerOnVms,omitempty"`
	// Specifies type of Recovery Process to be used. InstantRecovery/CopyRecovery etc... Default value is InstantRecovery.
	RecoveryProcessType *string `json:"recoveryProcessType,omitempty"`
	RecoveryTargetConfig NullableVmwareTargetParamsForRecoverVAppRecoveryTargetConfig `json:"recoveryTargetConfig,omitempty"`
	RenameRecoveredVAppsParams NullableVmwareTargetParamsForRecoverVAppRenameRecoveredVAppsParams `json:"renameRecoveredVAppsParams,omitempty"`
	RenameRecoveredVmsParams NullableAcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams `json:"renameRecoveredVmsParams,omitempty"`
	VlanConfig NullableAcropolisTargetParamsForRecoverVmVlanConfig `json:"vlanConfig,omitempty"`
}

// NewVmwareTargetParamsForRecoverVApp instantiates a new VmwareTargetParamsForRecoverVApp object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareTargetParamsForRecoverVApp() *VmwareTargetParamsForRecoverVApp {
	this := VmwareTargetParamsForRecoverVApp{}
	return &this
}

// NewVmwareTargetParamsForRecoverVAppWithDefaults instantiates a new VmwareTargetParamsForRecoverVApp object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareTargetParamsForRecoverVAppWithDefaults() *VmwareTargetParamsForRecoverVApp {
	this := VmwareTargetParamsForRecoverVApp{}
	return &this
}

// GetAttemptDifferentialRestore returns the AttemptDifferentialRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareTargetParamsForRecoverVApp) GetAttemptDifferentialRestore() bool {
	if o == nil || IsNil(o.AttemptDifferentialRestore.Get()) {
		var ret bool
		return ret
	}
	return *o.AttemptDifferentialRestore.Get()
}

// GetAttemptDifferentialRestoreOk returns a tuple with the AttemptDifferentialRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareTargetParamsForRecoverVApp) GetAttemptDifferentialRestoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttemptDifferentialRestore.Get(), o.AttemptDifferentialRestore.IsSet()
}

// HasAttemptDifferentialRestore returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasAttemptDifferentialRestore() bool {
	if o != nil && o.AttemptDifferentialRestore.IsSet() {
		return true
	}

	return false
}

// SetAttemptDifferentialRestore gets a reference to the given NullableBool and assigns it to the AttemptDifferentialRestore field.
func (o *VmwareTargetParamsForRecoverVApp) SetAttemptDifferentialRestore(v bool) {
	o.AttemptDifferentialRestore.Set(&v)
}
// SetAttemptDifferentialRestoreNil sets the value for AttemptDifferentialRestore to be an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) SetAttemptDifferentialRestoreNil() {
	o.AttemptDifferentialRestore.Set(nil)
}

// UnsetAttemptDifferentialRestore ensures that no value is present for AttemptDifferentialRestore, not even an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) UnsetAttemptDifferentialRestore() {
	o.AttemptDifferentialRestore.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareTargetParamsForRecoverVApp) GetContinueOnError() bool {
	if o == nil || IsNil(o.ContinueOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareTargetParamsForRecoverVApp) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *VmwareTargetParamsForRecoverVApp) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetDiskProvisionType returns the DiskProvisionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareTargetParamsForRecoverVApp) GetDiskProvisionType() string {
	if o == nil || IsNil(o.DiskProvisionType.Get()) {
		var ret string
		return ret
	}
	return *o.DiskProvisionType.Get()
}

// GetDiskProvisionTypeOk returns a tuple with the DiskProvisionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareTargetParamsForRecoverVApp) GetDiskProvisionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskProvisionType.Get(), o.DiskProvisionType.IsSet()
}

// HasDiskProvisionType returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasDiskProvisionType() bool {
	if o != nil && o.DiskProvisionType.IsSet() {
		return true
	}

	return false
}

// SetDiskProvisionType gets a reference to the given NullableString and assigns it to the DiskProvisionType field.
func (o *VmwareTargetParamsForRecoverVApp) SetDiskProvisionType(v string) {
	o.DiskProvisionType.Set(&v)
}
// SetDiskProvisionTypeNil sets the value for DiskProvisionType to be an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) SetDiskProvisionTypeNil() {
	o.DiskProvisionType.Set(nil)
}

// UnsetDiskProvisionType ensures that no value is present for DiskProvisionType, not even an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) UnsetDiskProvisionType() {
	o.DiskProvisionType.Unset()
}

// GetEnableNBDSSLFallback returns the EnableNBDSSLFallback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareTargetParamsForRecoverVApp) GetEnableNBDSSLFallback() bool {
	if o == nil || IsNil(o.EnableNBDSSLFallback.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableNBDSSLFallback.Get()
}

// GetEnableNBDSSLFallbackOk returns a tuple with the EnableNBDSSLFallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareTargetParamsForRecoverVApp) GetEnableNBDSSLFallbackOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableNBDSSLFallback.Get(), o.EnableNBDSSLFallback.IsSet()
}

// HasEnableNBDSSLFallback returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasEnableNBDSSLFallback() bool {
	if o != nil && o.EnableNBDSSLFallback.IsSet() {
		return true
	}

	return false
}

// SetEnableNBDSSLFallback gets a reference to the given NullableBool and assigns it to the EnableNBDSSLFallback field.
func (o *VmwareTargetParamsForRecoverVApp) SetEnableNBDSSLFallback(v bool) {
	o.EnableNBDSSLFallback.Set(&v)
}
// SetEnableNBDSSLFallbackNil sets the value for EnableNBDSSLFallback to be an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) SetEnableNBDSSLFallbackNil() {
	o.EnableNBDSSLFallback.Set(nil)
}

// UnsetEnableNBDSSLFallback ensures that no value is present for EnableNBDSSLFallback, not even an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) UnsetEnableNBDSSLFallback() {
	o.EnableNBDSSLFallback.Unset()
}

// GetLeverageSanTransport returns the LeverageSanTransport field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareTargetParamsForRecoverVApp) GetLeverageSanTransport() bool {
	if o == nil || IsNil(o.LeverageSanTransport.Get()) {
		var ret bool
		return ret
	}
	return *o.LeverageSanTransport.Get()
}

// GetLeverageSanTransportOk returns a tuple with the LeverageSanTransport field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareTargetParamsForRecoverVApp) GetLeverageSanTransportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeverageSanTransport.Get(), o.LeverageSanTransport.IsSet()
}

// HasLeverageSanTransport returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasLeverageSanTransport() bool {
	if o != nil && o.LeverageSanTransport.IsSet() {
		return true
	}

	return false
}

// SetLeverageSanTransport gets a reference to the given NullableBool and assigns it to the LeverageSanTransport field.
func (o *VmwareTargetParamsForRecoverVApp) SetLeverageSanTransport(v bool) {
	o.LeverageSanTransport.Set(&v)
}
// SetLeverageSanTransportNil sets the value for LeverageSanTransport to be an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) SetLeverageSanTransportNil() {
	o.LeverageSanTransport.Set(nil)
}

// UnsetLeverageSanTransport ensures that no value is present for LeverageSanTransport, not even an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) UnsetLeverageSanTransport() {
	o.LeverageSanTransport.Unset()
}

// GetPowerOnVms returns the PowerOnVms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareTargetParamsForRecoverVApp) GetPowerOnVms() bool {
	if o == nil || IsNil(o.PowerOnVms.Get()) {
		var ret bool
		return ret
	}
	return *o.PowerOnVms.Get()
}

// GetPowerOnVmsOk returns a tuple with the PowerOnVms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareTargetParamsForRecoverVApp) GetPowerOnVmsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PowerOnVms.Get(), o.PowerOnVms.IsSet()
}

// HasPowerOnVms returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasPowerOnVms() bool {
	if o != nil && o.PowerOnVms.IsSet() {
		return true
	}

	return false
}

// SetPowerOnVms gets a reference to the given NullableBool and assigns it to the PowerOnVms field.
func (o *VmwareTargetParamsForRecoverVApp) SetPowerOnVms(v bool) {
	o.PowerOnVms.Set(&v)
}
// SetPowerOnVmsNil sets the value for PowerOnVms to be an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) SetPowerOnVmsNil() {
	o.PowerOnVms.Set(nil)
}

// UnsetPowerOnVms ensures that no value is present for PowerOnVms, not even an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) UnsetPowerOnVms() {
	o.PowerOnVms.Unset()
}

// GetRecoveryProcessType returns the RecoveryProcessType field value if set, zero value otherwise.
func (o *VmwareTargetParamsForRecoverVApp) GetRecoveryProcessType() string {
	if o == nil || IsNil(o.RecoveryProcessType) {
		var ret string
		return ret
	}
	return *o.RecoveryProcessType
}

// GetRecoveryProcessTypeOk returns a tuple with the RecoveryProcessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareTargetParamsForRecoverVApp) GetRecoveryProcessTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecoveryProcessType) {
		return nil, false
	}
	return o.RecoveryProcessType, true
}

// HasRecoveryProcessType returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasRecoveryProcessType() bool {
	if o != nil && !IsNil(o.RecoveryProcessType) {
		return true
	}

	return false
}

// SetRecoveryProcessType gets a reference to the given string and assigns it to the RecoveryProcessType field.
func (o *VmwareTargetParamsForRecoverVApp) SetRecoveryProcessType(v string) {
	o.RecoveryProcessType = &v
}

// GetRecoveryTargetConfig returns the RecoveryTargetConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareTargetParamsForRecoverVApp) GetRecoveryTargetConfig() VmwareTargetParamsForRecoverVAppRecoveryTargetConfig {
	if o == nil || IsNil(o.RecoveryTargetConfig.Get()) {
		var ret VmwareTargetParamsForRecoverVAppRecoveryTargetConfig
		return ret
	}
	return *o.RecoveryTargetConfig.Get()
}

// GetRecoveryTargetConfigOk returns a tuple with the RecoveryTargetConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareTargetParamsForRecoverVApp) GetRecoveryTargetConfigOk() (*VmwareTargetParamsForRecoverVAppRecoveryTargetConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoveryTargetConfig.Get(), o.RecoveryTargetConfig.IsSet()
}

// HasRecoveryTargetConfig returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasRecoveryTargetConfig() bool {
	if o != nil && o.RecoveryTargetConfig.IsSet() {
		return true
	}

	return false
}

// SetRecoveryTargetConfig gets a reference to the given NullableVmwareTargetParamsForRecoverVAppRecoveryTargetConfig and assigns it to the RecoveryTargetConfig field.
func (o *VmwareTargetParamsForRecoverVApp) SetRecoveryTargetConfig(v VmwareTargetParamsForRecoverVAppRecoveryTargetConfig) {
	o.RecoveryTargetConfig.Set(&v)
}
// SetRecoveryTargetConfigNil sets the value for RecoveryTargetConfig to be an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) SetRecoveryTargetConfigNil() {
	o.RecoveryTargetConfig.Set(nil)
}

// UnsetRecoveryTargetConfig ensures that no value is present for RecoveryTargetConfig, not even an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) UnsetRecoveryTargetConfig() {
	o.RecoveryTargetConfig.Unset()
}

// GetRenameRecoveredVAppsParams returns the RenameRecoveredVAppsParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareTargetParamsForRecoverVApp) GetRenameRecoveredVAppsParams() VmwareTargetParamsForRecoverVAppRenameRecoveredVAppsParams {
	if o == nil || IsNil(o.RenameRecoveredVAppsParams.Get()) {
		var ret VmwareTargetParamsForRecoverVAppRenameRecoveredVAppsParams
		return ret
	}
	return *o.RenameRecoveredVAppsParams.Get()
}

// GetRenameRecoveredVAppsParamsOk returns a tuple with the RenameRecoveredVAppsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareTargetParamsForRecoverVApp) GetRenameRecoveredVAppsParamsOk() (*VmwareTargetParamsForRecoverVAppRenameRecoveredVAppsParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenameRecoveredVAppsParams.Get(), o.RenameRecoveredVAppsParams.IsSet()
}

// HasRenameRecoveredVAppsParams returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasRenameRecoveredVAppsParams() bool {
	if o != nil && o.RenameRecoveredVAppsParams.IsSet() {
		return true
	}

	return false
}

// SetRenameRecoveredVAppsParams gets a reference to the given NullableVmwareTargetParamsForRecoverVAppRenameRecoveredVAppsParams and assigns it to the RenameRecoveredVAppsParams field.
func (o *VmwareTargetParamsForRecoverVApp) SetRenameRecoveredVAppsParams(v VmwareTargetParamsForRecoverVAppRenameRecoveredVAppsParams) {
	o.RenameRecoveredVAppsParams.Set(&v)
}
// SetRenameRecoveredVAppsParamsNil sets the value for RenameRecoveredVAppsParams to be an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) SetRenameRecoveredVAppsParamsNil() {
	o.RenameRecoveredVAppsParams.Set(nil)
}

// UnsetRenameRecoveredVAppsParams ensures that no value is present for RenameRecoveredVAppsParams, not even an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) UnsetRenameRecoveredVAppsParams() {
	o.RenameRecoveredVAppsParams.Unset()
}

// GetRenameRecoveredVmsParams returns the RenameRecoveredVmsParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareTargetParamsForRecoverVApp) GetRenameRecoveredVmsParams() AcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams {
	if o == nil || IsNil(o.RenameRecoveredVmsParams.Get()) {
		var ret AcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams
		return ret
	}
	return *o.RenameRecoveredVmsParams.Get()
}

// GetRenameRecoveredVmsParamsOk returns a tuple with the RenameRecoveredVmsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareTargetParamsForRecoverVApp) GetRenameRecoveredVmsParamsOk() (*AcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenameRecoveredVmsParams.Get(), o.RenameRecoveredVmsParams.IsSet()
}

// HasRenameRecoveredVmsParams returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasRenameRecoveredVmsParams() bool {
	if o != nil && o.RenameRecoveredVmsParams.IsSet() {
		return true
	}

	return false
}

// SetRenameRecoveredVmsParams gets a reference to the given NullableAcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams and assigns it to the RenameRecoveredVmsParams field.
func (o *VmwareTargetParamsForRecoverVApp) SetRenameRecoveredVmsParams(v AcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams) {
	o.RenameRecoveredVmsParams.Set(&v)
}
// SetRenameRecoveredVmsParamsNil sets the value for RenameRecoveredVmsParams to be an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) SetRenameRecoveredVmsParamsNil() {
	o.RenameRecoveredVmsParams.Set(nil)
}

// UnsetRenameRecoveredVmsParams ensures that no value is present for RenameRecoveredVmsParams, not even an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) UnsetRenameRecoveredVmsParams() {
	o.RenameRecoveredVmsParams.Unset()
}

// GetVlanConfig returns the VlanConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareTargetParamsForRecoverVApp) GetVlanConfig() AcropolisTargetParamsForRecoverVmVlanConfig {
	if o == nil || IsNil(o.VlanConfig.Get()) {
		var ret AcropolisTargetParamsForRecoverVmVlanConfig
		return ret
	}
	return *o.VlanConfig.Get()
}

// GetVlanConfigOk returns a tuple with the VlanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareTargetParamsForRecoverVApp) GetVlanConfigOk() (*AcropolisTargetParamsForRecoverVmVlanConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.VlanConfig.Get(), o.VlanConfig.IsSet()
}

// HasVlanConfig returns a boolean if a field has been set.
func (o *VmwareTargetParamsForRecoverVApp) HasVlanConfig() bool {
	if o != nil && o.VlanConfig.IsSet() {
		return true
	}

	return false
}

// SetVlanConfig gets a reference to the given NullableAcropolisTargetParamsForRecoverVmVlanConfig and assigns it to the VlanConfig field.
func (o *VmwareTargetParamsForRecoverVApp) SetVlanConfig(v AcropolisTargetParamsForRecoverVmVlanConfig) {
	o.VlanConfig.Set(&v)
}
// SetVlanConfigNil sets the value for VlanConfig to be an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) SetVlanConfigNil() {
	o.VlanConfig.Set(nil)
}

// UnsetVlanConfig ensures that no value is present for VlanConfig, not even an explicit nil
func (o *VmwareTargetParamsForRecoverVApp) UnsetVlanConfig() {
	o.VlanConfig.Unset()
}

func (o VmwareTargetParamsForRecoverVApp) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmwareTargetParamsForRecoverVApp) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AttemptDifferentialRestore.IsSet() {
		toSerialize["attemptDifferentialRestore"] = o.AttemptDifferentialRestore.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.DiskProvisionType.IsSet() {
		toSerialize["diskProvisionType"] = o.DiskProvisionType.Get()
	}
	if o.EnableNBDSSLFallback.IsSet() {
		toSerialize["enableNBDSSLFallback"] = o.EnableNBDSSLFallback.Get()
	}
	if o.LeverageSanTransport.IsSet() {
		toSerialize["leverageSanTransport"] = o.LeverageSanTransport.Get()
	}
	if o.PowerOnVms.IsSet() {
		toSerialize["powerOnVms"] = o.PowerOnVms.Get()
	}
	if !IsNil(o.RecoveryProcessType) {
		toSerialize["recoveryProcessType"] = o.RecoveryProcessType
	}
	if o.RecoveryTargetConfig.IsSet() {
		toSerialize["recoveryTargetConfig"] = o.RecoveryTargetConfig.Get()
	}
	if o.RenameRecoveredVAppsParams.IsSet() {
		toSerialize["renameRecoveredVAppsParams"] = o.RenameRecoveredVAppsParams.Get()
	}
	if o.RenameRecoveredVmsParams.IsSet() {
		toSerialize["renameRecoveredVmsParams"] = o.RenameRecoveredVmsParams.Get()
	}
	if o.VlanConfig.IsSet() {
		toSerialize["vlanConfig"] = o.VlanConfig.Get()
	}
	return toSerialize, nil
}

type NullableVmwareTargetParamsForRecoverVApp struct {
	value *VmwareTargetParamsForRecoverVApp
	isSet bool
}

func (v NullableVmwareTargetParamsForRecoverVApp) Get() *VmwareTargetParamsForRecoverVApp {
	return v.value
}

func (v *NullableVmwareTargetParamsForRecoverVApp) Set(val *VmwareTargetParamsForRecoverVApp) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareTargetParamsForRecoverVApp) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareTargetParamsForRecoverVApp) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareTargetParamsForRecoverVApp(val *VmwareTargetParamsForRecoverVApp) *NullableVmwareTargetParamsForRecoverVApp {
	return &NullableVmwareTargetParamsForRecoverVApp{value: val, isSet: true}
}

func (v NullableVmwareTargetParamsForRecoverVApp) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareTargetParamsForRecoverVApp) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


