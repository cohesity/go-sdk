/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataAccessSnapshotInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataAccessSnapshotInfo{}

// DataAccessSnapshotInfo Specifies the snapshot information.
type DataAccessSnapshotInfo struct {
	// Specifies the entity id of the object.
	ObjectId int64 `json:"objectId"`
	// Specifies the time to which the object needs to be restored. If this is not specified the object is restore from the base snapshot identified by the run_start_time_usecs.
	RestoreTimeUsecs NullableInt64 `json:"restoreTimeUsecs,omitempty"`
	// Specifies the id of the object snapshot.
	SnapshotId string `json:"snapshotId"`
	// Specifies Id of the Vault from which the object is restored. This field must be set if the object is to be restored/retrieved from an archive.
	VaultId NullableInt64 `json:"vaultId,omitempty"`
}

type _DataAccessSnapshotInfo DataAccessSnapshotInfo

// NewDataAccessSnapshotInfo instantiates a new DataAccessSnapshotInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataAccessSnapshotInfo(objectId int64, snapshotId string) *DataAccessSnapshotInfo {
	this := DataAccessSnapshotInfo{}
	this.ObjectId = objectId
	this.SnapshotId = snapshotId
	return &this
}

// NewDataAccessSnapshotInfoWithDefaults instantiates a new DataAccessSnapshotInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataAccessSnapshotInfoWithDefaults() *DataAccessSnapshotInfo {
	this := DataAccessSnapshotInfo{}
	return &this
}

// GetObjectId returns the ObjectId field value
func (o *DataAccessSnapshotInfo) GetObjectId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *DataAccessSnapshotInfo) GetObjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *DataAccessSnapshotInfo) SetObjectId(v int64) {
	o.ObjectId = v
}

// GetRestoreTimeUsecs returns the RestoreTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataAccessSnapshotInfo) GetRestoreTimeUsecs() int64 {
	if o == nil || IsNil(o.RestoreTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.RestoreTimeUsecs.Get()
}

// GetRestoreTimeUsecsOk returns a tuple with the RestoreTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataAccessSnapshotInfo) GetRestoreTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreTimeUsecs.Get(), o.RestoreTimeUsecs.IsSet()
}

// HasRestoreTimeUsecs returns a boolean if a field has been set.
func (o *DataAccessSnapshotInfo) HasRestoreTimeUsecs() bool {
	if o != nil && o.RestoreTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRestoreTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RestoreTimeUsecs field.
func (o *DataAccessSnapshotInfo) SetRestoreTimeUsecs(v int64) {
	o.RestoreTimeUsecs.Set(&v)
}
// SetRestoreTimeUsecsNil sets the value for RestoreTimeUsecs to be an explicit nil
func (o *DataAccessSnapshotInfo) SetRestoreTimeUsecsNil() {
	o.RestoreTimeUsecs.Set(nil)
}

// UnsetRestoreTimeUsecs ensures that no value is present for RestoreTimeUsecs, not even an explicit nil
func (o *DataAccessSnapshotInfo) UnsetRestoreTimeUsecs() {
	o.RestoreTimeUsecs.Unset()
}

// GetSnapshotId returns the SnapshotId field value
func (o *DataAccessSnapshotInfo) GetSnapshotId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SnapshotId
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
func (o *DataAccessSnapshotInfo) GetSnapshotIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SnapshotId, true
}

// SetSnapshotId sets field value
func (o *DataAccessSnapshotInfo) SetSnapshotId(v string) {
	o.SnapshotId = v
}

// GetVaultId returns the VaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataAccessSnapshotInfo) GetVaultId() int64 {
	if o == nil || IsNil(o.VaultId.Get()) {
		var ret int64
		return ret
	}
	return *o.VaultId.Get()
}

// GetVaultIdOk returns a tuple with the VaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataAccessSnapshotInfo) GetVaultIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.VaultId.Get(), o.VaultId.IsSet()
}

// HasVaultId returns a boolean if a field has been set.
func (o *DataAccessSnapshotInfo) HasVaultId() bool {
	if o != nil && o.VaultId.IsSet() {
		return true
	}

	return false
}

// SetVaultId gets a reference to the given NullableInt64 and assigns it to the VaultId field.
func (o *DataAccessSnapshotInfo) SetVaultId(v int64) {
	o.VaultId.Set(&v)
}
// SetVaultIdNil sets the value for VaultId to be an explicit nil
func (o *DataAccessSnapshotInfo) SetVaultIdNil() {
	o.VaultId.Set(nil)
}

// UnsetVaultId ensures that no value is present for VaultId, not even an explicit nil
func (o *DataAccessSnapshotInfo) UnsetVaultId() {
	o.VaultId.Unset()
}

func (o DataAccessSnapshotInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataAccessSnapshotInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["objectId"] = o.ObjectId
	if o.RestoreTimeUsecs.IsSet() {
		toSerialize["restoreTimeUsecs"] = o.RestoreTimeUsecs.Get()
	}
	toSerialize["snapshotId"] = o.SnapshotId
	if o.VaultId.IsSet() {
		toSerialize["vaultId"] = o.VaultId.Get()
	}
	return toSerialize, nil
}

func (o *DataAccessSnapshotInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectId",
		"snapshotId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataAccessSnapshotInfo := _DataAccessSnapshotInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataAccessSnapshotInfo)

	if err != nil {
		return err
	}

	*o = DataAccessSnapshotInfo(varDataAccessSnapshotInfo)

	return err
}

type NullableDataAccessSnapshotInfo struct {
	value *DataAccessSnapshotInfo
	isSet bool
}

func (v NullableDataAccessSnapshotInfo) Get() *DataAccessSnapshotInfo {
	return v.value
}

func (v *NullableDataAccessSnapshotInfo) Set(val *DataAccessSnapshotInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDataAccessSnapshotInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDataAccessSnapshotInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataAccessSnapshotInfo(val *DataAccessSnapshotInfo) *NullableDataAccessSnapshotInfo {
	return &NullableDataAccessSnapshotInfo{value: val, isSet: true}
}

func (v NullableDataAccessSnapshotInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataAccessSnapshotInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


