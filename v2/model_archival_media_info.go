/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ArchivalMediaInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchivalMediaInfo{}

// ArchivalMediaInfo Specifies the media information in QStar Archival.
type ArchivalMediaInfo struct {
	// Specifies a unique identifier for the media.
	Barcode NullableString `json:"barcode,omitempty"`
	// Specifies a flag that indicates if the media is online or offline. Offline media must be manually loaded into the media library before a recovery can occur.
	IsOnline NullableBool `json:"isOnline,omitempty"`
	// Specifies the location of the offline media as recorded by the backup administrator using media management software.
	Location NullableString `json:"location,omitempty"`
}

// NewArchivalMediaInfo instantiates a new ArchivalMediaInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalMediaInfo() *ArchivalMediaInfo {
	this := ArchivalMediaInfo{}
	return &this
}

// NewArchivalMediaInfoWithDefaults instantiates a new ArchivalMediaInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalMediaInfoWithDefaults() *ArchivalMediaInfo {
	this := ArchivalMediaInfo{}
	return &this
}

// GetBarcode returns the Barcode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalMediaInfo) GetBarcode() string {
	if o == nil || IsNil(o.Barcode.Get()) {
		var ret string
		return ret
	}
	return *o.Barcode.Get()
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalMediaInfo) GetBarcodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Barcode.Get(), o.Barcode.IsSet()
}

// HasBarcode returns a boolean if a field has been set.
func (o *ArchivalMediaInfo) HasBarcode() bool {
	if o != nil && o.Barcode.IsSet() {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given NullableString and assigns it to the Barcode field.
func (o *ArchivalMediaInfo) SetBarcode(v string) {
	o.Barcode.Set(&v)
}
// SetBarcodeNil sets the value for Barcode to be an explicit nil
func (o *ArchivalMediaInfo) SetBarcodeNil() {
	o.Barcode.Set(nil)
}

// UnsetBarcode ensures that no value is present for Barcode, not even an explicit nil
func (o *ArchivalMediaInfo) UnsetBarcode() {
	o.Barcode.Unset()
}

// GetIsOnline returns the IsOnline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalMediaInfo) GetIsOnline() bool {
	if o == nil || IsNil(o.IsOnline.Get()) {
		var ret bool
		return ret
	}
	return *o.IsOnline.Get()
}

// GetIsOnlineOk returns a tuple with the IsOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalMediaInfo) GetIsOnlineOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsOnline.Get(), o.IsOnline.IsSet()
}

// HasIsOnline returns a boolean if a field has been set.
func (o *ArchivalMediaInfo) HasIsOnline() bool {
	if o != nil && o.IsOnline.IsSet() {
		return true
	}

	return false
}

// SetIsOnline gets a reference to the given NullableBool and assigns it to the IsOnline field.
func (o *ArchivalMediaInfo) SetIsOnline(v bool) {
	o.IsOnline.Set(&v)
}
// SetIsOnlineNil sets the value for IsOnline to be an explicit nil
func (o *ArchivalMediaInfo) SetIsOnlineNil() {
	o.IsOnline.Set(nil)
}

// UnsetIsOnline ensures that no value is present for IsOnline, not even an explicit nil
func (o *ArchivalMediaInfo) UnsetIsOnline() {
	o.IsOnline.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalMediaInfo) GetLocation() string {
	if o == nil || IsNil(o.Location.Get()) {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalMediaInfo) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *ArchivalMediaInfo) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *ArchivalMediaInfo) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *ArchivalMediaInfo) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *ArchivalMediaInfo) UnsetLocation() {
	o.Location.Unset()
}

func (o ArchivalMediaInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchivalMediaInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Barcode.IsSet() {
		toSerialize["barcode"] = o.Barcode.Get()
	}
	if o.IsOnline.IsSet() {
		toSerialize["isOnline"] = o.IsOnline.Get()
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	return toSerialize, nil
}

type NullableArchivalMediaInfo struct {
	value *ArchivalMediaInfo
	isSet bool
}

func (v NullableArchivalMediaInfo) Get() *ArchivalMediaInfo {
	return v.value
}

func (v *NullableArchivalMediaInfo) Set(val *ArchivalMediaInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalMediaInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalMediaInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalMediaInfo(val *ArchivalMediaInfo) *NullableArchivalMediaInfo {
	return &NullableArchivalMediaInfo{value: val, isSet: true}
}

func (v NullableArchivalMediaInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalMediaInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


