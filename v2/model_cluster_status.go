/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClusterStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterStatus{}

// ClusterStatus Describes the cluster status.
type ClusterStatus struct {
	AirgapConfigStats *AirgapConfig `json:"airgapConfigStats,omitempty"`
	// Specifies the id of the cluster.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the cluster incarnation id.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId,omitempty"`
	// Specifies the current operation of the cluster.
	CurrentOperation NullableString `json:"currentOperation,omitempty"`
	// Specifies an optional message describing details of the cluster status.
	Message NullableString `json:"message,omitempty"`
	// Specifies the name of the cluster.
	Name NullableString `json:"name,omitempty"`
	// Specifies the status of each node on the cluster.
	NodeStatuses []NodeStatusResult `json:"nodeStatuses,omitempty"`
	// RemovalState specifies the possible states for removal operations happening on the cluster.
	RemovalState NullableString `json:"removalState,omitempty"`
	// Specifies whether or not the services are synced with the list of stopped services.
	ServicesSynced NullableBool `json:"servicesSynced,omitempty"`
	// Specifies the software version of the cluster.
	SoftwareVersion NullableString `json:"softwareVersion,omitempty"`
	// Specifies the service name.
	StoppedServices []string `json:"stoppedServices,omitempty"`
	// Specifies the status of each system app on the cluster.
	SystemAppStatus []SystemAppStatusParams `json:"systemAppStatus,omitempty"`
}

// NewClusterStatus instantiates a new ClusterStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterStatus() *ClusterStatus {
	this := ClusterStatus{}
	return &this
}

// NewClusterStatusWithDefaults instantiates a new ClusterStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterStatusWithDefaults() *ClusterStatus {
	this := ClusterStatus{}
	return &this
}

// GetAirgapConfigStats returns the AirgapConfigStats field value if set, zero value otherwise.
func (o *ClusterStatus) GetAirgapConfigStats() AirgapConfig {
	if o == nil || IsNil(o.AirgapConfigStats) {
		var ret AirgapConfig
		return ret
	}
	return *o.AirgapConfigStats
}

// GetAirgapConfigStatsOk returns a tuple with the AirgapConfigStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStatus) GetAirgapConfigStatsOk() (*AirgapConfig, bool) {
	if o == nil || IsNil(o.AirgapConfigStats) {
		return nil, false
	}
	return o.AirgapConfigStats, true
}

// HasAirgapConfigStats returns a boolean if a field has been set.
func (o *ClusterStatus) HasAirgapConfigStats() bool {
	if o != nil && !IsNil(o.AirgapConfigStats) {
		return true
	}

	return false
}

// SetAirgapConfigStats gets a reference to the given AirgapConfig and assigns it to the AirgapConfigStats field.
func (o *ClusterStatus) SetAirgapConfigStats(v AirgapConfig) {
	o.AirgapConfigStats = &v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetClusterId() int64 {
	if o == nil || IsNil(o.ClusterId.Get()) {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetClusterIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *ClusterStatus) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *ClusterStatus) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *ClusterStatus) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *ClusterStatus) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetClusterIncarnationId() int64 {
	if o == nil || IsNil(o.ClusterIncarnationId.Get()) {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *ClusterStatus) HasClusterIncarnationId() bool {
	if o != nil && o.ClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the ClusterIncarnationId field.
func (o *ClusterStatus) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}
// SetClusterIncarnationIdNil sets the value for ClusterIncarnationId to be an explicit nil
func (o *ClusterStatus) SetClusterIncarnationIdNil() {
	o.ClusterIncarnationId.Set(nil)
}

// UnsetClusterIncarnationId ensures that no value is present for ClusterIncarnationId, not even an explicit nil
func (o *ClusterStatus) UnsetClusterIncarnationId() {
	o.ClusterIncarnationId.Unset()
}

// GetCurrentOperation returns the CurrentOperation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetCurrentOperation() string {
	if o == nil || IsNil(o.CurrentOperation.Get()) {
		var ret string
		return ret
	}
	return *o.CurrentOperation.Get()
}

// GetCurrentOperationOk returns a tuple with the CurrentOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetCurrentOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentOperation.Get(), o.CurrentOperation.IsSet()
}

// HasCurrentOperation returns a boolean if a field has been set.
func (o *ClusterStatus) HasCurrentOperation() bool {
	if o != nil && o.CurrentOperation.IsSet() {
		return true
	}

	return false
}

// SetCurrentOperation gets a reference to the given NullableString and assigns it to the CurrentOperation field.
func (o *ClusterStatus) SetCurrentOperation(v string) {
	o.CurrentOperation.Set(&v)
}
// SetCurrentOperationNil sets the value for CurrentOperation to be an explicit nil
func (o *ClusterStatus) SetCurrentOperationNil() {
	o.CurrentOperation.Set(nil)
}

// UnsetCurrentOperation ensures that no value is present for CurrentOperation, not even an explicit nil
func (o *ClusterStatus) UnsetCurrentOperation() {
	o.CurrentOperation.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *ClusterStatus) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *ClusterStatus) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *ClusterStatus) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *ClusterStatus) UnsetMessage() {
	o.Message.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ClusterStatus) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ClusterStatus) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ClusterStatus) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ClusterStatus) UnsetName() {
	o.Name.Unset()
}

// GetNodeStatuses returns the NodeStatuses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetNodeStatuses() []NodeStatusResult {
	if o == nil {
		var ret []NodeStatusResult
		return ret
	}
	return o.NodeStatuses
}

// GetNodeStatusesOk returns a tuple with the NodeStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetNodeStatusesOk() ([]NodeStatusResult, bool) {
	if o == nil || IsNil(o.NodeStatuses) {
		return nil, false
	}
	return o.NodeStatuses, true
}

// HasNodeStatuses returns a boolean if a field has been set.
func (o *ClusterStatus) HasNodeStatuses() bool {
	if o != nil && !IsNil(o.NodeStatuses) {
		return true
	}

	return false
}

// SetNodeStatuses gets a reference to the given []NodeStatusResult and assigns it to the NodeStatuses field.
func (o *ClusterStatus) SetNodeStatuses(v []NodeStatusResult) {
	o.NodeStatuses = v
}

// GetRemovalState returns the RemovalState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetRemovalState() string {
	if o == nil || IsNil(o.RemovalState.Get()) {
		var ret string
		return ret
	}
	return *o.RemovalState.Get()
}

// GetRemovalStateOk returns a tuple with the RemovalState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetRemovalStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalState.Get(), o.RemovalState.IsSet()
}

// HasRemovalState returns a boolean if a field has been set.
func (o *ClusterStatus) HasRemovalState() bool {
	if o != nil && o.RemovalState.IsSet() {
		return true
	}

	return false
}

// SetRemovalState gets a reference to the given NullableString and assigns it to the RemovalState field.
func (o *ClusterStatus) SetRemovalState(v string) {
	o.RemovalState.Set(&v)
}
// SetRemovalStateNil sets the value for RemovalState to be an explicit nil
func (o *ClusterStatus) SetRemovalStateNil() {
	o.RemovalState.Set(nil)
}

// UnsetRemovalState ensures that no value is present for RemovalState, not even an explicit nil
func (o *ClusterStatus) UnsetRemovalState() {
	o.RemovalState.Unset()
}

// GetServicesSynced returns the ServicesSynced field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetServicesSynced() bool {
	if o == nil || IsNil(o.ServicesSynced.Get()) {
		var ret bool
		return ret
	}
	return *o.ServicesSynced.Get()
}

// GetServicesSyncedOk returns a tuple with the ServicesSynced field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetServicesSyncedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServicesSynced.Get(), o.ServicesSynced.IsSet()
}

// HasServicesSynced returns a boolean if a field has been set.
func (o *ClusterStatus) HasServicesSynced() bool {
	if o != nil && o.ServicesSynced.IsSet() {
		return true
	}

	return false
}

// SetServicesSynced gets a reference to the given NullableBool and assigns it to the ServicesSynced field.
func (o *ClusterStatus) SetServicesSynced(v bool) {
	o.ServicesSynced.Set(&v)
}
// SetServicesSyncedNil sets the value for ServicesSynced to be an explicit nil
func (o *ClusterStatus) SetServicesSyncedNil() {
	o.ServicesSynced.Set(nil)
}

// UnsetServicesSynced ensures that no value is present for ServicesSynced, not even an explicit nil
func (o *ClusterStatus) UnsetServicesSynced() {
	o.ServicesSynced.Unset()
}

// GetSoftwareVersion returns the SoftwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetSoftwareVersion() string {
	if o == nil || IsNil(o.SoftwareVersion.Get()) {
		var ret string
		return ret
	}
	return *o.SoftwareVersion.Get()
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetSoftwareVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SoftwareVersion.Get(), o.SoftwareVersion.IsSet()
}

// HasSoftwareVersion returns a boolean if a field has been set.
func (o *ClusterStatus) HasSoftwareVersion() bool {
	if o != nil && o.SoftwareVersion.IsSet() {
		return true
	}

	return false
}

// SetSoftwareVersion gets a reference to the given NullableString and assigns it to the SoftwareVersion field.
func (o *ClusterStatus) SetSoftwareVersion(v string) {
	o.SoftwareVersion.Set(&v)
}
// SetSoftwareVersionNil sets the value for SoftwareVersion to be an explicit nil
func (o *ClusterStatus) SetSoftwareVersionNil() {
	o.SoftwareVersion.Set(nil)
}

// UnsetSoftwareVersion ensures that no value is present for SoftwareVersion, not even an explicit nil
func (o *ClusterStatus) UnsetSoftwareVersion() {
	o.SoftwareVersion.Unset()
}

// GetStoppedServices returns the StoppedServices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetStoppedServices() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.StoppedServices
}

// GetStoppedServicesOk returns a tuple with the StoppedServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetStoppedServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.StoppedServices) {
		return nil, false
	}
	return o.StoppedServices, true
}

// HasStoppedServices returns a boolean if a field has been set.
func (o *ClusterStatus) HasStoppedServices() bool {
	if o != nil && !IsNil(o.StoppedServices) {
		return true
	}

	return false
}

// SetStoppedServices gets a reference to the given []string and assigns it to the StoppedServices field.
func (o *ClusterStatus) SetStoppedServices(v []string) {
	o.StoppedServices = v
}

// GetSystemAppStatus returns the SystemAppStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStatus) GetSystemAppStatus() []SystemAppStatusParams {
	if o == nil {
		var ret []SystemAppStatusParams
		return ret
	}
	return o.SystemAppStatus
}

// GetSystemAppStatusOk returns a tuple with the SystemAppStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStatus) GetSystemAppStatusOk() ([]SystemAppStatusParams, bool) {
	if o == nil || IsNil(o.SystemAppStatus) {
		return nil, false
	}
	return o.SystemAppStatus, true
}

// HasSystemAppStatus returns a boolean if a field has been set.
func (o *ClusterStatus) HasSystemAppStatus() bool {
	if o != nil && !IsNil(o.SystemAppStatus) {
		return true
	}

	return false
}

// SetSystemAppStatus gets a reference to the given []SystemAppStatusParams and assigns it to the SystemAppStatus field.
func (o *ClusterStatus) SetSystemAppStatus(v []SystemAppStatusParams) {
	o.SystemAppStatus = v
}

func (o ClusterStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AirgapConfigStats) {
		toSerialize["airgapConfigStats"] = o.AirgapConfigStats
	}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterIncarnationId.IsSet() {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if o.CurrentOperation.IsSet() {
		toSerialize["currentOperation"] = o.CurrentOperation.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NodeStatuses != nil {
		toSerialize["nodeStatuses"] = o.NodeStatuses
	}
	if o.RemovalState.IsSet() {
		toSerialize["removalState"] = o.RemovalState.Get()
	}
	if o.ServicesSynced.IsSet() {
		toSerialize["servicesSynced"] = o.ServicesSynced.Get()
	}
	if o.SoftwareVersion.IsSet() {
		toSerialize["softwareVersion"] = o.SoftwareVersion.Get()
	}
	if o.StoppedServices != nil {
		toSerialize["stoppedServices"] = o.StoppedServices
	}
	if o.SystemAppStatus != nil {
		toSerialize["systemAppStatus"] = o.SystemAppStatus
	}
	return toSerialize, nil
}

type NullableClusterStatus struct {
	value *ClusterStatus
	isSet bool
}

func (v NullableClusterStatus) Get() *ClusterStatus {
	return v.value
}

func (v *NullableClusterStatus) Set(val *ClusterStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStatus(val *ClusterStatus) *NullableClusterStatus {
	return &NullableClusterStatus{value: val, isSet: true}
}

func (v NullableClusterStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


