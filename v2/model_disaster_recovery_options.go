/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DisasterRecoveryOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DisasterRecoveryOptions{}

// DisasterRecoveryOptions Specifies the parameters that are needed for Disaster Recovery of a database to its production configuration.
type DisasterRecoveryOptions struct {
	// Specifies whether to cleanup the original database files or to do precheck to ensure no conflicting files exists. Recovery will fail if there are any conflicting files.
	CleanupOriginalDbFiles NullableBool `json:"cleanupOriginalDbFiles,omitempty"`
	// Specifies whether the recovery is of type Disaster Recovery.
	IsDisasterRecovery NullableBool `json:"isDisasterRecovery,omitempty"`
	// Whether to rename the database ASM directory. If false, the adapter will leave the database files and continue with clone and migration of datafiles. This might cause extra files left behind on the Oracle host from the existing database instance.
	RenameDatabaseAsmDirectory NullableBool `json:"renameDatabaseAsmDirectory,omitempty"`
}

// NewDisasterRecoveryOptions instantiates a new DisasterRecoveryOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisasterRecoveryOptions() *DisasterRecoveryOptions {
	this := DisasterRecoveryOptions{}
	return &this
}

// NewDisasterRecoveryOptionsWithDefaults instantiates a new DisasterRecoveryOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDisasterRecoveryOptionsWithDefaults() *DisasterRecoveryOptions {
	this := DisasterRecoveryOptions{}
	return &this
}

// GetCleanupOriginalDbFiles returns the CleanupOriginalDbFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DisasterRecoveryOptions) GetCleanupOriginalDbFiles() bool {
	if o == nil || IsNil(o.CleanupOriginalDbFiles.Get()) {
		var ret bool
		return ret
	}
	return *o.CleanupOriginalDbFiles.Get()
}

// GetCleanupOriginalDbFilesOk returns a tuple with the CleanupOriginalDbFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DisasterRecoveryOptions) GetCleanupOriginalDbFilesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CleanupOriginalDbFiles.Get(), o.CleanupOriginalDbFiles.IsSet()
}

// HasCleanupOriginalDbFiles returns a boolean if a field has been set.
func (o *DisasterRecoveryOptions) HasCleanupOriginalDbFiles() bool {
	if o != nil && o.CleanupOriginalDbFiles.IsSet() {
		return true
	}

	return false
}

// SetCleanupOriginalDbFiles gets a reference to the given NullableBool and assigns it to the CleanupOriginalDbFiles field.
func (o *DisasterRecoveryOptions) SetCleanupOriginalDbFiles(v bool) {
	o.CleanupOriginalDbFiles.Set(&v)
}
// SetCleanupOriginalDbFilesNil sets the value for CleanupOriginalDbFiles to be an explicit nil
func (o *DisasterRecoveryOptions) SetCleanupOriginalDbFilesNil() {
	o.CleanupOriginalDbFiles.Set(nil)
}

// UnsetCleanupOriginalDbFiles ensures that no value is present for CleanupOriginalDbFiles, not even an explicit nil
func (o *DisasterRecoveryOptions) UnsetCleanupOriginalDbFiles() {
	o.CleanupOriginalDbFiles.Unset()
}

// GetIsDisasterRecovery returns the IsDisasterRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DisasterRecoveryOptions) GetIsDisasterRecovery() bool {
	if o == nil || IsNil(o.IsDisasterRecovery.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDisasterRecovery.Get()
}

// GetIsDisasterRecoveryOk returns a tuple with the IsDisasterRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DisasterRecoveryOptions) GetIsDisasterRecoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDisasterRecovery.Get(), o.IsDisasterRecovery.IsSet()
}

// HasIsDisasterRecovery returns a boolean if a field has been set.
func (o *DisasterRecoveryOptions) HasIsDisasterRecovery() bool {
	if o != nil && o.IsDisasterRecovery.IsSet() {
		return true
	}

	return false
}

// SetIsDisasterRecovery gets a reference to the given NullableBool and assigns it to the IsDisasterRecovery field.
func (o *DisasterRecoveryOptions) SetIsDisasterRecovery(v bool) {
	o.IsDisasterRecovery.Set(&v)
}
// SetIsDisasterRecoveryNil sets the value for IsDisasterRecovery to be an explicit nil
func (o *DisasterRecoveryOptions) SetIsDisasterRecoveryNil() {
	o.IsDisasterRecovery.Set(nil)
}

// UnsetIsDisasterRecovery ensures that no value is present for IsDisasterRecovery, not even an explicit nil
func (o *DisasterRecoveryOptions) UnsetIsDisasterRecovery() {
	o.IsDisasterRecovery.Unset()
}

// GetRenameDatabaseAsmDirectory returns the RenameDatabaseAsmDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DisasterRecoveryOptions) GetRenameDatabaseAsmDirectory() bool {
	if o == nil || IsNil(o.RenameDatabaseAsmDirectory.Get()) {
		var ret bool
		return ret
	}
	return *o.RenameDatabaseAsmDirectory.Get()
}

// GetRenameDatabaseAsmDirectoryOk returns a tuple with the RenameDatabaseAsmDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DisasterRecoveryOptions) GetRenameDatabaseAsmDirectoryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenameDatabaseAsmDirectory.Get(), o.RenameDatabaseAsmDirectory.IsSet()
}

// HasRenameDatabaseAsmDirectory returns a boolean if a field has been set.
func (o *DisasterRecoveryOptions) HasRenameDatabaseAsmDirectory() bool {
	if o != nil && o.RenameDatabaseAsmDirectory.IsSet() {
		return true
	}

	return false
}

// SetRenameDatabaseAsmDirectory gets a reference to the given NullableBool and assigns it to the RenameDatabaseAsmDirectory field.
func (o *DisasterRecoveryOptions) SetRenameDatabaseAsmDirectory(v bool) {
	o.RenameDatabaseAsmDirectory.Set(&v)
}
// SetRenameDatabaseAsmDirectoryNil sets the value for RenameDatabaseAsmDirectory to be an explicit nil
func (o *DisasterRecoveryOptions) SetRenameDatabaseAsmDirectoryNil() {
	o.RenameDatabaseAsmDirectory.Set(nil)
}

// UnsetRenameDatabaseAsmDirectory ensures that no value is present for RenameDatabaseAsmDirectory, not even an explicit nil
func (o *DisasterRecoveryOptions) UnsetRenameDatabaseAsmDirectory() {
	o.RenameDatabaseAsmDirectory.Unset()
}

func (o DisasterRecoveryOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DisasterRecoveryOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CleanupOriginalDbFiles.IsSet() {
		toSerialize["cleanupOriginalDbFiles"] = o.CleanupOriginalDbFiles.Get()
	}
	if o.IsDisasterRecovery.IsSet() {
		toSerialize["isDisasterRecovery"] = o.IsDisasterRecovery.Get()
	}
	if o.RenameDatabaseAsmDirectory.IsSet() {
		toSerialize["renameDatabaseAsmDirectory"] = o.RenameDatabaseAsmDirectory.Get()
	}
	return toSerialize, nil
}

type NullableDisasterRecoveryOptions struct {
	value *DisasterRecoveryOptions
	isSet bool
}

func (v NullableDisasterRecoveryOptions) Get() *DisasterRecoveryOptions {
	return v.value
}

func (v *NullableDisasterRecoveryOptions) Set(val *DisasterRecoveryOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableDisasterRecoveryOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableDisasterRecoveryOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisasterRecoveryOptions(val *DisasterRecoveryOptions) *NullableDisasterRecoveryOptions {
	return &NullableDisasterRecoveryOptions{value: val, isSet: true}
}

func (v NullableDisasterRecoveryOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisasterRecoveryOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


