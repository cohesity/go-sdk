/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the IpmiSdrInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpmiSdrInfo{}

// IpmiSdrInfo Specifies the sdr info for the given node ipmi.
type IpmiSdrInfo struct {
	// Specifies the list of sdr entries for the given node.
	SdrEntries []IpmiSdrInfoEntry `json:"sdrEntries,omitempty"`
}

// NewIpmiSdrInfo instantiates a new IpmiSdrInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpmiSdrInfo() *IpmiSdrInfo {
	this := IpmiSdrInfo{}
	return &this
}

// NewIpmiSdrInfoWithDefaults instantiates a new IpmiSdrInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpmiSdrInfoWithDefaults() *IpmiSdrInfo {
	this := IpmiSdrInfo{}
	return &this
}

// GetSdrEntries returns the SdrEntries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSdrInfo) GetSdrEntries() []IpmiSdrInfoEntry {
	if o == nil {
		var ret []IpmiSdrInfoEntry
		return ret
	}
	return o.SdrEntries
}

// GetSdrEntriesOk returns a tuple with the SdrEntries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSdrInfo) GetSdrEntriesOk() ([]IpmiSdrInfoEntry, bool) {
	if o == nil || IsNil(o.SdrEntries) {
		return nil, false
	}
	return o.SdrEntries, true
}

// HasSdrEntries returns a boolean if a field has been set.
func (o *IpmiSdrInfo) HasSdrEntries() bool {
	if o != nil && !IsNil(o.SdrEntries) {
		return true
	}

	return false
}

// SetSdrEntries gets a reference to the given []IpmiSdrInfoEntry and assigns it to the SdrEntries field.
func (o *IpmiSdrInfo) SetSdrEntries(v []IpmiSdrInfoEntry) {
	o.SdrEntries = v
}

func (o IpmiSdrInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpmiSdrInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SdrEntries != nil {
		toSerialize["sdrEntries"] = o.SdrEntries
	}
	return toSerialize, nil
}

type NullableIpmiSdrInfo struct {
	value *IpmiSdrInfo
	isSet bool
}

func (v NullableIpmiSdrInfo) Get() *IpmiSdrInfo {
	return v.value
}

func (v *NullableIpmiSdrInfo) Set(val *IpmiSdrInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableIpmiSdrInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableIpmiSdrInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpmiSdrInfo(val *IpmiSdrInfo) *NullableIpmiSdrInfo {
	return &NullableIpmiSdrInfo{value: val, isSet: true}
}

func (v NullableIpmiSdrInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpmiSdrInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


