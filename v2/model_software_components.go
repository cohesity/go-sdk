/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SoftwareComponents type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SoftwareComponents{}

// SoftwareComponents List of software components.
type SoftwareComponents struct {
	// List of cluster software components.
	Components []PackageComponent `json:"components,omitempty"`
}

// NewSoftwareComponents instantiates a new SoftwareComponents object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSoftwareComponents() *SoftwareComponents {
	this := SoftwareComponents{}
	return &this
}

// NewSoftwareComponentsWithDefaults instantiates a new SoftwareComponents object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSoftwareComponentsWithDefaults() *SoftwareComponents {
	this := SoftwareComponents{}
	return &this
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *SoftwareComponents) GetComponents() []PackageComponent {
	if o == nil || IsNil(o.Components) {
		var ret []PackageComponent
		return ret
	}
	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SoftwareComponents) GetComponentsOk() ([]PackageComponent, bool) {
	if o == nil || IsNil(o.Components) {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *SoftwareComponents) HasComponents() bool {
	if o != nil && !IsNil(o.Components) {
		return true
	}

	return false
}

// SetComponents gets a reference to the given []PackageComponent and assigns it to the Components field.
func (o *SoftwareComponents) SetComponents(v []PackageComponent) {
	o.Components = v
}

func (o SoftwareComponents) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SoftwareComponents) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Components) {
		toSerialize["components"] = o.Components
	}
	return toSerialize, nil
}

type NullableSoftwareComponents struct {
	value *SoftwareComponents
	isSet bool
}

func (v NullableSoftwareComponents) Get() *SoftwareComponents {
	return v.value
}

func (v *NullableSoftwareComponents) Set(val *SoftwareComponents) {
	v.value = val
	v.isSet = true
}

func (v NullableSoftwareComponents) IsSet() bool {
	return v.isSet
}

func (v *NullableSoftwareComponents) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSoftwareComponents(val *SoftwareComponents) *NullableSoftwareComponents {
	return &NullableSoftwareComponents{value: val, isSet: true}
}

func (v NullableSoftwareComponents) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSoftwareComponents) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


