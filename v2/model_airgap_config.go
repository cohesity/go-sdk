/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AirgapConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AirgapConfig{}

// AirgapConfig Specifies the Airgap configuration.
type AirgapConfig struct {
	// Specifies Airgap should be enabled or disabled.
	AirgapStatus NullableString `json:"airgapStatus,omitempty"`
	// Specifies the firewall profiles allowed when Airgap is enabled.
	ExceptionProfiles []string `json:"exceptionProfiles,omitempty"`
}

// NewAirgapConfig instantiates a new AirgapConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAirgapConfig() *AirgapConfig {
	this := AirgapConfig{}
	return &this
}

// NewAirgapConfigWithDefaults instantiates a new AirgapConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAirgapConfigWithDefaults() *AirgapConfig {
	this := AirgapConfig{}
	return &this
}

// GetAirgapStatus returns the AirgapStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AirgapConfig) GetAirgapStatus() string {
	if o == nil || IsNil(o.AirgapStatus.Get()) {
		var ret string
		return ret
	}
	return *o.AirgapStatus.Get()
}

// GetAirgapStatusOk returns a tuple with the AirgapStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AirgapConfig) GetAirgapStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AirgapStatus.Get(), o.AirgapStatus.IsSet()
}

// HasAirgapStatus returns a boolean if a field has been set.
func (o *AirgapConfig) HasAirgapStatus() bool {
	if o != nil && o.AirgapStatus.IsSet() {
		return true
	}

	return false
}

// SetAirgapStatus gets a reference to the given NullableString and assigns it to the AirgapStatus field.
func (o *AirgapConfig) SetAirgapStatus(v string) {
	o.AirgapStatus.Set(&v)
}
// SetAirgapStatusNil sets the value for AirgapStatus to be an explicit nil
func (o *AirgapConfig) SetAirgapStatusNil() {
	o.AirgapStatus.Set(nil)
}

// UnsetAirgapStatus ensures that no value is present for AirgapStatus, not even an explicit nil
func (o *AirgapConfig) UnsetAirgapStatus() {
	o.AirgapStatus.Unset()
}

// GetExceptionProfiles returns the ExceptionProfiles field value if set, zero value otherwise.
func (o *AirgapConfig) GetExceptionProfiles() []string {
	if o == nil || IsNil(o.ExceptionProfiles) {
		var ret []string
		return ret
	}
	return o.ExceptionProfiles
}

// GetExceptionProfilesOk returns a tuple with the ExceptionProfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AirgapConfig) GetExceptionProfilesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExceptionProfiles) {
		return nil, false
	}
	return o.ExceptionProfiles, true
}

// HasExceptionProfiles returns a boolean if a field has been set.
func (o *AirgapConfig) HasExceptionProfiles() bool {
	if o != nil && !IsNil(o.ExceptionProfiles) {
		return true
	}

	return false
}

// SetExceptionProfiles gets a reference to the given []string and assigns it to the ExceptionProfiles field.
func (o *AirgapConfig) SetExceptionProfiles(v []string) {
	o.ExceptionProfiles = v
}

func (o AirgapConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AirgapConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AirgapStatus.IsSet() {
		toSerialize["airgapStatus"] = o.AirgapStatus.Get()
	}
	if !IsNil(o.ExceptionProfiles) {
		toSerialize["exceptionProfiles"] = o.ExceptionProfiles
	}
	return toSerialize, nil
}

type NullableAirgapConfig struct {
	value *AirgapConfig
	isSet bool
}

func (v NullableAirgapConfig) Get() *AirgapConfig {
	return v.value
}

func (v *NullableAirgapConfig) Set(val *AirgapConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAirgapConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAirgapConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAirgapConfig(val *AirgapConfig) *NullableAirgapConfig {
	return &NullableAirgapConfig{value: val, isSet: true}
}

func (v NullableAirgapConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAirgapConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


