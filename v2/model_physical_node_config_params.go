/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PhysicalNodeConfigParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhysicalNodeConfigParams{}

// PhysicalNodeConfigParams Specifies the configuration of the nodes.
type PhysicalNodeConfigParams struct {
	// Specifies the node ID for this node.
	Id int64 `json:"id"`
	// Specifies the IP address for the node.
	Ip string `json:"ip"`
	// Specifies IPMI IP for the node.
	IpmiIp *string `json:"ipmiIp,omitempty"`
	// Specifies whether to use the node for compute only.
	IsComputeNode *bool `json:"isComputeNode,omitempty"`
}

type _PhysicalNodeConfigParams PhysicalNodeConfigParams

// NewPhysicalNodeConfigParams instantiates a new PhysicalNodeConfigParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalNodeConfigParams(id int64, ip string) *PhysicalNodeConfigParams {
	this := PhysicalNodeConfigParams{}
	this.Id = id
	this.Ip = ip
	return &this
}

// NewPhysicalNodeConfigParamsWithDefaults instantiates a new PhysicalNodeConfigParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalNodeConfigParamsWithDefaults() *PhysicalNodeConfigParams {
	this := PhysicalNodeConfigParams{}
	return &this
}

// GetId returns the Id field value
func (o *PhysicalNodeConfigParams) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PhysicalNodeConfigParams) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PhysicalNodeConfigParams) SetId(v int64) {
	o.Id = v
}

// GetIp returns the Ip field value
func (o *PhysicalNodeConfigParams) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *PhysicalNodeConfigParams) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *PhysicalNodeConfigParams) SetIp(v string) {
	o.Ip = v
}

// GetIpmiIp returns the IpmiIp field value if set, zero value otherwise.
func (o *PhysicalNodeConfigParams) GetIpmiIp() string {
	if o == nil || IsNil(o.IpmiIp) {
		var ret string
		return ret
	}
	return *o.IpmiIp
}

// GetIpmiIpOk returns a tuple with the IpmiIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalNodeConfigParams) GetIpmiIpOk() (*string, bool) {
	if o == nil || IsNil(o.IpmiIp) {
		return nil, false
	}
	return o.IpmiIp, true
}

// HasIpmiIp returns a boolean if a field has been set.
func (o *PhysicalNodeConfigParams) HasIpmiIp() bool {
	if o != nil && !IsNil(o.IpmiIp) {
		return true
	}

	return false
}

// SetIpmiIp gets a reference to the given string and assigns it to the IpmiIp field.
func (o *PhysicalNodeConfigParams) SetIpmiIp(v string) {
	o.IpmiIp = &v
}

// GetIsComputeNode returns the IsComputeNode field value if set, zero value otherwise.
func (o *PhysicalNodeConfigParams) GetIsComputeNode() bool {
	if o == nil || IsNil(o.IsComputeNode) {
		var ret bool
		return ret
	}
	return *o.IsComputeNode
}

// GetIsComputeNodeOk returns a tuple with the IsComputeNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalNodeConfigParams) GetIsComputeNodeOk() (*bool, bool) {
	if o == nil || IsNil(o.IsComputeNode) {
		return nil, false
	}
	return o.IsComputeNode, true
}

// HasIsComputeNode returns a boolean if a field has been set.
func (o *PhysicalNodeConfigParams) HasIsComputeNode() bool {
	if o != nil && !IsNil(o.IsComputeNode) {
		return true
	}

	return false
}

// SetIsComputeNode gets a reference to the given bool and assigns it to the IsComputeNode field.
func (o *PhysicalNodeConfigParams) SetIsComputeNode(v bool) {
	o.IsComputeNode = &v
}

func (o PhysicalNodeConfigParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhysicalNodeConfigParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["ip"] = o.Ip
	if !IsNil(o.IpmiIp) {
		toSerialize["ipmiIp"] = o.IpmiIp
	}
	if !IsNil(o.IsComputeNode) {
		toSerialize["isComputeNode"] = o.IsComputeNode
	}
	return toSerialize, nil
}

func (o *PhysicalNodeConfigParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"ip",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPhysicalNodeConfigParams := _PhysicalNodeConfigParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPhysicalNodeConfigParams)

	if err != nil {
		return err
	}

	*o = PhysicalNodeConfigParams(varPhysicalNodeConfigParams)

	return err
}

type NullablePhysicalNodeConfigParams struct {
	value *PhysicalNodeConfigParams
	isSet bool
}

func (v NullablePhysicalNodeConfigParams) Get() *PhysicalNodeConfigParams {
	return v.value
}

func (v *NullablePhysicalNodeConfigParams) Set(val *PhysicalNodeConfigParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalNodeConfigParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalNodeConfigParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalNodeConfigParams(val *PhysicalNodeConfigParams) *NullablePhysicalNodeConfigParams {
	return &NullablePhysicalNodeConfigParams{value: val, isSet: true}
}

func (v NullablePhysicalNodeConfigParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalNodeConfigParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


