/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3AbacServerUpdateRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3AbacServerUpdateRequestParams{}

// S3AbacServerUpdateRequestParams Specifies Request Parameters for updating a S3 ABAC server.
type S3AbacServerUpdateRequestParams struct {
	// Specifies the path of URI for user requests.
	BasePath NullableString `json:"basePath"`
	// Specifies the intermediate certificates.
	CaBundle NullableString `json:"caBundle"`
	// Specifies the client certificate.
	Certificate NullableString `json:"certificate"`
	// Specifies the RSA private key.
	Key NullableString `json:"key,omitempty"`
	// Specifies the tenant Id for S3 ABAC server.
	TenantId NullableString `json:"tenantId,omitempty"`
}

type _S3AbacServerUpdateRequestParams S3AbacServerUpdateRequestParams

// NewS3AbacServerUpdateRequestParams instantiates a new S3AbacServerUpdateRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3AbacServerUpdateRequestParams(basePath NullableString, caBundle NullableString, certificate NullableString) *S3AbacServerUpdateRequestParams {
	this := S3AbacServerUpdateRequestParams{}
	this.BasePath = basePath
	this.CaBundle = caBundle
	this.Certificate = certificate
	return &this
}

// NewS3AbacServerUpdateRequestParamsWithDefaults instantiates a new S3AbacServerUpdateRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3AbacServerUpdateRequestParamsWithDefaults() *S3AbacServerUpdateRequestParams {
	this := S3AbacServerUpdateRequestParams{}
	return &this
}

// GetBasePath returns the BasePath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3AbacServerUpdateRequestParams) GetBasePath() string {
	if o == nil || o.BasePath.Get() == nil {
		var ret string
		return ret
	}

	return *o.BasePath.Get()
}

// GetBasePathOk returns a tuple with the BasePath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerUpdateRequestParams) GetBasePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BasePath.Get(), o.BasePath.IsSet()
}

// SetBasePath sets field value
func (o *S3AbacServerUpdateRequestParams) SetBasePath(v string) {
	o.BasePath.Set(&v)
}

// GetCaBundle returns the CaBundle field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3AbacServerUpdateRequestParams) GetCaBundle() string {
	if o == nil || o.CaBundle.Get() == nil {
		var ret string
		return ret
	}

	return *o.CaBundle.Get()
}

// GetCaBundleOk returns a tuple with the CaBundle field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerUpdateRequestParams) GetCaBundleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaBundle.Get(), o.CaBundle.IsSet()
}

// SetCaBundle sets field value
func (o *S3AbacServerUpdateRequestParams) SetCaBundle(v string) {
	o.CaBundle.Set(&v)
}

// GetCertificate returns the Certificate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3AbacServerUpdateRequestParams) GetCertificate() string {
	if o == nil || o.Certificate.Get() == nil {
		var ret string
		return ret
	}

	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerUpdateRequestParams) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// SetCertificate sets field value
func (o *S3AbacServerUpdateRequestParams) SetCertificate(v string) {
	o.Certificate.Set(&v)
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3AbacServerUpdateRequestParams) GetKey() string {
	if o == nil || IsNil(o.Key.Get()) {
		var ret string
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerUpdateRequestParams) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *S3AbacServerUpdateRequestParams) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableString and assigns it to the Key field.
func (o *S3AbacServerUpdateRequestParams) SetKey(v string) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *S3AbacServerUpdateRequestParams) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *S3AbacServerUpdateRequestParams) UnsetKey() {
	o.Key.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3AbacServerUpdateRequestParams) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerUpdateRequestParams) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *S3AbacServerUpdateRequestParams) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *S3AbacServerUpdateRequestParams) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *S3AbacServerUpdateRequestParams) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *S3AbacServerUpdateRequestParams) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o S3AbacServerUpdateRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3AbacServerUpdateRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["basePath"] = o.BasePath.Get()
	toSerialize["caBundle"] = o.CaBundle.Get()
	toSerialize["certificate"] = o.Certificate.Get()
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

func (o *S3AbacServerUpdateRequestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"basePath",
		"caBundle",
		"certificate",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3AbacServerUpdateRequestParams := _S3AbacServerUpdateRequestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3AbacServerUpdateRequestParams)

	if err != nil {
		return err
	}

	*o = S3AbacServerUpdateRequestParams(varS3AbacServerUpdateRequestParams)

	return err
}

type NullableS3AbacServerUpdateRequestParams struct {
	value *S3AbacServerUpdateRequestParams
	isSet bool
}

func (v NullableS3AbacServerUpdateRequestParams) Get() *S3AbacServerUpdateRequestParams {
	return v.value
}

func (v *NullableS3AbacServerUpdateRequestParams) Set(val *S3AbacServerUpdateRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableS3AbacServerUpdateRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableS3AbacServerUpdateRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3AbacServerUpdateRequestParams(val *S3AbacServerUpdateRequestParams) *NullableS3AbacServerUpdateRequestParams {
	return &NullableS3AbacServerUpdateRequestParams{value: val, isSet: true}
}

func (v NullableS3AbacServerUpdateRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3AbacServerUpdateRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


