/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClusterMetadataDocsPurpose type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterMetadataDocsPurpose{}

// ClusterMetadataDocsPurpose Cluster Metadata Docs Purpose
type ClusterMetadataDocsPurpose struct {
	// Cluster Metadata Docs Purpose
	Purpose *string `json:"purpose,omitempty"`
}

// NewClusterMetadataDocsPurpose instantiates a new ClusterMetadataDocsPurpose object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterMetadataDocsPurpose() *ClusterMetadataDocsPurpose {
	this := ClusterMetadataDocsPurpose{}
	return &this
}

// NewClusterMetadataDocsPurposeWithDefaults instantiates a new ClusterMetadataDocsPurpose object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterMetadataDocsPurposeWithDefaults() *ClusterMetadataDocsPurpose {
	this := ClusterMetadataDocsPurpose{}
	return &this
}

// GetPurpose returns the Purpose field value if set, zero value otherwise.
func (o *ClusterMetadataDocsPurpose) GetPurpose() string {
	if o == nil || IsNil(o.Purpose) {
		var ret string
		return ret
	}
	return *o.Purpose
}

// GetPurposeOk returns a tuple with the Purpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterMetadataDocsPurpose) GetPurposeOk() (*string, bool) {
	if o == nil || IsNil(o.Purpose) {
		return nil, false
	}
	return o.Purpose, true
}

// HasPurpose returns a boolean if a field has been set.
func (o *ClusterMetadataDocsPurpose) HasPurpose() bool {
	if o != nil && !IsNil(o.Purpose) {
		return true
	}

	return false
}

// SetPurpose gets a reference to the given string and assigns it to the Purpose field.
func (o *ClusterMetadataDocsPurpose) SetPurpose(v string) {
	o.Purpose = &v
}

func (o ClusterMetadataDocsPurpose) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterMetadataDocsPurpose) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Purpose) {
		toSerialize["purpose"] = o.Purpose
	}
	return toSerialize, nil
}

type NullableClusterMetadataDocsPurpose struct {
	value *ClusterMetadataDocsPurpose
	isSet bool
}

func (v NullableClusterMetadataDocsPurpose) Get() *ClusterMetadataDocsPurpose {
	return v.value
}

func (v *NullableClusterMetadataDocsPurpose) Set(val *ClusterMetadataDocsPurpose) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterMetadataDocsPurpose) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterMetadataDocsPurpose) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterMetadataDocsPurpose(val *ClusterMetadataDocsPurpose) *NullableClusterMetadataDocsPurpose {
	return &NullableClusterMetadataDocsPurpose{value: val, isSet: true}
}

func (v NullableClusterMetadataDocsPurpose) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterMetadataDocsPurpose) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


