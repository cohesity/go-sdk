/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonExternalTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonExternalTargetParams{}

// CommonExternalTargetParams Specifies the parameters which are common between all External Target.
type CommonExternalTargetParams struct {
	// Specifies the cloud domain information.
	CloudDomains []CloudDomain `json:"cloudDomains,omitempty"`
	// Specifies whether the type of compression of the External Target
	Compression NullableString `json:"compression,omitempty"`
	// Whether to enable object lock for this vault. If this field is set, all the objects written to the vault will be object locked until all the archives referring to them expire.
	EnableObjectLock NullableBool `json:"enableObjectLock,omitempty"`
	// Specifies the error message if the event is in failed state.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Specifies the global identifier of the External Target.
	GlobalId NullableString `json:"globalId,omitempty"`
	// Specifies the ID of the External Target.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies whether this external target has been found to be capable of supporting WORM archives.
	IsWormCapable NullableBool `json:"isWormCapable,omitempty"`
	// Specifies the name of the External Target.
	Name NullableString `json:"name"`
	// Specifies whether how this external target is being consumed either Local or FortKnox.
	OwnershipContext NullableString `json:"ownershipContext,omitempty"`
	// Specifies the purpose of the External Target.
	PurposeType NullableString `json:"purposeType"`
	// Specifies the registration status of the External Target
	Status NullableString `json:"status,omitempty"`
	// Specifies the storage domain associated with the target.
	StorageDomainName NullableString `json:"storageDomainName,omitempty"`
	// Specifies the list of tenantIds for the External Target
	TenantIds []string `json:"tenantIds,omitempty"`
	// Specifies whether this external target is used to store apollo mr records.
	UseForApolloMrStore NullableBool `json:"useForApolloMrStore,omitempty"`
}

type _CommonExternalTargetParams CommonExternalTargetParams

// NewCommonExternalTargetParams instantiates a new CommonExternalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonExternalTargetParams(name NullableString, purposeType NullableString) *CommonExternalTargetParams {
	this := CommonExternalTargetParams{}
	this.Name = name
	this.PurposeType = purposeType
	return &this
}

// NewCommonExternalTargetParamsWithDefaults instantiates a new CommonExternalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonExternalTargetParamsWithDefaults() *CommonExternalTargetParams {
	this := CommonExternalTargetParams{}
	return &this
}

// GetCloudDomains returns the CloudDomains field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetCloudDomains() []CloudDomain {
	if o == nil {
		var ret []CloudDomain
		return ret
	}
	return o.CloudDomains
}

// GetCloudDomainsOk returns a tuple with the CloudDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetCloudDomainsOk() ([]CloudDomain, bool) {
	if o == nil || IsNil(o.CloudDomains) {
		return nil, false
	}
	return o.CloudDomains, true
}

// HasCloudDomains returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasCloudDomains() bool {
	if o != nil && !IsNil(o.CloudDomains) {
		return true
	}

	return false
}

// SetCloudDomains gets a reference to the given []CloudDomain and assigns it to the CloudDomains field.
func (o *CommonExternalTargetParams) SetCloudDomains(v []CloudDomain) {
	o.CloudDomains = v
}

// GetCompression returns the Compression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetCompression() string {
	if o == nil || IsNil(o.Compression.Get()) {
		var ret string
		return ret
	}
	return *o.Compression.Get()
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetCompressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Compression.Get(), o.Compression.IsSet()
}

// HasCompression returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasCompression() bool {
	if o != nil && o.Compression.IsSet() {
		return true
	}

	return false
}

// SetCompression gets a reference to the given NullableString and assigns it to the Compression field.
func (o *CommonExternalTargetParams) SetCompression(v string) {
	o.Compression.Set(&v)
}
// SetCompressionNil sets the value for Compression to be an explicit nil
func (o *CommonExternalTargetParams) SetCompressionNil() {
	o.Compression.Set(nil)
}

// UnsetCompression ensures that no value is present for Compression, not even an explicit nil
func (o *CommonExternalTargetParams) UnsetCompression() {
	o.Compression.Unset()
}

// GetEnableObjectLock returns the EnableObjectLock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetEnableObjectLock() bool {
	if o == nil || IsNil(o.EnableObjectLock.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableObjectLock.Get()
}

// GetEnableObjectLockOk returns a tuple with the EnableObjectLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetEnableObjectLockOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableObjectLock.Get(), o.EnableObjectLock.IsSet()
}

// HasEnableObjectLock returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasEnableObjectLock() bool {
	if o != nil && o.EnableObjectLock.IsSet() {
		return true
	}

	return false
}

// SetEnableObjectLock gets a reference to the given NullableBool and assigns it to the EnableObjectLock field.
func (o *CommonExternalTargetParams) SetEnableObjectLock(v bool) {
	o.EnableObjectLock.Set(&v)
}
// SetEnableObjectLockNil sets the value for EnableObjectLock to be an explicit nil
func (o *CommonExternalTargetParams) SetEnableObjectLockNil() {
	o.EnableObjectLock.Set(nil)
}

// UnsetEnableObjectLock ensures that no value is present for EnableObjectLock, not even an explicit nil
func (o *CommonExternalTargetParams) UnsetEnableObjectLock() {
	o.EnableObjectLock.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *CommonExternalTargetParams) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *CommonExternalTargetParams) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *CommonExternalTargetParams) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetGlobalId returns the GlobalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetGlobalId() string {
	if o == nil || IsNil(o.GlobalId.Get()) {
		var ret string
		return ret
	}
	return *o.GlobalId.Get()
}

// GetGlobalIdOk returns a tuple with the GlobalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetGlobalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlobalId.Get(), o.GlobalId.IsSet()
}

// HasGlobalId returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasGlobalId() bool {
	if o != nil && o.GlobalId.IsSet() {
		return true
	}

	return false
}

// SetGlobalId gets a reference to the given NullableString and assigns it to the GlobalId field.
func (o *CommonExternalTargetParams) SetGlobalId(v string) {
	o.GlobalId.Set(&v)
}
// SetGlobalIdNil sets the value for GlobalId to be an explicit nil
func (o *CommonExternalTargetParams) SetGlobalIdNil() {
	o.GlobalId.Set(nil)
}

// UnsetGlobalId ensures that no value is present for GlobalId, not even an explicit nil
func (o *CommonExternalTargetParams) UnsetGlobalId() {
	o.GlobalId.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *CommonExternalTargetParams) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CommonExternalTargetParams) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CommonExternalTargetParams) UnsetId() {
	o.Id.Unset()
}

// GetIsWormCapable returns the IsWormCapable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetIsWormCapable() bool {
	if o == nil || IsNil(o.IsWormCapable.Get()) {
		var ret bool
		return ret
	}
	return *o.IsWormCapable.Get()
}

// GetIsWormCapableOk returns a tuple with the IsWormCapable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetIsWormCapableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsWormCapable.Get(), o.IsWormCapable.IsSet()
}

// HasIsWormCapable returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasIsWormCapable() bool {
	if o != nil && o.IsWormCapable.IsSet() {
		return true
	}

	return false
}

// SetIsWormCapable gets a reference to the given NullableBool and assigns it to the IsWormCapable field.
func (o *CommonExternalTargetParams) SetIsWormCapable(v bool) {
	o.IsWormCapable.Set(&v)
}
// SetIsWormCapableNil sets the value for IsWormCapable to be an explicit nil
func (o *CommonExternalTargetParams) SetIsWormCapableNil() {
	o.IsWormCapable.Set(nil)
}

// UnsetIsWormCapable ensures that no value is present for IsWormCapable, not even an explicit nil
func (o *CommonExternalTargetParams) UnsetIsWormCapable() {
	o.IsWormCapable.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonExternalTargetParams) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CommonExternalTargetParams) SetName(v string) {
	o.Name.Set(&v)
}

// GetOwnershipContext returns the OwnershipContext field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetOwnershipContext() string {
	if o == nil || IsNil(o.OwnershipContext.Get()) {
		var ret string
		return ret
	}
	return *o.OwnershipContext.Get()
}

// GetOwnershipContextOk returns a tuple with the OwnershipContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetOwnershipContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnershipContext.Get(), o.OwnershipContext.IsSet()
}

// HasOwnershipContext returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasOwnershipContext() bool {
	if o != nil && o.OwnershipContext.IsSet() {
		return true
	}

	return false
}

// SetOwnershipContext gets a reference to the given NullableString and assigns it to the OwnershipContext field.
func (o *CommonExternalTargetParams) SetOwnershipContext(v string) {
	o.OwnershipContext.Set(&v)
}
// SetOwnershipContextNil sets the value for OwnershipContext to be an explicit nil
func (o *CommonExternalTargetParams) SetOwnershipContextNil() {
	o.OwnershipContext.Set(nil)
}

// UnsetOwnershipContext ensures that no value is present for OwnershipContext, not even an explicit nil
func (o *CommonExternalTargetParams) UnsetOwnershipContext() {
	o.OwnershipContext.Unset()
}

// GetPurposeType returns the PurposeType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonExternalTargetParams) GetPurposeType() string {
	if o == nil || o.PurposeType.Get() == nil {
		var ret string
		return ret
	}

	return *o.PurposeType.Get()
}

// GetPurposeTypeOk returns a tuple with the PurposeType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetPurposeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PurposeType.Get(), o.PurposeType.IsSet()
}

// SetPurposeType sets field value
func (o *CommonExternalTargetParams) SetPurposeType(v string) {
	o.PurposeType.Set(&v)
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *CommonExternalTargetParams) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *CommonExternalTargetParams) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *CommonExternalTargetParams) UnsetStatus() {
	o.Status.Unset()
}

// GetStorageDomainName returns the StorageDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetStorageDomainName() string {
	if o == nil || IsNil(o.StorageDomainName.Get()) {
		var ret string
		return ret
	}
	return *o.StorageDomainName.Get()
}

// GetStorageDomainNameOk returns a tuple with the StorageDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetStorageDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageDomainName.Get(), o.StorageDomainName.IsSet()
}

// HasStorageDomainName returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasStorageDomainName() bool {
	if o != nil && o.StorageDomainName.IsSet() {
		return true
	}

	return false
}

// SetStorageDomainName gets a reference to the given NullableString and assigns it to the StorageDomainName field.
func (o *CommonExternalTargetParams) SetStorageDomainName(v string) {
	o.StorageDomainName.Set(&v)
}
// SetStorageDomainNameNil sets the value for StorageDomainName to be an explicit nil
func (o *CommonExternalTargetParams) SetStorageDomainNameNil() {
	o.StorageDomainName.Set(nil)
}

// UnsetStorageDomainName ensures that no value is present for StorageDomainName, not even an explicit nil
func (o *CommonExternalTargetParams) UnsetStorageDomainName() {
	o.StorageDomainName.Unset()
}

// GetTenantIds returns the TenantIds field value if set, zero value otherwise.
func (o *CommonExternalTargetParams) GetTenantIds() []string {
	if o == nil || IsNil(o.TenantIds) {
		var ret []string
		return ret
	}
	return o.TenantIds
}

// GetTenantIdsOk returns a tuple with the TenantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonExternalTargetParams) GetTenantIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIds) {
		return nil, false
	}
	return o.TenantIds, true
}

// HasTenantIds returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasTenantIds() bool {
	if o != nil && !IsNil(o.TenantIds) {
		return true
	}

	return false
}

// SetTenantIds gets a reference to the given []string and assigns it to the TenantIds field.
func (o *CommonExternalTargetParams) SetTenantIds(v []string) {
	o.TenantIds = v
}

// GetUseForApolloMrStore returns the UseForApolloMrStore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonExternalTargetParams) GetUseForApolloMrStore() bool {
	if o == nil || IsNil(o.UseForApolloMrStore.Get()) {
		var ret bool
		return ret
	}
	return *o.UseForApolloMrStore.Get()
}

// GetUseForApolloMrStoreOk returns a tuple with the UseForApolloMrStore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonExternalTargetParams) GetUseForApolloMrStoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseForApolloMrStore.Get(), o.UseForApolloMrStore.IsSet()
}

// HasUseForApolloMrStore returns a boolean if a field has been set.
func (o *CommonExternalTargetParams) HasUseForApolloMrStore() bool {
	if o != nil && o.UseForApolloMrStore.IsSet() {
		return true
	}

	return false
}

// SetUseForApolloMrStore gets a reference to the given NullableBool and assigns it to the UseForApolloMrStore field.
func (o *CommonExternalTargetParams) SetUseForApolloMrStore(v bool) {
	o.UseForApolloMrStore.Set(&v)
}
// SetUseForApolloMrStoreNil sets the value for UseForApolloMrStore to be an explicit nil
func (o *CommonExternalTargetParams) SetUseForApolloMrStoreNil() {
	o.UseForApolloMrStore.Set(nil)
}

// UnsetUseForApolloMrStore ensures that no value is present for UseForApolloMrStore, not even an explicit nil
func (o *CommonExternalTargetParams) UnsetUseForApolloMrStore() {
	o.UseForApolloMrStore.Unset()
}

func (o CommonExternalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonExternalTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CloudDomains != nil {
		toSerialize["cloudDomains"] = o.CloudDomains
	}
	if o.Compression.IsSet() {
		toSerialize["compression"] = o.Compression.Get()
	}
	if o.EnableObjectLock.IsSet() {
		toSerialize["enableObjectLock"] = o.EnableObjectLock.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.GlobalId.IsSet() {
		toSerialize["globalId"] = o.GlobalId.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IsWormCapable.IsSet() {
		toSerialize["isWormCapable"] = o.IsWormCapable.Get()
	}
	toSerialize["name"] = o.Name.Get()
	if o.OwnershipContext.IsSet() {
		toSerialize["ownershipContext"] = o.OwnershipContext.Get()
	}
	toSerialize["purposeType"] = o.PurposeType.Get()
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.StorageDomainName.IsSet() {
		toSerialize["storageDomainName"] = o.StorageDomainName.Get()
	}
	if !IsNil(o.TenantIds) {
		toSerialize["tenantIds"] = o.TenantIds
	}
	if o.UseForApolloMrStore.IsSet() {
		toSerialize["useForApolloMrStore"] = o.UseForApolloMrStore.Get()
	}
	return toSerialize, nil
}

func (o *CommonExternalTargetParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"purposeType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonExternalTargetParams := _CommonExternalTargetParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonExternalTargetParams)

	if err != nil {
		return err
	}

	*o = CommonExternalTargetParams(varCommonExternalTargetParams)

	return err
}

type NullableCommonExternalTargetParams struct {
	value *CommonExternalTargetParams
	isSet bool
}

func (v NullableCommonExternalTargetParams) Get() *CommonExternalTargetParams {
	return v.value
}

func (v *NullableCommonExternalTargetParams) Set(val *CommonExternalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonExternalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonExternalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonExternalTargetParams(val *CommonExternalTargetParams) *NullableCommonExternalTargetParams {
	return &NullableCommonExternalTargetParams{value: val, isSet: true}
}

func (v NullableCommonExternalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonExternalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


