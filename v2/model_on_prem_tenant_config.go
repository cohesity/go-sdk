/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OnPremTenantConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnPremTenantConfig{}

// OnPremTenantConfig All configurations related to tenants for the cluster.
type OnPremTenantConfig struct {
	// Wether organizations is enabled on the cluster.
	OrganizationsEnabled NullableBool `json:"organizationsEnabled"`
	// Wether storage domain sharing is enabled for organizations on the cluster.
	OrganizationsStorageDomainSharingEnabled NullableBool `json:"organizationsStorageDomainSharingEnabled"`
}

type _OnPremTenantConfig OnPremTenantConfig

// NewOnPremTenantConfig instantiates a new OnPremTenantConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnPremTenantConfig(organizationsEnabled NullableBool, organizationsStorageDomainSharingEnabled NullableBool) *OnPremTenantConfig {
	this := OnPremTenantConfig{}
	this.OrganizationsEnabled = organizationsEnabled
	this.OrganizationsStorageDomainSharingEnabled = organizationsStorageDomainSharingEnabled
	return &this
}

// NewOnPremTenantConfigWithDefaults instantiates a new OnPremTenantConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnPremTenantConfigWithDefaults() *OnPremTenantConfig {
	this := OnPremTenantConfig{}
	return &this
}

// GetOrganizationsEnabled returns the OrganizationsEnabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *OnPremTenantConfig) GetOrganizationsEnabled() bool {
	if o == nil || o.OrganizationsEnabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.OrganizationsEnabled.Get()
}

// GetOrganizationsEnabledOk returns a tuple with the OrganizationsEnabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnPremTenantConfig) GetOrganizationsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationsEnabled.Get(), o.OrganizationsEnabled.IsSet()
}

// SetOrganizationsEnabled sets field value
func (o *OnPremTenantConfig) SetOrganizationsEnabled(v bool) {
	o.OrganizationsEnabled.Set(&v)
}

// GetOrganizationsStorageDomainSharingEnabled returns the OrganizationsStorageDomainSharingEnabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *OnPremTenantConfig) GetOrganizationsStorageDomainSharingEnabled() bool {
	if o == nil || o.OrganizationsStorageDomainSharingEnabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.OrganizationsStorageDomainSharingEnabled.Get()
}

// GetOrganizationsStorageDomainSharingEnabledOk returns a tuple with the OrganizationsStorageDomainSharingEnabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnPremTenantConfig) GetOrganizationsStorageDomainSharingEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationsStorageDomainSharingEnabled.Get(), o.OrganizationsStorageDomainSharingEnabled.IsSet()
}

// SetOrganizationsStorageDomainSharingEnabled sets field value
func (o *OnPremTenantConfig) SetOrganizationsStorageDomainSharingEnabled(v bool) {
	o.OrganizationsStorageDomainSharingEnabled.Set(&v)
}

func (o OnPremTenantConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnPremTenantConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["organizationsEnabled"] = o.OrganizationsEnabled.Get()
	toSerialize["organizationsStorageDomainSharingEnabled"] = o.OrganizationsStorageDomainSharingEnabled.Get()
	return toSerialize, nil
}

func (o *OnPremTenantConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"organizationsEnabled",
		"organizationsStorageDomainSharingEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOnPremTenantConfig := _OnPremTenantConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOnPremTenantConfig)

	if err != nil {
		return err
	}

	*o = OnPremTenantConfig(varOnPremTenantConfig)

	return err
}

type NullableOnPremTenantConfig struct {
	value *OnPremTenantConfig
	isSet bool
}

func (v NullableOnPremTenantConfig) Get() *OnPremTenantConfig {
	return v.value
}

func (v *NullableOnPremTenantConfig) Set(val *OnPremTenantConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableOnPremTenantConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableOnPremTenantConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnPremTenantConfig(val *OnPremTenantConfig) *NullableOnPremTenantConfig {
	return &NullableOnPremTenantConfig{value: val, isSet: true}
}

func (v NullableOnPremTenantConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnPremTenantConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


