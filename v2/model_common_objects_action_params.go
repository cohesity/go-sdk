/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CommonObjectsActionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonObjectsActionParams{}

// CommonObjectsActionParams Specifies the common action params needed for performing bulk actions on list of objects.
type CommonObjectsActionParams struct {
	// Specifies the objectMap that will be used to perform bulk actions such as linking and unlinking.
	ObjectMap []ActionObjectMapping `json:"objectMap,omitempty"`
}

// NewCommonObjectsActionParams instantiates a new CommonObjectsActionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonObjectsActionParams() *CommonObjectsActionParams {
	this := CommonObjectsActionParams{}
	return &this
}

// NewCommonObjectsActionParamsWithDefaults instantiates a new CommonObjectsActionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonObjectsActionParamsWithDefaults() *CommonObjectsActionParams {
	this := CommonObjectsActionParams{}
	return &this
}

// GetObjectMap returns the ObjectMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonObjectsActionParams) GetObjectMap() []ActionObjectMapping {
	if o == nil {
		var ret []ActionObjectMapping
		return ret
	}
	return o.ObjectMap
}

// GetObjectMapOk returns a tuple with the ObjectMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonObjectsActionParams) GetObjectMapOk() ([]ActionObjectMapping, bool) {
	if o == nil || IsNil(o.ObjectMap) {
		return nil, false
	}
	return o.ObjectMap, true
}

// HasObjectMap returns a boolean if a field has been set.
func (o *CommonObjectsActionParams) HasObjectMap() bool {
	if o != nil && !IsNil(o.ObjectMap) {
		return true
	}

	return false
}

// SetObjectMap gets a reference to the given []ActionObjectMapping and assigns it to the ObjectMap field.
func (o *CommonObjectsActionParams) SetObjectMap(v []ActionObjectMapping) {
	o.ObjectMap = v
}

func (o CommonObjectsActionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonObjectsActionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectMap != nil {
		toSerialize["objectMap"] = o.ObjectMap
	}
	return toSerialize, nil
}

type NullableCommonObjectsActionParams struct {
	value *CommonObjectsActionParams
	isSet bool
}

func (v NullableCommonObjectsActionParams) Get() *CommonObjectsActionParams {
	return v.value
}

func (v *NullableCommonObjectsActionParams) Set(val *CommonObjectsActionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonObjectsActionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonObjectsActionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonObjectsActionParams(val *CommonObjectsActionParams) *NullableCommonObjectsActionParams {
	return &NullableCommonObjectsActionParams{value: val, isSet: true}
}

func (v NullableCommonObjectsActionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonObjectsActionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


