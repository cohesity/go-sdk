/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RecoverOracleAppNewSourceConfigRecoverDatabaseParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverOracleAppNewSourceConfigRecoverDatabaseParams{}

// RecoverOracleAppNewSourceConfigRecoverDatabaseParams Specifies recovery parameters when recovering to a database
type RecoverOracleAppNewSourceConfigRecoverDatabaseParams struct {
	// Specifies BCT file path.
	BctFilePath NullableString `json:"bctFilePath,omitempty"`
	// Specifies a new name for the restored database. If this field is not specified, then the original database will be overwritten after recovery.
	DatabaseName NullableString `json:"databaseName,omitempty"`
	// Specifies the config file path on selected host which configures the restored database.
	DbConfigFilePath NullableString `json:"dbConfigFilePath,omitempty"`
	// Specifies the location to restore database files.
	DbFilesDestination NullableString `json:"dbFilesDestination,omitempty"`
	DisasterRecoveryOptions *DisasterRecoveryOptions `json:"disasterRecoveryOptions,omitempty"`
	// Specifies archive log mode for oracle restore.
	EnableArchiveLogMode NullableBool `json:"enableArchiveLogMode,omitempty"`
	// Specifies whether this task is a multistage restore task. If set, we migrate the DB after clone completes.
	IsMultiStageRestore NullableBool `json:"isMultiStageRestore,omitempty"`
	// Specifies newname clause for db files which allows user to have full control on how their database files can be renamed during the oracle alternate restore workflow.
	NewNameClause NullableString `json:"newNameClause,omitempty"`
	// Specifies whether to validate filenames or not in Oracle alternate restore workflow.
	NoFilenameCheck NullableBool `json:"noFilenameCheck,omitempty"`
	// Specifies no. of tempfiles to be used for the recovered database.
	NumTempfiles NullableInt32 `json:"numTempfiles,omitempty"`
	// Specifies the oracle base folder at selected host.
	OracleBaseFolder NullableString `json:"oracleBaseFolder,omitempty"`
	// Specifies the oracle home folder at selected host.
	OracleHomeFolder NullableString `json:"oracleHomeFolder,omitempty"`
	// Specifies the parameters that are needed for updating oracle restore options.
	OracleUpdateRestoreOptions NullableMigrateCloneParams `json:"oracleUpdateRestoreOptions,omitempty"`
	// Specifies a key value pair for pfile parameters.
	PfileParameterMap []KeyValuePair `json:"pfileParameterMap,omitempty"`
	// Specifies redo log config.
	RedoLogConfig *RedoLogGroupConfig `json:"redoLogConfig,omitempty"`
	// Whether or not to restore to a RAC database.
	RestoreToRac NullableBool `json:"restoreToRac,omitempty"`
	// Whether or not to skip the nid step in Oracle Clone workflow. Applicable to both smart and old clone workflow.
	SkipCloneNid NullableBool `json:"skipCloneNid,omitempty"`
	// Specifies the Oracle database node channels info. If not specified, the default values assigned by the server are applied to all the databases.
	DbChannels []OracleDbChannel `json:"dbChannels,omitempty"`
	GranularRestoreInfo *CommonOracleAppSourceConfigGranularRestoreInfo `json:"granularRestoreInfo,omitempty"`
	OracleArchiveLogInfo *CommonOracleAppSourceConfigOracleArchiveLogInfo `json:"oracleArchiveLogInfo,omitempty"`
	OracleRecoveryValidationInfo *CommonOracleAppSourceConfigOracleRecoveryValidationInfo `json:"oracleRecoveryValidationInfo,omitempty"`
	// Specifies if database should be left in recovery mode.
	RecoveryMode NullableBool `json:"recoveryMode,omitempty"`
	RestoreSpfileOrPfileInfo *CommonOracleAppSourceConfigRestoreSpfileOrPfileInfo `json:"restoreSpfileOrPfileInfo,omitempty"`
	// Specifies the time in the past to which the Oracle db needs to be restored. This allows for granular recovery of Oracle databases. If this is not set, the Oracle db will be restored from the full/incremental snapshot.
	RestoreTimeUsecs NullableInt64 `json:"restoreTimeUsecs,omitempty"`
	// Specifies key value pairs of shell variables which defines the restore shell environment.
	ShellEvironmentVars []ShellKeyValuePair `json:"shellEvironmentVars,omitempty"`
	// Specifies whether database recovery performed should use scn value or not.
	UseScnForRestore NullableBool `json:"useScnForRestore,omitempty"`
}

// NewRecoverOracleAppNewSourceConfigRecoverDatabaseParams instantiates a new RecoverOracleAppNewSourceConfigRecoverDatabaseParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverOracleAppNewSourceConfigRecoverDatabaseParams() *RecoverOracleAppNewSourceConfigRecoverDatabaseParams {
	this := RecoverOracleAppNewSourceConfigRecoverDatabaseParams{}
	return &this
}

// NewRecoverOracleAppNewSourceConfigRecoverDatabaseParamsWithDefaults instantiates a new RecoverOracleAppNewSourceConfigRecoverDatabaseParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverOracleAppNewSourceConfigRecoverDatabaseParamsWithDefaults() *RecoverOracleAppNewSourceConfigRecoverDatabaseParams {
	this := RecoverOracleAppNewSourceConfigRecoverDatabaseParams{}
	return &this
}

// GetBctFilePath returns the BctFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetBctFilePath() string {
	if o == nil || IsNil(o.BctFilePath.Get()) {
		var ret string
		return ret
	}
	return *o.BctFilePath.Get()
}

// GetBctFilePathOk returns a tuple with the BctFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetBctFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BctFilePath.Get(), o.BctFilePath.IsSet()
}

// HasBctFilePath returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasBctFilePath() bool {
	if o != nil && o.BctFilePath.IsSet() {
		return true
	}

	return false
}

// SetBctFilePath gets a reference to the given NullableString and assigns it to the BctFilePath field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetBctFilePath(v string) {
	o.BctFilePath.Set(&v)
}
// SetBctFilePathNil sets the value for BctFilePath to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetBctFilePathNil() {
	o.BctFilePath.Set(nil)
}

// UnsetBctFilePath ensures that no value is present for BctFilePath, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetBctFilePath() {
	o.BctFilePath.Unset()
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseName.Get()
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseName.Get(), o.DatabaseName.IsSet()
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasDatabaseName() bool {
	if o != nil && o.DatabaseName.IsSet() {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given NullableString and assigns it to the DatabaseName field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetDatabaseName(v string) {
	o.DatabaseName.Set(&v)
}
// SetDatabaseNameNil sets the value for DatabaseName to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetDatabaseNameNil() {
	o.DatabaseName.Set(nil)
}

// UnsetDatabaseName ensures that no value is present for DatabaseName, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetDatabaseName() {
	o.DatabaseName.Unset()
}

// GetDbConfigFilePath returns the DbConfigFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetDbConfigFilePath() string {
	if o == nil || IsNil(o.DbConfigFilePath.Get()) {
		var ret string
		return ret
	}
	return *o.DbConfigFilePath.Get()
}

// GetDbConfigFilePathOk returns a tuple with the DbConfigFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetDbConfigFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DbConfigFilePath.Get(), o.DbConfigFilePath.IsSet()
}

// HasDbConfigFilePath returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasDbConfigFilePath() bool {
	if o != nil && o.DbConfigFilePath.IsSet() {
		return true
	}

	return false
}

// SetDbConfigFilePath gets a reference to the given NullableString and assigns it to the DbConfigFilePath field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetDbConfigFilePath(v string) {
	o.DbConfigFilePath.Set(&v)
}
// SetDbConfigFilePathNil sets the value for DbConfigFilePath to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetDbConfigFilePathNil() {
	o.DbConfigFilePath.Set(nil)
}

// UnsetDbConfigFilePath ensures that no value is present for DbConfigFilePath, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetDbConfigFilePath() {
	o.DbConfigFilePath.Unset()
}

// GetDbFilesDestination returns the DbFilesDestination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetDbFilesDestination() string {
	if o == nil || IsNil(o.DbFilesDestination.Get()) {
		var ret string
		return ret
	}
	return *o.DbFilesDestination.Get()
}

// GetDbFilesDestinationOk returns a tuple with the DbFilesDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetDbFilesDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DbFilesDestination.Get(), o.DbFilesDestination.IsSet()
}

// HasDbFilesDestination returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasDbFilesDestination() bool {
	if o != nil && o.DbFilesDestination.IsSet() {
		return true
	}

	return false
}

// SetDbFilesDestination gets a reference to the given NullableString and assigns it to the DbFilesDestination field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetDbFilesDestination(v string) {
	o.DbFilesDestination.Set(&v)
}
// SetDbFilesDestinationNil sets the value for DbFilesDestination to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetDbFilesDestinationNil() {
	o.DbFilesDestination.Set(nil)
}

// UnsetDbFilesDestination ensures that no value is present for DbFilesDestination, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetDbFilesDestination() {
	o.DbFilesDestination.Unset()
}

// GetDisasterRecoveryOptions returns the DisasterRecoveryOptions field value if set, zero value otherwise.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetDisasterRecoveryOptions() DisasterRecoveryOptions {
	if o == nil || IsNil(o.DisasterRecoveryOptions) {
		var ret DisasterRecoveryOptions
		return ret
	}
	return *o.DisasterRecoveryOptions
}

// GetDisasterRecoveryOptionsOk returns a tuple with the DisasterRecoveryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetDisasterRecoveryOptionsOk() (*DisasterRecoveryOptions, bool) {
	if o == nil || IsNil(o.DisasterRecoveryOptions) {
		return nil, false
	}
	return o.DisasterRecoveryOptions, true
}

// HasDisasterRecoveryOptions returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasDisasterRecoveryOptions() bool {
	if o != nil && !IsNil(o.DisasterRecoveryOptions) {
		return true
	}

	return false
}

// SetDisasterRecoveryOptions gets a reference to the given DisasterRecoveryOptions and assigns it to the DisasterRecoveryOptions field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetDisasterRecoveryOptions(v DisasterRecoveryOptions) {
	o.DisasterRecoveryOptions = &v
}

// GetEnableArchiveLogMode returns the EnableArchiveLogMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetEnableArchiveLogMode() bool {
	if o == nil || IsNil(o.EnableArchiveLogMode.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableArchiveLogMode.Get()
}

// GetEnableArchiveLogModeOk returns a tuple with the EnableArchiveLogMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetEnableArchiveLogModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableArchiveLogMode.Get(), o.EnableArchiveLogMode.IsSet()
}

// HasEnableArchiveLogMode returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasEnableArchiveLogMode() bool {
	if o != nil && o.EnableArchiveLogMode.IsSet() {
		return true
	}

	return false
}

// SetEnableArchiveLogMode gets a reference to the given NullableBool and assigns it to the EnableArchiveLogMode field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetEnableArchiveLogMode(v bool) {
	o.EnableArchiveLogMode.Set(&v)
}
// SetEnableArchiveLogModeNil sets the value for EnableArchiveLogMode to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetEnableArchiveLogModeNil() {
	o.EnableArchiveLogMode.Set(nil)
}

// UnsetEnableArchiveLogMode ensures that no value is present for EnableArchiveLogMode, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetEnableArchiveLogMode() {
	o.EnableArchiveLogMode.Unset()
}

// GetIsMultiStageRestore returns the IsMultiStageRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetIsMultiStageRestore() bool {
	if o == nil || IsNil(o.IsMultiStageRestore.Get()) {
		var ret bool
		return ret
	}
	return *o.IsMultiStageRestore.Get()
}

// GetIsMultiStageRestoreOk returns a tuple with the IsMultiStageRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetIsMultiStageRestoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsMultiStageRestore.Get(), o.IsMultiStageRestore.IsSet()
}

// HasIsMultiStageRestore returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasIsMultiStageRestore() bool {
	if o != nil && o.IsMultiStageRestore.IsSet() {
		return true
	}

	return false
}

// SetIsMultiStageRestore gets a reference to the given NullableBool and assigns it to the IsMultiStageRestore field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetIsMultiStageRestore(v bool) {
	o.IsMultiStageRestore.Set(&v)
}
// SetIsMultiStageRestoreNil sets the value for IsMultiStageRestore to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetIsMultiStageRestoreNil() {
	o.IsMultiStageRestore.Set(nil)
}

// UnsetIsMultiStageRestore ensures that no value is present for IsMultiStageRestore, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetIsMultiStageRestore() {
	o.IsMultiStageRestore.Unset()
}

// GetNewNameClause returns the NewNameClause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetNewNameClause() string {
	if o == nil || IsNil(o.NewNameClause.Get()) {
		var ret string
		return ret
	}
	return *o.NewNameClause.Get()
}

// GetNewNameClauseOk returns a tuple with the NewNameClause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetNewNameClauseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewNameClause.Get(), o.NewNameClause.IsSet()
}

// HasNewNameClause returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasNewNameClause() bool {
	if o != nil && o.NewNameClause.IsSet() {
		return true
	}

	return false
}

// SetNewNameClause gets a reference to the given NullableString and assigns it to the NewNameClause field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetNewNameClause(v string) {
	o.NewNameClause.Set(&v)
}
// SetNewNameClauseNil sets the value for NewNameClause to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetNewNameClauseNil() {
	o.NewNameClause.Set(nil)
}

// UnsetNewNameClause ensures that no value is present for NewNameClause, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetNewNameClause() {
	o.NewNameClause.Unset()
}

// GetNoFilenameCheck returns the NoFilenameCheck field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetNoFilenameCheck() bool {
	if o == nil || IsNil(o.NoFilenameCheck.Get()) {
		var ret bool
		return ret
	}
	return *o.NoFilenameCheck.Get()
}

// GetNoFilenameCheckOk returns a tuple with the NoFilenameCheck field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetNoFilenameCheckOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NoFilenameCheck.Get(), o.NoFilenameCheck.IsSet()
}

// HasNoFilenameCheck returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasNoFilenameCheck() bool {
	if o != nil && o.NoFilenameCheck.IsSet() {
		return true
	}

	return false
}

// SetNoFilenameCheck gets a reference to the given NullableBool and assigns it to the NoFilenameCheck field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetNoFilenameCheck(v bool) {
	o.NoFilenameCheck.Set(&v)
}
// SetNoFilenameCheckNil sets the value for NoFilenameCheck to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetNoFilenameCheckNil() {
	o.NoFilenameCheck.Set(nil)
}

// UnsetNoFilenameCheck ensures that no value is present for NoFilenameCheck, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetNoFilenameCheck() {
	o.NoFilenameCheck.Unset()
}

// GetNumTempfiles returns the NumTempfiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetNumTempfiles() int32 {
	if o == nil || IsNil(o.NumTempfiles.Get()) {
		var ret int32
		return ret
	}
	return *o.NumTempfiles.Get()
}

// GetNumTempfilesOk returns a tuple with the NumTempfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetNumTempfilesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumTempfiles.Get(), o.NumTempfiles.IsSet()
}

// HasNumTempfiles returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasNumTempfiles() bool {
	if o != nil && o.NumTempfiles.IsSet() {
		return true
	}

	return false
}

// SetNumTempfiles gets a reference to the given NullableInt32 and assigns it to the NumTempfiles field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetNumTempfiles(v int32) {
	o.NumTempfiles.Set(&v)
}
// SetNumTempfilesNil sets the value for NumTempfiles to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetNumTempfilesNil() {
	o.NumTempfiles.Set(nil)
}

// UnsetNumTempfiles ensures that no value is present for NumTempfiles, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetNumTempfiles() {
	o.NumTempfiles.Unset()
}

// GetOracleBaseFolder returns the OracleBaseFolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetOracleBaseFolder() string {
	if o == nil || IsNil(o.OracleBaseFolder.Get()) {
		var ret string
		return ret
	}
	return *o.OracleBaseFolder.Get()
}

// GetOracleBaseFolderOk returns a tuple with the OracleBaseFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetOracleBaseFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OracleBaseFolder.Get(), o.OracleBaseFolder.IsSet()
}

// HasOracleBaseFolder returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasOracleBaseFolder() bool {
	if o != nil && o.OracleBaseFolder.IsSet() {
		return true
	}

	return false
}

// SetOracleBaseFolder gets a reference to the given NullableString and assigns it to the OracleBaseFolder field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetOracleBaseFolder(v string) {
	o.OracleBaseFolder.Set(&v)
}
// SetOracleBaseFolderNil sets the value for OracleBaseFolder to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetOracleBaseFolderNil() {
	o.OracleBaseFolder.Set(nil)
}

// UnsetOracleBaseFolder ensures that no value is present for OracleBaseFolder, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetOracleBaseFolder() {
	o.OracleBaseFolder.Unset()
}

// GetOracleHomeFolder returns the OracleHomeFolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetOracleHomeFolder() string {
	if o == nil || IsNil(o.OracleHomeFolder.Get()) {
		var ret string
		return ret
	}
	return *o.OracleHomeFolder.Get()
}

// GetOracleHomeFolderOk returns a tuple with the OracleHomeFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetOracleHomeFolderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OracleHomeFolder.Get(), o.OracleHomeFolder.IsSet()
}

// HasOracleHomeFolder returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasOracleHomeFolder() bool {
	if o != nil && o.OracleHomeFolder.IsSet() {
		return true
	}

	return false
}

// SetOracleHomeFolder gets a reference to the given NullableString and assigns it to the OracleHomeFolder field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetOracleHomeFolder(v string) {
	o.OracleHomeFolder.Set(&v)
}
// SetOracleHomeFolderNil sets the value for OracleHomeFolder to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetOracleHomeFolderNil() {
	o.OracleHomeFolder.Set(nil)
}

// UnsetOracleHomeFolder ensures that no value is present for OracleHomeFolder, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetOracleHomeFolder() {
	o.OracleHomeFolder.Unset()
}

// GetOracleUpdateRestoreOptions returns the OracleUpdateRestoreOptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetOracleUpdateRestoreOptions() MigrateCloneParams {
	if o == nil || IsNil(o.OracleUpdateRestoreOptions.Get()) {
		var ret MigrateCloneParams
		return ret
	}
	return *o.OracleUpdateRestoreOptions.Get()
}

// GetOracleUpdateRestoreOptionsOk returns a tuple with the OracleUpdateRestoreOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetOracleUpdateRestoreOptionsOk() (*MigrateCloneParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.OracleUpdateRestoreOptions.Get(), o.OracleUpdateRestoreOptions.IsSet()
}

// HasOracleUpdateRestoreOptions returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasOracleUpdateRestoreOptions() bool {
	if o != nil && o.OracleUpdateRestoreOptions.IsSet() {
		return true
	}

	return false
}

// SetOracleUpdateRestoreOptions gets a reference to the given NullableMigrateCloneParams and assigns it to the OracleUpdateRestoreOptions field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetOracleUpdateRestoreOptions(v MigrateCloneParams) {
	o.OracleUpdateRestoreOptions.Set(&v)
}
// SetOracleUpdateRestoreOptionsNil sets the value for OracleUpdateRestoreOptions to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetOracleUpdateRestoreOptionsNil() {
	o.OracleUpdateRestoreOptions.Set(nil)
}

// UnsetOracleUpdateRestoreOptions ensures that no value is present for OracleUpdateRestoreOptions, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetOracleUpdateRestoreOptions() {
	o.OracleUpdateRestoreOptions.Unset()
}

// GetPfileParameterMap returns the PfileParameterMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetPfileParameterMap() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.PfileParameterMap
}

// GetPfileParameterMapOk returns a tuple with the PfileParameterMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetPfileParameterMapOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.PfileParameterMap) {
		return nil, false
	}
	return o.PfileParameterMap, true
}

// HasPfileParameterMap returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasPfileParameterMap() bool {
	if o != nil && !IsNil(o.PfileParameterMap) {
		return true
	}

	return false
}

// SetPfileParameterMap gets a reference to the given []KeyValuePair and assigns it to the PfileParameterMap field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetPfileParameterMap(v []KeyValuePair) {
	o.PfileParameterMap = v
}

// GetRedoLogConfig returns the RedoLogConfig field value if set, zero value otherwise.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetRedoLogConfig() RedoLogGroupConfig {
	if o == nil || IsNil(o.RedoLogConfig) {
		var ret RedoLogGroupConfig
		return ret
	}
	return *o.RedoLogConfig
}

// GetRedoLogConfigOk returns a tuple with the RedoLogConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetRedoLogConfigOk() (*RedoLogGroupConfig, bool) {
	if o == nil || IsNil(o.RedoLogConfig) {
		return nil, false
	}
	return o.RedoLogConfig, true
}

// HasRedoLogConfig returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasRedoLogConfig() bool {
	if o != nil && !IsNil(o.RedoLogConfig) {
		return true
	}

	return false
}

// SetRedoLogConfig gets a reference to the given RedoLogGroupConfig and assigns it to the RedoLogConfig field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetRedoLogConfig(v RedoLogGroupConfig) {
	o.RedoLogConfig = &v
}

// GetRestoreToRac returns the RestoreToRac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetRestoreToRac() bool {
	if o == nil || IsNil(o.RestoreToRac.Get()) {
		var ret bool
		return ret
	}
	return *o.RestoreToRac.Get()
}

// GetRestoreToRacOk returns a tuple with the RestoreToRac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetRestoreToRacOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreToRac.Get(), o.RestoreToRac.IsSet()
}

// HasRestoreToRac returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasRestoreToRac() bool {
	if o != nil && o.RestoreToRac.IsSet() {
		return true
	}

	return false
}

// SetRestoreToRac gets a reference to the given NullableBool and assigns it to the RestoreToRac field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetRestoreToRac(v bool) {
	o.RestoreToRac.Set(&v)
}
// SetRestoreToRacNil sets the value for RestoreToRac to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetRestoreToRacNil() {
	o.RestoreToRac.Set(nil)
}

// UnsetRestoreToRac ensures that no value is present for RestoreToRac, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetRestoreToRac() {
	o.RestoreToRac.Unset()
}

// GetSkipCloneNid returns the SkipCloneNid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetSkipCloneNid() bool {
	if o == nil || IsNil(o.SkipCloneNid.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipCloneNid.Get()
}

// GetSkipCloneNidOk returns a tuple with the SkipCloneNid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetSkipCloneNidOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipCloneNid.Get(), o.SkipCloneNid.IsSet()
}

// HasSkipCloneNid returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasSkipCloneNid() bool {
	if o != nil && o.SkipCloneNid.IsSet() {
		return true
	}

	return false
}

// SetSkipCloneNid gets a reference to the given NullableBool and assigns it to the SkipCloneNid field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetSkipCloneNid(v bool) {
	o.SkipCloneNid.Set(&v)
}
// SetSkipCloneNidNil sets the value for SkipCloneNid to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetSkipCloneNidNil() {
	o.SkipCloneNid.Set(nil)
}

// UnsetSkipCloneNid ensures that no value is present for SkipCloneNid, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetSkipCloneNid() {
	o.SkipCloneNid.Unset()
}

// GetDbChannels returns the DbChannels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetDbChannels() []OracleDbChannel {
	if o == nil {
		var ret []OracleDbChannel
		return ret
	}
	return o.DbChannels
}

// GetDbChannelsOk returns a tuple with the DbChannels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetDbChannelsOk() ([]OracleDbChannel, bool) {
	if o == nil || IsNil(o.DbChannels) {
		return nil, false
	}
	return o.DbChannels, true
}

// HasDbChannels returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasDbChannels() bool {
	if o != nil && !IsNil(o.DbChannels) {
		return true
	}

	return false
}

// SetDbChannels gets a reference to the given []OracleDbChannel and assigns it to the DbChannels field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetDbChannels(v []OracleDbChannel) {
	o.DbChannels = v
}

// GetGranularRestoreInfo returns the GranularRestoreInfo field value if set, zero value otherwise.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetGranularRestoreInfo() CommonOracleAppSourceConfigGranularRestoreInfo {
	if o == nil || IsNil(o.GranularRestoreInfo) {
		var ret CommonOracleAppSourceConfigGranularRestoreInfo
		return ret
	}
	return *o.GranularRestoreInfo
}

// GetGranularRestoreInfoOk returns a tuple with the GranularRestoreInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetGranularRestoreInfoOk() (*CommonOracleAppSourceConfigGranularRestoreInfo, bool) {
	if o == nil || IsNil(o.GranularRestoreInfo) {
		return nil, false
	}
	return o.GranularRestoreInfo, true
}

// HasGranularRestoreInfo returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasGranularRestoreInfo() bool {
	if o != nil && !IsNil(o.GranularRestoreInfo) {
		return true
	}

	return false
}

// SetGranularRestoreInfo gets a reference to the given CommonOracleAppSourceConfigGranularRestoreInfo and assigns it to the GranularRestoreInfo field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetGranularRestoreInfo(v CommonOracleAppSourceConfigGranularRestoreInfo) {
	o.GranularRestoreInfo = &v
}

// GetOracleArchiveLogInfo returns the OracleArchiveLogInfo field value if set, zero value otherwise.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetOracleArchiveLogInfo() CommonOracleAppSourceConfigOracleArchiveLogInfo {
	if o == nil || IsNil(o.OracleArchiveLogInfo) {
		var ret CommonOracleAppSourceConfigOracleArchiveLogInfo
		return ret
	}
	return *o.OracleArchiveLogInfo
}

// GetOracleArchiveLogInfoOk returns a tuple with the OracleArchiveLogInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetOracleArchiveLogInfoOk() (*CommonOracleAppSourceConfigOracleArchiveLogInfo, bool) {
	if o == nil || IsNil(o.OracleArchiveLogInfo) {
		return nil, false
	}
	return o.OracleArchiveLogInfo, true
}

// HasOracleArchiveLogInfo returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasOracleArchiveLogInfo() bool {
	if o != nil && !IsNil(o.OracleArchiveLogInfo) {
		return true
	}

	return false
}

// SetOracleArchiveLogInfo gets a reference to the given CommonOracleAppSourceConfigOracleArchiveLogInfo and assigns it to the OracleArchiveLogInfo field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetOracleArchiveLogInfo(v CommonOracleAppSourceConfigOracleArchiveLogInfo) {
	o.OracleArchiveLogInfo = &v
}

// GetOracleRecoveryValidationInfo returns the OracleRecoveryValidationInfo field value if set, zero value otherwise.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetOracleRecoveryValidationInfo() CommonOracleAppSourceConfigOracleRecoveryValidationInfo {
	if o == nil || IsNil(o.OracleRecoveryValidationInfo) {
		var ret CommonOracleAppSourceConfigOracleRecoveryValidationInfo
		return ret
	}
	return *o.OracleRecoveryValidationInfo
}

// GetOracleRecoveryValidationInfoOk returns a tuple with the OracleRecoveryValidationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetOracleRecoveryValidationInfoOk() (*CommonOracleAppSourceConfigOracleRecoveryValidationInfo, bool) {
	if o == nil || IsNil(o.OracleRecoveryValidationInfo) {
		return nil, false
	}
	return o.OracleRecoveryValidationInfo, true
}

// HasOracleRecoveryValidationInfo returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasOracleRecoveryValidationInfo() bool {
	if o != nil && !IsNil(o.OracleRecoveryValidationInfo) {
		return true
	}

	return false
}

// SetOracleRecoveryValidationInfo gets a reference to the given CommonOracleAppSourceConfigOracleRecoveryValidationInfo and assigns it to the OracleRecoveryValidationInfo field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetOracleRecoveryValidationInfo(v CommonOracleAppSourceConfigOracleRecoveryValidationInfo) {
	o.OracleRecoveryValidationInfo = &v
}

// GetRecoveryMode returns the RecoveryMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetRecoveryMode() bool {
	if o == nil || IsNil(o.RecoveryMode.Get()) {
		var ret bool
		return ret
	}
	return *o.RecoveryMode.Get()
}

// GetRecoveryModeOk returns a tuple with the RecoveryMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetRecoveryModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoveryMode.Get(), o.RecoveryMode.IsSet()
}

// HasRecoveryMode returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasRecoveryMode() bool {
	if o != nil && o.RecoveryMode.IsSet() {
		return true
	}

	return false
}

// SetRecoveryMode gets a reference to the given NullableBool and assigns it to the RecoveryMode field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetRecoveryMode(v bool) {
	o.RecoveryMode.Set(&v)
}
// SetRecoveryModeNil sets the value for RecoveryMode to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetRecoveryModeNil() {
	o.RecoveryMode.Set(nil)
}

// UnsetRecoveryMode ensures that no value is present for RecoveryMode, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetRecoveryMode() {
	o.RecoveryMode.Unset()
}

// GetRestoreSpfileOrPfileInfo returns the RestoreSpfileOrPfileInfo field value if set, zero value otherwise.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetRestoreSpfileOrPfileInfo() CommonOracleAppSourceConfigRestoreSpfileOrPfileInfo {
	if o == nil || IsNil(o.RestoreSpfileOrPfileInfo) {
		var ret CommonOracleAppSourceConfigRestoreSpfileOrPfileInfo
		return ret
	}
	return *o.RestoreSpfileOrPfileInfo
}

// GetRestoreSpfileOrPfileInfoOk returns a tuple with the RestoreSpfileOrPfileInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetRestoreSpfileOrPfileInfoOk() (*CommonOracleAppSourceConfigRestoreSpfileOrPfileInfo, bool) {
	if o == nil || IsNil(o.RestoreSpfileOrPfileInfo) {
		return nil, false
	}
	return o.RestoreSpfileOrPfileInfo, true
}

// HasRestoreSpfileOrPfileInfo returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasRestoreSpfileOrPfileInfo() bool {
	if o != nil && !IsNil(o.RestoreSpfileOrPfileInfo) {
		return true
	}

	return false
}

// SetRestoreSpfileOrPfileInfo gets a reference to the given CommonOracleAppSourceConfigRestoreSpfileOrPfileInfo and assigns it to the RestoreSpfileOrPfileInfo field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetRestoreSpfileOrPfileInfo(v CommonOracleAppSourceConfigRestoreSpfileOrPfileInfo) {
	o.RestoreSpfileOrPfileInfo = &v
}

// GetRestoreTimeUsecs returns the RestoreTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetRestoreTimeUsecs() int64 {
	if o == nil || IsNil(o.RestoreTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.RestoreTimeUsecs.Get()
}

// GetRestoreTimeUsecsOk returns a tuple with the RestoreTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetRestoreTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreTimeUsecs.Get(), o.RestoreTimeUsecs.IsSet()
}

// HasRestoreTimeUsecs returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasRestoreTimeUsecs() bool {
	if o != nil && o.RestoreTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRestoreTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RestoreTimeUsecs field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetRestoreTimeUsecs(v int64) {
	o.RestoreTimeUsecs.Set(&v)
}
// SetRestoreTimeUsecsNil sets the value for RestoreTimeUsecs to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetRestoreTimeUsecsNil() {
	o.RestoreTimeUsecs.Set(nil)
}

// UnsetRestoreTimeUsecs ensures that no value is present for RestoreTimeUsecs, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetRestoreTimeUsecs() {
	o.RestoreTimeUsecs.Unset()
}

// GetShellEvironmentVars returns the ShellEvironmentVars field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetShellEvironmentVars() []ShellKeyValuePair {
	if o == nil {
		var ret []ShellKeyValuePair
		return ret
	}
	return o.ShellEvironmentVars
}

// GetShellEvironmentVarsOk returns a tuple with the ShellEvironmentVars field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetShellEvironmentVarsOk() ([]ShellKeyValuePair, bool) {
	if o == nil || IsNil(o.ShellEvironmentVars) {
		return nil, false
	}
	return o.ShellEvironmentVars, true
}

// HasShellEvironmentVars returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasShellEvironmentVars() bool {
	if o != nil && !IsNil(o.ShellEvironmentVars) {
		return true
	}

	return false
}

// SetShellEvironmentVars gets a reference to the given []ShellKeyValuePair and assigns it to the ShellEvironmentVars field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetShellEvironmentVars(v []ShellKeyValuePair) {
	o.ShellEvironmentVars = v
}

// GetUseScnForRestore returns the UseScnForRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetUseScnForRestore() bool {
	if o == nil || IsNil(o.UseScnForRestore.Get()) {
		var ret bool
		return ret
	}
	return *o.UseScnForRestore.Get()
}

// GetUseScnForRestoreOk returns a tuple with the UseScnForRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) GetUseScnForRestoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseScnForRestore.Get(), o.UseScnForRestore.IsSet()
}

// HasUseScnForRestore returns a boolean if a field has been set.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) HasUseScnForRestore() bool {
	if o != nil && o.UseScnForRestore.IsSet() {
		return true
	}

	return false
}

// SetUseScnForRestore gets a reference to the given NullableBool and assigns it to the UseScnForRestore field.
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetUseScnForRestore(v bool) {
	o.UseScnForRestore.Set(&v)
}
// SetUseScnForRestoreNil sets the value for UseScnForRestore to be an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) SetUseScnForRestoreNil() {
	o.UseScnForRestore.Set(nil)
}

// UnsetUseScnForRestore ensures that no value is present for UseScnForRestore, not even an explicit nil
func (o *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnsetUseScnForRestore() {
	o.UseScnForRestore.Unset()
}

func (o RecoverOracleAppNewSourceConfigRecoverDatabaseParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverOracleAppNewSourceConfigRecoverDatabaseParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BctFilePath.IsSet() {
		toSerialize["bctFilePath"] = o.BctFilePath.Get()
	}
	if o.DatabaseName.IsSet() {
		toSerialize["databaseName"] = o.DatabaseName.Get()
	}
	if o.DbConfigFilePath.IsSet() {
		toSerialize["dbConfigFilePath"] = o.DbConfigFilePath.Get()
	}
	if o.DbFilesDestination.IsSet() {
		toSerialize["dbFilesDestination"] = o.DbFilesDestination.Get()
	}
	if !IsNil(o.DisasterRecoveryOptions) {
		toSerialize["disasterRecoveryOptions"] = o.DisasterRecoveryOptions
	}
	if o.EnableArchiveLogMode.IsSet() {
		toSerialize["enableArchiveLogMode"] = o.EnableArchiveLogMode.Get()
	}
	if o.IsMultiStageRestore.IsSet() {
		toSerialize["isMultiStageRestore"] = o.IsMultiStageRestore.Get()
	}
	if o.NewNameClause.IsSet() {
		toSerialize["newNameClause"] = o.NewNameClause.Get()
	}
	if o.NoFilenameCheck.IsSet() {
		toSerialize["noFilenameCheck"] = o.NoFilenameCheck.Get()
	}
	if o.NumTempfiles.IsSet() {
		toSerialize["numTempfiles"] = o.NumTempfiles.Get()
	}
	if o.OracleBaseFolder.IsSet() {
		toSerialize["oracleBaseFolder"] = o.OracleBaseFolder.Get()
	}
	if o.OracleHomeFolder.IsSet() {
		toSerialize["oracleHomeFolder"] = o.OracleHomeFolder.Get()
	}
	if o.OracleUpdateRestoreOptions.IsSet() {
		toSerialize["oracleUpdateRestoreOptions"] = o.OracleUpdateRestoreOptions.Get()
	}
	if o.PfileParameterMap != nil {
		toSerialize["pfileParameterMap"] = o.PfileParameterMap
	}
	if !IsNil(o.RedoLogConfig) {
		toSerialize["redoLogConfig"] = o.RedoLogConfig
	}
	if o.RestoreToRac.IsSet() {
		toSerialize["restoreToRac"] = o.RestoreToRac.Get()
	}
	if o.SkipCloneNid.IsSet() {
		toSerialize["skipCloneNid"] = o.SkipCloneNid.Get()
	}
	if o.DbChannels != nil {
		toSerialize["dbChannels"] = o.DbChannels
	}
	if !IsNil(o.GranularRestoreInfo) {
		toSerialize["granularRestoreInfo"] = o.GranularRestoreInfo
	}
	if !IsNil(o.OracleArchiveLogInfo) {
		toSerialize["oracleArchiveLogInfo"] = o.OracleArchiveLogInfo
	}
	if !IsNil(o.OracleRecoveryValidationInfo) {
		toSerialize["oracleRecoveryValidationInfo"] = o.OracleRecoveryValidationInfo
	}
	if o.RecoveryMode.IsSet() {
		toSerialize["recoveryMode"] = o.RecoveryMode.Get()
	}
	if !IsNil(o.RestoreSpfileOrPfileInfo) {
		toSerialize["restoreSpfileOrPfileInfo"] = o.RestoreSpfileOrPfileInfo
	}
	if o.RestoreTimeUsecs.IsSet() {
		toSerialize["restoreTimeUsecs"] = o.RestoreTimeUsecs.Get()
	}
	if o.ShellEvironmentVars != nil {
		toSerialize["shellEvironmentVars"] = o.ShellEvironmentVars
	}
	if o.UseScnForRestore.IsSet() {
		toSerialize["useScnForRestore"] = o.UseScnForRestore.Get()
	}
	return toSerialize, nil
}

type NullableRecoverOracleAppNewSourceConfigRecoverDatabaseParams struct {
	value *RecoverOracleAppNewSourceConfigRecoverDatabaseParams
	isSet bool
}

func (v NullableRecoverOracleAppNewSourceConfigRecoverDatabaseParams) Get() *RecoverOracleAppNewSourceConfigRecoverDatabaseParams {
	return v.value
}

func (v *NullableRecoverOracleAppNewSourceConfigRecoverDatabaseParams) Set(val *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverOracleAppNewSourceConfigRecoverDatabaseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverOracleAppNewSourceConfigRecoverDatabaseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverOracleAppNewSourceConfigRecoverDatabaseParams(val *RecoverOracleAppNewSourceConfigRecoverDatabaseParams) *NullableRecoverOracleAppNewSourceConfigRecoverDatabaseParams {
	return &NullableRecoverOracleAppNewSourceConfigRecoverDatabaseParams{value: val, isSet: true}
}

func (v NullableRecoverOracleAppNewSourceConfigRecoverDatabaseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverOracleAppNewSourceConfigRecoverDatabaseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


