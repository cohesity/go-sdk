/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CouchBaseOnPremSearchParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CouchBaseOnPremSearchParams{}

// CouchBaseOnPremSearchParams Parameters required to search CouchBase on a cluster.
type CouchBaseOnPremSearchParams struct {
	// Specifies Couchbase object types be searched. For Couchbase it can only be set to 'CouchbaseBuckets'.
	CouchbaseObjectTypes []string `json:"couchbaseObjectTypes"`
	// Specifies the search string to search the Couchbase Objects
	SearchString NullableString `json:"searchString"`
	// Specifies a list of source ids. Only files found in these sources will be returned.
	SourceIds []int64 `json:"sourceIds,omitempty"`
}

type _CouchBaseOnPremSearchParams CouchBaseOnPremSearchParams

// NewCouchBaseOnPremSearchParams instantiates a new CouchBaseOnPremSearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouchBaseOnPremSearchParams(couchbaseObjectTypes []string, searchString NullableString) *CouchBaseOnPremSearchParams {
	this := CouchBaseOnPremSearchParams{}
	this.CouchbaseObjectTypes = couchbaseObjectTypes
	this.SearchString = searchString
	return &this
}

// NewCouchBaseOnPremSearchParamsWithDefaults instantiates a new CouchBaseOnPremSearchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouchBaseOnPremSearchParamsWithDefaults() *CouchBaseOnPremSearchParams {
	this := CouchBaseOnPremSearchParams{}
	return &this
}

// GetCouchbaseObjectTypes returns the CouchbaseObjectTypes field value
func (o *CouchBaseOnPremSearchParams) GetCouchbaseObjectTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CouchbaseObjectTypes
}

// GetCouchbaseObjectTypesOk returns a tuple with the CouchbaseObjectTypes field value
// and a boolean to check if the value has been set.
func (o *CouchBaseOnPremSearchParams) GetCouchbaseObjectTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CouchbaseObjectTypes, true
}

// SetCouchbaseObjectTypes sets field value
func (o *CouchBaseOnPremSearchParams) SetCouchbaseObjectTypes(v []string) {
	o.CouchbaseObjectTypes = v
}

// GetSearchString returns the SearchString field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CouchBaseOnPremSearchParams) GetSearchString() string {
	if o == nil || o.SearchString.Get() == nil {
		var ret string
		return ret
	}

	return *o.SearchString.Get()
}

// GetSearchStringOk returns a tuple with the SearchString field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchBaseOnPremSearchParams) GetSearchStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchString.Get(), o.SearchString.IsSet()
}

// SetSearchString sets field value
func (o *CouchBaseOnPremSearchParams) SetSearchString(v string) {
	o.SearchString.Set(&v)
}

// GetSourceIds returns the SourceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CouchBaseOnPremSearchParams) GetSourceIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.SourceIds
}

// GetSourceIdsOk returns a tuple with the SourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchBaseOnPremSearchParams) GetSourceIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.SourceIds) {
		return nil, false
	}
	return o.SourceIds, true
}

// HasSourceIds returns a boolean if a field has been set.
func (o *CouchBaseOnPremSearchParams) HasSourceIds() bool {
	if o != nil && !IsNil(o.SourceIds) {
		return true
	}

	return false
}

// SetSourceIds gets a reference to the given []int64 and assigns it to the SourceIds field.
func (o *CouchBaseOnPremSearchParams) SetSourceIds(v []int64) {
	o.SourceIds = v
}

func (o CouchBaseOnPremSearchParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CouchBaseOnPremSearchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["couchbaseObjectTypes"] = o.CouchbaseObjectTypes
	toSerialize["searchString"] = o.SearchString.Get()
	if o.SourceIds != nil {
		toSerialize["sourceIds"] = o.SourceIds
	}
	return toSerialize, nil
}

func (o *CouchBaseOnPremSearchParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"couchbaseObjectTypes",
		"searchString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCouchBaseOnPremSearchParams := _CouchBaseOnPremSearchParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCouchBaseOnPremSearchParams)

	if err != nil {
		return err
	}

	*o = CouchBaseOnPremSearchParams(varCouchBaseOnPremSearchParams)

	return err
}

type NullableCouchBaseOnPremSearchParams struct {
	value *CouchBaseOnPremSearchParams
	isSet bool
}

func (v NullableCouchBaseOnPremSearchParams) Get() *CouchBaseOnPremSearchParams {
	return v.value
}

func (v *NullableCouchBaseOnPremSearchParams) Set(val *CouchBaseOnPremSearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCouchBaseOnPremSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCouchBaseOnPremSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouchBaseOnPremSearchParams(val *CouchBaseOnPremSearchParams) *NullableCouchBaseOnPremSearchParams {
	return &NullableCouchBaseOnPremSearchParams{value: val, isSet: true}
}

func (v NullableCouchBaseOnPremSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouchBaseOnPremSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


