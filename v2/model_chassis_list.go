/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ChassisList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChassisList{}

// ChassisList Specifies the list of hardware chassis.
type ChassisList struct {
	// Specifies the list of chassis.
	Chassis []Chassis `json:"chassis,omitempty"`
}

// NewChassisList instantiates a new ChassisList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChassisList() *ChassisList {
	this := ChassisList{}
	return &this
}

// NewChassisListWithDefaults instantiates a new ChassisList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChassisListWithDefaults() *ChassisList {
	this := ChassisList{}
	return &this
}

// GetChassis returns the Chassis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChassisList) GetChassis() []Chassis {
	if o == nil {
		var ret []Chassis
		return ret
	}
	return o.Chassis
}

// GetChassisOk returns a tuple with the Chassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChassisList) GetChassisOk() ([]Chassis, bool) {
	if o == nil || IsNil(o.Chassis) {
		return nil, false
	}
	return o.Chassis, true
}

// HasChassis returns a boolean if a field has been set.
func (o *ChassisList) HasChassis() bool {
	if o != nil && !IsNil(o.Chassis) {
		return true
	}

	return false
}

// SetChassis gets a reference to the given []Chassis and assigns it to the Chassis field.
func (o *ChassisList) SetChassis(v []Chassis) {
	o.Chassis = v
}

func (o ChassisList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChassisList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Chassis != nil {
		toSerialize["chassis"] = o.Chassis
	}
	return toSerialize, nil
}

type NullableChassisList struct {
	value *ChassisList
	isSet bool
}

func (v NullableChassisList) Get() *ChassisList {
	return v.value
}

func (v *NullableChassisList) Set(val *ChassisList) {
	v.value = val
	v.isSet = true
}

func (v NullableChassisList) IsSet() bool {
	return v.isSet
}

func (v *NullableChassisList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChassisList(val *ChassisList) *NullableChassisList {
	return &NullableChassisList{value: val, isSet: true}
}

func (v NullableChassisList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChassisList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


