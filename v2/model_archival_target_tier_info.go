/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArchivalTargetTierInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchivalTargetTierInfo{}

// ArchivalTargetTierInfo Specifies the tier info for archival.
type ArchivalTargetTierInfo struct {
	AwsTiering *AWSTiers `json:"awsTiering,omitempty"`
	AzureTiering *AzureTiers `json:"azureTiering,omitempty"`
	// Specifies the cloud platform to enable tiering.
	CloudPlatform NullableString `json:"cloudPlatform"`
	GoogleTiering *GoogleTiers `json:"googleTiering,omitempty"`
	OracleTiering *OracleTiers `json:"oracleTiering,omitempty"`
	// Specifies the type of the current tier where the snapshot resides. This will be specified if the run is a CAD run.
	CurrentTierType NullableString `json:"currentTierType,omitempty"`
}

type _ArchivalTargetTierInfo ArchivalTargetTierInfo

// NewArchivalTargetTierInfo instantiates a new ArchivalTargetTierInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalTargetTierInfo(cloudPlatform NullableString) *ArchivalTargetTierInfo {
	this := ArchivalTargetTierInfo{}
	this.CloudPlatform = cloudPlatform
	return &this
}

// NewArchivalTargetTierInfoWithDefaults instantiates a new ArchivalTargetTierInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalTargetTierInfoWithDefaults() *ArchivalTargetTierInfo {
	this := ArchivalTargetTierInfo{}
	return &this
}

// GetAwsTiering returns the AwsTiering field value if set, zero value otherwise.
func (o *ArchivalTargetTierInfo) GetAwsTiering() AWSTiers {
	if o == nil || IsNil(o.AwsTiering) {
		var ret AWSTiers
		return ret
	}
	return *o.AwsTiering
}

// GetAwsTieringOk returns a tuple with the AwsTiering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalTargetTierInfo) GetAwsTieringOk() (*AWSTiers, bool) {
	if o == nil || IsNil(o.AwsTiering) {
		return nil, false
	}
	return o.AwsTiering, true
}

// HasAwsTiering returns a boolean if a field has been set.
func (o *ArchivalTargetTierInfo) HasAwsTiering() bool {
	if o != nil && !IsNil(o.AwsTiering) {
		return true
	}

	return false
}

// SetAwsTiering gets a reference to the given AWSTiers and assigns it to the AwsTiering field.
func (o *ArchivalTargetTierInfo) SetAwsTiering(v AWSTiers) {
	o.AwsTiering = &v
}

// GetAzureTiering returns the AzureTiering field value if set, zero value otherwise.
func (o *ArchivalTargetTierInfo) GetAzureTiering() AzureTiers {
	if o == nil || IsNil(o.AzureTiering) {
		var ret AzureTiers
		return ret
	}
	return *o.AzureTiering
}

// GetAzureTieringOk returns a tuple with the AzureTiering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalTargetTierInfo) GetAzureTieringOk() (*AzureTiers, bool) {
	if o == nil || IsNil(o.AzureTiering) {
		return nil, false
	}
	return o.AzureTiering, true
}

// HasAzureTiering returns a boolean if a field has been set.
func (o *ArchivalTargetTierInfo) HasAzureTiering() bool {
	if o != nil && !IsNil(o.AzureTiering) {
		return true
	}

	return false
}

// SetAzureTiering gets a reference to the given AzureTiers and assigns it to the AzureTiering field.
func (o *ArchivalTargetTierInfo) SetAzureTiering(v AzureTiers) {
	o.AzureTiering = &v
}

// GetCloudPlatform returns the CloudPlatform field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalTargetTierInfo) GetCloudPlatform() string {
	if o == nil || o.CloudPlatform.Get() == nil {
		var ret string
		return ret
	}

	return *o.CloudPlatform.Get()
}

// GetCloudPlatformOk returns a tuple with the CloudPlatform field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetTierInfo) GetCloudPlatformOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudPlatform.Get(), o.CloudPlatform.IsSet()
}

// SetCloudPlatform sets field value
func (o *ArchivalTargetTierInfo) SetCloudPlatform(v string) {
	o.CloudPlatform.Set(&v)
}

// GetGoogleTiering returns the GoogleTiering field value if set, zero value otherwise.
func (o *ArchivalTargetTierInfo) GetGoogleTiering() GoogleTiers {
	if o == nil || IsNil(o.GoogleTiering) {
		var ret GoogleTiers
		return ret
	}
	return *o.GoogleTiering
}

// GetGoogleTieringOk returns a tuple with the GoogleTiering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalTargetTierInfo) GetGoogleTieringOk() (*GoogleTiers, bool) {
	if o == nil || IsNil(o.GoogleTiering) {
		return nil, false
	}
	return o.GoogleTiering, true
}

// HasGoogleTiering returns a boolean if a field has been set.
func (o *ArchivalTargetTierInfo) HasGoogleTiering() bool {
	if o != nil && !IsNil(o.GoogleTiering) {
		return true
	}

	return false
}

// SetGoogleTiering gets a reference to the given GoogleTiers and assigns it to the GoogleTiering field.
func (o *ArchivalTargetTierInfo) SetGoogleTiering(v GoogleTiers) {
	o.GoogleTiering = &v
}

// GetOracleTiering returns the OracleTiering field value if set, zero value otherwise.
func (o *ArchivalTargetTierInfo) GetOracleTiering() OracleTiers {
	if o == nil || IsNil(o.OracleTiering) {
		var ret OracleTiers
		return ret
	}
	return *o.OracleTiering
}

// GetOracleTieringOk returns a tuple with the OracleTiering field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalTargetTierInfo) GetOracleTieringOk() (*OracleTiers, bool) {
	if o == nil || IsNil(o.OracleTiering) {
		return nil, false
	}
	return o.OracleTiering, true
}

// HasOracleTiering returns a boolean if a field has been set.
func (o *ArchivalTargetTierInfo) HasOracleTiering() bool {
	if o != nil && !IsNil(o.OracleTiering) {
		return true
	}

	return false
}

// SetOracleTiering gets a reference to the given OracleTiers and assigns it to the OracleTiering field.
func (o *ArchivalTargetTierInfo) SetOracleTiering(v OracleTiers) {
	o.OracleTiering = &v
}

// GetCurrentTierType returns the CurrentTierType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalTargetTierInfo) GetCurrentTierType() string {
	if o == nil || IsNil(o.CurrentTierType.Get()) {
		var ret string
		return ret
	}
	return *o.CurrentTierType.Get()
}

// GetCurrentTierTypeOk returns a tuple with the CurrentTierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalTargetTierInfo) GetCurrentTierTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentTierType.Get(), o.CurrentTierType.IsSet()
}

// HasCurrentTierType returns a boolean if a field has been set.
func (o *ArchivalTargetTierInfo) HasCurrentTierType() bool {
	if o != nil && o.CurrentTierType.IsSet() {
		return true
	}

	return false
}

// SetCurrentTierType gets a reference to the given NullableString and assigns it to the CurrentTierType field.
func (o *ArchivalTargetTierInfo) SetCurrentTierType(v string) {
	o.CurrentTierType.Set(&v)
}
// SetCurrentTierTypeNil sets the value for CurrentTierType to be an explicit nil
func (o *ArchivalTargetTierInfo) SetCurrentTierTypeNil() {
	o.CurrentTierType.Set(nil)
}

// UnsetCurrentTierType ensures that no value is present for CurrentTierType, not even an explicit nil
func (o *ArchivalTargetTierInfo) UnsetCurrentTierType() {
	o.CurrentTierType.Unset()
}

func (o ArchivalTargetTierInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchivalTargetTierInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsTiering) {
		toSerialize["awsTiering"] = o.AwsTiering
	}
	if !IsNil(o.AzureTiering) {
		toSerialize["azureTiering"] = o.AzureTiering
	}
	toSerialize["cloudPlatform"] = o.CloudPlatform.Get()
	if !IsNil(o.GoogleTiering) {
		toSerialize["googleTiering"] = o.GoogleTiering
	}
	if !IsNil(o.OracleTiering) {
		toSerialize["oracleTiering"] = o.OracleTiering
	}
	if o.CurrentTierType.IsSet() {
		toSerialize["currentTierType"] = o.CurrentTierType.Get()
	}
	return toSerialize, nil
}

func (o *ArchivalTargetTierInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudPlatform",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArchivalTargetTierInfo := _ArchivalTargetTierInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArchivalTargetTierInfo)

	if err != nil {
		return err
	}

	*o = ArchivalTargetTierInfo(varArchivalTargetTierInfo)

	return err
}

type NullableArchivalTargetTierInfo struct {
	value *ArchivalTargetTierInfo
	isSet bool
}

func (v NullableArchivalTargetTierInfo) Get() *ArchivalTargetTierInfo {
	return v.value
}

func (v *NullableArchivalTargetTierInfo) Set(val *ArchivalTargetTierInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalTargetTierInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalTargetTierInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalTargetTierInfo(val *ArchivalTargetTierInfo) *NullableArchivalTargetTierInfo {
	return &NullableArchivalTargetTierInfo{value: val, isSet: true}
}

func (v NullableArchivalTargetTierInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalTargetTierInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


