/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the KMSState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KMSState{}

// KMSState Specifies the state of key management system.
type KMSState struct {
	// Specifies the state of KMS.
	Value *string `json:"value,omitempty"`
}

// NewKMSState instantiates a new KMSState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKMSState() *KMSState {
	this := KMSState{}
	return &this
}

// NewKMSStateWithDefaults instantiates a new KMSState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKMSStateWithDefaults() *KMSState {
	this := KMSState{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *KMSState) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KMSState) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *KMSState) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *KMSState) SetValue(v string) {
	o.Value = &v
}

func (o KMSState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KMSState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableKMSState struct {
	value *KMSState
	isSet bool
}

func (v NullableKMSState) Get() *KMSState {
	return v.value
}

func (v *NullableKMSState) Set(val *KMSState) {
	v.value = val
	v.isSet = true
}

func (v NullableKMSState) IsSet() bool {
	return v.isSet
}

func (v *NullableKMSState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKMSState(val *KMSState) *NullableKMSState {
	return &NullableKMSState{value: val, isSet: true}
}

func (v NullableKMSState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKMSState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


