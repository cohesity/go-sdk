/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UserId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserId{}

// UserId Specifies the User Id type. Either sid or unixUid should be set.
type UserId struct {
	// Specifies the domain name of the user, where the principal' account is maintained.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the user sid.
	Sid NullableString `json:"sid,omitempty"`
	// Specifies the unix Uid.
	UnixUid NullableInt32 `json:"unixUid,omitempty"`
	// Specifies the full name of the user
	UserName NullableString `json:"userName,omitempty"`
}

// NewUserId instantiates a new UserId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserId() *UserId {
	this := UserId{}
	return &this
}

// NewUserIdWithDefaults instantiates a new UserId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserIdWithDefaults() *UserId {
	this := UserId{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserId) GetDomain() string {
	if o == nil || IsNil(o.Domain.Get()) {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserId) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *UserId) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *UserId) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *UserId) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *UserId) UnsetDomain() {
	o.Domain.Unset()
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserId) GetSid() string {
	if o == nil || IsNil(o.Sid.Get()) {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserId) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *UserId) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *UserId) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *UserId) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *UserId) UnsetSid() {
	o.Sid.Unset()
}

// GetUnixUid returns the UnixUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserId) GetUnixUid() int32 {
	if o == nil || IsNil(o.UnixUid.Get()) {
		var ret int32
		return ret
	}
	return *o.UnixUid.Get()
}

// GetUnixUidOk returns a tuple with the UnixUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserId) GetUnixUidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnixUid.Get(), o.UnixUid.IsSet()
}

// HasUnixUid returns a boolean if a field has been set.
func (o *UserId) HasUnixUid() bool {
	if o != nil && o.UnixUid.IsSet() {
		return true
	}

	return false
}

// SetUnixUid gets a reference to the given NullableInt32 and assigns it to the UnixUid field.
func (o *UserId) SetUnixUid(v int32) {
	o.UnixUid.Set(&v)
}
// SetUnixUidNil sets the value for UnixUid to be an explicit nil
func (o *UserId) SetUnixUidNil() {
	o.UnixUid.Set(nil)
}

// UnsetUnixUid ensures that no value is present for UnixUid, not even an explicit nil
func (o *UserId) UnsetUnixUid() {
	o.UnixUid.Unset()
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserId) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserId) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *UserId) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *UserId) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *UserId) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *UserId) UnsetUserName() {
	o.UserName.Unset()
}

func (o UserId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.UnixUid.IsSet() {
		toSerialize["unixUid"] = o.UnixUid.Get()
	}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	return toSerialize, nil
}

type NullableUserId struct {
	value *UserId
	isSet bool
}

func (v NullableUserId) Get() *UserId {
	return v.value
}

func (v *NullableUserId) Set(val *UserId) {
	v.value = val
	v.isSet = true
}

func (v NullableUserId) IsSet() bool {
	return v.isSet
}

func (v *NullableUserId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserId(val *UserId) *NullableUserId {
	return &NullableUserId{value: val, isSet: true}
}

func (v NullableUserId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


