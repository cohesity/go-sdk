/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverNetappFilesParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverNetappFilesParams{}

// RecoverNetappFilesParams Specifies the parameters to recover Netapp files.
type RecoverNetappFilesParams struct {
	ElastifileTargetParams NullableRecoverNetappFilesParamsElastifileTargetParams `json:"elastifileTargetParams,omitempty"`
	// Specifies the list of info about the netapp files and folders to be recovered.
	FilesAndFolders []NetappRecoverFileAndFolderInfo `json:"filesAndFolders"`
	FlashbladeTargetParams NullableRecoverNetappFilesParamsFlashbladeTargetParams `json:"flashbladeTargetParams,omitempty"`
	GenericNasTargetParams NullableRecoverNetappFilesParamsGenericNasTargetParams `json:"genericNasTargetParams,omitempty"`
	GpfsTargetParams NullableRecoverNetappFilesParamsGpfsTargetParams `json:"gpfsTargetParams,omitempty"`
	// Specifies if the snapshot trying to recover is from a source initiated protection.
	IsFromSourceInitiatedProtection NullableBool `json:"isFromSourceInitiatedProtection,omitempty"`
	IsilonTargetParams NullableRecoverNetappFilesParamsIsilonTargetParams `json:"isilonTargetParams,omitempty"`
	NetappTargetParams NullableRecoverNetappFilesParamsNetappTargetParams `json:"netappTargetParams,omitempty"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
}

type _RecoverNetappFilesParams RecoverNetappFilesParams

// NewRecoverNetappFilesParams instantiates a new RecoverNetappFilesParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverNetappFilesParams(filesAndFolders []NetappRecoverFileAndFolderInfo, targetEnvironment string) *RecoverNetappFilesParams {
	this := RecoverNetappFilesParams{}
	this.FilesAndFolders = filesAndFolders
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverNetappFilesParamsWithDefaults instantiates a new RecoverNetappFilesParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverNetappFilesParamsWithDefaults() *RecoverNetappFilesParams {
	this := RecoverNetappFilesParams{}
	return &this
}

// GetElastifileTargetParams returns the ElastifileTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverNetappFilesParams) GetElastifileTargetParams() RecoverNetappFilesParamsElastifileTargetParams {
	if o == nil || IsNil(o.ElastifileTargetParams.Get()) {
		var ret RecoverNetappFilesParamsElastifileTargetParams
		return ret
	}
	return *o.ElastifileTargetParams.Get()
}

// GetElastifileTargetParamsOk returns a tuple with the ElastifileTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverNetappFilesParams) GetElastifileTargetParamsOk() (*RecoverNetappFilesParamsElastifileTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.ElastifileTargetParams.Get(), o.ElastifileTargetParams.IsSet()
}

// HasElastifileTargetParams returns a boolean if a field has been set.
func (o *RecoverNetappFilesParams) HasElastifileTargetParams() bool {
	if o != nil && o.ElastifileTargetParams.IsSet() {
		return true
	}

	return false
}

// SetElastifileTargetParams gets a reference to the given NullableRecoverNetappFilesParamsElastifileTargetParams and assigns it to the ElastifileTargetParams field.
func (o *RecoverNetappFilesParams) SetElastifileTargetParams(v RecoverNetappFilesParamsElastifileTargetParams) {
	o.ElastifileTargetParams.Set(&v)
}
// SetElastifileTargetParamsNil sets the value for ElastifileTargetParams to be an explicit nil
func (o *RecoverNetappFilesParams) SetElastifileTargetParamsNil() {
	o.ElastifileTargetParams.Set(nil)
}

// UnsetElastifileTargetParams ensures that no value is present for ElastifileTargetParams, not even an explicit nil
func (o *RecoverNetappFilesParams) UnsetElastifileTargetParams() {
	o.ElastifileTargetParams.Unset()
}

// GetFilesAndFolders returns the FilesAndFolders field value
// If the value is explicit nil, the zero value for []NetappRecoverFileAndFolderInfo will be returned
func (o *RecoverNetappFilesParams) GetFilesAndFolders() []NetappRecoverFileAndFolderInfo {
	if o == nil {
		var ret []NetappRecoverFileAndFolderInfo
		return ret
	}

	return o.FilesAndFolders
}

// GetFilesAndFoldersOk returns a tuple with the FilesAndFolders field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverNetappFilesParams) GetFilesAndFoldersOk() ([]NetappRecoverFileAndFolderInfo, bool) {
	if o == nil || IsNil(o.FilesAndFolders) {
		return nil, false
	}
	return o.FilesAndFolders, true
}

// SetFilesAndFolders sets field value
func (o *RecoverNetappFilesParams) SetFilesAndFolders(v []NetappRecoverFileAndFolderInfo) {
	o.FilesAndFolders = v
}

// GetFlashbladeTargetParams returns the FlashbladeTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverNetappFilesParams) GetFlashbladeTargetParams() RecoverNetappFilesParamsFlashbladeTargetParams {
	if o == nil || IsNil(o.FlashbladeTargetParams.Get()) {
		var ret RecoverNetappFilesParamsFlashbladeTargetParams
		return ret
	}
	return *o.FlashbladeTargetParams.Get()
}

// GetFlashbladeTargetParamsOk returns a tuple with the FlashbladeTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverNetappFilesParams) GetFlashbladeTargetParamsOk() (*RecoverNetappFilesParamsFlashbladeTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.FlashbladeTargetParams.Get(), o.FlashbladeTargetParams.IsSet()
}

// HasFlashbladeTargetParams returns a boolean if a field has been set.
func (o *RecoverNetappFilesParams) HasFlashbladeTargetParams() bool {
	if o != nil && o.FlashbladeTargetParams.IsSet() {
		return true
	}

	return false
}

// SetFlashbladeTargetParams gets a reference to the given NullableRecoverNetappFilesParamsFlashbladeTargetParams and assigns it to the FlashbladeTargetParams field.
func (o *RecoverNetappFilesParams) SetFlashbladeTargetParams(v RecoverNetappFilesParamsFlashbladeTargetParams) {
	o.FlashbladeTargetParams.Set(&v)
}
// SetFlashbladeTargetParamsNil sets the value for FlashbladeTargetParams to be an explicit nil
func (o *RecoverNetappFilesParams) SetFlashbladeTargetParamsNil() {
	o.FlashbladeTargetParams.Set(nil)
}

// UnsetFlashbladeTargetParams ensures that no value is present for FlashbladeTargetParams, not even an explicit nil
func (o *RecoverNetappFilesParams) UnsetFlashbladeTargetParams() {
	o.FlashbladeTargetParams.Unset()
}

// GetGenericNasTargetParams returns the GenericNasTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverNetappFilesParams) GetGenericNasTargetParams() RecoverNetappFilesParamsGenericNasTargetParams {
	if o == nil || IsNil(o.GenericNasTargetParams.Get()) {
		var ret RecoverNetappFilesParamsGenericNasTargetParams
		return ret
	}
	return *o.GenericNasTargetParams.Get()
}

// GetGenericNasTargetParamsOk returns a tuple with the GenericNasTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverNetappFilesParams) GetGenericNasTargetParamsOk() (*RecoverNetappFilesParamsGenericNasTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.GenericNasTargetParams.Get(), o.GenericNasTargetParams.IsSet()
}

// HasGenericNasTargetParams returns a boolean if a field has been set.
func (o *RecoverNetappFilesParams) HasGenericNasTargetParams() bool {
	if o != nil && o.GenericNasTargetParams.IsSet() {
		return true
	}

	return false
}

// SetGenericNasTargetParams gets a reference to the given NullableRecoverNetappFilesParamsGenericNasTargetParams and assigns it to the GenericNasTargetParams field.
func (o *RecoverNetappFilesParams) SetGenericNasTargetParams(v RecoverNetappFilesParamsGenericNasTargetParams) {
	o.GenericNasTargetParams.Set(&v)
}
// SetGenericNasTargetParamsNil sets the value for GenericNasTargetParams to be an explicit nil
func (o *RecoverNetappFilesParams) SetGenericNasTargetParamsNil() {
	o.GenericNasTargetParams.Set(nil)
}

// UnsetGenericNasTargetParams ensures that no value is present for GenericNasTargetParams, not even an explicit nil
func (o *RecoverNetappFilesParams) UnsetGenericNasTargetParams() {
	o.GenericNasTargetParams.Unset()
}

// GetGpfsTargetParams returns the GpfsTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverNetappFilesParams) GetGpfsTargetParams() RecoverNetappFilesParamsGpfsTargetParams {
	if o == nil || IsNil(o.GpfsTargetParams.Get()) {
		var ret RecoverNetappFilesParamsGpfsTargetParams
		return ret
	}
	return *o.GpfsTargetParams.Get()
}

// GetGpfsTargetParamsOk returns a tuple with the GpfsTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverNetappFilesParams) GetGpfsTargetParamsOk() (*RecoverNetappFilesParamsGpfsTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.GpfsTargetParams.Get(), o.GpfsTargetParams.IsSet()
}

// HasGpfsTargetParams returns a boolean if a field has been set.
func (o *RecoverNetappFilesParams) HasGpfsTargetParams() bool {
	if o != nil && o.GpfsTargetParams.IsSet() {
		return true
	}

	return false
}

// SetGpfsTargetParams gets a reference to the given NullableRecoverNetappFilesParamsGpfsTargetParams and assigns it to the GpfsTargetParams field.
func (o *RecoverNetappFilesParams) SetGpfsTargetParams(v RecoverNetappFilesParamsGpfsTargetParams) {
	o.GpfsTargetParams.Set(&v)
}
// SetGpfsTargetParamsNil sets the value for GpfsTargetParams to be an explicit nil
func (o *RecoverNetappFilesParams) SetGpfsTargetParamsNil() {
	o.GpfsTargetParams.Set(nil)
}

// UnsetGpfsTargetParams ensures that no value is present for GpfsTargetParams, not even an explicit nil
func (o *RecoverNetappFilesParams) UnsetGpfsTargetParams() {
	o.GpfsTargetParams.Unset()
}

// GetIsFromSourceInitiatedProtection returns the IsFromSourceInitiatedProtection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverNetappFilesParams) GetIsFromSourceInitiatedProtection() bool {
	if o == nil || IsNil(o.IsFromSourceInitiatedProtection.Get()) {
		var ret bool
		return ret
	}
	return *o.IsFromSourceInitiatedProtection.Get()
}

// GetIsFromSourceInitiatedProtectionOk returns a tuple with the IsFromSourceInitiatedProtection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverNetappFilesParams) GetIsFromSourceInitiatedProtectionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsFromSourceInitiatedProtection.Get(), o.IsFromSourceInitiatedProtection.IsSet()
}

// HasIsFromSourceInitiatedProtection returns a boolean if a field has been set.
func (o *RecoverNetappFilesParams) HasIsFromSourceInitiatedProtection() bool {
	if o != nil && o.IsFromSourceInitiatedProtection.IsSet() {
		return true
	}

	return false
}

// SetIsFromSourceInitiatedProtection gets a reference to the given NullableBool and assigns it to the IsFromSourceInitiatedProtection field.
func (o *RecoverNetappFilesParams) SetIsFromSourceInitiatedProtection(v bool) {
	o.IsFromSourceInitiatedProtection.Set(&v)
}
// SetIsFromSourceInitiatedProtectionNil sets the value for IsFromSourceInitiatedProtection to be an explicit nil
func (o *RecoverNetappFilesParams) SetIsFromSourceInitiatedProtectionNil() {
	o.IsFromSourceInitiatedProtection.Set(nil)
}

// UnsetIsFromSourceInitiatedProtection ensures that no value is present for IsFromSourceInitiatedProtection, not even an explicit nil
func (o *RecoverNetappFilesParams) UnsetIsFromSourceInitiatedProtection() {
	o.IsFromSourceInitiatedProtection.Unset()
}

// GetIsilonTargetParams returns the IsilonTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverNetappFilesParams) GetIsilonTargetParams() RecoverNetappFilesParamsIsilonTargetParams {
	if o == nil || IsNil(o.IsilonTargetParams.Get()) {
		var ret RecoverNetappFilesParamsIsilonTargetParams
		return ret
	}
	return *o.IsilonTargetParams.Get()
}

// GetIsilonTargetParamsOk returns a tuple with the IsilonTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverNetappFilesParams) GetIsilonTargetParamsOk() (*RecoverNetappFilesParamsIsilonTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsilonTargetParams.Get(), o.IsilonTargetParams.IsSet()
}

// HasIsilonTargetParams returns a boolean if a field has been set.
func (o *RecoverNetappFilesParams) HasIsilonTargetParams() bool {
	if o != nil && o.IsilonTargetParams.IsSet() {
		return true
	}

	return false
}

// SetIsilonTargetParams gets a reference to the given NullableRecoverNetappFilesParamsIsilonTargetParams and assigns it to the IsilonTargetParams field.
func (o *RecoverNetappFilesParams) SetIsilonTargetParams(v RecoverNetappFilesParamsIsilonTargetParams) {
	o.IsilonTargetParams.Set(&v)
}
// SetIsilonTargetParamsNil sets the value for IsilonTargetParams to be an explicit nil
func (o *RecoverNetappFilesParams) SetIsilonTargetParamsNil() {
	o.IsilonTargetParams.Set(nil)
}

// UnsetIsilonTargetParams ensures that no value is present for IsilonTargetParams, not even an explicit nil
func (o *RecoverNetappFilesParams) UnsetIsilonTargetParams() {
	o.IsilonTargetParams.Unset()
}

// GetNetappTargetParams returns the NetappTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverNetappFilesParams) GetNetappTargetParams() RecoverNetappFilesParamsNetappTargetParams {
	if o == nil || IsNil(o.NetappTargetParams.Get()) {
		var ret RecoverNetappFilesParamsNetappTargetParams
		return ret
	}
	return *o.NetappTargetParams.Get()
}

// GetNetappTargetParamsOk returns a tuple with the NetappTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverNetappFilesParams) GetNetappTargetParamsOk() (*RecoverNetappFilesParamsNetappTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetappTargetParams.Get(), o.NetappTargetParams.IsSet()
}

// HasNetappTargetParams returns a boolean if a field has been set.
func (o *RecoverNetappFilesParams) HasNetappTargetParams() bool {
	if o != nil && o.NetappTargetParams.IsSet() {
		return true
	}

	return false
}

// SetNetappTargetParams gets a reference to the given NullableRecoverNetappFilesParamsNetappTargetParams and assigns it to the NetappTargetParams field.
func (o *RecoverNetappFilesParams) SetNetappTargetParams(v RecoverNetappFilesParamsNetappTargetParams) {
	o.NetappTargetParams.Set(&v)
}
// SetNetappTargetParamsNil sets the value for NetappTargetParams to be an explicit nil
func (o *RecoverNetappFilesParams) SetNetappTargetParamsNil() {
	o.NetappTargetParams.Set(nil)
}

// UnsetNetappTargetParams ensures that no value is present for NetappTargetParams, not even an explicit nil
func (o *RecoverNetappFilesParams) UnsetNetappTargetParams() {
	o.NetappTargetParams.Unset()
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverNetappFilesParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverNetappFilesParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverNetappFilesParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

func (o RecoverNetappFilesParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverNetappFilesParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ElastifileTargetParams.IsSet() {
		toSerialize["elastifileTargetParams"] = o.ElastifileTargetParams.Get()
	}
	if o.FilesAndFolders != nil {
		toSerialize["filesAndFolders"] = o.FilesAndFolders
	}
	if o.FlashbladeTargetParams.IsSet() {
		toSerialize["flashbladeTargetParams"] = o.FlashbladeTargetParams.Get()
	}
	if o.GenericNasTargetParams.IsSet() {
		toSerialize["genericNasTargetParams"] = o.GenericNasTargetParams.Get()
	}
	if o.GpfsTargetParams.IsSet() {
		toSerialize["gpfsTargetParams"] = o.GpfsTargetParams.Get()
	}
	if o.IsFromSourceInitiatedProtection.IsSet() {
		toSerialize["isFromSourceInitiatedProtection"] = o.IsFromSourceInitiatedProtection.Get()
	}
	if o.IsilonTargetParams.IsSet() {
		toSerialize["isilonTargetParams"] = o.IsilonTargetParams.Get()
	}
	if o.NetappTargetParams.IsSet() {
		toSerialize["netappTargetParams"] = o.NetappTargetParams.Get()
	}
	toSerialize["targetEnvironment"] = o.TargetEnvironment
	return toSerialize, nil
}

func (o *RecoverNetappFilesParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filesAndFolders",
		"targetEnvironment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverNetappFilesParams := _RecoverNetappFilesParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverNetappFilesParams)

	if err != nil {
		return err
	}

	*o = RecoverNetappFilesParams(varRecoverNetappFilesParams)

	return err
}

type NullableRecoverNetappFilesParams struct {
	value *RecoverNetappFilesParams
	isSet bool
}

func (v NullableRecoverNetappFilesParams) Get() *RecoverNetappFilesParams {
	return v.value
}

func (v *NullableRecoverNetappFilesParams) Set(val *RecoverNetappFilesParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverNetappFilesParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverNetappFilesParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverNetappFilesParams(val *RecoverNetappFilesParams) *NullableRecoverNetappFilesParams {
	return &NullableRecoverNetappFilesParams{value: val, isSet: true}
}

func (v NullableRecoverNetappFilesParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverNetappFilesParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


