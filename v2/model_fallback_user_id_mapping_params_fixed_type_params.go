/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FallbackUserIdMappingParamsFixedTypeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FallbackUserIdMappingParamsFixedTypeParams{}

// FallbackUserIdMappingParamsFixedTypeParams Specifies the params for Fixed mapping type mapping.
type FallbackUserIdMappingParamsFixedTypeParams struct {
	// Specifies the fixed Unix GID, when mapping type is set to kFixed.
	Gid NullableInt64 `json:"gid"`
	// Specifies the fixed Unix UID, when mapping type is set to kFixed.
	Uid NullableInt64 `json:"uid"`
}

type _FallbackUserIdMappingParamsFixedTypeParams FallbackUserIdMappingParamsFixedTypeParams

// NewFallbackUserIdMappingParamsFixedTypeParams instantiates a new FallbackUserIdMappingParamsFixedTypeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFallbackUserIdMappingParamsFixedTypeParams(gid NullableInt64, uid NullableInt64) *FallbackUserIdMappingParamsFixedTypeParams {
	this := FallbackUserIdMappingParamsFixedTypeParams{}
	this.Gid = gid
	this.Uid = uid
	return &this
}

// NewFallbackUserIdMappingParamsFixedTypeParamsWithDefaults instantiates a new FallbackUserIdMappingParamsFixedTypeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFallbackUserIdMappingParamsFixedTypeParamsWithDefaults() *FallbackUserIdMappingParamsFixedTypeParams {
	this := FallbackUserIdMappingParamsFixedTypeParams{}
	return &this
}

// GetGid returns the Gid field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *FallbackUserIdMappingParamsFixedTypeParams) GetGid() int64 {
	if o == nil || o.Gid.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Gid.Get()
}

// GetGidOk returns a tuple with the Gid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FallbackUserIdMappingParamsFixedTypeParams) GetGidOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gid.Get(), o.Gid.IsSet()
}

// SetGid sets field value
func (o *FallbackUserIdMappingParamsFixedTypeParams) SetGid(v int64) {
	o.Gid.Set(&v)
}

// GetUid returns the Uid field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *FallbackUserIdMappingParamsFixedTypeParams) GetUid() int64 {
	if o == nil || o.Uid.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Uid.Get()
}

// GetUidOk returns a tuple with the Uid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FallbackUserIdMappingParamsFixedTypeParams) GetUidOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uid.Get(), o.Uid.IsSet()
}

// SetUid sets field value
func (o *FallbackUserIdMappingParamsFixedTypeParams) SetUid(v int64) {
	o.Uid.Set(&v)
}

func (o FallbackUserIdMappingParamsFixedTypeParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FallbackUserIdMappingParamsFixedTypeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["gid"] = o.Gid.Get()
	toSerialize["uid"] = o.Uid.Get()
	return toSerialize, nil
}

func (o *FallbackUserIdMappingParamsFixedTypeParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"gid",
		"uid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFallbackUserIdMappingParamsFixedTypeParams := _FallbackUserIdMappingParamsFixedTypeParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFallbackUserIdMappingParamsFixedTypeParams)

	if err != nil {
		return err
	}

	*o = FallbackUserIdMappingParamsFixedTypeParams(varFallbackUserIdMappingParamsFixedTypeParams)

	return err
}

type NullableFallbackUserIdMappingParamsFixedTypeParams struct {
	value *FallbackUserIdMappingParamsFixedTypeParams
	isSet bool
}

func (v NullableFallbackUserIdMappingParamsFixedTypeParams) Get() *FallbackUserIdMappingParamsFixedTypeParams {
	return v.value
}

func (v *NullableFallbackUserIdMappingParamsFixedTypeParams) Set(val *FallbackUserIdMappingParamsFixedTypeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFallbackUserIdMappingParamsFixedTypeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFallbackUserIdMappingParamsFixedTypeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFallbackUserIdMappingParamsFixedTypeParams(val *FallbackUserIdMappingParamsFixedTypeParams) *NullableFallbackUserIdMappingParamsFixedTypeParams {
	return &NullableFallbackUserIdMappingParamsFixedTypeParams{value: val, isSet: true}
}

func (v NullableFallbackUserIdMappingParamsFixedTypeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFallbackUserIdMappingParamsFixedTypeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


