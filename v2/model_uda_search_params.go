/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UdaSearchParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaSearchParams{}

// UdaSearchParams Specifies the parameters which are specific for searching Universal Data Adapter objects.
type UdaSearchParams struct {
	// Specifies the search string to search the Universal Data Adapter Objects
	SearchString NullableString `json:"searchString"`
}

type _UdaSearchParams UdaSearchParams

// NewUdaSearchParams instantiates a new UdaSearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaSearchParams(searchString NullableString) *UdaSearchParams {
	this := UdaSearchParams{}
	this.SearchString = searchString
	return &this
}

// NewUdaSearchParamsWithDefaults instantiates a new UdaSearchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaSearchParamsWithDefaults() *UdaSearchParams {
	this := UdaSearchParams{}
	return &this
}

// GetSearchString returns the SearchString field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UdaSearchParams) GetSearchString() string {
	if o == nil || o.SearchString.Get() == nil {
		var ret string
		return ret
	}

	return *o.SearchString.Get()
}

// GetSearchStringOk returns a tuple with the SearchString field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaSearchParams) GetSearchStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchString.Get(), o.SearchString.IsSet()
}

// SetSearchString sets field value
func (o *UdaSearchParams) SetSearchString(v string) {
	o.SearchString.Set(&v)
}

func (o UdaSearchParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaSearchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["searchString"] = o.SearchString.Get()
	return toSerialize, nil
}

func (o *UdaSearchParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"searchString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUdaSearchParams := _UdaSearchParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUdaSearchParams)

	if err != nil {
		return err
	}

	*o = UdaSearchParams(varUdaSearchParams)

	return err
}

type NullableUdaSearchParams struct {
	value *UdaSearchParams
	isSet bool
}

func (v NullableUdaSearchParams) Get() *UdaSearchParams {
	return v.value
}

func (v *NullableUdaSearchParams) Set(val *UdaSearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaSearchParams(val *UdaSearchParams) *NullableUdaSearchParams {
	return &NullableUdaSearchParams{value: val, isSet: true}
}

func (v NullableUdaSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


