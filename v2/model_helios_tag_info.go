/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeliosTagInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosTagInfo{}

// HeliosTagInfo Specifies the helios tag info for an object.
type HeliosTagInfo struct {
	// Specifies category of tag applied to the object.
	Category NullableString `json:"category,omitempty"`
	// Specifies name of tag applied to the object.
	Name NullableString `json:"name,omitempty"`
	// Specifies subCategory of tag applied to the object.
	SubCategory NullableString `json:"subCategory,omitempty"`
	// Specifies thirdPartyName of tag applied to the object.
	ThirdPartyName NullableString `json:"thirdPartyName,omitempty"`
	// Specifies the type (ex custom, thirdparty, system) of tag applied to the object.
	Type NullableString `json:"type,omitempty"`
	// Specifies the color of tag applied to the object.
	UiColor NullableString `json:"uiColor,omitempty"`
	// Specifies update time of tag applied to the object.
	UpdatedTimeUsecs NullableInt64 `json:"updatedTimeUsecs,omitempty"`
	// Specifies Uuid of tag applied to the object.
	Uuid NullableString `json:"uuid"`
}

type _HeliosTagInfo HeliosTagInfo

// NewHeliosTagInfo instantiates a new HeliosTagInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosTagInfo(uuid NullableString) *HeliosTagInfo {
	this := HeliosTagInfo{}
	this.Uuid = uuid
	return &this
}

// NewHeliosTagInfoWithDefaults instantiates a new HeliosTagInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosTagInfoWithDefaults() *HeliosTagInfo {
	this := HeliosTagInfo{}
	return &this
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTagInfo) GetCategory() string {
	if o == nil || IsNil(o.Category.Get()) {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTagInfo) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *HeliosTagInfo) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *HeliosTagInfo) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *HeliosTagInfo) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *HeliosTagInfo) UnsetCategory() {
	o.Category.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTagInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTagInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *HeliosTagInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *HeliosTagInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *HeliosTagInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *HeliosTagInfo) UnsetName() {
	o.Name.Unset()
}

// GetSubCategory returns the SubCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTagInfo) GetSubCategory() string {
	if o == nil || IsNil(o.SubCategory.Get()) {
		var ret string
		return ret
	}
	return *o.SubCategory.Get()
}

// GetSubCategoryOk returns a tuple with the SubCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTagInfo) GetSubCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubCategory.Get(), o.SubCategory.IsSet()
}

// HasSubCategory returns a boolean if a field has been set.
func (o *HeliosTagInfo) HasSubCategory() bool {
	if o != nil && o.SubCategory.IsSet() {
		return true
	}

	return false
}

// SetSubCategory gets a reference to the given NullableString and assigns it to the SubCategory field.
func (o *HeliosTagInfo) SetSubCategory(v string) {
	o.SubCategory.Set(&v)
}
// SetSubCategoryNil sets the value for SubCategory to be an explicit nil
func (o *HeliosTagInfo) SetSubCategoryNil() {
	o.SubCategory.Set(nil)
}

// UnsetSubCategory ensures that no value is present for SubCategory, not even an explicit nil
func (o *HeliosTagInfo) UnsetSubCategory() {
	o.SubCategory.Unset()
}

// GetThirdPartyName returns the ThirdPartyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTagInfo) GetThirdPartyName() string {
	if o == nil || IsNil(o.ThirdPartyName.Get()) {
		var ret string
		return ret
	}
	return *o.ThirdPartyName.Get()
}

// GetThirdPartyNameOk returns a tuple with the ThirdPartyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTagInfo) GetThirdPartyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ThirdPartyName.Get(), o.ThirdPartyName.IsSet()
}

// HasThirdPartyName returns a boolean if a field has been set.
func (o *HeliosTagInfo) HasThirdPartyName() bool {
	if o != nil && o.ThirdPartyName.IsSet() {
		return true
	}

	return false
}

// SetThirdPartyName gets a reference to the given NullableString and assigns it to the ThirdPartyName field.
func (o *HeliosTagInfo) SetThirdPartyName(v string) {
	o.ThirdPartyName.Set(&v)
}
// SetThirdPartyNameNil sets the value for ThirdPartyName to be an explicit nil
func (o *HeliosTagInfo) SetThirdPartyNameNil() {
	o.ThirdPartyName.Set(nil)
}

// UnsetThirdPartyName ensures that no value is present for ThirdPartyName, not even an explicit nil
func (o *HeliosTagInfo) UnsetThirdPartyName() {
	o.ThirdPartyName.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTagInfo) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTagInfo) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *HeliosTagInfo) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *HeliosTagInfo) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *HeliosTagInfo) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *HeliosTagInfo) UnsetType() {
	o.Type.Unset()
}

// GetUiColor returns the UiColor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTagInfo) GetUiColor() string {
	if o == nil || IsNil(o.UiColor.Get()) {
		var ret string
		return ret
	}
	return *o.UiColor.Get()
}

// GetUiColorOk returns a tuple with the UiColor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTagInfo) GetUiColorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UiColor.Get(), o.UiColor.IsSet()
}

// HasUiColor returns a boolean if a field has been set.
func (o *HeliosTagInfo) HasUiColor() bool {
	if o != nil && o.UiColor.IsSet() {
		return true
	}

	return false
}

// SetUiColor gets a reference to the given NullableString and assigns it to the UiColor field.
func (o *HeliosTagInfo) SetUiColor(v string) {
	o.UiColor.Set(&v)
}
// SetUiColorNil sets the value for UiColor to be an explicit nil
func (o *HeliosTagInfo) SetUiColorNil() {
	o.UiColor.Set(nil)
}

// UnsetUiColor ensures that no value is present for UiColor, not even an explicit nil
func (o *HeliosTagInfo) UnsetUiColor() {
	o.UiColor.Unset()
}

// GetUpdatedTimeUsecs returns the UpdatedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTagInfo) GetUpdatedTimeUsecs() int64 {
	if o == nil || IsNil(o.UpdatedTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.UpdatedTimeUsecs.Get()
}

// GetUpdatedTimeUsecsOk returns a tuple with the UpdatedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTagInfo) GetUpdatedTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UpdatedTimeUsecs.Get(), o.UpdatedTimeUsecs.IsSet()
}

// HasUpdatedTimeUsecs returns a boolean if a field has been set.
func (o *HeliosTagInfo) HasUpdatedTimeUsecs() bool {
	if o != nil && o.UpdatedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetUpdatedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the UpdatedTimeUsecs field.
func (o *HeliosTagInfo) SetUpdatedTimeUsecs(v int64) {
	o.UpdatedTimeUsecs.Set(&v)
}
// SetUpdatedTimeUsecsNil sets the value for UpdatedTimeUsecs to be an explicit nil
func (o *HeliosTagInfo) SetUpdatedTimeUsecsNil() {
	o.UpdatedTimeUsecs.Set(nil)
}

// UnsetUpdatedTimeUsecs ensures that no value is present for UpdatedTimeUsecs, not even an explicit nil
func (o *HeliosTagInfo) UnsetUpdatedTimeUsecs() {
	o.UpdatedTimeUsecs.Unset()
}

// GetUuid returns the Uuid field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HeliosTagInfo) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}

	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTagInfo) GetUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// SetUuid sets field value
func (o *HeliosTagInfo) SetUuid(v string) {
	o.Uuid.Set(&v)
}

func (o HeliosTagInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosTagInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.SubCategory.IsSet() {
		toSerialize["subCategory"] = o.SubCategory.Get()
	}
	if o.ThirdPartyName.IsSet() {
		toSerialize["thirdPartyName"] = o.ThirdPartyName.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.UiColor.IsSet() {
		toSerialize["uiColor"] = o.UiColor.Get()
	}
	if o.UpdatedTimeUsecs.IsSet() {
		toSerialize["updatedTimeUsecs"] = o.UpdatedTimeUsecs.Get()
	}
	toSerialize["uuid"] = o.Uuid.Get()
	return toSerialize, nil
}

func (o *HeliosTagInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"uuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeliosTagInfo := _HeliosTagInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeliosTagInfo)

	if err != nil {
		return err
	}

	*o = HeliosTagInfo(varHeliosTagInfo)

	return err
}

type NullableHeliosTagInfo struct {
	value *HeliosTagInfo
	isSet bool
}

func (v NullableHeliosTagInfo) Get() *HeliosTagInfo {
	return v.value
}

func (v *NullableHeliosTagInfo) Set(val *HeliosTagInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosTagInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosTagInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosTagInfo(val *HeliosTagInfo) *NullableHeliosTagInfo {
	return &NullableHeliosTagInfo{value: val, isSet: true}
}

func (v NullableHeliosTagInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosTagInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


