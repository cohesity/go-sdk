/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DeleteHostsParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteHostsParameters{}

// DeleteHostsParameters Specifies the params for deleting hosts
type DeleteHostsParameters struct {
	// Specifies the list of IPs to be deleted
	Ips []string `json:"ips,omitempty"`
}

// NewDeleteHostsParameters instantiates a new DeleteHostsParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteHostsParameters() *DeleteHostsParameters {
	this := DeleteHostsParameters{}
	return &this
}

// NewDeleteHostsParametersWithDefaults instantiates a new DeleteHostsParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteHostsParametersWithDefaults() *DeleteHostsParameters {
	this := DeleteHostsParameters{}
	return &this
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *DeleteHostsParameters) GetIps() []string {
	if o == nil || IsNil(o.Ips) {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeleteHostsParameters) GetIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *DeleteHostsParameters) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *DeleteHostsParameters) SetIps(v []string) {
	o.Ips = v
}

func (o DeleteHostsParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteHostsParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Ips) {
		toSerialize["ips"] = o.Ips
	}
	return toSerialize, nil
}

type NullableDeleteHostsParameters struct {
	value *DeleteHostsParameters
	isSet bool
}

func (v NullableDeleteHostsParameters) Get() *DeleteHostsParameters {
	return v.value
}

func (v *NullableDeleteHostsParameters) Set(val *DeleteHostsParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteHostsParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteHostsParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteHostsParameters(val *DeleteHostsParameters) *NullableDeleteHostsParameters {
	return &NullableDeleteHostsParameters{value: val, isSet: true}
}

func (v NullableDeleteHostsParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteHostsParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


