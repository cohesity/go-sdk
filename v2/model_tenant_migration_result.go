/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TenantMigrationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantMigrationResult{}

// TenantMigrationResult Get Tenant migration actions related details.
type TenantMigrationResult struct {
	// List of Services.
	Services []TenantMigrationService `json:"services,omitempty"`
	// Specifies the tenant ID of the user on which the action is being performed.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the tenant migration ID. This ID should be unique across clusters and should be generated by clients
	TenantMigrationUuid NullableString `json:"tenantMigrationUuid,omitempty"`
}

// NewTenantMigrationResult instantiates a new TenantMigrationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantMigrationResult() *TenantMigrationResult {
	this := TenantMigrationResult{}
	return &this
}

// NewTenantMigrationResultWithDefaults instantiates a new TenantMigrationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantMigrationResultWithDefaults() *TenantMigrationResult {
	this := TenantMigrationResult{}
	return &this
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *TenantMigrationResult) GetServices() []TenantMigrationService {
	if o == nil || IsNil(o.Services) {
		var ret []TenantMigrationService
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantMigrationResult) GetServicesOk() ([]TenantMigrationService, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *TenantMigrationResult) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []TenantMigrationService and assigns it to the Services field.
func (o *TenantMigrationResult) SetServices(v []TenantMigrationService) {
	o.Services = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantMigrationResult) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantMigrationResult) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *TenantMigrationResult) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *TenantMigrationResult) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *TenantMigrationResult) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *TenantMigrationResult) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetTenantMigrationUuid returns the TenantMigrationUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantMigrationResult) GetTenantMigrationUuid() string {
	if o == nil || IsNil(o.TenantMigrationUuid.Get()) {
		var ret string
		return ret
	}
	return *o.TenantMigrationUuid.Get()
}

// GetTenantMigrationUuidOk returns a tuple with the TenantMigrationUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantMigrationResult) GetTenantMigrationUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantMigrationUuid.Get(), o.TenantMigrationUuid.IsSet()
}

// HasTenantMigrationUuid returns a boolean if a field has been set.
func (o *TenantMigrationResult) HasTenantMigrationUuid() bool {
	if o != nil && o.TenantMigrationUuid.IsSet() {
		return true
	}

	return false
}

// SetTenantMigrationUuid gets a reference to the given NullableString and assigns it to the TenantMigrationUuid field.
func (o *TenantMigrationResult) SetTenantMigrationUuid(v string) {
	o.TenantMigrationUuid.Set(&v)
}
// SetTenantMigrationUuidNil sets the value for TenantMigrationUuid to be an explicit nil
func (o *TenantMigrationResult) SetTenantMigrationUuidNil() {
	o.TenantMigrationUuid.Set(nil)
}

// UnsetTenantMigrationUuid ensures that no value is present for TenantMigrationUuid, not even an explicit nil
func (o *TenantMigrationResult) UnsetTenantMigrationUuid() {
	o.TenantMigrationUuid.Unset()
}

func (o TenantMigrationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantMigrationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.TenantMigrationUuid.IsSet() {
		toSerialize["tenantMigrationUuid"] = o.TenantMigrationUuid.Get()
	}
	return toSerialize, nil
}

type NullableTenantMigrationResult struct {
	value *TenantMigrationResult
	isSet bool
}

func (v NullableTenantMigrationResult) Get() *TenantMigrationResult {
	return v.value
}

func (v *NullableTenantMigrationResult) Set(val *TenantMigrationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantMigrationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantMigrationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantMigrationResult(val *TenantMigrationResult) *NullableTenantMigrationResult {
	return &NullableTenantMigrationResult{value: val, isSet: true}
}

func (v NullableTenantMigrationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantMigrationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


