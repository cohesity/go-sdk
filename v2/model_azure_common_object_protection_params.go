/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AzureCommonObjectProtectionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureCommonObjectProtectionParams{}

// AzureCommonObjectProtectionParams Specifies the parameters which are specific to Azure related Object Protection and common to different Azure protection types.
type AzureCommonObjectProtectionParams struct {
	// Specifies the Azure Protection Job type.
	ProtectionType *string `json:"protectionType,omitempty"`
}

// NewAzureCommonObjectProtectionParams instantiates a new AzureCommonObjectProtectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureCommonObjectProtectionParams() *AzureCommonObjectProtectionParams {
	this := AzureCommonObjectProtectionParams{}
	return &this
}

// NewAzureCommonObjectProtectionParamsWithDefaults instantiates a new AzureCommonObjectProtectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureCommonObjectProtectionParamsWithDefaults() *AzureCommonObjectProtectionParams {
	this := AzureCommonObjectProtectionParams{}
	return &this
}

// GetProtectionType returns the ProtectionType field value if set, zero value otherwise.
func (o *AzureCommonObjectProtectionParams) GetProtectionType() string {
	if o == nil || IsNil(o.ProtectionType) {
		var ret string
		return ret
	}
	return *o.ProtectionType
}

// GetProtectionTypeOk returns a tuple with the ProtectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureCommonObjectProtectionParams) GetProtectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ProtectionType) {
		return nil, false
	}
	return o.ProtectionType, true
}

// HasProtectionType returns a boolean if a field has been set.
func (o *AzureCommonObjectProtectionParams) HasProtectionType() bool {
	if o != nil && !IsNil(o.ProtectionType) {
		return true
	}

	return false
}

// SetProtectionType gets a reference to the given string and assigns it to the ProtectionType field.
func (o *AzureCommonObjectProtectionParams) SetProtectionType(v string) {
	o.ProtectionType = &v
}

func (o AzureCommonObjectProtectionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureCommonObjectProtectionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProtectionType) {
		toSerialize["protectionType"] = o.ProtectionType
	}
	return toSerialize, nil
}

type NullableAzureCommonObjectProtectionParams struct {
	value *AzureCommonObjectProtectionParams
	isSet bool
}

func (v NullableAzureCommonObjectProtectionParams) Get() *AzureCommonObjectProtectionParams {
	return v.value
}

func (v *NullableAzureCommonObjectProtectionParams) Set(val *AzureCommonObjectProtectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureCommonObjectProtectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureCommonObjectProtectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureCommonObjectProtectionParams(val *AzureCommonObjectProtectionParams) *NullableAzureCommonObjectProtectionParams {
	return &NullableAzureCommonObjectProtectionParams{value: val, isSet: true}
}

func (v NullableAzureCommonObjectProtectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureCommonObjectProtectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


