/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsVmRecoveryTargetConfigNewSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsVmRecoveryTargetConfigNewSourceConfig{}

// AwsVmRecoveryTargetConfigNewSourceConfig Specifies the new destination Source configuration parameters where the VMs will be recovered. This is mandatory if recoverToNewSource is set to true.
type AwsVmRecoveryTargetConfigNewSourceConfig struct {
	EncryptionConfig NullableRecoverAwsVmNewSourceConfigEncryptionConfig `json:"encryptionConfig,omitempty"`
	KeyPair NullableRecoverAwsVmNewSourceConfigKeyPair `json:"keyPair,omitempty"`
	NetworkConfig NullableRecoverAwsVmNewSourceConfigNetworkConfig `json:"networkConfig"`
	Region NullableRecoverAwsVmNewSourceConfigRegion `json:"region"`
	Source NullableRecoverAcropolisVmNewSourceConfigSource `json:"source"`
}

type _AwsVmRecoveryTargetConfigNewSourceConfig AwsVmRecoveryTargetConfigNewSourceConfig

// NewAwsVmRecoveryTargetConfigNewSourceConfig instantiates a new AwsVmRecoveryTargetConfigNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsVmRecoveryTargetConfigNewSourceConfig(networkConfig NullableRecoverAwsVmNewSourceConfigNetworkConfig, region NullableRecoverAwsVmNewSourceConfigRegion, source NullableRecoverAcropolisVmNewSourceConfigSource) *AwsVmRecoveryTargetConfigNewSourceConfig {
	this := AwsVmRecoveryTargetConfigNewSourceConfig{}
	this.NetworkConfig = networkConfig
	this.Region = region
	this.Source = source
	return &this
}

// NewAwsVmRecoveryTargetConfigNewSourceConfigWithDefaults instantiates a new AwsVmRecoveryTargetConfigNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsVmRecoveryTargetConfigNewSourceConfigWithDefaults() *AwsVmRecoveryTargetConfigNewSourceConfig {
	this := AwsVmRecoveryTargetConfigNewSourceConfig{}
	return &this
}

// GetEncryptionConfig returns the EncryptionConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) GetEncryptionConfig() RecoverAwsVmNewSourceConfigEncryptionConfig {
	if o == nil || IsNil(o.EncryptionConfig.Get()) {
		var ret RecoverAwsVmNewSourceConfigEncryptionConfig
		return ret
	}
	return *o.EncryptionConfig.Get()
}

// GetEncryptionConfigOk returns a tuple with the EncryptionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) GetEncryptionConfigOk() (*RecoverAwsVmNewSourceConfigEncryptionConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionConfig.Get(), o.EncryptionConfig.IsSet()
}

// HasEncryptionConfig returns a boolean if a field has been set.
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) HasEncryptionConfig() bool {
	if o != nil && o.EncryptionConfig.IsSet() {
		return true
	}

	return false
}

// SetEncryptionConfig gets a reference to the given NullableRecoverAwsVmNewSourceConfigEncryptionConfig and assigns it to the EncryptionConfig field.
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) SetEncryptionConfig(v RecoverAwsVmNewSourceConfigEncryptionConfig) {
	o.EncryptionConfig.Set(&v)
}
// SetEncryptionConfigNil sets the value for EncryptionConfig to be an explicit nil
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) SetEncryptionConfigNil() {
	o.EncryptionConfig.Set(nil)
}

// UnsetEncryptionConfig ensures that no value is present for EncryptionConfig, not even an explicit nil
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) UnsetEncryptionConfig() {
	o.EncryptionConfig.Unset()
}

// GetKeyPair returns the KeyPair field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) GetKeyPair() RecoverAwsVmNewSourceConfigKeyPair {
	if o == nil || IsNil(o.KeyPair.Get()) {
		var ret RecoverAwsVmNewSourceConfigKeyPair
		return ret
	}
	return *o.KeyPair.Get()
}

// GetKeyPairOk returns a tuple with the KeyPair field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) GetKeyPairOk() (*RecoverAwsVmNewSourceConfigKeyPair, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyPair.Get(), o.KeyPair.IsSet()
}

// HasKeyPair returns a boolean if a field has been set.
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) HasKeyPair() bool {
	if o != nil && o.KeyPair.IsSet() {
		return true
	}

	return false
}

// SetKeyPair gets a reference to the given NullableRecoverAwsVmNewSourceConfigKeyPair and assigns it to the KeyPair field.
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) SetKeyPair(v RecoverAwsVmNewSourceConfigKeyPair) {
	o.KeyPair.Set(&v)
}
// SetKeyPairNil sets the value for KeyPair to be an explicit nil
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) SetKeyPairNil() {
	o.KeyPair.Set(nil)
}

// UnsetKeyPair ensures that no value is present for KeyPair, not even an explicit nil
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) UnsetKeyPair() {
	o.KeyPair.Unset()
}

// GetNetworkConfig returns the NetworkConfig field value
// If the value is explicit nil, the zero value for RecoverAwsVmNewSourceConfigNetworkConfig will be returned
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) GetNetworkConfig() RecoverAwsVmNewSourceConfigNetworkConfig {
	if o == nil || o.NetworkConfig.Get() == nil {
		var ret RecoverAwsVmNewSourceConfigNetworkConfig
		return ret
	}

	return *o.NetworkConfig.Get()
}

// GetNetworkConfigOk returns a tuple with the NetworkConfig field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) GetNetworkConfigOk() (*RecoverAwsVmNewSourceConfigNetworkConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkConfig.Get(), o.NetworkConfig.IsSet()
}

// SetNetworkConfig sets field value
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) SetNetworkConfig(v RecoverAwsVmNewSourceConfigNetworkConfig) {
	o.NetworkConfig.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for RecoverAwsVmNewSourceConfigRegion will be returned
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) GetRegion() RecoverAwsVmNewSourceConfigRegion {
	if o == nil || o.Region.Get() == nil {
		var ret RecoverAwsVmNewSourceConfigRegion
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) GetRegionOk() (*RecoverAwsVmNewSourceConfigRegion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) SetRegion(v RecoverAwsVmNewSourceConfigRegion) {
	o.Region.Set(&v)
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoverAcropolisVmNewSourceConfigSource will be returned
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) GetSource() RecoverAcropolisVmNewSourceConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret RecoverAcropolisVmNewSourceConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) GetSourceOk() (*RecoverAcropolisVmNewSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *AwsVmRecoveryTargetConfigNewSourceConfig) SetSource(v RecoverAcropolisVmNewSourceConfigSource) {
	o.Source.Set(&v)
}

func (o AwsVmRecoveryTargetConfigNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsVmRecoveryTargetConfigNewSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EncryptionConfig.IsSet() {
		toSerialize["encryptionConfig"] = o.EncryptionConfig.Get()
	}
	if o.KeyPair.IsSet() {
		toSerialize["keyPair"] = o.KeyPair.Get()
	}
	toSerialize["networkConfig"] = o.NetworkConfig.Get()
	toSerialize["region"] = o.Region.Get()
	toSerialize["source"] = o.Source.Get()
	return toSerialize, nil
}

func (o *AwsVmRecoveryTargetConfigNewSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"networkConfig",
		"region",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsVmRecoveryTargetConfigNewSourceConfig := _AwsVmRecoveryTargetConfigNewSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsVmRecoveryTargetConfigNewSourceConfig)

	if err != nil {
		return err
	}

	*o = AwsVmRecoveryTargetConfigNewSourceConfig(varAwsVmRecoveryTargetConfigNewSourceConfig)

	return err
}

type NullableAwsVmRecoveryTargetConfigNewSourceConfig struct {
	value *AwsVmRecoveryTargetConfigNewSourceConfig
	isSet bool
}

func (v NullableAwsVmRecoveryTargetConfigNewSourceConfig) Get() *AwsVmRecoveryTargetConfigNewSourceConfig {
	return v.value
}

func (v *NullableAwsVmRecoveryTargetConfigNewSourceConfig) Set(val *AwsVmRecoveryTargetConfigNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsVmRecoveryTargetConfigNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsVmRecoveryTargetConfigNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsVmRecoveryTargetConfigNewSourceConfig(val *AwsVmRecoveryTargetConfigNewSourceConfig) *NullableAwsVmRecoveryTargetConfigNewSourceConfig {
	return &NullableAwsVmRecoveryTargetConfigNewSourceConfig{value: val, isSet: true}
}

func (v NullableAwsVmRecoveryTargetConfigNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsVmRecoveryTargetConfigNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


