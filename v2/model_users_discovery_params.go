/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UsersDiscoveryParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsersDiscoveryParams{}

// UsersDiscoveryParams Specifies discovery params for User(mailbox/onedrive) entities. It should only be populated when the 'DiscoveryParams.discoverableObjectTypeList' includes 'kUsers' otherwise this will be ignored.
type UsersDiscoveryParams struct {
	// Specifies whether users' chats should be backed up or not. If this is false or not specified users' chats backup will not be done.
	AllowChatsBackup NullableBool `json:"allowChatsBackup,omitempty"`
	// Specifies if office 365 users with valid mailboxes should be discovered or not.
	DiscoverUsersWithMailbox NullableBool `json:"discoverUsersWithMailbox,omitempty"`
	// Specifies if office 365 users with valid Onedrives should be discovered or not.
	DiscoverUsersWithOnedrive NullableBool `json:"discoverUsersWithOnedrive,omitempty"`
	// Specifies whether users' mailbox info including the provisioning status, mailbox type & in-place archival support will be fetched and processed.
	FetchMailboxInfo NullableBool `json:"fetchMailboxInfo,omitempty"`
	// Specifies whether users' onedrive info including the provisioning status & storage quota will be fetched and processed.
	FetchOneDriveInfo NullableBool `json:"fetchOneDriveInfo,omitempty"`
	// Specifies whether to skip processing user who have uninitialized OneDrive or are without MySite.
	SkipUsersWithoutMySite NullableBool `json:"skipUsersWithoutMySite,omitempty"`
}

// NewUsersDiscoveryParams instantiates a new UsersDiscoveryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersDiscoveryParams() *UsersDiscoveryParams {
	this := UsersDiscoveryParams{}
	return &this
}

// NewUsersDiscoveryParamsWithDefaults instantiates a new UsersDiscoveryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersDiscoveryParamsWithDefaults() *UsersDiscoveryParams {
	this := UsersDiscoveryParams{}
	return &this
}

// GetAllowChatsBackup returns the AllowChatsBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersDiscoveryParams) GetAllowChatsBackup() bool {
	if o == nil || IsNil(o.AllowChatsBackup.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowChatsBackup.Get()
}

// GetAllowChatsBackupOk returns a tuple with the AllowChatsBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersDiscoveryParams) GetAllowChatsBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowChatsBackup.Get(), o.AllowChatsBackup.IsSet()
}

// HasAllowChatsBackup returns a boolean if a field has been set.
func (o *UsersDiscoveryParams) HasAllowChatsBackup() bool {
	if o != nil && o.AllowChatsBackup.IsSet() {
		return true
	}

	return false
}

// SetAllowChatsBackup gets a reference to the given NullableBool and assigns it to the AllowChatsBackup field.
func (o *UsersDiscoveryParams) SetAllowChatsBackup(v bool) {
	o.AllowChatsBackup.Set(&v)
}
// SetAllowChatsBackupNil sets the value for AllowChatsBackup to be an explicit nil
func (o *UsersDiscoveryParams) SetAllowChatsBackupNil() {
	o.AllowChatsBackup.Set(nil)
}

// UnsetAllowChatsBackup ensures that no value is present for AllowChatsBackup, not even an explicit nil
func (o *UsersDiscoveryParams) UnsetAllowChatsBackup() {
	o.AllowChatsBackup.Unset()
}

// GetDiscoverUsersWithMailbox returns the DiscoverUsersWithMailbox field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersDiscoveryParams) GetDiscoverUsersWithMailbox() bool {
	if o == nil || IsNil(o.DiscoverUsersWithMailbox.Get()) {
		var ret bool
		return ret
	}
	return *o.DiscoverUsersWithMailbox.Get()
}

// GetDiscoverUsersWithMailboxOk returns a tuple with the DiscoverUsersWithMailbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersDiscoveryParams) GetDiscoverUsersWithMailboxOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscoverUsersWithMailbox.Get(), o.DiscoverUsersWithMailbox.IsSet()
}

// HasDiscoverUsersWithMailbox returns a boolean if a field has been set.
func (o *UsersDiscoveryParams) HasDiscoverUsersWithMailbox() bool {
	if o != nil && o.DiscoverUsersWithMailbox.IsSet() {
		return true
	}

	return false
}

// SetDiscoverUsersWithMailbox gets a reference to the given NullableBool and assigns it to the DiscoverUsersWithMailbox field.
func (o *UsersDiscoveryParams) SetDiscoverUsersWithMailbox(v bool) {
	o.DiscoverUsersWithMailbox.Set(&v)
}
// SetDiscoverUsersWithMailboxNil sets the value for DiscoverUsersWithMailbox to be an explicit nil
func (o *UsersDiscoveryParams) SetDiscoverUsersWithMailboxNil() {
	o.DiscoverUsersWithMailbox.Set(nil)
}

// UnsetDiscoverUsersWithMailbox ensures that no value is present for DiscoverUsersWithMailbox, not even an explicit nil
func (o *UsersDiscoveryParams) UnsetDiscoverUsersWithMailbox() {
	o.DiscoverUsersWithMailbox.Unset()
}

// GetDiscoverUsersWithOnedrive returns the DiscoverUsersWithOnedrive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersDiscoveryParams) GetDiscoverUsersWithOnedrive() bool {
	if o == nil || IsNil(o.DiscoverUsersWithOnedrive.Get()) {
		var ret bool
		return ret
	}
	return *o.DiscoverUsersWithOnedrive.Get()
}

// GetDiscoverUsersWithOnedriveOk returns a tuple with the DiscoverUsersWithOnedrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersDiscoveryParams) GetDiscoverUsersWithOnedriveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscoverUsersWithOnedrive.Get(), o.DiscoverUsersWithOnedrive.IsSet()
}

// HasDiscoverUsersWithOnedrive returns a boolean if a field has been set.
func (o *UsersDiscoveryParams) HasDiscoverUsersWithOnedrive() bool {
	if o != nil && o.DiscoverUsersWithOnedrive.IsSet() {
		return true
	}

	return false
}

// SetDiscoverUsersWithOnedrive gets a reference to the given NullableBool and assigns it to the DiscoverUsersWithOnedrive field.
func (o *UsersDiscoveryParams) SetDiscoverUsersWithOnedrive(v bool) {
	o.DiscoverUsersWithOnedrive.Set(&v)
}
// SetDiscoverUsersWithOnedriveNil sets the value for DiscoverUsersWithOnedrive to be an explicit nil
func (o *UsersDiscoveryParams) SetDiscoverUsersWithOnedriveNil() {
	o.DiscoverUsersWithOnedrive.Set(nil)
}

// UnsetDiscoverUsersWithOnedrive ensures that no value is present for DiscoverUsersWithOnedrive, not even an explicit nil
func (o *UsersDiscoveryParams) UnsetDiscoverUsersWithOnedrive() {
	o.DiscoverUsersWithOnedrive.Unset()
}

// GetFetchMailboxInfo returns the FetchMailboxInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersDiscoveryParams) GetFetchMailboxInfo() bool {
	if o == nil || IsNil(o.FetchMailboxInfo.Get()) {
		var ret bool
		return ret
	}
	return *o.FetchMailboxInfo.Get()
}

// GetFetchMailboxInfoOk returns a tuple with the FetchMailboxInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersDiscoveryParams) GetFetchMailboxInfoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FetchMailboxInfo.Get(), o.FetchMailboxInfo.IsSet()
}

// HasFetchMailboxInfo returns a boolean if a field has been set.
func (o *UsersDiscoveryParams) HasFetchMailboxInfo() bool {
	if o != nil && o.FetchMailboxInfo.IsSet() {
		return true
	}

	return false
}

// SetFetchMailboxInfo gets a reference to the given NullableBool and assigns it to the FetchMailboxInfo field.
func (o *UsersDiscoveryParams) SetFetchMailboxInfo(v bool) {
	o.FetchMailboxInfo.Set(&v)
}
// SetFetchMailboxInfoNil sets the value for FetchMailboxInfo to be an explicit nil
func (o *UsersDiscoveryParams) SetFetchMailboxInfoNil() {
	o.FetchMailboxInfo.Set(nil)
}

// UnsetFetchMailboxInfo ensures that no value is present for FetchMailboxInfo, not even an explicit nil
func (o *UsersDiscoveryParams) UnsetFetchMailboxInfo() {
	o.FetchMailboxInfo.Unset()
}

// GetFetchOneDriveInfo returns the FetchOneDriveInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersDiscoveryParams) GetFetchOneDriveInfo() bool {
	if o == nil || IsNil(o.FetchOneDriveInfo.Get()) {
		var ret bool
		return ret
	}
	return *o.FetchOneDriveInfo.Get()
}

// GetFetchOneDriveInfoOk returns a tuple with the FetchOneDriveInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersDiscoveryParams) GetFetchOneDriveInfoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FetchOneDriveInfo.Get(), o.FetchOneDriveInfo.IsSet()
}

// HasFetchOneDriveInfo returns a boolean if a field has been set.
func (o *UsersDiscoveryParams) HasFetchOneDriveInfo() bool {
	if o != nil && o.FetchOneDriveInfo.IsSet() {
		return true
	}

	return false
}

// SetFetchOneDriveInfo gets a reference to the given NullableBool and assigns it to the FetchOneDriveInfo field.
func (o *UsersDiscoveryParams) SetFetchOneDriveInfo(v bool) {
	o.FetchOneDriveInfo.Set(&v)
}
// SetFetchOneDriveInfoNil sets the value for FetchOneDriveInfo to be an explicit nil
func (o *UsersDiscoveryParams) SetFetchOneDriveInfoNil() {
	o.FetchOneDriveInfo.Set(nil)
}

// UnsetFetchOneDriveInfo ensures that no value is present for FetchOneDriveInfo, not even an explicit nil
func (o *UsersDiscoveryParams) UnsetFetchOneDriveInfo() {
	o.FetchOneDriveInfo.Unset()
}

// GetSkipUsersWithoutMySite returns the SkipUsersWithoutMySite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersDiscoveryParams) GetSkipUsersWithoutMySite() bool {
	if o == nil || IsNil(o.SkipUsersWithoutMySite.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipUsersWithoutMySite.Get()
}

// GetSkipUsersWithoutMySiteOk returns a tuple with the SkipUsersWithoutMySite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersDiscoveryParams) GetSkipUsersWithoutMySiteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipUsersWithoutMySite.Get(), o.SkipUsersWithoutMySite.IsSet()
}

// HasSkipUsersWithoutMySite returns a boolean if a field has been set.
func (o *UsersDiscoveryParams) HasSkipUsersWithoutMySite() bool {
	if o != nil && o.SkipUsersWithoutMySite.IsSet() {
		return true
	}

	return false
}

// SetSkipUsersWithoutMySite gets a reference to the given NullableBool and assigns it to the SkipUsersWithoutMySite field.
func (o *UsersDiscoveryParams) SetSkipUsersWithoutMySite(v bool) {
	o.SkipUsersWithoutMySite.Set(&v)
}
// SetSkipUsersWithoutMySiteNil sets the value for SkipUsersWithoutMySite to be an explicit nil
func (o *UsersDiscoveryParams) SetSkipUsersWithoutMySiteNil() {
	o.SkipUsersWithoutMySite.Set(nil)
}

// UnsetSkipUsersWithoutMySite ensures that no value is present for SkipUsersWithoutMySite, not even an explicit nil
func (o *UsersDiscoveryParams) UnsetSkipUsersWithoutMySite() {
	o.SkipUsersWithoutMySite.Unset()
}

func (o UsersDiscoveryParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsersDiscoveryParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowChatsBackup.IsSet() {
		toSerialize["allowChatsBackup"] = o.AllowChatsBackup.Get()
	}
	if o.DiscoverUsersWithMailbox.IsSet() {
		toSerialize["discoverUsersWithMailbox"] = o.DiscoverUsersWithMailbox.Get()
	}
	if o.DiscoverUsersWithOnedrive.IsSet() {
		toSerialize["discoverUsersWithOnedrive"] = o.DiscoverUsersWithOnedrive.Get()
	}
	if o.FetchMailboxInfo.IsSet() {
		toSerialize["fetchMailboxInfo"] = o.FetchMailboxInfo.Get()
	}
	if o.FetchOneDriveInfo.IsSet() {
		toSerialize["fetchOneDriveInfo"] = o.FetchOneDriveInfo.Get()
	}
	if o.SkipUsersWithoutMySite.IsSet() {
		toSerialize["skipUsersWithoutMySite"] = o.SkipUsersWithoutMySite.Get()
	}
	return toSerialize, nil
}

type NullableUsersDiscoveryParams struct {
	value *UsersDiscoveryParams
	isSet bool
}

func (v NullableUsersDiscoveryParams) Get() *UsersDiscoveryParams {
	return v.value
}

func (v *NullableUsersDiscoveryParams) Set(val *UsersDiscoveryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersDiscoveryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersDiscoveryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersDiscoveryParams(val *UsersDiscoveryParams) *NullableUsersDiscoveryParams {
	return &NullableUsersDiscoveryParams{value: val, isSet: true}
}

func (v NullableUsersDiscoveryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersDiscoveryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


