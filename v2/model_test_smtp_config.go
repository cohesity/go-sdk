/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TestSMTPConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TestSMTPConfig{}

// TestSMTPConfig Specifies a request body to send a test email and validate SMTP configuration. Ensure SMTP is configured on the cluster and that it is not disabled.
type TestSMTPConfig struct {
	// Specifies the recipient's email address.
	Email string `json:"email"`
}

type _TestSMTPConfig TestSMTPConfig

// NewTestSMTPConfig instantiates a new TestSMTPConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestSMTPConfig(email string) *TestSMTPConfig {
	this := TestSMTPConfig{}
	this.Email = email
	return &this
}

// NewTestSMTPConfigWithDefaults instantiates a new TestSMTPConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestSMTPConfigWithDefaults() *TestSMTPConfig {
	this := TestSMTPConfig{}
	return &this
}

// GetEmail returns the Email field value
func (o *TestSMTPConfig) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *TestSMTPConfig) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *TestSMTPConfig) SetEmail(v string) {
	o.Email = v
}

func (o TestSMTPConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TestSMTPConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["email"] = o.Email
	return toSerialize, nil
}

func (o *TestSMTPConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"email",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTestSMTPConfig := _TestSMTPConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTestSMTPConfig)

	if err != nil {
		return err
	}

	*o = TestSMTPConfig(varTestSMTPConfig)

	return err
}

type NullableTestSMTPConfig struct {
	value *TestSMTPConfig
	isSet bool
}

func (v NullableTestSMTPConfig) Get() *TestSMTPConfig {
	return v.value
}

func (v *NullableTestSMTPConfig) Set(val *TestSMTPConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTestSMTPConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTestSMTPConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestSMTPConfig(val *TestSMTPConfig) *NullableTestSMTPConfig {
	return &NullableTestSMTPConfig{value: val, isSet: true}
}

func (v NullableTestSMTPConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestSMTPConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


