/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EntityMetadataParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityMetadataParams{}

// EntityMetadataParams Specifies the parameters to associate metadata with entities in the entity hierarchy.
type EntityMetadataParams struct {
	AwsParams *AwsEntityMetadata `json:"awsParams,omitempty"`
	AzureParams *AzureEntityMetadata `json:"azureParams,omitempty"`
	// Specifies the entity id of the entity whose metadata is being updated.
	EntityId int64 `json:"entityId"`
	MaintenanceModeConfig *MaintenanceModeConfig `json:"maintenanceModeConfig,omitempty"`
}

type _EntityMetadataParams EntityMetadataParams

// NewEntityMetadataParams instantiates a new EntityMetadataParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityMetadataParams(entityId int64) *EntityMetadataParams {
	this := EntityMetadataParams{}
	this.EntityId = entityId
	return &this
}

// NewEntityMetadataParamsWithDefaults instantiates a new EntityMetadataParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityMetadataParamsWithDefaults() *EntityMetadataParams {
	this := EntityMetadataParams{}
	return &this
}

// GetAwsParams returns the AwsParams field value if set, zero value otherwise.
func (o *EntityMetadataParams) GetAwsParams() AwsEntityMetadata {
	if o == nil || IsNil(o.AwsParams) {
		var ret AwsEntityMetadata
		return ret
	}
	return *o.AwsParams
}

// GetAwsParamsOk returns a tuple with the AwsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityMetadataParams) GetAwsParamsOk() (*AwsEntityMetadata, bool) {
	if o == nil || IsNil(o.AwsParams) {
		return nil, false
	}
	return o.AwsParams, true
}

// HasAwsParams returns a boolean if a field has been set.
func (o *EntityMetadataParams) HasAwsParams() bool {
	if o != nil && !IsNil(o.AwsParams) {
		return true
	}

	return false
}

// SetAwsParams gets a reference to the given AwsEntityMetadata and assigns it to the AwsParams field.
func (o *EntityMetadataParams) SetAwsParams(v AwsEntityMetadata) {
	o.AwsParams = &v
}

// GetAzureParams returns the AzureParams field value if set, zero value otherwise.
func (o *EntityMetadataParams) GetAzureParams() AzureEntityMetadata {
	if o == nil || IsNil(o.AzureParams) {
		var ret AzureEntityMetadata
		return ret
	}
	return *o.AzureParams
}

// GetAzureParamsOk returns a tuple with the AzureParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityMetadataParams) GetAzureParamsOk() (*AzureEntityMetadata, bool) {
	if o == nil || IsNil(o.AzureParams) {
		return nil, false
	}
	return o.AzureParams, true
}

// HasAzureParams returns a boolean if a field has been set.
func (o *EntityMetadataParams) HasAzureParams() bool {
	if o != nil && !IsNil(o.AzureParams) {
		return true
	}

	return false
}

// SetAzureParams gets a reference to the given AzureEntityMetadata and assigns it to the AzureParams field.
func (o *EntityMetadataParams) SetAzureParams(v AzureEntityMetadata) {
	o.AzureParams = &v
}

// GetEntityId returns the EntityId field value
func (o *EntityMetadataParams) GetEntityId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
func (o *EntityMetadataParams) GetEntityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityId, true
}

// SetEntityId sets field value
func (o *EntityMetadataParams) SetEntityId(v int64) {
	o.EntityId = v
}

// GetMaintenanceModeConfig returns the MaintenanceModeConfig field value if set, zero value otherwise.
func (o *EntityMetadataParams) GetMaintenanceModeConfig() MaintenanceModeConfig {
	if o == nil || IsNil(o.MaintenanceModeConfig) {
		var ret MaintenanceModeConfig
		return ret
	}
	return *o.MaintenanceModeConfig
}

// GetMaintenanceModeConfigOk returns a tuple with the MaintenanceModeConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityMetadataParams) GetMaintenanceModeConfigOk() (*MaintenanceModeConfig, bool) {
	if o == nil || IsNil(o.MaintenanceModeConfig) {
		return nil, false
	}
	return o.MaintenanceModeConfig, true
}

// HasMaintenanceModeConfig returns a boolean if a field has been set.
func (o *EntityMetadataParams) HasMaintenanceModeConfig() bool {
	if o != nil && !IsNil(o.MaintenanceModeConfig) {
		return true
	}

	return false
}

// SetMaintenanceModeConfig gets a reference to the given MaintenanceModeConfig and assigns it to the MaintenanceModeConfig field.
func (o *EntityMetadataParams) SetMaintenanceModeConfig(v MaintenanceModeConfig) {
	o.MaintenanceModeConfig = &v
}

func (o EntityMetadataParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityMetadataParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AwsParams) {
		toSerialize["awsParams"] = o.AwsParams
	}
	if !IsNil(o.AzureParams) {
		toSerialize["azureParams"] = o.AzureParams
	}
	toSerialize["entityId"] = o.EntityId
	if !IsNil(o.MaintenanceModeConfig) {
		toSerialize["maintenanceModeConfig"] = o.MaintenanceModeConfig
	}
	return toSerialize, nil
}

func (o *EntityMetadataParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEntityMetadataParams := _EntityMetadataParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEntityMetadataParams)

	if err != nil {
		return err
	}

	*o = EntityMetadataParams(varEntityMetadataParams)

	return err
}

type NullableEntityMetadataParams struct {
	value *EntityMetadataParams
	isSet bool
}

func (v NullableEntityMetadataParams) Get() *EntityMetadataParams {
	return v.value
}

func (v *NullableEntityMetadataParams) Set(val *EntityMetadataParams) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityMetadataParams) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityMetadataParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityMetadataParams(val *EntityMetadataParams) *NullableEntityMetadataParams {
	return &NullableEntityMetadataParams{value: val, isSet: true}
}

func (v NullableEntityMetadataParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityMetadataParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


