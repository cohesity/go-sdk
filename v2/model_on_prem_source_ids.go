/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the OnPremSourceIds type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnPremSourceIds{}

// OnPremSourceIds List of source ids for a cluster.
type OnPremSourceIds struct {
	// Specifies a list of source ids. Only files found in these sources will be returned.
	SourceIds []int64 `json:"sourceIds,omitempty"`
}

// NewOnPremSourceIds instantiates a new OnPremSourceIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnPremSourceIds() *OnPremSourceIds {
	this := OnPremSourceIds{}
	return &this
}

// NewOnPremSourceIdsWithDefaults instantiates a new OnPremSourceIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnPremSourceIdsWithDefaults() *OnPremSourceIds {
	this := OnPremSourceIds{}
	return &this
}

// GetSourceIds returns the SourceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnPremSourceIds) GetSourceIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.SourceIds
}

// GetSourceIdsOk returns a tuple with the SourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnPremSourceIds) GetSourceIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.SourceIds) {
		return nil, false
	}
	return o.SourceIds, true
}

// HasSourceIds returns a boolean if a field has been set.
func (o *OnPremSourceIds) HasSourceIds() bool {
	if o != nil && !IsNil(o.SourceIds) {
		return true
	}

	return false
}

// SetSourceIds gets a reference to the given []int64 and assigns it to the SourceIds field.
func (o *OnPremSourceIds) SetSourceIds(v []int64) {
	o.SourceIds = v
}

func (o OnPremSourceIds) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnPremSourceIds) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceIds != nil {
		toSerialize["sourceIds"] = o.SourceIds
	}
	return toSerialize, nil
}

type NullableOnPremSourceIds struct {
	value *OnPremSourceIds
	isSet bool
}

func (v NullableOnPremSourceIds) Get() *OnPremSourceIds {
	return v.value
}

func (v *NullableOnPremSourceIds) Set(val *OnPremSourceIds) {
	v.value = val
	v.isSet = true
}

func (v NullableOnPremSourceIds) IsSet() bool {
	return v.isSet
}

func (v *NullableOnPremSourceIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnPremSourceIds(val *OnPremSourceIds) *NullableOnPremSourceIds {
	return &NullableOnPremSourceIds{value: val, isSet: true}
}

func (v NullableOnPremSourceIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnPremSourceIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


