/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AuditActions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditActions{}

// AuditActions Audit Actions
type AuditActions struct {
	// Audit Actions
	Actions *string `json:"actions,omitempty"`
}

// NewAuditActions instantiates a new AuditActions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditActions() *AuditActions {
	this := AuditActions{}
	return &this
}

// NewAuditActionsWithDefaults instantiates a new AuditActions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditActionsWithDefaults() *AuditActions {
	this := AuditActions{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *AuditActions) GetActions() string {
	if o == nil || IsNil(o.Actions) {
		var ret string
		return ret
	}
	return *o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuditActions) GetActionsOk() (*string, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *AuditActions) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given string and assigns it to the Actions field.
func (o *AuditActions) SetActions(v string) {
	o.Actions = &v
}

func (o AuditActions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditActions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	return toSerialize, nil
}

type NullableAuditActions struct {
	value *AuditActions
	isSet bool
}

func (v NullableAuditActions) Get() *AuditActions {
	return v.value
}

func (v *NullableAuditActions) Set(val *AuditActions) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditActions) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditActions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditActions(val *AuditActions) *NullableAuditActions {
	return &NullableAuditActions{value: val, isSet: true}
}

func (v NullableAuditActions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditActions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


