/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TimeSeriesStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeSeriesStats{}

// TimeSeriesStats Specifies a list of time series stats.
type TimeSeriesStats struct {
	// Specifies the list of time series stats.
	TimeSeriesStats []TimeSeriesStatsForMetric `json:"timeSeriesStats,omitempty"`
}

// NewTimeSeriesStats instantiates a new TimeSeriesStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSeriesStats() *TimeSeriesStats {
	this := TimeSeriesStats{}
	return &this
}

// NewTimeSeriesStatsWithDefaults instantiates a new TimeSeriesStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSeriesStatsWithDefaults() *TimeSeriesStats {
	this := TimeSeriesStats{}
	return &this
}

// GetTimeSeriesStats returns the TimeSeriesStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeSeriesStats) GetTimeSeriesStats() []TimeSeriesStatsForMetric {
	if o == nil {
		var ret []TimeSeriesStatsForMetric
		return ret
	}
	return o.TimeSeriesStats
}

// GetTimeSeriesStatsOk returns a tuple with the TimeSeriesStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeSeriesStats) GetTimeSeriesStatsOk() ([]TimeSeriesStatsForMetric, bool) {
	if o == nil || IsNil(o.TimeSeriesStats) {
		return nil, false
	}
	return o.TimeSeriesStats, true
}

// HasTimeSeriesStats returns a boolean if a field has been set.
func (o *TimeSeriesStats) HasTimeSeriesStats() bool {
	if o != nil && !IsNil(o.TimeSeriesStats) {
		return true
	}

	return false
}

// SetTimeSeriesStats gets a reference to the given []TimeSeriesStatsForMetric and assigns it to the TimeSeriesStats field.
func (o *TimeSeriesStats) SetTimeSeriesStats(v []TimeSeriesStatsForMetric) {
	o.TimeSeriesStats = v
}

func (o TimeSeriesStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeSeriesStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TimeSeriesStats != nil {
		toSerialize["timeSeriesStats"] = o.TimeSeriesStats
	}
	return toSerialize, nil
}

type NullableTimeSeriesStats struct {
	value *TimeSeriesStats
	isSet bool
}

func (v NullableTimeSeriesStats) Get() *TimeSeriesStats {
	return v.value
}

func (v *NullableTimeSeriesStats) Set(val *TimeSeriesStats) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSeriesStats) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSeriesStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSeriesStats(val *TimeSeriesStats) *NullableTimeSeriesStats {
	return &NullableTimeSeriesStats{value: val, isSet: true}
}

func (v NullableTimeSeriesStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSeriesStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


