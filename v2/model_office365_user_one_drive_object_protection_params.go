/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Office365UserOneDriveObjectProtectionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Office365UserOneDriveObjectProtectionParams{}

// Office365UserOneDriveObjectProtectionParams Specifies the params to create a User OneDrive Object Protection.
type Office365UserOneDriveObjectProtectionParams struct {
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	// Specifies the objects to be included in the Object Protection.
	Objects []Office365ObjectProtectionObjectParams `json:"objects"`
	// Specifies the id of the parent of the objects.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Specifies the name of the parent of the objects.
	SourceName NullableString `json:"sourceName,omitempty"`
	// Specifies filters to match OneDrive folders which should be excluded when backing up office365 onedrive source. Two kinds of filters are supported. a) prefix which always starts with '/'. b) posix which always starts with empty quotes(''). Regular expressions are not supported. If not specified, all the OneDrive will be protected.
	ExcludeFolders []string `json:"excludeFolders,omitempty"`
	PreservationHoldLibraryParams *Office365PreservationHoldLibraryParams `json:"preservationHoldLibraryParams,omitempty"`
}

type _Office365UserOneDriveObjectProtectionParams Office365UserOneDriveObjectProtectionParams

// NewOffice365UserOneDriveObjectProtectionParams instantiates a new Office365UserOneDriveObjectProtectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffice365UserOneDriveObjectProtectionParams(objects []Office365ObjectProtectionObjectParams) *Office365UserOneDriveObjectProtectionParams {
	this := Office365UserOneDriveObjectProtectionParams{}
	this.Objects = objects
	return &this
}

// NewOffice365UserOneDriveObjectProtectionParamsWithDefaults instantiates a new Office365UserOneDriveObjectProtectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffice365UserOneDriveObjectProtectionParamsWithDefaults() *Office365UserOneDriveObjectProtectionParams {
	this := Office365UserOneDriveObjectProtectionParams{}
	return &this
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *Office365UserOneDriveObjectProtectionParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || IsNil(o.IndexingPolicy) {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365UserOneDriveObjectProtectionParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || IsNil(o.IndexingPolicy) {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *Office365UserOneDriveObjectProtectionParams) HasIndexingPolicy() bool {
	if o != nil && !IsNil(o.IndexingPolicy) {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *Office365UserOneDriveObjectProtectionParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetObjects returns the Objects field value
func (o *Office365UserOneDriveObjectProtectionParams) GetObjects() []Office365ObjectProtectionObjectParams {
	if o == nil {
		var ret []Office365ObjectProtectionObjectParams
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
func (o *Office365UserOneDriveObjectProtectionParams) GetObjectsOk() ([]Office365ObjectProtectionObjectParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Objects, true
}

// SetObjects sets field value
func (o *Office365UserOneDriveObjectProtectionParams) SetObjects(v []Office365ObjectProtectionObjectParams) {
	o.Objects = v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserOneDriveObjectProtectionParams) GetSourceId() int64 {
	if o == nil || IsNil(o.SourceId.Get()) {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserOneDriveObjectProtectionParams) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *Office365UserOneDriveObjectProtectionParams) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *Office365UserOneDriveObjectProtectionParams) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *Office365UserOneDriveObjectProtectionParams) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *Office365UserOneDriveObjectProtectionParams) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserOneDriveObjectProtectionParams) GetSourceName() string {
	if o == nil || IsNil(o.SourceName.Get()) {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserOneDriveObjectProtectionParams) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *Office365UserOneDriveObjectProtectionParams) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *Office365UserOneDriveObjectProtectionParams) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *Office365UserOneDriveObjectProtectionParams) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *Office365UserOneDriveObjectProtectionParams) UnsetSourceName() {
	o.SourceName.Unset()
}

// GetExcludeFolders returns the ExcludeFolders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserOneDriveObjectProtectionParams) GetExcludeFolders() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludeFolders
}

// GetExcludeFoldersOk returns a tuple with the ExcludeFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserOneDriveObjectProtectionParams) GetExcludeFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeFolders) {
		return nil, false
	}
	return o.ExcludeFolders, true
}

// HasExcludeFolders returns a boolean if a field has been set.
func (o *Office365UserOneDriveObjectProtectionParams) HasExcludeFolders() bool {
	if o != nil && !IsNil(o.ExcludeFolders) {
		return true
	}

	return false
}

// SetExcludeFolders gets a reference to the given []string and assigns it to the ExcludeFolders field.
func (o *Office365UserOneDriveObjectProtectionParams) SetExcludeFolders(v []string) {
	o.ExcludeFolders = v
}

// GetPreservationHoldLibraryParams returns the PreservationHoldLibraryParams field value if set, zero value otherwise.
func (o *Office365UserOneDriveObjectProtectionParams) GetPreservationHoldLibraryParams() Office365PreservationHoldLibraryParams {
	if o == nil || IsNil(o.PreservationHoldLibraryParams) {
		var ret Office365PreservationHoldLibraryParams
		return ret
	}
	return *o.PreservationHoldLibraryParams
}

// GetPreservationHoldLibraryParamsOk returns a tuple with the PreservationHoldLibraryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365UserOneDriveObjectProtectionParams) GetPreservationHoldLibraryParamsOk() (*Office365PreservationHoldLibraryParams, bool) {
	if o == nil || IsNil(o.PreservationHoldLibraryParams) {
		return nil, false
	}
	return o.PreservationHoldLibraryParams, true
}

// HasPreservationHoldLibraryParams returns a boolean if a field has been set.
func (o *Office365UserOneDriveObjectProtectionParams) HasPreservationHoldLibraryParams() bool {
	if o != nil && !IsNil(o.PreservationHoldLibraryParams) {
		return true
	}

	return false
}

// SetPreservationHoldLibraryParams gets a reference to the given Office365PreservationHoldLibraryParams and assigns it to the PreservationHoldLibraryParams field.
func (o *Office365UserOneDriveObjectProtectionParams) SetPreservationHoldLibraryParams(v Office365PreservationHoldLibraryParams) {
	o.PreservationHoldLibraryParams = &v
}

func (o Office365UserOneDriveObjectProtectionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Office365UserOneDriveObjectProtectionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndexingPolicy) {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	toSerialize["objects"] = o.Objects
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	if o.ExcludeFolders != nil {
		toSerialize["excludeFolders"] = o.ExcludeFolders
	}
	if !IsNil(o.PreservationHoldLibraryParams) {
		toSerialize["preservationHoldLibraryParams"] = o.PreservationHoldLibraryParams
	}
	return toSerialize, nil
}

func (o *Office365UserOneDriveObjectProtectionParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOffice365UserOneDriveObjectProtectionParams := _Office365UserOneDriveObjectProtectionParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOffice365UserOneDriveObjectProtectionParams)

	if err != nil {
		return err
	}

	*o = Office365UserOneDriveObjectProtectionParams(varOffice365UserOneDriveObjectProtectionParams)

	return err
}

type NullableOffice365UserOneDriveObjectProtectionParams struct {
	value *Office365UserOneDriveObjectProtectionParams
	isSet bool
}

func (v NullableOffice365UserOneDriveObjectProtectionParams) Get() *Office365UserOneDriveObjectProtectionParams {
	return v.value
}

func (v *NullableOffice365UserOneDriveObjectProtectionParams) Set(val *Office365UserOneDriveObjectProtectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOffice365UserOneDriveObjectProtectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOffice365UserOneDriveObjectProtectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffice365UserOneDriveObjectProtectionParams(val *Office365UserOneDriveObjectProtectionParams) *NullableOffice365UserOneDriveObjectProtectionParams {
	return &NullableOffice365UserOneDriveObjectProtectionParams{value: val, isSet: true}
}

func (v NullableOffice365UserOneDriveObjectProtectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffice365UserOneDriveObjectProtectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


