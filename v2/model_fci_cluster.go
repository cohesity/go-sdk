/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FCICluster type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FCICluster{}

// FCICluster Specifies the details of a Failover Cluster Instance.
type FCICluster struct {
	Error *Error `json:"error,omitempty"`
	// Specifies the unique identifier of the FCI.
	Id NullableString `json:"id,omitempty"`
	// Indicates to the UI whether this FCI cluster should be selected by default
	IsSelectedByDefault NullableBool `json:"isSelectedByDefault,omitempty"`
	// Specifies the name of the FCI.
	Name NullableString `json:"name,omitempty"`
	ResourceInfo *AppResource `json:"resourceInfo,omitempty"`
	// Specifies the list of SQL servers which belongs to the given FCI. 
	Servers []SQLServer `json:"servers,omitempty"`
}

// NewFCICluster instantiates a new FCICluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFCICluster() *FCICluster {
	this := FCICluster{}
	return &this
}

// NewFCIClusterWithDefaults instantiates a new FCICluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFCIClusterWithDefaults() *FCICluster {
	this := FCICluster{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *FCICluster) GetError() Error {
	if o == nil || IsNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FCICluster) GetErrorOk() (*Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *FCICluster) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *FCICluster) SetError(v Error) {
	o.Error = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FCICluster) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FCICluster) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *FCICluster) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *FCICluster) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *FCICluster) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *FCICluster) UnsetId() {
	o.Id.Unset()
}

// GetIsSelectedByDefault returns the IsSelectedByDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FCICluster) GetIsSelectedByDefault() bool {
	if o == nil || IsNil(o.IsSelectedByDefault.Get()) {
		var ret bool
		return ret
	}
	return *o.IsSelectedByDefault.Get()
}

// GetIsSelectedByDefaultOk returns a tuple with the IsSelectedByDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FCICluster) GetIsSelectedByDefaultOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSelectedByDefault.Get(), o.IsSelectedByDefault.IsSet()
}

// HasIsSelectedByDefault returns a boolean if a field has been set.
func (o *FCICluster) HasIsSelectedByDefault() bool {
	if o != nil && o.IsSelectedByDefault.IsSet() {
		return true
	}

	return false
}

// SetIsSelectedByDefault gets a reference to the given NullableBool and assigns it to the IsSelectedByDefault field.
func (o *FCICluster) SetIsSelectedByDefault(v bool) {
	o.IsSelectedByDefault.Set(&v)
}
// SetIsSelectedByDefaultNil sets the value for IsSelectedByDefault to be an explicit nil
func (o *FCICluster) SetIsSelectedByDefaultNil() {
	o.IsSelectedByDefault.Set(nil)
}

// UnsetIsSelectedByDefault ensures that no value is present for IsSelectedByDefault, not even an explicit nil
func (o *FCICluster) UnsetIsSelectedByDefault() {
	o.IsSelectedByDefault.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FCICluster) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FCICluster) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *FCICluster) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *FCICluster) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *FCICluster) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *FCICluster) UnsetName() {
	o.Name.Unset()
}

// GetResourceInfo returns the ResourceInfo field value if set, zero value otherwise.
func (o *FCICluster) GetResourceInfo() AppResource {
	if o == nil || IsNil(o.ResourceInfo) {
		var ret AppResource
		return ret
	}
	return *o.ResourceInfo
}

// GetResourceInfoOk returns a tuple with the ResourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FCICluster) GetResourceInfoOk() (*AppResource, bool) {
	if o == nil || IsNil(o.ResourceInfo) {
		return nil, false
	}
	return o.ResourceInfo, true
}

// HasResourceInfo returns a boolean if a field has been set.
func (o *FCICluster) HasResourceInfo() bool {
	if o != nil && !IsNil(o.ResourceInfo) {
		return true
	}

	return false
}

// SetResourceInfo gets a reference to the given AppResource and assigns it to the ResourceInfo field.
func (o *FCICluster) SetResourceInfo(v AppResource) {
	o.ResourceInfo = &v
}

// GetServers returns the Servers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FCICluster) GetServers() []SQLServer {
	if o == nil {
		var ret []SQLServer
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FCICluster) GetServersOk() ([]SQLServer, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *FCICluster) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []SQLServer and assigns it to the Servers field.
func (o *FCICluster) SetServers(v []SQLServer) {
	o.Servers = v
}

func (o FCICluster) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FCICluster) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IsSelectedByDefault.IsSet() {
		toSerialize["isSelectedByDefault"] = o.IsSelectedByDefault.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.ResourceInfo) {
		toSerialize["resourceInfo"] = o.ResourceInfo
	}
	if o.Servers != nil {
		toSerialize["servers"] = o.Servers
	}
	return toSerialize, nil
}

type NullableFCICluster struct {
	value *FCICluster
	isSet bool
}

func (v NullableFCICluster) Get() *FCICluster {
	return v.value
}

func (v *NullableFCICluster) Set(val *FCICluster) {
	v.value = val
	v.isSet = true
}

func (v NullableFCICluster) IsSet() bool {
	return v.isSet
}

func (v *NullableFCICluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFCICluster(val *FCICluster) *NullableFCICluster {
	return &NullableFCICluster{value: val, isSet: true}
}

func (v NullableFCICluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFCICluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


