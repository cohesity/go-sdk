/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExperimentalAdapterObjectProtectionObjectParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExperimentalAdapterObjectProtectionObjectParams{}

// ExperimentalAdapterObjectProtectionObjectParams Specifies the object parameters to create an Experimental Adapter Object Protection.
type ExperimentalAdapterObjectProtectionObjectParams struct {
	// Specifies the ids of the objects to be excluded in the Object Protection. This can be used to ignore specific objects under a parent object which has been included for protection.
	ExcludedObjectIds []int32 `json:"excludedObjectIds,omitempty"`
	// Specifies the id of the object being protected. This can be a leaf level or non leaf level object.
	Id int64 `json:"id"`
}

type _ExperimentalAdapterObjectProtectionObjectParams ExperimentalAdapterObjectProtectionObjectParams

// NewExperimentalAdapterObjectProtectionObjectParams instantiates a new ExperimentalAdapterObjectProtectionObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExperimentalAdapterObjectProtectionObjectParams(id int64) *ExperimentalAdapterObjectProtectionObjectParams {
	this := ExperimentalAdapterObjectProtectionObjectParams{}
	this.Id = id
	return &this
}

// NewExperimentalAdapterObjectProtectionObjectParamsWithDefaults instantiates a new ExperimentalAdapterObjectProtectionObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExperimentalAdapterObjectProtectionObjectParamsWithDefaults() *ExperimentalAdapterObjectProtectionObjectParams {
	this := ExperimentalAdapterObjectProtectionObjectParams{}
	return &this
}

// GetExcludedObjectIds returns the ExcludedObjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExperimentalAdapterObjectProtectionObjectParams) GetExcludedObjectIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.ExcludedObjectIds
}

// GetExcludedObjectIdsOk returns a tuple with the ExcludedObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExperimentalAdapterObjectProtectionObjectParams) GetExcludedObjectIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ExcludedObjectIds) {
		return nil, false
	}
	return o.ExcludedObjectIds, true
}

// HasExcludedObjectIds returns a boolean if a field has been set.
func (o *ExperimentalAdapterObjectProtectionObjectParams) HasExcludedObjectIds() bool {
	if o != nil && !IsNil(o.ExcludedObjectIds) {
		return true
	}

	return false
}

// SetExcludedObjectIds gets a reference to the given []int32 and assigns it to the ExcludedObjectIds field.
func (o *ExperimentalAdapterObjectProtectionObjectParams) SetExcludedObjectIds(v []int32) {
	o.ExcludedObjectIds = v
}

// GetId returns the Id field value
func (o *ExperimentalAdapterObjectProtectionObjectParams) GetId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ExperimentalAdapterObjectProtectionObjectParams) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ExperimentalAdapterObjectProtectionObjectParams) SetId(v int64) {
	o.Id = v
}

func (o ExperimentalAdapterObjectProtectionObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExperimentalAdapterObjectProtectionObjectParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludedObjectIds != nil {
		toSerialize["excludedObjectIds"] = o.ExcludedObjectIds
	}
	toSerialize["id"] = o.Id
	return toSerialize, nil
}

func (o *ExperimentalAdapterObjectProtectionObjectParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExperimentalAdapterObjectProtectionObjectParams := _ExperimentalAdapterObjectProtectionObjectParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExperimentalAdapterObjectProtectionObjectParams)

	if err != nil {
		return err
	}

	*o = ExperimentalAdapterObjectProtectionObjectParams(varExperimentalAdapterObjectProtectionObjectParams)

	return err
}

type NullableExperimentalAdapterObjectProtectionObjectParams struct {
	value *ExperimentalAdapterObjectProtectionObjectParams
	isSet bool
}

func (v NullableExperimentalAdapterObjectProtectionObjectParams) Get() *ExperimentalAdapterObjectProtectionObjectParams {
	return v.value
}

func (v *NullableExperimentalAdapterObjectProtectionObjectParams) Set(val *ExperimentalAdapterObjectProtectionObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableExperimentalAdapterObjectProtectionObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableExperimentalAdapterObjectProtectionObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExperimentalAdapterObjectProtectionObjectParams(val *ExperimentalAdapterObjectProtectionObjectParams) *NullableExperimentalAdapterObjectProtectionObjectParams {
	return &NullableExperimentalAdapterObjectProtectionObjectParams{value: val, isSet: true}
}

func (v NullableExperimentalAdapterObjectProtectionObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExperimentalAdapterObjectProtectionObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


