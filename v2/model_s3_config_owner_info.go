/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the S3ConfigOwnerInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3ConfigOwnerInfo{}

// S3ConfigOwnerInfo Specifies the owner info of the View as an S3 bucket.
type S3ConfigOwnerInfo struct {
	// Specifies the distinguished name of the bucket owner for an ABAC enabled S3 Bucket.
	DistinguishedName NullableString `json:"distinguishedName,omitempty"`
	// Specifies the user id of the owner.
	UserId NullableString `json:"userId,omitempty"`
}

// NewS3ConfigOwnerInfo instantiates a new S3ConfigOwnerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3ConfigOwnerInfo() *S3ConfigOwnerInfo {
	this := S3ConfigOwnerInfo{}
	return &this
}

// NewS3ConfigOwnerInfoWithDefaults instantiates a new S3ConfigOwnerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3ConfigOwnerInfoWithDefaults() *S3ConfigOwnerInfo {
	this := S3ConfigOwnerInfo{}
	return &this
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3ConfigOwnerInfo) GetDistinguishedName() string {
	if o == nil || IsNil(o.DistinguishedName.Get()) {
		var ret string
		return ret
	}
	return *o.DistinguishedName.Get()
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3ConfigOwnerInfo) GetDistinguishedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistinguishedName.Get(), o.DistinguishedName.IsSet()
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *S3ConfigOwnerInfo) HasDistinguishedName() bool {
	if o != nil && o.DistinguishedName.IsSet() {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given NullableString and assigns it to the DistinguishedName field.
func (o *S3ConfigOwnerInfo) SetDistinguishedName(v string) {
	o.DistinguishedName.Set(&v)
}
// SetDistinguishedNameNil sets the value for DistinguishedName to be an explicit nil
func (o *S3ConfigOwnerInfo) SetDistinguishedNameNil() {
	o.DistinguishedName.Set(nil)
}

// UnsetDistinguishedName ensures that no value is present for DistinguishedName, not even an explicit nil
func (o *S3ConfigOwnerInfo) UnsetDistinguishedName() {
	o.DistinguishedName.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3ConfigOwnerInfo) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3ConfigOwnerInfo) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *S3ConfigOwnerInfo) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *S3ConfigOwnerInfo) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *S3ConfigOwnerInfo) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *S3ConfigOwnerInfo) UnsetUserId() {
	o.UserId.Unset()
}

func (o S3ConfigOwnerInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3ConfigOwnerInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DistinguishedName.IsSet() {
		toSerialize["distinguishedName"] = o.DistinguishedName.Get()
	}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	return toSerialize, nil
}

type NullableS3ConfigOwnerInfo struct {
	value *S3ConfigOwnerInfo
	isSet bool
}

func (v NullableS3ConfigOwnerInfo) Get() *S3ConfigOwnerInfo {
	return v.value
}

func (v *NullableS3ConfigOwnerInfo) Set(val *S3ConfigOwnerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableS3ConfigOwnerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableS3ConfigOwnerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3ConfigOwnerInfo(val *S3ConfigOwnerInfo) *NullableS3ConfigOwnerInfo {
	return &NullableS3ConfigOwnerInfo{value: val, isSet: true}
}

func (v NullableS3ConfigOwnerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3ConfigOwnerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


