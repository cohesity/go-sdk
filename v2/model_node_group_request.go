/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeGroupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeGroupRequest{}

// NodeGroupRequest Specifies the request to create a Node Group.
type NodeGroupRequest struct {
	BgpInstance *BgpInstance `json:"bgpInstance,omitempty"`
	DnsServersInfo *DnsServersInfo `json:"dnsServersInfo,omitempty"`
	// Id of the node group.
	Id NullableInt32 `json:"id,omitempty"`
	// Specifies the name of the Node Group.
	Name string `json:"name"`
	// List of Node Ids that are part of this node group.
	NodeIds []int64 `json:"node-ids,omitempty"`
	SubnetInfo *SubnetInfo `json:"subnetInfo,omitempty"`
	// Type of the node group.
	Type NullableInt32 `json:"type,omitempty"`
}

type _NodeGroupRequest NodeGroupRequest

// NewNodeGroupRequest instantiates a new NodeGroupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeGroupRequest(name string) *NodeGroupRequest {
	this := NodeGroupRequest{}
	this.Name = name
	return &this
}

// NewNodeGroupRequestWithDefaults instantiates a new NodeGroupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeGroupRequestWithDefaults() *NodeGroupRequest {
	this := NodeGroupRequest{}
	return &this
}

// GetBgpInstance returns the BgpInstance field value if set, zero value otherwise.
func (o *NodeGroupRequest) GetBgpInstance() BgpInstance {
	if o == nil || IsNil(o.BgpInstance) {
		var ret BgpInstance
		return ret
	}
	return *o.BgpInstance
}

// GetBgpInstanceOk returns a tuple with the BgpInstance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeGroupRequest) GetBgpInstanceOk() (*BgpInstance, bool) {
	if o == nil || IsNil(o.BgpInstance) {
		return nil, false
	}
	return o.BgpInstance, true
}

// HasBgpInstance returns a boolean if a field has been set.
func (o *NodeGroupRequest) HasBgpInstance() bool {
	if o != nil && !IsNil(o.BgpInstance) {
		return true
	}

	return false
}

// SetBgpInstance gets a reference to the given BgpInstance and assigns it to the BgpInstance field.
func (o *NodeGroupRequest) SetBgpInstance(v BgpInstance) {
	o.BgpInstance = &v
}

// GetDnsServersInfo returns the DnsServersInfo field value if set, zero value otherwise.
func (o *NodeGroupRequest) GetDnsServersInfo() DnsServersInfo {
	if o == nil || IsNil(o.DnsServersInfo) {
		var ret DnsServersInfo
		return ret
	}
	return *o.DnsServersInfo
}

// GetDnsServersInfoOk returns a tuple with the DnsServersInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeGroupRequest) GetDnsServersInfoOk() (*DnsServersInfo, bool) {
	if o == nil || IsNil(o.DnsServersInfo) {
		return nil, false
	}
	return o.DnsServersInfo, true
}

// HasDnsServersInfo returns a boolean if a field has been set.
func (o *NodeGroupRequest) HasDnsServersInfo() bool {
	if o != nil && !IsNil(o.DnsServersInfo) {
		return true
	}

	return false
}

// SetDnsServersInfo gets a reference to the given DnsServersInfo and assigns it to the DnsServersInfo field.
func (o *NodeGroupRequest) SetDnsServersInfo(v DnsServersInfo) {
	o.DnsServersInfo = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeGroupRequest) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeGroupRequest) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NodeGroupRequest) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *NodeGroupRequest) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NodeGroupRequest) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NodeGroupRequest) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value
func (o *NodeGroupRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *NodeGroupRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *NodeGroupRequest) SetName(v string) {
	o.Name = v
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeGroupRequest) GetNodeIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeGroupRequest) GetNodeIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.NodeIds) {
		return nil, false
	}
	return o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *NodeGroupRequest) HasNodeIds() bool {
	if o != nil && !IsNil(o.NodeIds) {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []int64 and assigns it to the NodeIds field.
func (o *NodeGroupRequest) SetNodeIds(v []int64) {
	o.NodeIds = v
}

// GetSubnetInfo returns the SubnetInfo field value if set, zero value otherwise.
func (o *NodeGroupRequest) GetSubnetInfo() SubnetInfo {
	if o == nil || IsNil(o.SubnetInfo) {
		var ret SubnetInfo
		return ret
	}
	return *o.SubnetInfo
}

// GetSubnetInfoOk returns a tuple with the SubnetInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeGroupRequest) GetSubnetInfoOk() (*SubnetInfo, bool) {
	if o == nil || IsNil(o.SubnetInfo) {
		return nil, false
	}
	return o.SubnetInfo, true
}

// HasSubnetInfo returns a boolean if a field has been set.
func (o *NodeGroupRequest) HasSubnetInfo() bool {
	if o != nil && !IsNil(o.SubnetInfo) {
		return true
	}

	return false
}

// SetSubnetInfo gets a reference to the given SubnetInfo and assigns it to the SubnetInfo field.
func (o *NodeGroupRequest) SetSubnetInfo(v SubnetInfo) {
	o.SubnetInfo = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeGroupRequest) GetType() int32 {
	if o == nil || IsNil(o.Type.Get()) {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeGroupRequest) GetTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *NodeGroupRequest) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *NodeGroupRequest) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *NodeGroupRequest) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *NodeGroupRequest) UnsetType() {
	o.Type.Unset()
}

func (o NodeGroupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeGroupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BgpInstance) {
		toSerialize["bgpInstance"] = o.BgpInstance
	}
	if !IsNil(o.DnsServersInfo) {
		toSerialize["dnsServersInfo"] = o.DnsServersInfo
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	toSerialize["name"] = o.Name
	if o.NodeIds != nil {
		toSerialize["node-ids"] = o.NodeIds
	}
	if !IsNil(o.SubnetInfo) {
		toSerialize["subnetInfo"] = o.SubnetInfo
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

func (o *NodeGroupRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeGroupRequest := _NodeGroupRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeGroupRequest)

	if err != nil {
		return err
	}

	*o = NodeGroupRequest(varNodeGroupRequest)

	return err
}

type NullableNodeGroupRequest struct {
	value *NodeGroupRequest
	isSet bool
}

func (v NullableNodeGroupRequest) Get() *NodeGroupRequest {
	return v.value
}

func (v *NullableNodeGroupRequest) Set(val *NodeGroupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeGroupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeGroupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeGroupRequest(val *NodeGroupRequest) *NullableNodeGroupRequest {
	return &NullableNodeGroupRequest{value: val, isSet: true}
}

func (v NullableNodeGroupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeGroupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


