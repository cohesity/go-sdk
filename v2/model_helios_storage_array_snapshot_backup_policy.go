/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeliosStorageArraySnapshotBackupPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosStorageArraySnapshotBackupPolicy{}

// HeliosStorageArraySnapshotBackupPolicy Specifies storage snapshot managment backup settings for a Protection Group.
type HeliosStorageArraySnapshotBackupPolicy struct {
	Retention HeliosRetention `json:"retention"`
	Schedule HeliosStorageArraySnapshotSchedule `json:"schedule"`
}

type _HeliosStorageArraySnapshotBackupPolicy HeliosStorageArraySnapshotBackupPolicy

// NewHeliosStorageArraySnapshotBackupPolicy instantiates a new HeliosStorageArraySnapshotBackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosStorageArraySnapshotBackupPolicy(retention HeliosRetention, schedule HeliosStorageArraySnapshotSchedule) *HeliosStorageArraySnapshotBackupPolicy {
	this := HeliosStorageArraySnapshotBackupPolicy{}
	this.Retention = retention
	this.Schedule = schedule
	return &this
}

// NewHeliosStorageArraySnapshotBackupPolicyWithDefaults instantiates a new HeliosStorageArraySnapshotBackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosStorageArraySnapshotBackupPolicyWithDefaults() *HeliosStorageArraySnapshotBackupPolicy {
	this := HeliosStorageArraySnapshotBackupPolicy{}
	return &this
}

// GetRetention returns the Retention field value
func (o *HeliosStorageArraySnapshotBackupPolicy) GetRetention() HeliosRetention {
	if o == nil {
		var ret HeliosRetention
		return ret
	}

	return o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *HeliosStorageArraySnapshotBackupPolicy) GetRetentionOk() (*HeliosRetention, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retention, true
}

// SetRetention sets field value
func (o *HeliosStorageArraySnapshotBackupPolicy) SetRetention(v HeliosRetention) {
	o.Retention = v
}

// GetSchedule returns the Schedule field value
func (o *HeliosStorageArraySnapshotBackupPolicy) GetSchedule() HeliosStorageArraySnapshotSchedule {
	if o == nil {
		var ret HeliosStorageArraySnapshotSchedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *HeliosStorageArraySnapshotBackupPolicy) GetScheduleOk() (*HeliosStorageArraySnapshotSchedule, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *HeliosStorageArraySnapshotBackupPolicy) SetSchedule(v HeliosStorageArraySnapshotSchedule) {
	o.Schedule = v
}

func (o HeliosStorageArraySnapshotBackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosStorageArraySnapshotBackupPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["retention"] = o.Retention
	toSerialize["schedule"] = o.Schedule
	return toSerialize, nil
}

func (o *HeliosStorageArraySnapshotBackupPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"retention",
		"schedule",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeliosStorageArraySnapshotBackupPolicy := _HeliosStorageArraySnapshotBackupPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeliosStorageArraySnapshotBackupPolicy)

	if err != nil {
		return err
	}

	*o = HeliosStorageArraySnapshotBackupPolicy(varHeliosStorageArraySnapshotBackupPolicy)

	return err
}

type NullableHeliosStorageArraySnapshotBackupPolicy struct {
	value *HeliosStorageArraySnapshotBackupPolicy
	isSet bool
}

func (v NullableHeliosStorageArraySnapshotBackupPolicy) Get() *HeliosStorageArraySnapshotBackupPolicy {
	return v.value
}

func (v *NullableHeliosStorageArraySnapshotBackupPolicy) Set(val *HeliosStorageArraySnapshotBackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosStorageArraySnapshotBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosStorageArraySnapshotBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosStorageArraySnapshotBackupPolicy(val *HeliosStorageArraySnapshotBackupPolicy) *NullableHeliosStorageArraySnapshotBackupPolicy {
	return &NullableHeliosStorageArraySnapshotBackupPolicy{value: val, isSet: true}
}

func (v NullableHeliosStorageArraySnapshotBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosStorageArraySnapshotBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


