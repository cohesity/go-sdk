/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpgradeCheckNodeResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeCheckNodeResult{}

// UpgradeCheckNodeResult The healthcheck results for node
type UpgradeCheckNodeResult struct {
	// The node ip
	NodeIp *string `json:"nodeIp,omitempty"`
	// The healthcheck test results for node
	NodeTestResults []UpgradeCheckTestResult `json:"nodeTestResults,omitempty"`
	// The healthcheck run status for node
	NodeTestStatus *string `json:"nodeTestStatus,omitempty"`
}

// NewUpgradeCheckNodeResult instantiates a new UpgradeCheckNodeResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeCheckNodeResult() *UpgradeCheckNodeResult {
	this := UpgradeCheckNodeResult{}
	return &this
}

// NewUpgradeCheckNodeResultWithDefaults instantiates a new UpgradeCheckNodeResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeCheckNodeResultWithDefaults() *UpgradeCheckNodeResult {
	this := UpgradeCheckNodeResult{}
	return &this
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise.
func (o *UpgradeCheckNodeResult) GetNodeIp() string {
	if o == nil || IsNil(o.NodeIp) {
		var ret string
		return ret
	}
	return *o.NodeIp
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeCheckNodeResult) GetNodeIpOk() (*string, bool) {
	if o == nil || IsNil(o.NodeIp) {
		return nil, false
	}
	return o.NodeIp, true
}

// HasNodeIp returns a boolean if a field has been set.
func (o *UpgradeCheckNodeResult) HasNodeIp() bool {
	if o != nil && !IsNil(o.NodeIp) {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given string and assigns it to the NodeIp field.
func (o *UpgradeCheckNodeResult) SetNodeIp(v string) {
	o.NodeIp = &v
}

// GetNodeTestResults returns the NodeTestResults field value if set, zero value otherwise.
func (o *UpgradeCheckNodeResult) GetNodeTestResults() []UpgradeCheckTestResult {
	if o == nil || IsNil(o.NodeTestResults) {
		var ret []UpgradeCheckTestResult
		return ret
	}
	return o.NodeTestResults
}

// GetNodeTestResultsOk returns a tuple with the NodeTestResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeCheckNodeResult) GetNodeTestResultsOk() ([]UpgradeCheckTestResult, bool) {
	if o == nil || IsNil(o.NodeTestResults) {
		return nil, false
	}
	return o.NodeTestResults, true
}

// HasNodeTestResults returns a boolean if a field has been set.
func (o *UpgradeCheckNodeResult) HasNodeTestResults() bool {
	if o != nil && !IsNil(o.NodeTestResults) {
		return true
	}

	return false
}

// SetNodeTestResults gets a reference to the given []UpgradeCheckTestResult and assigns it to the NodeTestResults field.
func (o *UpgradeCheckNodeResult) SetNodeTestResults(v []UpgradeCheckTestResult) {
	o.NodeTestResults = v
}

// GetNodeTestStatus returns the NodeTestStatus field value if set, zero value otherwise.
func (o *UpgradeCheckNodeResult) GetNodeTestStatus() string {
	if o == nil || IsNil(o.NodeTestStatus) {
		var ret string
		return ret
	}
	return *o.NodeTestStatus
}

// GetNodeTestStatusOk returns a tuple with the NodeTestStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeCheckNodeResult) GetNodeTestStatusOk() (*string, bool) {
	if o == nil || IsNil(o.NodeTestStatus) {
		return nil, false
	}
	return o.NodeTestStatus, true
}

// HasNodeTestStatus returns a boolean if a field has been set.
func (o *UpgradeCheckNodeResult) HasNodeTestStatus() bool {
	if o != nil && !IsNil(o.NodeTestStatus) {
		return true
	}

	return false
}

// SetNodeTestStatus gets a reference to the given string and assigns it to the NodeTestStatus field.
func (o *UpgradeCheckNodeResult) SetNodeTestStatus(v string) {
	o.NodeTestStatus = &v
}

func (o UpgradeCheckNodeResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeCheckNodeResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NodeIp) {
		toSerialize["nodeIp"] = o.NodeIp
	}
	if !IsNil(o.NodeTestResults) {
		toSerialize["nodeTestResults"] = o.NodeTestResults
	}
	if !IsNil(o.NodeTestStatus) {
		toSerialize["nodeTestStatus"] = o.NodeTestStatus
	}
	return toSerialize, nil
}

type NullableUpgradeCheckNodeResult struct {
	value *UpgradeCheckNodeResult
	isSet bool
}

func (v NullableUpgradeCheckNodeResult) Get() *UpgradeCheckNodeResult {
	return v.value
}

func (v *NullableUpgradeCheckNodeResult) Set(val *UpgradeCheckNodeResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeCheckNodeResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeCheckNodeResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeCheckNodeResult(val *UpgradeCheckNodeResult) *NullableUpgradeCheckNodeResult {
	return &NullableUpgradeCheckNodeResult{value: val, isSet: true}
}

func (v NullableUpgradeCheckNodeResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeCheckNodeResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


