/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ExtendedRetentionSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExtendedRetentionSchedule{}

// ExtendedRetentionSchedule Specifies a schedule frequency and schedule unit for Extended Retentions.
type ExtendedRetentionSchedule struct {
	// Specifies a factor to multiply the unit by, to determine the retention schedule. For example if set to 2 and the unit is hourly, then Snapshots from the first eligible group Run for every 2 hour period is retained.
	Frequency NullableInt32 `json:"frequency,omitempty"`
	// Specifies the unit interval for retention of Snapshots. <br>'Runs' means that the Snapshot copy retained after the number of Protection Group Runs equals the number specified in the frequency. <br>'Hours' means that the Snapshot copy retained hourly at the frequency set in the frequency, for example if scheduleFrequency is 2, the copy occurs every 2 hours. <br>'Days' means that the Snapshot copy gets retained daily at the frequency set in the frequency. <br>'Weeks' means that the Snapshot copy is retained weekly at the frequency set in the frequency. <br>'Months' means that the Snapshot copy is retained monthly at the frequency set in the Frequency. <br>'Years' means that the Snapshot copy is retained yearly at the frequency set in the Frequency.
	Unit NullableString `json:"unit"`
}

type _ExtendedRetentionSchedule ExtendedRetentionSchedule

// NewExtendedRetentionSchedule instantiates a new ExtendedRetentionSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExtendedRetentionSchedule(unit NullableString) *ExtendedRetentionSchedule {
	this := ExtendedRetentionSchedule{}
	this.Unit = unit
	return &this
}

// NewExtendedRetentionScheduleWithDefaults instantiates a new ExtendedRetentionSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExtendedRetentionScheduleWithDefaults() *ExtendedRetentionSchedule {
	this := ExtendedRetentionSchedule{}
	return &this
}

// GetFrequency returns the Frequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExtendedRetentionSchedule) GetFrequency() int32 {
	if o == nil || IsNil(o.Frequency.Get()) {
		var ret int32
		return ret
	}
	return *o.Frequency.Get()
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedRetentionSchedule) GetFrequencyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Frequency.Get(), o.Frequency.IsSet()
}

// HasFrequency returns a boolean if a field has been set.
func (o *ExtendedRetentionSchedule) HasFrequency() bool {
	if o != nil && o.Frequency.IsSet() {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given NullableInt32 and assigns it to the Frequency field.
func (o *ExtendedRetentionSchedule) SetFrequency(v int32) {
	o.Frequency.Set(&v)
}
// SetFrequencyNil sets the value for Frequency to be an explicit nil
func (o *ExtendedRetentionSchedule) SetFrequencyNil() {
	o.Frequency.Set(nil)
}

// UnsetFrequency ensures that no value is present for Frequency, not even an explicit nil
func (o *ExtendedRetentionSchedule) UnsetFrequency() {
	o.Frequency.Unset()
}

// GetUnit returns the Unit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ExtendedRetentionSchedule) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}

	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExtendedRetentionSchedule) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// SetUnit sets field value
func (o *ExtendedRetentionSchedule) SetUnit(v string) {
	o.Unit.Set(&v)
}

func (o ExtendedRetentionSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExtendedRetentionSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Frequency.IsSet() {
		toSerialize["frequency"] = o.Frequency.Get()
	}
	toSerialize["unit"] = o.Unit.Get()
	return toSerialize, nil
}

func (o *ExtendedRetentionSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varExtendedRetentionSchedule := _ExtendedRetentionSchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varExtendedRetentionSchedule)

	if err != nil {
		return err
	}

	*o = ExtendedRetentionSchedule(varExtendedRetentionSchedule)

	return err
}

type NullableExtendedRetentionSchedule struct {
	value *ExtendedRetentionSchedule
	isSet bool
}

func (v NullableExtendedRetentionSchedule) Get() *ExtendedRetentionSchedule {
	return v.value
}

func (v *NullableExtendedRetentionSchedule) Set(val *ExtendedRetentionSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableExtendedRetentionSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableExtendedRetentionSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExtendedRetentionSchedule(val *ExtendedRetentionSchedule) *NullableExtendedRetentionSchedule {
	return &NullableExtendedRetentionSchedule{value: val, isSet: true}
}

func (v NullableExtendedRetentionSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExtendedRetentionSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


