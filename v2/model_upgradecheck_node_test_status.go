/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpgradecheckNodeTestStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradecheckNodeTestStatus{}

// UpgradecheckNodeTestStatus Specifies  status of running upgrade health checks on the node. The healthchecks execution on node can have following possible outcomes Running - The health check is still running on the node. Passed - The health check has passed on this node. Failed - The health check failed on node. Corrective action as described by knowledge base article for the failure must be taken to resolve failure. Skipped - The health check was skipped on this node. Error - Health check execution failure on node.
type UpgradecheckNodeTestStatus struct {
	// Specifies the node status of running upgrade checks.
	Value *string `json:"value,omitempty"`
}

// NewUpgradecheckNodeTestStatus instantiates a new UpgradecheckNodeTestStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradecheckNodeTestStatus() *UpgradecheckNodeTestStatus {
	this := UpgradecheckNodeTestStatus{}
	return &this
}

// NewUpgradecheckNodeTestStatusWithDefaults instantiates a new UpgradecheckNodeTestStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradecheckNodeTestStatusWithDefaults() *UpgradecheckNodeTestStatus {
	this := UpgradecheckNodeTestStatus{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UpgradecheckNodeTestStatus) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradecheckNodeTestStatus) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UpgradecheckNodeTestStatus) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UpgradecheckNodeTestStatus) SetValue(v string) {
	o.Value = &v
}

func (o UpgradecheckNodeTestStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradecheckNodeTestStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableUpgradecheckNodeTestStatus struct {
	value *UpgradecheckNodeTestStatus
	isSet bool
}

func (v NullableUpgradecheckNodeTestStatus) Get() *UpgradecheckNodeTestStatus {
	return v.value
}

func (v *NullableUpgradecheckNodeTestStatus) Set(val *UpgradecheckNodeTestStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradecheckNodeTestStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradecheckNodeTestStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradecheckNodeTestStatus(val *UpgradecheckNodeTestStatus) *NullableUpgradecheckNodeTestStatus {
	return &NullableUpgradecheckNodeTestStatus{value: val, isSet: true}
}

func (v NullableUpgradecheckNodeTestStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradecheckNodeTestStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


