/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DataTransferInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTransferInfo{}

// DataTransferInfo Specifies the the details of network used in transferring the data from source account to Cohesity cluster.
type DataTransferInfo struct {
	// Specifies whether to use private network or public network.
	IsPrivateNetwork NullableBool `json:"isPrivateNetwork,omitempty"`
	// Specifies Information required to create endpoints in private networks for all regions whose VMs are getting protected.
	PrivateNetworkInfoList []PrivateNetworkInfo `json:"privateNetworkInfoList,omitempty"`
	// Specifies Whether to use private network info which was used in backup of VMs.This should be populated only for restore job.
	UseProtectionJobInfo NullableBool `json:"useProtectionJobInfo,omitempty"`
}

// NewDataTransferInfo instantiates a new DataTransferInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTransferInfo() *DataTransferInfo {
	this := DataTransferInfo{}
	return &this
}

// NewDataTransferInfoWithDefaults instantiates a new DataTransferInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTransferInfoWithDefaults() *DataTransferInfo {
	this := DataTransferInfo{}
	return &this
}

// GetIsPrivateNetwork returns the IsPrivateNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferInfo) GetIsPrivateNetwork() bool {
	if o == nil || IsNil(o.IsPrivateNetwork.Get()) {
		var ret bool
		return ret
	}
	return *o.IsPrivateNetwork.Get()
}

// GetIsPrivateNetworkOk returns a tuple with the IsPrivateNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferInfo) GetIsPrivateNetworkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsPrivateNetwork.Get(), o.IsPrivateNetwork.IsSet()
}

// HasIsPrivateNetwork returns a boolean if a field has been set.
func (o *DataTransferInfo) HasIsPrivateNetwork() bool {
	if o != nil && o.IsPrivateNetwork.IsSet() {
		return true
	}

	return false
}

// SetIsPrivateNetwork gets a reference to the given NullableBool and assigns it to the IsPrivateNetwork field.
func (o *DataTransferInfo) SetIsPrivateNetwork(v bool) {
	o.IsPrivateNetwork.Set(&v)
}
// SetIsPrivateNetworkNil sets the value for IsPrivateNetwork to be an explicit nil
func (o *DataTransferInfo) SetIsPrivateNetworkNil() {
	o.IsPrivateNetwork.Set(nil)
}

// UnsetIsPrivateNetwork ensures that no value is present for IsPrivateNetwork, not even an explicit nil
func (o *DataTransferInfo) UnsetIsPrivateNetwork() {
	o.IsPrivateNetwork.Unset()
}

// GetPrivateNetworkInfoList returns the PrivateNetworkInfoList field value if set, zero value otherwise.
func (o *DataTransferInfo) GetPrivateNetworkInfoList() []PrivateNetworkInfo {
	if o == nil || IsNil(o.PrivateNetworkInfoList) {
		var ret []PrivateNetworkInfo
		return ret
	}
	return o.PrivateNetworkInfoList
}

// GetPrivateNetworkInfoListOk returns a tuple with the PrivateNetworkInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTransferInfo) GetPrivateNetworkInfoListOk() ([]PrivateNetworkInfo, bool) {
	if o == nil || IsNil(o.PrivateNetworkInfoList) {
		return nil, false
	}
	return o.PrivateNetworkInfoList, true
}

// HasPrivateNetworkInfoList returns a boolean if a field has been set.
func (o *DataTransferInfo) HasPrivateNetworkInfoList() bool {
	if o != nil && !IsNil(o.PrivateNetworkInfoList) {
		return true
	}

	return false
}

// SetPrivateNetworkInfoList gets a reference to the given []PrivateNetworkInfo and assigns it to the PrivateNetworkInfoList field.
func (o *DataTransferInfo) SetPrivateNetworkInfoList(v []PrivateNetworkInfo) {
	o.PrivateNetworkInfoList = v
}

// GetUseProtectionJobInfo returns the UseProtectionJobInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTransferInfo) GetUseProtectionJobInfo() bool {
	if o == nil || IsNil(o.UseProtectionJobInfo.Get()) {
		var ret bool
		return ret
	}
	return *o.UseProtectionJobInfo.Get()
}

// GetUseProtectionJobInfoOk returns a tuple with the UseProtectionJobInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTransferInfo) GetUseProtectionJobInfoOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseProtectionJobInfo.Get(), o.UseProtectionJobInfo.IsSet()
}

// HasUseProtectionJobInfo returns a boolean if a field has been set.
func (o *DataTransferInfo) HasUseProtectionJobInfo() bool {
	if o != nil && o.UseProtectionJobInfo.IsSet() {
		return true
	}

	return false
}

// SetUseProtectionJobInfo gets a reference to the given NullableBool and assigns it to the UseProtectionJobInfo field.
func (o *DataTransferInfo) SetUseProtectionJobInfo(v bool) {
	o.UseProtectionJobInfo.Set(&v)
}
// SetUseProtectionJobInfoNil sets the value for UseProtectionJobInfo to be an explicit nil
func (o *DataTransferInfo) SetUseProtectionJobInfoNil() {
	o.UseProtectionJobInfo.Set(nil)
}

// UnsetUseProtectionJobInfo ensures that no value is present for UseProtectionJobInfo, not even an explicit nil
func (o *DataTransferInfo) UnsetUseProtectionJobInfo() {
	o.UseProtectionJobInfo.Unset()
}

func (o DataTransferInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTransferInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IsPrivateNetwork.IsSet() {
		toSerialize["isPrivateNetwork"] = o.IsPrivateNetwork.Get()
	}
	if !IsNil(o.PrivateNetworkInfoList) {
		toSerialize["privateNetworkInfoList"] = o.PrivateNetworkInfoList
	}
	if o.UseProtectionJobInfo.IsSet() {
		toSerialize["useProtectionJobInfo"] = o.UseProtectionJobInfo.Get()
	}
	return toSerialize, nil
}

type NullableDataTransferInfo struct {
	value *DataTransferInfo
	isSet bool
}

func (v NullableDataTransferInfo) Get() *DataTransferInfo {
	return v.value
}

func (v *NullableDataTransferInfo) Set(val *DataTransferInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTransferInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTransferInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTransferInfo(val *DataTransferInfo) *NullableDataTransferInfo {
	return &NullableDataTransferInfo{value: val, isSet: true}
}

func (v NullableDataTransferInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTransferInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


