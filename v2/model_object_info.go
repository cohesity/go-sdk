/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ObjectInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectInfo{}

// ObjectInfo Specifies the object info.
type ObjectInfo struct {
	BaseSnapshotHandle NullableSnapshotHandle `json:"baseSnapshotHandle,omitempty"`
	// Specifies the object id.
	GlobalId NullableString `json:"globalId,omitempty"`
	// Specifies the object name
	ObjectName NullableString `json:"objectName,omitempty"`
	ObjectType *ObjectType `json:"objectType,omitempty"`
	// Snapshots of the object.
	Snapshots []GaiaSnapshotInfo `json:"snapshots,omitempty"`
}

// NewObjectInfo instantiates a new ObjectInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectInfo() *ObjectInfo {
	this := ObjectInfo{}
	return &this
}

// NewObjectInfoWithDefaults instantiates a new ObjectInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectInfoWithDefaults() *ObjectInfo {
	this := ObjectInfo{}
	return &this
}

// GetBaseSnapshotHandle returns the BaseSnapshotHandle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInfo) GetBaseSnapshotHandle() SnapshotHandle {
	if o == nil || IsNil(o.BaseSnapshotHandle.Get()) {
		var ret SnapshotHandle
		return ret
	}
	return *o.BaseSnapshotHandle.Get()
}

// GetBaseSnapshotHandleOk returns a tuple with the BaseSnapshotHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInfo) GetBaseSnapshotHandleOk() (*SnapshotHandle, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseSnapshotHandle.Get(), o.BaseSnapshotHandle.IsSet()
}

// HasBaseSnapshotHandle returns a boolean if a field has been set.
func (o *ObjectInfo) HasBaseSnapshotHandle() bool {
	if o != nil && o.BaseSnapshotHandle.IsSet() {
		return true
	}

	return false
}

// SetBaseSnapshotHandle gets a reference to the given NullableSnapshotHandle and assigns it to the BaseSnapshotHandle field.
func (o *ObjectInfo) SetBaseSnapshotHandle(v SnapshotHandle) {
	o.BaseSnapshotHandle.Set(&v)
}
// SetBaseSnapshotHandleNil sets the value for BaseSnapshotHandle to be an explicit nil
func (o *ObjectInfo) SetBaseSnapshotHandleNil() {
	o.BaseSnapshotHandle.Set(nil)
}

// UnsetBaseSnapshotHandle ensures that no value is present for BaseSnapshotHandle, not even an explicit nil
func (o *ObjectInfo) UnsetBaseSnapshotHandle() {
	o.BaseSnapshotHandle.Unset()
}

// GetGlobalId returns the GlobalId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInfo) GetGlobalId() string {
	if o == nil || IsNil(o.GlobalId.Get()) {
		var ret string
		return ret
	}
	return *o.GlobalId.Get()
}

// GetGlobalIdOk returns a tuple with the GlobalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInfo) GetGlobalIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlobalId.Get(), o.GlobalId.IsSet()
}

// HasGlobalId returns a boolean if a field has been set.
func (o *ObjectInfo) HasGlobalId() bool {
	if o != nil && o.GlobalId.IsSet() {
		return true
	}

	return false
}

// SetGlobalId gets a reference to the given NullableString and assigns it to the GlobalId field.
func (o *ObjectInfo) SetGlobalId(v string) {
	o.GlobalId.Set(&v)
}
// SetGlobalIdNil sets the value for GlobalId to be an explicit nil
func (o *ObjectInfo) SetGlobalIdNil() {
	o.GlobalId.Set(nil)
}

// UnsetGlobalId ensures that no value is present for GlobalId, not even an explicit nil
func (o *ObjectInfo) UnsetGlobalId() {
	o.GlobalId.Unset()
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInfo) GetObjectName() string {
	if o == nil || IsNil(o.ObjectName.Get()) {
		var ret string
		return ret
	}
	return *o.ObjectName.Get()
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInfo) GetObjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectName.Get(), o.ObjectName.IsSet()
}

// HasObjectName returns a boolean if a field has been set.
func (o *ObjectInfo) HasObjectName() bool {
	if o != nil && o.ObjectName.IsSet() {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given NullableString and assigns it to the ObjectName field.
func (o *ObjectInfo) SetObjectName(v string) {
	o.ObjectName.Set(&v)
}
// SetObjectNameNil sets the value for ObjectName to be an explicit nil
func (o *ObjectInfo) SetObjectNameNil() {
	o.ObjectName.Set(nil)
}

// UnsetObjectName ensures that no value is present for ObjectName, not even an explicit nil
func (o *ObjectInfo) UnsetObjectName() {
	o.ObjectName.Unset()
}

// GetObjectType returns the ObjectType field value if set, zero value otherwise.
func (o *ObjectInfo) GetObjectType() ObjectType {
	if o == nil || IsNil(o.ObjectType) {
		var ret ObjectType
		return ret
	}
	return *o.ObjectType
}

// GetObjectTypeOk returns a tuple with the ObjectType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectInfo) GetObjectTypeOk() (*ObjectType, bool) {
	if o == nil || IsNil(o.ObjectType) {
		return nil, false
	}
	return o.ObjectType, true
}

// HasObjectType returns a boolean if a field has been set.
func (o *ObjectInfo) HasObjectType() bool {
	if o != nil && !IsNil(o.ObjectType) {
		return true
	}

	return false
}

// SetObjectType gets a reference to the given ObjectType and assigns it to the ObjectType field.
func (o *ObjectInfo) SetObjectType(v ObjectType) {
	o.ObjectType = &v
}

// GetSnapshots returns the Snapshots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectInfo) GetSnapshots() []GaiaSnapshotInfo {
	if o == nil {
		var ret []GaiaSnapshotInfo
		return ret
	}
	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectInfo) GetSnapshotsOk() ([]GaiaSnapshotInfo, bool) {
	if o == nil || IsNil(o.Snapshots) {
		return nil, false
	}
	return o.Snapshots, true
}

// HasSnapshots returns a boolean if a field has been set.
func (o *ObjectInfo) HasSnapshots() bool {
	if o != nil && !IsNil(o.Snapshots) {
		return true
	}

	return false
}

// SetSnapshots gets a reference to the given []GaiaSnapshotInfo and assigns it to the Snapshots field.
func (o *ObjectInfo) SetSnapshots(v []GaiaSnapshotInfo) {
	o.Snapshots = v
}

func (o ObjectInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BaseSnapshotHandle.IsSet() {
		toSerialize["baseSnapshotHandle"] = o.BaseSnapshotHandle.Get()
	}
	if o.GlobalId.IsSet() {
		toSerialize["globalId"] = o.GlobalId.Get()
	}
	if o.ObjectName.IsSet() {
		toSerialize["objectName"] = o.ObjectName.Get()
	}
	if !IsNil(o.ObjectType) {
		toSerialize["objectType"] = o.ObjectType
	}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	return toSerialize, nil
}

type NullableObjectInfo struct {
	value *ObjectInfo
	isSet bool
}

func (v NullableObjectInfo) Get() *ObjectInfo {
	return v.value
}

func (v *NullableObjectInfo) Set(val *ObjectInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectInfo(val *ObjectInfo) *NullableObjectInfo {
	return &NullableObjectInfo{value: val, isSet: true}
}

func (v NullableObjectInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


