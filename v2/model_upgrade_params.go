/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpgradeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeParams{}

// UpgradeParams Parameters to upgrade the cluster software One of `packageUrl` or `versionName` must be specified. 
type UpgradeParams struct {
	// Specifies if healthchecks failure will cause upgrade to be aborted. By default we abort upgrade if there are healthchecks failures .Cluster will stop the upgrade.and present the failures which need to be resolved before proceeding with upgrade. If set to false upgrade will not be aborted on healthchecks failure. 
	AbortOnPreChecksFailure *bool `json:"abortOnPreChecksFailure,omitempty"`
	// Upgrade Cohesity agents on servers of registered sources. 
	AutoAgentUpgrade *bool `json:"autoAgentUpgrade,omitempty"`
	// If set to true, software incomaptibility checks are ignored. Applicable for operations: * `DownloadAndUpgradeWithPatch` * `DownloadAndUpgrade` * `Upgrade` * `UpgradeAndPatch` 
	IgnoreSwIncompatibility *bool `json:"ignoreSwIncompatibility,omitempty"`
	// md5Sum of the upgrade package. Applicable for operations: * `DownloadAndUpgradeWithPatch` * `DownloadAndUpgrade` * `Upgrade` * `UpgradeAndPatch` 
	Md5Sum *string `json:"md5Sum,omitempty"`
	PackageUrl *ArtifactUrl `json:"packageUrl,omitempty"`
	// If set to true, upgrade will run in parallel on all nodes. Applicable for operations: * `DownloadAndUpgradeWithPatch` * `DownloadAndUpgrade` * `Upgrade` * `UpgradeAndPatch` 
	RunUpgradeInParallel *bool `json:"runUpgradeInParallel,omitempty"`
	// Version name of the package if the package is already downloaded. Example: 6.3.1h_release-20210714_0fad884e. Applicable for operations: * `Upgrade` * `UpgradeAndPatch` 
	VersionName *string `json:"versionName,omitempty"`
}

// NewUpgradeParams instantiates a new UpgradeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeParams() *UpgradeParams {
	this := UpgradeParams{}
	var abortOnPreChecksFailure bool = true
	this.AbortOnPreChecksFailure = &abortOnPreChecksFailure
	var ignoreSwIncompatibility bool = false
	this.IgnoreSwIncompatibility = &ignoreSwIncompatibility
	var runUpgradeInParallel bool = false
	this.RunUpgradeInParallel = &runUpgradeInParallel
	return &this
}

// NewUpgradeParamsWithDefaults instantiates a new UpgradeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeParamsWithDefaults() *UpgradeParams {
	this := UpgradeParams{}
	var abortOnPreChecksFailure bool = true
	this.AbortOnPreChecksFailure = &abortOnPreChecksFailure
	var ignoreSwIncompatibility bool = false
	this.IgnoreSwIncompatibility = &ignoreSwIncompatibility
	var runUpgradeInParallel bool = false
	this.RunUpgradeInParallel = &runUpgradeInParallel
	return &this
}

// GetAbortOnPreChecksFailure returns the AbortOnPreChecksFailure field value if set, zero value otherwise.
func (o *UpgradeParams) GetAbortOnPreChecksFailure() bool {
	if o == nil || IsNil(o.AbortOnPreChecksFailure) {
		var ret bool
		return ret
	}
	return *o.AbortOnPreChecksFailure
}

// GetAbortOnPreChecksFailureOk returns a tuple with the AbortOnPreChecksFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeParams) GetAbortOnPreChecksFailureOk() (*bool, bool) {
	if o == nil || IsNil(o.AbortOnPreChecksFailure) {
		return nil, false
	}
	return o.AbortOnPreChecksFailure, true
}

// HasAbortOnPreChecksFailure returns a boolean if a field has been set.
func (o *UpgradeParams) HasAbortOnPreChecksFailure() bool {
	if o != nil && !IsNil(o.AbortOnPreChecksFailure) {
		return true
	}

	return false
}

// SetAbortOnPreChecksFailure gets a reference to the given bool and assigns it to the AbortOnPreChecksFailure field.
func (o *UpgradeParams) SetAbortOnPreChecksFailure(v bool) {
	o.AbortOnPreChecksFailure = &v
}

// GetAutoAgentUpgrade returns the AutoAgentUpgrade field value if set, zero value otherwise.
func (o *UpgradeParams) GetAutoAgentUpgrade() bool {
	if o == nil || IsNil(o.AutoAgentUpgrade) {
		var ret bool
		return ret
	}
	return *o.AutoAgentUpgrade
}

// GetAutoAgentUpgradeOk returns a tuple with the AutoAgentUpgrade field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeParams) GetAutoAgentUpgradeOk() (*bool, bool) {
	if o == nil || IsNil(o.AutoAgentUpgrade) {
		return nil, false
	}
	return o.AutoAgentUpgrade, true
}

// HasAutoAgentUpgrade returns a boolean if a field has been set.
func (o *UpgradeParams) HasAutoAgentUpgrade() bool {
	if o != nil && !IsNil(o.AutoAgentUpgrade) {
		return true
	}

	return false
}

// SetAutoAgentUpgrade gets a reference to the given bool and assigns it to the AutoAgentUpgrade field.
func (o *UpgradeParams) SetAutoAgentUpgrade(v bool) {
	o.AutoAgentUpgrade = &v
}

// GetIgnoreSwIncompatibility returns the IgnoreSwIncompatibility field value if set, zero value otherwise.
func (o *UpgradeParams) GetIgnoreSwIncompatibility() bool {
	if o == nil || IsNil(o.IgnoreSwIncompatibility) {
		var ret bool
		return ret
	}
	return *o.IgnoreSwIncompatibility
}

// GetIgnoreSwIncompatibilityOk returns a tuple with the IgnoreSwIncompatibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeParams) GetIgnoreSwIncompatibilityOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreSwIncompatibility) {
		return nil, false
	}
	return o.IgnoreSwIncompatibility, true
}

// HasIgnoreSwIncompatibility returns a boolean if a field has been set.
func (o *UpgradeParams) HasIgnoreSwIncompatibility() bool {
	if o != nil && !IsNil(o.IgnoreSwIncompatibility) {
		return true
	}

	return false
}

// SetIgnoreSwIncompatibility gets a reference to the given bool and assigns it to the IgnoreSwIncompatibility field.
func (o *UpgradeParams) SetIgnoreSwIncompatibility(v bool) {
	o.IgnoreSwIncompatibility = &v
}

// GetMd5Sum returns the Md5Sum field value if set, zero value otherwise.
func (o *UpgradeParams) GetMd5Sum() string {
	if o == nil || IsNil(o.Md5Sum) {
		var ret string
		return ret
	}
	return *o.Md5Sum
}

// GetMd5SumOk returns a tuple with the Md5Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeParams) GetMd5SumOk() (*string, bool) {
	if o == nil || IsNil(o.Md5Sum) {
		return nil, false
	}
	return o.Md5Sum, true
}

// HasMd5Sum returns a boolean if a field has been set.
func (o *UpgradeParams) HasMd5Sum() bool {
	if o != nil && !IsNil(o.Md5Sum) {
		return true
	}

	return false
}

// SetMd5Sum gets a reference to the given string and assigns it to the Md5Sum field.
func (o *UpgradeParams) SetMd5Sum(v string) {
	o.Md5Sum = &v
}

// GetPackageUrl returns the PackageUrl field value if set, zero value otherwise.
func (o *UpgradeParams) GetPackageUrl() ArtifactUrl {
	if o == nil || IsNil(o.PackageUrl) {
		var ret ArtifactUrl
		return ret
	}
	return *o.PackageUrl
}

// GetPackageUrlOk returns a tuple with the PackageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeParams) GetPackageUrlOk() (*ArtifactUrl, bool) {
	if o == nil || IsNil(o.PackageUrl) {
		return nil, false
	}
	return o.PackageUrl, true
}

// HasPackageUrl returns a boolean if a field has been set.
func (o *UpgradeParams) HasPackageUrl() bool {
	if o != nil && !IsNil(o.PackageUrl) {
		return true
	}

	return false
}

// SetPackageUrl gets a reference to the given ArtifactUrl and assigns it to the PackageUrl field.
func (o *UpgradeParams) SetPackageUrl(v ArtifactUrl) {
	o.PackageUrl = &v
}

// GetRunUpgradeInParallel returns the RunUpgradeInParallel field value if set, zero value otherwise.
func (o *UpgradeParams) GetRunUpgradeInParallel() bool {
	if o == nil || IsNil(o.RunUpgradeInParallel) {
		var ret bool
		return ret
	}
	return *o.RunUpgradeInParallel
}

// GetRunUpgradeInParallelOk returns a tuple with the RunUpgradeInParallel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeParams) GetRunUpgradeInParallelOk() (*bool, bool) {
	if o == nil || IsNil(o.RunUpgradeInParallel) {
		return nil, false
	}
	return o.RunUpgradeInParallel, true
}

// HasRunUpgradeInParallel returns a boolean if a field has been set.
func (o *UpgradeParams) HasRunUpgradeInParallel() bool {
	if o != nil && !IsNil(o.RunUpgradeInParallel) {
		return true
	}

	return false
}

// SetRunUpgradeInParallel gets a reference to the given bool and assigns it to the RunUpgradeInParallel field.
func (o *UpgradeParams) SetRunUpgradeInParallel(v bool) {
	o.RunUpgradeInParallel = &v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise.
func (o *UpgradeParams) GetVersionName() string {
	if o == nil || IsNil(o.VersionName) {
		var ret string
		return ret
	}
	return *o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeParams) GetVersionNameOk() (*string, bool) {
	if o == nil || IsNil(o.VersionName) {
		return nil, false
	}
	return o.VersionName, true
}

// HasVersionName returns a boolean if a field has been set.
func (o *UpgradeParams) HasVersionName() bool {
	if o != nil && !IsNil(o.VersionName) {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given string and assigns it to the VersionName field.
func (o *UpgradeParams) SetVersionName(v string) {
	o.VersionName = &v
}

func (o UpgradeParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbortOnPreChecksFailure) {
		toSerialize["abortOnPreChecksFailure"] = o.AbortOnPreChecksFailure
	}
	if !IsNil(o.AutoAgentUpgrade) {
		toSerialize["autoAgentUpgrade"] = o.AutoAgentUpgrade
	}
	if !IsNil(o.IgnoreSwIncompatibility) {
		toSerialize["ignoreSwIncompatibility"] = o.IgnoreSwIncompatibility
	}
	if !IsNil(o.Md5Sum) {
		toSerialize["md5Sum"] = o.Md5Sum
	}
	if !IsNil(o.PackageUrl) {
		toSerialize["packageUrl"] = o.PackageUrl
	}
	if !IsNil(o.RunUpgradeInParallel) {
		toSerialize["runUpgradeInParallel"] = o.RunUpgradeInParallel
	}
	if !IsNil(o.VersionName) {
		toSerialize["versionName"] = o.VersionName
	}
	return toSerialize, nil
}

type NullableUpgradeParams struct {
	value *UpgradeParams
	isSet bool
}

func (v NullableUpgradeParams) Get() *UpgradeParams {
	return v.value
}

func (v *NullableUpgradeParams) Set(val *UpgradeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeParams(val *UpgradeParams) *NullableUpgradeParams {
	return &NullableUpgradeParams{value: val, isSet: true}
}

func (v NullableUpgradeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


