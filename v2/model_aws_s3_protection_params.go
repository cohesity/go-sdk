/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AwsS3ProtectionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsS3ProtectionParams{}

// AwsS3ProtectionParams Specifies the parameters which are specific to AWS Object Protection for AWS S3. Atlease one of tags or objects must be specified.
type AwsS3ProtectionParams struct {
	// Specifies whether to backup object level acls. Default value is false.
	BackupObjectLevelACLs NullableBool `json:"backupObjectLevelACLs,omitempty"`
	// Specifies the baseline incremental frequency.
	BaselineIncrementalFrequency NullableString `json:"baselineIncrementalFrequency,omitempty"`
	// ARN of the inventory report destination bucket for S3 backups.
	InventoryReportDestination NullableString `json:"inventoryReportDestination,omitempty"`
	// The prefix in the S3 destination bucket where inventory reports will be stored.
	InventoryReportDestinationPrefix NullableString `json:"inventoryReportDestinationPrefix,omitempty"`
	// Specifies the frequency to generate inventory reports.
	InventoryReportFrequency NullableString `json:"inventoryReportFrequency,omitempty"`
	// Specifies the objects to be protected.
	Objects []AwsS3ObjectLevelParams `json:"objects,omitempty"`
	// Specifies whether to skip files on error or not. Default value is false.
	SkipOnError NullableBool `json:"skipOnError,omitempty"`
	// Specifies the AWS S3 Storage classes to backup.
	StorageClass []string `json:"storageClass,omitempty"`
}

// NewAwsS3ProtectionParams instantiates a new AwsS3ProtectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsS3ProtectionParams() *AwsS3ProtectionParams {
	this := AwsS3ProtectionParams{}
	return &this
}

// NewAwsS3ProtectionParamsWithDefaults instantiates a new AwsS3ProtectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsS3ProtectionParamsWithDefaults() *AwsS3ProtectionParams {
	this := AwsS3ProtectionParams{}
	return &this
}

// GetBackupObjectLevelACLs returns the BackupObjectLevelACLs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsS3ProtectionParams) GetBackupObjectLevelACLs() bool {
	if o == nil || IsNil(o.BackupObjectLevelACLs.Get()) {
		var ret bool
		return ret
	}
	return *o.BackupObjectLevelACLs.Get()
}

// GetBackupObjectLevelACLsOk returns a tuple with the BackupObjectLevelACLs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsS3ProtectionParams) GetBackupObjectLevelACLsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupObjectLevelACLs.Get(), o.BackupObjectLevelACLs.IsSet()
}

// HasBackupObjectLevelACLs returns a boolean if a field has been set.
func (o *AwsS3ProtectionParams) HasBackupObjectLevelACLs() bool {
	if o != nil && o.BackupObjectLevelACLs.IsSet() {
		return true
	}

	return false
}

// SetBackupObjectLevelACLs gets a reference to the given NullableBool and assigns it to the BackupObjectLevelACLs field.
func (o *AwsS3ProtectionParams) SetBackupObjectLevelACLs(v bool) {
	o.BackupObjectLevelACLs.Set(&v)
}
// SetBackupObjectLevelACLsNil sets the value for BackupObjectLevelACLs to be an explicit nil
func (o *AwsS3ProtectionParams) SetBackupObjectLevelACLsNil() {
	o.BackupObjectLevelACLs.Set(nil)
}

// UnsetBackupObjectLevelACLs ensures that no value is present for BackupObjectLevelACLs, not even an explicit nil
func (o *AwsS3ProtectionParams) UnsetBackupObjectLevelACLs() {
	o.BackupObjectLevelACLs.Unset()
}

// GetBaselineIncrementalFrequency returns the BaselineIncrementalFrequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsS3ProtectionParams) GetBaselineIncrementalFrequency() string {
	if o == nil || IsNil(o.BaselineIncrementalFrequency.Get()) {
		var ret string
		return ret
	}
	return *o.BaselineIncrementalFrequency.Get()
}

// GetBaselineIncrementalFrequencyOk returns a tuple with the BaselineIncrementalFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsS3ProtectionParams) GetBaselineIncrementalFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaselineIncrementalFrequency.Get(), o.BaselineIncrementalFrequency.IsSet()
}

// HasBaselineIncrementalFrequency returns a boolean if a field has been set.
func (o *AwsS3ProtectionParams) HasBaselineIncrementalFrequency() bool {
	if o != nil && o.BaselineIncrementalFrequency.IsSet() {
		return true
	}

	return false
}

// SetBaselineIncrementalFrequency gets a reference to the given NullableString and assigns it to the BaselineIncrementalFrequency field.
func (o *AwsS3ProtectionParams) SetBaselineIncrementalFrequency(v string) {
	o.BaselineIncrementalFrequency.Set(&v)
}
// SetBaselineIncrementalFrequencyNil sets the value for BaselineIncrementalFrequency to be an explicit nil
func (o *AwsS3ProtectionParams) SetBaselineIncrementalFrequencyNil() {
	o.BaselineIncrementalFrequency.Set(nil)
}

// UnsetBaselineIncrementalFrequency ensures that no value is present for BaselineIncrementalFrequency, not even an explicit nil
func (o *AwsS3ProtectionParams) UnsetBaselineIncrementalFrequency() {
	o.BaselineIncrementalFrequency.Unset()
}

// GetInventoryReportDestination returns the InventoryReportDestination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsS3ProtectionParams) GetInventoryReportDestination() string {
	if o == nil || IsNil(o.InventoryReportDestination.Get()) {
		var ret string
		return ret
	}
	return *o.InventoryReportDestination.Get()
}

// GetInventoryReportDestinationOk returns a tuple with the InventoryReportDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsS3ProtectionParams) GetInventoryReportDestinationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryReportDestination.Get(), o.InventoryReportDestination.IsSet()
}

// HasInventoryReportDestination returns a boolean if a field has been set.
func (o *AwsS3ProtectionParams) HasInventoryReportDestination() bool {
	if o != nil && o.InventoryReportDestination.IsSet() {
		return true
	}

	return false
}

// SetInventoryReportDestination gets a reference to the given NullableString and assigns it to the InventoryReportDestination field.
func (o *AwsS3ProtectionParams) SetInventoryReportDestination(v string) {
	o.InventoryReportDestination.Set(&v)
}
// SetInventoryReportDestinationNil sets the value for InventoryReportDestination to be an explicit nil
func (o *AwsS3ProtectionParams) SetInventoryReportDestinationNil() {
	o.InventoryReportDestination.Set(nil)
}

// UnsetInventoryReportDestination ensures that no value is present for InventoryReportDestination, not even an explicit nil
func (o *AwsS3ProtectionParams) UnsetInventoryReportDestination() {
	o.InventoryReportDestination.Unset()
}

// GetInventoryReportDestinationPrefix returns the InventoryReportDestinationPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsS3ProtectionParams) GetInventoryReportDestinationPrefix() string {
	if o == nil || IsNil(o.InventoryReportDestinationPrefix.Get()) {
		var ret string
		return ret
	}
	return *o.InventoryReportDestinationPrefix.Get()
}

// GetInventoryReportDestinationPrefixOk returns a tuple with the InventoryReportDestinationPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsS3ProtectionParams) GetInventoryReportDestinationPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryReportDestinationPrefix.Get(), o.InventoryReportDestinationPrefix.IsSet()
}

// HasInventoryReportDestinationPrefix returns a boolean if a field has been set.
func (o *AwsS3ProtectionParams) HasInventoryReportDestinationPrefix() bool {
	if o != nil && o.InventoryReportDestinationPrefix.IsSet() {
		return true
	}

	return false
}

// SetInventoryReportDestinationPrefix gets a reference to the given NullableString and assigns it to the InventoryReportDestinationPrefix field.
func (o *AwsS3ProtectionParams) SetInventoryReportDestinationPrefix(v string) {
	o.InventoryReportDestinationPrefix.Set(&v)
}
// SetInventoryReportDestinationPrefixNil sets the value for InventoryReportDestinationPrefix to be an explicit nil
func (o *AwsS3ProtectionParams) SetInventoryReportDestinationPrefixNil() {
	o.InventoryReportDestinationPrefix.Set(nil)
}

// UnsetInventoryReportDestinationPrefix ensures that no value is present for InventoryReportDestinationPrefix, not even an explicit nil
func (o *AwsS3ProtectionParams) UnsetInventoryReportDestinationPrefix() {
	o.InventoryReportDestinationPrefix.Unset()
}

// GetInventoryReportFrequency returns the InventoryReportFrequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsS3ProtectionParams) GetInventoryReportFrequency() string {
	if o == nil || IsNil(o.InventoryReportFrequency.Get()) {
		var ret string
		return ret
	}
	return *o.InventoryReportFrequency.Get()
}

// GetInventoryReportFrequencyOk returns a tuple with the InventoryReportFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsS3ProtectionParams) GetInventoryReportFrequencyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InventoryReportFrequency.Get(), o.InventoryReportFrequency.IsSet()
}

// HasInventoryReportFrequency returns a boolean if a field has been set.
func (o *AwsS3ProtectionParams) HasInventoryReportFrequency() bool {
	if o != nil && o.InventoryReportFrequency.IsSet() {
		return true
	}

	return false
}

// SetInventoryReportFrequency gets a reference to the given NullableString and assigns it to the InventoryReportFrequency field.
func (o *AwsS3ProtectionParams) SetInventoryReportFrequency(v string) {
	o.InventoryReportFrequency.Set(&v)
}
// SetInventoryReportFrequencyNil sets the value for InventoryReportFrequency to be an explicit nil
func (o *AwsS3ProtectionParams) SetInventoryReportFrequencyNil() {
	o.InventoryReportFrequency.Set(nil)
}

// UnsetInventoryReportFrequency ensures that no value is present for InventoryReportFrequency, not even an explicit nil
func (o *AwsS3ProtectionParams) UnsetInventoryReportFrequency() {
	o.InventoryReportFrequency.Unset()
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *AwsS3ProtectionParams) GetObjects() []AwsS3ObjectLevelParams {
	if o == nil || IsNil(o.Objects) {
		var ret []AwsS3ObjectLevelParams
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3ProtectionParams) GetObjectsOk() ([]AwsS3ObjectLevelParams, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *AwsS3ProtectionParams) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []AwsS3ObjectLevelParams and assigns it to the Objects field.
func (o *AwsS3ProtectionParams) SetObjects(v []AwsS3ObjectLevelParams) {
	o.Objects = v
}

// GetSkipOnError returns the SkipOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsS3ProtectionParams) GetSkipOnError() bool {
	if o == nil || IsNil(o.SkipOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipOnError.Get()
}

// GetSkipOnErrorOk returns a tuple with the SkipOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsS3ProtectionParams) GetSkipOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipOnError.Get(), o.SkipOnError.IsSet()
}

// HasSkipOnError returns a boolean if a field has been set.
func (o *AwsS3ProtectionParams) HasSkipOnError() bool {
	if o != nil && o.SkipOnError.IsSet() {
		return true
	}

	return false
}

// SetSkipOnError gets a reference to the given NullableBool and assigns it to the SkipOnError field.
func (o *AwsS3ProtectionParams) SetSkipOnError(v bool) {
	o.SkipOnError.Set(&v)
}
// SetSkipOnErrorNil sets the value for SkipOnError to be an explicit nil
func (o *AwsS3ProtectionParams) SetSkipOnErrorNil() {
	o.SkipOnError.Set(nil)
}

// UnsetSkipOnError ensures that no value is present for SkipOnError, not even an explicit nil
func (o *AwsS3ProtectionParams) UnsetSkipOnError() {
	o.SkipOnError.Unset()
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *AwsS3ProtectionParams) GetStorageClass() []string {
	if o == nil || IsNil(o.StorageClass) {
		var ret []string
		return ret
	}
	return o.StorageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3ProtectionParams) GetStorageClassOk() ([]string, bool) {
	if o == nil || IsNil(o.StorageClass) {
		return nil, false
	}
	return o.StorageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *AwsS3ProtectionParams) HasStorageClass() bool {
	if o != nil && !IsNil(o.StorageClass) {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given []string and assigns it to the StorageClass field.
func (o *AwsS3ProtectionParams) SetStorageClass(v []string) {
	o.StorageClass = v
}

func (o AwsS3ProtectionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsS3ProtectionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupObjectLevelACLs.IsSet() {
		toSerialize["backupObjectLevelACLs"] = o.BackupObjectLevelACLs.Get()
	}
	if o.BaselineIncrementalFrequency.IsSet() {
		toSerialize["baselineIncrementalFrequency"] = o.BaselineIncrementalFrequency.Get()
	}
	if o.InventoryReportDestination.IsSet() {
		toSerialize["inventoryReportDestination"] = o.InventoryReportDestination.Get()
	}
	if o.InventoryReportDestinationPrefix.IsSet() {
		toSerialize["inventoryReportDestinationPrefix"] = o.InventoryReportDestinationPrefix.Get()
	}
	if o.InventoryReportFrequency.IsSet() {
		toSerialize["inventoryReportFrequency"] = o.InventoryReportFrequency.Get()
	}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	if o.SkipOnError.IsSet() {
		toSerialize["skipOnError"] = o.SkipOnError.Get()
	}
	if !IsNil(o.StorageClass) {
		toSerialize["storageClass"] = o.StorageClass
	}
	return toSerialize, nil
}

type NullableAwsS3ProtectionParams struct {
	value *AwsS3ProtectionParams
	isSet bool
}

func (v NullableAwsS3ProtectionParams) Get() *AwsS3ProtectionParams {
	return v.value
}

func (v *NullableAwsS3ProtectionParams) Set(val *AwsS3ProtectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsS3ProtectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsS3ProtectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsS3ProtectionParams(val *AwsS3ProtectionParams) *NullableAwsS3ProtectionParams {
	return &NullableAwsS3ProtectionParams{value: val, isSet: true}
}

func (v NullableAwsS3ProtectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsS3ProtectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


