/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenIdConnectAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenIdConnectAction{}

// OpenIdConnectAction Open ID Connect Action
type OpenIdConnectAction struct {
	// Specifies an action to perform on an Open ID Connect Identity Provider. The following actions are currently supported: 1. 'RefreshPublicKeys': Refreshes the public keys currently stored on the cluster for the user sending the request. In order to do this, the public key URL specified in the current users Open ID configuration will be polled for a new public key.
	Action NullableString `json:"action"`
}

type _OpenIdConnectAction OpenIdConnectAction

// NewOpenIdConnectAction instantiates a new OpenIdConnectAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenIdConnectAction(action NullableString) *OpenIdConnectAction {
	this := OpenIdConnectAction{}
	this.Action = action
	return &this
}

// NewOpenIdConnectActionWithDefaults instantiates a new OpenIdConnectAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenIdConnectActionWithDefaults() *OpenIdConnectAction {
	this := OpenIdConnectAction{}
	return &this
}

// GetAction returns the Action field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OpenIdConnectAction) GetAction() string {
	if o == nil || o.Action.Get() == nil {
		var ret string
		return ret
	}

	return *o.Action.Get()
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenIdConnectAction) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action.Get(), o.Action.IsSet()
}

// SetAction sets field value
func (o *OpenIdConnectAction) SetAction(v string) {
	o.Action.Set(&v)
}

func (o OpenIdConnectAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenIdConnectAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action.Get()
	return toSerialize, nil
}

func (o *OpenIdConnectAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenIdConnectAction := _OpenIdConnectAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenIdConnectAction)

	if err != nil {
		return err
	}

	*o = OpenIdConnectAction(varOpenIdConnectAction)

	return err
}

type NullableOpenIdConnectAction struct {
	value *OpenIdConnectAction
	isSet bool
}

func (v NullableOpenIdConnectAction) Get() *OpenIdConnectAction {
	return v.value
}

func (v *NullableOpenIdConnectAction) Set(val *OpenIdConnectAction) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenIdConnectAction) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenIdConnectAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenIdConnectAction(val *OpenIdConnectAction) *NullableOpenIdConnectAction {
	return &NullableOpenIdConnectAction{value: val, isSet: true}
}

func (v NullableOpenIdConnectAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenIdConnectAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


