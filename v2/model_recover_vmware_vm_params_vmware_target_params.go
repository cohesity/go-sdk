/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RecoverVmwareVmParamsVmwareTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverVmwareVmParamsVmwareTargetParams{}

// RecoverVmwareVmParamsVmwareTargetParams Specifies the params for recovering to a VMware target.
type RecoverVmwareVmParamsVmwareTargetParams struct {
	// Specifies whether to attempt differential restore.
	AttemptDifferentialRestore NullableBool `json:"attemptDifferentialRestore,omitempty"`
	// Specifies whether to continue recovering other vms if one of vms failed to recover. Default value is false.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies the Virtual Disk Provisioning Policies for Vmware VM
	DiskProvisionType NullableString `json:"diskProvisionType,omitempty"`
	// If this field is set to true and SAN transport recovery fails, then recovery will fallback to use NBDSSL transport. This field only applies if 'leverageSanTransport' is set to true.
	EnableNBDSSLFallback NullableBool `json:"enableNBDSSLFallback,omitempty"`
	// Specifies whether this is a multistage restore which is used for migration/hot-standby purpose.
	IsMultiStageRestore NullableBool `json:"isMultiStageRestore,omitempty"`
	// Specifies whether to enable SAN transport for copy recovery or not
	LeverageSanTransport NullableBool `json:"leverageSanTransport,omitempty"`
	// Specifies whether to overwrite the VM at the target location. This is a data destructive operation and if this is selected, the original VM may no longer be accessible. This option is only applicable if renameRecoveredVmParams is null and powerOffAndRenameExistingVm is false. This option is not supported for vApp or vApp template recoveries. Default value is false.
	OverwriteExistingVm NullableBool `json:"overwriteExistingVm,omitempty"`
	// Specifies whether to power off and mark the VM at the target location as deprecated. As an example, <vm_name> will be renamed to deprecated::<vm_name>, and a new VM with the name <vm_name> in place of the now deprecated VM. Both deprecated::<vm_name> and <vm_name> will exist on the primary, but the corresponding protection job will only backup <vm_name> on its next run. Only applicable if renameRecoveredVmParams is null and overwriteExistingVm is false. This option is not supported for vApp or vApp template recoveries. Default value is false.
	PowerOffAndRenameExistingVm NullableBool `json:"powerOffAndRenameExistingVm,omitempty"`
	// Specifies whether to power on vms after recovery. If not specified, or false, recovered vms will be in powered off state.
	PowerOnVms NullableBool `json:"powerOnVms,omitempty"`
	// Specifies type of Recovery Process to be used. InstantRecovery/CopyRecovery etc... Default value is InstantRecovery.
	RecoveryProcessType *string `json:"recoveryProcessType,omitempty"`
	RecoveryTargetConfig NullableVmwareTargetParamsForRecoverVMRecoveryTargetConfig `json:"recoveryTargetConfig,omitempty"`
	RenameRecoveredVmsParams NullableAcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams `json:"renameRecoveredVmsParams,omitempty"`
	VlanConfig NullableRecoverKubernetesNamespaceParamsVlanConfig `json:"vlanConfig,omitempty"`
}

// NewRecoverVmwareVmParamsVmwareTargetParams instantiates a new RecoverVmwareVmParamsVmwareTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVmwareVmParamsVmwareTargetParams() *RecoverVmwareVmParamsVmwareTargetParams {
	this := RecoverVmwareVmParamsVmwareTargetParams{}
	return &this
}

// NewRecoverVmwareVmParamsVmwareTargetParamsWithDefaults instantiates a new RecoverVmwareVmParamsVmwareTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVmwareVmParamsVmwareTargetParamsWithDefaults() *RecoverVmwareVmParamsVmwareTargetParams {
	this := RecoverVmwareVmParamsVmwareTargetParams{}
	return &this
}

// GetAttemptDifferentialRestore returns the AttemptDifferentialRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetAttemptDifferentialRestore() bool {
	if o == nil || IsNil(o.AttemptDifferentialRestore.Get()) {
		var ret bool
		return ret
	}
	return *o.AttemptDifferentialRestore.Get()
}

// GetAttemptDifferentialRestoreOk returns a tuple with the AttemptDifferentialRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetAttemptDifferentialRestoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttemptDifferentialRestore.Get(), o.AttemptDifferentialRestore.IsSet()
}

// HasAttemptDifferentialRestore returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasAttemptDifferentialRestore() bool {
	if o != nil && o.AttemptDifferentialRestore.IsSet() {
		return true
	}

	return false
}

// SetAttemptDifferentialRestore gets a reference to the given NullableBool and assigns it to the AttemptDifferentialRestore field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetAttemptDifferentialRestore(v bool) {
	o.AttemptDifferentialRestore.Set(&v)
}
// SetAttemptDifferentialRestoreNil sets the value for AttemptDifferentialRestore to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetAttemptDifferentialRestoreNil() {
	o.AttemptDifferentialRestore.Set(nil)
}

// UnsetAttemptDifferentialRestore ensures that no value is present for AttemptDifferentialRestore, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetAttemptDifferentialRestore() {
	o.AttemptDifferentialRestore.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetContinueOnError() bool {
	if o == nil || IsNil(o.ContinueOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetDiskProvisionType returns the DiskProvisionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetDiskProvisionType() string {
	if o == nil || IsNil(o.DiskProvisionType.Get()) {
		var ret string
		return ret
	}
	return *o.DiskProvisionType.Get()
}

// GetDiskProvisionTypeOk returns a tuple with the DiskProvisionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetDiskProvisionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskProvisionType.Get(), o.DiskProvisionType.IsSet()
}

// HasDiskProvisionType returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasDiskProvisionType() bool {
	if o != nil && o.DiskProvisionType.IsSet() {
		return true
	}

	return false
}

// SetDiskProvisionType gets a reference to the given NullableString and assigns it to the DiskProvisionType field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetDiskProvisionType(v string) {
	o.DiskProvisionType.Set(&v)
}
// SetDiskProvisionTypeNil sets the value for DiskProvisionType to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetDiskProvisionTypeNil() {
	o.DiskProvisionType.Set(nil)
}

// UnsetDiskProvisionType ensures that no value is present for DiskProvisionType, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetDiskProvisionType() {
	o.DiskProvisionType.Unset()
}

// GetEnableNBDSSLFallback returns the EnableNBDSSLFallback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetEnableNBDSSLFallback() bool {
	if o == nil || IsNil(o.EnableNBDSSLFallback.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableNBDSSLFallback.Get()
}

// GetEnableNBDSSLFallbackOk returns a tuple with the EnableNBDSSLFallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetEnableNBDSSLFallbackOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableNBDSSLFallback.Get(), o.EnableNBDSSLFallback.IsSet()
}

// HasEnableNBDSSLFallback returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasEnableNBDSSLFallback() bool {
	if o != nil && o.EnableNBDSSLFallback.IsSet() {
		return true
	}

	return false
}

// SetEnableNBDSSLFallback gets a reference to the given NullableBool and assigns it to the EnableNBDSSLFallback field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetEnableNBDSSLFallback(v bool) {
	o.EnableNBDSSLFallback.Set(&v)
}
// SetEnableNBDSSLFallbackNil sets the value for EnableNBDSSLFallback to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetEnableNBDSSLFallbackNil() {
	o.EnableNBDSSLFallback.Set(nil)
}

// UnsetEnableNBDSSLFallback ensures that no value is present for EnableNBDSSLFallback, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetEnableNBDSSLFallback() {
	o.EnableNBDSSLFallback.Unset()
}

// GetIsMultiStageRestore returns the IsMultiStageRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetIsMultiStageRestore() bool {
	if o == nil || IsNil(o.IsMultiStageRestore.Get()) {
		var ret bool
		return ret
	}
	return *o.IsMultiStageRestore.Get()
}

// GetIsMultiStageRestoreOk returns a tuple with the IsMultiStageRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetIsMultiStageRestoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsMultiStageRestore.Get(), o.IsMultiStageRestore.IsSet()
}

// HasIsMultiStageRestore returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasIsMultiStageRestore() bool {
	if o != nil && o.IsMultiStageRestore.IsSet() {
		return true
	}

	return false
}

// SetIsMultiStageRestore gets a reference to the given NullableBool and assigns it to the IsMultiStageRestore field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetIsMultiStageRestore(v bool) {
	o.IsMultiStageRestore.Set(&v)
}
// SetIsMultiStageRestoreNil sets the value for IsMultiStageRestore to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetIsMultiStageRestoreNil() {
	o.IsMultiStageRestore.Set(nil)
}

// UnsetIsMultiStageRestore ensures that no value is present for IsMultiStageRestore, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetIsMultiStageRestore() {
	o.IsMultiStageRestore.Unset()
}

// GetLeverageSanTransport returns the LeverageSanTransport field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetLeverageSanTransport() bool {
	if o == nil || IsNil(o.LeverageSanTransport.Get()) {
		var ret bool
		return ret
	}
	return *o.LeverageSanTransport.Get()
}

// GetLeverageSanTransportOk returns a tuple with the LeverageSanTransport field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetLeverageSanTransportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeverageSanTransport.Get(), o.LeverageSanTransport.IsSet()
}

// HasLeverageSanTransport returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasLeverageSanTransport() bool {
	if o != nil && o.LeverageSanTransport.IsSet() {
		return true
	}

	return false
}

// SetLeverageSanTransport gets a reference to the given NullableBool and assigns it to the LeverageSanTransport field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetLeverageSanTransport(v bool) {
	o.LeverageSanTransport.Set(&v)
}
// SetLeverageSanTransportNil sets the value for LeverageSanTransport to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetLeverageSanTransportNil() {
	o.LeverageSanTransport.Set(nil)
}

// UnsetLeverageSanTransport ensures that no value is present for LeverageSanTransport, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetLeverageSanTransport() {
	o.LeverageSanTransport.Unset()
}

// GetOverwriteExistingVm returns the OverwriteExistingVm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetOverwriteExistingVm() bool {
	if o == nil || IsNil(o.OverwriteExistingVm.Get()) {
		var ret bool
		return ret
	}
	return *o.OverwriteExistingVm.Get()
}

// GetOverwriteExistingVmOk returns a tuple with the OverwriteExistingVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetOverwriteExistingVmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverwriteExistingVm.Get(), o.OverwriteExistingVm.IsSet()
}

// HasOverwriteExistingVm returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasOverwriteExistingVm() bool {
	if o != nil && o.OverwriteExistingVm.IsSet() {
		return true
	}

	return false
}

// SetOverwriteExistingVm gets a reference to the given NullableBool and assigns it to the OverwriteExistingVm field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetOverwriteExistingVm(v bool) {
	o.OverwriteExistingVm.Set(&v)
}
// SetOverwriteExistingVmNil sets the value for OverwriteExistingVm to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetOverwriteExistingVmNil() {
	o.OverwriteExistingVm.Set(nil)
}

// UnsetOverwriteExistingVm ensures that no value is present for OverwriteExistingVm, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetOverwriteExistingVm() {
	o.OverwriteExistingVm.Unset()
}

// GetPowerOffAndRenameExistingVm returns the PowerOffAndRenameExistingVm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetPowerOffAndRenameExistingVm() bool {
	if o == nil || IsNil(o.PowerOffAndRenameExistingVm.Get()) {
		var ret bool
		return ret
	}
	return *o.PowerOffAndRenameExistingVm.Get()
}

// GetPowerOffAndRenameExistingVmOk returns a tuple with the PowerOffAndRenameExistingVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetPowerOffAndRenameExistingVmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PowerOffAndRenameExistingVm.Get(), o.PowerOffAndRenameExistingVm.IsSet()
}

// HasPowerOffAndRenameExistingVm returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasPowerOffAndRenameExistingVm() bool {
	if o != nil && o.PowerOffAndRenameExistingVm.IsSet() {
		return true
	}

	return false
}

// SetPowerOffAndRenameExistingVm gets a reference to the given NullableBool and assigns it to the PowerOffAndRenameExistingVm field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetPowerOffAndRenameExistingVm(v bool) {
	o.PowerOffAndRenameExistingVm.Set(&v)
}
// SetPowerOffAndRenameExistingVmNil sets the value for PowerOffAndRenameExistingVm to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetPowerOffAndRenameExistingVmNil() {
	o.PowerOffAndRenameExistingVm.Set(nil)
}

// UnsetPowerOffAndRenameExistingVm ensures that no value is present for PowerOffAndRenameExistingVm, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetPowerOffAndRenameExistingVm() {
	o.PowerOffAndRenameExistingVm.Unset()
}

// GetPowerOnVms returns the PowerOnVms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetPowerOnVms() bool {
	if o == nil || IsNil(o.PowerOnVms.Get()) {
		var ret bool
		return ret
	}
	return *o.PowerOnVms.Get()
}

// GetPowerOnVmsOk returns a tuple with the PowerOnVms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetPowerOnVmsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PowerOnVms.Get(), o.PowerOnVms.IsSet()
}

// HasPowerOnVms returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasPowerOnVms() bool {
	if o != nil && o.PowerOnVms.IsSet() {
		return true
	}

	return false
}

// SetPowerOnVms gets a reference to the given NullableBool and assigns it to the PowerOnVms field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetPowerOnVms(v bool) {
	o.PowerOnVms.Set(&v)
}
// SetPowerOnVmsNil sets the value for PowerOnVms to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetPowerOnVmsNil() {
	o.PowerOnVms.Set(nil)
}

// UnsetPowerOnVms ensures that no value is present for PowerOnVms, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetPowerOnVms() {
	o.PowerOnVms.Unset()
}

// GetRecoveryProcessType returns the RecoveryProcessType field value if set, zero value otherwise.
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetRecoveryProcessType() string {
	if o == nil || IsNil(o.RecoveryProcessType) {
		var ret string
		return ret
	}
	return *o.RecoveryProcessType
}

// GetRecoveryProcessTypeOk returns a tuple with the RecoveryProcessType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetRecoveryProcessTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RecoveryProcessType) {
		return nil, false
	}
	return o.RecoveryProcessType, true
}

// HasRecoveryProcessType returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasRecoveryProcessType() bool {
	if o != nil && !IsNil(o.RecoveryProcessType) {
		return true
	}

	return false
}

// SetRecoveryProcessType gets a reference to the given string and assigns it to the RecoveryProcessType field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetRecoveryProcessType(v string) {
	o.RecoveryProcessType = &v
}

// GetRecoveryTargetConfig returns the RecoveryTargetConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetRecoveryTargetConfig() VmwareTargetParamsForRecoverVMRecoveryTargetConfig {
	if o == nil || IsNil(o.RecoveryTargetConfig.Get()) {
		var ret VmwareTargetParamsForRecoverVMRecoveryTargetConfig
		return ret
	}
	return *o.RecoveryTargetConfig.Get()
}

// GetRecoveryTargetConfigOk returns a tuple with the RecoveryTargetConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetRecoveryTargetConfigOk() (*VmwareTargetParamsForRecoverVMRecoveryTargetConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoveryTargetConfig.Get(), o.RecoveryTargetConfig.IsSet()
}

// HasRecoveryTargetConfig returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasRecoveryTargetConfig() bool {
	if o != nil && o.RecoveryTargetConfig.IsSet() {
		return true
	}

	return false
}

// SetRecoveryTargetConfig gets a reference to the given NullableVmwareTargetParamsForRecoverVMRecoveryTargetConfig and assigns it to the RecoveryTargetConfig field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetRecoveryTargetConfig(v VmwareTargetParamsForRecoverVMRecoveryTargetConfig) {
	o.RecoveryTargetConfig.Set(&v)
}
// SetRecoveryTargetConfigNil sets the value for RecoveryTargetConfig to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetRecoveryTargetConfigNil() {
	o.RecoveryTargetConfig.Set(nil)
}

// UnsetRecoveryTargetConfig ensures that no value is present for RecoveryTargetConfig, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetRecoveryTargetConfig() {
	o.RecoveryTargetConfig.Unset()
}

// GetRenameRecoveredVmsParams returns the RenameRecoveredVmsParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetRenameRecoveredVmsParams() AcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams {
	if o == nil || IsNil(o.RenameRecoveredVmsParams.Get()) {
		var ret AcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams
		return ret
	}
	return *o.RenameRecoveredVmsParams.Get()
}

// GetRenameRecoveredVmsParamsOk returns a tuple with the RenameRecoveredVmsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetRenameRecoveredVmsParamsOk() (*AcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenameRecoveredVmsParams.Get(), o.RenameRecoveredVmsParams.IsSet()
}

// HasRenameRecoveredVmsParams returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasRenameRecoveredVmsParams() bool {
	if o != nil && o.RenameRecoveredVmsParams.IsSet() {
		return true
	}

	return false
}

// SetRenameRecoveredVmsParams gets a reference to the given NullableAcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams and assigns it to the RenameRecoveredVmsParams field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetRenameRecoveredVmsParams(v AcropolisTargetParamsForRecoverVmRenameRecoveredVmsParams) {
	o.RenameRecoveredVmsParams.Set(&v)
}
// SetRenameRecoveredVmsParamsNil sets the value for RenameRecoveredVmsParams to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetRenameRecoveredVmsParamsNil() {
	o.RenameRecoveredVmsParams.Set(nil)
}

// UnsetRenameRecoveredVmsParams ensures that no value is present for RenameRecoveredVmsParams, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetRenameRecoveredVmsParams() {
	o.RenameRecoveredVmsParams.Unset()
}

// GetVlanConfig returns the VlanConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetVlanConfig() RecoverKubernetesNamespaceParamsVlanConfig {
	if o == nil || IsNil(o.VlanConfig.Get()) {
		var ret RecoverKubernetesNamespaceParamsVlanConfig
		return ret
	}
	return *o.VlanConfig.Get()
}

// GetVlanConfigOk returns a tuple with the VlanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmParamsVmwareTargetParams) GetVlanConfigOk() (*RecoverKubernetesNamespaceParamsVlanConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.VlanConfig.Get(), o.VlanConfig.IsSet()
}

// HasVlanConfig returns a boolean if a field has been set.
func (o *RecoverVmwareVmParamsVmwareTargetParams) HasVlanConfig() bool {
	if o != nil && o.VlanConfig.IsSet() {
		return true
	}

	return false
}

// SetVlanConfig gets a reference to the given NullableRecoverKubernetesNamespaceParamsVlanConfig and assigns it to the VlanConfig field.
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetVlanConfig(v RecoverKubernetesNamespaceParamsVlanConfig) {
	o.VlanConfig.Set(&v)
}
// SetVlanConfigNil sets the value for VlanConfig to be an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) SetVlanConfigNil() {
	o.VlanConfig.Set(nil)
}

// UnsetVlanConfig ensures that no value is present for VlanConfig, not even an explicit nil
func (o *RecoverVmwareVmParamsVmwareTargetParams) UnsetVlanConfig() {
	o.VlanConfig.Unset()
}

func (o RecoverVmwareVmParamsVmwareTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverVmwareVmParamsVmwareTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AttemptDifferentialRestore.IsSet() {
		toSerialize["attemptDifferentialRestore"] = o.AttemptDifferentialRestore.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.DiskProvisionType.IsSet() {
		toSerialize["diskProvisionType"] = o.DiskProvisionType.Get()
	}
	if o.EnableNBDSSLFallback.IsSet() {
		toSerialize["enableNBDSSLFallback"] = o.EnableNBDSSLFallback.Get()
	}
	if o.IsMultiStageRestore.IsSet() {
		toSerialize["isMultiStageRestore"] = o.IsMultiStageRestore.Get()
	}
	if o.LeverageSanTransport.IsSet() {
		toSerialize["leverageSanTransport"] = o.LeverageSanTransport.Get()
	}
	if o.OverwriteExistingVm.IsSet() {
		toSerialize["overwriteExistingVm"] = o.OverwriteExistingVm.Get()
	}
	if o.PowerOffAndRenameExistingVm.IsSet() {
		toSerialize["powerOffAndRenameExistingVm"] = o.PowerOffAndRenameExistingVm.Get()
	}
	if o.PowerOnVms.IsSet() {
		toSerialize["powerOnVms"] = o.PowerOnVms.Get()
	}
	if !IsNil(o.RecoveryProcessType) {
		toSerialize["recoveryProcessType"] = o.RecoveryProcessType
	}
	if o.RecoveryTargetConfig.IsSet() {
		toSerialize["recoveryTargetConfig"] = o.RecoveryTargetConfig.Get()
	}
	if o.RenameRecoveredVmsParams.IsSet() {
		toSerialize["renameRecoveredVmsParams"] = o.RenameRecoveredVmsParams.Get()
	}
	if o.VlanConfig.IsSet() {
		toSerialize["vlanConfig"] = o.VlanConfig.Get()
	}
	return toSerialize, nil
}

type NullableRecoverVmwareVmParamsVmwareTargetParams struct {
	value *RecoverVmwareVmParamsVmwareTargetParams
	isSet bool
}

func (v NullableRecoverVmwareVmParamsVmwareTargetParams) Get() *RecoverVmwareVmParamsVmwareTargetParams {
	return v.value
}

func (v *NullableRecoverVmwareVmParamsVmwareTargetParams) Set(val *RecoverVmwareVmParamsVmwareTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVmwareVmParamsVmwareTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVmwareVmParamsVmwareTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVmwareVmParamsVmwareTargetParams(val *RecoverVmwareVmParamsVmwareTargetParams) *NullableRecoverVmwareVmParamsVmwareTargetParams {
	return &NullableRecoverVmwareVmParamsVmwareTargetParams{value: val, isSet: true}
}

func (v NullableRecoverVmwareVmParamsVmwareTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVmwareVmParamsVmwareTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


