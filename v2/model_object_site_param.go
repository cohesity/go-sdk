/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectSiteParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectSiteParam{}

// ObjectSiteParam Specifies Site recovery parameters.
type ObjectSiteParam struct {
	// Specifies the parameters to recover a document library
	DocumentLibraryParams []OneDriveParam `json:"documentLibraryParams,omitempty"`
	OwnerInfo ObjectSiteParamOwnerInfo `json:"ownerInfo"`
}

type _ObjectSiteParam ObjectSiteParam

// NewObjectSiteParam instantiates a new ObjectSiteParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectSiteParam(ownerInfo ObjectSiteParamOwnerInfo) *ObjectSiteParam {
	this := ObjectSiteParam{}
	this.OwnerInfo = ownerInfo
	return &this
}

// NewObjectSiteParamWithDefaults instantiates a new ObjectSiteParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectSiteParamWithDefaults() *ObjectSiteParam {
	this := ObjectSiteParam{}
	return &this
}

// GetDocumentLibraryParams returns the DocumentLibraryParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSiteParam) GetDocumentLibraryParams() []OneDriveParam {
	if o == nil {
		var ret []OneDriveParam
		return ret
	}
	return o.DocumentLibraryParams
}

// GetDocumentLibraryParamsOk returns a tuple with the DocumentLibraryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSiteParam) GetDocumentLibraryParamsOk() ([]OneDriveParam, bool) {
	if o == nil || IsNil(o.DocumentLibraryParams) {
		return nil, false
	}
	return o.DocumentLibraryParams, true
}

// HasDocumentLibraryParams returns a boolean if a field has been set.
func (o *ObjectSiteParam) HasDocumentLibraryParams() bool {
	if o != nil && !IsNil(o.DocumentLibraryParams) {
		return true
	}

	return false
}

// SetDocumentLibraryParams gets a reference to the given []OneDriveParam and assigns it to the DocumentLibraryParams field.
func (o *ObjectSiteParam) SetDocumentLibraryParams(v []OneDriveParam) {
	o.DocumentLibraryParams = v
}

// GetOwnerInfo returns the OwnerInfo field value
func (o *ObjectSiteParam) GetOwnerInfo() ObjectSiteParamOwnerInfo {
	if o == nil {
		var ret ObjectSiteParamOwnerInfo
		return ret
	}

	return o.OwnerInfo
}

// GetOwnerInfoOk returns a tuple with the OwnerInfo field value
// and a boolean to check if the value has been set.
func (o *ObjectSiteParam) GetOwnerInfoOk() (*ObjectSiteParamOwnerInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OwnerInfo, true
}

// SetOwnerInfo sets field value
func (o *ObjectSiteParam) SetOwnerInfo(v ObjectSiteParamOwnerInfo) {
	o.OwnerInfo = v
}

func (o ObjectSiteParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectSiteParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentLibraryParams != nil {
		toSerialize["documentLibraryParams"] = o.DocumentLibraryParams
	}
	toSerialize["ownerInfo"] = o.OwnerInfo
	return toSerialize, nil
}

func (o *ObjectSiteParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ownerInfo",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectSiteParam := _ObjectSiteParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectSiteParam)

	if err != nil {
		return err
	}

	*o = ObjectSiteParam(varObjectSiteParam)

	return err
}

type NullableObjectSiteParam struct {
	value *ObjectSiteParam
	isSet bool
}

func (v NullableObjectSiteParam) Get() *ObjectSiteParam {
	return v.value
}

func (v *NullableObjectSiteParam) Set(val *ObjectSiteParam) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectSiteParam) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectSiteParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectSiteParam(val *ObjectSiteParam) *NullableObjectSiteParam {
	return &NullableObjectSiteParam{value: val, isSet: true}
}

func (v NullableObjectSiteParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectSiteParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


