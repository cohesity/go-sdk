/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ActiveDirectoryAppParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryAppParams{}

// ActiveDirectoryAppParams Specifies the Active Directory special parameters for the Protection Group.
type ActiveDirectoryAppParams struct {
	// Specifies the application id of the Active Directory instance.
	AppId NullableInt64 `json:"appId,omitempty"`
	// Specifies the application name of the Active Directory instance.
	AppName NullableString `json:"appName,omitempty"`
}

// NewActiveDirectoryAppParams instantiates a new ActiveDirectoryAppParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAppParams() *ActiveDirectoryAppParams {
	this := ActiveDirectoryAppParams{}
	return &this
}

// NewActiveDirectoryAppParamsWithDefaults instantiates a new ActiveDirectoryAppParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAppParamsWithDefaults() *ActiveDirectoryAppParams {
	this := ActiveDirectoryAppParams{}
	return &this
}

// GetAppId returns the AppId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryAppParams) GetAppId() int64 {
	if o == nil || IsNil(o.AppId.Get()) {
		var ret int64
		return ret
	}
	return *o.AppId.Get()
}

// GetAppIdOk returns a tuple with the AppId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAppParams) GetAppIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppId.Get(), o.AppId.IsSet()
}

// HasAppId returns a boolean if a field has been set.
func (o *ActiveDirectoryAppParams) HasAppId() bool {
	if o != nil && o.AppId.IsSet() {
		return true
	}

	return false
}

// SetAppId gets a reference to the given NullableInt64 and assigns it to the AppId field.
func (o *ActiveDirectoryAppParams) SetAppId(v int64) {
	o.AppId.Set(&v)
}
// SetAppIdNil sets the value for AppId to be an explicit nil
func (o *ActiveDirectoryAppParams) SetAppIdNil() {
	o.AppId.Set(nil)
}

// UnsetAppId ensures that no value is present for AppId, not even an explicit nil
func (o *ActiveDirectoryAppParams) UnsetAppId() {
	o.AppId.Unset()
}

// GetAppName returns the AppName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryAppParams) GetAppName() string {
	if o == nil || IsNil(o.AppName.Get()) {
		var ret string
		return ret
	}
	return *o.AppName.Get()
}

// GetAppNameOk returns a tuple with the AppName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAppParams) GetAppNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppName.Get(), o.AppName.IsSet()
}

// HasAppName returns a boolean if a field has been set.
func (o *ActiveDirectoryAppParams) HasAppName() bool {
	if o != nil && o.AppName.IsSet() {
		return true
	}

	return false
}

// SetAppName gets a reference to the given NullableString and assigns it to the AppName field.
func (o *ActiveDirectoryAppParams) SetAppName(v string) {
	o.AppName.Set(&v)
}
// SetAppNameNil sets the value for AppName to be an explicit nil
func (o *ActiveDirectoryAppParams) SetAppNameNil() {
	o.AppName.Set(nil)
}

// UnsetAppName ensures that no value is present for AppName, not even an explicit nil
func (o *ActiveDirectoryAppParams) UnsetAppName() {
	o.AppName.Unset()
}

func (o ActiveDirectoryAppParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryAppParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AppId.IsSet() {
		toSerialize["appId"] = o.AppId.Get()
	}
	if o.AppName.IsSet() {
		toSerialize["appName"] = o.AppName.Get()
	}
	return toSerialize, nil
}

type NullableActiveDirectoryAppParams struct {
	value *ActiveDirectoryAppParams
	isSet bool
}

func (v NullableActiveDirectoryAppParams) Get() *ActiveDirectoryAppParams {
	return v.value
}

func (v *NullableActiveDirectoryAppParams) Set(val *ActiveDirectoryAppParams) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAppParams) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAppParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAppParams(val *ActiveDirectoryAppParams) *NullableActiveDirectoryAppParams {
	return &NullableActiveDirectoryAppParams{value: val, isSet: true}
}

func (v NullableActiveDirectoryAppParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAppParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


