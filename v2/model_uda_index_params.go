/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UdaIndexParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaIndexParams{}

// UdaIndexParams Parameters to define/specify a Uda connector.
type UdaIndexParams struct {
	// Whether the dynamic config support is enabled or not.
	Enabled NullableBool `json:"enabled,omitempty"`
	// Unique id for each Uda connector.
	Id NullableInt64 `json:"id,omitempty"`
	// Label to be shown On UI screen.
	Label NullableString `json:"label,omitempty"`
	// Type of the uda connector.
	SourceType NullableString `json:"sourceType,omitempty"`
	// Syntax used for configuration file.
	Syntax NullableInt32 `json:"syntax,omitempty"`
	// UI feature flag that controls the visibility of the connector.
	UiFeatureFlag NullableString `json:"uiFeatureFlag,omitempty"`
	// Version of the connector.
	Version NullableInt64 `json:"version,omitempty"`
}

// NewUdaIndexParams instantiates a new UdaIndexParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaIndexParams() *UdaIndexParams {
	this := UdaIndexParams{}
	return &this
}

// NewUdaIndexParamsWithDefaults instantiates a new UdaIndexParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaIndexParamsWithDefaults() *UdaIndexParams {
	this := UdaIndexParams{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaIndexParams) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaIndexParams) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *UdaIndexParams) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *UdaIndexParams) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *UdaIndexParams) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *UdaIndexParams) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaIndexParams) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaIndexParams) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UdaIndexParams) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *UdaIndexParams) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UdaIndexParams) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UdaIndexParams) UnsetId() {
	o.Id.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaIndexParams) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaIndexParams) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *UdaIndexParams) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *UdaIndexParams) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *UdaIndexParams) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *UdaIndexParams) UnsetLabel() {
	o.Label.Unset()
}

// GetSourceType returns the SourceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaIndexParams) GetSourceType() string {
	if o == nil || IsNil(o.SourceType.Get()) {
		var ret string
		return ret
	}
	return *o.SourceType.Get()
}

// GetSourceTypeOk returns a tuple with the SourceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaIndexParams) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceType.Get(), o.SourceType.IsSet()
}

// HasSourceType returns a boolean if a field has been set.
func (o *UdaIndexParams) HasSourceType() bool {
	if o != nil && o.SourceType.IsSet() {
		return true
	}

	return false
}

// SetSourceType gets a reference to the given NullableString and assigns it to the SourceType field.
func (o *UdaIndexParams) SetSourceType(v string) {
	o.SourceType.Set(&v)
}
// SetSourceTypeNil sets the value for SourceType to be an explicit nil
func (o *UdaIndexParams) SetSourceTypeNil() {
	o.SourceType.Set(nil)
}

// UnsetSourceType ensures that no value is present for SourceType, not even an explicit nil
func (o *UdaIndexParams) UnsetSourceType() {
	o.SourceType.Unset()
}

// GetSyntax returns the Syntax field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaIndexParams) GetSyntax() int32 {
	if o == nil || IsNil(o.Syntax.Get()) {
		var ret int32
		return ret
	}
	return *o.Syntax.Get()
}

// GetSyntaxOk returns a tuple with the Syntax field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaIndexParams) GetSyntaxOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Syntax.Get(), o.Syntax.IsSet()
}

// HasSyntax returns a boolean if a field has been set.
func (o *UdaIndexParams) HasSyntax() bool {
	if o != nil && o.Syntax.IsSet() {
		return true
	}

	return false
}

// SetSyntax gets a reference to the given NullableInt32 and assigns it to the Syntax field.
func (o *UdaIndexParams) SetSyntax(v int32) {
	o.Syntax.Set(&v)
}
// SetSyntaxNil sets the value for Syntax to be an explicit nil
func (o *UdaIndexParams) SetSyntaxNil() {
	o.Syntax.Set(nil)
}

// UnsetSyntax ensures that no value is present for Syntax, not even an explicit nil
func (o *UdaIndexParams) UnsetSyntax() {
	o.Syntax.Unset()
}

// GetUiFeatureFlag returns the UiFeatureFlag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaIndexParams) GetUiFeatureFlag() string {
	if o == nil || IsNil(o.UiFeatureFlag.Get()) {
		var ret string
		return ret
	}
	return *o.UiFeatureFlag.Get()
}

// GetUiFeatureFlagOk returns a tuple with the UiFeatureFlag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaIndexParams) GetUiFeatureFlagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UiFeatureFlag.Get(), o.UiFeatureFlag.IsSet()
}

// HasUiFeatureFlag returns a boolean if a field has been set.
func (o *UdaIndexParams) HasUiFeatureFlag() bool {
	if o != nil && o.UiFeatureFlag.IsSet() {
		return true
	}

	return false
}

// SetUiFeatureFlag gets a reference to the given NullableString and assigns it to the UiFeatureFlag field.
func (o *UdaIndexParams) SetUiFeatureFlag(v string) {
	o.UiFeatureFlag.Set(&v)
}
// SetUiFeatureFlagNil sets the value for UiFeatureFlag to be an explicit nil
func (o *UdaIndexParams) SetUiFeatureFlagNil() {
	o.UiFeatureFlag.Set(nil)
}

// UnsetUiFeatureFlag ensures that no value is present for UiFeatureFlag, not even an explicit nil
func (o *UdaIndexParams) UnsetUiFeatureFlag() {
	o.UiFeatureFlag.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaIndexParams) GetVersion() int64 {
	if o == nil || IsNil(o.Version.Get()) {
		var ret int64
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaIndexParams) GetVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *UdaIndexParams) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt64 and assigns it to the Version field.
func (o *UdaIndexParams) SetVersion(v int64) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *UdaIndexParams) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *UdaIndexParams) UnsetVersion() {
	o.Version.Unset()
}

func (o UdaIndexParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaIndexParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.SourceType.IsSet() {
		toSerialize["sourceType"] = o.SourceType.Get()
	}
	if o.Syntax.IsSet() {
		toSerialize["syntax"] = o.Syntax.Get()
	}
	if o.UiFeatureFlag.IsSet() {
		toSerialize["uiFeatureFlag"] = o.UiFeatureFlag.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return toSerialize, nil
}

type NullableUdaIndexParams struct {
	value *UdaIndexParams
	isSet bool
}

func (v NullableUdaIndexParams) Get() *UdaIndexParams {
	return v.value
}

func (v *NullableUdaIndexParams) Set(val *UdaIndexParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaIndexParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaIndexParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaIndexParams(val *UdaIndexParams) *NullableUdaIndexParams {
	return &NullableUdaIndexParams{value: val, isSet: true}
}

func (v NullableUdaIndexParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaIndexParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


