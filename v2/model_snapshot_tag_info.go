/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnapshotTagInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotTagInfo{}

// SnapshotTagInfo Specifies the snapshot tag info for an object.
type SnapshotTagInfo struct {
	// Specifies Id of tag applied to the object.
	TagId NullableString `json:"tagId"`
	// Specifies runs the tags are applied to.
	RunIds []string `json:"runIds,omitempty"`
}

type _SnapshotTagInfo SnapshotTagInfo

// NewSnapshotTagInfo instantiates a new SnapshotTagInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotTagInfo(tagId NullableString) *SnapshotTagInfo {
	this := SnapshotTagInfo{}
	this.TagId = tagId
	return &this
}

// NewSnapshotTagInfoWithDefaults instantiates a new SnapshotTagInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotTagInfoWithDefaults() *SnapshotTagInfo {
	this := SnapshotTagInfo{}
	return &this
}

// GetTagId returns the TagId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SnapshotTagInfo) GetTagId() string {
	if o == nil || o.TagId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TagId.Get()
}

// GetTagIdOk returns a tuple with the TagId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotTagInfo) GetTagIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TagId.Get(), o.TagId.IsSet()
}

// SetTagId sets field value
func (o *SnapshotTagInfo) SetTagId(v string) {
	o.TagId.Set(&v)
}

// GetRunIds returns the RunIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotTagInfo) GetRunIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RunIds
}

// GetRunIdsOk returns a tuple with the RunIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotTagInfo) GetRunIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.RunIds) {
		return nil, false
	}
	return o.RunIds, true
}

// HasRunIds returns a boolean if a field has been set.
func (o *SnapshotTagInfo) HasRunIds() bool {
	if o != nil && !IsNil(o.RunIds) {
		return true
	}

	return false
}

// SetRunIds gets a reference to the given []string and assigns it to the RunIds field.
func (o *SnapshotTagInfo) SetRunIds(v []string) {
	o.RunIds = v
}

func (o SnapshotTagInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotTagInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["tagId"] = o.TagId.Get()
	if o.RunIds != nil {
		toSerialize["runIds"] = o.RunIds
	}
	return toSerialize, nil
}

func (o *SnapshotTagInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tagId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotTagInfo := _SnapshotTagInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotTagInfo)

	if err != nil {
		return err
	}

	*o = SnapshotTagInfo(varSnapshotTagInfo)

	return err
}

type NullableSnapshotTagInfo struct {
	value *SnapshotTagInfo
	isSet bool
}

func (v NullableSnapshotTagInfo) Get() *SnapshotTagInfo {
	return v.value
}

func (v *NullableSnapshotTagInfo) Set(val *SnapshotTagInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotTagInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotTagInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotTagInfo(val *SnapshotTagInfo) *NullableSnapshotTagInfo {
	return &NullableSnapshotTagInfo{value: val, isSet: true}
}

func (v NullableSnapshotTagInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotTagInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


