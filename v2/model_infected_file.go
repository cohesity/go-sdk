/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InfectedFile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfectedFile{}

// InfectedFile Specifies an infected entity.
type InfectedFile struct {
	// Specifies the Antivirus Service group which detected the threats.
	AntivirusServiceGroupName NullableString `json:"antivirusServiceGroupName,omitempty"`
	// Specifies the ICAP Uri of the Antivirus Service which detected the threats.
	AntivirusServiceIcapUri NullableString `json:"antivirusServiceIcapUri,omitempty"`
	// Specifies the timestamp in microseconds when the threats were detected.
	DetectedTimeUsecs NullableInt64 `json:"detectedTimeUsecs,omitempty"`
	// Specifies the entity id of the infected entity.
	EntityId NullableInt64 `json:"entityId"`
	// Specifies the type of the infected entity.
	EntityType NullableString `json:"entityType,omitempty"`
	// Specifies the timestamp in microseconds when this entity was last modified.
	LastModifiedTimeUsecs NullableInt64 `json:"lastModifiedTimeUsecs,omitempty"`
	// Specifies the infected entity path.
	Path NullableString `json:"path,omitempty"`
	// Specifies the root inode id of the file system which the infected entity belongs to.
	RootInodeId NullableInt64 `json:"rootInodeId"`
	// Specifies the timestamp in microseconds when inode was scanned for viruses.
	ScannedTimeUsecs NullableInt64 `json:"scannedTimeUsecs,omitempty"`
	// Specifies the state of the infected entity.
	State NullableString `json:"state,omitempty"`
	// Specifies a list of virus threat descriptions found in the entity.
	ThreatDescriptions []string `json:"threatDescriptions,omitempty"`
	// Specifies the view id which the infected entity belongs to.
	ViewId NullableInt64 `json:"viewId"`
	// Specifies the View name to which the infected entity belongs to.
	ViewName NullableString `json:"viewName,omitempty"`
}

type _InfectedFile InfectedFile

// NewInfectedFile instantiates a new InfectedFile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfectedFile(entityId NullableInt64, rootInodeId NullableInt64, viewId NullableInt64) *InfectedFile {
	this := InfectedFile{}
	this.EntityId = entityId
	this.RootInodeId = rootInodeId
	this.ViewId = viewId
	return &this
}

// NewInfectedFileWithDefaults instantiates a new InfectedFile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfectedFileWithDefaults() *InfectedFile {
	this := InfectedFile{}
	return &this
}

// GetAntivirusServiceGroupName returns the AntivirusServiceGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetAntivirusServiceGroupName() string {
	if o == nil || IsNil(o.AntivirusServiceGroupName.Get()) {
		var ret string
		return ret
	}
	return *o.AntivirusServiceGroupName.Get()
}

// GetAntivirusServiceGroupNameOk returns a tuple with the AntivirusServiceGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetAntivirusServiceGroupNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AntivirusServiceGroupName.Get(), o.AntivirusServiceGroupName.IsSet()
}

// HasAntivirusServiceGroupName returns a boolean if a field has been set.
func (o *InfectedFile) HasAntivirusServiceGroupName() bool {
	if o != nil && o.AntivirusServiceGroupName.IsSet() {
		return true
	}

	return false
}

// SetAntivirusServiceGroupName gets a reference to the given NullableString and assigns it to the AntivirusServiceGroupName field.
func (o *InfectedFile) SetAntivirusServiceGroupName(v string) {
	o.AntivirusServiceGroupName.Set(&v)
}
// SetAntivirusServiceGroupNameNil sets the value for AntivirusServiceGroupName to be an explicit nil
func (o *InfectedFile) SetAntivirusServiceGroupNameNil() {
	o.AntivirusServiceGroupName.Set(nil)
}

// UnsetAntivirusServiceGroupName ensures that no value is present for AntivirusServiceGroupName, not even an explicit nil
func (o *InfectedFile) UnsetAntivirusServiceGroupName() {
	o.AntivirusServiceGroupName.Unset()
}

// GetAntivirusServiceIcapUri returns the AntivirusServiceIcapUri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetAntivirusServiceIcapUri() string {
	if o == nil || IsNil(o.AntivirusServiceIcapUri.Get()) {
		var ret string
		return ret
	}
	return *o.AntivirusServiceIcapUri.Get()
}

// GetAntivirusServiceIcapUriOk returns a tuple with the AntivirusServiceIcapUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetAntivirusServiceIcapUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AntivirusServiceIcapUri.Get(), o.AntivirusServiceIcapUri.IsSet()
}

// HasAntivirusServiceIcapUri returns a boolean if a field has been set.
func (o *InfectedFile) HasAntivirusServiceIcapUri() bool {
	if o != nil && o.AntivirusServiceIcapUri.IsSet() {
		return true
	}

	return false
}

// SetAntivirusServiceIcapUri gets a reference to the given NullableString and assigns it to the AntivirusServiceIcapUri field.
func (o *InfectedFile) SetAntivirusServiceIcapUri(v string) {
	o.AntivirusServiceIcapUri.Set(&v)
}
// SetAntivirusServiceIcapUriNil sets the value for AntivirusServiceIcapUri to be an explicit nil
func (o *InfectedFile) SetAntivirusServiceIcapUriNil() {
	o.AntivirusServiceIcapUri.Set(nil)
}

// UnsetAntivirusServiceIcapUri ensures that no value is present for AntivirusServiceIcapUri, not even an explicit nil
func (o *InfectedFile) UnsetAntivirusServiceIcapUri() {
	o.AntivirusServiceIcapUri.Unset()
}

// GetDetectedTimeUsecs returns the DetectedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetDetectedTimeUsecs() int64 {
	if o == nil || IsNil(o.DetectedTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.DetectedTimeUsecs.Get()
}

// GetDetectedTimeUsecsOk returns a tuple with the DetectedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetDetectedTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DetectedTimeUsecs.Get(), o.DetectedTimeUsecs.IsSet()
}

// HasDetectedTimeUsecs returns a boolean if a field has been set.
func (o *InfectedFile) HasDetectedTimeUsecs() bool {
	if o != nil && o.DetectedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetDetectedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the DetectedTimeUsecs field.
func (o *InfectedFile) SetDetectedTimeUsecs(v int64) {
	o.DetectedTimeUsecs.Set(&v)
}
// SetDetectedTimeUsecsNil sets the value for DetectedTimeUsecs to be an explicit nil
func (o *InfectedFile) SetDetectedTimeUsecsNil() {
	o.DetectedTimeUsecs.Set(nil)
}

// UnsetDetectedTimeUsecs ensures that no value is present for DetectedTimeUsecs, not even an explicit nil
func (o *InfectedFile) UnsetDetectedTimeUsecs() {
	o.DetectedTimeUsecs.Unset()
}

// GetEntityId returns the EntityId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *InfectedFile) GetEntityId() int64 {
	if o == nil || o.EntityId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetEntityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// SetEntityId sets field value
func (o *InfectedFile) SetEntityId(v int64) {
	o.EntityId.Set(&v)
}

// GetEntityType returns the EntityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetEntityType() string {
	if o == nil || IsNil(o.EntityType.Get()) {
		var ret string
		return ret
	}
	return *o.EntityType.Get()
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityType.Get(), o.EntityType.IsSet()
}

// HasEntityType returns a boolean if a field has been set.
func (o *InfectedFile) HasEntityType() bool {
	if o != nil && o.EntityType.IsSet() {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given NullableString and assigns it to the EntityType field.
func (o *InfectedFile) SetEntityType(v string) {
	o.EntityType.Set(&v)
}
// SetEntityTypeNil sets the value for EntityType to be an explicit nil
func (o *InfectedFile) SetEntityTypeNil() {
	o.EntityType.Set(nil)
}

// UnsetEntityType ensures that no value is present for EntityType, not even an explicit nil
func (o *InfectedFile) UnsetEntityType() {
	o.EntityType.Unset()
}

// GetLastModifiedTimeUsecs returns the LastModifiedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetLastModifiedTimeUsecs() int64 {
	if o == nil || IsNil(o.LastModifiedTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.LastModifiedTimeUsecs.Get()
}

// GetLastModifiedTimeUsecsOk returns a tuple with the LastModifiedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetLastModifiedTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastModifiedTimeUsecs.Get(), o.LastModifiedTimeUsecs.IsSet()
}

// HasLastModifiedTimeUsecs returns a boolean if a field has been set.
func (o *InfectedFile) HasLastModifiedTimeUsecs() bool {
	if o != nil && o.LastModifiedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetLastModifiedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the LastModifiedTimeUsecs field.
func (o *InfectedFile) SetLastModifiedTimeUsecs(v int64) {
	o.LastModifiedTimeUsecs.Set(&v)
}
// SetLastModifiedTimeUsecsNil sets the value for LastModifiedTimeUsecs to be an explicit nil
func (o *InfectedFile) SetLastModifiedTimeUsecsNil() {
	o.LastModifiedTimeUsecs.Set(nil)
}

// UnsetLastModifiedTimeUsecs ensures that no value is present for LastModifiedTimeUsecs, not even an explicit nil
func (o *InfectedFile) UnsetLastModifiedTimeUsecs() {
	o.LastModifiedTimeUsecs.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetPath() string {
	if o == nil || IsNil(o.Path.Get()) {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *InfectedFile) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *InfectedFile) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *InfectedFile) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *InfectedFile) UnsetPath() {
	o.Path.Unset()
}

// GetRootInodeId returns the RootInodeId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *InfectedFile) GetRootInodeId() int64 {
	if o == nil || o.RootInodeId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.RootInodeId.Get()
}

// GetRootInodeIdOk returns a tuple with the RootInodeId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetRootInodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootInodeId.Get(), o.RootInodeId.IsSet()
}

// SetRootInodeId sets field value
func (o *InfectedFile) SetRootInodeId(v int64) {
	o.RootInodeId.Set(&v)
}

// GetScannedTimeUsecs returns the ScannedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetScannedTimeUsecs() int64 {
	if o == nil || IsNil(o.ScannedTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.ScannedTimeUsecs.Get()
}

// GetScannedTimeUsecsOk returns a tuple with the ScannedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetScannedTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScannedTimeUsecs.Get(), o.ScannedTimeUsecs.IsSet()
}

// HasScannedTimeUsecs returns a boolean if a field has been set.
func (o *InfectedFile) HasScannedTimeUsecs() bool {
	if o != nil && o.ScannedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetScannedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ScannedTimeUsecs field.
func (o *InfectedFile) SetScannedTimeUsecs(v int64) {
	o.ScannedTimeUsecs.Set(&v)
}
// SetScannedTimeUsecsNil sets the value for ScannedTimeUsecs to be an explicit nil
func (o *InfectedFile) SetScannedTimeUsecsNil() {
	o.ScannedTimeUsecs.Set(nil)
}

// UnsetScannedTimeUsecs ensures that no value is present for ScannedTimeUsecs, not even an explicit nil
func (o *InfectedFile) UnsetScannedTimeUsecs() {
	o.ScannedTimeUsecs.Unset()
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *InfectedFile) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *InfectedFile) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *InfectedFile) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *InfectedFile) UnsetState() {
	o.State.Unset()
}

// GetThreatDescriptions returns the ThreatDescriptions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetThreatDescriptions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ThreatDescriptions
}

// GetThreatDescriptionsOk returns a tuple with the ThreatDescriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetThreatDescriptionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ThreatDescriptions) {
		return nil, false
	}
	return o.ThreatDescriptions, true
}

// HasThreatDescriptions returns a boolean if a field has been set.
func (o *InfectedFile) HasThreatDescriptions() bool {
	if o != nil && !IsNil(o.ThreatDescriptions) {
		return true
	}

	return false
}

// SetThreatDescriptions gets a reference to the given []string and assigns it to the ThreatDescriptions field.
func (o *InfectedFile) SetThreatDescriptions(v []string) {
	o.ThreatDescriptions = v
}

// GetViewId returns the ViewId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *InfectedFile) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetViewIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// SetViewId sets field value
func (o *InfectedFile) SetViewId(v int64) {
	o.ViewId.Set(&v)
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFile) GetViewName() string {
	if o == nil || IsNil(o.ViewName.Get()) {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFile) GetViewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *InfectedFile) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *InfectedFile) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *InfectedFile) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *InfectedFile) UnsetViewName() {
	o.ViewName.Unset()
}

func (o InfectedFile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfectedFile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AntivirusServiceGroupName.IsSet() {
		toSerialize["antivirusServiceGroupName"] = o.AntivirusServiceGroupName.Get()
	}
	if o.AntivirusServiceIcapUri.IsSet() {
		toSerialize["antivirusServiceIcapUri"] = o.AntivirusServiceIcapUri.Get()
	}
	if o.DetectedTimeUsecs.IsSet() {
		toSerialize["detectedTimeUsecs"] = o.DetectedTimeUsecs.Get()
	}
	toSerialize["entityId"] = o.EntityId.Get()
	if o.EntityType.IsSet() {
		toSerialize["entityType"] = o.EntityType.Get()
	}
	if o.LastModifiedTimeUsecs.IsSet() {
		toSerialize["lastModifiedTimeUsecs"] = o.LastModifiedTimeUsecs.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	toSerialize["rootInodeId"] = o.RootInodeId.Get()
	if o.ScannedTimeUsecs.IsSet() {
		toSerialize["scannedTimeUsecs"] = o.ScannedTimeUsecs.Get()
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	if o.ThreatDescriptions != nil {
		toSerialize["threatDescriptions"] = o.ThreatDescriptions
	}
	toSerialize["viewId"] = o.ViewId.Get()
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return toSerialize, nil
}

func (o *InfectedFile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityId",
		"rootInodeId",
		"viewId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfectedFile := _InfectedFile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInfectedFile)

	if err != nil {
		return err
	}

	*o = InfectedFile(varInfectedFile)

	return err
}

type NullableInfectedFile struct {
	value *InfectedFile
	isSet bool
}

func (v NullableInfectedFile) Get() *InfectedFile {
	return v.value
}

func (v *NullableInfectedFile) Set(val *InfectedFile) {
	v.value = val
	v.isSet = true
}

func (v NullableInfectedFile) IsSet() bool {
	return v.isSet
}

func (v *NullableInfectedFile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfectedFile(val *InfectedFile) *NullableInfectedFile {
	return &NullableInfectedFile{value: val, isSet: true}
}

func (v NullableInfectedFile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfectedFile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


