/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RigelConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RigelConnection{}

// RigelConnection Specify a connection of Rigel.
type RigelConnection struct {
	// Specifies the claim token in the connection.
	ClaimToken NullableString `json:"claimToken,omitempty"`
	// Specifies the connector groups in the connection.
	ConnectorGroups []ConnectorGroup `json:"connectorGroups,omitempty"`
	// Specifies the id of the connection.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the name of the connection.
	Name NullableString `json:"name,omitempty"`
	// Flag to specify if the connection is scalable.
	Scalable NullableBool `json:"scalable,omitempty"`
	// Specifies the ids of the connectors which are not grouped in this connection
	UngroupedConnectors []int64 `json:"ungroupedConnectors,omitempty"`
}

// NewRigelConnection instantiates a new RigelConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRigelConnection() *RigelConnection {
	this := RigelConnection{}
	return &this
}

// NewRigelConnectionWithDefaults instantiates a new RigelConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRigelConnectionWithDefaults() *RigelConnection {
	this := RigelConnection{}
	return &this
}

// GetClaimToken returns the ClaimToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelConnection) GetClaimToken() string {
	if o == nil || IsNil(o.ClaimToken.Get()) {
		var ret string
		return ret
	}
	return *o.ClaimToken.Get()
}

// GetClaimTokenOk returns a tuple with the ClaimToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelConnection) GetClaimTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClaimToken.Get(), o.ClaimToken.IsSet()
}

// HasClaimToken returns a boolean if a field has been set.
func (o *RigelConnection) HasClaimToken() bool {
	if o != nil && o.ClaimToken.IsSet() {
		return true
	}

	return false
}

// SetClaimToken gets a reference to the given NullableString and assigns it to the ClaimToken field.
func (o *RigelConnection) SetClaimToken(v string) {
	o.ClaimToken.Set(&v)
}
// SetClaimTokenNil sets the value for ClaimToken to be an explicit nil
func (o *RigelConnection) SetClaimTokenNil() {
	o.ClaimToken.Set(nil)
}

// UnsetClaimToken ensures that no value is present for ClaimToken, not even an explicit nil
func (o *RigelConnection) UnsetClaimToken() {
	o.ClaimToken.Unset()
}

// GetConnectorGroups returns the ConnectorGroups field value if set, zero value otherwise.
func (o *RigelConnection) GetConnectorGroups() []ConnectorGroup {
	if o == nil || IsNil(o.ConnectorGroups) {
		var ret []ConnectorGroup
		return ret
	}
	return o.ConnectorGroups
}

// GetConnectorGroupsOk returns a tuple with the ConnectorGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RigelConnection) GetConnectorGroupsOk() ([]ConnectorGroup, bool) {
	if o == nil || IsNil(o.ConnectorGroups) {
		return nil, false
	}
	return o.ConnectorGroups, true
}

// HasConnectorGroups returns a boolean if a field has been set.
func (o *RigelConnection) HasConnectorGroups() bool {
	if o != nil && !IsNil(o.ConnectorGroups) {
		return true
	}

	return false
}

// SetConnectorGroups gets a reference to the given []ConnectorGroup and assigns it to the ConnectorGroups field.
func (o *RigelConnection) SetConnectorGroups(v []ConnectorGroup) {
	o.ConnectorGroups = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelConnection) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelConnection) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *RigelConnection) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *RigelConnection) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *RigelConnection) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *RigelConnection) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelConnection) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelConnection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RigelConnection) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RigelConnection) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RigelConnection) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RigelConnection) UnsetName() {
	o.Name.Unset()
}

// GetScalable returns the Scalable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelConnection) GetScalable() bool {
	if o == nil || IsNil(o.Scalable.Get()) {
		var ret bool
		return ret
	}
	return *o.Scalable.Get()
}

// GetScalableOk returns a tuple with the Scalable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelConnection) GetScalableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scalable.Get(), o.Scalable.IsSet()
}

// HasScalable returns a boolean if a field has been set.
func (o *RigelConnection) HasScalable() bool {
	if o != nil && o.Scalable.IsSet() {
		return true
	}

	return false
}

// SetScalable gets a reference to the given NullableBool and assigns it to the Scalable field.
func (o *RigelConnection) SetScalable(v bool) {
	o.Scalable.Set(&v)
}
// SetScalableNil sets the value for Scalable to be an explicit nil
func (o *RigelConnection) SetScalableNil() {
	o.Scalable.Set(nil)
}

// UnsetScalable ensures that no value is present for Scalable, not even an explicit nil
func (o *RigelConnection) UnsetScalable() {
	o.Scalable.Unset()
}

// GetUngroupedConnectors returns the UngroupedConnectors field value if set, zero value otherwise.
func (o *RigelConnection) GetUngroupedConnectors() []int64 {
	if o == nil || IsNil(o.UngroupedConnectors) {
		var ret []int64
		return ret
	}
	return o.UngroupedConnectors
}

// GetUngroupedConnectorsOk returns a tuple with the UngroupedConnectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RigelConnection) GetUngroupedConnectorsOk() ([]int64, bool) {
	if o == nil || IsNil(o.UngroupedConnectors) {
		return nil, false
	}
	return o.UngroupedConnectors, true
}

// HasUngroupedConnectors returns a boolean if a field has been set.
func (o *RigelConnection) HasUngroupedConnectors() bool {
	if o != nil && !IsNil(o.UngroupedConnectors) {
		return true
	}

	return false
}

// SetUngroupedConnectors gets a reference to the given []int64 and assigns it to the UngroupedConnectors field.
func (o *RigelConnection) SetUngroupedConnectors(v []int64) {
	o.UngroupedConnectors = v
}

func (o RigelConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RigelConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ClaimToken.IsSet() {
		toSerialize["claimToken"] = o.ClaimToken.Get()
	}
	if !IsNil(o.ConnectorGroups) {
		toSerialize["connectorGroups"] = o.ConnectorGroups
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Scalable.IsSet() {
		toSerialize["scalable"] = o.Scalable.Get()
	}
	if !IsNil(o.UngroupedConnectors) {
		toSerialize["ungroupedConnectors"] = o.UngroupedConnectors
	}
	return toSerialize, nil
}

type NullableRigelConnection struct {
	value *RigelConnection
	isSet bool
}

func (v NullableRigelConnection) Get() *RigelConnection {
	return v.value
}

func (v *NullableRigelConnection) Set(val *RigelConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableRigelConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableRigelConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRigelConnection(val *RigelConnection) *NullableRigelConnection {
	return &NullableRigelConnection{value: val, isSet: true}
}

func (v NullableRigelConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRigelConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


