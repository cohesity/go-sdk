/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GetNlmLocksResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetNlmLocksResult{}

// GetNlmLocksResult Specifies the list of NLM locks.
type GetNlmLocksResult struct {
	// Specifies the pagination cookie.
	Cookie NullableString `json:"cookie,omitempty"`
	// Specifies the list of NLM locks.
	FileNlmLocks []FileNlmLocks `json:"fileNlmLocks,omitempty"`
}

// NewGetNlmLocksResult instantiates a new GetNlmLocksResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetNlmLocksResult() *GetNlmLocksResult {
	this := GetNlmLocksResult{}
	return &this
}

// NewGetNlmLocksResultWithDefaults instantiates a new GetNlmLocksResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetNlmLocksResultWithDefaults() *GetNlmLocksResult {
	this := GetNlmLocksResult{}
	return &this
}

// GetCookie returns the Cookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetNlmLocksResult) GetCookie() string {
	if o == nil || IsNil(o.Cookie.Get()) {
		var ret string
		return ret
	}
	return *o.Cookie.Get()
}

// GetCookieOk returns a tuple with the Cookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetNlmLocksResult) GetCookieOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cookie.Get(), o.Cookie.IsSet()
}

// HasCookie returns a boolean if a field has been set.
func (o *GetNlmLocksResult) HasCookie() bool {
	if o != nil && o.Cookie.IsSet() {
		return true
	}

	return false
}

// SetCookie gets a reference to the given NullableString and assigns it to the Cookie field.
func (o *GetNlmLocksResult) SetCookie(v string) {
	o.Cookie.Set(&v)
}
// SetCookieNil sets the value for Cookie to be an explicit nil
func (o *GetNlmLocksResult) SetCookieNil() {
	o.Cookie.Set(nil)
}

// UnsetCookie ensures that no value is present for Cookie, not even an explicit nil
func (o *GetNlmLocksResult) UnsetCookie() {
	o.Cookie.Unset()
}

// GetFileNlmLocks returns the FileNlmLocks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetNlmLocksResult) GetFileNlmLocks() []FileNlmLocks {
	if o == nil {
		var ret []FileNlmLocks
		return ret
	}
	return o.FileNlmLocks
}

// GetFileNlmLocksOk returns a tuple with the FileNlmLocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetNlmLocksResult) GetFileNlmLocksOk() ([]FileNlmLocks, bool) {
	if o == nil || IsNil(o.FileNlmLocks) {
		return nil, false
	}
	return o.FileNlmLocks, true
}

// HasFileNlmLocks returns a boolean if a field has been set.
func (o *GetNlmLocksResult) HasFileNlmLocks() bool {
	if o != nil && !IsNil(o.FileNlmLocks) {
		return true
	}

	return false
}

// SetFileNlmLocks gets a reference to the given []FileNlmLocks and assigns it to the FileNlmLocks field.
func (o *GetNlmLocksResult) SetFileNlmLocks(v []FileNlmLocks) {
	o.FileNlmLocks = v
}

func (o GetNlmLocksResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetNlmLocksResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cookie.IsSet() {
		toSerialize["cookie"] = o.Cookie.Get()
	}
	if o.FileNlmLocks != nil {
		toSerialize["fileNlmLocks"] = o.FileNlmLocks
	}
	return toSerialize, nil
}

type NullableGetNlmLocksResult struct {
	value *GetNlmLocksResult
	isSet bool
}

func (v NullableGetNlmLocksResult) Get() *GetNlmLocksResult {
	return v.value
}

func (v *NullableGetNlmLocksResult) Set(val *GetNlmLocksResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetNlmLocksResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetNlmLocksResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetNlmLocksResult(val *GetNlmLocksResult) *NullableGetNlmLocksResult {
	return &NullableGetNlmLocksResult{value: val, isSet: true}
}

func (v NullableGetNlmLocksResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetNlmLocksResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


