/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TargetObjectRun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetObjectRun{}

// TargetObjectRun The tuple denoting the object run to be acted upon. Here, runStartTimeUsecs is an optional param if we want to update multiple runs of the object. In this scenario, runStartTimeUsecs will be empty, and the start and end time will be populated in the UpdateObjectsRunsMetadataParams
type TargetObjectRun struct {
	// Specifies the id of the object
	Id string `json:"id"`
	// Specifies the start time of the run pertaining to the object
	RunStartTimeUsecs NullableInt64 `json:"runStartTimeUsecs,omitempty"`
}

type _TargetObjectRun TargetObjectRun

// NewTargetObjectRun instantiates a new TargetObjectRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetObjectRun(id string) *TargetObjectRun {
	this := TargetObjectRun{}
	this.Id = id
	return &this
}

// NewTargetObjectRunWithDefaults instantiates a new TargetObjectRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetObjectRunWithDefaults() *TargetObjectRun {
	this := TargetObjectRun{}
	return &this
}

// GetId returns the Id field value
func (o *TargetObjectRun) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *TargetObjectRun) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *TargetObjectRun) SetId(v string) {
	o.Id = v
}

// GetRunStartTimeUsecs returns the RunStartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TargetObjectRun) GetRunStartTimeUsecs() int64 {
	if o == nil || IsNil(o.RunStartTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.RunStartTimeUsecs.Get()
}

// GetRunStartTimeUsecsOk returns a tuple with the RunStartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TargetObjectRun) GetRunStartTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunStartTimeUsecs.Get(), o.RunStartTimeUsecs.IsSet()
}

// HasRunStartTimeUsecs returns a boolean if a field has been set.
func (o *TargetObjectRun) HasRunStartTimeUsecs() bool {
	if o != nil && o.RunStartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRunStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RunStartTimeUsecs field.
func (o *TargetObjectRun) SetRunStartTimeUsecs(v int64) {
	o.RunStartTimeUsecs.Set(&v)
}
// SetRunStartTimeUsecsNil sets the value for RunStartTimeUsecs to be an explicit nil
func (o *TargetObjectRun) SetRunStartTimeUsecsNil() {
	o.RunStartTimeUsecs.Set(nil)
}

// UnsetRunStartTimeUsecs ensures that no value is present for RunStartTimeUsecs, not even an explicit nil
func (o *TargetObjectRun) UnsetRunStartTimeUsecs() {
	o.RunStartTimeUsecs.Unset()
}

func (o TargetObjectRun) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetObjectRun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.RunStartTimeUsecs.IsSet() {
		toSerialize["runStartTimeUsecs"] = o.RunStartTimeUsecs.Get()
	}
	return toSerialize, nil
}

func (o *TargetObjectRun) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTargetObjectRun := _TargetObjectRun{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTargetObjectRun)

	if err != nil {
		return err
	}

	*o = TargetObjectRun(varTargetObjectRun)

	return err
}

type NullableTargetObjectRun struct {
	value *TargetObjectRun
	isSet bool
}

func (v NullableTargetObjectRun) Get() *TargetObjectRun {
	return v.value
}

func (v *NullableTargetObjectRun) Set(val *TargetObjectRun) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetObjectRun) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetObjectRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetObjectRun(val *TargetObjectRun) *NullableTargetObjectRun {
	return &NullableTargetObjectRun{value: val, isSet: true}
}

func (v NullableTargetObjectRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetObjectRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


