/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DiffGraphNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiffGraphNode{}

// DiffGraphNode Definition of graph node difference between two snapshots.
type DiffGraphNode struct {
	// Specifies the information about the node from base snapshot.
	BaseGraphNode *GraphNode `json:"baseGraphNode,omitempty"`
	// Specifies the information about the graph node from current snapshot. If the same node is deleted in live view, this could be empty.
	CurrentGraphNode *GraphNode `json:"currentGraphNode,omitempty"`
	// Specifies the diff type for the base node.
	DiffType NullableString `json:"diffType,omitempty"`
}

// NewDiffGraphNode instantiates a new DiffGraphNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiffGraphNode() *DiffGraphNode {
	this := DiffGraphNode{}
	return &this
}

// NewDiffGraphNodeWithDefaults instantiates a new DiffGraphNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiffGraphNodeWithDefaults() *DiffGraphNode {
	this := DiffGraphNode{}
	return &this
}

// GetBaseGraphNode returns the BaseGraphNode field value if set, zero value otherwise.
func (o *DiffGraphNode) GetBaseGraphNode() GraphNode {
	if o == nil || IsNil(o.BaseGraphNode) {
		var ret GraphNode
		return ret
	}
	return *o.BaseGraphNode
}

// GetBaseGraphNodeOk returns a tuple with the BaseGraphNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffGraphNode) GetBaseGraphNodeOk() (*GraphNode, bool) {
	if o == nil || IsNil(o.BaseGraphNode) {
		return nil, false
	}
	return o.BaseGraphNode, true
}

// HasBaseGraphNode returns a boolean if a field has been set.
func (o *DiffGraphNode) HasBaseGraphNode() bool {
	if o != nil && !IsNil(o.BaseGraphNode) {
		return true
	}

	return false
}

// SetBaseGraphNode gets a reference to the given GraphNode and assigns it to the BaseGraphNode field.
func (o *DiffGraphNode) SetBaseGraphNode(v GraphNode) {
	o.BaseGraphNode = &v
}

// GetCurrentGraphNode returns the CurrentGraphNode field value if set, zero value otherwise.
func (o *DiffGraphNode) GetCurrentGraphNode() GraphNode {
	if o == nil || IsNil(o.CurrentGraphNode) {
		var ret GraphNode
		return ret
	}
	return *o.CurrentGraphNode
}

// GetCurrentGraphNodeOk returns a tuple with the CurrentGraphNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffGraphNode) GetCurrentGraphNodeOk() (*GraphNode, bool) {
	if o == nil || IsNil(o.CurrentGraphNode) {
		return nil, false
	}
	return o.CurrentGraphNode, true
}

// HasCurrentGraphNode returns a boolean if a field has been set.
func (o *DiffGraphNode) HasCurrentGraphNode() bool {
	if o != nil && !IsNil(o.CurrentGraphNode) {
		return true
	}

	return false
}

// SetCurrentGraphNode gets a reference to the given GraphNode and assigns it to the CurrentGraphNode field.
func (o *DiffGraphNode) SetCurrentGraphNode(v GraphNode) {
	o.CurrentGraphNode = &v
}

// GetDiffType returns the DiffType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiffGraphNode) GetDiffType() string {
	if o == nil || IsNil(o.DiffType.Get()) {
		var ret string
		return ret
	}
	return *o.DiffType.Get()
}

// GetDiffTypeOk returns a tuple with the DiffType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiffGraphNode) GetDiffTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiffType.Get(), o.DiffType.IsSet()
}

// HasDiffType returns a boolean if a field has been set.
func (o *DiffGraphNode) HasDiffType() bool {
	if o != nil && o.DiffType.IsSet() {
		return true
	}

	return false
}

// SetDiffType gets a reference to the given NullableString and assigns it to the DiffType field.
func (o *DiffGraphNode) SetDiffType(v string) {
	o.DiffType.Set(&v)
}
// SetDiffTypeNil sets the value for DiffType to be an explicit nil
func (o *DiffGraphNode) SetDiffTypeNil() {
	o.DiffType.Set(nil)
}

// UnsetDiffType ensures that no value is present for DiffType, not even an explicit nil
func (o *DiffGraphNode) UnsetDiffType() {
	o.DiffType.Unset()
}

func (o DiffGraphNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiffGraphNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BaseGraphNode) {
		toSerialize["baseGraphNode"] = o.BaseGraphNode
	}
	if !IsNil(o.CurrentGraphNode) {
		toSerialize["currentGraphNode"] = o.CurrentGraphNode
	}
	if o.DiffType.IsSet() {
		toSerialize["diffType"] = o.DiffType.Get()
	}
	return toSerialize, nil
}

type NullableDiffGraphNode struct {
	value *DiffGraphNode
	isSet bool
}

func (v NullableDiffGraphNode) Get() *DiffGraphNode {
	return v.value
}

func (v *NullableDiffGraphNode) Set(val *DiffGraphNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDiffGraphNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDiffGraphNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiffGraphNode(val *DiffGraphNode) *NullableDiffGraphNode {
	return &NullableDiffGraphNode{value: val, isSet: true}
}

func (v NullableDiffGraphNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiffGraphNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


