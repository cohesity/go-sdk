/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MountVmwareVolumeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MountVmwareVolumeParams{}

// MountVmwareVolumeParams Specifies the parameters to mount VMware Volumes.
type MountVmwareVolumeParams struct {
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	VmwareTargetParams NullableMountVmwareVolumeParamsVmwareTargetParams `json:"vmwareTargetParams,omitempty"`
}

type _MountVmwareVolumeParams MountVmwareVolumeParams

// NewMountVmwareVolumeParams instantiates a new MountVmwareVolumeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMountVmwareVolumeParams(targetEnvironment string) *MountVmwareVolumeParams {
	this := MountVmwareVolumeParams{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewMountVmwareVolumeParamsWithDefaults instantiates a new MountVmwareVolumeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMountVmwareVolumeParamsWithDefaults() *MountVmwareVolumeParams {
	this := MountVmwareVolumeParams{}
	return &this
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *MountVmwareVolumeParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *MountVmwareVolumeParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *MountVmwareVolumeParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetVmwareTargetParams returns the VmwareTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MountVmwareVolumeParams) GetVmwareTargetParams() MountVmwareVolumeParamsVmwareTargetParams {
	if o == nil || IsNil(o.VmwareTargetParams.Get()) {
		var ret MountVmwareVolumeParamsVmwareTargetParams
		return ret
	}
	return *o.VmwareTargetParams.Get()
}

// GetVmwareTargetParamsOk returns a tuple with the VmwareTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MountVmwareVolumeParams) GetVmwareTargetParamsOk() (*MountVmwareVolumeParamsVmwareTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmwareTargetParams.Get(), o.VmwareTargetParams.IsSet()
}

// HasVmwareTargetParams returns a boolean if a field has been set.
func (o *MountVmwareVolumeParams) HasVmwareTargetParams() bool {
	if o != nil && o.VmwareTargetParams.IsSet() {
		return true
	}

	return false
}

// SetVmwareTargetParams gets a reference to the given NullableMountVmwareVolumeParamsVmwareTargetParams and assigns it to the VmwareTargetParams field.
func (o *MountVmwareVolumeParams) SetVmwareTargetParams(v MountVmwareVolumeParamsVmwareTargetParams) {
	o.VmwareTargetParams.Set(&v)
}
// SetVmwareTargetParamsNil sets the value for VmwareTargetParams to be an explicit nil
func (o *MountVmwareVolumeParams) SetVmwareTargetParamsNil() {
	o.VmwareTargetParams.Set(nil)
}

// UnsetVmwareTargetParams ensures that no value is present for VmwareTargetParams, not even an explicit nil
func (o *MountVmwareVolumeParams) UnsetVmwareTargetParams() {
	o.VmwareTargetParams.Unset()
}

func (o MountVmwareVolumeParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MountVmwareVolumeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["targetEnvironment"] = o.TargetEnvironment
	if o.VmwareTargetParams.IsSet() {
		toSerialize["vmwareTargetParams"] = o.VmwareTargetParams.Get()
	}
	return toSerialize, nil
}

func (o *MountVmwareVolumeParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetEnvironment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMountVmwareVolumeParams := _MountVmwareVolumeParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMountVmwareVolumeParams)

	if err != nil {
		return err
	}

	*o = MountVmwareVolumeParams(varMountVmwareVolumeParams)

	return err
}

type NullableMountVmwareVolumeParams struct {
	value *MountVmwareVolumeParams
	isSet bool
}

func (v NullableMountVmwareVolumeParams) Get() *MountVmwareVolumeParams {
	return v.value
}

func (v *NullableMountVmwareVolumeParams) Set(val *MountVmwareVolumeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMountVmwareVolumeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMountVmwareVolumeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMountVmwareVolumeParams(val *MountVmwareVolumeParams) *NullableMountVmwareVolumeParams {
	return &NullableMountVmwareVolumeParams{value: val, isSet: true}
}

func (v NullableMountVmwareVolumeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMountVmwareVolumeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


