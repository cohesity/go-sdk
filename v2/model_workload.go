/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Workload type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Workload{}

// Workload Kubernetes Workload Cluster Overall Information
type Workload struct {
	// Kubernetes Workload Cluster Overall Health Status
	HealthStatus *string `json:"HealthStatus,omitempty"`
	// Array of Kubernetes Workload Cluster Nodes
	Nodes []NodeDef `json:"nodes,omitempty"`
	// Kubernetes Workload Cluster Overall State
	State *string `json:"state,omitempty"`
}

// NewWorkload instantiates a new Workload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkload() *Workload {
	this := Workload{}
	return &this
}

// NewWorkloadWithDefaults instantiates a new Workload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadWithDefaults() *Workload {
	this := Workload{}
	return &this
}

// GetHealthStatus returns the HealthStatus field value if set, zero value otherwise.
func (o *Workload) GetHealthStatus() string {
	if o == nil || IsNil(o.HealthStatus) {
		var ret string
		return ret
	}
	return *o.HealthStatus
}

// GetHealthStatusOk returns a tuple with the HealthStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workload) GetHealthStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HealthStatus) {
		return nil, false
	}
	return o.HealthStatus, true
}

// HasHealthStatus returns a boolean if a field has been set.
func (o *Workload) HasHealthStatus() bool {
	if o != nil && !IsNil(o.HealthStatus) {
		return true
	}

	return false
}

// SetHealthStatus gets a reference to the given string and assigns it to the HealthStatus field.
func (o *Workload) SetHealthStatus(v string) {
	o.HealthStatus = &v
}

// GetNodes returns the Nodes field value if set, zero value otherwise.
func (o *Workload) GetNodes() []NodeDef {
	if o == nil || IsNil(o.Nodes) {
		var ret []NodeDef
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workload) GetNodesOk() ([]NodeDef, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *Workload) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []NodeDef and assigns it to the Nodes field.
func (o *Workload) SetNodes(v []NodeDef) {
	o.Nodes = v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Workload) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Workload) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Workload) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *Workload) SetState(v string) {
	o.State = &v
}

func (o Workload) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Workload) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HealthStatus) {
		toSerialize["HealthStatus"] = o.HealthStatus
	}
	if !IsNil(o.Nodes) {
		toSerialize["nodes"] = o.Nodes
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	return toSerialize, nil
}

type NullableWorkload struct {
	value *Workload
	isSet bool
}

func (v NullableWorkload) Get() *Workload {
	return v.value
}

func (v *NullableWorkload) Set(val *Workload) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkload) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkload(val *Workload) *NullableWorkload {
	return &NullableWorkload{value: val, isSet: true}
}

func (v NullableWorkload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


