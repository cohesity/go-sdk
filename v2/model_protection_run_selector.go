/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProtectionRunSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtectionRunSelector{}

// ProtectionRunSelector Selector for protection runs.
type ProtectionRunSelector struct {
	// If this is empty, any run status will be qualified. Else, only the runs matching one of the status will be qualified.
	IncludePublicStatuses []string `json:"includePublicStatuses,omitempty"`
	StartTimeInterval TimeInterval `json:"startTimeInterval"`
}

type _ProtectionRunSelector ProtectionRunSelector

// NewProtectionRunSelector instantiates a new ProtectionRunSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionRunSelector(startTimeInterval TimeInterval) *ProtectionRunSelector {
	this := ProtectionRunSelector{}
	this.StartTimeInterval = startTimeInterval
	return &this
}

// NewProtectionRunSelectorWithDefaults instantiates a new ProtectionRunSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionRunSelectorWithDefaults() *ProtectionRunSelector {
	this := ProtectionRunSelector{}
	return &this
}

// GetIncludePublicStatuses returns the IncludePublicStatuses field value if set, zero value otherwise.
func (o *ProtectionRunSelector) GetIncludePublicStatuses() []string {
	if o == nil || IsNil(o.IncludePublicStatuses) {
		var ret []string
		return ret
	}
	return o.IncludePublicStatuses
}

// GetIncludePublicStatusesOk returns a tuple with the IncludePublicStatuses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionRunSelector) GetIncludePublicStatusesOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludePublicStatuses) {
		return nil, false
	}
	return o.IncludePublicStatuses, true
}

// HasIncludePublicStatuses returns a boolean if a field has been set.
func (o *ProtectionRunSelector) HasIncludePublicStatuses() bool {
	if o != nil && !IsNil(o.IncludePublicStatuses) {
		return true
	}

	return false
}

// SetIncludePublicStatuses gets a reference to the given []string and assigns it to the IncludePublicStatuses field.
func (o *ProtectionRunSelector) SetIncludePublicStatuses(v []string) {
	o.IncludePublicStatuses = v
}

// GetStartTimeInterval returns the StartTimeInterval field value
func (o *ProtectionRunSelector) GetStartTimeInterval() TimeInterval {
	if o == nil {
		var ret TimeInterval
		return ret
	}

	return o.StartTimeInterval
}

// GetStartTimeIntervalOk returns a tuple with the StartTimeInterval field value
// and a boolean to check if the value has been set.
func (o *ProtectionRunSelector) GetStartTimeIntervalOk() (*TimeInterval, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTimeInterval, true
}

// SetStartTimeInterval sets field value
func (o *ProtectionRunSelector) SetStartTimeInterval(v TimeInterval) {
	o.StartTimeInterval = v
}

func (o ProtectionRunSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtectionRunSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IncludePublicStatuses) {
		toSerialize["includePublicStatuses"] = o.IncludePublicStatuses
	}
	toSerialize["startTimeInterval"] = o.StartTimeInterval
	return toSerialize, nil
}

func (o *ProtectionRunSelector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startTimeInterval",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProtectionRunSelector := _ProtectionRunSelector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProtectionRunSelector)

	if err != nil {
		return err
	}

	*o = ProtectionRunSelector(varProtectionRunSelector)

	return err
}

type NullableProtectionRunSelector struct {
	value *ProtectionRunSelector
	isSet bool
}

func (v NullableProtectionRunSelector) Get() *ProtectionRunSelector {
	return v.value
}

func (v *NullableProtectionRunSelector) Set(val *ProtectionRunSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionRunSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionRunSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionRunSelector(val *ProtectionRunSelector) *NullableProtectionRunSelector {
	return &NullableProtectionRunSelector{value: val, isSet: true}
}

func (v NullableProtectionRunSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionRunSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


