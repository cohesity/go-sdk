/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterSWUpdateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterSWUpdateParams{}

// ClusterSWUpdateParams Specifies the parameters to update the software on the cluster.
type ClusterSWUpdateParams struct {
	AssessSoftwareUpdateParams *AssessSoftwareUpdateParams `json:"assessSoftwareUpdateParams,omitempty"`
	// The operation type. * `DownloadUpgradePackage` - Operation to download upgrade package. * `DownloadPatchPackage` - Operation to download patch package. * `DownloadUpgradeAndPatchPackages` - Operation to download upgrade    and patch packages. * `DownloadAndUpgrade` - Operation to download package and    and then upgrade the cluster. * `DownloadAndApplyPatch` - Operation to download package and    and then apply the patch. * `DownloadAndUpgradeWithPatch` - Operation to download upgrade   and patch packages, and then, upgrade the cluster and immediately   patch it * `Upgrade` - Operation to upgrade the software on the cluster. * `ApplyPatch` - Operation to apply the patch. * `RevertPatch` - Operation to revert the patch. * `UpgradeAndPatch` - Operation to upgrade the software on the   cluster and apply a patch. * `AssessSoftwareUpdate` - Operation to perform checks to assess   the state of cluster pre/post software update (upgrade/patch). * `AbortApplyPatch` - Operation to abort the patch. * `AbortUpgrade` - Operation to abort the upgrade. 
	OperationType string `json:"operationType"`
	PatchParams *PatchParams `json:"patchParams,omitempty"`
	UpgradeParams *UpgradeParams `json:"upgradeParams,omitempty"`
}

type _ClusterSWUpdateParams ClusterSWUpdateParams

// NewClusterSWUpdateParams instantiates a new ClusterSWUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterSWUpdateParams(operationType string) *ClusterSWUpdateParams {
	this := ClusterSWUpdateParams{}
	this.OperationType = operationType
	return &this
}

// NewClusterSWUpdateParamsWithDefaults instantiates a new ClusterSWUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterSWUpdateParamsWithDefaults() *ClusterSWUpdateParams {
	this := ClusterSWUpdateParams{}
	return &this
}

// GetAssessSoftwareUpdateParams returns the AssessSoftwareUpdateParams field value if set, zero value otherwise.
func (o *ClusterSWUpdateParams) GetAssessSoftwareUpdateParams() AssessSoftwareUpdateParams {
	if o == nil || IsNil(o.AssessSoftwareUpdateParams) {
		var ret AssessSoftwareUpdateParams
		return ret
	}
	return *o.AssessSoftwareUpdateParams
}

// GetAssessSoftwareUpdateParamsOk returns a tuple with the AssessSoftwareUpdateParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSWUpdateParams) GetAssessSoftwareUpdateParamsOk() (*AssessSoftwareUpdateParams, bool) {
	if o == nil || IsNil(o.AssessSoftwareUpdateParams) {
		return nil, false
	}
	return o.AssessSoftwareUpdateParams, true
}

// HasAssessSoftwareUpdateParams returns a boolean if a field has been set.
func (o *ClusterSWUpdateParams) HasAssessSoftwareUpdateParams() bool {
	if o != nil && !IsNil(o.AssessSoftwareUpdateParams) {
		return true
	}

	return false
}

// SetAssessSoftwareUpdateParams gets a reference to the given AssessSoftwareUpdateParams and assigns it to the AssessSoftwareUpdateParams field.
func (o *ClusterSWUpdateParams) SetAssessSoftwareUpdateParams(v AssessSoftwareUpdateParams) {
	o.AssessSoftwareUpdateParams = &v
}

// GetOperationType returns the OperationType field value
func (o *ClusterSWUpdateParams) GetOperationType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value
// and a boolean to check if the value has been set.
func (o *ClusterSWUpdateParams) GetOperationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OperationType, true
}

// SetOperationType sets field value
func (o *ClusterSWUpdateParams) SetOperationType(v string) {
	o.OperationType = v
}

// GetPatchParams returns the PatchParams field value if set, zero value otherwise.
func (o *ClusterSWUpdateParams) GetPatchParams() PatchParams {
	if o == nil || IsNil(o.PatchParams) {
		var ret PatchParams
		return ret
	}
	return *o.PatchParams
}

// GetPatchParamsOk returns a tuple with the PatchParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSWUpdateParams) GetPatchParamsOk() (*PatchParams, bool) {
	if o == nil || IsNil(o.PatchParams) {
		return nil, false
	}
	return o.PatchParams, true
}

// HasPatchParams returns a boolean if a field has been set.
func (o *ClusterSWUpdateParams) HasPatchParams() bool {
	if o != nil && !IsNil(o.PatchParams) {
		return true
	}

	return false
}

// SetPatchParams gets a reference to the given PatchParams and assigns it to the PatchParams field.
func (o *ClusterSWUpdateParams) SetPatchParams(v PatchParams) {
	o.PatchParams = &v
}

// GetUpgradeParams returns the UpgradeParams field value if set, zero value otherwise.
func (o *ClusterSWUpdateParams) GetUpgradeParams() UpgradeParams {
	if o == nil || IsNil(o.UpgradeParams) {
		var ret UpgradeParams
		return ret
	}
	return *o.UpgradeParams
}

// GetUpgradeParamsOk returns a tuple with the UpgradeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSWUpdateParams) GetUpgradeParamsOk() (*UpgradeParams, bool) {
	if o == nil || IsNil(o.UpgradeParams) {
		return nil, false
	}
	return o.UpgradeParams, true
}

// HasUpgradeParams returns a boolean if a field has been set.
func (o *ClusterSWUpdateParams) HasUpgradeParams() bool {
	if o != nil && !IsNil(o.UpgradeParams) {
		return true
	}

	return false
}

// SetUpgradeParams gets a reference to the given UpgradeParams and assigns it to the UpgradeParams field.
func (o *ClusterSWUpdateParams) SetUpgradeParams(v UpgradeParams) {
	o.UpgradeParams = &v
}

func (o ClusterSWUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterSWUpdateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AssessSoftwareUpdateParams) {
		toSerialize["assessSoftwareUpdateParams"] = o.AssessSoftwareUpdateParams
	}
	toSerialize["operationType"] = o.OperationType
	if !IsNil(o.PatchParams) {
		toSerialize["patchParams"] = o.PatchParams
	}
	if !IsNil(o.UpgradeParams) {
		toSerialize["upgradeParams"] = o.UpgradeParams
	}
	return toSerialize, nil
}

func (o *ClusterSWUpdateParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"operationType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterSWUpdateParams := _ClusterSWUpdateParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterSWUpdateParams)

	if err != nil {
		return err
	}

	*o = ClusterSWUpdateParams(varClusterSWUpdateParams)

	return err
}

type NullableClusterSWUpdateParams struct {
	value *ClusterSWUpdateParams
	isSet bool
}

func (v NullableClusterSWUpdateParams) Get() *ClusterSWUpdateParams {
	return v.value
}

func (v *NullableClusterSWUpdateParams) Set(val *ClusterSWUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterSWUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterSWUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterSWUpdateParams(val *ClusterSWUpdateParams) *NullableClusterSWUpdateParams {
	return &NullableClusterSWUpdateParams{value: val, isSet: true}
}

func (v NullableClusterSWUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterSWUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


