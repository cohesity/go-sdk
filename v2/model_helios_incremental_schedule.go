/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeliosIncrementalSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosIncrementalSchedule{}

// HeliosIncrementalSchedule Specifies settings that defines how frequent backup will be performed for a Protection Group.
type HeliosIncrementalSchedule struct {
	DaySchedule *HeliosDaySchedule `json:"daySchedule,omitempty"`
	HourSchedule *HeliosHourSchedule `json:"hourSchedule,omitempty"`
	MinuteSchedule *HeliosMinuteSchedule `json:"minuteSchedule,omitempty"`
	MonthSchedule *HeliosMonthSchedule `json:"monthSchedule,omitempty"`
	// Specifies how often to start new runs of a Protection Group. <br>'Minutes' specifies that Protection Group run starts periodically after certain number of minutes specified in 'frequency' field. <br>'Hours' specifies that Protection Group run starts periodically after certain number of hours specified in 'frequency' field. <br>'Days' specifies that Protection Group run starts periodically after certain number of days specified in 'frequency' field. <br>'Week' specifies that new Protection Group runs start weekly on certain days specified using 'dayOfWeek' field. <br>'Month' specifies that new Protection Group runs start monthly on certain day of specific week. This schedule needs 'weekOfMonth' and 'dayOfWeek' fields to be set. <br> Example: To run the Protection Group on Second Sunday of Every Month, following schedule need to be set: <br> unit: 'Month' <br> dayOfWeek: 'Sunday' <br> weekOfMonth: 'Second'
	Unit NullableString `json:"unit"`
	WeekSchedule *HeliosWeekSchedule `json:"weekSchedule,omitempty"`
}

type _HeliosIncrementalSchedule HeliosIncrementalSchedule

// NewHeliosIncrementalSchedule instantiates a new HeliosIncrementalSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosIncrementalSchedule(unit NullableString) *HeliosIncrementalSchedule {
	this := HeliosIncrementalSchedule{}
	this.Unit = unit
	return &this
}

// NewHeliosIncrementalScheduleWithDefaults instantiates a new HeliosIncrementalSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosIncrementalScheduleWithDefaults() *HeliosIncrementalSchedule {
	this := HeliosIncrementalSchedule{}
	return &this
}

// GetDaySchedule returns the DaySchedule field value if set, zero value otherwise.
func (o *HeliosIncrementalSchedule) GetDaySchedule() HeliosDaySchedule {
	if o == nil || IsNil(o.DaySchedule) {
		var ret HeliosDaySchedule
		return ret
	}
	return *o.DaySchedule
}

// GetDayScheduleOk returns a tuple with the DaySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosIncrementalSchedule) GetDayScheduleOk() (*HeliosDaySchedule, bool) {
	if o == nil || IsNil(o.DaySchedule) {
		return nil, false
	}
	return o.DaySchedule, true
}

// HasDaySchedule returns a boolean if a field has been set.
func (o *HeliosIncrementalSchedule) HasDaySchedule() bool {
	if o != nil && !IsNil(o.DaySchedule) {
		return true
	}

	return false
}

// SetDaySchedule gets a reference to the given HeliosDaySchedule and assigns it to the DaySchedule field.
func (o *HeliosIncrementalSchedule) SetDaySchedule(v HeliosDaySchedule) {
	o.DaySchedule = &v
}

// GetHourSchedule returns the HourSchedule field value if set, zero value otherwise.
func (o *HeliosIncrementalSchedule) GetHourSchedule() HeliosHourSchedule {
	if o == nil || IsNil(o.HourSchedule) {
		var ret HeliosHourSchedule
		return ret
	}
	return *o.HourSchedule
}

// GetHourScheduleOk returns a tuple with the HourSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosIncrementalSchedule) GetHourScheduleOk() (*HeliosHourSchedule, bool) {
	if o == nil || IsNil(o.HourSchedule) {
		return nil, false
	}
	return o.HourSchedule, true
}

// HasHourSchedule returns a boolean if a field has been set.
func (o *HeliosIncrementalSchedule) HasHourSchedule() bool {
	if o != nil && !IsNil(o.HourSchedule) {
		return true
	}

	return false
}

// SetHourSchedule gets a reference to the given HeliosHourSchedule and assigns it to the HourSchedule field.
func (o *HeliosIncrementalSchedule) SetHourSchedule(v HeliosHourSchedule) {
	o.HourSchedule = &v
}

// GetMinuteSchedule returns the MinuteSchedule field value if set, zero value otherwise.
func (o *HeliosIncrementalSchedule) GetMinuteSchedule() HeliosMinuteSchedule {
	if o == nil || IsNil(o.MinuteSchedule) {
		var ret HeliosMinuteSchedule
		return ret
	}
	return *o.MinuteSchedule
}

// GetMinuteScheduleOk returns a tuple with the MinuteSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosIncrementalSchedule) GetMinuteScheduleOk() (*HeliosMinuteSchedule, bool) {
	if o == nil || IsNil(o.MinuteSchedule) {
		return nil, false
	}
	return o.MinuteSchedule, true
}

// HasMinuteSchedule returns a boolean if a field has been set.
func (o *HeliosIncrementalSchedule) HasMinuteSchedule() bool {
	if o != nil && !IsNil(o.MinuteSchedule) {
		return true
	}

	return false
}

// SetMinuteSchedule gets a reference to the given HeliosMinuteSchedule and assigns it to the MinuteSchedule field.
func (o *HeliosIncrementalSchedule) SetMinuteSchedule(v HeliosMinuteSchedule) {
	o.MinuteSchedule = &v
}

// GetMonthSchedule returns the MonthSchedule field value if set, zero value otherwise.
func (o *HeliosIncrementalSchedule) GetMonthSchedule() HeliosMonthSchedule {
	if o == nil || IsNil(o.MonthSchedule) {
		var ret HeliosMonthSchedule
		return ret
	}
	return *o.MonthSchedule
}

// GetMonthScheduleOk returns a tuple with the MonthSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosIncrementalSchedule) GetMonthScheduleOk() (*HeliosMonthSchedule, bool) {
	if o == nil || IsNil(o.MonthSchedule) {
		return nil, false
	}
	return o.MonthSchedule, true
}

// HasMonthSchedule returns a boolean if a field has been set.
func (o *HeliosIncrementalSchedule) HasMonthSchedule() bool {
	if o != nil && !IsNil(o.MonthSchedule) {
		return true
	}

	return false
}

// SetMonthSchedule gets a reference to the given HeliosMonthSchedule and assigns it to the MonthSchedule field.
func (o *HeliosIncrementalSchedule) SetMonthSchedule(v HeliosMonthSchedule) {
	o.MonthSchedule = &v
}

// GetUnit returns the Unit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HeliosIncrementalSchedule) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}

	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosIncrementalSchedule) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// SetUnit sets field value
func (o *HeliosIncrementalSchedule) SetUnit(v string) {
	o.Unit.Set(&v)
}

// GetWeekSchedule returns the WeekSchedule field value if set, zero value otherwise.
func (o *HeliosIncrementalSchedule) GetWeekSchedule() HeliosWeekSchedule {
	if o == nil || IsNil(o.WeekSchedule) {
		var ret HeliosWeekSchedule
		return ret
	}
	return *o.WeekSchedule
}

// GetWeekScheduleOk returns a tuple with the WeekSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosIncrementalSchedule) GetWeekScheduleOk() (*HeliosWeekSchedule, bool) {
	if o == nil || IsNil(o.WeekSchedule) {
		return nil, false
	}
	return o.WeekSchedule, true
}

// HasWeekSchedule returns a boolean if a field has been set.
func (o *HeliosIncrementalSchedule) HasWeekSchedule() bool {
	if o != nil && !IsNil(o.WeekSchedule) {
		return true
	}

	return false
}

// SetWeekSchedule gets a reference to the given HeliosWeekSchedule and assigns it to the WeekSchedule field.
func (o *HeliosIncrementalSchedule) SetWeekSchedule(v HeliosWeekSchedule) {
	o.WeekSchedule = &v
}

func (o HeliosIncrementalSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosIncrementalSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DaySchedule) {
		toSerialize["daySchedule"] = o.DaySchedule
	}
	if !IsNil(o.HourSchedule) {
		toSerialize["hourSchedule"] = o.HourSchedule
	}
	if !IsNil(o.MinuteSchedule) {
		toSerialize["minuteSchedule"] = o.MinuteSchedule
	}
	if !IsNil(o.MonthSchedule) {
		toSerialize["monthSchedule"] = o.MonthSchedule
	}
	toSerialize["unit"] = o.Unit.Get()
	if !IsNil(o.WeekSchedule) {
		toSerialize["weekSchedule"] = o.WeekSchedule
	}
	return toSerialize, nil
}

func (o *HeliosIncrementalSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeliosIncrementalSchedule := _HeliosIncrementalSchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeliosIncrementalSchedule)

	if err != nil {
		return err
	}

	*o = HeliosIncrementalSchedule(varHeliosIncrementalSchedule)

	return err
}

type NullableHeliosIncrementalSchedule struct {
	value *HeliosIncrementalSchedule
	isSet bool
}

func (v NullableHeliosIncrementalSchedule) Get() *HeliosIncrementalSchedule {
	return v.value
}

func (v *NullableHeliosIncrementalSchedule) Set(val *HeliosIncrementalSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosIncrementalSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosIncrementalSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosIncrementalSchedule(val *HeliosIncrementalSchedule) *NullableHeliosIncrementalSchedule {
	return &NullableHeliosIncrementalSchedule{value: val, isSet: true}
}

func (v NullableHeliosIncrementalSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosIncrementalSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


