/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CloudBackupScriptParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloudBackupScriptParams{}

// CloudBackupScriptParams Specifies params of a pre/post scripts to be executed before and after a backup run.
type CloudBackupScriptParams struct {
	PostBackupScript *CommonPrePostCloudScriptParams `json:"postBackupScript,omitempty"`
	PostSnapshotScript *CommonPrePostCloudScriptParams `json:"postSnapshotScript,omitempty"`
	PreBackupScript *CommonPrePostCloudScriptParams `json:"preBackupScript,omitempty"`
}

// NewCloudBackupScriptParams instantiates a new CloudBackupScriptParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloudBackupScriptParams() *CloudBackupScriptParams {
	this := CloudBackupScriptParams{}
	return &this
}

// NewCloudBackupScriptParamsWithDefaults instantiates a new CloudBackupScriptParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloudBackupScriptParamsWithDefaults() *CloudBackupScriptParams {
	this := CloudBackupScriptParams{}
	return &this
}

// GetPostBackupScript returns the PostBackupScript field value if set, zero value otherwise.
func (o *CloudBackupScriptParams) GetPostBackupScript() CommonPrePostCloudScriptParams {
	if o == nil || IsNil(o.PostBackupScript) {
		var ret CommonPrePostCloudScriptParams
		return ret
	}
	return *o.PostBackupScript
}

// GetPostBackupScriptOk returns a tuple with the PostBackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudBackupScriptParams) GetPostBackupScriptOk() (*CommonPrePostCloudScriptParams, bool) {
	if o == nil || IsNil(o.PostBackupScript) {
		return nil, false
	}
	return o.PostBackupScript, true
}

// HasPostBackupScript returns a boolean if a field has been set.
func (o *CloudBackupScriptParams) HasPostBackupScript() bool {
	if o != nil && !IsNil(o.PostBackupScript) {
		return true
	}

	return false
}

// SetPostBackupScript gets a reference to the given CommonPrePostCloudScriptParams and assigns it to the PostBackupScript field.
func (o *CloudBackupScriptParams) SetPostBackupScript(v CommonPrePostCloudScriptParams) {
	o.PostBackupScript = &v
}

// GetPostSnapshotScript returns the PostSnapshotScript field value if set, zero value otherwise.
func (o *CloudBackupScriptParams) GetPostSnapshotScript() CommonPrePostCloudScriptParams {
	if o == nil || IsNil(o.PostSnapshotScript) {
		var ret CommonPrePostCloudScriptParams
		return ret
	}
	return *o.PostSnapshotScript
}

// GetPostSnapshotScriptOk returns a tuple with the PostSnapshotScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudBackupScriptParams) GetPostSnapshotScriptOk() (*CommonPrePostCloudScriptParams, bool) {
	if o == nil || IsNil(o.PostSnapshotScript) {
		return nil, false
	}
	return o.PostSnapshotScript, true
}

// HasPostSnapshotScript returns a boolean if a field has been set.
func (o *CloudBackupScriptParams) HasPostSnapshotScript() bool {
	if o != nil && !IsNil(o.PostSnapshotScript) {
		return true
	}

	return false
}

// SetPostSnapshotScript gets a reference to the given CommonPrePostCloudScriptParams and assigns it to the PostSnapshotScript field.
func (o *CloudBackupScriptParams) SetPostSnapshotScript(v CommonPrePostCloudScriptParams) {
	o.PostSnapshotScript = &v
}

// GetPreBackupScript returns the PreBackupScript field value if set, zero value otherwise.
func (o *CloudBackupScriptParams) GetPreBackupScript() CommonPrePostCloudScriptParams {
	if o == nil || IsNil(o.PreBackupScript) {
		var ret CommonPrePostCloudScriptParams
		return ret
	}
	return *o.PreBackupScript
}

// GetPreBackupScriptOk returns a tuple with the PreBackupScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloudBackupScriptParams) GetPreBackupScriptOk() (*CommonPrePostCloudScriptParams, bool) {
	if o == nil || IsNil(o.PreBackupScript) {
		return nil, false
	}
	return o.PreBackupScript, true
}

// HasPreBackupScript returns a boolean if a field has been set.
func (o *CloudBackupScriptParams) HasPreBackupScript() bool {
	if o != nil && !IsNil(o.PreBackupScript) {
		return true
	}

	return false
}

// SetPreBackupScript gets a reference to the given CommonPrePostCloudScriptParams and assigns it to the PreBackupScript field.
func (o *CloudBackupScriptParams) SetPreBackupScript(v CommonPrePostCloudScriptParams) {
	o.PreBackupScript = &v
}

func (o CloudBackupScriptParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloudBackupScriptParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PostBackupScript) {
		toSerialize["postBackupScript"] = o.PostBackupScript
	}
	if !IsNil(o.PostSnapshotScript) {
		toSerialize["postSnapshotScript"] = o.PostSnapshotScript
	}
	if !IsNil(o.PreBackupScript) {
		toSerialize["preBackupScript"] = o.PreBackupScript
	}
	return toSerialize, nil
}

type NullableCloudBackupScriptParams struct {
	value *CloudBackupScriptParams
	isSet bool
}

func (v NullableCloudBackupScriptParams) Get() *CloudBackupScriptParams {
	return v.value
}

func (v *NullableCloudBackupScriptParams) Set(val *CloudBackupScriptParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCloudBackupScriptParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCloudBackupScriptParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloudBackupScriptParams(val *CloudBackupScriptParams) *NullableCloudBackupScriptParams {
	return &NullableCloudBackupScriptParams{value: val, isSet: true}
}

func (v NullableCloudBackupScriptParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloudBackupScriptParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


