/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RadioGroupFormFieldParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RadioGroupFormFieldParams{}

// RadioGroupFormFieldParams Parameters to specify a radio group form field.
type RadioGroupFormFieldParams struct {
	// Default selection of the radio button.
	DefaultValue NullableString `json:"defaultValue,omitempty"`
	// List of radio buttons part of the radio group.
	RadioButtons []RadioButtonFormFieldParams `json:"radioButtons,omitempty"`
	// Specifies whether the field is mandatory.
	Required NullableBool `json:"required,omitempty"`
}

// NewRadioGroupFormFieldParams instantiates a new RadioGroupFormFieldParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRadioGroupFormFieldParams() *RadioGroupFormFieldParams {
	this := RadioGroupFormFieldParams{}
	return &this
}

// NewRadioGroupFormFieldParamsWithDefaults instantiates a new RadioGroupFormFieldParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRadioGroupFormFieldParamsWithDefaults() *RadioGroupFormFieldParams {
	this := RadioGroupFormFieldParams{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RadioGroupFormFieldParams) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RadioGroupFormFieldParams) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *RadioGroupFormFieldParams) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *RadioGroupFormFieldParams) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}
// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *RadioGroupFormFieldParams) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *RadioGroupFormFieldParams) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetRadioButtons returns the RadioButtons field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RadioGroupFormFieldParams) GetRadioButtons() []RadioButtonFormFieldParams {
	if o == nil {
		var ret []RadioButtonFormFieldParams
		return ret
	}
	return o.RadioButtons
}

// GetRadioButtonsOk returns a tuple with the RadioButtons field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RadioGroupFormFieldParams) GetRadioButtonsOk() ([]RadioButtonFormFieldParams, bool) {
	if o == nil || IsNil(o.RadioButtons) {
		return nil, false
	}
	return o.RadioButtons, true
}

// HasRadioButtons returns a boolean if a field has been set.
func (o *RadioGroupFormFieldParams) HasRadioButtons() bool {
	if o != nil && !IsNil(o.RadioButtons) {
		return true
	}

	return false
}

// SetRadioButtons gets a reference to the given []RadioButtonFormFieldParams and assigns it to the RadioButtons field.
func (o *RadioGroupFormFieldParams) SetRadioButtons(v []RadioButtonFormFieldParams) {
	o.RadioButtons = v
}

// GetRequired returns the Required field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RadioGroupFormFieldParams) GetRequired() bool {
	if o == nil || IsNil(o.Required.Get()) {
		var ret bool
		return ret
	}
	return *o.Required.Get()
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RadioGroupFormFieldParams) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Required.Get(), o.Required.IsSet()
}

// HasRequired returns a boolean if a field has been set.
func (o *RadioGroupFormFieldParams) HasRequired() bool {
	if o != nil && o.Required.IsSet() {
		return true
	}

	return false
}

// SetRequired gets a reference to the given NullableBool and assigns it to the Required field.
func (o *RadioGroupFormFieldParams) SetRequired(v bool) {
	o.Required.Set(&v)
}
// SetRequiredNil sets the value for Required to be an explicit nil
func (o *RadioGroupFormFieldParams) SetRequiredNil() {
	o.Required.Set(nil)
}

// UnsetRequired ensures that no value is present for Required, not even an explicit nil
func (o *RadioGroupFormFieldParams) UnsetRequired() {
	o.Required.Unset()
}

func (o RadioGroupFormFieldParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RadioGroupFormFieldParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if o.RadioButtons != nil {
		toSerialize["radioButtons"] = o.RadioButtons
	}
	if o.Required.IsSet() {
		toSerialize["required"] = o.Required.Get()
	}
	return toSerialize, nil
}

type NullableRadioGroupFormFieldParams struct {
	value *RadioGroupFormFieldParams
	isSet bool
}

func (v NullableRadioGroupFormFieldParams) Get() *RadioGroupFormFieldParams {
	return v.value
}

func (v *NullableRadioGroupFormFieldParams) Set(val *RadioGroupFormFieldParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRadioGroupFormFieldParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRadioGroupFormFieldParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRadioGroupFormFieldParams(val *RadioGroupFormFieldParams) *NullableRadioGroupFormFieldParams {
	return &NullableRadioGroupFormFieldParams{value: val, isSet: true}
}

func (v NullableRadioGroupFormFieldParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRadioGroupFormFieldParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


