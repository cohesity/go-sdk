/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpgradeCheckRunTestsResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeCheckRunTestsResult{}

// UpgradeCheckRunTestsResult Specifies the result for upgrade checks run tests request.
type UpgradeCheckRunTestsResult struct {
	// Specifies test run instance allocated for upgrade checks
	TestRunInstanceId *int64 `json:"testRunInstanceId,omitempty"`
}

// NewUpgradeCheckRunTestsResult instantiates a new UpgradeCheckRunTestsResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeCheckRunTestsResult() *UpgradeCheckRunTestsResult {
	this := UpgradeCheckRunTestsResult{}
	return &this
}

// NewUpgradeCheckRunTestsResultWithDefaults instantiates a new UpgradeCheckRunTestsResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeCheckRunTestsResultWithDefaults() *UpgradeCheckRunTestsResult {
	this := UpgradeCheckRunTestsResult{}
	return &this
}

// GetTestRunInstanceId returns the TestRunInstanceId field value if set, zero value otherwise.
func (o *UpgradeCheckRunTestsResult) GetTestRunInstanceId() int64 {
	if o == nil || IsNil(o.TestRunInstanceId) {
		var ret int64
		return ret
	}
	return *o.TestRunInstanceId
}

// GetTestRunInstanceIdOk returns a tuple with the TestRunInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeCheckRunTestsResult) GetTestRunInstanceIdOk() (*int64, bool) {
	if o == nil || IsNil(o.TestRunInstanceId) {
		return nil, false
	}
	return o.TestRunInstanceId, true
}

// HasTestRunInstanceId returns a boolean if a field has been set.
func (o *UpgradeCheckRunTestsResult) HasTestRunInstanceId() bool {
	if o != nil && !IsNil(o.TestRunInstanceId) {
		return true
	}

	return false
}

// SetTestRunInstanceId gets a reference to the given int64 and assigns it to the TestRunInstanceId field.
func (o *UpgradeCheckRunTestsResult) SetTestRunInstanceId(v int64) {
	o.TestRunInstanceId = &v
}

func (o UpgradeCheckRunTestsResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeCheckRunTestsResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TestRunInstanceId) {
		toSerialize["testRunInstanceId"] = o.TestRunInstanceId
	}
	return toSerialize, nil
}

type NullableUpgradeCheckRunTestsResult struct {
	value *UpgradeCheckRunTestsResult
	isSet bool
}

func (v NullableUpgradeCheckRunTestsResult) Get() *UpgradeCheckRunTestsResult {
	return v.value
}

func (v *NullableUpgradeCheckRunTestsResult) Set(val *UpgradeCheckRunTestsResult) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeCheckRunTestsResult) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeCheckRunTestsResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeCheckRunTestsResult(val *UpgradeCheckRunTestsResult) *NullableUpgradeCheckRunTestsResult {
	return &NullableUpgradeCheckRunTestsResult{value: val, isSet: true}
}

func (v NullableUpgradeCheckRunTestsResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeCheckRunTestsResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


