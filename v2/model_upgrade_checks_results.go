/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpgradeChecksResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeChecksResults{}

// UpgradeChecksResults Specifies upgrade checks results from cluster.
type UpgradeChecksResults struct {
	// Specifies unix epoch finish time of checks(in seconds).
	FinishTimeSecs NullableInt64 `json:"finishTimeSecs,omitempty"`
	// The healthcheck result for node
	NodeResults []UpgradeCheckNodeResult `json:"nodeResults,omitempty"`
	// type of checks(preupgrade/postupgrade)
	RequestType *string `json:"requestType,omitempty"`
	// final result (running/pass/fail) of run
	ResultStatus *string `json:"resultStatus,omitempty"`
	// Specifies unix epoch start time of checks(in seconds).
	StartTimeSecs NullableInt64 `json:"startTimeSecs,omitempty"`
	// Specifies test run instance of upgrade checks
	TestRunInstanceId *string `json:"testRunInstanceId,omitempty"`
}

// NewUpgradeChecksResults instantiates a new UpgradeChecksResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeChecksResults() *UpgradeChecksResults {
	this := UpgradeChecksResults{}
	return &this
}

// NewUpgradeChecksResultsWithDefaults instantiates a new UpgradeChecksResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeChecksResultsWithDefaults() *UpgradeChecksResults {
	this := UpgradeChecksResults{}
	return &this
}

// GetFinishTimeSecs returns the FinishTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeChecksResults) GetFinishTimeSecs() int64 {
	if o == nil || IsNil(o.FinishTimeSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.FinishTimeSecs.Get()
}

// GetFinishTimeSecsOk returns a tuple with the FinishTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeChecksResults) GetFinishTimeSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FinishTimeSecs.Get(), o.FinishTimeSecs.IsSet()
}

// HasFinishTimeSecs returns a boolean if a field has been set.
func (o *UpgradeChecksResults) HasFinishTimeSecs() bool {
	if o != nil && o.FinishTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetFinishTimeSecs gets a reference to the given NullableInt64 and assigns it to the FinishTimeSecs field.
func (o *UpgradeChecksResults) SetFinishTimeSecs(v int64) {
	o.FinishTimeSecs.Set(&v)
}
// SetFinishTimeSecsNil sets the value for FinishTimeSecs to be an explicit nil
func (o *UpgradeChecksResults) SetFinishTimeSecsNil() {
	o.FinishTimeSecs.Set(nil)
}

// UnsetFinishTimeSecs ensures that no value is present for FinishTimeSecs, not even an explicit nil
func (o *UpgradeChecksResults) UnsetFinishTimeSecs() {
	o.FinishTimeSecs.Unset()
}

// GetNodeResults returns the NodeResults field value if set, zero value otherwise.
func (o *UpgradeChecksResults) GetNodeResults() []UpgradeCheckNodeResult {
	if o == nil || IsNil(o.NodeResults) {
		var ret []UpgradeCheckNodeResult
		return ret
	}
	return o.NodeResults
}

// GetNodeResultsOk returns a tuple with the NodeResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeChecksResults) GetNodeResultsOk() ([]UpgradeCheckNodeResult, bool) {
	if o == nil || IsNil(o.NodeResults) {
		return nil, false
	}
	return o.NodeResults, true
}

// HasNodeResults returns a boolean if a field has been set.
func (o *UpgradeChecksResults) HasNodeResults() bool {
	if o != nil && !IsNil(o.NodeResults) {
		return true
	}

	return false
}

// SetNodeResults gets a reference to the given []UpgradeCheckNodeResult and assigns it to the NodeResults field.
func (o *UpgradeChecksResults) SetNodeResults(v []UpgradeCheckNodeResult) {
	o.NodeResults = v
}

// GetRequestType returns the RequestType field value if set, zero value otherwise.
func (o *UpgradeChecksResults) GetRequestType() string {
	if o == nil || IsNil(o.RequestType) {
		var ret string
		return ret
	}
	return *o.RequestType
}

// GetRequestTypeOk returns a tuple with the RequestType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeChecksResults) GetRequestTypeOk() (*string, bool) {
	if o == nil || IsNil(o.RequestType) {
		return nil, false
	}
	return o.RequestType, true
}

// HasRequestType returns a boolean if a field has been set.
func (o *UpgradeChecksResults) HasRequestType() bool {
	if o != nil && !IsNil(o.RequestType) {
		return true
	}

	return false
}

// SetRequestType gets a reference to the given string and assigns it to the RequestType field.
func (o *UpgradeChecksResults) SetRequestType(v string) {
	o.RequestType = &v
}

// GetResultStatus returns the ResultStatus field value if set, zero value otherwise.
func (o *UpgradeChecksResults) GetResultStatus() string {
	if o == nil || IsNil(o.ResultStatus) {
		var ret string
		return ret
	}
	return *o.ResultStatus
}

// GetResultStatusOk returns a tuple with the ResultStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeChecksResults) GetResultStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ResultStatus) {
		return nil, false
	}
	return o.ResultStatus, true
}

// HasResultStatus returns a boolean if a field has been set.
func (o *UpgradeChecksResults) HasResultStatus() bool {
	if o != nil && !IsNil(o.ResultStatus) {
		return true
	}

	return false
}

// SetResultStatus gets a reference to the given string and assigns it to the ResultStatus field.
func (o *UpgradeChecksResults) SetResultStatus(v string) {
	o.ResultStatus = &v
}

// GetStartTimeSecs returns the StartTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpgradeChecksResults) GetStartTimeSecs() int64 {
	if o == nil || IsNil(o.StartTimeSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.StartTimeSecs.Get()
}

// GetStartTimeSecsOk returns a tuple with the StartTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpgradeChecksResults) GetStartTimeSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTimeSecs.Get(), o.StartTimeSecs.IsSet()
}

// HasStartTimeSecs returns a boolean if a field has been set.
func (o *UpgradeChecksResults) HasStartTimeSecs() bool {
	if o != nil && o.StartTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeSecs gets a reference to the given NullableInt64 and assigns it to the StartTimeSecs field.
func (o *UpgradeChecksResults) SetStartTimeSecs(v int64) {
	o.StartTimeSecs.Set(&v)
}
// SetStartTimeSecsNil sets the value for StartTimeSecs to be an explicit nil
func (o *UpgradeChecksResults) SetStartTimeSecsNil() {
	o.StartTimeSecs.Set(nil)
}

// UnsetStartTimeSecs ensures that no value is present for StartTimeSecs, not even an explicit nil
func (o *UpgradeChecksResults) UnsetStartTimeSecs() {
	o.StartTimeSecs.Unset()
}

// GetTestRunInstanceId returns the TestRunInstanceId field value if set, zero value otherwise.
func (o *UpgradeChecksResults) GetTestRunInstanceId() string {
	if o == nil || IsNil(o.TestRunInstanceId) {
		var ret string
		return ret
	}
	return *o.TestRunInstanceId
}

// GetTestRunInstanceIdOk returns a tuple with the TestRunInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeChecksResults) GetTestRunInstanceIdOk() (*string, bool) {
	if o == nil || IsNil(o.TestRunInstanceId) {
		return nil, false
	}
	return o.TestRunInstanceId, true
}

// HasTestRunInstanceId returns a boolean if a field has been set.
func (o *UpgradeChecksResults) HasTestRunInstanceId() bool {
	if o != nil && !IsNil(o.TestRunInstanceId) {
		return true
	}

	return false
}

// SetTestRunInstanceId gets a reference to the given string and assigns it to the TestRunInstanceId field.
func (o *UpgradeChecksResults) SetTestRunInstanceId(v string) {
	o.TestRunInstanceId = &v
}

func (o UpgradeChecksResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeChecksResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FinishTimeSecs.IsSet() {
		toSerialize["finishTimeSecs"] = o.FinishTimeSecs.Get()
	}
	if !IsNil(o.NodeResults) {
		toSerialize["nodeResults"] = o.NodeResults
	}
	if !IsNil(o.RequestType) {
		toSerialize["requestType"] = o.RequestType
	}
	if !IsNil(o.ResultStatus) {
		toSerialize["resultStatus"] = o.ResultStatus
	}
	if o.StartTimeSecs.IsSet() {
		toSerialize["startTimeSecs"] = o.StartTimeSecs.Get()
	}
	if !IsNil(o.TestRunInstanceId) {
		toSerialize["testRunInstanceId"] = o.TestRunInstanceId
	}
	return toSerialize, nil
}

type NullableUpgradeChecksResults struct {
	value *UpgradeChecksResults
	isSet bool
}

func (v NullableUpgradeChecksResults) Get() *UpgradeChecksResults {
	return v.value
}

func (v *NullableUpgradeChecksResults) Set(val *UpgradeChecksResults) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeChecksResults) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeChecksResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeChecksResults(val *UpgradeChecksResults) *NullableUpgradeChecksResults {
	return &NullableUpgradeChecksResults{value: val, isSet: true}
}

func (v NullableUpgradeChecksResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeChecksResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


