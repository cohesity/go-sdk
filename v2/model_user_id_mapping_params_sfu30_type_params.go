/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserIdMappingParamsSfu30TypeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserIdMappingParamsSfu30TypeParams{}

// UserIdMappingParamsSfu30TypeParams Specifies the params for Sfu30 mapping type mapping.
type UserIdMappingParamsSfu30TypeParams struct {
	FallbackOption NullableAdLdapProviderTypeParamsFallbackOption `json:"fallbackOption"`
}

type _UserIdMappingParamsSfu30TypeParams UserIdMappingParamsSfu30TypeParams

// NewUserIdMappingParamsSfu30TypeParams instantiates a new UserIdMappingParamsSfu30TypeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserIdMappingParamsSfu30TypeParams(fallbackOption NullableAdLdapProviderTypeParamsFallbackOption) *UserIdMappingParamsSfu30TypeParams {
	this := UserIdMappingParamsSfu30TypeParams{}
	this.FallbackOption = fallbackOption
	return &this
}

// NewUserIdMappingParamsSfu30TypeParamsWithDefaults instantiates a new UserIdMappingParamsSfu30TypeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserIdMappingParamsSfu30TypeParamsWithDefaults() *UserIdMappingParamsSfu30TypeParams {
	this := UserIdMappingParamsSfu30TypeParams{}
	return &this
}

// GetFallbackOption returns the FallbackOption field value
// If the value is explicit nil, the zero value for AdLdapProviderTypeParamsFallbackOption will be returned
func (o *UserIdMappingParamsSfu30TypeParams) GetFallbackOption() AdLdapProviderTypeParamsFallbackOption {
	if o == nil || o.FallbackOption.Get() == nil {
		var ret AdLdapProviderTypeParamsFallbackOption
		return ret
	}

	return *o.FallbackOption.Get()
}

// GetFallbackOptionOk returns a tuple with the FallbackOption field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserIdMappingParamsSfu30TypeParams) GetFallbackOptionOk() (*AdLdapProviderTypeParamsFallbackOption, bool) {
	if o == nil {
		return nil, false
	}
	return o.FallbackOption.Get(), o.FallbackOption.IsSet()
}

// SetFallbackOption sets field value
func (o *UserIdMappingParamsSfu30TypeParams) SetFallbackOption(v AdLdapProviderTypeParamsFallbackOption) {
	o.FallbackOption.Set(&v)
}

func (o UserIdMappingParamsSfu30TypeParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserIdMappingParamsSfu30TypeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["fallbackOption"] = o.FallbackOption.Get()
	return toSerialize, nil
}

func (o *UserIdMappingParamsSfu30TypeParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"fallbackOption",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserIdMappingParamsSfu30TypeParams := _UserIdMappingParamsSfu30TypeParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserIdMappingParamsSfu30TypeParams)

	if err != nil {
		return err
	}

	*o = UserIdMappingParamsSfu30TypeParams(varUserIdMappingParamsSfu30TypeParams)

	return err
}

type NullableUserIdMappingParamsSfu30TypeParams struct {
	value *UserIdMappingParamsSfu30TypeParams
	isSet bool
}

func (v NullableUserIdMappingParamsSfu30TypeParams) Get() *UserIdMappingParamsSfu30TypeParams {
	return v.value
}

func (v *NullableUserIdMappingParamsSfu30TypeParams) Set(val *UserIdMappingParamsSfu30TypeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUserIdMappingParamsSfu30TypeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUserIdMappingParamsSfu30TypeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserIdMappingParamsSfu30TypeParams(val *UserIdMappingParamsSfu30TypeParams) *NullableUserIdMappingParamsSfu30TypeParams {
	return &NullableUserIdMappingParamsSfu30TypeParams{value: val, isSet: true}
}

func (v NullableUserIdMappingParamsSfu30TypeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserIdMappingParamsSfu30TypeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


