/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the S3AbacServersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3AbacServersResponse{}

// S3AbacServersResponse Response of S3 ABAC servers.
type S3AbacServersResponse struct {
	// A List of S3 ABAC server.
	S3AbacServers []S3AbacServerResponse `json:"s3AbacServers,omitempty"`
}

// NewS3AbacServersResponse instantiates a new S3AbacServersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3AbacServersResponse() *S3AbacServersResponse {
	this := S3AbacServersResponse{}
	return &this
}

// NewS3AbacServersResponseWithDefaults instantiates a new S3AbacServersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3AbacServersResponseWithDefaults() *S3AbacServersResponse {
	this := S3AbacServersResponse{}
	return &this
}

// GetS3AbacServers returns the S3AbacServers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3AbacServersResponse) GetS3AbacServers() []S3AbacServerResponse {
	if o == nil {
		var ret []S3AbacServerResponse
		return ret
	}
	return o.S3AbacServers
}

// GetS3AbacServersOk returns a tuple with the S3AbacServers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServersResponse) GetS3AbacServersOk() ([]S3AbacServerResponse, bool) {
	if o == nil || IsNil(o.S3AbacServers) {
		return nil, false
	}
	return o.S3AbacServers, true
}

// HasS3AbacServers returns a boolean if a field has been set.
func (o *S3AbacServersResponse) HasS3AbacServers() bool {
	if o != nil && !IsNil(o.S3AbacServers) {
		return true
	}

	return false
}

// SetS3AbacServers gets a reference to the given []S3AbacServerResponse and assigns it to the S3AbacServers field.
func (o *S3AbacServersResponse) SetS3AbacServers(v []S3AbacServerResponse) {
	o.S3AbacServers = v
}

func (o S3AbacServersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3AbacServersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.S3AbacServers != nil {
		toSerialize["s3AbacServers"] = o.S3AbacServers
	}
	return toSerialize, nil
}

type NullableS3AbacServersResponse struct {
	value *S3AbacServersResponse
	isSet bool
}

func (v NullableS3AbacServersResponse) Get() *S3AbacServersResponse {
	return v.value
}

func (v *NullableS3AbacServersResponse) Set(val *S3AbacServersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableS3AbacServersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableS3AbacServersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3AbacServersResponse(val *S3AbacServersResponse) *NullableS3AbacServersResponse {
	return &NullableS3AbacServersResponse{value: val, isSet: true}
}

func (v NullableS3AbacServersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3AbacServersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


