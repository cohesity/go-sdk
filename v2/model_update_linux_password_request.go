/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateLinuxPasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateLinuxPasswordRequest{}

// UpdateLinuxPasswordRequest Specifies the linux user params.
type UpdateLinuxPasswordRequest struct {
	// Specifies the current password of the user. This is required when trying to update the current user's password.
	CurrentPassword NullableString `json:"currentPassword,omitempty"`
	// Specifies the new linux password.
	NewPassword NullableString `json:"newPassword,omitempty"`
	// Specifies the linux username for which the password will be updated.
	Username NullableString `json:"username"`
	// True if request is only to verify if current password matches with set password.
	VerifyPassword NullableBool `json:"verifyPassword,omitempty"`
}

type _UpdateLinuxPasswordRequest UpdateLinuxPasswordRequest

// NewUpdateLinuxPasswordRequest instantiates a new UpdateLinuxPasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateLinuxPasswordRequest(username NullableString) *UpdateLinuxPasswordRequest {
	this := UpdateLinuxPasswordRequest{}
	this.Username = username
	return &this
}

// NewUpdateLinuxPasswordRequestWithDefaults instantiates a new UpdateLinuxPasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateLinuxPasswordRequestWithDefaults() *UpdateLinuxPasswordRequest {
	this := UpdateLinuxPasswordRequest{}
	return &this
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateLinuxPasswordRequest) GetCurrentPassword() string {
	if o == nil || IsNil(o.CurrentPassword.Get()) {
		var ret string
		return ret
	}
	return *o.CurrentPassword.Get()
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateLinuxPasswordRequest) GetCurrentPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentPassword.Get(), o.CurrentPassword.IsSet()
}

// HasCurrentPassword returns a boolean if a field has been set.
func (o *UpdateLinuxPasswordRequest) HasCurrentPassword() bool {
	if o != nil && o.CurrentPassword.IsSet() {
		return true
	}

	return false
}

// SetCurrentPassword gets a reference to the given NullableString and assigns it to the CurrentPassword field.
func (o *UpdateLinuxPasswordRequest) SetCurrentPassword(v string) {
	o.CurrentPassword.Set(&v)
}
// SetCurrentPasswordNil sets the value for CurrentPassword to be an explicit nil
func (o *UpdateLinuxPasswordRequest) SetCurrentPasswordNil() {
	o.CurrentPassword.Set(nil)
}

// UnsetCurrentPassword ensures that no value is present for CurrentPassword, not even an explicit nil
func (o *UpdateLinuxPasswordRequest) UnsetCurrentPassword() {
	o.CurrentPassword.Unset()
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateLinuxPasswordRequest) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword.Get()) {
		var ret string
		return ret
	}
	return *o.NewPassword.Get()
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateLinuxPasswordRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewPassword.Get(), o.NewPassword.IsSet()
}

// HasNewPassword returns a boolean if a field has been set.
func (o *UpdateLinuxPasswordRequest) HasNewPassword() bool {
	if o != nil && o.NewPassword.IsSet() {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given NullableString and assigns it to the NewPassword field.
func (o *UpdateLinuxPasswordRequest) SetNewPassword(v string) {
	o.NewPassword.Set(&v)
}
// SetNewPasswordNil sets the value for NewPassword to be an explicit nil
func (o *UpdateLinuxPasswordRequest) SetNewPasswordNil() {
	o.NewPassword.Set(nil)
}

// UnsetNewPassword ensures that no value is present for NewPassword, not even an explicit nil
func (o *UpdateLinuxPasswordRequest) UnsetNewPassword() {
	o.NewPassword.Unset()
}

// GetUsername returns the Username field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateLinuxPasswordRequest) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}

	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateLinuxPasswordRequest) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// SetUsername sets field value
func (o *UpdateLinuxPasswordRequest) SetUsername(v string) {
	o.Username.Set(&v)
}

// GetVerifyPassword returns the VerifyPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateLinuxPasswordRequest) GetVerifyPassword() bool {
	if o == nil || IsNil(o.VerifyPassword.Get()) {
		var ret bool
		return ret
	}
	return *o.VerifyPassword.Get()
}

// GetVerifyPasswordOk returns a tuple with the VerifyPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateLinuxPasswordRequest) GetVerifyPasswordOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.VerifyPassword.Get(), o.VerifyPassword.IsSet()
}

// HasVerifyPassword returns a boolean if a field has been set.
func (o *UpdateLinuxPasswordRequest) HasVerifyPassword() bool {
	if o != nil && o.VerifyPassword.IsSet() {
		return true
	}

	return false
}

// SetVerifyPassword gets a reference to the given NullableBool and assigns it to the VerifyPassword field.
func (o *UpdateLinuxPasswordRequest) SetVerifyPassword(v bool) {
	o.VerifyPassword.Set(&v)
}
// SetVerifyPasswordNil sets the value for VerifyPassword to be an explicit nil
func (o *UpdateLinuxPasswordRequest) SetVerifyPasswordNil() {
	o.VerifyPassword.Set(nil)
}

// UnsetVerifyPassword ensures that no value is present for VerifyPassword, not even an explicit nil
func (o *UpdateLinuxPasswordRequest) UnsetVerifyPassword() {
	o.VerifyPassword.Unset()
}

func (o UpdateLinuxPasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateLinuxPasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentPassword.IsSet() {
		toSerialize["currentPassword"] = o.CurrentPassword.Get()
	}
	if o.NewPassword.IsSet() {
		toSerialize["newPassword"] = o.NewPassword.Get()
	}
	toSerialize["username"] = o.Username.Get()
	if o.VerifyPassword.IsSet() {
		toSerialize["verifyPassword"] = o.VerifyPassword.Get()
	}
	return toSerialize, nil
}

func (o *UpdateLinuxPasswordRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateLinuxPasswordRequest := _UpdateLinuxPasswordRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateLinuxPasswordRequest)

	if err != nil {
		return err
	}

	*o = UpdateLinuxPasswordRequest(varUpdateLinuxPasswordRequest)

	return err
}

type NullableUpdateLinuxPasswordRequest struct {
	value *UpdateLinuxPasswordRequest
	isSet bool
}

func (v NullableUpdateLinuxPasswordRequest) Get() *UpdateLinuxPasswordRequest {
	return v.value
}

func (v *NullableUpdateLinuxPasswordRequest) Set(val *UpdateLinuxPasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateLinuxPasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateLinuxPasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateLinuxPasswordRequest(val *UpdateLinuxPasswordRequest) *NullableUpdateLinuxPasswordRequest {
	return &NullableUpdateLinuxPasswordRequest{value: val, isSet: true}
}

func (v NullableUpdateLinuxPasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateLinuxPasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


