/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NetappObjectProtectionUpdateRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetappObjectProtectionUpdateRequestParams{}

// NetappObjectProtectionUpdateRequestParams Specifies the update parameters which are specific to Netapp object protection.
type NetappObjectProtectionUpdateRequestParams struct {
	// Specifies whether or not the backup should continue regardless of whether or not an error was encountered.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies whether the encryption should be used while backup or not.
	EncryptionEnabled NullableBool `json:"encryptionEnabled,omitempty"`
	FileFilters *FileFilteringPolicy `json:"fileFilters,omitempty"`
	FileLockConfig *FileLevelDataLockConfig `json:"fileLockConfig,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	PrePostScript *HostBasedBackupScriptParams `json:"prePostScript,omitempty"`
	ThrottlingConfig *NasThrottlingConfig `json:"throttlingConfig,omitempty"`
	// Specifies that snapshot label is not set for Data-Protect Netapp Volumes backup. If field is set to true, existing oldest snapshot is used for backup and subsequent incremental will be selected in ascending order of snapshot create time on the source. If snapshot label is set, this field is set to false.
	BackupExistingSnapshot NullableBool `json:"backupExistingSnapshot,omitempty"`
	ContinuousSnapshots *ContinuousSnapshotParams `json:"continuousSnapshots,omitempty"`
	// Specifies the objects to be excluded in the Protection.
	ExcludeObjectIds []int64 `json:"excludeObjectIds,omitempty"`
	// Specifies the protocol of the NAS device being backed up.
	Protocol NullableString `json:"protocol,omitempty"`
	SnapshotLabel *SnapshotLabel `json:"snapshotLabel,omitempty"`
}

// NewNetappObjectProtectionUpdateRequestParams instantiates a new NetappObjectProtectionUpdateRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetappObjectProtectionUpdateRequestParams() *NetappObjectProtectionUpdateRequestParams {
	this := NetappObjectProtectionUpdateRequestParams{}
	return &this
}

// NewNetappObjectProtectionUpdateRequestParamsWithDefaults instantiates a new NetappObjectProtectionUpdateRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetappObjectProtectionUpdateRequestParamsWithDefaults() *NetappObjectProtectionUpdateRequestParams {
	this := NetappObjectProtectionUpdateRequestParams{}
	return &this
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappObjectProtectionUpdateRequestParams) GetContinueOnError() bool {
	if o == nil || IsNil(o.ContinueOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappObjectProtectionUpdateRequestParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *NetappObjectProtectionUpdateRequestParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *NetappObjectProtectionUpdateRequestParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *NetappObjectProtectionUpdateRequestParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetEncryptionEnabled returns the EncryptionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappObjectProtectionUpdateRequestParams) GetEncryptionEnabled() bool {
	if o == nil || IsNil(o.EncryptionEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.EncryptionEnabled.Get()
}

// GetEncryptionEnabledOk returns a tuple with the EncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappObjectProtectionUpdateRequestParams) GetEncryptionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionEnabled.Get(), o.EncryptionEnabled.IsSet()
}

// HasEncryptionEnabled returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasEncryptionEnabled() bool {
	if o != nil && o.EncryptionEnabled.IsSet() {
		return true
	}

	return false
}

// SetEncryptionEnabled gets a reference to the given NullableBool and assigns it to the EncryptionEnabled field.
func (o *NetappObjectProtectionUpdateRequestParams) SetEncryptionEnabled(v bool) {
	o.EncryptionEnabled.Set(&v)
}
// SetEncryptionEnabledNil sets the value for EncryptionEnabled to be an explicit nil
func (o *NetappObjectProtectionUpdateRequestParams) SetEncryptionEnabledNil() {
	o.EncryptionEnabled.Set(nil)
}

// UnsetEncryptionEnabled ensures that no value is present for EncryptionEnabled, not even an explicit nil
func (o *NetappObjectProtectionUpdateRequestParams) UnsetEncryptionEnabled() {
	o.EncryptionEnabled.Unset()
}

// GetFileFilters returns the FileFilters field value if set, zero value otherwise.
func (o *NetappObjectProtectionUpdateRequestParams) GetFileFilters() FileFilteringPolicy {
	if o == nil || IsNil(o.FileFilters) {
		var ret FileFilteringPolicy
		return ret
	}
	return *o.FileFilters
}

// GetFileFiltersOk returns a tuple with the FileFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappObjectProtectionUpdateRequestParams) GetFileFiltersOk() (*FileFilteringPolicy, bool) {
	if o == nil || IsNil(o.FileFilters) {
		return nil, false
	}
	return o.FileFilters, true
}

// HasFileFilters returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasFileFilters() bool {
	if o != nil && !IsNil(o.FileFilters) {
		return true
	}

	return false
}

// SetFileFilters gets a reference to the given FileFilteringPolicy and assigns it to the FileFilters field.
func (o *NetappObjectProtectionUpdateRequestParams) SetFileFilters(v FileFilteringPolicy) {
	o.FileFilters = &v
}

// GetFileLockConfig returns the FileLockConfig field value if set, zero value otherwise.
func (o *NetappObjectProtectionUpdateRequestParams) GetFileLockConfig() FileLevelDataLockConfig {
	if o == nil || IsNil(o.FileLockConfig) {
		var ret FileLevelDataLockConfig
		return ret
	}
	return *o.FileLockConfig
}

// GetFileLockConfigOk returns a tuple with the FileLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappObjectProtectionUpdateRequestParams) GetFileLockConfigOk() (*FileLevelDataLockConfig, bool) {
	if o == nil || IsNil(o.FileLockConfig) {
		return nil, false
	}
	return o.FileLockConfig, true
}

// HasFileLockConfig returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasFileLockConfig() bool {
	if o != nil && !IsNil(o.FileLockConfig) {
		return true
	}

	return false
}

// SetFileLockConfig gets a reference to the given FileLevelDataLockConfig and assigns it to the FileLockConfig field.
func (o *NetappObjectProtectionUpdateRequestParams) SetFileLockConfig(v FileLevelDataLockConfig) {
	o.FileLockConfig = &v
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *NetappObjectProtectionUpdateRequestParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || IsNil(o.IndexingPolicy) {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappObjectProtectionUpdateRequestParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || IsNil(o.IndexingPolicy) {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasIndexingPolicy() bool {
	if o != nil && !IsNil(o.IndexingPolicy) {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *NetappObjectProtectionUpdateRequestParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetPrePostScript returns the PrePostScript field value if set, zero value otherwise.
func (o *NetappObjectProtectionUpdateRequestParams) GetPrePostScript() HostBasedBackupScriptParams {
	if o == nil || IsNil(o.PrePostScript) {
		var ret HostBasedBackupScriptParams
		return ret
	}
	return *o.PrePostScript
}

// GetPrePostScriptOk returns a tuple with the PrePostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappObjectProtectionUpdateRequestParams) GetPrePostScriptOk() (*HostBasedBackupScriptParams, bool) {
	if o == nil || IsNil(o.PrePostScript) {
		return nil, false
	}
	return o.PrePostScript, true
}

// HasPrePostScript returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasPrePostScript() bool {
	if o != nil && !IsNil(o.PrePostScript) {
		return true
	}

	return false
}

// SetPrePostScript gets a reference to the given HostBasedBackupScriptParams and assigns it to the PrePostScript field.
func (o *NetappObjectProtectionUpdateRequestParams) SetPrePostScript(v HostBasedBackupScriptParams) {
	o.PrePostScript = &v
}

// GetThrottlingConfig returns the ThrottlingConfig field value if set, zero value otherwise.
func (o *NetappObjectProtectionUpdateRequestParams) GetThrottlingConfig() NasThrottlingConfig {
	if o == nil || IsNil(o.ThrottlingConfig) {
		var ret NasThrottlingConfig
		return ret
	}
	return *o.ThrottlingConfig
}

// GetThrottlingConfigOk returns a tuple with the ThrottlingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappObjectProtectionUpdateRequestParams) GetThrottlingConfigOk() (*NasThrottlingConfig, bool) {
	if o == nil || IsNil(o.ThrottlingConfig) {
		return nil, false
	}
	return o.ThrottlingConfig, true
}

// HasThrottlingConfig returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasThrottlingConfig() bool {
	if o != nil && !IsNil(o.ThrottlingConfig) {
		return true
	}

	return false
}

// SetThrottlingConfig gets a reference to the given NasThrottlingConfig and assigns it to the ThrottlingConfig field.
func (o *NetappObjectProtectionUpdateRequestParams) SetThrottlingConfig(v NasThrottlingConfig) {
	o.ThrottlingConfig = &v
}

// GetBackupExistingSnapshot returns the BackupExistingSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappObjectProtectionUpdateRequestParams) GetBackupExistingSnapshot() bool {
	if o == nil || IsNil(o.BackupExistingSnapshot.Get()) {
		var ret bool
		return ret
	}
	return *o.BackupExistingSnapshot.Get()
}

// GetBackupExistingSnapshotOk returns a tuple with the BackupExistingSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappObjectProtectionUpdateRequestParams) GetBackupExistingSnapshotOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupExistingSnapshot.Get(), o.BackupExistingSnapshot.IsSet()
}

// HasBackupExistingSnapshot returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasBackupExistingSnapshot() bool {
	if o != nil && o.BackupExistingSnapshot.IsSet() {
		return true
	}

	return false
}

// SetBackupExistingSnapshot gets a reference to the given NullableBool and assigns it to the BackupExistingSnapshot field.
func (o *NetappObjectProtectionUpdateRequestParams) SetBackupExistingSnapshot(v bool) {
	o.BackupExistingSnapshot.Set(&v)
}
// SetBackupExistingSnapshotNil sets the value for BackupExistingSnapshot to be an explicit nil
func (o *NetappObjectProtectionUpdateRequestParams) SetBackupExistingSnapshotNil() {
	o.BackupExistingSnapshot.Set(nil)
}

// UnsetBackupExistingSnapshot ensures that no value is present for BackupExistingSnapshot, not even an explicit nil
func (o *NetappObjectProtectionUpdateRequestParams) UnsetBackupExistingSnapshot() {
	o.BackupExistingSnapshot.Unset()
}

// GetContinuousSnapshots returns the ContinuousSnapshots field value if set, zero value otherwise.
func (o *NetappObjectProtectionUpdateRequestParams) GetContinuousSnapshots() ContinuousSnapshotParams {
	if o == nil || IsNil(o.ContinuousSnapshots) {
		var ret ContinuousSnapshotParams
		return ret
	}
	return *o.ContinuousSnapshots
}

// GetContinuousSnapshotsOk returns a tuple with the ContinuousSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappObjectProtectionUpdateRequestParams) GetContinuousSnapshotsOk() (*ContinuousSnapshotParams, bool) {
	if o == nil || IsNil(o.ContinuousSnapshots) {
		return nil, false
	}
	return o.ContinuousSnapshots, true
}

// HasContinuousSnapshots returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasContinuousSnapshots() bool {
	if o != nil && !IsNil(o.ContinuousSnapshots) {
		return true
	}

	return false
}

// SetContinuousSnapshots gets a reference to the given ContinuousSnapshotParams and assigns it to the ContinuousSnapshots field.
func (o *NetappObjectProtectionUpdateRequestParams) SetContinuousSnapshots(v ContinuousSnapshotParams) {
	o.ContinuousSnapshots = &v
}

// GetExcludeObjectIds returns the ExcludeObjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappObjectProtectionUpdateRequestParams) GetExcludeObjectIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.ExcludeObjectIds
}

// GetExcludeObjectIdsOk returns a tuple with the ExcludeObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappObjectProtectionUpdateRequestParams) GetExcludeObjectIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ExcludeObjectIds) {
		return nil, false
	}
	return o.ExcludeObjectIds, true
}

// HasExcludeObjectIds returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasExcludeObjectIds() bool {
	if o != nil && !IsNil(o.ExcludeObjectIds) {
		return true
	}

	return false
}

// SetExcludeObjectIds gets a reference to the given []int64 and assigns it to the ExcludeObjectIds field.
func (o *NetappObjectProtectionUpdateRequestParams) SetExcludeObjectIds(v []int64) {
	o.ExcludeObjectIds = v
}

// GetProtocol returns the Protocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappObjectProtectionUpdateRequestParams) GetProtocol() string {
	if o == nil || IsNil(o.Protocol.Get()) {
		var ret string
		return ret
	}
	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappObjectProtectionUpdateRequestParams) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// HasProtocol returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasProtocol() bool {
	if o != nil && o.Protocol.IsSet() {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given NullableString and assigns it to the Protocol field.
func (o *NetappObjectProtectionUpdateRequestParams) SetProtocol(v string) {
	o.Protocol.Set(&v)
}
// SetProtocolNil sets the value for Protocol to be an explicit nil
func (o *NetappObjectProtectionUpdateRequestParams) SetProtocolNil() {
	o.Protocol.Set(nil)
}

// UnsetProtocol ensures that no value is present for Protocol, not even an explicit nil
func (o *NetappObjectProtectionUpdateRequestParams) UnsetProtocol() {
	o.Protocol.Unset()
}

// GetSnapshotLabel returns the SnapshotLabel field value if set, zero value otherwise.
func (o *NetappObjectProtectionUpdateRequestParams) GetSnapshotLabel() SnapshotLabel {
	if o == nil || IsNil(o.SnapshotLabel) {
		var ret SnapshotLabel
		return ret
	}
	return *o.SnapshotLabel
}

// GetSnapshotLabelOk returns a tuple with the SnapshotLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappObjectProtectionUpdateRequestParams) GetSnapshotLabelOk() (*SnapshotLabel, bool) {
	if o == nil || IsNil(o.SnapshotLabel) {
		return nil, false
	}
	return o.SnapshotLabel, true
}

// HasSnapshotLabel returns a boolean if a field has been set.
func (o *NetappObjectProtectionUpdateRequestParams) HasSnapshotLabel() bool {
	if o != nil && !IsNil(o.SnapshotLabel) {
		return true
	}

	return false
}

// SetSnapshotLabel gets a reference to the given SnapshotLabel and assigns it to the SnapshotLabel field.
func (o *NetappObjectProtectionUpdateRequestParams) SetSnapshotLabel(v SnapshotLabel) {
	o.SnapshotLabel = &v
}

func (o NetappObjectProtectionUpdateRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetappObjectProtectionUpdateRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.EncryptionEnabled.IsSet() {
		toSerialize["encryptionEnabled"] = o.EncryptionEnabled.Get()
	}
	if !IsNil(o.FileFilters) {
		toSerialize["fileFilters"] = o.FileFilters
	}
	if !IsNil(o.FileLockConfig) {
		toSerialize["fileLockConfig"] = o.FileLockConfig
	}
	if !IsNil(o.IndexingPolicy) {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	if !IsNil(o.PrePostScript) {
		toSerialize["prePostScript"] = o.PrePostScript
	}
	if !IsNil(o.ThrottlingConfig) {
		toSerialize["throttlingConfig"] = o.ThrottlingConfig
	}
	if o.BackupExistingSnapshot.IsSet() {
		toSerialize["backupExistingSnapshot"] = o.BackupExistingSnapshot.Get()
	}
	if !IsNil(o.ContinuousSnapshots) {
		toSerialize["continuousSnapshots"] = o.ContinuousSnapshots
	}
	if o.ExcludeObjectIds != nil {
		toSerialize["excludeObjectIds"] = o.ExcludeObjectIds
	}
	if o.Protocol.IsSet() {
		toSerialize["protocol"] = o.Protocol.Get()
	}
	if !IsNil(o.SnapshotLabel) {
		toSerialize["snapshotLabel"] = o.SnapshotLabel
	}
	return toSerialize, nil
}

type NullableNetappObjectProtectionUpdateRequestParams struct {
	value *NetappObjectProtectionUpdateRequestParams
	isSet bool
}

func (v NullableNetappObjectProtectionUpdateRequestParams) Get() *NetappObjectProtectionUpdateRequestParams {
	return v.value
}

func (v *NullableNetappObjectProtectionUpdateRequestParams) Set(val *NetappObjectProtectionUpdateRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNetappObjectProtectionUpdateRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNetappObjectProtectionUpdateRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetappObjectProtectionUpdateRequestParams(val *NetappObjectProtectionUpdateRequestParams) *NullableNetappObjectProtectionUpdateRequestParams {
	return &NullableNetappObjectProtectionUpdateRequestParams{value: val, isSet: true}
}

func (v NullableNetappObjectProtectionUpdateRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetappObjectProtectionUpdateRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


