/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DeviceTreeLeafNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceTreeLeafNode{}

// DeviceTreeLeafNode Specifies the parameters of a leaf node in device tree.
type DeviceTreeLeafNode struct {
	// Specifies the disk name.
	DiskName NullableString `json:"diskName,omitempty"`
	// Specifies The length of data in bytes for the LVM volume (for which this device tree is being built). It does not include size of the LVM meta data.
	LengthBytes NullableInt64 `json:"lengthBytes,omitempty"`
	// Specifies the offset in bytes where data for the LVM volume (for which this device tree is being build) starts relative to the start of the partition.
	OffsetBytes NullableInt64 `json:"offsetBytes,omitempty"`
	// Specifies the paritition number.
	PartitionNumber NullableInt32 `json:"partitionNumber,omitempty"`
}

// NewDeviceTreeLeafNode instantiates a new DeviceTreeLeafNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTreeLeafNode() *DeviceTreeLeafNode {
	this := DeviceTreeLeafNode{}
	return &this
}

// NewDeviceTreeLeafNodeWithDefaults instantiates a new DeviceTreeLeafNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTreeLeafNodeWithDefaults() *DeviceTreeLeafNode {
	this := DeviceTreeLeafNode{}
	return &this
}

// GetDiskName returns the DiskName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreeLeafNode) GetDiskName() string {
	if o == nil || IsNil(o.DiskName.Get()) {
		var ret string
		return ret
	}
	return *o.DiskName.Get()
}

// GetDiskNameOk returns a tuple with the DiskName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreeLeafNode) GetDiskNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskName.Get(), o.DiskName.IsSet()
}

// HasDiskName returns a boolean if a field has been set.
func (o *DeviceTreeLeafNode) HasDiskName() bool {
	if o != nil && o.DiskName.IsSet() {
		return true
	}

	return false
}

// SetDiskName gets a reference to the given NullableString and assigns it to the DiskName field.
func (o *DeviceTreeLeafNode) SetDiskName(v string) {
	o.DiskName.Set(&v)
}
// SetDiskNameNil sets the value for DiskName to be an explicit nil
func (o *DeviceTreeLeafNode) SetDiskNameNil() {
	o.DiskName.Set(nil)
}

// UnsetDiskName ensures that no value is present for DiskName, not even an explicit nil
func (o *DeviceTreeLeafNode) UnsetDiskName() {
	o.DiskName.Unset()
}

// GetLengthBytes returns the LengthBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreeLeafNode) GetLengthBytes() int64 {
	if o == nil || IsNil(o.LengthBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.LengthBytes.Get()
}

// GetLengthBytesOk returns a tuple with the LengthBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreeLeafNode) GetLengthBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LengthBytes.Get(), o.LengthBytes.IsSet()
}

// HasLengthBytes returns a boolean if a field has been set.
func (o *DeviceTreeLeafNode) HasLengthBytes() bool {
	if o != nil && o.LengthBytes.IsSet() {
		return true
	}

	return false
}

// SetLengthBytes gets a reference to the given NullableInt64 and assigns it to the LengthBytes field.
func (o *DeviceTreeLeafNode) SetLengthBytes(v int64) {
	o.LengthBytes.Set(&v)
}
// SetLengthBytesNil sets the value for LengthBytes to be an explicit nil
func (o *DeviceTreeLeafNode) SetLengthBytesNil() {
	o.LengthBytes.Set(nil)
}

// UnsetLengthBytes ensures that no value is present for LengthBytes, not even an explicit nil
func (o *DeviceTreeLeafNode) UnsetLengthBytes() {
	o.LengthBytes.Unset()
}

// GetOffsetBytes returns the OffsetBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreeLeafNode) GetOffsetBytes() int64 {
	if o == nil || IsNil(o.OffsetBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.OffsetBytes.Get()
}

// GetOffsetBytesOk returns a tuple with the OffsetBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreeLeafNode) GetOffsetBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OffsetBytes.Get(), o.OffsetBytes.IsSet()
}

// HasOffsetBytes returns a boolean if a field has been set.
func (o *DeviceTreeLeafNode) HasOffsetBytes() bool {
	if o != nil && o.OffsetBytes.IsSet() {
		return true
	}

	return false
}

// SetOffsetBytes gets a reference to the given NullableInt64 and assigns it to the OffsetBytes field.
func (o *DeviceTreeLeafNode) SetOffsetBytes(v int64) {
	o.OffsetBytes.Set(&v)
}
// SetOffsetBytesNil sets the value for OffsetBytes to be an explicit nil
func (o *DeviceTreeLeafNode) SetOffsetBytesNil() {
	o.OffsetBytes.Set(nil)
}

// UnsetOffsetBytes ensures that no value is present for OffsetBytes, not even an explicit nil
func (o *DeviceTreeLeafNode) UnsetOffsetBytes() {
	o.OffsetBytes.Unset()
}

// GetPartitionNumber returns the PartitionNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreeLeafNode) GetPartitionNumber() int32 {
	if o == nil || IsNil(o.PartitionNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.PartitionNumber.Get()
}

// GetPartitionNumberOk returns a tuple with the PartitionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreeLeafNode) GetPartitionNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PartitionNumber.Get(), o.PartitionNumber.IsSet()
}

// HasPartitionNumber returns a boolean if a field has been set.
func (o *DeviceTreeLeafNode) HasPartitionNumber() bool {
	if o != nil && o.PartitionNumber.IsSet() {
		return true
	}

	return false
}

// SetPartitionNumber gets a reference to the given NullableInt32 and assigns it to the PartitionNumber field.
func (o *DeviceTreeLeafNode) SetPartitionNumber(v int32) {
	o.PartitionNumber.Set(&v)
}
// SetPartitionNumberNil sets the value for PartitionNumber to be an explicit nil
func (o *DeviceTreeLeafNode) SetPartitionNumberNil() {
	o.PartitionNumber.Set(nil)
}

// UnsetPartitionNumber ensures that no value is present for PartitionNumber, not even an explicit nil
func (o *DeviceTreeLeafNode) UnsetPartitionNumber() {
	o.PartitionNumber.Unset()
}

func (o DeviceTreeLeafNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceTreeLeafNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskName.IsSet() {
		toSerialize["diskName"] = o.DiskName.Get()
	}
	if o.LengthBytes.IsSet() {
		toSerialize["lengthBytes"] = o.LengthBytes.Get()
	}
	if o.OffsetBytes.IsSet() {
		toSerialize["offsetBytes"] = o.OffsetBytes.Get()
	}
	if o.PartitionNumber.IsSet() {
		toSerialize["partitionNumber"] = o.PartitionNumber.Get()
	}
	return toSerialize, nil
}

type NullableDeviceTreeLeafNode struct {
	value *DeviceTreeLeafNode
	isSet bool
}

func (v NullableDeviceTreeLeafNode) Get() *DeviceTreeLeafNode {
	return v.value
}

func (v *NullableDeviceTreeLeafNode) Set(val *DeviceTreeLeafNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTreeLeafNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTreeLeafNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTreeLeafNode(val *DeviceTreeLeafNode) *NullableDeviceTreeLeafNode {
	return &NullableDeviceTreeLeafNode{value: val, isSet: true}
}

func (v NullableDeviceTreeLeafNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTreeLeafNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


