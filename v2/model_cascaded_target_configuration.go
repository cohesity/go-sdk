/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CascadedTargetConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CascadedTargetConfiguration{}

// CascadedTargetConfiguration Specifies the source of the cascadded replication and list of all remote targets that needs to added. Each source cluster and remote targets are considered as nodes and immediate connections between them are considered as edges.
type CascadedTargetConfiguration struct {
	RemoteTargets TargetsConfiguration `json:"remoteTargets"`
	// Specifies the source cluster id from where the remote operations will be performed to the next set of remote targets.
	SourceClusterId NullableInt64 `json:"sourceClusterId"`
}

type _CascadedTargetConfiguration CascadedTargetConfiguration

// NewCascadedTargetConfiguration instantiates a new CascadedTargetConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCascadedTargetConfiguration(remoteTargets TargetsConfiguration, sourceClusterId NullableInt64) *CascadedTargetConfiguration {
	this := CascadedTargetConfiguration{}
	this.RemoteTargets = remoteTargets
	this.SourceClusterId = sourceClusterId
	return &this
}

// NewCascadedTargetConfigurationWithDefaults instantiates a new CascadedTargetConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCascadedTargetConfigurationWithDefaults() *CascadedTargetConfiguration {
	this := CascadedTargetConfiguration{}
	return &this
}

// GetRemoteTargets returns the RemoteTargets field value
func (o *CascadedTargetConfiguration) GetRemoteTargets() TargetsConfiguration {
	if o == nil {
		var ret TargetsConfiguration
		return ret
	}

	return o.RemoteTargets
}

// GetRemoteTargetsOk returns a tuple with the RemoteTargets field value
// and a boolean to check if the value has been set.
func (o *CascadedTargetConfiguration) GetRemoteTargetsOk() (*TargetsConfiguration, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RemoteTargets, true
}

// SetRemoteTargets sets field value
func (o *CascadedTargetConfiguration) SetRemoteTargets(v TargetsConfiguration) {
	o.RemoteTargets = v
}

// GetSourceClusterId returns the SourceClusterId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *CascadedTargetConfiguration) GetSourceClusterId() int64 {
	if o == nil || o.SourceClusterId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.SourceClusterId.Get()
}

// GetSourceClusterIdOk returns a tuple with the SourceClusterId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CascadedTargetConfiguration) GetSourceClusterIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceClusterId.Get(), o.SourceClusterId.IsSet()
}

// SetSourceClusterId sets field value
func (o *CascadedTargetConfiguration) SetSourceClusterId(v int64) {
	o.SourceClusterId.Set(&v)
}

func (o CascadedTargetConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CascadedTargetConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["remoteTargets"] = o.RemoteTargets
	toSerialize["sourceClusterId"] = o.SourceClusterId.Get()
	return toSerialize, nil
}

func (o *CascadedTargetConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"remoteTargets",
		"sourceClusterId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCascadedTargetConfiguration := _CascadedTargetConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCascadedTargetConfiguration)

	if err != nil {
		return err
	}

	*o = CascadedTargetConfiguration(varCascadedTargetConfiguration)

	return err
}

type NullableCascadedTargetConfiguration struct {
	value *CascadedTargetConfiguration
	isSet bool
}

func (v NullableCascadedTargetConfiguration) Get() *CascadedTargetConfiguration {
	return v.value
}

func (v *NullableCascadedTargetConfiguration) Set(val *CascadedTargetConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableCascadedTargetConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableCascadedTargetConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCascadedTargetConfiguration(val *CascadedTargetConfiguration) *NullableCascadedTargetConfiguration {
	return &NullableCascadedTargetConfiguration{value: val, isSet: true}
}

func (v NullableCascadedTargetConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCascadedTargetConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


