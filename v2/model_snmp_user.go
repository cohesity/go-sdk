/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SnmpUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnmpUser{}

// SnmpUser SNMP User Info for this cluster
type SnmpUser struct {
	// AuthPassword is the authentication password for SNMP V3 users.
	AuthPassword NullableString `json:"authPassword,omitempty"`
	// AuthPrototol is the authentication protocol for SNMP V3 users.
	AuthProtocol NullableString `json:"authProtocol,omitempty"`
	// ContextName is the context used for SNMP V3.
	ContextName NullableString `json:"contextName,omitempty"`
	// EngineID is the SNMP V3 Engine ID used by trap users.
	EngineId NullableString `json:"engineId,omitempty"`
	// PrivPassword is the privacy password for SNMP V3 users.
	PrivPassword NullableString `json:"privPassword,omitempty"`
	// PrivPrototol is the privacy protocol for SNMP V3 users.
	PrivProtocol NullableString `json:"privProtocol,omitempty"`
	// SecurityLevel is the SNMP V3 security level. It can be authNoPriv, noPriv, and authPriv.
	SecurityLevel NullableString `json:"securityLevel,omitempty"`
	// UserName is the user name to access SNMP V2 or SNMP V3 agent.
	UserName NullableString `json:"userName,omitempty"`
	// UserType is the SNMP user type, can be read-only user, read/write user, or trap users.
	UserType NullableString `json:"userType,omitempty"`
}

// NewSnmpUser instantiates a new SnmpUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnmpUser() *SnmpUser {
	this := SnmpUser{}
	return &this
}

// NewSnmpUserWithDefaults instantiates a new SnmpUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnmpUserWithDefaults() *SnmpUser {
	this := SnmpUser{}
	return &this
}

// GetAuthPassword returns the AuthPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpUser) GetAuthPassword() string {
	if o == nil || IsNil(o.AuthPassword.Get()) {
		var ret string
		return ret
	}
	return *o.AuthPassword.Get()
}

// GetAuthPasswordOk returns a tuple with the AuthPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpUser) GetAuthPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthPassword.Get(), o.AuthPassword.IsSet()
}

// HasAuthPassword returns a boolean if a field has been set.
func (o *SnmpUser) HasAuthPassword() bool {
	if o != nil && o.AuthPassword.IsSet() {
		return true
	}

	return false
}

// SetAuthPassword gets a reference to the given NullableString and assigns it to the AuthPassword field.
func (o *SnmpUser) SetAuthPassword(v string) {
	o.AuthPassword.Set(&v)
}
// SetAuthPasswordNil sets the value for AuthPassword to be an explicit nil
func (o *SnmpUser) SetAuthPasswordNil() {
	o.AuthPassword.Set(nil)
}

// UnsetAuthPassword ensures that no value is present for AuthPassword, not even an explicit nil
func (o *SnmpUser) UnsetAuthPassword() {
	o.AuthPassword.Unset()
}

// GetAuthProtocol returns the AuthProtocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpUser) GetAuthProtocol() string {
	if o == nil || IsNil(o.AuthProtocol.Get()) {
		var ret string
		return ret
	}
	return *o.AuthProtocol.Get()
}

// GetAuthProtocolOk returns a tuple with the AuthProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpUser) GetAuthProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthProtocol.Get(), o.AuthProtocol.IsSet()
}

// HasAuthProtocol returns a boolean if a field has been set.
func (o *SnmpUser) HasAuthProtocol() bool {
	if o != nil && o.AuthProtocol.IsSet() {
		return true
	}

	return false
}

// SetAuthProtocol gets a reference to the given NullableString and assigns it to the AuthProtocol field.
func (o *SnmpUser) SetAuthProtocol(v string) {
	o.AuthProtocol.Set(&v)
}
// SetAuthProtocolNil sets the value for AuthProtocol to be an explicit nil
func (o *SnmpUser) SetAuthProtocolNil() {
	o.AuthProtocol.Set(nil)
}

// UnsetAuthProtocol ensures that no value is present for AuthProtocol, not even an explicit nil
func (o *SnmpUser) UnsetAuthProtocol() {
	o.AuthProtocol.Unset()
}

// GetContextName returns the ContextName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpUser) GetContextName() string {
	if o == nil || IsNil(o.ContextName.Get()) {
		var ret string
		return ret
	}
	return *o.ContextName.Get()
}

// GetContextNameOk returns a tuple with the ContextName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpUser) GetContextNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContextName.Get(), o.ContextName.IsSet()
}

// HasContextName returns a boolean if a field has been set.
func (o *SnmpUser) HasContextName() bool {
	if o != nil && o.ContextName.IsSet() {
		return true
	}

	return false
}

// SetContextName gets a reference to the given NullableString and assigns it to the ContextName field.
func (o *SnmpUser) SetContextName(v string) {
	o.ContextName.Set(&v)
}
// SetContextNameNil sets the value for ContextName to be an explicit nil
func (o *SnmpUser) SetContextNameNil() {
	o.ContextName.Set(nil)
}

// UnsetContextName ensures that no value is present for ContextName, not even an explicit nil
func (o *SnmpUser) UnsetContextName() {
	o.ContextName.Unset()
}

// GetEngineId returns the EngineId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpUser) GetEngineId() string {
	if o == nil || IsNil(o.EngineId.Get()) {
		var ret string
		return ret
	}
	return *o.EngineId.Get()
}

// GetEngineIdOk returns a tuple with the EngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpUser) GetEngineIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EngineId.Get(), o.EngineId.IsSet()
}

// HasEngineId returns a boolean if a field has been set.
func (o *SnmpUser) HasEngineId() bool {
	if o != nil && o.EngineId.IsSet() {
		return true
	}

	return false
}

// SetEngineId gets a reference to the given NullableString and assigns it to the EngineId field.
func (o *SnmpUser) SetEngineId(v string) {
	o.EngineId.Set(&v)
}
// SetEngineIdNil sets the value for EngineId to be an explicit nil
func (o *SnmpUser) SetEngineIdNil() {
	o.EngineId.Set(nil)
}

// UnsetEngineId ensures that no value is present for EngineId, not even an explicit nil
func (o *SnmpUser) UnsetEngineId() {
	o.EngineId.Unset()
}

// GetPrivPassword returns the PrivPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpUser) GetPrivPassword() string {
	if o == nil || IsNil(o.PrivPassword.Get()) {
		var ret string
		return ret
	}
	return *o.PrivPassword.Get()
}

// GetPrivPasswordOk returns a tuple with the PrivPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpUser) GetPrivPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivPassword.Get(), o.PrivPassword.IsSet()
}

// HasPrivPassword returns a boolean if a field has been set.
func (o *SnmpUser) HasPrivPassword() bool {
	if o != nil && o.PrivPassword.IsSet() {
		return true
	}

	return false
}

// SetPrivPassword gets a reference to the given NullableString and assigns it to the PrivPassword field.
func (o *SnmpUser) SetPrivPassword(v string) {
	o.PrivPassword.Set(&v)
}
// SetPrivPasswordNil sets the value for PrivPassword to be an explicit nil
func (o *SnmpUser) SetPrivPasswordNil() {
	o.PrivPassword.Set(nil)
}

// UnsetPrivPassword ensures that no value is present for PrivPassword, not even an explicit nil
func (o *SnmpUser) UnsetPrivPassword() {
	o.PrivPassword.Unset()
}

// GetPrivProtocol returns the PrivProtocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpUser) GetPrivProtocol() string {
	if o == nil || IsNil(o.PrivProtocol.Get()) {
		var ret string
		return ret
	}
	return *o.PrivProtocol.Get()
}

// GetPrivProtocolOk returns a tuple with the PrivProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpUser) GetPrivProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivProtocol.Get(), o.PrivProtocol.IsSet()
}

// HasPrivProtocol returns a boolean if a field has been set.
func (o *SnmpUser) HasPrivProtocol() bool {
	if o != nil && o.PrivProtocol.IsSet() {
		return true
	}

	return false
}

// SetPrivProtocol gets a reference to the given NullableString and assigns it to the PrivProtocol field.
func (o *SnmpUser) SetPrivProtocol(v string) {
	o.PrivProtocol.Set(&v)
}
// SetPrivProtocolNil sets the value for PrivProtocol to be an explicit nil
func (o *SnmpUser) SetPrivProtocolNil() {
	o.PrivProtocol.Set(nil)
}

// UnsetPrivProtocol ensures that no value is present for PrivProtocol, not even an explicit nil
func (o *SnmpUser) UnsetPrivProtocol() {
	o.PrivProtocol.Unset()
}

// GetSecurityLevel returns the SecurityLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpUser) GetSecurityLevel() string {
	if o == nil || IsNil(o.SecurityLevel.Get()) {
		var ret string
		return ret
	}
	return *o.SecurityLevel.Get()
}

// GetSecurityLevelOk returns a tuple with the SecurityLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpUser) GetSecurityLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityLevel.Get(), o.SecurityLevel.IsSet()
}

// HasSecurityLevel returns a boolean if a field has been set.
func (o *SnmpUser) HasSecurityLevel() bool {
	if o != nil && o.SecurityLevel.IsSet() {
		return true
	}

	return false
}

// SetSecurityLevel gets a reference to the given NullableString and assigns it to the SecurityLevel field.
func (o *SnmpUser) SetSecurityLevel(v string) {
	o.SecurityLevel.Set(&v)
}
// SetSecurityLevelNil sets the value for SecurityLevel to be an explicit nil
func (o *SnmpUser) SetSecurityLevelNil() {
	o.SecurityLevel.Set(nil)
}

// UnsetSecurityLevel ensures that no value is present for SecurityLevel, not even an explicit nil
func (o *SnmpUser) UnsetSecurityLevel() {
	o.SecurityLevel.Unset()
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpUser) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpUser) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *SnmpUser) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *SnmpUser) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *SnmpUser) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *SnmpUser) UnsetUserName() {
	o.UserName.Unset()
}

// GetUserType returns the UserType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpUser) GetUserType() string {
	if o == nil || IsNil(o.UserType.Get()) {
		var ret string
		return ret
	}
	return *o.UserType.Get()
}

// GetUserTypeOk returns a tuple with the UserType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpUser) GetUserTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserType.Get(), o.UserType.IsSet()
}

// HasUserType returns a boolean if a field has been set.
func (o *SnmpUser) HasUserType() bool {
	if o != nil && o.UserType.IsSet() {
		return true
	}

	return false
}

// SetUserType gets a reference to the given NullableString and assigns it to the UserType field.
func (o *SnmpUser) SetUserType(v string) {
	o.UserType.Set(&v)
}
// SetUserTypeNil sets the value for UserType to be an explicit nil
func (o *SnmpUser) SetUserTypeNil() {
	o.UserType.Set(nil)
}

// UnsetUserType ensures that no value is present for UserType, not even an explicit nil
func (o *SnmpUser) UnsetUserType() {
	o.UserType.Unset()
}

func (o SnmpUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnmpUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthPassword.IsSet() {
		toSerialize["authPassword"] = o.AuthPassword.Get()
	}
	if o.AuthProtocol.IsSet() {
		toSerialize["authProtocol"] = o.AuthProtocol.Get()
	}
	if o.ContextName.IsSet() {
		toSerialize["contextName"] = o.ContextName.Get()
	}
	if o.EngineId.IsSet() {
		toSerialize["engineId"] = o.EngineId.Get()
	}
	if o.PrivPassword.IsSet() {
		toSerialize["privPassword"] = o.PrivPassword.Get()
	}
	if o.PrivProtocol.IsSet() {
		toSerialize["privProtocol"] = o.PrivProtocol.Get()
	}
	if o.SecurityLevel.IsSet() {
		toSerialize["securityLevel"] = o.SecurityLevel.Get()
	}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	if o.UserType.IsSet() {
		toSerialize["userType"] = o.UserType.Get()
	}
	return toSerialize, nil
}

type NullableSnmpUser struct {
	value *SnmpUser
	isSet bool
}

func (v NullableSnmpUser) Get() *SnmpUser {
	return v.value
}

func (v *NullableSnmpUser) Set(val *SnmpUser) {
	v.value = val
	v.isSet = true
}

func (v NullableSnmpUser) IsSet() bool {
	return v.isSet
}

func (v *NullableSnmpUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnmpUser(val *SnmpUser) *NullableSnmpUser {
	return &NullableSnmpUser{value: val, isSet: true}
}

func (v NullableSnmpUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnmpUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


