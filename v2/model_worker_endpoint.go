/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the WorkerEndpoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkerEndpoint{}

// WorkerEndpoint Definition of worker endpoint to which client should connect to access data and metadata of the object.
type WorkerEndpoint struct {
	// Specifies the end point of the worker which is combination of both endpoint and port number.
	Endpoint *string `json:"endpoint,omitempty"`
}

// NewWorkerEndpoint instantiates a new WorkerEndpoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkerEndpoint() *WorkerEndpoint {
	this := WorkerEndpoint{}
	return &this
}

// NewWorkerEndpointWithDefaults instantiates a new WorkerEndpoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkerEndpointWithDefaults() *WorkerEndpoint {
	this := WorkerEndpoint{}
	return &this
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise.
func (o *WorkerEndpoint) GetEndpoint() string {
	if o == nil || IsNil(o.Endpoint) {
		var ret string
		return ret
	}
	return *o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerEndpoint) GetEndpointOk() (*string, bool) {
	if o == nil || IsNil(o.Endpoint) {
		return nil, false
	}
	return o.Endpoint, true
}

// HasEndpoint returns a boolean if a field has been set.
func (o *WorkerEndpoint) HasEndpoint() bool {
	if o != nil && !IsNil(o.Endpoint) {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given string and assigns it to the Endpoint field.
func (o *WorkerEndpoint) SetEndpoint(v string) {
	o.Endpoint = &v
}

func (o WorkerEndpoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkerEndpoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Endpoint) {
		toSerialize["endpoint"] = o.Endpoint
	}
	return toSerialize, nil
}

type NullableWorkerEndpoint struct {
	value *WorkerEndpoint
	isSet bool
}

func (v NullableWorkerEndpoint) Get() *WorkerEndpoint {
	return v.value
}

func (v *NullableWorkerEndpoint) Set(val *WorkerEndpoint) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerEndpoint) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerEndpoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerEndpoint(val *WorkerEndpoint) *NullableWorkerEndpoint {
	return &NullableWorkerEndpoint{value: val, isSet: true}
}

func (v NullableWorkerEndpoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerEndpoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


