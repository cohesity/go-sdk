/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the IpmiSdrInfoEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpmiSdrInfoEntry{}

// IpmiSdrInfoEntry Specifies a single entry in the sdr info for the ipmi.
type IpmiSdrInfoEntry struct {
	// Specifies the description of the event corresponding to the sensor entry.
	EventDescription NullableString `json:"eventDescription,omitempty"`
	// Specifies the id of the sensor.
	Id NullableString `json:"id,omitempty"`
	// Specifies the reading of the sensor.
	Reading NullableString `json:"reading,omitempty"`
	// Specifies the type of sensor corresponding to the entry.
	SensorType NullableString `json:"sensorType,omitempty"`
	// Specifies the status of the sensor.
	Status NullableString `json:"status,omitempty"`
}

// NewIpmiSdrInfoEntry instantiates a new IpmiSdrInfoEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpmiSdrInfoEntry() *IpmiSdrInfoEntry {
	this := IpmiSdrInfoEntry{}
	return &this
}

// NewIpmiSdrInfoEntryWithDefaults instantiates a new IpmiSdrInfoEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpmiSdrInfoEntryWithDefaults() *IpmiSdrInfoEntry {
	this := IpmiSdrInfoEntry{}
	return &this
}

// GetEventDescription returns the EventDescription field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSdrInfoEntry) GetEventDescription() string {
	if o == nil || IsNil(o.EventDescription.Get()) {
		var ret string
		return ret
	}
	return *o.EventDescription.Get()
}

// GetEventDescriptionOk returns a tuple with the EventDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSdrInfoEntry) GetEventDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventDescription.Get(), o.EventDescription.IsSet()
}

// HasEventDescription returns a boolean if a field has been set.
func (o *IpmiSdrInfoEntry) HasEventDescription() bool {
	if o != nil && o.EventDescription.IsSet() {
		return true
	}

	return false
}

// SetEventDescription gets a reference to the given NullableString and assigns it to the EventDescription field.
func (o *IpmiSdrInfoEntry) SetEventDescription(v string) {
	o.EventDescription.Set(&v)
}
// SetEventDescriptionNil sets the value for EventDescription to be an explicit nil
func (o *IpmiSdrInfoEntry) SetEventDescriptionNil() {
	o.EventDescription.Set(nil)
}

// UnsetEventDescription ensures that no value is present for EventDescription, not even an explicit nil
func (o *IpmiSdrInfoEntry) UnsetEventDescription() {
	o.EventDescription.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSdrInfoEntry) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSdrInfoEntry) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *IpmiSdrInfoEntry) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *IpmiSdrInfoEntry) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *IpmiSdrInfoEntry) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *IpmiSdrInfoEntry) UnsetId() {
	o.Id.Unset()
}

// GetReading returns the Reading field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSdrInfoEntry) GetReading() string {
	if o == nil || IsNil(o.Reading.Get()) {
		var ret string
		return ret
	}
	return *o.Reading.Get()
}

// GetReadingOk returns a tuple with the Reading field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSdrInfoEntry) GetReadingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reading.Get(), o.Reading.IsSet()
}

// HasReading returns a boolean if a field has been set.
func (o *IpmiSdrInfoEntry) HasReading() bool {
	if o != nil && o.Reading.IsSet() {
		return true
	}

	return false
}

// SetReading gets a reference to the given NullableString and assigns it to the Reading field.
func (o *IpmiSdrInfoEntry) SetReading(v string) {
	o.Reading.Set(&v)
}
// SetReadingNil sets the value for Reading to be an explicit nil
func (o *IpmiSdrInfoEntry) SetReadingNil() {
	o.Reading.Set(nil)
}

// UnsetReading ensures that no value is present for Reading, not even an explicit nil
func (o *IpmiSdrInfoEntry) UnsetReading() {
	o.Reading.Unset()
}

// GetSensorType returns the SensorType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSdrInfoEntry) GetSensorType() string {
	if o == nil || IsNil(o.SensorType.Get()) {
		var ret string
		return ret
	}
	return *o.SensorType.Get()
}

// GetSensorTypeOk returns a tuple with the SensorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSdrInfoEntry) GetSensorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SensorType.Get(), o.SensorType.IsSet()
}

// HasSensorType returns a boolean if a field has been set.
func (o *IpmiSdrInfoEntry) HasSensorType() bool {
	if o != nil && o.SensorType.IsSet() {
		return true
	}

	return false
}

// SetSensorType gets a reference to the given NullableString and assigns it to the SensorType field.
func (o *IpmiSdrInfoEntry) SetSensorType(v string) {
	o.SensorType.Set(&v)
}
// SetSensorTypeNil sets the value for SensorType to be an explicit nil
func (o *IpmiSdrInfoEntry) SetSensorTypeNil() {
	o.SensorType.Set(nil)
}

// UnsetSensorType ensures that no value is present for SensorType, not even an explicit nil
func (o *IpmiSdrInfoEntry) UnsetSensorType() {
	o.SensorType.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSdrInfoEntry) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSdrInfoEntry) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *IpmiSdrInfoEntry) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *IpmiSdrInfoEntry) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *IpmiSdrInfoEntry) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *IpmiSdrInfoEntry) UnsetStatus() {
	o.Status.Unset()
}

func (o IpmiSdrInfoEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpmiSdrInfoEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EventDescription.IsSet() {
		toSerialize["eventDescription"] = o.EventDescription.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Reading.IsSet() {
		toSerialize["reading"] = o.Reading.Get()
	}
	if o.SensorType.IsSet() {
		toSerialize["sensorType"] = o.SensorType.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return toSerialize, nil
}

type NullableIpmiSdrInfoEntry struct {
	value *IpmiSdrInfoEntry
	isSet bool
}

func (v NullableIpmiSdrInfoEntry) Get() *IpmiSdrInfoEntry {
	return v.value
}

func (v *NullableIpmiSdrInfoEntry) Set(val *IpmiSdrInfoEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableIpmiSdrInfoEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableIpmiSdrInfoEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpmiSdrInfoEntry(val *IpmiSdrInfoEntry) *NullableIpmiSdrInfoEntry {
	return &NullableIpmiSdrInfoEntry{value: val, isSet: true}
}

func (v NullableIpmiSdrInfoEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpmiSdrInfoEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


