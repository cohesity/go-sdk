/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the HeliosRetention type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosRetention{}

// HeliosRetention Specifies the retention of a backup.
type HeliosRetention struct {
	DataLockConfig *DataLockConfig `json:"dataLockConfig,omitempty"`
	// Specifies the duration for a backup retention. <br> Example. If duration is 7 and unit is Months, the retention of a backup is 7 * 30 = 210 days.
	Duration NullableInt64 `json:"duration,omitempty"`
	// Specifies the list of tiers where backup will be moved. This will be populated only if poilcy type is DMaaS.
	Tiers []HeliosTier `json:"tiers,omitempty"`
	// Specificies the Retention Unit of a backup measured in days, months or years. <br> If unit is 'Months', then number specified in duration is multiplied to 30. <br> Example: If duration is 4 and unit is 'Months' then number of retention days will be 30 * 4 = 120 days. <br> If unit is 'Years', then number specified in duration is multiplied to 365. <br> If duration is 2 and unit is 'Months' then number of retention days will be 365 * 2 = 730 days.
	Unit NullableString `json:"unit,omitempty"`
}

// NewHeliosRetention instantiates a new HeliosRetention object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosRetention() *HeliosRetention {
	this := HeliosRetention{}
	return &this
}

// NewHeliosRetentionWithDefaults instantiates a new HeliosRetention object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosRetentionWithDefaults() *HeliosRetention {
	this := HeliosRetention{}
	return &this
}

// GetDataLockConfig returns the DataLockConfig field value if set, zero value otherwise.
func (o *HeliosRetention) GetDataLockConfig() DataLockConfig {
	if o == nil || IsNil(o.DataLockConfig) {
		var ret DataLockConfig
		return ret
	}
	return *o.DataLockConfig
}

// GetDataLockConfigOk returns a tuple with the DataLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRetention) GetDataLockConfigOk() (*DataLockConfig, bool) {
	if o == nil || IsNil(o.DataLockConfig) {
		return nil, false
	}
	return o.DataLockConfig, true
}

// HasDataLockConfig returns a boolean if a field has been set.
func (o *HeliosRetention) HasDataLockConfig() bool {
	if o != nil && !IsNil(o.DataLockConfig) {
		return true
	}

	return false
}

// SetDataLockConfig gets a reference to the given DataLockConfig and assigns it to the DataLockConfig field.
func (o *HeliosRetention) SetDataLockConfig(v DataLockConfig) {
	o.DataLockConfig = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosRetention) GetDuration() int64 {
	if o == nil || IsNil(o.Duration.Get()) {
		var ret int64
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosRetention) GetDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *HeliosRetention) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableInt64 and assigns it to the Duration field.
func (o *HeliosRetention) SetDuration(v int64) {
	o.Duration.Set(&v)
}
// SetDurationNil sets the value for Duration to be an explicit nil
func (o *HeliosRetention) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *HeliosRetention) UnsetDuration() {
	o.Duration.Unset()
}

// GetTiers returns the Tiers field value if set, zero value otherwise.
func (o *HeliosRetention) GetTiers() []HeliosTier {
	if o == nil || IsNil(o.Tiers) {
		var ret []HeliosTier
		return ret
	}
	return o.Tiers
}

// GetTiersOk returns a tuple with the Tiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRetention) GetTiersOk() ([]HeliosTier, bool) {
	if o == nil || IsNil(o.Tiers) {
		return nil, false
	}
	return o.Tiers, true
}

// HasTiers returns a boolean if a field has been set.
func (o *HeliosRetention) HasTiers() bool {
	if o != nil && !IsNil(o.Tiers) {
		return true
	}

	return false
}

// SetTiers gets a reference to the given []HeliosTier and assigns it to the Tiers field.
func (o *HeliosRetention) SetTiers(v []HeliosTier) {
	o.Tiers = v
}

// GetUnit returns the Unit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosRetention) GetUnit() string {
	if o == nil || IsNil(o.Unit.Get()) {
		var ret string
		return ret
	}
	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosRetention) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// HasUnit returns a boolean if a field has been set.
func (o *HeliosRetention) HasUnit() bool {
	if o != nil && o.Unit.IsSet() {
		return true
	}

	return false
}

// SetUnit gets a reference to the given NullableString and assigns it to the Unit field.
func (o *HeliosRetention) SetUnit(v string) {
	o.Unit.Set(&v)
}
// SetUnitNil sets the value for Unit to be an explicit nil
func (o *HeliosRetention) SetUnitNil() {
	o.Unit.Set(nil)
}

// UnsetUnit ensures that no value is present for Unit, not even an explicit nil
func (o *HeliosRetention) UnsetUnit() {
	o.Unit.Unset()
}

func (o HeliosRetention) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosRetention) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataLockConfig) {
		toSerialize["dataLockConfig"] = o.DataLockConfig
	}
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if !IsNil(o.Tiers) {
		toSerialize["tiers"] = o.Tiers
	}
	if o.Unit.IsSet() {
		toSerialize["unit"] = o.Unit.Get()
	}
	return toSerialize, nil
}

type NullableHeliosRetention struct {
	value *HeliosRetention
	isSet bool
}

func (v NullableHeliosRetention) Get() *HeliosRetention {
	return v.value
}

func (v *NullableHeliosRetention) Set(val *HeliosRetention) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosRetention) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosRetention) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosRetention(val *HeliosRetention) *NullableHeliosRetention {
	return &NullableHeliosRetention{value: val, isSet: true}
}

func (v NullableHeliosRetention) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosRetention) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


