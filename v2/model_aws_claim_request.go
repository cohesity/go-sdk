/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AWSClaimRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AWSClaimRequest{}

// AWSClaimRequest Request to register the appliance with AWS.
type AWSClaimRequest struct {
	// The registration URL including the registration token, as obtained from AWS.
	RegistrationURL string `json:"registrationURL"`
}

type _AWSClaimRequest AWSClaimRequest

// NewAWSClaimRequest instantiates a new AWSClaimRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSClaimRequest(registrationURL string) *AWSClaimRequest {
	this := AWSClaimRequest{}
	this.RegistrationURL = registrationURL
	return &this
}

// NewAWSClaimRequestWithDefaults instantiates a new AWSClaimRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSClaimRequestWithDefaults() *AWSClaimRequest {
	this := AWSClaimRequest{}
	return &this
}

// GetRegistrationURL returns the RegistrationURL field value
func (o *AWSClaimRequest) GetRegistrationURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RegistrationURL
}

// GetRegistrationURLOk returns a tuple with the RegistrationURL field value
// and a boolean to check if the value has been set.
func (o *AWSClaimRequest) GetRegistrationURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RegistrationURL, true
}

// SetRegistrationURL sets field value
func (o *AWSClaimRequest) SetRegistrationURL(v string) {
	o.RegistrationURL = v
}

func (o AWSClaimRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AWSClaimRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["registrationURL"] = o.RegistrationURL
	return toSerialize, nil
}

func (o *AWSClaimRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registrationURL",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAWSClaimRequest := _AWSClaimRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAWSClaimRequest)

	if err != nil {
		return err
	}

	*o = AWSClaimRequest(varAWSClaimRequest)

	return err
}

type NullableAWSClaimRequest struct {
	value *AWSClaimRequest
	isSet bool
}

func (v NullableAWSClaimRequest) Get() *AWSClaimRequest {
	return v.value
}

func (v *NullableAWSClaimRequest) Set(val *AWSClaimRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSClaimRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSClaimRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSClaimRequest(val *AWSClaimRequest) *NullableAWSClaimRequest {
	return &NullableAWSClaimRequest{value: val, isSet: true}
}

func (v NullableAWSClaimRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSClaimRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


