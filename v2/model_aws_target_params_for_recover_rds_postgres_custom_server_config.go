/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsTargetParamsForRecoverRDSPostgresCustomServerConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsTargetParamsForRecoverRDSPostgresCustomServerConfig{}

// AwsTargetParamsForRecoverRDSPostgresCustomServerConfig Specifies the custom destination Server configuration parameters where the RDS Postgres instances will be recovered.
type AwsTargetParamsForRecoverRDSPostgresCustomServerConfig struct {
	// Specifies the Ip in which to deploy the Rds objects.
	Ip string `json:"ip"`
	// Specifies the port to use to connect to the server.
	Port NullableInt32 `json:"port"`
	Region NullableRecoverRDSPostgresCustomServerConfigRegion `json:"region"`
	Source NullableRecoverRDSPostgresCustomServerConfigSource `json:"source,omitempty"`
	StandardCredentials Credentials `json:"standardCredentials"`
}

type _AwsTargetParamsForRecoverRDSPostgresCustomServerConfig AwsTargetParamsForRecoverRDSPostgresCustomServerConfig

// NewAwsTargetParamsForRecoverRDSPostgresCustomServerConfig instantiates a new AwsTargetParamsForRecoverRDSPostgresCustomServerConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsTargetParamsForRecoverRDSPostgresCustomServerConfig(ip string, port NullableInt32, region NullableRecoverRDSPostgresCustomServerConfigRegion, standardCredentials Credentials) *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig {
	this := AwsTargetParamsForRecoverRDSPostgresCustomServerConfig{}
	this.Ip = ip
	this.Port = port
	this.Region = region
	this.StandardCredentials = standardCredentials
	return &this
}

// NewAwsTargetParamsForRecoverRDSPostgresCustomServerConfigWithDefaults instantiates a new AwsTargetParamsForRecoverRDSPostgresCustomServerConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsTargetParamsForRecoverRDSPostgresCustomServerConfigWithDefaults() *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig {
	this := AwsTargetParamsForRecoverRDSPostgresCustomServerConfig{}
	return &this
}

// GetIp returns the Ip field value
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) GetIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Ip
}

// GetIpOk returns a tuple with the Ip field value
// and a boolean to check if the value has been set.
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Ip, true
}

// SetIp sets field value
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) SetIp(v string) {
	o.Ip = v
}

// GetPort returns the Port field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) GetPort() int32 {
	if o == nil || o.Port.Get() == nil {
		var ret int32
		return ret
	}

	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// SetPort sets field value
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) SetPort(v int32) {
	o.Port.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for RecoverRDSPostgresCustomServerConfigRegion will be returned
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) GetRegion() RecoverRDSPostgresCustomServerConfigRegion {
	if o == nil || o.Region.Get() == nil {
		var ret RecoverRDSPostgresCustomServerConfigRegion
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) GetRegionOk() (*RecoverRDSPostgresCustomServerConfigRegion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) SetRegion(v RecoverRDSPostgresCustomServerConfigRegion) {
	o.Region.Set(&v)
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) GetSource() RecoverRDSPostgresCustomServerConfigSource {
	if o == nil || IsNil(o.Source.Get()) {
		var ret RecoverRDSPostgresCustomServerConfigSource
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) GetSourceOk() (*RecoverRDSPostgresCustomServerConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableRecoverRDSPostgresCustomServerConfigSource and assigns it to the Source field.
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) SetSource(v RecoverRDSPostgresCustomServerConfigSource) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) UnsetSource() {
	o.Source.Unset()
}

// GetStandardCredentials returns the StandardCredentials field value
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) GetStandardCredentials() Credentials {
	if o == nil {
		var ret Credentials
		return ret
	}

	return o.StandardCredentials
}

// GetStandardCredentialsOk returns a tuple with the StandardCredentials field value
// and a boolean to check if the value has been set.
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) GetStandardCredentialsOk() (*Credentials, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StandardCredentials, true
}

// SetStandardCredentials sets field value
func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) SetStandardCredentials(v Credentials) {
	o.StandardCredentials = v
}

func (o AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ip"] = o.Ip
	toSerialize["port"] = o.Port.Get()
	toSerialize["region"] = o.Region.Get()
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	toSerialize["standardCredentials"] = o.StandardCredentials
	return toSerialize, nil
}

func (o *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ip",
		"port",
		"region",
		"standardCredentials",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsTargetParamsForRecoverRDSPostgresCustomServerConfig := _AwsTargetParamsForRecoverRDSPostgresCustomServerConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsTargetParamsForRecoverRDSPostgresCustomServerConfig)

	if err != nil {
		return err
	}

	*o = AwsTargetParamsForRecoverRDSPostgresCustomServerConfig(varAwsTargetParamsForRecoverRDSPostgresCustomServerConfig)

	return err
}

type NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig struct {
	value *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig
	isSet bool
}

func (v NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig) Get() *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig {
	return v.value
}

func (v *NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig) Set(val *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig(val *AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) *NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig {
	return &NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig{value: val, isSet: true}
}

func (v NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


