/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TimeSeriesStatsForMetric type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeSeriesStatsForMetric{}

// TimeSeriesStatsForMetric Specifies the time series stats for a metric.
type TimeSeriesStatsForMetric struct {
	// Specifies a list of data points.
	DataPoints []DataPoint `json:"dataPoints,omitempty"`
	// Specifies the metric name.
	MetricName NullableString `json:"metricName,omitempty"`
	// Specifies the type of the data points.
	Type NullableString `json:"type,omitempty"`
}

// NewTimeSeriesStatsForMetric instantiates a new TimeSeriesStatsForMetric object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeSeriesStatsForMetric() *TimeSeriesStatsForMetric {
	this := TimeSeriesStatsForMetric{}
	return &this
}

// NewTimeSeriesStatsForMetricWithDefaults instantiates a new TimeSeriesStatsForMetric object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeSeriesStatsForMetricWithDefaults() *TimeSeriesStatsForMetric {
	this := TimeSeriesStatsForMetric{}
	return &this
}

// GetDataPoints returns the DataPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeSeriesStatsForMetric) GetDataPoints() []DataPoint {
	if o == nil {
		var ret []DataPoint
		return ret
	}
	return o.DataPoints
}

// GetDataPointsOk returns a tuple with the DataPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeSeriesStatsForMetric) GetDataPointsOk() ([]DataPoint, bool) {
	if o == nil || IsNil(o.DataPoints) {
		return nil, false
	}
	return o.DataPoints, true
}

// HasDataPoints returns a boolean if a field has been set.
func (o *TimeSeriesStatsForMetric) HasDataPoints() bool {
	if o != nil && !IsNil(o.DataPoints) {
		return true
	}

	return false
}

// SetDataPoints gets a reference to the given []DataPoint and assigns it to the DataPoints field.
func (o *TimeSeriesStatsForMetric) SetDataPoints(v []DataPoint) {
	o.DataPoints = v
}

// GetMetricName returns the MetricName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeSeriesStatsForMetric) GetMetricName() string {
	if o == nil || IsNil(o.MetricName.Get()) {
		var ret string
		return ret
	}
	return *o.MetricName.Get()
}

// GetMetricNameOk returns a tuple with the MetricName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeSeriesStatsForMetric) GetMetricNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetricName.Get(), o.MetricName.IsSet()
}

// HasMetricName returns a boolean if a field has been set.
func (o *TimeSeriesStatsForMetric) HasMetricName() bool {
	if o != nil && o.MetricName.IsSet() {
		return true
	}

	return false
}

// SetMetricName gets a reference to the given NullableString and assigns it to the MetricName field.
func (o *TimeSeriesStatsForMetric) SetMetricName(v string) {
	o.MetricName.Set(&v)
}
// SetMetricNameNil sets the value for MetricName to be an explicit nil
func (o *TimeSeriesStatsForMetric) SetMetricNameNil() {
	o.MetricName.Set(nil)
}

// UnsetMetricName ensures that no value is present for MetricName, not even an explicit nil
func (o *TimeSeriesStatsForMetric) UnsetMetricName() {
	o.MetricName.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeSeriesStatsForMetric) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeSeriesStatsForMetric) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *TimeSeriesStatsForMetric) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *TimeSeriesStatsForMetric) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *TimeSeriesStatsForMetric) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *TimeSeriesStatsForMetric) UnsetType() {
	o.Type.Unset()
}

func (o TimeSeriesStatsForMetric) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeSeriesStatsForMetric) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DataPoints != nil {
		toSerialize["dataPoints"] = o.DataPoints
	}
	if o.MetricName.IsSet() {
		toSerialize["metricName"] = o.MetricName.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableTimeSeriesStatsForMetric struct {
	value *TimeSeriesStatsForMetric
	isSet bool
}

func (v NullableTimeSeriesStatsForMetric) Get() *TimeSeriesStatsForMetric {
	return v.value
}

func (v *NullableTimeSeriesStatsForMetric) Set(val *TimeSeriesStatsForMetric) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeSeriesStatsForMetric) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeSeriesStatsForMetric) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeSeriesStatsForMetric(val *TimeSeriesStatsForMetric) *NullableTimeSeriesStatsForMetric {
	return &NullableTimeSeriesStatsForMetric{value: val, isSet: true}
}

func (v NullableTimeSeriesStatsForMetric) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeSeriesStatsForMetric) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


