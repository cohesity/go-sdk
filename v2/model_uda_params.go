/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UdaParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaParams{}

// UdaParams Specifies the recovery options specific to Universal Data Adapter environment.
type UdaParams struct {
	RecoverUdaParams RecoverUdaParams `json:"recoverUdaParams"`
	// Specifies the type of recover action to be performed.
	RecoveryAction string `json:"recoveryAction"`
}

type _UdaParams UdaParams

// NewUdaParams instantiates a new UdaParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaParams(recoverUdaParams RecoverUdaParams, recoveryAction string) *UdaParams {
	this := UdaParams{}
	this.RecoverUdaParams = recoverUdaParams
	this.RecoveryAction = recoveryAction
	return &this
}

// NewUdaParamsWithDefaults instantiates a new UdaParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaParamsWithDefaults() *UdaParams {
	this := UdaParams{}
	return &this
}

// GetRecoverUdaParams returns the RecoverUdaParams field value
func (o *UdaParams) GetRecoverUdaParams() RecoverUdaParams {
	if o == nil {
		var ret RecoverUdaParams
		return ret
	}

	return o.RecoverUdaParams
}

// GetRecoverUdaParamsOk returns a tuple with the RecoverUdaParams field value
// and a boolean to check if the value has been set.
func (o *UdaParams) GetRecoverUdaParamsOk() (*RecoverUdaParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoverUdaParams, true
}

// SetRecoverUdaParams sets field value
func (o *UdaParams) SetRecoverUdaParams(v RecoverUdaParams) {
	o.RecoverUdaParams = v
}

// GetRecoveryAction returns the RecoveryAction field value
func (o *UdaParams) GetRecoveryAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecoveryAction
}

// GetRecoveryActionOk returns a tuple with the RecoveryAction field value
// and a boolean to check if the value has been set.
func (o *UdaParams) GetRecoveryActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoveryAction, true
}

// SetRecoveryAction sets field value
func (o *UdaParams) SetRecoveryAction(v string) {
	o.RecoveryAction = v
}

func (o UdaParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recoverUdaParams"] = o.RecoverUdaParams
	toSerialize["recoveryAction"] = o.RecoveryAction
	return toSerialize, nil
}

func (o *UdaParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoverUdaParams",
		"recoveryAction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUdaParams := _UdaParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUdaParams)

	if err != nil {
		return err
	}

	*o = UdaParams(varUdaParams)

	return err
}

type NullableUdaParams struct {
	value *UdaParams
	isSet bool
}

func (v NullableUdaParams) Get() *UdaParams {
	return v.value
}

func (v *NullableUdaParams) Set(val *UdaParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaParams(val *UdaParams) *NullableUdaParams {
	return &NullableUdaParams{value: val, isSet: true}
}

func (v NullableUdaParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


