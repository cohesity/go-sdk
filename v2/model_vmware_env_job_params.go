/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the VmwareEnvJobParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmwareEnvJobParams{}

// VmwareEnvJobParams Specifies job parameters applicable for all 'kVMware' Environment type Protection Sources in a Protection Job.
type VmwareEnvJobParams struct {
	// Specifies the list of Disks to be excluded from backing up. These disks are excluded from all Protection Sources in the Protection Job.
	ExcludedDisks []DiskInfo `json:"excludedDisks,omitempty"`
	// If true, takes a crash-consistent snapshot when app-consistent snapshot fails. Otherwise, the snapshot attempt is marked failed.
	FallbackToCrashConsistent NullableBool `json:"fallbackToCrashConsistent,omitempty"`
	// If true, skip physical RDM disks when backing up VMs. Otherwise, backup of VMs having physical RDM will fail.
	SkipPhysicalRdmDisks NullableBool `json:"skipPhysicalRdmDisks,omitempty"`
}

// NewVmwareEnvJobParams instantiates a new VmwareEnvJobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareEnvJobParams() *VmwareEnvJobParams {
	this := VmwareEnvJobParams{}
	return &this
}

// NewVmwareEnvJobParamsWithDefaults instantiates a new VmwareEnvJobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareEnvJobParamsWithDefaults() *VmwareEnvJobParams {
	this := VmwareEnvJobParams{}
	return &this
}

// GetExcludedDisks returns the ExcludedDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareEnvJobParams) GetExcludedDisks() []DiskInfo {
	if o == nil {
		var ret []DiskInfo
		return ret
	}
	return o.ExcludedDisks
}

// GetExcludedDisksOk returns a tuple with the ExcludedDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareEnvJobParams) GetExcludedDisksOk() ([]DiskInfo, bool) {
	if o == nil || IsNil(o.ExcludedDisks) {
		return nil, false
	}
	return o.ExcludedDisks, true
}

// HasExcludedDisks returns a boolean if a field has been set.
func (o *VmwareEnvJobParams) HasExcludedDisks() bool {
	if o != nil && !IsNil(o.ExcludedDisks) {
		return true
	}

	return false
}

// SetExcludedDisks gets a reference to the given []DiskInfo and assigns it to the ExcludedDisks field.
func (o *VmwareEnvJobParams) SetExcludedDisks(v []DiskInfo) {
	o.ExcludedDisks = v
}

// GetFallbackToCrashConsistent returns the FallbackToCrashConsistent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareEnvJobParams) GetFallbackToCrashConsistent() bool {
	if o == nil || IsNil(o.FallbackToCrashConsistent.Get()) {
		var ret bool
		return ret
	}
	return *o.FallbackToCrashConsistent.Get()
}

// GetFallbackToCrashConsistentOk returns a tuple with the FallbackToCrashConsistent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareEnvJobParams) GetFallbackToCrashConsistentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FallbackToCrashConsistent.Get(), o.FallbackToCrashConsistent.IsSet()
}

// HasFallbackToCrashConsistent returns a boolean if a field has been set.
func (o *VmwareEnvJobParams) HasFallbackToCrashConsistent() bool {
	if o != nil && o.FallbackToCrashConsistent.IsSet() {
		return true
	}

	return false
}

// SetFallbackToCrashConsistent gets a reference to the given NullableBool and assigns it to the FallbackToCrashConsistent field.
func (o *VmwareEnvJobParams) SetFallbackToCrashConsistent(v bool) {
	o.FallbackToCrashConsistent.Set(&v)
}
// SetFallbackToCrashConsistentNil sets the value for FallbackToCrashConsistent to be an explicit nil
func (o *VmwareEnvJobParams) SetFallbackToCrashConsistentNil() {
	o.FallbackToCrashConsistent.Set(nil)
}

// UnsetFallbackToCrashConsistent ensures that no value is present for FallbackToCrashConsistent, not even an explicit nil
func (o *VmwareEnvJobParams) UnsetFallbackToCrashConsistent() {
	o.FallbackToCrashConsistent.Unset()
}

// GetSkipPhysicalRdmDisks returns the SkipPhysicalRdmDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareEnvJobParams) GetSkipPhysicalRdmDisks() bool {
	if o == nil || IsNil(o.SkipPhysicalRdmDisks.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipPhysicalRdmDisks.Get()
}

// GetSkipPhysicalRdmDisksOk returns a tuple with the SkipPhysicalRdmDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareEnvJobParams) GetSkipPhysicalRdmDisksOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipPhysicalRdmDisks.Get(), o.SkipPhysicalRdmDisks.IsSet()
}

// HasSkipPhysicalRdmDisks returns a boolean if a field has been set.
func (o *VmwareEnvJobParams) HasSkipPhysicalRdmDisks() bool {
	if o != nil && o.SkipPhysicalRdmDisks.IsSet() {
		return true
	}

	return false
}

// SetSkipPhysicalRdmDisks gets a reference to the given NullableBool and assigns it to the SkipPhysicalRdmDisks field.
func (o *VmwareEnvJobParams) SetSkipPhysicalRdmDisks(v bool) {
	o.SkipPhysicalRdmDisks.Set(&v)
}
// SetSkipPhysicalRdmDisksNil sets the value for SkipPhysicalRdmDisks to be an explicit nil
func (o *VmwareEnvJobParams) SetSkipPhysicalRdmDisksNil() {
	o.SkipPhysicalRdmDisks.Set(nil)
}

// UnsetSkipPhysicalRdmDisks ensures that no value is present for SkipPhysicalRdmDisks, not even an explicit nil
func (o *VmwareEnvJobParams) UnsetSkipPhysicalRdmDisks() {
	o.SkipPhysicalRdmDisks.Unset()
}

func (o VmwareEnvJobParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmwareEnvJobParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludedDisks != nil {
		toSerialize["excludedDisks"] = o.ExcludedDisks
	}
	if o.FallbackToCrashConsistent.IsSet() {
		toSerialize["fallbackToCrashConsistent"] = o.FallbackToCrashConsistent.Get()
	}
	if o.SkipPhysicalRdmDisks.IsSet() {
		toSerialize["skipPhysicalRdmDisks"] = o.SkipPhysicalRdmDisks.Get()
	}
	return toSerialize, nil
}

type NullableVmwareEnvJobParams struct {
	value *VmwareEnvJobParams
	isSet bool
}

func (v NullableVmwareEnvJobParams) Get() *VmwareEnvJobParams {
	return v.value
}

func (v *NullableVmwareEnvJobParams) Set(val *VmwareEnvJobParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareEnvJobParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareEnvJobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareEnvJobParams(val *VmwareEnvJobParams) *NullableVmwareEnvJobParams {
	return &NullableVmwareEnvJobParams{value: val, isSet: true}
}

func (v NullableVmwareEnvJobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareEnvJobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


