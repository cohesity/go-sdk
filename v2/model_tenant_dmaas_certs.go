/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TenantDmaasCerts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantDmaasCerts{}

// TenantDmaasCerts Specifies a list of tenant certificates.
type TenantDmaasCerts struct {
	// Specifies a list of tenant certificates.
	Certificates []TenantDmaasCert `json:"certificates,omitempty"`
}

// NewTenantDmaasCerts instantiates a new TenantDmaasCerts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantDmaasCerts() *TenantDmaasCerts {
	this := TenantDmaasCerts{}
	return &this
}

// NewTenantDmaasCertsWithDefaults instantiates a new TenantDmaasCerts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantDmaasCertsWithDefaults() *TenantDmaasCerts {
	this := TenantDmaasCerts{}
	return &this
}

// GetCertificates returns the Certificates field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantDmaasCerts) GetCertificates() []TenantDmaasCert {
	if o == nil {
		var ret []TenantDmaasCert
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantDmaasCerts) GetCertificatesOk() ([]TenantDmaasCert, bool) {
	if o == nil || IsNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *TenantDmaasCerts) HasCertificates() bool {
	if o != nil && !IsNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []TenantDmaasCert and assigns it to the Certificates field.
func (o *TenantDmaasCerts) SetCertificates(v []TenantDmaasCert) {
	o.Certificates = v
}

func (o TenantDmaasCerts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantDmaasCerts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificates != nil {
		toSerialize["certificates"] = o.Certificates
	}
	return toSerialize, nil
}

type NullableTenantDmaasCerts struct {
	value *TenantDmaasCerts
	isSet bool
}

func (v NullableTenantDmaasCerts) Get() *TenantDmaasCerts {
	return v.value
}

func (v *NullableTenantDmaasCerts) Set(val *TenantDmaasCerts) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantDmaasCerts) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantDmaasCerts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantDmaasCerts(val *TenantDmaasCerts) *NullableTenantDmaasCerts {
	return &NullableTenantDmaasCerts{value: val, isSet: true}
}

func (v NullableTenantDmaasCerts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantDmaasCerts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


