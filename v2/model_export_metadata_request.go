/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ExportMetadataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExportMetadataRequest{}

// ExportMetadataRequest Request parameters for exporting the magneto master's metadata.
type ExportMetadataRequest struct {
	// Denotes the format in which the metadata will be exported.
	DataFormatType *string `json:"dataFormatType,omitempty"`
	Location *Location `json:"location,omitempty"`
	MetadataSelector *MetadataSelector `json:"metadataSelector,omitempty"`
}

// NewExportMetadataRequest instantiates a new ExportMetadataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExportMetadataRequest() *ExportMetadataRequest {
	this := ExportMetadataRequest{}
	return &this
}

// NewExportMetadataRequestWithDefaults instantiates a new ExportMetadataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExportMetadataRequestWithDefaults() *ExportMetadataRequest {
	this := ExportMetadataRequest{}
	return &this
}

// GetDataFormatType returns the DataFormatType field value if set, zero value otherwise.
func (o *ExportMetadataRequest) GetDataFormatType() string {
	if o == nil || IsNil(o.DataFormatType) {
		var ret string
		return ret
	}
	return *o.DataFormatType
}

// GetDataFormatTypeOk returns a tuple with the DataFormatType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMetadataRequest) GetDataFormatTypeOk() (*string, bool) {
	if o == nil || IsNil(o.DataFormatType) {
		return nil, false
	}
	return o.DataFormatType, true
}

// HasDataFormatType returns a boolean if a field has been set.
func (o *ExportMetadataRequest) HasDataFormatType() bool {
	if o != nil && !IsNil(o.DataFormatType) {
		return true
	}

	return false
}

// SetDataFormatType gets a reference to the given string and assigns it to the DataFormatType field.
func (o *ExportMetadataRequest) SetDataFormatType(v string) {
	o.DataFormatType = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *ExportMetadataRequest) GetLocation() Location {
	if o == nil || IsNil(o.Location) {
		var ret Location
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMetadataRequest) GetLocationOk() (*Location, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *ExportMetadataRequest) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given Location and assigns it to the Location field.
func (o *ExportMetadataRequest) SetLocation(v Location) {
	o.Location = &v
}

// GetMetadataSelector returns the MetadataSelector field value if set, zero value otherwise.
func (o *ExportMetadataRequest) GetMetadataSelector() MetadataSelector {
	if o == nil || IsNil(o.MetadataSelector) {
		var ret MetadataSelector
		return ret
	}
	return *o.MetadataSelector
}

// GetMetadataSelectorOk returns a tuple with the MetadataSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExportMetadataRequest) GetMetadataSelectorOk() (*MetadataSelector, bool) {
	if o == nil || IsNil(o.MetadataSelector) {
		return nil, false
	}
	return o.MetadataSelector, true
}

// HasMetadataSelector returns a boolean if a field has been set.
func (o *ExportMetadataRequest) HasMetadataSelector() bool {
	if o != nil && !IsNil(o.MetadataSelector) {
		return true
	}

	return false
}

// SetMetadataSelector gets a reference to the given MetadataSelector and assigns it to the MetadataSelector field.
func (o *ExportMetadataRequest) SetMetadataSelector(v MetadataSelector) {
	o.MetadataSelector = &v
}

func (o ExportMetadataRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExportMetadataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataFormatType) {
		toSerialize["dataFormatType"] = o.DataFormatType
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.MetadataSelector) {
		toSerialize["metadataSelector"] = o.MetadataSelector
	}
	return toSerialize, nil
}

type NullableExportMetadataRequest struct {
	value *ExportMetadataRequest
	isSet bool
}

func (v NullableExportMetadataRequest) Get() *ExportMetadataRequest {
	return v.value
}

func (v *NullableExportMetadataRequest) Set(val *ExportMetadataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableExportMetadataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableExportMetadataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExportMetadataRequest(val *ExportMetadataRequest) *NullableExportMetadataRequest {
	return &NullableExportMetadataRequest{value: val, isSet: true}
}

func (v NullableExportMetadataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExportMetadataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


