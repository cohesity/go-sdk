/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpdateSupportUserParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSupportUserParams{}

// UpdateSupportUserParams Specifies the support user params.
type UpdateSupportUserParams struct {
	// Specifies the current password of the user. This is required when trying to update the current user's password.
	CurrentPassword NullableString `json:"currentPassword,omitempty"`
	// If set to true, sudo access will be enabled for the user. If null, the endpoint will not attempt to alter sudo access privilege for the support user.
	EnableSudoAccess NullableBool `json:"enableSudoAccess,omitempty"`
	// Specifies the new password for the support user.
	NewPassword NullableString `json:"newPassword,omitempty"`
}

// NewUpdateSupportUserParams instantiates a new UpdateSupportUserParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSupportUserParams() *UpdateSupportUserParams {
	this := UpdateSupportUserParams{}
	return &this
}

// NewUpdateSupportUserParamsWithDefaults instantiates a new UpdateSupportUserParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSupportUserParamsWithDefaults() *UpdateSupportUserParams {
	this := UpdateSupportUserParams{}
	return &this
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSupportUserParams) GetCurrentPassword() string {
	if o == nil || IsNil(o.CurrentPassword.Get()) {
		var ret string
		return ret
	}
	return *o.CurrentPassword.Get()
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSupportUserParams) GetCurrentPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentPassword.Get(), o.CurrentPassword.IsSet()
}

// HasCurrentPassword returns a boolean if a field has been set.
func (o *UpdateSupportUserParams) HasCurrentPassword() bool {
	if o != nil && o.CurrentPassword.IsSet() {
		return true
	}

	return false
}

// SetCurrentPassword gets a reference to the given NullableString and assigns it to the CurrentPassword field.
func (o *UpdateSupportUserParams) SetCurrentPassword(v string) {
	o.CurrentPassword.Set(&v)
}
// SetCurrentPasswordNil sets the value for CurrentPassword to be an explicit nil
func (o *UpdateSupportUserParams) SetCurrentPasswordNil() {
	o.CurrentPassword.Set(nil)
}

// UnsetCurrentPassword ensures that no value is present for CurrentPassword, not even an explicit nil
func (o *UpdateSupportUserParams) UnsetCurrentPassword() {
	o.CurrentPassword.Unset()
}

// GetEnableSudoAccess returns the EnableSudoAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSupportUserParams) GetEnableSudoAccess() bool {
	if o == nil || IsNil(o.EnableSudoAccess.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSudoAccess.Get()
}

// GetEnableSudoAccessOk returns a tuple with the EnableSudoAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSupportUserParams) GetEnableSudoAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSudoAccess.Get(), o.EnableSudoAccess.IsSet()
}

// HasEnableSudoAccess returns a boolean if a field has been set.
func (o *UpdateSupportUserParams) HasEnableSudoAccess() bool {
	if o != nil && o.EnableSudoAccess.IsSet() {
		return true
	}

	return false
}

// SetEnableSudoAccess gets a reference to the given NullableBool and assigns it to the EnableSudoAccess field.
func (o *UpdateSupportUserParams) SetEnableSudoAccess(v bool) {
	o.EnableSudoAccess.Set(&v)
}
// SetEnableSudoAccessNil sets the value for EnableSudoAccess to be an explicit nil
func (o *UpdateSupportUserParams) SetEnableSudoAccessNil() {
	o.EnableSudoAccess.Set(nil)
}

// UnsetEnableSudoAccess ensures that no value is present for EnableSudoAccess, not even an explicit nil
func (o *UpdateSupportUserParams) UnsetEnableSudoAccess() {
	o.EnableSudoAccess.Unset()
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSupportUserParams) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword.Get()) {
		var ret string
		return ret
	}
	return *o.NewPassword.Get()
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSupportUserParams) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewPassword.Get(), o.NewPassword.IsSet()
}

// HasNewPassword returns a boolean if a field has been set.
func (o *UpdateSupportUserParams) HasNewPassword() bool {
	if o != nil && o.NewPassword.IsSet() {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given NullableString and assigns it to the NewPassword field.
func (o *UpdateSupportUserParams) SetNewPassword(v string) {
	o.NewPassword.Set(&v)
}
// SetNewPasswordNil sets the value for NewPassword to be an explicit nil
func (o *UpdateSupportUserParams) SetNewPasswordNil() {
	o.NewPassword.Set(nil)
}

// UnsetNewPassword ensures that no value is present for NewPassword, not even an explicit nil
func (o *UpdateSupportUserParams) UnsetNewPassword() {
	o.NewPassword.Unset()
}

func (o UpdateSupportUserParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSupportUserParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentPassword.IsSet() {
		toSerialize["currentPassword"] = o.CurrentPassword.Get()
	}
	if o.EnableSudoAccess.IsSet() {
		toSerialize["enableSudoAccess"] = o.EnableSudoAccess.Get()
	}
	if o.NewPassword.IsSet() {
		toSerialize["newPassword"] = o.NewPassword.Get()
	}
	return toSerialize, nil
}

type NullableUpdateSupportUserParams struct {
	value *UpdateSupportUserParams
	isSet bool
}

func (v NullableUpdateSupportUserParams) Get() *UpdateSupportUserParams {
	return v.value
}

func (v *NullableUpdateSupportUserParams) Set(val *UpdateSupportUserParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSupportUserParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSupportUserParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSupportUserParams(val *UpdateSupportUserParams) *NullableUpdateSupportUserParams {
	return &NullableUpdateSupportUserParams{value: val, isSet: true}
}

func (v NullableUpdateSupportUserParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSupportUserParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


