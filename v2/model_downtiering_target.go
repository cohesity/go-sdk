/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DowntieringTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DowntieringTarget{}

// DowntieringTarget Specifies the target data tiering details for downtier job. This is in beta phase. Please use target inside CommonDataTieringTaskParams, present directly under data tiering request body. If target is present inside CommonDataTieringTaskParams, this target will be ignored.
type DowntieringTarget struct {
	// Specifies a list of mapping between sources and its corresponding viewNames and mountPaths, where the sources were downtiered.
	DowntieredDataLocations []DowntieredDataLocation `json:"downtieredDataLocations,omitempty"`
	// Specifies the mount path prefix inside the view.
	MountPathPrefix NullableString `json:"mountPathPrefix,omitempty"`
	// Specifies the Storage Domain ID where the view will be kept.
	StorageDomainId NullableInt64 `json:"storageDomainId"`
	// Specifies the view name prefix.
	ViewNamePrefix NullableString `json:"viewNamePrefix"`
}

type _DowntieringTarget DowntieringTarget

// NewDowntieringTarget instantiates a new DowntieringTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDowntieringTarget(storageDomainId NullableInt64, viewNamePrefix NullableString) *DowntieringTarget {
	this := DowntieringTarget{}
	this.StorageDomainId = storageDomainId
	this.ViewNamePrefix = viewNamePrefix
	return &this
}

// NewDowntieringTargetWithDefaults instantiates a new DowntieringTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDowntieringTargetWithDefaults() *DowntieringTarget {
	this := DowntieringTarget{}
	return &this
}

// GetDowntieredDataLocations returns the DowntieredDataLocations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DowntieringTarget) GetDowntieredDataLocations() []DowntieredDataLocation {
	if o == nil {
		var ret []DowntieredDataLocation
		return ret
	}
	return o.DowntieredDataLocations
}

// GetDowntieredDataLocationsOk returns a tuple with the DowntieredDataLocations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieringTarget) GetDowntieredDataLocationsOk() ([]DowntieredDataLocation, bool) {
	if o == nil || IsNil(o.DowntieredDataLocations) {
		return nil, false
	}
	return o.DowntieredDataLocations, true
}

// HasDowntieredDataLocations returns a boolean if a field has been set.
func (o *DowntieringTarget) HasDowntieredDataLocations() bool {
	if o != nil && !IsNil(o.DowntieredDataLocations) {
		return true
	}

	return false
}

// SetDowntieredDataLocations gets a reference to the given []DowntieredDataLocation and assigns it to the DowntieredDataLocations field.
func (o *DowntieringTarget) SetDowntieredDataLocations(v []DowntieredDataLocation) {
	o.DowntieredDataLocations = v
}

// GetMountPathPrefix returns the MountPathPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DowntieringTarget) GetMountPathPrefix() string {
	if o == nil || IsNil(o.MountPathPrefix.Get()) {
		var ret string
		return ret
	}
	return *o.MountPathPrefix.Get()
}

// GetMountPathPrefixOk returns a tuple with the MountPathPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieringTarget) GetMountPathPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountPathPrefix.Get(), o.MountPathPrefix.IsSet()
}

// HasMountPathPrefix returns a boolean if a field has been set.
func (o *DowntieringTarget) HasMountPathPrefix() bool {
	if o != nil && o.MountPathPrefix.IsSet() {
		return true
	}

	return false
}

// SetMountPathPrefix gets a reference to the given NullableString and assigns it to the MountPathPrefix field.
func (o *DowntieringTarget) SetMountPathPrefix(v string) {
	o.MountPathPrefix.Set(&v)
}
// SetMountPathPrefixNil sets the value for MountPathPrefix to be an explicit nil
func (o *DowntieringTarget) SetMountPathPrefixNil() {
	o.MountPathPrefix.Set(nil)
}

// UnsetMountPathPrefix ensures that no value is present for MountPathPrefix, not even an explicit nil
func (o *DowntieringTarget) UnsetMountPathPrefix() {
	o.MountPathPrefix.Unset()
}

// GetStorageDomainId returns the StorageDomainId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *DowntieringTarget) GetStorageDomainId() int64 {
	if o == nil || o.StorageDomainId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.StorageDomainId.Get()
}

// GetStorageDomainIdOk returns a tuple with the StorageDomainId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieringTarget) GetStorageDomainIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageDomainId.Get(), o.StorageDomainId.IsSet()
}

// SetStorageDomainId sets field value
func (o *DowntieringTarget) SetStorageDomainId(v int64) {
	o.StorageDomainId.Set(&v)
}

// GetViewNamePrefix returns the ViewNamePrefix field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DowntieringTarget) GetViewNamePrefix() string {
	if o == nil || o.ViewNamePrefix.Get() == nil {
		var ret string
		return ret
	}

	return *o.ViewNamePrefix.Get()
}

// GetViewNamePrefixOk returns a tuple with the ViewNamePrefix field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieringTarget) GetViewNamePrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewNamePrefix.Get(), o.ViewNamePrefix.IsSet()
}

// SetViewNamePrefix sets field value
func (o *DowntieringTarget) SetViewNamePrefix(v string) {
	o.ViewNamePrefix.Set(&v)
}

func (o DowntieringTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DowntieringTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DowntieredDataLocations != nil {
		toSerialize["downtieredDataLocations"] = o.DowntieredDataLocations
	}
	if o.MountPathPrefix.IsSet() {
		toSerialize["mountPathPrefix"] = o.MountPathPrefix.Get()
	}
	toSerialize["storageDomainId"] = o.StorageDomainId.Get()
	toSerialize["viewNamePrefix"] = o.ViewNamePrefix.Get()
	return toSerialize, nil
}

func (o *DowntieringTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storageDomainId",
		"viewNamePrefix",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDowntieringTarget := _DowntieringTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDowntieringTarget)

	if err != nil {
		return err
	}

	*o = DowntieringTarget(varDowntieringTarget)

	return err
}

type NullableDowntieringTarget struct {
	value *DowntieringTarget
	isSet bool
}

func (v NullableDowntieringTarget) Get() *DowntieringTarget {
	return v.value
}

func (v *NullableDowntieringTarget) Set(val *DowntieringTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableDowntieringTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableDowntieringTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDowntieringTarget(val *DowntieringTarget) *NullableDowntieringTarget {
	return &NullableDowntieringTarget{value: val, isSet: true}
}

func (v NullableDowntieringTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDowntieringTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


