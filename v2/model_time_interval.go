/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TimeInterval type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeInterval{}

// TimeInterval The time interval in usecs.
type TimeInterval struct {
	// The start time of the interval in usecs.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`
	// The start time of the interval in usecs.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`
}

// NewTimeInterval instantiates a new TimeInterval object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeInterval() *TimeInterval {
	this := TimeInterval{}
	return &this
}

// NewTimeIntervalWithDefaults instantiates a new TimeInterval object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeIntervalWithDefaults() *TimeInterval {
	this := TimeInterval{}
	return &this
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise.
func (o *TimeInterval) GetEndTimeUsecs() int64 {
	if o == nil || IsNil(o.EndTimeUsecs) {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeInterval) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil || IsNil(o.EndTimeUsecs) {
		return nil, false
	}
	return o.EndTimeUsecs, true
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *TimeInterval) HasEndTimeUsecs() bool {
	if o != nil && !IsNil(o.EndTimeUsecs) {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given int64 and assigns it to the EndTimeUsecs field.
func (o *TimeInterval) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs = &v
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise.
func (o *TimeInterval) GetStartTimeUsecs() int64 {
	if o == nil || IsNil(o.StartTimeUsecs) {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeInterval) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil || IsNil(o.StartTimeUsecs) {
		return nil, false
	}
	return o.StartTimeUsecs, true
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *TimeInterval) HasStartTimeUsecs() bool {
	if o != nil && !IsNil(o.StartTimeUsecs) {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given int64 and assigns it to the StartTimeUsecs field.
func (o *TimeInterval) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs = &v
}

func (o TimeInterval) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeInterval) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EndTimeUsecs) {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs
	}
	if !IsNil(o.StartTimeUsecs) {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs
	}
	return toSerialize, nil
}

type NullableTimeInterval struct {
	value *TimeInterval
	isSet bool
}

func (v NullableTimeInterval) Get() *TimeInterval {
	return v.value
}

func (v *NullableTimeInterval) Set(val *TimeInterval) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeInterval) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeInterval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeInterval(val *TimeInterval) *NullableTimeInterval {
	return &NullableTimeInterval{value: val, isSet: true}
}

func (v NullableTimeInterval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeInterval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


