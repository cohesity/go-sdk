/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeInterfaceParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeInterfaceParams{}

// NodeInterfaceParams Node and interface parameters.
type NodeInterfaceParams struct {
	// Name of the interface.
	InterfaceName NullableString `json:"interfaceName,omitempty"`
	// Node id.
	NodeId int64 `json:"nodeId"`
}

type _NodeInterfaceParams NodeInterfaceParams

// NewNodeInterfaceParams instantiates a new NodeInterfaceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInterfaceParams(nodeId int64) *NodeInterfaceParams {
	this := NodeInterfaceParams{}
	this.NodeId = nodeId
	return &this
}

// NewNodeInterfaceParamsWithDefaults instantiates a new NodeInterfaceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInterfaceParamsWithDefaults() *NodeInterfaceParams {
	this := NodeInterfaceParams{}
	return &this
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeInterfaceParams) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName.Get()) {
		var ret string
		return ret
	}
	return *o.InterfaceName.Get()
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeInterfaceParams) GetInterfaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InterfaceName.Get(), o.InterfaceName.IsSet()
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *NodeInterfaceParams) HasInterfaceName() bool {
	if o != nil && o.InterfaceName.IsSet() {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given NullableString and assigns it to the InterfaceName field.
func (o *NodeInterfaceParams) SetInterfaceName(v string) {
	o.InterfaceName.Set(&v)
}
// SetInterfaceNameNil sets the value for InterfaceName to be an explicit nil
func (o *NodeInterfaceParams) SetInterfaceNameNil() {
	o.InterfaceName.Set(nil)
}

// UnsetInterfaceName ensures that no value is present for InterfaceName, not even an explicit nil
func (o *NodeInterfaceParams) UnsetInterfaceName() {
	o.InterfaceName.Unset()
}

// GetNodeId returns the NodeId field value
func (o *NodeInterfaceParams) GetNodeId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
func (o *NodeInterfaceParams) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NodeId, true
}

// SetNodeId sets field value
func (o *NodeInterfaceParams) SetNodeId(v int64) {
	o.NodeId = v
}

func (o NodeInterfaceParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeInterfaceParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.InterfaceName.IsSet() {
		toSerialize["interfaceName"] = o.InterfaceName.Get()
	}
	toSerialize["nodeId"] = o.NodeId
	return toSerialize, nil
}

func (o *NodeInterfaceParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeInterfaceParams := _NodeInterfaceParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeInterfaceParams)

	if err != nil {
		return err
	}

	*o = NodeInterfaceParams(varNodeInterfaceParams)

	return err
}

type NullableNodeInterfaceParams struct {
	value *NodeInterfaceParams
	isSet bool
}

func (v NullableNodeInterfaceParams) Get() *NodeInterfaceParams {
	return v.value
}

func (v *NullableNodeInterfaceParams) Set(val *NodeInterfaceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInterfaceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInterfaceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInterfaceParams(val *NodeInterfaceParams) *NullableNodeInterfaceParams {
	return &NullableNodeInterfaceParams{value: val, isSet: true}
}

func (v NullableNodeInterfaceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInterfaceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


