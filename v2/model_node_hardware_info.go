/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeHardwareInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeHardwareInfo{}

// NodeHardwareInfo NodeHardwareInfo provides the information regarding the hardware.
type NodeHardwareInfo struct {
	// Cpu provides the information regarding the CPU.
	Cpu NullableString `json:"cpu,omitempty"`
	// MemorySizeBytes provides the memory size in bytes.
	MemorySizeBytes NullableInt64 `json:"memorySizeBytes,omitempty"`
	// Network provides the information regarding the network cards.
	Network NullableString `json:"network,omitempty"`
}

// NewNodeHardwareInfo instantiates a new NodeHardwareInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeHardwareInfo() *NodeHardwareInfo {
	this := NodeHardwareInfo{}
	return &this
}

// NewNodeHardwareInfoWithDefaults instantiates a new NodeHardwareInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeHardwareInfoWithDefaults() *NodeHardwareInfo {
	this := NodeHardwareInfo{}
	return &this
}

// GetCpu returns the Cpu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeHardwareInfo) GetCpu() string {
	if o == nil || IsNil(o.Cpu.Get()) {
		var ret string
		return ret
	}
	return *o.Cpu.Get()
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeHardwareInfo) GetCpuOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cpu.Get(), o.Cpu.IsSet()
}

// HasCpu returns a boolean if a field has been set.
func (o *NodeHardwareInfo) HasCpu() bool {
	if o != nil && o.Cpu.IsSet() {
		return true
	}

	return false
}

// SetCpu gets a reference to the given NullableString and assigns it to the Cpu field.
func (o *NodeHardwareInfo) SetCpu(v string) {
	o.Cpu.Set(&v)
}
// SetCpuNil sets the value for Cpu to be an explicit nil
func (o *NodeHardwareInfo) SetCpuNil() {
	o.Cpu.Set(nil)
}

// UnsetCpu ensures that no value is present for Cpu, not even an explicit nil
func (o *NodeHardwareInfo) UnsetCpu() {
	o.Cpu.Unset()
}

// GetMemorySizeBytes returns the MemorySizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeHardwareInfo) GetMemorySizeBytes() int64 {
	if o == nil || IsNil(o.MemorySizeBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.MemorySizeBytes.Get()
}

// GetMemorySizeBytesOk returns a tuple with the MemorySizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeHardwareInfo) GetMemorySizeBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MemorySizeBytes.Get(), o.MemorySizeBytes.IsSet()
}

// HasMemorySizeBytes returns a boolean if a field has been set.
func (o *NodeHardwareInfo) HasMemorySizeBytes() bool {
	if o != nil && o.MemorySizeBytes.IsSet() {
		return true
	}

	return false
}

// SetMemorySizeBytes gets a reference to the given NullableInt64 and assigns it to the MemorySizeBytes field.
func (o *NodeHardwareInfo) SetMemorySizeBytes(v int64) {
	o.MemorySizeBytes.Set(&v)
}
// SetMemorySizeBytesNil sets the value for MemorySizeBytes to be an explicit nil
func (o *NodeHardwareInfo) SetMemorySizeBytesNil() {
	o.MemorySizeBytes.Set(nil)
}

// UnsetMemorySizeBytes ensures that no value is present for MemorySizeBytes, not even an explicit nil
func (o *NodeHardwareInfo) UnsetMemorySizeBytes() {
	o.MemorySizeBytes.Unset()
}

// GetNetwork returns the Network field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeHardwareInfo) GetNetwork() string {
	if o == nil || IsNil(o.Network.Get()) {
		var ret string
		return ret
	}
	return *o.Network.Get()
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeHardwareInfo) GetNetworkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Network.Get(), o.Network.IsSet()
}

// HasNetwork returns a boolean if a field has been set.
func (o *NodeHardwareInfo) HasNetwork() bool {
	if o != nil && o.Network.IsSet() {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given NullableString and assigns it to the Network field.
func (o *NodeHardwareInfo) SetNetwork(v string) {
	o.Network.Set(&v)
}
// SetNetworkNil sets the value for Network to be an explicit nil
func (o *NodeHardwareInfo) SetNetworkNil() {
	o.Network.Set(nil)
}

// UnsetNetwork ensures that no value is present for Network, not even an explicit nil
func (o *NodeHardwareInfo) UnsetNetwork() {
	o.Network.Unset()
}

func (o NodeHardwareInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeHardwareInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cpu.IsSet() {
		toSerialize["cpu"] = o.Cpu.Get()
	}
	if o.MemorySizeBytes.IsSet() {
		toSerialize["memorySizeBytes"] = o.MemorySizeBytes.Get()
	}
	if o.Network.IsSet() {
		toSerialize["network"] = o.Network.Get()
	}
	return toSerialize, nil
}

type NullableNodeHardwareInfo struct {
	value *NodeHardwareInfo
	isSet bool
}

func (v NullableNodeHardwareInfo) Get() *NodeHardwareInfo {
	return v.value
}

func (v *NullableNodeHardwareInfo) Set(val *NodeHardwareInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeHardwareInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeHardwareInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeHardwareInfo(val *NodeHardwareInfo) *NullableNodeHardwareInfo {
	return &NullableNodeHardwareInfo{value: val, isSet: true}
}

func (v NullableNodeHardwareInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeHardwareInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


