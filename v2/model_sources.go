/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Sources type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sources{}

// Sources Protection Sources.
type Sources struct {
	// Specifies the list of Protection Sources.
	Sources []Source `json:"sources,omitempty"`
}

// NewSources instantiates a new Sources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSources() *Sources {
	this := Sources{}
	return &this
}

// NewSourcesWithDefaults instantiates a new Sources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourcesWithDefaults() *Sources {
	this := Sources{}
	return &this
}

// GetSources returns the Sources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Sources) GetSources() []Source {
	if o == nil {
		var ret []Source
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Sources) GetSourcesOk() ([]Source, bool) {
	if o == nil || IsNil(o.Sources) {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *Sources) HasSources() bool {
	if o != nil && !IsNil(o.Sources) {
		return true
	}

	return false
}

// SetSources gets a reference to the given []Source and assigns it to the Sources field.
func (o *Sources) SetSources(v []Source) {
	o.Sources = v
}

func (o Sources) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sources) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	return toSerialize, nil
}

type NullableSources struct {
	value *Sources
	isSet bool
}

func (v NullableSources) Get() *Sources {
	return v.value
}

func (v *NullableSources) Set(val *Sources) {
	v.value = val
	v.isSet = true
}

func (v NullableSources) IsSet() bool {
	return v.isSet
}

func (v *NullableSources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSources(val *Sources) *NullableSources {
	return &NullableSources{value: val, isSet: true}
}

func (v NullableSources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


