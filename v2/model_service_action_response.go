/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ServiceActionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceActionResponse{}

// ServiceActionResponse Service action response.
type ServiceActionResponse struct {
	// Name of the service.
	ServiceName *string `json:"serviceName,omitempty"`
	// Images and Status of ondemand service.
	ServiceStatus *string `json:"serviceStatus,omitempty"`
}

// NewServiceActionResponse instantiates a new ServiceActionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceActionResponse() *ServiceActionResponse {
	this := ServiceActionResponse{}
	return &this
}

// NewServiceActionResponseWithDefaults instantiates a new ServiceActionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceActionResponseWithDefaults() *ServiceActionResponse {
	this := ServiceActionResponse{}
	return &this
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *ServiceActionResponse) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceActionResponse) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *ServiceActionResponse) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *ServiceActionResponse) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetServiceStatus returns the ServiceStatus field value if set, zero value otherwise.
func (o *ServiceActionResponse) GetServiceStatus() string {
	if o == nil || IsNil(o.ServiceStatus) {
		var ret string
		return ret
	}
	return *o.ServiceStatus
}

// GetServiceStatusOk returns a tuple with the ServiceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceActionResponse) GetServiceStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceStatus) {
		return nil, false
	}
	return o.ServiceStatus, true
}

// HasServiceStatus returns a boolean if a field has been set.
func (o *ServiceActionResponse) HasServiceStatus() bool {
	if o != nil && !IsNil(o.ServiceStatus) {
		return true
	}

	return false
}

// SetServiceStatus gets a reference to the given string and assigns it to the ServiceStatus field.
func (o *ServiceActionResponse) SetServiceStatus(v string) {
	o.ServiceStatus = &v
}

func (o ServiceActionResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceActionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	if !IsNil(o.ServiceStatus) {
		toSerialize["serviceStatus"] = o.ServiceStatus
	}
	return toSerialize, nil
}

type NullableServiceActionResponse struct {
	value *ServiceActionResponse
	isSet bool
}

func (v NullableServiceActionResponse) Get() *ServiceActionResponse {
	return v.value
}

func (v *NullableServiceActionResponse) Set(val *ServiceActionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceActionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceActionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceActionResponse(val *ServiceActionResponse) *NullableServiceActionResponse {
	return &NullableServiceActionResponse{value: val, isSet: true}
}

func (v NullableServiceActionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceActionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


