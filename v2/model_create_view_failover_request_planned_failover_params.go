/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateViewFailoverRequestPlannedFailoverParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateViewFailoverRequestPlannedFailoverParams{}

// CreateViewFailoverRequestPlannedFailoverParams Specifies parameters to create a planned failover.
type CreateViewFailoverRequestPlannedFailoverParams struct {
	PreparePlannedFailverParams *PlannedFailoverParamsPreparePlannedFailverParams `json:"preparePlannedFailverParams,omitempty"`
	// Spcifies the planned failover type.<br> 'Prepare' indicates this is a preparation for failover.<br> 'Finalize' indicates this is finalization of failover. After this is done, the view can be used as source view.
	Type NullableString `json:"type"`
}

type _CreateViewFailoverRequestPlannedFailoverParams CreateViewFailoverRequestPlannedFailoverParams

// NewCreateViewFailoverRequestPlannedFailoverParams instantiates a new CreateViewFailoverRequestPlannedFailoverParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateViewFailoverRequestPlannedFailoverParams(type_ NullableString) *CreateViewFailoverRequestPlannedFailoverParams {
	this := CreateViewFailoverRequestPlannedFailoverParams{}
	this.Type = type_
	return &this
}

// NewCreateViewFailoverRequestPlannedFailoverParamsWithDefaults instantiates a new CreateViewFailoverRequestPlannedFailoverParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateViewFailoverRequestPlannedFailoverParamsWithDefaults() *CreateViewFailoverRequestPlannedFailoverParams {
	this := CreateViewFailoverRequestPlannedFailoverParams{}
	return &this
}

// GetPreparePlannedFailverParams returns the PreparePlannedFailverParams field value if set, zero value otherwise.
func (o *CreateViewFailoverRequestPlannedFailoverParams) GetPreparePlannedFailverParams() PlannedFailoverParamsPreparePlannedFailverParams {
	if o == nil || IsNil(o.PreparePlannedFailverParams) {
		var ret PlannedFailoverParamsPreparePlannedFailverParams
		return ret
	}
	return *o.PreparePlannedFailverParams
}

// GetPreparePlannedFailverParamsOk returns a tuple with the PreparePlannedFailverParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateViewFailoverRequestPlannedFailoverParams) GetPreparePlannedFailverParamsOk() (*PlannedFailoverParamsPreparePlannedFailverParams, bool) {
	if o == nil || IsNil(o.PreparePlannedFailverParams) {
		return nil, false
	}
	return o.PreparePlannedFailverParams, true
}

// HasPreparePlannedFailverParams returns a boolean if a field has been set.
func (o *CreateViewFailoverRequestPlannedFailoverParams) HasPreparePlannedFailverParams() bool {
	if o != nil && !IsNil(o.PreparePlannedFailverParams) {
		return true
	}

	return false
}

// SetPreparePlannedFailverParams gets a reference to the given PlannedFailoverParamsPreparePlannedFailverParams and assigns it to the PreparePlannedFailverParams field.
func (o *CreateViewFailoverRequestPlannedFailoverParams) SetPreparePlannedFailverParams(v PlannedFailoverParamsPreparePlannedFailverParams) {
	o.PreparePlannedFailverParams = &v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateViewFailoverRequestPlannedFailoverParams) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateViewFailoverRequestPlannedFailoverParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *CreateViewFailoverRequestPlannedFailoverParams) SetType(v string) {
	o.Type.Set(&v)
}

func (o CreateViewFailoverRequestPlannedFailoverParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateViewFailoverRequestPlannedFailoverParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PreparePlannedFailverParams) {
		toSerialize["preparePlannedFailverParams"] = o.PreparePlannedFailverParams
	}
	toSerialize["type"] = o.Type.Get()
	return toSerialize, nil
}

func (o *CreateViewFailoverRequestPlannedFailoverParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateViewFailoverRequestPlannedFailoverParams := _CreateViewFailoverRequestPlannedFailoverParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateViewFailoverRequestPlannedFailoverParams)

	if err != nil {
		return err
	}

	*o = CreateViewFailoverRequestPlannedFailoverParams(varCreateViewFailoverRequestPlannedFailoverParams)

	return err
}

type NullableCreateViewFailoverRequestPlannedFailoverParams struct {
	value *CreateViewFailoverRequestPlannedFailoverParams
	isSet bool
}

func (v NullableCreateViewFailoverRequestPlannedFailoverParams) Get() *CreateViewFailoverRequestPlannedFailoverParams {
	return v.value
}

func (v *NullableCreateViewFailoverRequestPlannedFailoverParams) Set(val *CreateViewFailoverRequestPlannedFailoverParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateViewFailoverRequestPlannedFailoverParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateViewFailoverRequestPlannedFailoverParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateViewFailoverRequestPlannedFailoverParams(val *CreateViewFailoverRequestPlannedFailoverParams) *NullableCreateViewFailoverRequestPlannedFailoverParams {
	return &NullableCreateViewFailoverRequestPlannedFailoverParams{value: val, isSet: true}
}

func (v NullableCreateViewFailoverRequestPlannedFailoverParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateViewFailoverRequestPlannedFailoverParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


