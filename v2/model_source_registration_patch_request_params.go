/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceRegistrationPatchRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceRegistrationPatchRequestParams{}

// SourceRegistrationPatchRequestParams Specifies the parameters to partially update the registration.
type SourceRegistrationPatchRequestParams struct {
	CassandraParams *CassandraSourceRegistrationPatchParams `json:"cassandraParams,omitempty"`
	// Specifies the environment type of the Protection Source to be patched. Currently the only environment supported is kCassandra
	Environment NullableString `json:"environment"`
}

type _SourceRegistrationPatchRequestParams SourceRegistrationPatchRequestParams

// NewSourceRegistrationPatchRequestParams instantiates a new SourceRegistrationPatchRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceRegistrationPatchRequestParams(environment NullableString) *SourceRegistrationPatchRequestParams {
	this := SourceRegistrationPatchRequestParams{}
	this.Environment = environment
	return &this
}

// NewSourceRegistrationPatchRequestParamsWithDefaults instantiates a new SourceRegistrationPatchRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceRegistrationPatchRequestParamsWithDefaults() *SourceRegistrationPatchRequestParams {
	this := SourceRegistrationPatchRequestParams{}
	return &this
}

// GetCassandraParams returns the CassandraParams field value if set, zero value otherwise.
func (o *SourceRegistrationPatchRequestParams) GetCassandraParams() CassandraSourceRegistrationPatchParams {
	if o == nil || IsNil(o.CassandraParams) {
		var ret CassandraSourceRegistrationPatchParams
		return ret
	}
	return *o.CassandraParams
}

// GetCassandraParamsOk returns a tuple with the CassandraParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationPatchRequestParams) GetCassandraParamsOk() (*CassandraSourceRegistrationPatchParams, bool) {
	if o == nil || IsNil(o.CassandraParams) {
		return nil, false
	}
	return o.CassandraParams, true
}

// HasCassandraParams returns a boolean if a field has been set.
func (o *SourceRegistrationPatchRequestParams) HasCassandraParams() bool {
	if o != nil && !IsNil(o.CassandraParams) {
		return true
	}

	return false
}

// SetCassandraParams gets a reference to the given CassandraSourceRegistrationPatchParams and assigns it to the CassandraParams field.
func (o *SourceRegistrationPatchRequestParams) SetCassandraParams(v CassandraSourceRegistrationPatchParams) {
	o.CassandraParams = &v
}

// GetEnvironment returns the Environment field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SourceRegistrationPatchRequestParams) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}

	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationPatchRequestParams) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// SetEnvironment sets field value
func (o *SourceRegistrationPatchRequestParams) SetEnvironment(v string) {
	o.Environment.Set(&v)
}

func (o SourceRegistrationPatchRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceRegistrationPatchRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CassandraParams) {
		toSerialize["cassandraParams"] = o.CassandraParams
	}
	toSerialize["environment"] = o.Environment.Get()
	return toSerialize, nil
}

func (o *SourceRegistrationPatchRequestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceRegistrationPatchRequestParams := _SourceRegistrationPatchRequestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceRegistrationPatchRequestParams)

	if err != nil {
		return err
	}

	*o = SourceRegistrationPatchRequestParams(varSourceRegistrationPatchRequestParams)

	return err
}

type NullableSourceRegistrationPatchRequestParams struct {
	value *SourceRegistrationPatchRequestParams
	isSet bool
}

func (v NullableSourceRegistrationPatchRequestParams) Get() *SourceRegistrationPatchRequestParams {
	return v.value
}

func (v *NullableSourceRegistrationPatchRequestParams) Set(val *SourceRegistrationPatchRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceRegistrationPatchRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceRegistrationPatchRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceRegistrationPatchRequestParams(val *SourceRegistrationPatchRequestParams) *NullableSourceRegistrationPatchRequestParams {
	return &NullableSourceRegistrationPatchRequestParams{value: val, isSet: true}
}

func (v NullableSourceRegistrationPatchRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceRegistrationPatchRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


