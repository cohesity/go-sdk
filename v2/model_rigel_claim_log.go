/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RigelClaimLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RigelClaimLog{}

// RigelClaimLog Specifies an event during Rigel claim..
type RigelClaimLog struct {
	// Specifies the message of this event.
	Message NullableString `json:"message,omitempty"`
	// Specifies the time stamp in microseconds of the event.
	TimeStamp NullableInt64 `json:"timeStamp,omitempty"`
	// Specifies the severity of the event.
	Type NullableString `json:"type,omitempty"`
}

// NewRigelClaimLog instantiates a new RigelClaimLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRigelClaimLog() *RigelClaimLog {
	this := RigelClaimLog{}
	return &this
}

// NewRigelClaimLogWithDefaults instantiates a new RigelClaimLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRigelClaimLogWithDefaults() *RigelClaimLog {
	this := RigelClaimLog{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelClaimLog) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelClaimLog) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *RigelClaimLog) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *RigelClaimLog) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *RigelClaimLog) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *RigelClaimLog) UnsetMessage() {
	o.Message.Unset()
}

// GetTimeStamp returns the TimeStamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelClaimLog) GetTimeStamp() int64 {
	if o == nil || IsNil(o.TimeStamp.Get()) {
		var ret int64
		return ret
	}
	return *o.TimeStamp.Get()
}

// GetTimeStampOk returns a tuple with the TimeStamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelClaimLog) GetTimeStampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeStamp.Get(), o.TimeStamp.IsSet()
}

// HasTimeStamp returns a boolean if a field has been set.
func (o *RigelClaimLog) HasTimeStamp() bool {
	if o != nil && o.TimeStamp.IsSet() {
		return true
	}

	return false
}

// SetTimeStamp gets a reference to the given NullableInt64 and assigns it to the TimeStamp field.
func (o *RigelClaimLog) SetTimeStamp(v int64) {
	o.TimeStamp.Set(&v)
}
// SetTimeStampNil sets the value for TimeStamp to be an explicit nil
func (o *RigelClaimLog) SetTimeStampNil() {
	o.TimeStamp.Set(nil)
}

// UnsetTimeStamp ensures that no value is present for TimeStamp, not even an explicit nil
func (o *RigelClaimLog) UnsetTimeStamp() {
	o.TimeStamp.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelClaimLog) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelClaimLog) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *RigelClaimLog) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *RigelClaimLog) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *RigelClaimLog) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *RigelClaimLog) UnsetType() {
	o.Type.Unset()
}

func (o RigelClaimLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RigelClaimLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.TimeStamp.IsSet() {
		toSerialize["timeStamp"] = o.TimeStamp.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableRigelClaimLog struct {
	value *RigelClaimLog
	isSet bool
}

func (v NullableRigelClaimLog) Get() *RigelClaimLog {
	return v.value
}

func (v *NullableRigelClaimLog) Set(val *RigelClaimLog) {
	v.value = val
	v.isSet = true
}

func (v NullableRigelClaimLog) IsSet() bool {
	return v.isSet
}

func (v *NullableRigelClaimLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRigelClaimLog(val *RigelClaimLog) *NullableRigelClaimLog {
	return &NullableRigelClaimLog{value: val, isSet: true}
}

func (v NullableRigelClaimLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRigelClaimLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


