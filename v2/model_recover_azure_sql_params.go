/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverAzureSqlParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverAzureSqlParams{}

// RecoverAzureSqlParams Specifies the parameters to recover Azure SQL.
type RecoverAzureSqlParams struct {
	AzureTargetParams NullableRecoverAzureSqlParamsAzureTargetParams `json:"azureTargetParams,omitempty"`
	// Specifies the details of the azure sql objects to be recovered.
	Snapshots []RecoverAzureSqlSnapshotParams `json:"snapshots"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
}

type _RecoverAzureSqlParams RecoverAzureSqlParams

// NewRecoverAzureSqlParams instantiates a new RecoverAzureSqlParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAzureSqlParams(snapshots []RecoverAzureSqlSnapshotParams, targetEnvironment string) *RecoverAzureSqlParams {
	this := RecoverAzureSqlParams{}
	this.Snapshots = snapshots
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverAzureSqlParamsWithDefaults instantiates a new RecoverAzureSqlParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAzureSqlParamsWithDefaults() *RecoverAzureSqlParams {
	this := RecoverAzureSqlParams{}
	return &this
}

// GetAzureTargetParams returns the AzureTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAzureSqlParams) GetAzureTargetParams() RecoverAzureSqlParamsAzureTargetParams {
	if o == nil || IsNil(o.AzureTargetParams.Get()) {
		var ret RecoverAzureSqlParamsAzureTargetParams
		return ret
	}
	return *o.AzureTargetParams.Get()
}

// GetAzureTargetParamsOk returns a tuple with the AzureTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureSqlParams) GetAzureTargetParamsOk() (*RecoverAzureSqlParamsAzureTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.AzureTargetParams.Get(), o.AzureTargetParams.IsSet()
}

// HasAzureTargetParams returns a boolean if a field has been set.
func (o *RecoverAzureSqlParams) HasAzureTargetParams() bool {
	if o != nil && o.AzureTargetParams.IsSet() {
		return true
	}

	return false
}

// SetAzureTargetParams gets a reference to the given NullableRecoverAzureSqlParamsAzureTargetParams and assigns it to the AzureTargetParams field.
func (o *RecoverAzureSqlParams) SetAzureTargetParams(v RecoverAzureSqlParamsAzureTargetParams) {
	o.AzureTargetParams.Set(&v)
}
// SetAzureTargetParamsNil sets the value for AzureTargetParams to be an explicit nil
func (o *RecoverAzureSqlParams) SetAzureTargetParamsNil() {
	o.AzureTargetParams.Set(nil)
}

// UnsetAzureTargetParams ensures that no value is present for AzureTargetParams, not even an explicit nil
func (o *RecoverAzureSqlParams) UnsetAzureTargetParams() {
	o.AzureTargetParams.Unset()
}

// GetSnapshots returns the Snapshots field value
// If the value is explicit nil, the zero value for []RecoverAzureSqlSnapshotParams will be returned
func (o *RecoverAzureSqlParams) GetSnapshots() []RecoverAzureSqlSnapshotParams {
	if o == nil {
		var ret []RecoverAzureSqlSnapshotParams
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureSqlParams) GetSnapshotsOk() ([]RecoverAzureSqlSnapshotParams, bool) {
	if o == nil || IsNil(o.Snapshots) {
		return nil, false
	}
	return o.Snapshots, true
}

// SetSnapshots sets field value
func (o *RecoverAzureSqlParams) SetSnapshots(v []RecoverAzureSqlSnapshotParams) {
	o.Snapshots = v
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverAzureSqlParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverAzureSqlParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverAzureSqlParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

func (o RecoverAzureSqlParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverAzureSqlParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AzureTargetParams.IsSet() {
		toSerialize["azureTargetParams"] = o.AzureTargetParams.Get()
	}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	toSerialize["targetEnvironment"] = o.TargetEnvironment
	return toSerialize, nil
}

func (o *RecoverAzureSqlParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshots",
		"targetEnvironment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverAzureSqlParams := _RecoverAzureSqlParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverAzureSqlParams)

	if err != nil {
		return err
	}

	*o = RecoverAzureSqlParams(varRecoverAzureSqlParams)

	return err
}

type NullableRecoverAzureSqlParams struct {
	value *RecoverAzureSqlParams
	isSet bool
}

func (v NullableRecoverAzureSqlParams) Get() *RecoverAzureSqlParams {
	return v.value
}

func (v *NullableRecoverAzureSqlParams) Set(val *RecoverAzureSqlParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAzureSqlParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAzureSqlParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAzureSqlParams(val *RecoverAzureSqlParams) *NullableRecoverAzureSqlParams {
	return &NullableRecoverAzureSqlParams{value: val, isSet: true}
}

func (v NullableRecoverAzureSqlParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAzureSqlParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


