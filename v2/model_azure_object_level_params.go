/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureObjectLevelParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureObjectLevelParams{}

// AzureObjectLevelParams Specifies the Azure object level settings for object protection.
type AzureObjectLevelParams struct {
	DiskExclusionParams *AzureDiskExclusionParams `json:"diskExclusionParams,omitempty"`
	// Specifies the list of IDs of the objects not to be protected in this backup. This field only applies if provided object id is non leaf entity such as Tag. This can be used to ignore specific objects (can include tags) under a parent object which has been included for protection.
	ExcludeObjectIds []*int64 `json:"excludeObjectIds,omitempty"`
	// Specifies the id of the object being protected. This can be a leaf level or non leaf level object.
	Id NullableInt64 `json:"id"`
}

type _AzureObjectLevelParams AzureObjectLevelParams

// NewAzureObjectLevelParams instantiates a new AzureObjectLevelParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureObjectLevelParams(id NullableInt64) *AzureObjectLevelParams {
	this := AzureObjectLevelParams{}
	this.Id = id
	return &this
}

// NewAzureObjectLevelParamsWithDefaults instantiates a new AzureObjectLevelParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureObjectLevelParamsWithDefaults() *AzureObjectLevelParams {
	this := AzureObjectLevelParams{}
	return &this
}

// GetDiskExclusionParams returns the DiskExclusionParams field value if set, zero value otherwise.
func (o *AzureObjectLevelParams) GetDiskExclusionParams() AzureDiskExclusionParams {
	if o == nil || IsNil(o.DiskExclusionParams) {
		var ret AzureDiskExclusionParams
		return ret
	}
	return *o.DiskExclusionParams
}

// GetDiskExclusionParamsOk returns a tuple with the DiskExclusionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureObjectLevelParams) GetDiskExclusionParamsOk() (*AzureDiskExclusionParams, bool) {
	if o == nil || IsNil(o.DiskExclusionParams) {
		return nil, false
	}
	return o.DiskExclusionParams, true
}

// HasDiskExclusionParams returns a boolean if a field has been set.
func (o *AzureObjectLevelParams) HasDiskExclusionParams() bool {
	if o != nil && !IsNil(o.DiskExclusionParams) {
		return true
	}

	return false
}

// SetDiskExclusionParams gets a reference to the given AzureDiskExclusionParams and assigns it to the DiskExclusionParams field.
func (o *AzureObjectLevelParams) SetDiskExclusionParams(v AzureDiskExclusionParams) {
	o.DiskExclusionParams = &v
}

// GetExcludeObjectIds returns the ExcludeObjectIds field value if set, zero value otherwise.
func (o *AzureObjectLevelParams) GetExcludeObjectIds() []*int64 {
	if o == nil || IsNil(o.ExcludeObjectIds) {
		var ret []*int64
		return ret
	}
	return o.ExcludeObjectIds
}

// GetExcludeObjectIdsOk returns a tuple with the ExcludeObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureObjectLevelParams) GetExcludeObjectIdsOk() ([]*int64, bool) {
	if o == nil || IsNil(o.ExcludeObjectIds) {
		return nil, false
	}
	return o.ExcludeObjectIds, true
}

// HasExcludeObjectIds returns a boolean if a field has been set.
func (o *AzureObjectLevelParams) HasExcludeObjectIds() bool {
	if o != nil && !IsNil(o.ExcludeObjectIds) {
		return true
	}

	return false
}

// SetExcludeObjectIds gets a reference to the given []*int64 and assigns it to the ExcludeObjectIds field.
func (o *AzureObjectLevelParams) SetExcludeObjectIds(v []*int64) {
	o.ExcludeObjectIds = v
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *AzureObjectLevelParams) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureObjectLevelParams) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *AzureObjectLevelParams) SetId(v int64) {
	o.Id.Set(&v)
}

func (o AzureObjectLevelParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureObjectLevelParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiskExclusionParams) {
		toSerialize["diskExclusionParams"] = o.DiskExclusionParams
	}
	if !IsNil(o.ExcludeObjectIds) {
		toSerialize["excludeObjectIds"] = o.ExcludeObjectIds
	}
	toSerialize["id"] = o.Id.Get()
	return toSerialize, nil
}

func (o *AzureObjectLevelParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureObjectLevelParams := _AzureObjectLevelParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureObjectLevelParams)

	if err != nil {
		return err
	}

	*o = AzureObjectLevelParams(varAzureObjectLevelParams)

	return err
}

type NullableAzureObjectLevelParams struct {
	value *AzureObjectLevelParams
	isSet bool
}

func (v NullableAzureObjectLevelParams) Get() *AzureObjectLevelParams {
	return v.value
}

func (v *NullableAzureObjectLevelParams) Set(val *AzureObjectLevelParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureObjectLevelParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureObjectLevelParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureObjectLevelParams(val *AzureObjectLevelParams) *NullableAzureObjectLevelParams {
	return &NullableAzureObjectLevelParams{value: val, isSet: true}
}

func (v NullableAzureObjectLevelParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureObjectLevelParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


