/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpdateGflagParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateGflagParameters{}

// UpdateGflagParameters Specifies the parameters for updating service gflags.
type UpdateGflagParameters struct {
	// Specifies whether to apply the change immediately. If set to true, the gflag change will work without restarting the service.
	EffectiveNow NullableBool `json:"effectiveNow,omitempty"`
	// Specifies the reason for clearing gflags.
	Reason NullableString `json:"reason,omitempty"`
	ServiceFlags *ServiceGflags `json:"serviceFlags,omitempty"`
}

// NewUpdateGflagParameters instantiates a new UpdateGflagParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGflagParameters() *UpdateGflagParameters {
	this := UpdateGflagParameters{}
	return &this
}

// NewUpdateGflagParametersWithDefaults instantiates a new UpdateGflagParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGflagParametersWithDefaults() *UpdateGflagParameters {
	this := UpdateGflagParameters{}
	return &this
}

// GetEffectiveNow returns the EffectiveNow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateGflagParameters) GetEffectiveNow() bool {
	if o == nil || IsNil(o.EffectiveNow.Get()) {
		var ret bool
		return ret
	}
	return *o.EffectiveNow.Get()
}

// GetEffectiveNowOk returns a tuple with the EffectiveNow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateGflagParameters) GetEffectiveNowOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EffectiveNow.Get(), o.EffectiveNow.IsSet()
}

// HasEffectiveNow returns a boolean if a field has been set.
func (o *UpdateGflagParameters) HasEffectiveNow() bool {
	if o != nil && o.EffectiveNow.IsSet() {
		return true
	}

	return false
}

// SetEffectiveNow gets a reference to the given NullableBool and assigns it to the EffectiveNow field.
func (o *UpdateGflagParameters) SetEffectiveNow(v bool) {
	o.EffectiveNow.Set(&v)
}
// SetEffectiveNowNil sets the value for EffectiveNow to be an explicit nil
func (o *UpdateGflagParameters) SetEffectiveNowNil() {
	o.EffectiveNow.Set(nil)
}

// UnsetEffectiveNow ensures that no value is present for EffectiveNow, not even an explicit nil
func (o *UpdateGflagParameters) UnsetEffectiveNow() {
	o.EffectiveNow.Unset()
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateGflagParameters) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateGflagParameters) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *UpdateGflagParameters) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *UpdateGflagParameters) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *UpdateGflagParameters) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *UpdateGflagParameters) UnsetReason() {
	o.Reason.Unset()
}

// GetServiceFlags returns the ServiceFlags field value if set, zero value otherwise.
func (o *UpdateGflagParameters) GetServiceFlags() ServiceGflags {
	if o == nil || IsNil(o.ServiceFlags) {
		var ret ServiceGflags
		return ret
	}
	return *o.ServiceFlags
}

// GetServiceFlagsOk returns a tuple with the ServiceFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGflagParameters) GetServiceFlagsOk() (*ServiceGflags, bool) {
	if o == nil || IsNil(o.ServiceFlags) {
		return nil, false
	}
	return o.ServiceFlags, true
}

// HasServiceFlags returns a boolean if a field has been set.
func (o *UpdateGflagParameters) HasServiceFlags() bool {
	if o != nil && !IsNil(o.ServiceFlags) {
		return true
	}

	return false
}

// SetServiceFlags gets a reference to the given ServiceGflags and assigns it to the ServiceFlags field.
func (o *UpdateGflagParameters) SetServiceFlags(v ServiceGflags) {
	o.ServiceFlags = &v
}

func (o UpdateGflagParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateGflagParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EffectiveNow.IsSet() {
		toSerialize["effectiveNow"] = o.EffectiveNow.Get()
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if !IsNil(o.ServiceFlags) {
		toSerialize["serviceFlags"] = o.ServiceFlags
	}
	return toSerialize, nil
}

type NullableUpdateGflagParameters struct {
	value *UpdateGflagParameters
	isSet bool
}

func (v NullableUpdateGflagParameters) Get() *UpdateGflagParameters {
	return v.value
}

func (v *NullableUpdateGflagParameters) Set(val *UpdateGflagParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGflagParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGflagParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGflagParameters(val *UpdateGflagParameters) *NullableUpdateGflagParameters {
	return &NullableUpdateGflagParameters{value: val, isSet: true}
}

func (v NullableUpdateGflagParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGflagParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


