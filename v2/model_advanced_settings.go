/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AdvancedSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdvancedSettings{}

// AdvancedSettings This is used to regulate certain gflag values from the UI. The values passed by the user from the UI will be used for the respective gflags.
type AdvancedSettings struct {
	// Whether to report error if SQL database is cloned.
	ClonedDbBackupStatus NullableString `json:"clonedDbBackupStatus,omitempty"`
	// Whether to report error if SQL database is not online.
	DbBackupIfNotOnlineStatus NullableString `json:"dbBackupIfNotOnlineStatus,omitempty"`
	// If set to true, out of band incremental backup will be started when the log chain is broken and it would be started at the end of the log backup. Default value is false.
	LogChainBreakAutoTriggerOobIncrBackup NullableBool `json:"logChainBreakAutoTriggerOobIncrBackup,omitempty"`
	// Fail the backup job when the database is missing. The database may be missing if it is deleted or corrupted.
	MissingDbBackupStatus NullableString `json:"missingDbBackupStatus,omitempty"`
	// If set to true, out of band incremental backup will be triggered when a new database is found and it would be started at the end of the log backup. Default value is false.
	NewDatabaseAutoTriggerOobIncrBackup NullableBool `json:"newDatabaseAutoTriggerOobIncrBackup,omitempty"`
	// Fail the backup job when database is offline or restoring.
	OfflineRestoringDbBackupStatus NullableString `json:"offlineRestoringDbBackupStatus,omitempty"`
	// Whether to skip backup for read-only SQL databases.
	ReadOnlyDbBackupStatus NullableString `json:"readOnlyDbBackupStatus,omitempty"`
	// Whether to report error for all dbs in non-autoprotect jobs.
	ReportAllNonAutoprotectDbErrors NullableString `json:"reportAllNonAutoprotectDbErrors,omitempty"`
}

// NewAdvancedSettings instantiates a new AdvancedSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdvancedSettings() *AdvancedSettings {
	this := AdvancedSettings{}
	return &this
}

// NewAdvancedSettingsWithDefaults instantiates a new AdvancedSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdvancedSettingsWithDefaults() *AdvancedSettings {
	this := AdvancedSettings{}
	return &this
}

// GetClonedDbBackupStatus returns the ClonedDbBackupStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdvancedSettings) GetClonedDbBackupStatus() string {
	if o == nil || IsNil(o.ClonedDbBackupStatus.Get()) {
		var ret string
		return ret
	}
	return *o.ClonedDbBackupStatus.Get()
}

// GetClonedDbBackupStatusOk returns a tuple with the ClonedDbBackupStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdvancedSettings) GetClonedDbBackupStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClonedDbBackupStatus.Get(), o.ClonedDbBackupStatus.IsSet()
}

// HasClonedDbBackupStatus returns a boolean if a field has been set.
func (o *AdvancedSettings) HasClonedDbBackupStatus() bool {
	if o != nil && o.ClonedDbBackupStatus.IsSet() {
		return true
	}

	return false
}

// SetClonedDbBackupStatus gets a reference to the given NullableString and assigns it to the ClonedDbBackupStatus field.
func (o *AdvancedSettings) SetClonedDbBackupStatus(v string) {
	o.ClonedDbBackupStatus.Set(&v)
}
// SetClonedDbBackupStatusNil sets the value for ClonedDbBackupStatus to be an explicit nil
func (o *AdvancedSettings) SetClonedDbBackupStatusNil() {
	o.ClonedDbBackupStatus.Set(nil)
}

// UnsetClonedDbBackupStatus ensures that no value is present for ClonedDbBackupStatus, not even an explicit nil
func (o *AdvancedSettings) UnsetClonedDbBackupStatus() {
	o.ClonedDbBackupStatus.Unset()
}

// GetDbBackupIfNotOnlineStatus returns the DbBackupIfNotOnlineStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdvancedSettings) GetDbBackupIfNotOnlineStatus() string {
	if o == nil || IsNil(o.DbBackupIfNotOnlineStatus.Get()) {
		var ret string
		return ret
	}
	return *o.DbBackupIfNotOnlineStatus.Get()
}

// GetDbBackupIfNotOnlineStatusOk returns a tuple with the DbBackupIfNotOnlineStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdvancedSettings) GetDbBackupIfNotOnlineStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DbBackupIfNotOnlineStatus.Get(), o.DbBackupIfNotOnlineStatus.IsSet()
}

// HasDbBackupIfNotOnlineStatus returns a boolean if a field has been set.
func (o *AdvancedSettings) HasDbBackupIfNotOnlineStatus() bool {
	if o != nil && o.DbBackupIfNotOnlineStatus.IsSet() {
		return true
	}

	return false
}

// SetDbBackupIfNotOnlineStatus gets a reference to the given NullableString and assigns it to the DbBackupIfNotOnlineStatus field.
func (o *AdvancedSettings) SetDbBackupIfNotOnlineStatus(v string) {
	o.DbBackupIfNotOnlineStatus.Set(&v)
}
// SetDbBackupIfNotOnlineStatusNil sets the value for DbBackupIfNotOnlineStatus to be an explicit nil
func (o *AdvancedSettings) SetDbBackupIfNotOnlineStatusNil() {
	o.DbBackupIfNotOnlineStatus.Set(nil)
}

// UnsetDbBackupIfNotOnlineStatus ensures that no value is present for DbBackupIfNotOnlineStatus, not even an explicit nil
func (o *AdvancedSettings) UnsetDbBackupIfNotOnlineStatus() {
	o.DbBackupIfNotOnlineStatus.Unset()
}

// GetLogChainBreakAutoTriggerOobIncrBackup returns the LogChainBreakAutoTriggerOobIncrBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdvancedSettings) GetLogChainBreakAutoTriggerOobIncrBackup() bool {
	if o == nil || IsNil(o.LogChainBreakAutoTriggerOobIncrBackup.Get()) {
		var ret bool
		return ret
	}
	return *o.LogChainBreakAutoTriggerOobIncrBackup.Get()
}

// GetLogChainBreakAutoTriggerOobIncrBackupOk returns a tuple with the LogChainBreakAutoTriggerOobIncrBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdvancedSettings) GetLogChainBreakAutoTriggerOobIncrBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogChainBreakAutoTriggerOobIncrBackup.Get(), o.LogChainBreakAutoTriggerOobIncrBackup.IsSet()
}

// HasLogChainBreakAutoTriggerOobIncrBackup returns a boolean if a field has been set.
func (o *AdvancedSettings) HasLogChainBreakAutoTriggerOobIncrBackup() bool {
	if o != nil && o.LogChainBreakAutoTriggerOobIncrBackup.IsSet() {
		return true
	}

	return false
}

// SetLogChainBreakAutoTriggerOobIncrBackup gets a reference to the given NullableBool and assigns it to the LogChainBreakAutoTriggerOobIncrBackup field.
func (o *AdvancedSettings) SetLogChainBreakAutoTriggerOobIncrBackup(v bool) {
	o.LogChainBreakAutoTriggerOobIncrBackup.Set(&v)
}
// SetLogChainBreakAutoTriggerOobIncrBackupNil sets the value for LogChainBreakAutoTriggerOobIncrBackup to be an explicit nil
func (o *AdvancedSettings) SetLogChainBreakAutoTriggerOobIncrBackupNil() {
	o.LogChainBreakAutoTriggerOobIncrBackup.Set(nil)
}

// UnsetLogChainBreakAutoTriggerOobIncrBackup ensures that no value is present for LogChainBreakAutoTriggerOobIncrBackup, not even an explicit nil
func (o *AdvancedSettings) UnsetLogChainBreakAutoTriggerOobIncrBackup() {
	o.LogChainBreakAutoTriggerOobIncrBackup.Unset()
}

// GetMissingDbBackupStatus returns the MissingDbBackupStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdvancedSettings) GetMissingDbBackupStatus() string {
	if o == nil || IsNil(o.MissingDbBackupStatus.Get()) {
		var ret string
		return ret
	}
	return *o.MissingDbBackupStatus.Get()
}

// GetMissingDbBackupStatusOk returns a tuple with the MissingDbBackupStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdvancedSettings) GetMissingDbBackupStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MissingDbBackupStatus.Get(), o.MissingDbBackupStatus.IsSet()
}

// HasMissingDbBackupStatus returns a boolean if a field has been set.
func (o *AdvancedSettings) HasMissingDbBackupStatus() bool {
	if o != nil && o.MissingDbBackupStatus.IsSet() {
		return true
	}

	return false
}

// SetMissingDbBackupStatus gets a reference to the given NullableString and assigns it to the MissingDbBackupStatus field.
func (o *AdvancedSettings) SetMissingDbBackupStatus(v string) {
	o.MissingDbBackupStatus.Set(&v)
}
// SetMissingDbBackupStatusNil sets the value for MissingDbBackupStatus to be an explicit nil
func (o *AdvancedSettings) SetMissingDbBackupStatusNil() {
	o.MissingDbBackupStatus.Set(nil)
}

// UnsetMissingDbBackupStatus ensures that no value is present for MissingDbBackupStatus, not even an explicit nil
func (o *AdvancedSettings) UnsetMissingDbBackupStatus() {
	o.MissingDbBackupStatus.Unset()
}

// GetNewDatabaseAutoTriggerOobIncrBackup returns the NewDatabaseAutoTriggerOobIncrBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdvancedSettings) GetNewDatabaseAutoTriggerOobIncrBackup() bool {
	if o == nil || IsNil(o.NewDatabaseAutoTriggerOobIncrBackup.Get()) {
		var ret bool
		return ret
	}
	return *o.NewDatabaseAutoTriggerOobIncrBackup.Get()
}

// GetNewDatabaseAutoTriggerOobIncrBackupOk returns a tuple with the NewDatabaseAutoTriggerOobIncrBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdvancedSettings) GetNewDatabaseAutoTriggerOobIncrBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewDatabaseAutoTriggerOobIncrBackup.Get(), o.NewDatabaseAutoTriggerOobIncrBackup.IsSet()
}

// HasNewDatabaseAutoTriggerOobIncrBackup returns a boolean if a field has been set.
func (o *AdvancedSettings) HasNewDatabaseAutoTriggerOobIncrBackup() bool {
	if o != nil && o.NewDatabaseAutoTriggerOobIncrBackup.IsSet() {
		return true
	}

	return false
}

// SetNewDatabaseAutoTriggerOobIncrBackup gets a reference to the given NullableBool and assigns it to the NewDatabaseAutoTriggerOobIncrBackup field.
func (o *AdvancedSettings) SetNewDatabaseAutoTriggerOobIncrBackup(v bool) {
	o.NewDatabaseAutoTriggerOobIncrBackup.Set(&v)
}
// SetNewDatabaseAutoTriggerOobIncrBackupNil sets the value for NewDatabaseAutoTriggerOobIncrBackup to be an explicit nil
func (o *AdvancedSettings) SetNewDatabaseAutoTriggerOobIncrBackupNil() {
	o.NewDatabaseAutoTriggerOobIncrBackup.Set(nil)
}

// UnsetNewDatabaseAutoTriggerOobIncrBackup ensures that no value is present for NewDatabaseAutoTriggerOobIncrBackup, not even an explicit nil
func (o *AdvancedSettings) UnsetNewDatabaseAutoTriggerOobIncrBackup() {
	o.NewDatabaseAutoTriggerOobIncrBackup.Unset()
}

// GetOfflineRestoringDbBackupStatus returns the OfflineRestoringDbBackupStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdvancedSettings) GetOfflineRestoringDbBackupStatus() string {
	if o == nil || IsNil(o.OfflineRestoringDbBackupStatus.Get()) {
		var ret string
		return ret
	}
	return *o.OfflineRestoringDbBackupStatus.Get()
}

// GetOfflineRestoringDbBackupStatusOk returns a tuple with the OfflineRestoringDbBackupStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdvancedSettings) GetOfflineRestoringDbBackupStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OfflineRestoringDbBackupStatus.Get(), o.OfflineRestoringDbBackupStatus.IsSet()
}

// HasOfflineRestoringDbBackupStatus returns a boolean if a field has been set.
func (o *AdvancedSettings) HasOfflineRestoringDbBackupStatus() bool {
	if o != nil && o.OfflineRestoringDbBackupStatus.IsSet() {
		return true
	}

	return false
}

// SetOfflineRestoringDbBackupStatus gets a reference to the given NullableString and assigns it to the OfflineRestoringDbBackupStatus field.
func (o *AdvancedSettings) SetOfflineRestoringDbBackupStatus(v string) {
	o.OfflineRestoringDbBackupStatus.Set(&v)
}
// SetOfflineRestoringDbBackupStatusNil sets the value for OfflineRestoringDbBackupStatus to be an explicit nil
func (o *AdvancedSettings) SetOfflineRestoringDbBackupStatusNil() {
	o.OfflineRestoringDbBackupStatus.Set(nil)
}

// UnsetOfflineRestoringDbBackupStatus ensures that no value is present for OfflineRestoringDbBackupStatus, not even an explicit nil
func (o *AdvancedSettings) UnsetOfflineRestoringDbBackupStatus() {
	o.OfflineRestoringDbBackupStatus.Unset()
}

// GetReadOnlyDbBackupStatus returns the ReadOnlyDbBackupStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdvancedSettings) GetReadOnlyDbBackupStatus() string {
	if o == nil || IsNil(o.ReadOnlyDbBackupStatus.Get()) {
		var ret string
		return ret
	}
	return *o.ReadOnlyDbBackupStatus.Get()
}

// GetReadOnlyDbBackupStatusOk returns a tuple with the ReadOnlyDbBackupStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdvancedSettings) GetReadOnlyDbBackupStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReadOnlyDbBackupStatus.Get(), o.ReadOnlyDbBackupStatus.IsSet()
}

// HasReadOnlyDbBackupStatus returns a boolean if a field has been set.
func (o *AdvancedSettings) HasReadOnlyDbBackupStatus() bool {
	if o != nil && o.ReadOnlyDbBackupStatus.IsSet() {
		return true
	}

	return false
}

// SetReadOnlyDbBackupStatus gets a reference to the given NullableString and assigns it to the ReadOnlyDbBackupStatus field.
func (o *AdvancedSettings) SetReadOnlyDbBackupStatus(v string) {
	o.ReadOnlyDbBackupStatus.Set(&v)
}
// SetReadOnlyDbBackupStatusNil sets the value for ReadOnlyDbBackupStatus to be an explicit nil
func (o *AdvancedSettings) SetReadOnlyDbBackupStatusNil() {
	o.ReadOnlyDbBackupStatus.Set(nil)
}

// UnsetReadOnlyDbBackupStatus ensures that no value is present for ReadOnlyDbBackupStatus, not even an explicit nil
func (o *AdvancedSettings) UnsetReadOnlyDbBackupStatus() {
	o.ReadOnlyDbBackupStatus.Unset()
}

// GetReportAllNonAutoprotectDbErrors returns the ReportAllNonAutoprotectDbErrors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdvancedSettings) GetReportAllNonAutoprotectDbErrors() string {
	if o == nil || IsNil(o.ReportAllNonAutoprotectDbErrors.Get()) {
		var ret string
		return ret
	}
	return *o.ReportAllNonAutoprotectDbErrors.Get()
}

// GetReportAllNonAutoprotectDbErrorsOk returns a tuple with the ReportAllNonAutoprotectDbErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdvancedSettings) GetReportAllNonAutoprotectDbErrorsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReportAllNonAutoprotectDbErrors.Get(), o.ReportAllNonAutoprotectDbErrors.IsSet()
}

// HasReportAllNonAutoprotectDbErrors returns a boolean if a field has been set.
func (o *AdvancedSettings) HasReportAllNonAutoprotectDbErrors() bool {
	if o != nil && o.ReportAllNonAutoprotectDbErrors.IsSet() {
		return true
	}

	return false
}

// SetReportAllNonAutoprotectDbErrors gets a reference to the given NullableString and assigns it to the ReportAllNonAutoprotectDbErrors field.
func (o *AdvancedSettings) SetReportAllNonAutoprotectDbErrors(v string) {
	o.ReportAllNonAutoprotectDbErrors.Set(&v)
}
// SetReportAllNonAutoprotectDbErrorsNil sets the value for ReportAllNonAutoprotectDbErrors to be an explicit nil
func (o *AdvancedSettings) SetReportAllNonAutoprotectDbErrorsNil() {
	o.ReportAllNonAutoprotectDbErrors.Set(nil)
}

// UnsetReportAllNonAutoprotectDbErrors ensures that no value is present for ReportAllNonAutoprotectDbErrors, not even an explicit nil
func (o *AdvancedSettings) UnsetReportAllNonAutoprotectDbErrors() {
	o.ReportAllNonAutoprotectDbErrors.Unset()
}

func (o AdvancedSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdvancedSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ClonedDbBackupStatus.IsSet() {
		toSerialize["clonedDbBackupStatus"] = o.ClonedDbBackupStatus.Get()
	}
	if o.DbBackupIfNotOnlineStatus.IsSet() {
		toSerialize["dbBackupIfNotOnlineStatus"] = o.DbBackupIfNotOnlineStatus.Get()
	}
	if o.LogChainBreakAutoTriggerOobIncrBackup.IsSet() {
		toSerialize["logChainBreakAutoTriggerOobIncrBackup"] = o.LogChainBreakAutoTriggerOobIncrBackup.Get()
	}
	if o.MissingDbBackupStatus.IsSet() {
		toSerialize["missingDbBackupStatus"] = o.MissingDbBackupStatus.Get()
	}
	if o.NewDatabaseAutoTriggerOobIncrBackup.IsSet() {
		toSerialize["newDatabaseAutoTriggerOobIncrBackup"] = o.NewDatabaseAutoTriggerOobIncrBackup.Get()
	}
	if o.OfflineRestoringDbBackupStatus.IsSet() {
		toSerialize["offlineRestoringDbBackupStatus"] = o.OfflineRestoringDbBackupStatus.Get()
	}
	if o.ReadOnlyDbBackupStatus.IsSet() {
		toSerialize["readOnlyDbBackupStatus"] = o.ReadOnlyDbBackupStatus.Get()
	}
	if o.ReportAllNonAutoprotectDbErrors.IsSet() {
		toSerialize["reportAllNonAutoprotectDbErrors"] = o.ReportAllNonAutoprotectDbErrors.Get()
	}
	return toSerialize, nil
}

type NullableAdvancedSettings struct {
	value *AdvancedSettings
	isSet bool
}

func (v NullableAdvancedSettings) Get() *AdvancedSettings {
	return v.value
}

func (v *NullableAdvancedSettings) Set(val *AdvancedSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableAdvancedSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableAdvancedSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdvancedSettings(val *AdvancedSettings) *NullableAdvancedSettings {
	return &NullableAdvancedSettings{value: val, isSet: true}
}

func (v NullableAdvancedSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdvancedSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


