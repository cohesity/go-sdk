/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AWSClaimStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AWSClaimStatus{}

// AWSClaimStatus Registration status of the appliance with AWS.
type AWSClaimStatus struct {
	// Specifies the error, if any, that occurred during appliance registration to AWS.
	Error NullableString `json:"error,omitempty"`
	// Specifies whether the appliance is registered to AWS
	IsRegistered NullableBool `json:"isRegistered,omitempty"`
}

// NewAWSClaimStatus instantiates a new AWSClaimStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSClaimStatus() *AWSClaimStatus {
	this := AWSClaimStatus{}
	return &this
}

// NewAWSClaimStatusWithDefaults instantiates a new AWSClaimStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSClaimStatusWithDefaults() *AWSClaimStatus {
	this := AWSClaimStatus{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AWSClaimStatus) GetError() string {
	if o == nil || IsNil(o.Error.Get()) {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSClaimStatus) GetErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *AWSClaimStatus) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *AWSClaimStatus) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *AWSClaimStatus) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *AWSClaimStatus) UnsetError() {
	o.Error.Unset()
}

// GetIsRegistered returns the IsRegistered field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AWSClaimStatus) GetIsRegistered() bool {
	if o == nil || IsNil(o.IsRegistered.Get()) {
		var ret bool
		return ret
	}
	return *o.IsRegistered.Get()
}

// GetIsRegisteredOk returns a tuple with the IsRegistered field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSClaimStatus) GetIsRegisteredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsRegistered.Get(), o.IsRegistered.IsSet()
}

// HasIsRegistered returns a boolean if a field has been set.
func (o *AWSClaimStatus) HasIsRegistered() bool {
	if o != nil && o.IsRegistered.IsSet() {
		return true
	}

	return false
}

// SetIsRegistered gets a reference to the given NullableBool and assigns it to the IsRegistered field.
func (o *AWSClaimStatus) SetIsRegistered(v bool) {
	o.IsRegistered.Set(&v)
}
// SetIsRegisteredNil sets the value for IsRegistered to be an explicit nil
func (o *AWSClaimStatus) SetIsRegisteredNil() {
	o.IsRegistered.Set(nil)
}

// UnsetIsRegistered ensures that no value is present for IsRegistered, not even an explicit nil
func (o *AWSClaimStatus) UnsetIsRegistered() {
	o.IsRegistered.Unset()
}

func (o AWSClaimStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AWSClaimStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.IsRegistered.IsSet() {
		toSerialize["isRegistered"] = o.IsRegistered.Get()
	}
	return toSerialize, nil
}

type NullableAWSClaimStatus struct {
	value *AWSClaimStatus
	isSet bool
}

func (v NullableAWSClaimStatus) Get() *AWSClaimStatus {
	return v.value
}

func (v *NullableAWSClaimStatus) Set(val *AWSClaimStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSClaimStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSClaimStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSClaimStatus(val *AWSClaimStatus) *NullableAWSClaimStatus {
	return &NullableAWSClaimStatus{value: val, isSet: true}
}

func (v NullableAWSClaimStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSClaimStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


