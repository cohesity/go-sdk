/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DataTieringTagObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTieringTagObject{}

// DataTieringTagObject struct for DataTieringTagObject
type DataTieringTagObject struct {
	// Array of tag label and value.
	Tags []DataTieringTag `json:"tags,omitempty"`
	// Specifies type of tag.
	Type NullableString `json:"type,omitempty"`
}

// NewDataTieringTagObject instantiates a new DataTieringTagObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTieringTagObject() *DataTieringTagObject {
	this := DataTieringTagObject{}
	return &this
}

// NewDataTieringTagObjectWithDefaults instantiates a new DataTieringTagObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTieringTagObjectWithDefaults() *DataTieringTagObject {
	this := DataTieringTagObject{}
	return &this
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTagObject) GetTags() []DataTieringTag {
	if o == nil {
		var ret []DataTieringTag
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTagObject) GetTagsOk() ([]DataTieringTag, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *DataTieringTagObject) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []DataTieringTag and assigns it to the Tags field.
func (o *DataTieringTagObject) SetTags(v []DataTieringTag) {
	o.Tags = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTagObject) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTagObject) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DataTieringTagObject) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *DataTieringTagObject) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DataTieringTagObject) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DataTieringTagObject) UnsetType() {
	o.Type.Unset()
}

func (o DataTieringTagObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTieringTagObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableDataTieringTagObject struct {
	value *DataTieringTagObject
	isSet bool
}

func (v NullableDataTieringTagObject) Get() *DataTieringTagObject {
	return v.value
}

func (v *NullableDataTieringTagObject) Set(val *DataTieringTagObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTieringTagObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTieringTagObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTieringTagObject(val *DataTieringTagObject) *NullableDataTieringTagObject {
	return &NullableDataTieringTagObject{value: val, isSet: true}
}

func (v NullableDataTieringTagObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTieringTagObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


