/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DataPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataPoint{}

// DataPoint Specifies a data point.
type DataPoint struct {
	// Specifies the data point value in double format.
	DoubleValue NullableFloat64 `json:"doubleValue,omitempty"`
	// Specifies the data point value in int64 format.
	Int64Value NullableInt64 `json:"int64Value,omitempty"`
	// Specifies the data point value in string format.
	StringValue NullableString `json:"stringValue,omitempty"`
	// Specifies the timestamp of the data point.
	TimestampMsecs NullableInt64 `json:"timestampMsecs,omitempty"`
}

// NewDataPoint instantiates a new DataPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataPoint() *DataPoint {
	this := DataPoint{}
	return &this
}

// NewDataPointWithDefaults instantiates a new DataPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataPointWithDefaults() *DataPoint {
	this := DataPoint{}
	return &this
}

// GetDoubleValue returns the DoubleValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataPoint) GetDoubleValue() float64 {
	if o == nil || IsNil(o.DoubleValue.Get()) {
		var ret float64
		return ret
	}
	return *o.DoubleValue.Get()
}

// GetDoubleValueOk returns a tuple with the DoubleValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataPoint) GetDoubleValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DoubleValue.Get(), o.DoubleValue.IsSet()
}

// HasDoubleValue returns a boolean if a field has been set.
func (o *DataPoint) HasDoubleValue() bool {
	if o != nil && o.DoubleValue.IsSet() {
		return true
	}

	return false
}

// SetDoubleValue gets a reference to the given NullableFloat64 and assigns it to the DoubleValue field.
func (o *DataPoint) SetDoubleValue(v float64) {
	o.DoubleValue.Set(&v)
}
// SetDoubleValueNil sets the value for DoubleValue to be an explicit nil
func (o *DataPoint) SetDoubleValueNil() {
	o.DoubleValue.Set(nil)
}

// UnsetDoubleValue ensures that no value is present for DoubleValue, not even an explicit nil
func (o *DataPoint) UnsetDoubleValue() {
	o.DoubleValue.Unset()
}

// GetInt64Value returns the Int64Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataPoint) GetInt64Value() int64 {
	if o == nil || IsNil(o.Int64Value.Get()) {
		var ret int64
		return ret
	}
	return *o.Int64Value.Get()
}

// GetInt64ValueOk returns a tuple with the Int64Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataPoint) GetInt64ValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Int64Value.Get(), o.Int64Value.IsSet()
}

// HasInt64Value returns a boolean if a field has been set.
func (o *DataPoint) HasInt64Value() bool {
	if o != nil && o.Int64Value.IsSet() {
		return true
	}

	return false
}

// SetInt64Value gets a reference to the given NullableInt64 and assigns it to the Int64Value field.
func (o *DataPoint) SetInt64Value(v int64) {
	o.Int64Value.Set(&v)
}
// SetInt64ValueNil sets the value for Int64Value to be an explicit nil
func (o *DataPoint) SetInt64ValueNil() {
	o.Int64Value.Set(nil)
}

// UnsetInt64Value ensures that no value is present for Int64Value, not even an explicit nil
func (o *DataPoint) UnsetInt64Value() {
	o.Int64Value.Unset()
}

// GetStringValue returns the StringValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataPoint) GetStringValue() string {
	if o == nil || IsNil(o.StringValue.Get()) {
		var ret string
		return ret
	}
	return *o.StringValue.Get()
}

// GetStringValueOk returns a tuple with the StringValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataPoint) GetStringValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StringValue.Get(), o.StringValue.IsSet()
}

// HasStringValue returns a boolean if a field has been set.
func (o *DataPoint) HasStringValue() bool {
	if o != nil && o.StringValue.IsSet() {
		return true
	}

	return false
}

// SetStringValue gets a reference to the given NullableString and assigns it to the StringValue field.
func (o *DataPoint) SetStringValue(v string) {
	o.StringValue.Set(&v)
}
// SetStringValueNil sets the value for StringValue to be an explicit nil
func (o *DataPoint) SetStringValueNil() {
	o.StringValue.Set(nil)
}

// UnsetStringValue ensures that no value is present for StringValue, not even an explicit nil
func (o *DataPoint) UnsetStringValue() {
	o.StringValue.Unset()
}

// GetTimestampMsecs returns the TimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataPoint) GetTimestampMsecs() int64 {
	if o == nil || IsNil(o.TimestampMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.TimestampMsecs.Get()
}

// GetTimestampMsecsOk returns a tuple with the TimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataPoint) GetTimestampMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimestampMsecs.Get(), o.TimestampMsecs.IsSet()
}

// HasTimestampMsecs returns a boolean if a field has been set.
func (o *DataPoint) HasTimestampMsecs() bool {
	if o != nil && o.TimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetTimestampMsecs gets a reference to the given NullableInt64 and assigns it to the TimestampMsecs field.
func (o *DataPoint) SetTimestampMsecs(v int64) {
	o.TimestampMsecs.Set(&v)
}
// SetTimestampMsecsNil sets the value for TimestampMsecs to be an explicit nil
func (o *DataPoint) SetTimestampMsecsNil() {
	o.TimestampMsecs.Set(nil)
}

// UnsetTimestampMsecs ensures that no value is present for TimestampMsecs, not even an explicit nil
func (o *DataPoint) UnsetTimestampMsecs() {
	o.TimestampMsecs.Unset()
}

func (o DataPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DoubleValue.IsSet() {
		toSerialize["doubleValue"] = o.DoubleValue.Get()
	}
	if o.Int64Value.IsSet() {
		toSerialize["int64Value"] = o.Int64Value.Get()
	}
	if o.StringValue.IsSet() {
		toSerialize["stringValue"] = o.StringValue.Get()
	}
	if o.TimestampMsecs.IsSet() {
		toSerialize["timestampMsecs"] = o.TimestampMsecs.Get()
	}
	return toSerialize, nil
}

type NullableDataPoint struct {
	value *DataPoint
	isSet bool
}

func (v NullableDataPoint) Get() *DataPoint {
	return v.value
}

func (v *NullableDataPoint) Set(val *DataPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableDataPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableDataPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataPoint(val *DataPoint) *NullableDataPoint {
	return &NullableDataPoint{value: val, isSet: true}
}

func (v NullableDataPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


