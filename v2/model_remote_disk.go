/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RemoteDisk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteDisk{}

// RemoteDisk Specifies the configuration of a remote disk.
type RemoteDisk struct {
	// Specifies the logical capacity of the disk in bytes.
	CapacityBytes NullableInt64 `json:"capacityBytes,omitempty"`
	// Specifies the physical capacity of the disk in bytes.
	CapacityBytesPhysical NullableInt64 `json:"capacityBytesPhysical,omitempty"`
	// Specifies the data vip used to mount the filesystem.
	DataVip NullableString `json:"dataVip,omitempty"`
	// Specifies the name of filesystem on remote storage.
	FileSystemName NullableString `json:"fileSystemName,omitempty"`
	// Specifies the disk id.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the NFS mount path of the remote disk.
	MountPath NullableString `json:"mountPath"`
	// Specifies the node id of the disk. If not specified, the disk will be evenly distributed across all the nodes.
	NodeId NullableInt64 `json:"nodeId,omitempty"`
	// Specifies ip address of the node that this remote disk is mounted on.
	NodeIp NullableString `json:"nodeIp,omitempty"`
	// Specifies the status of a remote disk.
	Status NullableString `json:"status,omitempty"`
	// Specifies the tier of the disk
	Tier NullableString `json:"tier"`
	// Specifies the logical used capacity of remote disk in bytes.
	UsedCapacityBytes NullableInt64 `json:"usedCapacityBytes,omitempty"`
	// Specifies the physical used capacity of remote disk in bytes.
	UsedCapacityBytesPhysical NullableInt64 `json:"usedCapacityBytesPhysical,omitempty"`
}

type _RemoteDisk RemoteDisk

// NewRemoteDisk instantiates a new RemoteDisk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteDisk(mountPath NullableString, tier NullableString) *RemoteDisk {
	this := RemoteDisk{}
	this.MountPath = mountPath
	this.Tier = tier
	return &this
}

// NewRemoteDiskWithDefaults instantiates a new RemoteDisk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteDiskWithDefaults() *RemoteDisk {
	this := RemoteDisk{}
	return &this
}

// GetCapacityBytes returns the CapacityBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisk) GetCapacityBytes() int64 {
	if o == nil || IsNil(o.CapacityBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.CapacityBytes.Get()
}

// GetCapacityBytesOk returns a tuple with the CapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetCapacityBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CapacityBytes.Get(), o.CapacityBytes.IsSet()
}

// HasCapacityBytes returns a boolean if a field has been set.
func (o *RemoteDisk) HasCapacityBytes() bool {
	if o != nil && o.CapacityBytes.IsSet() {
		return true
	}

	return false
}

// SetCapacityBytes gets a reference to the given NullableInt64 and assigns it to the CapacityBytes field.
func (o *RemoteDisk) SetCapacityBytes(v int64) {
	o.CapacityBytes.Set(&v)
}
// SetCapacityBytesNil sets the value for CapacityBytes to be an explicit nil
func (o *RemoteDisk) SetCapacityBytesNil() {
	o.CapacityBytes.Set(nil)
}

// UnsetCapacityBytes ensures that no value is present for CapacityBytes, not even an explicit nil
func (o *RemoteDisk) UnsetCapacityBytes() {
	o.CapacityBytes.Unset()
}

// GetCapacityBytesPhysical returns the CapacityBytesPhysical field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisk) GetCapacityBytesPhysical() int64 {
	if o == nil || IsNil(o.CapacityBytesPhysical.Get()) {
		var ret int64
		return ret
	}
	return *o.CapacityBytesPhysical.Get()
}

// GetCapacityBytesPhysicalOk returns a tuple with the CapacityBytesPhysical field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetCapacityBytesPhysicalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CapacityBytesPhysical.Get(), o.CapacityBytesPhysical.IsSet()
}

// HasCapacityBytesPhysical returns a boolean if a field has been set.
func (o *RemoteDisk) HasCapacityBytesPhysical() bool {
	if o != nil && o.CapacityBytesPhysical.IsSet() {
		return true
	}

	return false
}

// SetCapacityBytesPhysical gets a reference to the given NullableInt64 and assigns it to the CapacityBytesPhysical field.
func (o *RemoteDisk) SetCapacityBytesPhysical(v int64) {
	o.CapacityBytesPhysical.Set(&v)
}
// SetCapacityBytesPhysicalNil sets the value for CapacityBytesPhysical to be an explicit nil
func (o *RemoteDisk) SetCapacityBytesPhysicalNil() {
	o.CapacityBytesPhysical.Set(nil)
}

// UnsetCapacityBytesPhysical ensures that no value is present for CapacityBytesPhysical, not even an explicit nil
func (o *RemoteDisk) UnsetCapacityBytesPhysical() {
	o.CapacityBytesPhysical.Unset()
}

// GetDataVip returns the DataVip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisk) GetDataVip() string {
	if o == nil || IsNil(o.DataVip.Get()) {
		var ret string
		return ret
	}
	return *o.DataVip.Get()
}

// GetDataVipOk returns a tuple with the DataVip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetDataVipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataVip.Get(), o.DataVip.IsSet()
}

// HasDataVip returns a boolean if a field has been set.
func (o *RemoteDisk) HasDataVip() bool {
	if o != nil && o.DataVip.IsSet() {
		return true
	}

	return false
}

// SetDataVip gets a reference to the given NullableString and assigns it to the DataVip field.
func (o *RemoteDisk) SetDataVip(v string) {
	o.DataVip.Set(&v)
}
// SetDataVipNil sets the value for DataVip to be an explicit nil
func (o *RemoteDisk) SetDataVipNil() {
	o.DataVip.Set(nil)
}

// UnsetDataVip ensures that no value is present for DataVip, not even an explicit nil
func (o *RemoteDisk) UnsetDataVip() {
	o.DataVip.Unset()
}

// GetFileSystemName returns the FileSystemName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisk) GetFileSystemName() string {
	if o == nil || IsNil(o.FileSystemName.Get()) {
		var ret string
		return ret
	}
	return *o.FileSystemName.Get()
}

// GetFileSystemNameOk returns a tuple with the FileSystemName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetFileSystemNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileSystemName.Get(), o.FileSystemName.IsSet()
}

// HasFileSystemName returns a boolean if a field has been set.
func (o *RemoteDisk) HasFileSystemName() bool {
	if o != nil && o.FileSystemName.IsSet() {
		return true
	}

	return false
}

// SetFileSystemName gets a reference to the given NullableString and assigns it to the FileSystemName field.
func (o *RemoteDisk) SetFileSystemName(v string) {
	o.FileSystemName.Set(&v)
}
// SetFileSystemNameNil sets the value for FileSystemName to be an explicit nil
func (o *RemoteDisk) SetFileSystemNameNil() {
	o.FileSystemName.Set(nil)
}

// UnsetFileSystemName ensures that no value is present for FileSystemName, not even an explicit nil
func (o *RemoteDisk) UnsetFileSystemName() {
	o.FileSystemName.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisk) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *RemoteDisk) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *RemoteDisk) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *RemoteDisk) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *RemoteDisk) UnsetId() {
	o.Id.Unset()
}

// GetMountPath returns the MountPath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RemoteDisk) GetMountPath() string {
	if o == nil || o.MountPath.Get() == nil {
		var ret string
		return ret
	}

	return *o.MountPath.Get()
}

// GetMountPathOk returns a tuple with the MountPath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetMountPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountPath.Get(), o.MountPath.IsSet()
}

// SetMountPath sets field value
func (o *RemoteDisk) SetMountPath(v string) {
	o.MountPath.Set(&v)
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisk) GetNodeId() int64 {
	if o == nil || IsNil(o.NodeId.Get()) {
		var ret int64
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *RemoteDisk) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableInt64 and assigns it to the NodeId field.
func (o *RemoteDisk) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *RemoteDisk) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *RemoteDisk) UnsetNodeId() {
	o.NodeId.Unset()
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisk) GetNodeIp() string {
	if o == nil || IsNil(o.NodeIp.Get()) {
		var ret string
		return ret
	}
	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetNodeIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// HasNodeIp returns a boolean if a field has been set.
func (o *RemoteDisk) HasNodeIp() bool {
	if o != nil && o.NodeIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given NullableString and assigns it to the NodeIp field.
func (o *RemoteDisk) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}
// SetNodeIpNil sets the value for NodeIp to be an explicit nil
func (o *RemoteDisk) SetNodeIpNil() {
	o.NodeIp.Set(nil)
}

// UnsetNodeIp ensures that no value is present for NodeIp, not even an explicit nil
func (o *RemoteDisk) UnsetNodeIp() {
	o.NodeIp.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisk) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *RemoteDisk) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *RemoteDisk) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *RemoteDisk) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *RemoteDisk) UnsetStatus() {
	o.Status.Unset()
}

// GetTier returns the Tier field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RemoteDisk) GetTier() string {
	if o == nil || o.Tier.Get() == nil {
		var ret string
		return ret
	}

	return *o.Tier.Get()
}

// GetTierOk returns a tuple with the Tier field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetTierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tier.Get(), o.Tier.IsSet()
}

// SetTier sets field value
func (o *RemoteDisk) SetTier(v string) {
	o.Tier.Set(&v)
}

// GetUsedCapacityBytes returns the UsedCapacityBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisk) GetUsedCapacityBytes() int64 {
	if o == nil || IsNil(o.UsedCapacityBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.UsedCapacityBytes.Get()
}

// GetUsedCapacityBytesOk returns a tuple with the UsedCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetUsedCapacityBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedCapacityBytes.Get(), o.UsedCapacityBytes.IsSet()
}

// HasUsedCapacityBytes returns a boolean if a field has been set.
func (o *RemoteDisk) HasUsedCapacityBytes() bool {
	if o != nil && o.UsedCapacityBytes.IsSet() {
		return true
	}

	return false
}

// SetUsedCapacityBytes gets a reference to the given NullableInt64 and assigns it to the UsedCapacityBytes field.
func (o *RemoteDisk) SetUsedCapacityBytes(v int64) {
	o.UsedCapacityBytes.Set(&v)
}
// SetUsedCapacityBytesNil sets the value for UsedCapacityBytes to be an explicit nil
func (o *RemoteDisk) SetUsedCapacityBytesNil() {
	o.UsedCapacityBytes.Set(nil)
}

// UnsetUsedCapacityBytes ensures that no value is present for UsedCapacityBytes, not even an explicit nil
func (o *RemoteDisk) UnsetUsedCapacityBytes() {
	o.UsedCapacityBytes.Unset()
}

// GetUsedCapacityBytesPhysical returns the UsedCapacityBytesPhysical field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisk) GetUsedCapacityBytesPhysical() int64 {
	if o == nil || IsNil(o.UsedCapacityBytesPhysical.Get()) {
		var ret int64
		return ret
	}
	return *o.UsedCapacityBytesPhysical.Get()
}

// GetUsedCapacityBytesPhysicalOk returns a tuple with the UsedCapacityBytesPhysical field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisk) GetUsedCapacityBytesPhysicalOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsedCapacityBytesPhysical.Get(), o.UsedCapacityBytesPhysical.IsSet()
}

// HasUsedCapacityBytesPhysical returns a boolean if a field has been set.
func (o *RemoteDisk) HasUsedCapacityBytesPhysical() bool {
	if o != nil && o.UsedCapacityBytesPhysical.IsSet() {
		return true
	}

	return false
}

// SetUsedCapacityBytesPhysical gets a reference to the given NullableInt64 and assigns it to the UsedCapacityBytesPhysical field.
func (o *RemoteDisk) SetUsedCapacityBytesPhysical(v int64) {
	o.UsedCapacityBytesPhysical.Set(&v)
}
// SetUsedCapacityBytesPhysicalNil sets the value for UsedCapacityBytesPhysical to be an explicit nil
func (o *RemoteDisk) SetUsedCapacityBytesPhysicalNil() {
	o.UsedCapacityBytesPhysical.Set(nil)
}

// UnsetUsedCapacityBytesPhysical ensures that no value is present for UsedCapacityBytesPhysical, not even an explicit nil
func (o *RemoteDisk) UnsetUsedCapacityBytesPhysical() {
	o.UsedCapacityBytesPhysical.Unset()
}

func (o RemoteDisk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteDisk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CapacityBytes.IsSet() {
		toSerialize["capacityBytes"] = o.CapacityBytes.Get()
	}
	if o.CapacityBytesPhysical.IsSet() {
		toSerialize["capacityBytesPhysical"] = o.CapacityBytesPhysical.Get()
	}
	if o.DataVip.IsSet() {
		toSerialize["dataVip"] = o.DataVip.Get()
	}
	if o.FileSystemName.IsSet() {
		toSerialize["fileSystemName"] = o.FileSystemName.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	toSerialize["mountPath"] = o.MountPath.Get()
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	if o.NodeIp.IsSet() {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	toSerialize["tier"] = o.Tier.Get()
	if o.UsedCapacityBytes.IsSet() {
		toSerialize["usedCapacityBytes"] = o.UsedCapacityBytes.Get()
	}
	if o.UsedCapacityBytesPhysical.IsSet() {
		toSerialize["usedCapacityBytesPhysical"] = o.UsedCapacityBytesPhysical.Get()
	}
	return toSerialize, nil
}

func (o *RemoteDisk) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mountPath",
		"tier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoteDisk := _RemoteDisk{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRemoteDisk)

	if err != nil {
		return err
	}

	*o = RemoteDisk(varRemoteDisk)

	return err
}

type NullableRemoteDisk struct {
	value *RemoteDisk
	isSet bool
}

func (v NullableRemoteDisk) Get() *RemoteDisk {
	return v.value
}

func (v *NullableRemoteDisk) Set(val *RemoteDisk) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteDisk(val *RemoteDisk) *NullableRemoteDisk {
	return &NullableRemoteDisk{value: val, isSet: true}
}

func (v NullableRemoteDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


