/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeDiskLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeDiskLocation{}

// NodeDiskLocation Contains the info of the disk on the cluster.
type NodeDiskLocation struct {
	// The id of the disk where the data is exported. More information w.r.t the disk(mount_path etc) is found in cluster config.
	DiskId *int64 `json:"diskId,omitempty"`
	// Denotes the mount path of the disk. NOTE: This is only expected as it might change during reboots.
	ExpectedMountPath *string `json:"expectedMountPath,omitempty"`
	// Denotes the IP of node on which the disk is mounted. NOTE: This is only expected as it might change during reboots.
	ExpectedNodeIp *string `json:"expectedNodeIp,omitempty"`
}

// NewNodeDiskLocation instantiates a new NodeDiskLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeDiskLocation() *NodeDiskLocation {
	this := NodeDiskLocation{}
	return &this
}

// NewNodeDiskLocationWithDefaults instantiates a new NodeDiskLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeDiskLocationWithDefaults() *NodeDiskLocation {
	this := NodeDiskLocation{}
	return &this
}

// GetDiskId returns the DiskId field value if set, zero value otherwise.
func (o *NodeDiskLocation) GetDiskId() int64 {
	if o == nil || IsNil(o.DiskId) {
		var ret int64
		return ret
	}
	return *o.DiskId
}

// GetDiskIdOk returns a tuple with the DiskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDiskLocation) GetDiskIdOk() (*int64, bool) {
	if o == nil || IsNil(o.DiskId) {
		return nil, false
	}
	return o.DiskId, true
}

// HasDiskId returns a boolean if a field has been set.
func (o *NodeDiskLocation) HasDiskId() bool {
	if o != nil && !IsNil(o.DiskId) {
		return true
	}

	return false
}

// SetDiskId gets a reference to the given int64 and assigns it to the DiskId field.
func (o *NodeDiskLocation) SetDiskId(v int64) {
	o.DiskId = &v
}

// GetExpectedMountPath returns the ExpectedMountPath field value if set, zero value otherwise.
func (o *NodeDiskLocation) GetExpectedMountPath() string {
	if o == nil || IsNil(o.ExpectedMountPath) {
		var ret string
		return ret
	}
	return *o.ExpectedMountPath
}

// GetExpectedMountPathOk returns a tuple with the ExpectedMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDiskLocation) GetExpectedMountPathOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedMountPath) {
		return nil, false
	}
	return o.ExpectedMountPath, true
}

// HasExpectedMountPath returns a boolean if a field has been set.
func (o *NodeDiskLocation) HasExpectedMountPath() bool {
	if o != nil && !IsNil(o.ExpectedMountPath) {
		return true
	}

	return false
}

// SetExpectedMountPath gets a reference to the given string and assigns it to the ExpectedMountPath field.
func (o *NodeDiskLocation) SetExpectedMountPath(v string) {
	o.ExpectedMountPath = &v
}

// GetExpectedNodeIp returns the ExpectedNodeIp field value if set, zero value otherwise.
func (o *NodeDiskLocation) GetExpectedNodeIp() string {
	if o == nil || IsNil(o.ExpectedNodeIp) {
		var ret string
		return ret
	}
	return *o.ExpectedNodeIp
}

// GetExpectedNodeIpOk returns a tuple with the ExpectedNodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDiskLocation) GetExpectedNodeIpOk() (*string, bool) {
	if o == nil || IsNil(o.ExpectedNodeIp) {
		return nil, false
	}
	return o.ExpectedNodeIp, true
}

// HasExpectedNodeIp returns a boolean if a field has been set.
func (o *NodeDiskLocation) HasExpectedNodeIp() bool {
	if o != nil && !IsNil(o.ExpectedNodeIp) {
		return true
	}

	return false
}

// SetExpectedNodeIp gets a reference to the given string and assigns it to the ExpectedNodeIp field.
func (o *NodeDiskLocation) SetExpectedNodeIp(v string) {
	o.ExpectedNodeIp = &v
}

func (o NodeDiskLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeDiskLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiskId) {
		toSerialize["diskId"] = o.DiskId
	}
	if !IsNil(o.ExpectedMountPath) {
		toSerialize["expectedMountPath"] = o.ExpectedMountPath
	}
	if !IsNil(o.ExpectedNodeIp) {
		toSerialize["expectedNodeIp"] = o.ExpectedNodeIp
	}
	return toSerialize, nil
}

type NullableNodeDiskLocation struct {
	value *NodeDiskLocation
	isSet bool
}

func (v NullableNodeDiskLocation) Get() *NodeDiskLocation {
	return v.value
}

func (v *NullableNodeDiskLocation) Set(val *NodeDiskLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeDiskLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeDiskLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeDiskLocation(val *NodeDiskLocation) *NullableNodeDiskLocation {
	return &NullableNodeDiskLocation{value: val, isSet: true}
}

func (v NullableNodeDiskLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeDiskLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


