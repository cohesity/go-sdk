/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the QosPoliciesResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QosPoliciesResult{}

// QosPoliciesResult Specifies the list of QoS policies.
type QosPoliciesResult struct {
	// Specifies the list of QoS policies.
	QosPolicies []QoS `json:"qosPolicies,omitempty"`
}

// NewQosPoliciesResult instantiates a new QosPoliciesResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQosPoliciesResult() *QosPoliciesResult {
	this := QosPoliciesResult{}
	return &this
}

// NewQosPoliciesResultWithDefaults instantiates a new QosPoliciesResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQosPoliciesResultWithDefaults() *QosPoliciesResult {
	this := QosPoliciesResult{}
	return &this
}

// GetQosPolicies returns the QosPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QosPoliciesResult) GetQosPolicies() []QoS {
	if o == nil {
		var ret []QoS
		return ret
	}
	return o.QosPolicies
}

// GetQosPoliciesOk returns a tuple with the QosPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QosPoliciesResult) GetQosPoliciesOk() ([]QoS, bool) {
	if o == nil || IsNil(o.QosPolicies) {
		return nil, false
	}
	return o.QosPolicies, true
}

// HasQosPolicies returns a boolean if a field has been set.
func (o *QosPoliciesResult) HasQosPolicies() bool {
	if o != nil && !IsNil(o.QosPolicies) {
		return true
	}

	return false
}

// SetQosPolicies gets a reference to the given []QoS and assigns it to the QosPolicies field.
func (o *QosPoliciesResult) SetQosPolicies(v []QoS) {
	o.QosPolicies = v
}

func (o QosPoliciesResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QosPoliciesResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.QosPolicies != nil {
		toSerialize["qosPolicies"] = o.QosPolicies
	}
	return toSerialize, nil
}

type NullableQosPoliciesResult struct {
	value *QosPoliciesResult
	isSet bool
}

func (v NullableQosPoliciesResult) Get() *QosPoliciesResult {
	return v.value
}

func (v *NullableQosPoliciesResult) Set(val *QosPoliciesResult) {
	v.value = val
	v.isSet = true
}

func (v NullableQosPoliciesResult) IsSet() bool {
	return v.isSet
}

func (v *NullableQosPoliciesResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQosPoliciesResult(val *QosPoliciesResult) *NullableQosPoliciesResult {
	return &NullableQosPoliciesResult{value: val, isSet: true}
}

func (v NullableQosPoliciesResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQosPoliciesResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


