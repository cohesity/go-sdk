/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the S3TaggingFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3TaggingFilter{}

// S3TaggingFilter struct for S3TaggingFilter
type S3TaggingFilter struct {
	// If set, it enables tagging filter for S3 views.
	IsEnabled NullableBool `json:"isEnabled,omitempty"`
	// Whitelist or blacklist the objects to be scanned.
	Mode NullableString `json:"mode,omitempty"`
	// List of key, value pair. If any of the tags on the object matches any tags defined in tagSet array, it's regarded as a match.
	TagSet []TagSet `json:"tagSet,omitempty"`
}

// NewS3TaggingFilter instantiates a new S3TaggingFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3TaggingFilter() *S3TaggingFilter {
	this := S3TaggingFilter{}
	return &this
}

// NewS3TaggingFilterWithDefaults instantiates a new S3TaggingFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3TaggingFilterWithDefaults() *S3TaggingFilter {
	this := S3TaggingFilter{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3TaggingFilter) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3TaggingFilter) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *S3TaggingFilter) HasIsEnabled() bool {
	if o != nil && o.IsEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given NullableBool and assigns it to the IsEnabled field.
func (o *S3TaggingFilter) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}
// SetIsEnabledNil sets the value for IsEnabled to be an explicit nil
func (o *S3TaggingFilter) SetIsEnabledNil() {
	o.IsEnabled.Set(nil)
}

// UnsetIsEnabled ensures that no value is present for IsEnabled, not even an explicit nil
func (o *S3TaggingFilter) UnsetIsEnabled() {
	o.IsEnabled.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3TaggingFilter) GetMode() string {
	if o == nil || IsNil(o.Mode.Get()) {
		var ret string
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3TaggingFilter) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *S3TaggingFilter) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableString and assigns it to the Mode field.
func (o *S3TaggingFilter) SetMode(v string) {
	o.Mode.Set(&v)
}
// SetModeNil sets the value for Mode to be an explicit nil
func (o *S3TaggingFilter) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *S3TaggingFilter) UnsetMode() {
	o.Mode.Unset()
}

// GetTagSet returns the TagSet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3TaggingFilter) GetTagSet() []TagSet {
	if o == nil {
		var ret []TagSet
		return ret
	}
	return o.TagSet
}

// GetTagSetOk returns a tuple with the TagSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3TaggingFilter) GetTagSetOk() ([]TagSet, bool) {
	if o == nil || IsNil(o.TagSet) {
		return nil, false
	}
	return o.TagSet, true
}

// HasTagSet returns a boolean if a field has been set.
func (o *S3TaggingFilter) HasTagSet() bool {
	if o != nil && !IsNil(o.TagSet) {
		return true
	}

	return false
}

// SetTagSet gets a reference to the given []TagSet and assigns it to the TagSet field.
func (o *S3TaggingFilter) SetTagSet(v []TagSet) {
	o.TagSet = v
}

func (o S3TaggingFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3TaggingFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IsEnabled.IsSet() {
		toSerialize["isEnabled"] = o.IsEnabled.Get()
	}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	if o.TagSet != nil {
		toSerialize["tagSet"] = o.TagSet
	}
	return toSerialize, nil
}

type NullableS3TaggingFilter struct {
	value *S3TaggingFilter
	isSet bool
}

func (v NullableS3TaggingFilter) Get() *S3TaggingFilter {
	return v.value
}

func (v *NullableS3TaggingFilter) Set(val *S3TaggingFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableS3TaggingFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableS3TaggingFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3TaggingFilter(val *S3TaggingFilter) *NullableS3TaggingFilter {
	return &NullableS3TaggingFilter{value: val, isSet: true}
}

func (v NullableS3TaggingFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3TaggingFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


