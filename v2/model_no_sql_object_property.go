/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NoSqlObjectProperty type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NoSqlObjectProperty{}

// NoSqlObjectProperty Specifies an Object property as a set of key-value pair for NoSQL objects.
type NoSqlObjectProperty struct {
	// Specifies the key of the property.
	Key NullableString `json:"key"`
	// specifies the value of the property.
	Value NullableString `json:"value"`
}

type _NoSqlObjectProperty NoSqlObjectProperty

// NewNoSqlObjectProperty instantiates a new NoSqlObjectProperty object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoSqlObjectProperty(key NullableString, value NullableString) *NoSqlObjectProperty {
	this := NoSqlObjectProperty{}
	this.Key = key
	this.Value = value
	return &this
}

// NewNoSqlObjectPropertyWithDefaults instantiates a new NoSqlObjectProperty object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoSqlObjectPropertyWithDefaults() *NoSqlObjectProperty {
	this := NoSqlObjectProperty{}
	return &this
}

// GetKey returns the Key field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NoSqlObjectProperty) GetKey() string {
	if o == nil || o.Key.Get() == nil {
		var ret string
		return ret
	}

	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlObjectProperty) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// SetKey sets field value
func (o *NoSqlObjectProperty) SetKey(v string) {
	o.Key.Set(&v)
}

// GetValue returns the Value field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NoSqlObjectProperty) GetValue() string {
	if o == nil || o.Value.Get() == nil {
		var ret string
		return ret
	}

	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlObjectProperty) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// SetValue sets field value
func (o *NoSqlObjectProperty) SetValue(v string) {
	o.Value.Set(&v)
}

func (o NoSqlObjectProperty) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NoSqlObjectProperty) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["key"] = o.Key.Get()
	toSerialize["value"] = o.Value.Get()
	return toSerialize, nil
}

func (o *NoSqlObjectProperty) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"key",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNoSqlObjectProperty := _NoSqlObjectProperty{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNoSqlObjectProperty)

	if err != nil {
		return err
	}

	*o = NoSqlObjectProperty(varNoSqlObjectProperty)

	return err
}

type NullableNoSqlObjectProperty struct {
	value *NoSqlObjectProperty
	isSet bool
}

func (v NullableNoSqlObjectProperty) Get() *NoSqlObjectProperty {
	return v.value
}

func (v *NullableNoSqlObjectProperty) Set(val *NoSqlObjectProperty) {
	v.value = val
	v.isSet = true
}

func (v NullableNoSqlObjectProperty) IsSet() bool {
	return v.isSet
}

func (v *NullableNoSqlObjectProperty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoSqlObjectProperty(val *NoSqlObjectProperty) *NullableNoSqlObjectProperty {
	return &NullableNoSqlObjectProperty{value: val, isSet: true}
}

func (v NullableNoSqlObjectProperty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoSqlObjectProperty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


