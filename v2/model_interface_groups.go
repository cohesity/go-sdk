/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the InterfaceGroups type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceGroups{}

// InterfaceGroups Interface groups configured on the cluster.
type InterfaceGroups struct {
	// Interface groups configured on the cluster.
	InterfaceGroups []InterfaceGroup `json:"interfaceGroups,omitempty"`
}

// NewInterfaceGroups instantiates a new InterfaceGroups object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceGroups() *InterfaceGroups {
	this := InterfaceGroups{}
	return &this
}

// NewInterfaceGroupsWithDefaults instantiates a new InterfaceGroups object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceGroupsWithDefaults() *InterfaceGroups {
	this := InterfaceGroups{}
	return &this
}

// GetInterfaceGroups returns the InterfaceGroups field value if set, zero value otherwise.
func (o *InterfaceGroups) GetInterfaceGroups() []InterfaceGroup {
	if o == nil || IsNil(o.InterfaceGroups) {
		var ret []InterfaceGroup
		return ret
	}
	return o.InterfaceGroups
}

// GetInterfaceGroupsOk returns a tuple with the InterfaceGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceGroups) GetInterfaceGroupsOk() ([]InterfaceGroup, bool) {
	if o == nil || IsNil(o.InterfaceGroups) {
		return nil, false
	}
	return o.InterfaceGroups, true
}

// HasInterfaceGroups returns a boolean if a field has been set.
func (o *InterfaceGroups) HasInterfaceGroups() bool {
	if o != nil && !IsNil(o.InterfaceGroups) {
		return true
	}

	return false
}

// SetInterfaceGroups gets a reference to the given []InterfaceGroup and assigns it to the InterfaceGroups field.
func (o *InterfaceGroups) SetInterfaceGroups(v []InterfaceGroup) {
	o.InterfaceGroups = v
}

func (o InterfaceGroups) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceGroups) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InterfaceGroups) {
		toSerialize["interfaceGroups"] = o.InterfaceGroups
	}
	return toSerialize, nil
}

type NullableInterfaceGroups struct {
	value *InterfaceGroups
	isSet bool
}

func (v NullableInterfaceGroups) Get() *InterfaceGroups {
	return v.value
}

func (v *NullableInterfaceGroups) Set(val *InterfaceGroups) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceGroups) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceGroups) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceGroups(val *InterfaceGroups) *NullableInterfaceGroups {
	return &NullableInterfaceGroups{value: val, isSet: true}
}

func (v NullableInterfaceGroups) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceGroups) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


