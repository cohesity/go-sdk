/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SupportUserConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportUserConfig{}

// SupportUserConfig Specifies the support user's configuration on the Cohesity cluster such as if its shell password has been set and/or sudo access is granted.
type SupportUserConfig struct {
	// Specifies if the support user has sudo access.
	EnableSudoAccess NullableBool `json:"enableSudoAccess,omitempty"`
	// Specifies if the password for the support user has been set.
	PasswordSet NullableBool `json:"passwordSet,omitempty"`
	// Specifies the sudo access end time stamp in milliseconds since unix epoch.
	SudoAccessEndTimestampMsecs NullableInt32 `json:"sudoAccessEndTimestampMsecs,omitempty"`
	// Specifies whether the sudo access mode is enabled or not
	SudoAccessMode NullableInt64 `json:"sudoAccessMode,omitempty"`
}

// NewSupportUserConfig instantiates a new SupportUserConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportUserConfig() *SupportUserConfig {
	this := SupportUserConfig{}
	return &this
}

// NewSupportUserConfigWithDefaults instantiates a new SupportUserConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportUserConfigWithDefaults() *SupportUserConfig {
	this := SupportUserConfig{}
	return &this
}

// GetEnableSudoAccess returns the EnableSudoAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportUserConfig) GetEnableSudoAccess() bool {
	if o == nil || IsNil(o.EnableSudoAccess.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSudoAccess.Get()
}

// GetEnableSudoAccessOk returns a tuple with the EnableSudoAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportUserConfig) GetEnableSudoAccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSudoAccess.Get(), o.EnableSudoAccess.IsSet()
}

// HasEnableSudoAccess returns a boolean if a field has been set.
func (o *SupportUserConfig) HasEnableSudoAccess() bool {
	if o != nil && o.EnableSudoAccess.IsSet() {
		return true
	}

	return false
}

// SetEnableSudoAccess gets a reference to the given NullableBool and assigns it to the EnableSudoAccess field.
func (o *SupportUserConfig) SetEnableSudoAccess(v bool) {
	o.EnableSudoAccess.Set(&v)
}
// SetEnableSudoAccessNil sets the value for EnableSudoAccess to be an explicit nil
func (o *SupportUserConfig) SetEnableSudoAccessNil() {
	o.EnableSudoAccess.Set(nil)
}

// UnsetEnableSudoAccess ensures that no value is present for EnableSudoAccess, not even an explicit nil
func (o *SupportUserConfig) UnsetEnableSudoAccess() {
	o.EnableSudoAccess.Unset()
}

// GetPasswordSet returns the PasswordSet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportUserConfig) GetPasswordSet() bool {
	if o == nil || IsNil(o.PasswordSet.Get()) {
		var ret bool
		return ret
	}
	return *o.PasswordSet.Get()
}

// GetPasswordSetOk returns a tuple with the PasswordSet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportUserConfig) GetPasswordSetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PasswordSet.Get(), o.PasswordSet.IsSet()
}

// HasPasswordSet returns a boolean if a field has been set.
func (o *SupportUserConfig) HasPasswordSet() bool {
	if o != nil && o.PasswordSet.IsSet() {
		return true
	}

	return false
}

// SetPasswordSet gets a reference to the given NullableBool and assigns it to the PasswordSet field.
func (o *SupportUserConfig) SetPasswordSet(v bool) {
	o.PasswordSet.Set(&v)
}
// SetPasswordSetNil sets the value for PasswordSet to be an explicit nil
func (o *SupportUserConfig) SetPasswordSetNil() {
	o.PasswordSet.Set(nil)
}

// UnsetPasswordSet ensures that no value is present for PasswordSet, not even an explicit nil
func (o *SupportUserConfig) UnsetPasswordSet() {
	o.PasswordSet.Unset()
}

// GetSudoAccessEndTimestampMsecs returns the SudoAccessEndTimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportUserConfig) GetSudoAccessEndTimestampMsecs() int32 {
	if o == nil || IsNil(o.SudoAccessEndTimestampMsecs.Get()) {
		var ret int32
		return ret
	}
	return *o.SudoAccessEndTimestampMsecs.Get()
}

// GetSudoAccessEndTimestampMsecsOk returns a tuple with the SudoAccessEndTimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportUserConfig) GetSudoAccessEndTimestampMsecsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SudoAccessEndTimestampMsecs.Get(), o.SudoAccessEndTimestampMsecs.IsSet()
}

// HasSudoAccessEndTimestampMsecs returns a boolean if a field has been set.
func (o *SupportUserConfig) HasSudoAccessEndTimestampMsecs() bool {
	if o != nil && o.SudoAccessEndTimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetSudoAccessEndTimestampMsecs gets a reference to the given NullableInt32 and assigns it to the SudoAccessEndTimestampMsecs field.
func (o *SupportUserConfig) SetSudoAccessEndTimestampMsecs(v int32) {
	o.SudoAccessEndTimestampMsecs.Set(&v)
}
// SetSudoAccessEndTimestampMsecsNil sets the value for SudoAccessEndTimestampMsecs to be an explicit nil
func (o *SupportUserConfig) SetSudoAccessEndTimestampMsecsNil() {
	o.SudoAccessEndTimestampMsecs.Set(nil)
}

// UnsetSudoAccessEndTimestampMsecs ensures that no value is present for SudoAccessEndTimestampMsecs, not even an explicit nil
func (o *SupportUserConfig) UnsetSudoAccessEndTimestampMsecs() {
	o.SudoAccessEndTimestampMsecs.Unset()
}

// GetSudoAccessMode returns the SudoAccessMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportUserConfig) GetSudoAccessMode() int64 {
	if o == nil || IsNil(o.SudoAccessMode.Get()) {
		var ret int64
		return ret
	}
	return *o.SudoAccessMode.Get()
}

// GetSudoAccessModeOk returns a tuple with the SudoAccessMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportUserConfig) GetSudoAccessModeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SudoAccessMode.Get(), o.SudoAccessMode.IsSet()
}

// HasSudoAccessMode returns a boolean if a field has been set.
func (o *SupportUserConfig) HasSudoAccessMode() bool {
	if o != nil && o.SudoAccessMode.IsSet() {
		return true
	}

	return false
}

// SetSudoAccessMode gets a reference to the given NullableInt64 and assigns it to the SudoAccessMode field.
func (o *SupportUserConfig) SetSudoAccessMode(v int64) {
	o.SudoAccessMode.Set(&v)
}
// SetSudoAccessModeNil sets the value for SudoAccessMode to be an explicit nil
func (o *SupportUserConfig) SetSudoAccessModeNil() {
	o.SudoAccessMode.Set(nil)
}

// UnsetSudoAccessMode ensures that no value is present for SudoAccessMode, not even an explicit nil
func (o *SupportUserConfig) UnsetSudoAccessMode() {
	o.SudoAccessMode.Unset()
}

func (o SupportUserConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportUserConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableSudoAccess.IsSet() {
		toSerialize["enableSudoAccess"] = o.EnableSudoAccess.Get()
	}
	if o.PasswordSet.IsSet() {
		toSerialize["passwordSet"] = o.PasswordSet.Get()
	}
	if o.SudoAccessEndTimestampMsecs.IsSet() {
		toSerialize["sudoAccessEndTimestampMsecs"] = o.SudoAccessEndTimestampMsecs.Get()
	}
	if o.SudoAccessMode.IsSet() {
		toSerialize["sudoAccessMode"] = o.SudoAccessMode.Get()
	}
	return toSerialize, nil
}

type NullableSupportUserConfig struct {
	value *SupportUserConfig
	isSet bool
}

func (v NullableSupportUserConfig) Get() *SupportUserConfig {
	return v.value
}

func (v *NullableSupportUserConfig) Set(val *SupportUserConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportUserConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportUserConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportUserConfig(val *SupportUserConfig) *NullableSupportUserConfig {
	return &NullableSupportUserConfig{value: val, isSet: true}
}

func (v NullableSupportUserConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportUserConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


