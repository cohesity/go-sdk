/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the VirtualDiskInformationResponseParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualDiskInformationResponseParams{}

// VirtualDiskInformationResponseParams specifies virtual disk information
type VirtualDiskInformationResponseParams struct {
	// An array of objects, each providing information on the virtual disk object.
	Disks []VirtualDiskInformation `json:"disks,omitempty"`
}

// NewVirtualDiskInformationResponseParams instantiates a new VirtualDiskInformationResponseParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDiskInformationResponseParams() *VirtualDiskInformationResponseParams {
	this := VirtualDiskInformationResponseParams{}
	return &this
}

// NewVirtualDiskInformationResponseParamsWithDefaults instantiates a new VirtualDiskInformationResponseParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDiskInformationResponseParamsWithDefaults() *VirtualDiskInformationResponseParams {
	this := VirtualDiskInformationResponseParams{}
	return &this
}

// GetDisks returns the Disks field value if set, zero value otherwise.
func (o *VirtualDiskInformationResponseParams) GetDisks() []VirtualDiskInformation {
	if o == nil || IsNil(o.Disks) {
		var ret []VirtualDiskInformation
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDiskInformationResponseParams) GetDisksOk() ([]VirtualDiskInformation, bool) {
	if o == nil || IsNil(o.Disks) {
		return nil, false
	}
	return o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *VirtualDiskInformationResponseParams) HasDisks() bool {
	if o != nil && !IsNil(o.Disks) {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []VirtualDiskInformation and assigns it to the Disks field.
func (o *VirtualDiskInformationResponseParams) SetDisks(v []VirtualDiskInformation) {
	o.Disks = v
}

func (o VirtualDiskInformationResponseParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualDiskInformationResponseParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Disks) {
		toSerialize["disks"] = o.Disks
	}
	return toSerialize, nil
}

type NullableVirtualDiskInformationResponseParams struct {
	value *VirtualDiskInformationResponseParams
	isSet bool
}

func (v NullableVirtualDiskInformationResponseParams) Get() *VirtualDiskInformationResponseParams {
	return v.value
}

func (v *NullableVirtualDiskInformationResponseParams) Set(val *VirtualDiskInformationResponseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDiskInformationResponseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDiskInformationResponseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDiskInformationResponseParams(val *VirtualDiskInformationResponseParams) *NullableVirtualDiskInformationResponseParams {
	return &NullableVirtualDiskInformationResponseParams{value: val, isSet: true}
}

func (v NullableVirtualDiskInformationResponseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDiskInformationResponseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


