/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TargetsConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TargetsConfiguration{}

// TargetsConfiguration Specifies the replication, archival and cloud spin targets of Protection Policy.
type TargetsConfiguration struct {
	ArchivalTargets []ArchivalConfig `json:"archivalTargets,omitempty"`
	CloudSpinTargets []CloudSpinConfig `json:"cloudSpinTargets,omitempty"`
	OnpremDeployTargets []OnpremDeployConfig `json:"onpremDeployTargets,omitempty"`
	ReplicationTargets []ReplicationConfig `json:"replicationTargets,omitempty"`
	RpaasTargets []RpaasConfig `json:"rpaasTargets,omitempty"`
}

// NewTargetsConfiguration instantiates a new TargetsConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetsConfiguration() *TargetsConfiguration {
	this := TargetsConfiguration{}
	return &this
}

// NewTargetsConfigurationWithDefaults instantiates a new TargetsConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetsConfigurationWithDefaults() *TargetsConfiguration {
	this := TargetsConfiguration{}
	return &this
}

// GetArchivalTargets returns the ArchivalTargets field value if set, zero value otherwise.
func (o *TargetsConfiguration) GetArchivalTargets() []ArchivalConfig {
	if o == nil || IsNil(o.ArchivalTargets) {
		var ret []ArchivalConfig
		return ret
	}
	return o.ArchivalTargets
}

// GetArchivalTargetsOk returns a tuple with the ArchivalTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetsConfiguration) GetArchivalTargetsOk() ([]ArchivalConfig, bool) {
	if o == nil || IsNil(o.ArchivalTargets) {
		return nil, false
	}
	return o.ArchivalTargets, true
}

// HasArchivalTargets returns a boolean if a field has been set.
func (o *TargetsConfiguration) HasArchivalTargets() bool {
	if o != nil && !IsNil(o.ArchivalTargets) {
		return true
	}

	return false
}

// SetArchivalTargets gets a reference to the given []ArchivalConfig and assigns it to the ArchivalTargets field.
func (o *TargetsConfiguration) SetArchivalTargets(v []ArchivalConfig) {
	o.ArchivalTargets = v
}

// GetCloudSpinTargets returns the CloudSpinTargets field value if set, zero value otherwise.
func (o *TargetsConfiguration) GetCloudSpinTargets() []CloudSpinConfig {
	if o == nil || IsNil(o.CloudSpinTargets) {
		var ret []CloudSpinConfig
		return ret
	}
	return o.CloudSpinTargets
}

// GetCloudSpinTargetsOk returns a tuple with the CloudSpinTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetsConfiguration) GetCloudSpinTargetsOk() ([]CloudSpinConfig, bool) {
	if o == nil || IsNil(o.CloudSpinTargets) {
		return nil, false
	}
	return o.CloudSpinTargets, true
}

// HasCloudSpinTargets returns a boolean if a field has been set.
func (o *TargetsConfiguration) HasCloudSpinTargets() bool {
	if o != nil && !IsNil(o.CloudSpinTargets) {
		return true
	}

	return false
}

// SetCloudSpinTargets gets a reference to the given []CloudSpinConfig and assigns it to the CloudSpinTargets field.
func (o *TargetsConfiguration) SetCloudSpinTargets(v []CloudSpinConfig) {
	o.CloudSpinTargets = v
}

// GetOnpremDeployTargets returns the OnpremDeployTargets field value if set, zero value otherwise.
func (o *TargetsConfiguration) GetOnpremDeployTargets() []OnpremDeployConfig {
	if o == nil || IsNil(o.OnpremDeployTargets) {
		var ret []OnpremDeployConfig
		return ret
	}
	return o.OnpremDeployTargets
}

// GetOnpremDeployTargetsOk returns a tuple with the OnpremDeployTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetsConfiguration) GetOnpremDeployTargetsOk() ([]OnpremDeployConfig, bool) {
	if o == nil || IsNil(o.OnpremDeployTargets) {
		return nil, false
	}
	return o.OnpremDeployTargets, true
}

// HasOnpremDeployTargets returns a boolean if a field has been set.
func (o *TargetsConfiguration) HasOnpremDeployTargets() bool {
	if o != nil && !IsNil(o.OnpremDeployTargets) {
		return true
	}

	return false
}

// SetOnpremDeployTargets gets a reference to the given []OnpremDeployConfig and assigns it to the OnpremDeployTargets field.
func (o *TargetsConfiguration) SetOnpremDeployTargets(v []OnpremDeployConfig) {
	o.OnpremDeployTargets = v
}

// GetReplicationTargets returns the ReplicationTargets field value if set, zero value otherwise.
func (o *TargetsConfiguration) GetReplicationTargets() []ReplicationConfig {
	if o == nil || IsNil(o.ReplicationTargets) {
		var ret []ReplicationConfig
		return ret
	}
	return o.ReplicationTargets
}

// GetReplicationTargetsOk returns a tuple with the ReplicationTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetsConfiguration) GetReplicationTargetsOk() ([]ReplicationConfig, bool) {
	if o == nil || IsNil(o.ReplicationTargets) {
		return nil, false
	}
	return o.ReplicationTargets, true
}

// HasReplicationTargets returns a boolean if a field has been set.
func (o *TargetsConfiguration) HasReplicationTargets() bool {
	if o != nil && !IsNil(o.ReplicationTargets) {
		return true
	}

	return false
}

// SetReplicationTargets gets a reference to the given []ReplicationConfig and assigns it to the ReplicationTargets field.
func (o *TargetsConfiguration) SetReplicationTargets(v []ReplicationConfig) {
	o.ReplicationTargets = v
}

// GetRpaasTargets returns the RpaasTargets field value if set, zero value otherwise.
func (o *TargetsConfiguration) GetRpaasTargets() []RpaasConfig {
	if o == nil || IsNil(o.RpaasTargets) {
		var ret []RpaasConfig
		return ret
	}
	return o.RpaasTargets
}

// GetRpaasTargetsOk returns a tuple with the RpaasTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TargetsConfiguration) GetRpaasTargetsOk() ([]RpaasConfig, bool) {
	if o == nil || IsNil(o.RpaasTargets) {
		return nil, false
	}
	return o.RpaasTargets, true
}

// HasRpaasTargets returns a boolean if a field has been set.
func (o *TargetsConfiguration) HasRpaasTargets() bool {
	if o != nil && !IsNil(o.RpaasTargets) {
		return true
	}

	return false
}

// SetRpaasTargets gets a reference to the given []RpaasConfig and assigns it to the RpaasTargets field.
func (o *TargetsConfiguration) SetRpaasTargets(v []RpaasConfig) {
	o.RpaasTargets = v
}

func (o TargetsConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TargetsConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArchivalTargets) {
		toSerialize["archivalTargets"] = o.ArchivalTargets
	}
	if !IsNil(o.CloudSpinTargets) {
		toSerialize["cloudSpinTargets"] = o.CloudSpinTargets
	}
	if !IsNil(o.OnpremDeployTargets) {
		toSerialize["onpremDeployTargets"] = o.OnpremDeployTargets
	}
	if !IsNil(o.ReplicationTargets) {
		toSerialize["replicationTargets"] = o.ReplicationTargets
	}
	if !IsNil(o.RpaasTargets) {
		toSerialize["rpaasTargets"] = o.RpaasTargets
	}
	return toSerialize, nil
}

type NullableTargetsConfiguration struct {
	value *TargetsConfiguration
	isSet bool
}

func (v NullableTargetsConfiguration) Get() *TargetsConfiguration {
	return v.value
}

func (v *NullableTargetsConfiguration) Set(val *TargetsConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetsConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetsConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetsConfiguration(val *TargetsConfiguration) *NullableTargetsConfiguration {
	return &NullableTargetsConfiguration{value: val, isSet: true}
}

func (v NullableTargetsConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetsConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


