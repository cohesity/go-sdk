/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Office365PreservationHoldLibraryParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Office365PreservationHoldLibraryParams{}

// Office365PreservationHoldLibraryParams Specifies the parameters specific to the protection of the Preservation Hold library. The Preservation Hold library is a hidden system location that isn't designed to be used interactively but instead, automatically stores files when this is needed for compliance reasons. It's not supported to edit, delete, or move these automatically retained files yourself. Instead, use compliance tools, such as those supported by eDiscovery to access these files.
type Office365PreservationHoldLibraryParams struct {
	// Specifies whether to protect the preservation hold library drive if one exists. Default is false.
	ShouldProtect NullableBool `json:"shouldProtect,omitempty"`
}

// NewOffice365PreservationHoldLibraryParams instantiates a new Office365PreservationHoldLibraryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffice365PreservationHoldLibraryParams() *Office365PreservationHoldLibraryParams {
	this := Office365PreservationHoldLibraryParams{}
	return &this
}

// NewOffice365PreservationHoldLibraryParamsWithDefaults instantiates a new Office365PreservationHoldLibraryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffice365PreservationHoldLibraryParamsWithDefaults() *Office365PreservationHoldLibraryParams {
	this := Office365PreservationHoldLibraryParams{}
	return &this
}

// GetShouldProtect returns the ShouldProtect field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365PreservationHoldLibraryParams) GetShouldProtect() bool {
	if o == nil || IsNil(o.ShouldProtect.Get()) {
		var ret bool
		return ret
	}
	return *o.ShouldProtect.Get()
}

// GetShouldProtectOk returns a tuple with the ShouldProtect field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365PreservationHoldLibraryParams) GetShouldProtectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShouldProtect.Get(), o.ShouldProtect.IsSet()
}

// HasShouldProtect returns a boolean if a field has been set.
func (o *Office365PreservationHoldLibraryParams) HasShouldProtect() bool {
	if o != nil && o.ShouldProtect.IsSet() {
		return true
	}

	return false
}

// SetShouldProtect gets a reference to the given NullableBool and assigns it to the ShouldProtect field.
func (o *Office365PreservationHoldLibraryParams) SetShouldProtect(v bool) {
	o.ShouldProtect.Set(&v)
}
// SetShouldProtectNil sets the value for ShouldProtect to be an explicit nil
func (o *Office365PreservationHoldLibraryParams) SetShouldProtectNil() {
	o.ShouldProtect.Set(nil)
}

// UnsetShouldProtect ensures that no value is present for ShouldProtect, not even an explicit nil
func (o *Office365PreservationHoldLibraryParams) UnsetShouldProtect() {
	o.ShouldProtect.Unset()
}

func (o Office365PreservationHoldLibraryParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Office365PreservationHoldLibraryParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ShouldProtect.IsSet() {
		toSerialize["shouldProtect"] = o.ShouldProtect.Get()
	}
	return toSerialize, nil
}

type NullableOffice365PreservationHoldLibraryParams struct {
	value *Office365PreservationHoldLibraryParams
	isSet bool
}

func (v NullableOffice365PreservationHoldLibraryParams) Get() *Office365PreservationHoldLibraryParams {
	return v.value
}

func (v *NullableOffice365PreservationHoldLibraryParams) Set(val *Office365PreservationHoldLibraryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOffice365PreservationHoldLibraryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOffice365PreservationHoldLibraryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffice365PreservationHoldLibraryParams(val *Office365PreservationHoldLibraryParams) *NullableOffice365PreservationHoldLibraryParams {
	return &NullableOffice365PreservationHoldLibraryParams{value: val, isSet: true}
}

func (v NullableOffice365PreservationHoldLibraryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffice365PreservationHoldLibraryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


