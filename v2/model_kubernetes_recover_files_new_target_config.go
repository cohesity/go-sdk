/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KubernetesRecoverFilesNewTargetConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesRecoverFilesNewTargetConfig{}

// KubernetesRecoverFilesNewTargetConfig Specifies the configuration for recovering files and folders to a new target.
type KubernetesRecoverFilesNewTargetConfig struct {
	// Specifies the path location to recover files to.
	AbsolutePath NullableString `json:"absolutePath"`
	TargetNamespace NullableKubernetesRecoverFilesNewTargetConfigTargetNamespace `json:"targetNamespace,omitempty"`
	TargetPvc NullableKubernetesRecoverFilesNewTargetConfigTargetPvc `json:"targetPvc"`
	TargetSource NullableKubernetesRecoverFilesNewTargetConfigTargetSource `json:"targetSource,omitempty"`
}

type _KubernetesRecoverFilesNewTargetConfig KubernetesRecoverFilesNewTargetConfig

// NewKubernetesRecoverFilesNewTargetConfig instantiates a new KubernetesRecoverFilesNewTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesRecoverFilesNewTargetConfig(absolutePath NullableString, targetPvc NullableKubernetesRecoverFilesNewTargetConfigTargetPvc) *KubernetesRecoverFilesNewTargetConfig {
	this := KubernetesRecoverFilesNewTargetConfig{}
	this.AbsolutePath = absolutePath
	this.TargetPvc = targetPvc
	return &this
}

// NewKubernetesRecoverFilesNewTargetConfigWithDefaults instantiates a new KubernetesRecoverFilesNewTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesRecoverFilesNewTargetConfigWithDefaults() *KubernetesRecoverFilesNewTargetConfig {
	this := KubernetesRecoverFilesNewTargetConfig{}
	return &this
}

// GetAbsolutePath returns the AbsolutePath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *KubernetesRecoverFilesNewTargetConfig) GetAbsolutePath() string {
	if o == nil || o.AbsolutePath.Get() == nil {
		var ret string
		return ret
	}

	return *o.AbsolutePath.Get()
}

// GetAbsolutePathOk returns a tuple with the AbsolutePath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesRecoverFilesNewTargetConfig) GetAbsolutePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AbsolutePath.Get(), o.AbsolutePath.IsSet()
}

// SetAbsolutePath sets field value
func (o *KubernetesRecoverFilesNewTargetConfig) SetAbsolutePath(v string) {
	o.AbsolutePath.Set(&v)
}

// GetTargetNamespace returns the TargetNamespace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesRecoverFilesNewTargetConfig) GetTargetNamespace() KubernetesRecoverFilesNewTargetConfigTargetNamespace {
	if o == nil || IsNil(o.TargetNamespace.Get()) {
		var ret KubernetesRecoverFilesNewTargetConfigTargetNamespace
		return ret
	}
	return *o.TargetNamespace.Get()
}

// GetTargetNamespaceOk returns a tuple with the TargetNamespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesRecoverFilesNewTargetConfig) GetTargetNamespaceOk() (*KubernetesRecoverFilesNewTargetConfigTargetNamespace, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetNamespace.Get(), o.TargetNamespace.IsSet()
}

// HasTargetNamespace returns a boolean if a field has been set.
func (o *KubernetesRecoverFilesNewTargetConfig) HasTargetNamespace() bool {
	if o != nil && o.TargetNamespace.IsSet() {
		return true
	}

	return false
}

// SetTargetNamespace gets a reference to the given NullableKubernetesRecoverFilesNewTargetConfigTargetNamespace and assigns it to the TargetNamespace field.
func (o *KubernetesRecoverFilesNewTargetConfig) SetTargetNamespace(v KubernetesRecoverFilesNewTargetConfigTargetNamespace) {
	o.TargetNamespace.Set(&v)
}
// SetTargetNamespaceNil sets the value for TargetNamespace to be an explicit nil
func (o *KubernetesRecoverFilesNewTargetConfig) SetTargetNamespaceNil() {
	o.TargetNamespace.Set(nil)
}

// UnsetTargetNamespace ensures that no value is present for TargetNamespace, not even an explicit nil
func (o *KubernetesRecoverFilesNewTargetConfig) UnsetTargetNamespace() {
	o.TargetNamespace.Unset()
}

// GetTargetPvc returns the TargetPvc field value
// If the value is explicit nil, the zero value for KubernetesRecoverFilesNewTargetConfigTargetPvc will be returned
func (o *KubernetesRecoverFilesNewTargetConfig) GetTargetPvc() KubernetesRecoverFilesNewTargetConfigTargetPvc {
	if o == nil || o.TargetPvc.Get() == nil {
		var ret KubernetesRecoverFilesNewTargetConfigTargetPvc
		return ret
	}

	return *o.TargetPvc.Get()
}

// GetTargetPvcOk returns a tuple with the TargetPvc field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesRecoverFilesNewTargetConfig) GetTargetPvcOk() (*KubernetesRecoverFilesNewTargetConfigTargetPvc, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetPvc.Get(), o.TargetPvc.IsSet()
}

// SetTargetPvc sets field value
func (o *KubernetesRecoverFilesNewTargetConfig) SetTargetPvc(v KubernetesRecoverFilesNewTargetConfigTargetPvc) {
	o.TargetPvc.Set(&v)
}

// GetTargetSource returns the TargetSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesRecoverFilesNewTargetConfig) GetTargetSource() KubernetesRecoverFilesNewTargetConfigTargetSource {
	if o == nil || IsNil(o.TargetSource.Get()) {
		var ret KubernetesRecoverFilesNewTargetConfigTargetSource
		return ret
	}
	return *o.TargetSource.Get()
}

// GetTargetSourceOk returns a tuple with the TargetSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesRecoverFilesNewTargetConfig) GetTargetSourceOk() (*KubernetesRecoverFilesNewTargetConfigTargetSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetSource.Get(), o.TargetSource.IsSet()
}

// HasTargetSource returns a boolean if a field has been set.
func (o *KubernetesRecoverFilesNewTargetConfig) HasTargetSource() bool {
	if o != nil && o.TargetSource.IsSet() {
		return true
	}

	return false
}

// SetTargetSource gets a reference to the given NullableKubernetesRecoverFilesNewTargetConfigTargetSource and assigns it to the TargetSource field.
func (o *KubernetesRecoverFilesNewTargetConfig) SetTargetSource(v KubernetesRecoverFilesNewTargetConfigTargetSource) {
	o.TargetSource.Set(&v)
}
// SetTargetSourceNil sets the value for TargetSource to be an explicit nil
func (o *KubernetesRecoverFilesNewTargetConfig) SetTargetSourceNil() {
	o.TargetSource.Set(nil)
}

// UnsetTargetSource ensures that no value is present for TargetSource, not even an explicit nil
func (o *KubernetesRecoverFilesNewTargetConfig) UnsetTargetSource() {
	o.TargetSource.Unset()
}

func (o KubernetesRecoverFilesNewTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesRecoverFilesNewTargetConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["absolutePath"] = o.AbsolutePath.Get()
	if o.TargetNamespace.IsSet() {
		toSerialize["targetNamespace"] = o.TargetNamespace.Get()
	}
	toSerialize["targetPvc"] = o.TargetPvc.Get()
	if o.TargetSource.IsSet() {
		toSerialize["targetSource"] = o.TargetSource.Get()
	}
	return toSerialize, nil
}

func (o *KubernetesRecoverFilesNewTargetConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"absolutePath",
		"targetPvc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubernetesRecoverFilesNewTargetConfig := _KubernetesRecoverFilesNewTargetConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKubernetesRecoverFilesNewTargetConfig)

	if err != nil {
		return err
	}

	*o = KubernetesRecoverFilesNewTargetConfig(varKubernetesRecoverFilesNewTargetConfig)

	return err
}

type NullableKubernetesRecoverFilesNewTargetConfig struct {
	value *KubernetesRecoverFilesNewTargetConfig
	isSet bool
}

func (v NullableKubernetesRecoverFilesNewTargetConfig) Get() *KubernetesRecoverFilesNewTargetConfig {
	return v.value
}

func (v *NullableKubernetesRecoverFilesNewTargetConfig) Set(val *KubernetesRecoverFilesNewTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesRecoverFilesNewTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesRecoverFilesNewTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesRecoverFilesNewTargetConfig(val *KubernetesRecoverFilesNewTargetConfig) *NullableKubernetesRecoverFilesNewTargetConfig {
	return &NullableKubernetesRecoverFilesNewTargetConfig{value: val, isSet: true}
}

func (v NullableKubernetesRecoverFilesNewTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesRecoverFilesNewTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


