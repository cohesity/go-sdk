/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Interface type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Interface{}

// Interface Network interface parameters.
type Interface struct {
	// Bond member details for bond interface.
	BondMembers []BondMember `json:"bondMembers,omitempty"`
	// Bonding mode if this interface is a bond.
	BondingMode NullableString `json:"bondingMode,omitempty"`
	// Specifies whether or not this interface is the default route.
	DefaultRoute NullableBool `json:"defaultRoute,omitempty"`
	// Gateway of the interface.
	Gateway NullableString `json:"gateway,omitempty"`
	// Group to which this interface belongs.
	Group NullableString `json:"group,omitempty"`
	// Id of the interface.
	Id NullableInt64 `json:"id,omitempty"`
	// The IPv6 gateway of the interface.
	Ipv6Gateway NullableString `json:"ipv6Gateway,omitempty"`
	// Static IPv6 of the interface.
	Ipv6Static NullableString `json:"ipv6Static,omitempty"`
	// The IPv6 subnet of the interface.
	Ipv6Subnet NullableString `json:"ipv6Subnet,omitempty"`
	// Specifies whether or not this interface is connected.
	IsConnected NullableBool `json:"isConnected,omitempty"`
	// Specifies whether or not the interface is up.
	IsUp NullableBool `json:"isUp,omitempty"`
	// MAC address of the interface.
	MacAddress NullableString `json:"macAddress,omitempty"`
	// MTU of the interface.
	Mtu NullableInt32 `json:"mtu,omitempty"`
	// The name of the interface.
	Name NullableString `json:"name,omitempty"`
	// Role of the interface.
	Role NullableString `json:"role,omitempty"`
	// Types of services this interface is used for.
	Services []string `json:"services,omitempty"`
	// Speed of the interface.
	Speed NullableString `json:"speed,omitempty"`
	// Static IP of the interface.
	StaticIp NullableString `json:"staticIp,omitempty"`
	Stats *InterfaceStats `json:"stats,omitempty"`
	// Subnet of the interface.
	Subnet NullableString `json:"subnet,omitempty"`
	// The type of the interface.
	Type NullableString `json:"type,omitempty"`
	// Virtual IP of the interface.
	VirtualIp NullableString `json:"virtualIp,omitempty"`
}

// NewInterface instantiates a new Interface object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterface() *Interface {
	this := Interface{}
	return &this
}

// NewInterfaceWithDefaults instantiates a new Interface object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceWithDefaults() *Interface {
	this := Interface{}
	return &this
}

// GetBondMembers returns the BondMembers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetBondMembers() []BondMember {
	if o == nil {
		var ret []BondMember
		return ret
	}
	return o.BondMembers
}

// GetBondMembersOk returns a tuple with the BondMembers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetBondMembersOk() ([]BondMember, bool) {
	if o == nil || IsNil(o.BondMembers) {
		return nil, false
	}
	return o.BondMembers, true
}

// HasBondMembers returns a boolean if a field has been set.
func (o *Interface) HasBondMembers() bool {
	if o != nil && !IsNil(o.BondMembers) {
		return true
	}

	return false
}

// SetBondMembers gets a reference to the given []BondMember and assigns it to the BondMembers field.
func (o *Interface) SetBondMembers(v []BondMember) {
	o.BondMembers = v
}

// GetBondingMode returns the BondingMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetBondingMode() string {
	if o == nil || IsNil(o.BondingMode.Get()) {
		var ret string
		return ret
	}
	return *o.BondingMode.Get()
}

// GetBondingModeOk returns a tuple with the BondingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetBondingModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BondingMode.Get(), o.BondingMode.IsSet()
}

// HasBondingMode returns a boolean if a field has been set.
func (o *Interface) HasBondingMode() bool {
	if o != nil && o.BondingMode.IsSet() {
		return true
	}

	return false
}

// SetBondingMode gets a reference to the given NullableString and assigns it to the BondingMode field.
func (o *Interface) SetBondingMode(v string) {
	o.BondingMode.Set(&v)
}
// SetBondingModeNil sets the value for BondingMode to be an explicit nil
func (o *Interface) SetBondingModeNil() {
	o.BondingMode.Set(nil)
}

// UnsetBondingMode ensures that no value is present for BondingMode, not even an explicit nil
func (o *Interface) UnsetBondingMode() {
	o.BondingMode.Unset()
}

// GetDefaultRoute returns the DefaultRoute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetDefaultRoute() bool {
	if o == nil || IsNil(o.DefaultRoute.Get()) {
		var ret bool
		return ret
	}
	return *o.DefaultRoute.Get()
}

// GetDefaultRouteOk returns a tuple with the DefaultRoute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetDefaultRouteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultRoute.Get(), o.DefaultRoute.IsSet()
}

// HasDefaultRoute returns a boolean if a field has been set.
func (o *Interface) HasDefaultRoute() bool {
	if o != nil && o.DefaultRoute.IsSet() {
		return true
	}

	return false
}

// SetDefaultRoute gets a reference to the given NullableBool and assigns it to the DefaultRoute field.
func (o *Interface) SetDefaultRoute(v bool) {
	o.DefaultRoute.Set(&v)
}
// SetDefaultRouteNil sets the value for DefaultRoute to be an explicit nil
func (o *Interface) SetDefaultRouteNil() {
	o.DefaultRoute.Set(nil)
}

// UnsetDefaultRoute ensures that no value is present for DefaultRoute, not even an explicit nil
func (o *Interface) UnsetDefaultRoute() {
	o.DefaultRoute.Unset()
}

// GetGateway returns the Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetGateway() string {
	if o == nil || IsNil(o.Gateway.Get()) {
		var ret string
		return ret
	}
	return *o.Gateway.Get()
}

// GetGatewayOk returns a tuple with the Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gateway.Get(), o.Gateway.IsSet()
}

// HasGateway returns a boolean if a field has been set.
func (o *Interface) HasGateway() bool {
	if o != nil && o.Gateway.IsSet() {
		return true
	}

	return false
}

// SetGateway gets a reference to the given NullableString and assigns it to the Gateway field.
func (o *Interface) SetGateway(v string) {
	o.Gateway.Set(&v)
}
// SetGatewayNil sets the value for Gateway to be an explicit nil
func (o *Interface) SetGatewayNil() {
	o.Gateway.Set(nil)
}

// UnsetGateway ensures that no value is present for Gateway, not even an explicit nil
func (o *Interface) UnsetGateway() {
	o.Gateway.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetGroup() string {
	if o == nil || IsNil(o.Group.Get()) {
		var ret string
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *Interface) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableString and assigns it to the Group field.
func (o *Interface) SetGroup(v string) {
	o.Group.Set(&v)
}
// SetGroupNil sets the value for Group to be an explicit nil
func (o *Interface) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *Interface) UnsetGroup() {
	o.Group.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Interface) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *Interface) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Interface) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Interface) UnsetId() {
	o.Id.Unset()
}

// GetIpv6Gateway returns the Ipv6Gateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetIpv6Gateway() string {
	if o == nil || IsNil(o.Ipv6Gateway.Get()) {
		var ret string
		return ret
	}
	return *o.Ipv6Gateway.Get()
}

// GetIpv6GatewayOk returns a tuple with the Ipv6Gateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetIpv6GatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv6Gateway.Get(), o.Ipv6Gateway.IsSet()
}

// HasIpv6Gateway returns a boolean if a field has been set.
func (o *Interface) HasIpv6Gateway() bool {
	if o != nil && o.Ipv6Gateway.IsSet() {
		return true
	}

	return false
}

// SetIpv6Gateway gets a reference to the given NullableString and assigns it to the Ipv6Gateway field.
func (o *Interface) SetIpv6Gateway(v string) {
	o.Ipv6Gateway.Set(&v)
}
// SetIpv6GatewayNil sets the value for Ipv6Gateway to be an explicit nil
func (o *Interface) SetIpv6GatewayNil() {
	o.Ipv6Gateway.Set(nil)
}

// UnsetIpv6Gateway ensures that no value is present for Ipv6Gateway, not even an explicit nil
func (o *Interface) UnsetIpv6Gateway() {
	o.Ipv6Gateway.Unset()
}

// GetIpv6Static returns the Ipv6Static field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetIpv6Static() string {
	if o == nil || IsNil(o.Ipv6Static.Get()) {
		var ret string
		return ret
	}
	return *o.Ipv6Static.Get()
}

// GetIpv6StaticOk returns a tuple with the Ipv6Static field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetIpv6StaticOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv6Static.Get(), o.Ipv6Static.IsSet()
}

// HasIpv6Static returns a boolean if a field has been set.
func (o *Interface) HasIpv6Static() bool {
	if o != nil && o.Ipv6Static.IsSet() {
		return true
	}

	return false
}

// SetIpv6Static gets a reference to the given NullableString and assigns it to the Ipv6Static field.
func (o *Interface) SetIpv6Static(v string) {
	o.Ipv6Static.Set(&v)
}
// SetIpv6StaticNil sets the value for Ipv6Static to be an explicit nil
func (o *Interface) SetIpv6StaticNil() {
	o.Ipv6Static.Set(nil)
}

// UnsetIpv6Static ensures that no value is present for Ipv6Static, not even an explicit nil
func (o *Interface) UnsetIpv6Static() {
	o.Ipv6Static.Unset()
}

// GetIpv6Subnet returns the Ipv6Subnet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetIpv6Subnet() string {
	if o == nil || IsNil(o.Ipv6Subnet.Get()) {
		var ret string
		return ret
	}
	return *o.Ipv6Subnet.Get()
}

// GetIpv6SubnetOk returns a tuple with the Ipv6Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetIpv6SubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ipv6Subnet.Get(), o.Ipv6Subnet.IsSet()
}

// HasIpv6Subnet returns a boolean if a field has been set.
func (o *Interface) HasIpv6Subnet() bool {
	if o != nil && o.Ipv6Subnet.IsSet() {
		return true
	}

	return false
}

// SetIpv6Subnet gets a reference to the given NullableString and assigns it to the Ipv6Subnet field.
func (o *Interface) SetIpv6Subnet(v string) {
	o.Ipv6Subnet.Set(&v)
}
// SetIpv6SubnetNil sets the value for Ipv6Subnet to be an explicit nil
func (o *Interface) SetIpv6SubnetNil() {
	o.Ipv6Subnet.Set(nil)
}

// UnsetIpv6Subnet ensures that no value is present for Ipv6Subnet, not even an explicit nil
func (o *Interface) UnsetIpv6Subnet() {
	o.Ipv6Subnet.Unset()
}

// GetIsConnected returns the IsConnected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetIsConnected() bool {
	if o == nil || IsNil(o.IsConnected.Get()) {
		var ret bool
		return ret
	}
	return *o.IsConnected.Get()
}

// GetIsConnectedOk returns a tuple with the IsConnected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetIsConnectedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsConnected.Get(), o.IsConnected.IsSet()
}

// HasIsConnected returns a boolean if a field has been set.
func (o *Interface) HasIsConnected() bool {
	if o != nil && o.IsConnected.IsSet() {
		return true
	}

	return false
}

// SetIsConnected gets a reference to the given NullableBool and assigns it to the IsConnected field.
func (o *Interface) SetIsConnected(v bool) {
	o.IsConnected.Set(&v)
}
// SetIsConnectedNil sets the value for IsConnected to be an explicit nil
func (o *Interface) SetIsConnectedNil() {
	o.IsConnected.Set(nil)
}

// UnsetIsConnected ensures that no value is present for IsConnected, not even an explicit nil
func (o *Interface) UnsetIsConnected() {
	o.IsConnected.Unset()
}

// GetIsUp returns the IsUp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetIsUp() bool {
	if o == nil || IsNil(o.IsUp.Get()) {
		var ret bool
		return ret
	}
	return *o.IsUp.Get()
}

// GetIsUpOk returns a tuple with the IsUp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetIsUpOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsUp.Get(), o.IsUp.IsSet()
}

// HasIsUp returns a boolean if a field has been set.
func (o *Interface) HasIsUp() bool {
	if o != nil && o.IsUp.IsSet() {
		return true
	}

	return false
}

// SetIsUp gets a reference to the given NullableBool and assigns it to the IsUp field.
func (o *Interface) SetIsUp(v bool) {
	o.IsUp.Set(&v)
}
// SetIsUpNil sets the value for IsUp to be an explicit nil
func (o *Interface) SetIsUpNil() {
	o.IsUp.Set(nil)
}

// UnsetIsUp ensures that no value is present for IsUp, not even an explicit nil
func (o *Interface) UnsetIsUp() {
	o.IsUp.Unset()
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress.Get()) {
		var ret string
		return ret
	}
	return *o.MacAddress.Get()
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MacAddress.Get(), o.MacAddress.IsSet()
}

// HasMacAddress returns a boolean if a field has been set.
func (o *Interface) HasMacAddress() bool {
	if o != nil && o.MacAddress.IsSet() {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given NullableString and assigns it to the MacAddress field.
func (o *Interface) SetMacAddress(v string) {
	o.MacAddress.Set(&v)
}
// SetMacAddressNil sets the value for MacAddress to be an explicit nil
func (o *Interface) SetMacAddressNil() {
	o.MacAddress.Set(nil)
}

// UnsetMacAddress ensures that no value is present for MacAddress, not even an explicit nil
func (o *Interface) UnsetMacAddress() {
	o.MacAddress.Unset()
}

// GetMtu returns the Mtu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetMtu() int32 {
	if o == nil || IsNil(o.Mtu.Get()) {
		var ret int32
		return ret
	}
	return *o.Mtu.Get()
}

// GetMtuOk returns a tuple with the Mtu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetMtuOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mtu.Get(), o.Mtu.IsSet()
}

// HasMtu returns a boolean if a field has been set.
func (o *Interface) HasMtu() bool {
	if o != nil && o.Mtu.IsSet() {
		return true
	}

	return false
}

// SetMtu gets a reference to the given NullableInt32 and assigns it to the Mtu field.
func (o *Interface) SetMtu(v int32) {
	o.Mtu.Set(&v)
}
// SetMtuNil sets the value for Mtu to be an explicit nil
func (o *Interface) SetMtuNil() {
	o.Mtu.Set(nil)
}

// UnsetMtu ensures that no value is present for Mtu, not even an explicit nil
func (o *Interface) UnsetMtu() {
	o.Mtu.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Interface) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Interface) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Interface) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Interface) UnsetName() {
	o.Name.Unset()
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetRole() string {
	if o == nil || IsNil(o.Role.Get()) {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *Interface) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *Interface) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *Interface) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *Interface) UnsetRole() {
	o.Role.Unset()
}

// GetServices returns the Services field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetServices() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetServicesOk() ([]string, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *Interface) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []string and assigns it to the Services field.
func (o *Interface) SetServices(v []string) {
	o.Services = v
}

// GetSpeed returns the Speed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetSpeed() string {
	if o == nil || IsNil(o.Speed.Get()) {
		var ret string
		return ret
	}
	return *o.Speed.Get()
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetSpeedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Speed.Get(), o.Speed.IsSet()
}

// HasSpeed returns a boolean if a field has been set.
func (o *Interface) HasSpeed() bool {
	if o != nil && o.Speed.IsSet() {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given NullableString and assigns it to the Speed field.
func (o *Interface) SetSpeed(v string) {
	o.Speed.Set(&v)
}
// SetSpeedNil sets the value for Speed to be an explicit nil
func (o *Interface) SetSpeedNil() {
	o.Speed.Set(nil)
}

// UnsetSpeed ensures that no value is present for Speed, not even an explicit nil
func (o *Interface) UnsetSpeed() {
	o.Speed.Unset()
}

// GetStaticIp returns the StaticIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetStaticIp() string {
	if o == nil || IsNil(o.StaticIp.Get()) {
		var ret string
		return ret
	}
	return *o.StaticIp.Get()
}

// GetStaticIpOk returns a tuple with the StaticIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetStaticIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StaticIp.Get(), o.StaticIp.IsSet()
}

// HasStaticIp returns a boolean if a field has been set.
func (o *Interface) HasStaticIp() bool {
	if o != nil && o.StaticIp.IsSet() {
		return true
	}

	return false
}

// SetStaticIp gets a reference to the given NullableString and assigns it to the StaticIp field.
func (o *Interface) SetStaticIp(v string) {
	o.StaticIp.Set(&v)
}
// SetStaticIpNil sets the value for StaticIp to be an explicit nil
func (o *Interface) SetStaticIpNil() {
	o.StaticIp.Set(nil)
}

// UnsetStaticIp ensures that no value is present for StaticIp, not even an explicit nil
func (o *Interface) UnsetStaticIp() {
	o.StaticIp.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *Interface) GetStats() InterfaceStats {
	if o == nil || IsNil(o.Stats) {
		var ret InterfaceStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interface) GetStatsOk() (*InterfaceStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *Interface) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given InterfaceStats and assigns it to the Stats field.
func (o *Interface) SetStats(v InterfaceStats) {
	o.Stats = &v
}

// GetSubnet returns the Subnet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetSubnet() string {
	if o == nil || IsNil(o.Subnet.Get()) {
		var ret string
		return ret
	}
	return *o.Subnet.Get()
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetSubnetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subnet.Get(), o.Subnet.IsSet()
}

// HasSubnet returns a boolean if a field has been set.
func (o *Interface) HasSubnet() bool {
	if o != nil && o.Subnet.IsSet() {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given NullableString and assigns it to the Subnet field.
func (o *Interface) SetSubnet(v string) {
	o.Subnet.Set(&v)
}
// SetSubnetNil sets the value for Subnet to be an explicit nil
func (o *Interface) SetSubnetNil() {
	o.Subnet.Set(nil)
}

// UnsetSubnet ensures that no value is present for Subnet, not even an explicit nil
func (o *Interface) UnsetSubnet() {
	o.Subnet.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *Interface) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *Interface) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *Interface) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *Interface) UnsetType() {
	o.Type.Unset()
}

// GetVirtualIp returns the VirtualIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Interface) GetVirtualIp() string {
	if o == nil || IsNil(o.VirtualIp.Get()) {
		var ret string
		return ret
	}
	return *o.VirtualIp.Get()
}

// GetVirtualIpOk returns a tuple with the VirtualIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Interface) GetVirtualIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VirtualIp.Get(), o.VirtualIp.IsSet()
}

// HasVirtualIp returns a boolean if a field has been set.
func (o *Interface) HasVirtualIp() bool {
	if o != nil && o.VirtualIp.IsSet() {
		return true
	}

	return false
}

// SetVirtualIp gets a reference to the given NullableString and assigns it to the VirtualIp field.
func (o *Interface) SetVirtualIp(v string) {
	o.VirtualIp.Set(&v)
}
// SetVirtualIpNil sets the value for VirtualIp to be an explicit nil
func (o *Interface) SetVirtualIpNil() {
	o.VirtualIp.Set(nil)
}

// UnsetVirtualIp ensures that no value is present for VirtualIp, not even an explicit nil
func (o *Interface) UnsetVirtualIp() {
	o.VirtualIp.Unset()
}

func (o Interface) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Interface) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BondMembers != nil {
		toSerialize["bondMembers"] = o.BondMembers
	}
	if o.BondingMode.IsSet() {
		toSerialize["bondingMode"] = o.BondingMode.Get()
	}
	if o.DefaultRoute.IsSet() {
		toSerialize["defaultRoute"] = o.DefaultRoute.Get()
	}
	if o.Gateway.IsSet() {
		toSerialize["gateway"] = o.Gateway.Get()
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Ipv6Gateway.IsSet() {
		toSerialize["ipv6Gateway"] = o.Ipv6Gateway.Get()
	}
	if o.Ipv6Static.IsSet() {
		toSerialize["ipv6Static"] = o.Ipv6Static.Get()
	}
	if o.Ipv6Subnet.IsSet() {
		toSerialize["ipv6Subnet"] = o.Ipv6Subnet.Get()
	}
	if o.IsConnected.IsSet() {
		toSerialize["isConnected"] = o.IsConnected.Get()
	}
	if o.IsUp.IsSet() {
		toSerialize["isUp"] = o.IsUp.Get()
	}
	if o.MacAddress.IsSet() {
		toSerialize["macAddress"] = o.MacAddress.Get()
	}
	if o.Mtu.IsSet() {
		toSerialize["mtu"] = o.Mtu.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.Services != nil {
		toSerialize["services"] = o.Services
	}
	if o.Speed.IsSet() {
		toSerialize["speed"] = o.Speed.Get()
	}
	if o.StaticIp.IsSet() {
		toSerialize["staticIp"] = o.StaticIp.Get()
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if o.Subnet.IsSet() {
		toSerialize["subnet"] = o.Subnet.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.VirtualIp.IsSet() {
		toSerialize["virtualIp"] = o.VirtualIp.Get()
	}
	return toSerialize, nil
}

type NullableInterface struct {
	value *Interface
	isSet bool
}

func (v NullableInterface) Get() *Interface {
	return v.value
}

func (v *NullableInterface) Set(val *Interface) {
	v.value = val
	v.isSet = true
}

func (v NullableInterface) IsSet() bool {
	return v.isSet
}

func (v *NullableInterface) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterface(val *Interface) *NullableInterface {
	return &NullableInterface{value: val, isSet: true}
}

func (v NullableInterface) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterface) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


