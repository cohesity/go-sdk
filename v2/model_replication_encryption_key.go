/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ReplicationEncryptionKey type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicationEncryptionKey{}

// ReplicationEncryptionKey Specifies the Replication Encryption Key.
type ReplicationEncryptionKey struct {
	// Specifies the Replication Encryption Key.
	EncryptionKey NullableString `json:"encryptionKey,omitempty"`
}

// NewReplicationEncryptionKey instantiates a new ReplicationEncryptionKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationEncryptionKey() *ReplicationEncryptionKey {
	this := ReplicationEncryptionKey{}
	return &this
}

// NewReplicationEncryptionKeyWithDefaults instantiates a new ReplicationEncryptionKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationEncryptionKeyWithDefaults() *ReplicationEncryptionKey {
	this := ReplicationEncryptionKey{}
	return &this
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationEncryptionKey) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey.Get()) {
		var ret string
		return ret
	}
	return *o.EncryptionKey.Get()
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationEncryptionKey) GetEncryptionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionKey.Get(), o.EncryptionKey.IsSet()
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *ReplicationEncryptionKey) HasEncryptionKey() bool {
	if o != nil && o.EncryptionKey.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given NullableString and assigns it to the EncryptionKey field.
func (o *ReplicationEncryptionKey) SetEncryptionKey(v string) {
	o.EncryptionKey.Set(&v)
}
// SetEncryptionKeyNil sets the value for EncryptionKey to be an explicit nil
func (o *ReplicationEncryptionKey) SetEncryptionKeyNil() {
	o.EncryptionKey.Set(nil)
}

// UnsetEncryptionKey ensures that no value is present for EncryptionKey, not even an explicit nil
func (o *ReplicationEncryptionKey) UnsetEncryptionKey() {
	o.EncryptionKey.Unset()
}

func (o ReplicationEncryptionKey) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicationEncryptionKey) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EncryptionKey.IsSet() {
		toSerialize["encryptionKey"] = o.EncryptionKey.Get()
	}
	return toSerialize, nil
}

type NullableReplicationEncryptionKey struct {
	value *ReplicationEncryptionKey
	isSet bool
}

func (v NullableReplicationEncryptionKey) Get() *ReplicationEncryptionKey {
	return v.value
}

func (v *NullableReplicationEncryptionKey) Set(val *ReplicationEncryptionKey) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationEncryptionKey) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationEncryptionKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationEncryptionKey(val *ReplicationEncryptionKey) *NullableReplicationEncryptionKey {
	return &NullableReplicationEncryptionKey{value: val, isSet: true}
}

func (v NullableReplicationEncryptionKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationEncryptionKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


