/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonCreateOrUpdateRigelConnectorRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonCreateOrUpdateRigelConnectorRequest{}

// CommonCreateOrUpdateRigelConnectorRequest Specify the common params to create or update a Rigel connector.
type CommonCreateOrUpdateRigelConnectorRequest struct {
	// Specifies the version of the connector's certificate. The version is used to revoke/renew connector's certificates.
	CertificateVersion NullableInt64 `json:"certificateVersion,omitempty"`
	// Specifies the list of accepted version of the connector's certificate. The version is used to revoke/renew connector's certificates.
	CertificateVersionList []int64 `json:"certificateVersionList,omitempty"`
	// Specifies the Id of the connection which this connector belongs to.
	ConnectionId NullableInt64 `json:"connectionId"`
	ConnectorCloudMetadata *ConnectorCloudMetadata `json:"connectorCloudMetadata,omitempty"`
	// Specifies the name of the connector.
	Name NullableString `json:"name"`
	// Specifies the id of the tenant which the connector belongs to.
	TenantId NullableString `json:"tenantId"`
}

type _CommonCreateOrUpdateRigelConnectorRequest CommonCreateOrUpdateRigelConnectorRequest

// NewCommonCreateOrUpdateRigelConnectorRequest instantiates a new CommonCreateOrUpdateRigelConnectorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonCreateOrUpdateRigelConnectorRequest(connectionId NullableInt64, name NullableString, tenantId NullableString) *CommonCreateOrUpdateRigelConnectorRequest {
	this := CommonCreateOrUpdateRigelConnectorRequest{}
	this.ConnectionId = connectionId
	this.Name = name
	this.TenantId = tenantId
	return &this
}

// NewCommonCreateOrUpdateRigelConnectorRequestWithDefaults instantiates a new CommonCreateOrUpdateRigelConnectorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonCreateOrUpdateRigelConnectorRequestWithDefaults() *CommonCreateOrUpdateRigelConnectorRequest {
	this := CommonCreateOrUpdateRigelConnectorRequest{}
	return &this
}

// GetCertificateVersion returns the CertificateVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetCertificateVersion() int64 {
	if o == nil || IsNil(o.CertificateVersion.Get()) {
		var ret int64
		return ret
	}
	return *o.CertificateVersion.Get()
}

// GetCertificateVersionOk returns a tuple with the CertificateVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetCertificateVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateVersion.Get(), o.CertificateVersion.IsSet()
}

// HasCertificateVersion returns a boolean if a field has been set.
func (o *CommonCreateOrUpdateRigelConnectorRequest) HasCertificateVersion() bool {
	if o != nil && o.CertificateVersion.IsSet() {
		return true
	}

	return false
}

// SetCertificateVersion gets a reference to the given NullableInt64 and assigns it to the CertificateVersion field.
func (o *CommonCreateOrUpdateRigelConnectorRequest) SetCertificateVersion(v int64) {
	o.CertificateVersion.Set(&v)
}
// SetCertificateVersionNil sets the value for CertificateVersion to be an explicit nil
func (o *CommonCreateOrUpdateRigelConnectorRequest) SetCertificateVersionNil() {
	o.CertificateVersion.Set(nil)
}

// UnsetCertificateVersion ensures that no value is present for CertificateVersion, not even an explicit nil
func (o *CommonCreateOrUpdateRigelConnectorRequest) UnsetCertificateVersion() {
	o.CertificateVersion.Unset()
}

// GetCertificateVersionList returns the CertificateVersionList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetCertificateVersionList() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.CertificateVersionList
}

// GetCertificateVersionListOk returns a tuple with the CertificateVersionList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetCertificateVersionListOk() ([]int64, bool) {
	if o == nil || IsNil(o.CertificateVersionList) {
		return nil, false
	}
	return o.CertificateVersionList, true
}

// HasCertificateVersionList returns a boolean if a field has been set.
func (o *CommonCreateOrUpdateRigelConnectorRequest) HasCertificateVersionList() bool {
	if o != nil && !IsNil(o.CertificateVersionList) {
		return true
	}

	return false
}

// SetCertificateVersionList gets a reference to the given []int64 and assigns it to the CertificateVersionList field.
func (o *CommonCreateOrUpdateRigelConnectorRequest) SetCertificateVersionList(v []int64) {
	o.CertificateVersionList = v
}

// GetConnectionId returns the ConnectionId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetConnectionId() int64 {
	if o == nil || o.ConnectionId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetConnectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// SetConnectionId sets field value
func (o *CommonCreateOrUpdateRigelConnectorRequest) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}

// GetConnectorCloudMetadata returns the ConnectorCloudMetadata field value if set, zero value otherwise.
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetConnectorCloudMetadata() ConnectorCloudMetadata {
	if o == nil || IsNil(o.ConnectorCloudMetadata) {
		var ret ConnectorCloudMetadata
		return ret
	}
	return *o.ConnectorCloudMetadata
}

// GetConnectorCloudMetadataOk returns a tuple with the ConnectorCloudMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetConnectorCloudMetadataOk() (*ConnectorCloudMetadata, bool) {
	if o == nil || IsNil(o.ConnectorCloudMetadata) {
		return nil, false
	}
	return o.ConnectorCloudMetadata, true
}

// HasConnectorCloudMetadata returns a boolean if a field has been set.
func (o *CommonCreateOrUpdateRigelConnectorRequest) HasConnectorCloudMetadata() bool {
	if o != nil && !IsNil(o.ConnectorCloudMetadata) {
		return true
	}

	return false
}

// SetConnectorCloudMetadata gets a reference to the given ConnectorCloudMetadata and assigns it to the ConnectorCloudMetadata field.
func (o *CommonCreateOrUpdateRigelConnectorRequest) SetConnectorCloudMetadata(v ConnectorCloudMetadata) {
	o.ConnectorCloudMetadata = &v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CommonCreateOrUpdateRigelConnectorRequest) SetName(v string) {
	o.Name.Set(&v)
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonCreateOrUpdateRigelConnectorRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *CommonCreateOrUpdateRigelConnectorRequest) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

func (o CommonCreateOrUpdateRigelConnectorRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonCreateOrUpdateRigelConnectorRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CertificateVersion.IsSet() {
		toSerialize["certificateVersion"] = o.CertificateVersion.Get()
	}
	if o.CertificateVersionList != nil {
		toSerialize["certificateVersionList"] = o.CertificateVersionList
	}
	toSerialize["connectionId"] = o.ConnectionId.Get()
	if !IsNil(o.ConnectorCloudMetadata) {
		toSerialize["connectorCloudMetadata"] = o.ConnectorCloudMetadata
	}
	toSerialize["name"] = o.Name.Get()
	toSerialize["tenantId"] = o.TenantId.Get()
	return toSerialize, nil
}

func (o *CommonCreateOrUpdateRigelConnectorRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectionId",
		"name",
		"tenantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonCreateOrUpdateRigelConnectorRequest := _CommonCreateOrUpdateRigelConnectorRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonCreateOrUpdateRigelConnectorRequest)

	if err != nil {
		return err
	}

	*o = CommonCreateOrUpdateRigelConnectorRequest(varCommonCreateOrUpdateRigelConnectorRequest)

	return err
}

type NullableCommonCreateOrUpdateRigelConnectorRequest struct {
	value *CommonCreateOrUpdateRigelConnectorRequest
	isSet bool
}

func (v NullableCommonCreateOrUpdateRigelConnectorRequest) Get() *CommonCreateOrUpdateRigelConnectorRequest {
	return v.value
}

func (v *NullableCommonCreateOrUpdateRigelConnectorRequest) Set(val *CommonCreateOrUpdateRigelConnectorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonCreateOrUpdateRigelConnectorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonCreateOrUpdateRigelConnectorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonCreateOrUpdateRigelConnectorRequest(val *CommonCreateOrUpdateRigelConnectorRequest) *NullableCommonCreateOrUpdateRigelConnectorRequest {
	return &NullableCommonCreateOrUpdateRigelConnectorRequest{value: val, isSet: true}
}

func (v NullableCommonCreateOrUpdateRigelConnectorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonCreateOrUpdateRigelConnectorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


