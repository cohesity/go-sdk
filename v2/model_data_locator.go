/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DataLocator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataLocator{}

// DataLocator Specifies Export or Import location.
type DataLocator struct {
	NodeDiskInfo *NodeDiskLocation `json:"nodeDiskInfo,omitempty"`
	// Denotes the top-level-directory in one of the above locations.
	TopLevelFolder *string `json:"topLevelFolder,omitempty"`
	// The type of the location.
	Type *string `json:"type,omitempty"`
	VaultInfo *VaultLocation `json:"vaultInfo,omitempty"`
	ViewInfo *ViewLocation `json:"viewInfo,omitempty"`
}

// NewDataLocator instantiates a new DataLocator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLocator() *DataLocator {
	this := DataLocator{}
	return &this
}

// NewDataLocatorWithDefaults instantiates a new DataLocator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLocatorWithDefaults() *DataLocator {
	this := DataLocator{}
	return &this
}

// GetNodeDiskInfo returns the NodeDiskInfo field value if set, zero value otherwise.
func (o *DataLocator) GetNodeDiskInfo() NodeDiskLocation {
	if o == nil || IsNil(o.NodeDiskInfo) {
		var ret NodeDiskLocation
		return ret
	}
	return *o.NodeDiskInfo
}

// GetNodeDiskInfoOk returns a tuple with the NodeDiskInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLocator) GetNodeDiskInfoOk() (*NodeDiskLocation, bool) {
	if o == nil || IsNil(o.NodeDiskInfo) {
		return nil, false
	}
	return o.NodeDiskInfo, true
}

// HasNodeDiskInfo returns a boolean if a field has been set.
func (o *DataLocator) HasNodeDiskInfo() bool {
	if o != nil && !IsNil(o.NodeDiskInfo) {
		return true
	}

	return false
}

// SetNodeDiskInfo gets a reference to the given NodeDiskLocation and assigns it to the NodeDiskInfo field.
func (o *DataLocator) SetNodeDiskInfo(v NodeDiskLocation) {
	o.NodeDiskInfo = &v
}

// GetTopLevelFolder returns the TopLevelFolder field value if set, zero value otherwise.
func (o *DataLocator) GetTopLevelFolder() string {
	if o == nil || IsNil(o.TopLevelFolder) {
		var ret string
		return ret
	}
	return *o.TopLevelFolder
}

// GetTopLevelFolderOk returns a tuple with the TopLevelFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLocator) GetTopLevelFolderOk() (*string, bool) {
	if o == nil || IsNil(o.TopLevelFolder) {
		return nil, false
	}
	return o.TopLevelFolder, true
}

// HasTopLevelFolder returns a boolean if a field has been set.
func (o *DataLocator) HasTopLevelFolder() bool {
	if o != nil && !IsNil(o.TopLevelFolder) {
		return true
	}

	return false
}

// SetTopLevelFolder gets a reference to the given string and assigns it to the TopLevelFolder field.
func (o *DataLocator) SetTopLevelFolder(v string) {
	o.TopLevelFolder = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *DataLocator) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLocator) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *DataLocator) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *DataLocator) SetType(v string) {
	o.Type = &v
}

// GetVaultInfo returns the VaultInfo field value if set, zero value otherwise.
func (o *DataLocator) GetVaultInfo() VaultLocation {
	if o == nil || IsNil(o.VaultInfo) {
		var ret VaultLocation
		return ret
	}
	return *o.VaultInfo
}

// GetVaultInfoOk returns a tuple with the VaultInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLocator) GetVaultInfoOk() (*VaultLocation, bool) {
	if o == nil || IsNil(o.VaultInfo) {
		return nil, false
	}
	return o.VaultInfo, true
}

// HasVaultInfo returns a boolean if a field has been set.
func (o *DataLocator) HasVaultInfo() bool {
	if o != nil && !IsNil(o.VaultInfo) {
		return true
	}

	return false
}

// SetVaultInfo gets a reference to the given VaultLocation and assigns it to the VaultInfo field.
func (o *DataLocator) SetVaultInfo(v VaultLocation) {
	o.VaultInfo = &v
}

// GetViewInfo returns the ViewInfo field value if set, zero value otherwise.
func (o *DataLocator) GetViewInfo() ViewLocation {
	if o == nil || IsNil(o.ViewInfo) {
		var ret ViewLocation
		return ret
	}
	return *o.ViewInfo
}

// GetViewInfoOk returns a tuple with the ViewInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataLocator) GetViewInfoOk() (*ViewLocation, bool) {
	if o == nil || IsNil(o.ViewInfo) {
		return nil, false
	}
	return o.ViewInfo, true
}

// HasViewInfo returns a boolean if a field has been set.
func (o *DataLocator) HasViewInfo() bool {
	if o != nil && !IsNil(o.ViewInfo) {
		return true
	}

	return false
}

// SetViewInfo gets a reference to the given ViewLocation and assigns it to the ViewInfo field.
func (o *DataLocator) SetViewInfo(v ViewLocation) {
	o.ViewInfo = &v
}

func (o DataLocator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataLocator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NodeDiskInfo) {
		toSerialize["nodeDiskInfo"] = o.NodeDiskInfo
	}
	if !IsNil(o.TopLevelFolder) {
		toSerialize["topLevelFolder"] = o.TopLevelFolder
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.VaultInfo) {
		toSerialize["vaultInfo"] = o.VaultInfo
	}
	if !IsNil(o.ViewInfo) {
		toSerialize["viewInfo"] = o.ViewInfo
	}
	return toSerialize, nil
}

type NullableDataLocator struct {
	value *DataLocator
	isSet bool
}

func (v NullableDataLocator) Get() *DataLocator {
	return v.value
}

func (v *NullableDataLocator) Set(val *DataLocator) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLocator) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLocator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLocator(val *DataLocator) *NullableDataLocator {
	return &NullableDataLocator{value: val, isSet: true}
}

func (v NullableDataLocator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLocator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


