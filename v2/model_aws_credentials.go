/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AwsCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsCredentials{}

// AwsCredentials Specifies the object to Aws related credentials.
type AwsCredentials struct {
	// Specifies the type of authentication being used in the request.
	AuthType NullableString `json:"authType,omitempty"`
	// Specifies the DNS address of the AWS managed active directory in which. Currently is set only for kerberos authentication.
	DirectoryDNSAddress NullableString `json:"directoryDNSAddress,omitempty"`
	// Specifies the password to access target entity.
	Password NullableString `json:"password,omitempty"`
	// Specifies the Kerberos realm name for a Kerberos-secured target.
	RealmName NullableString `json:"realmName,omitempty"`
	// Specifies the username to access target entity.
	Username NullableString `json:"username,omitempty"`
}

// NewAwsCredentials instantiates a new AwsCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsCredentials() *AwsCredentials {
	this := AwsCredentials{}
	return &this
}

// NewAwsCredentialsWithDefaults instantiates a new AwsCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsCredentialsWithDefaults() *AwsCredentials {
	this := AwsCredentials{}
	return &this
}

// GetAuthType returns the AuthType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetAuthType() string {
	if o == nil || IsNil(o.AuthType.Get()) {
		var ret string
		return ret
	}
	return *o.AuthType.Get()
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetAuthTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthType.Get(), o.AuthType.IsSet()
}

// HasAuthType returns a boolean if a field has been set.
func (o *AwsCredentials) HasAuthType() bool {
	if o != nil && o.AuthType.IsSet() {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given NullableString and assigns it to the AuthType field.
func (o *AwsCredentials) SetAuthType(v string) {
	o.AuthType.Set(&v)
}
// SetAuthTypeNil sets the value for AuthType to be an explicit nil
func (o *AwsCredentials) SetAuthTypeNil() {
	o.AuthType.Set(nil)
}

// UnsetAuthType ensures that no value is present for AuthType, not even an explicit nil
func (o *AwsCredentials) UnsetAuthType() {
	o.AuthType.Unset()
}

// GetDirectoryDNSAddress returns the DirectoryDNSAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetDirectoryDNSAddress() string {
	if o == nil || IsNil(o.DirectoryDNSAddress.Get()) {
		var ret string
		return ret
	}
	return *o.DirectoryDNSAddress.Get()
}

// GetDirectoryDNSAddressOk returns a tuple with the DirectoryDNSAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetDirectoryDNSAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectoryDNSAddress.Get(), o.DirectoryDNSAddress.IsSet()
}

// HasDirectoryDNSAddress returns a boolean if a field has been set.
func (o *AwsCredentials) HasDirectoryDNSAddress() bool {
	if o != nil && o.DirectoryDNSAddress.IsSet() {
		return true
	}

	return false
}

// SetDirectoryDNSAddress gets a reference to the given NullableString and assigns it to the DirectoryDNSAddress field.
func (o *AwsCredentials) SetDirectoryDNSAddress(v string) {
	o.DirectoryDNSAddress.Set(&v)
}
// SetDirectoryDNSAddressNil sets the value for DirectoryDNSAddress to be an explicit nil
func (o *AwsCredentials) SetDirectoryDNSAddressNil() {
	o.DirectoryDNSAddress.Set(nil)
}

// UnsetDirectoryDNSAddress ensures that no value is present for DirectoryDNSAddress, not even an explicit nil
func (o *AwsCredentials) UnsetDirectoryDNSAddress() {
	o.DirectoryDNSAddress.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *AwsCredentials) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *AwsCredentials) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *AwsCredentials) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *AwsCredentials) UnsetPassword() {
	o.Password.Unset()
}

// GetRealmName returns the RealmName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetRealmName() string {
	if o == nil || IsNil(o.RealmName.Get()) {
		var ret string
		return ret
	}
	return *o.RealmName.Get()
}

// GetRealmNameOk returns a tuple with the RealmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetRealmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RealmName.Get(), o.RealmName.IsSet()
}

// HasRealmName returns a boolean if a field has been set.
func (o *AwsCredentials) HasRealmName() bool {
	if o != nil && o.RealmName.IsSet() {
		return true
	}

	return false
}

// SetRealmName gets a reference to the given NullableString and assigns it to the RealmName field.
func (o *AwsCredentials) SetRealmName(v string) {
	o.RealmName.Set(&v)
}
// SetRealmNameNil sets the value for RealmName to be an explicit nil
func (o *AwsCredentials) SetRealmNameNil() {
	o.RealmName.Set(nil)
}

// UnsetRealmName ensures that no value is present for RealmName, not even an explicit nil
func (o *AwsCredentials) UnsetRealmName() {
	o.RealmName.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsCredentials) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsCredentials) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *AwsCredentials) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *AwsCredentials) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *AwsCredentials) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *AwsCredentials) UnsetUsername() {
	o.Username.Unset()
}

func (o AwsCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthType.IsSet() {
		toSerialize["authType"] = o.AuthType.Get()
	}
	if o.DirectoryDNSAddress.IsSet() {
		toSerialize["directoryDNSAddress"] = o.DirectoryDNSAddress.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.RealmName.IsSet() {
		toSerialize["realmName"] = o.RealmName.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return toSerialize, nil
}

type NullableAwsCredentials struct {
	value *AwsCredentials
	isSet bool
}

func (v NullableAwsCredentials) Get() *AwsCredentials {
	return v.value
}

func (v *NullableAwsCredentials) Set(val *AwsCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsCredentials(val *AwsCredentials) *NullableAwsCredentials {
	return &NullableAwsCredentials{value: val, isSet: true}
}

func (v NullableAwsCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


