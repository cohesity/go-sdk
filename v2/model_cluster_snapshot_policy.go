/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClusterSnapshotPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterSnapshotPolicy{}

// ClusterSnapshotPolicy Describes the snapshot policy struct.
type ClusterSnapshotPolicy struct {
	SnapshotRetentionPolicy *SnapshotRetentionPolicy `json:"snapshotRetentionPolicy,omitempty"`
	SnapshotSchedulePolicy *SnapshotSchedulePolicy `json:"snapshotSchedulePolicy,omitempty"`
}

// NewClusterSnapshotPolicy instantiates a new ClusterSnapshotPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterSnapshotPolicy() *ClusterSnapshotPolicy {
	this := ClusterSnapshotPolicy{}
	return &this
}

// NewClusterSnapshotPolicyWithDefaults instantiates a new ClusterSnapshotPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterSnapshotPolicyWithDefaults() *ClusterSnapshotPolicy {
	this := ClusterSnapshotPolicy{}
	return &this
}

// GetSnapshotRetentionPolicy returns the SnapshotRetentionPolicy field value if set, zero value otherwise.
func (o *ClusterSnapshotPolicy) GetSnapshotRetentionPolicy() SnapshotRetentionPolicy {
	if o == nil || IsNil(o.SnapshotRetentionPolicy) {
		var ret SnapshotRetentionPolicy
		return ret
	}
	return *o.SnapshotRetentionPolicy
}

// GetSnapshotRetentionPolicyOk returns a tuple with the SnapshotRetentionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSnapshotPolicy) GetSnapshotRetentionPolicyOk() (*SnapshotRetentionPolicy, bool) {
	if o == nil || IsNil(o.SnapshotRetentionPolicy) {
		return nil, false
	}
	return o.SnapshotRetentionPolicy, true
}

// HasSnapshotRetentionPolicy returns a boolean if a field has been set.
func (o *ClusterSnapshotPolicy) HasSnapshotRetentionPolicy() bool {
	if o != nil && !IsNil(o.SnapshotRetentionPolicy) {
		return true
	}

	return false
}

// SetSnapshotRetentionPolicy gets a reference to the given SnapshotRetentionPolicy and assigns it to the SnapshotRetentionPolicy field.
func (o *ClusterSnapshotPolicy) SetSnapshotRetentionPolicy(v SnapshotRetentionPolicy) {
	o.SnapshotRetentionPolicy = &v
}

// GetSnapshotSchedulePolicy returns the SnapshotSchedulePolicy field value if set, zero value otherwise.
func (o *ClusterSnapshotPolicy) GetSnapshotSchedulePolicy() SnapshotSchedulePolicy {
	if o == nil || IsNil(o.SnapshotSchedulePolicy) {
		var ret SnapshotSchedulePolicy
		return ret
	}
	return *o.SnapshotSchedulePolicy
}

// GetSnapshotSchedulePolicyOk returns a tuple with the SnapshotSchedulePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSnapshotPolicy) GetSnapshotSchedulePolicyOk() (*SnapshotSchedulePolicy, bool) {
	if o == nil || IsNil(o.SnapshotSchedulePolicy) {
		return nil, false
	}
	return o.SnapshotSchedulePolicy, true
}

// HasSnapshotSchedulePolicy returns a boolean if a field has been set.
func (o *ClusterSnapshotPolicy) HasSnapshotSchedulePolicy() bool {
	if o != nil && !IsNil(o.SnapshotSchedulePolicy) {
		return true
	}

	return false
}

// SetSnapshotSchedulePolicy gets a reference to the given SnapshotSchedulePolicy and assigns it to the SnapshotSchedulePolicy field.
func (o *ClusterSnapshotPolicy) SetSnapshotSchedulePolicy(v SnapshotSchedulePolicy) {
	o.SnapshotSchedulePolicy = &v
}

func (o ClusterSnapshotPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterSnapshotPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SnapshotRetentionPolicy) {
		toSerialize["snapshotRetentionPolicy"] = o.SnapshotRetentionPolicy
	}
	if !IsNil(o.SnapshotSchedulePolicy) {
		toSerialize["snapshotSchedulePolicy"] = o.SnapshotSchedulePolicy
	}
	return toSerialize, nil
}

type NullableClusterSnapshotPolicy struct {
	value *ClusterSnapshotPolicy
	isSet bool
}

func (v NullableClusterSnapshotPolicy) Get() *ClusterSnapshotPolicy {
	return v.value
}

func (v *NullableClusterSnapshotPolicy) Set(val *ClusterSnapshotPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterSnapshotPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterSnapshotPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterSnapshotPolicy(val *ClusterSnapshotPolicy) *NullableClusterSnapshotPolicy {
	return &NullableClusterSnapshotPolicy{value: val, isSet: true}
}

func (v NullableClusterSnapshotPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterSnapshotPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


