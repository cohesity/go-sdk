/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the VolumeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VolumeInfo{}

// VolumeInfo Specifies info of logical volume (filesystem).
type VolumeInfo struct {
	// Specifies the filesystem type.
	FilesystemType NullableString `json:"filesystemType,omitempty"`
	// Specifies the filesystem uuid.
	FilesystemUuid NullableString `json:"filesystemUuid,omitempty"`
	// Specifies if this is NTFS dedupe volume
	IsDedupe NullableBool `json:"isDedupe,omitempty"`
	// Specifies if this volume is supported.
	IsSupported NullableBool `json:"isSupported,omitempty"`
	LogicalVolumeInfo *VolumeInfoLogicalVolumeInfo `json:"logicalVolumeInfo,omitempty"`
	// Specifies the volume name.
	Name NullableString `json:"name,omitempty"`
	// Specifies the volume guid.
	VolumeGuid NullableString `json:"volumeGuid,omitempty"`
	// Specifies volume size in bytes.
	VolumeSizeInBytes NullableInt64 `json:"volumeSizeInBytes,omitempty"`
	// Specifies the volume type.
	VolumeType NullableString `json:"volumeType,omitempty"`
}

// NewVolumeInfo instantiates a new VolumeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVolumeInfo() *VolumeInfo {
	this := VolumeInfo{}
	return &this
}

// NewVolumeInfoWithDefaults instantiates a new VolumeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVolumeInfoWithDefaults() *VolumeInfo {
	this := VolumeInfo{}
	return &this
}

// GetFilesystemType returns the FilesystemType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetFilesystemType() string {
	if o == nil || IsNil(o.FilesystemType.Get()) {
		var ret string
		return ret
	}
	return *o.FilesystemType.Get()
}

// GetFilesystemTypeOk returns a tuple with the FilesystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetFilesystemTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilesystemType.Get(), o.FilesystemType.IsSet()
}

// HasFilesystemType returns a boolean if a field has been set.
func (o *VolumeInfo) HasFilesystemType() bool {
	if o != nil && o.FilesystemType.IsSet() {
		return true
	}

	return false
}

// SetFilesystemType gets a reference to the given NullableString and assigns it to the FilesystemType field.
func (o *VolumeInfo) SetFilesystemType(v string) {
	o.FilesystemType.Set(&v)
}
// SetFilesystemTypeNil sets the value for FilesystemType to be an explicit nil
func (o *VolumeInfo) SetFilesystemTypeNil() {
	o.FilesystemType.Set(nil)
}

// UnsetFilesystemType ensures that no value is present for FilesystemType, not even an explicit nil
func (o *VolumeInfo) UnsetFilesystemType() {
	o.FilesystemType.Unset()
}

// GetFilesystemUuid returns the FilesystemUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetFilesystemUuid() string {
	if o == nil || IsNil(o.FilesystemUuid.Get()) {
		var ret string
		return ret
	}
	return *o.FilesystemUuid.Get()
}

// GetFilesystemUuidOk returns a tuple with the FilesystemUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetFilesystemUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilesystemUuid.Get(), o.FilesystemUuid.IsSet()
}

// HasFilesystemUuid returns a boolean if a field has been set.
func (o *VolumeInfo) HasFilesystemUuid() bool {
	if o != nil && o.FilesystemUuid.IsSet() {
		return true
	}

	return false
}

// SetFilesystemUuid gets a reference to the given NullableString and assigns it to the FilesystemUuid field.
func (o *VolumeInfo) SetFilesystemUuid(v string) {
	o.FilesystemUuid.Set(&v)
}
// SetFilesystemUuidNil sets the value for FilesystemUuid to be an explicit nil
func (o *VolumeInfo) SetFilesystemUuidNil() {
	o.FilesystemUuid.Set(nil)
}

// UnsetFilesystemUuid ensures that no value is present for FilesystemUuid, not even an explicit nil
func (o *VolumeInfo) UnsetFilesystemUuid() {
	o.FilesystemUuid.Unset()
}

// GetIsDedupe returns the IsDedupe field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetIsDedupe() bool {
	if o == nil || IsNil(o.IsDedupe.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDedupe.Get()
}

// GetIsDedupeOk returns a tuple with the IsDedupe field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetIsDedupeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDedupe.Get(), o.IsDedupe.IsSet()
}

// HasIsDedupe returns a boolean if a field has been set.
func (o *VolumeInfo) HasIsDedupe() bool {
	if o != nil && o.IsDedupe.IsSet() {
		return true
	}

	return false
}

// SetIsDedupe gets a reference to the given NullableBool and assigns it to the IsDedupe field.
func (o *VolumeInfo) SetIsDedupe(v bool) {
	o.IsDedupe.Set(&v)
}
// SetIsDedupeNil sets the value for IsDedupe to be an explicit nil
func (o *VolumeInfo) SetIsDedupeNil() {
	o.IsDedupe.Set(nil)
}

// UnsetIsDedupe ensures that no value is present for IsDedupe, not even an explicit nil
func (o *VolumeInfo) UnsetIsDedupe() {
	o.IsDedupe.Unset()
}

// GetIsSupported returns the IsSupported field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetIsSupported() bool {
	if o == nil || IsNil(o.IsSupported.Get()) {
		var ret bool
		return ret
	}
	return *o.IsSupported.Get()
}

// GetIsSupportedOk returns a tuple with the IsSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetIsSupportedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSupported.Get(), o.IsSupported.IsSet()
}

// HasIsSupported returns a boolean if a field has been set.
func (o *VolumeInfo) HasIsSupported() bool {
	if o != nil && o.IsSupported.IsSet() {
		return true
	}

	return false
}

// SetIsSupported gets a reference to the given NullableBool and assigns it to the IsSupported field.
func (o *VolumeInfo) SetIsSupported(v bool) {
	o.IsSupported.Set(&v)
}
// SetIsSupportedNil sets the value for IsSupported to be an explicit nil
func (o *VolumeInfo) SetIsSupportedNil() {
	o.IsSupported.Set(nil)
}

// UnsetIsSupported ensures that no value is present for IsSupported, not even an explicit nil
func (o *VolumeInfo) UnsetIsSupported() {
	o.IsSupported.Unset()
}

// GetLogicalVolumeInfo returns the LogicalVolumeInfo field value if set, zero value otherwise.
func (o *VolumeInfo) GetLogicalVolumeInfo() VolumeInfoLogicalVolumeInfo {
	if o == nil || IsNil(o.LogicalVolumeInfo) {
		var ret VolumeInfoLogicalVolumeInfo
		return ret
	}
	return *o.LogicalVolumeInfo
}

// GetLogicalVolumeInfoOk returns a tuple with the LogicalVolumeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VolumeInfo) GetLogicalVolumeInfoOk() (*VolumeInfoLogicalVolumeInfo, bool) {
	if o == nil || IsNil(o.LogicalVolumeInfo) {
		return nil, false
	}
	return o.LogicalVolumeInfo, true
}

// HasLogicalVolumeInfo returns a boolean if a field has been set.
func (o *VolumeInfo) HasLogicalVolumeInfo() bool {
	if o != nil && !IsNil(o.LogicalVolumeInfo) {
		return true
	}

	return false
}

// SetLogicalVolumeInfo gets a reference to the given VolumeInfoLogicalVolumeInfo and assigns it to the LogicalVolumeInfo field.
func (o *VolumeInfo) SetLogicalVolumeInfo(v VolumeInfoLogicalVolumeInfo) {
	o.LogicalVolumeInfo = &v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *VolumeInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *VolumeInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *VolumeInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *VolumeInfo) UnsetName() {
	o.Name.Unset()
}

// GetVolumeGuid returns the VolumeGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetVolumeGuid() string {
	if o == nil || IsNil(o.VolumeGuid.Get()) {
		var ret string
		return ret
	}
	return *o.VolumeGuid.Get()
}

// GetVolumeGuidOk returns a tuple with the VolumeGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetVolumeGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeGuid.Get(), o.VolumeGuid.IsSet()
}

// HasVolumeGuid returns a boolean if a field has been set.
func (o *VolumeInfo) HasVolumeGuid() bool {
	if o != nil && o.VolumeGuid.IsSet() {
		return true
	}

	return false
}

// SetVolumeGuid gets a reference to the given NullableString and assigns it to the VolumeGuid field.
func (o *VolumeInfo) SetVolumeGuid(v string) {
	o.VolumeGuid.Set(&v)
}
// SetVolumeGuidNil sets the value for VolumeGuid to be an explicit nil
func (o *VolumeInfo) SetVolumeGuidNil() {
	o.VolumeGuid.Set(nil)
}

// UnsetVolumeGuid ensures that no value is present for VolumeGuid, not even an explicit nil
func (o *VolumeInfo) UnsetVolumeGuid() {
	o.VolumeGuid.Unset()
}

// GetVolumeSizeInBytes returns the VolumeSizeInBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetVolumeSizeInBytes() int64 {
	if o == nil || IsNil(o.VolumeSizeInBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.VolumeSizeInBytes.Get()
}

// GetVolumeSizeInBytesOk returns a tuple with the VolumeSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetVolumeSizeInBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeSizeInBytes.Get(), o.VolumeSizeInBytes.IsSet()
}

// HasVolumeSizeInBytes returns a boolean if a field has been set.
func (o *VolumeInfo) HasVolumeSizeInBytes() bool {
	if o != nil && o.VolumeSizeInBytes.IsSet() {
		return true
	}

	return false
}

// SetVolumeSizeInBytes gets a reference to the given NullableInt64 and assigns it to the VolumeSizeInBytes field.
func (o *VolumeInfo) SetVolumeSizeInBytes(v int64) {
	o.VolumeSizeInBytes.Set(&v)
}
// SetVolumeSizeInBytesNil sets the value for VolumeSizeInBytes to be an explicit nil
func (o *VolumeInfo) SetVolumeSizeInBytesNil() {
	o.VolumeSizeInBytes.Set(nil)
}

// UnsetVolumeSizeInBytes ensures that no value is present for VolumeSizeInBytes, not even an explicit nil
func (o *VolumeInfo) UnsetVolumeSizeInBytes() {
	o.VolumeSizeInBytes.Unset()
}

// GetVolumeType returns the VolumeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VolumeInfo) GetVolumeType() string {
	if o == nil || IsNil(o.VolumeType.Get()) {
		var ret string
		return ret
	}
	return *o.VolumeType.Get()
}

// GetVolumeTypeOk returns a tuple with the VolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VolumeInfo) GetVolumeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VolumeType.Get(), o.VolumeType.IsSet()
}

// HasVolumeType returns a boolean if a field has been set.
func (o *VolumeInfo) HasVolumeType() bool {
	if o != nil && o.VolumeType.IsSet() {
		return true
	}

	return false
}

// SetVolumeType gets a reference to the given NullableString and assigns it to the VolumeType field.
func (o *VolumeInfo) SetVolumeType(v string) {
	o.VolumeType.Set(&v)
}
// SetVolumeTypeNil sets the value for VolumeType to be an explicit nil
func (o *VolumeInfo) SetVolumeTypeNil() {
	o.VolumeType.Set(nil)
}

// UnsetVolumeType ensures that no value is present for VolumeType, not even an explicit nil
func (o *VolumeInfo) UnsetVolumeType() {
	o.VolumeType.Unset()
}

func (o VolumeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VolumeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesystemType.IsSet() {
		toSerialize["filesystemType"] = o.FilesystemType.Get()
	}
	if o.FilesystemUuid.IsSet() {
		toSerialize["filesystemUuid"] = o.FilesystemUuid.Get()
	}
	if o.IsDedupe.IsSet() {
		toSerialize["isDedupe"] = o.IsDedupe.Get()
	}
	if o.IsSupported.IsSet() {
		toSerialize["isSupported"] = o.IsSupported.Get()
	}
	if !IsNil(o.LogicalVolumeInfo) {
		toSerialize["logicalVolumeInfo"] = o.LogicalVolumeInfo
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.VolumeGuid.IsSet() {
		toSerialize["volumeGuid"] = o.VolumeGuid.Get()
	}
	if o.VolumeSizeInBytes.IsSet() {
		toSerialize["volumeSizeInBytes"] = o.VolumeSizeInBytes.Get()
	}
	if o.VolumeType.IsSet() {
		toSerialize["volumeType"] = o.VolumeType.Get()
	}
	return toSerialize, nil
}

type NullableVolumeInfo struct {
	value *VolumeInfo
	isSet bool
}

func (v NullableVolumeInfo) Get() *VolumeInfo {
	return v.value
}

func (v *NullableVolumeInfo) Set(val *VolumeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableVolumeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableVolumeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVolumeInfo(val *VolumeInfo) *NullableVolumeInfo {
	return &NullableVolumeInfo{value: val, isSet: true}
}

func (v NullableVolumeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVolumeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


