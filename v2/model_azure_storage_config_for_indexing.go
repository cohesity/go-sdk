/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureStorageConfigForIndexing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureStorageConfigForIndexing{}

// AzureStorageConfigForIndexing Storage config for indexing in Azure CE.
type AzureStorageConfigForIndexing struct {
	// The container to be used for the tenant.
	ContainerName NullableString `json:"containerName"`
	// The storage account to be used for the tenant.
	StorageAccountName NullableString `json:"storageAccountName"`
}

type _AzureStorageConfigForIndexing AzureStorageConfigForIndexing

// NewAzureStorageConfigForIndexing instantiates a new AzureStorageConfigForIndexing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureStorageConfigForIndexing(containerName NullableString, storageAccountName NullableString) *AzureStorageConfigForIndexing {
	this := AzureStorageConfigForIndexing{}
	this.ContainerName = containerName
	this.StorageAccountName = storageAccountName
	return &this
}

// NewAzureStorageConfigForIndexingWithDefaults instantiates a new AzureStorageConfigForIndexing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureStorageConfigForIndexingWithDefaults() *AzureStorageConfigForIndexing {
	this := AzureStorageConfigForIndexing{}
	return &this
}

// GetContainerName returns the ContainerName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AzureStorageConfigForIndexing) GetContainerName() string {
	if o == nil || o.ContainerName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ContainerName.Get()
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureStorageConfigForIndexing) GetContainerNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContainerName.Get(), o.ContainerName.IsSet()
}

// SetContainerName sets field value
func (o *AzureStorageConfigForIndexing) SetContainerName(v string) {
	o.ContainerName.Set(&v)
}

// GetStorageAccountName returns the StorageAccountName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AzureStorageConfigForIndexing) GetStorageAccountName() string {
	if o == nil || o.StorageAccountName.Get() == nil {
		var ret string
		return ret
	}

	return *o.StorageAccountName.Get()
}

// GetStorageAccountNameOk returns a tuple with the StorageAccountName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureStorageConfigForIndexing) GetStorageAccountNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageAccountName.Get(), o.StorageAccountName.IsSet()
}

// SetStorageAccountName sets field value
func (o *AzureStorageConfigForIndexing) SetStorageAccountName(v string) {
	o.StorageAccountName.Set(&v)
}

func (o AzureStorageConfigForIndexing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureStorageConfigForIndexing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["containerName"] = o.ContainerName.Get()
	toSerialize["storageAccountName"] = o.StorageAccountName.Get()
	return toSerialize, nil
}

func (o *AzureStorageConfigForIndexing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"containerName",
		"storageAccountName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureStorageConfigForIndexing := _AzureStorageConfigForIndexing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureStorageConfigForIndexing)

	if err != nil {
		return err
	}

	*o = AzureStorageConfigForIndexing(varAzureStorageConfigForIndexing)

	return err
}

type NullableAzureStorageConfigForIndexing struct {
	value *AzureStorageConfigForIndexing
	isSet bool
}

func (v NullableAzureStorageConfigForIndexing) Get() *AzureStorageConfigForIndexing {
	return v.value
}

func (v *NullableAzureStorageConfigForIndexing) Set(val *AzureStorageConfigForIndexing) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureStorageConfigForIndexing) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureStorageConfigForIndexing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureStorageConfigForIndexing(val *AzureStorageConfigForIndexing) *NullableAzureStorageConfigForIndexing {
	return &NullableAzureStorageConfigForIndexing{value: val, isSet: true}
}

func (v NullableAzureStorageConfigForIndexing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureStorageConfigForIndexing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


