/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverO365ParamsRecoverMsTeamParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverO365ParamsRecoverMsTeamParams{}

// RecoverO365ParamsRecoverMsTeamParams Specifies the parameters to recover Microsoft 365 Teams.
type RecoverO365ParamsRecoverMsTeamParams struct {
	// Specifies whether to continue recovering other teams, if some of the teams fail to recover. Default value is false.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies to create new team in case the target team doesn't exists in case restoreToOriginal is false.
	CreateNewTeam NullableBool `json:"createNewTeam,omitempty"`
	// Specifies a list of Microsoft 365 Teams params associated with objects to recover.
	Objects []ObjectMsTeamParam `json:"objects"`
	// Specifies if the original members/owners should be part of the newly created target team or not.
	RestoreOriginalOwners NullableBool `json:"restoreOriginalOwners,omitempty"`
	// Specifies whether or not all Microsoft 365 Teams are restored to original location.
	RestoreToOriginal NullableBool `json:"restoreToOriginal,omitempty"`
	TargetMsTeam *RecoverMsTeamParamsTargetMsTeam `json:"targetMsTeam,omitempty"`
	TargetMsTeamParam *RecoverMsTeamParamsTargetMsTeamParam `json:"targetMsTeamParam,omitempty"`
	// This field is deprecated. Specifies target team name in case restoreToOriginal is false. This will be ignored if restoring to alternate existing team (i.e. to a team the nickname of which is same as the one supplied by the end user).
	TargetTeamFullName NullableString `json:"targetTeamFullName,omitempty"`
	// Specifies the target team name in case restoreToOriginal is false.
	TargetTeamName NullableString `json:"targetTeamName,omitempty"`
	// This field is deprecated. Specifies target team nickname in case restoreToOriginal is false.
	TargetTeamNickName NullableString `json:"targetTeamNickName,omitempty"`
	TargetTeamOwner NullableRecoverMsTeamParamsTargetTeamOwner `json:"targetTeamOwner,omitempty"`
}

type _RecoverO365ParamsRecoverMsTeamParams RecoverO365ParamsRecoverMsTeamParams

// NewRecoverO365ParamsRecoverMsTeamParams instantiates a new RecoverO365ParamsRecoverMsTeamParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverO365ParamsRecoverMsTeamParams(objects []ObjectMsTeamParam) *RecoverO365ParamsRecoverMsTeamParams {
	this := RecoverO365ParamsRecoverMsTeamParams{}
	this.Objects = objects
	return &this
}

// NewRecoverO365ParamsRecoverMsTeamParamsWithDefaults instantiates a new RecoverO365ParamsRecoverMsTeamParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverO365ParamsRecoverMsTeamParamsWithDefaults() *RecoverO365ParamsRecoverMsTeamParams {
	this := RecoverO365ParamsRecoverMsTeamParams{}
	return &this
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverMsTeamParams) GetContinueOnError() bool {
	if o == nil || IsNil(o.ContinueOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverMsTeamParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *RecoverO365ParamsRecoverMsTeamParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetCreateNewTeam returns the CreateNewTeam field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverMsTeamParams) GetCreateNewTeam() bool {
	if o == nil || IsNil(o.CreateNewTeam.Get()) {
		var ret bool
		return ret
	}
	return *o.CreateNewTeam.Get()
}

// GetCreateNewTeamOk returns a tuple with the CreateNewTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverMsTeamParams) GetCreateNewTeamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreateNewTeam.Get(), o.CreateNewTeam.IsSet()
}

// HasCreateNewTeam returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) HasCreateNewTeam() bool {
	if o != nil && o.CreateNewTeam.IsSet() {
		return true
	}

	return false
}

// SetCreateNewTeam gets a reference to the given NullableBool and assigns it to the CreateNewTeam field.
func (o *RecoverO365ParamsRecoverMsTeamParams) SetCreateNewTeam(v bool) {
	o.CreateNewTeam.Set(&v)
}
// SetCreateNewTeamNil sets the value for CreateNewTeam to be an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) SetCreateNewTeamNil() {
	o.CreateNewTeam.Set(nil)
}

// UnsetCreateNewTeam ensures that no value is present for CreateNewTeam, not even an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) UnsetCreateNewTeam() {
	o.CreateNewTeam.Unset()
}

// GetObjects returns the Objects field value
// If the value is explicit nil, the zero value for []ObjectMsTeamParam will be returned
func (o *RecoverO365ParamsRecoverMsTeamParams) GetObjects() []ObjectMsTeamParam {
	if o == nil {
		var ret []ObjectMsTeamParam
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverMsTeamParams) GetObjectsOk() ([]ObjectMsTeamParam, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// SetObjects sets field value
func (o *RecoverO365ParamsRecoverMsTeamParams) SetObjects(v []ObjectMsTeamParam) {
	o.Objects = v
}

// GetRestoreOriginalOwners returns the RestoreOriginalOwners field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverMsTeamParams) GetRestoreOriginalOwners() bool {
	if o == nil || IsNil(o.RestoreOriginalOwners.Get()) {
		var ret bool
		return ret
	}
	return *o.RestoreOriginalOwners.Get()
}

// GetRestoreOriginalOwnersOk returns a tuple with the RestoreOriginalOwners field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverMsTeamParams) GetRestoreOriginalOwnersOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreOriginalOwners.Get(), o.RestoreOriginalOwners.IsSet()
}

// HasRestoreOriginalOwners returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) HasRestoreOriginalOwners() bool {
	if o != nil && o.RestoreOriginalOwners.IsSet() {
		return true
	}

	return false
}

// SetRestoreOriginalOwners gets a reference to the given NullableBool and assigns it to the RestoreOriginalOwners field.
func (o *RecoverO365ParamsRecoverMsTeamParams) SetRestoreOriginalOwners(v bool) {
	o.RestoreOriginalOwners.Set(&v)
}
// SetRestoreOriginalOwnersNil sets the value for RestoreOriginalOwners to be an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) SetRestoreOriginalOwnersNil() {
	o.RestoreOriginalOwners.Set(nil)
}

// UnsetRestoreOriginalOwners ensures that no value is present for RestoreOriginalOwners, not even an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) UnsetRestoreOriginalOwners() {
	o.RestoreOriginalOwners.Unset()
}

// GetRestoreToOriginal returns the RestoreToOriginal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverMsTeamParams) GetRestoreToOriginal() bool {
	if o == nil || IsNil(o.RestoreToOriginal.Get()) {
		var ret bool
		return ret
	}
	return *o.RestoreToOriginal.Get()
}

// GetRestoreToOriginalOk returns a tuple with the RestoreToOriginal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverMsTeamParams) GetRestoreToOriginalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreToOriginal.Get(), o.RestoreToOriginal.IsSet()
}

// HasRestoreToOriginal returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) HasRestoreToOriginal() bool {
	if o != nil && o.RestoreToOriginal.IsSet() {
		return true
	}

	return false
}

// SetRestoreToOriginal gets a reference to the given NullableBool and assigns it to the RestoreToOriginal field.
func (o *RecoverO365ParamsRecoverMsTeamParams) SetRestoreToOriginal(v bool) {
	o.RestoreToOriginal.Set(&v)
}
// SetRestoreToOriginalNil sets the value for RestoreToOriginal to be an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) SetRestoreToOriginalNil() {
	o.RestoreToOriginal.Set(nil)
}

// UnsetRestoreToOriginal ensures that no value is present for RestoreToOriginal, not even an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) UnsetRestoreToOriginal() {
	o.RestoreToOriginal.Unset()
}

// GetTargetMsTeam returns the TargetMsTeam field value if set, zero value otherwise.
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetMsTeam() RecoverMsTeamParamsTargetMsTeam {
	if o == nil || IsNil(o.TargetMsTeam) {
		var ret RecoverMsTeamParamsTargetMsTeam
		return ret
	}
	return *o.TargetMsTeam
}

// GetTargetMsTeamOk returns a tuple with the TargetMsTeam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetMsTeamOk() (*RecoverMsTeamParamsTargetMsTeam, bool) {
	if o == nil || IsNil(o.TargetMsTeam) {
		return nil, false
	}
	return o.TargetMsTeam, true
}

// HasTargetMsTeam returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) HasTargetMsTeam() bool {
	if o != nil && !IsNil(o.TargetMsTeam) {
		return true
	}

	return false
}

// SetTargetMsTeam gets a reference to the given RecoverMsTeamParamsTargetMsTeam and assigns it to the TargetMsTeam field.
func (o *RecoverO365ParamsRecoverMsTeamParams) SetTargetMsTeam(v RecoverMsTeamParamsTargetMsTeam) {
	o.TargetMsTeam = &v
}

// GetTargetMsTeamParam returns the TargetMsTeamParam field value if set, zero value otherwise.
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetMsTeamParam() RecoverMsTeamParamsTargetMsTeamParam {
	if o == nil || IsNil(o.TargetMsTeamParam) {
		var ret RecoverMsTeamParamsTargetMsTeamParam
		return ret
	}
	return *o.TargetMsTeamParam
}

// GetTargetMsTeamParamOk returns a tuple with the TargetMsTeamParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetMsTeamParamOk() (*RecoverMsTeamParamsTargetMsTeamParam, bool) {
	if o == nil || IsNil(o.TargetMsTeamParam) {
		return nil, false
	}
	return o.TargetMsTeamParam, true
}

// HasTargetMsTeamParam returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) HasTargetMsTeamParam() bool {
	if o != nil && !IsNil(o.TargetMsTeamParam) {
		return true
	}

	return false
}

// SetTargetMsTeamParam gets a reference to the given RecoverMsTeamParamsTargetMsTeamParam and assigns it to the TargetMsTeamParam field.
func (o *RecoverO365ParamsRecoverMsTeamParams) SetTargetMsTeamParam(v RecoverMsTeamParamsTargetMsTeamParam) {
	o.TargetMsTeamParam = &v
}

// GetTargetTeamFullName returns the TargetTeamFullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetTeamFullName() string {
	if o == nil || IsNil(o.TargetTeamFullName.Get()) {
		var ret string
		return ret
	}
	return *o.TargetTeamFullName.Get()
}

// GetTargetTeamFullNameOk returns a tuple with the TargetTeamFullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetTeamFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetTeamFullName.Get(), o.TargetTeamFullName.IsSet()
}

// HasTargetTeamFullName returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) HasTargetTeamFullName() bool {
	if o != nil && o.TargetTeamFullName.IsSet() {
		return true
	}

	return false
}

// SetTargetTeamFullName gets a reference to the given NullableString and assigns it to the TargetTeamFullName field.
func (o *RecoverO365ParamsRecoverMsTeamParams) SetTargetTeamFullName(v string) {
	o.TargetTeamFullName.Set(&v)
}
// SetTargetTeamFullNameNil sets the value for TargetTeamFullName to be an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) SetTargetTeamFullNameNil() {
	o.TargetTeamFullName.Set(nil)
}

// UnsetTargetTeamFullName ensures that no value is present for TargetTeamFullName, not even an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) UnsetTargetTeamFullName() {
	o.TargetTeamFullName.Unset()
}

// GetTargetTeamName returns the TargetTeamName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetTeamName() string {
	if o == nil || IsNil(o.TargetTeamName.Get()) {
		var ret string
		return ret
	}
	return *o.TargetTeamName.Get()
}

// GetTargetTeamNameOk returns a tuple with the TargetTeamName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetTeamName.Get(), o.TargetTeamName.IsSet()
}

// HasTargetTeamName returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) HasTargetTeamName() bool {
	if o != nil && o.TargetTeamName.IsSet() {
		return true
	}

	return false
}

// SetTargetTeamName gets a reference to the given NullableString and assigns it to the TargetTeamName field.
func (o *RecoverO365ParamsRecoverMsTeamParams) SetTargetTeamName(v string) {
	o.TargetTeamName.Set(&v)
}
// SetTargetTeamNameNil sets the value for TargetTeamName to be an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) SetTargetTeamNameNil() {
	o.TargetTeamName.Set(nil)
}

// UnsetTargetTeamName ensures that no value is present for TargetTeamName, not even an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) UnsetTargetTeamName() {
	o.TargetTeamName.Unset()
}

// GetTargetTeamNickName returns the TargetTeamNickName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetTeamNickName() string {
	if o == nil || IsNil(o.TargetTeamNickName.Get()) {
		var ret string
		return ret
	}
	return *o.TargetTeamNickName.Get()
}

// GetTargetTeamNickNameOk returns a tuple with the TargetTeamNickName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetTeamNickNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetTeamNickName.Get(), o.TargetTeamNickName.IsSet()
}

// HasTargetTeamNickName returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) HasTargetTeamNickName() bool {
	if o != nil && o.TargetTeamNickName.IsSet() {
		return true
	}

	return false
}

// SetTargetTeamNickName gets a reference to the given NullableString and assigns it to the TargetTeamNickName field.
func (o *RecoverO365ParamsRecoverMsTeamParams) SetTargetTeamNickName(v string) {
	o.TargetTeamNickName.Set(&v)
}
// SetTargetTeamNickNameNil sets the value for TargetTeamNickName to be an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) SetTargetTeamNickNameNil() {
	o.TargetTeamNickName.Set(nil)
}

// UnsetTargetTeamNickName ensures that no value is present for TargetTeamNickName, not even an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) UnsetTargetTeamNickName() {
	o.TargetTeamNickName.Unset()
}

// GetTargetTeamOwner returns the TargetTeamOwner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetTeamOwner() RecoverMsTeamParamsTargetTeamOwner {
	if o == nil || IsNil(o.TargetTeamOwner.Get()) {
		var ret RecoverMsTeamParamsTargetTeamOwner
		return ret
	}
	return *o.TargetTeamOwner.Get()
}

// GetTargetTeamOwnerOk returns a tuple with the TargetTeamOwner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverMsTeamParams) GetTargetTeamOwnerOk() (*RecoverMsTeamParamsTargetTeamOwner, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetTeamOwner.Get(), o.TargetTeamOwner.IsSet()
}

// HasTargetTeamOwner returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverMsTeamParams) HasTargetTeamOwner() bool {
	if o != nil && o.TargetTeamOwner.IsSet() {
		return true
	}

	return false
}

// SetTargetTeamOwner gets a reference to the given NullableRecoverMsTeamParamsTargetTeamOwner and assigns it to the TargetTeamOwner field.
func (o *RecoverO365ParamsRecoverMsTeamParams) SetTargetTeamOwner(v RecoverMsTeamParamsTargetTeamOwner) {
	o.TargetTeamOwner.Set(&v)
}
// SetTargetTeamOwnerNil sets the value for TargetTeamOwner to be an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) SetTargetTeamOwnerNil() {
	o.TargetTeamOwner.Set(nil)
}

// UnsetTargetTeamOwner ensures that no value is present for TargetTeamOwner, not even an explicit nil
func (o *RecoverO365ParamsRecoverMsTeamParams) UnsetTargetTeamOwner() {
	o.TargetTeamOwner.Unset()
}

func (o RecoverO365ParamsRecoverMsTeamParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverO365ParamsRecoverMsTeamParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.CreateNewTeam.IsSet() {
		toSerialize["createNewTeam"] = o.CreateNewTeam.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.RestoreOriginalOwners.IsSet() {
		toSerialize["restoreOriginalOwners"] = o.RestoreOriginalOwners.Get()
	}
	if o.RestoreToOriginal.IsSet() {
		toSerialize["restoreToOriginal"] = o.RestoreToOriginal.Get()
	}
	if !IsNil(o.TargetMsTeam) {
		toSerialize["targetMsTeam"] = o.TargetMsTeam
	}
	if !IsNil(o.TargetMsTeamParam) {
		toSerialize["targetMsTeamParam"] = o.TargetMsTeamParam
	}
	if o.TargetTeamFullName.IsSet() {
		toSerialize["targetTeamFullName"] = o.TargetTeamFullName.Get()
	}
	if o.TargetTeamName.IsSet() {
		toSerialize["targetTeamName"] = o.TargetTeamName.Get()
	}
	if o.TargetTeamNickName.IsSet() {
		toSerialize["targetTeamNickName"] = o.TargetTeamNickName.Get()
	}
	if o.TargetTeamOwner.IsSet() {
		toSerialize["targetTeamOwner"] = o.TargetTeamOwner.Get()
	}
	return toSerialize, nil
}

func (o *RecoverO365ParamsRecoverMsTeamParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverO365ParamsRecoverMsTeamParams := _RecoverO365ParamsRecoverMsTeamParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverO365ParamsRecoverMsTeamParams)

	if err != nil {
		return err
	}

	*o = RecoverO365ParamsRecoverMsTeamParams(varRecoverO365ParamsRecoverMsTeamParams)

	return err
}

type NullableRecoverO365ParamsRecoverMsTeamParams struct {
	value *RecoverO365ParamsRecoverMsTeamParams
	isSet bool
}

func (v NullableRecoverO365ParamsRecoverMsTeamParams) Get() *RecoverO365ParamsRecoverMsTeamParams {
	return v.value
}

func (v *NullableRecoverO365ParamsRecoverMsTeamParams) Set(val *RecoverO365ParamsRecoverMsTeamParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverO365ParamsRecoverMsTeamParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverO365ParamsRecoverMsTeamParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverO365ParamsRecoverMsTeamParams(val *RecoverO365ParamsRecoverMsTeamParams) *NullableRecoverO365ParamsRecoverMsTeamParams {
	return &NullableRecoverO365ParamsRecoverMsTeamParams{value: val, isSet: true}
}

func (v NullableRecoverO365ParamsRecoverMsTeamParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverO365ParamsRecoverMsTeamParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


