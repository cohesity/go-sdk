/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverCassandraParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverCassandraParams{}

// RecoverCassandraParams Specifies the parameters to recover Cassandra objects.
type RecoverCassandraParams struct {
	// Specifies the advanced configuration for a recovery job.
	AdvancedConfigs []KeyValuePair `json:"advancedConfigs,omitempty"`
	// Specifies the maximum network bandwidth that each concurrent IO Stream can use for exchanging data with the cluster.
	BandwidthMBPS NullableInt64 `json:"bandwidthMBPS,omitempty"`
	// Specifies the maximum number of concurrent IO Streams that will be created to exchange data with the cluster.
	Concurrency NullableInt32 `json:"concurrency,omitempty"`
	// Set to true to overwrite an existing object at the destination. If set to false, and the same object exists at the destination, then recovery will fail for that object.
	Overwrite NullableBool `json:"overwrite,omitempty"`
	// Specifies the 'Source Registration ID' of the source where the objects are to be recovered. If this is not specified, the recovery job will recover to the original location.
	RecoverTo NullableInt64 `json:"recoverTo,omitempty"`
	// This field will hold the warnings in cases where the job status is SucceededWithWarnings.
	Warnings []string `json:"warnings,omitempty"`
	// Specifies whether the current recovery operation is a live table restore operation.
	IsLiveTableRestore NullableBool `json:"isLiveTableRestore,omitempty"`
	// Specifies whether the current recovery operation is a system keyspace restore operation.
	IsSystemKeyspaceRestore NullableBool `json:"isSystemKeyspaceRestore,omitempty"`
	// Specifies the directory for restoring the logs.
	LogRestoreDirectory NullableString `json:"logRestoreDirectory,omitempty"`
	// Specifies whether recover/skip roles and permissions.
	RecoverPrivileges NullableBool `json:"recoverPrivileges,omitempty"`
	// Specifies the time in Unix epoch timestamp in microseconds at which the Cassandra services are to be restarted.
	RestartAtUsecs NullableInt64 `json:"restartAtUsecs,omitempty"`
	// Specifies the command to restart Cassandra services after the point in time recovery.
	RestartCommand NullableString `json:"restartCommand,omitempty"`
	// Specifies whether to restart Cassandra services immediately after the point in time recovery.
	RestartImmediately NullableBool `json:"restartImmediately,omitempty"`
	// Specifies whether to restart Cassandra services after the point in time recovery.
	RestartServices NullableBool `json:"restartServices,omitempty"`
	// Specifies the Id of the task required to restart Cassandra services.
	RestartServicesTaskId NullableInt64 `json:"restartServicesTaskId,omitempty"`
	// Specifies Whether to run checks before the recovery. E.x if there is sufficient space in the destination cluster for the recovery to succeed.
	RunPreChecks NullableBool `json:"runPreChecks,omitempty"`
	// Selected Data centers for this cluster.
	SelectedDataCenters []string `json:"selectedDataCenters,omitempty"`
	// Specifies the local snapshot ids and other details of the Objects to be recovered.
	Snapshots []RecoverCassandraSnapshotParams `json:"snapshots"`
	// Specifies the directory on the primary to copy the files which are to be uploaded using destination sstableloader.
	StagingDirectoryList []string `json:"stagingDirectoryList,omitempty"`
	// A suffix that is to be applied to all recovered objects.
	Suffix NullableString `json:"suffix,omitempty"`
}

type _RecoverCassandraParams RecoverCassandraParams

// NewRecoverCassandraParams instantiates a new RecoverCassandraParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverCassandraParams(snapshots []RecoverCassandraSnapshotParams) *RecoverCassandraParams {
	this := RecoverCassandraParams{}
	this.Snapshots = snapshots
	return &this
}

// NewRecoverCassandraParamsWithDefaults instantiates a new RecoverCassandraParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverCassandraParamsWithDefaults() *RecoverCassandraParams {
	this := RecoverCassandraParams{}
	return &this
}

// GetAdvancedConfigs returns the AdvancedConfigs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetAdvancedConfigs() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.AdvancedConfigs
}

// GetAdvancedConfigsOk returns a tuple with the AdvancedConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetAdvancedConfigsOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.AdvancedConfigs) {
		return nil, false
	}
	return o.AdvancedConfigs, true
}

// HasAdvancedConfigs returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasAdvancedConfigs() bool {
	if o != nil && !IsNil(o.AdvancedConfigs) {
		return true
	}

	return false
}

// SetAdvancedConfigs gets a reference to the given []KeyValuePair and assigns it to the AdvancedConfigs field.
func (o *RecoverCassandraParams) SetAdvancedConfigs(v []KeyValuePair) {
	o.AdvancedConfigs = v
}

// GetBandwidthMBPS returns the BandwidthMBPS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetBandwidthMBPS() int64 {
	if o == nil || IsNil(o.BandwidthMBPS.Get()) {
		var ret int64
		return ret
	}
	return *o.BandwidthMBPS.Get()
}

// GetBandwidthMBPSOk returns a tuple with the BandwidthMBPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetBandwidthMBPSOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BandwidthMBPS.Get(), o.BandwidthMBPS.IsSet()
}

// HasBandwidthMBPS returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasBandwidthMBPS() bool {
	if o != nil && o.BandwidthMBPS.IsSet() {
		return true
	}

	return false
}

// SetBandwidthMBPS gets a reference to the given NullableInt64 and assigns it to the BandwidthMBPS field.
func (o *RecoverCassandraParams) SetBandwidthMBPS(v int64) {
	o.BandwidthMBPS.Set(&v)
}
// SetBandwidthMBPSNil sets the value for BandwidthMBPS to be an explicit nil
func (o *RecoverCassandraParams) SetBandwidthMBPSNil() {
	o.BandwidthMBPS.Set(nil)
}

// UnsetBandwidthMBPS ensures that no value is present for BandwidthMBPS, not even an explicit nil
func (o *RecoverCassandraParams) UnsetBandwidthMBPS() {
	o.BandwidthMBPS.Unset()
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetConcurrency() int32 {
	if o == nil || IsNil(o.Concurrency.Get()) {
		var ret int32
		return ret
	}
	return *o.Concurrency.Get()
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetConcurrencyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Concurrency.Get(), o.Concurrency.IsSet()
}

// HasConcurrency returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasConcurrency() bool {
	if o != nil && o.Concurrency.IsSet() {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given NullableInt32 and assigns it to the Concurrency field.
func (o *RecoverCassandraParams) SetConcurrency(v int32) {
	o.Concurrency.Set(&v)
}
// SetConcurrencyNil sets the value for Concurrency to be an explicit nil
func (o *RecoverCassandraParams) SetConcurrencyNil() {
	o.Concurrency.Set(nil)
}

// UnsetConcurrency ensures that no value is present for Concurrency, not even an explicit nil
func (o *RecoverCassandraParams) UnsetConcurrency() {
	o.Concurrency.Unset()
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite.Get()) {
		var ret bool
		return ret
	}
	return *o.Overwrite.Get()
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetOverwriteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Overwrite.Get(), o.Overwrite.IsSet()
}

// HasOverwrite returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasOverwrite() bool {
	if o != nil && o.Overwrite.IsSet() {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given NullableBool and assigns it to the Overwrite field.
func (o *RecoverCassandraParams) SetOverwrite(v bool) {
	o.Overwrite.Set(&v)
}
// SetOverwriteNil sets the value for Overwrite to be an explicit nil
func (o *RecoverCassandraParams) SetOverwriteNil() {
	o.Overwrite.Set(nil)
}

// UnsetOverwrite ensures that no value is present for Overwrite, not even an explicit nil
func (o *RecoverCassandraParams) UnsetOverwrite() {
	o.Overwrite.Unset()
}

// GetRecoverTo returns the RecoverTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetRecoverTo() int64 {
	if o == nil || IsNil(o.RecoverTo.Get()) {
		var ret int64
		return ret
	}
	return *o.RecoverTo.Get()
}

// GetRecoverToOk returns a tuple with the RecoverTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetRecoverToOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverTo.Get(), o.RecoverTo.IsSet()
}

// HasRecoverTo returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasRecoverTo() bool {
	if o != nil && o.RecoverTo.IsSet() {
		return true
	}

	return false
}

// SetRecoverTo gets a reference to the given NullableInt64 and assigns it to the RecoverTo field.
func (o *RecoverCassandraParams) SetRecoverTo(v int64) {
	o.RecoverTo.Set(&v)
}
// SetRecoverToNil sets the value for RecoverTo to be an explicit nil
func (o *RecoverCassandraParams) SetRecoverToNil() {
	o.RecoverTo.Set(nil)
}

// UnsetRecoverTo ensures that no value is present for RecoverTo, not even an explicit nil
func (o *RecoverCassandraParams) UnsetRecoverTo() {
	o.RecoverTo.Unset()
}

// GetWarnings returns the Warnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetWarnings() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetWarningsOk() ([]string, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *RecoverCassandraParams) SetWarnings(v []string) {
	o.Warnings = v
}

// GetIsLiveTableRestore returns the IsLiveTableRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetIsLiveTableRestore() bool {
	if o == nil || IsNil(o.IsLiveTableRestore.Get()) {
		var ret bool
		return ret
	}
	return *o.IsLiveTableRestore.Get()
}

// GetIsLiveTableRestoreOk returns a tuple with the IsLiveTableRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetIsLiveTableRestoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsLiveTableRestore.Get(), o.IsLiveTableRestore.IsSet()
}

// HasIsLiveTableRestore returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasIsLiveTableRestore() bool {
	if o != nil && o.IsLiveTableRestore.IsSet() {
		return true
	}

	return false
}

// SetIsLiveTableRestore gets a reference to the given NullableBool and assigns it to the IsLiveTableRestore field.
func (o *RecoverCassandraParams) SetIsLiveTableRestore(v bool) {
	o.IsLiveTableRestore.Set(&v)
}
// SetIsLiveTableRestoreNil sets the value for IsLiveTableRestore to be an explicit nil
func (o *RecoverCassandraParams) SetIsLiveTableRestoreNil() {
	o.IsLiveTableRestore.Set(nil)
}

// UnsetIsLiveTableRestore ensures that no value is present for IsLiveTableRestore, not even an explicit nil
func (o *RecoverCassandraParams) UnsetIsLiveTableRestore() {
	o.IsLiveTableRestore.Unset()
}

// GetIsSystemKeyspaceRestore returns the IsSystemKeyspaceRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetIsSystemKeyspaceRestore() bool {
	if o == nil || IsNil(o.IsSystemKeyspaceRestore.Get()) {
		var ret bool
		return ret
	}
	return *o.IsSystemKeyspaceRestore.Get()
}

// GetIsSystemKeyspaceRestoreOk returns a tuple with the IsSystemKeyspaceRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetIsSystemKeyspaceRestoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSystemKeyspaceRestore.Get(), o.IsSystemKeyspaceRestore.IsSet()
}

// HasIsSystemKeyspaceRestore returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasIsSystemKeyspaceRestore() bool {
	if o != nil && o.IsSystemKeyspaceRestore.IsSet() {
		return true
	}

	return false
}

// SetIsSystemKeyspaceRestore gets a reference to the given NullableBool and assigns it to the IsSystemKeyspaceRestore field.
func (o *RecoverCassandraParams) SetIsSystemKeyspaceRestore(v bool) {
	o.IsSystemKeyspaceRestore.Set(&v)
}
// SetIsSystemKeyspaceRestoreNil sets the value for IsSystemKeyspaceRestore to be an explicit nil
func (o *RecoverCassandraParams) SetIsSystemKeyspaceRestoreNil() {
	o.IsSystemKeyspaceRestore.Set(nil)
}

// UnsetIsSystemKeyspaceRestore ensures that no value is present for IsSystemKeyspaceRestore, not even an explicit nil
func (o *RecoverCassandraParams) UnsetIsSystemKeyspaceRestore() {
	o.IsSystemKeyspaceRestore.Unset()
}

// GetLogRestoreDirectory returns the LogRestoreDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetLogRestoreDirectory() string {
	if o == nil || IsNil(o.LogRestoreDirectory.Get()) {
		var ret string
		return ret
	}
	return *o.LogRestoreDirectory.Get()
}

// GetLogRestoreDirectoryOk returns a tuple with the LogRestoreDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetLogRestoreDirectoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogRestoreDirectory.Get(), o.LogRestoreDirectory.IsSet()
}

// HasLogRestoreDirectory returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasLogRestoreDirectory() bool {
	if o != nil && o.LogRestoreDirectory.IsSet() {
		return true
	}

	return false
}

// SetLogRestoreDirectory gets a reference to the given NullableString and assigns it to the LogRestoreDirectory field.
func (o *RecoverCassandraParams) SetLogRestoreDirectory(v string) {
	o.LogRestoreDirectory.Set(&v)
}
// SetLogRestoreDirectoryNil sets the value for LogRestoreDirectory to be an explicit nil
func (o *RecoverCassandraParams) SetLogRestoreDirectoryNil() {
	o.LogRestoreDirectory.Set(nil)
}

// UnsetLogRestoreDirectory ensures that no value is present for LogRestoreDirectory, not even an explicit nil
func (o *RecoverCassandraParams) UnsetLogRestoreDirectory() {
	o.LogRestoreDirectory.Unset()
}

// GetRecoverPrivileges returns the RecoverPrivileges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetRecoverPrivileges() bool {
	if o == nil || IsNil(o.RecoverPrivileges.Get()) {
		var ret bool
		return ret
	}
	return *o.RecoverPrivileges.Get()
}

// GetRecoverPrivilegesOk returns a tuple with the RecoverPrivileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetRecoverPrivilegesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverPrivileges.Get(), o.RecoverPrivileges.IsSet()
}

// HasRecoverPrivileges returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasRecoverPrivileges() bool {
	if o != nil && o.RecoverPrivileges.IsSet() {
		return true
	}

	return false
}

// SetRecoverPrivileges gets a reference to the given NullableBool and assigns it to the RecoverPrivileges field.
func (o *RecoverCassandraParams) SetRecoverPrivileges(v bool) {
	o.RecoverPrivileges.Set(&v)
}
// SetRecoverPrivilegesNil sets the value for RecoverPrivileges to be an explicit nil
func (o *RecoverCassandraParams) SetRecoverPrivilegesNil() {
	o.RecoverPrivileges.Set(nil)
}

// UnsetRecoverPrivileges ensures that no value is present for RecoverPrivileges, not even an explicit nil
func (o *RecoverCassandraParams) UnsetRecoverPrivileges() {
	o.RecoverPrivileges.Unset()
}

// GetRestartAtUsecs returns the RestartAtUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetRestartAtUsecs() int64 {
	if o == nil || IsNil(o.RestartAtUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.RestartAtUsecs.Get()
}

// GetRestartAtUsecsOk returns a tuple with the RestartAtUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetRestartAtUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestartAtUsecs.Get(), o.RestartAtUsecs.IsSet()
}

// HasRestartAtUsecs returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasRestartAtUsecs() bool {
	if o != nil && o.RestartAtUsecs.IsSet() {
		return true
	}

	return false
}

// SetRestartAtUsecs gets a reference to the given NullableInt64 and assigns it to the RestartAtUsecs field.
func (o *RecoverCassandraParams) SetRestartAtUsecs(v int64) {
	o.RestartAtUsecs.Set(&v)
}
// SetRestartAtUsecsNil sets the value for RestartAtUsecs to be an explicit nil
func (o *RecoverCassandraParams) SetRestartAtUsecsNil() {
	o.RestartAtUsecs.Set(nil)
}

// UnsetRestartAtUsecs ensures that no value is present for RestartAtUsecs, not even an explicit nil
func (o *RecoverCassandraParams) UnsetRestartAtUsecs() {
	o.RestartAtUsecs.Unset()
}

// GetRestartCommand returns the RestartCommand field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetRestartCommand() string {
	if o == nil || IsNil(o.RestartCommand.Get()) {
		var ret string
		return ret
	}
	return *o.RestartCommand.Get()
}

// GetRestartCommandOk returns a tuple with the RestartCommand field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetRestartCommandOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestartCommand.Get(), o.RestartCommand.IsSet()
}

// HasRestartCommand returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasRestartCommand() bool {
	if o != nil && o.RestartCommand.IsSet() {
		return true
	}

	return false
}

// SetRestartCommand gets a reference to the given NullableString and assigns it to the RestartCommand field.
func (o *RecoverCassandraParams) SetRestartCommand(v string) {
	o.RestartCommand.Set(&v)
}
// SetRestartCommandNil sets the value for RestartCommand to be an explicit nil
func (o *RecoverCassandraParams) SetRestartCommandNil() {
	o.RestartCommand.Set(nil)
}

// UnsetRestartCommand ensures that no value is present for RestartCommand, not even an explicit nil
func (o *RecoverCassandraParams) UnsetRestartCommand() {
	o.RestartCommand.Unset()
}

// GetRestartImmediately returns the RestartImmediately field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetRestartImmediately() bool {
	if o == nil || IsNil(o.RestartImmediately.Get()) {
		var ret bool
		return ret
	}
	return *o.RestartImmediately.Get()
}

// GetRestartImmediatelyOk returns a tuple with the RestartImmediately field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetRestartImmediatelyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestartImmediately.Get(), o.RestartImmediately.IsSet()
}

// HasRestartImmediately returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasRestartImmediately() bool {
	if o != nil && o.RestartImmediately.IsSet() {
		return true
	}

	return false
}

// SetRestartImmediately gets a reference to the given NullableBool and assigns it to the RestartImmediately field.
func (o *RecoverCassandraParams) SetRestartImmediately(v bool) {
	o.RestartImmediately.Set(&v)
}
// SetRestartImmediatelyNil sets the value for RestartImmediately to be an explicit nil
func (o *RecoverCassandraParams) SetRestartImmediatelyNil() {
	o.RestartImmediately.Set(nil)
}

// UnsetRestartImmediately ensures that no value is present for RestartImmediately, not even an explicit nil
func (o *RecoverCassandraParams) UnsetRestartImmediately() {
	o.RestartImmediately.Unset()
}

// GetRestartServices returns the RestartServices field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetRestartServices() bool {
	if o == nil || IsNil(o.RestartServices.Get()) {
		var ret bool
		return ret
	}
	return *o.RestartServices.Get()
}

// GetRestartServicesOk returns a tuple with the RestartServices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetRestartServicesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestartServices.Get(), o.RestartServices.IsSet()
}

// HasRestartServices returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasRestartServices() bool {
	if o != nil && o.RestartServices.IsSet() {
		return true
	}

	return false
}

// SetRestartServices gets a reference to the given NullableBool and assigns it to the RestartServices field.
func (o *RecoverCassandraParams) SetRestartServices(v bool) {
	o.RestartServices.Set(&v)
}
// SetRestartServicesNil sets the value for RestartServices to be an explicit nil
func (o *RecoverCassandraParams) SetRestartServicesNil() {
	o.RestartServices.Set(nil)
}

// UnsetRestartServices ensures that no value is present for RestartServices, not even an explicit nil
func (o *RecoverCassandraParams) UnsetRestartServices() {
	o.RestartServices.Unset()
}

// GetRestartServicesTaskId returns the RestartServicesTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetRestartServicesTaskId() int64 {
	if o == nil || IsNil(o.RestartServicesTaskId.Get()) {
		var ret int64
		return ret
	}
	return *o.RestartServicesTaskId.Get()
}

// GetRestartServicesTaskIdOk returns a tuple with the RestartServicesTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetRestartServicesTaskIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestartServicesTaskId.Get(), o.RestartServicesTaskId.IsSet()
}

// HasRestartServicesTaskId returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasRestartServicesTaskId() bool {
	if o != nil && o.RestartServicesTaskId.IsSet() {
		return true
	}

	return false
}

// SetRestartServicesTaskId gets a reference to the given NullableInt64 and assigns it to the RestartServicesTaskId field.
func (o *RecoverCassandraParams) SetRestartServicesTaskId(v int64) {
	o.RestartServicesTaskId.Set(&v)
}
// SetRestartServicesTaskIdNil sets the value for RestartServicesTaskId to be an explicit nil
func (o *RecoverCassandraParams) SetRestartServicesTaskIdNil() {
	o.RestartServicesTaskId.Set(nil)
}

// UnsetRestartServicesTaskId ensures that no value is present for RestartServicesTaskId, not even an explicit nil
func (o *RecoverCassandraParams) UnsetRestartServicesTaskId() {
	o.RestartServicesTaskId.Unset()
}

// GetRunPreChecks returns the RunPreChecks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetRunPreChecks() bool {
	if o == nil || IsNil(o.RunPreChecks.Get()) {
		var ret bool
		return ret
	}
	return *o.RunPreChecks.Get()
}

// GetRunPreChecksOk returns a tuple with the RunPreChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetRunPreChecksOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunPreChecks.Get(), o.RunPreChecks.IsSet()
}

// HasRunPreChecks returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasRunPreChecks() bool {
	if o != nil && o.RunPreChecks.IsSet() {
		return true
	}

	return false
}

// SetRunPreChecks gets a reference to the given NullableBool and assigns it to the RunPreChecks field.
func (o *RecoverCassandraParams) SetRunPreChecks(v bool) {
	o.RunPreChecks.Set(&v)
}
// SetRunPreChecksNil sets the value for RunPreChecks to be an explicit nil
func (o *RecoverCassandraParams) SetRunPreChecksNil() {
	o.RunPreChecks.Set(nil)
}

// UnsetRunPreChecks ensures that no value is present for RunPreChecks, not even an explicit nil
func (o *RecoverCassandraParams) UnsetRunPreChecks() {
	o.RunPreChecks.Unset()
}

// GetSelectedDataCenters returns the SelectedDataCenters field value if set, zero value otherwise.
func (o *RecoverCassandraParams) GetSelectedDataCenters() []string {
	if o == nil || IsNil(o.SelectedDataCenters) {
		var ret []string
		return ret
	}
	return o.SelectedDataCenters
}

// GetSelectedDataCentersOk returns a tuple with the SelectedDataCenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverCassandraParams) GetSelectedDataCentersOk() ([]string, bool) {
	if o == nil || IsNil(o.SelectedDataCenters) {
		return nil, false
	}
	return o.SelectedDataCenters, true
}

// HasSelectedDataCenters returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasSelectedDataCenters() bool {
	if o != nil && !IsNil(o.SelectedDataCenters) {
		return true
	}

	return false
}

// SetSelectedDataCenters gets a reference to the given []string and assigns it to the SelectedDataCenters field.
func (o *RecoverCassandraParams) SetSelectedDataCenters(v []string) {
	o.SelectedDataCenters = v
}

// GetSnapshots returns the Snapshots field value
// If the value is explicit nil, the zero value for []RecoverCassandraSnapshotParams will be returned
func (o *RecoverCassandraParams) GetSnapshots() []RecoverCassandraSnapshotParams {
	if o == nil {
		var ret []RecoverCassandraSnapshotParams
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetSnapshotsOk() ([]RecoverCassandraSnapshotParams, bool) {
	if o == nil || IsNil(o.Snapshots) {
		return nil, false
	}
	return o.Snapshots, true
}

// SetSnapshots sets field value
func (o *RecoverCassandraParams) SetSnapshots(v []RecoverCassandraSnapshotParams) {
	o.Snapshots = v
}

// GetStagingDirectoryList returns the StagingDirectoryList field value if set, zero value otherwise.
func (o *RecoverCassandraParams) GetStagingDirectoryList() []string {
	if o == nil || IsNil(o.StagingDirectoryList) {
		var ret []string
		return ret
	}
	return o.StagingDirectoryList
}

// GetStagingDirectoryListOk returns a tuple with the StagingDirectoryList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverCassandraParams) GetStagingDirectoryListOk() ([]string, bool) {
	if o == nil || IsNil(o.StagingDirectoryList) {
		return nil, false
	}
	return o.StagingDirectoryList, true
}

// HasStagingDirectoryList returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasStagingDirectoryList() bool {
	if o != nil && !IsNil(o.StagingDirectoryList) {
		return true
	}

	return false
}

// SetStagingDirectoryList gets a reference to the given []string and assigns it to the StagingDirectoryList field.
func (o *RecoverCassandraParams) SetStagingDirectoryList(v []string) {
	o.StagingDirectoryList = v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverCassandraParams) GetSuffix() string {
	if o == nil || IsNil(o.Suffix.Get()) {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverCassandraParams) GetSuffixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *RecoverCassandraParams) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *RecoverCassandraParams) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *RecoverCassandraParams) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *RecoverCassandraParams) UnsetSuffix() {
	o.Suffix.Unset()
}

func (o RecoverCassandraParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverCassandraParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AdvancedConfigs != nil {
		toSerialize["advancedConfigs"] = o.AdvancedConfigs
	}
	if o.BandwidthMBPS.IsSet() {
		toSerialize["bandwidthMBPS"] = o.BandwidthMBPS.Get()
	}
	if o.Concurrency.IsSet() {
		toSerialize["concurrency"] = o.Concurrency.Get()
	}
	if o.Overwrite.IsSet() {
		toSerialize["overwrite"] = o.Overwrite.Get()
	}
	if o.RecoverTo.IsSet() {
		toSerialize["recoverTo"] = o.RecoverTo.Get()
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	if o.IsLiveTableRestore.IsSet() {
		toSerialize["isLiveTableRestore"] = o.IsLiveTableRestore.Get()
	}
	if o.IsSystemKeyspaceRestore.IsSet() {
		toSerialize["isSystemKeyspaceRestore"] = o.IsSystemKeyspaceRestore.Get()
	}
	if o.LogRestoreDirectory.IsSet() {
		toSerialize["logRestoreDirectory"] = o.LogRestoreDirectory.Get()
	}
	if o.RecoverPrivileges.IsSet() {
		toSerialize["recoverPrivileges"] = o.RecoverPrivileges.Get()
	}
	if o.RestartAtUsecs.IsSet() {
		toSerialize["restartAtUsecs"] = o.RestartAtUsecs.Get()
	}
	if o.RestartCommand.IsSet() {
		toSerialize["restartCommand"] = o.RestartCommand.Get()
	}
	if o.RestartImmediately.IsSet() {
		toSerialize["restartImmediately"] = o.RestartImmediately.Get()
	}
	if o.RestartServices.IsSet() {
		toSerialize["restartServices"] = o.RestartServices.Get()
	}
	if o.RestartServicesTaskId.IsSet() {
		toSerialize["restartServicesTaskId"] = o.RestartServicesTaskId.Get()
	}
	if o.RunPreChecks.IsSet() {
		toSerialize["runPreChecks"] = o.RunPreChecks.Get()
	}
	if !IsNil(o.SelectedDataCenters) {
		toSerialize["selectedDataCenters"] = o.SelectedDataCenters
	}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	if !IsNil(o.StagingDirectoryList) {
		toSerialize["stagingDirectoryList"] = o.StagingDirectoryList
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	return toSerialize, nil
}

func (o *RecoverCassandraParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverCassandraParams := _RecoverCassandraParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverCassandraParams)

	if err != nil {
		return err
	}

	*o = RecoverCassandraParams(varRecoverCassandraParams)

	return err
}

type NullableRecoverCassandraParams struct {
	value *RecoverCassandraParams
	isSet bool
}

func (v NullableRecoverCassandraParams) Get() *RecoverCassandraParams {
	return v.value
}

func (v *NullableRecoverCassandraParams) Set(val *RecoverCassandraParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverCassandraParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverCassandraParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverCassandraParams(val *RecoverCassandraParams) *NullableRecoverCassandraParams {
	return &NullableRecoverCassandraParams{value: val, isSet: true}
}

func (v NullableRecoverCassandraParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverCassandraParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


