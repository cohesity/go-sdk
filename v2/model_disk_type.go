/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DiskType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskType{}

// DiskType Type of disk.
type DiskType struct {
	// Specifies type of the disk.
	Status *string `json:"status,omitempty"`
}

// NewDiskType instantiates a new DiskType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskType() *DiskType {
	this := DiskType{}
	return &this
}

// NewDiskTypeWithDefaults instantiates a new DiskType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskTypeWithDefaults() *DiskType {
	this := DiskType{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DiskType) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskType) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DiskType) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DiskType) SetStatus(v string) {
	o.Status = &v
}

func (o DiskType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableDiskType struct {
	value *DiskType
	isSet bool
}

func (v NullableDiskType) Get() *DiskType {
	return v.value
}

func (v *NullableDiskType) Set(val *DiskType) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskType) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskType(val *DiskType) *NullableDiskType {
	return &NullableDiskType{value: val, isSet: true}
}

func (v NullableDiskType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


