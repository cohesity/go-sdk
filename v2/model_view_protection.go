/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewProtection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewProtection{}

// ViewProtection Specifies information about the Protection Groups that are protecting the View.
type ViewProtection struct {
	// Specifies if this View is an inactive View that was created on this Remote Cluster to store the Snapshots created by replication. This inactive View cannot be NFS or SMB mounted.
	Inactive NullableBool `json:"inactive,omitempty"`
	// Specifies the id of the Protection Source that is using this View.
	MagnetoEntityId NullableInt64 `json:"magnetoEntityId,omitempty"`
	// Array of Protection Group. Specifies the Protection Group that are protecting the View.
	ProtectionGroups []ProtectionGroupInfo `json:"protectionGroups,omitempty"`
}

// NewViewProtection instantiates a new ViewProtection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewProtection() *ViewProtection {
	this := ViewProtection{}
	return &this
}

// NewViewProtectionWithDefaults instantiates a new ViewProtection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewProtectionWithDefaults() *ViewProtection {
	this := ViewProtection{}
	return &this
}

// GetInactive returns the Inactive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewProtection) GetInactive() bool {
	if o == nil || IsNil(o.Inactive.Get()) {
		var ret bool
		return ret
	}
	return *o.Inactive.Get()
}

// GetInactiveOk returns a tuple with the Inactive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewProtection) GetInactiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Inactive.Get(), o.Inactive.IsSet()
}

// HasInactive returns a boolean if a field has been set.
func (o *ViewProtection) HasInactive() bool {
	if o != nil && o.Inactive.IsSet() {
		return true
	}

	return false
}

// SetInactive gets a reference to the given NullableBool and assigns it to the Inactive field.
func (o *ViewProtection) SetInactive(v bool) {
	o.Inactive.Set(&v)
}
// SetInactiveNil sets the value for Inactive to be an explicit nil
func (o *ViewProtection) SetInactiveNil() {
	o.Inactive.Set(nil)
}

// UnsetInactive ensures that no value is present for Inactive, not even an explicit nil
func (o *ViewProtection) UnsetInactive() {
	o.Inactive.Unset()
}

// GetMagnetoEntityId returns the MagnetoEntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewProtection) GetMagnetoEntityId() int64 {
	if o == nil || IsNil(o.MagnetoEntityId.Get()) {
		var ret int64
		return ret
	}
	return *o.MagnetoEntityId.Get()
}

// GetMagnetoEntityIdOk returns a tuple with the MagnetoEntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewProtection) GetMagnetoEntityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MagnetoEntityId.Get(), o.MagnetoEntityId.IsSet()
}

// HasMagnetoEntityId returns a boolean if a field has been set.
func (o *ViewProtection) HasMagnetoEntityId() bool {
	if o != nil && o.MagnetoEntityId.IsSet() {
		return true
	}

	return false
}

// SetMagnetoEntityId gets a reference to the given NullableInt64 and assigns it to the MagnetoEntityId field.
func (o *ViewProtection) SetMagnetoEntityId(v int64) {
	o.MagnetoEntityId.Set(&v)
}
// SetMagnetoEntityIdNil sets the value for MagnetoEntityId to be an explicit nil
func (o *ViewProtection) SetMagnetoEntityIdNil() {
	o.MagnetoEntityId.Set(nil)
}

// UnsetMagnetoEntityId ensures that no value is present for MagnetoEntityId, not even an explicit nil
func (o *ViewProtection) UnsetMagnetoEntityId() {
	o.MagnetoEntityId.Unset()
}

// GetProtectionGroups returns the ProtectionGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewProtection) GetProtectionGroups() []ProtectionGroupInfo {
	if o == nil {
		var ret []ProtectionGroupInfo
		return ret
	}
	return o.ProtectionGroups
}

// GetProtectionGroupsOk returns a tuple with the ProtectionGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewProtection) GetProtectionGroupsOk() ([]ProtectionGroupInfo, bool) {
	if o == nil || IsNil(o.ProtectionGroups) {
		return nil, false
	}
	return o.ProtectionGroups, true
}

// HasProtectionGroups returns a boolean if a field has been set.
func (o *ViewProtection) HasProtectionGroups() bool {
	if o != nil && !IsNil(o.ProtectionGroups) {
		return true
	}

	return false
}

// SetProtectionGroups gets a reference to the given []ProtectionGroupInfo and assigns it to the ProtectionGroups field.
func (o *ViewProtection) SetProtectionGroups(v []ProtectionGroupInfo) {
	o.ProtectionGroups = v
}

func (o ViewProtection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewProtection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Inactive.IsSet() {
		toSerialize["inactive"] = o.Inactive.Get()
	}
	if o.MagnetoEntityId.IsSet() {
		toSerialize["magnetoEntityId"] = o.MagnetoEntityId.Get()
	}
	if o.ProtectionGroups != nil {
		toSerialize["protectionGroups"] = o.ProtectionGroups
	}
	return toSerialize, nil
}

type NullableViewProtection struct {
	value *ViewProtection
	isSet bool
}

func (v NullableViewProtection) Get() *ViewProtection {
	return v.value
}

func (v *NullableViewProtection) Set(val *ViewProtection) {
	v.value = val
	v.isSet = true
}

func (v NullableViewProtection) IsSet() bool {
	return v.isSet
}

func (v *NullableViewProtection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewProtection(val *ViewProtection) *NullableViewProtection {
	return &NullableViewProtection{value: val, isSet: true}
}

func (v NullableViewProtection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewProtection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


