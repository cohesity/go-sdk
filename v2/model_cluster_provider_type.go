/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClusterProviderType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterProviderType{}

// ClusterProviderType Cluster Provider Type
type ClusterProviderType struct {
	// Specifies the cluster provider type.
	ClusterProviderType *string `json:"clusterProviderType,omitempty"`
}

// NewClusterProviderType instantiates a new ClusterProviderType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterProviderType() *ClusterProviderType {
	this := ClusterProviderType{}
	return &this
}

// NewClusterProviderTypeWithDefaults instantiates a new ClusterProviderType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterProviderTypeWithDefaults() *ClusterProviderType {
	this := ClusterProviderType{}
	return &this
}

// GetClusterProviderType returns the ClusterProviderType field value if set, zero value otherwise.
func (o *ClusterProviderType) GetClusterProviderType() string {
	if o == nil || IsNil(o.ClusterProviderType) {
		var ret string
		return ret
	}
	return *o.ClusterProviderType
}

// GetClusterProviderTypeOk returns a tuple with the ClusterProviderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterProviderType) GetClusterProviderTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ClusterProviderType) {
		return nil, false
	}
	return o.ClusterProviderType, true
}

// HasClusterProviderType returns a boolean if a field has been set.
func (o *ClusterProviderType) HasClusterProviderType() bool {
	if o != nil && !IsNil(o.ClusterProviderType) {
		return true
	}

	return false
}

// SetClusterProviderType gets a reference to the given string and assigns it to the ClusterProviderType field.
func (o *ClusterProviderType) SetClusterProviderType(v string) {
	o.ClusterProviderType = &v
}

func (o ClusterProviderType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterProviderType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterProviderType) {
		toSerialize["clusterProviderType"] = o.ClusterProviderType
	}
	return toSerialize, nil
}

type NullableClusterProviderType struct {
	value *ClusterProviderType
	isSet bool
}

func (v NullableClusterProviderType) Get() *ClusterProviderType {
	return v.value
}

func (v *NullableClusterProviderType) Set(val *ClusterProviderType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterProviderType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterProviderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterProviderType(val *ClusterProviderType) *NullableClusterProviderType {
	return &NullableClusterProviderType{value: val, isSet: true}
}

func (v NullableClusterProviderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterProviderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


