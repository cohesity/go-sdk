/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CommonUpdatableUserParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonUpdatableUserParams{}

// CommonUpdatableUserParams Specifies user properties which can be updated.
type CommonUpdatableUserParams struct {
	// Specifies the description of the User.
	Description NullableString `json:"description,omitempty"`
	// Specifies the epoch time in milliseconds since when the user can login.
	EffectiveTimeMsecs NullableInt64 `json:"effectiveTimeMsecs,omitempty"`
	// Specifies the epoch time in milliseconds when the user expires. Post expiry the user cannot access Cohesity cluster.
	ExpiryTimeMsecs NullableInt64 `json:"expiryTimeMsecs,omitempty"`
	// Specifies whether the User is locked.
	Locked NullableBool `json:"locked,omitempty"`
	// Specifies whether the User is restricted. A restricted user can only view & manage the objects it has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Specifies the Cohesity roles to associate with the user. The Cohesity roles determine privileges on the Cohesity Cluster for this user.
	Roles []string `json:"roles,omitempty"`
}

// NewCommonUpdatableUserParams instantiates a new CommonUpdatableUserParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonUpdatableUserParams() *CommonUpdatableUserParams {
	this := CommonUpdatableUserParams{}
	return &this
}

// NewCommonUpdatableUserParamsWithDefaults instantiates a new CommonUpdatableUserParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonUpdatableUserParamsWithDefaults() *CommonUpdatableUserParams {
	this := CommonUpdatableUserParams{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonUpdatableUserParams) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonUpdatableUserParams) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CommonUpdatableUserParams) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CommonUpdatableUserParams) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CommonUpdatableUserParams) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CommonUpdatableUserParams) UnsetDescription() {
	o.Description.Unset()
}

// GetEffectiveTimeMsecs returns the EffectiveTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonUpdatableUserParams) GetEffectiveTimeMsecs() int64 {
	if o == nil || IsNil(o.EffectiveTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.EffectiveTimeMsecs.Get()
}

// GetEffectiveTimeMsecsOk returns a tuple with the EffectiveTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonUpdatableUserParams) GetEffectiveTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EffectiveTimeMsecs.Get(), o.EffectiveTimeMsecs.IsSet()
}

// HasEffectiveTimeMsecs returns a boolean if a field has been set.
func (o *CommonUpdatableUserParams) HasEffectiveTimeMsecs() bool {
	if o != nil && o.EffectiveTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetEffectiveTimeMsecs gets a reference to the given NullableInt64 and assigns it to the EffectiveTimeMsecs field.
func (o *CommonUpdatableUserParams) SetEffectiveTimeMsecs(v int64) {
	o.EffectiveTimeMsecs.Set(&v)
}
// SetEffectiveTimeMsecsNil sets the value for EffectiveTimeMsecs to be an explicit nil
func (o *CommonUpdatableUserParams) SetEffectiveTimeMsecsNil() {
	o.EffectiveTimeMsecs.Set(nil)
}

// UnsetEffectiveTimeMsecs ensures that no value is present for EffectiveTimeMsecs, not even an explicit nil
func (o *CommonUpdatableUserParams) UnsetEffectiveTimeMsecs() {
	o.EffectiveTimeMsecs.Unset()
}

// GetExpiryTimeMsecs returns the ExpiryTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonUpdatableUserParams) GetExpiryTimeMsecs() int64 {
	if o == nil || IsNil(o.ExpiryTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.ExpiryTimeMsecs.Get()
}

// GetExpiryTimeMsecsOk returns a tuple with the ExpiryTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonUpdatableUserParams) GetExpiryTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiryTimeMsecs.Get(), o.ExpiryTimeMsecs.IsSet()
}

// HasExpiryTimeMsecs returns a boolean if a field has been set.
func (o *CommonUpdatableUserParams) HasExpiryTimeMsecs() bool {
	if o != nil && o.ExpiryTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ExpiryTimeMsecs field.
func (o *CommonUpdatableUserParams) SetExpiryTimeMsecs(v int64) {
	o.ExpiryTimeMsecs.Set(&v)
}
// SetExpiryTimeMsecsNil sets the value for ExpiryTimeMsecs to be an explicit nil
func (o *CommonUpdatableUserParams) SetExpiryTimeMsecsNil() {
	o.ExpiryTimeMsecs.Set(nil)
}

// UnsetExpiryTimeMsecs ensures that no value is present for ExpiryTimeMsecs, not even an explicit nil
func (o *CommonUpdatableUserParams) UnsetExpiryTimeMsecs() {
	o.ExpiryTimeMsecs.Unset()
}

// GetLocked returns the Locked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonUpdatableUserParams) GetLocked() bool {
	if o == nil || IsNil(o.Locked.Get()) {
		var ret bool
		return ret
	}
	return *o.Locked.Get()
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonUpdatableUserParams) GetLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locked.Get(), o.Locked.IsSet()
}

// HasLocked returns a boolean if a field has been set.
func (o *CommonUpdatableUserParams) HasLocked() bool {
	if o != nil && o.Locked.IsSet() {
		return true
	}

	return false
}

// SetLocked gets a reference to the given NullableBool and assigns it to the Locked field.
func (o *CommonUpdatableUserParams) SetLocked(v bool) {
	o.Locked.Set(&v)
}
// SetLockedNil sets the value for Locked to be an explicit nil
func (o *CommonUpdatableUserParams) SetLockedNil() {
	o.Locked.Set(nil)
}

// UnsetLocked ensures that no value is present for Locked, not even an explicit nil
func (o *CommonUpdatableUserParams) UnsetLocked() {
	o.Locked.Unset()
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonUpdatableUserParams) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted.Get()) {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonUpdatableUserParams) GetRestrictedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *CommonUpdatableUserParams) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *CommonUpdatableUserParams) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *CommonUpdatableUserParams) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *CommonUpdatableUserParams) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonUpdatableUserParams) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonUpdatableUserParams) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CommonUpdatableUserParams) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *CommonUpdatableUserParams) SetRoles(v []string) {
	o.Roles = v
}

func (o CommonUpdatableUserParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonUpdatableUserParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.EffectiveTimeMsecs.IsSet() {
		toSerialize["effectiveTimeMsecs"] = o.EffectiveTimeMsecs.Get()
	}
	if o.ExpiryTimeMsecs.IsSet() {
		toSerialize["expiryTimeMsecs"] = o.ExpiryTimeMsecs.Get()
	}
	if o.Locked.IsSet() {
		toSerialize["locked"] = o.Locked.Get()
	}
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

type NullableCommonUpdatableUserParams struct {
	value *CommonUpdatableUserParams
	isSet bool
}

func (v NullableCommonUpdatableUserParams) Get() *CommonUpdatableUserParams {
	return v.value
}

func (v *NullableCommonUpdatableUserParams) Set(val *CommonUpdatableUserParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonUpdatableUserParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonUpdatableUserParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonUpdatableUserParams(val *CommonUpdatableUserParams) *NullableCommonUpdatableUserParams {
	return &NullableCommonUpdatableUserParams{value: val, isSet: true}
}

func (v NullableCommonUpdatableUserParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonUpdatableUserParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


