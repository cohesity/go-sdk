/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PrimaryBackupTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrimaryBackupTarget{}

// PrimaryBackupTarget Specifies the primary backup target settings for regular backups. If the backup target field is not specified then backup will be taken locally on the Cohesity cluster.
type PrimaryBackupTarget struct {
	ArchivalTargetSettings *PrimaryArchivalTarget `json:"archivalTargetSettings,omitempty"`
	// Specifies the primary backup location where backups will be stored. If not specified, then default is assumed as local backup on Cohesity cluster.
	TargetType NullableString `json:"targetType,omitempty"`
	// Specifies if the default primary backup target must be used for backups. If this is not specified or set to false, then targets specified in 'archivalTargetSettings' will be used for backups. If the value is specified as true, then default backup target is used internally. This field should only be set in the environment where tenant policy management is enabled and external targets are assigned to tenant when provisioning tenants.
	UseDefaultBackupTarget NullableBool `json:"useDefaultBackupTarget,omitempty"`
}

// NewPrimaryBackupTarget instantiates a new PrimaryBackupTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrimaryBackupTarget() *PrimaryBackupTarget {
	this := PrimaryBackupTarget{}
	var targetType TARGET_TYPE = "Local"
	this.TargetType = *NewNullableString(&targetType)
	return &this
}

// NewPrimaryBackupTargetWithDefaults instantiates a new PrimaryBackupTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrimaryBackupTargetWithDefaults() *PrimaryBackupTarget {
	this := PrimaryBackupTarget{}
	var targetType TARGET_TYPE = "Local"
	this.TargetType = *NewNullableString(&targetType)
	return &this
}

// GetArchivalTargetSettings returns the ArchivalTargetSettings field value if set, zero value otherwise.
func (o *PrimaryBackupTarget) GetArchivalTargetSettings() PrimaryArchivalTarget {
	if o == nil || IsNil(o.ArchivalTargetSettings) {
		var ret PrimaryArchivalTarget
		return ret
	}
	return *o.ArchivalTargetSettings
}

// GetArchivalTargetSettingsOk returns a tuple with the ArchivalTargetSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PrimaryBackupTarget) GetArchivalTargetSettingsOk() (*PrimaryArchivalTarget, bool) {
	if o == nil || IsNil(o.ArchivalTargetSettings) {
		return nil, false
	}
	return o.ArchivalTargetSettings, true
}

// HasArchivalTargetSettings returns a boolean if a field has been set.
func (o *PrimaryBackupTarget) HasArchivalTargetSettings() bool {
	if o != nil && !IsNil(o.ArchivalTargetSettings) {
		return true
	}

	return false
}

// SetArchivalTargetSettings gets a reference to the given PrimaryArchivalTarget and assigns it to the ArchivalTargetSettings field.
func (o *PrimaryBackupTarget) SetArchivalTargetSettings(v PrimaryArchivalTarget) {
	o.ArchivalTargetSettings = &v
}

// GetTargetType returns the TargetType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrimaryBackupTarget) GetTargetType() string {
	if o == nil || IsNil(o.TargetType.Get()) {
		var ret string
		return ret
	}
	return *o.TargetType.Get()
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrimaryBackupTarget) GetTargetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetType.Get(), o.TargetType.IsSet()
}

// HasTargetType returns a boolean if a field has been set.
func (o *PrimaryBackupTarget) HasTargetType() bool {
	if o != nil && o.TargetType.IsSet() {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given NullableString and assigns it to the TargetType field.
func (o *PrimaryBackupTarget) SetTargetType(v string) {
	o.TargetType.Set(&v)
}
// SetTargetTypeNil sets the value for TargetType to be an explicit nil
func (o *PrimaryBackupTarget) SetTargetTypeNil() {
	o.TargetType.Set(nil)
}

// UnsetTargetType ensures that no value is present for TargetType, not even an explicit nil
func (o *PrimaryBackupTarget) UnsetTargetType() {
	o.TargetType.Unset()
}

// GetUseDefaultBackupTarget returns the UseDefaultBackupTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrimaryBackupTarget) GetUseDefaultBackupTarget() bool {
	if o == nil || IsNil(o.UseDefaultBackupTarget.Get()) {
		var ret bool
		return ret
	}
	return *o.UseDefaultBackupTarget.Get()
}

// GetUseDefaultBackupTargetOk returns a tuple with the UseDefaultBackupTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrimaryBackupTarget) GetUseDefaultBackupTargetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseDefaultBackupTarget.Get(), o.UseDefaultBackupTarget.IsSet()
}

// HasUseDefaultBackupTarget returns a boolean if a field has been set.
func (o *PrimaryBackupTarget) HasUseDefaultBackupTarget() bool {
	if o != nil && o.UseDefaultBackupTarget.IsSet() {
		return true
	}

	return false
}

// SetUseDefaultBackupTarget gets a reference to the given NullableBool and assigns it to the UseDefaultBackupTarget field.
func (o *PrimaryBackupTarget) SetUseDefaultBackupTarget(v bool) {
	o.UseDefaultBackupTarget.Set(&v)
}
// SetUseDefaultBackupTargetNil sets the value for UseDefaultBackupTarget to be an explicit nil
func (o *PrimaryBackupTarget) SetUseDefaultBackupTargetNil() {
	o.UseDefaultBackupTarget.Set(nil)
}

// UnsetUseDefaultBackupTarget ensures that no value is present for UseDefaultBackupTarget, not even an explicit nil
func (o *PrimaryBackupTarget) UnsetUseDefaultBackupTarget() {
	o.UseDefaultBackupTarget.Unset()
}

func (o PrimaryBackupTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrimaryBackupTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArchivalTargetSettings) {
		toSerialize["archivalTargetSettings"] = o.ArchivalTargetSettings
	}
	if o.TargetType.IsSet() {
		toSerialize["targetType"] = o.TargetType.Get()
	}
	if o.UseDefaultBackupTarget.IsSet() {
		toSerialize["useDefaultBackupTarget"] = o.UseDefaultBackupTarget.Get()
	}
	return toSerialize, nil
}

type NullablePrimaryBackupTarget struct {
	value *PrimaryBackupTarget
	isSet bool
}

func (v NullablePrimaryBackupTarget) Get() *PrimaryBackupTarget {
	return v.value
}

func (v *NullablePrimaryBackupTarget) Set(val *PrimaryBackupTarget) {
	v.value = val
	v.isSet = true
}

func (v NullablePrimaryBackupTarget) IsSet() bool {
	return v.isSet
}

func (v *NullablePrimaryBackupTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrimaryBackupTarget(val *PrimaryBackupTarget) *NullablePrimaryBackupTarget {
	return &NullablePrimaryBackupTarget{value: val, isSet: true}
}

func (v NullablePrimaryBackupTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrimaryBackupTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


