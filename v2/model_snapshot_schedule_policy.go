/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SnapshotSchedulePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotSchedulePolicy{}

// SnapshotSchedulePolicy Describes the snapshot schedule policy struct.
type SnapshotSchedulePolicy struct {
	// Days of the month.
	DaysOfMonth []int32 `json:"daysOfMonth,omitempty"`
	// Days of the week.
	DaysOfWeek []string `json:"daysOfWeek,omitempty"`
	// Bool to denote if the policy is suspended.
	Suspended NullableBool `json:"suspended,omitempty"`
	// Time of the day.
	Time NullableString `json:"time,omitempty"`
	// Time zone.
	TimeZone NullableString `json:"timeZone,omitempty"`
}

// NewSnapshotSchedulePolicy instantiates a new SnapshotSchedulePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotSchedulePolicy() *SnapshotSchedulePolicy {
	this := SnapshotSchedulePolicy{}
	return &this
}

// NewSnapshotSchedulePolicyWithDefaults instantiates a new SnapshotSchedulePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotSchedulePolicyWithDefaults() *SnapshotSchedulePolicy {
	this := SnapshotSchedulePolicy{}
	return &this
}

// GetDaysOfMonth returns the DaysOfMonth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotSchedulePolicy) GetDaysOfMonth() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.DaysOfMonth
}

// GetDaysOfMonthOk returns a tuple with the DaysOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotSchedulePolicy) GetDaysOfMonthOk() ([]int32, bool) {
	if o == nil || IsNil(o.DaysOfMonth) {
		return nil, false
	}
	return o.DaysOfMonth, true
}

// HasDaysOfMonth returns a boolean if a field has been set.
func (o *SnapshotSchedulePolicy) HasDaysOfMonth() bool {
	if o != nil && !IsNil(o.DaysOfMonth) {
		return true
	}

	return false
}

// SetDaysOfMonth gets a reference to the given []int32 and assigns it to the DaysOfMonth field.
func (o *SnapshotSchedulePolicy) SetDaysOfMonth(v []int32) {
	o.DaysOfMonth = v
}

// GetDaysOfWeek returns the DaysOfWeek field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotSchedulePolicy) GetDaysOfWeek() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DaysOfWeek
}

// GetDaysOfWeekOk returns a tuple with the DaysOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotSchedulePolicy) GetDaysOfWeekOk() ([]string, bool) {
	if o == nil || IsNil(o.DaysOfWeek) {
		return nil, false
	}
	return o.DaysOfWeek, true
}

// HasDaysOfWeek returns a boolean if a field has been set.
func (o *SnapshotSchedulePolicy) HasDaysOfWeek() bool {
	if o != nil && !IsNil(o.DaysOfWeek) {
		return true
	}

	return false
}

// SetDaysOfWeek gets a reference to the given []string and assigns it to the DaysOfWeek field.
func (o *SnapshotSchedulePolicy) SetDaysOfWeek(v []string) {
	o.DaysOfWeek = v
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotSchedulePolicy) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotSchedulePolicy) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *SnapshotSchedulePolicy) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *SnapshotSchedulePolicy) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *SnapshotSchedulePolicy) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *SnapshotSchedulePolicy) UnsetSuspended() {
	o.Suspended.Unset()
}

// GetTime returns the Time field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotSchedulePolicy) GetTime() string {
	if o == nil || IsNil(o.Time.Get()) {
		var ret string
		return ret
	}
	return *o.Time.Get()
}

// GetTimeOk returns a tuple with the Time field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotSchedulePolicy) GetTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Time.Get(), o.Time.IsSet()
}

// HasTime returns a boolean if a field has been set.
func (o *SnapshotSchedulePolicy) HasTime() bool {
	if o != nil && o.Time.IsSet() {
		return true
	}

	return false
}

// SetTime gets a reference to the given NullableString and assigns it to the Time field.
func (o *SnapshotSchedulePolicy) SetTime(v string) {
	o.Time.Set(&v)
}
// SetTimeNil sets the value for Time to be an explicit nil
func (o *SnapshotSchedulePolicy) SetTimeNil() {
	o.Time.Set(nil)
}

// UnsetTime ensures that no value is present for Time, not even an explicit nil
func (o *SnapshotSchedulePolicy) UnsetTime() {
	o.Time.Unset()
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotSchedulePolicy) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone.Get()) {
		var ret string
		return ret
	}
	return *o.TimeZone.Get()
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotSchedulePolicy) GetTimeZoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeZone.Get(), o.TimeZone.IsSet()
}

// HasTimeZone returns a boolean if a field has been set.
func (o *SnapshotSchedulePolicy) HasTimeZone() bool {
	if o != nil && o.TimeZone.IsSet() {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given NullableString and assigns it to the TimeZone field.
func (o *SnapshotSchedulePolicy) SetTimeZone(v string) {
	o.TimeZone.Set(&v)
}
// SetTimeZoneNil sets the value for TimeZone to be an explicit nil
func (o *SnapshotSchedulePolicy) SetTimeZoneNil() {
	o.TimeZone.Set(nil)
}

// UnsetTimeZone ensures that no value is present for TimeZone, not even an explicit nil
func (o *SnapshotSchedulePolicy) UnsetTimeZone() {
	o.TimeZone.Unset()
}

func (o SnapshotSchedulePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotSchedulePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DaysOfMonth != nil {
		toSerialize["daysOfMonth"] = o.DaysOfMonth
	}
	if o.DaysOfWeek != nil {
		toSerialize["daysOfWeek"] = o.DaysOfWeek
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	if o.Time.IsSet() {
		toSerialize["time"] = o.Time.Get()
	}
	if o.TimeZone.IsSet() {
		toSerialize["timeZone"] = o.TimeZone.Get()
	}
	return toSerialize, nil
}

type NullableSnapshotSchedulePolicy struct {
	value *SnapshotSchedulePolicy
	isSet bool
}

func (v NullableSnapshotSchedulePolicy) Get() *SnapshotSchedulePolicy {
	return v.value
}

func (v *NullableSnapshotSchedulePolicy) Set(val *SnapshotSchedulePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotSchedulePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotSchedulePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotSchedulePolicy(val *SnapshotSchedulePolicy) *NullableSnapshotSchedulePolicy {
	return &NullableSnapshotSchedulePolicy{value: val, isSet: true}
}

func (v NullableSnapshotSchedulePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotSchedulePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


