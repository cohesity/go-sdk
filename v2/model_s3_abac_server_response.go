/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3AbacServerResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3AbacServerResponse{}

// S3AbacServerResponse Specifies S3 ABAC server Response.
type S3AbacServerResponse struct {
	// Specifies the path of URI for user requests.
	BasePath NullableString `json:"basePath"`
	// Specifies the intermediate certificates.
	CaBundle NullableString `json:"caBundle"`
	// Specifies the client certificate.
	Certificate NullableString `json:"certificate"`
	// Specifies the hostname of S3 ABAC server.
	Hostname NullableString `json:"hostname"`
	// Specifies the ID of S3 ABAC server.
	Id NullableInt64 `json:"id"`
	// Specifies the port of S3 ABAC server.
	Port NullableInt64 `json:"port"`
	// Specifies the tenant Id for S3 ABAC server.
	TenantId NullableString `json:"tenantId,omitempty"`
}

type _S3AbacServerResponse S3AbacServerResponse

// NewS3AbacServerResponse instantiates a new S3AbacServerResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3AbacServerResponse(basePath NullableString, caBundle NullableString, certificate NullableString, hostname NullableString, id NullableInt64, port NullableInt64) *S3AbacServerResponse {
	this := S3AbacServerResponse{}
	this.BasePath = basePath
	this.CaBundle = caBundle
	this.Certificate = certificate
	this.Hostname = hostname
	this.Id = id
	this.Port = port
	return &this
}

// NewS3AbacServerResponseWithDefaults instantiates a new S3AbacServerResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3AbacServerResponseWithDefaults() *S3AbacServerResponse {
	this := S3AbacServerResponse{}
	return &this
}

// GetBasePath returns the BasePath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3AbacServerResponse) GetBasePath() string {
	if o == nil || o.BasePath.Get() == nil {
		var ret string
		return ret
	}

	return *o.BasePath.Get()
}

// GetBasePathOk returns a tuple with the BasePath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerResponse) GetBasePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BasePath.Get(), o.BasePath.IsSet()
}

// SetBasePath sets field value
func (o *S3AbacServerResponse) SetBasePath(v string) {
	o.BasePath.Set(&v)
}

// GetCaBundle returns the CaBundle field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3AbacServerResponse) GetCaBundle() string {
	if o == nil || o.CaBundle.Get() == nil {
		var ret string
		return ret
	}

	return *o.CaBundle.Get()
}

// GetCaBundleOk returns a tuple with the CaBundle field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerResponse) GetCaBundleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaBundle.Get(), o.CaBundle.IsSet()
}

// SetCaBundle sets field value
func (o *S3AbacServerResponse) SetCaBundle(v string) {
	o.CaBundle.Set(&v)
}

// GetCertificate returns the Certificate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3AbacServerResponse) GetCertificate() string {
	if o == nil || o.Certificate.Get() == nil {
		var ret string
		return ret
	}

	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerResponse) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// SetCertificate sets field value
func (o *S3AbacServerResponse) SetCertificate(v string) {
	o.Certificate.Set(&v)
}

// GetHostname returns the Hostname field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3AbacServerResponse) GetHostname() string {
	if o == nil || o.Hostname.Get() == nil {
		var ret string
		return ret
	}

	return *o.Hostname.Get()
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerResponse) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hostname.Get(), o.Hostname.IsSet()
}

// SetHostname sets field value
func (o *S3AbacServerResponse) SetHostname(v string) {
	o.Hostname.Set(&v)
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *S3AbacServerResponse) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerResponse) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *S3AbacServerResponse) SetId(v int64) {
	o.Id.Set(&v)
}

// GetPort returns the Port field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *S3AbacServerResponse) GetPort() int64 {
	if o == nil || o.Port.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerResponse) GetPortOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// SetPort sets field value
func (o *S3AbacServerResponse) SetPort(v int64) {
	o.Port.Set(&v)
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3AbacServerResponse) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3AbacServerResponse) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *S3AbacServerResponse) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *S3AbacServerResponse) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *S3AbacServerResponse) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *S3AbacServerResponse) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o S3AbacServerResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3AbacServerResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["basePath"] = o.BasePath.Get()
	toSerialize["caBundle"] = o.CaBundle.Get()
	toSerialize["certificate"] = o.Certificate.Get()
	toSerialize["hostname"] = o.Hostname.Get()
	toSerialize["id"] = o.Id.Get()
	toSerialize["port"] = o.Port.Get()
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

func (o *S3AbacServerResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"basePath",
		"caBundle",
		"certificate",
		"hostname",
		"id",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3AbacServerResponse := _S3AbacServerResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3AbacServerResponse)

	if err != nil {
		return err
	}

	*o = S3AbacServerResponse(varS3AbacServerResponse)

	return err
}

type NullableS3AbacServerResponse struct {
	value *S3AbacServerResponse
	isSet bool
}

func (v NullableS3AbacServerResponse) Get() *S3AbacServerResponse {
	return v.value
}

func (v *NullableS3AbacServerResponse) Set(val *S3AbacServerResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableS3AbacServerResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableS3AbacServerResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3AbacServerResponse(val *S3AbacServerResponse) *NullableS3AbacServerResponse {
	return &NullableS3AbacServerResponse{value: val, isSet: true}
}

func (v NullableS3AbacServerResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3AbacServerResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


