/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials{}

// HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials SSH  userID + privateKey required for reading configuration file.
type HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials struct {
	// Passphrase for the private key.
	Passphrase *string `json:"passphrase,omitempty"`
	// The private key.
	PrivateKey string `json:"privateKey"`
	// userId for PrivateKey credentials.
	UserId string `json:"userId"`
}

type _HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials

// NewHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials instantiates a new HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials(privateKey string, userId string) *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials {
	this := HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials{}
	this.PrivateKey = privateKey
	this.UserId = userId
	return &this
}

// NewHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentialsWithDefaults instantiates a new HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentialsWithDefaults() *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials {
	this := HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials{}
	return &this
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) SetPassphrase(v string) {
	o.Passphrase = &v
}

// GetPrivateKey returns the PrivateKey field value
func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetUserId returns the UserId field value
func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) SetUserId(v string) {
	o.UserId = v
}

func (o HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}
	toSerialize["privateKey"] = o.PrivateKey
	toSerialize["userId"] = o.UserId
	return toSerialize, nil
}

func (o *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"privateKey",
		"userId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials := _HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials)

	if err != nil {
		return err
	}

	*o = HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials(varHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials)

	return err
}

type NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials struct {
	value *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials
	isSet bool
}

func (v NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) Get() *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials {
	return v.value
}

func (v *NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) Set(val *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials(val *HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) *NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials {
	return &NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials{value: val, isSet: true}
}

func (v NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


