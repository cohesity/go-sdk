/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BackupNasStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupNasStats{}

// BackupNasStats Specifies the stats which are specific for NAS adapter.
type BackupNasStats struct {
	// Specifies the rate at which files are being analyzed in files per minute.
	FileAnalysisRate NullableInt64 `json:"fileAnalysisRate,omitempty"`
	// Specifies the rate at which files are being discovered in files per minute.
	FileDiscoveryRate NullableInt64 `json:"fileDiscoveryRate,omitempty"`
	// Specifies the time taken for file discovery.
	FileDiscoveryTime NullableInt64 `json:"fileDiscoveryTime,omitempty"`
	// Specifies the rate at which files are being ingested in files per minute.
	FileIngestionRate NullableInt64 `json:"fileIngestionRate,omitempty"`
	// Specifies the number of files which have been analyzed.
	FilesAnalyzed NullableInt64 `json:"filesAnalyzed,omitempty"`
	// Specifies the number of files which have already been discovered.
	FilesDiscovered NullableInt64 `json:"filesDiscovered,omitempty"`
	// Specifies the number of files which have been ingested.
	FilesIngested NullableInt64 `json:"filesIngested,omitempty"`
	// Specifies the run time for directory walker in seconds.
	WalkerRunTime NullableInt64 `json:"walkerRunTime,omitempty"`
}

// NewBackupNasStats instantiates a new BackupNasStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupNasStats() *BackupNasStats {
	this := BackupNasStats{}
	return &this
}

// NewBackupNasStatsWithDefaults instantiates a new BackupNasStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupNasStatsWithDefaults() *BackupNasStats {
	this := BackupNasStats{}
	return &this
}

// GetFileAnalysisRate returns the FileAnalysisRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupNasStats) GetFileAnalysisRate() int64 {
	if o == nil || IsNil(o.FileAnalysisRate.Get()) {
		var ret int64
		return ret
	}
	return *o.FileAnalysisRate.Get()
}

// GetFileAnalysisRateOk returns a tuple with the FileAnalysisRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupNasStats) GetFileAnalysisRateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileAnalysisRate.Get(), o.FileAnalysisRate.IsSet()
}

// HasFileAnalysisRate returns a boolean if a field has been set.
func (o *BackupNasStats) HasFileAnalysisRate() bool {
	if o != nil && o.FileAnalysisRate.IsSet() {
		return true
	}

	return false
}

// SetFileAnalysisRate gets a reference to the given NullableInt64 and assigns it to the FileAnalysisRate field.
func (o *BackupNasStats) SetFileAnalysisRate(v int64) {
	o.FileAnalysisRate.Set(&v)
}
// SetFileAnalysisRateNil sets the value for FileAnalysisRate to be an explicit nil
func (o *BackupNasStats) SetFileAnalysisRateNil() {
	o.FileAnalysisRate.Set(nil)
}

// UnsetFileAnalysisRate ensures that no value is present for FileAnalysisRate, not even an explicit nil
func (o *BackupNasStats) UnsetFileAnalysisRate() {
	o.FileAnalysisRate.Unset()
}

// GetFileDiscoveryRate returns the FileDiscoveryRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupNasStats) GetFileDiscoveryRate() int64 {
	if o == nil || IsNil(o.FileDiscoveryRate.Get()) {
		var ret int64
		return ret
	}
	return *o.FileDiscoveryRate.Get()
}

// GetFileDiscoveryRateOk returns a tuple with the FileDiscoveryRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupNasStats) GetFileDiscoveryRateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileDiscoveryRate.Get(), o.FileDiscoveryRate.IsSet()
}

// HasFileDiscoveryRate returns a boolean if a field has been set.
func (o *BackupNasStats) HasFileDiscoveryRate() bool {
	if o != nil && o.FileDiscoveryRate.IsSet() {
		return true
	}

	return false
}

// SetFileDiscoveryRate gets a reference to the given NullableInt64 and assigns it to the FileDiscoveryRate field.
func (o *BackupNasStats) SetFileDiscoveryRate(v int64) {
	o.FileDiscoveryRate.Set(&v)
}
// SetFileDiscoveryRateNil sets the value for FileDiscoveryRate to be an explicit nil
func (o *BackupNasStats) SetFileDiscoveryRateNil() {
	o.FileDiscoveryRate.Set(nil)
}

// UnsetFileDiscoveryRate ensures that no value is present for FileDiscoveryRate, not even an explicit nil
func (o *BackupNasStats) UnsetFileDiscoveryRate() {
	o.FileDiscoveryRate.Unset()
}

// GetFileDiscoveryTime returns the FileDiscoveryTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupNasStats) GetFileDiscoveryTime() int64 {
	if o == nil || IsNil(o.FileDiscoveryTime.Get()) {
		var ret int64
		return ret
	}
	return *o.FileDiscoveryTime.Get()
}

// GetFileDiscoveryTimeOk returns a tuple with the FileDiscoveryTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupNasStats) GetFileDiscoveryTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileDiscoveryTime.Get(), o.FileDiscoveryTime.IsSet()
}

// HasFileDiscoveryTime returns a boolean if a field has been set.
func (o *BackupNasStats) HasFileDiscoveryTime() bool {
	if o != nil && o.FileDiscoveryTime.IsSet() {
		return true
	}

	return false
}

// SetFileDiscoveryTime gets a reference to the given NullableInt64 and assigns it to the FileDiscoveryTime field.
func (o *BackupNasStats) SetFileDiscoveryTime(v int64) {
	o.FileDiscoveryTime.Set(&v)
}
// SetFileDiscoveryTimeNil sets the value for FileDiscoveryTime to be an explicit nil
func (o *BackupNasStats) SetFileDiscoveryTimeNil() {
	o.FileDiscoveryTime.Set(nil)
}

// UnsetFileDiscoveryTime ensures that no value is present for FileDiscoveryTime, not even an explicit nil
func (o *BackupNasStats) UnsetFileDiscoveryTime() {
	o.FileDiscoveryTime.Unset()
}

// GetFileIngestionRate returns the FileIngestionRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupNasStats) GetFileIngestionRate() int64 {
	if o == nil || IsNil(o.FileIngestionRate.Get()) {
		var ret int64
		return ret
	}
	return *o.FileIngestionRate.Get()
}

// GetFileIngestionRateOk returns a tuple with the FileIngestionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupNasStats) GetFileIngestionRateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileIngestionRate.Get(), o.FileIngestionRate.IsSet()
}

// HasFileIngestionRate returns a boolean if a field has been set.
func (o *BackupNasStats) HasFileIngestionRate() bool {
	if o != nil && o.FileIngestionRate.IsSet() {
		return true
	}

	return false
}

// SetFileIngestionRate gets a reference to the given NullableInt64 and assigns it to the FileIngestionRate field.
func (o *BackupNasStats) SetFileIngestionRate(v int64) {
	o.FileIngestionRate.Set(&v)
}
// SetFileIngestionRateNil sets the value for FileIngestionRate to be an explicit nil
func (o *BackupNasStats) SetFileIngestionRateNil() {
	o.FileIngestionRate.Set(nil)
}

// UnsetFileIngestionRate ensures that no value is present for FileIngestionRate, not even an explicit nil
func (o *BackupNasStats) UnsetFileIngestionRate() {
	o.FileIngestionRate.Unset()
}

// GetFilesAnalyzed returns the FilesAnalyzed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupNasStats) GetFilesAnalyzed() int64 {
	if o == nil || IsNil(o.FilesAnalyzed.Get()) {
		var ret int64
		return ret
	}
	return *o.FilesAnalyzed.Get()
}

// GetFilesAnalyzedOk returns a tuple with the FilesAnalyzed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupNasStats) GetFilesAnalyzedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilesAnalyzed.Get(), o.FilesAnalyzed.IsSet()
}

// HasFilesAnalyzed returns a boolean if a field has been set.
func (o *BackupNasStats) HasFilesAnalyzed() bool {
	if o != nil && o.FilesAnalyzed.IsSet() {
		return true
	}

	return false
}

// SetFilesAnalyzed gets a reference to the given NullableInt64 and assigns it to the FilesAnalyzed field.
func (o *BackupNasStats) SetFilesAnalyzed(v int64) {
	o.FilesAnalyzed.Set(&v)
}
// SetFilesAnalyzedNil sets the value for FilesAnalyzed to be an explicit nil
func (o *BackupNasStats) SetFilesAnalyzedNil() {
	o.FilesAnalyzed.Set(nil)
}

// UnsetFilesAnalyzed ensures that no value is present for FilesAnalyzed, not even an explicit nil
func (o *BackupNasStats) UnsetFilesAnalyzed() {
	o.FilesAnalyzed.Unset()
}

// GetFilesDiscovered returns the FilesDiscovered field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupNasStats) GetFilesDiscovered() int64 {
	if o == nil || IsNil(o.FilesDiscovered.Get()) {
		var ret int64
		return ret
	}
	return *o.FilesDiscovered.Get()
}

// GetFilesDiscoveredOk returns a tuple with the FilesDiscovered field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupNasStats) GetFilesDiscoveredOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilesDiscovered.Get(), o.FilesDiscovered.IsSet()
}

// HasFilesDiscovered returns a boolean if a field has been set.
func (o *BackupNasStats) HasFilesDiscovered() bool {
	if o != nil && o.FilesDiscovered.IsSet() {
		return true
	}

	return false
}

// SetFilesDiscovered gets a reference to the given NullableInt64 and assigns it to the FilesDiscovered field.
func (o *BackupNasStats) SetFilesDiscovered(v int64) {
	o.FilesDiscovered.Set(&v)
}
// SetFilesDiscoveredNil sets the value for FilesDiscovered to be an explicit nil
func (o *BackupNasStats) SetFilesDiscoveredNil() {
	o.FilesDiscovered.Set(nil)
}

// UnsetFilesDiscovered ensures that no value is present for FilesDiscovered, not even an explicit nil
func (o *BackupNasStats) UnsetFilesDiscovered() {
	o.FilesDiscovered.Unset()
}

// GetFilesIngested returns the FilesIngested field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupNasStats) GetFilesIngested() int64 {
	if o == nil || IsNil(o.FilesIngested.Get()) {
		var ret int64
		return ret
	}
	return *o.FilesIngested.Get()
}

// GetFilesIngestedOk returns a tuple with the FilesIngested field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupNasStats) GetFilesIngestedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilesIngested.Get(), o.FilesIngested.IsSet()
}

// HasFilesIngested returns a boolean if a field has been set.
func (o *BackupNasStats) HasFilesIngested() bool {
	if o != nil && o.FilesIngested.IsSet() {
		return true
	}

	return false
}

// SetFilesIngested gets a reference to the given NullableInt64 and assigns it to the FilesIngested field.
func (o *BackupNasStats) SetFilesIngested(v int64) {
	o.FilesIngested.Set(&v)
}
// SetFilesIngestedNil sets the value for FilesIngested to be an explicit nil
func (o *BackupNasStats) SetFilesIngestedNil() {
	o.FilesIngested.Set(nil)
}

// UnsetFilesIngested ensures that no value is present for FilesIngested, not even an explicit nil
func (o *BackupNasStats) UnsetFilesIngested() {
	o.FilesIngested.Unset()
}

// GetWalkerRunTime returns the WalkerRunTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupNasStats) GetWalkerRunTime() int64 {
	if o == nil || IsNil(o.WalkerRunTime.Get()) {
		var ret int64
		return ret
	}
	return *o.WalkerRunTime.Get()
}

// GetWalkerRunTimeOk returns a tuple with the WalkerRunTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupNasStats) GetWalkerRunTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.WalkerRunTime.Get(), o.WalkerRunTime.IsSet()
}

// HasWalkerRunTime returns a boolean if a field has been set.
func (o *BackupNasStats) HasWalkerRunTime() bool {
	if o != nil && o.WalkerRunTime.IsSet() {
		return true
	}

	return false
}

// SetWalkerRunTime gets a reference to the given NullableInt64 and assigns it to the WalkerRunTime field.
func (o *BackupNasStats) SetWalkerRunTime(v int64) {
	o.WalkerRunTime.Set(&v)
}
// SetWalkerRunTimeNil sets the value for WalkerRunTime to be an explicit nil
func (o *BackupNasStats) SetWalkerRunTimeNil() {
	o.WalkerRunTime.Set(nil)
}

// UnsetWalkerRunTime ensures that no value is present for WalkerRunTime, not even an explicit nil
func (o *BackupNasStats) UnsetWalkerRunTime() {
	o.WalkerRunTime.Unset()
}

func (o BackupNasStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupNasStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FileAnalysisRate.IsSet() {
		toSerialize["fileAnalysisRate"] = o.FileAnalysisRate.Get()
	}
	if o.FileDiscoveryRate.IsSet() {
		toSerialize["fileDiscoveryRate"] = o.FileDiscoveryRate.Get()
	}
	if o.FileDiscoveryTime.IsSet() {
		toSerialize["fileDiscoveryTime"] = o.FileDiscoveryTime.Get()
	}
	if o.FileIngestionRate.IsSet() {
		toSerialize["fileIngestionRate"] = o.FileIngestionRate.Get()
	}
	if o.FilesAnalyzed.IsSet() {
		toSerialize["filesAnalyzed"] = o.FilesAnalyzed.Get()
	}
	if o.FilesDiscovered.IsSet() {
		toSerialize["filesDiscovered"] = o.FilesDiscovered.Get()
	}
	if o.FilesIngested.IsSet() {
		toSerialize["filesIngested"] = o.FilesIngested.Get()
	}
	if o.WalkerRunTime.IsSet() {
		toSerialize["walkerRunTime"] = o.WalkerRunTime.Get()
	}
	return toSerialize, nil
}

type NullableBackupNasStats struct {
	value *BackupNasStats
	isSet bool
}

func (v NullableBackupNasStats) Get() *BackupNasStats {
	return v.value
}

func (v *NullableBackupNasStats) Set(val *BackupNasStats) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupNasStats) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupNasStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupNasStats(val *BackupNasStats) *NullableBackupNasStats {
	return &NullableBackupNasStats{value: val, isSet: true}
}

func (v NullableBackupNasStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupNasStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


