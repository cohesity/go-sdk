/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverAwsVmNewSourceConfigEncryptionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverAwsVmNewSourceConfigEncryptionConfig{}

// RecoverAwsVmNewSourceConfigEncryptionConfig Specifies the encryption configuration.
type RecoverAwsVmNewSourceConfigEncryptionConfig struct {
	// Specifies custom KMS key arn. It will be of form arn:aws:kms:<region>:<account_id>:key/<key_id>
	CustomKmsKeyArn NullableString `json:"customKmsKeyArn,omitempty"`
	KmsKey NullableEncryptionConfigKmsKey `json:"kmsKey,omitempty"`
	// Specifies whether to encrypt recovered volumes or not. Default value is true.
	ShouldEncrypt NullableBool `json:"shouldEncrypt"`
}

type _RecoverAwsVmNewSourceConfigEncryptionConfig RecoverAwsVmNewSourceConfigEncryptionConfig

// NewRecoverAwsVmNewSourceConfigEncryptionConfig instantiates a new RecoverAwsVmNewSourceConfigEncryptionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAwsVmNewSourceConfigEncryptionConfig(shouldEncrypt NullableBool) *RecoverAwsVmNewSourceConfigEncryptionConfig {
	this := RecoverAwsVmNewSourceConfigEncryptionConfig{}
	this.ShouldEncrypt = shouldEncrypt
	return &this
}

// NewRecoverAwsVmNewSourceConfigEncryptionConfigWithDefaults instantiates a new RecoverAwsVmNewSourceConfigEncryptionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAwsVmNewSourceConfigEncryptionConfigWithDefaults() *RecoverAwsVmNewSourceConfigEncryptionConfig {
	this := RecoverAwsVmNewSourceConfigEncryptionConfig{}
	return &this
}

// GetCustomKmsKeyArn returns the CustomKmsKeyArn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) GetCustomKmsKeyArn() string {
	if o == nil || IsNil(o.CustomKmsKeyArn.Get()) {
		var ret string
		return ret
	}
	return *o.CustomKmsKeyArn.Get()
}

// GetCustomKmsKeyArnOk returns a tuple with the CustomKmsKeyArn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) GetCustomKmsKeyArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomKmsKeyArn.Get(), o.CustomKmsKeyArn.IsSet()
}

// HasCustomKmsKeyArn returns a boolean if a field has been set.
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) HasCustomKmsKeyArn() bool {
	if o != nil && o.CustomKmsKeyArn.IsSet() {
		return true
	}

	return false
}

// SetCustomKmsKeyArn gets a reference to the given NullableString and assigns it to the CustomKmsKeyArn field.
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) SetCustomKmsKeyArn(v string) {
	o.CustomKmsKeyArn.Set(&v)
}
// SetCustomKmsKeyArnNil sets the value for CustomKmsKeyArn to be an explicit nil
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) SetCustomKmsKeyArnNil() {
	o.CustomKmsKeyArn.Set(nil)
}

// UnsetCustomKmsKeyArn ensures that no value is present for CustomKmsKeyArn, not even an explicit nil
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) UnsetCustomKmsKeyArn() {
	o.CustomKmsKeyArn.Unset()
}

// GetKmsKey returns the KmsKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) GetKmsKey() EncryptionConfigKmsKey {
	if o == nil || IsNil(o.KmsKey.Get()) {
		var ret EncryptionConfigKmsKey
		return ret
	}
	return *o.KmsKey.Get()
}

// GetKmsKeyOk returns a tuple with the KmsKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) GetKmsKeyOk() (*EncryptionConfigKmsKey, bool) {
	if o == nil {
		return nil, false
	}
	return o.KmsKey.Get(), o.KmsKey.IsSet()
}

// HasKmsKey returns a boolean if a field has been set.
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) HasKmsKey() bool {
	if o != nil && o.KmsKey.IsSet() {
		return true
	}

	return false
}

// SetKmsKey gets a reference to the given NullableEncryptionConfigKmsKey and assigns it to the KmsKey field.
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) SetKmsKey(v EncryptionConfigKmsKey) {
	o.KmsKey.Set(&v)
}
// SetKmsKeyNil sets the value for KmsKey to be an explicit nil
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) SetKmsKeyNil() {
	o.KmsKey.Set(nil)
}

// UnsetKmsKey ensures that no value is present for KmsKey, not even an explicit nil
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) UnsetKmsKey() {
	o.KmsKey.Unset()
}

// GetShouldEncrypt returns the ShouldEncrypt field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) GetShouldEncrypt() bool {
	if o == nil || o.ShouldEncrypt.Get() == nil {
		var ret bool
		return ret
	}

	return *o.ShouldEncrypt.Get()
}

// GetShouldEncryptOk returns a tuple with the ShouldEncrypt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) GetShouldEncryptOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShouldEncrypt.Get(), o.ShouldEncrypt.IsSet()
}

// SetShouldEncrypt sets field value
func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) SetShouldEncrypt(v bool) {
	o.ShouldEncrypt.Set(&v)
}

func (o RecoverAwsVmNewSourceConfigEncryptionConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverAwsVmNewSourceConfigEncryptionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomKmsKeyArn.IsSet() {
		toSerialize["customKmsKeyArn"] = o.CustomKmsKeyArn.Get()
	}
	if o.KmsKey.IsSet() {
		toSerialize["kmsKey"] = o.KmsKey.Get()
	}
	toSerialize["shouldEncrypt"] = o.ShouldEncrypt.Get()
	return toSerialize, nil
}

func (o *RecoverAwsVmNewSourceConfigEncryptionConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"shouldEncrypt",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverAwsVmNewSourceConfigEncryptionConfig := _RecoverAwsVmNewSourceConfigEncryptionConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverAwsVmNewSourceConfigEncryptionConfig)

	if err != nil {
		return err
	}

	*o = RecoverAwsVmNewSourceConfigEncryptionConfig(varRecoverAwsVmNewSourceConfigEncryptionConfig)

	return err
}

type NullableRecoverAwsVmNewSourceConfigEncryptionConfig struct {
	value *RecoverAwsVmNewSourceConfigEncryptionConfig
	isSet bool
}

func (v NullableRecoverAwsVmNewSourceConfigEncryptionConfig) Get() *RecoverAwsVmNewSourceConfigEncryptionConfig {
	return v.value
}

func (v *NullableRecoverAwsVmNewSourceConfigEncryptionConfig) Set(val *RecoverAwsVmNewSourceConfigEncryptionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAwsVmNewSourceConfigEncryptionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAwsVmNewSourceConfigEncryptionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAwsVmNewSourceConfigEncryptionConfig(val *RecoverAwsVmNewSourceConfigEncryptionConfig) *NullableRecoverAwsVmNewSourceConfigEncryptionConfig {
	return &NullableRecoverAwsVmNewSourceConfigEncryptionConfig{value: val, isSet: true}
}

func (v NullableRecoverAwsVmNewSourceConfigEncryptionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAwsVmNewSourceConfigEncryptionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


