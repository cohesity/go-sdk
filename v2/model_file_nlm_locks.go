/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FileNlmLocks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileNlmLocks{}

// FileNlmLocks Specifies NLM locks per file.
type FileNlmLocks struct {
	FileId NullableFileNlmLocksFileId `json:"fileId,omitempty"`
	// Specifies the list of NLM locks.
	NlmLocks []NlmLock `json:"nlmLocks,omitempty"`
}

// NewFileNlmLocks instantiates a new FileNlmLocks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileNlmLocks() *FileNlmLocks {
	this := FileNlmLocks{}
	return &this
}

// NewFileNlmLocksWithDefaults instantiates a new FileNlmLocks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileNlmLocksWithDefaults() *FileNlmLocks {
	this := FileNlmLocks{}
	return &this
}

// GetFileId returns the FileId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileNlmLocks) GetFileId() FileNlmLocksFileId {
	if o == nil || IsNil(o.FileId.Get()) {
		var ret FileNlmLocksFileId
		return ret
	}
	return *o.FileId.Get()
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileNlmLocks) GetFileIdOk() (*FileNlmLocksFileId, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileId.Get(), o.FileId.IsSet()
}

// HasFileId returns a boolean if a field has been set.
func (o *FileNlmLocks) HasFileId() bool {
	if o != nil && o.FileId.IsSet() {
		return true
	}

	return false
}

// SetFileId gets a reference to the given NullableFileNlmLocksFileId and assigns it to the FileId field.
func (o *FileNlmLocks) SetFileId(v FileNlmLocksFileId) {
	o.FileId.Set(&v)
}
// SetFileIdNil sets the value for FileId to be an explicit nil
func (o *FileNlmLocks) SetFileIdNil() {
	o.FileId.Set(nil)
}

// UnsetFileId ensures that no value is present for FileId, not even an explicit nil
func (o *FileNlmLocks) UnsetFileId() {
	o.FileId.Unset()
}

// GetNlmLocks returns the NlmLocks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileNlmLocks) GetNlmLocks() []NlmLock {
	if o == nil {
		var ret []NlmLock
		return ret
	}
	return o.NlmLocks
}

// GetNlmLocksOk returns a tuple with the NlmLocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileNlmLocks) GetNlmLocksOk() ([]NlmLock, bool) {
	if o == nil || IsNil(o.NlmLocks) {
		return nil, false
	}
	return o.NlmLocks, true
}

// HasNlmLocks returns a boolean if a field has been set.
func (o *FileNlmLocks) HasNlmLocks() bool {
	if o != nil && !IsNil(o.NlmLocks) {
		return true
	}

	return false
}

// SetNlmLocks gets a reference to the given []NlmLock and assigns it to the NlmLocks field.
func (o *FileNlmLocks) SetNlmLocks(v []NlmLock) {
	o.NlmLocks = v
}

func (o FileNlmLocks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileNlmLocks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FileId.IsSet() {
		toSerialize["fileId"] = o.FileId.Get()
	}
	if o.NlmLocks != nil {
		toSerialize["nlmLocks"] = o.NlmLocks
	}
	return toSerialize, nil
}

type NullableFileNlmLocks struct {
	value *FileNlmLocks
	isSet bool
}

func (v NullableFileNlmLocks) Get() *FileNlmLocks {
	return v.value
}

func (v *NullableFileNlmLocks) Set(val *FileNlmLocks) {
	v.value = val
	v.isSet = true
}

func (v NullableFileNlmLocks) IsSet() bool {
	return v.isSet
}

func (v *NullableFileNlmLocks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileNlmLocks(val *FileNlmLocks) *NullableFileNlmLocks {
	return &NullableFileNlmLocks{value: val, isSet: true}
}

func (v NullableFileNlmLocks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileNlmLocks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


