/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GetFailoverOpsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetFailoverOpsResponse{}

// GetFailoverOpsResponse Specifies the response upon requesting a allowed failover operations for a view id
type GetFailoverOpsResponse struct {
	// Failover operations that can be performed corresponding to the view id.
	AllowedFailoverOperations []AllowedFailoverOperation `json:"allowedFailoverOperations,omitempty"`
}

// NewGetFailoverOpsResponse instantiates a new GetFailoverOpsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetFailoverOpsResponse() *GetFailoverOpsResponse {
	this := GetFailoverOpsResponse{}
	return &this
}

// NewGetFailoverOpsResponseWithDefaults instantiates a new GetFailoverOpsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetFailoverOpsResponseWithDefaults() *GetFailoverOpsResponse {
	this := GetFailoverOpsResponse{}
	return &this
}

// GetAllowedFailoverOperations returns the AllowedFailoverOperations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetFailoverOpsResponse) GetAllowedFailoverOperations() []AllowedFailoverOperation {
	if o == nil {
		var ret []AllowedFailoverOperation
		return ret
	}
	return o.AllowedFailoverOperations
}

// GetAllowedFailoverOperationsOk returns a tuple with the AllowedFailoverOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetFailoverOpsResponse) GetAllowedFailoverOperationsOk() ([]AllowedFailoverOperation, bool) {
	if o == nil || IsNil(o.AllowedFailoverOperations) {
		return nil, false
	}
	return o.AllowedFailoverOperations, true
}

// HasAllowedFailoverOperations returns a boolean if a field has been set.
func (o *GetFailoverOpsResponse) HasAllowedFailoverOperations() bool {
	if o != nil && !IsNil(o.AllowedFailoverOperations) {
		return true
	}

	return false
}

// SetAllowedFailoverOperations gets a reference to the given []AllowedFailoverOperation and assigns it to the AllowedFailoverOperations field.
func (o *GetFailoverOpsResponse) SetAllowedFailoverOperations(v []AllowedFailoverOperation) {
	o.AllowedFailoverOperations = v
}

func (o GetFailoverOpsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetFailoverOpsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedFailoverOperations != nil {
		toSerialize["allowedFailoverOperations"] = o.AllowedFailoverOperations
	}
	return toSerialize, nil
}

type NullableGetFailoverOpsResponse struct {
	value *GetFailoverOpsResponse
	isSet bool
}

func (v NullableGetFailoverOpsResponse) Get() *GetFailoverOpsResponse {
	return v.value
}

func (v *NullableGetFailoverOpsResponse) Set(val *GetFailoverOpsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetFailoverOpsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetFailoverOpsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetFailoverOpsResponse(val *GetFailoverOpsResponse) *NullableGetFailoverOpsResponse {
	return &NullableGetFailoverOpsResponse{value: val, isSet: true}
}

func (v NullableGetFailoverOpsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetFailoverOpsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


