/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FlashbladeObjectProtectionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlashbladeObjectProtectionParams{}

// FlashbladeObjectProtectionParams Specifies the parameters which are specific to Flashblade object protection.
type FlashbladeObjectProtectionParams struct {
	// Specifies the protocol of the NAS device being backed up.
	Protocol NullableString `json:"protocol,omitempty"`
}

// NewFlashbladeObjectProtectionParams instantiates a new FlashbladeObjectProtectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlashbladeObjectProtectionParams() *FlashbladeObjectProtectionParams {
	this := FlashbladeObjectProtectionParams{}
	return &this
}

// NewFlashbladeObjectProtectionParamsWithDefaults instantiates a new FlashbladeObjectProtectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlashbladeObjectProtectionParamsWithDefaults() *FlashbladeObjectProtectionParams {
	this := FlashbladeObjectProtectionParams{}
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashbladeObjectProtectionParams) GetProtocol() string {
	if o == nil || IsNil(o.Protocol.Get()) {
		var ret string
		return ret
	}
	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashbladeObjectProtectionParams) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// HasProtocol returns a boolean if a field has been set.
func (o *FlashbladeObjectProtectionParams) HasProtocol() bool {
	if o != nil && o.Protocol.IsSet() {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given NullableString and assigns it to the Protocol field.
func (o *FlashbladeObjectProtectionParams) SetProtocol(v string) {
	o.Protocol.Set(&v)
}
// SetProtocolNil sets the value for Protocol to be an explicit nil
func (o *FlashbladeObjectProtectionParams) SetProtocolNil() {
	o.Protocol.Set(nil)
}

// UnsetProtocol ensures that no value is present for Protocol, not even an explicit nil
func (o *FlashbladeObjectProtectionParams) UnsetProtocol() {
	o.Protocol.Unset()
}

func (o FlashbladeObjectProtectionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlashbladeObjectProtectionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Protocol.IsSet() {
		toSerialize["protocol"] = o.Protocol.Get()
	}
	return toSerialize, nil
}

type NullableFlashbladeObjectProtectionParams struct {
	value *FlashbladeObjectProtectionParams
	isSet bool
}

func (v NullableFlashbladeObjectProtectionParams) Get() *FlashbladeObjectProtectionParams {
	return v.value
}

func (v *NullableFlashbladeObjectProtectionParams) Set(val *FlashbladeObjectProtectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFlashbladeObjectProtectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFlashbladeObjectProtectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlashbladeObjectProtectionParams(val *FlashbladeObjectProtectionParams) *NullableFlashbladeObjectProtectionParams {
	return &NullableFlashbladeObjectProtectionParams{value: val, isSet: true}
}

func (v NullableFlashbladeObjectProtectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlashbladeObjectProtectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


