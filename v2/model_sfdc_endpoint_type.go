/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SFDCEndpointType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SFDCEndpointType{}

// SFDCEndpointType Enumeration of all the SFDC Endpoint types.
type SFDCEndpointType struct {
	// Enumeration of all the SFDC Endpoint types.
	SFDCEndpointType *string `json:"SFDCEndpointType,omitempty"`
}

// NewSFDCEndpointType instantiates a new SFDCEndpointType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSFDCEndpointType() *SFDCEndpointType {
	this := SFDCEndpointType{}
	return &this
}

// NewSFDCEndpointTypeWithDefaults instantiates a new SFDCEndpointType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSFDCEndpointTypeWithDefaults() *SFDCEndpointType {
	this := SFDCEndpointType{}
	return &this
}

// GetSFDCEndpointType returns the SFDCEndpointType field value if set, zero value otherwise.
func (o *SFDCEndpointType) GetSFDCEndpointType() string {
	if o == nil || IsNil(o.SFDCEndpointType) {
		var ret string
		return ret
	}
	return *o.SFDCEndpointType
}

// GetSFDCEndpointTypeOk returns a tuple with the SFDCEndpointType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SFDCEndpointType) GetSFDCEndpointTypeOk() (*string, bool) {
	if o == nil || IsNil(o.SFDCEndpointType) {
		return nil, false
	}
	return o.SFDCEndpointType, true
}

// HasSFDCEndpointType returns a boolean if a field has been set.
func (o *SFDCEndpointType) HasSFDCEndpointType() bool {
	if o != nil && !IsNil(o.SFDCEndpointType) {
		return true
	}

	return false
}

// SetSFDCEndpointType gets a reference to the given string and assigns it to the SFDCEndpointType field.
func (o *SFDCEndpointType) SetSFDCEndpointType(v string) {
	o.SFDCEndpointType = &v
}

func (o SFDCEndpointType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SFDCEndpointType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SFDCEndpointType) {
		toSerialize["SFDCEndpointType"] = o.SFDCEndpointType
	}
	return toSerialize, nil
}

type NullableSFDCEndpointType struct {
	value *SFDCEndpointType
	isSet bool
}

func (v NullableSFDCEndpointType) Get() *SFDCEndpointType {
	return v.value
}

func (v *NullableSFDCEndpointType) Set(val *SFDCEndpointType) {
	v.value = val
	v.isSet = true
}

func (v NullableSFDCEndpointType) IsSet() bool {
	return v.isSet
}

func (v *NullableSFDCEndpointType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSFDCEndpointType(val *SFDCEndpointType) *NullableSFDCEndpointType {
	return &NullableSFDCEndpointType{value: val, isSet: true}
}

func (v NullableSFDCEndpointType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSFDCEndpointType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


