/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Vault type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vault{}

// Vault Specifies the fields of vault.
type Vault struct {
	// Specifies Global vault id.
	GlobalVaultId NullableString `json:"globalVaultId,omitempty"`
	// Specifies id of region where vault resides.
	RegionId NullableString `json:"regionId,omitempty"`
	// Specifies name of region where vault resides.
	RegionName NullableString `json:"regionName,omitempty"`
	// Specifies name of vault.
	VaultName NullableString `json:"vaultName,omitempty"`
}

// NewVault instantiates a new Vault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVault() *Vault {
	this := Vault{}
	return &this
}

// NewVaultWithDefaults instantiates a new Vault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultWithDefaults() *Vault {
	this := Vault{}
	return &this
}

// GetGlobalVaultId returns the GlobalVaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetGlobalVaultId() string {
	if o == nil || IsNil(o.GlobalVaultId.Get()) {
		var ret string
		return ret
	}
	return *o.GlobalVaultId.Get()
}

// GetGlobalVaultIdOk returns a tuple with the GlobalVaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetGlobalVaultIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GlobalVaultId.Get(), o.GlobalVaultId.IsSet()
}

// HasGlobalVaultId returns a boolean if a field has been set.
func (o *Vault) HasGlobalVaultId() bool {
	if o != nil && o.GlobalVaultId.IsSet() {
		return true
	}

	return false
}

// SetGlobalVaultId gets a reference to the given NullableString and assigns it to the GlobalVaultId field.
func (o *Vault) SetGlobalVaultId(v string) {
	o.GlobalVaultId.Set(&v)
}
// SetGlobalVaultIdNil sets the value for GlobalVaultId to be an explicit nil
func (o *Vault) SetGlobalVaultIdNil() {
	o.GlobalVaultId.Set(nil)
}

// UnsetGlobalVaultId ensures that no value is present for GlobalVaultId, not even an explicit nil
func (o *Vault) UnsetGlobalVaultId() {
	o.GlobalVaultId.Unset()
}

// GetRegionId returns the RegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetRegionId() string {
	if o == nil || IsNil(o.RegionId.Get()) {
		var ret string
		return ret
	}
	return *o.RegionId.Get()
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegionId.Get(), o.RegionId.IsSet()
}

// HasRegionId returns a boolean if a field has been set.
func (o *Vault) HasRegionId() bool {
	if o != nil && o.RegionId.IsSet() {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given NullableString and assigns it to the RegionId field.
func (o *Vault) SetRegionId(v string) {
	o.RegionId.Set(&v)
}
// SetRegionIdNil sets the value for RegionId to be an explicit nil
func (o *Vault) SetRegionIdNil() {
	o.RegionId.Set(nil)
}

// UnsetRegionId ensures that no value is present for RegionId, not even an explicit nil
func (o *Vault) UnsetRegionId() {
	o.RegionId.Unset()
}

// GetRegionName returns the RegionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetRegionName() string {
	if o == nil || IsNil(o.RegionName.Get()) {
		var ret string
		return ret
	}
	return *o.RegionName.Get()
}

// GetRegionNameOk returns a tuple with the RegionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetRegionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegionName.Get(), o.RegionName.IsSet()
}

// HasRegionName returns a boolean if a field has been set.
func (o *Vault) HasRegionName() bool {
	if o != nil && o.RegionName.IsSet() {
		return true
	}

	return false
}

// SetRegionName gets a reference to the given NullableString and assigns it to the RegionName field.
func (o *Vault) SetRegionName(v string) {
	o.RegionName.Set(&v)
}
// SetRegionNameNil sets the value for RegionName to be an explicit nil
func (o *Vault) SetRegionNameNil() {
	o.RegionName.Set(nil)
}

// UnsetRegionName ensures that no value is present for RegionName, not even an explicit nil
func (o *Vault) UnsetRegionName() {
	o.RegionName.Unset()
}

// GetVaultName returns the VaultName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetVaultName() string {
	if o == nil || IsNil(o.VaultName.Get()) {
		var ret string
		return ret
	}
	return *o.VaultName.Get()
}

// GetVaultNameOk returns a tuple with the VaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetVaultNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VaultName.Get(), o.VaultName.IsSet()
}

// HasVaultName returns a boolean if a field has been set.
func (o *Vault) HasVaultName() bool {
	if o != nil && o.VaultName.IsSet() {
		return true
	}

	return false
}

// SetVaultName gets a reference to the given NullableString and assigns it to the VaultName field.
func (o *Vault) SetVaultName(v string) {
	o.VaultName.Set(&v)
}
// SetVaultNameNil sets the value for VaultName to be an explicit nil
func (o *Vault) SetVaultNameNil() {
	o.VaultName.Set(nil)
}

// UnsetVaultName ensures that no value is present for VaultName, not even an explicit nil
func (o *Vault) UnsetVaultName() {
	o.VaultName.Unset()
}

func (o Vault) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vault) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.GlobalVaultId.IsSet() {
		toSerialize["globalVaultId"] = o.GlobalVaultId.Get()
	}
	if o.RegionId.IsSet() {
		toSerialize["regionId"] = o.RegionId.Get()
	}
	if o.RegionName.IsSet() {
		toSerialize["regionName"] = o.RegionName.Get()
	}
	if o.VaultName.IsSet() {
		toSerialize["vaultName"] = o.VaultName.Get()
	}
	return toSerialize, nil
}

type NullableVault struct {
	value *Vault
	isSet bool
}

func (v NullableVault) Get() *Vault {
	return v.value
}

func (v *NullableVault) Set(val *Vault) {
	v.value = val
	v.isSet = true
}

func (v NullableVault) IsSet() bool {
	return v.isSet
}

func (v *NullableVault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVault(val *Vault) *NullableVault {
	return &NullableVault{value: val, isSet: true}
}

func (v NullableVault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


