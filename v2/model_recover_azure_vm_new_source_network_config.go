/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverAzureVmNewSourceNetworkConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverAzureVmNewSourceNetworkConfig{}

// RecoverAzureVmNewSourceNetworkConfig Specifies the network config parameters to be applied for Azure VMs if recovering to new Source.
type RecoverAzureVmNewSourceNetworkConfig struct {
	NetworkResourceGroup NullableRecoverAzureVmNewSourceNetworkConfigNetworkResourceGroup `json:"networkResourceGroup,omitempty"`
	Subnet NullableRecoverAzureVmNewSourceNetworkConfigSubnet `json:"subnet"`
	VirtualNetwork NullableRecoverAzureVmNewSourceNetworkConfigVirtualNetwork `json:"virtualNetwork"`
}

type _RecoverAzureVmNewSourceNetworkConfig RecoverAzureVmNewSourceNetworkConfig

// NewRecoverAzureVmNewSourceNetworkConfig instantiates a new RecoverAzureVmNewSourceNetworkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAzureVmNewSourceNetworkConfig(subnet NullableRecoverAzureVmNewSourceNetworkConfigSubnet, virtualNetwork NullableRecoverAzureVmNewSourceNetworkConfigVirtualNetwork) *RecoverAzureVmNewSourceNetworkConfig {
	this := RecoverAzureVmNewSourceNetworkConfig{}
	this.Subnet = subnet
	this.VirtualNetwork = virtualNetwork
	return &this
}

// NewRecoverAzureVmNewSourceNetworkConfigWithDefaults instantiates a new RecoverAzureVmNewSourceNetworkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAzureVmNewSourceNetworkConfigWithDefaults() *RecoverAzureVmNewSourceNetworkConfig {
	this := RecoverAzureVmNewSourceNetworkConfig{}
	return &this
}

// GetNetworkResourceGroup returns the NetworkResourceGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAzureVmNewSourceNetworkConfig) GetNetworkResourceGroup() RecoverAzureVmNewSourceNetworkConfigNetworkResourceGroup {
	if o == nil || IsNil(o.NetworkResourceGroup.Get()) {
		var ret RecoverAzureVmNewSourceNetworkConfigNetworkResourceGroup
		return ret
	}
	return *o.NetworkResourceGroup.Get()
}

// GetNetworkResourceGroupOk returns a tuple with the NetworkResourceGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureVmNewSourceNetworkConfig) GetNetworkResourceGroupOk() (*RecoverAzureVmNewSourceNetworkConfigNetworkResourceGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkResourceGroup.Get(), o.NetworkResourceGroup.IsSet()
}

// HasNetworkResourceGroup returns a boolean if a field has been set.
func (o *RecoverAzureVmNewSourceNetworkConfig) HasNetworkResourceGroup() bool {
	if o != nil && o.NetworkResourceGroup.IsSet() {
		return true
	}

	return false
}

// SetNetworkResourceGroup gets a reference to the given NullableRecoverAzureVmNewSourceNetworkConfigNetworkResourceGroup and assigns it to the NetworkResourceGroup field.
func (o *RecoverAzureVmNewSourceNetworkConfig) SetNetworkResourceGroup(v RecoverAzureVmNewSourceNetworkConfigNetworkResourceGroup) {
	o.NetworkResourceGroup.Set(&v)
}
// SetNetworkResourceGroupNil sets the value for NetworkResourceGroup to be an explicit nil
func (o *RecoverAzureVmNewSourceNetworkConfig) SetNetworkResourceGroupNil() {
	o.NetworkResourceGroup.Set(nil)
}

// UnsetNetworkResourceGroup ensures that no value is present for NetworkResourceGroup, not even an explicit nil
func (o *RecoverAzureVmNewSourceNetworkConfig) UnsetNetworkResourceGroup() {
	o.NetworkResourceGroup.Unset()
}

// GetSubnet returns the Subnet field value
// If the value is explicit nil, the zero value for RecoverAzureVmNewSourceNetworkConfigSubnet will be returned
func (o *RecoverAzureVmNewSourceNetworkConfig) GetSubnet() RecoverAzureVmNewSourceNetworkConfigSubnet {
	if o == nil || o.Subnet.Get() == nil {
		var ret RecoverAzureVmNewSourceNetworkConfigSubnet
		return ret
	}

	return *o.Subnet.Get()
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureVmNewSourceNetworkConfig) GetSubnetOk() (*RecoverAzureVmNewSourceNetworkConfigSubnet, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subnet.Get(), o.Subnet.IsSet()
}

// SetSubnet sets field value
func (o *RecoverAzureVmNewSourceNetworkConfig) SetSubnet(v RecoverAzureVmNewSourceNetworkConfigSubnet) {
	o.Subnet.Set(&v)
}

// GetVirtualNetwork returns the VirtualNetwork field value
// If the value is explicit nil, the zero value for RecoverAzureVmNewSourceNetworkConfigVirtualNetwork will be returned
func (o *RecoverAzureVmNewSourceNetworkConfig) GetVirtualNetwork() RecoverAzureVmNewSourceNetworkConfigVirtualNetwork {
	if o == nil || o.VirtualNetwork.Get() == nil {
		var ret RecoverAzureVmNewSourceNetworkConfigVirtualNetwork
		return ret
	}

	return *o.VirtualNetwork.Get()
}

// GetVirtualNetworkOk returns a tuple with the VirtualNetwork field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureVmNewSourceNetworkConfig) GetVirtualNetworkOk() (*RecoverAzureVmNewSourceNetworkConfigVirtualNetwork, bool) {
	if o == nil {
		return nil, false
	}
	return o.VirtualNetwork.Get(), o.VirtualNetwork.IsSet()
}

// SetVirtualNetwork sets field value
func (o *RecoverAzureVmNewSourceNetworkConfig) SetVirtualNetwork(v RecoverAzureVmNewSourceNetworkConfigVirtualNetwork) {
	o.VirtualNetwork.Set(&v)
}

func (o RecoverAzureVmNewSourceNetworkConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverAzureVmNewSourceNetworkConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkResourceGroup.IsSet() {
		toSerialize["networkResourceGroup"] = o.NetworkResourceGroup.Get()
	}
	toSerialize["subnet"] = o.Subnet.Get()
	toSerialize["virtualNetwork"] = o.VirtualNetwork.Get()
	return toSerialize, nil
}

func (o *RecoverAzureVmNewSourceNetworkConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subnet",
		"virtualNetwork",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverAzureVmNewSourceNetworkConfig := _RecoverAzureVmNewSourceNetworkConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverAzureVmNewSourceNetworkConfig)

	if err != nil {
		return err
	}

	*o = RecoverAzureVmNewSourceNetworkConfig(varRecoverAzureVmNewSourceNetworkConfig)

	return err
}

type NullableRecoverAzureVmNewSourceNetworkConfig struct {
	value *RecoverAzureVmNewSourceNetworkConfig
	isSet bool
}

func (v NullableRecoverAzureVmNewSourceNetworkConfig) Get() *RecoverAzureVmNewSourceNetworkConfig {
	return v.value
}

func (v *NullableRecoverAzureVmNewSourceNetworkConfig) Set(val *RecoverAzureVmNewSourceNetworkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAzureVmNewSourceNetworkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAzureVmNewSourceNetworkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAzureVmNewSourceNetworkConfig(val *RecoverAzureVmNewSourceNetworkConfig) *NullableRecoverAzureVmNewSourceNetworkConfig {
	return &NullableRecoverAzureVmNewSourceNetworkConfig{value: val, isSet: true}
}

func (v NullableRecoverAzureVmNewSourceNetworkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAzureVmNewSourceNetworkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


