/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MsTeamParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MsTeamParam{}

// MsTeamParam Specifies the parameters to recover a Microsoft 365 Team.
type MsTeamParam struct {
	// Specifies the list of Channels to recover. These are applicable iff recoverEntireMsTeam is false.
	ChannelParams []ChannelParam `json:"channelParams,omitempty"`
	// Specifies whether to recover the whole Microsoft 365 Team.
	RecoverEntireMsTeam NullableBool `json:"recoverEntireMsTeam"`
}

type _MsTeamParam MsTeamParam

// NewMsTeamParam instantiates a new MsTeamParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsTeamParam(recoverEntireMsTeam NullableBool) *MsTeamParam {
	this := MsTeamParam{}
	this.RecoverEntireMsTeam = recoverEntireMsTeam
	return &this
}

// NewMsTeamParamWithDefaults instantiates a new MsTeamParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMsTeamParamWithDefaults() *MsTeamParam {
	this := MsTeamParam{}
	return &this
}

// GetChannelParams returns the ChannelParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MsTeamParam) GetChannelParams() []ChannelParam {
	if o == nil {
		var ret []ChannelParam
		return ret
	}
	return o.ChannelParams
}

// GetChannelParamsOk returns a tuple with the ChannelParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MsTeamParam) GetChannelParamsOk() ([]ChannelParam, bool) {
	if o == nil || IsNil(o.ChannelParams) {
		return nil, false
	}
	return o.ChannelParams, true
}

// HasChannelParams returns a boolean if a field has been set.
func (o *MsTeamParam) HasChannelParams() bool {
	if o != nil && !IsNil(o.ChannelParams) {
		return true
	}

	return false
}

// SetChannelParams gets a reference to the given []ChannelParam and assigns it to the ChannelParams field.
func (o *MsTeamParam) SetChannelParams(v []ChannelParam) {
	o.ChannelParams = v
}

// GetRecoverEntireMsTeam returns the RecoverEntireMsTeam field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *MsTeamParam) GetRecoverEntireMsTeam() bool {
	if o == nil || o.RecoverEntireMsTeam.Get() == nil {
		var ret bool
		return ret
	}

	return *o.RecoverEntireMsTeam.Get()
}

// GetRecoverEntireMsTeamOk returns a tuple with the RecoverEntireMsTeam field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MsTeamParam) GetRecoverEntireMsTeamOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverEntireMsTeam.Get(), o.RecoverEntireMsTeam.IsSet()
}

// SetRecoverEntireMsTeam sets field value
func (o *MsTeamParam) SetRecoverEntireMsTeam(v bool) {
	o.RecoverEntireMsTeam.Set(&v)
}

func (o MsTeamParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MsTeamParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChannelParams != nil {
		toSerialize["channelParams"] = o.ChannelParams
	}
	toSerialize["recoverEntireMsTeam"] = o.RecoverEntireMsTeam.Get()
	return toSerialize, nil
}

func (o *MsTeamParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoverEntireMsTeam",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMsTeamParam := _MsTeamParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMsTeamParam)

	if err != nil {
		return err
	}

	*o = MsTeamParam(varMsTeamParam)

	return err
}

type NullableMsTeamParam struct {
	value *MsTeamParam
	isSet bool
}

func (v NullableMsTeamParam) Get() *MsTeamParam {
	return v.value
}

func (v *NullableMsTeamParam) Set(val *MsTeamParam) {
	v.value = val
	v.isSet = true
}

func (v NullableMsTeamParam) IsSet() bool {
	return v.isSet
}

func (v *NullableMsTeamParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsTeamParam(val *MsTeamParam) *NullableMsTeamParam {
	return &NullableMsTeamParam{value: val, isSet: true}
}

func (v NullableMsTeamParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsTeamParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


