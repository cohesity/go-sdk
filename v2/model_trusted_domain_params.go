/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TrustedDomainParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TrustedDomainParams{}

// TrustedDomainParams Specifies the params related to trusted domains.
type TrustedDomainParams struct {
	// Specifies a list of domains to add to blacklist. These domains will be blacklisted in trusted domain discovery.
	BlacklistedDomains []string `json:"blacklistedDomains,omitempty"`
	// Specifies the discovery status of trusted domains.
	DiscoveryStatus NullableString `json:"discoveryStatus,omitempty"`
	// Specifies if trusted domain discovery is enabled.
	Enabled NullableBool `json:"enabled"`
	// Specifies whether to use 'whitelistedDomains' only for authentication.
	OnlyUseWhitelistedDomains NullableBool `json:"onlyUseWhitelistedDomains,omitempty"`
	// Specifies the identifier for the task running discovery.
	TaskIdentifier NullableString `json:"taskIdentifier,omitempty"`
	// Specifies a list of trusted domains.
	TrustedDomains []TrustedDomain `json:"trustedDomains,omitempty"`
	// Specifies a list of domains to add to whitelist. Only these domains will be used for authentication if 'onlyUseWhitelistedDomains' is set.
	WhitelistedDomains []string `json:"whitelistedDomains,omitempty"`
}

type _TrustedDomainParams TrustedDomainParams

// NewTrustedDomainParams instantiates a new TrustedDomainParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrustedDomainParams(enabled NullableBool) *TrustedDomainParams {
	this := TrustedDomainParams{}
	this.Enabled = enabled
	return &this
}

// NewTrustedDomainParamsWithDefaults instantiates a new TrustedDomainParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrustedDomainParamsWithDefaults() *TrustedDomainParams {
	this := TrustedDomainParams{}
	return &this
}

// GetBlacklistedDomains returns the BlacklistedDomains field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedDomainParams) GetBlacklistedDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.BlacklistedDomains
}

// GetBlacklistedDomainsOk returns a tuple with the BlacklistedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedDomainParams) GetBlacklistedDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.BlacklistedDomains) {
		return nil, false
	}
	return o.BlacklistedDomains, true
}

// HasBlacklistedDomains returns a boolean if a field has been set.
func (o *TrustedDomainParams) HasBlacklistedDomains() bool {
	if o != nil && !IsNil(o.BlacklistedDomains) {
		return true
	}

	return false
}

// SetBlacklistedDomains gets a reference to the given []string and assigns it to the BlacklistedDomains field.
func (o *TrustedDomainParams) SetBlacklistedDomains(v []string) {
	o.BlacklistedDomains = v
}

// GetDiscoveryStatus returns the DiscoveryStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedDomainParams) GetDiscoveryStatus() string {
	if o == nil || IsNil(o.DiscoveryStatus.Get()) {
		var ret string
		return ret
	}
	return *o.DiscoveryStatus.Get()
}

// GetDiscoveryStatusOk returns a tuple with the DiscoveryStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedDomainParams) GetDiscoveryStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiscoveryStatus.Get(), o.DiscoveryStatus.IsSet()
}

// HasDiscoveryStatus returns a boolean if a field has been set.
func (o *TrustedDomainParams) HasDiscoveryStatus() bool {
	if o != nil && o.DiscoveryStatus.IsSet() {
		return true
	}

	return false
}

// SetDiscoveryStatus gets a reference to the given NullableString and assigns it to the DiscoveryStatus field.
func (o *TrustedDomainParams) SetDiscoveryStatus(v string) {
	o.DiscoveryStatus.Set(&v)
}
// SetDiscoveryStatusNil sets the value for DiscoveryStatus to be an explicit nil
func (o *TrustedDomainParams) SetDiscoveryStatusNil() {
	o.DiscoveryStatus.Set(nil)
}

// UnsetDiscoveryStatus ensures that no value is present for DiscoveryStatus, not even an explicit nil
func (o *TrustedDomainParams) UnsetDiscoveryStatus() {
	o.DiscoveryStatus.Unset()
}

// GetEnabled returns the Enabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *TrustedDomainParams) GetEnabled() bool {
	if o == nil || o.Enabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedDomainParams) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// SetEnabled sets field value
func (o *TrustedDomainParams) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}

// GetOnlyUseWhitelistedDomains returns the OnlyUseWhitelistedDomains field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedDomainParams) GetOnlyUseWhitelistedDomains() bool {
	if o == nil || IsNil(o.OnlyUseWhitelistedDomains.Get()) {
		var ret bool
		return ret
	}
	return *o.OnlyUseWhitelistedDomains.Get()
}

// GetOnlyUseWhitelistedDomainsOk returns a tuple with the OnlyUseWhitelistedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedDomainParams) GetOnlyUseWhitelistedDomainsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnlyUseWhitelistedDomains.Get(), o.OnlyUseWhitelistedDomains.IsSet()
}

// HasOnlyUseWhitelistedDomains returns a boolean if a field has been set.
func (o *TrustedDomainParams) HasOnlyUseWhitelistedDomains() bool {
	if o != nil && o.OnlyUseWhitelistedDomains.IsSet() {
		return true
	}

	return false
}

// SetOnlyUseWhitelistedDomains gets a reference to the given NullableBool and assigns it to the OnlyUseWhitelistedDomains field.
func (o *TrustedDomainParams) SetOnlyUseWhitelistedDomains(v bool) {
	o.OnlyUseWhitelistedDomains.Set(&v)
}
// SetOnlyUseWhitelistedDomainsNil sets the value for OnlyUseWhitelistedDomains to be an explicit nil
func (o *TrustedDomainParams) SetOnlyUseWhitelistedDomainsNil() {
	o.OnlyUseWhitelistedDomains.Set(nil)
}

// UnsetOnlyUseWhitelistedDomains ensures that no value is present for OnlyUseWhitelistedDomains, not even an explicit nil
func (o *TrustedDomainParams) UnsetOnlyUseWhitelistedDomains() {
	o.OnlyUseWhitelistedDomains.Unset()
}

// GetTaskIdentifier returns the TaskIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedDomainParams) GetTaskIdentifier() string {
	if o == nil || IsNil(o.TaskIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.TaskIdentifier.Get()
}

// GetTaskIdentifierOk returns a tuple with the TaskIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedDomainParams) GetTaskIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskIdentifier.Get(), o.TaskIdentifier.IsSet()
}

// HasTaskIdentifier returns a boolean if a field has been set.
func (o *TrustedDomainParams) HasTaskIdentifier() bool {
	if o != nil && o.TaskIdentifier.IsSet() {
		return true
	}

	return false
}

// SetTaskIdentifier gets a reference to the given NullableString and assigns it to the TaskIdentifier field.
func (o *TrustedDomainParams) SetTaskIdentifier(v string) {
	o.TaskIdentifier.Set(&v)
}
// SetTaskIdentifierNil sets the value for TaskIdentifier to be an explicit nil
func (o *TrustedDomainParams) SetTaskIdentifierNil() {
	o.TaskIdentifier.Set(nil)
}

// UnsetTaskIdentifier ensures that no value is present for TaskIdentifier, not even an explicit nil
func (o *TrustedDomainParams) UnsetTaskIdentifier() {
	o.TaskIdentifier.Unset()
}

// GetTrustedDomains returns the TrustedDomains field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedDomainParams) GetTrustedDomains() []TrustedDomain {
	if o == nil {
		var ret []TrustedDomain
		return ret
	}
	return o.TrustedDomains
}

// GetTrustedDomainsOk returns a tuple with the TrustedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedDomainParams) GetTrustedDomainsOk() ([]TrustedDomain, bool) {
	if o == nil || IsNil(o.TrustedDomains) {
		return nil, false
	}
	return o.TrustedDomains, true
}

// HasTrustedDomains returns a boolean if a field has been set.
func (o *TrustedDomainParams) HasTrustedDomains() bool {
	if o != nil && !IsNil(o.TrustedDomains) {
		return true
	}

	return false
}

// SetTrustedDomains gets a reference to the given []TrustedDomain and assigns it to the TrustedDomains field.
func (o *TrustedDomainParams) SetTrustedDomains(v []TrustedDomain) {
	o.TrustedDomains = v
}

// GetWhitelistedDomains returns the WhitelistedDomains field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrustedDomainParams) GetWhitelistedDomains() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.WhitelistedDomains
}

// GetWhitelistedDomainsOk returns a tuple with the WhitelistedDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrustedDomainParams) GetWhitelistedDomainsOk() ([]string, bool) {
	if o == nil || IsNil(o.WhitelistedDomains) {
		return nil, false
	}
	return o.WhitelistedDomains, true
}

// HasWhitelistedDomains returns a boolean if a field has been set.
func (o *TrustedDomainParams) HasWhitelistedDomains() bool {
	if o != nil && !IsNil(o.WhitelistedDomains) {
		return true
	}

	return false
}

// SetWhitelistedDomains gets a reference to the given []string and assigns it to the WhitelistedDomains field.
func (o *TrustedDomainParams) SetWhitelistedDomains(v []string) {
	o.WhitelistedDomains = v
}

func (o TrustedDomainParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TrustedDomainParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BlacklistedDomains != nil {
		toSerialize["blacklistedDomains"] = o.BlacklistedDomains
	}
	if o.DiscoveryStatus.IsSet() {
		toSerialize["discoveryStatus"] = o.DiscoveryStatus.Get()
	}
	toSerialize["enabled"] = o.Enabled.Get()
	if o.OnlyUseWhitelistedDomains.IsSet() {
		toSerialize["onlyUseWhitelistedDomains"] = o.OnlyUseWhitelistedDomains.Get()
	}
	if o.TaskIdentifier.IsSet() {
		toSerialize["taskIdentifier"] = o.TaskIdentifier.Get()
	}
	if o.TrustedDomains != nil {
		toSerialize["trustedDomains"] = o.TrustedDomains
	}
	if o.WhitelistedDomains != nil {
		toSerialize["whitelistedDomains"] = o.WhitelistedDomains
	}
	return toSerialize, nil
}

func (o *TrustedDomainParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTrustedDomainParams := _TrustedDomainParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTrustedDomainParams)

	if err != nil {
		return err
	}

	*o = TrustedDomainParams(varTrustedDomainParams)

	return err
}

type NullableTrustedDomainParams struct {
	value *TrustedDomainParams
	isSet bool
}

func (v NullableTrustedDomainParams) Get() *TrustedDomainParams {
	return v.value
}

func (v *NullableTrustedDomainParams) Set(val *TrustedDomainParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTrustedDomainParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTrustedDomainParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrustedDomainParams(val *TrustedDomainParams) *NullableTrustedDomainParams {
	return &NullableTrustedDomainParams{value: val, isSet: true}
}

func (v NullableTrustedDomainParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrustedDomainParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


