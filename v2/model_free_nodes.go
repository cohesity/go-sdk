/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FreeNodes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FreeNodes{}

// FreeNodes Specifies the free nodes information.
type FreeNodes struct {
	// Specifies the list of free nodes.
	Nodes []FreeNodeInformation `json:"nodes,omitempty"`
}

// NewFreeNodes instantiates a new FreeNodes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFreeNodes() *FreeNodes {
	this := FreeNodes{}
	return &this
}

// NewFreeNodesWithDefaults instantiates a new FreeNodes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFreeNodesWithDefaults() *FreeNodes {
	this := FreeNodes{}
	return &this
}

// GetNodes returns the Nodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodes) GetNodes() []FreeNodeInformation {
	if o == nil {
		var ret []FreeNodeInformation
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodes) GetNodesOk() ([]FreeNodeInformation, bool) {
	if o == nil || IsNil(o.Nodes) {
		return nil, false
	}
	return o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *FreeNodes) HasNodes() bool {
	if o != nil && !IsNil(o.Nodes) {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []FreeNodeInformation and assigns it to the Nodes field.
func (o *FreeNodes) SetNodes(v []FreeNodeInformation) {
	o.Nodes = v
}

func (o FreeNodes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FreeNodes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	return toSerialize, nil
}

type NullableFreeNodes struct {
	value *FreeNodes
	isSet bool
}

func (v NullableFreeNodes) Get() *FreeNodes {
	return v.value
}

func (v *NullableFreeNodes) Set(val *FreeNodes) {
	v.value = val
	v.isSet = true
}

func (v NullableFreeNodes) IsSet() bool {
	return v.isSet
}

func (v *NullableFreeNodes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFreeNodes(val *FreeNodes) *NullableFreeNodes {
	return &NullableFreeNodes{value: val, isSet: true}
}

func (v NullableFreeNodes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFreeNodes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


