/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the StandbyObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandbyObject{}

// StandbyObject Specifies the standby related information for a given VM object. This field will only be populated when standby is configured on the protection group.
type StandbyObject struct {
	// Specifies the entity id of the corresponding backup object for which this standby is configured.
	EntityId NullableInt64 `json:"entityId,omitempty"`
	// Specifies the protection group id to which this standby object belongs.
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
}

// NewStandbyObject instantiates a new StandbyObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandbyObject() *StandbyObject {
	this := StandbyObject{}
	return &this
}

// NewStandbyObjectWithDefaults instantiates a new StandbyObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandbyObjectWithDefaults() *StandbyObject {
	this := StandbyObject{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandbyObject) GetEntityId() int64 {
	if o == nil || IsNil(o.EntityId.Get()) {
		var ret int64
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandbyObject) GetEntityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *StandbyObject) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableInt64 and assigns it to the EntityId field.
func (o *StandbyObject) SetEntityId(v int64) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *StandbyObject) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *StandbyObject) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StandbyObject) GetProtectionGroupId() string {
	if o == nil || IsNil(o.ProtectionGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandbyObject) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *StandbyObject) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *StandbyObject) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *StandbyObject) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *StandbyObject) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

func (o StandbyObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandbyObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	return toSerialize, nil
}

type NullableStandbyObject struct {
	value *StandbyObject
	isSet bool
}

func (v NullableStandbyObject) Get() *StandbyObject {
	return v.value
}

func (v *NullableStandbyObject) Set(val *StandbyObject) {
	v.value = val
	v.isSet = true
}

func (v NullableStandbyObject) IsSet() bool {
	return v.isSet
}

func (v *NullableStandbyObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandbyObject(val *StandbyObject) *NullableStandbyObject {
	return &NullableStandbyObject{value: val, isSet: true}
}

func (v NullableStandbyObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandbyObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


