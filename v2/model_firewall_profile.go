/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FirewallProfile type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallProfile{}

// FirewallProfile Specifies the firewall profile & their attachments.
type FirewallProfile struct {
	// Specifies the packet direction settings.
	Directions []string `json:"directions,omitempty"`
	// Specifies the name of the profile.
	Name NullableString `json:"name"`
	// Specifies the port along with the protocol settings. For example 22/tcp, 68/udp.
	Ports []string `json:"ports,omitempty"`
}

type _FirewallProfile FirewallProfile

// NewFirewallProfile instantiates a new FirewallProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallProfile(name NullableString) *FirewallProfile {
	this := FirewallProfile{}
	this.Name = name
	return &this
}

// NewFirewallProfileWithDefaults instantiates a new FirewallProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallProfileWithDefaults() *FirewallProfile {
	this := FirewallProfile{}
	return &this
}

// GetDirections returns the Directions field value if set, zero value otherwise.
func (o *FirewallProfile) GetDirections() []string {
	if o == nil || IsNil(o.Directions) {
		var ret []string
		return ret
	}
	return o.Directions
}

// GetDirectionsOk returns a tuple with the Directions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallProfile) GetDirectionsOk() ([]string, bool) {
	if o == nil || IsNil(o.Directions) {
		return nil, false
	}
	return o.Directions, true
}

// HasDirections returns a boolean if a field has been set.
func (o *FirewallProfile) HasDirections() bool {
	if o != nil && !IsNil(o.Directions) {
		return true
	}

	return false
}

// SetDirections gets a reference to the given []string and assigns it to the Directions field.
func (o *FirewallProfile) SetDirections(v []string) {
	o.Directions = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FirewallProfile) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FirewallProfile) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *FirewallProfile) SetName(v string) {
	o.Name.Set(&v)
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *FirewallProfile) GetPorts() []string {
	if o == nil || IsNil(o.Ports) {
		var ret []string
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallProfile) GetPortsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ports) {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *FirewallProfile) HasPorts() bool {
	if o != nil && !IsNil(o.Ports) {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []string and assigns it to the Ports field.
func (o *FirewallProfile) SetPorts(v []string) {
	o.Ports = v
}

func (o FirewallProfile) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallProfile) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Directions) {
		toSerialize["directions"] = o.Directions
	}
	toSerialize["name"] = o.Name.Get()
	if !IsNil(o.Ports) {
		toSerialize["ports"] = o.Ports
	}
	return toSerialize, nil
}

func (o *FirewallProfile) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFirewallProfile := _FirewallProfile{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFirewallProfile)

	if err != nil {
		return err
	}

	*o = FirewallProfile(varFirewallProfile)

	return err
}

type NullableFirewallProfile struct {
	value *FirewallProfile
	isSet bool
}

func (v NullableFirewallProfile) Get() *FirewallProfile {
	return v.value
}

func (v *NullableFirewallProfile) Set(val *FirewallProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallProfile(val *FirewallProfile) *NullableFirewallProfile {
	return &NullableFirewallProfile{value: val, isSet: true}
}

func (v NullableFirewallProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


