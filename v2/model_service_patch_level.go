/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ServicePatchLevel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServicePatchLevel{}

// ServicePatchLevel Patch level of a service. It is the number of patches applied for the service on the cluster. If a service is never patched the patch level is 0. If two patches were applied, patch level is 2.
type ServicePatchLevel struct {
	// Specifies patch level of the service after the patch operation.
	PatchLevel NullableInt64 `json:"patchLevel,omitempty"`
	// Specifies the version of the service patch after the patch operation.
	PatchVersion NullableString `json:"patchVersion,omitempty"`
	// Specifies the name of the service.
	Service NullableString `json:"service,omitempty"`
	// Specifies patch level of the service before the patch operation.
	StartLevel NullableInt64 `json:"startLevel,omitempty"`
	// Specifies the version of the service running on the cluster before the patch operation.
	StartVersion NullableString `json:"startVersion,omitempty"`
}

// NewServicePatchLevel instantiates a new ServicePatchLevel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServicePatchLevel() *ServicePatchLevel {
	this := ServicePatchLevel{}
	return &this
}

// NewServicePatchLevelWithDefaults instantiates a new ServicePatchLevel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServicePatchLevelWithDefaults() *ServicePatchLevel {
	this := ServicePatchLevel{}
	return &this
}

// GetPatchLevel returns the PatchLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePatchLevel) GetPatchLevel() int64 {
	if o == nil || IsNil(o.PatchLevel.Get()) {
		var ret int64
		return ret
	}
	return *o.PatchLevel.Get()
}

// GetPatchLevelOk returns a tuple with the PatchLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePatchLevel) GetPatchLevelOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PatchLevel.Get(), o.PatchLevel.IsSet()
}

// HasPatchLevel returns a boolean if a field has been set.
func (o *ServicePatchLevel) HasPatchLevel() bool {
	if o != nil && o.PatchLevel.IsSet() {
		return true
	}

	return false
}

// SetPatchLevel gets a reference to the given NullableInt64 and assigns it to the PatchLevel field.
func (o *ServicePatchLevel) SetPatchLevel(v int64) {
	o.PatchLevel.Set(&v)
}
// SetPatchLevelNil sets the value for PatchLevel to be an explicit nil
func (o *ServicePatchLevel) SetPatchLevelNil() {
	o.PatchLevel.Set(nil)
}

// UnsetPatchLevel ensures that no value is present for PatchLevel, not even an explicit nil
func (o *ServicePatchLevel) UnsetPatchLevel() {
	o.PatchLevel.Unset()
}

// GetPatchVersion returns the PatchVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePatchLevel) GetPatchVersion() string {
	if o == nil || IsNil(o.PatchVersion.Get()) {
		var ret string
		return ret
	}
	return *o.PatchVersion.Get()
}

// GetPatchVersionOk returns a tuple with the PatchVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePatchLevel) GetPatchVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PatchVersion.Get(), o.PatchVersion.IsSet()
}

// HasPatchVersion returns a boolean if a field has been set.
func (o *ServicePatchLevel) HasPatchVersion() bool {
	if o != nil && o.PatchVersion.IsSet() {
		return true
	}

	return false
}

// SetPatchVersion gets a reference to the given NullableString and assigns it to the PatchVersion field.
func (o *ServicePatchLevel) SetPatchVersion(v string) {
	o.PatchVersion.Set(&v)
}
// SetPatchVersionNil sets the value for PatchVersion to be an explicit nil
func (o *ServicePatchLevel) SetPatchVersionNil() {
	o.PatchVersion.Set(nil)
}

// UnsetPatchVersion ensures that no value is present for PatchVersion, not even an explicit nil
func (o *ServicePatchLevel) UnsetPatchVersion() {
	o.PatchVersion.Unset()
}

// GetService returns the Service field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePatchLevel) GetService() string {
	if o == nil || IsNil(o.Service.Get()) {
		var ret string
		return ret
	}
	return *o.Service.Get()
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePatchLevel) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Service.Get(), o.Service.IsSet()
}

// HasService returns a boolean if a field has been set.
func (o *ServicePatchLevel) HasService() bool {
	if o != nil && o.Service.IsSet() {
		return true
	}

	return false
}

// SetService gets a reference to the given NullableString and assigns it to the Service field.
func (o *ServicePatchLevel) SetService(v string) {
	o.Service.Set(&v)
}
// SetServiceNil sets the value for Service to be an explicit nil
func (o *ServicePatchLevel) SetServiceNil() {
	o.Service.Set(nil)
}

// UnsetService ensures that no value is present for Service, not even an explicit nil
func (o *ServicePatchLevel) UnsetService() {
	o.Service.Unset()
}

// GetStartLevel returns the StartLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePatchLevel) GetStartLevel() int64 {
	if o == nil || IsNil(o.StartLevel.Get()) {
		var ret int64
		return ret
	}
	return *o.StartLevel.Get()
}

// GetStartLevelOk returns a tuple with the StartLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePatchLevel) GetStartLevelOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartLevel.Get(), o.StartLevel.IsSet()
}

// HasStartLevel returns a boolean if a field has been set.
func (o *ServicePatchLevel) HasStartLevel() bool {
	if o != nil && o.StartLevel.IsSet() {
		return true
	}

	return false
}

// SetStartLevel gets a reference to the given NullableInt64 and assigns it to the StartLevel field.
func (o *ServicePatchLevel) SetStartLevel(v int64) {
	o.StartLevel.Set(&v)
}
// SetStartLevelNil sets the value for StartLevel to be an explicit nil
func (o *ServicePatchLevel) SetStartLevelNil() {
	o.StartLevel.Set(nil)
}

// UnsetStartLevel ensures that no value is present for StartLevel, not even an explicit nil
func (o *ServicePatchLevel) UnsetStartLevel() {
	o.StartLevel.Unset()
}

// GetStartVersion returns the StartVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServicePatchLevel) GetStartVersion() string {
	if o == nil || IsNil(o.StartVersion.Get()) {
		var ret string
		return ret
	}
	return *o.StartVersion.Get()
}

// GetStartVersionOk returns a tuple with the StartVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServicePatchLevel) GetStartVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartVersion.Get(), o.StartVersion.IsSet()
}

// HasStartVersion returns a boolean if a field has been set.
func (o *ServicePatchLevel) HasStartVersion() bool {
	if o != nil && o.StartVersion.IsSet() {
		return true
	}

	return false
}

// SetStartVersion gets a reference to the given NullableString and assigns it to the StartVersion field.
func (o *ServicePatchLevel) SetStartVersion(v string) {
	o.StartVersion.Set(&v)
}
// SetStartVersionNil sets the value for StartVersion to be an explicit nil
func (o *ServicePatchLevel) SetStartVersionNil() {
	o.StartVersion.Set(nil)
}

// UnsetStartVersion ensures that no value is present for StartVersion, not even an explicit nil
func (o *ServicePatchLevel) UnsetStartVersion() {
	o.StartVersion.Unset()
}

func (o ServicePatchLevel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServicePatchLevel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PatchLevel.IsSet() {
		toSerialize["patchLevel"] = o.PatchLevel.Get()
	}
	if o.PatchVersion.IsSet() {
		toSerialize["patchVersion"] = o.PatchVersion.Get()
	}
	if o.Service.IsSet() {
		toSerialize["service"] = o.Service.Get()
	}
	if o.StartLevel.IsSet() {
		toSerialize["startLevel"] = o.StartLevel.Get()
	}
	if o.StartVersion.IsSet() {
		toSerialize["startVersion"] = o.StartVersion.Get()
	}
	return toSerialize, nil
}

type NullableServicePatchLevel struct {
	value *ServicePatchLevel
	isSet bool
}

func (v NullableServicePatchLevel) Get() *ServicePatchLevel {
	return v.value
}

func (v *NullableServicePatchLevel) Set(val *ServicePatchLevel) {
	v.value = val
	v.isSet = true
}

func (v NullableServicePatchLevel) IsSet() bool {
	return v.isSet
}

func (v *NullableServicePatchLevel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServicePatchLevel(val *ServicePatchLevel) *NullableServicePatchLevel {
	return &NullableServicePatchLevel{value: val, isSet: true}
}

func (v NullableServicePatchLevel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServicePatchLevel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


