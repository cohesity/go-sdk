/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IdMappingParamsUserIdMappingParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdMappingParamsUserIdMappingParams{}

// IdMappingParamsUserIdMappingParams Specifies the information about how the Unix and Windows users are mapped for this domain.
type IdMappingParamsUserIdMappingParams struct {
	CentrifyTypeParams NullableUserIdMappingParamsCentrifyTypeParams `json:"centrifyTypeParams,omitempty"`
	CustomAttributesTypeParams NullableUserIdMappingParamsCustomAttributesTypeParams `json:"customAttributesTypeParams,omitempty"`
	FixedTypeParams NullableUserIdMappingParamsFixedTypeParams `json:"fixedTypeParams,omitempty"`
	LdapProviderTypeParams NullableUserIdMappingParamsLdapProviderTypeParams `json:"ldapProviderTypeParams,omitempty"`
	NisProviderTypeParams NullableUserIdMappingParamsNisProviderTypeParams `json:"nisProviderTypeParams,omitempty"`
	Rfc2307TypeParams NullableUserIdMappingParamsRfc2307TypeParams `json:"rfc2307TypeParams,omitempty"`
	Sfu30TypeParams NullableUserIdMappingParamsSfu30TypeParams `json:"sfu30TypeParams,omitempty"`
	// Specifies the type of the mapping.
	Type string `json:"type"`
}

type _IdMappingParamsUserIdMappingParams IdMappingParamsUserIdMappingParams

// NewIdMappingParamsUserIdMappingParams instantiates a new IdMappingParamsUserIdMappingParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdMappingParamsUserIdMappingParams(type_ string) *IdMappingParamsUserIdMappingParams {
	this := IdMappingParamsUserIdMappingParams{}
	this.Type = type_
	return &this
}

// NewIdMappingParamsUserIdMappingParamsWithDefaults instantiates a new IdMappingParamsUserIdMappingParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdMappingParamsUserIdMappingParamsWithDefaults() *IdMappingParamsUserIdMappingParams {
	this := IdMappingParamsUserIdMappingParams{}
	return &this
}

// GetCentrifyTypeParams returns the CentrifyTypeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdMappingParamsUserIdMappingParams) GetCentrifyTypeParams() UserIdMappingParamsCentrifyTypeParams {
	if o == nil || IsNil(o.CentrifyTypeParams.Get()) {
		var ret UserIdMappingParamsCentrifyTypeParams
		return ret
	}
	return *o.CentrifyTypeParams.Get()
}

// GetCentrifyTypeParamsOk returns a tuple with the CentrifyTypeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParamsUserIdMappingParams) GetCentrifyTypeParamsOk() (*UserIdMappingParamsCentrifyTypeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.CentrifyTypeParams.Get(), o.CentrifyTypeParams.IsSet()
}

// HasCentrifyTypeParams returns a boolean if a field has been set.
func (o *IdMappingParamsUserIdMappingParams) HasCentrifyTypeParams() bool {
	if o != nil && o.CentrifyTypeParams.IsSet() {
		return true
	}

	return false
}

// SetCentrifyTypeParams gets a reference to the given NullableUserIdMappingParamsCentrifyTypeParams and assigns it to the CentrifyTypeParams field.
func (o *IdMappingParamsUserIdMappingParams) SetCentrifyTypeParams(v UserIdMappingParamsCentrifyTypeParams) {
	o.CentrifyTypeParams.Set(&v)
}
// SetCentrifyTypeParamsNil sets the value for CentrifyTypeParams to be an explicit nil
func (o *IdMappingParamsUserIdMappingParams) SetCentrifyTypeParamsNil() {
	o.CentrifyTypeParams.Set(nil)
}

// UnsetCentrifyTypeParams ensures that no value is present for CentrifyTypeParams, not even an explicit nil
func (o *IdMappingParamsUserIdMappingParams) UnsetCentrifyTypeParams() {
	o.CentrifyTypeParams.Unset()
}

// GetCustomAttributesTypeParams returns the CustomAttributesTypeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdMappingParamsUserIdMappingParams) GetCustomAttributesTypeParams() UserIdMappingParamsCustomAttributesTypeParams {
	if o == nil || IsNil(o.CustomAttributesTypeParams.Get()) {
		var ret UserIdMappingParamsCustomAttributesTypeParams
		return ret
	}
	return *o.CustomAttributesTypeParams.Get()
}

// GetCustomAttributesTypeParamsOk returns a tuple with the CustomAttributesTypeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParamsUserIdMappingParams) GetCustomAttributesTypeParamsOk() (*UserIdMappingParamsCustomAttributesTypeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomAttributesTypeParams.Get(), o.CustomAttributesTypeParams.IsSet()
}

// HasCustomAttributesTypeParams returns a boolean if a field has been set.
func (o *IdMappingParamsUserIdMappingParams) HasCustomAttributesTypeParams() bool {
	if o != nil && o.CustomAttributesTypeParams.IsSet() {
		return true
	}

	return false
}

// SetCustomAttributesTypeParams gets a reference to the given NullableUserIdMappingParamsCustomAttributesTypeParams and assigns it to the CustomAttributesTypeParams field.
func (o *IdMappingParamsUserIdMappingParams) SetCustomAttributesTypeParams(v UserIdMappingParamsCustomAttributesTypeParams) {
	o.CustomAttributesTypeParams.Set(&v)
}
// SetCustomAttributesTypeParamsNil sets the value for CustomAttributesTypeParams to be an explicit nil
func (o *IdMappingParamsUserIdMappingParams) SetCustomAttributesTypeParamsNil() {
	o.CustomAttributesTypeParams.Set(nil)
}

// UnsetCustomAttributesTypeParams ensures that no value is present for CustomAttributesTypeParams, not even an explicit nil
func (o *IdMappingParamsUserIdMappingParams) UnsetCustomAttributesTypeParams() {
	o.CustomAttributesTypeParams.Unset()
}

// GetFixedTypeParams returns the FixedTypeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdMappingParamsUserIdMappingParams) GetFixedTypeParams() UserIdMappingParamsFixedTypeParams {
	if o == nil || IsNil(o.FixedTypeParams.Get()) {
		var ret UserIdMappingParamsFixedTypeParams
		return ret
	}
	return *o.FixedTypeParams.Get()
}

// GetFixedTypeParamsOk returns a tuple with the FixedTypeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParamsUserIdMappingParams) GetFixedTypeParamsOk() (*UserIdMappingParamsFixedTypeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.FixedTypeParams.Get(), o.FixedTypeParams.IsSet()
}

// HasFixedTypeParams returns a boolean if a field has been set.
func (o *IdMappingParamsUserIdMappingParams) HasFixedTypeParams() bool {
	if o != nil && o.FixedTypeParams.IsSet() {
		return true
	}

	return false
}

// SetFixedTypeParams gets a reference to the given NullableUserIdMappingParamsFixedTypeParams and assigns it to the FixedTypeParams field.
func (o *IdMappingParamsUserIdMappingParams) SetFixedTypeParams(v UserIdMappingParamsFixedTypeParams) {
	o.FixedTypeParams.Set(&v)
}
// SetFixedTypeParamsNil sets the value for FixedTypeParams to be an explicit nil
func (o *IdMappingParamsUserIdMappingParams) SetFixedTypeParamsNil() {
	o.FixedTypeParams.Set(nil)
}

// UnsetFixedTypeParams ensures that no value is present for FixedTypeParams, not even an explicit nil
func (o *IdMappingParamsUserIdMappingParams) UnsetFixedTypeParams() {
	o.FixedTypeParams.Unset()
}

// GetLdapProviderTypeParams returns the LdapProviderTypeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdMappingParamsUserIdMappingParams) GetLdapProviderTypeParams() UserIdMappingParamsLdapProviderTypeParams {
	if o == nil || IsNil(o.LdapProviderTypeParams.Get()) {
		var ret UserIdMappingParamsLdapProviderTypeParams
		return ret
	}
	return *o.LdapProviderTypeParams.Get()
}

// GetLdapProviderTypeParamsOk returns a tuple with the LdapProviderTypeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParamsUserIdMappingParams) GetLdapProviderTypeParamsOk() (*UserIdMappingParamsLdapProviderTypeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.LdapProviderTypeParams.Get(), o.LdapProviderTypeParams.IsSet()
}

// HasLdapProviderTypeParams returns a boolean if a field has been set.
func (o *IdMappingParamsUserIdMappingParams) HasLdapProviderTypeParams() bool {
	if o != nil && o.LdapProviderTypeParams.IsSet() {
		return true
	}

	return false
}

// SetLdapProviderTypeParams gets a reference to the given NullableUserIdMappingParamsLdapProviderTypeParams and assigns it to the LdapProviderTypeParams field.
func (o *IdMappingParamsUserIdMappingParams) SetLdapProviderTypeParams(v UserIdMappingParamsLdapProviderTypeParams) {
	o.LdapProviderTypeParams.Set(&v)
}
// SetLdapProviderTypeParamsNil sets the value for LdapProviderTypeParams to be an explicit nil
func (o *IdMappingParamsUserIdMappingParams) SetLdapProviderTypeParamsNil() {
	o.LdapProviderTypeParams.Set(nil)
}

// UnsetLdapProviderTypeParams ensures that no value is present for LdapProviderTypeParams, not even an explicit nil
func (o *IdMappingParamsUserIdMappingParams) UnsetLdapProviderTypeParams() {
	o.LdapProviderTypeParams.Unset()
}

// GetNisProviderTypeParams returns the NisProviderTypeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdMappingParamsUserIdMappingParams) GetNisProviderTypeParams() UserIdMappingParamsNisProviderTypeParams {
	if o == nil || IsNil(o.NisProviderTypeParams.Get()) {
		var ret UserIdMappingParamsNisProviderTypeParams
		return ret
	}
	return *o.NisProviderTypeParams.Get()
}

// GetNisProviderTypeParamsOk returns a tuple with the NisProviderTypeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParamsUserIdMappingParams) GetNisProviderTypeParamsOk() (*UserIdMappingParamsNisProviderTypeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.NisProviderTypeParams.Get(), o.NisProviderTypeParams.IsSet()
}

// HasNisProviderTypeParams returns a boolean if a field has been set.
func (o *IdMappingParamsUserIdMappingParams) HasNisProviderTypeParams() bool {
	if o != nil && o.NisProviderTypeParams.IsSet() {
		return true
	}

	return false
}

// SetNisProviderTypeParams gets a reference to the given NullableUserIdMappingParamsNisProviderTypeParams and assigns it to the NisProviderTypeParams field.
func (o *IdMappingParamsUserIdMappingParams) SetNisProviderTypeParams(v UserIdMappingParamsNisProviderTypeParams) {
	o.NisProviderTypeParams.Set(&v)
}
// SetNisProviderTypeParamsNil sets the value for NisProviderTypeParams to be an explicit nil
func (o *IdMappingParamsUserIdMappingParams) SetNisProviderTypeParamsNil() {
	o.NisProviderTypeParams.Set(nil)
}

// UnsetNisProviderTypeParams ensures that no value is present for NisProviderTypeParams, not even an explicit nil
func (o *IdMappingParamsUserIdMappingParams) UnsetNisProviderTypeParams() {
	o.NisProviderTypeParams.Unset()
}

// GetRfc2307TypeParams returns the Rfc2307TypeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdMappingParamsUserIdMappingParams) GetRfc2307TypeParams() UserIdMappingParamsRfc2307TypeParams {
	if o == nil || IsNil(o.Rfc2307TypeParams.Get()) {
		var ret UserIdMappingParamsRfc2307TypeParams
		return ret
	}
	return *o.Rfc2307TypeParams.Get()
}

// GetRfc2307TypeParamsOk returns a tuple with the Rfc2307TypeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParamsUserIdMappingParams) GetRfc2307TypeParamsOk() (*UserIdMappingParamsRfc2307TypeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Rfc2307TypeParams.Get(), o.Rfc2307TypeParams.IsSet()
}

// HasRfc2307TypeParams returns a boolean if a field has been set.
func (o *IdMappingParamsUserIdMappingParams) HasRfc2307TypeParams() bool {
	if o != nil && o.Rfc2307TypeParams.IsSet() {
		return true
	}

	return false
}

// SetRfc2307TypeParams gets a reference to the given NullableUserIdMappingParamsRfc2307TypeParams and assigns it to the Rfc2307TypeParams field.
func (o *IdMappingParamsUserIdMappingParams) SetRfc2307TypeParams(v UserIdMappingParamsRfc2307TypeParams) {
	o.Rfc2307TypeParams.Set(&v)
}
// SetRfc2307TypeParamsNil sets the value for Rfc2307TypeParams to be an explicit nil
func (o *IdMappingParamsUserIdMappingParams) SetRfc2307TypeParamsNil() {
	o.Rfc2307TypeParams.Set(nil)
}

// UnsetRfc2307TypeParams ensures that no value is present for Rfc2307TypeParams, not even an explicit nil
func (o *IdMappingParamsUserIdMappingParams) UnsetRfc2307TypeParams() {
	o.Rfc2307TypeParams.Unset()
}

// GetSfu30TypeParams returns the Sfu30TypeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdMappingParamsUserIdMappingParams) GetSfu30TypeParams() UserIdMappingParamsSfu30TypeParams {
	if o == nil || IsNil(o.Sfu30TypeParams.Get()) {
		var ret UserIdMappingParamsSfu30TypeParams
		return ret
	}
	return *o.Sfu30TypeParams.Get()
}

// GetSfu30TypeParamsOk returns a tuple with the Sfu30TypeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParamsUserIdMappingParams) GetSfu30TypeParamsOk() (*UserIdMappingParamsSfu30TypeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sfu30TypeParams.Get(), o.Sfu30TypeParams.IsSet()
}

// HasSfu30TypeParams returns a boolean if a field has been set.
func (o *IdMappingParamsUserIdMappingParams) HasSfu30TypeParams() bool {
	if o != nil && o.Sfu30TypeParams.IsSet() {
		return true
	}

	return false
}

// SetSfu30TypeParams gets a reference to the given NullableUserIdMappingParamsSfu30TypeParams and assigns it to the Sfu30TypeParams field.
func (o *IdMappingParamsUserIdMappingParams) SetSfu30TypeParams(v UserIdMappingParamsSfu30TypeParams) {
	o.Sfu30TypeParams.Set(&v)
}
// SetSfu30TypeParamsNil sets the value for Sfu30TypeParams to be an explicit nil
func (o *IdMappingParamsUserIdMappingParams) SetSfu30TypeParamsNil() {
	o.Sfu30TypeParams.Set(nil)
}

// UnsetSfu30TypeParams ensures that no value is present for Sfu30TypeParams, not even an explicit nil
func (o *IdMappingParamsUserIdMappingParams) UnsetSfu30TypeParams() {
	o.Sfu30TypeParams.Unset()
}

// GetType returns the Type field value
func (o *IdMappingParamsUserIdMappingParams) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *IdMappingParamsUserIdMappingParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *IdMappingParamsUserIdMappingParams) SetType(v string) {
	o.Type = v
}

func (o IdMappingParamsUserIdMappingParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdMappingParamsUserIdMappingParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CentrifyTypeParams.IsSet() {
		toSerialize["centrifyTypeParams"] = o.CentrifyTypeParams.Get()
	}
	if o.CustomAttributesTypeParams.IsSet() {
		toSerialize["customAttributesTypeParams"] = o.CustomAttributesTypeParams.Get()
	}
	if o.FixedTypeParams.IsSet() {
		toSerialize["fixedTypeParams"] = o.FixedTypeParams.Get()
	}
	if o.LdapProviderTypeParams.IsSet() {
		toSerialize["ldapProviderTypeParams"] = o.LdapProviderTypeParams.Get()
	}
	if o.NisProviderTypeParams.IsSet() {
		toSerialize["nisProviderTypeParams"] = o.NisProviderTypeParams.Get()
	}
	if o.Rfc2307TypeParams.IsSet() {
		toSerialize["rfc2307TypeParams"] = o.Rfc2307TypeParams.Get()
	}
	if o.Sfu30TypeParams.IsSet() {
		toSerialize["sfu30TypeParams"] = o.Sfu30TypeParams.Get()
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *IdMappingParamsUserIdMappingParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdMappingParamsUserIdMappingParams := _IdMappingParamsUserIdMappingParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdMappingParamsUserIdMappingParams)

	if err != nil {
		return err
	}

	*o = IdMappingParamsUserIdMappingParams(varIdMappingParamsUserIdMappingParams)

	return err
}

type NullableIdMappingParamsUserIdMappingParams struct {
	value *IdMappingParamsUserIdMappingParams
	isSet bool
}

func (v NullableIdMappingParamsUserIdMappingParams) Get() *IdMappingParamsUserIdMappingParams {
	return v.value
}

func (v *NullableIdMappingParamsUserIdMappingParams) Set(val *IdMappingParamsUserIdMappingParams) {
	v.value = val
	v.isSet = true
}

func (v NullableIdMappingParamsUserIdMappingParams) IsSet() bool {
	return v.isSet
}

func (v *NullableIdMappingParamsUserIdMappingParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdMappingParamsUserIdMappingParams(val *IdMappingParamsUserIdMappingParams) *NullableIdMappingParamsUserIdMappingParams {
	return &NullableIdMappingParamsUserIdMappingParams{value: val, isSet: true}
}

func (v NullableIdMappingParamsUserIdMappingParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdMappingParamsUserIdMappingParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


