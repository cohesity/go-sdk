/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterTrustedCas type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterTrustedCas{}

// RegisterTrustedCas Specifies the parameters to register a Certificate.
type RegisterTrustedCas struct {
	// Specifies the certificates to be imported.
	Certificates []TrustedCaRequest `json:"certificates"`
	// Specifies if the certificates are only to be validated.
	OnlyValidate NullableBool `json:"onlyValidate,omitempty"`
}

type _RegisterTrustedCas RegisterTrustedCas

// NewRegisterTrustedCas instantiates a new RegisterTrustedCas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterTrustedCas(certificates []TrustedCaRequest) *RegisterTrustedCas {
	this := RegisterTrustedCas{}
	this.Certificates = certificates
	return &this
}

// NewRegisterTrustedCasWithDefaults instantiates a new RegisterTrustedCas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterTrustedCasWithDefaults() *RegisterTrustedCas {
	this := RegisterTrustedCas{}
	return &this
}

// GetCertificates returns the Certificates field value
// If the value is explicit nil, the zero value for []TrustedCaRequest will be returned
func (o *RegisterTrustedCas) GetCertificates() []TrustedCaRequest {
	if o == nil {
		var ret []TrustedCaRequest
		return ret
	}

	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterTrustedCas) GetCertificatesOk() ([]TrustedCaRequest, bool) {
	if o == nil || IsNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// SetCertificates sets field value
func (o *RegisterTrustedCas) SetCertificates(v []TrustedCaRequest) {
	o.Certificates = v
}

// GetOnlyValidate returns the OnlyValidate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterTrustedCas) GetOnlyValidate() bool {
	if o == nil || IsNil(o.OnlyValidate.Get()) {
		var ret bool
		return ret
	}
	return *o.OnlyValidate.Get()
}

// GetOnlyValidateOk returns a tuple with the OnlyValidate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterTrustedCas) GetOnlyValidateOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnlyValidate.Get(), o.OnlyValidate.IsSet()
}

// HasOnlyValidate returns a boolean if a field has been set.
func (o *RegisterTrustedCas) HasOnlyValidate() bool {
	if o != nil && o.OnlyValidate.IsSet() {
		return true
	}

	return false
}

// SetOnlyValidate gets a reference to the given NullableBool and assigns it to the OnlyValidate field.
func (o *RegisterTrustedCas) SetOnlyValidate(v bool) {
	o.OnlyValidate.Set(&v)
}
// SetOnlyValidateNil sets the value for OnlyValidate to be an explicit nil
func (o *RegisterTrustedCas) SetOnlyValidateNil() {
	o.OnlyValidate.Set(nil)
}

// UnsetOnlyValidate ensures that no value is present for OnlyValidate, not even an explicit nil
func (o *RegisterTrustedCas) UnsetOnlyValidate() {
	o.OnlyValidate.Unset()
}

func (o RegisterTrustedCas) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterTrustedCas) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificates != nil {
		toSerialize["certificates"] = o.Certificates
	}
	if o.OnlyValidate.IsSet() {
		toSerialize["onlyValidate"] = o.OnlyValidate.Get()
	}
	return toSerialize, nil
}

func (o *RegisterTrustedCas) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificates",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterTrustedCas := _RegisterTrustedCas{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterTrustedCas)

	if err != nil {
		return err
	}

	*o = RegisterTrustedCas(varRegisterTrustedCas)

	return err
}

type NullableRegisterTrustedCas struct {
	value *RegisterTrustedCas
	isSet bool
}

func (v NullableRegisterTrustedCas) Get() *RegisterTrustedCas {
	return v.value
}

func (v *NullableRegisterTrustedCas) Set(val *RegisterTrustedCas) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterTrustedCas) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterTrustedCas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterTrustedCas(val *RegisterTrustedCas) *NullableRegisterTrustedCas {
	return &NullableRegisterTrustedCas{value: val, isSet: true}
}

func (v NullableRegisterTrustedCas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterTrustedCas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


