/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PhysicalFileProtectionGroupParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhysicalFileProtectionGroupParams{}

// PhysicalFileProtectionGroupParams Specifies the parameters which are specific to Physical related Protection Groups.
type PhysicalFileProtectionGroupParams struct {
	// Specifies whether or not this job can have parallel runs.
	AllowParallelRuns NullableBool `json:"allowParallelRuns,omitempty"`
	// Specifies whether to take CoBMR backup.
	CobmrBackup NullableBool `json:"cobmrBackup,omitempty"`
	// Specifies whether to continue backing up on quiesce failure.
	ContinueOnQuiesceFailure NullableBool `json:"continueOnQuiesceFailure,omitempty"`
	// Specifies ids of sources for which deduplication has to be disabled.
	DedupExclusionSourceIds []int64 `json:"dedupExclusionSourceIds,omitempty"`
	// Specifies writer names which should be excluded from physical file based backups.
	ExcludedVssWriters []string `json:"excludedVssWriters,omitempty"`
	// Specifies global exclude filesystems which are applied to all sources in a job.
	GlobalExcludeFS []string `json:"globalExcludeFS,omitempty"`
	// Specifies global exclude filters which are applied to all sources in a job.
	GlobalExcludePaths []string `json:"globalExcludePaths,omitempty"`
	// Specifies the Errors to be ignored in error db.
	IgnorableErrors []string `json:"ignorableErrors,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	// Specifies the list of objects protected by this Protection Group.
	Objects []PhysicalFileProtectionGroupObjectParams `json:"objects"`
	// Specifies whether or not to perform brick based deduplication on this Protection Group.
	PerformBrickBasedDeduplication NullableBool `json:"performBrickBasedDeduplication,omitempty"`
	// Specifies whether or not to perform source side deduplication on this Protection Group.
	PerformSourceSideDeduplication NullableBool `json:"performSourceSideDeduplication,omitempty"`
	PrePostScript *PrePostScriptParams `json:"prePostScript,omitempty"`
	// Specifies Whether to take app-consistent snapshots by quiescing apps and the filesystem before taking a backup.
	Quiesce NullableBool `json:"quiesce,omitempty"`
	// Specifies the timeouts for all the objects inside this Protection Group, for both full and incremental backups.
	TaskTimeouts []CancellationTimeoutParams `json:"taskTimeouts,omitempty"`
}

type _PhysicalFileProtectionGroupParams PhysicalFileProtectionGroupParams

// NewPhysicalFileProtectionGroupParams instantiates a new PhysicalFileProtectionGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalFileProtectionGroupParams(objects []PhysicalFileProtectionGroupObjectParams) *PhysicalFileProtectionGroupParams {
	this := PhysicalFileProtectionGroupParams{}
	this.Objects = objects
	return &this
}

// NewPhysicalFileProtectionGroupParamsWithDefaults instantiates a new PhysicalFileProtectionGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalFileProtectionGroupParamsWithDefaults() *PhysicalFileProtectionGroupParams {
	this := PhysicalFileProtectionGroupParams{}
	return &this
}

// GetAllowParallelRuns returns the AllowParallelRuns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetAllowParallelRuns() bool {
	if o == nil || IsNil(o.AllowParallelRuns.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowParallelRuns.Get()
}

// GetAllowParallelRunsOk returns a tuple with the AllowParallelRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetAllowParallelRunsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowParallelRuns.Get(), o.AllowParallelRuns.IsSet()
}

// HasAllowParallelRuns returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasAllowParallelRuns() bool {
	if o != nil && o.AllowParallelRuns.IsSet() {
		return true
	}

	return false
}

// SetAllowParallelRuns gets a reference to the given NullableBool and assigns it to the AllowParallelRuns field.
func (o *PhysicalFileProtectionGroupParams) SetAllowParallelRuns(v bool) {
	o.AllowParallelRuns.Set(&v)
}
// SetAllowParallelRunsNil sets the value for AllowParallelRuns to be an explicit nil
func (o *PhysicalFileProtectionGroupParams) SetAllowParallelRunsNil() {
	o.AllowParallelRuns.Set(nil)
}

// UnsetAllowParallelRuns ensures that no value is present for AllowParallelRuns, not even an explicit nil
func (o *PhysicalFileProtectionGroupParams) UnsetAllowParallelRuns() {
	o.AllowParallelRuns.Unset()
}

// GetCobmrBackup returns the CobmrBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetCobmrBackup() bool {
	if o == nil || IsNil(o.CobmrBackup.Get()) {
		var ret bool
		return ret
	}
	return *o.CobmrBackup.Get()
}

// GetCobmrBackupOk returns a tuple with the CobmrBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetCobmrBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CobmrBackup.Get(), o.CobmrBackup.IsSet()
}

// HasCobmrBackup returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasCobmrBackup() bool {
	if o != nil && o.CobmrBackup.IsSet() {
		return true
	}

	return false
}

// SetCobmrBackup gets a reference to the given NullableBool and assigns it to the CobmrBackup field.
func (o *PhysicalFileProtectionGroupParams) SetCobmrBackup(v bool) {
	o.CobmrBackup.Set(&v)
}
// SetCobmrBackupNil sets the value for CobmrBackup to be an explicit nil
func (o *PhysicalFileProtectionGroupParams) SetCobmrBackupNil() {
	o.CobmrBackup.Set(nil)
}

// UnsetCobmrBackup ensures that no value is present for CobmrBackup, not even an explicit nil
func (o *PhysicalFileProtectionGroupParams) UnsetCobmrBackup() {
	o.CobmrBackup.Unset()
}

// GetContinueOnQuiesceFailure returns the ContinueOnQuiesceFailure field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetContinueOnQuiesceFailure() bool {
	if o == nil || IsNil(o.ContinueOnQuiesceFailure.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnQuiesceFailure.Get()
}

// GetContinueOnQuiesceFailureOk returns a tuple with the ContinueOnQuiesceFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetContinueOnQuiesceFailureOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnQuiesceFailure.Get(), o.ContinueOnQuiesceFailure.IsSet()
}

// HasContinueOnQuiesceFailure returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasContinueOnQuiesceFailure() bool {
	if o != nil && o.ContinueOnQuiesceFailure.IsSet() {
		return true
	}

	return false
}

// SetContinueOnQuiesceFailure gets a reference to the given NullableBool and assigns it to the ContinueOnQuiesceFailure field.
func (o *PhysicalFileProtectionGroupParams) SetContinueOnQuiesceFailure(v bool) {
	o.ContinueOnQuiesceFailure.Set(&v)
}
// SetContinueOnQuiesceFailureNil sets the value for ContinueOnQuiesceFailure to be an explicit nil
func (o *PhysicalFileProtectionGroupParams) SetContinueOnQuiesceFailureNil() {
	o.ContinueOnQuiesceFailure.Set(nil)
}

// UnsetContinueOnQuiesceFailure ensures that no value is present for ContinueOnQuiesceFailure, not even an explicit nil
func (o *PhysicalFileProtectionGroupParams) UnsetContinueOnQuiesceFailure() {
	o.ContinueOnQuiesceFailure.Unset()
}

// GetDedupExclusionSourceIds returns the DedupExclusionSourceIds field value if set, zero value otherwise.
func (o *PhysicalFileProtectionGroupParams) GetDedupExclusionSourceIds() []int64 {
	if o == nil || IsNil(o.DedupExclusionSourceIds) {
		var ret []int64
		return ret
	}
	return o.DedupExclusionSourceIds
}

// GetDedupExclusionSourceIdsOk returns a tuple with the DedupExclusionSourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetDedupExclusionSourceIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.DedupExclusionSourceIds) {
		return nil, false
	}
	return o.DedupExclusionSourceIds, true
}

// HasDedupExclusionSourceIds returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasDedupExclusionSourceIds() bool {
	if o != nil && !IsNil(o.DedupExclusionSourceIds) {
		return true
	}

	return false
}

// SetDedupExclusionSourceIds gets a reference to the given []int64 and assigns it to the DedupExclusionSourceIds field.
func (o *PhysicalFileProtectionGroupParams) SetDedupExclusionSourceIds(v []int64) {
	o.DedupExclusionSourceIds = v
}

// GetExcludedVssWriters returns the ExcludedVssWriters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetExcludedVssWriters() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludedVssWriters
}

// GetExcludedVssWritersOk returns a tuple with the ExcludedVssWriters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetExcludedVssWritersOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedVssWriters) {
		return nil, false
	}
	return o.ExcludedVssWriters, true
}

// HasExcludedVssWriters returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasExcludedVssWriters() bool {
	if o != nil && !IsNil(o.ExcludedVssWriters) {
		return true
	}

	return false
}

// SetExcludedVssWriters gets a reference to the given []string and assigns it to the ExcludedVssWriters field.
func (o *PhysicalFileProtectionGroupParams) SetExcludedVssWriters(v []string) {
	o.ExcludedVssWriters = v
}

// GetGlobalExcludeFS returns the GlobalExcludeFS field value if set, zero value otherwise.
func (o *PhysicalFileProtectionGroupParams) GetGlobalExcludeFS() []string {
	if o == nil || IsNil(o.GlobalExcludeFS) {
		var ret []string
		return ret
	}
	return o.GlobalExcludeFS
}

// GetGlobalExcludeFSOk returns a tuple with the GlobalExcludeFS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetGlobalExcludeFSOk() ([]string, bool) {
	if o == nil || IsNil(o.GlobalExcludeFS) {
		return nil, false
	}
	return o.GlobalExcludeFS, true
}

// HasGlobalExcludeFS returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasGlobalExcludeFS() bool {
	if o != nil && !IsNil(o.GlobalExcludeFS) {
		return true
	}

	return false
}

// SetGlobalExcludeFS gets a reference to the given []string and assigns it to the GlobalExcludeFS field.
func (o *PhysicalFileProtectionGroupParams) SetGlobalExcludeFS(v []string) {
	o.GlobalExcludeFS = v
}

// GetGlobalExcludePaths returns the GlobalExcludePaths field value if set, zero value otherwise.
func (o *PhysicalFileProtectionGroupParams) GetGlobalExcludePaths() []string {
	if o == nil || IsNil(o.GlobalExcludePaths) {
		var ret []string
		return ret
	}
	return o.GlobalExcludePaths
}

// GetGlobalExcludePathsOk returns a tuple with the GlobalExcludePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetGlobalExcludePathsOk() ([]string, bool) {
	if o == nil || IsNil(o.GlobalExcludePaths) {
		return nil, false
	}
	return o.GlobalExcludePaths, true
}

// HasGlobalExcludePaths returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasGlobalExcludePaths() bool {
	if o != nil && !IsNil(o.GlobalExcludePaths) {
		return true
	}

	return false
}

// SetGlobalExcludePaths gets a reference to the given []string and assigns it to the GlobalExcludePaths field.
func (o *PhysicalFileProtectionGroupParams) SetGlobalExcludePaths(v []string) {
	o.GlobalExcludePaths = v
}

// GetIgnorableErrors returns the IgnorableErrors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetIgnorableErrors() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IgnorableErrors
}

// GetIgnorableErrorsOk returns a tuple with the IgnorableErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetIgnorableErrorsOk() ([]string, bool) {
	if o == nil || IsNil(o.IgnorableErrors) {
		return nil, false
	}
	return o.IgnorableErrors, true
}

// HasIgnorableErrors returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasIgnorableErrors() bool {
	if o != nil && !IsNil(o.IgnorableErrors) {
		return true
	}

	return false
}

// SetIgnorableErrors gets a reference to the given []string and assigns it to the IgnorableErrors field.
func (o *PhysicalFileProtectionGroupParams) SetIgnorableErrors(v []string) {
	o.IgnorableErrors = v
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *PhysicalFileProtectionGroupParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || IsNil(o.IndexingPolicy) {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || IsNil(o.IndexingPolicy) {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasIndexingPolicy() bool {
	if o != nil && !IsNil(o.IndexingPolicy) {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *PhysicalFileProtectionGroupParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetObjects returns the Objects field value
func (o *PhysicalFileProtectionGroupParams) GetObjects() []PhysicalFileProtectionGroupObjectParams {
	if o == nil {
		var ret []PhysicalFileProtectionGroupObjectParams
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetObjectsOk() ([]PhysicalFileProtectionGroupObjectParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Objects, true
}

// SetObjects sets field value
func (o *PhysicalFileProtectionGroupParams) SetObjects(v []PhysicalFileProtectionGroupObjectParams) {
	o.Objects = v
}

// GetPerformBrickBasedDeduplication returns the PerformBrickBasedDeduplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetPerformBrickBasedDeduplication() bool {
	if o == nil || IsNil(o.PerformBrickBasedDeduplication.Get()) {
		var ret bool
		return ret
	}
	return *o.PerformBrickBasedDeduplication.Get()
}

// GetPerformBrickBasedDeduplicationOk returns a tuple with the PerformBrickBasedDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetPerformBrickBasedDeduplicationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PerformBrickBasedDeduplication.Get(), o.PerformBrickBasedDeduplication.IsSet()
}

// HasPerformBrickBasedDeduplication returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasPerformBrickBasedDeduplication() bool {
	if o != nil && o.PerformBrickBasedDeduplication.IsSet() {
		return true
	}

	return false
}

// SetPerformBrickBasedDeduplication gets a reference to the given NullableBool and assigns it to the PerformBrickBasedDeduplication field.
func (o *PhysicalFileProtectionGroupParams) SetPerformBrickBasedDeduplication(v bool) {
	o.PerformBrickBasedDeduplication.Set(&v)
}
// SetPerformBrickBasedDeduplicationNil sets the value for PerformBrickBasedDeduplication to be an explicit nil
func (o *PhysicalFileProtectionGroupParams) SetPerformBrickBasedDeduplicationNil() {
	o.PerformBrickBasedDeduplication.Set(nil)
}

// UnsetPerformBrickBasedDeduplication ensures that no value is present for PerformBrickBasedDeduplication, not even an explicit nil
func (o *PhysicalFileProtectionGroupParams) UnsetPerformBrickBasedDeduplication() {
	o.PerformBrickBasedDeduplication.Unset()
}

// GetPerformSourceSideDeduplication returns the PerformSourceSideDeduplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetPerformSourceSideDeduplication() bool {
	if o == nil || IsNil(o.PerformSourceSideDeduplication.Get()) {
		var ret bool
		return ret
	}
	return *o.PerformSourceSideDeduplication.Get()
}

// GetPerformSourceSideDeduplicationOk returns a tuple with the PerformSourceSideDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetPerformSourceSideDeduplicationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PerformSourceSideDeduplication.Get(), o.PerformSourceSideDeduplication.IsSet()
}

// HasPerformSourceSideDeduplication returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasPerformSourceSideDeduplication() bool {
	if o != nil && o.PerformSourceSideDeduplication.IsSet() {
		return true
	}

	return false
}

// SetPerformSourceSideDeduplication gets a reference to the given NullableBool and assigns it to the PerformSourceSideDeduplication field.
func (o *PhysicalFileProtectionGroupParams) SetPerformSourceSideDeduplication(v bool) {
	o.PerformSourceSideDeduplication.Set(&v)
}
// SetPerformSourceSideDeduplicationNil sets the value for PerformSourceSideDeduplication to be an explicit nil
func (o *PhysicalFileProtectionGroupParams) SetPerformSourceSideDeduplicationNil() {
	o.PerformSourceSideDeduplication.Set(nil)
}

// UnsetPerformSourceSideDeduplication ensures that no value is present for PerformSourceSideDeduplication, not even an explicit nil
func (o *PhysicalFileProtectionGroupParams) UnsetPerformSourceSideDeduplication() {
	o.PerformSourceSideDeduplication.Unset()
}

// GetPrePostScript returns the PrePostScript field value if set, zero value otherwise.
func (o *PhysicalFileProtectionGroupParams) GetPrePostScript() PrePostScriptParams {
	if o == nil || IsNil(o.PrePostScript) {
		var ret PrePostScriptParams
		return ret
	}
	return *o.PrePostScript
}

// GetPrePostScriptOk returns a tuple with the PrePostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalFileProtectionGroupParams) GetPrePostScriptOk() (*PrePostScriptParams, bool) {
	if o == nil || IsNil(o.PrePostScript) {
		return nil, false
	}
	return o.PrePostScript, true
}

// HasPrePostScript returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasPrePostScript() bool {
	if o != nil && !IsNil(o.PrePostScript) {
		return true
	}

	return false
}

// SetPrePostScript gets a reference to the given PrePostScriptParams and assigns it to the PrePostScript field.
func (o *PhysicalFileProtectionGroupParams) SetPrePostScript(v PrePostScriptParams) {
	o.PrePostScript = &v
}

// GetQuiesce returns the Quiesce field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetQuiesce() bool {
	if o == nil || IsNil(o.Quiesce.Get()) {
		var ret bool
		return ret
	}
	return *o.Quiesce.Get()
}

// GetQuiesceOk returns a tuple with the Quiesce field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetQuiesceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Quiesce.Get(), o.Quiesce.IsSet()
}

// HasQuiesce returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasQuiesce() bool {
	if o != nil && o.Quiesce.IsSet() {
		return true
	}

	return false
}

// SetQuiesce gets a reference to the given NullableBool and assigns it to the Quiesce field.
func (o *PhysicalFileProtectionGroupParams) SetQuiesce(v bool) {
	o.Quiesce.Set(&v)
}
// SetQuiesceNil sets the value for Quiesce to be an explicit nil
func (o *PhysicalFileProtectionGroupParams) SetQuiesceNil() {
	o.Quiesce.Set(nil)
}

// UnsetQuiesce ensures that no value is present for Quiesce, not even an explicit nil
func (o *PhysicalFileProtectionGroupParams) UnsetQuiesce() {
	o.Quiesce.Unset()
}

// GetTaskTimeouts returns the TaskTimeouts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileProtectionGroupParams) GetTaskTimeouts() []CancellationTimeoutParams {
	if o == nil {
		var ret []CancellationTimeoutParams
		return ret
	}
	return o.TaskTimeouts
}

// GetTaskTimeoutsOk returns a tuple with the TaskTimeouts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileProtectionGroupParams) GetTaskTimeoutsOk() ([]CancellationTimeoutParams, bool) {
	if o == nil || IsNil(o.TaskTimeouts) {
		return nil, false
	}
	return o.TaskTimeouts, true
}

// HasTaskTimeouts returns a boolean if a field has been set.
func (o *PhysicalFileProtectionGroupParams) HasTaskTimeouts() bool {
	if o != nil && !IsNil(o.TaskTimeouts) {
		return true
	}

	return false
}

// SetTaskTimeouts gets a reference to the given []CancellationTimeoutParams and assigns it to the TaskTimeouts field.
func (o *PhysicalFileProtectionGroupParams) SetTaskTimeouts(v []CancellationTimeoutParams) {
	o.TaskTimeouts = v
}

func (o PhysicalFileProtectionGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhysicalFileProtectionGroupParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowParallelRuns.IsSet() {
		toSerialize["allowParallelRuns"] = o.AllowParallelRuns.Get()
	}
	if o.CobmrBackup.IsSet() {
		toSerialize["cobmrBackup"] = o.CobmrBackup.Get()
	}
	if o.ContinueOnQuiesceFailure.IsSet() {
		toSerialize["continueOnQuiesceFailure"] = o.ContinueOnQuiesceFailure.Get()
	}
	if !IsNil(o.DedupExclusionSourceIds) {
		toSerialize["dedupExclusionSourceIds"] = o.DedupExclusionSourceIds
	}
	if o.ExcludedVssWriters != nil {
		toSerialize["excludedVssWriters"] = o.ExcludedVssWriters
	}
	if !IsNil(o.GlobalExcludeFS) {
		toSerialize["globalExcludeFS"] = o.GlobalExcludeFS
	}
	if !IsNil(o.GlobalExcludePaths) {
		toSerialize["globalExcludePaths"] = o.GlobalExcludePaths
	}
	if o.IgnorableErrors != nil {
		toSerialize["ignorableErrors"] = o.IgnorableErrors
	}
	if !IsNil(o.IndexingPolicy) {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	toSerialize["objects"] = o.Objects
	if o.PerformBrickBasedDeduplication.IsSet() {
		toSerialize["performBrickBasedDeduplication"] = o.PerformBrickBasedDeduplication.Get()
	}
	if o.PerformSourceSideDeduplication.IsSet() {
		toSerialize["performSourceSideDeduplication"] = o.PerformSourceSideDeduplication.Get()
	}
	if !IsNil(o.PrePostScript) {
		toSerialize["prePostScript"] = o.PrePostScript
	}
	if o.Quiesce.IsSet() {
		toSerialize["quiesce"] = o.Quiesce.Get()
	}
	if o.TaskTimeouts != nil {
		toSerialize["taskTimeouts"] = o.TaskTimeouts
	}
	return toSerialize, nil
}

func (o *PhysicalFileProtectionGroupParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPhysicalFileProtectionGroupParams := _PhysicalFileProtectionGroupParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPhysicalFileProtectionGroupParams)

	if err != nil {
		return err
	}

	*o = PhysicalFileProtectionGroupParams(varPhysicalFileProtectionGroupParams)

	return err
}

type NullablePhysicalFileProtectionGroupParams struct {
	value *PhysicalFileProtectionGroupParams
	isSet bool
}

func (v NullablePhysicalFileProtectionGroupParams) Get() *PhysicalFileProtectionGroupParams {
	return v.value
}

func (v *NullablePhysicalFileProtectionGroupParams) Set(val *PhysicalFileProtectionGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalFileProtectionGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalFileProtectionGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalFileProtectionGroupParams(val *PhysicalFileProtectionGroupParams) *NullablePhysicalFileProtectionGroupParams {
	return &NullablePhysicalFileProtectionGroupParams{value: val, isSet: true}
}

func (v NullablePhysicalFileProtectionGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalFileProtectionGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


