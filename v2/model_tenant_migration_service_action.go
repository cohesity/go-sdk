/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TenantMigrationServiceAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantMigrationServiceAction{}

// TenantMigrationServiceAction Describes a tenant migration action status.
type TenantMigrationServiceAction struct {
	// Specifies the action which will be performed on the tenant.
	Action NullableString `json:"action,omitempty"`
	// Retry count for the action. If an action needs to be retried, then clients will increment action_incarnation_id and can send the same request again
	ActionIncarnationId NullableInt32 `json:"actionIncarnationId,omitempty"`
	// Specifies the error message if an error occurred.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Specifies the type of error which occurred.
	ErrorType NullableString `json:"errorType,omitempty"`
	// Action status
	Status NullableString `json:"status,omitempty"`
}

// NewTenantMigrationServiceAction instantiates a new TenantMigrationServiceAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantMigrationServiceAction() *TenantMigrationServiceAction {
	this := TenantMigrationServiceAction{}
	var actionIncarnationId int32 = 1
	this.ActionIncarnationId = *NewNullableInt32(&actionIncarnationId)
	return &this
}

// NewTenantMigrationServiceActionWithDefaults instantiates a new TenantMigrationServiceAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantMigrationServiceActionWithDefaults() *TenantMigrationServiceAction {
	this := TenantMigrationServiceAction{}
	var actionIncarnationId int32 = 1
	this.ActionIncarnationId = *NewNullableInt32(&actionIncarnationId)
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantMigrationServiceAction) GetAction() string {
	if o == nil || IsNil(o.Action.Get()) {
		var ret string
		return ret
	}
	return *o.Action.Get()
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantMigrationServiceAction) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action.Get(), o.Action.IsSet()
}

// HasAction returns a boolean if a field has been set.
func (o *TenantMigrationServiceAction) HasAction() bool {
	if o != nil && o.Action.IsSet() {
		return true
	}

	return false
}

// SetAction gets a reference to the given NullableString and assigns it to the Action field.
func (o *TenantMigrationServiceAction) SetAction(v string) {
	o.Action.Set(&v)
}
// SetActionNil sets the value for Action to be an explicit nil
func (o *TenantMigrationServiceAction) SetActionNil() {
	o.Action.Set(nil)
}

// UnsetAction ensures that no value is present for Action, not even an explicit nil
func (o *TenantMigrationServiceAction) UnsetAction() {
	o.Action.Unset()
}

// GetActionIncarnationId returns the ActionIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantMigrationServiceAction) GetActionIncarnationId() int32 {
	if o == nil || IsNil(o.ActionIncarnationId.Get()) {
		var ret int32
		return ret
	}
	return *o.ActionIncarnationId.Get()
}

// GetActionIncarnationIdOk returns a tuple with the ActionIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantMigrationServiceAction) GetActionIncarnationIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActionIncarnationId.Get(), o.ActionIncarnationId.IsSet()
}

// HasActionIncarnationId returns a boolean if a field has been set.
func (o *TenantMigrationServiceAction) HasActionIncarnationId() bool {
	if o != nil && o.ActionIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetActionIncarnationId gets a reference to the given NullableInt32 and assigns it to the ActionIncarnationId field.
func (o *TenantMigrationServiceAction) SetActionIncarnationId(v int32) {
	o.ActionIncarnationId.Set(&v)
}
// SetActionIncarnationIdNil sets the value for ActionIncarnationId to be an explicit nil
func (o *TenantMigrationServiceAction) SetActionIncarnationIdNil() {
	o.ActionIncarnationId.Set(nil)
}

// UnsetActionIncarnationId ensures that no value is present for ActionIncarnationId, not even an explicit nil
func (o *TenantMigrationServiceAction) UnsetActionIncarnationId() {
	o.ActionIncarnationId.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantMigrationServiceAction) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantMigrationServiceAction) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *TenantMigrationServiceAction) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *TenantMigrationServiceAction) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *TenantMigrationServiceAction) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *TenantMigrationServiceAction) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetErrorType returns the ErrorType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantMigrationServiceAction) GetErrorType() string {
	if o == nil || IsNil(o.ErrorType.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorType.Get()
}

// GetErrorTypeOk returns a tuple with the ErrorType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantMigrationServiceAction) GetErrorTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorType.Get(), o.ErrorType.IsSet()
}

// HasErrorType returns a boolean if a field has been set.
func (o *TenantMigrationServiceAction) HasErrorType() bool {
	if o != nil && o.ErrorType.IsSet() {
		return true
	}

	return false
}

// SetErrorType gets a reference to the given NullableString and assigns it to the ErrorType field.
func (o *TenantMigrationServiceAction) SetErrorType(v string) {
	o.ErrorType.Set(&v)
}
// SetErrorTypeNil sets the value for ErrorType to be an explicit nil
func (o *TenantMigrationServiceAction) SetErrorTypeNil() {
	o.ErrorType.Set(nil)
}

// UnsetErrorType ensures that no value is present for ErrorType, not even an explicit nil
func (o *TenantMigrationServiceAction) UnsetErrorType() {
	o.ErrorType.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantMigrationServiceAction) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantMigrationServiceAction) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *TenantMigrationServiceAction) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *TenantMigrationServiceAction) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *TenantMigrationServiceAction) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *TenantMigrationServiceAction) UnsetStatus() {
	o.Status.Unset()
}

func (o TenantMigrationServiceAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantMigrationServiceAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Action.IsSet() {
		toSerialize["action"] = o.Action.Get()
	}
	if o.ActionIncarnationId.IsSet() {
		toSerialize["actionIncarnationId"] = o.ActionIncarnationId.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.ErrorType.IsSet() {
		toSerialize["errorType"] = o.ErrorType.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return toSerialize, nil
}

type NullableTenantMigrationServiceAction struct {
	value *TenantMigrationServiceAction
	isSet bool
}

func (v NullableTenantMigrationServiceAction) Get() *TenantMigrationServiceAction {
	return v.value
}

func (v *NullableTenantMigrationServiceAction) Set(val *TenantMigrationServiceAction) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantMigrationServiceAction) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantMigrationServiceAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantMigrationServiceAction(val *TenantMigrationServiceAction) *NullableTenantMigrationServiceAction {
	return &NullableTenantMigrationServiceAction{value: val, isSet: true}
}

func (v NullableTenantMigrationServiceAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantMigrationServiceAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


