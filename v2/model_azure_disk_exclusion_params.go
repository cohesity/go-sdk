/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AzureDiskExclusionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureDiskExclusionParams{}

// AzureDiskExclusionParams Specifies parameters to exclude Azure Disks attached to Azure VM at job or object level. A disk satisfying any of this criteria will be excluded from the backup job.
type AzureDiskExclusionParams struct {
	// Array of disk ids to be excluded during backup. This is only used at object level exclusion.
	DiskIds []string `json:"diskIds,omitempty"`
	// Raw boolean query given as input by the user to exclude volume based on tags. In the current version, the query contains only tags. Eg. query 1 - \"K1\" = \"V1\" AND \"K2\" IN (\"V2\", \"V3\") AND \"K4\" != \"V4\" Eg. query 2 - \"K1\" != \"V1\" OR \"K2\" NOT IN (\"V2\", \"V3\") OR \"K4\" = \"V4\" All Keys and Values must be wrapped inside double quotes. Comparision Operators supported - IN, NOT IN, =, !=. Logical Operators supported - AND, OR. We cannot have AND, OR together in the query. Only one of them is allowed. The processed form for this query is stored in the above tagParamsArray.
	RawQuery NullableString `json:"rawQuery,omitempty"`
	// Array of TagParams objects. Each TagParams object consists of two vectors: for exclusion and inclusion. Each TagPararms object is present as an ORed item. User can only input queries of form: (<> AND <> AND <> ..) OR (<> AND <> AND <> ..) OR (..) OR (..) OR .. There cannot be an OR operator inside the bracket. Example query: (K1 = V1 AND K2 = V2 AND K3 != V3) OR (K4 = V4 AND K6 != V6). This will lead to formation of two items in tagParamsArray. First item: {exclusionTagArray: [(K1, V1),  (K2, V2)], inclusionTagArray: [(K3, V3)]} Second item: {exclusionTagArray: [(K4, V4)], inclusionTagArray: [(K6, V6)]}.
	TagParamsArray []AzureDiskTagParams `json:"tagParamsArray,omitempty"`
}

// NewAzureDiskExclusionParams instantiates a new AzureDiskExclusionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureDiskExclusionParams() *AzureDiskExclusionParams {
	this := AzureDiskExclusionParams{}
	return &this
}

// NewAzureDiskExclusionParamsWithDefaults instantiates a new AzureDiskExclusionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureDiskExclusionParamsWithDefaults() *AzureDiskExclusionParams {
	this := AzureDiskExclusionParams{}
	return &this
}

// GetDiskIds returns the DiskIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureDiskExclusionParams) GetDiskIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DiskIds
}

// GetDiskIdsOk returns a tuple with the DiskIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureDiskExclusionParams) GetDiskIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DiskIds) {
		return nil, false
	}
	return o.DiskIds, true
}

// HasDiskIds returns a boolean if a field has been set.
func (o *AzureDiskExclusionParams) HasDiskIds() bool {
	if o != nil && !IsNil(o.DiskIds) {
		return true
	}

	return false
}

// SetDiskIds gets a reference to the given []string and assigns it to the DiskIds field.
func (o *AzureDiskExclusionParams) SetDiskIds(v []string) {
	o.DiskIds = v
}

// GetRawQuery returns the RawQuery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureDiskExclusionParams) GetRawQuery() string {
	if o == nil || IsNil(o.RawQuery.Get()) {
		var ret string
		return ret
	}
	return *o.RawQuery.Get()
}

// GetRawQueryOk returns a tuple with the RawQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureDiskExclusionParams) GetRawQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RawQuery.Get(), o.RawQuery.IsSet()
}

// HasRawQuery returns a boolean if a field has been set.
func (o *AzureDiskExclusionParams) HasRawQuery() bool {
	if o != nil && o.RawQuery.IsSet() {
		return true
	}

	return false
}

// SetRawQuery gets a reference to the given NullableString and assigns it to the RawQuery field.
func (o *AzureDiskExclusionParams) SetRawQuery(v string) {
	o.RawQuery.Set(&v)
}
// SetRawQueryNil sets the value for RawQuery to be an explicit nil
func (o *AzureDiskExclusionParams) SetRawQueryNil() {
	o.RawQuery.Set(nil)
}

// UnsetRawQuery ensures that no value is present for RawQuery, not even an explicit nil
func (o *AzureDiskExclusionParams) UnsetRawQuery() {
	o.RawQuery.Unset()
}

// GetTagParamsArray returns the TagParamsArray field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureDiskExclusionParams) GetTagParamsArray() []AzureDiskTagParams {
	if o == nil {
		var ret []AzureDiskTagParams
		return ret
	}
	return o.TagParamsArray
}

// GetTagParamsArrayOk returns a tuple with the TagParamsArray field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureDiskExclusionParams) GetTagParamsArrayOk() ([]AzureDiskTagParams, bool) {
	if o == nil || IsNil(o.TagParamsArray) {
		return nil, false
	}
	return o.TagParamsArray, true
}

// HasTagParamsArray returns a boolean if a field has been set.
func (o *AzureDiskExclusionParams) HasTagParamsArray() bool {
	if o != nil && !IsNil(o.TagParamsArray) {
		return true
	}

	return false
}

// SetTagParamsArray gets a reference to the given []AzureDiskTagParams and assigns it to the TagParamsArray field.
func (o *AzureDiskExclusionParams) SetTagParamsArray(v []AzureDiskTagParams) {
	o.TagParamsArray = v
}

func (o AzureDiskExclusionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureDiskExclusionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskIds != nil {
		toSerialize["diskIds"] = o.DiskIds
	}
	if o.RawQuery.IsSet() {
		toSerialize["rawQuery"] = o.RawQuery.Get()
	}
	if o.TagParamsArray != nil {
		toSerialize["tagParamsArray"] = o.TagParamsArray
	}
	return toSerialize, nil
}

type NullableAzureDiskExclusionParams struct {
	value *AzureDiskExclusionParams
	isSet bool
}

func (v NullableAzureDiskExclusionParams) Get() *AzureDiskExclusionParams {
	return v.value
}

func (v *NullableAzureDiskExclusionParams) Set(val *AzureDiskExclusionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureDiskExclusionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureDiskExclusionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureDiskExclusionParams(val *AzureDiskExclusionParams) *NullableAzureDiskExclusionParams {
	return &NullableAzureDiskExclusionParams{value: val, isSet: true}
}

func (v NullableAzureDiskExclusionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureDiskExclusionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


