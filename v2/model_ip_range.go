/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IpRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpRange{}

// IpRange Ip address range.
type IpRange struct {
	// End IP.
	EndIp string `json:"endIp"`
	// Start IP.
	StartIp string `json:"startIp"`
}

type _IpRange IpRange

// NewIpRange instantiates a new IpRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpRange(endIp string, startIp string) *IpRange {
	this := IpRange{}
	this.EndIp = endIp
	this.StartIp = startIp
	return &this
}

// NewIpRangeWithDefaults instantiates a new IpRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpRangeWithDefaults() *IpRange {
	this := IpRange{}
	return &this
}

// GetEndIp returns the EndIp field value
func (o *IpRange) GetEndIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EndIp
}

// GetEndIpOk returns a tuple with the EndIp field value
// and a boolean to check if the value has been set.
func (o *IpRange) GetEndIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndIp, true
}

// SetEndIp sets field value
func (o *IpRange) SetEndIp(v string) {
	o.EndIp = v
}

// GetStartIp returns the StartIp field value
func (o *IpRange) GetStartIp() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StartIp
}

// GetStartIpOk returns a tuple with the StartIp field value
// and a boolean to check if the value has been set.
func (o *IpRange) GetStartIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartIp, true
}

// SetStartIp sets field value
func (o *IpRange) SetStartIp(v string) {
	o.StartIp = v
}

func (o IpRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["endIp"] = o.EndIp
	toSerialize["startIp"] = o.StartIp
	return toSerialize, nil
}

func (o *IpRange) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"endIp",
		"startIp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIpRange := _IpRange{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIpRange)

	if err != nil {
		return err
	}

	*o = IpRange(varIpRange)

	return err
}

type NullableIpRange struct {
	value *IpRange
	isSet bool
}

func (v NullableIpRange) Get() *IpRange {
	return v.value
}

func (v *NullableIpRange) Set(val *IpRange) {
	v.value = val
	v.isSet = true
}

func (v NullableIpRange) IsSet() bool {
	return v.isSet
}

func (v *NullableIpRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpRange(val *IpRange) *NullableIpRange {
	return &NullableIpRange{value: val, isSet: true}
}

func (v NullableIpRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


