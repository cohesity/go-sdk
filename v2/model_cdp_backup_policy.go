/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CdpBackupPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CdpBackupPolicy{}

// CdpBackupPolicy Specifies CDP (Continious Data Protection) backup settings for a Protection Group.
type CdpBackupPolicy struct {
	Retention CdpRetention `json:"retention"`
}

type _CdpBackupPolicy CdpBackupPolicy

// NewCdpBackupPolicy instantiates a new CdpBackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCdpBackupPolicy(retention CdpRetention) *CdpBackupPolicy {
	this := CdpBackupPolicy{}
	this.Retention = retention
	return &this
}

// NewCdpBackupPolicyWithDefaults instantiates a new CdpBackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCdpBackupPolicyWithDefaults() *CdpBackupPolicy {
	this := CdpBackupPolicy{}
	return &this
}

// GetRetention returns the Retention field value
func (o *CdpBackupPolicy) GetRetention() CdpRetention {
	if o == nil {
		var ret CdpRetention
		return ret
	}

	return o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *CdpBackupPolicy) GetRetentionOk() (*CdpRetention, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Retention, true
}

// SetRetention sets field value
func (o *CdpBackupPolicy) SetRetention(v CdpRetention) {
	o.Retention = v
}

func (o CdpBackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CdpBackupPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["retention"] = o.Retention
	return toSerialize, nil
}

func (o *CdpBackupPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"retention",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCdpBackupPolicy := _CdpBackupPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCdpBackupPolicy)

	if err != nil {
		return err
	}

	*o = CdpBackupPolicy(varCdpBackupPolicy)

	return err
}

type NullableCdpBackupPolicy struct {
	value *CdpBackupPolicy
	isSet bool
}

func (v NullableCdpBackupPolicy) Get() *CdpBackupPolicy {
	return v.value
}

func (v *NullableCdpBackupPolicy) Set(val *CdpBackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableCdpBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableCdpBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCdpBackupPolicy(val *CdpBackupPolicy) *NullableCdpBackupPolicy {
	return &NullableCdpBackupPolicy{value: val, isSet: true}
}

func (v NullableCdpBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCdpBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


