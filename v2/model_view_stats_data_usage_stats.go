/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewStatsDataUsageStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewStatsDataUsageStats{}

// ViewStatsDataUsageStats Specifies the data usage metric of the data stored in this View.
type ViewStatsDataUsageStats struct {
	// Specifies the total data written on cloud tiers, as computed by the Cohesity Cluster.
	CloudDataWrittenBytes NullableInt64 `json:"cloudDataWrittenBytes,omitempty"`
	// Specifies Timestamp of CloudDataWrittenBytes.
	CloudDataWrittenBytesTimestampUsec NullableInt64 `json:"cloudDataWrittenBytesTimestampUsec,omitempty"`
	// Specifies the total cloud capacity, as computed by the Cohesity Cluster, after the size of the data has been reduced by change-block tracking, compression and deduplication.
	CloudTotalPhysicalUsageBytes NullableInt64 `json:"cloudTotalPhysicalUsageBytes,omitempty"`
	// Specifies Timestamp of CloudTotalPhysicalUsageBytes.
	CloudTotalPhysicalUsageBytesTimestampUsec NullableInt64 `json:"cloudTotalPhysicalUsageBytesTimestampUsec,omitempty"`
	// Specifies the data read from the protected objects by the Cohesity Cluster before any data reduction using deduplication and compression.
	DataInBytes NullableInt64 `json:"dataInBytes,omitempty"`
	// Specifies the size of the data has been reduced by change-block tracking and deduplication but before compression or data is replicated to other nodes as per RF or Erasure Coding policy.
	DataInBytesAfterDedup NullableInt64 `json:"dataInBytesAfterDedup,omitempty"`
	// Specifies Timestamp of DataInBytesAfterDedup.
	DataInBytesAfterDedupTimestampUsec NullableInt64 `json:"dataInBytesAfterDedupTimestampUsec,omitempty"`
	// Specifies Timestamp of DataInBytes.
	DataInBytesTimestampUsec NullableInt64 `json:"dataInBytesTimestampUsec,omitempty"`
	// Specifies the logical data used by Data Protect on Cohesity cluster.
	DataProtectLogicalUsageBytes NullableInt64 `json:"dataProtectLogicalUsageBytes,omitempty"`
	// Specifies Timestamp of DataProtectLogicalUsageBytes.
	DataProtectLogicalUsageBytesTimestampUsec NullableInt64 `json:"dataProtectLogicalUsageBytesTimestampUsec,omitempty"`
	// Specifies the physical data used by Data Protect on Cohesity cluster.
	DataProtectPhysicalUsageBytes NullableInt64 `json:"dataProtectPhysicalUsageBytes,omitempty"`
	// Specifies Timestamp of DataProtectPhysicalUsageBytes.
	DataProtectPhysicalUsageBytesTimestampUsec NullableInt64 `json:"dataProtectPhysicalUsageBytesTimestampUsec,omitempty"`
	// Specifies the data written after it has been reduced by deduplication and compression. This does not include resiliency impact.
	DataWrittenBytes NullableInt64 `json:"dataWrittenBytes,omitempty"`
	// Specifies Timestamp of DataWrittenBytes.
	DataWrittenBytesTimestampUsec NullableInt64 `json:"dataWrittenBytesTimestampUsec,omitempty"`
	// Specifies the logical data used by File services on Cohesity cluster.
	FileServicesLogicalUsageBytes NullableInt64 `json:"fileServicesLogicalUsageBytes,omitempty"`
	// Specifies Timestamp of FileServicesLogicalUsageBytes.
	FileServicesLogicalUsageBytesTimestampUsec NullableInt64 `json:"fileServicesLogicalUsageBytesTimestampUsec,omitempty"`
	// Specifies the physical data used by File services on Cohesity cluster.
	FileServicesPhysicalUsageBytes NullableInt64 `json:"fileServicesPhysicalUsageBytes,omitempty"`
	// Specifies Timestamp of FileServicesPhysicalUsageBytes.
	FileServicesPhysicalUsageBytesTimestampUsec NullableInt64 `json:"fileServicesPhysicalUsageBytesTimestampUsec,omitempty"`
	// Specifies the total data written on local tiers, as computed by the Cohesity Cluster, after the size of the data has been reduced by change-block tracking, deduplication and compression. This does not include resiliency impact.
	LocalDataWrittenBytes NullableInt64 `json:"localDataWrittenBytes,omitempty"`
	// Specifies Timestamp of LocalDataWrittenBytes.
	LocalDataWrittenBytesTimestampUsec NullableInt64 `json:"localDataWrittenBytesTimestampUsec,omitempty"`
	// Specifies the size of the data has been replicated to other nodes as per RF or Erasure Coding policy.
	LocalTierResiliencyImpactBytes NullableInt64 `json:"localTierResiliencyImpactBytes,omitempty"`
	// Specifies Timestamp of LocalTierResiliencyImpactBytes.
	LocalTierResiliencyImpactBytesTimestampUsec NullableInt64 `json:"localTierResiliencyImpactBytesTimestampUsec,omitempty"`
	// Specifies the total local capacity, as computed by the Cohesity Cluster, after the size of the data has been reduced by change-block tracking, compression and deduplication.
	LocalTotalPhysicalUsageBytes NullableInt64 `json:"localTotalPhysicalUsageBytes,omitempty"`
	// Specifies Timestamp of LocalTotalPhysicalUsageBytes.
	LocalTotalPhysicalUsageBytesTimestampUsec NullableInt64 `json:"localTotalPhysicalUsageBytesTimestampUsec,omitempty"`
	// Specifies the number of directories.
	NumDirectories NullableInt64 `json:"numDirectories,omitempty"`
	// Specifies the number of files.
	NumFiles NullableInt64 `json:"numFiles,omitempty"`
	// Specifies the logical usage as computed by the Cohesity Cluster. This field is computed on a same frequency as 'StorageConsumedBytes', and it may not be the latest value. It is used to compute reduction ratio.
	OutdatedLogicalUsageBytes NullableInt64 `json:"outdatedLogicalUsageBytes,omitempty"`
	// Specifies Timestamp of OutdatedLogicalUsageBytes.
	OutdatedLogicalUsageBytesTimestampUsec NullableInt64 `json:"outdatedLogicalUsageBytesTimestampUsec,omitempty"`
	// Specifies the total capacity, as computed by the Cohesity Cluster, after the size of the data has been reduced by change-block tracking, compression and deduplication. This includes resiliency impact.
	StorageConsumedBytes NullableInt64 `json:"storageConsumedBytes,omitempty"`
	// Specifies Timestamp of StorageConsumedBytes.
	StorageConsumedBytesTimestampUsec NullableInt64 `json:"storageConsumedBytesTimestampUsec,omitempty"`
	// Provides the combined data residing on protected objects. The size of data before reduction by deduplication and compression.
	TotalLogicalUsageBytes NullableInt64 `json:"totalLogicalUsageBytes,omitempty"`
	// Specifies Timestamp of TotalLogicalUsageBytes.
	TotalLogicalUsageBytesTimestampUsec NullableInt64 `json:"totalLogicalUsageBytesTimestampUsec,omitempty"`
	// Specifies the unique physical data usage in bytes.
	UniquePhysicalDataBytes NullableInt64 `json:"uniquePhysicalDataBytes,omitempty"`
}

// NewViewStatsDataUsageStats instantiates a new ViewStatsDataUsageStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewStatsDataUsageStats() *ViewStatsDataUsageStats {
	this := ViewStatsDataUsageStats{}
	return &this
}

// NewViewStatsDataUsageStatsWithDefaults instantiates a new ViewStatsDataUsageStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewStatsDataUsageStatsWithDefaults() *ViewStatsDataUsageStats {
	this := ViewStatsDataUsageStats{}
	return &this
}

// GetCloudDataWrittenBytes returns the CloudDataWrittenBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetCloudDataWrittenBytes() int64 {
	if o == nil || IsNil(o.CloudDataWrittenBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.CloudDataWrittenBytes.Get()
}

// GetCloudDataWrittenBytesOk returns a tuple with the CloudDataWrittenBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetCloudDataWrittenBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudDataWrittenBytes.Get(), o.CloudDataWrittenBytes.IsSet()
}

// HasCloudDataWrittenBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasCloudDataWrittenBytes() bool {
	if o != nil && o.CloudDataWrittenBytes.IsSet() {
		return true
	}

	return false
}

// SetCloudDataWrittenBytes gets a reference to the given NullableInt64 and assigns it to the CloudDataWrittenBytes field.
func (o *ViewStatsDataUsageStats) SetCloudDataWrittenBytes(v int64) {
	o.CloudDataWrittenBytes.Set(&v)
}
// SetCloudDataWrittenBytesNil sets the value for CloudDataWrittenBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetCloudDataWrittenBytesNil() {
	o.CloudDataWrittenBytes.Set(nil)
}

// UnsetCloudDataWrittenBytes ensures that no value is present for CloudDataWrittenBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetCloudDataWrittenBytes() {
	o.CloudDataWrittenBytes.Unset()
}

// GetCloudDataWrittenBytesTimestampUsec returns the CloudDataWrittenBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetCloudDataWrittenBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.CloudDataWrittenBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.CloudDataWrittenBytesTimestampUsec.Get()
}

// GetCloudDataWrittenBytesTimestampUsecOk returns a tuple with the CloudDataWrittenBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetCloudDataWrittenBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudDataWrittenBytesTimestampUsec.Get(), o.CloudDataWrittenBytesTimestampUsec.IsSet()
}

// HasCloudDataWrittenBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasCloudDataWrittenBytesTimestampUsec() bool {
	if o != nil && o.CloudDataWrittenBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetCloudDataWrittenBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the CloudDataWrittenBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetCloudDataWrittenBytesTimestampUsec(v int64) {
	o.CloudDataWrittenBytesTimestampUsec.Set(&v)
}
// SetCloudDataWrittenBytesTimestampUsecNil sets the value for CloudDataWrittenBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetCloudDataWrittenBytesTimestampUsecNil() {
	o.CloudDataWrittenBytesTimestampUsec.Set(nil)
}

// UnsetCloudDataWrittenBytesTimestampUsec ensures that no value is present for CloudDataWrittenBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetCloudDataWrittenBytesTimestampUsec() {
	o.CloudDataWrittenBytesTimestampUsec.Unset()
}

// GetCloudTotalPhysicalUsageBytes returns the CloudTotalPhysicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetCloudTotalPhysicalUsageBytes() int64 {
	if o == nil || IsNil(o.CloudTotalPhysicalUsageBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.CloudTotalPhysicalUsageBytes.Get()
}

// GetCloudTotalPhysicalUsageBytesOk returns a tuple with the CloudTotalPhysicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetCloudTotalPhysicalUsageBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudTotalPhysicalUsageBytes.Get(), o.CloudTotalPhysicalUsageBytes.IsSet()
}

// HasCloudTotalPhysicalUsageBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasCloudTotalPhysicalUsageBytes() bool {
	if o != nil && o.CloudTotalPhysicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetCloudTotalPhysicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the CloudTotalPhysicalUsageBytes field.
func (o *ViewStatsDataUsageStats) SetCloudTotalPhysicalUsageBytes(v int64) {
	o.CloudTotalPhysicalUsageBytes.Set(&v)
}
// SetCloudTotalPhysicalUsageBytesNil sets the value for CloudTotalPhysicalUsageBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetCloudTotalPhysicalUsageBytesNil() {
	o.CloudTotalPhysicalUsageBytes.Set(nil)
}

// UnsetCloudTotalPhysicalUsageBytes ensures that no value is present for CloudTotalPhysicalUsageBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetCloudTotalPhysicalUsageBytes() {
	o.CloudTotalPhysicalUsageBytes.Unset()
}

// GetCloudTotalPhysicalUsageBytesTimestampUsec returns the CloudTotalPhysicalUsageBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetCloudTotalPhysicalUsageBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.CloudTotalPhysicalUsageBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.CloudTotalPhysicalUsageBytesTimestampUsec.Get()
}

// GetCloudTotalPhysicalUsageBytesTimestampUsecOk returns a tuple with the CloudTotalPhysicalUsageBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetCloudTotalPhysicalUsageBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudTotalPhysicalUsageBytesTimestampUsec.Get(), o.CloudTotalPhysicalUsageBytesTimestampUsec.IsSet()
}

// HasCloudTotalPhysicalUsageBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasCloudTotalPhysicalUsageBytesTimestampUsec() bool {
	if o != nil && o.CloudTotalPhysicalUsageBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetCloudTotalPhysicalUsageBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the CloudTotalPhysicalUsageBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetCloudTotalPhysicalUsageBytesTimestampUsec(v int64) {
	o.CloudTotalPhysicalUsageBytesTimestampUsec.Set(&v)
}
// SetCloudTotalPhysicalUsageBytesTimestampUsecNil sets the value for CloudTotalPhysicalUsageBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetCloudTotalPhysicalUsageBytesTimestampUsecNil() {
	o.CloudTotalPhysicalUsageBytesTimestampUsec.Set(nil)
}

// UnsetCloudTotalPhysicalUsageBytesTimestampUsec ensures that no value is present for CloudTotalPhysicalUsageBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetCloudTotalPhysicalUsageBytesTimestampUsec() {
	o.CloudTotalPhysicalUsageBytesTimestampUsec.Unset()
}

// GetDataInBytes returns the DataInBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetDataInBytes() int64 {
	if o == nil || IsNil(o.DataInBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.DataInBytes.Get()
}

// GetDataInBytesOk returns a tuple with the DataInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetDataInBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataInBytes.Get(), o.DataInBytes.IsSet()
}

// HasDataInBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasDataInBytes() bool {
	if o != nil && o.DataInBytes.IsSet() {
		return true
	}

	return false
}

// SetDataInBytes gets a reference to the given NullableInt64 and assigns it to the DataInBytes field.
func (o *ViewStatsDataUsageStats) SetDataInBytes(v int64) {
	o.DataInBytes.Set(&v)
}
// SetDataInBytesNil sets the value for DataInBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetDataInBytesNil() {
	o.DataInBytes.Set(nil)
}

// UnsetDataInBytes ensures that no value is present for DataInBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetDataInBytes() {
	o.DataInBytes.Unset()
}

// GetDataInBytesAfterDedup returns the DataInBytesAfterDedup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetDataInBytesAfterDedup() int64 {
	if o == nil || IsNil(o.DataInBytesAfterDedup.Get()) {
		var ret int64
		return ret
	}
	return *o.DataInBytesAfterDedup.Get()
}

// GetDataInBytesAfterDedupOk returns a tuple with the DataInBytesAfterDedup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetDataInBytesAfterDedupOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataInBytesAfterDedup.Get(), o.DataInBytesAfterDedup.IsSet()
}

// HasDataInBytesAfterDedup returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasDataInBytesAfterDedup() bool {
	if o != nil && o.DataInBytesAfterDedup.IsSet() {
		return true
	}

	return false
}

// SetDataInBytesAfterDedup gets a reference to the given NullableInt64 and assigns it to the DataInBytesAfterDedup field.
func (o *ViewStatsDataUsageStats) SetDataInBytesAfterDedup(v int64) {
	o.DataInBytesAfterDedup.Set(&v)
}
// SetDataInBytesAfterDedupNil sets the value for DataInBytesAfterDedup to be an explicit nil
func (o *ViewStatsDataUsageStats) SetDataInBytesAfterDedupNil() {
	o.DataInBytesAfterDedup.Set(nil)
}

// UnsetDataInBytesAfterDedup ensures that no value is present for DataInBytesAfterDedup, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetDataInBytesAfterDedup() {
	o.DataInBytesAfterDedup.Unset()
}

// GetDataInBytesAfterDedupTimestampUsec returns the DataInBytesAfterDedupTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetDataInBytesAfterDedupTimestampUsec() int64 {
	if o == nil || IsNil(o.DataInBytesAfterDedupTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.DataInBytesAfterDedupTimestampUsec.Get()
}

// GetDataInBytesAfterDedupTimestampUsecOk returns a tuple with the DataInBytesAfterDedupTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetDataInBytesAfterDedupTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataInBytesAfterDedupTimestampUsec.Get(), o.DataInBytesAfterDedupTimestampUsec.IsSet()
}

// HasDataInBytesAfterDedupTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasDataInBytesAfterDedupTimestampUsec() bool {
	if o != nil && o.DataInBytesAfterDedupTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetDataInBytesAfterDedupTimestampUsec gets a reference to the given NullableInt64 and assigns it to the DataInBytesAfterDedupTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetDataInBytesAfterDedupTimestampUsec(v int64) {
	o.DataInBytesAfterDedupTimestampUsec.Set(&v)
}
// SetDataInBytesAfterDedupTimestampUsecNil sets the value for DataInBytesAfterDedupTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetDataInBytesAfterDedupTimestampUsecNil() {
	o.DataInBytesAfterDedupTimestampUsec.Set(nil)
}

// UnsetDataInBytesAfterDedupTimestampUsec ensures that no value is present for DataInBytesAfterDedupTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetDataInBytesAfterDedupTimestampUsec() {
	o.DataInBytesAfterDedupTimestampUsec.Unset()
}

// GetDataInBytesTimestampUsec returns the DataInBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetDataInBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.DataInBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.DataInBytesTimestampUsec.Get()
}

// GetDataInBytesTimestampUsecOk returns a tuple with the DataInBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetDataInBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataInBytesTimestampUsec.Get(), o.DataInBytesTimestampUsec.IsSet()
}

// HasDataInBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasDataInBytesTimestampUsec() bool {
	if o != nil && o.DataInBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetDataInBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the DataInBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetDataInBytesTimestampUsec(v int64) {
	o.DataInBytesTimestampUsec.Set(&v)
}
// SetDataInBytesTimestampUsecNil sets the value for DataInBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetDataInBytesTimestampUsecNil() {
	o.DataInBytesTimestampUsec.Set(nil)
}

// UnsetDataInBytesTimestampUsec ensures that no value is present for DataInBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetDataInBytesTimestampUsec() {
	o.DataInBytesTimestampUsec.Unset()
}

// GetDataProtectLogicalUsageBytes returns the DataProtectLogicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetDataProtectLogicalUsageBytes() int64 {
	if o == nil || IsNil(o.DataProtectLogicalUsageBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.DataProtectLogicalUsageBytes.Get()
}

// GetDataProtectLogicalUsageBytesOk returns a tuple with the DataProtectLogicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetDataProtectLogicalUsageBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataProtectLogicalUsageBytes.Get(), o.DataProtectLogicalUsageBytes.IsSet()
}

// HasDataProtectLogicalUsageBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasDataProtectLogicalUsageBytes() bool {
	if o != nil && o.DataProtectLogicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetDataProtectLogicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the DataProtectLogicalUsageBytes field.
func (o *ViewStatsDataUsageStats) SetDataProtectLogicalUsageBytes(v int64) {
	o.DataProtectLogicalUsageBytes.Set(&v)
}
// SetDataProtectLogicalUsageBytesNil sets the value for DataProtectLogicalUsageBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetDataProtectLogicalUsageBytesNil() {
	o.DataProtectLogicalUsageBytes.Set(nil)
}

// UnsetDataProtectLogicalUsageBytes ensures that no value is present for DataProtectLogicalUsageBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetDataProtectLogicalUsageBytes() {
	o.DataProtectLogicalUsageBytes.Unset()
}

// GetDataProtectLogicalUsageBytesTimestampUsec returns the DataProtectLogicalUsageBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetDataProtectLogicalUsageBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.DataProtectLogicalUsageBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.DataProtectLogicalUsageBytesTimestampUsec.Get()
}

// GetDataProtectLogicalUsageBytesTimestampUsecOk returns a tuple with the DataProtectLogicalUsageBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetDataProtectLogicalUsageBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataProtectLogicalUsageBytesTimestampUsec.Get(), o.DataProtectLogicalUsageBytesTimestampUsec.IsSet()
}

// HasDataProtectLogicalUsageBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasDataProtectLogicalUsageBytesTimestampUsec() bool {
	if o != nil && o.DataProtectLogicalUsageBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetDataProtectLogicalUsageBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the DataProtectLogicalUsageBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetDataProtectLogicalUsageBytesTimestampUsec(v int64) {
	o.DataProtectLogicalUsageBytesTimestampUsec.Set(&v)
}
// SetDataProtectLogicalUsageBytesTimestampUsecNil sets the value for DataProtectLogicalUsageBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetDataProtectLogicalUsageBytesTimestampUsecNil() {
	o.DataProtectLogicalUsageBytesTimestampUsec.Set(nil)
}

// UnsetDataProtectLogicalUsageBytesTimestampUsec ensures that no value is present for DataProtectLogicalUsageBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetDataProtectLogicalUsageBytesTimestampUsec() {
	o.DataProtectLogicalUsageBytesTimestampUsec.Unset()
}

// GetDataProtectPhysicalUsageBytes returns the DataProtectPhysicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetDataProtectPhysicalUsageBytes() int64 {
	if o == nil || IsNil(o.DataProtectPhysicalUsageBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.DataProtectPhysicalUsageBytes.Get()
}

// GetDataProtectPhysicalUsageBytesOk returns a tuple with the DataProtectPhysicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetDataProtectPhysicalUsageBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataProtectPhysicalUsageBytes.Get(), o.DataProtectPhysicalUsageBytes.IsSet()
}

// HasDataProtectPhysicalUsageBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasDataProtectPhysicalUsageBytes() bool {
	if o != nil && o.DataProtectPhysicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetDataProtectPhysicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the DataProtectPhysicalUsageBytes field.
func (o *ViewStatsDataUsageStats) SetDataProtectPhysicalUsageBytes(v int64) {
	o.DataProtectPhysicalUsageBytes.Set(&v)
}
// SetDataProtectPhysicalUsageBytesNil sets the value for DataProtectPhysicalUsageBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetDataProtectPhysicalUsageBytesNil() {
	o.DataProtectPhysicalUsageBytes.Set(nil)
}

// UnsetDataProtectPhysicalUsageBytes ensures that no value is present for DataProtectPhysicalUsageBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetDataProtectPhysicalUsageBytes() {
	o.DataProtectPhysicalUsageBytes.Unset()
}

// GetDataProtectPhysicalUsageBytesTimestampUsec returns the DataProtectPhysicalUsageBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetDataProtectPhysicalUsageBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.DataProtectPhysicalUsageBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.DataProtectPhysicalUsageBytesTimestampUsec.Get()
}

// GetDataProtectPhysicalUsageBytesTimestampUsecOk returns a tuple with the DataProtectPhysicalUsageBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetDataProtectPhysicalUsageBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataProtectPhysicalUsageBytesTimestampUsec.Get(), o.DataProtectPhysicalUsageBytesTimestampUsec.IsSet()
}

// HasDataProtectPhysicalUsageBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasDataProtectPhysicalUsageBytesTimestampUsec() bool {
	if o != nil && o.DataProtectPhysicalUsageBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetDataProtectPhysicalUsageBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the DataProtectPhysicalUsageBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetDataProtectPhysicalUsageBytesTimestampUsec(v int64) {
	o.DataProtectPhysicalUsageBytesTimestampUsec.Set(&v)
}
// SetDataProtectPhysicalUsageBytesTimestampUsecNil sets the value for DataProtectPhysicalUsageBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetDataProtectPhysicalUsageBytesTimestampUsecNil() {
	o.DataProtectPhysicalUsageBytesTimestampUsec.Set(nil)
}

// UnsetDataProtectPhysicalUsageBytesTimestampUsec ensures that no value is present for DataProtectPhysicalUsageBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetDataProtectPhysicalUsageBytesTimestampUsec() {
	o.DataProtectPhysicalUsageBytesTimestampUsec.Unset()
}

// GetDataWrittenBytes returns the DataWrittenBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetDataWrittenBytes() int64 {
	if o == nil || IsNil(o.DataWrittenBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.DataWrittenBytes.Get()
}

// GetDataWrittenBytesOk returns a tuple with the DataWrittenBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetDataWrittenBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataWrittenBytes.Get(), o.DataWrittenBytes.IsSet()
}

// HasDataWrittenBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasDataWrittenBytes() bool {
	if o != nil && o.DataWrittenBytes.IsSet() {
		return true
	}

	return false
}

// SetDataWrittenBytes gets a reference to the given NullableInt64 and assigns it to the DataWrittenBytes field.
func (o *ViewStatsDataUsageStats) SetDataWrittenBytes(v int64) {
	o.DataWrittenBytes.Set(&v)
}
// SetDataWrittenBytesNil sets the value for DataWrittenBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetDataWrittenBytesNil() {
	o.DataWrittenBytes.Set(nil)
}

// UnsetDataWrittenBytes ensures that no value is present for DataWrittenBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetDataWrittenBytes() {
	o.DataWrittenBytes.Unset()
}

// GetDataWrittenBytesTimestampUsec returns the DataWrittenBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetDataWrittenBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.DataWrittenBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.DataWrittenBytesTimestampUsec.Get()
}

// GetDataWrittenBytesTimestampUsecOk returns a tuple with the DataWrittenBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetDataWrittenBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataWrittenBytesTimestampUsec.Get(), o.DataWrittenBytesTimestampUsec.IsSet()
}

// HasDataWrittenBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasDataWrittenBytesTimestampUsec() bool {
	if o != nil && o.DataWrittenBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetDataWrittenBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the DataWrittenBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetDataWrittenBytesTimestampUsec(v int64) {
	o.DataWrittenBytesTimestampUsec.Set(&v)
}
// SetDataWrittenBytesTimestampUsecNil sets the value for DataWrittenBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetDataWrittenBytesTimestampUsecNil() {
	o.DataWrittenBytesTimestampUsec.Set(nil)
}

// UnsetDataWrittenBytesTimestampUsec ensures that no value is present for DataWrittenBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetDataWrittenBytesTimestampUsec() {
	o.DataWrittenBytesTimestampUsec.Unset()
}

// GetFileServicesLogicalUsageBytes returns the FileServicesLogicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetFileServicesLogicalUsageBytes() int64 {
	if o == nil || IsNil(o.FileServicesLogicalUsageBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.FileServicesLogicalUsageBytes.Get()
}

// GetFileServicesLogicalUsageBytesOk returns a tuple with the FileServicesLogicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetFileServicesLogicalUsageBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileServicesLogicalUsageBytes.Get(), o.FileServicesLogicalUsageBytes.IsSet()
}

// HasFileServicesLogicalUsageBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasFileServicesLogicalUsageBytes() bool {
	if o != nil && o.FileServicesLogicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetFileServicesLogicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the FileServicesLogicalUsageBytes field.
func (o *ViewStatsDataUsageStats) SetFileServicesLogicalUsageBytes(v int64) {
	o.FileServicesLogicalUsageBytes.Set(&v)
}
// SetFileServicesLogicalUsageBytesNil sets the value for FileServicesLogicalUsageBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetFileServicesLogicalUsageBytesNil() {
	o.FileServicesLogicalUsageBytes.Set(nil)
}

// UnsetFileServicesLogicalUsageBytes ensures that no value is present for FileServicesLogicalUsageBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetFileServicesLogicalUsageBytes() {
	o.FileServicesLogicalUsageBytes.Unset()
}

// GetFileServicesLogicalUsageBytesTimestampUsec returns the FileServicesLogicalUsageBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetFileServicesLogicalUsageBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.FileServicesLogicalUsageBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.FileServicesLogicalUsageBytesTimestampUsec.Get()
}

// GetFileServicesLogicalUsageBytesTimestampUsecOk returns a tuple with the FileServicesLogicalUsageBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetFileServicesLogicalUsageBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileServicesLogicalUsageBytesTimestampUsec.Get(), o.FileServicesLogicalUsageBytesTimestampUsec.IsSet()
}

// HasFileServicesLogicalUsageBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasFileServicesLogicalUsageBytesTimestampUsec() bool {
	if o != nil && o.FileServicesLogicalUsageBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetFileServicesLogicalUsageBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the FileServicesLogicalUsageBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetFileServicesLogicalUsageBytesTimestampUsec(v int64) {
	o.FileServicesLogicalUsageBytesTimestampUsec.Set(&v)
}
// SetFileServicesLogicalUsageBytesTimestampUsecNil sets the value for FileServicesLogicalUsageBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetFileServicesLogicalUsageBytesTimestampUsecNil() {
	o.FileServicesLogicalUsageBytesTimestampUsec.Set(nil)
}

// UnsetFileServicesLogicalUsageBytesTimestampUsec ensures that no value is present for FileServicesLogicalUsageBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetFileServicesLogicalUsageBytesTimestampUsec() {
	o.FileServicesLogicalUsageBytesTimestampUsec.Unset()
}

// GetFileServicesPhysicalUsageBytes returns the FileServicesPhysicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetFileServicesPhysicalUsageBytes() int64 {
	if o == nil || IsNil(o.FileServicesPhysicalUsageBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.FileServicesPhysicalUsageBytes.Get()
}

// GetFileServicesPhysicalUsageBytesOk returns a tuple with the FileServicesPhysicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetFileServicesPhysicalUsageBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileServicesPhysicalUsageBytes.Get(), o.FileServicesPhysicalUsageBytes.IsSet()
}

// HasFileServicesPhysicalUsageBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasFileServicesPhysicalUsageBytes() bool {
	if o != nil && o.FileServicesPhysicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetFileServicesPhysicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the FileServicesPhysicalUsageBytes field.
func (o *ViewStatsDataUsageStats) SetFileServicesPhysicalUsageBytes(v int64) {
	o.FileServicesPhysicalUsageBytes.Set(&v)
}
// SetFileServicesPhysicalUsageBytesNil sets the value for FileServicesPhysicalUsageBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetFileServicesPhysicalUsageBytesNil() {
	o.FileServicesPhysicalUsageBytes.Set(nil)
}

// UnsetFileServicesPhysicalUsageBytes ensures that no value is present for FileServicesPhysicalUsageBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetFileServicesPhysicalUsageBytes() {
	o.FileServicesPhysicalUsageBytes.Unset()
}

// GetFileServicesPhysicalUsageBytesTimestampUsec returns the FileServicesPhysicalUsageBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetFileServicesPhysicalUsageBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.FileServicesPhysicalUsageBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.FileServicesPhysicalUsageBytesTimestampUsec.Get()
}

// GetFileServicesPhysicalUsageBytesTimestampUsecOk returns a tuple with the FileServicesPhysicalUsageBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetFileServicesPhysicalUsageBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileServicesPhysicalUsageBytesTimestampUsec.Get(), o.FileServicesPhysicalUsageBytesTimestampUsec.IsSet()
}

// HasFileServicesPhysicalUsageBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasFileServicesPhysicalUsageBytesTimestampUsec() bool {
	if o != nil && o.FileServicesPhysicalUsageBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetFileServicesPhysicalUsageBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the FileServicesPhysicalUsageBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetFileServicesPhysicalUsageBytesTimestampUsec(v int64) {
	o.FileServicesPhysicalUsageBytesTimestampUsec.Set(&v)
}
// SetFileServicesPhysicalUsageBytesTimestampUsecNil sets the value for FileServicesPhysicalUsageBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetFileServicesPhysicalUsageBytesTimestampUsecNil() {
	o.FileServicesPhysicalUsageBytesTimestampUsec.Set(nil)
}

// UnsetFileServicesPhysicalUsageBytesTimestampUsec ensures that no value is present for FileServicesPhysicalUsageBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetFileServicesPhysicalUsageBytesTimestampUsec() {
	o.FileServicesPhysicalUsageBytesTimestampUsec.Unset()
}

// GetLocalDataWrittenBytes returns the LocalDataWrittenBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetLocalDataWrittenBytes() int64 {
	if o == nil || IsNil(o.LocalDataWrittenBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.LocalDataWrittenBytes.Get()
}

// GetLocalDataWrittenBytesOk returns a tuple with the LocalDataWrittenBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetLocalDataWrittenBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalDataWrittenBytes.Get(), o.LocalDataWrittenBytes.IsSet()
}

// HasLocalDataWrittenBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasLocalDataWrittenBytes() bool {
	if o != nil && o.LocalDataWrittenBytes.IsSet() {
		return true
	}

	return false
}

// SetLocalDataWrittenBytes gets a reference to the given NullableInt64 and assigns it to the LocalDataWrittenBytes field.
func (o *ViewStatsDataUsageStats) SetLocalDataWrittenBytes(v int64) {
	o.LocalDataWrittenBytes.Set(&v)
}
// SetLocalDataWrittenBytesNil sets the value for LocalDataWrittenBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetLocalDataWrittenBytesNil() {
	o.LocalDataWrittenBytes.Set(nil)
}

// UnsetLocalDataWrittenBytes ensures that no value is present for LocalDataWrittenBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetLocalDataWrittenBytes() {
	o.LocalDataWrittenBytes.Unset()
}

// GetLocalDataWrittenBytesTimestampUsec returns the LocalDataWrittenBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetLocalDataWrittenBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.LocalDataWrittenBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.LocalDataWrittenBytesTimestampUsec.Get()
}

// GetLocalDataWrittenBytesTimestampUsecOk returns a tuple with the LocalDataWrittenBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetLocalDataWrittenBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalDataWrittenBytesTimestampUsec.Get(), o.LocalDataWrittenBytesTimestampUsec.IsSet()
}

// HasLocalDataWrittenBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasLocalDataWrittenBytesTimestampUsec() bool {
	if o != nil && o.LocalDataWrittenBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetLocalDataWrittenBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the LocalDataWrittenBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetLocalDataWrittenBytesTimestampUsec(v int64) {
	o.LocalDataWrittenBytesTimestampUsec.Set(&v)
}
// SetLocalDataWrittenBytesTimestampUsecNil sets the value for LocalDataWrittenBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetLocalDataWrittenBytesTimestampUsecNil() {
	o.LocalDataWrittenBytesTimestampUsec.Set(nil)
}

// UnsetLocalDataWrittenBytesTimestampUsec ensures that no value is present for LocalDataWrittenBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetLocalDataWrittenBytesTimestampUsec() {
	o.LocalDataWrittenBytesTimestampUsec.Unset()
}

// GetLocalTierResiliencyImpactBytes returns the LocalTierResiliencyImpactBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetLocalTierResiliencyImpactBytes() int64 {
	if o == nil || IsNil(o.LocalTierResiliencyImpactBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.LocalTierResiliencyImpactBytes.Get()
}

// GetLocalTierResiliencyImpactBytesOk returns a tuple with the LocalTierResiliencyImpactBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetLocalTierResiliencyImpactBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalTierResiliencyImpactBytes.Get(), o.LocalTierResiliencyImpactBytes.IsSet()
}

// HasLocalTierResiliencyImpactBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasLocalTierResiliencyImpactBytes() bool {
	if o != nil && o.LocalTierResiliencyImpactBytes.IsSet() {
		return true
	}

	return false
}

// SetLocalTierResiliencyImpactBytes gets a reference to the given NullableInt64 and assigns it to the LocalTierResiliencyImpactBytes field.
func (o *ViewStatsDataUsageStats) SetLocalTierResiliencyImpactBytes(v int64) {
	o.LocalTierResiliencyImpactBytes.Set(&v)
}
// SetLocalTierResiliencyImpactBytesNil sets the value for LocalTierResiliencyImpactBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetLocalTierResiliencyImpactBytesNil() {
	o.LocalTierResiliencyImpactBytes.Set(nil)
}

// UnsetLocalTierResiliencyImpactBytes ensures that no value is present for LocalTierResiliencyImpactBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetLocalTierResiliencyImpactBytes() {
	o.LocalTierResiliencyImpactBytes.Unset()
}

// GetLocalTierResiliencyImpactBytesTimestampUsec returns the LocalTierResiliencyImpactBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetLocalTierResiliencyImpactBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.LocalTierResiliencyImpactBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.LocalTierResiliencyImpactBytesTimestampUsec.Get()
}

// GetLocalTierResiliencyImpactBytesTimestampUsecOk returns a tuple with the LocalTierResiliencyImpactBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetLocalTierResiliencyImpactBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalTierResiliencyImpactBytesTimestampUsec.Get(), o.LocalTierResiliencyImpactBytesTimestampUsec.IsSet()
}

// HasLocalTierResiliencyImpactBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasLocalTierResiliencyImpactBytesTimestampUsec() bool {
	if o != nil && o.LocalTierResiliencyImpactBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetLocalTierResiliencyImpactBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the LocalTierResiliencyImpactBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetLocalTierResiliencyImpactBytesTimestampUsec(v int64) {
	o.LocalTierResiliencyImpactBytesTimestampUsec.Set(&v)
}
// SetLocalTierResiliencyImpactBytesTimestampUsecNil sets the value for LocalTierResiliencyImpactBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetLocalTierResiliencyImpactBytesTimestampUsecNil() {
	o.LocalTierResiliencyImpactBytesTimestampUsec.Set(nil)
}

// UnsetLocalTierResiliencyImpactBytesTimestampUsec ensures that no value is present for LocalTierResiliencyImpactBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetLocalTierResiliencyImpactBytesTimestampUsec() {
	o.LocalTierResiliencyImpactBytesTimestampUsec.Unset()
}

// GetLocalTotalPhysicalUsageBytes returns the LocalTotalPhysicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetLocalTotalPhysicalUsageBytes() int64 {
	if o == nil || IsNil(o.LocalTotalPhysicalUsageBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.LocalTotalPhysicalUsageBytes.Get()
}

// GetLocalTotalPhysicalUsageBytesOk returns a tuple with the LocalTotalPhysicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetLocalTotalPhysicalUsageBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalTotalPhysicalUsageBytes.Get(), o.LocalTotalPhysicalUsageBytes.IsSet()
}

// HasLocalTotalPhysicalUsageBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasLocalTotalPhysicalUsageBytes() bool {
	if o != nil && o.LocalTotalPhysicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetLocalTotalPhysicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the LocalTotalPhysicalUsageBytes field.
func (o *ViewStatsDataUsageStats) SetLocalTotalPhysicalUsageBytes(v int64) {
	o.LocalTotalPhysicalUsageBytes.Set(&v)
}
// SetLocalTotalPhysicalUsageBytesNil sets the value for LocalTotalPhysicalUsageBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetLocalTotalPhysicalUsageBytesNil() {
	o.LocalTotalPhysicalUsageBytes.Set(nil)
}

// UnsetLocalTotalPhysicalUsageBytes ensures that no value is present for LocalTotalPhysicalUsageBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetLocalTotalPhysicalUsageBytes() {
	o.LocalTotalPhysicalUsageBytes.Unset()
}

// GetLocalTotalPhysicalUsageBytesTimestampUsec returns the LocalTotalPhysicalUsageBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetLocalTotalPhysicalUsageBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.LocalTotalPhysicalUsageBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.LocalTotalPhysicalUsageBytesTimestampUsec.Get()
}

// GetLocalTotalPhysicalUsageBytesTimestampUsecOk returns a tuple with the LocalTotalPhysicalUsageBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetLocalTotalPhysicalUsageBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalTotalPhysicalUsageBytesTimestampUsec.Get(), o.LocalTotalPhysicalUsageBytesTimestampUsec.IsSet()
}

// HasLocalTotalPhysicalUsageBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasLocalTotalPhysicalUsageBytesTimestampUsec() bool {
	if o != nil && o.LocalTotalPhysicalUsageBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetLocalTotalPhysicalUsageBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the LocalTotalPhysicalUsageBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetLocalTotalPhysicalUsageBytesTimestampUsec(v int64) {
	o.LocalTotalPhysicalUsageBytesTimestampUsec.Set(&v)
}
// SetLocalTotalPhysicalUsageBytesTimestampUsecNil sets the value for LocalTotalPhysicalUsageBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetLocalTotalPhysicalUsageBytesTimestampUsecNil() {
	o.LocalTotalPhysicalUsageBytesTimestampUsec.Set(nil)
}

// UnsetLocalTotalPhysicalUsageBytesTimestampUsec ensures that no value is present for LocalTotalPhysicalUsageBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetLocalTotalPhysicalUsageBytesTimestampUsec() {
	o.LocalTotalPhysicalUsageBytesTimestampUsec.Unset()
}

// GetNumDirectories returns the NumDirectories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetNumDirectories() int64 {
	if o == nil || IsNil(o.NumDirectories.Get()) {
		var ret int64
		return ret
	}
	return *o.NumDirectories.Get()
}

// GetNumDirectoriesOk returns a tuple with the NumDirectories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetNumDirectoriesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumDirectories.Get(), o.NumDirectories.IsSet()
}

// HasNumDirectories returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasNumDirectories() bool {
	if o != nil && o.NumDirectories.IsSet() {
		return true
	}

	return false
}

// SetNumDirectories gets a reference to the given NullableInt64 and assigns it to the NumDirectories field.
func (o *ViewStatsDataUsageStats) SetNumDirectories(v int64) {
	o.NumDirectories.Set(&v)
}
// SetNumDirectoriesNil sets the value for NumDirectories to be an explicit nil
func (o *ViewStatsDataUsageStats) SetNumDirectoriesNil() {
	o.NumDirectories.Set(nil)
}

// UnsetNumDirectories ensures that no value is present for NumDirectories, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetNumDirectories() {
	o.NumDirectories.Unset()
}

// GetNumFiles returns the NumFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetNumFiles() int64 {
	if o == nil || IsNil(o.NumFiles.Get()) {
		var ret int64
		return ret
	}
	return *o.NumFiles.Get()
}

// GetNumFilesOk returns a tuple with the NumFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetNumFilesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumFiles.Get(), o.NumFiles.IsSet()
}

// HasNumFiles returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasNumFiles() bool {
	if o != nil && o.NumFiles.IsSet() {
		return true
	}

	return false
}

// SetNumFiles gets a reference to the given NullableInt64 and assigns it to the NumFiles field.
func (o *ViewStatsDataUsageStats) SetNumFiles(v int64) {
	o.NumFiles.Set(&v)
}
// SetNumFilesNil sets the value for NumFiles to be an explicit nil
func (o *ViewStatsDataUsageStats) SetNumFilesNil() {
	o.NumFiles.Set(nil)
}

// UnsetNumFiles ensures that no value is present for NumFiles, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetNumFiles() {
	o.NumFiles.Unset()
}

// GetOutdatedLogicalUsageBytes returns the OutdatedLogicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetOutdatedLogicalUsageBytes() int64 {
	if o == nil || IsNil(o.OutdatedLogicalUsageBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.OutdatedLogicalUsageBytes.Get()
}

// GetOutdatedLogicalUsageBytesOk returns a tuple with the OutdatedLogicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetOutdatedLogicalUsageBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdatedLogicalUsageBytes.Get(), o.OutdatedLogicalUsageBytes.IsSet()
}

// HasOutdatedLogicalUsageBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasOutdatedLogicalUsageBytes() bool {
	if o != nil && o.OutdatedLogicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetOutdatedLogicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the OutdatedLogicalUsageBytes field.
func (o *ViewStatsDataUsageStats) SetOutdatedLogicalUsageBytes(v int64) {
	o.OutdatedLogicalUsageBytes.Set(&v)
}
// SetOutdatedLogicalUsageBytesNil sets the value for OutdatedLogicalUsageBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetOutdatedLogicalUsageBytesNil() {
	o.OutdatedLogicalUsageBytes.Set(nil)
}

// UnsetOutdatedLogicalUsageBytes ensures that no value is present for OutdatedLogicalUsageBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetOutdatedLogicalUsageBytes() {
	o.OutdatedLogicalUsageBytes.Unset()
}

// GetOutdatedLogicalUsageBytesTimestampUsec returns the OutdatedLogicalUsageBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetOutdatedLogicalUsageBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.OutdatedLogicalUsageBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.OutdatedLogicalUsageBytesTimestampUsec.Get()
}

// GetOutdatedLogicalUsageBytesTimestampUsecOk returns a tuple with the OutdatedLogicalUsageBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetOutdatedLogicalUsageBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OutdatedLogicalUsageBytesTimestampUsec.Get(), o.OutdatedLogicalUsageBytesTimestampUsec.IsSet()
}

// HasOutdatedLogicalUsageBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasOutdatedLogicalUsageBytesTimestampUsec() bool {
	if o != nil && o.OutdatedLogicalUsageBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetOutdatedLogicalUsageBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the OutdatedLogicalUsageBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetOutdatedLogicalUsageBytesTimestampUsec(v int64) {
	o.OutdatedLogicalUsageBytesTimestampUsec.Set(&v)
}
// SetOutdatedLogicalUsageBytesTimestampUsecNil sets the value for OutdatedLogicalUsageBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetOutdatedLogicalUsageBytesTimestampUsecNil() {
	o.OutdatedLogicalUsageBytesTimestampUsec.Set(nil)
}

// UnsetOutdatedLogicalUsageBytesTimestampUsec ensures that no value is present for OutdatedLogicalUsageBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetOutdatedLogicalUsageBytesTimestampUsec() {
	o.OutdatedLogicalUsageBytesTimestampUsec.Unset()
}

// GetStorageConsumedBytes returns the StorageConsumedBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetStorageConsumedBytes() int64 {
	if o == nil || IsNil(o.StorageConsumedBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.StorageConsumedBytes.Get()
}

// GetStorageConsumedBytesOk returns a tuple with the StorageConsumedBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetStorageConsumedBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageConsumedBytes.Get(), o.StorageConsumedBytes.IsSet()
}

// HasStorageConsumedBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasStorageConsumedBytes() bool {
	if o != nil && o.StorageConsumedBytes.IsSet() {
		return true
	}

	return false
}

// SetStorageConsumedBytes gets a reference to the given NullableInt64 and assigns it to the StorageConsumedBytes field.
func (o *ViewStatsDataUsageStats) SetStorageConsumedBytes(v int64) {
	o.StorageConsumedBytes.Set(&v)
}
// SetStorageConsumedBytesNil sets the value for StorageConsumedBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetStorageConsumedBytesNil() {
	o.StorageConsumedBytes.Set(nil)
}

// UnsetStorageConsumedBytes ensures that no value is present for StorageConsumedBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetStorageConsumedBytes() {
	o.StorageConsumedBytes.Unset()
}

// GetStorageConsumedBytesTimestampUsec returns the StorageConsumedBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetStorageConsumedBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.StorageConsumedBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.StorageConsumedBytesTimestampUsec.Get()
}

// GetStorageConsumedBytesTimestampUsecOk returns a tuple with the StorageConsumedBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetStorageConsumedBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageConsumedBytesTimestampUsec.Get(), o.StorageConsumedBytesTimestampUsec.IsSet()
}

// HasStorageConsumedBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasStorageConsumedBytesTimestampUsec() bool {
	if o != nil && o.StorageConsumedBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetStorageConsumedBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the StorageConsumedBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetStorageConsumedBytesTimestampUsec(v int64) {
	o.StorageConsumedBytesTimestampUsec.Set(&v)
}
// SetStorageConsumedBytesTimestampUsecNil sets the value for StorageConsumedBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetStorageConsumedBytesTimestampUsecNil() {
	o.StorageConsumedBytesTimestampUsec.Set(nil)
}

// UnsetStorageConsumedBytesTimestampUsec ensures that no value is present for StorageConsumedBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetStorageConsumedBytesTimestampUsec() {
	o.StorageConsumedBytesTimestampUsec.Unset()
}

// GetTotalLogicalUsageBytes returns the TotalLogicalUsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetTotalLogicalUsageBytes() int64 {
	if o == nil || IsNil(o.TotalLogicalUsageBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.TotalLogicalUsageBytes.Get()
}

// GetTotalLogicalUsageBytesOk returns a tuple with the TotalLogicalUsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetTotalLogicalUsageBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalLogicalUsageBytes.Get(), o.TotalLogicalUsageBytes.IsSet()
}

// HasTotalLogicalUsageBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasTotalLogicalUsageBytes() bool {
	if o != nil && o.TotalLogicalUsageBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalLogicalUsageBytes gets a reference to the given NullableInt64 and assigns it to the TotalLogicalUsageBytes field.
func (o *ViewStatsDataUsageStats) SetTotalLogicalUsageBytes(v int64) {
	o.TotalLogicalUsageBytes.Set(&v)
}
// SetTotalLogicalUsageBytesNil sets the value for TotalLogicalUsageBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetTotalLogicalUsageBytesNil() {
	o.TotalLogicalUsageBytes.Set(nil)
}

// UnsetTotalLogicalUsageBytes ensures that no value is present for TotalLogicalUsageBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetTotalLogicalUsageBytes() {
	o.TotalLogicalUsageBytes.Unset()
}

// GetTotalLogicalUsageBytesTimestampUsec returns the TotalLogicalUsageBytesTimestampUsec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetTotalLogicalUsageBytesTimestampUsec() int64 {
	if o == nil || IsNil(o.TotalLogicalUsageBytesTimestampUsec.Get()) {
		var ret int64
		return ret
	}
	return *o.TotalLogicalUsageBytesTimestampUsec.Get()
}

// GetTotalLogicalUsageBytesTimestampUsecOk returns a tuple with the TotalLogicalUsageBytesTimestampUsec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetTotalLogicalUsageBytesTimestampUsecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalLogicalUsageBytesTimestampUsec.Get(), o.TotalLogicalUsageBytesTimestampUsec.IsSet()
}

// HasTotalLogicalUsageBytesTimestampUsec returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasTotalLogicalUsageBytesTimestampUsec() bool {
	if o != nil && o.TotalLogicalUsageBytesTimestampUsec.IsSet() {
		return true
	}

	return false
}

// SetTotalLogicalUsageBytesTimestampUsec gets a reference to the given NullableInt64 and assigns it to the TotalLogicalUsageBytesTimestampUsec field.
func (o *ViewStatsDataUsageStats) SetTotalLogicalUsageBytesTimestampUsec(v int64) {
	o.TotalLogicalUsageBytesTimestampUsec.Set(&v)
}
// SetTotalLogicalUsageBytesTimestampUsecNil sets the value for TotalLogicalUsageBytesTimestampUsec to be an explicit nil
func (o *ViewStatsDataUsageStats) SetTotalLogicalUsageBytesTimestampUsecNil() {
	o.TotalLogicalUsageBytesTimestampUsec.Set(nil)
}

// UnsetTotalLogicalUsageBytesTimestampUsec ensures that no value is present for TotalLogicalUsageBytesTimestampUsec, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetTotalLogicalUsageBytesTimestampUsec() {
	o.TotalLogicalUsageBytesTimestampUsec.Unset()
}

// GetUniquePhysicalDataBytes returns the UniquePhysicalDataBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsDataUsageStats) GetUniquePhysicalDataBytes() int64 {
	if o == nil || IsNil(o.UniquePhysicalDataBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.UniquePhysicalDataBytes.Get()
}

// GetUniquePhysicalDataBytesOk returns a tuple with the UniquePhysicalDataBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsDataUsageStats) GetUniquePhysicalDataBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UniquePhysicalDataBytes.Get(), o.UniquePhysicalDataBytes.IsSet()
}

// HasUniquePhysicalDataBytes returns a boolean if a field has been set.
func (o *ViewStatsDataUsageStats) HasUniquePhysicalDataBytes() bool {
	if o != nil && o.UniquePhysicalDataBytes.IsSet() {
		return true
	}

	return false
}

// SetUniquePhysicalDataBytes gets a reference to the given NullableInt64 and assigns it to the UniquePhysicalDataBytes field.
func (o *ViewStatsDataUsageStats) SetUniquePhysicalDataBytes(v int64) {
	o.UniquePhysicalDataBytes.Set(&v)
}
// SetUniquePhysicalDataBytesNil sets the value for UniquePhysicalDataBytes to be an explicit nil
func (o *ViewStatsDataUsageStats) SetUniquePhysicalDataBytesNil() {
	o.UniquePhysicalDataBytes.Set(nil)
}

// UnsetUniquePhysicalDataBytes ensures that no value is present for UniquePhysicalDataBytes, not even an explicit nil
func (o *ViewStatsDataUsageStats) UnsetUniquePhysicalDataBytes() {
	o.UniquePhysicalDataBytes.Unset()
}

func (o ViewStatsDataUsageStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewStatsDataUsageStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CloudDataWrittenBytes.IsSet() {
		toSerialize["cloudDataWrittenBytes"] = o.CloudDataWrittenBytes.Get()
	}
	if o.CloudDataWrittenBytesTimestampUsec.IsSet() {
		toSerialize["cloudDataWrittenBytesTimestampUsec"] = o.CloudDataWrittenBytesTimestampUsec.Get()
	}
	if o.CloudTotalPhysicalUsageBytes.IsSet() {
		toSerialize["cloudTotalPhysicalUsageBytes"] = o.CloudTotalPhysicalUsageBytes.Get()
	}
	if o.CloudTotalPhysicalUsageBytesTimestampUsec.IsSet() {
		toSerialize["cloudTotalPhysicalUsageBytesTimestampUsec"] = o.CloudTotalPhysicalUsageBytesTimestampUsec.Get()
	}
	if o.DataInBytes.IsSet() {
		toSerialize["dataInBytes"] = o.DataInBytes.Get()
	}
	if o.DataInBytesAfterDedup.IsSet() {
		toSerialize["dataInBytesAfterDedup"] = o.DataInBytesAfterDedup.Get()
	}
	if o.DataInBytesAfterDedupTimestampUsec.IsSet() {
		toSerialize["dataInBytesAfterDedupTimestampUsec"] = o.DataInBytesAfterDedupTimestampUsec.Get()
	}
	if o.DataInBytesTimestampUsec.IsSet() {
		toSerialize["dataInBytesTimestampUsec"] = o.DataInBytesTimestampUsec.Get()
	}
	if o.DataProtectLogicalUsageBytes.IsSet() {
		toSerialize["dataProtectLogicalUsageBytes"] = o.DataProtectLogicalUsageBytes.Get()
	}
	if o.DataProtectLogicalUsageBytesTimestampUsec.IsSet() {
		toSerialize["dataProtectLogicalUsageBytesTimestampUsec"] = o.DataProtectLogicalUsageBytesTimestampUsec.Get()
	}
	if o.DataProtectPhysicalUsageBytes.IsSet() {
		toSerialize["dataProtectPhysicalUsageBytes"] = o.DataProtectPhysicalUsageBytes.Get()
	}
	if o.DataProtectPhysicalUsageBytesTimestampUsec.IsSet() {
		toSerialize["dataProtectPhysicalUsageBytesTimestampUsec"] = o.DataProtectPhysicalUsageBytesTimestampUsec.Get()
	}
	if o.DataWrittenBytes.IsSet() {
		toSerialize["dataWrittenBytes"] = o.DataWrittenBytes.Get()
	}
	if o.DataWrittenBytesTimestampUsec.IsSet() {
		toSerialize["dataWrittenBytesTimestampUsec"] = o.DataWrittenBytesTimestampUsec.Get()
	}
	if o.FileServicesLogicalUsageBytes.IsSet() {
		toSerialize["fileServicesLogicalUsageBytes"] = o.FileServicesLogicalUsageBytes.Get()
	}
	if o.FileServicesLogicalUsageBytesTimestampUsec.IsSet() {
		toSerialize["fileServicesLogicalUsageBytesTimestampUsec"] = o.FileServicesLogicalUsageBytesTimestampUsec.Get()
	}
	if o.FileServicesPhysicalUsageBytes.IsSet() {
		toSerialize["fileServicesPhysicalUsageBytes"] = o.FileServicesPhysicalUsageBytes.Get()
	}
	if o.FileServicesPhysicalUsageBytesTimestampUsec.IsSet() {
		toSerialize["fileServicesPhysicalUsageBytesTimestampUsec"] = o.FileServicesPhysicalUsageBytesTimestampUsec.Get()
	}
	if o.LocalDataWrittenBytes.IsSet() {
		toSerialize["localDataWrittenBytes"] = o.LocalDataWrittenBytes.Get()
	}
	if o.LocalDataWrittenBytesTimestampUsec.IsSet() {
		toSerialize["localDataWrittenBytesTimestampUsec"] = o.LocalDataWrittenBytesTimestampUsec.Get()
	}
	if o.LocalTierResiliencyImpactBytes.IsSet() {
		toSerialize["localTierResiliencyImpactBytes"] = o.LocalTierResiliencyImpactBytes.Get()
	}
	if o.LocalTierResiliencyImpactBytesTimestampUsec.IsSet() {
		toSerialize["localTierResiliencyImpactBytesTimestampUsec"] = o.LocalTierResiliencyImpactBytesTimestampUsec.Get()
	}
	if o.LocalTotalPhysicalUsageBytes.IsSet() {
		toSerialize["localTotalPhysicalUsageBytes"] = o.LocalTotalPhysicalUsageBytes.Get()
	}
	if o.LocalTotalPhysicalUsageBytesTimestampUsec.IsSet() {
		toSerialize["localTotalPhysicalUsageBytesTimestampUsec"] = o.LocalTotalPhysicalUsageBytesTimestampUsec.Get()
	}
	if o.NumDirectories.IsSet() {
		toSerialize["numDirectories"] = o.NumDirectories.Get()
	}
	if o.NumFiles.IsSet() {
		toSerialize["numFiles"] = o.NumFiles.Get()
	}
	if o.OutdatedLogicalUsageBytes.IsSet() {
		toSerialize["outdatedLogicalUsageBytes"] = o.OutdatedLogicalUsageBytes.Get()
	}
	if o.OutdatedLogicalUsageBytesTimestampUsec.IsSet() {
		toSerialize["outdatedLogicalUsageBytesTimestampUsec"] = o.OutdatedLogicalUsageBytesTimestampUsec.Get()
	}
	if o.StorageConsumedBytes.IsSet() {
		toSerialize["storageConsumedBytes"] = o.StorageConsumedBytes.Get()
	}
	if o.StorageConsumedBytesTimestampUsec.IsSet() {
		toSerialize["storageConsumedBytesTimestampUsec"] = o.StorageConsumedBytesTimestampUsec.Get()
	}
	if o.TotalLogicalUsageBytes.IsSet() {
		toSerialize["totalLogicalUsageBytes"] = o.TotalLogicalUsageBytes.Get()
	}
	if o.TotalLogicalUsageBytesTimestampUsec.IsSet() {
		toSerialize["totalLogicalUsageBytesTimestampUsec"] = o.TotalLogicalUsageBytesTimestampUsec.Get()
	}
	if o.UniquePhysicalDataBytes.IsSet() {
		toSerialize["uniquePhysicalDataBytes"] = o.UniquePhysicalDataBytes.Get()
	}
	return toSerialize, nil
}

type NullableViewStatsDataUsageStats struct {
	value *ViewStatsDataUsageStats
	isSet bool
}

func (v NullableViewStatsDataUsageStats) Get() *ViewStatsDataUsageStats {
	return v.value
}

func (v *NullableViewStatsDataUsageStats) Set(val *ViewStatsDataUsageStats) {
	v.value = val
	v.isSet = true
}

func (v NullableViewStatsDataUsageStats) IsSet() bool {
	return v.isSet
}

func (v *NullableViewStatsDataUsageStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewStatsDataUsageStats(val *ViewStatsDataUsageStats) *NullableViewStatsDataUsageStats {
	return &NullableViewStatsDataUsageStats{value: val, isSet: true}
}

func (v NullableViewStatsDataUsageStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewStatsDataUsageStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


