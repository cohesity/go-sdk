/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MssqlConnectionResponseParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MssqlConnectionResponseParams{}

// MssqlConnectionResponseParams Specifies the response parameters after connecting to a SQL node/cluster using given IP or hostname FQDN.
type MssqlConnectionResponseParams struct {
	// Specifies the unique identifier to locate the SQL node or cluster. The host identifier can be IP address or FQDN.
	HostIdentifier string `json:"hostIdentifier"`
	// Specifies the list of AAG (Always on Avalibility) groups.
	AagGroups []AAGGroup `json:"aagGroups,omitempty"`
	Error *Error `json:"error,omitempty"`
	// Specifies the list of FCI (Failover Cluster Instaces) Clusters. This will contain the list of all failover pools under a windows cluster. FCI clusters which are part of AAG, will be returned seperatly under aagServers field.
	FciClusters []FCICluster `json:"fciClusters,omitempty"`
	// Specifies the list of SQL servers. If SQL server is a part of avalibility group then it will be returned in aagServers field. This will include the list of all standalone SQL servers and servers belonging to any FCI enviournment.
	Servers []SQLServer `json:"servers,omitempty"`
	// Specifies whether to skip the discovery phase of all SQL servers, AAG groups etc during registration process.
	SkipConnectionDiscovery NullableBool `json:"skipConnectionDiscovery,omitempty"`
}

type _MssqlConnectionResponseParams MssqlConnectionResponseParams

// NewMssqlConnectionResponseParams instantiates a new MssqlConnectionResponseParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMssqlConnectionResponseParams(hostIdentifier string) *MssqlConnectionResponseParams {
	this := MssqlConnectionResponseParams{}
	this.HostIdentifier = hostIdentifier
	return &this
}

// NewMssqlConnectionResponseParamsWithDefaults instantiates a new MssqlConnectionResponseParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMssqlConnectionResponseParamsWithDefaults() *MssqlConnectionResponseParams {
	this := MssqlConnectionResponseParams{}
	return &this
}

// GetHostIdentifier returns the HostIdentifier field value
func (o *MssqlConnectionResponseParams) GetHostIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostIdentifier
}

// GetHostIdentifierOk returns a tuple with the HostIdentifier field value
// and a boolean to check if the value has been set.
func (o *MssqlConnectionResponseParams) GetHostIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostIdentifier, true
}

// SetHostIdentifier sets field value
func (o *MssqlConnectionResponseParams) SetHostIdentifier(v string) {
	o.HostIdentifier = v
}

// GetAagGroups returns the AagGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MssqlConnectionResponseParams) GetAagGroups() []AAGGroup {
	if o == nil {
		var ret []AAGGroup
		return ret
	}
	return o.AagGroups
}

// GetAagGroupsOk returns a tuple with the AagGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MssqlConnectionResponseParams) GetAagGroupsOk() ([]AAGGroup, bool) {
	if o == nil || IsNil(o.AagGroups) {
		return nil, false
	}
	return o.AagGroups, true
}

// HasAagGroups returns a boolean if a field has been set.
func (o *MssqlConnectionResponseParams) HasAagGroups() bool {
	if o != nil && !IsNil(o.AagGroups) {
		return true
	}

	return false
}

// SetAagGroups gets a reference to the given []AAGGroup and assigns it to the AagGroups field.
func (o *MssqlConnectionResponseParams) SetAagGroups(v []AAGGroup) {
	o.AagGroups = v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *MssqlConnectionResponseParams) GetError() Error {
	if o == nil || IsNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MssqlConnectionResponseParams) GetErrorOk() (*Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *MssqlConnectionResponseParams) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *MssqlConnectionResponseParams) SetError(v Error) {
	o.Error = &v
}

// GetFciClusters returns the FciClusters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MssqlConnectionResponseParams) GetFciClusters() []FCICluster {
	if o == nil {
		var ret []FCICluster
		return ret
	}
	return o.FciClusters
}

// GetFciClustersOk returns a tuple with the FciClusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MssqlConnectionResponseParams) GetFciClustersOk() ([]FCICluster, bool) {
	if o == nil || IsNil(o.FciClusters) {
		return nil, false
	}
	return o.FciClusters, true
}

// HasFciClusters returns a boolean if a field has been set.
func (o *MssqlConnectionResponseParams) HasFciClusters() bool {
	if o != nil && !IsNil(o.FciClusters) {
		return true
	}

	return false
}

// SetFciClusters gets a reference to the given []FCICluster and assigns it to the FciClusters field.
func (o *MssqlConnectionResponseParams) SetFciClusters(v []FCICluster) {
	o.FciClusters = v
}

// GetServers returns the Servers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MssqlConnectionResponseParams) GetServers() []SQLServer {
	if o == nil {
		var ret []SQLServer
		return ret
	}
	return o.Servers
}

// GetServersOk returns a tuple with the Servers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MssqlConnectionResponseParams) GetServersOk() ([]SQLServer, bool) {
	if o == nil || IsNil(o.Servers) {
		return nil, false
	}
	return o.Servers, true
}

// HasServers returns a boolean if a field has been set.
func (o *MssqlConnectionResponseParams) HasServers() bool {
	if o != nil && !IsNil(o.Servers) {
		return true
	}

	return false
}

// SetServers gets a reference to the given []SQLServer and assigns it to the Servers field.
func (o *MssqlConnectionResponseParams) SetServers(v []SQLServer) {
	o.Servers = v
}

// GetSkipConnectionDiscovery returns the SkipConnectionDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MssqlConnectionResponseParams) GetSkipConnectionDiscovery() bool {
	if o == nil || IsNil(o.SkipConnectionDiscovery.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipConnectionDiscovery.Get()
}

// GetSkipConnectionDiscoveryOk returns a tuple with the SkipConnectionDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MssqlConnectionResponseParams) GetSkipConnectionDiscoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipConnectionDiscovery.Get(), o.SkipConnectionDiscovery.IsSet()
}

// HasSkipConnectionDiscovery returns a boolean if a field has been set.
func (o *MssqlConnectionResponseParams) HasSkipConnectionDiscovery() bool {
	if o != nil && o.SkipConnectionDiscovery.IsSet() {
		return true
	}

	return false
}

// SetSkipConnectionDiscovery gets a reference to the given NullableBool and assigns it to the SkipConnectionDiscovery field.
func (o *MssqlConnectionResponseParams) SetSkipConnectionDiscovery(v bool) {
	o.SkipConnectionDiscovery.Set(&v)
}
// SetSkipConnectionDiscoveryNil sets the value for SkipConnectionDiscovery to be an explicit nil
func (o *MssqlConnectionResponseParams) SetSkipConnectionDiscoveryNil() {
	o.SkipConnectionDiscovery.Set(nil)
}

// UnsetSkipConnectionDiscovery ensures that no value is present for SkipConnectionDiscovery, not even an explicit nil
func (o *MssqlConnectionResponseParams) UnsetSkipConnectionDiscovery() {
	o.SkipConnectionDiscovery.Unset()
}

func (o MssqlConnectionResponseParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MssqlConnectionResponseParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hostIdentifier"] = o.HostIdentifier
	if o.AagGroups != nil {
		toSerialize["aagGroups"] = o.AagGroups
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if o.FciClusters != nil {
		toSerialize["fciClusters"] = o.FciClusters
	}
	if o.Servers != nil {
		toSerialize["servers"] = o.Servers
	}
	if o.SkipConnectionDiscovery.IsSet() {
		toSerialize["skipConnectionDiscovery"] = o.SkipConnectionDiscovery.Get()
	}
	return toSerialize, nil
}

func (o *MssqlConnectionResponseParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hostIdentifier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMssqlConnectionResponseParams := _MssqlConnectionResponseParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMssqlConnectionResponseParams)

	if err != nil {
		return err
	}

	*o = MssqlConnectionResponseParams(varMssqlConnectionResponseParams)

	return err
}

type NullableMssqlConnectionResponseParams struct {
	value *MssqlConnectionResponseParams
	isSet bool
}

func (v NullableMssqlConnectionResponseParams) Get() *MssqlConnectionResponseParams {
	return v.value
}

func (v *NullableMssqlConnectionResponseParams) Set(val *MssqlConnectionResponseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMssqlConnectionResponseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMssqlConnectionResponseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMssqlConnectionResponseParams(val *MssqlConnectionResponseParams) *NullableMssqlConnectionResponseParams {
	return &NullableMssqlConnectionResponseParams{value: val, isSet: true}
}

func (v NullableMssqlConnectionResponseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMssqlConnectionResponseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


