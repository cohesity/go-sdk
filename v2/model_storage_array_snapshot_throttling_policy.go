/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the StorageArraySnapshotThrottlingPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageArraySnapshotThrottlingPolicy{}

// StorageArraySnapshotThrottlingPolicy Specifies the throttling policy for individual volume/lun.
type StorageArraySnapshotThrottlingPolicy struct {
	// Specifies the volume ID of the Storage Snapshot Mgmt throttling Policy.
	Id NullableInt64 `json:"Id,omitempty"`
	// Specifies whether we will use storage snapshot managmement max snapshots config to all volumes/luns that are part of the registered entity.
	MaxSnapshotsConfigEnabled NullableBool `json:"maxSnapshotsConfigEnabled,omitempty"`
	MaxSnapshotsMgmtSnapshotConfig *StorageArraySnapshotMaxSnapshotConfig `json:"maxSnapshotsMgmtSnapshotConfig,omitempty"`
	MaxSnapshotsMgmtSpaceConfig *StorageArraySnapshotMaxSpaceConfig `json:"maxSnapshotsMgmtSpaceConfig,omitempty"`
	// Specifies whether we will use storage snapshot managmement max space config to all volumes/luns that are part of the registered entity.
	MaxSpaceConfigEnabled NullableBool `json:"maxSpaceConfigEnabled,omitempty"`
}

// NewStorageArraySnapshotThrottlingPolicy instantiates a new StorageArraySnapshotThrottlingPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageArraySnapshotThrottlingPolicy() *StorageArraySnapshotThrottlingPolicy {
	this := StorageArraySnapshotThrottlingPolicy{}
	return &this
}

// NewStorageArraySnapshotThrottlingPolicyWithDefaults instantiates a new StorageArraySnapshotThrottlingPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageArraySnapshotThrottlingPolicyWithDefaults() *StorageArraySnapshotThrottlingPolicy {
	this := StorageArraySnapshotThrottlingPolicy{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageArraySnapshotThrottlingPolicy) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageArraySnapshotThrottlingPolicy) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *StorageArraySnapshotThrottlingPolicy) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *StorageArraySnapshotThrottlingPolicy) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *StorageArraySnapshotThrottlingPolicy) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *StorageArraySnapshotThrottlingPolicy) UnsetId() {
	o.Id.Unset()
}

// GetMaxSnapshotsConfigEnabled returns the MaxSnapshotsConfigEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageArraySnapshotThrottlingPolicy) GetMaxSnapshotsConfigEnabled() bool {
	if o == nil || IsNil(o.MaxSnapshotsConfigEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.MaxSnapshotsConfigEnabled.Get()
}

// GetMaxSnapshotsConfigEnabledOk returns a tuple with the MaxSnapshotsConfigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageArraySnapshotThrottlingPolicy) GetMaxSnapshotsConfigEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxSnapshotsConfigEnabled.Get(), o.MaxSnapshotsConfigEnabled.IsSet()
}

// HasMaxSnapshotsConfigEnabled returns a boolean if a field has been set.
func (o *StorageArraySnapshotThrottlingPolicy) HasMaxSnapshotsConfigEnabled() bool {
	if o != nil && o.MaxSnapshotsConfigEnabled.IsSet() {
		return true
	}

	return false
}

// SetMaxSnapshotsConfigEnabled gets a reference to the given NullableBool and assigns it to the MaxSnapshotsConfigEnabled field.
func (o *StorageArraySnapshotThrottlingPolicy) SetMaxSnapshotsConfigEnabled(v bool) {
	o.MaxSnapshotsConfigEnabled.Set(&v)
}
// SetMaxSnapshotsConfigEnabledNil sets the value for MaxSnapshotsConfigEnabled to be an explicit nil
func (o *StorageArraySnapshotThrottlingPolicy) SetMaxSnapshotsConfigEnabledNil() {
	o.MaxSnapshotsConfigEnabled.Set(nil)
}

// UnsetMaxSnapshotsConfigEnabled ensures that no value is present for MaxSnapshotsConfigEnabled, not even an explicit nil
func (o *StorageArraySnapshotThrottlingPolicy) UnsetMaxSnapshotsConfigEnabled() {
	o.MaxSnapshotsConfigEnabled.Unset()
}

// GetMaxSnapshotsMgmtSnapshotConfig returns the MaxSnapshotsMgmtSnapshotConfig field value if set, zero value otherwise.
func (o *StorageArraySnapshotThrottlingPolicy) GetMaxSnapshotsMgmtSnapshotConfig() StorageArraySnapshotMaxSnapshotConfig {
	if o == nil || IsNil(o.MaxSnapshotsMgmtSnapshotConfig) {
		var ret StorageArraySnapshotMaxSnapshotConfig
		return ret
	}
	return *o.MaxSnapshotsMgmtSnapshotConfig
}

// GetMaxSnapshotsMgmtSnapshotConfigOk returns a tuple with the MaxSnapshotsMgmtSnapshotConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageArraySnapshotThrottlingPolicy) GetMaxSnapshotsMgmtSnapshotConfigOk() (*StorageArraySnapshotMaxSnapshotConfig, bool) {
	if o == nil || IsNil(o.MaxSnapshotsMgmtSnapshotConfig) {
		return nil, false
	}
	return o.MaxSnapshotsMgmtSnapshotConfig, true
}

// HasMaxSnapshotsMgmtSnapshotConfig returns a boolean if a field has been set.
func (o *StorageArraySnapshotThrottlingPolicy) HasMaxSnapshotsMgmtSnapshotConfig() bool {
	if o != nil && !IsNil(o.MaxSnapshotsMgmtSnapshotConfig) {
		return true
	}

	return false
}

// SetMaxSnapshotsMgmtSnapshotConfig gets a reference to the given StorageArraySnapshotMaxSnapshotConfig and assigns it to the MaxSnapshotsMgmtSnapshotConfig field.
func (o *StorageArraySnapshotThrottlingPolicy) SetMaxSnapshotsMgmtSnapshotConfig(v StorageArraySnapshotMaxSnapshotConfig) {
	o.MaxSnapshotsMgmtSnapshotConfig = &v
}

// GetMaxSnapshotsMgmtSpaceConfig returns the MaxSnapshotsMgmtSpaceConfig field value if set, zero value otherwise.
func (o *StorageArraySnapshotThrottlingPolicy) GetMaxSnapshotsMgmtSpaceConfig() StorageArraySnapshotMaxSpaceConfig {
	if o == nil || IsNil(o.MaxSnapshotsMgmtSpaceConfig) {
		var ret StorageArraySnapshotMaxSpaceConfig
		return ret
	}
	return *o.MaxSnapshotsMgmtSpaceConfig
}

// GetMaxSnapshotsMgmtSpaceConfigOk returns a tuple with the MaxSnapshotsMgmtSpaceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageArraySnapshotThrottlingPolicy) GetMaxSnapshotsMgmtSpaceConfigOk() (*StorageArraySnapshotMaxSpaceConfig, bool) {
	if o == nil || IsNil(o.MaxSnapshotsMgmtSpaceConfig) {
		return nil, false
	}
	return o.MaxSnapshotsMgmtSpaceConfig, true
}

// HasMaxSnapshotsMgmtSpaceConfig returns a boolean if a field has been set.
func (o *StorageArraySnapshotThrottlingPolicy) HasMaxSnapshotsMgmtSpaceConfig() bool {
	if o != nil && !IsNil(o.MaxSnapshotsMgmtSpaceConfig) {
		return true
	}

	return false
}

// SetMaxSnapshotsMgmtSpaceConfig gets a reference to the given StorageArraySnapshotMaxSpaceConfig and assigns it to the MaxSnapshotsMgmtSpaceConfig field.
func (o *StorageArraySnapshotThrottlingPolicy) SetMaxSnapshotsMgmtSpaceConfig(v StorageArraySnapshotMaxSpaceConfig) {
	o.MaxSnapshotsMgmtSpaceConfig = &v
}

// GetMaxSpaceConfigEnabled returns the MaxSpaceConfigEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageArraySnapshotThrottlingPolicy) GetMaxSpaceConfigEnabled() bool {
	if o == nil || IsNil(o.MaxSpaceConfigEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.MaxSpaceConfigEnabled.Get()
}

// GetMaxSpaceConfigEnabledOk returns a tuple with the MaxSpaceConfigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageArraySnapshotThrottlingPolicy) GetMaxSpaceConfigEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxSpaceConfigEnabled.Get(), o.MaxSpaceConfigEnabled.IsSet()
}

// HasMaxSpaceConfigEnabled returns a boolean if a field has been set.
func (o *StorageArraySnapshotThrottlingPolicy) HasMaxSpaceConfigEnabled() bool {
	if o != nil && o.MaxSpaceConfigEnabled.IsSet() {
		return true
	}

	return false
}

// SetMaxSpaceConfigEnabled gets a reference to the given NullableBool and assigns it to the MaxSpaceConfigEnabled field.
func (o *StorageArraySnapshotThrottlingPolicy) SetMaxSpaceConfigEnabled(v bool) {
	o.MaxSpaceConfigEnabled.Set(&v)
}
// SetMaxSpaceConfigEnabledNil sets the value for MaxSpaceConfigEnabled to be an explicit nil
func (o *StorageArraySnapshotThrottlingPolicy) SetMaxSpaceConfigEnabledNil() {
	o.MaxSpaceConfigEnabled.Set(nil)
}

// UnsetMaxSpaceConfigEnabled ensures that no value is present for MaxSpaceConfigEnabled, not even an explicit nil
func (o *StorageArraySnapshotThrottlingPolicy) UnsetMaxSpaceConfigEnabled() {
	o.MaxSpaceConfigEnabled.Unset()
}

func (o StorageArraySnapshotThrottlingPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageArraySnapshotThrottlingPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["Id"] = o.Id.Get()
	}
	if o.MaxSnapshotsConfigEnabled.IsSet() {
		toSerialize["maxSnapshotsConfigEnabled"] = o.MaxSnapshotsConfigEnabled.Get()
	}
	if !IsNil(o.MaxSnapshotsMgmtSnapshotConfig) {
		toSerialize["maxSnapshotsMgmtSnapshotConfig"] = o.MaxSnapshotsMgmtSnapshotConfig
	}
	if !IsNil(o.MaxSnapshotsMgmtSpaceConfig) {
		toSerialize["maxSnapshotsMgmtSpaceConfig"] = o.MaxSnapshotsMgmtSpaceConfig
	}
	if o.MaxSpaceConfigEnabled.IsSet() {
		toSerialize["maxSpaceConfigEnabled"] = o.MaxSpaceConfigEnabled.Get()
	}
	return toSerialize, nil
}

type NullableStorageArraySnapshotThrottlingPolicy struct {
	value *StorageArraySnapshotThrottlingPolicy
	isSet bool
}

func (v NullableStorageArraySnapshotThrottlingPolicy) Get() *StorageArraySnapshotThrottlingPolicy {
	return v.value
}

func (v *NullableStorageArraySnapshotThrottlingPolicy) Set(val *StorageArraySnapshotThrottlingPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageArraySnapshotThrottlingPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageArraySnapshotThrottlingPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageArraySnapshotThrottlingPolicy(val *StorageArraySnapshotThrottlingPolicy) *NullableStorageArraySnapshotThrottlingPolicy {
	return &NullableStorageArraySnapshotThrottlingPolicy{value: val, isSet: true}
}

func (v NullableStorageArraySnapshotThrottlingPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageArraySnapshotThrottlingPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


