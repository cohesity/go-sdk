/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SearchSfdcRecordsRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SearchSfdcRecordsRequestParams{}

// SearchSfdcRecordsRequestParams Specifies the parameters which are specific for searching Salesforce records.
type SearchSfdcRecordsRequestParams struct {
	// Specifies a list of mutuation types for an object.
	MutationTypes []string `json:"mutationTypes"`
	// Specifies the name of the object.
	ObjectName NullableString `json:"objectName"`
	// Specifies the query string to search records. Query string can be one or multiples clauses joined together by 'AND' or 'OR' claused.
	QueryString NullableString `json:"queryString,omitempty"`
	// Specifies the id of the snapshot for the object.
	SnapshotId NullableString `json:"snapshotId"`
}

type _SearchSfdcRecordsRequestParams SearchSfdcRecordsRequestParams

// NewSearchSfdcRecordsRequestParams instantiates a new SearchSfdcRecordsRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSearchSfdcRecordsRequestParams(mutationTypes []string, objectName NullableString, snapshotId NullableString) *SearchSfdcRecordsRequestParams {
	this := SearchSfdcRecordsRequestParams{}
	this.MutationTypes = mutationTypes
	this.ObjectName = objectName
	this.SnapshotId = snapshotId
	return &this
}

// NewSearchSfdcRecordsRequestParamsWithDefaults instantiates a new SearchSfdcRecordsRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSearchSfdcRecordsRequestParamsWithDefaults() *SearchSfdcRecordsRequestParams {
	this := SearchSfdcRecordsRequestParams{}
	return &this
}

// GetMutationTypes returns the MutationTypes field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *SearchSfdcRecordsRequestParams) GetMutationTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MutationTypes
}

// GetMutationTypesOk returns a tuple with the MutationTypes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSfdcRecordsRequestParams) GetMutationTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.MutationTypes) {
		return nil, false
	}
	return o.MutationTypes, true
}

// SetMutationTypes sets field value
func (o *SearchSfdcRecordsRequestParams) SetMutationTypes(v []string) {
	o.MutationTypes = v
}

// GetObjectName returns the ObjectName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SearchSfdcRecordsRequestParams) GetObjectName() string {
	if o == nil || o.ObjectName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ObjectName.Get()
}

// GetObjectNameOk returns a tuple with the ObjectName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSfdcRecordsRequestParams) GetObjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectName.Get(), o.ObjectName.IsSet()
}

// SetObjectName sets field value
func (o *SearchSfdcRecordsRequestParams) SetObjectName(v string) {
	o.ObjectName.Set(&v)
}

// GetQueryString returns the QueryString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SearchSfdcRecordsRequestParams) GetQueryString() string {
	if o == nil || IsNil(o.QueryString.Get()) {
		var ret string
		return ret
	}
	return *o.QueryString.Get()
}

// GetQueryStringOk returns a tuple with the QueryString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSfdcRecordsRequestParams) GetQueryStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueryString.Get(), o.QueryString.IsSet()
}

// HasQueryString returns a boolean if a field has been set.
func (o *SearchSfdcRecordsRequestParams) HasQueryString() bool {
	if o != nil && o.QueryString.IsSet() {
		return true
	}

	return false
}

// SetQueryString gets a reference to the given NullableString and assigns it to the QueryString field.
func (o *SearchSfdcRecordsRequestParams) SetQueryString(v string) {
	o.QueryString.Set(&v)
}
// SetQueryStringNil sets the value for QueryString to be an explicit nil
func (o *SearchSfdcRecordsRequestParams) SetQueryStringNil() {
	o.QueryString.Set(nil)
}

// UnsetQueryString ensures that no value is present for QueryString, not even an explicit nil
func (o *SearchSfdcRecordsRequestParams) UnsetQueryString() {
	o.QueryString.Unset()
}

// GetSnapshotId returns the SnapshotId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SearchSfdcRecordsRequestParams) GetSnapshotId() string {
	if o == nil || o.SnapshotId.Get() == nil {
		var ret string
		return ret
	}

	return *o.SnapshotId.Get()
}

// GetSnapshotIdOk returns a tuple with the SnapshotId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SearchSfdcRecordsRequestParams) GetSnapshotIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SnapshotId.Get(), o.SnapshotId.IsSet()
}

// SetSnapshotId sets field value
func (o *SearchSfdcRecordsRequestParams) SetSnapshotId(v string) {
	o.SnapshotId.Set(&v)
}

func (o SearchSfdcRecordsRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SearchSfdcRecordsRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MutationTypes != nil {
		toSerialize["mutationTypes"] = o.MutationTypes
	}
	toSerialize["objectName"] = o.ObjectName.Get()
	if o.QueryString.IsSet() {
		toSerialize["queryString"] = o.QueryString.Get()
	}
	toSerialize["snapshotId"] = o.SnapshotId.Get()
	return toSerialize, nil
}

func (o *SearchSfdcRecordsRequestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mutationTypes",
		"objectName",
		"snapshotId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSearchSfdcRecordsRequestParams := _SearchSfdcRecordsRequestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSearchSfdcRecordsRequestParams)

	if err != nil {
		return err
	}

	*o = SearchSfdcRecordsRequestParams(varSearchSfdcRecordsRequestParams)

	return err
}

type NullableSearchSfdcRecordsRequestParams struct {
	value *SearchSfdcRecordsRequestParams
	isSet bool
}

func (v NullableSearchSfdcRecordsRequestParams) Get() *SearchSfdcRecordsRequestParams {
	return v.value
}

func (v *NullableSearchSfdcRecordsRequestParams) Set(val *SearchSfdcRecordsRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSearchSfdcRecordsRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSearchSfdcRecordsRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSearchSfdcRecordsRequestParams(val *SearchSfdcRecordsRequestParams) *NullableSearchSfdcRecordsRequestParams {
	return &NullableSearchSfdcRecordsRequestParams{value: val, isSet: true}
}

func (v NullableSearchSfdcRecordsRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSearchSfdcRecordsRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


