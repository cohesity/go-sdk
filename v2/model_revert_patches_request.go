/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RevertPatchesRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RevertPatchesRequest{}

// RevertPatchesRequest Specifies the request to revert a patch. An optional patch level can be specified. When a patch level is specified, system keeps reverting patches until the given patch level is reverted. If no patch level is specified, just the last applied patch is reverted.
type RevertPatchesRequest struct {
	// Specifies the name of the service whose patch should be reverted.
	Service string `json:"service"`
}

type _RevertPatchesRequest RevertPatchesRequest

// NewRevertPatchesRequest instantiates a new RevertPatchesRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRevertPatchesRequest(service string) *RevertPatchesRequest {
	this := RevertPatchesRequest{}
	this.Service = service
	return &this
}

// NewRevertPatchesRequestWithDefaults instantiates a new RevertPatchesRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRevertPatchesRequestWithDefaults() *RevertPatchesRequest {
	this := RevertPatchesRequest{}
	return &this
}

// GetService returns the Service field value
func (o *RevertPatchesRequest) GetService() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Service
}

// GetServiceOk returns a tuple with the Service field value
// and a boolean to check if the value has been set.
func (o *RevertPatchesRequest) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Service, true
}

// SetService sets field value
func (o *RevertPatchesRequest) SetService(v string) {
	o.Service = v
}

func (o RevertPatchesRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RevertPatchesRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["service"] = o.Service
	return toSerialize, nil
}

func (o *RevertPatchesRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"service",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRevertPatchesRequest := _RevertPatchesRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRevertPatchesRequest)

	if err != nil {
		return err
	}

	*o = RevertPatchesRequest(varRevertPatchesRequest)

	return err
}

type NullableRevertPatchesRequest struct {
	value *RevertPatchesRequest
	isSet bool
}

func (v NullableRevertPatchesRequest) Get() *RevertPatchesRequest {
	return v.value
}

func (v *NullableRevertPatchesRequest) Set(val *RevertPatchesRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRevertPatchesRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRevertPatchesRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRevertPatchesRequest(val *RevertPatchesRequest) *NullableRevertPatchesRequest {
	return &NullableRevertPatchesRequest{value: val, isSet: true}
}

func (v NullableRevertPatchesRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRevertPatchesRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


