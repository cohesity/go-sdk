/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RecoverVmwareVmNewNetworkConfigMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverVmwareVmNewNetworkConfigMapping{}

// RecoverVmwareVmNewNetworkConfigMapping Specifies source VMs NIC to target network mapping for the VMware VMs being recovered.
type RecoverVmwareVmNewNetworkConfigMapping struct {
	// Specifies whether the attached network should be left in disabled state for this mapping. Default is false.
	DisableNetwork NullableBool `json:"disableNetwork,omitempty"`
	// Name of the VM's network adapter name.
	NetworkAdapterName NullableString `json:"networkAdapterName,omitempty"`
	OrgVdcNetwork *OrgVDCNetwork `json:"orgVdcNetwork,omitempty"`
	// Specifies whether to preserve the MAC address of the source network entity while attaching to the new target network. Default is false.
	PreserveMacAddress NullableBool `json:"preserveMacAddress,omitempty"`
	SourceNetworkEntity NullableRecoverVmwareVmNewNetworkConfigMappingSourceNetworkEntity `json:"sourceNetworkEntity,omitempty"`
	TargetNetworkEntity NullableRecoverVmwareVmNewNetworkConfigMappingTargetNetworkEntity `json:"targetNetworkEntity,omitempty"`
}

// NewRecoverVmwareVmNewNetworkConfigMapping instantiates a new RecoverVmwareVmNewNetworkConfigMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVmwareVmNewNetworkConfigMapping() *RecoverVmwareVmNewNetworkConfigMapping {
	this := RecoverVmwareVmNewNetworkConfigMapping{}
	return &this
}

// NewRecoverVmwareVmNewNetworkConfigMappingWithDefaults instantiates a new RecoverVmwareVmNewNetworkConfigMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVmwareVmNewNetworkConfigMappingWithDefaults() *RecoverVmwareVmNewNetworkConfigMapping {
	this := RecoverVmwareVmNewNetworkConfigMapping{}
	return &this
}

// GetDisableNetwork returns the DisableNetwork field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetDisableNetwork() bool {
	if o == nil || IsNil(o.DisableNetwork.Get()) {
		var ret bool
		return ret
	}
	return *o.DisableNetwork.Get()
}

// GetDisableNetworkOk returns a tuple with the DisableNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetDisableNetworkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisableNetwork.Get(), o.DisableNetwork.IsSet()
}

// HasDisableNetwork returns a boolean if a field has been set.
func (o *RecoverVmwareVmNewNetworkConfigMapping) HasDisableNetwork() bool {
	if o != nil && o.DisableNetwork.IsSet() {
		return true
	}

	return false
}

// SetDisableNetwork gets a reference to the given NullableBool and assigns it to the DisableNetwork field.
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetDisableNetwork(v bool) {
	o.DisableNetwork.Set(&v)
}
// SetDisableNetworkNil sets the value for DisableNetwork to be an explicit nil
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetDisableNetworkNil() {
	o.DisableNetwork.Set(nil)
}

// UnsetDisableNetwork ensures that no value is present for DisableNetwork, not even an explicit nil
func (o *RecoverVmwareVmNewNetworkConfigMapping) UnsetDisableNetwork() {
	o.DisableNetwork.Unset()
}

// GetNetworkAdapterName returns the NetworkAdapterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetNetworkAdapterName() string {
	if o == nil || IsNil(o.NetworkAdapterName.Get()) {
		var ret string
		return ret
	}
	return *o.NetworkAdapterName.Get()
}

// GetNetworkAdapterNameOk returns a tuple with the NetworkAdapterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetNetworkAdapterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkAdapterName.Get(), o.NetworkAdapterName.IsSet()
}

// HasNetworkAdapterName returns a boolean if a field has been set.
func (o *RecoverVmwareVmNewNetworkConfigMapping) HasNetworkAdapterName() bool {
	if o != nil && o.NetworkAdapterName.IsSet() {
		return true
	}

	return false
}

// SetNetworkAdapterName gets a reference to the given NullableString and assigns it to the NetworkAdapterName field.
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetNetworkAdapterName(v string) {
	o.NetworkAdapterName.Set(&v)
}
// SetNetworkAdapterNameNil sets the value for NetworkAdapterName to be an explicit nil
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetNetworkAdapterNameNil() {
	o.NetworkAdapterName.Set(nil)
}

// UnsetNetworkAdapterName ensures that no value is present for NetworkAdapterName, not even an explicit nil
func (o *RecoverVmwareVmNewNetworkConfigMapping) UnsetNetworkAdapterName() {
	o.NetworkAdapterName.Unset()
}

// GetOrgVdcNetwork returns the OrgVdcNetwork field value if set, zero value otherwise.
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetOrgVdcNetwork() OrgVDCNetwork {
	if o == nil || IsNil(o.OrgVdcNetwork) {
		var ret OrgVDCNetwork
		return ret
	}
	return *o.OrgVdcNetwork
}

// GetOrgVdcNetworkOk returns a tuple with the OrgVdcNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetOrgVdcNetworkOk() (*OrgVDCNetwork, bool) {
	if o == nil || IsNil(o.OrgVdcNetwork) {
		return nil, false
	}
	return o.OrgVdcNetwork, true
}

// HasOrgVdcNetwork returns a boolean if a field has been set.
func (o *RecoverVmwareVmNewNetworkConfigMapping) HasOrgVdcNetwork() bool {
	if o != nil && !IsNil(o.OrgVdcNetwork) {
		return true
	}

	return false
}

// SetOrgVdcNetwork gets a reference to the given OrgVDCNetwork and assigns it to the OrgVdcNetwork field.
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetOrgVdcNetwork(v OrgVDCNetwork) {
	o.OrgVdcNetwork = &v
}

// GetPreserveMacAddress returns the PreserveMacAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetPreserveMacAddress() bool {
	if o == nil || IsNil(o.PreserveMacAddress.Get()) {
		var ret bool
		return ret
	}
	return *o.PreserveMacAddress.Get()
}

// GetPreserveMacAddressOk returns a tuple with the PreserveMacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetPreserveMacAddressOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PreserveMacAddress.Get(), o.PreserveMacAddress.IsSet()
}

// HasPreserveMacAddress returns a boolean if a field has been set.
func (o *RecoverVmwareVmNewNetworkConfigMapping) HasPreserveMacAddress() bool {
	if o != nil && o.PreserveMacAddress.IsSet() {
		return true
	}

	return false
}

// SetPreserveMacAddress gets a reference to the given NullableBool and assigns it to the PreserveMacAddress field.
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetPreserveMacAddress(v bool) {
	o.PreserveMacAddress.Set(&v)
}
// SetPreserveMacAddressNil sets the value for PreserveMacAddress to be an explicit nil
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetPreserveMacAddressNil() {
	o.PreserveMacAddress.Set(nil)
}

// UnsetPreserveMacAddress ensures that no value is present for PreserveMacAddress, not even an explicit nil
func (o *RecoverVmwareVmNewNetworkConfigMapping) UnsetPreserveMacAddress() {
	o.PreserveMacAddress.Unset()
}

// GetSourceNetworkEntity returns the SourceNetworkEntity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetSourceNetworkEntity() RecoverVmwareVmNewNetworkConfigMappingSourceNetworkEntity {
	if o == nil || IsNil(o.SourceNetworkEntity.Get()) {
		var ret RecoverVmwareVmNewNetworkConfigMappingSourceNetworkEntity
		return ret
	}
	return *o.SourceNetworkEntity.Get()
}

// GetSourceNetworkEntityOk returns a tuple with the SourceNetworkEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetSourceNetworkEntityOk() (*RecoverVmwareVmNewNetworkConfigMappingSourceNetworkEntity, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceNetworkEntity.Get(), o.SourceNetworkEntity.IsSet()
}

// HasSourceNetworkEntity returns a boolean if a field has been set.
func (o *RecoverVmwareVmNewNetworkConfigMapping) HasSourceNetworkEntity() bool {
	if o != nil && o.SourceNetworkEntity.IsSet() {
		return true
	}

	return false
}

// SetSourceNetworkEntity gets a reference to the given NullableRecoverVmwareVmNewNetworkConfigMappingSourceNetworkEntity and assigns it to the SourceNetworkEntity field.
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetSourceNetworkEntity(v RecoverVmwareVmNewNetworkConfigMappingSourceNetworkEntity) {
	o.SourceNetworkEntity.Set(&v)
}
// SetSourceNetworkEntityNil sets the value for SourceNetworkEntity to be an explicit nil
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetSourceNetworkEntityNil() {
	o.SourceNetworkEntity.Set(nil)
}

// UnsetSourceNetworkEntity ensures that no value is present for SourceNetworkEntity, not even an explicit nil
func (o *RecoverVmwareVmNewNetworkConfigMapping) UnsetSourceNetworkEntity() {
	o.SourceNetworkEntity.Unset()
}

// GetTargetNetworkEntity returns the TargetNetworkEntity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetTargetNetworkEntity() RecoverVmwareVmNewNetworkConfigMappingTargetNetworkEntity {
	if o == nil || IsNil(o.TargetNetworkEntity.Get()) {
		var ret RecoverVmwareVmNewNetworkConfigMappingTargetNetworkEntity
		return ret
	}
	return *o.TargetNetworkEntity.Get()
}

// GetTargetNetworkEntityOk returns a tuple with the TargetNetworkEntity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmNewNetworkConfigMapping) GetTargetNetworkEntityOk() (*RecoverVmwareVmNewNetworkConfigMappingTargetNetworkEntity, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetNetworkEntity.Get(), o.TargetNetworkEntity.IsSet()
}

// HasTargetNetworkEntity returns a boolean if a field has been set.
func (o *RecoverVmwareVmNewNetworkConfigMapping) HasTargetNetworkEntity() bool {
	if o != nil && o.TargetNetworkEntity.IsSet() {
		return true
	}

	return false
}

// SetTargetNetworkEntity gets a reference to the given NullableRecoverVmwareVmNewNetworkConfigMappingTargetNetworkEntity and assigns it to the TargetNetworkEntity field.
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetTargetNetworkEntity(v RecoverVmwareVmNewNetworkConfigMappingTargetNetworkEntity) {
	o.TargetNetworkEntity.Set(&v)
}
// SetTargetNetworkEntityNil sets the value for TargetNetworkEntity to be an explicit nil
func (o *RecoverVmwareVmNewNetworkConfigMapping) SetTargetNetworkEntityNil() {
	o.TargetNetworkEntity.Set(nil)
}

// UnsetTargetNetworkEntity ensures that no value is present for TargetNetworkEntity, not even an explicit nil
func (o *RecoverVmwareVmNewNetworkConfigMapping) UnsetTargetNetworkEntity() {
	o.TargetNetworkEntity.Unset()
}

func (o RecoverVmwareVmNewNetworkConfigMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverVmwareVmNewNetworkConfigMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DisableNetwork.IsSet() {
		toSerialize["disableNetwork"] = o.DisableNetwork.Get()
	}
	if o.NetworkAdapterName.IsSet() {
		toSerialize["networkAdapterName"] = o.NetworkAdapterName.Get()
	}
	if !IsNil(o.OrgVdcNetwork) {
		toSerialize["orgVdcNetwork"] = o.OrgVdcNetwork
	}
	if o.PreserveMacAddress.IsSet() {
		toSerialize["preserveMacAddress"] = o.PreserveMacAddress.Get()
	}
	if o.SourceNetworkEntity.IsSet() {
		toSerialize["sourceNetworkEntity"] = o.SourceNetworkEntity.Get()
	}
	if o.TargetNetworkEntity.IsSet() {
		toSerialize["targetNetworkEntity"] = o.TargetNetworkEntity.Get()
	}
	return toSerialize, nil
}

type NullableRecoverVmwareVmNewNetworkConfigMapping struct {
	value *RecoverVmwareVmNewNetworkConfigMapping
	isSet bool
}

func (v NullableRecoverVmwareVmNewNetworkConfigMapping) Get() *RecoverVmwareVmNewNetworkConfigMapping {
	return v.value
}

func (v *NullableRecoverVmwareVmNewNetworkConfigMapping) Set(val *RecoverVmwareVmNewNetworkConfigMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVmwareVmNewNetworkConfigMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVmwareVmNewNetworkConfigMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVmwareVmNewNetworkConfigMapping(val *RecoverVmwareVmNewNetworkConfigMapping) *NullableRecoverVmwareVmNewNetworkConfigMapping {
	return &NullableRecoverVmwareVmNewNetworkConfigMapping{value: val, isSet: true}
}

func (v NullableRecoverVmwareVmNewNetworkConfigMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVmwareVmNewNetworkConfigMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


