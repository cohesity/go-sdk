/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NodeFreeDisks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeFreeDisks{}

// NodeFreeDisks Sepcifies the free disks of a node.
type NodeFreeDisks struct {
	// Chassis serial number.
	ChassisSerial NullableString `json:"chassisSerial,omitempty"`
	// Error message of disks assimilation request.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Specifies list of free disks of node.
	FreeDisks []FreeDisk `json:"freeDisks"`
	// Specifies the id of a node.
	NodeId NullableInt64 `json:"nodeId"`
	// Slot number of node
	Slot NullableInt64 `json:"slot,omitempty"`
}

type _NodeFreeDisks NodeFreeDisks

// NewNodeFreeDisks instantiates a new NodeFreeDisks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeFreeDisks(freeDisks []FreeDisk, nodeId NullableInt64) *NodeFreeDisks {
	this := NodeFreeDisks{}
	this.FreeDisks = freeDisks
	this.NodeId = nodeId
	return &this
}

// NewNodeFreeDisksWithDefaults instantiates a new NodeFreeDisks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeFreeDisksWithDefaults() *NodeFreeDisks {
	this := NodeFreeDisks{}
	return &this
}

// GetChassisSerial returns the ChassisSerial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeFreeDisks) GetChassisSerial() string {
	if o == nil || IsNil(o.ChassisSerial.Get()) {
		var ret string
		return ret
	}
	return *o.ChassisSerial.Get()
}

// GetChassisSerialOk returns a tuple with the ChassisSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeFreeDisks) GetChassisSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChassisSerial.Get(), o.ChassisSerial.IsSet()
}

// HasChassisSerial returns a boolean if a field has been set.
func (o *NodeFreeDisks) HasChassisSerial() bool {
	if o != nil && o.ChassisSerial.IsSet() {
		return true
	}

	return false
}

// SetChassisSerial gets a reference to the given NullableString and assigns it to the ChassisSerial field.
func (o *NodeFreeDisks) SetChassisSerial(v string) {
	o.ChassisSerial.Set(&v)
}
// SetChassisSerialNil sets the value for ChassisSerial to be an explicit nil
func (o *NodeFreeDisks) SetChassisSerialNil() {
	o.ChassisSerial.Set(nil)
}

// UnsetChassisSerial ensures that no value is present for ChassisSerial, not even an explicit nil
func (o *NodeFreeDisks) UnsetChassisSerial() {
	o.ChassisSerial.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeFreeDisks) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeFreeDisks) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *NodeFreeDisks) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *NodeFreeDisks) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *NodeFreeDisks) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *NodeFreeDisks) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetFreeDisks returns the FreeDisks field value
// If the value is explicit nil, the zero value for []FreeDisk will be returned
func (o *NodeFreeDisks) GetFreeDisks() []FreeDisk {
	if o == nil {
		var ret []FreeDisk
		return ret
	}

	return o.FreeDisks
}

// GetFreeDisksOk returns a tuple with the FreeDisks field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeFreeDisks) GetFreeDisksOk() ([]FreeDisk, bool) {
	if o == nil || IsNil(o.FreeDisks) {
		return nil, false
	}
	return o.FreeDisks, true
}

// SetFreeDisks sets field value
func (o *NodeFreeDisks) SetFreeDisks(v []FreeDisk) {
	o.FreeDisks = v
}

// GetNodeId returns the NodeId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *NodeFreeDisks) GetNodeId() int64 {
	if o == nil || o.NodeId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeFreeDisks) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// SetNodeId sets field value
func (o *NodeFreeDisks) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}

// GetSlot returns the Slot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeFreeDisks) GetSlot() int64 {
	if o == nil || IsNil(o.Slot.Get()) {
		var ret int64
		return ret
	}
	return *o.Slot.Get()
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeFreeDisks) GetSlotOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slot.Get(), o.Slot.IsSet()
}

// HasSlot returns a boolean if a field has been set.
func (o *NodeFreeDisks) HasSlot() bool {
	if o != nil && o.Slot.IsSet() {
		return true
	}

	return false
}

// SetSlot gets a reference to the given NullableInt64 and assigns it to the Slot field.
func (o *NodeFreeDisks) SetSlot(v int64) {
	o.Slot.Set(&v)
}
// SetSlotNil sets the value for Slot to be an explicit nil
func (o *NodeFreeDisks) SetSlotNil() {
	o.Slot.Set(nil)
}

// UnsetSlot ensures that no value is present for Slot, not even an explicit nil
func (o *NodeFreeDisks) UnsetSlot() {
	o.Slot.Unset()
}

func (o NodeFreeDisks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeFreeDisks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChassisSerial.IsSet() {
		toSerialize["chassisSerial"] = o.ChassisSerial.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.FreeDisks != nil {
		toSerialize["freeDisks"] = o.FreeDisks
	}
	toSerialize["nodeId"] = o.NodeId.Get()
	if o.Slot.IsSet() {
		toSerialize["slot"] = o.Slot.Get()
	}
	return toSerialize, nil
}

func (o *NodeFreeDisks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"freeDisks",
		"nodeId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNodeFreeDisks := _NodeFreeDisks{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNodeFreeDisks)

	if err != nil {
		return err
	}

	*o = NodeFreeDisks(varNodeFreeDisks)

	return err
}

type NullableNodeFreeDisks struct {
	value *NodeFreeDisks
	isSet bool
}

func (v NullableNodeFreeDisks) Get() *NodeFreeDisks {
	return v.value
}

func (v *NullableNodeFreeDisks) Set(val *NodeFreeDisks) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeFreeDisks) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeFreeDisks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeFreeDisks(val *NodeFreeDisks) *NullableNodeFreeDisks {
	return &NullableNodeFreeDisks{value: val, isSet: true}
}

func (v NullableNodeFreeDisks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeFreeDisks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


