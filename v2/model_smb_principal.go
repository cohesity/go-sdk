/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SMBPrincipal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMBPrincipal{}

// SMBPrincipal Specifies principal parameters.
type SMBPrincipal struct {
	// Specifies the domain of the principal. For active directories, this is the fully qualified domain name (FQDN).
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the principal name.
	Name NullableString `json:"name,omitempty"`
	// Specifies the principal class.
	ObjectClass NullableString `json:"objectClass,omitempty"`
	// Specifies the SID of the principal.
	Sid NullableString `json:"sid,omitempty"`
}

// NewSMBPrincipal instantiates a new SMBPrincipal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMBPrincipal() *SMBPrincipal {
	this := SMBPrincipal{}
	return &this
}

// NewSMBPrincipalWithDefaults instantiates a new SMBPrincipal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMBPrincipalWithDefaults() *SMBPrincipal {
	this := SMBPrincipal{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SMBPrincipal) GetDomain() string {
	if o == nil || IsNil(o.Domain.Get()) {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SMBPrincipal) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *SMBPrincipal) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *SMBPrincipal) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *SMBPrincipal) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *SMBPrincipal) UnsetDomain() {
	o.Domain.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SMBPrincipal) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SMBPrincipal) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SMBPrincipal) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SMBPrincipal) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SMBPrincipal) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SMBPrincipal) UnsetName() {
	o.Name.Unset()
}

// GetObjectClass returns the ObjectClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SMBPrincipal) GetObjectClass() string {
	if o == nil || IsNil(o.ObjectClass.Get()) {
		var ret string
		return ret
	}
	return *o.ObjectClass.Get()
}

// GetObjectClassOk returns a tuple with the ObjectClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SMBPrincipal) GetObjectClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectClass.Get(), o.ObjectClass.IsSet()
}

// HasObjectClass returns a boolean if a field has been set.
func (o *SMBPrincipal) HasObjectClass() bool {
	if o != nil && o.ObjectClass.IsSet() {
		return true
	}

	return false
}

// SetObjectClass gets a reference to the given NullableString and assigns it to the ObjectClass field.
func (o *SMBPrincipal) SetObjectClass(v string) {
	o.ObjectClass.Set(&v)
}
// SetObjectClassNil sets the value for ObjectClass to be an explicit nil
func (o *SMBPrincipal) SetObjectClassNil() {
	o.ObjectClass.Set(nil)
}

// UnsetObjectClass ensures that no value is present for ObjectClass, not even an explicit nil
func (o *SMBPrincipal) UnsetObjectClass() {
	o.ObjectClass.Unset()
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SMBPrincipal) GetSid() string {
	if o == nil || IsNil(o.Sid.Get()) {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SMBPrincipal) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *SMBPrincipal) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *SMBPrincipal) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *SMBPrincipal) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *SMBPrincipal) UnsetSid() {
	o.Sid.Unset()
}

func (o SMBPrincipal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMBPrincipal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ObjectClass.IsSet() {
		toSerialize["objectClass"] = o.ObjectClass.Get()
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	return toSerialize, nil
}

type NullableSMBPrincipal struct {
	value *SMBPrincipal
	isSet bool
}

func (v NullableSMBPrincipal) Get() *SMBPrincipal {
	return v.value
}

func (v *NullableSMBPrincipal) Set(val *SMBPrincipal) {
	v.value = val
	v.isSet = true
}

func (v NullableSMBPrincipal) IsSet() bool {
	return v.isSet
}

func (v *NullableSMBPrincipal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMBPrincipal(val *SMBPrincipal) *NullableSMBPrincipal {
	return &NullableSMBPrincipal{value: val, isSet: true}
}

func (v NullableSMBPrincipal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMBPrincipal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


