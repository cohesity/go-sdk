/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CohesityCaKeyInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CohesityCaKeyInfo{}

// CohesityCaKeyInfo Specifies the response to the cohesity ca keys request
type CohesityCaKeyInfo struct {
	// Certificate chain in pem format
	CaChain []string `json:"caChain,omitempty"`
	// Private key of the Cohesity CA.
	PrivateKey NullableString `json:"privateKey,omitempty"`
}

// NewCohesityCaKeyInfo instantiates a new CohesityCaKeyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCohesityCaKeyInfo() *CohesityCaKeyInfo {
	this := CohesityCaKeyInfo{}
	return &this
}

// NewCohesityCaKeyInfoWithDefaults instantiates a new CohesityCaKeyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCohesityCaKeyInfoWithDefaults() *CohesityCaKeyInfo {
	this := CohesityCaKeyInfo{}
	return &this
}

// GetCaChain returns the CaChain field value if set, zero value otherwise.
func (o *CohesityCaKeyInfo) GetCaChain() []string {
	if o == nil || IsNil(o.CaChain) {
		var ret []string
		return ret
	}
	return o.CaChain
}

// GetCaChainOk returns a tuple with the CaChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CohesityCaKeyInfo) GetCaChainOk() ([]string, bool) {
	if o == nil || IsNil(o.CaChain) {
		return nil, false
	}
	return o.CaChain, true
}

// HasCaChain returns a boolean if a field has been set.
func (o *CohesityCaKeyInfo) HasCaChain() bool {
	if o != nil && !IsNil(o.CaChain) {
		return true
	}

	return false
}

// SetCaChain gets a reference to the given []string and assigns it to the CaChain field.
func (o *CohesityCaKeyInfo) SetCaChain(v []string) {
	o.CaChain = v
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CohesityCaKeyInfo) GetPrivateKey() string {
	if o == nil || IsNil(o.PrivateKey.Get()) {
		var ret string
		return ret
	}
	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CohesityCaKeyInfo) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *CohesityCaKeyInfo) HasPrivateKey() bool {
	if o != nil && o.PrivateKey.IsSet() {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given NullableString and assigns it to the PrivateKey field.
func (o *CohesityCaKeyInfo) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}
// SetPrivateKeyNil sets the value for PrivateKey to be an explicit nil
func (o *CohesityCaKeyInfo) SetPrivateKeyNil() {
	o.PrivateKey.Set(nil)
}

// UnsetPrivateKey ensures that no value is present for PrivateKey, not even an explicit nil
func (o *CohesityCaKeyInfo) UnsetPrivateKey() {
	o.PrivateKey.Unset()
}

func (o CohesityCaKeyInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CohesityCaKeyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaChain) {
		toSerialize["caChain"] = o.CaChain
	}
	if o.PrivateKey.IsSet() {
		toSerialize["privateKey"] = o.PrivateKey.Get()
	}
	return toSerialize, nil
}

type NullableCohesityCaKeyInfo struct {
	value *CohesityCaKeyInfo
	isSet bool
}

func (v NullableCohesityCaKeyInfo) Get() *CohesityCaKeyInfo {
	return v.value
}

func (v *NullableCohesityCaKeyInfo) Set(val *CohesityCaKeyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCohesityCaKeyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCohesityCaKeyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCohesityCaKeyInfo(val *CohesityCaKeyInfo) *NullableCohesityCaKeyInfo {
	return &NullableCohesityCaKeyInfo{value: val, isSet: true}
}

func (v NullableCohesityCaKeyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCohesityCaKeyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


