/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UserAPIKeys type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserAPIKeys{}

// UserAPIKeys List of user owned API Keys.
type UserAPIKeys struct {
	// List of user owned API Keys.
	ApiKeys []UserAPIKey `json:"apiKeys,omitempty"`
}

// NewUserAPIKeys instantiates a new UserAPIKeys object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserAPIKeys() *UserAPIKeys {
	this := UserAPIKeys{}
	return &this
}

// NewUserAPIKeysWithDefaults instantiates a new UserAPIKeys object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserAPIKeysWithDefaults() *UserAPIKeys {
	this := UserAPIKeys{}
	return &this
}

// GetApiKeys returns the ApiKeys field value if set, zero value otherwise.
func (o *UserAPIKeys) GetApiKeys() []UserAPIKey {
	if o == nil || IsNil(o.ApiKeys) {
		var ret []UserAPIKey
		return ret
	}
	return o.ApiKeys
}

// GetApiKeysOk returns a tuple with the ApiKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserAPIKeys) GetApiKeysOk() ([]UserAPIKey, bool) {
	if o == nil || IsNil(o.ApiKeys) {
		return nil, false
	}
	return o.ApiKeys, true
}

// HasApiKeys returns a boolean if a field has been set.
func (o *UserAPIKeys) HasApiKeys() bool {
	if o != nil && !IsNil(o.ApiKeys) {
		return true
	}

	return false
}

// SetApiKeys gets a reference to the given []UserAPIKey and assigns it to the ApiKeys field.
func (o *UserAPIKeys) SetApiKeys(v []UserAPIKey) {
	o.ApiKeys = v
}

func (o UserAPIKeys) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserAPIKeys) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiKeys) {
		toSerialize["apiKeys"] = o.ApiKeys
	}
	return toSerialize, nil
}

type NullableUserAPIKeys struct {
	value *UserAPIKeys
	isSet bool
}

func (v NullableUserAPIKeys) Get() *UserAPIKeys {
	return v.value
}

func (v *NullableUserAPIKeys) Set(val *UserAPIKeys) {
	v.value = val
	v.isSet = true
}

func (v NullableUserAPIKeys) IsSet() bool {
	return v.isSet
}

func (v *NullableUserAPIKeys) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserAPIKeys(val *UserAPIKeys) *NullableUserAPIKeys {
	return &NullableUserAPIKeys{value: val, isSet: true}
}

func (v NullableUserAPIKeys) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserAPIKeys) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


