/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LogSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LogSchedule{}

// LogSchedule Specifies settings that defines how frequent log backup will be performed for a Protection Group.
type LogSchedule struct {
	HourSchedule *HourSchedule `json:"hourSchedule,omitempty"`
	MinuteSchedule *MinuteSchedule `json:"minuteSchedule,omitempty"`
	// Specifies how often to start new Protection Group Runs of a Protection Group. <br>'Minutes' specifies that Protection Group run starts periodically after certain number of minutes specified in 'frequency' field. <br>'Hours' specifies that Protection Group run starts periodically after certain number of hours specified in 'frequency' field.
	Unit NullableString `json:"unit"`
}

type _LogSchedule LogSchedule

// NewLogSchedule instantiates a new LogSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLogSchedule(unit NullableString) *LogSchedule {
	this := LogSchedule{}
	this.Unit = unit
	return &this
}

// NewLogScheduleWithDefaults instantiates a new LogSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLogScheduleWithDefaults() *LogSchedule {
	this := LogSchedule{}
	return &this
}

// GetHourSchedule returns the HourSchedule field value if set, zero value otherwise.
func (o *LogSchedule) GetHourSchedule() HourSchedule {
	if o == nil || IsNil(o.HourSchedule) {
		var ret HourSchedule
		return ret
	}
	return *o.HourSchedule
}

// GetHourScheduleOk returns a tuple with the HourSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSchedule) GetHourScheduleOk() (*HourSchedule, bool) {
	if o == nil || IsNil(o.HourSchedule) {
		return nil, false
	}
	return o.HourSchedule, true
}

// HasHourSchedule returns a boolean if a field has been set.
func (o *LogSchedule) HasHourSchedule() bool {
	if o != nil && !IsNil(o.HourSchedule) {
		return true
	}

	return false
}

// SetHourSchedule gets a reference to the given HourSchedule and assigns it to the HourSchedule field.
func (o *LogSchedule) SetHourSchedule(v HourSchedule) {
	o.HourSchedule = &v
}

// GetMinuteSchedule returns the MinuteSchedule field value if set, zero value otherwise.
func (o *LogSchedule) GetMinuteSchedule() MinuteSchedule {
	if o == nil || IsNil(o.MinuteSchedule) {
		var ret MinuteSchedule
		return ret
	}
	return *o.MinuteSchedule
}

// GetMinuteScheduleOk returns a tuple with the MinuteSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LogSchedule) GetMinuteScheduleOk() (*MinuteSchedule, bool) {
	if o == nil || IsNil(o.MinuteSchedule) {
		return nil, false
	}
	return o.MinuteSchedule, true
}

// HasMinuteSchedule returns a boolean if a field has been set.
func (o *LogSchedule) HasMinuteSchedule() bool {
	if o != nil && !IsNil(o.MinuteSchedule) {
		return true
	}

	return false
}

// SetMinuteSchedule gets a reference to the given MinuteSchedule and assigns it to the MinuteSchedule field.
func (o *LogSchedule) SetMinuteSchedule(v MinuteSchedule) {
	o.MinuteSchedule = &v
}

// GetUnit returns the Unit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LogSchedule) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}

	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LogSchedule) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// SetUnit sets field value
func (o *LogSchedule) SetUnit(v string) {
	o.Unit.Set(&v)
}

func (o LogSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LogSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HourSchedule) {
		toSerialize["hourSchedule"] = o.HourSchedule
	}
	if !IsNil(o.MinuteSchedule) {
		toSerialize["minuteSchedule"] = o.MinuteSchedule
	}
	toSerialize["unit"] = o.Unit.Get()
	return toSerialize, nil
}

func (o *LogSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLogSchedule := _LogSchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLogSchedule)

	if err != nil {
		return err
	}

	*o = LogSchedule(varLogSchedule)

	return err
}

type NullableLogSchedule struct {
	value *LogSchedule
	isSet bool
}

func (v NullableLogSchedule) Get() *LogSchedule {
	return v.value
}

func (v *NullableLogSchedule) Set(val *LogSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableLogSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableLogSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLogSchedule(val *LogSchedule) *NullableLogSchedule {
	return &NullableLogSchedule{value: val, isSet: true}
}

func (v NullableLogSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLogSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


