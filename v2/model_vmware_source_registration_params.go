/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VmwareSourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmwareSourceRegistrationParams{}

// VmwareSourceRegistrationParams Specifies the paramaters to register a VMware source.
type VmwareSourceRegistrationParams struct {
	EsxiParams *EsxiRegistrationParams `json:"esxiParams,omitempty"`
	// Specifies the VMware Source type.
	Type NullableString `json:"type"`
	VCenterParams *VcenterRegistrationParams `json:"vCenterParams,omitempty"`
	VcdParams *VcdRegistrationParams `json:"vcdParams,omitempty"`
}

type _VmwareSourceRegistrationParams VmwareSourceRegistrationParams

// NewVmwareSourceRegistrationParams instantiates a new VmwareSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareSourceRegistrationParams(type_ NullableString) *VmwareSourceRegistrationParams {
	this := VmwareSourceRegistrationParams{}
	this.Type = type_
	return &this
}

// NewVmwareSourceRegistrationParamsWithDefaults instantiates a new VmwareSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareSourceRegistrationParamsWithDefaults() *VmwareSourceRegistrationParams {
	this := VmwareSourceRegistrationParams{}
	return &this
}

// GetEsxiParams returns the EsxiParams field value if set, zero value otherwise.
func (o *VmwareSourceRegistrationParams) GetEsxiParams() EsxiRegistrationParams {
	if o == nil || IsNil(o.EsxiParams) {
		var ret EsxiRegistrationParams
		return ret
	}
	return *o.EsxiParams
}

// GetEsxiParamsOk returns a tuple with the EsxiParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareSourceRegistrationParams) GetEsxiParamsOk() (*EsxiRegistrationParams, bool) {
	if o == nil || IsNil(o.EsxiParams) {
		return nil, false
	}
	return o.EsxiParams, true
}

// HasEsxiParams returns a boolean if a field has been set.
func (o *VmwareSourceRegistrationParams) HasEsxiParams() bool {
	if o != nil && !IsNil(o.EsxiParams) {
		return true
	}

	return false
}

// SetEsxiParams gets a reference to the given EsxiRegistrationParams and assigns it to the EsxiParams field.
func (o *VmwareSourceRegistrationParams) SetEsxiParams(v EsxiRegistrationParams) {
	o.EsxiParams = &v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VmwareSourceRegistrationParams) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareSourceRegistrationParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *VmwareSourceRegistrationParams) SetType(v string) {
	o.Type.Set(&v)
}

// GetVCenterParams returns the VCenterParams field value if set, zero value otherwise.
func (o *VmwareSourceRegistrationParams) GetVCenterParams() VcenterRegistrationParams {
	if o == nil || IsNil(o.VCenterParams) {
		var ret VcenterRegistrationParams
		return ret
	}
	return *o.VCenterParams
}

// GetVCenterParamsOk returns a tuple with the VCenterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareSourceRegistrationParams) GetVCenterParamsOk() (*VcenterRegistrationParams, bool) {
	if o == nil || IsNil(o.VCenterParams) {
		return nil, false
	}
	return o.VCenterParams, true
}

// HasVCenterParams returns a boolean if a field has been set.
func (o *VmwareSourceRegistrationParams) HasVCenterParams() bool {
	if o != nil && !IsNil(o.VCenterParams) {
		return true
	}

	return false
}

// SetVCenterParams gets a reference to the given VcenterRegistrationParams and assigns it to the VCenterParams field.
func (o *VmwareSourceRegistrationParams) SetVCenterParams(v VcenterRegistrationParams) {
	o.VCenterParams = &v
}

// GetVcdParams returns the VcdParams field value if set, zero value otherwise.
func (o *VmwareSourceRegistrationParams) GetVcdParams() VcdRegistrationParams {
	if o == nil || IsNil(o.VcdParams) {
		var ret VcdRegistrationParams
		return ret
	}
	return *o.VcdParams
}

// GetVcdParamsOk returns a tuple with the VcdParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareSourceRegistrationParams) GetVcdParamsOk() (*VcdRegistrationParams, bool) {
	if o == nil || IsNil(o.VcdParams) {
		return nil, false
	}
	return o.VcdParams, true
}

// HasVcdParams returns a boolean if a field has been set.
func (o *VmwareSourceRegistrationParams) HasVcdParams() bool {
	if o != nil && !IsNil(o.VcdParams) {
		return true
	}

	return false
}

// SetVcdParams gets a reference to the given VcdRegistrationParams and assigns it to the VcdParams field.
func (o *VmwareSourceRegistrationParams) SetVcdParams(v VcdRegistrationParams) {
	o.VcdParams = &v
}

func (o VmwareSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmwareSourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EsxiParams) {
		toSerialize["esxiParams"] = o.EsxiParams
	}
	toSerialize["type"] = o.Type.Get()
	if !IsNil(o.VCenterParams) {
		toSerialize["vCenterParams"] = o.VCenterParams
	}
	if !IsNil(o.VcdParams) {
		toSerialize["vcdParams"] = o.VcdParams
	}
	return toSerialize, nil
}

func (o *VmwareSourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVmwareSourceRegistrationParams := _VmwareSourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVmwareSourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = VmwareSourceRegistrationParams(varVmwareSourceRegistrationParams)

	return err
}

type NullableVmwareSourceRegistrationParams struct {
	value *VmwareSourceRegistrationParams
	isSet bool
}

func (v NullableVmwareSourceRegistrationParams) Get() *VmwareSourceRegistrationParams {
	return v.value
}

func (v *NullableVmwareSourceRegistrationParams) Set(val *VmwareSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareSourceRegistrationParams(val *VmwareSourceRegistrationParams) *NullableVmwareSourceRegistrationParams {
	return &NullableVmwareSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableVmwareSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


