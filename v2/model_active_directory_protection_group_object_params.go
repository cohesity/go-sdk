/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ActiveDirectoryProtectionGroupObjectParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryProtectionGroupObjectParams{}

// ActiveDirectoryProtectionGroupObjectParams Specifies the object identifier to for the active directory protection group.
type ActiveDirectoryProtectionGroupObjectParams struct {
	// Specifies the specific parameters required for active directory app configuration.
	AppParams []ActiveDirectoryAppParams `json:"appParams,omitempty"`
	// Specifies whether to take bmr backup. If this is not specified, the bmr backup won't be enabled.
	EnableSystemBackup NullableBool `json:"enableSystemBackup,omitempty"`
	// Specifies the id of the registered active directory source.
	SourceId NullableInt64 `json:"sourceId"`
	// Specifies the name of the registered active directory source.
	SourceName NullableString `json:"sourceName,omitempty"`
}

type _ActiveDirectoryProtectionGroupObjectParams ActiveDirectoryProtectionGroupObjectParams

// NewActiveDirectoryProtectionGroupObjectParams instantiates a new ActiveDirectoryProtectionGroupObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryProtectionGroupObjectParams(sourceId NullableInt64) *ActiveDirectoryProtectionGroupObjectParams {
	this := ActiveDirectoryProtectionGroupObjectParams{}
	this.SourceId = sourceId
	return &this
}

// NewActiveDirectoryProtectionGroupObjectParamsWithDefaults instantiates a new ActiveDirectoryProtectionGroupObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryProtectionGroupObjectParamsWithDefaults() *ActiveDirectoryProtectionGroupObjectParams {
	this := ActiveDirectoryProtectionGroupObjectParams{}
	return &this
}

// GetAppParams returns the AppParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryProtectionGroupObjectParams) GetAppParams() []ActiveDirectoryAppParams {
	if o == nil {
		var ret []ActiveDirectoryAppParams
		return ret
	}
	return o.AppParams
}

// GetAppParamsOk returns a tuple with the AppParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryProtectionGroupObjectParams) GetAppParamsOk() ([]ActiveDirectoryAppParams, bool) {
	if o == nil || IsNil(o.AppParams) {
		return nil, false
	}
	return o.AppParams, true
}

// HasAppParams returns a boolean if a field has been set.
func (o *ActiveDirectoryProtectionGroupObjectParams) HasAppParams() bool {
	if o != nil && !IsNil(o.AppParams) {
		return true
	}

	return false
}

// SetAppParams gets a reference to the given []ActiveDirectoryAppParams and assigns it to the AppParams field.
func (o *ActiveDirectoryProtectionGroupObjectParams) SetAppParams(v []ActiveDirectoryAppParams) {
	o.AppParams = v
}

// GetEnableSystemBackup returns the EnableSystemBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryProtectionGroupObjectParams) GetEnableSystemBackup() bool {
	if o == nil || IsNil(o.EnableSystemBackup.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSystemBackup.Get()
}

// GetEnableSystemBackupOk returns a tuple with the EnableSystemBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryProtectionGroupObjectParams) GetEnableSystemBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSystemBackup.Get(), o.EnableSystemBackup.IsSet()
}

// HasEnableSystemBackup returns a boolean if a field has been set.
func (o *ActiveDirectoryProtectionGroupObjectParams) HasEnableSystemBackup() bool {
	if o != nil && o.EnableSystemBackup.IsSet() {
		return true
	}

	return false
}

// SetEnableSystemBackup gets a reference to the given NullableBool and assigns it to the EnableSystemBackup field.
func (o *ActiveDirectoryProtectionGroupObjectParams) SetEnableSystemBackup(v bool) {
	o.EnableSystemBackup.Set(&v)
}
// SetEnableSystemBackupNil sets the value for EnableSystemBackup to be an explicit nil
func (o *ActiveDirectoryProtectionGroupObjectParams) SetEnableSystemBackupNil() {
	o.EnableSystemBackup.Set(nil)
}

// UnsetEnableSystemBackup ensures that no value is present for EnableSystemBackup, not even an explicit nil
func (o *ActiveDirectoryProtectionGroupObjectParams) UnsetEnableSystemBackup() {
	o.EnableSystemBackup.Unset()
}

// GetSourceId returns the SourceId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *ActiveDirectoryProtectionGroupObjectParams) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryProtectionGroupObjectParams) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// SetSourceId sets field value
func (o *ActiveDirectoryProtectionGroupObjectParams) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryProtectionGroupObjectParams) GetSourceName() string {
	if o == nil || IsNil(o.SourceName.Get()) {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryProtectionGroupObjectParams) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *ActiveDirectoryProtectionGroupObjectParams) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *ActiveDirectoryProtectionGroupObjectParams) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *ActiveDirectoryProtectionGroupObjectParams) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *ActiveDirectoryProtectionGroupObjectParams) UnsetSourceName() {
	o.SourceName.Unset()
}

func (o ActiveDirectoryProtectionGroupObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryProtectionGroupObjectParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AppParams != nil {
		toSerialize["appParams"] = o.AppParams
	}
	if o.EnableSystemBackup.IsSet() {
		toSerialize["enableSystemBackup"] = o.EnableSystemBackup.Get()
	}
	toSerialize["sourceId"] = o.SourceId.Get()
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	return toSerialize, nil
}

func (o *ActiveDirectoryProtectionGroupObjectParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varActiveDirectoryProtectionGroupObjectParams := _ActiveDirectoryProtectionGroupObjectParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varActiveDirectoryProtectionGroupObjectParams)

	if err != nil {
		return err
	}

	*o = ActiveDirectoryProtectionGroupObjectParams(varActiveDirectoryProtectionGroupObjectParams)

	return err
}

type NullableActiveDirectoryProtectionGroupObjectParams struct {
	value *ActiveDirectoryProtectionGroupObjectParams
	isSet bool
}

func (v NullableActiveDirectoryProtectionGroupObjectParams) Get() *ActiveDirectoryProtectionGroupObjectParams {
	return v.value
}

func (v *NullableActiveDirectoryProtectionGroupObjectParams) Set(val *ActiveDirectoryProtectionGroupObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryProtectionGroupObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryProtectionGroupObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryProtectionGroupObjectParams(val *ActiveDirectoryProtectionGroupObjectParams) *NullableActiveDirectoryProtectionGroupObjectParams {
	return &NullableActiveDirectoryProtectionGroupObjectParams{value: val, isSet: true}
}

func (v NullableActiveDirectoryProtectionGroupObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryProtectionGroupObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


