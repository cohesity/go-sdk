/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the StorageDomainStoragePolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageDomainStoragePolicy{}

// StorageDomainStoragePolicy Specifies the storage policy for this Storage Domain.
type StorageDomainStoragePolicy struct {
	// Specifies the encryption mode for a Storage Domain.
	AesEncryptionMode NullableString `json:"aesEncryptionMode,omitempty"`
	// Specifies whether app marker detection is enabled. When enabled, app markers will be removed from data and put in separate chunks.
	AppMarkerDetectionEnabled NullableBool `json:"appMarkerDetectionEnabled,omitempty"`
	// Specifies the vault id assigned for cloud spill for a Storage Domain.
	CloudSpillVaultId NullableInt64 `json:"cloudSpillVaultId,omitempty"`
	CompressionParams *StoragePolicyCompressionParams `json:"compressionParams,omitempty"`
	// Specifies the time in seconds when deduplication and compression of the Storage Domain starts.
	DeduplicationCompressionDelaySecs NullableInt32 `json:"deduplicationCompressionDelaySecs,omitempty"`
	DeduplicationParams *StoragePolicyDeduplicationParams `json:"deduplicationParams,omitempty"`
	// Specifies the encryption type for a Storage Domain.
	EncryptionType NullableString `json:"encryptionType,omitempty"`
	ErasureCodingParams *StoragePolicyErasureCodingParams `json:"erasureCodingParams,omitempty"`
	// Specifies the number of disk failures to tolerate for a Storage Domain. By default, this field is 1 for cluster with three or more nodes. If erasure coding is enabled, this field will be the same as numCodedStripes.
	NumDiskFailuresTolerated NullableInt32 `json:"numDiskFailuresTolerated,omitempty"`
	// Specifies the number of node failures to tolerate for a Storage Domain. By default this field is replication factor minus 1 for replication chunk files and is the same as numCodedStripes for erasure coding chunk files.
	NumNodeFailuresTolerated NullableInt32 `json:"numNodeFailuresTolerated,omitempty"`
}

// NewStorageDomainStoragePolicy instantiates a new StorageDomainStoragePolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageDomainStoragePolicy() *StorageDomainStoragePolicy {
	this := StorageDomainStoragePolicy{}
	return &this
}

// NewStorageDomainStoragePolicyWithDefaults instantiates a new StorageDomainStoragePolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageDomainStoragePolicyWithDefaults() *StorageDomainStoragePolicy {
	this := StorageDomainStoragePolicy{}
	return &this
}

// GetAesEncryptionMode returns the AesEncryptionMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageDomainStoragePolicy) GetAesEncryptionMode() string {
	if o == nil || IsNil(o.AesEncryptionMode.Get()) {
		var ret string
		return ret
	}
	return *o.AesEncryptionMode.Get()
}

// GetAesEncryptionModeOk returns a tuple with the AesEncryptionMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainStoragePolicy) GetAesEncryptionModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AesEncryptionMode.Get(), o.AesEncryptionMode.IsSet()
}

// HasAesEncryptionMode returns a boolean if a field has been set.
func (o *StorageDomainStoragePolicy) HasAesEncryptionMode() bool {
	if o != nil && o.AesEncryptionMode.IsSet() {
		return true
	}

	return false
}

// SetAesEncryptionMode gets a reference to the given NullableString and assigns it to the AesEncryptionMode field.
func (o *StorageDomainStoragePolicy) SetAesEncryptionMode(v string) {
	o.AesEncryptionMode.Set(&v)
}
// SetAesEncryptionModeNil sets the value for AesEncryptionMode to be an explicit nil
func (o *StorageDomainStoragePolicy) SetAesEncryptionModeNil() {
	o.AesEncryptionMode.Set(nil)
}

// UnsetAesEncryptionMode ensures that no value is present for AesEncryptionMode, not even an explicit nil
func (o *StorageDomainStoragePolicy) UnsetAesEncryptionMode() {
	o.AesEncryptionMode.Unset()
}

// GetAppMarkerDetectionEnabled returns the AppMarkerDetectionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageDomainStoragePolicy) GetAppMarkerDetectionEnabled() bool {
	if o == nil || IsNil(o.AppMarkerDetectionEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.AppMarkerDetectionEnabled.Get()
}

// GetAppMarkerDetectionEnabledOk returns a tuple with the AppMarkerDetectionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainStoragePolicy) GetAppMarkerDetectionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppMarkerDetectionEnabled.Get(), o.AppMarkerDetectionEnabled.IsSet()
}

// HasAppMarkerDetectionEnabled returns a boolean if a field has been set.
func (o *StorageDomainStoragePolicy) HasAppMarkerDetectionEnabled() bool {
	if o != nil && o.AppMarkerDetectionEnabled.IsSet() {
		return true
	}

	return false
}

// SetAppMarkerDetectionEnabled gets a reference to the given NullableBool and assigns it to the AppMarkerDetectionEnabled field.
func (o *StorageDomainStoragePolicy) SetAppMarkerDetectionEnabled(v bool) {
	o.AppMarkerDetectionEnabled.Set(&v)
}
// SetAppMarkerDetectionEnabledNil sets the value for AppMarkerDetectionEnabled to be an explicit nil
func (o *StorageDomainStoragePolicy) SetAppMarkerDetectionEnabledNil() {
	o.AppMarkerDetectionEnabled.Set(nil)
}

// UnsetAppMarkerDetectionEnabled ensures that no value is present for AppMarkerDetectionEnabled, not even an explicit nil
func (o *StorageDomainStoragePolicy) UnsetAppMarkerDetectionEnabled() {
	o.AppMarkerDetectionEnabled.Unset()
}

// GetCloudSpillVaultId returns the CloudSpillVaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageDomainStoragePolicy) GetCloudSpillVaultId() int64 {
	if o == nil || IsNil(o.CloudSpillVaultId.Get()) {
		var ret int64
		return ret
	}
	return *o.CloudSpillVaultId.Get()
}

// GetCloudSpillVaultIdOk returns a tuple with the CloudSpillVaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainStoragePolicy) GetCloudSpillVaultIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudSpillVaultId.Get(), o.CloudSpillVaultId.IsSet()
}

// HasCloudSpillVaultId returns a boolean if a field has been set.
func (o *StorageDomainStoragePolicy) HasCloudSpillVaultId() bool {
	if o != nil && o.CloudSpillVaultId.IsSet() {
		return true
	}

	return false
}

// SetCloudSpillVaultId gets a reference to the given NullableInt64 and assigns it to the CloudSpillVaultId field.
func (o *StorageDomainStoragePolicy) SetCloudSpillVaultId(v int64) {
	o.CloudSpillVaultId.Set(&v)
}
// SetCloudSpillVaultIdNil sets the value for CloudSpillVaultId to be an explicit nil
func (o *StorageDomainStoragePolicy) SetCloudSpillVaultIdNil() {
	o.CloudSpillVaultId.Set(nil)
}

// UnsetCloudSpillVaultId ensures that no value is present for CloudSpillVaultId, not even an explicit nil
func (o *StorageDomainStoragePolicy) UnsetCloudSpillVaultId() {
	o.CloudSpillVaultId.Unset()
}

// GetCompressionParams returns the CompressionParams field value if set, zero value otherwise.
func (o *StorageDomainStoragePolicy) GetCompressionParams() StoragePolicyCompressionParams {
	if o == nil || IsNil(o.CompressionParams) {
		var ret StoragePolicyCompressionParams
		return ret
	}
	return *o.CompressionParams
}

// GetCompressionParamsOk returns a tuple with the CompressionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageDomainStoragePolicy) GetCompressionParamsOk() (*StoragePolicyCompressionParams, bool) {
	if o == nil || IsNil(o.CompressionParams) {
		return nil, false
	}
	return o.CompressionParams, true
}

// HasCompressionParams returns a boolean if a field has been set.
func (o *StorageDomainStoragePolicy) HasCompressionParams() bool {
	if o != nil && !IsNil(o.CompressionParams) {
		return true
	}

	return false
}

// SetCompressionParams gets a reference to the given StoragePolicyCompressionParams and assigns it to the CompressionParams field.
func (o *StorageDomainStoragePolicy) SetCompressionParams(v StoragePolicyCompressionParams) {
	o.CompressionParams = &v
}

// GetDeduplicationCompressionDelaySecs returns the DeduplicationCompressionDelaySecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageDomainStoragePolicy) GetDeduplicationCompressionDelaySecs() int32 {
	if o == nil || IsNil(o.DeduplicationCompressionDelaySecs.Get()) {
		var ret int32
		return ret
	}
	return *o.DeduplicationCompressionDelaySecs.Get()
}

// GetDeduplicationCompressionDelaySecsOk returns a tuple with the DeduplicationCompressionDelaySecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainStoragePolicy) GetDeduplicationCompressionDelaySecsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeduplicationCompressionDelaySecs.Get(), o.DeduplicationCompressionDelaySecs.IsSet()
}

// HasDeduplicationCompressionDelaySecs returns a boolean if a field has been set.
func (o *StorageDomainStoragePolicy) HasDeduplicationCompressionDelaySecs() bool {
	if o != nil && o.DeduplicationCompressionDelaySecs.IsSet() {
		return true
	}

	return false
}

// SetDeduplicationCompressionDelaySecs gets a reference to the given NullableInt32 and assigns it to the DeduplicationCompressionDelaySecs field.
func (o *StorageDomainStoragePolicy) SetDeduplicationCompressionDelaySecs(v int32) {
	o.DeduplicationCompressionDelaySecs.Set(&v)
}
// SetDeduplicationCompressionDelaySecsNil sets the value for DeduplicationCompressionDelaySecs to be an explicit nil
func (o *StorageDomainStoragePolicy) SetDeduplicationCompressionDelaySecsNil() {
	o.DeduplicationCompressionDelaySecs.Set(nil)
}

// UnsetDeduplicationCompressionDelaySecs ensures that no value is present for DeduplicationCompressionDelaySecs, not even an explicit nil
func (o *StorageDomainStoragePolicy) UnsetDeduplicationCompressionDelaySecs() {
	o.DeduplicationCompressionDelaySecs.Unset()
}

// GetDeduplicationParams returns the DeduplicationParams field value if set, zero value otherwise.
func (o *StorageDomainStoragePolicy) GetDeduplicationParams() StoragePolicyDeduplicationParams {
	if o == nil || IsNil(o.DeduplicationParams) {
		var ret StoragePolicyDeduplicationParams
		return ret
	}
	return *o.DeduplicationParams
}

// GetDeduplicationParamsOk returns a tuple with the DeduplicationParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageDomainStoragePolicy) GetDeduplicationParamsOk() (*StoragePolicyDeduplicationParams, bool) {
	if o == nil || IsNil(o.DeduplicationParams) {
		return nil, false
	}
	return o.DeduplicationParams, true
}

// HasDeduplicationParams returns a boolean if a field has been set.
func (o *StorageDomainStoragePolicy) HasDeduplicationParams() bool {
	if o != nil && !IsNil(o.DeduplicationParams) {
		return true
	}

	return false
}

// SetDeduplicationParams gets a reference to the given StoragePolicyDeduplicationParams and assigns it to the DeduplicationParams field.
func (o *StorageDomainStoragePolicy) SetDeduplicationParams(v StoragePolicyDeduplicationParams) {
	o.DeduplicationParams = &v
}

// GetEncryptionType returns the EncryptionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageDomainStoragePolicy) GetEncryptionType() string {
	if o == nil || IsNil(o.EncryptionType.Get()) {
		var ret string
		return ret
	}
	return *o.EncryptionType.Get()
}

// GetEncryptionTypeOk returns a tuple with the EncryptionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainStoragePolicy) GetEncryptionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionType.Get(), o.EncryptionType.IsSet()
}

// HasEncryptionType returns a boolean if a field has been set.
func (o *StorageDomainStoragePolicy) HasEncryptionType() bool {
	if o != nil && o.EncryptionType.IsSet() {
		return true
	}

	return false
}

// SetEncryptionType gets a reference to the given NullableString and assigns it to the EncryptionType field.
func (o *StorageDomainStoragePolicy) SetEncryptionType(v string) {
	o.EncryptionType.Set(&v)
}
// SetEncryptionTypeNil sets the value for EncryptionType to be an explicit nil
func (o *StorageDomainStoragePolicy) SetEncryptionTypeNil() {
	o.EncryptionType.Set(nil)
}

// UnsetEncryptionType ensures that no value is present for EncryptionType, not even an explicit nil
func (o *StorageDomainStoragePolicy) UnsetEncryptionType() {
	o.EncryptionType.Unset()
}

// GetErasureCodingParams returns the ErasureCodingParams field value if set, zero value otherwise.
func (o *StorageDomainStoragePolicy) GetErasureCodingParams() StoragePolicyErasureCodingParams {
	if o == nil || IsNil(o.ErasureCodingParams) {
		var ret StoragePolicyErasureCodingParams
		return ret
	}
	return *o.ErasureCodingParams
}

// GetErasureCodingParamsOk returns a tuple with the ErasureCodingParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageDomainStoragePolicy) GetErasureCodingParamsOk() (*StoragePolicyErasureCodingParams, bool) {
	if o == nil || IsNil(o.ErasureCodingParams) {
		return nil, false
	}
	return o.ErasureCodingParams, true
}

// HasErasureCodingParams returns a boolean if a field has been set.
func (o *StorageDomainStoragePolicy) HasErasureCodingParams() bool {
	if o != nil && !IsNil(o.ErasureCodingParams) {
		return true
	}

	return false
}

// SetErasureCodingParams gets a reference to the given StoragePolicyErasureCodingParams and assigns it to the ErasureCodingParams field.
func (o *StorageDomainStoragePolicy) SetErasureCodingParams(v StoragePolicyErasureCodingParams) {
	o.ErasureCodingParams = &v
}

// GetNumDiskFailuresTolerated returns the NumDiskFailuresTolerated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageDomainStoragePolicy) GetNumDiskFailuresTolerated() int32 {
	if o == nil || IsNil(o.NumDiskFailuresTolerated.Get()) {
		var ret int32
		return ret
	}
	return *o.NumDiskFailuresTolerated.Get()
}

// GetNumDiskFailuresToleratedOk returns a tuple with the NumDiskFailuresTolerated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainStoragePolicy) GetNumDiskFailuresToleratedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumDiskFailuresTolerated.Get(), o.NumDiskFailuresTolerated.IsSet()
}

// HasNumDiskFailuresTolerated returns a boolean if a field has been set.
func (o *StorageDomainStoragePolicy) HasNumDiskFailuresTolerated() bool {
	if o != nil && o.NumDiskFailuresTolerated.IsSet() {
		return true
	}

	return false
}

// SetNumDiskFailuresTolerated gets a reference to the given NullableInt32 and assigns it to the NumDiskFailuresTolerated field.
func (o *StorageDomainStoragePolicy) SetNumDiskFailuresTolerated(v int32) {
	o.NumDiskFailuresTolerated.Set(&v)
}
// SetNumDiskFailuresToleratedNil sets the value for NumDiskFailuresTolerated to be an explicit nil
func (o *StorageDomainStoragePolicy) SetNumDiskFailuresToleratedNil() {
	o.NumDiskFailuresTolerated.Set(nil)
}

// UnsetNumDiskFailuresTolerated ensures that no value is present for NumDiskFailuresTolerated, not even an explicit nil
func (o *StorageDomainStoragePolicy) UnsetNumDiskFailuresTolerated() {
	o.NumDiskFailuresTolerated.Unset()
}

// GetNumNodeFailuresTolerated returns the NumNodeFailuresTolerated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageDomainStoragePolicy) GetNumNodeFailuresTolerated() int32 {
	if o == nil || IsNil(o.NumNodeFailuresTolerated.Get()) {
		var ret int32
		return ret
	}
	return *o.NumNodeFailuresTolerated.Get()
}

// GetNumNodeFailuresToleratedOk returns a tuple with the NumNodeFailuresTolerated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainStoragePolicy) GetNumNodeFailuresToleratedOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumNodeFailuresTolerated.Get(), o.NumNodeFailuresTolerated.IsSet()
}

// HasNumNodeFailuresTolerated returns a boolean if a field has been set.
func (o *StorageDomainStoragePolicy) HasNumNodeFailuresTolerated() bool {
	if o != nil && o.NumNodeFailuresTolerated.IsSet() {
		return true
	}

	return false
}

// SetNumNodeFailuresTolerated gets a reference to the given NullableInt32 and assigns it to the NumNodeFailuresTolerated field.
func (o *StorageDomainStoragePolicy) SetNumNodeFailuresTolerated(v int32) {
	o.NumNodeFailuresTolerated.Set(&v)
}
// SetNumNodeFailuresToleratedNil sets the value for NumNodeFailuresTolerated to be an explicit nil
func (o *StorageDomainStoragePolicy) SetNumNodeFailuresToleratedNil() {
	o.NumNodeFailuresTolerated.Set(nil)
}

// UnsetNumNodeFailuresTolerated ensures that no value is present for NumNodeFailuresTolerated, not even an explicit nil
func (o *StorageDomainStoragePolicy) UnsetNumNodeFailuresTolerated() {
	o.NumNodeFailuresTolerated.Unset()
}

func (o StorageDomainStoragePolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageDomainStoragePolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AesEncryptionMode.IsSet() {
		toSerialize["aesEncryptionMode"] = o.AesEncryptionMode.Get()
	}
	if o.AppMarkerDetectionEnabled.IsSet() {
		toSerialize["appMarkerDetectionEnabled"] = o.AppMarkerDetectionEnabled.Get()
	}
	if o.CloudSpillVaultId.IsSet() {
		toSerialize["cloudSpillVaultId"] = o.CloudSpillVaultId.Get()
	}
	if !IsNil(o.CompressionParams) {
		toSerialize["compressionParams"] = o.CompressionParams
	}
	if o.DeduplicationCompressionDelaySecs.IsSet() {
		toSerialize["deduplicationCompressionDelaySecs"] = o.DeduplicationCompressionDelaySecs.Get()
	}
	if !IsNil(o.DeduplicationParams) {
		toSerialize["deduplicationParams"] = o.DeduplicationParams
	}
	if o.EncryptionType.IsSet() {
		toSerialize["encryptionType"] = o.EncryptionType.Get()
	}
	if !IsNil(o.ErasureCodingParams) {
		toSerialize["erasureCodingParams"] = o.ErasureCodingParams
	}
	if o.NumDiskFailuresTolerated.IsSet() {
		toSerialize["numDiskFailuresTolerated"] = o.NumDiskFailuresTolerated.Get()
	}
	if o.NumNodeFailuresTolerated.IsSet() {
		toSerialize["numNodeFailuresTolerated"] = o.NumNodeFailuresTolerated.Get()
	}
	return toSerialize, nil
}

type NullableStorageDomainStoragePolicy struct {
	value *StorageDomainStoragePolicy
	isSet bool
}

func (v NullableStorageDomainStoragePolicy) Get() *StorageDomainStoragePolicy {
	return v.value
}

func (v *NullableStorageDomainStoragePolicy) Set(val *StorageDomainStoragePolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageDomainStoragePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageDomainStoragePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageDomainStoragePolicy(val *StorageDomainStoragePolicy) *NullableStorageDomainStoragePolicy {
	return &NullableStorageDomainStoragePolicy{value: val, isSet: true}
}

func (v NullableStorageDomainStoragePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageDomainStoragePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


