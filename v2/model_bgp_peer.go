/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BgpPeer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpPeer{}

// BgpPeer BGP peer information.
type BgpPeer struct {
	// IP Address.
	AddressOrTag NullableString `json:"addressOrTag,omitempty"`
	// Peer's description.
	Description NullableString `json:"description,omitempty"`
	// Remote AS.
	RemoteAS NullableInt32 `json:"remoteAS,omitempty"`
	Timers *BgpTimers `json:"timers,omitempty"`
}

// NewBgpPeer instantiates a new BgpPeer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpPeer() *BgpPeer {
	this := BgpPeer{}
	return &this
}

// NewBgpPeerWithDefaults instantiates a new BgpPeer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpPeerWithDefaults() *BgpPeer {
	this := BgpPeer{}
	return &this
}

// GetAddressOrTag returns the AddressOrTag field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BgpPeer) GetAddressOrTag() string {
	if o == nil || IsNil(o.AddressOrTag.Get()) {
		var ret string
		return ret
	}
	return *o.AddressOrTag.Get()
}

// GetAddressOrTagOk returns a tuple with the AddressOrTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BgpPeer) GetAddressOrTagOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AddressOrTag.Get(), o.AddressOrTag.IsSet()
}

// HasAddressOrTag returns a boolean if a field has been set.
func (o *BgpPeer) HasAddressOrTag() bool {
	if o != nil && o.AddressOrTag.IsSet() {
		return true
	}

	return false
}

// SetAddressOrTag gets a reference to the given NullableString and assigns it to the AddressOrTag field.
func (o *BgpPeer) SetAddressOrTag(v string) {
	o.AddressOrTag.Set(&v)
}
// SetAddressOrTagNil sets the value for AddressOrTag to be an explicit nil
func (o *BgpPeer) SetAddressOrTagNil() {
	o.AddressOrTag.Set(nil)
}

// UnsetAddressOrTag ensures that no value is present for AddressOrTag, not even an explicit nil
func (o *BgpPeer) UnsetAddressOrTag() {
	o.AddressOrTag.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BgpPeer) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BgpPeer) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *BgpPeer) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *BgpPeer) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *BgpPeer) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *BgpPeer) UnsetDescription() {
	o.Description.Unset()
}

// GetRemoteAS returns the RemoteAS field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BgpPeer) GetRemoteAS() int32 {
	if o == nil || IsNil(o.RemoteAS.Get()) {
		var ret int32
		return ret
	}
	return *o.RemoteAS.Get()
}

// GetRemoteASOk returns a tuple with the RemoteAS field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BgpPeer) GetRemoteASOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoteAS.Get(), o.RemoteAS.IsSet()
}

// HasRemoteAS returns a boolean if a field has been set.
func (o *BgpPeer) HasRemoteAS() bool {
	if o != nil && o.RemoteAS.IsSet() {
		return true
	}

	return false
}

// SetRemoteAS gets a reference to the given NullableInt32 and assigns it to the RemoteAS field.
func (o *BgpPeer) SetRemoteAS(v int32) {
	o.RemoteAS.Set(&v)
}
// SetRemoteASNil sets the value for RemoteAS to be an explicit nil
func (o *BgpPeer) SetRemoteASNil() {
	o.RemoteAS.Set(nil)
}

// UnsetRemoteAS ensures that no value is present for RemoteAS, not even an explicit nil
func (o *BgpPeer) UnsetRemoteAS() {
	o.RemoteAS.Unset()
}

// GetTimers returns the Timers field value if set, zero value otherwise.
func (o *BgpPeer) GetTimers() BgpTimers {
	if o == nil || IsNil(o.Timers) {
		var ret BgpTimers
		return ret
	}
	return *o.Timers
}

// GetTimersOk returns a tuple with the Timers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BgpPeer) GetTimersOk() (*BgpTimers, bool) {
	if o == nil || IsNil(o.Timers) {
		return nil, false
	}
	return o.Timers, true
}

// HasTimers returns a boolean if a field has been set.
func (o *BgpPeer) HasTimers() bool {
	if o != nil && !IsNil(o.Timers) {
		return true
	}

	return false
}

// SetTimers gets a reference to the given BgpTimers and assigns it to the Timers field.
func (o *BgpPeer) SetTimers(v BgpTimers) {
	o.Timers = &v
}

func (o BgpPeer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpPeer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AddressOrTag.IsSet() {
		toSerialize["addressOrTag"] = o.AddressOrTag.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.RemoteAS.IsSet() {
		toSerialize["remoteAS"] = o.RemoteAS.Get()
	}
	if !IsNil(o.Timers) {
		toSerialize["timers"] = o.Timers
	}
	return toSerialize, nil
}

type NullableBgpPeer struct {
	value *BgpPeer
	isSet bool
}

func (v NullableBgpPeer) Get() *BgpPeer {
	return v.value
}

func (v *NullableBgpPeer) Set(val *BgpPeer) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpPeer) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpPeer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpPeer(val *BgpPeer) *NullableBgpPeer {
	return &NullableBgpPeer{value: val, isSet: true}
}

func (v NullableBgpPeer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpPeer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


