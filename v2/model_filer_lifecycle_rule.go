/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FilerLifecycleRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilerLifecycleRule{}

// FilerLifecycleRule Specifies the Lifecycle configuration rule.
type FilerLifecycleRule struct {
	AgingPolicy *FilerLifecycleRuleAgingPolicy `json:"agingPolicy,omitempty"`
	FileFilter *FilerLifecycleRuleFileFilter `json:"fileFilter,omitempty"`
	// Specifies the Unique identifier for the rule. No 2 rules in a policy should have the same name. The value cannot be longer than 255 characters.
	Name NullableString `json:"name"`
	// Specifies if the rule is currently being applied.
	Status NullableString `json:"status"`
	// Specifies if the rule is Allow or Deny type.
	Type NullableString `json:"type"`
}

type _FilerLifecycleRule FilerLifecycleRule

// NewFilerLifecycleRule instantiates a new FilerLifecycleRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilerLifecycleRule(name NullableString, status NullableString, type_ NullableString) *FilerLifecycleRule {
	this := FilerLifecycleRule{}
	this.Name = name
	this.Status = status
	this.Type = type_
	return &this
}

// NewFilerLifecycleRuleWithDefaults instantiates a new FilerLifecycleRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilerLifecycleRuleWithDefaults() *FilerLifecycleRule {
	this := FilerLifecycleRule{}
	return &this
}

// GetAgingPolicy returns the AgingPolicy field value if set, zero value otherwise.
func (o *FilerLifecycleRule) GetAgingPolicy() FilerLifecycleRuleAgingPolicy {
	if o == nil || IsNil(o.AgingPolicy) {
		var ret FilerLifecycleRuleAgingPolicy
		return ret
	}
	return *o.AgingPolicy
}

// GetAgingPolicyOk returns a tuple with the AgingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilerLifecycleRule) GetAgingPolicyOk() (*FilerLifecycleRuleAgingPolicy, bool) {
	if o == nil || IsNil(o.AgingPolicy) {
		return nil, false
	}
	return o.AgingPolicy, true
}

// HasAgingPolicy returns a boolean if a field has been set.
func (o *FilerLifecycleRule) HasAgingPolicy() bool {
	if o != nil && !IsNil(o.AgingPolicy) {
		return true
	}

	return false
}

// SetAgingPolicy gets a reference to the given FilerLifecycleRuleAgingPolicy and assigns it to the AgingPolicy field.
func (o *FilerLifecycleRule) SetAgingPolicy(v FilerLifecycleRuleAgingPolicy) {
	o.AgingPolicy = &v
}

// GetFileFilter returns the FileFilter field value if set, zero value otherwise.
func (o *FilerLifecycleRule) GetFileFilter() FilerLifecycleRuleFileFilter {
	if o == nil || IsNil(o.FileFilter) {
		var ret FilerLifecycleRuleFileFilter
		return ret
	}
	return *o.FileFilter
}

// GetFileFilterOk returns a tuple with the FileFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilerLifecycleRule) GetFileFilterOk() (*FilerLifecycleRuleFileFilter, bool) {
	if o == nil || IsNil(o.FileFilter) {
		return nil, false
	}
	return o.FileFilter, true
}

// HasFileFilter returns a boolean if a field has been set.
func (o *FilerLifecycleRule) HasFileFilter() bool {
	if o != nil && !IsNil(o.FileFilter) {
		return true
	}

	return false
}

// SetFileFilter gets a reference to the given FilerLifecycleRuleFileFilter and assigns it to the FileFilter field.
func (o *FilerLifecycleRule) SetFileFilter(v FilerLifecycleRuleFileFilter) {
	o.FileFilter = &v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilerLifecycleRule) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerLifecycleRule) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *FilerLifecycleRule) SetName(v string) {
	o.Name.Set(&v)
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilerLifecycleRule) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}

	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerLifecycleRule) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// SetStatus sets field value
func (o *FilerLifecycleRule) SetStatus(v string) {
	o.Status.Set(&v)
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilerLifecycleRule) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerLifecycleRule) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *FilerLifecycleRule) SetType(v string) {
	o.Type.Set(&v)
}

func (o FilerLifecycleRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilerLifecycleRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AgingPolicy) {
		toSerialize["agingPolicy"] = o.AgingPolicy
	}
	if !IsNil(o.FileFilter) {
		toSerialize["fileFilter"] = o.FileFilter
	}
	toSerialize["name"] = o.Name.Get()
	toSerialize["status"] = o.Status.Get()
	toSerialize["type"] = o.Type.Get()
	return toSerialize, nil
}

func (o *FilerLifecycleRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"status",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilerLifecycleRule := _FilerLifecycleRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilerLifecycleRule)

	if err != nil {
		return err
	}

	*o = FilerLifecycleRule(varFilerLifecycleRule)

	return err
}

type NullableFilerLifecycleRule struct {
	value *FilerLifecycleRule
	isSet bool
}

func (v NullableFilerLifecycleRule) Get() *FilerLifecycleRule {
	return v.value
}

func (v *NullableFilerLifecycleRule) Set(val *FilerLifecycleRule) {
	v.value = val
	v.isSet = true
}

func (v NullableFilerLifecycleRule) IsSet() bool {
	return v.isSet
}

func (v *NullableFilerLifecycleRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilerLifecycleRule(val *FilerLifecycleRule) *NullableFilerLifecycleRule {
	return &NullableFilerLifecycleRule{value: val, isSet: true}
}

func (v NullableFilerLifecycleRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilerLifecycleRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


