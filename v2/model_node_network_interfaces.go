/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeNetworkInterfaces type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeNetworkInterfaces{}

// NodeNetworkInterfaces Interfaces on a node.
type NodeNetworkInterfaces struct {
	// Chassis serial number.
	ChassisSerialNumber NullableString `json:"chassisSerialNumber,omitempty"`
	// List of interfaces on the node.
	Interfaces []Interface `json:"interfaces,omitempty"`
	// Id of the node.
	NodeId NullableInt64 `json:"nodeId,omitempty"`
	// Slot number of the node.
	Slot NullableInt64 `json:"slot,omitempty"`
}

// NewNodeNetworkInterfaces instantiates a new NodeNetworkInterfaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeNetworkInterfaces() *NodeNetworkInterfaces {
	this := NodeNetworkInterfaces{}
	return &this
}

// NewNodeNetworkInterfacesWithDefaults instantiates a new NodeNetworkInterfaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeNetworkInterfacesWithDefaults() *NodeNetworkInterfaces {
	this := NodeNetworkInterfaces{}
	return &this
}

// GetChassisSerialNumber returns the ChassisSerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeNetworkInterfaces) GetChassisSerialNumber() string {
	if o == nil || IsNil(o.ChassisSerialNumber.Get()) {
		var ret string
		return ret
	}
	return *o.ChassisSerialNumber.Get()
}

// GetChassisSerialNumberOk returns a tuple with the ChassisSerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeNetworkInterfaces) GetChassisSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChassisSerialNumber.Get(), o.ChassisSerialNumber.IsSet()
}

// HasChassisSerialNumber returns a boolean if a field has been set.
func (o *NodeNetworkInterfaces) HasChassisSerialNumber() bool {
	if o != nil && o.ChassisSerialNumber.IsSet() {
		return true
	}

	return false
}

// SetChassisSerialNumber gets a reference to the given NullableString and assigns it to the ChassisSerialNumber field.
func (o *NodeNetworkInterfaces) SetChassisSerialNumber(v string) {
	o.ChassisSerialNumber.Set(&v)
}
// SetChassisSerialNumberNil sets the value for ChassisSerialNumber to be an explicit nil
func (o *NodeNetworkInterfaces) SetChassisSerialNumberNil() {
	o.ChassisSerialNumber.Set(nil)
}

// UnsetChassisSerialNumber ensures that no value is present for ChassisSerialNumber, not even an explicit nil
func (o *NodeNetworkInterfaces) UnsetChassisSerialNumber() {
	o.ChassisSerialNumber.Unset()
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeNetworkInterfaces) GetInterfaces() []Interface {
	if o == nil {
		var ret []Interface
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeNetworkInterfaces) GetInterfacesOk() ([]Interface, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *NodeNetworkInterfaces) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []Interface and assigns it to the Interfaces field.
func (o *NodeNetworkInterfaces) SetInterfaces(v []Interface) {
	o.Interfaces = v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeNetworkInterfaces) GetNodeId() int64 {
	if o == nil || IsNil(o.NodeId.Get()) {
		var ret int64
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeNetworkInterfaces) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *NodeNetworkInterfaces) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableInt64 and assigns it to the NodeId field.
func (o *NodeNetworkInterfaces) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *NodeNetworkInterfaces) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *NodeNetworkInterfaces) UnsetNodeId() {
	o.NodeId.Unset()
}

// GetSlot returns the Slot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeNetworkInterfaces) GetSlot() int64 {
	if o == nil || IsNil(o.Slot.Get()) {
		var ret int64
		return ret
	}
	return *o.Slot.Get()
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeNetworkInterfaces) GetSlotOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slot.Get(), o.Slot.IsSet()
}

// HasSlot returns a boolean if a field has been set.
func (o *NodeNetworkInterfaces) HasSlot() bool {
	if o != nil && o.Slot.IsSet() {
		return true
	}

	return false
}

// SetSlot gets a reference to the given NullableInt64 and assigns it to the Slot field.
func (o *NodeNetworkInterfaces) SetSlot(v int64) {
	o.Slot.Set(&v)
}
// SetSlotNil sets the value for Slot to be an explicit nil
func (o *NodeNetworkInterfaces) SetSlotNil() {
	o.Slot.Set(nil)
}

// UnsetSlot ensures that no value is present for Slot, not even an explicit nil
func (o *NodeNetworkInterfaces) UnsetSlot() {
	o.Slot.Unset()
}

func (o NodeNetworkInterfaces) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeNetworkInterfaces) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChassisSerialNumber.IsSet() {
		toSerialize["chassisSerialNumber"] = o.ChassisSerialNumber.Get()
	}
	if o.Interfaces != nil {
		toSerialize["interfaces"] = o.Interfaces
	}
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	if o.Slot.IsSet() {
		toSerialize["slot"] = o.Slot.Get()
	}
	return toSerialize, nil
}

type NullableNodeNetworkInterfaces struct {
	value *NodeNetworkInterfaces
	isSet bool
}

func (v NullableNodeNetworkInterfaces) Get() *NodeNetworkInterfaces {
	return v.value
}

func (v *NullableNodeNetworkInterfaces) Set(val *NodeNetworkInterfaces) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeNetworkInterfaces) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeNetworkInterfaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeNetworkInterfaces(val *NodeNetworkInterfaces) *NullableNodeNetworkInterfaces {
	return &NullableNodeNetworkInterfaces{value: val, isSet: true}
}

func (v NullableNodeNetworkInterfaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeNetworkInterfaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


