/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TaggedSnapshotInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaggedSnapshotInfo{}

// TaggedSnapshotInfo Specifies helios tagged related snapshot info for an object.
type TaggedSnapshotInfo struct {
	// Specifies the cluster Id of the tagged snapshot.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the clusterIncarnationId of the tagged snapshot.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId,omitempty"`
	// Specifies the jobId of the tagged snapshot.
	JobId NullableInt64 `json:"jobId,omitempty"`
	// Specifies the object uuid of the tagged snapshot.
	ObjectUuid NullableString `json:"objectUuid,omitempty"`
	// Specifies the runStartTimeUsecs of the tagged snapshot.
	RunStartTimeUsecs NullableInt64 `json:"runStartTimeUsecs,omitempty"`
	// Specifies tag applied to the object.
	Tags []HeliosTagInfo `json:"tags,omitempty"`
}

// NewTaggedSnapshotInfo instantiates a new TaggedSnapshotInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaggedSnapshotInfo() *TaggedSnapshotInfo {
	this := TaggedSnapshotInfo{}
	return &this
}

// NewTaggedSnapshotInfoWithDefaults instantiates a new TaggedSnapshotInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaggedSnapshotInfoWithDefaults() *TaggedSnapshotInfo {
	this := TaggedSnapshotInfo{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaggedSnapshotInfo) GetClusterId() int64 {
	if o == nil || IsNil(o.ClusterId.Get()) {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaggedSnapshotInfo) GetClusterIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *TaggedSnapshotInfo) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *TaggedSnapshotInfo) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *TaggedSnapshotInfo) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *TaggedSnapshotInfo) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaggedSnapshotInfo) GetClusterIncarnationId() int64 {
	if o == nil || IsNil(o.ClusterIncarnationId.Get()) {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaggedSnapshotInfo) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *TaggedSnapshotInfo) HasClusterIncarnationId() bool {
	if o != nil && o.ClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the ClusterIncarnationId field.
func (o *TaggedSnapshotInfo) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}
// SetClusterIncarnationIdNil sets the value for ClusterIncarnationId to be an explicit nil
func (o *TaggedSnapshotInfo) SetClusterIncarnationIdNil() {
	o.ClusterIncarnationId.Set(nil)
}

// UnsetClusterIncarnationId ensures that no value is present for ClusterIncarnationId, not even an explicit nil
func (o *TaggedSnapshotInfo) UnsetClusterIncarnationId() {
	o.ClusterIncarnationId.Unset()
}

// GetJobId returns the JobId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaggedSnapshotInfo) GetJobId() int64 {
	if o == nil || IsNil(o.JobId.Get()) {
		var ret int64
		return ret
	}
	return *o.JobId.Get()
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaggedSnapshotInfo) GetJobIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobId.Get(), o.JobId.IsSet()
}

// HasJobId returns a boolean if a field has been set.
func (o *TaggedSnapshotInfo) HasJobId() bool {
	if o != nil && o.JobId.IsSet() {
		return true
	}

	return false
}

// SetJobId gets a reference to the given NullableInt64 and assigns it to the JobId field.
func (o *TaggedSnapshotInfo) SetJobId(v int64) {
	o.JobId.Set(&v)
}
// SetJobIdNil sets the value for JobId to be an explicit nil
func (o *TaggedSnapshotInfo) SetJobIdNil() {
	o.JobId.Set(nil)
}

// UnsetJobId ensures that no value is present for JobId, not even an explicit nil
func (o *TaggedSnapshotInfo) UnsetJobId() {
	o.JobId.Unset()
}

// GetObjectUuid returns the ObjectUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaggedSnapshotInfo) GetObjectUuid() string {
	if o == nil || IsNil(o.ObjectUuid.Get()) {
		var ret string
		return ret
	}
	return *o.ObjectUuid.Get()
}

// GetObjectUuidOk returns a tuple with the ObjectUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaggedSnapshotInfo) GetObjectUuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectUuid.Get(), o.ObjectUuid.IsSet()
}

// HasObjectUuid returns a boolean if a field has been set.
func (o *TaggedSnapshotInfo) HasObjectUuid() bool {
	if o != nil && o.ObjectUuid.IsSet() {
		return true
	}

	return false
}

// SetObjectUuid gets a reference to the given NullableString and assigns it to the ObjectUuid field.
func (o *TaggedSnapshotInfo) SetObjectUuid(v string) {
	o.ObjectUuid.Set(&v)
}
// SetObjectUuidNil sets the value for ObjectUuid to be an explicit nil
func (o *TaggedSnapshotInfo) SetObjectUuidNil() {
	o.ObjectUuid.Set(nil)
}

// UnsetObjectUuid ensures that no value is present for ObjectUuid, not even an explicit nil
func (o *TaggedSnapshotInfo) UnsetObjectUuid() {
	o.ObjectUuid.Unset()
}

// GetRunStartTimeUsecs returns the RunStartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaggedSnapshotInfo) GetRunStartTimeUsecs() int64 {
	if o == nil || IsNil(o.RunStartTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.RunStartTimeUsecs.Get()
}

// GetRunStartTimeUsecsOk returns a tuple with the RunStartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaggedSnapshotInfo) GetRunStartTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunStartTimeUsecs.Get(), o.RunStartTimeUsecs.IsSet()
}

// HasRunStartTimeUsecs returns a boolean if a field has been set.
func (o *TaggedSnapshotInfo) HasRunStartTimeUsecs() bool {
	if o != nil && o.RunStartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRunStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RunStartTimeUsecs field.
func (o *TaggedSnapshotInfo) SetRunStartTimeUsecs(v int64) {
	o.RunStartTimeUsecs.Set(&v)
}
// SetRunStartTimeUsecsNil sets the value for RunStartTimeUsecs to be an explicit nil
func (o *TaggedSnapshotInfo) SetRunStartTimeUsecsNil() {
	o.RunStartTimeUsecs.Set(nil)
}

// UnsetRunStartTimeUsecs ensures that no value is present for RunStartTimeUsecs, not even an explicit nil
func (o *TaggedSnapshotInfo) UnsetRunStartTimeUsecs() {
	o.RunStartTimeUsecs.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaggedSnapshotInfo) GetTags() []HeliosTagInfo {
	if o == nil {
		var ret []HeliosTagInfo
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaggedSnapshotInfo) GetTagsOk() ([]HeliosTagInfo, bool) {
	if o == nil || IsNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *TaggedSnapshotInfo) HasTags() bool {
	if o != nil && !IsNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []HeliosTagInfo and assigns it to the Tags field.
func (o *TaggedSnapshotInfo) SetTags(v []HeliosTagInfo) {
	o.Tags = v
}

func (o TaggedSnapshotInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaggedSnapshotInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterIncarnationId.IsSet() {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if o.JobId.IsSet() {
		toSerialize["jobId"] = o.JobId.Get()
	}
	if o.ObjectUuid.IsSet() {
		toSerialize["objectUuid"] = o.ObjectUuid.Get()
	}
	if o.RunStartTimeUsecs.IsSet() {
		toSerialize["runStartTimeUsecs"] = o.RunStartTimeUsecs.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableTaggedSnapshotInfo struct {
	value *TaggedSnapshotInfo
	isSet bool
}

func (v NullableTaggedSnapshotInfo) Get() *TaggedSnapshotInfo {
	return v.value
}

func (v *NullableTaggedSnapshotInfo) Set(val *TaggedSnapshotInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTaggedSnapshotInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTaggedSnapshotInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaggedSnapshotInfo(val *TaggedSnapshotInfo) *NullableTaggedSnapshotInfo {
	return &NullableTaggedSnapshotInfo{value: val, isSet: true}
}

func (v NullableTaggedSnapshotInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaggedSnapshotInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


