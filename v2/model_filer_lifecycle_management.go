/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FilerLifecycleManagement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilerLifecycleManagement{}

// FilerLifecycleManagement Specifies the filer Lifecycle policy of a NFS/SMB view. If not specified no Lifecycle management is performed for entites in filer view.
type FilerLifecycleManagement struct {
	// Specifies Lifecycle configuration rules for a filer view. A maximum of 100 rules can be specified.
	Rules []FilerLifecycleRule `json:"rules,omitempty"`
}

// NewFilerLifecycleManagement instantiates a new FilerLifecycleManagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilerLifecycleManagement() *FilerLifecycleManagement {
	this := FilerLifecycleManagement{}
	return &this
}

// NewFilerLifecycleManagementWithDefaults instantiates a new FilerLifecycleManagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilerLifecycleManagementWithDefaults() *FilerLifecycleManagement {
	this := FilerLifecycleManagement{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilerLifecycleManagement) GetRules() []FilerLifecycleRule {
	if o == nil {
		var ret []FilerLifecycleRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerLifecycleManagement) GetRulesOk() ([]FilerLifecycleRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *FilerLifecycleManagement) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []FilerLifecycleRule and assigns it to the Rules field.
func (o *FilerLifecycleManagement) SetRules(v []FilerLifecycleRule) {
	o.Rules = v
}

func (o FilerLifecycleManagement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilerLifecycleManagement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	return toSerialize, nil
}

type NullableFilerLifecycleManagement struct {
	value *FilerLifecycleManagement
	isSet bool
}

func (v NullableFilerLifecycleManagement) Get() *FilerLifecycleManagement {
	return v.value
}

func (v *NullableFilerLifecycleManagement) Set(val *FilerLifecycleManagement) {
	v.value = val
	v.isSet = true
}

func (v NullableFilerLifecycleManagement) IsSet() bool {
	return v.isSet
}

func (v *NullableFilerLifecycleManagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilerLifecycleManagement(val *FilerLifecycleManagement) *NullableFilerLifecycleManagement {
	return &NullableFilerLifecycleManagement{value: val, isSet: true}
}

func (v NullableFilerLifecycleManagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilerLifecycleManagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


