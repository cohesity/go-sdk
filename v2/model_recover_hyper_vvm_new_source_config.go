/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverHyperVVmNewSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverHyperVVmNewSourceConfig{}

// RecoverHyperVVmNewSourceConfig Specifies the new destination Source configuration where the VMs will be recovered.
type RecoverHyperVVmNewSourceConfig struct {
	ScvmmServerParams *RecoverHyperVVmSCVMMSourceConfig `json:"scvmmServerParams,omitempty"`
	// Specifies the type of HyperV source to which the VMs are being restored.
	SourceType NullableString `json:"sourceType"`
	StandaloneClusterParams *RecoverHyperVVmStandaloneClusterSourceConfig `json:"standaloneClusterParams,omitempty"`
	StandaloneHostParams *RecoverHyperVVmStandaloneHostSourceConfig `json:"standaloneHostParams,omitempty"`
}

type _RecoverHyperVVmNewSourceConfig RecoverHyperVVmNewSourceConfig

// NewRecoverHyperVVmNewSourceConfig instantiates a new RecoverHyperVVmNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverHyperVVmNewSourceConfig(sourceType NullableString) *RecoverHyperVVmNewSourceConfig {
	this := RecoverHyperVVmNewSourceConfig{}
	this.SourceType = sourceType
	return &this
}

// NewRecoverHyperVVmNewSourceConfigWithDefaults instantiates a new RecoverHyperVVmNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverHyperVVmNewSourceConfigWithDefaults() *RecoverHyperVVmNewSourceConfig {
	this := RecoverHyperVVmNewSourceConfig{}
	return &this
}

// GetScvmmServerParams returns the ScvmmServerParams field value if set, zero value otherwise.
func (o *RecoverHyperVVmNewSourceConfig) GetScvmmServerParams() RecoverHyperVVmSCVMMSourceConfig {
	if o == nil || IsNil(o.ScvmmServerParams) {
		var ret RecoverHyperVVmSCVMMSourceConfig
		return ret
	}
	return *o.ScvmmServerParams
}

// GetScvmmServerParamsOk returns a tuple with the ScvmmServerParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverHyperVVmNewSourceConfig) GetScvmmServerParamsOk() (*RecoverHyperVVmSCVMMSourceConfig, bool) {
	if o == nil || IsNil(o.ScvmmServerParams) {
		return nil, false
	}
	return o.ScvmmServerParams, true
}

// HasScvmmServerParams returns a boolean if a field has been set.
func (o *RecoverHyperVVmNewSourceConfig) HasScvmmServerParams() bool {
	if o != nil && !IsNil(o.ScvmmServerParams) {
		return true
	}

	return false
}

// SetScvmmServerParams gets a reference to the given RecoverHyperVVmSCVMMSourceConfig and assigns it to the ScvmmServerParams field.
func (o *RecoverHyperVVmNewSourceConfig) SetScvmmServerParams(v RecoverHyperVVmSCVMMSourceConfig) {
	o.ScvmmServerParams = &v
}

// GetSourceType returns the SourceType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RecoverHyperVVmNewSourceConfig) GetSourceType() string {
	if o == nil || o.SourceType.Get() == nil {
		var ret string
		return ret
	}

	return *o.SourceType.Get()
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHyperVVmNewSourceConfig) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceType.Get(), o.SourceType.IsSet()
}

// SetSourceType sets field value
func (o *RecoverHyperVVmNewSourceConfig) SetSourceType(v string) {
	o.SourceType.Set(&v)
}

// GetStandaloneClusterParams returns the StandaloneClusterParams field value if set, zero value otherwise.
func (o *RecoverHyperVVmNewSourceConfig) GetStandaloneClusterParams() RecoverHyperVVmStandaloneClusterSourceConfig {
	if o == nil || IsNil(o.StandaloneClusterParams) {
		var ret RecoverHyperVVmStandaloneClusterSourceConfig
		return ret
	}
	return *o.StandaloneClusterParams
}

// GetStandaloneClusterParamsOk returns a tuple with the StandaloneClusterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverHyperVVmNewSourceConfig) GetStandaloneClusterParamsOk() (*RecoverHyperVVmStandaloneClusterSourceConfig, bool) {
	if o == nil || IsNil(o.StandaloneClusterParams) {
		return nil, false
	}
	return o.StandaloneClusterParams, true
}

// HasStandaloneClusterParams returns a boolean if a field has been set.
func (o *RecoverHyperVVmNewSourceConfig) HasStandaloneClusterParams() bool {
	if o != nil && !IsNil(o.StandaloneClusterParams) {
		return true
	}

	return false
}

// SetStandaloneClusterParams gets a reference to the given RecoverHyperVVmStandaloneClusterSourceConfig and assigns it to the StandaloneClusterParams field.
func (o *RecoverHyperVVmNewSourceConfig) SetStandaloneClusterParams(v RecoverHyperVVmStandaloneClusterSourceConfig) {
	o.StandaloneClusterParams = &v
}

// GetStandaloneHostParams returns the StandaloneHostParams field value if set, zero value otherwise.
func (o *RecoverHyperVVmNewSourceConfig) GetStandaloneHostParams() RecoverHyperVVmStandaloneHostSourceConfig {
	if o == nil || IsNil(o.StandaloneHostParams) {
		var ret RecoverHyperVVmStandaloneHostSourceConfig
		return ret
	}
	return *o.StandaloneHostParams
}

// GetStandaloneHostParamsOk returns a tuple with the StandaloneHostParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverHyperVVmNewSourceConfig) GetStandaloneHostParamsOk() (*RecoverHyperVVmStandaloneHostSourceConfig, bool) {
	if o == nil || IsNil(o.StandaloneHostParams) {
		return nil, false
	}
	return o.StandaloneHostParams, true
}

// HasStandaloneHostParams returns a boolean if a field has been set.
func (o *RecoverHyperVVmNewSourceConfig) HasStandaloneHostParams() bool {
	if o != nil && !IsNil(o.StandaloneHostParams) {
		return true
	}

	return false
}

// SetStandaloneHostParams gets a reference to the given RecoverHyperVVmStandaloneHostSourceConfig and assigns it to the StandaloneHostParams field.
func (o *RecoverHyperVVmNewSourceConfig) SetStandaloneHostParams(v RecoverHyperVVmStandaloneHostSourceConfig) {
	o.StandaloneHostParams = &v
}

func (o RecoverHyperVVmNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverHyperVVmNewSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScvmmServerParams) {
		toSerialize["scvmmServerParams"] = o.ScvmmServerParams
	}
	toSerialize["sourceType"] = o.SourceType.Get()
	if !IsNil(o.StandaloneClusterParams) {
		toSerialize["standaloneClusterParams"] = o.StandaloneClusterParams
	}
	if !IsNil(o.StandaloneHostParams) {
		toSerialize["standaloneHostParams"] = o.StandaloneHostParams
	}
	return toSerialize, nil
}

func (o *RecoverHyperVVmNewSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverHyperVVmNewSourceConfig := _RecoverHyperVVmNewSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverHyperVVmNewSourceConfig)

	if err != nil {
		return err
	}

	*o = RecoverHyperVVmNewSourceConfig(varRecoverHyperVVmNewSourceConfig)

	return err
}

type NullableRecoverHyperVVmNewSourceConfig struct {
	value *RecoverHyperVVmNewSourceConfig
	isSet bool
}

func (v NullableRecoverHyperVVmNewSourceConfig) Get() *RecoverHyperVVmNewSourceConfig {
	return v.value
}

func (v *NullableRecoverHyperVVmNewSourceConfig) Set(val *RecoverHyperVVmNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverHyperVVmNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverHyperVVmNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverHyperVVmNewSourceConfig(val *RecoverHyperVVmNewSourceConfig) *NullableRecoverHyperVVmNewSourceConfig {
	return &NullableRecoverHyperVVmNewSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverHyperVVmNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverHyperVVmNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


