/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverSapHanaParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverSapHanaParams{}

// RecoverSapHanaParams Specifies the parameters to recover SAP HANA objects.
type RecoverSapHanaParams struct {
	// Specifies the maximum number of concurrent IO Streams that will be created to exchange data with the cluster. If not specified, the default value is taken as 1.
	Concurrency NullableInt32 `json:"concurrency,omitempty"`
	// Specifies the 'Source Registration ID' of the source where the objects are to be recovered. If this is not specified, the recovery job will recover to the original location.
	RecoverTo NullableInt64 `json:"recoverTo,omitempty"`
	// Specifies the local snapshot ids and other details of the objects to be recovered.
	Snapshots []RecoverUdaSnapshotParams `json:"snapshots"`
	// Start the database after the recovery is complete.
	StartDatabase NullableBool `json:"startDatabase,omitempty"`
	// This field will hold the warnings in cases where the job status is SucceededWithWarnings.
	Warnings []string `json:"warnings,omitempty"`
}

type _RecoverSapHanaParams RecoverSapHanaParams

// NewRecoverSapHanaParams instantiates a new RecoverSapHanaParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverSapHanaParams(snapshots []RecoverUdaSnapshotParams) *RecoverSapHanaParams {
	this := RecoverSapHanaParams{}
	var concurrency int32 = 1
	this.Concurrency = *NewNullableInt32(&concurrency)
	this.Snapshots = snapshots
	var startDatabase bool = true
	this.StartDatabase = *NewNullableBool(&startDatabase)
	return &this
}

// NewRecoverSapHanaParamsWithDefaults instantiates a new RecoverSapHanaParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverSapHanaParamsWithDefaults() *RecoverSapHanaParams {
	this := RecoverSapHanaParams{}
	var concurrency int32 = 1
	this.Concurrency = *NewNullableInt32(&concurrency)
	var startDatabase bool = true
	this.StartDatabase = *NewNullableBool(&startDatabase)
	return &this
}

// GetConcurrency returns the Concurrency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSapHanaParams) GetConcurrency() int32 {
	if o == nil || IsNil(o.Concurrency.Get()) {
		var ret int32
		return ret
	}
	return *o.Concurrency.Get()
}

// GetConcurrencyOk returns a tuple with the Concurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSapHanaParams) GetConcurrencyOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Concurrency.Get(), o.Concurrency.IsSet()
}

// HasConcurrency returns a boolean if a field has been set.
func (o *RecoverSapHanaParams) HasConcurrency() bool {
	if o != nil && o.Concurrency.IsSet() {
		return true
	}

	return false
}

// SetConcurrency gets a reference to the given NullableInt32 and assigns it to the Concurrency field.
func (o *RecoverSapHanaParams) SetConcurrency(v int32) {
	o.Concurrency.Set(&v)
}
// SetConcurrencyNil sets the value for Concurrency to be an explicit nil
func (o *RecoverSapHanaParams) SetConcurrencyNil() {
	o.Concurrency.Set(nil)
}

// UnsetConcurrency ensures that no value is present for Concurrency, not even an explicit nil
func (o *RecoverSapHanaParams) UnsetConcurrency() {
	o.Concurrency.Unset()
}

// GetRecoverTo returns the RecoverTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSapHanaParams) GetRecoverTo() int64 {
	if o == nil || IsNil(o.RecoverTo.Get()) {
		var ret int64
		return ret
	}
	return *o.RecoverTo.Get()
}

// GetRecoverToOk returns a tuple with the RecoverTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSapHanaParams) GetRecoverToOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverTo.Get(), o.RecoverTo.IsSet()
}

// HasRecoverTo returns a boolean if a field has been set.
func (o *RecoverSapHanaParams) HasRecoverTo() bool {
	if o != nil && o.RecoverTo.IsSet() {
		return true
	}

	return false
}

// SetRecoverTo gets a reference to the given NullableInt64 and assigns it to the RecoverTo field.
func (o *RecoverSapHanaParams) SetRecoverTo(v int64) {
	o.RecoverTo.Set(&v)
}
// SetRecoverToNil sets the value for RecoverTo to be an explicit nil
func (o *RecoverSapHanaParams) SetRecoverToNil() {
	o.RecoverTo.Set(nil)
}

// UnsetRecoverTo ensures that no value is present for RecoverTo, not even an explicit nil
func (o *RecoverSapHanaParams) UnsetRecoverTo() {
	o.RecoverTo.Unset()
}

// GetSnapshots returns the Snapshots field value
// If the value is explicit nil, the zero value for []RecoverUdaSnapshotParams will be returned
func (o *RecoverSapHanaParams) GetSnapshots() []RecoverUdaSnapshotParams {
	if o == nil {
		var ret []RecoverUdaSnapshotParams
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSapHanaParams) GetSnapshotsOk() ([]RecoverUdaSnapshotParams, bool) {
	if o == nil || IsNil(o.Snapshots) {
		return nil, false
	}
	return o.Snapshots, true
}

// SetSnapshots sets field value
func (o *RecoverSapHanaParams) SetSnapshots(v []RecoverUdaSnapshotParams) {
	o.Snapshots = v
}

// GetStartDatabase returns the StartDatabase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSapHanaParams) GetStartDatabase() bool {
	if o == nil || IsNil(o.StartDatabase.Get()) {
		var ret bool
		return ret
	}
	return *o.StartDatabase.Get()
}

// GetStartDatabaseOk returns a tuple with the StartDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSapHanaParams) GetStartDatabaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDatabase.Get(), o.StartDatabase.IsSet()
}

// HasStartDatabase returns a boolean if a field has been set.
func (o *RecoverSapHanaParams) HasStartDatabase() bool {
	if o != nil && o.StartDatabase.IsSet() {
		return true
	}

	return false
}

// SetStartDatabase gets a reference to the given NullableBool and assigns it to the StartDatabase field.
func (o *RecoverSapHanaParams) SetStartDatabase(v bool) {
	o.StartDatabase.Set(&v)
}
// SetStartDatabaseNil sets the value for StartDatabase to be an explicit nil
func (o *RecoverSapHanaParams) SetStartDatabaseNil() {
	o.StartDatabase.Set(nil)
}

// UnsetStartDatabase ensures that no value is present for StartDatabase, not even an explicit nil
func (o *RecoverSapHanaParams) UnsetStartDatabase() {
	o.StartDatabase.Unset()
}

// GetWarnings returns the Warnings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSapHanaParams) GetWarnings() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSapHanaParams) GetWarningsOk() ([]string, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *RecoverSapHanaParams) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []string and assigns it to the Warnings field.
func (o *RecoverSapHanaParams) SetWarnings(v []string) {
	o.Warnings = v
}

func (o RecoverSapHanaParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverSapHanaParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Concurrency.IsSet() {
		toSerialize["concurrency"] = o.Concurrency.Get()
	}
	if o.RecoverTo.IsSet() {
		toSerialize["recoverTo"] = o.RecoverTo.Get()
	}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	if o.StartDatabase.IsSet() {
		toSerialize["startDatabase"] = o.StartDatabase.Get()
	}
	if o.Warnings != nil {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

func (o *RecoverSapHanaParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverSapHanaParams := _RecoverSapHanaParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverSapHanaParams)

	if err != nil {
		return err
	}

	*o = RecoverSapHanaParams(varRecoverSapHanaParams)

	return err
}

type NullableRecoverSapHanaParams struct {
	value *RecoverSapHanaParams
	isSet bool
}

func (v NullableRecoverSapHanaParams) Get() *RecoverSapHanaParams {
	return v.value
}

func (v *NullableRecoverSapHanaParams) Set(val *RecoverSapHanaParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverSapHanaParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverSapHanaParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverSapHanaParams(val *RecoverSapHanaParams) *NullableRecoverSapHanaParams {
	return &NullableRecoverSapHanaParams{value: val, isSet: true}
}

func (v NullableRecoverSapHanaParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverSapHanaParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


