/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Gflag type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Gflag{}

// Gflag Specifies the attributes of a service gflag.
type Gflag struct {
	// If Clear is set to true, the GFlag is removed
	Clear NullableBool `json:"clear,omitempty"`
	// Specifies the name of the gflag.
	Name *string `json:"name,omitempty"`
	// Specifies product model this gflag set on.
	ProductModel *string `json:"productModel,omitempty"`
	// Specifies the reason for setting the gflag.
	Reason NullableString `json:"reason,omitempty"`
	// Specifies timestamp when gflag was set.
	Timestamp NullableInt64 `json:"timestamp,omitempty"`
	// Specifies the value of the gflag.
	Value *string `json:"value,omitempty"`
}

// NewGflag instantiates a new Gflag object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGflag() *Gflag {
	this := Gflag{}
	var clear bool = false
	this.Clear = *NewNullableBool(&clear)
	return &this
}

// NewGflagWithDefaults instantiates a new Gflag object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGflagWithDefaults() *Gflag {
	this := Gflag{}
	var clear bool = false
	this.Clear = *NewNullableBool(&clear)
	return &this
}

// GetClear returns the Clear field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Gflag) GetClear() bool {
	if o == nil || IsNil(o.Clear.Get()) {
		var ret bool
		return ret
	}
	return *o.Clear.Get()
}

// GetClearOk returns a tuple with the Clear field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Gflag) GetClearOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Clear.Get(), o.Clear.IsSet()
}

// HasClear returns a boolean if a field has been set.
func (o *Gflag) HasClear() bool {
	if o != nil && o.Clear.IsSet() {
		return true
	}

	return false
}

// SetClear gets a reference to the given NullableBool and assigns it to the Clear field.
func (o *Gflag) SetClear(v bool) {
	o.Clear.Set(&v)
}
// SetClearNil sets the value for Clear to be an explicit nil
func (o *Gflag) SetClearNil() {
	o.Clear.Set(nil)
}

// UnsetClear ensures that no value is present for Clear, not even an explicit nil
func (o *Gflag) UnsetClear() {
	o.Clear.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Gflag) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gflag) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Gflag) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Gflag) SetName(v string) {
	o.Name = &v
}

// GetProductModel returns the ProductModel field value if set, zero value otherwise.
func (o *Gflag) GetProductModel() string {
	if o == nil || IsNil(o.ProductModel) {
		var ret string
		return ret
	}
	return *o.ProductModel
}

// GetProductModelOk returns a tuple with the ProductModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gflag) GetProductModelOk() (*string, bool) {
	if o == nil || IsNil(o.ProductModel) {
		return nil, false
	}
	return o.ProductModel, true
}

// HasProductModel returns a boolean if a field has been set.
func (o *Gflag) HasProductModel() bool {
	if o != nil && !IsNil(o.ProductModel) {
		return true
	}

	return false
}

// SetProductModel gets a reference to the given string and assigns it to the ProductModel field.
func (o *Gflag) SetProductModel(v string) {
	o.ProductModel = &v
}

// GetReason returns the Reason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Gflag) GetReason() string {
	if o == nil || IsNil(o.Reason.Get()) {
		var ret string
		return ret
	}
	return *o.Reason.Get()
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Gflag) GetReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Reason.Get(), o.Reason.IsSet()
}

// HasReason returns a boolean if a field has been set.
func (o *Gflag) HasReason() bool {
	if o != nil && o.Reason.IsSet() {
		return true
	}

	return false
}

// SetReason gets a reference to the given NullableString and assigns it to the Reason field.
func (o *Gflag) SetReason(v string) {
	o.Reason.Set(&v)
}
// SetReasonNil sets the value for Reason to be an explicit nil
func (o *Gflag) SetReasonNil() {
	o.Reason.Set(nil)
}

// UnsetReason ensures that no value is present for Reason, not even an explicit nil
func (o *Gflag) UnsetReason() {
	o.Reason.Unset()
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Gflag) GetTimestamp() int64 {
	if o == nil || IsNil(o.Timestamp.Get()) {
		var ret int64
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Gflag) GetTimestampOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *Gflag) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableInt64 and assigns it to the Timestamp field.
func (o *Gflag) SetTimestamp(v int64) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *Gflag) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *Gflag) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *Gflag) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Gflag) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *Gflag) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *Gflag) SetValue(v string) {
	o.Value = &v
}

func (o Gflag) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Gflag) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Clear.IsSet() {
		toSerialize["clear"] = o.Clear.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ProductModel) {
		toSerialize["productModel"] = o.ProductModel
	}
	if o.Reason.IsSet() {
		toSerialize["reason"] = o.Reason.Get()
	}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableGflag struct {
	value *Gflag
	isSet bool
}

func (v NullableGflag) Get() *Gflag {
	return v.value
}

func (v *NullableGflag) Set(val *Gflag) {
	v.value = val
	v.isSet = true
}

func (v NullableGflag) IsSet() bool {
	return v.isSet
}

func (v *NullableGflag) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGflag(val *Gflag) *NullableGflag {
	return &NullableGflag{value: val, isSet: true}
}

func (v NullableGflag) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGflag) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


