/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the KubernetesStorageClassParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesStorageClassParams{}

// KubernetesStorageClassParams Specifies the storage class parameters for recovery of namespace.
type KubernetesStorageClassParams struct {
	// Specifies mapping of storage classes
	StorageClassMapping []KubernetesLabel `json:"storageClassMapping,omitempty"`
	// Specifies whether or not to use storage class mapping.
	UseStorageClassMapping NullableBool `json:"useStorageClassMapping,omitempty"`
}

// NewKubernetesStorageClassParams instantiates a new KubernetesStorageClassParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesStorageClassParams() *KubernetesStorageClassParams {
	this := KubernetesStorageClassParams{}
	return &this
}

// NewKubernetesStorageClassParamsWithDefaults instantiates a new KubernetesStorageClassParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesStorageClassParamsWithDefaults() *KubernetesStorageClassParams {
	this := KubernetesStorageClassParams{}
	return &this
}

// GetStorageClassMapping returns the StorageClassMapping field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesStorageClassParams) GetStorageClassMapping() []KubernetesLabel {
	if o == nil {
		var ret []KubernetesLabel
		return ret
	}
	return o.StorageClassMapping
}

// GetStorageClassMappingOk returns a tuple with the StorageClassMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesStorageClassParams) GetStorageClassMappingOk() ([]KubernetesLabel, bool) {
	if o == nil || IsNil(o.StorageClassMapping) {
		return nil, false
	}
	return o.StorageClassMapping, true
}

// HasStorageClassMapping returns a boolean if a field has been set.
func (o *KubernetesStorageClassParams) HasStorageClassMapping() bool {
	if o != nil && !IsNil(o.StorageClassMapping) {
		return true
	}

	return false
}

// SetStorageClassMapping gets a reference to the given []KubernetesLabel and assigns it to the StorageClassMapping field.
func (o *KubernetesStorageClassParams) SetStorageClassMapping(v []KubernetesLabel) {
	o.StorageClassMapping = v
}

// GetUseStorageClassMapping returns the UseStorageClassMapping field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesStorageClassParams) GetUseStorageClassMapping() bool {
	if o == nil || IsNil(o.UseStorageClassMapping.Get()) {
		var ret bool
		return ret
	}
	return *o.UseStorageClassMapping.Get()
}

// GetUseStorageClassMappingOk returns a tuple with the UseStorageClassMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesStorageClassParams) GetUseStorageClassMappingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseStorageClassMapping.Get(), o.UseStorageClassMapping.IsSet()
}

// HasUseStorageClassMapping returns a boolean if a field has been set.
func (o *KubernetesStorageClassParams) HasUseStorageClassMapping() bool {
	if o != nil && o.UseStorageClassMapping.IsSet() {
		return true
	}

	return false
}

// SetUseStorageClassMapping gets a reference to the given NullableBool and assigns it to the UseStorageClassMapping field.
func (o *KubernetesStorageClassParams) SetUseStorageClassMapping(v bool) {
	o.UseStorageClassMapping.Set(&v)
}
// SetUseStorageClassMappingNil sets the value for UseStorageClassMapping to be an explicit nil
func (o *KubernetesStorageClassParams) SetUseStorageClassMappingNil() {
	o.UseStorageClassMapping.Set(nil)
}

// UnsetUseStorageClassMapping ensures that no value is present for UseStorageClassMapping, not even an explicit nil
func (o *KubernetesStorageClassParams) UnsetUseStorageClassMapping() {
	o.UseStorageClassMapping.Unset()
}

func (o KubernetesStorageClassParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesStorageClassParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StorageClassMapping != nil {
		toSerialize["storageClassMapping"] = o.StorageClassMapping
	}
	if o.UseStorageClassMapping.IsSet() {
		toSerialize["useStorageClassMapping"] = o.UseStorageClassMapping.Get()
	}
	return toSerialize, nil
}

type NullableKubernetesStorageClassParams struct {
	value *KubernetesStorageClassParams
	isSet bool
}

func (v NullableKubernetesStorageClassParams) Get() *KubernetesStorageClassParams {
	return v.value
}

func (v *NullableKubernetesStorageClassParams) Set(val *KubernetesStorageClassParams) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesStorageClassParams) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesStorageClassParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesStorageClassParams(val *KubernetesStorageClassParams) *NullableKubernetesStorageClassParams {
	return &NullableKubernetesStorageClassParams{value: val, isSet: true}
}

func (v NullableKubernetesStorageClassParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesStorageClassParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


