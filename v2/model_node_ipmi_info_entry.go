/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeIpmiInfoEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeIpmiInfoEntry{}

// NodeIpmiInfoEntry Specifies the ipmi info for each node.
type NodeIpmiInfoEntry struct {
	// Specifies the ip address of the node.
	NodeIp NullableString `json:"nodeIp,omitempty"`
	// Specifies the gateway for the given node ipmi.
	NodeIpmiGateway NullableString `json:"nodeIpmiGateway,omitempty"`
	// Specifies the ipmi ip address of the node.
	NodeIpmiIp NullableString `json:"nodeIpmiIp,omitempty"`
	// Specifies the subnet mask for the given node ipmi.
	NodeIpmiSubnetMask NullableString `json:"nodeIpmiSubnetMask,omitempty"`
}

// NewNodeIpmiInfoEntry instantiates a new NodeIpmiInfoEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeIpmiInfoEntry() *NodeIpmiInfoEntry {
	this := NodeIpmiInfoEntry{}
	return &this
}

// NewNodeIpmiInfoEntryWithDefaults instantiates a new NodeIpmiInfoEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeIpmiInfoEntryWithDefaults() *NodeIpmiInfoEntry {
	this := NodeIpmiInfoEntry{}
	return &this
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeIpmiInfoEntry) GetNodeIp() string {
	if o == nil || IsNil(o.NodeIp.Get()) {
		var ret string
		return ret
	}
	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeIpmiInfoEntry) GetNodeIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// HasNodeIp returns a boolean if a field has been set.
func (o *NodeIpmiInfoEntry) HasNodeIp() bool {
	if o != nil && o.NodeIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given NullableString and assigns it to the NodeIp field.
func (o *NodeIpmiInfoEntry) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}
// SetNodeIpNil sets the value for NodeIp to be an explicit nil
func (o *NodeIpmiInfoEntry) SetNodeIpNil() {
	o.NodeIp.Set(nil)
}

// UnsetNodeIp ensures that no value is present for NodeIp, not even an explicit nil
func (o *NodeIpmiInfoEntry) UnsetNodeIp() {
	o.NodeIp.Unset()
}

// GetNodeIpmiGateway returns the NodeIpmiGateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeIpmiInfoEntry) GetNodeIpmiGateway() string {
	if o == nil || IsNil(o.NodeIpmiGateway.Get()) {
		var ret string
		return ret
	}
	return *o.NodeIpmiGateway.Get()
}

// GetNodeIpmiGatewayOk returns a tuple with the NodeIpmiGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeIpmiInfoEntry) GetNodeIpmiGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIpmiGateway.Get(), o.NodeIpmiGateway.IsSet()
}

// HasNodeIpmiGateway returns a boolean if a field has been set.
func (o *NodeIpmiInfoEntry) HasNodeIpmiGateway() bool {
	if o != nil && o.NodeIpmiGateway.IsSet() {
		return true
	}

	return false
}

// SetNodeIpmiGateway gets a reference to the given NullableString and assigns it to the NodeIpmiGateway field.
func (o *NodeIpmiInfoEntry) SetNodeIpmiGateway(v string) {
	o.NodeIpmiGateway.Set(&v)
}
// SetNodeIpmiGatewayNil sets the value for NodeIpmiGateway to be an explicit nil
func (o *NodeIpmiInfoEntry) SetNodeIpmiGatewayNil() {
	o.NodeIpmiGateway.Set(nil)
}

// UnsetNodeIpmiGateway ensures that no value is present for NodeIpmiGateway, not even an explicit nil
func (o *NodeIpmiInfoEntry) UnsetNodeIpmiGateway() {
	o.NodeIpmiGateway.Unset()
}

// GetNodeIpmiIp returns the NodeIpmiIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeIpmiInfoEntry) GetNodeIpmiIp() string {
	if o == nil || IsNil(o.NodeIpmiIp.Get()) {
		var ret string
		return ret
	}
	return *o.NodeIpmiIp.Get()
}

// GetNodeIpmiIpOk returns a tuple with the NodeIpmiIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeIpmiInfoEntry) GetNodeIpmiIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIpmiIp.Get(), o.NodeIpmiIp.IsSet()
}

// HasNodeIpmiIp returns a boolean if a field has been set.
func (o *NodeIpmiInfoEntry) HasNodeIpmiIp() bool {
	if o != nil && o.NodeIpmiIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIpmiIp gets a reference to the given NullableString and assigns it to the NodeIpmiIp field.
func (o *NodeIpmiInfoEntry) SetNodeIpmiIp(v string) {
	o.NodeIpmiIp.Set(&v)
}
// SetNodeIpmiIpNil sets the value for NodeIpmiIp to be an explicit nil
func (o *NodeIpmiInfoEntry) SetNodeIpmiIpNil() {
	o.NodeIpmiIp.Set(nil)
}

// UnsetNodeIpmiIp ensures that no value is present for NodeIpmiIp, not even an explicit nil
func (o *NodeIpmiInfoEntry) UnsetNodeIpmiIp() {
	o.NodeIpmiIp.Unset()
}

// GetNodeIpmiSubnetMask returns the NodeIpmiSubnetMask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeIpmiInfoEntry) GetNodeIpmiSubnetMask() string {
	if o == nil || IsNil(o.NodeIpmiSubnetMask.Get()) {
		var ret string
		return ret
	}
	return *o.NodeIpmiSubnetMask.Get()
}

// GetNodeIpmiSubnetMaskOk returns a tuple with the NodeIpmiSubnetMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeIpmiInfoEntry) GetNodeIpmiSubnetMaskOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIpmiSubnetMask.Get(), o.NodeIpmiSubnetMask.IsSet()
}

// HasNodeIpmiSubnetMask returns a boolean if a field has been set.
func (o *NodeIpmiInfoEntry) HasNodeIpmiSubnetMask() bool {
	if o != nil && o.NodeIpmiSubnetMask.IsSet() {
		return true
	}

	return false
}

// SetNodeIpmiSubnetMask gets a reference to the given NullableString and assigns it to the NodeIpmiSubnetMask field.
func (o *NodeIpmiInfoEntry) SetNodeIpmiSubnetMask(v string) {
	o.NodeIpmiSubnetMask.Set(&v)
}
// SetNodeIpmiSubnetMaskNil sets the value for NodeIpmiSubnetMask to be an explicit nil
func (o *NodeIpmiInfoEntry) SetNodeIpmiSubnetMaskNil() {
	o.NodeIpmiSubnetMask.Set(nil)
}

// UnsetNodeIpmiSubnetMask ensures that no value is present for NodeIpmiSubnetMask, not even an explicit nil
func (o *NodeIpmiInfoEntry) UnsetNodeIpmiSubnetMask() {
	o.NodeIpmiSubnetMask.Unset()
}

func (o NodeIpmiInfoEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeIpmiInfoEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeIp.IsSet() {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	if o.NodeIpmiGateway.IsSet() {
		toSerialize["nodeIpmiGateway"] = o.NodeIpmiGateway.Get()
	}
	if o.NodeIpmiIp.IsSet() {
		toSerialize["nodeIpmiIp"] = o.NodeIpmiIp.Get()
	}
	if o.NodeIpmiSubnetMask.IsSet() {
		toSerialize["nodeIpmiSubnetMask"] = o.NodeIpmiSubnetMask.Get()
	}
	return toSerialize, nil
}

type NullableNodeIpmiInfoEntry struct {
	value *NodeIpmiInfoEntry
	isSet bool
}

func (v NullableNodeIpmiInfoEntry) Get() *NodeIpmiInfoEntry {
	return v.value
}

func (v *NullableNodeIpmiInfoEntry) Set(val *NodeIpmiInfoEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeIpmiInfoEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeIpmiInfoEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeIpmiInfoEntry(val *NodeIpmiInfoEntry) *NullableNodeIpmiInfoEntry {
	return &NullableNodeIpmiInfoEntry{value: val, isSet: true}
}

func (v NullableNodeIpmiInfoEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeIpmiInfoEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


