/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeStatusResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeStatusResult{}

// NodeStatusResult Specifies the current status of a Node in the cluster.
type NodeStatusResult struct {
	// Specifies the active operation on the Node if there is one.
	ActiveOperation NullableString `json:"activeOperation,omitempty"`
	// Specifies the Cluster ID if the Node is part of a Cluster.
	ClusterId *int64 `json:"clusterId,omitempty"`
	// Specifies the ID of the Node.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies whether or not the Node is part of a Cluster.
	InCluster NullableBool `json:"inCluster,omitempty"`
	// InMaintenanceMode is used to mark a node in maintenance mode.
	InMaintenanceMode NullableBool `json:"inMaintenanceMode,omitempty"`
	// Specifies the Incarnation ID if the Node is part of a Cluster.
	IncarnationId *int64 `json:"incarnationId,omitempty"`
	// Specifies the IP address of the Node.
	Ip NullableString `json:"ip,omitempty"`
	// Whether the node is an app node.
	IsAppNode NullableBool `json:"isAppNode,omitempty"`
	// Specifies the time of the last upgrade in seconds since the epoch.
	LastUpgradeTimeSecs *int64 `json:"lastUpgradeTimeSecs,omitempty"`
	// Specifies whether or not this node is marked for removal.
	MarkedForRemoval NullableBool `json:"markedForRemoval,omitempty"`
	// Specifies an optional message describing the current state of the Node.
	Message NullableString `json:"message,omitempty"`
	// Removal progress for various components which are not acked yet.
	RemovalProgressList []ComponentRemovalProgress `json:"removalProgressList,omitempty"`
	// Specifies the reason for the removal operation if there is a removal operation going on.
	RemovalReason NullableString `json:"removalReason,omitempty"`
	// Specifies the list of services running on the cluster and their process IDs.
	Services []ServiceProcessEntry `json:"services,omitempty"`
	// Services already acked for removal of this entity.
	ServicesAckedList []string `json:"servicesAckedList,omitempty"`
	// ServicesNotAcked specifies services that have not ACKed yet in string format after the node is marked for removal.
	ServicesNotAcked NullableString `json:"servicesNotAcked,omitempty"`
	// Services not acked yet for removal of this entity.
	ServicesNotAckedList []string `json:"servicesNotAckedList,omitempty"`
	// Specifies the version of the software running on the Node.
	SoftwareVersion *string `json:"softwareVersion,omitempty"`
	// Uptime of node.
	Uptime NullableString `json:"uptime,omitempty"`
}

// NewNodeStatusResult instantiates a new NodeStatusResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeStatusResult() *NodeStatusResult {
	this := NodeStatusResult{}
	return &this
}

// NewNodeStatusResultWithDefaults instantiates a new NodeStatusResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeStatusResultWithDefaults() *NodeStatusResult {
	this := NodeStatusResult{}
	return &this
}

// GetActiveOperation returns the ActiveOperation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetActiveOperation() string {
	if o == nil || IsNil(o.ActiveOperation.Get()) {
		var ret string
		return ret
	}
	return *o.ActiveOperation.Get()
}

// GetActiveOperationOk returns a tuple with the ActiveOperation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetActiveOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActiveOperation.Get(), o.ActiveOperation.IsSet()
}

// HasActiveOperation returns a boolean if a field has been set.
func (o *NodeStatusResult) HasActiveOperation() bool {
	if o != nil && o.ActiveOperation.IsSet() {
		return true
	}

	return false
}

// SetActiveOperation gets a reference to the given NullableString and assigns it to the ActiveOperation field.
func (o *NodeStatusResult) SetActiveOperation(v string) {
	o.ActiveOperation.Set(&v)
}
// SetActiveOperationNil sets the value for ActiveOperation to be an explicit nil
func (o *NodeStatusResult) SetActiveOperationNil() {
	o.ActiveOperation.Set(nil)
}

// UnsetActiveOperation ensures that no value is present for ActiveOperation, not even an explicit nil
func (o *NodeStatusResult) UnsetActiveOperation() {
	o.ActiveOperation.Unset()
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *NodeStatusResult) GetClusterId() int64 {
	if o == nil || IsNil(o.ClusterId) {
		var ret int64
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStatusResult) GetClusterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *NodeStatusResult) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given int64 and assigns it to the ClusterId field.
func (o *NodeStatusResult) SetClusterId(v int64) {
	o.ClusterId = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NodeStatusResult) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *NodeStatusResult) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NodeStatusResult) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NodeStatusResult) UnsetId() {
	o.Id.Unset()
}

// GetInCluster returns the InCluster field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetInCluster() bool {
	if o == nil || IsNil(o.InCluster.Get()) {
		var ret bool
		return ret
	}
	return *o.InCluster.Get()
}

// GetInClusterOk returns a tuple with the InCluster field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetInClusterOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InCluster.Get(), o.InCluster.IsSet()
}

// HasInCluster returns a boolean if a field has been set.
func (o *NodeStatusResult) HasInCluster() bool {
	if o != nil && o.InCluster.IsSet() {
		return true
	}

	return false
}

// SetInCluster gets a reference to the given NullableBool and assigns it to the InCluster field.
func (o *NodeStatusResult) SetInCluster(v bool) {
	o.InCluster.Set(&v)
}
// SetInClusterNil sets the value for InCluster to be an explicit nil
func (o *NodeStatusResult) SetInClusterNil() {
	o.InCluster.Set(nil)
}

// UnsetInCluster ensures that no value is present for InCluster, not even an explicit nil
func (o *NodeStatusResult) UnsetInCluster() {
	o.InCluster.Unset()
}

// GetInMaintenanceMode returns the InMaintenanceMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetInMaintenanceMode() bool {
	if o == nil || IsNil(o.InMaintenanceMode.Get()) {
		var ret bool
		return ret
	}
	return *o.InMaintenanceMode.Get()
}

// GetInMaintenanceModeOk returns a tuple with the InMaintenanceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetInMaintenanceModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InMaintenanceMode.Get(), o.InMaintenanceMode.IsSet()
}

// HasInMaintenanceMode returns a boolean if a field has been set.
func (o *NodeStatusResult) HasInMaintenanceMode() bool {
	if o != nil && o.InMaintenanceMode.IsSet() {
		return true
	}

	return false
}

// SetInMaintenanceMode gets a reference to the given NullableBool and assigns it to the InMaintenanceMode field.
func (o *NodeStatusResult) SetInMaintenanceMode(v bool) {
	o.InMaintenanceMode.Set(&v)
}
// SetInMaintenanceModeNil sets the value for InMaintenanceMode to be an explicit nil
func (o *NodeStatusResult) SetInMaintenanceModeNil() {
	o.InMaintenanceMode.Set(nil)
}

// UnsetInMaintenanceMode ensures that no value is present for InMaintenanceMode, not even an explicit nil
func (o *NodeStatusResult) UnsetInMaintenanceMode() {
	o.InMaintenanceMode.Unset()
}

// GetIncarnationId returns the IncarnationId field value if set, zero value otherwise.
func (o *NodeStatusResult) GetIncarnationId() int64 {
	if o == nil || IsNil(o.IncarnationId) {
		var ret int64
		return ret
	}
	return *o.IncarnationId
}

// GetIncarnationIdOk returns a tuple with the IncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStatusResult) GetIncarnationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IncarnationId) {
		return nil, false
	}
	return o.IncarnationId, true
}

// HasIncarnationId returns a boolean if a field has been set.
func (o *NodeStatusResult) HasIncarnationId() bool {
	if o != nil && !IsNil(o.IncarnationId) {
		return true
	}

	return false
}

// SetIncarnationId gets a reference to the given int64 and assigns it to the IncarnationId field.
func (o *NodeStatusResult) SetIncarnationId(v int64) {
	o.IncarnationId = &v
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetIp() string {
	if o == nil || IsNil(o.Ip.Get()) {
		var ret string
		return ret
	}
	return *o.Ip.Get()
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ip.Get(), o.Ip.IsSet()
}

// HasIp returns a boolean if a field has been set.
func (o *NodeStatusResult) HasIp() bool {
	if o != nil && o.Ip.IsSet() {
		return true
	}

	return false
}

// SetIp gets a reference to the given NullableString and assigns it to the Ip field.
func (o *NodeStatusResult) SetIp(v string) {
	o.Ip.Set(&v)
}
// SetIpNil sets the value for Ip to be an explicit nil
func (o *NodeStatusResult) SetIpNil() {
	o.Ip.Set(nil)
}

// UnsetIp ensures that no value is present for Ip, not even an explicit nil
func (o *NodeStatusResult) UnsetIp() {
	o.Ip.Unset()
}

// GetIsAppNode returns the IsAppNode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetIsAppNode() bool {
	if o == nil || IsNil(o.IsAppNode.Get()) {
		var ret bool
		return ret
	}
	return *o.IsAppNode.Get()
}

// GetIsAppNodeOk returns a tuple with the IsAppNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetIsAppNodeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsAppNode.Get(), o.IsAppNode.IsSet()
}

// HasIsAppNode returns a boolean if a field has been set.
func (o *NodeStatusResult) HasIsAppNode() bool {
	if o != nil && o.IsAppNode.IsSet() {
		return true
	}

	return false
}

// SetIsAppNode gets a reference to the given NullableBool and assigns it to the IsAppNode field.
func (o *NodeStatusResult) SetIsAppNode(v bool) {
	o.IsAppNode.Set(&v)
}
// SetIsAppNodeNil sets the value for IsAppNode to be an explicit nil
func (o *NodeStatusResult) SetIsAppNodeNil() {
	o.IsAppNode.Set(nil)
}

// UnsetIsAppNode ensures that no value is present for IsAppNode, not even an explicit nil
func (o *NodeStatusResult) UnsetIsAppNode() {
	o.IsAppNode.Unset()
}

// GetLastUpgradeTimeSecs returns the LastUpgradeTimeSecs field value if set, zero value otherwise.
func (o *NodeStatusResult) GetLastUpgradeTimeSecs() int64 {
	if o == nil || IsNil(o.LastUpgradeTimeSecs) {
		var ret int64
		return ret
	}
	return *o.LastUpgradeTimeSecs
}

// GetLastUpgradeTimeSecsOk returns a tuple with the LastUpgradeTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStatusResult) GetLastUpgradeTimeSecsOk() (*int64, bool) {
	if o == nil || IsNil(o.LastUpgradeTimeSecs) {
		return nil, false
	}
	return o.LastUpgradeTimeSecs, true
}

// HasLastUpgradeTimeSecs returns a boolean if a field has been set.
func (o *NodeStatusResult) HasLastUpgradeTimeSecs() bool {
	if o != nil && !IsNil(o.LastUpgradeTimeSecs) {
		return true
	}

	return false
}

// SetLastUpgradeTimeSecs gets a reference to the given int64 and assigns it to the LastUpgradeTimeSecs field.
func (o *NodeStatusResult) SetLastUpgradeTimeSecs(v int64) {
	o.LastUpgradeTimeSecs = &v
}

// GetMarkedForRemoval returns the MarkedForRemoval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetMarkedForRemoval() bool {
	if o == nil || IsNil(o.MarkedForRemoval.Get()) {
		var ret bool
		return ret
	}
	return *o.MarkedForRemoval.Get()
}

// GetMarkedForRemovalOk returns a tuple with the MarkedForRemoval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetMarkedForRemovalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarkedForRemoval.Get(), o.MarkedForRemoval.IsSet()
}

// HasMarkedForRemoval returns a boolean if a field has been set.
func (o *NodeStatusResult) HasMarkedForRemoval() bool {
	if o != nil && o.MarkedForRemoval.IsSet() {
		return true
	}

	return false
}

// SetMarkedForRemoval gets a reference to the given NullableBool and assigns it to the MarkedForRemoval field.
func (o *NodeStatusResult) SetMarkedForRemoval(v bool) {
	o.MarkedForRemoval.Set(&v)
}
// SetMarkedForRemovalNil sets the value for MarkedForRemoval to be an explicit nil
func (o *NodeStatusResult) SetMarkedForRemovalNil() {
	o.MarkedForRemoval.Set(nil)
}

// UnsetMarkedForRemoval ensures that no value is present for MarkedForRemoval, not even an explicit nil
func (o *NodeStatusResult) UnsetMarkedForRemoval() {
	o.MarkedForRemoval.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *NodeStatusResult) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *NodeStatusResult) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *NodeStatusResult) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *NodeStatusResult) UnsetMessage() {
	o.Message.Unset()
}

// GetRemovalProgressList returns the RemovalProgressList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetRemovalProgressList() []ComponentRemovalProgress {
	if o == nil {
		var ret []ComponentRemovalProgress
		return ret
	}
	return o.RemovalProgressList
}

// GetRemovalProgressListOk returns a tuple with the RemovalProgressList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetRemovalProgressListOk() ([]ComponentRemovalProgress, bool) {
	if o == nil || IsNil(o.RemovalProgressList) {
		return nil, false
	}
	return o.RemovalProgressList, true
}

// HasRemovalProgressList returns a boolean if a field has been set.
func (o *NodeStatusResult) HasRemovalProgressList() bool {
	if o != nil && !IsNil(o.RemovalProgressList) {
		return true
	}

	return false
}

// SetRemovalProgressList gets a reference to the given []ComponentRemovalProgress and assigns it to the RemovalProgressList field.
func (o *NodeStatusResult) SetRemovalProgressList(v []ComponentRemovalProgress) {
	o.RemovalProgressList = v
}

// GetRemovalReason returns the RemovalReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetRemovalReason() string {
	if o == nil || IsNil(o.RemovalReason.Get()) {
		var ret string
		return ret
	}
	return *o.RemovalReason.Get()
}

// GetRemovalReasonOk returns a tuple with the RemovalReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetRemovalReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalReason.Get(), o.RemovalReason.IsSet()
}

// HasRemovalReason returns a boolean if a field has been set.
func (o *NodeStatusResult) HasRemovalReason() bool {
	if o != nil && o.RemovalReason.IsSet() {
		return true
	}

	return false
}

// SetRemovalReason gets a reference to the given NullableString and assigns it to the RemovalReason field.
func (o *NodeStatusResult) SetRemovalReason(v string) {
	o.RemovalReason.Set(&v)
}
// SetRemovalReasonNil sets the value for RemovalReason to be an explicit nil
func (o *NodeStatusResult) SetRemovalReasonNil() {
	o.RemovalReason.Set(nil)
}

// UnsetRemovalReason ensures that no value is present for RemovalReason, not even an explicit nil
func (o *NodeStatusResult) UnsetRemovalReason() {
	o.RemovalReason.Unset()
}

// GetServices returns the Services field value if set, zero value otherwise.
func (o *NodeStatusResult) GetServices() []ServiceProcessEntry {
	if o == nil || IsNil(o.Services) {
		var ret []ServiceProcessEntry
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStatusResult) GetServicesOk() ([]ServiceProcessEntry, bool) {
	if o == nil || IsNil(o.Services) {
		return nil, false
	}
	return o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *NodeStatusResult) HasServices() bool {
	if o != nil && !IsNil(o.Services) {
		return true
	}

	return false
}

// SetServices gets a reference to the given []ServiceProcessEntry and assigns it to the Services field.
func (o *NodeStatusResult) SetServices(v []ServiceProcessEntry) {
	o.Services = v
}

// GetServicesAckedList returns the ServicesAckedList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetServicesAckedList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ServicesAckedList
}

// GetServicesAckedListOk returns a tuple with the ServicesAckedList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetServicesAckedListOk() ([]string, bool) {
	if o == nil || IsNil(o.ServicesAckedList) {
		return nil, false
	}
	return o.ServicesAckedList, true
}

// HasServicesAckedList returns a boolean if a field has been set.
func (o *NodeStatusResult) HasServicesAckedList() bool {
	if o != nil && !IsNil(o.ServicesAckedList) {
		return true
	}

	return false
}

// SetServicesAckedList gets a reference to the given []string and assigns it to the ServicesAckedList field.
func (o *NodeStatusResult) SetServicesAckedList(v []string) {
	o.ServicesAckedList = v
}

// GetServicesNotAcked returns the ServicesNotAcked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetServicesNotAcked() string {
	if o == nil || IsNil(o.ServicesNotAcked.Get()) {
		var ret string
		return ret
	}
	return *o.ServicesNotAcked.Get()
}

// GetServicesNotAckedOk returns a tuple with the ServicesNotAcked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetServicesNotAckedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServicesNotAcked.Get(), o.ServicesNotAcked.IsSet()
}

// HasServicesNotAcked returns a boolean if a field has been set.
func (o *NodeStatusResult) HasServicesNotAcked() bool {
	if o != nil && o.ServicesNotAcked.IsSet() {
		return true
	}

	return false
}

// SetServicesNotAcked gets a reference to the given NullableString and assigns it to the ServicesNotAcked field.
func (o *NodeStatusResult) SetServicesNotAcked(v string) {
	o.ServicesNotAcked.Set(&v)
}
// SetServicesNotAckedNil sets the value for ServicesNotAcked to be an explicit nil
func (o *NodeStatusResult) SetServicesNotAckedNil() {
	o.ServicesNotAcked.Set(nil)
}

// UnsetServicesNotAcked ensures that no value is present for ServicesNotAcked, not even an explicit nil
func (o *NodeStatusResult) UnsetServicesNotAcked() {
	o.ServicesNotAcked.Unset()
}

// GetServicesNotAckedList returns the ServicesNotAckedList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetServicesNotAckedList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ServicesNotAckedList
}

// GetServicesNotAckedListOk returns a tuple with the ServicesNotAckedList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetServicesNotAckedListOk() ([]string, bool) {
	if o == nil || IsNil(o.ServicesNotAckedList) {
		return nil, false
	}
	return o.ServicesNotAckedList, true
}

// HasServicesNotAckedList returns a boolean if a field has been set.
func (o *NodeStatusResult) HasServicesNotAckedList() bool {
	if o != nil && !IsNil(o.ServicesNotAckedList) {
		return true
	}

	return false
}

// SetServicesNotAckedList gets a reference to the given []string and assigns it to the ServicesNotAckedList field.
func (o *NodeStatusResult) SetServicesNotAckedList(v []string) {
	o.ServicesNotAckedList = v
}

// GetSoftwareVersion returns the SoftwareVersion field value if set, zero value otherwise.
func (o *NodeStatusResult) GetSoftwareVersion() string {
	if o == nil || IsNil(o.SoftwareVersion) {
		var ret string
		return ret
	}
	return *o.SoftwareVersion
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStatusResult) GetSoftwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareVersion) {
		return nil, false
	}
	return o.SoftwareVersion, true
}

// HasSoftwareVersion returns a boolean if a field has been set.
func (o *NodeStatusResult) HasSoftwareVersion() bool {
	if o != nil && !IsNil(o.SoftwareVersion) {
		return true
	}

	return false
}

// SetSoftwareVersion gets a reference to the given string and assigns it to the SoftwareVersion field.
func (o *NodeStatusResult) SetSoftwareVersion(v string) {
	o.SoftwareVersion = &v
}

// GetUptime returns the Uptime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatusResult) GetUptime() string {
	if o == nil || IsNil(o.Uptime.Get()) {
		var ret string
		return ret
	}
	return *o.Uptime.Get()
}

// GetUptimeOk returns a tuple with the Uptime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatusResult) GetUptimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uptime.Get(), o.Uptime.IsSet()
}

// HasUptime returns a boolean if a field has been set.
func (o *NodeStatusResult) HasUptime() bool {
	if o != nil && o.Uptime.IsSet() {
		return true
	}

	return false
}

// SetUptime gets a reference to the given NullableString and assigns it to the Uptime field.
func (o *NodeStatusResult) SetUptime(v string) {
	o.Uptime.Set(&v)
}
// SetUptimeNil sets the value for Uptime to be an explicit nil
func (o *NodeStatusResult) SetUptimeNil() {
	o.Uptime.Set(nil)
}

// UnsetUptime ensures that no value is present for Uptime, not even an explicit nil
func (o *NodeStatusResult) UnsetUptime() {
	o.Uptime.Unset()
}

func (o NodeStatusResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeStatusResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveOperation.IsSet() {
		toSerialize["activeOperation"] = o.ActiveOperation.Get()
	}
	if !IsNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.InCluster.IsSet() {
		toSerialize["inCluster"] = o.InCluster.Get()
	}
	if o.InMaintenanceMode.IsSet() {
		toSerialize["inMaintenanceMode"] = o.InMaintenanceMode.Get()
	}
	if !IsNil(o.IncarnationId) {
		toSerialize["incarnationId"] = o.IncarnationId
	}
	if o.Ip.IsSet() {
		toSerialize["ip"] = o.Ip.Get()
	}
	if o.IsAppNode.IsSet() {
		toSerialize["isAppNode"] = o.IsAppNode.Get()
	}
	if !IsNil(o.LastUpgradeTimeSecs) {
		toSerialize["lastUpgradeTimeSecs"] = o.LastUpgradeTimeSecs
	}
	if o.MarkedForRemoval.IsSet() {
		toSerialize["markedForRemoval"] = o.MarkedForRemoval.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.RemovalProgressList != nil {
		toSerialize["removalProgressList"] = o.RemovalProgressList
	}
	if o.RemovalReason.IsSet() {
		toSerialize["removalReason"] = o.RemovalReason.Get()
	}
	if !IsNil(o.Services) {
		toSerialize["services"] = o.Services
	}
	if o.ServicesAckedList != nil {
		toSerialize["servicesAckedList"] = o.ServicesAckedList
	}
	if o.ServicesNotAcked.IsSet() {
		toSerialize["servicesNotAcked"] = o.ServicesNotAcked.Get()
	}
	if o.ServicesNotAckedList != nil {
		toSerialize["servicesNotAckedList"] = o.ServicesNotAckedList
	}
	if !IsNil(o.SoftwareVersion) {
		toSerialize["softwareVersion"] = o.SoftwareVersion
	}
	if o.Uptime.IsSet() {
		toSerialize["uptime"] = o.Uptime.Get()
	}
	return toSerialize, nil
}

type NullableNodeStatusResult struct {
	value *NodeStatusResult
	isSet bool
}

func (v NullableNodeStatusResult) Get() *NodeStatusResult {
	return v.value
}

func (v *NullableNodeStatusResult) Set(val *NodeStatusResult) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeStatusResult) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeStatusResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeStatusResult(val *NodeStatusResult) *NullableNodeStatusResult {
	return &NullableNodeStatusResult{value: val, isSet: true}
}

func (v NullableNodeStatusResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeStatusResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


