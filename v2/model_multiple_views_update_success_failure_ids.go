/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the MultipleViewsUpdateSuccessFailureIds type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MultipleViewsUpdateSuccessFailureIds{}

// MultipleViewsUpdateSuccessFailureIds Specifies the list of View Ids which have succeeded/failed during multiple Views Update operation.
type MultipleViewsUpdateSuccessFailureIds struct {
	// List of View Ids that has resulted in a failed update.
	FailedViewIds []int32 `json:"failedViewIds,omitempty"`
	// List of View Ids that has resulted in a successful update.
	SucceededViewIds []int32 `json:"succeededViewIds,omitempty"`
}

// NewMultipleViewsUpdateSuccessFailureIds instantiates a new MultipleViewsUpdateSuccessFailureIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMultipleViewsUpdateSuccessFailureIds() *MultipleViewsUpdateSuccessFailureIds {
	this := MultipleViewsUpdateSuccessFailureIds{}
	return &this
}

// NewMultipleViewsUpdateSuccessFailureIdsWithDefaults instantiates a new MultipleViewsUpdateSuccessFailureIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMultipleViewsUpdateSuccessFailureIdsWithDefaults() *MultipleViewsUpdateSuccessFailureIds {
	this := MultipleViewsUpdateSuccessFailureIds{}
	return &this
}

// GetFailedViewIds returns the FailedViewIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultipleViewsUpdateSuccessFailureIds) GetFailedViewIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.FailedViewIds
}

// GetFailedViewIdsOk returns a tuple with the FailedViewIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultipleViewsUpdateSuccessFailureIds) GetFailedViewIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.FailedViewIds) {
		return nil, false
	}
	return o.FailedViewIds, true
}

// HasFailedViewIds returns a boolean if a field has been set.
func (o *MultipleViewsUpdateSuccessFailureIds) HasFailedViewIds() bool {
	if o != nil && !IsNil(o.FailedViewIds) {
		return true
	}

	return false
}

// SetFailedViewIds gets a reference to the given []int32 and assigns it to the FailedViewIds field.
func (o *MultipleViewsUpdateSuccessFailureIds) SetFailedViewIds(v []int32) {
	o.FailedViewIds = v
}

// GetSucceededViewIds returns the SucceededViewIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MultipleViewsUpdateSuccessFailureIds) GetSucceededViewIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}
	return o.SucceededViewIds
}

// GetSucceededViewIdsOk returns a tuple with the SucceededViewIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MultipleViewsUpdateSuccessFailureIds) GetSucceededViewIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.SucceededViewIds) {
		return nil, false
	}
	return o.SucceededViewIds, true
}

// HasSucceededViewIds returns a boolean if a field has been set.
func (o *MultipleViewsUpdateSuccessFailureIds) HasSucceededViewIds() bool {
	if o != nil && !IsNil(o.SucceededViewIds) {
		return true
	}

	return false
}

// SetSucceededViewIds gets a reference to the given []int32 and assigns it to the SucceededViewIds field.
func (o *MultipleViewsUpdateSuccessFailureIds) SetSucceededViewIds(v []int32) {
	o.SucceededViewIds = v
}

func (o MultipleViewsUpdateSuccessFailureIds) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MultipleViewsUpdateSuccessFailureIds) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FailedViewIds != nil {
		toSerialize["failedViewIds"] = o.FailedViewIds
	}
	if o.SucceededViewIds != nil {
		toSerialize["succeededViewIds"] = o.SucceededViewIds
	}
	return toSerialize, nil
}

type NullableMultipleViewsUpdateSuccessFailureIds struct {
	value *MultipleViewsUpdateSuccessFailureIds
	isSet bool
}

func (v NullableMultipleViewsUpdateSuccessFailureIds) Get() *MultipleViewsUpdateSuccessFailureIds {
	return v.value
}

func (v *NullableMultipleViewsUpdateSuccessFailureIds) Set(val *MultipleViewsUpdateSuccessFailureIds) {
	v.value = val
	v.isSet = true
}

func (v NullableMultipleViewsUpdateSuccessFailureIds) IsSet() bool {
	return v.isSet
}

func (v *NullableMultipleViewsUpdateSuccessFailureIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMultipleViewsUpdateSuccessFailureIds(val *MultipleViewsUpdateSuccessFailureIds) *NullableMultipleViewsUpdateSuccessFailureIds {
	return &NullableMultipleViewsUpdateSuccessFailureIds{value: val, isSet: true}
}

func (v NullableMultipleViewsUpdateSuccessFailureIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMultipleViewsUpdateSuccessFailureIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


