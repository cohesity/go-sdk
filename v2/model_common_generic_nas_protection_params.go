/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CommonGenericNasProtectionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonGenericNasProtectionParams{}

// CommonGenericNasProtectionParams Specifies the parameters which are specific to Generic NAS Protection.
type CommonGenericNasProtectionParams struct {
	// Specifies whether or not the backup should continue regardless of whether or not an error was encountered.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies whether the encryption should be used while backup or not.
	EncryptionEnabled NullableBool `json:"encryptionEnabled,omitempty"`
	FileFilters *FileFilteringPolicy `json:"fileFilters,omitempty"`
	FileLockConfig *FileLevelDataLockConfig `json:"fileLockConfig,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	PrePostScript *HostBasedBackupScriptParams `json:"prePostScript,omitempty"`
	ThrottlingConfig *NasThrottlingConfig `json:"throttlingConfig,omitempty"`
}

// NewCommonGenericNasProtectionParams instantiates a new CommonGenericNasProtectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonGenericNasProtectionParams() *CommonGenericNasProtectionParams {
	this := CommonGenericNasProtectionParams{}
	return &this
}

// NewCommonGenericNasProtectionParamsWithDefaults instantiates a new CommonGenericNasProtectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonGenericNasProtectionParamsWithDefaults() *CommonGenericNasProtectionParams {
	this := CommonGenericNasProtectionParams{}
	return &this
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonGenericNasProtectionParams) GetContinueOnError() bool {
	if o == nil || IsNil(o.ContinueOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonGenericNasProtectionParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *CommonGenericNasProtectionParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *CommonGenericNasProtectionParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *CommonGenericNasProtectionParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *CommonGenericNasProtectionParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetEncryptionEnabled returns the EncryptionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonGenericNasProtectionParams) GetEncryptionEnabled() bool {
	if o == nil || IsNil(o.EncryptionEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.EncryptionEnabled.Get()
}

// GetEncryptionEnabledOk returns a tuple with the EncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonGenericNasProtectionParams) GetEncryptionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionEnabled.Get(), o.EncryptionEnabled.IsSet()
}

// HasEncryptionEnabled returns a boolean if a field has been set.
func (o *CommonGenericNasProtectionParams) HasEncryptionEnabled() bool {
	if o != nil && o.EncryptionEnabled.IsSet() {
		return true
	}

	return false
}

// SetEncryptionEnabled gets a reference to the given NullableBool and assigns it to the EncryptionEnabled field.
func (o *CommonGenericNasProtectionParams) SetEncryptionEnabled(v bool) {
	o.EncryptionEnabled.Set(&v)
}
// SetEncryptionEnabledNil sets the value for EncryptionEnabled to be an explicit nil
func (o *CommonGenericNasProtectionParams) SetEncryptionEnabledNil() {
	o.EncryptionEnabled.Set(nil)
}

// UnsetEncryptionEnabled ensures that no value is present for EncryptionEnabled, not even an explicit nil
func (o *CommonGenericNasProtectionParams) UnsetEncryptionEnabled() {
	o.EncryptionEnabled.Unset()
}

// GetFileFilters returns the FileFilters field value if set, zero value otherwise.
func (o *CommonGenericNasProtectionParams) GetFileFilters() FileFilteringPolicy {
	if o == nil || IsNil(o.FileFilters) {
		var ret FileFilteringPolicy
		return ret
	}
	return *o.FileFilters
}

// GetFileFiltersOk returns a tuple with the FileFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonGenericNasProtectionParams) GetFileFiltersOk() (*FileFilteringPolicy, bool) {
	if o == nil || IsNil(o.FileFilters) {
		return nil, false
	}
	return o.FileFilters, true
}

// HasFileFilters returns a boolean if a field has been set.
func (o *CommonGenericNasProtectionParams) HasFileFilters() bool {
	if o != nil && !IsNil(o.FileFilters) {
		return true
	}

	return false
}

// SetFileFilters gets a reference to the given FileFilteringPolicy and assigns it to the FileFilters field.
func (o *CommonGenericNasProtectionParams) SetFileFilters(v FileFilteringPolicy) {
	o.FileFilters = &v
}

// GetFileLockConfig returns the FileLockConfig field value if set, zero value otherwise.
func (o *CommonGenericNasProtectionParams) GetFileLockConfig() FileLevelDataLockConfig {
	if o == nil || IsNil(o.FileLockConfig) {
		var ret FileLevelDataLockConfig
		return ret
	}
	return *o.FileLockConfig
}

// GetFileLockConfigOk returns a tuple with the FileLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonGenericNasProtectionParams) GetFileLockConfigOk() (*FileLevelDataLockConfig, bool) {
	if o == nil || IsNil(o.FileLockConfig) {
		return nil, false
	}
	return o.FileLockConfig, true
}

// HasFileLockConfig returns a boolean if a field has been set.
func (o *CommonGenericNasProtectionParams) HasFileLockConfig() bool {
	if o != nil && !IsNil(o.FileLockConfig) {
		return true
	}

	return false
}

// SetFileLockConfig gets a reference to the given FileLevelDataLockConfig and assigns it to the FileLockConfig field.
func (o *CommonGenericNasProtectionParams) SetFileLockConfig(v FileLevelDataLockConfig) {
	o.FileLockConfig = &v
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *CommonGenericNasProtectionParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || IsNil(o.IndexingPolicy) {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonGenericNasProtectionParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || IsNil(o.IndexingPolicy) {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *CommonGenericNasProtectionParams) HasIndexingPolicy() bool {
	if o != nil && !IsNil(o.IndexingPolicy) {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *CommonGenericNasProtectionParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetPrePostScript returns the PrePostScript field value if set, zero value otherwise.
func (o *CommonGenericNasProtectionParams) GetPrePostScript() HostBasedBackupScriptParams {
	if o == nil || IsNil(o.PrePostScript) {
		var ret HostBasedBackupScriptParams
		return ret
	}
	return *o.PrePostScript
}

// GetPrePostScriptOk returns a tuple with the PrePostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonGenericNasProtectionParams) GetPrePostScriptOk() (*HostBasedBackupScriptParams, bool) {
	if o == nil || IsNil(o.PrePostScript) {
		return nil, false
	}
	return o.PrePostScript, true
}

// HasPrePostScript returns a boolean if a field has been set.
func (o *CommonGenericNasProtectionParams) HasPrePostScript() bool {
	if o != nil && !IsNil(o.PrePostScript) {
		return true
	}

	return false
}

// SetPrePostScript gets a reference to the given HostBasedBackupScriptParams and assigns it to the PrePostScript field.
func (o *CommonGenericNasProtectionParams) SetPrePostScript(v HostBasedBackupScriptParams) {
	o.PrePostScript = &v
}

// GetThrottlingConfig returns the ThrottlingConfig field value if set, zero value otherwise.
func (o *CommonGenericNasProtectionParams) GetThrottlingConfig() NasThrottlingConfig {
	if o == nil || IsNil(o.ThrottlingConfig) {
		var ret NasThrottlingConfig
		return ret
	}
	return *o.ThrottlingConfig
}

// GetThrottlingConfigOk returns a tuple with the ThrottlingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonGenericNasProtectionParams) GetThrottlingConfigOk() (*NasThrottlingConfig, bool) {
	if o == nil || IsNil(o.ThrottlingConfig) {
		return nil, false
	}
	return o.ThrottlingConfig, true
}

// HasThrottlingConfig returns a boolean if a field has been set.
func (o *CommonGenericNasProtectionParams) HasThrottlingConfig() bool {
	if o != nil && !IsNil(o.ThrottlingConfig) {
		return true
	}

	return false
}

// SetThrottlingConfig gets a reference to the given NasThrottlingConfig and assigns it to the ThrottlingConfig field.
func (o *CommonGenericNasProtectionParams) SetThrottlingConfig(v NasThrottlingConfig) {
	o.ThrottlingConfig = &v
}

func (o CommonGenericNasProtectionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonGenericNasProtectionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.EncryptionEnabled.IsSet() {
		toSerialize["encryptionEnabled"] = o.EncryptionEnabled.Get()
	}
	if !IsNil(o.FileFilters) {
		toSerialize["fileFilters"] = o.FileFilters
	}
	if !IsNil(o.FileLockConfig) {
		toSerialize["fileLockConfig"] = o.FileLockConfig
	}
	if !IsNil(o.IndexingPolicy) {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	if !IsNil(o.PrePostScript) {
		toSerialize["prePostScript"] = o.PrePostScript
	}
	if !IsNil(o.ThrottlingConfig) {
		toSerialize["throttlingConfig"] = o.ThrottlingConfig
	}
	return toSerialize, nil
}

type NullableCommonGenericNasProtectionParams struct {
	value *CommonGenericNasProtectionParams
	isSet bool
}

func (v NullableCommonGenericNasProtectionParams) Get() *CommonGenericNasProtectionParams {
	return v.value
}

func (v *NullableCommonGenericNasProtectionParams) Set(val *CommonGenericNasProtectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonGenericNasProtectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonGenericNasProtectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonGenericNasProtectionParams(val *CommonGenericNasProtectionParams) *NullableCommonGenericNasProtectionParams {
	return &NullableCommonGenericNasProtectionParams{value: val, isSet: true}
}

func (v NullableCommonGenericNasProtectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonGenericNasProtectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


