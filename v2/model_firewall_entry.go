/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FirewallEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallEntry{}

// FirewallEntry Specifies the firewall settings of a node.
type FirewallEntry struct {
	// Specifies the firewall profile attachments.
	Attachments []Attachment `json:"attachments,omitempty"`
	// Specifies the firewall ipsets.
	Ipsets []FirewallIPSet `json:"ipsets,omitempty"`
	// Specifies the firewall profiles.
	Profiles []FirewallProfile `json:"profiles,omitempty"`
}

// NewFirewallEntry instantiates a new FirewallEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallEntry() *FirewallEntry {
	this := FirewallEntry{}
	return &this
}

// NewFirewallEntryWithDefaults instantiates a new FirewallEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallEntryWithDefaults() *FirewallEntry {
	this := FirewallEntry{}
	return &this
}

// GetAttachments returns the Attachments field value if set, zero value otherwise.
func (o *FirewallEntry) GetAttachments() []Attachment {
	if o == nil || IsNil(o.Attachments) {
		var ret []Attachment
		return ret
	}
	return o.Attachments
}

// GetAttachmentsOk returns a tuple with the Attachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallEntry) GetAttachmentsOk() ([]Attachment, bool) {
	if o == nil || IsNil(o.Attachments) {
		return nil, false
	}
	return o.Attachments, true
}

// HasAttachments returns a boolean if a field has been set.
func (o *FirewallEntry) HasAttachments() bool {
	if o != nil && !IsNil(o.Attachments) {
		return true
	}

	return false
}

// SetAttachments gets a reference to the given []Attachment and assigns it to the Attachments field.
func (o *FirewallEntry) SetAttachments(v []Attachment) {
	o.Attachments = v
}

// GetIpsets returns the Ipsets field value if set, zero value otherwise.
func (o *FirewallEntry) GetIpsets() []FirewallIPSet {
	if o == nil || IsNil(o.Ipsets) {
		var ret []FirewallIPSet
		return ret
	}
	return o.Ipsets
}

// GetIpsetsOk returns a tuple with the Ipsets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallEntry) GetIpsetsOk() ([]FirewallIPSet, bool) {
	if o == nil || IsNil(o.Ipsets) {
		return nil, false
	}
	return o.Ipsets, true
}

// HasIpsets returns a boolean if a field has been set.
func (o *FirewallEntry) HasIpsets() bool {
	if o != nil && !IsNil(o.Ipsets) {
		return true
	}

	return false
}

// SetIpsets gets a reference to the given []FirewallIPSet and assigns it to the Ipsets field.
func (o *FirewallEntry) SetIpsets(v []FirewallIPSet) {
	o.Ipsets = v
}

// GetProfiles returns the Profiles field value if set, zero value otherwise.
func (o *FirewallEntry) GetProfiles() []FirewallProfile {
	if o == nil || IsNil(o.Profiles) {
		var ret []FirewallProfile
		return ret
	}
	return o.Profiles
}

// GetProfilesOk returns a tuple with the Profiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallEntry) GetProfilesOk() ([]FirewallProfile, bool) {
	if o == nil || IsNil(o.Profiles) {
		return nil, false
	}
	return o.Profiles, true
}

// HasProfiles returns a boolean if a field has been set.
func (o *FirewallEntry) HasProfiles() bool {
	if o != nil && !IsNil(o.Profiles) {
		return true
	}

	return false
}

// SetProfiles gets a reference to the given []FirewallProfile and assigns it to the Profiles field.
func (o *FirewallEntry) SetProfiles(v []FirewallProfile) {
	o.Profiles = v
}

func (o FirewallEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Attachments) {
		toSerialize["attachments"] = o.Attachments
	}
	if !IsNil(o.Ipsets) {
		toSerialize["ipsets"] = o.Ipsets
	}
	if !IsNil(o.Profiles) {
		toSerialize["profiles"] = o.Profiles
	}
	return toSerialize, nil
}

type NullableFirewallEntry struct {
	value *FirewallEntry
	isSet bool
}

func (v NullableFirewallEntry) Get() *FirewallEntry {
	return v.value
}

func (v *NullableFirewallEntry) Set(val *FirewallEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallEntry(val *FirewallEntry) *NullableFirewallEntry {
	return &NullableFirewallEntry{value: val, isSet: true}
}

func (v NullableFirewallEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


