/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MsSQLCommonConnectionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MsSQLCommonConnectionParams{}

// MsSQLCommonConnectionParams Specifies the common parameters to connect to a SQL node/cluster
type MsSQLCommonConnectionParams struct {
	// Specifies the unique identifier to locate the SQL node or cluster. The host identifier can be IP address or FQDN.
	HostIdentifier string `json:"hostIdentifier"`
}

type _MsSQLCommonConnectionParams MsSQLCommonConnectionParams

// NewMsSQLCommonConnectionParams instantiates a new MsSQLCommonConnectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMsSQLCommonConnectionParams(hostIdentifier string) *MsSQLCommonConnectionParams {
	this := MsSQLCommonConnectionParams{}
	this.HostIdentifier = hostIdentifier
	return &this
}

// NewMsSQLCommonConnectionParamsWithDefaults instantiates a new MsSQLCommonConnectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMsSQLCommonConnectionParamsWithDefaults() *MsSQLCommonConnectionParams {
	this := MsSQLCommonConnectionParams{}
	return &this
}

// GetHostIdentifier returns the HostIdentifier field value
func (o *MsSQLCommonConnectionParams) GetHostIdentifier() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.HostIdentifier
}

// GetHostIdentifierOk returns a tuple with the HostIdentifier field value
// and a boolean to check if the value has been set.
func (o *MsSQLCommonConnectionParams) GetHostIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HostIdentifier, true
}

// SetHostIdentifier sets field value
func (o *MsSQLCommonConnectionParams) SetHostIdentifier(v string) {
	o.HostIdentifier = v
}

func (o MsSQLCommonConnectionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MsSQLCommonConnectionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hostIdentifier"] = o.HostIdentifier
	return toSerialize, nil
}

func (o *MsSQLCommonConnectionParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hostIdentifier",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMsSQLCommonConnectionParams := _MsSQLCommonConnectionParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMsSQLCommonConnectionParams)

	if err != nil {
		return err
	}

	*o = MsSQLCommonConnectionParams(varMsSQLCommonConnectionParams)

	return err
}

type NullableMsSQLCommonConnectionParams struct {
	value *MsSQLCommonConnectionParams
	isSet bool
}

func (v NullableMsSQLCommonConnectionParams) Get() *MsSQLCommonConnectionParams {
	return v.value
}

func (v *NullableMsSQLCommonConnectionParams) Set(val *MsSQLCommonConnectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMsSQLCommonConnectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMsSQLCommonConnectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMsSQLCommonConnectionParams(val *MsSQLCommonConnectionParams) *NullableMsSQLCommonConnectionParams {
	return &NullableMsSQLCommonConnectionParams{value: val, isSet: true}
}

func (v NullableMsSQLCommonConnectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMsSQLCommonConnectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


