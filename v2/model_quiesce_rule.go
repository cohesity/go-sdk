/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QuiesceRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuiesceRule{}

// QuiesceRule Specifies the Kubernetes Quiesce rule
type QuiesceRule struct {
	// Specifies the labels to select a pod.
	PodSelectorLabels []KubernetesLabel `json:"podSelectorLabels,omitempty"`
	// Specifies the hooks to be applied after taking snapshot.
	PostSnapshotHooks []KubernetesHook `json:"postSnapshotHooks"`
	// Specifies the hooks to be applied before taking snapshot.
	PreSnapshotHooks []KubernetesHook `json:"preSnapshotHooks"`
}

type _QuiesceRule QuiesceRule

// NewQuiesceRule instantiates a new QuiesceRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuiesceRule(postSnapshotHooks []KubernetesHook, preSnapshotHooks []KubernetesHook) *QuiesceRule {
	this := QuiesceRule{}
	this.PostSnapshotHooks = postSnapshotHooks
	this.PreSnapshotHooks = preSnapshotHooks
	return &this
}

// NewQuiesceRuleWithDefaults instantiates a new QuiesceRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuiesceRuleWithDefaults() *QuiesceRule {
	this := QuiesceRule{}
	return &this
}

// GetPodSelectorLabels returns the PodSelectorLabels field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuiesceRule) GetPodSelectorLabels() []KubernetesLabel {
	if o == nil {
		var ret []KubernetesLabel
		return ret
	}
	return o.PodSelectorLabels
}

// GetPodSelectorLabelsOk returns a tuple with the PodSelectorLabels field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuiesceRule) GetPodSelectorLabelsOk() ([]KubernetesLabel, bool) {
	if o == nil || IsNil(o.PodSelectorLabels) {
		return nil, false
	}
	return o.PodSelectorLabels, true
}

// HasPodSelectorLabels returns a boolean if a field has been set.
func (o *QuiesceRule) HasPodSelectorLabels() bool {
	if o != nil && !IsNil(o.PodSelectorLabels) {
		return true
	}

	return false
}

// SetPodSelectorLabels gets a reference to the given []KubernetesLabel and assigns it to the PodSelectorLabels field.
func (o *QuiesceRule) SetPodSelectorLabels(v []KubernetesLabel) {
	o.PodSelectorLabels = v
}

// GetPostSnapshotHooks returns the PostSnapshotHooks field value
// If the value is explicit nil, the zero value for []KubernetesHook will be returned
func (o *QuiesceRule) GetPostSnapshotHooks() []KubernetesHook {
	if o == nil {
		var ret []KubernetesHook
		return ret
	}

	return o.PostSnapshotHooks
}

// GetPostSnapshotHooksOk returns a tuple with the PostSnapshotHooks field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuiesceRule) GetPostSnapshotHooksOk() ([]KubernetesHook, bool) {
	if o == nil || IsNil(o.PostSnapshotHooks) {
		return nil, false
	}
	return o.PostSnapshotHooks, true
}

// SetPostSnapshotHooks sets field value
func (o *QuiesceRule) SetPostSnapshotHooks(v []KubernetesHook) {
	o.PostSnapshotHooks = v
}

// GetPreSnapshotHooks returns the PreSnapshotHooks field value
// If the value is explicit nil, the zero value for []KubernetesHook will be returned
func (o *QuiesceRule) GetPreSnapshotHooks() []KubernetesHook {
	if o == nil {
		var ret []KubernetesHook
		return ret
	}

	return o.PreSnapshotHooks
}

// GetPreSnapshotHooksOk returns a tuple with the PreSnapshotHooks field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuiesceRule) GetPreSnapshotHooksOk() ([]KubernetesHook, bool) {
	if o == nil || IsNil(o.PreSnapshotHooks) {
		return nil, false
	}
	return o.PreSnapshotHooks, true
}

// SetPreSnapshotHooks sets field value
func (o *QuiesceRule) SetPreSnapshotHooks(v []KubernetesHook) {
	o.PreSnapshotHooks = v
}

func (o QuiesceRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuiesceRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.PodSelectorLabels != nil {
		toSerialize["podSelectorLabels"] = o.PodSelectorLabels
	}
	if o.PostSnapshotHooks != nil {
		toSerialize["postSnapshotHooks"] = o.PostSnapshotHooks
	}
	if o.PreSnapshotHooks != nil {
		toSerialize["preSnapshotHooks"] = o.PreSnapshotHooks
	}
	return toSerialize, nil
}

func (o *QuiesceRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"postSnapshotHooks",
		"preSnapshotHooks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuiesceRule := _QuiesceRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuiesceRule)

	if err != nil {
		return err
	}

	*o = QuiesceRule(varQuiesceRule)

	return err
}

type NullableQuiesceRule struct {
	value *QuiesceRule
	isSet bool
}

func (v NullableQuiesceRule) Get() *QuiesceRule {
	return v.value
}

func (v *NullableQuiesceRule) Set(val *QuiesceRule) {
	v.value = val
	v.isSet = true
}

func (v NullableQuiesceRule) IsSet() bool {
	return v.isSet
}

func (v *NullableQuiesceRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuiesceRule(val *QuiesceRule) *NullableQuiesceRule {
	return &NullableQuiesceRule{value: val, isSet: true}
}

func (v NullableQuiesceRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuiesceRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


