/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UserQuotaDeleteParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserQuotaDeleteParams{}

// UserQuotaDeleteParams Specifies list of users to delete logical user quota. If userIds are not specified, all the user quotas will be deleted.
type UserQuotaDeleteParams struct {
	// Array of userIds. Specifies the list of user Ids to delete logical user quota override.
	UserIds []UserId `json:"userIds,omitempty"`
}

// NewUserQuotaDeleteParams instantiates a new UserQuotaDeleteParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserQuotaDeleteParams() *UserQuotaDeleteParams {
	this := UserQuotaDeleteParams{}
	return &this
}

// NewUserQuotaDeleteParamsWithDefaults instantiates a new UserQuotaDeleteParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserQuotaDeleteParamsWithDefaults() *UserQuotaDeleteParams {
	this := UserQuotaDeleteParams{}
	return &this
}

// GetUserIds returns the UserIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuotaDeleteParams) GetUserIds() []UserId {
	if o == nil {
		var ret []UserId
		return ret
	}
	return o.UserIds
}

// GetUserIdsOk returns a tuple with the UserIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuotaDeleteParams) GetUserIdsOk() ([]UserId, bool) {
	if o == nil || IsNil(o.UserIds) {
		return nil, false
	}
	return o.UserIds, true
}

// HasUserIds returns a boolean if a field has been set.
func (o *UserQuotaDeleteParams) HasUserIds() bool {
	if o != nil && !IsNil(o.UserIds) {
		return true
	}

	return false
}

// SetUserIds gets a reference to the given []UserId and assigns it to the UserIds field.
func (o *UserQuotaDeleteParams) SetUserIds(v []UserId) {
	o.UserIds = v
}

func (o UserQuotaDeleteParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserQuotaDeleteParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.UserIds != nil {
		toSerialize["userIds"] = o.UserIds
	}
	return toSerialize, nil
}

type NullableUserQuotaDeleteParams struct {
	value *UserQuotaDeleteParams
	isSet bool
}

func (v NullableUserQuotaDeleteParams) Get() *UserQuotaDeleteParams {
	return v.value
}

func (v *NullableUserQuotaDeleteParams) Set(val *UserQuotaDeleteParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUserQuotaDeleteParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUserQuotaDeleteParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserQuotaDeleteParams(val *UserQuotaDeleteParams) *NullableUserQuotaDeleteParams {
	return &NullableUserQuotaDeleteParams{value: val, isSet: true}
}

func (v NullableUserQuotaDeleteParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserQuotaDeleteParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


