/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PackageComponent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PackageComponent{}

// PackageComponent \"Software upgrade sub package. Aplicable for one helios package\" 
type PackageComponent struct {
	// Name of sub package
	PackageName *string `json:"packageName,omitempty"`
	// Release Version of sub package.
	Release *string `json:"release,omitempty"`
	// Version of sub package.
	Version *string `json:"version,omitempty"`
}

// NewPackageComponent instantiates a new PackageComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackageComponent() *PackageComponent {
	this := PackageComponent{}
	return &this
}

// NewPackageComponentWithDefaults instantiates a new PackageComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageComponentWithDefaults() *PackageComponent {
	this := PackageComponent{}
	return &this
}

// GetPackageName returns the PackageName field value if set, zero value otherwise.
func (o *PackageComponent) GetPackageName() string {
	if o == nil || IsNil(o.PackageName) {
		var ret string
		return ret
	}
	return *o.PackageName
}

// GetPackageNameOk returns a tuple with the PackageName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageComponent) GetPackageNameOk() (*string, bool) {
	if o == nil || IsNil(o.PackageName) {
		return nil, false
	}
	return o.PackageName, true
}

// HasPackageName returns a boolean if a field has been set.
func (o *PackageComponent) HasPackageName() bool {
	if o != nil && !IsNil(o.PackageName) {
		return true
	}

	return false
}

// SetPackageName gets a reference to the given string and assigns it to the PackageName field.
func (o *PackageComponent) SetPackageName(v string) {
	o.PackageName = &v
}

// GetRelease returns the Release field value if set, zero value otherwise.
func (o *PackageComponent) GetRelease() string {
	if o == nil || IsNil(o.Release) {
		var ret string
		return ret
	}
	return *o.Release
}

// GetReleaseOk returns a tuple with the Release field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageComponent) GetReleaseOk() (*string, bool) {
	if o == nil || IsNil(o.Release) {
		return nil, false
	}
	return o.Release, true
}

// HasRelease returns a boolean if a field has been set.
func (o *PackageComponent) HasRelease() bool {
	if o != nil && !IsNil(o.Release) {
		return true
	}

	return false
}

// SetRelease gets a reference to the given string and assigns it to the Release field.
func (o *PackageComponent) SetRelease(v string) {
	o.Release = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PackageComponent) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PackageComponent) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PackageComponent) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *PackageComponent) SetVersion(v string) {
	o.Version = &v
}

func (o PackageComponent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PackageComponent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PackageName) {
		toSerialize["packageName"] = o.PackageName
	}
	if !IsNil(o.Release) {
		toSerialize["release"] = o.Release
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullablePackageComponent struct {
	value *PackageComponent
	isSet bool
}

func (v NullablePackageComponent) Get() *PackageComponent {
	return v.value
}

func (v *NullablePackageComponent) Set(val *PackageComponent) {
	v.value = val
	v.isSet = true
}

func (v NullablePackageComponent) IsSet() bool {
	return v.isSet
}

func (v *NullablePackageComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackageComponent(val *PackageComponent) *NullablePackageComponent {
	return &NullablePackageComponent{value: val, isSet: true}
}

func (v NullablePackageComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackageComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


