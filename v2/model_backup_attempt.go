/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BackupAttempt type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupAttempt{}

// BackupAttempt Specifies a backup attempt for an object.
type BackupAttempt struct {
	// Specifies the time at which the backup task was admitted to run in Unix epoch Timestamp(in microseconds) for an object.
	AdmittedTimeUsecs NullableInt64 `json:"admittedTimeUsecs,omitempty"`
	// Specifies the end time of attempt in Unix epoch Timestamp(in microseconds) for an object.
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// A message about the error if encountered while performing backup.
	Message NullableString `json:"message,omitempty"`
	// Specifies the time when gatekeeper permit is granted to the backup task. If the backup task is rescheduled due to errors, the field is updated to the time when permit is granted again.
	PermitGrantTimeUsecs NullableInt64 `json:"permitGrantTimeUsecs,omitempty"`
	// Progress monitor task for an object..
	ProgressTaskId NullableString `json:"progressTaskId,omitempty"`
	// Specifies the duration between the startTime and when gatekeeper permit is granted to the backup task. If the backup task is rescheduled due to errors, the field is updated considering the time when permit is granted again. Queue duration = PermitGrantTimeUsecs - StartTimeUsecs
	QueueDurationUsecs NullableInt64 `json:"queueDurationUsecs,omitempty"`
	// Specifies the time at which the source snapshot was taken in Unix epoch Timestamp(in microseconds) for an object.
	SnapshotCreationTimeUsecs NullableInt64 `json:"snapshotCreationTimeUsecs,omitempty"`
	// Specifies the start time of attempt in Unix epoch Timestamp(in microseconds) for an object.
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	Stats *BackupDataStats `json:"stats,omitempty"`
	// Status of the attempt for an object. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Pausing' indicates that the ongoing run is in the process of being paused. 'Resuming' indicates that the already paused run is in the process of being running again. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.
	Status NullableString `json:"status,omitempty"`
}

// NewBackupAttempt instantiates a new BackupAttempt object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupAttempt() *BackupAttempt {
	this := BackupAttempt{}
	return &this
}

// NewBackupAttemptWithDefaults instantiates a new BackupAttempt object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupAttemptWithDefaults() *BackupAttempt {
	this := BackupAttempt{}
	return &this
}

// GetAdmittedTimeUsecs returns the AdmittedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupAttempt) GetAdmittedTimeUsecs() int64 {
	if o == nil || IsNil(o.AdmittedTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.AdmittedTimeUsecs.Get()
}

// GetAdmittedTimeUsecsOk returns a tuple with the AdmittedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAttempt) GetAdmittedTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdmittedTimeUsecs.Get(), o.AdmittedTimeUsecs.IsSet()
}

// HasAdmittedTimeUsecs returns a boolean if a field has been set.
func (o *BackupAttempt) HasAdmittedTimeUsecs() bool {
	if o != nil && o.AdmittedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetAdmittedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the AdmittedTimeUsecs field.
func (o *BackupAttempt) SetAdmittedTimeUsecs(v int64) {
	o.AdmittedTimeUsecs.Set(&v)
}
// SetAdmittedTimeUsecsNil sets the value for AdmittedTimeUsecs to be an explicit nil
func (o *BackupAttempt) SetAdmittedTimeUsecsNil() {
	o.AdmittedTimeUsecs.Set(nil)
}

// UnsetAdmittedTimeUsecs ensures that no value is present for AdmittedTimeUsecs, not even an explicit nil
func (o *BackupAttempt) UnsetAdmittedTimeUsecs() {
	o.AdmittedTimeUsecs.Unset()
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupAttempt) GetEndTimeUsecs() int64 {
	if o == nil || IsNil(o.EndTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAttempt) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *BackupAttempt) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *BackupAttempt) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *BackupAttempt) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *BackupAttempt) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupAttempt) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAttempt) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *BackupAttempt) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *BackupAttempt) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *BackupAttempt) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *BackupAttempt) UnsetMessage() {
	o.Message.Unset()
}

// GetPermitGrantTimeUsecs returns the PermitGrantTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupAttempt) GetPermitGrantTimeUsecs() int64 {
	if o == nil || IsNil(o.PermitGrantTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.PermitGrantTimeUsecs.Get()
}

// GetPermitGrantTimeUsecsOk returns a tuple with the PermitGrantTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAttempt) GetPermitGrantTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PermitGrantTimeUsecs.Get(), o.PermitGrantTimeUsecs.IsSet()
}

// HasPermitGrantTimeUsecs returns a boolean if a field has been set.
func (o *BackupAttempt) HasPermitGrantTimeUsecs() bool {
	if o != nil && o.PermitGrantTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetPermitGrantTimeUsecs gets a reference to the given NullableInt64 and assigns it to the PermitGrantTimeUsecs field.
func (o *BackupAttempt) SetPermitGrantTimeUsecs(v int64) {
	o.PermitGrantTimeUsecs.Set(&v)
}
// SetPermitGrantTimeUsecsNil sets the value for PermitGrantTimeUsecs to be an explicit nil
func (o *BackupAttempt) SetPermitGrantTimeUsecsNil() {
	o.PermitGrantTimeUsecs.Set(nil)
}

// UnsetPermitGrantTimeUsecs ensures that no value is present for PermitGrantTimeUsecs, not even an explicit nil
func (o *BackupAttempt) UnsetPermitGrantTimeUsecs() {
	o.PermitGrantTimeUsecs.Unset()
}

// GetProgressTaskId returns the ProgressTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupAttempt) GetProgressTaskId() string {
	if o == nil || IsNil(o.ProgressTaskId.Get()) {
		var ret string
		return ret
	}
	return *o.ProgressTaskId.Get()
}

// GetProgressTaskIdOk returns a tuple with the ProgressTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAttempt) GetProgressTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProgressTaskId.Get(), o.ProgressTaskId.IsSet()
}

// HasProgressTaskId returns a boolean if a field has been set.
func (o *BackupAttempt) HasProgressTaskId() bool {
	if o != nil && o.ProgressTaskId.IsSet() {
		return true
	}

	return false
}

// SetProgressTaskId gets a reference to the given NullableString and assigns it to the ProgressTaskId field.
func (o *BackupAttempt) SetProgressTaskId(v string) {
	o.ProgressTaskId.Set(&v)
}
// SetProgressTaskIdNil sets the value for ProgressTaskId to be an explicit nil
func (o *BackupAttempt) SetProgressTaskIdNil() {
	o.ProgressTaskId.Set(nil)
}

// UnsetProgressTaskId ensures that no value is present for ProgressTaskId, not even an explicit nil
func (o *BackupAttempt) UnsetProgressTaskId() {
	o.ProgressTaskId.Unset()
}

// GetQueueDurationUsecs returns the QueueDurationUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupAttempt) GetQueueDurationUsecs() int64 {
	if o == nil || IsNil(o.QueueDurationUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.QueueDurationUsecs.Get()
}

// GetQueueDurationUsecsOk returns a tuple with the QueueDurationUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAttempt) GetQueueDurationUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.QueueDurationUsecs.Get(), o.QueueDurationUsecs.IsSet()
}

// HasQueueDurationUsecs returns a boolean if a field has been set.
func (o *BackupAttempt) HasQueueDurationUsecs() bool {
	if o != nil && o.QueueDurationUsecs.IsSet() {
		return true
	}

	return false
}

// SetQueueDurationUsecs gets a reference to the given NullableInt64 and assigns it to the QueueDurationUsecs field.
func (o *BackupAttempt) SetQueueDurationUsecs(v int64) {
	o.QueueDurationUsecs.Set(&v)
}
// SetQueueDurationUsecsNil sets the value for QueueDurationUsecs to be an explicit nil
func (o *BackupAttempt) SetQueueDurationUsecsNil() {
	o.QueueDurationUsecs.Set(nil)
}

// UnsetQueueDurationUsecs ensures that no value is present for QueueDurationUsecs, not even an explicit nil
func (o *BackupAttempt) UnsetQueueDurationUsecs() {
	o.QueueDurationUsecs.Unset()
}

// GetSnapshotCreationTimeUsecs returns the SnapshotCreationTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupAttempt) GetSnapshotCreationTimeUsecs() int64 {
	if o == nil || IsNil(o.SnapshotCreationTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.SnapshotCreationTimeUsecs.Get()
}

// GetSnapshotCreationTimeUsecsOk returns a tuple with the SnapshotCreationTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAttempt) GetSnapshotCreationTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SnapshotCreationTimeUsecs.Get(), o.SnapshotCreationTimeUsecs.IsSet()
}

// HasSnapshotCreationTimeUsecs returns a boolean if a field has been set.
func (o *BackupAttempt) HasSnapshotCreationTimeUsecs() bool {
	if o != nil && o.SnapshotCreationTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetSnapshotCreationTimeUsecs gets a reference to the given NullableInt64 and assigns it to the SnapshotCreationTimeUsecs field.
func (o *BackupAttempt) SetSnapshotCreationTimeUsecs(v int64) {
	o.SnapshotCreationTimeUsecs.Set(&v)
}
// SetSnapshotCreationTimeUsecsNil sets the value for SnapshotCreationTimeUsecs to be an explicit nil
func (o *BackupAttempt) SetSnapshotCreationTimeUsecsNil() {
	o.SnapshotCreationTimeUsecs.Set(nil)
}

// UnsetSnapshotCreationTimeUsecs ensures that no value is present for SnapshotCreationTimeUsecs, not even an explicit nil
func (o *BackupAttempt) UnsetSnapshotCreationTimeUsecs() {
	o.SnapshotCreationTimeUsecs.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupAttempt) GetStartTimeUsecs() int64 {
	if o == nil || IsNil(o.StartTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAttempt) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *BackupAttempt) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *BackupAttempt) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *BackupAttempt) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *BackupAttempt) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *BackupAttempt) GetStats() BackupDataStats {
	if o == nil || IsNil(o.Stats) {
		var ret BackupDataStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupAttempt) GetStatsOk() (*BackupDataStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *BackupAttempt) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given BackupDataStats and assigns it to the Stats field.
func (o *BackupAttempt) SetStats(v BackupDataStats) {
	o.Stats = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupAttempt) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupAttempt) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *BackupAttempt) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *BackupAttempt) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *BackupAttempt) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *BackupAttempt) UnsetStatus() {
	o.Status.Unset()
}

func (o BackupAttempt) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupAttempt) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AdmittedTimeUsecs.IsSet() {
		toSerialize["admittedTimeUsecs"] = o.AdmittedTimeUsecs.Get()
	}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.PermitGrantTimeUsecs.IsSet() {
		toSerialize["permitGrantTimeUsecs"] = o.PermitGrantTimeUsecs.Get()
	}
	if o.ProgressTaskId.IsSet() {
		toSerialize["progressTaskId"] = o.ProgressTaskId.Get()
	}
	if o.QueueDurationUsecs.IsSet() {
		toSerialize["queueDurationUsecs"] = o.QueueDurationUsecs.Get()
	}
	if o.SnapshotCreationTimeUsecs.IsSet() {
		toSerialize["snapshotCreationTimeUsecs"] = o.SnapshotCreationTimeUsecs.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return toSerialize, nil
}

type NullableBackupAttempt struct {
	value *BackupAttempt
	isSet bool
}

func (v NullableBackupAttempt) Get() *BackupAttempt {
	return v.value
}

func (v *NullableBackupAttempt) Set(val *BackupAttempt) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupAttempt) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupAttempt) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupAttempt(val *BackupAttempt) *NullableBackupAttempt {
	return &NullableBackupAttempt{value: val, isSet: true}
}

func (v NullableBackupAttempt) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupAttempt) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


