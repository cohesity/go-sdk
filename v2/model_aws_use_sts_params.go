/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsUseSTSParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsUseSTSParams{}

// AwsUseSTSParams Specifies the parameters which are specific to UseSTS Authentication Method for AWS External Target.
type AwsUseSTSParams struct {
	// Credential blob to use when interacting with credential endpoint.
	AuthBlob NullableString `json:"authBlob,omitempty"`
	// Specifies the credential endpoint to use to generate the security token.
	AuthEndpoint NullableString `json:"authEndpoint"`
}

type _AwsUseSTSParams AwsUseSTSParams

// NewAwsUseSTSParams instantiates a new AwsUseSTSParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsUseSTSParams(authEndpoint NullableString) *AwsUseSTSParams {
	this := AwsUseSTSParams{}
	this.AuthEndpoint = authEndpoint
	return &this
}

// NewAwsUseSTSParamsWithDefaults instantiates a new AwsUseSTSParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsUseSTSParamsWithDefaults() *AwsUseSTSParams {
	this := AwsUseSTSParams{}
	return &this
}

// GetAuthBlob returns the AuthBlob field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsUseSTSParams) GetAuthBlob() string {
	if o == nil || IsNil(o.AuthBlob.Get()) {
		var ret string
		return ret
	}
	return *o.AuthBlob.Get()
}

// GetAuthBlobOk returns a tuple with the AuthBlob field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsUseSTSParams) GetAuthBlobOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthBlob.Get(), o.AuthBlob.IsSet()
}

// HasAuthBlob returns a boolean if a field has been set.
func (o *AwsUseSTSParams) HasAuthBlob() bool {
	if o != nil && o.AuthBlob.IsSet() {
		return true
	}

	return false
}

// SetAuthBlob gets a reference to the given NullableString and assigns it to the AuthBlob field.
func (o *AwsUseSTSParams) SetAuthBlob(v string) {
	o.AuthBlob.Set(&v)
}
// SetAuthBlobNil sets the value for AuthBlob to be an explicit nil
func (o *AwsUseSTSParams) SetAuthBlobNil() {
	o.AuthBlob.Set(nil)
}

// UnsetAuthBlob ensures that no value is present for AuthBlob, not even an explicit nil
func (o *AwsUseSTSParams) UnsetAuthBlob() {
	o.AuthBlob.Unset()
}

// GetAuthEndpoint returns the AuthEndpoint field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsUseSTSParams) GetAuthEndpoint() string {
	if o == nil || o.AuthEndpoint.Get() == nil {
		var ret string
		return ret
	}

	return *o.AuthEndpoint.Get()
}

// GetAuthEndpointOk returns a tuple with the AuthEndpoint field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsUseSTSParams) GetAuthEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthEndpoint.Get(), o.AuthEndpoint.IsSet()
}

// SetAuthEndpoint sets field value
func (o *AwsUseSTSParams) SetAuthEndpoint(v string) {
	o.AuthEndpoint.Set(&v)
}

func (o AwsUseSTSParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsUseSTSParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthBlob.IsSet() {
		toSerialize["authBlob"] = o.AuthBlob.Get()
	}
	toSerialize["authEndpoint"] = o.AuthEndpoint.Get()
	return toSerialize, nil
}

func (o *AwsUseSTSParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authEndpoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsUseSTSParams := _AwsUseSTSParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsUseSTSParams)

	if err != nil {
		return err
	}

	*o = AwsUseSTSParams(varAwsUseSTSParams)

	return err
}

type NullableAwsUseSTSParams struct {
	value *AwsUseSTSParams
	isSet bool
}

func (v NullableAwsUseSTSParams) Get() *AwsUseSTSParams {
	return v.value
}

func (v *NullableAwsUseSTSParams) Set(val *AwsUseSTSParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsUseSTSParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsUseSTSParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsUseSTSParams(val *AwsUseSTSParams) *NullableAwsUseSTSParams {
	return &NullableAwsUseSTSParams{value: val, isSet: true}
}

func (v NullableAwsUseSTSParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsUseSTSParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


