/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Schedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Schedule{}

// Schedule Specifies a schedule for actions to be taken.
type Schedule struct {
	//  Specifies the time range within the days of the week.
	PeriodicTimeWindows []TimeWindow `json:"periodicTimeWindows,omitempty"`
	// Specifies the type of schedule for this ScheduleProto.
	ScheduleType NullableString `json:"scheduleType,omitempty"`
	//  Specifies the time ranges in usecs.
	TimeRanges []TimeRangeUsecs `json:"timeRanges,omitempty"`
	// Specifies the timezone of the user of this ScheduleProto. The timezones have unique names of the form 'Area/Location'.
	Timezone *string `json:"timezone,omitempty"`
}

// NewSchedule instantiates a new Schedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedule() *Schedule {
	this := Schedule{}
	return &this
}

// NewScheduleWithDefaults instantiates a new Schedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScheduleWithDefaults() *Schedule {
	this := Schedule{}
	return &this
}

// GetPeriodicTimeWindows returns the PeriodicTimeWindows field value if set, zero value otherwise.
func (o *Schedule) GetPeriodicTimeWindows() []TimeWindow {
	if o == nil || IsNil(o.PeriodicTimeWindows) {
		var ret []TimeWindow
		return ret
	}
	return o.PeriodicTimeWindows
}

// GetPeriodicTimeWindowsOk returns a tuple with the PeriodicTimeWindows field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetPeriodicTimeWindowsOk() ([]TimeWindow, bool) {
	if o == nil || IsNil(o.PeriodicTimeWindows) {
		return nil, false
	}
	return o.PeriodicTimeWindows, true
}

// HasPeriodicTimeWindows returns a boolean if a field has been set.
func (o *Schedule) HasPeriodicTimeWindows() bool {
	if o != nil && !IsNil(o.PeriodicTimeWindows) {
		return true
	}

	return false
}

// SetPeriodicTimeWindows gets a reference to the given []TimeWindow and assigns it to the PeriodicTimeWindows field.
func (o *Schedule) SetPeriodicTimeWindows(v []TimeWindow) {
	o.PeriodicTimeWindows = v
}

// GetScheduleType returns the ScheduleType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Schedule) GetScheduleType() string {
	if o == nil || IsNil(o.ScheduleType.Get()) {
		var ret string
		return ret
	}
	return *o.ScheduleType.Get()
}

// GetScheduleTypeOk returns a tuple with the ScheduleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Schedule) GetScheduleTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ScheduleType.Get(), o.ScheduleType.IsSet()
}

// HasScheduleType returns a boolean if a field has been set.
func (o *Schedule) HasScheduleType() bool {
	if o != nil && o.ScheduleType.IsSet() {
		return true
	}

	return false
}

// SetScheduleType gets a reference to the given NullableString and assigns it to the ScheduleType field.
func (o *Schedule) SetScheduleType(v string) {
	o.ScheduleType.Set(&v)
}
// SetScheduleTypeNil sets the value for ScheduleType to be an explicit nil
func (o *Schedule) SetScheduleTypeNil() {
	o.ScheduleType.Set(nil)
}

// UnsetScheduleType ensures that no value is present for ScheduleType, not even an explicit nil
func (o *Schedule) UnsetScheduleType() {
	o.ScheduleType.Unset()
}

// GetTimeRanges returns the TimeRanges field value if set, zero value otherwise.
func (o *Schedule) GetTimeRanges() []TimeRangeUsecs {
	if o == nil || IsNil(o.TimeRanges) {
		var ret []TimeRangeUsecs
		return ret
	}
	return o.TimeRanges
}

// GetTimeRangesOk returns a tuple with the TimeRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetTimeRangesOk() ([]TimeRangeUsecs, bool) {
	if o == nil || IsNil(o.TimeRanges) {
		return nil, false
	}
	return o.TimeRanges, true
}

// HasTimeRanges returns a boolean if a field has been set.
func (o *Schedule) HasTimeRanges() bool {
	if o != nil && !IsNil(o.TimeRanges) {
		return true
	}

	return false
}

// SetTimeRanges gets a reference to the given []TimeRangeUsecs and assigns it to the TimeRanges field.
func (o *Schedule) SetTimeRanges(v []TimeRangeUsecs) {
	o.TimeRanges = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise.
func (o *Schedule) GetTimezone() string {
	if o == nil || IsNil(o.Timezone) {
		var ret string
		return ret
	}
	return *o.Timezone
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Schedule) GetTimezoneOk() (*string, bool) {
	if o == nil || IsNil(o.Timezone) {
		return nil, false
	}
	return o.Timezone, true
}

// HasTimezone returns a boolean if a field has been set.
func (o *Schedule) HasTimezone() bool {
	if o != nil && !IsNil(o.Timezone) {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given string and assigns it to the Timezone field.
func (o *Schedule) SetTimezone(v string) {
	o.Timezone = &v
}

func (o Schedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Schedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PeriodicTimeWindows) {
		toSerialize["periodicTimeWindows"] = o.PeriodicTimeWindows
	}
	if o.ScheduleType.IsSet() {
		toSerialize["scheduleType"] = o.ScheduleType.Get()
	}
	if !IsNil(o.TimeRanges) {
		toSerialize["timeRanges"] = o.TimeRanges
	}
	if !IsNil(o.Timezone) {
		toSerialize["timezone"] = o.Timezone
	}
	return toSerialize, nil
}

type NullableSchedule struct {
	value *Schedule
	isSet bool
}

func (v NullableSchedule) Get() *Schedule {
	return v.value
}

func (v *NullableSchedule) Set(val *Schedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedule(val *Schedule) *NullableSchedule {
	return &NullableSchedule{value: val, isSet: true}
}

func (v NullableSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


