/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CouchbaseParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CouchbaseParams{}

// CouchbaseParams Specifies the recovery options specific to Couchbase environment.
type CouchbaseParams struct {
	RecoverCouchbaseParams RecoverCouchbaseParams `json:"recoverCouchbaseParams"`
	// Specifies the type of recover action to be performed.
	RecoveryAction string `json:"recoveryAction"`
}

type _CouchbaseParams CouchbaseParams

// NewCouchbaseParams instantiates a new CouchbaseParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouchbaseParams(recoverCouchbaseParams RecoverCouchbaseParams, recoveryAction string) *CouchbaseParams {
	this := CouchbaseParams{}
	this.RecoverCouchbaseParams = recoverCouchbaseParams
	this.RecoveryAction = recoveryAction
	return &this
}

// NewCouchbaseParamsWithDefaults instantiates a new CouchbaseParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouchbaseParamsWithDefaults() *CouchbaseParams {
	this := CouchbaseParams{}
	return &this
}

// GetRecoverCouchbaseParams returns the RecoverCouchbaseParams field value
func (o *CouchbaseParams) GetRecoverCouchbaseParams() RecoverCouchbaseParams {
	if o == nil {
		var ret RecoverCouchbaseParams
		return ret
	}

	return o.RecoverCouchbaseParams
}

// GetRecoverCouchbaseParamsOk returns a tuple with the RecoverCouchbaseParams field value
// and a boolean to check if the value has been set.
func (o *CouchbaseParams) GetRecoverCouchbaseParamsOk() (*RecoverCouchbaseParams, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoverCouchbaseParams, true
}

// SetRecoverCouchbaseParams sets field value
func (o *CouchbaseParams) SetRecoverCouchbaseParams(v RecoverCouchbaseParams) {
	o.RecoverCouchbaseParams = v
}

// GetRecoveryAction returns the RecoveryAction field value
func (o *CouchbaseParams) GetRecoveryAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecoveryAction
}

// GetRecoveryActionOk returns a tuple with the RecoveryAction field value
// and a boolean to check if the value has been set.
func (o *CouchbaseParams) GetRecoveryActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoveryAction, true
}

// SetRecoveryAction sets field value
func (o *CouchbaseParams) SetRecoveryAction(v string) {
	o.RecoveryAction = v
}

func (o CouchbaseParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CouchbaseParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["recoverCouchbaseParams"] = o.RecoverCouchbaseParams
	toSerialize["recoveryAction"] = o.RecoveryAction
	return toSerialize, nil
}

func (o *CouchbaseParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoverCouchbaseParams",
		"recoveryAction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCouchbaseParams := _CouchbaseParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCouchbaseParams)

	if err != nil {
		return err
	}

	*o = CouchbaseParams(varCouchbaseParams)

	return err
}

type NullableCouchbaseParams struct {
	value *CouchbaseParams
	isSet bool
}

func (v NullableCouchbaseParams) Get() *CouchbaseParams {
	return v.value
}

func (v *NullableCouchbaseParams) Set(val *CouchbaseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCouchbaseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCouchbaseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouchbaseParams(val *CouchbaseParams) *NullableCouchbaseParams {
	return &NullableCouchbaseParams{value: val, isSet: true}
}

func (v NullableCouchbaseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouchbaseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


