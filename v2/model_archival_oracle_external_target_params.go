/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArchivalOracleExternalTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchivalOracleExternalTargetParams{}

// ArchivalOracleExternalTargetParams Specifies the common parameters which are specific to Oracle related External Targets.
type ArchivalOracleExternalTargetParams struct {
	// Specifies the access key id of the external target.
	AccessKeyId NullableString `json:"accessKeyId"`
	// Specifies the bucket name of the external target.
	BucketName NullableString `json:"bucketName"`
	// Specifies the region of the external target.
	Region NullableString `json:"region"`
	// Specifies the storage access key of the external target.
	StorageAccessKey NullableString `json:"storageAccessKey,omitempty"`
	// Specifies the tenancy of the external target.
	Tenancy NullableString `json:"tenancy"`
	// Specifies if Forever Incremental Archival setting is enabled or not.
	IsForeverIncrementalArchivalEnabled NullableBool `json:"isForeverIncrementalArchivalEnabled,omitempty"`
	// Specifies if Incremental Archival setting is enabled or not.
	IsIncrementalArchivalEnabled NullableBool `json:"isIncrementalArchivalEnabled,omitempty"`
	// Specifies the Source Side Deduplication setting for the Oracle external target
	SourceSideDeduplication NullableBool `json:"sourceSideDeduplication,omitempty"`
	// Specifies the Oracle External Target storage class.
	StorageClass NullableString `json:"storageClass"`
}

type _ArchivalOracleExternalTargetParams ArchivalOracleExternalTargetParams

// NewArchivalOracleExternalTargetParams instantiates a new ArchivalOracleExternalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalOracleExternalTargetParams(accessKeyId NullableString, bucketName NullableString, region NullableString, tenancy NullableString, storageClass NullableString) *ArchivalOracleExternalTargetParams {
	this := ArchivalOracleExternalTargetParams{}
	this.AccessKeyId = accessKeyId
	this.BucketName = bucketName
	this.Region = region
	this.Tenancy = tenancy
	this.StorageClass = storageClass
	return &this
}

// NewArchivalOracleExternalTargetParamsWithDefaults instantiates a new ArchivalOracleExternalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalOracleExternalTargetParamsWithDefaults() *ArchivalOracleExternalTargetParams {
	this := ArchivalOracleExternalTargetParams{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalOracleExternalTargetParams) GetAccessKeyId() string {
	if o == nil || o.AccessKeyId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccessKeyId.Get()
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalOracleExternalTargetParams) GetAccessKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessKeyId.Get(), o.AccessKeyId.IsSet()
}

// SetAccessKeyId sets field value
func (o *ArchivalOracleExternalTargetParams) SetAccessKeyId(v string) {
	o.AccessKeyId.Set(&v)
}

// GetBucketName returns the BucketName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalOracleExternalTargetParams) GetBucketName() string {
	if o == nil || o.BucketName.Get() == nil {
		var ret string
		return ret
	}

	return *o.BucketName.Get()
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalOracleExternalTargetParams) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BucketName.Get(), o.BucketName.IsSet()
}

// SetBucketName sets field value
func (o *ArchivalOracleExternalTargetParams) SetBucketName(v string) {
	o.BucketName.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalOracleExternalTargetParams) GetRegion() string {
	if o == nil || o.Region.Get() == nil {
		var ret string
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalOracleExternalTargetParams) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *ArchivalOracleExternalTargetParams) SetRegion(v string) {
	o.Region.Set(&v)
}

// GetStorageAccessKey returns the StorageAccessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalOracleExternalTargetParams) GetStorageAccessKey() string {
	if o == nil || IsNil(o.StorageAccessKey.Get()) {
		var ret string
		return ret
	}
	return *o.StorageAccessKey.Get()
}

// GetStorageAccessKeyOk returns a tuple with the StorageAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalOracleExternalTargetParams) GetStorageAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageAccessKey.Get(), o.StorageAccessKey.IsSet()
}

// HasStorageAccessKey returns a boolean if a field has been set.
func (o *ArchivalOracleExternalTargetParams) HasStorageAccessKey() bool {
	if o != nil && o.StorageAccessKey.IsSet() {
		return true
	}

	return false
}

// SetStorageAccessKey gets a reference to the given NullableString and assigns it to the StorageAccessKey field.
func (o *ArchivalOracleExternalTargetParams) SetStorageAccessKey(v string) {
	o.StorageAccessKey.Set(&v)
}
// SetStorageAccessKeyNil sets the value for StorageAccessKey to be an explicit nil
func (o *ArchivalOracleExternalTargetParams) SetStorageAccessKeyNil() {
	o.StorageAccessKey.Set(nil)
}

// UnsetStorageAccessKey ensures that no value is present for StorageAccessKey, not even an explicit nil
func (o *ArchivalOracleExternalTargetParams) UnsetStorageAccessKey() {
	o.StorageAccessKey.Unset()
}

// GetTenancy returns the Tenancy field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalOracleExternalTargetParams) GetTenancy() string {
	if o == nil || o.Tenancy.Get() == nil {
		var ret string
		return ret
	}

	return *o.Tenancy.Get()
}

// GetTenancyOk returns a tuple with the Tenancy field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalOracleExternalTargetParams) GetTenancyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Tenancy.Get(), o.Tenancy.IsSet()
}

// SetTenancy sets field value
func (o *ArchivalOracleExternalTargetParams) SetTenancy(v string) {
	o.Tenancy.Set(&v)
}

// GetIsForeverIncrementalArchivalEnabled returns the IsForeverIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalOracleExternalTargetParams) GetIsForeverIncrementalArchivalEnabled() bool {
	if o == nil || IsNil(o.IsForeverIncrementalArchivalEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsForeverIncrementalArchivalEnabled.Get()
}

// GetIsForeverIncrementalArchivalEnabledOk returns a tuple with the IsForeverIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalOracleExternalTargetParams) GetIsForeverIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsForeverIncrementalArchivalEnabled.Get(), o.IsForeverIncrementalArchivalEnabled.IsSet()
}

// HasIsForeverIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalOracleExternalTargetParams) HasIsForeverIncrementalArchivalEnabled() bool {
	if o != nil && o.IsForeverIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsForeverIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsForeverIncrementalArchivalEnabled field.
func (o *ArchivalOracleExternalTargetParams) SetIsForeverIncrementalArchivalEnabled(v bool) {
	o.IsForeverIncrementalArchivalEnabled.Set(&v)
}
// SetIsForeverIncrementalArchivalEnabledNil sets the value for IsForeverIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalOracleExternalTargetParams) SetIsForeverIncrementalArchivalEnabledNil() {
	o.IsForeverIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsForeverIncrementalArchivalEnabled ensures that no value is present for IsForeverIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalOracleExternalTargetParams) UnsetIsForeverIncrementalArchivalEnabled() {
	o.IsForeverIncrementalArchivalEnabled.Unset()
}

// GetIsIncrementalArchivalEnabled returns the IsIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalOracleExternalTargetParams) GetIsIncrementalArchivalEnabled() bool {
	if o == nil || IsNil(o.IsIncrementalArchivalEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsIncrementalArchivalEnabled.Get()
}

// GetIsIncrementalArchivalEnabledOk returns a tuple with the IsIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalOracleExternalTargetParams) GetIsIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsIncrementalArchivalEnabled.Get(), o.IsIncrementalArchivalEnabled.IsSet()
}

// HasIsIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalOracleExternalTargetParams) HasIsIncrementalArchivalEnabled() bool {
	if o != nil && o.IsIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsIncrementalArchivalEnabled field.
func (o *ArchivalOracleExternalTargetParams) SetIsIncrementalArchivalEnabled(v bool) {
	o.IsIncrementalArchivalEnabled.Set(&v)
}
// SetIsIncrementalArchivalEnabledNil sets the value for IsIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalOracleExternalTargetParams) SetIsIncrementalArchivalEnabledNil() {
	o.IsIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsIncrementalArchivalEnabled ensures that no value is present for IsIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalOracleExternalTargetParams) UnsetIsIncrementalArchivalEnabled() {
	o.IsIncrementalArchivalEnabled.Unset()
}

// GetSourceSideDeduplication returns the SourceSideDeduplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalOracleExternalTargetParams) GetSourceSideDeduplication() bool {
	if o == nil || IsNil(o.SourceSideDeduplication.Get()) {
		var ret bool
		return ret
	}
	return *o.SourceSideDeduplication.Get()
}

// GetSourceSideDeduplicationOk returns a tuple with the SourceSideDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalOracleExternalTargetParams) GetSourceSideDeduplicationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceSideDeduplication.Get(), o.SourceSideDeduplication.IsSet()
}

// HasSourceSideDeduplication returns a boolean if a field has been set.
func (o *ArchivalOracleExternalTargetParams) HasSourceSideDeduplication() bool {
	if o != nil && o.SourceSideDeduplication.IsSet() {
		return true
	}

	return false
}

// SetSourceSideDeduplication gets a reference to the given NullableBool and assigns it to the SourceSideDeduplication field.
func (o *ArchivalOracleExternalTargetParams) SetSourceSideDeduplication(v bool) {
	o.SourceSideDeduplication.Set(&v)
}
// SetSourceSideDeduplicationNil sets the value for SourceSideDeduplication to be an explicit nil
func (o *ArchivalOracleExternalTargetParams) SetSourceSideDeduplicationNil() {
	o.SourceSideDeduplication.Set(nil)
}

// UnsetSourceSideDeduplication ensures that no value is present for SourceSideDeduplication, not even an explicit nil
func (o *ArchivalOracleExternalTargetParams) UnsetSourceSideDeduplication() {
	o.SourceSideDeduplication.Unset()
}

// GetStorageClass returns the StorageClass field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalOracleExternalTargetParams) GetStorageClass() string {
	if o == nil || o.StorageClass.Get() == nil {
		var ret string
		return ret
	}

	return *o.StorageClass.Get()
}

// GetStorageClassOk returns a tuple with the StorageClass field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalOracleExternalTargetParams) GetStorageClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageClass.Get(), o.StorageClass.IsSet()
}

// SetStorageClass sets field value
func (o *ArchivalOracleExternalTargetParams) SetStorageClass(v string) {
	o.StorageClass.Set(&v)
}

func (o ArchivalOracleExternalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchivalOracleExternalTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessKeyId"] = o.AccessKeyId.Get()
	toSerialize["bucketName"] = o.BucketName.Get()
	toSerialize["region"] = o.Region.Get()
	if o.StorageAccessKey.IsSet() {
		toSerialize["storageAccessKey"] = o.StorageAccessKey.Get()
	}
	toSerialize["tenancy"] = o.Tenancy.Get()
	if o.IsForeverIncrementalArchivalEnabled.IsSet() {
		toSerialize["isForeverIncrementalArchivalEnabled"] = o.IsForeverIncrementalArchivalEnabled.Get()
	}
	if o.IsIncrementalArchivalEnabled.IsSet() {
		toSerialize["isIncrementalArchivalEnabled"] = o.IsIncrementalArchivalEnabled.Get()
	}
	if o.SourceSideDeduplication.IsSet() {
		toSerialize["sourceSideDeduplication"] = o.SourceSideDeduplication.Get()
	}
	toSerialize["storageClass"] = o.StorageClass.Get()
	return toSerialize, nil
}

func (o *ArchivalOracleExternalTargetParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accessKeyId",
		"bucketName",
		"region",
		"tenancy",
		"storageClass",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArchivalOracleExternalTargetParams := _ArchivalOracleExternalTargetParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArchivalOracleExternalTargetParams)

	if err != nil {
		return err
	}

	*o = ArchivalOracleExternalTargetParams(varArchivalOracleExternalTargetParams)

	return err
}

type NullableArchivalOracleExternalTargetParams struct {
	value *ArchivalOracleExternalTargetParams
	isSet bool
}

func (v NullableArchivalOracleExternalTargetParams) Get() *ArchivalOracleExternalTargetParams {
	return v.value
}

func (v *NullableArchivalOracleExternalTargetParams) Set(val *ArchivalOracleExternalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalOracleExternalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalOracleExternalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalOracleExternalTargetParams(val *ArchivalOracleExternalTargetParams) *NullableArchivalOracleExternalTargetParams {
	return &NullableArchivalOracleExternalTargetParams{value: val, isSet: true}
}

func (v NullableArchivalOracleExternalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalOracleExternalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


