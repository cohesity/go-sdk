/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PatchUnpackRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchUnpackRequest{}

// PatchUnpackRequest Specifies the request to unpack patch.
type PatchUnpackRequest struct {
	// Specifies the destination path.
	DestPath NullableString `json:"destPath"`
	// Specifies the source path.
	SourcePath NullableString `json:"sourcePath"`
}

type _PatchUnpackRequest PatchUnpackRequest

// NewPatchUnpackRequest instantiates a new PatchUnpackRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchUnpackRequest(destPath NullableString, sourcePath NullableString) *PatchUnpackRequest {
	this := PatchUnpackRequest{}
	this.DestPath = destPath
	this.SourcePath = sourcePath
	return &this
}

// NewPatchUnpackRequestWithDefaults instantiates a new PatchUnpackRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchUnpackRequestWithDefaults() *PatchUnpackRequest {
	this := PatchUnpackRequest{}
	return &this
}

// GetDestPath returns the DestPath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PatchUnpackRequest) GetDestPath() string {
	if o == nil || o.DestPath.Get() == nil {
		var ret string
		return ret
	}

	return *o.DestPath.Get()
}

// GetDestPathOk returns a tuple with the DestPath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchUnpackRequest) GetDestPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestPath.Get(), o.DestPath.IsSet()
}

// SetDestPath sets field value
func (o *PatchUnpackRequest) SetDestPath(v string) {
	o.DestPath.Set(&v)
}

// GetSourcePath returns the SourcePath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PatchUnpackRequest) GetSourcePath() string {
	if o == nil || o.SourcePath.Get() == nil {
		var ret string
		return ret
	}

	return *o.SourcePath.Get()
}

// GetSourcePathOk returns a tuple with the SourcePath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchUnpackRequest) GetSourcePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourcePath.Get(), o.SourcePath.IsSet()
}

// SetSourcePath sets field value
func (o *PatchUnpackRequest) SetSourcePath(v string) {
	o.SourcePath.Set(&v)
}

func (o PatchUnpackRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchUnpackRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destPath"] = o.DestPath.Get()
	toSerialize["sourcePath"] = o.SourcePath.Get()
	return toSerialize, nil
}

func (o *PatchUnpackRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destPath",
		"sourcePath",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchUnpackRequest := _PatchUnpackRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPatchUnpackRequest)

	if err != nil {
		return err
	}

	*o = PatchUnpackRequest(varPatchUnpackRequest)

	return err
}

type NullablePatchUnpackRequest struct {
	value *PatchUnpackRequest
	isSet bool
}

func (v NullablePatchUnpackRequest) Get() *PatchUnpackRequest {
	return v.value
}

func (v *NullablePatchUnpackRequest) Set(val *PatchUnpackRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchUnpackRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchUnpackRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchUnpackRequest(val *PatchUnpackRequest) *NullablePatchUnpackRequest {
	return &NullablePatchUnpackRequest{value: val, isSet: true}
}

func (v NullablePatchUnpackRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchUnpackRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


