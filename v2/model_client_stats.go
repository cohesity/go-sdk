/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClientStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClientStats{}

// ClientStats Specifies the Client stats.
type ClientStats struct {
	// Specifies the stats metric.
	Metric NullableString `json:"metric,omitempty"`
	// Specifies the stats value.
	Value NullableInt64 `json:"value,omitempty"`
	// Specifies the stats value in last hours.
	ValueInLastHours []ClientStatsInLastHours `json:"valueInLastHours,omitempty"`
}

// NewClientStats instantiates a new ClientStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClientStats() *ClientStats {
	this := ClientStats{}
	return &this
}

// NewClientStatsWithDefaults instantiates a new ClientStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClientStatsWithDefaults() *ClientStats {
	this := ClientStats{}
	return &this
}

// GetMetric returns the Metric field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientStats) GetMetric() string {
	if o == nil || IsNil(o.Metric.Get()) {
		var ret string
		return ret
	}
	return *o.Metric.Get()
}

// GetMetricOk returns a tuple with the Metric field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientStats) GetMetricOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Metric.Get(), o.Metric.IsSet()
}

// HasMetric returns a boolean if a field has been set.
func (o *ClientStats) HasMetric() bool {
	if o != nil && o.Metric.IsSet() {
		return true
	}

	return false
}

// SetMetric gets a reference to the given NullableString and assigns it to the Metric field.
func (o *ClientStats) SetMetric(v string) {
	o.Metric.Set(&v)
}
// SetMetricNil sets the value for Metric to be an explicit nil
func (o *ClientStats) SetMetricNil() {
	o.Metric.Set(nil)
}

// UnsetMetric ensures that no value is present for Metric, not even an explicit nil
func (o *ClientStats) UnsetMetric() {
	o.Metric.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientStats) GetValue() int64 {
	if o == nil || IsNil(o.Value.Get()) {
		var ret int64
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientStats) GetValueOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *ClientStats) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableInt64 and assigns it to the Value field.
func (o *ClientStats) SetValue(v int64) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *ClientStats) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *ClientStats) UnsetValue() {
	o.Value.Unset()
}

// GetValueInLastHours returns the ValueInLastHours field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClientStats) GetValueInLastHours() []ClientStatsInLastHours {
	if o == nil {
		var ret []ClientStatsInLastHours
		return ret
	}
	return o.ValueInLastHours
}

// GetValueInLastHoursOk returns a tuple with the ValueInLastHours field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClientStats) GetValueInLastHoursOk() ([]ClientStatsInLastHours, bool) {
	if o == nil || IsNil(o.ValueInLastHours) {
		return nil, false
	}
	return o.ValueInLastHours, true
}

// HasValueInLastHours returns a boolean if a field has been set.
func (o *ClientStats) HasValueInLastHours() bool {
	if o != nil && !IsNil(o.ValueInLastHours) {
		return true
	}

	return false
}

// SetValueInLastHours gets a reference to the given []ClientStatsInLastHours and assigns it to the ValueInLastHours field.
func (o *ClientStats) SetValueInLastHours(v []ClientStatsInLastHours) {
	o.ValueInLastHours = v
}

func (o ClientStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClientStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Metric.IsSet() {
		toSerialize["metric"] = o.Metric.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if o.ValueInLastHours != nil {
		toSerialize["valueInLastHours"] = o.ValueInLastHours
	}
	return toSerialize, nil
}

type NullableClientStats struct {
	value *ClientStats
	isSet bool
}

func (v NullableClientStats) Get() *ClientStats {
	return v.value
}

func (v *NullableClientStats) Set(val *ClientStats) {
	v.value = val
	v.isSet = true
}

func (v NullableClientStats) IsSet() bool {
	return v.isSet
}

func (v *NullableClientStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClientStats(val *ClientStats) *NullableClientStats {
	return &NullableClientStats{value: val, isSet: true}
}

func (v NullableClientStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClientStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


