/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Node type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Node{}

// Node Node information of a cluster.
type Node struct {
	// CapacityByTier describes the capacity of each storage tier.
	CapacityByTier []CapacityByTier `json:"capacityByTier,omitempty"`
	ChassisInfo *ChassisInfo `json:"chassisInfo,omitempty"`
	// ClusterPartitionId is the Id of the cluster partition to which the Node belongs.
	ClusterPartitionId NullableInt64 `json:"clusterPartitionId,omitempty"`
	// ClusterPartitionName is the name of the cluster to which the Node belongs.
	ClusterPartitionName NullableString `json:"clusterPartitionName,omitempty"`
	// Cohesity Node Serial Number of the Node.
	CohesityNodeSerial NullableString `json:"cohesityNodeSerial,omitempty"`
	// DiskCount is the number of disks in a node.
	DiskCount *int64 `json:"diskCount,omitempty"`
	// DiskCountByTier describes the disk number of each storage tier.
	DiskCountByTier []CountByTier `json:"diskCountByTier,omitempty"`
	// Specifies the hardware model of the node.
	HardwareModel NullableString `json:"hardwareModel,omitempty"`
	// Specifies the hostname of the node.
	HostName NullableString `json:"hostName,omitempty"`
	// Id is the Id of the Node.
	Id NullableInt64 `json:"id,omitempty"`
	// InMaintnenanceMode is used to mark a node in maintenance mode.
	InMaintenanceMode NullableBool `json:"inMaintenanceMode,omitempty"`
	// Ip is the IP address of the Node.
	Ip NullableString `json:"ip,omitempty"`
	// Whether node is app node.
	IsAppNode NullableBool `json:"isAppNode,omitempty"`
	// IsMarkedForRemoval specifies whether the node has been marked for removal.
	IsMarkedForRemoval NullableBool `json:"isMarkedForRemoval,omitempty"`
	// MaxPhysicalCapacityBytes specifies the maximum physical capacity of the node in bytes.
	MaxPhysicalCapacityBytes NullableInt64 `json:"maxPhysicalCapacityBytes,omitempty"`
	NodeHardwareInfo *NodeHardwareInfo `json:"nodeHardwareInfo,omitempty"`
	// NodeIncarnationId is the incarnation id  of this node. The incarnation id is changed every time the data is wiped from the node. Various services on a node is only run if incarnation id of the node matches the incarnation id of the cluster. Whenever a mismatch is detected, Nexus will stop all services and clean the data from the node. After clean operation is completed, Nexus will set the node incarnation id to cluster incarnation id and start the services.
	NodeIncarnationId NullableInt64 `json:"nodeIncarnationId,omitempty"`
	// NodeSoftwareVersion is the current version of Cohesity software installed on a node.
	NodeSoftwareVersion NullableString `json:"nodeSoftwareVersion,omitempty"`
	// Node type: StorageNode, AllFlashNode, RoboNode, AppNode, etc.
	NodeType NullableString `json:"nodeType,omitempty"`
	// OfflineDiskCount is the number of offline disks in a node.
	OfflineDiskCount NullableInt64 `json:"offlineDiskCount,omitempty"`
	// OfflineMountPathsOfDisks provides the corresponding mount paths for direct attached disks that are currently offline - access to these were detected to hang sometime in the past. After these disks have been fixed, their mount paths needs to be removed from the following list before these will be accessed again.
	OfflineMountPathsOfDisks []string `json:"offlineMountPathsOfDisks,omitempty"`
	// PatchSoftwareVersion is the current version of patch applied on a node.
	PatchSoftwareVersion NullableString `json:"patchSoftwareVersion,omitempty"`
	// Specifies the last run time of the pre-checks execution in Unix epoch timestamp (in seconds).
	PrecheckTimestampSecs NullableInt64 `json:"precheckTimestampSecs,omitempty"`
	// Specifies the product model of the node.
	ProductModel NullableString `json:"productModel,omitempty"`
	// Specifies the overall progress percentage in removing the Node.
	ProgressPercentage NullableInt32 `json:"progressPercentage,omitempty"`
	// Specifies the removal progress details for services that are not acked yet.
	RemovalProgressList []ComponentRemovalProgress `json:"removalProgressList,omitempty"`
	// RemovalReason specifies the removal reason of the node. 'kAutoHealthCheck' means the entity health is bad. 'kUserGracefulRemoval' means user initiated a graceful removal. 'kUserAvoidAccess' means user initiated a mark offline. 'kUserGracefulNodeRemoval' mean users initiated graceful node removal. 'kUserRemoveDownNode' mean user initiated graceful removal of down node. 'kBridgeDataUnavailable' Bridge requested a graceful removal of a disk when it is not available.
	RemovalReason []string `json:"removalReason,omitempty"`
	// RemovalState specifies the removal state of the node. 'kDontRemove' means the state of object is functional and it is not being removed. 'kMarkedForRemoval' means the object is being removed. 'kOkToRemove' means the object has been removed on the Cohesity Cluster and if the object is physical, it can be removed from the Cohesity Cluster.
	RemovalState NullableString `json:"removalState,omitempty"`
	// Specifies the Unix epoch timestamp (in seconds) when the Node was marked for removal.
	RemovalTimestampSecs NullableInt64 `json:"removalTimestampSecs,omitempty"`
	// Specifies the services already ACKed for removal of this entity.
	ServicesAckedList []string `json:"servicesAckedList,omitempty"`
	// Specifies the services that are not ACKed after node is marked for removal.
	ServicesNotAcked NullableString `json:"servicesNotAcked,omitempty"`
	// Specifies the services not ACKed yet for removal of this entity.
	ServicesNotAckedList []string `json:"servicesNotAckedList,omitempty"`
	// Slot number occupied by this node within the chassis.
	SlotNumber NullableInt32 `json:"slotNumber,omitempty"`
	Stats *NodeStats `json:"stats,omitempty"`
	// SystemDisk describes the node system disks.
	SystemDisks []NodeSystemDiskInfo `json:"systemDisks,omitempty"`
	// Specifies the total duration in seconds left to remove the Node.
	TimeRemaining NullableInt64 `json:"timeRemaining,omitempty"`
	// Specifies the pre-check validations results.
	ValidationChecks []PreCheckValidation `json:"validationChecks,omitempty"`
	// Specifies the vendor model of the node
	Vendor NullableString `json:"vendor,omitempty"`
}

// NewNode instantiates a new Node object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNode() *Node {
	this := Node{}
	return &this
}

// NewNodeWithDefaults instantiates a new Node object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeWithDefaults() *Node {
	this := Node{}
	return &this
}

// GetCapacityByTier returns the CapacityByTier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetCapacityByTier() []CapacityByTier {
	if o == nil {
		var ret []CapacityByTier
		return ret
	}
	return o.CapacityByTier
}

// GetCapacityByTierOk returns a tuple with the CapacityByTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetCapacityByTierOk() ([]CapacityByTier, bool) {
	if o == nil || IsNil(o.CapacityByTier) {
		return nil, false
	}
	return o.CapacityByTier, true
}

// HasCapacityByTier returns a boolean if a field has been set.
func (o *Node) HasCapacityByTier() bool {
	if o != nil && !IsNil(o.CapacityByTier) {
		return true
	}

	return false
}

// SetCapacityByTier gets a reference to the given []CapacityByTier and assigns it to the CapacityByTier field.
func (o *Node) SetCapacityByTier(v []CapacityByTier) {
	o.CapacityByTier = v
}

// GetChassisInfo returns the ChassisInfo field value if set, zero value otherwise.
func (o *Node) GetChassisInfo() ChassisInfo {
	if o == nil || IsNil(o.ChassisInfo) {
		var ret ChassisInfo
		return ret
	}
	return *o.ChassisInfo
}

// GetChassisInfoOk returns a tuple with the ChassisInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetChassisInfoOk() (*ChassisInfo, bool) {
	if o == nil || IsNil(o.ChassisInfo) {
		return nil, false
	}
	return o.ChassisInfo, true
}

// HasChassisInfo returns a boolean if a field has been set.
func (o *Node) HasChassisInfo() bool {
	if o != nil && !IsNil(o.ChassisInfo) {
		return true
	}

	return false
}

// SetChassisInfo gets a reference to the given ChassisInfo and assigns it to the ChassisInfo field.
func (o *Node) SetChassisInfo(v ChassisInfo) {
	o.ChassisInfo = &v
}

// GetClusterPartitionId returns the ClusterPartitionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetClusterPartitionId() int64 {
	if o == nil || IsNil(o.ClusterPartitionId.Get()) {
		var ret int64
		return ret
	}
	return *o.ClusterPartitionId.Get()
}

// GetClusterPartitionIdOk returns a tuple with the ClusterPartitionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetClusterPartitionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterPartitionId.Get(), o.ClusterPartitionId.IsSet()
}

// HasClusterPartitionId returns a boolean if a field has been set.
func (o *Node) HasClusterPartitionId() bool {
	if o != nil && o.ClusterPartitionId.IsSet() {
		return true
	}

	return false
}

// SetClusterPartitionId gets a reference to the given NullableInt64 and assigns it to the ClusterPartitionId field.
func (o *Node) SetClusterPartitionId(v int64) {
	o.ClusterPartitionId.Set(&v)
}
// SetClusterPartitionIdNil sets the value for ClusterPartitionId to be an explicit nil
func (o *Node) SetClusterPartitionIdNil() {
	o.ClusterPartitionId.Set(nil)
}

// UnsetClusterPartitionId ensures that no value is present for ClusterPartitionId, not even an explicit nil
func (o *Node) UnsetClusterPartitionId() {
	o.ClusterPartitionId.Unset()
}

// GetClusterPartitionName returns the ClusterPartitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetClusterPartitionName() string {
	if o == nil || IsNil(o.ClusterPartitionName.Get()) {
		var ret string
		return ret
	}
	return *o.ClusterPartitionName.Get()
}

// GetClusterPartitionNameOk returns a tuple with the ClusterPartitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetClusterPartitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterPartitionName.Get(), o.ClusterPartitionName.IsSet()
}

// HasClusterPartitionName returns a boolean if a field has been set.
func (o *Node) HasClusterPartitionName() bool {
	if o != nil && o.ClusterPartitionName.IsSet() {
		return true
	}

	return false
}

// SetClusterPartitionName gets a reference to the given NullableString and assigns it to the ClusterPartitionName field.
func (o *Node) SetClusterPartitionName(v string) {
	o.ClusterPartitionName.Set(&v)
}
// SetClusterPartitionNameNil sets the value for ClusterPartitionName to be an explicit nil
func (o *Node) SetClusterPartitionNameNil() {
	o.ClusterPartitionName.Set(nil)
}

// UnsetClusterPartitionName ensures that no value is present for ClusterPartitionName, not even an explicit nil
func (o *Node) UnsetClusterPartitionName() {
	o.ClusterPartitionName.Unset()
}

// GetCohesityNodeSerial returns the CohesityNodeSerial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetCohesityNodeSerial() string {
	if o == nil || IsNil(o.CohesityNodeSerial.Get()) {
		var ret string
		return ret
	}
	return *o.CohesityNodeSerial.Get()
}

// GetCohesityNodeSerialOk returns a tuple with the CohesityNodeSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetCohesityNodeSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CohesityNodeSerial.Get(), o.CohesityNodeSerial.IsSet()
}

// HasCohesityNodeSerial returns a boolean if a field has been set.
func (o *Node) HasCohesityNodeSerial() bool {
	if o != nil && o.CohesityNodeSerial.IsSet() {
		return true
	}

	return false
}

// SetCohesityNodeSerial gets a reference to the given NullableString and assigns it to the CohesityNodeSerial field.
func (o *Node) SetCohesityNodeSerial(v string) {
	o.CohesityNodeSerial.Set(&v)
}
// SetCohesityNodeSerialNil sets the value for CohesityNodeSerial to be an explicit nil
func (o *Node) SetCohesityNodeSerialNil() {
	o.CohesityNodeSerial.Set(nil)
}

// UnsetCohesityNodeSerial ensures that no value is present for CohesityNodeSerial, not even an explicit nil
func (o *Node) UnsetCohesityNodeSerial() {
	o.CohesityNodeSerial.Unset()
}

// GetDiskCount returns the DiskCount field value if set, zero value otherwise.
func (o *Node) GetDiskCount() int64 {
	if o == nil || IsNil(o.DiskCount) {
		var ret int64
		return ret
	}
	return *o.DiskCount
}

// GetDiskCountOk returns a tuple with the DiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetDiskCountOk() (*int64, bool) {
	if o == nil || IsNil(o.DiskCount) {
		return nil, false
	}
	return o.DiskCount, true
}

// HasDiskCount returns a boolean if a field has been set.
func (o *Node) HasDiskCount() bool {
	if o != nil && !IsNil(o.DiskCount) {
		return true
	}

	return false
}

// SetDiskCount gets a reference to the given int64 and assigns it to the DiskCount field.
func (o *Node) SetDiskCount(v int64) {
	o.DiskCount = &v
}

// GetDiskCountByTier returns the DiskCountByTier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetDiskCountByTier() []CountByTier {
	if o == nil {
		var ret []CountByTier
		return ret
	}
	return o.DiskCountByTier
}

// GetDiskCountByTierOk returns a tuple with the DiskCountByTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetDiskCountByTierOk() ([]CountByTier, bool) {
	if o == nil || IsNil(o.DiskCountByTier) {
		return nil, false
	}
	return o.DiskCountByTier, true
}

// HasDiskCountByTier returns a boolean if a field has been set.
func (o *Node) HasDiskCountByTier() bool {
	if o != nil && !IsNil(o.DiskCountByTier) {
		return true
	}

	return false
}

// SetDiskCountByTier gets a reference to the given []CountByTier and assigns it to the DiskCountByTier field.
func (o *Node) SetDiskCountByTier(v []CountByTier) {
	o.DiskCountByTier = v
}

// GetHardwareModel returns the HardwareModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetHardwareModel() string {
	if o == nil || IsNil(o.HardwareModel.Get()) {
		var ret string
		return ret
	}
	return *o.HardwareModel.Get()
}

// GetHardwareModelOk returns a tuple with the HardwareModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetHardwareModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HardwareModel.Get(), o.HardwareModel.IsSet()
}

// HasHardwareModel returns a boolean if a field has been set.
func (o *Node) HasHardwareModel() bool {
	if o != nil && o.HardwareModel.IsSet() {
		return true
	}

	return false
}

// SetHardwareModel gets a reference to the given NullableString and assigns it to the HardwareModel field.
func (o *Node) SetHardwareModel(v string) {
	o.HardwareModel.Set(&v)
}
// SetHardwareModelNil sets the value for HardwareModel to be an explicit nil
func (o *Node) SetHardwareModelNil() {
	o.HardwareModel.Set(nil)
}

// UnsetHardwareModel ensures that no value is present for HardwareModel, not even an explicit nil
func (o *Node) UnsetHardwareModel() {
	o.HardwareModel.Unset()
}

// GetHostName returns the HostName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetHostName() string {
	if o == nil || IsNil(o.HostName.Get()) {
		var ret string
		return ret
	}
	return *o.HostName.Get()
}

// GetHostNameOk returns a tuple with the HostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HostName.Get(), o.HostName.IsSet()
}

// HasHostName returns a boolean if a field has been set.
func (o *Node) HasHostName() bool {
	if o != nil && o.HostName.IsSet() {
		return true
	}

	return false
}

// SetHostName gets a reference to the given NullableString and assigns it to the HostName field.
func (o *Node) SetHostName(v string) {
	o.HostName.Set(&v)
}
// SetHostNameNil sets the value for HostName to be an explicit nil
func (o *Node) SetHostNameNil() {
	o.HostName.Set(nil)
}

// UnsetHostName ensures that no value is present for HostName, not even an explicit nil
func (o *Node) UnsetHostName() {
	o.HostName.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Node) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *Node) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Node) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Node) UnsetId() {
	o.Id.Unset()
}

// GetInMaintenanceMode returns the InMaintenanceMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetInMaintenanceMode() bool {
	if o == nil || IsNil(o.InMaintenanceMode.Get()) {
		var ret bool
		return ret
	}
	return *o.InMaintenanceMode.Get()
}

// GetInMaintenanceModeOk returns a tuple with the InMaintenanceMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetInMaintenanceModeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InMaintenanceMode.Get(), o.InMaintenanceMode.IsSet()
}

// HasInMaintenanceMode returns a boolean if a field has been set.
func (o *Node) HasInMaintenanceMode() bool {
	if o != nil && o.InMaintenanceMode.IsSet() {
		return true
	}

	return false
}

// SetInMaintenanceMode gets a reference to the given NullableBool and assigns it to the InMaintenanceMode field.
func (o *Node) SetInMaintenanceMode(v bool) {
	o.InMaintenanceMode.Set(&v)
}
// SetInMaintenanceModeNil sets the value for InMaintenanceMode to be an explicit nil
func (o *Node) SetInMaintenanceModeNil() {
	o.InMaintenanceMode.Set(nil)
}

// UnsetInMaintenanceMode ensures that no value is present for InMaintenanceMode, not even an explicit nil
func (o *Node) UnsetInMaintenanceMode() {
	o.InMaintenanceMode.Unset()
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetIp() string {
	if o == nil || IsNil(o.Ip.Get()) {
		var ret string
		return ret
	}
	return *o.Ip.Get()
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ip.Get(), o.Ip.IsSet()
}

// HasIp returns a boolean if a field has been set.
func (o *Node) HasIp() bool {
	if o != nil && o.Ip.IsSet() {
		return true
	}

	return false
}

// SetIp gets a reference to the given NullableString and assigns it to the Ip field.
func (o *Node) SetIp(v string) {
	o.Ip.Set(&v)
}
// SetIpNil sets the value for Ip to be an explicit nil
func (o *Node) SetIpNil() {
	o.Ip.Set(nil)
}

// UnsetIp ensures that no value is present for Ip, not even an explicit nil
func (o *Node) UnsetIp() {
	o.Ip.Unset()
}

// GetIsAppNode returns the IsAppNode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetIsAppNode() bool {
	if o == nil || IsNil(o.IsAppNode.Get()) {
		var ret bool
		return ret
	}
	return *o.IsAppNode.Get()
}

// GetIsAppNodeOk returns a tuple with the IsAppNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetIsAppNodeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsAppNode.Get(), o.IsAppNode.IsSet()
}

// HasIsAppNode returns a boolean if a field has been set.
func (o *Node) HasIsAppNode() bool {
	if o != nil && o.IsAppNode.IsSet() {
		return true
	}

	return false
}

// SetIsAppNode gets a reference to the given NullableBool and assigns it to the IsAppNode field.
func (o *Node) SetIsAppNode(v bool) {
	o.IsAppNode.Set(&v)
}
// SetIsAppNodeNil sets the value for IsAppNode to be an explicit nil
func (o *Node) SetIsAppNodeNil() {
	o.IsAppNode.Set(nil)
}

// UnsetIsAppNode ensures that no value is present for IsAppNode, not even an explicit nil
func (o *Node) UnsetIsAppNode() {
	o.IsAppNode.Unset()
}

// GetIsMarkedForRemoval returns the IsMarkedForRemoval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetIsMarkedForRemoval() bool {
	if o == nil || IsNil(o.IsMarkedForRemoval.Get()) {
		var ret bool
		return ret
	}
	return *o.IsMarkedForRemoval.Get()
}

// GetIsMarkedForRemovalOk returns a tuple with the IsMarkedForRemoval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetIsMarkedForRemovalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsMarkedForRemoval.Get(), o.IsMarkedForRemoval.IsSet()
}

// HasIsMarkedForRemoval returns a boolean if a field has been set.
func (o *Node) HasIsMarkedForRemoval() bool {
	if o != nil && o.IsMarkedForRemoval.IsSet() {
		return true
	}

	return false
}

// SetIsMarkedForRemoval gets a reference to the given NullableBool and assigns it to the IsMarkedForRemoval field.
func (o *Node) SetIsMarkedForRemoval(v bool) {
	o.IsMarkedForRemoval.Set(&v)
}
// SetIsMarkedForRemovalNil sets the value for IsMarkedForRemoval to be an explicit nil
func (o *Node) SetIsMarkedForRemovalNil() {
	o.IsMarkedForRemoval.Set(nil)
}

// UnsetIsMarkedForRemoval ensures that no value is present for IsMarkedForRemoval, not even an explicit nil
func (o *Node) UnsetIsMarkedForRemoval() {
	o.IsMarkedForRemoval.Unset()
}

// GetMaxPhysicalCapacityBytes returns the MaxPhysicalCapacityBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetMaxPhysicalCapacityBytes() int64 {
	if o == nil || IsNil(o.MaxPhysicalCapacityBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.MaxPhysicalCapacityBytes.Get()
}

// GetMaxPhysicalCapacityBytesOk returns a tuple with the MaxPhysicalCapacityBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetMaxPhysicalCapacityBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxPhysicalCapacityBytes.Get(), o.MaxPhysicalCapacityBytes.IsSet()
}

// HasMaxPhysicalCapacityBytes returns a boolean if a field has been set.
func (o *Node) HasMaxPhysicalCapacityBytes() bool {
	if o != nil && o.MaxPhysicalCapacityBytes.IsSet() {
		return true
	}

	return false
}

// SetMaxPhysicalCapacityBytes gets a reference to the given NullableInt64 and assigns it to the MaxPhysicalCapacityBytes field.
func (o *Node) SetMaxPhysicalCapacityBytes(v int64) {
	o.MaxPhysicalCapacityBytes.Set(&v)
}
// SetMaxPhysicalCapacityBytesNil sets the value for MaxPhysicalCapacityBytes to be an explicit nil
func (o *Node) SetMaxPhysicalCapacityBytesNil() {
	o.MaxPhysicalCapacityBytes.Set(nil)
}

// UnsetMaxPhysicalCapacityBytes ensures that no value is present for MaxPhysicalCapacityBytes, not even an explicit nil
func (o *Node) UnsetMaxPhysicalCapacityBytes() {
	o.MaxPhysicalCapacityBytes.Unset()
}

// GetNodeHardwareInfo returns the NodeHardwareInfo field value if set, zero value otherwise.
func (o *Node) GetNodeHardwareInfo() NodeHardwareInfo {
	if o == nil || IsNil(o.NodeHardwareInfo) {
		var ret NodeHardwareInfo
		return ret
	}
	return *o.NodeHardwareInfo
}

// GetNodeHardwareInfoOk returns a tuple with the NodeHardwareInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetNodeHardwareInfoOk() (*NodeHardwareInfo, bool) {
	if o == nil || IsNil(o.NodeHardwareInfo) {
		return nil, false
	}
	return o.NodeHardwareInfo, true
}

// HasNodeHardwareInfo returns a boolean if a field has been set.
func (o *Node) HasNodeHardwareInfo() bool {
	if o != nil && !IsNil(o.NodeHardwareInfo) {
		return true
	}

	return false
}

// SetNodeHardwareInfo gets a reference to the given NodeHardwareInfo and assigns it to the NodeHardwareInfo field.
func (o *Node) SetNodeHardwareInfo(v NodeHardwareInfo) {
	o.NodeHardwareInfo = &v
}

// GetNodeIncarnationId returns the NodeIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetNodeIncarnationId() int64 {
	if o == nil || IsNil(o.NodeIncarnationId.Get()) {
		var ret int64
		return ret
	}
	return *o.NodeIncarnationId.Get()
}

// GetNodeIncarnationIdOk returns a tuple with the NodeIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetNodeIncarnationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIncarnationId.Get(), o.NodeIncarnationId.IsSet()
}

// HasNodeIncarnationId returns a boolean if a field has been set.
func (o *Node) HasNodeIncarnationId() bool {
	if o != nil && o.NodeIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetNodeIncarnationId gets a reference to the given NullableInt64 and assigns it to the NodeIncarnationId field.
func (o *Node) SetNodeIncarnationId(v int64) {
	o.NodeIncarnationId.Set(&v)
}
// SetNodeIncarnationIdNil sets the value for NodeIncarnationId to be an explicit nil
func (o *Node) SetNodeIncarnationIdNil() {
	o.NodeIncarnationId.Set(nil)
}

// UnsetNodeIncarnationId ensures that no value is present for NodeIncarnationId, not even an explicit nil
func (o *Node) UnsetNodeIncarnationId() {
	o.NodeIncarnationId.Unset()
}

// GetNodeSoftwareVersion returns the NodeSoftwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetNodeSoftwareVersion() string {
	if o == nil || IsNil(o.NodeSoftwareVersion.Get()) {
		var ret string
		return ret
	}
	return *o.NodeSoftwareVersion.Get()
}

// GetNodeSoftwareVersionOk returns a tuple with the NodeSoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetNodeSoftwareVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeSoftwareVersion.Get(), o.NodeSoftwareVersion.IsSet()
}

// HasNodeSoftwareVersion returns a boolean if a field has been set.
func (o *Node) HasNodeSoftwareVersion() bool {
	if o != nil && o.NodeSoftwareVersion.IsSet() {
		return true
	}

	return false
}

// SetNodeSoftwareVersion gets a reference to the given NullableString and assigns it to the NodeSoftwareVersion field.
func (o *Node) SetNodeSoftwareVersion(v string) {
	o.NodeSoftwareVersion.Set(&v)
}
// SetNodeSoftwareVersionNil sets the value for NodeSoftwareVersion to be an explicit nil
func (o *Node) SetNodeSoftwareVersionNil() {
	o.NodeSoftwareVersion.Set(nil)
}

// UnsetNodeSoftwareVersion ensures that no value is present for NodeSoftwareVersion, not even an explicit nil
func (o *Node) UnsetNodeSoftwareVersion() {
	o.NodeSoftwareVersion.Unset()
}

// GetNodeType returns the NodeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetNodeType() string {
	if o == nil || IsNil(o.NodeType.Get()) {
		var ret string
		return ret
	}
	return *o.NodeType.Get()
}

// GetNodeTypeOk returns a tuple with the NodeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeType.Get(), o.NodeType.IsSet()
}

// HasNodeType returns a boolean if a field has been set.
func (o *Node) HasNodeType() bool {
	if o != nil && o.NodeType.IsSet() {
		return true
	}

	return false
}

// SetNodeType gets a reference to the given NullableString and assigns it to the NodeType field.
func (o *Node) SetNodeType(v string) {
	o.NodeType.Set(&v)
}
// SetNodeTypeNil sets the value for NodeType to be an explicit nil
func (o *Node) SetNodeTypeNil() {
	o.NodeType.Set(nil)
}

// UnsetNodeType ensures that no value is present for NodeType, not even an explicit nil
func (o *Node) UnsetNodeType() {
	o.NodeType.Unset()
}

// GetOfflineDiskCount returns the OfflineDiskCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetOfflineDiskCount() int64 {
	if o == nil || IsNil(o.OfflineDiskCount.Get()) {
		var ret int64
		return ret
	}
	return *o.OfflineDiskCount.Get()
}

// GetOfflineDiskCountOk returns a tuple with the OfflineDiskCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetOfflineDiskCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OfflineDiskCount.Get(), o.OfflineDiskCount.IsSet()
}

// HasOfflineDiskCount returns a boolean if a field has been set.
func (o *Node) HasOfflineDiskCount() bool {
	if o != nil && o.OfflineDiskCount.IsSet() {
		return true
	}

	return false
}

// SetOfflineDiskCount gets a reference to the given NullableInt64 and assigns it to the OfflineDiskCount field.
func (o *Node) SetOfflineDiskCount(v int64) {
	o.OfflineDiskCount.Set(&v)
}
// SetOfflineDiskCountNil sets the value for OfflineDiskCount to be an explicit nil
func (o *Node) SetOfflineDiskCountNil() {
	o.OfflineDiskCount.Set(nil)
}

// UnsetOfflineDiskCount ensures that no value is present for OfflineDiskCount, not even an explicit nil
func (o *Node) UnsetOfflineDiskCount() {
	o.OfflineDiskCount.Unset()
}

// GetOfflineMountPathsOfDisks returns the OfflineMountPathsOfDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetOfflineMountPathsOfDisks() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.OfflineMountPathsOfDisks
}

// GetOfflineMountPathsOfDisksOk returns a tuple with the OfflineMountPathsOfDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetOfflineMountPathsOfDisksOk() ([]string, bool) {
	if o == nil || IsNil(o.OfflineMountPathsOfDisks) {
		return nil, false
	}
	return o.OfflineMountPathsOfDisks, true
}

// HasOfflineMountPathsOfDisks returns a boolean if a field has been set.
func (o *Node) HasOfflineMountPathsOfDisks() bool {
	if o != nil && !IsNil(o.OfflineMountPathsOfDisks) {
		return true
	}

	return false
}

// SetOfflineMountPathsOfDisks gets a reference to the given []string and assigns it to the OfflineMountPathsOfDisks field.
func (o *Node) SetOfflineMountPathsOfDisks(v []string) {
	o.OfflineMountPathsOfDisks = v
}

// GetPatchSoftwareVersion returns the PatchSoftwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetPatchSoftwareVersion() string {
	if o == nil || IsNil(o.PatchSoftwareVersion.Get()) {
		var ret string
		return ret
	}
	return *o.PatchSoftwareVersion.Get()
}

// GetPatchSoftwareVersionOk returns a tuple with the PatchSoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetPatchSoftwareVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PatchSoftwareVersion.Get(), o.PatchSoftwareVersion.IsSet()
}

// HasPatchSoftwareVersion returns a boolean if a field has been set.
func (o *Node) HasPatchSoftwareVersion() bool {
	if o != nil && o.PatchSoftwareVersion.IsSet() {
		return true
	}

	return false
}

// SetPatchSoftwareVersion gets a reference to the given NullableString and assigns it to the PatchSoftwareVersion field.
func (o *Node) SetPatchSoftwareVersion(v string) {
	o.PatchSoftwareVersion.Set(&v)
}
// SetPatchSoftwareVersionNil sets the value for PatchSoftwareVersion to be an explicit nil
func (o *Node) SetPatchSoftwareVersionNil() {
	o.PatchSoftwareVersion.Set(nil)
}

// UnsetPatchSoftwareVersion ensures that no value is present for PatchSoftwareVersion, not even an explicit nil
func (o *Node) UnsetPatchSoftwareVersion() {
	o.PatchSoftwareVersion.Unset()
}

// GetPrecheckTimestampSecs returns the PrecheckTimestampSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetPrecheckTimestampSecs() int64 {
	if o == nil || IsNil(o.PrecheckTimestampSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.PrecheckTimestampSecs.Get()
}

// GetPrecheckTimestampSecsOk returns a tuple with the PrecheckTimestampSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetPrecheckTimestampSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrecheckTimestampSecs.Get(), o.PrecheckTimestampSecs.IsSet()
}

// HasPrecheckTimestampSecs returns a boolean if a field has been set.
func (o *Node) HasPrecheckTimestampSecs() bool {
	if o != nil && o.PrecheckTimestampSecs.IsSet() {
		return true
	}

	return false
}

// SetPrecheckTimestampSecs gets a reference to the given NullableInt64 and assigns it to the PrecheckTimestampSecs field.
func (o *Node) SetPrecheckTimestampSecs(v int64) {
	o.PrecheckTimestampSecs.Set(&v)
}
// SetPrecheckTimestampSecsNil sets the value for PrecheckTimestampSecs to be an explicit nil
func (o *Node) SetPrecheckTimestampSecsNil() {
	o.PrecheckTimestampSecs.Set(nil)
}

// UnsetPrecheckTimestampSecs ensures that no value is present for PrecheckTimestampSecs, not even an explicit nil
func (o *Node) UnsetPrecheckTimestampSecs() {
	o.PrecheckTimestampSecs.Unset()
}

// GetProductModel returns the ProductModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetProductModel() string {
	if o == nil || IsNil(o.ProductModel.Get()) {
		var ret string
		return ret
	}
	return *o.ProductModel.Get()
}

// GetProductModelOk returns a tuple with the ProductModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetProductModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductModel.Get(), o.ProductModel.IsSet()
}

// HasProductModel returns a boolean if a field has been set.
func (o *Node) HasProductModel() bool {
	if o != nil && o.ProductModel.IsSet() {
		return true
	}

	return false
}

// SetProductModel gets a reference to the given NullableString and assigns it to the ProductModel field.
func (o *Node) SetProductModel(v string) {
	o.ProductModel.Set(&v)
}
// SetProductModelNil sets the value for ProductModel to be an explicit nil
func (o *Node) SetProductModelNil() {
	o.ProductModel.Set(nil)
}

// UnsetProductModel ensures that no value is present for ProductModel, not even an explicit nil
func (o *Node) UnsetProductModel() {
	o.ProductModel.Unset()
}

// GetProgressPercentage returns the ProgressPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetProgressPercentage() int32 {
	if o == nil || IsNil(o.ProgressPercentage.Get()) {
		var ret int32
		return ret
	}
	return *o.ProgressPercentage.Get()
}

// GetProgressPercentageOk returns a tuple with the ProgressPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetProgressPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProgressPercentage.Get(), o.ProgressPercentage.IsSet()
}

// HasProgressPercentage returns a boolean if a field has been set.
func (o *Node) HasProgressPercentage() bool {
	if o != nil && o.ProgressPercentage.IsSet() {
		return true
	}

	return false
}

// SetProgressPercentage gets a reference to the given NullableInt32 and assigns it to the ProgressPercentage field.
func (o *Node) SetProgressPercentage(v int32) {
	o.ProgressPercentage.Set(&v)
}
// SetProgressPercentageNil sets the value for ProgressPercentage to be an explicit nil
func (o *Node) SetProgressPercentageNil() {
	o.ProgressPercentage.Set(nil)
}

// UnsetProgressPercentage ensures that no value is present for ProgressPercentage, not even an explicit nil
func (o *Node) UnsetProgressPercentage() {
	o.ProgressPercentage.Unset()
}

// GetRemovalProgressList returns the RemovalProgressList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetRemovalProgressList() []ComponentRemovalProgress {
	if o == nil {
		var ret []ComponentRemovalProgress
		return ret
	}
	return o.RemovalProgressList
}

// GetRemovalProgressListOk returns a tuple with the RemovalProgressList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetRemovalProgressListOk() ([]ComponentRemovalProgress, bool) {
	if o == nil || IsNil(o.RemovalProgressList) {
		return nil, false
	}
	return o.RemovalProgressList, true
}

// HasRemovalProgressList returns a boolean if a field has been set.
func (o *Node) HasRemovalProgressList() bool {
	if o != nil && !IsNil(o.RemovalProgressList) {
		return true
	}

	return false
}

// SetRemovalProgressList gets a reference to the given []ComponentRemovalProgress and assigns it to the RemovalProgressList field.
func (o *Node) SetRemovalProgressList(v []ComponentRemovalProgress) {
	o.RemovalProgressList = v
}

// GetRemovalReason returns the RemovalReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetRemovalReason() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.RemovalReason
}

// GetRemovalReasonOk returns a tuple with the RemovalReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetRemovalReasonOk() ([]string, bool) {
	if o == nil || IsNil(o.RemovalReason) {
		return nil, false
	}
	return o.RemovalReason, true
}

// HasRemovalReason returns a boolean if a field has been set.
func (o *Node) HasRemovalReason() bool {
	if o != nil && !IsNil(o.RemovalReason) {
		return true
	}

	return false
}

// SetRemovalReason gets a reference to the given []string and assigns it to the RemovalReason field.
func (o *Node) SetRemovalReason(v []string) {
	o.RemovalReason = v
}

// GetRemovalState returns the RemovalState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetRemovalState() string {
	if o == nil || IsNil(o.RemovalState.Get()) {
		var ret string
		return ret
	}
	return *o.RemovalState.Get()
}

// GetRemovalStateOk returns a tuple with the RemovalState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetRemovalStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalState.Get(), o.RemovalState.IsSet()
}

// HasRemovalState returns a boolean if a field has been set.
func (o *Node) HasRemovalState() bool {
	if o != nil && o.RemovalState.IsSet() {
		return true
	}

	return false
}

// SetRemovalState gets a reference to the given NullableString and assigns it to the RemovalState field.
func (o *Node) SetRemovalState(v string) {
	o.RemovalState.Set(&v)
}
// SetRemovalStateNil sets the value for RemovalState to be an explicit nil
func (o *Node) SetRemovalStateNil() {
	o.RemovalState.Set(nil)
}

// UnsetRemovalState ensures that no value is present for RemovalState, not even an explicit nil
func (o *Node) UnsetRemovalState() {
	o.RemovalState.Unset()
}

// GetRemovalTimestampSecs returns the RemovalTimestampSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetRemovalTimestampSecs() int64 {
	if o == nil || IsNil(o.RemovalTimestampSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.RemovalTimestampSecs.Get()
}

// GetRemovalTimestampSecsOk returns a tuple with the RemovalTimestampSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetRemovalTimestampSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalTimestampSecs.Get(), o.RemovalTimestampSecs.IsSet()
}

// HasRemovalTimestampSecs returns a boolean if a field has been set.
func (o *Node) HasRemovalTimestampSecs() bool {
	if o != nil && o.RemovalTimestampSecs.IsSet() {
		return true
	}

	return false
}

// SetRemovalTimestampSecs gets a reference to the given NullableInt64 and assigns it to the RemovalTimestampSecs field.
func (o *Node) SetRemovalTimestampSecs(v int64) {
	o.RemovalTimestampSecs.Set(&v)
}
// SetRemovalTimestampSecsNil sets the value for RemovalTimestampSecs to be an explicit nil
func (o *Node) SetRemovalTimestampSecsNil() {
	o.RemovalTimestampSecs.Set(nil)
}

// UnsetRemovalTimestampSecs ensures that no value is present for RemovalTimestampSecs, not even an explicit nil
func (o *Node) UnsetRemovalTimestampSecs() {
	o.RemovalTimestampSecs.Unset()
}

// GetServicesAckedList returns the ServicesAckedList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetServicesAckedList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ServicesAckedList
}

// GetServicesAckedListOk returns a tuple with the ServicesAckedList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetServicesAckedListOk() ([]string, bool) {
	if o == nil || IsNil(o.ServicesAckedList) {
		return nil, false
	}
	return o.ServicesAckedList, true
}

// HasServicesAckedList returns a boolean if a field has been set.
func (o *Node) HasServicesAckedList() bool {
	if o != nil && !IsNil(o.ServicesAckedList) {
		return true
	}

	return false
}

// SetServicesAckedList gets a reference to the given []string and assigns it to the ServicesAckedList field.
func (o *Node) SetServicesAckedList(v []string) {
	o.ServicesAckedList = v
}

// GetServicesNotAcked returns the ServicesNotAcked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetServicesNotAcked() string {
	if o == nil || IsNil(o.ServicesNotAcked.Get()) {
		var ret string
		return ret
	}
	return *o.ServicesNotAcked.Get()
}

// GetServicesNotAckedOk returns a tuple with the ServicesNotAcked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetServicesNotAckedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServicesNotAcked.Get(), o.ServicesNotAcked.IsSet()
}

// HasServicesNotAcked returns a boolean if a field has been set.
func (o *Node) HasServicesNotAcked() bool {
	if o != nil && o.ServicesNotAcked.IsSet() {
		return true
	}

	return false
}

// SetServicesNotAcked gets a reference to the given NullableString and assigns it to the ServicesNotAcked field.
func (o *Node) SetServicesNotAcked(v string) {
	o.ServicesNotAcked.Set(&v)
}
// SetServicesNotAckedNil sets the value for ServicesNotAcked to be an explicit nil
func (o *Node) SetServicesNotAckedNil() {
	o.ServicesNotAcked.Set(nil)
}

// UnsetServicesNotAcked ensures that no value is present for ServicesNotAcked, not even an explicit nil
func (o *Node) UnsetServicesNotAcked() {
	o.ServicesNotAcked.Unset()
}

// GetServicesNotAckedList returns the ServicesNotAckedList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetServicesNotAckedList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ServicesNotAckedList
}

// GetServicesNotAckedListOk returns a tuple with the ServicesNotAckedList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetServicesNotAckedListOk() ([]string, bool) {
	if o == nil || IsNil(o.ServicesNotAckedList) {
		return nil, false
	}
	return o.ServicesNotAckedList, true
}

// HasServicesNotAckedList returns a boolean if a field has been set.
func (o *Node) HasServicesNotAckedList() bool {
	if o != nil && !IsNil(o.ServicesNotAckedList) {
		return true
	}

	return false
}

// SetServicesNotAckedList gets a reference to the given []string and assigns it to the ServicesNotAckedList field.
func (o *Node) SetServicesNotAckedList(v []string) {
	o.ServicesNotAckedList = v
}

// GetSlotNumber returns the SlotNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetSlotNumber() int32 {
	if o == nil || IsNil(o.SlotNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.SlotNumber.Get()
}

// GetSlotNumberOk returns a tuple with the SlotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetSlotNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SlotNumber.Get(), o.SlotNumber.IsSet()
}

// HasSlotNumber returns a boolean if a field has been set.
func (o *Node) HasSlotNumber() bool {
	if o != nil && o.SlotNumber.IsSet() {
		return true
	}

	return false
}

// SetSlotNumber gets a reference to the given NullableInt32 and assigns it to the SlotNumber field.
func (o *Node) SetSlotNumber(v int32) {
	o.SlotNumber.Set(&v)
}
// SetSlotNumberNil sets the value for SlotNumber to be an explicit nil
func (o *Node) SetSlotNumberNil() {
	o.SlotNumber.Set(nil)
}

// UnsetSlotNumber ensures that no value is present for SlotNumber, not even an explicit nil
func (o *Node) UnsetSlotNumber() {
	o.SlotNumber.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *Node) GetStats() NodeStats {
	if o == nil || IsNil(o.Stats) {
		var ret NodeStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Node) GetStatsOk() (*NodeStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *Node) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given NodeStats and assigns it to the Stats field.
func (o *Node) SetStats(v NodeStats) {
	o.Stats = &v
}

// GetSystemDisks returns the SystemDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetSystemDisks() []NodeSystemDiskInfo {
	if o == nil {
		var ret []NodeSystemDiskInfo
		return ret
	}
	return o.SystemDisks
}

// GetSystemDisksOk returns a tuple with the SystemDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetSystemDisksOk() ([]NodeSystemDiskInfo, bool) {
	if o == nil || IsNil(o.SystemDisks) {
		return nil, false
	}
	return o.SystemDisks, true
}

// HasSystemDisks returns a boolean if a field has been set.
func (o *Node) HasSystemDisks() bool {
	if o != nil && !IsNil(o.SystemDisks) {
		return true
	}

	return false
}

// SetSystemDisks gets a reference to the given []NodeSystemDiskInfo and assigns it to the SystemDisks field.
func (o *Node) SetSystemDisks(v []NodeSystemDiskInfo) {
	o.SystemDisks = v
}

// GetTimeRemaining returns the TimeRemaining field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetTimeRemaining() int64 {
	if o == nil || IsNil(o.TimeRemaining.Get()) {
		var ret int64
		return ret
	}
	return *o.TimeRemaining.Get()
}

// GetTimeRemainingOk returns a tuple with the TimeRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetTimeRemainingOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeRemaining.Get(), o.TimeRemaining.IsSet()
}

// HasTimeRemaining returns a boolean if a field has been set.
func (o *Node) HasTimeRemaining() bool {
	if o != nil && o.TimeRemaining.IsSet() {
		return true
	}

	return false
}

// SetTimeRemaining gets a reference to the given NullableInt64 and assigns it to the TimeRemaining field.
func (o *Node) SetTimeRemaining(v int64) {
	o.TimeRemaining.Set(&v)
}
// SetTimeRemainingNil sets the value for TimeRemaining to be an explicit nil
func (o *Node) SetTimeRemainingNil() {
	o.TimeRemaining.Set(nil)
}

// UnsetTimeRemaining ensures that no value is present for TimeRemaining, not even an explicit nil
func (o *Node) UnsetTimeRemaining() {
	o.TimeRemaining.Unset()
}

// GetValidationChecks returns the ValidationChecks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetValidationChecks() []PreCheckValidation {
	if o == nil {
		var ret []PreCheckValidation
		return ret
	}
	return o.ValidationChecks
}

// GetValidationChecksOk returns a tuple with the ValidationChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetValidationChecksOk() ([]PreCheckValidation, bool) {
	if o == nil || IsNil(o.ValidationChecks) {
		return nil, false
	}
	return o.ValidationChecks, true
}

// HasValidationChecks returns a boolean if a field has been set.
func (o *Node) HasValidationChecks() bool {
	if o != nil && !IsNil(o.ValidationChecks) {
		return true
	}

	return false
}

// SetValidationChecks gets a reference to the given []PreCheckValidation and assigns it to the ValidationChecks field.
func (o *Node) SetValidationChecks(v []PreCheckValidation) {
	o.ValidationChecks = v
}

// GetVendor returns the Vendor field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Node) GetVendor() string {
	if o == nil || IsNil(o.Vendor.Get()) {
		var ret string
		return ret
	}
	return *o.Vendor.Get()
}

// GetVendorOk returns a tuple with the Vendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Node) GetVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vendor.Get(), o.Vendor.IsSet()
}

// HasVendor returns a boolean if a field has been set.
func (o *Node) HasVendor() bool {
	if o != nil && o.Vendor.IsSet() {
		return true
	}

	return false
}

// SetVendor gets a reference to the given NullableString and assigns it to the Vendor field.
func (o *Node) SetVendor(v string) {
	o.Vendor.Set(&v)
}
// SetVendorNil sets the value for Vendor to be an explicit nil
func (o *Node) SetVendorNil() {
	o.Vendor.Set(nil)
}

// UnsetVendor ensures that no value is present for Vendor, not even an explicit nil
func (o *Node) UnsetVendor() {
	o.Vendor.Unset()
}

func (o Node) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Node) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CapacityByTier != nil {
		toSerialize["capacityByTier"] = o.CapacityByTier
	}
	if !IsNil(o.ChassisInfo) {
		toSerialize["chassisInfo"] = o.ChassisInfo
	}
	if o.ClusterPartitionId.IsSet() {
		toSerialize["clusterPartitionId"] = o.ClusterPartitionId.Get()
	}
	if o.ClusterPartitionName.IsSet() {
		toSerialize["clusterPartitionName"] = o.ClusterPartitionName.Get()
	}
	if o.CohesityNodeSerial.IsSet() {
		toSerialize["cohesityNodeSerial"] = o.CohesityNodeSerial.Get()
	}
	if !IsNil(o.DiskCount) {
		toSerialize["diskCount"] = o.DiskCount
	}
	if o.DiskCountByTier != nil {
		toSerialize["diskCountByTier"] = o.DiskCountByTier
	}
	if o.HardwareModel.IsSet() {
		toSerialize["hardwareModel"] = o.HardwareModel.Get()
	}
	if o.HostName.IsSet() {
		toSerialize["hostName"] = o.HostName.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.InMaintenanceMode.IsSet() {
		toSerialize["inMaintenanceMode"] = o.InMaintenanceMode.Get()
	}
	if o.Ip.IsSet() {
		toSerialize["ip"] = o.Ip.Get()
	}
	if o.IsAppNode.IsSet() {
		toSerialize["isAppNode"] = o.IsAppNode.Get()
	}
	if o.IsMarkedForRemoval.IsSet() {
		toSerialize["isMarkedForRemoval"] = o.IsMarkedForRemoval.Get()
	}
	if o.MaxPhysicalCapacityBytes.IsSet() {
		toSerialize["maxPhysicalCapacityBytes"] = o.MaxPhysicalCapacityBytes.Get()
	}
	if !IsNil(o.NodeHardwareInfo) {
		toSerialize["nodeHardwareInfo"] = o.NodeHardwareInfo
	}
	if o.NodeIncarnationId.IsSet() {
		toSerialize["nodeIncarnationId"] = o.NodeIncarnationId.Get()
	}
	if o.NodeSoftwareVersion.IsSet() {
		toSerialize["nodeSoftwareVersion"] = o.NodeSoftwareVersion.Get()
	}
	if o.NodeType.IsSet() {
		toSerialize["nodeType"] = o.NodeType.Get()
	}
	if o.OfflineDiskCount.IsSet() {
		toSerialize["offlineDiskCount"] = o.OfflineDiskCount.Get()
	}
	if o.OfflineMountPathsOfDisks != nil {
		toSerialize["offlineMountPathsOfDisks"] = o.OfflineMountPathsOfDisks
	}
	if o.PatchSoftwareVersion.IsSet() {
		toSerialize["patchSoftwareVersion"] = o.PatchSoftwareVersion.Get()
	}
	if o.PrecheckTimestampSecs.IsSet() {
		toSerialize["precheckTimestampSecs"] = o.PrecheckTimestampSecs.Get()
	}
	if o.ProductModel.IsSet() {
		toSerialize["productModel"] = o.ProductModel.Get()
	}
	if o.ProgressPercentage.IsSet() {
		toSerialize["progressPercentage"] = o.ProgressPercentage.Get()
	}
	if o.RemovalProgressList != nil {
		toSerialize["removalProgressList"] = o.RemovalProgressList
	}
	if o.RemovalReason != nil {
		toSerialize["removalReason"] = o.RemovalReason
	}
	if o.RemovalState.IsSet() {
		toSerialize["removalState"] = o.RemovalState.Get()
	}
	if o.RemovalTimestampSecs.IsSet() {
		toSerialize["removalTimestampSecs"] = o.RemovalTimestampSecs.Get()
	}
	if o.ServicesAckedList != nil {
		toSerialize["servicesAckedList"] = o.ServicesAckedList
	}
	if o.ServicesNotAcked.IsSet() {
		toSerialize["servicesNotAcked"] = o.ServicesNotAcked.Get()
	}
	if o.ServicesNotAckedList != nil {
		toSerialize["servicesNotAckedList"] = o.ServicesNotAckedList
	}
	if o.SlotNumber.IsSet() {
		toSerialize["slotNumber"] = o.SlotNumber.Get()
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if o.SystemDisks != nil {
		toSerialize["systemDisks"] = o.SystemDisks
	}
	if o.TimeRemaining.IsSet() {
		toSerialize["timeRemaining"] = o.TimeRemaining.Get()
	}
	if o.ValidationChecks != nil {
		toSerialize["validationChecks"] = o.ValidationChecks
	}
	if o.Vendor.IsSet() {
		toSerialize["vendor"] = o.Vendor.Get()
	}
	return toSerialize, nil
}

type NullableNode struct {
	value *Node
	isSet bool
}

func (v NullableNode) Get() *Node {
	return v.value
}

func (v *NullableNode) Set(val *Node) {
	v.value = val
	v.isSet = true
}

func (v NullableNode) IsSet() bool {
	return v.isSet
}

func (v *NullableNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNode(val *Node) *NullableNode {
	return &NullableNode{value: val, isSet: true}
}

func (v NullableNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


