/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewClient type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewClient{}

// ViewClient Specifies a View Client.
type ViewClient struct {
	// Specifies the time how long the client has connected to the server.
	ConnectedTimeUsecs NullableInt64 `json:"connectedTimeUsecs,omitempty"`
	// Specifies the GID of the client user.
	Gid NullableInt32 `json:"gid,omitempty"`
	// Specifies the client ip.
	Ip NullableString `json:"ip,omitempty"`
	// Specifies the node ip which the client is connected to.
	NodeIp NullableString `json:"nodeIp,omitempty"`
	// Specifies the protocol the client uses.
	Protocol NullableString `json:"protocol,omitempty"`
	// Specifies the server ip which the client is connected to.
	ServerIp NullableString `json:"serverIp,omitempty"`
	// Specifies the dialect version for SMB client.
	SmbDialectVersion NullableInt32 `json:"smbDialectVersion,omitempty"`
	// Specifies the UID of the client user.
	Uid NullableInt32 `json:"uid,omitempty"`
	// Specifies the user domain of the client.
	UserDomain NullableString `json:"userDomain,omitempty"`
	// Specifies the username of the client.
	Username NullableString `json:"username,omitempty"`
	// Specifies the id of the View which the client is connected to.
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// Specifies the name of the View which the client is connected to.
	ViewName NullableString `json:"viewName,omitempty"`
	// Specifies the path of the View which the client is connected to.
	ViewPath NullableString `json:"viewPath,omitempty"`
}

// NewViewClient instantiates a new ViewClient object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewClient() *ViewClient {
	this := ViewClient{}
	return &this
}

// NewViewClientWithDefaults instantiates a new ViewClient object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewClientWithDefaults() *ViewClient {
	this := ViewClient{}
	return &this
}

// GetConnectedTimeUsecs returns the ConnectedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetConnectedTimeUsecs() int64 {
	if o == nil || IsNil(o.ConnectedTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.ConnectedTimeUsecs.Get()
}

// GetConnectedTimeUsecsOk returns a tuple with the ConnectedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetConnectedTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectedTimeUsecs.Get(), o.ConnectedTimeUsecs.IsSet()
}

// HasConnectedTimeUsecs returns a boolean if a field has been set.
func (o *ViewClient) HasConnectedTimeUsecs() bool {
	if o != nil && o.ConnectedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetConnectedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ConnectedTimeUsecs field.
func (o *ViewClient) SetConnectedTimeUsecs(v int64) {
	o.ConnectedTimeUsecs.Set(&v)
}
// SetConnectedTimeUsecsNil sets the value for ConnectedTimeUsecs to be an explicit nil
func (o *ViewClient) SetConnectedTimeUsecsNil() {
	o.ConnectedTimeUsecs.Set(nil)
}

// UnsetConnectedTimeUsecs ensures that no value is present for ConnectedTimeUsecs, not even an explicit nil
func (o *ViewClient) UnsetConnectedTimeUsecs() {
	o.ConnectedTimeUsecs.Unset()
}

// GetGid returns the Gid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetGid() int32 {
	if o == nil || IsNil(o.Gid.Get()) {
		var ret int32
		return ret
	}
	return *o.Gid.Get()
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetGidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gid.Get(), o.Gid.IsSet()
}

// HasGid returns a boolean if a field has been set.
func (o *ViewClient) HasGid() bool {
	if o != nil && o.Gid.IsSet() {
		return true
	}

	return false
}

// SetGid gets a reference to the given NullableInt32 and assigns it to the Gid field.
func (o *ViewClient) SetGid(v int32) {
	o.Gid.Set(&v)
}
// SetGidNil sets the value for Gid to be an explicit nil
func (o *ViewClient) SetGidNil() {
	o.Gid.Set(nil)
}

// UnsetGid ensures that no value is present for Gid, not even an explicit nil
func (o *ViewClient) UnsetGid() {
	o.Gid.Unset()
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetIp() string {
	if o == nil || IsNil(o.Ip.Get()) {
		var ret string
		return ret
	}
	return *o.Ip.Get()
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ip.Get(), o.Ip.IsSet()
}

// HasIp returns a boolean if a field has been set.
func (o *ViewClient) HasIp() bool {
	if o != nil && o.Ip.IsSet() {
		return true
	}

	return false
}

// SetIp gets a reference to the given NullableString and assigns it to the Ip field.
func (o *ViewClient) SetIp(v string) {
	o.Ip.Set(&v)
}
// SetIpNil sets the value for Ip to be an explicit nil
func (o *ViewClient) SetIpNil() {
	o.Ip.Set(nil)
}

// UnsetIp ensures that no value is present for Ip, not even an explicit nil
func (o *ViewClient) UnsetIp() {
	o.Ip.Unset()
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetNodeIp() string {
	if o == nil || IsNil(o.NodeIp.Get()) {
		var ret string
		return ret
	}
	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetNodeIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// HasNodeIp returns a boolean if a field has been set.
func (o *ViewClient) HasNodeIp() bool {
	if o != nil && o.NodeIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given NullableString and assigns it to the NodeIp field.
func (o *ViewClient) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}
// SetNodeIpNil sets the value for NodeIp to be an explicit nil
func (o *ViewClient) SetNodeIpNil() {
	o.NodeIp.Set(nil)
}

// UnsetNodeIp ensures that no value is present for NodeIp, not even an explicit nil
func (o *ViewClient) UnsetNodeIp() {
	o.NodeIp.Unset()
}

// GetProtocol returns the Protocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetProtocol() string {
	if o == nil || IsNil(o.Protocol.Get()) {
		var ret string
		return ret
	}
	return *o.Protocol.Get()
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protocol.Get(), o.Protocol.IsSet()
}

// HasProtocol returns a boolean if a field has been set.
func (o *ViewClient) HasProtocol() bool {
	if o != nil && o.Protocol.IsSet() {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given NullableString and assigns it to the Protocol field.
func (o *ViewClient) SetProtocol(v string) {
	o.Protocol.Set(&v)
}
// SetProtocolNil sets the value for Protocol to be an explicit nil
func (o *ViewClient) SetProtocolNil() {
	o.Protocol.Set(nil)
}

// UnsetProtocol ensures that no value is present for Protocol, not even an explicit nil
func (o *ViewClient) UnsetProtocol() {
	o.Protocol.Unset()
}

// GetServerIp returns the ServerIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetServerIp() string {
	if o == nil || IsNil(o.ServerIp.Get()) {
		var ret string
		return ret
	}
	return *o.ServerIp.Get()
}

// GetServerIpOk returns a tuple with the ServerIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetServerIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServerIp.Get(), o.ServerIp.IsSet()
}

// HasServerIp returns a boolean if a field has been set.
func (o *ViewClient) HasServerIp() bool {
	if o != nil && o.ServerIp.IsSet() {
		return true
	}

	return false
}

// SetServerIp gets a reference to the given NullableString and assigns it to the ServerIp field.
func (o *ViewClient) SetServerIp(v string) {
	o.ServerIp.Set(&v)
}
// SetServerIpNil sets the value for ServerIp to be an explicit nil
func (o *ViewClient) SetServerIpNil() {
	o.ServerIp.Set(nil)
}

// UnsetServerIp ensures that no value is present for ServerIp, not even an explicit nil
func (o *ViewClient) UnsetServerIp() {
	o.ServerIp.Unset()
}

// GetSmbDialectVersion returns the SmbDialectVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetSmbDialectVersion() int32 {
	if o == nil || IsNil(o.SmbDialectVersion.Get()) {
		var ret int32
		return ret
	}
	return *o.SmbDialectVersion.Get()
}

// GetSmbDialectVersionOk returns a tuple with the SmbDialectVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetSmbDialectVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SmbDialectVersion.Get(), o.SmbDialectVersion.IsSet()
}

// HasSmbDialectVersion returns a boolean if a field has been set.
func (o *ViewClient) HasSmbDialectVersion() bool {
	if o != nil && o.SmbDialectVersion.IsSet() {
		return true
	}

	return false
}

// SetSmbDialectVersion gets a reference to the given NullableInt32 and assigns it to the SmbDialectVersion field.
func (o *ViewClient) SetSmbDialectVersion(v int32) {
	o.SmbDialectVersion.Set(&v)
}
// SetSmbDialectVersionNil sets the value for SmbDialectVersion to be an explicit nil
func (o *ViewClient) SetSmbDialectVersionNil() {
	o.SmbDialectVersion.Set(nil)
}

// UnsetSmbDialectVersion ensures that no value is present for SmbDialectVersion, not even an explicit nil
func (o *ViewClient) UnsetSmbDialectVersion() {
	o.SmbDialectVersion.Unset()
}

// GetUid returns the Uid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetUid() int32 {
	if o == nil || IsNil(o.Uid.Get()) {
		var ret int32
		return ret
	}
	return *o.Uid.Get()
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetUidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uid.Get(), o.Uid.IsSet()
}

// HasUid returns a boolean if a field has been set.
func (o *ViewClient) HasUid() bool {
	if o != nil && o.Uid.IsSet() {
		return true
	}

	return false
}

// SetUid gets a reference to the given NullableInt32 and assigns it to the Uid field.
func (o *ViewClient) SetUid(v int32) {
	o.Uid.Set(&v)
}
// SetUidNil sets the value for Uid to be an explicit nil
func (o *ViewClient) SetUidNil() {
	o.Uid.Set(nil)
}

// UnsetUid ensures that no value is present for Uid, not even an explicit nil
func (o *ViewClient) UnsetUid() {
	o.Uid.Unset()
}

// GetUserDomain returns the UserDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetUserDomain() string {
	if o == nil || IsNil(o.UserDomain.Get()) {
		var ret string
		return ret
	}
	return *o.UserDomain.Get()
}

// GetUserDomainOk returns a tuple with the UserDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetUserDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserDomain.Get(), o.UserDomain.IsSet()
}

// HasUserDomain returns a boolean if a field has been set.
func (o *ViewClient) HasUserDomain() bool {
	if o != nil && o.UserDomain.IsSet() {
		return true
	}

	return false
}

// SetUserDomain gets a reference to the given NullableString and assigns it to the UserDomain field.
func (o *ViewClient) SetUserDomain(v string) {
	o.UserDomain.Set(&v)
}
// SetUserDomainNil sets the value for UserDomain to be an explicit nil
func (o *ViewClient) SetUserDomainNil() {
	o.UserDomain.Set(nil)
}

// UnsetUserDomain ensures that no value is present for UserDomain, not even an explicit nil
func (o *ViewClient) UnsetUserDomain() {
	o.UserDomain.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *ViewClient) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *ViewClient) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *ViewClient) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *ViewClient) UnsetUsername() {
	o.Username.Unset()
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetViewId() int64 {
	if o == nil || IsNil(o.ViewId.Get()) {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetViewIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *ViewClient) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *ViewClient) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *ViewClient) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *ViewClient) UnsetViewId() {
	o.ViewId.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetViewName() string {
	if o == nil || IsNil(o.ViewName.Get()) {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetViewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *ViewClient) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *ViewClient) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *ViewClient) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *ViewClient) UnsetViewName() {
	o.ViewName.Unset()
}

// GetViewPath returns the ViewPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewClient) GetViewPath() string {
	if o == nil || IsNil(o.ViewPath.Get()) {
		var ret string
		return ret
	}
	return *o.ViewPath.Get()
}

// GetViewPathOk returns a tuple with the ViewPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewClient) GetViewPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewPath.Get(), o.ViewPath.IsSet()
}

// HasViewPath returns a boolean if a field has been set.
func (o *ViewClient) HasViewPath() bool {
	if o != nil && o.ViewPath.IsSet() {
		return true
	}

	return false
}

// SetViewPath gets a reference to the given NullableString and assigns it to the ViewPath field.
func (o *ViewClient) SetViewPath(v string) {
	o.ViewPath.Set(&v)
}
// SetViewPathNil sets the value for ViewPath to be an explicit nil
func (o *ViewClient) SetViewPathNil() {
	o.ViewPath.Set(nil)
}

// UnsetViewPath ensures that no value is present for ViewPath, not even an explicit nil
func (o *ViewClient) UnsetViewPath() {
	o.ViewPath.Unset()
}

func (o ViewClient) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewClient) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectedTimeUsecs.IsSet() {
		toSerialize["connectedTimeUsecs"] = o.ConnectedTimeUsecs.Get()
	}
	if o.Gid.IsSet() {
		toSerialize["gid"] = o.Gid.Get()
	}
	if o.Ip.IsSet() {
		toSerialize["ip"] = o.Ip.Get()
	}
	if o.NodeIp.IsSet() {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	if o.Protocol.IsSet() {
		toSerialize["protocol"] = o.Protocol.Get()
	}
	if o.ServerIp.IsSet() {
		toSerialize["serverIp"] = o.ServerIp.Get()
	}
	if o.SmbDialectVersion.IsSet() {
		toSerialize["smbDialectVersion"] = o.SmbDialectVersion.Get()
	}
	if o.Uid.IsSet() {
		toSerialize["uid"] = o.Uid.Get()
	}
	if o.UserDomain.IsSet() {
		toSerialize["userDomain"] = o.UserDomain.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	if o.ViewPath.IsSet() {
		toSerialize["viewPath"] = o.ViewPath.Get()
	}
	return toSerialize, nil
}

type NullableViewClient struct {
	value *ViewClient
	isSet bool
}

func (v NullableViewClient) Get() *ViewClient {
	return v.value
}

func (v *NullableViewClient) Set(val *ViewClient) {
	v.value = val
	v.isSet = true
}

func (v NullableViewClient) IsSet() bool {
	return v.isSet
}

func (v *NullableViewClient) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewClient(val *ViewClient) *NullableViewClient {
	return &NullableViewClient{value: val, isSet: true}
}

func (v NullableViewClient) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewClient) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


