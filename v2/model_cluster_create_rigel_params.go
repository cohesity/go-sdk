/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterCreateRigelParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterCreateRigelParams{}

// ClusterCreateRigelParams Params for Rigel Cluster Creation
type ClusterCreateRigelParams struct {
	// Specifies the token which will be used to claim this Cluster to Helios.
	ClaimToken NullableString `json:"claimToken"`
	Nodes []RigelClusterNode `json:"nodes"`
}

type _ClusterCreateRigelParams ClusterCreateRigelParams

// NewClusterCreateRigelParams instantiates a new ClusterCreateRigelParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterCreateRigelParams(claimToken NullableString, nodes []RigelClusterNode) *ClusterCreateRigelParams {
	this := ClusterCreateRigelParams{}
	this.ClaimToken = claimToken
	this.Nodes = nodes
	return &this
}

// NewClusterCreateRigelParamsWithDefaults instantiates a new ClusterCreateRigelParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterCreateRigelParamsWithDefaults() *ClusterCreateRigelParams {
	this := ClusterCreateRigelParams{}
	return &this
}

// GetClaimToken returns the ClaimToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ClusterCreateRigelParams) GetClaimToken() string {
	if o == nil || o.ClaimToken.Get() == nil {
		var ret string
		return ret
	}

	return *o.ClaimToken.Get()
}

// GetClaimTokenOk returns a tuple with the ClaimToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterCreateRigelParams) GetClaimTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClaimToken.Get(), o.ClaimToken.IsSet()
}

// SetClaimToken sets field value
func (o *ClusterCreateRigelParams) SetClaimToken(v string) {
	o.ClaimToken.Set(&v)
}

// GetNodes returns the Nodes field value
func (o *ClusterCreateRigelParams) GetNodes() []RigelClusterNode {
	if o == nil {
		var ret []RigelClusterNode
		return ret
	}

	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value
// and a boolean to check if the value has been set.
func (o *ClusterCreateRigelParams) GetNodesOk() ([]RigelClusterNode, bool) {
	if o == nil {
		return nil, false
	}
	return o.Nodes, true
}

// SetNodes sets field value
func (o *ClusterCreateRigelParams) SetNodes(v []RigelClusterNode) {
	o.Nodes = v
}

func (o ClusterCreateRigelParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterCreateRigelParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["claimToken"] = o.ClaimToken.Get()
	toSerialize["nodes"] = o.Nodes
	return toSerialize, nil
}

func (o *ClusterCreateRigelParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"claimToken",
		"nodes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterCreateRigelParams := _ClusterCreateRigelParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterCreateRigelParams)

	if err != nil {
		return err
	}

	*o = ClusterCreateRigelParams(varClusterCreateRigelParams)

	return err
}

type NullableClusterCreateRigelParams struct {
	value *ClusterCreateRigelParams
	isSet bool
}

func (v NullableClusterCreateRigelParams) Get() *ClusterCreateRigelParams {
	return v.value
}

func (v *NullableClusterCreateRigelParams) Set(val *ClusterCreateRigelParams) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterCreateRigelParams) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterCreateRigelParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterCreateRigelParams(val *ClusterCreateRigelParams) *NullableClusterCreateRigelParams {
	return &NullableClusterCreateRigelParams{value: val, isSet: true}
}

func (v NullableClusterCreateRigelParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterCreateRigelParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


