/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SecurityConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityConfig{}

// SecurityConfig Specifies the fields of security settings.
type SecurityConfig struct {
	AccountLockout *SecurityConfigAccountLockout `json:"accountLockout,omitempty"`
	// Specifies the authentication token timeout in minutes. Applies both for API based access token and browser login cookie.
	AuthTokenTimeoutMinutes NullableInt32 `json:"authTokenTimeoutMinutes,omitempty"`
	CertificateBasedAuth *SecurityConfigCertificateBasedAuth `json:"certificateBasedAuth,omitempty"`
	DataClassification *SecurityConfigDataClassification `json:"dataClassification,omitempty"`
	// Specifies the UI inactivity timeout in milliseconds. Default value is 30 minutes.
	InactivityTimeoutMSecs NullableInt64 `json:"inactivityTimeoutMSecs,omitempty"`
	PasswordLifetime *SecurityConfigPasswordLifetime `json:"passwordLifetime,omitempty"`
	PasswordReuse *SecurityConfigPasswordReuse `json:"passwordReuse,omitempty"`
	PasswordStrength *SecurityConfigPasswordStrength `json:"passwordStrength,omitempty"`
	SessionConfiguration *SecurityConfigSessionConfiguration `json:"sessionConfiguration,omitempty"`
	SshConfiguration *SecurityConfigSshConfiguration `json:"sshConfiguration,omitempty"`
}

// NewSecurityConfig instantiates a new SecurityConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityConfig() *SecurityConfig {
	this := SecurityConfig{}
	return &this
}

// NewSecurityConfigWithDefaults instantiates a new SecurityConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityConfigWithDefaults() *SecurityConfig {
	this := SecurityConfig{}
	return &this
}

// GetAccountLockout returns the AccountLockout field value if set, zero value otherwise.
func (o *SecurityConfig) GetAccountLockout() SecurityConfigAccountLockout {
	if o == nil || IsNil(o.AccountLockout) {
		var ret SecurityConfigAccountLockout
		return ret
	}
	return *o.AccountLockout
}

// GetAccountLockoutOk returns a tuple with the AccountLockout field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityConfig) GetAccountLockoutOk() (*SecurityConfigAccountLockout, bool) {
	if o == nil || IsNil(o.AccountLockout) {
		return nil, false
	}
	return o.AccountLockout, true
}

// HasAccountLockout returns a boolean if a field has been set.
func (o *SecurityConfig) HasAccountLockout() bool {
	if o != nil && !IsNil(o.AccountLockout) {
		return true
	}

	return false
}

// SetAccountLockout gets a reference to the given SecurityConfigAccountLockout and assigns it to the AccountLockout field.
func (o *SecurityConfig) SetAccountLockout(v SecurityConfigAccountLockout) {
	o.AccountLockout = &v
}

// GetAuthTokenTimeoutMinutes returns the AuthTokenTimeoutMinutes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfig) GetAuthTokenTimeoutMinutes() int32 {
	if o == nil || IsNil(o.AuthTokenTimeoutMinutes.Get()) {
		var ret int32
		return ret
	}
	return *o.AuthTokenTimeoutMinutes.Get()
}

// GetAuthTokenTimeoutMinutesOk returns a tuple with the AuthTokenTimeoutMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfig) GetAuthTokenTimeoutMinutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthTokenTimeoutMinutes.Get(), o.AuthTokenTimeoutMinutes.IsSet()
}

// HasAuthTokenTimeoutMinutes returns a boolean if a field has been set.
func (o *SecurityConfig) HasAuthTokenTimeoutMinutes() bool {
	if o != nil && o.AuthTokenTimeoutMinutes.IsSet() {
		return true
	}

	return false
}

// SetAuthTokenTimeoutMinutes gets a reference to the given NullableInt32 and assigns it to the AuthTokenTimeoutMinutes field.
func (o *SecurityConfig) SetAuthTokenTimeoutMinutes(v int32) {
	o.AuthTokenTimeoutMinutes.Set(&v)
}
// SetAuthTokenTimeoutMinutesNil sets the value for AuthTokenTimeoutMinutes to be an explicit nil
func (o *SecurityConfig) SetAuthTokenTimeoutMinutesNil() {
	o.AuthTokenTimeoutMinutes.Set(nil)
}

// UnsetAuthTokenTimeoutMinutes ensures that no value is present for AuthTokenTimeoutMinutes, not even an explicit nil
func (o *SecurityConfig) UnsetAuthTokenTimeoutMinutes() {
	o.AuthTokenTimeoutMinutes.Unset()
}

// GetCertificateBasedAuth returns the CertificateBasedAuth field value if set, zero value otherwise.
func (o *SecurityConfig) GetCertificateBasedAuth() SecurityConfigCertificateBasedAuth {
	if o == nil || IsNil(o.CertificateBasedAuth) {
		var ret SecurityConfigCertificateBasedAuth
		return ret
	}
	return *o.CertificateBasedAuth
}

// GetCertificateBasedAuthOk returns a tuple with the CertificateBasedAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityConfig) GetCertificateBasedAuthOk() (*SecurityConfigCertificateBasedAuth, bool) {
	if o == nil || IsNil(o.CertificateBasedAuth) {
		return nil, false
	}
	return o.CertificateBasedAuth, true
}

// HasCertificateBasedAuth returns a boolean if a field has been set.
func (o *SecurityConfig) HasCertificateBasedAuth() bool {
	if o != nil && !IsNil(o.CertificateBasedAuth) {
		return true
	}

	return false
}

// SetCertificateBasedAuth gets a reference to the given SecurityConfigCertificateBasedAuth and assigns it to the CertificateBasedAuth field.
func (o *SecurityConfig) SetCertificateBasedAuth(v SecurityConfigCertificateBasedAuth) {
	o.CertificateBasedAuth = &v
}

// GetDataClassification returns the DataClassification field value if set, zero value otherwise.
func (o *SecurityConfig) GetDataClassification() SecurityConfigDataClassification {
	if o == nil || IsNil(o.DataClassification) {
		var ret SecurityConfigDataClassification
		return ret
	}
	return *o.DataClassification
}

// GetDataClassificationOk returns a tuple with the DataClassification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityConfig) GetDataClassificationOk() (*SecurityConfigDataClassification, bool) {
	if o == nil || IsNil(o.DataClassification) {
		return nil, false
	}
	return o.DataClassification, true
}

// HasDataClassification returns a boolean if a field has been set.
func (o *SecurityConfig) HasDataClassification() bool {
	if o != nil && !IsNil(o.DataClassification) {
		return true
	}

	return false
}

// SetDataClassification gets a reference to the given SecurityConfigDataClassification and assigns it to the DataClassification field.
func (o *SecurityConfig) SetDataClassification(v SecurityConfigDataClassification) {
	o.DataClassification = &v
}

// GetInactivityTimeoutMSecs returns the InactivityTimeoutMSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfig) GetInactivityTimeoutMSecs() int64 {
	if o == nil || IsNil(o.InactivityTimeoutMSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.InactivityTimeoutMSecs.Get()
}

// GetInactivityTimeoutMSecsOk returns a tuple with the InactivityTimeoutMSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfig) GetInactivityTimeoutMSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.InactivityTimeoutMSecs.Get(), o.InactivityTimeoutMSecs.IsSet()
}

// HasInactivityTimeoutMSecs returns a boolean if a field has been set.
func (o *SecurityConfig) HasInactivityTimeoutMSecs() bool {
	if o != nil && o.InactivityTimeoutMSecs.IsSet() {
		return true
	}

	return false
}

// SetInactivityTimeoutMSecs gets a reference to the given NullableInt64 and assigns it to the InactivityTimeoutMSecs field.
func (o *SecurityConfig) SetInactivityTimeoutMSecs(v int64) {
	o.InactivityTimeoutMSecs.Set(&v)
}
// SetInactivityTimeoutMSecsNil sets the value for InactivityTimeoutMSecs to be an explicit nil
func (o *SecurityConfig) SetInactivityTimeoutMSecsNil() {
	o.InactivityTimeoutMSecs.Set(nil)
}

// UnsetInactivityTimeoutMSecs ensures that no value is present for InactivityTimeoutMSecs, not even an explicit nil
func (o *SecurityConfig) UnsetInactivityTimeoutMSecs() {
	o.InactivityTimeoutMSecs.Unset()
}

// GetPasswordLifetime returns the PasswordLifetime field value if set, zero value otherwise.
func (o *SecurityConfig) GetPasswordLifetime() SecurityConfigPasswordLifetime {
	if o == nil || IsNil(o.PasswordLifetime) {
		var ret SecurityConfigPasswordLifetime
		return ret
	}
	return *o.PasswordLifetime
}

// GetPasswordLifetimeOk returns a tuple with the PasswordLifetime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityConfig) GetPasswordLifetimeOk() (*SecurityConfigPasswordLifetime, bool) {
	if o == nil || IsNil(o.PasswordLifetime) {
		return nil, false
	}
	return o.PasswordLifetime, true
}

// HasPasswordLifetime returns a boolean if a field has been set.
func (o *SecurityConfig) HasPasswordLifetime() bool {
	if o != nil && !IsNil(o.PasswordLifetime) {
		return true
	}

	return false
}

// SetPasswordLifetime gets a reference to the given SecurityConfigPasswordLifetime and assigns it to the PasswordLifetime field.
func (o *SecurityConfig) SetPasswordLifetime(v SecurityConfigPasswordLifetime) {
	o.PasswordLifetime = &v
}

// GetPasswordReuse returns the PasswordReuse field value if set, zero value otherwise.
func (o *SecurityConfig) GetPasswordReuse() SecurityConfigPasswordReuse {
	if o == nil || IsNil(o.PasswordReuse) {
		var ret SecurityConfigPasswordReuse
		return ret
	}
	return *o.PasswordReuse
}

// GetPasswordReuseOk returns a tuple with the PasswordReuse field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityConfig) GetPasswordReuseOk() (*SecurityConfigPasswordReuse, bool) {
	if o == nil || IsNil(o.PasswordReuse) {
		return nil, false
	}
	return o.PasswordReuse, true
}

// HasPasswordReuse returns a boolean if a field has been set.
func (o *SecurityConfig) HasPasswordReuse() bool {
	if o != nil && !IsNil(o.PasswordReuse) {
		return true
	}

	return false
}

// SetPasswordReuse gets a reference to the given SecurityConfigPasswordReuse and assigns it to the PasswordReuse field.
func (o *SecurityConfig) SetPasswordReuse(v SecurityConfigPasswordReuse) {
	o.PasswordReuse = &v
}

// GetPasswordStrength returns the PasswordStrength field value if set, zero value otherwise.
func (o *SecurityConfig) GetPasswordStrength() SecurityConfigPasswordStrength {
	if o == nil || IsNil(o.PasswordStrength) {
		var ret SecurityConfigPasswordStrength
		return ret
	}
	return *o.PasswordStrength
}

// GetPasswordStrengthOk returns a tuple with the PasswordStrength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityConfig) GetPasswordStrengthOk() (*SecurityConfigPasswordStrength, bool) {
	if o == nil || IsNil(o.PasswordStrength) {
		return nil, false
	}
	return o.PasswordStrength, true
}

// HasPasswordStrength returns a boolean if a field has been set.
func (o *SecurityConfig) HasPasswordStrength() bool {
	if o != nil && !IsNil(o.PasswordStrength) {
		return true
	}

	return false
}

// SetPasswordStrength gets a reference to the given SecurityConfigPasswordStrength and assigns it to the PasswordStrength field.
func (o *SecurityConfig) SetPasswordStrength(v SecurityConfigPasswordStrength) {
	o.PasswordStrength = &v
}

// GetSessionConfiguration returns the SessionConfiguration field value if set, zero value otherwise.
func (o *SecurityConfig) GetSessionConfiguration() SecurityConfigSessionConfiguration {
	if o == nil || IsNil(o.SessionConfiguration) {
		var ret SecurityConfigSessionConfiguration
		return ret
	}
	return *o.SessionConfiguration
}

// GetSessionConfigurationOk returns a tuple with the SessionConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityConfig) GetSessionConfigurationOk() (*SecurityConfigSessionConfiguration, bool) {
	if o == nil || IsNil(o.SessionConfiguration) {
		return nil, false
	}
	return o.SessionConfiguration, true
}

// HasSessionConfiguration returns a boolean if a field has been set.
func (o *SecurityConfig) HasSessionConfiguration() bool {
	if o != nil && !IsNil(o.SessionConfiguration) {
		return true
	}

	return false
}

// SetSessionConfiguration gets a reference to the given SecurityConfigSessionConfiguration and assigns it to the SessionConfiguration field.
func (o *SecurityConfig) SetSessionConfiguration(v SecurityConfigSessionConfiguration) {
	o.SessionConfiguration = &v
}

// GetSshConfiguration returns the SshConfiguration field value if set, zero value otherwise.
func (o *SecurityConfig) GetSshConfiguration() SecurityConfigSshConfiguration {
	if o == nil || IsNil(o.SshConfiguration) {
		var ret SecurityConfigSshConfiguration
		return ret
	}
	return *o.SshConfiguration
}

// GetSshConfigurationOk returns a tuple with the SshConfiguration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecurityConfig) GetSshConfigurationOk() (*SecurityConfigSshConfiguration, bool) {
	if o == nil || IsNil(o.SshConfiguration) {
		return nil, false
	}
	return o.SshConfiguration, true
}

// HasSshConfiguration returns a boolean if a field has been set.
func (o *SecurityConfig) HasSshConfiguration() bool {
	if o != nil && !IsNil(o.SshConfiguration) {
		return true
	}

	return false
}

// SetSshConfiguration gets a reference to the given SecurityConfigSshConfiguration and assigns it to the SshConfiguration field.
func (o *SecurityConfig) SetSshConfiguration(v SecurityConfigSshConfiguration) {
	o.SshConfiguration = &v
}

func (o SecurityConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountLockout) {
		toSerialize["accountLockout"] = o.AccountLockout
	}
	if o.AuthTokenTimeoutMinutes.IsSet() {
		toSerialize["authTokenTimeoutMinutes"] = o.AuthTokenTimeoutMinutes.Get()
	}
	if !IsNil(o.CertificateBasedAuth) {
		toSerialize["certificateBasedAuth"] = o.CertificateBasedAuth
	}
	if !IsNil(o.DataClassification) {
		toSerialize["dataClassification"] = o.DataClassification
	}
	if o.InactivityTimeoutMSecs.IsSet() {
		toSerialize["inactivityTimeoutMSecs"] = o.InactivityTimeoutMSecs.Get()
	}
	if !IsNil(o.PasswordLifetime) {
		toSerialize["passwordLifetime"] = o.PasswordLifetime
	}
	if !IsNil(o.PasswordReuse) {
		toSerialize["passwordReuse"] = o.PasswordReuse
	}
	if !IsNil(o.PasswordStrength) {
		toSerialize["passwordStrength"] = o.PasswordStrength
	}
	if !IsNil(o.SessionConfiguration) {
		toSerialize["sessionConfiguration"] = o.SessionConfiguration
	}
	if !IsNil(o.SshConfiguration) {
		toSerialize["sshConfiguration"] = o.SshConfiguration
	}
	return toSerialize, nil
}

type NullableSecurityConfig struct {
	value *SecurityConfig
	isSet bool
}

func (v NullableSecurityConfig) Get() *SecurityConfig {
	return v.value
}

func (v *NullableSecurityConfig) Set(val *SecurityConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityConfig(val *SecurityConfig) *NullableSecurityConfig {
	return &NullableSecurityConfig{value: val, isSet: true}
}

func (v NullableSecurityConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


