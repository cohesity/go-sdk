/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SnapshotRetentionPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotRetentionPolicy{}

// SnapshotRetentionPolicy Describes the snapshot retention policy struct.
type SnapshotRetentionPolicy struct {
	// Number of days to keep the snapshot.
	NumOfDaysToKeep NullableInt64 `json:"numOfDaysToKeep,omitempty"`
	// Number of snapshot versions to keep.
	NumOfVersionsToKeep NullableInt64 `json:"numOfVersionsToKeep,omitempty"`
	// Bool to denote if the policy is suspended.
	Suspended NullableBool `json:"suspended,omitempty"`
}

// NewSnapshotRetentionPolicy instantiates a new SnapshotRetentionPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotRetentionPolicy() *SnapshotRetentionPolicy {
	this := SnapshotRetentionPolicy{}
	return &this
}

// NewSnapshotRetentionPolicyWithDefaults instantiates a new SnapshotRetentionPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotRetentionPolicyWithDefaults() *SnapshotRetentionPolicy {
	this := SnapshotRetentionPolicy{}
	return &this
}

// GetNumOfDaysToKeep returns the NumOfDaysToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotRetentionPolicy) GetNumOfDaysToKeep() int64 {
	if o == nil || IsNil(o.NumOfDaysToKeep.Get()) {
		var ret int64
		return ret
	}
	return *o.NumOfDaysToKeep.Get()
}

// GetNumOfDaysToKeepOk returns a tuple with the NumOfDaysToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotRetentionPolicy) GetNumOfDaysToKeepOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumOfDaysToKeep.Get(), o.NumOfDaysToKeep.IsSet()
}

// HasNumOfDaysToKeep returns a boolean if a field has been set.
func (o *SnapshotRetentionPolicy) HasNumOfDaysToKeep() bool {
	if o != nil && o.NumOfDaysToKeep.IsSet() {
		return true
	}

	return false
}

// SetNumOfDaysToKeep gets a reference to the given NullableInt64 and assigns it to the NumOfDaysToKeep field.
func (o *SnapshotRetentionPolicy) SetNumOfDaysToKeep(v int64) {
	o.NumOfDaysToKeep.Set(&v)
}
// SetNumOfDaysToKeepNil sets the value for NumOfDaysToKeep to be an explicit nil
func (o *SnapshotRetentionPolicy) SetNumOfDaysToKeepNil() {
	o.NumOfDaysToKeep.Set(nil)
}

// UnsetNumOfDaysToKeep ensures that no value is present for NumOfDaysToKeep, not even an explicit nil
func (o *SnapshotRetentionPolicy) UnsetNumOfDaysToKeep() {
	o.NumOfDaysToKeep.Unset()
}

// GetNumOfVersionsToKeep returns the NumOfVersionsToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotRetentionPolicy) GetNumOfVersionsToKeep() int64 {
	if o == nil || IsNil(o.NumOfVersionsToKeep.Get()) {
		var ret int64
		return ret
	}
	return *o.NumOfVersionsToKeep.Get()
}

// GetNumOfVersionsToKeepOk returns a tuple with the NumOfVersionsToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotRetentionPolicy) GetNumOfVersionsToKeepOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumOfVersionsToKeep.Get(), o.NumOfVersionsToKeep.IsSet()
}

// HasNumOfVersionsToKeep returns a boolean if a field has been set.
func (o *SnapshotRetentionPolicy) HasNumOfVersionsToKeep() bool {
	if o != nil && o.NumOfVersionsToKeep.IsSet() {
		return true
	}

	return false
}

// SetNumOfVersionsToKeep gets a reference to the given NullableInt64 and assigns it to the NumOfVersionsToKeep field.
func (o *SnapshotRetentionPolicy) SetNumOfVersionsToKeep(v int64) {
	o.NumOfVersionsToKeep.Set(&v)
}
// SetNumOfVersionsToKeepNil sets the value for NumOfVersionsToKeep to be an explicit nil
func (o *SnapshotRetentionPolicy) SetNumOfVersionsToKeepNil() {
	o.NumOfVersionsToKeep.Set(nil)
}

// UnsetNumOfVersionsToKeep ensures that no value is present for NumOfVersionsToKeep, not even an explicit nil
func (o *SnapshotRetentionPolicy) UnsetNumOfVersionsToKeep() {
	o.NumOfVersionsToKeep.Unset()
}

// GetSuspended returns the Suspended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotRetentionPolicy) GetSuspended() bool {
	if o == nil || IsNil(o.Suspended.Get()) {
		var ret bool
		return ret
	}
	return *o.Suspended.Get()
}

// GetSuspendedOk returns a tuple with the Suspended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotRetentionPolicy) GetSuspendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suspended.Get(), o.Suspended.IsSet()
}

// HasSuspended returns a boolean if a field has been set.
func (o *SnapshotRetentionPolicy) HasSuspended() bool {
	if o != nil && o.Suspended.IsSet() {
		return true
	}

	return false
}

// SetSuspended gets a reference to the given NullableBool and assigns it to the Suspended field.
func (o *SnapshotRetentionPolicy) SetSuspended(v bool) {
	o.Suspended.Set(&v)
}
// SetSuspendedNil sets the value for Suspended to be an explicit nil
func (o *SnapshotRetentionPolicy) SetSuspendedNil() {
	o.Suspended.Set(nil)
}

// UnsetSuspended ensures that no value is present for Suspended, not even an explicit nil
func (o *SnapshotRetentionPolicy) UnsetSuspended() {
	o.Suspended.Unset()
}

func (o SnapshotRetentionPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotRetentionPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NumOfDaysToKeep.IsSet() {
		toSerialize["numOfDaysToKeep"] = o.NumOfDaysToKeep.Get()
	}
	if o.NumOfVersionsToKeep.IsSet() {
		toSerialize["numOfVersionsToKeep"] = o.NumOfVersionsToKeep.Get()
	}
	if o.Suspended.IsSet() {
		toSerialize["suspended"] = o.Suspended.Get()
	}
	return toSerialize, nil
}

type NullableSnapshotRetentionPolicy struct {
	value *SnapshotRetentionPolicy
	isSet bool
}

func (v NullableSnapshotRetentionPolicy) Get() *SnapshotRetentionPolicy {
	return v.value
}

func (v *NullableSnapshotRetentionPolicy) Set(val *SnapshotRetentionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotRetentionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotRetentionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotRetentionPolicy(val *SnapshotRetentionPolicy) *NullableSnapshotRetentionPolicy {
	return &NullableSnapshotRetentionPolicy{value: val, isSet: true}
}

func (v NullableSnapshotRetentionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotRetentionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


