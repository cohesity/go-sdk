/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BondInterfaceNetworkParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BondInterfaceNetworkParams{}

// BondInterfaceNetworkParams Bond interface network parameters.
type BondInterfaceNetworkParams struct {
	// Bonding mode of the interface.
	BondingMode NullableString `json:"bondingMode,omitempty"`
	// Rate option to use for link partner to transmit LACPDU packets in 802.3ad mode.
	LacpRate NullableString `json:"lacpRate,omitempty"`
	// Transmit hash policy to use for selection in 802.3ad mode.
	XmitHashPolicy NullableString `json:"xmitHashPolicy,omitempty"`
}

// NewBondInterfaceNetworkParams instantiates a new BondInterfaceNetworkParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBondInterfaceNetworkParams() *BondInterfaceNetworkParams {
	this := BondInterfaceNetworkParams{}
	return &this
}

// NewBondInterfaceNetworkParamsWithDefaults instantiates a new BondInterfaceNetworkParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBondInterfaceNetworkParamsWithDefaults() *BondInterfaceNetworkParams {
	this := BondInterfaceNetworkParams{}
	return &this
}

// GetBondingMode returns the BondingMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondInterfaceNetworkParams) GetBondingMode() string {
	if o == nil || IsNil(o.BondingMode.Get()) {
		var ret string
		return ret
	}
	return *o.BondingMode.Get()
}

// GetBondingModeOk returns a tuple with the BondingMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondInterfaceNetworkParams) GetBondingModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BondingMode.Get(), o.BondingMode.IsSet()
}

// HasBondingMode returns a boolean if a field has been set.
func (o *BondInterfaceNetworkParams) HasBondingMode() bool {
	if o != nil && o.BondingMode.IsSet() {
		return true
	}

	return false
}

// SetBondingMode gets a reference to the given NullableString and assigns it to the BondingMode field.
func (o *BondInterfaceNetworkParams) SetBondingMode(v string) {
	o.BondingMode.Set(&v)
}
// SetBondingModeNil sets the value for BondingMode to be an explicit nil
func (o *BondInterfaceNetworkParams) SetBondingModeNil() {
	o.BondingMode.Set(nil)
}

// UnsetBondingMode ensures that no value is present for BondingMode, not even an explicit nil
func (o *BondInterfaceNetworkParams) UnsetBondingMode() {
	o.BondingMode.Unset()
}

// GetLacpRate returns the LacpRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondInterfaceNetworkParams) GetLacpRate() string {
	if o == nil || IsNil(o.LacpRate.Get()) {
		var ret string
		return ret
	}
	return *o.LacpRate.Get()
}

// GetLacpRateOk returns a tuple with the LacpRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondInterfaceNetworkParams) GetLacpRateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LacpRate.Get(), o.LacpRate.IsSet()
}

// HasLacpRate returns a boolean if a field has been set.
func (o *BondInterfaceNetworkParams) HasLacpRate() bool {
	if o != nil && o.LacpRate.IsSet() {
		return true
	}

	return false
}

// SetLacpRate gets a reference to the given NullableString and assigns it to the LacpRate field.
func (o *BondInterfaceNetworkParams) SetLacpRate(v string) {
	o.LacpRate.Set(&v)
}
// SetLacpRateNil sets the value for LacpRate to be an explicit nil
func (o *BondInterfaceNetworkParams) SetLacpRateNil() {
	o.LacpRate.Set(nil)
}

// UnsetLacpRate ensures that no value is present for LacpRate, not even an explicit nil
func (o *BondInterfaceNetworkParams) UnsetLacpRate() {
	o.LacpRate.Unset()
}

// GetXmitHashPolicy returns the XmitHashPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondInterfaceNetworkParams) GetXmitHashPolicy() string {
	if o == nil || IsNil(o.XmitHashPolicy.Get()) {
		var ret string
		return ret
	}
	return *o.XmitHashPolicy.Get()
}

// GetXmitHashPolicyOk returns a tuple with the XmitHashPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondInterfaceNetworkParams) GetXmitHashPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.XmitHashPolicy.Get(), o.XmitHashPolicy.IsSet()
}

// HasXmitHashPolicy returns a boolean if a field has been set.
func (o *BondInterfaceNetworkParams) HasXmitHashPolicy() bool {
	if o != nil && o.XmitHashPolicy.IsSet() {
		return true
	}

	return false
}

// SetXmitHashPolicy gets a reference to the given NullableString and assigns it to the XmitHashPolicy field.
func (o *BondInterfaceNetworkParams) SetXmitHashPolicy(v string) {
	o.XmitHashPolicy.Set(&v)
}
// SetXmitHashPolicyNil sets the value for XmitHashPolicy to be an explicit nil
func (o *BondInterfaceNetworkParams) SetXmitHashPolicyNil() {
	o.XmitHashPolicy.Set(nil)
}

// UnsetXmitHashPolicy ensures that no value is present for XmitHashPolicy, not even an explicit nil
func (o *BondInterfaceNetworkParams) UnsetXmitHashPolicy() {
	o.XmitHashPolicy.Unset()
}

func (o BondInterfaceNetworkParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BondInterfaceNetworkParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BondingMode.IsSet() {
		toSerialize["bondingMode"] = o.BondingMode.Get()
	}
	if o.LacpRate.IsSet() {
		toSerialize["lacpRate"] = o.LacpRate.Get()
	}
	if o.XmitHashPolicy.IsSet() {
		toSerialize["xmitHashPolicy"] = o.XmitHashPolicy.Get()
	}
	return toSerialize, nil
}

type NullableBondInterfaceNetworkParams struct {
	value *BondInterfaceNetworkParams
	isSet bool
}

func (v NullableBondInterfaceNetworkParams) Get() *BondInterfaceNetworkParams {
	return v.value
}

func (v *NullableBondInterfaceNetworkParams) Set(val *BondInterfaceNetworkParams) {
	v.value = val
	v.isSet = true
}

func (v NullableBondInterfaceNetworkParams) IsSet() bool {
	return v.isSet
}

func (v *NullableBondInterfaceNetworkParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBondInterfaceNetworkParams(val *BondInterfaceNetworkParams) *NullableBondInterfaceNetworkParams {
	return &NullableBondInterfaceNetworkParams{value: val, isSet: true}
}

func (v NullableBondInterfaceNetworkParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBondInterfaceNetworkParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


