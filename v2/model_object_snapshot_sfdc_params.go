/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ObjectSnapshotSfdcParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectSnapshotSfdcParams{}

// ObjectSnapshotSfdcParams Specifies the parameters specific to Salesforce type snapshot.
type ObjectSnapshotSfdcParams struct {
	// Specifies the number of records added for the Object.
	RecordsAdded NullableInt64 `json:"recordsAdded,omitempty"`
	// Specifies the number of records updated for the Object.
	RecordsModified NullableInt64 `json:"recordsModified,omitempty"`
	// Specifies the number of records removed from the Object.
	RecordsRemoved NullableInt64 `json:"recordsRemoved,omitempty"`
}

// NewObjectSnapshotSfdcParams instantiates a new ObjectSnapshotSfdcParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectSnapshotSfdcParams() *ObjectSnapshotSfdcParams {
	this := ObjectSnapshotSfdcParams{}
	return &this
}

// NewObjectSnapshotSfdcParamsWithDefaults instantiates a new ObjectSnapshotSfdcParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectSnapshotSfdcParamsWithDefaults() *ObjectSnapshotSfdcParams {
	this := ObjectSnapshotSfdcParams{}
	return &this
}

// GetRecordsAdded returns the RecordsAdded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshotSfdcParams) GetRecordsAdded() int64 {
	if o == nil || IsNil(o.RecordsAdded.Get()) {
		var ret int64
		return ret
	}
	return *o.RecordsAdded.Get()
}

// GetRecordsAddedOk returns a tuple with the RecordsAdded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshotSfdcParams) GetRecordsAddedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordsAdded.Get(), o.RecordsAdded.IsSet()
}

// HasRecordsAdded returns a boolean if a field has been set.
func (o *ObjectSnapshotSfdcParams) HasRecordsAdded() bool {
	if o != nil && o.RecordsAdded.IsSet() {
		return true
	}

	return false
}

// SetRecordsAdded gets a reference to the given NullableInt64 and assigns it to the RecordsAdded field.
func (o *ObjectSnapshotSfdcParams) SetRecordsAdded(v int64) {
	o.RecordsAdded.Set(&v)
}
// SetRecordsAddedNil sets the value for RecordsAdded to be an explicit nil
func (o *ObjectSnapshotSfdcParams) SetRecordsAddedNil() {
	o.RecordsAdded.Set(nil)
}

// UnsetRecordsAdded ensures that no value is present for RecordsAdded, not even an explicit nil
func (o *ObjectSnapshotSfdcParams) UnsetRecordsAdded() {
	o.RecordsAdded.Unset()
}

// GetRecordsModified returns the RecordsModified field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshotSfdcParams) GetRecordsModified() int64 {
	if o == nil || IsNil(o.RecordsModified.Get()) {
		var ret int64
		return ret
	}
	return *o.RecordsModified.Get()
}

// GetRecordsModifiedOk returns a tuple with the RecordsModified field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshotSfdcParams) GetRecordsModifiedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordsModified.Get(), o.RecordsModified.IsSet()
}

// HasRecordsModified returns a boolean if a field has been set.
func (o *ObjectSnapshotSfdcParams) HasRecordsModified() bool {
	if o != nil && o.RecordsModified.IsSet() {
		return true
	}

	return false
}

// SetRecordsModified gets a reference to the given NullableInt64 and assigns it to the RecordsModified field.
func (o *ObjectSnapshotSfdcParams) SetRecordsModified(v int64) {
	o.RecordsModified.Set(&v)
}
// SetRecordsModifiedNil sets the value for RecordsModified to be an explicit nil
func (o *ObjectSnapshotSfdcParams) SetRecordsModifiedNil() {
	o.RecordsModified.Set(nil)
}

// UnsetRecordsModified ensures that no value is present for RecordsModified, not even an explicit nil
func (o *ObjectSnapshotSfdcParams) UnsetRecordsModified() {
	o.RecordsModified.Unset()
}

// GetRecordsRemoved returns the RecordsRemoved field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshotSfdcParams) GetRecordsRemoved() int64 {
	if o == nil || IsNil(o.RecordsRemoved.Get()) {
		var ret int64
		return ret
	}
	return *o.RecordsRemoved.Get()
}

// GetRecordsRemovedOk returns a tuple with the RecordsRemoved field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshotSfdcParams) GetRecordsRemovedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecordsRemoved.Get(), o.RecordsRemoved.IsSet()
}

// HasRecordsRemoved returns a boolean if a field has been set.
func (o *ObjectSnapshotSfdcParams) HasRecordsRemoved() bool {
	if o != nil && o.RecordsRemoved.IsSet() {
		return true
	}

	return false
}

// SetRecordsRemoved gets a reference to the given NullableInt64 and assigns it to the RecordsRemoved field.
func (o *ObjectSnapshotSfdcParams) SetRecordsRemoved(v int64) {
	o.RecordsRemoved.Set(&v)
}
// SetRecordsRemovedNil sets the value for RecordsRemoved to be an explicit nil
func (o *ObjectSnapshotSfdcParams) SetRecordsRemovedNil() {
	o.RecordsRemoved.Set(nil)
}

// UnsetRecordsRemoved ensures that no value is present for RecordsRemoved, not even an explicit nil
func (o *ObjectSnapshotSfdcParams) UnsetRecordsRemoved() {
	o.RecordsRemoved.Unset()
}

func (o ObjectSnapshotSfdcParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectSnapshotSfdcParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RecordsAdded.IsSet() {
		toSerialize["recordsAdded"] = o.RecordsAdded.Get()
	}
	if o.RecordsModified.IsSet() {
		toSerialize["recordsModified"] = o.RecordsModified.Get()
	}
	if o.RecordsRemoved.IsSet() {
		toSerialize["recordsRemoved"] = o.RecordsRemoved.Get()
	}
	return toSerialize, nil
}

type NullableObjectSnapshotSfdcParams struct {
	value *ObjectSnapshotSfdcParams
	isSet bool
}

func (v NullableObjectSnapshotSfdcParams) Get() *ObjectSnapshotSfdcParams {
	return v.value
}

func (v *NullableObjectSnapshotSfdcParams) Set(val *ObjectSnapshotSfdcParams) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectSnapshotSfdcParams) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectSnapshotSfdcParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectSnapshotSfdcParams(val *ObjectSnapshotSfdcParams) *NullableObjectSnapshotSfdcParams {
	return &NullableObjectSnapshotSfdcParams{value: val, isSet: true}
}

func (v NullableObjectSnapshotSfdcParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectSnapshotSfdcParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


