/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GcpNativeProtectionGroupParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpNativeProtectionGroupParams{}

// GcpNativeProtectionGroupParams Specifies the parameters which are specific to GCP related Protection Groups using GCP native snapshot APIs. Atlease one of tags or objects must be specified.
type GcpNativeProtectionGroupParams struct {
	// Specifies the objects to be excluded in the Protection Group.
	ExcludeObjectIds []int64 `json:"excludeObjectIds,omitempty"`
	// Array of Arrays of VM Tag Ids that Specify VMs to Exclude. Optionally specify a list of VMs to exclude from protecting by listing Protection Source ids of VM Tags in this two dimensional array. Using this two dimensional array of Tag ids, the Cluster generates a list of VMs to exclude from protecting, which are derived from intersections of the inner arrays and union of the outer array, as shown by the following example. For example a Datacenter is selected to be protected but you want to exclude all the 'Former Employees' VMs in the East and West but keep all the VMs for 'Former Employees' in the South which are also stored in this Datacenter, by specifying the following tag id array: [ [1000, 2221], [1000, 3031] ], where 1000 is the 'Former Employee' VM Tag id, 2221 is the 'East' VM Tag id and 3031 is the 'West' VM Tag id. The first inner array [1000, 2221] produces a list of VMs that are both tagged with 'Former Employees' and 'East' (an intersection). The second inner array [1000, 3031] produces a list of VMs that are both tagged with 'Former Employees' and 'West' (an intersection). The outer array combines the list of VMs from the two inner arrays. The list of resulting VMs are excluded from being protected this Job.
	ExcludeVmTagIds [][]int64 `json:"excludeVmTagIds,omitempty"`
	GcpDiskExclusionParams *GcpDiskExclusionParams `json:"gcpDiskExclusionParams,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	// Specifies the objects to be included in the Protection Group.
	Objects []GcpNativeProtectionGroupObjectParams `json:"objects,omitempty"`
	// Specifies the id of the parent of the objects.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Specifies the name of the parent of the objects.
	SourceName NullableString `json:"sourceName,omitempty"`
	// Array of Array of VM Tag Ids that Specify VMs to Protect. Optionally specify a list of VMs to protect by listing Protection Source ids of VM Tags in this two dimensional array. Using this two dimensional array of Tag ids, the Cluster generates a list of VMs to protect which are derived from intersections of the inner arrays and union of the outer array, as shown by the following example. To protect only 'Eng' VMs in the East and all the VMs in the West, specify the following tag id array: [ [1101, 2221], [3031] ], where 1101 is the 'Eng' VM Tag id, 2221 is the 'East' VM Tag id and 3031 is the 'West' VM Tag id. The inner array [1101, 2221] produces a list of VMs that are both tagged with 'Eng' and 'East' (an intersection). The outer array combines the list from the inner array with list of VMs tagged with 'West' (a union). The list of resulting VMs are protected by this Protection Group.
	VmTagIds [][]int64 `json:"vmTagIds,omitempty"`
}

// NewGcpNativeProtectionGroupParams instantiates a new GcpNativeProtectionGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpNativeProtectionGroupParams() *GcpNativeProtectionGroupParams {
	this := GcpNativeProtectionGroupParams{}
	return &this
}

// NewGcpNativeProtectionGroupParamsWithDefaults instantiates a new GcpNativeProtectionGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpNativeProtectionGroupParamsWithDefaults() *GcpNativeProtectionGroupParams {
	this := GcpNativeProtectionGroupParams{}
	return &this
}

// GetExcludeObjectIds returns the ExcludeObjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpNativeProtectionGroupParams) GetExcludeObjectIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.ExcludeObjectIds
}

// GetExcludeObjectIdsOk returns a tuple with the ExcludeObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpNativeProtectionGroupParams) GetExcludeObjectIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ExcludeObjectIds) {
		return nil, false
	}
	return o.ExcludeObjectIds, true
}

// HasExcludeObjectIds returns a boolean if a field has been set.
func (o *GcpNativeProtectionGroupParams) HasExcludeObjectIds() bool {
	if o != nil && !IsNil(o.ExcludeObjectIds) {
		return true
	}

	return false
}

// SetExcludeObjectIds gets a reference to the given []int64 and assigns it to the ExcludeObjectIds field.
func (o *GcpNativeProtectionGroupParams) SetExcludeObjectIds(v []int64) {
	o.ExcludeObjectIds = v
}

// GetExcludeVmTagIds returns the ExcludeVmTagIds field value if set, zero value otherwise.
func (o *GcpNativeProtectionGroupParams) GetExcludeVmTagIds() [][]int64 {
	if o == nil || IsNil(o.ExcludeVmTagIds) {
		var ret [][]int64
		return ret
	}
	return o.ExcludeVmTagIds
}

// GetExcludeVmTagIdsOk returns a tuple with the ExcludeVmTagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpNativeProtectionGroupParams) GetExcludeVmTagIdsOk() ([][]int64, bool) {
	if o == nil || IsNil(o.ExcludeVmTagIds) {
		return nil, false
	}
	return o.ExcludeVmTagIds, true
}

// HasExcludeVmTagIds returns a boolean if a field has been set.
func (o *GcpNativeProtectionGroupParams) HasExcludeVmTagIds() bool {
	if o != nil && !IsNil(o.ExcludeVmTagIds) {
		return true
	}

	return false
}

// SetExcludeVmTagIds gets a reference to the given [][]int64 and assigns it to the ExcludeVmTagIds field.
func (o *GcpNativeProtectionGroupParams) SetExcludeVmTagIds(v [][]int64) {
	o.ExcludeVmTagIds = v
}

// GetGcpDiskExclusionParams returns the GcpDiskExclusionParams field value if set, zero value otherwise.
func (o *GcpNativeProtectionGroupParams) GetGcpDiskExclusionParams() GcpDiskExclusionParams {
	if o == nil || IsNil(o.GcpDiskExclusionParams) {
		var ret GcpDiskExclusionParams
		return ret
	}
	return *o.GcpDiskExclusionParams
}

// GetGcpDiskExclusionParamsOk returns a tuple with the GcpDiskExclusionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpNativeProtectionGroupParams) GetGcpDiskExclusionParamsOk() (*GcpDiskExclusionParams, bool) {
	if o == nil || IsNil(o.GcpDiskExclusionParams) {
		return nil, false
	}
	return o.GcpDiskExclusionParams, true
}

// HasGcpDiskExclusionParams returns a boolean if a field has been set.
func (o *GcpNativeProtectionGroupParams) HasGcpDiskExclusionParams() bool {
	if o != nil && !IsNil(o.GcpDiskExclusionParams) {
		return true
	}

	return false
}

// SetGcpDiskExclusionParams gets a reference to the given GcpDiskExclusionParams and assigns it to the GcpDiskExclusionParams field.
func (o *GcpNativeProtectionGroupParams) SetGcpDiskExclusionParams(v GcpDiskExclusionParams) {
	o.GcpDiskExclusionParams = &v
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *GcpNativeProtectionGroupParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || IsNil(o.IndexingPolicy) {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpNativeProtectionGroupParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || IsNil(o.IndexingPolicy) {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *GcpNativeProtectionGroupParams) HasIndexingPolicy() bool {
	if o != nil && !IsNil(o.IndexingPolicy) {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *GcpNativeProtectionGroupParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *GcpNativeProtectionGroupParams) GetObjects() []GcpNativeProtectionGroupObjectParams {
	if o == nil || IsNil(o.Objects) {
		var ret []GcpNativeProtectionGroupObjectParams
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GcpNativeProtectionGroupParams) GetObjectsOk() ([]GcpNativeProtectionGroupObjectParams, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *GcpNativeProtectionGroupParams) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []GcpNativeProtectionGroupObjectParams and assigns it to the Objects field.
func (o *GcpNativeProtectionGroupParams) SetObjects(v []GcpNativeProtectionGroupObjectParams) {
	o.Objects = v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpNativeProtectionGroupParams) GetSourceId() int64 {
	if o == nil || IsNil(o.SourceId.Get()) {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpNativeProtectionGroupParams) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *GcpNativeProtectionGroupParams) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *GcpNativeProtectionGroupParams) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *GcpNativeProtectionGroupParams) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *GcpNativeProtectionGroupParams) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpNativeProtectionGroupParams) GetSourceName() string {
	if o == nil || IsNil(o.SourceName.Get()) {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpNativeProtectionGroupParams) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *GcpNativeProtectionGroupParams) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *GcpNativeProtectionGroupParams) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *GcpNativeProtectionGroupParams) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *GcpNativeProtectionGroupParams) UnsetSourceName() {
	o.SourceName.Unset()
}

// GetVmTagIds returns the VmTagIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GcpNativeProtectionGroupParams) GetVmTagIds() [][]int64 {
	if o == nil {
		var ret [][]int64
		return ret
	}
	return o.VmTagIds
}

// GetVmTagIdsOk returns a tuple with the VmTagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpNativeProtectionGroupParams) GetVmTagIdsOk() ([][]int64, bool) {
	if o == nil || IsNil(o.VmTagIds) {
		return nil, false
	}
	return o.VmTagIds, true
}

// HasVmTagIds returns a boolean if a field has been set.
func (o *GcpNativeProtectionGroupParams) HasVmTagIds() bool {
	if o != nil && !IsNil(o.VmTagIds) {
		return true
	}

	return false
}

// SetVmTagIds gets a reference to the given [][]int64 and assigns it to the VmTagIds field.
func (o *GcpNativeProtectionGroupParams) SetVmTagIds(v [][]int64) {
	o.VmTagIds = v
}

func (o GcpNativeProtectionGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpNativeProtectionGroupParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludeObjectIds != nil {
		toSerialize["excludeObjectIds"] = o.ExcludeObjectIds
	}
	if !IsNil(o.ExcludeVmTagIds) {
		toSerialize["excludeVmTagIds"] = o.ExcludeVmTagIds
	}
	if !IsNil(o.GcpDiskExclusionParams) {
		toSerialize["gcpDiskExclusionParams"] = o.GcpDiskExclusionParams
	}
	if !IsNil(o.IndexingPolicy) {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	if o.VmTagIds != nil {
		toSerialize["vmTagIds"] = o.VmTagIds
	}
	return toSerialize, nil
}

type NullableGcpNativeProtectionGroupParams struct {
	value *GcpNativeProtectionGroupParams
	isSet bool
}

func (v NullableGcpNativeProtectionGroupParams) Get() *GcpNativeProtectionGroupParams {
	return v.value
}

func (v *NullableGcpNativeProtectionGroupParams) Set(val *GcpNativeProtectionGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpNativeProtectionGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpNativeProtectionGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpNativeProtectionGroupParams(val *GcpNativeProtectionGroupParams) *NullableGcpNativeProtectionGroupParams {
	return &NullableGcpNativeProtectionGroupParams{value: val, isSet: true}
}

func (v NullableGcpNativeProtectionGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpNativeProtectionGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


