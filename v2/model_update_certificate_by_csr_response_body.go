/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpdateCertificateByCsrResponseBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateCertificateByCsrResponseBody{}

// UpdateCertificateByCsrResponseBody Specifies the response to update a certificate.
type UpdateCertificateByCsrResponseBody struct {
	// Specifies the certificate.
	Certificate NullableString `json:"certificate,omitempty"`
}

// NewUpdateCertificateByCsrResponseBody instantiates a new UpdateCertificateByCsrResponseBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateCertificateByCsrResponseBody() *UpdateCertificateByCsrResponseBody {
	this := UpdateCertificateByCsrResponseBody{}
	return &this
}

// NewUpdateCertificateByCsrResponseBodyWithDefaults instantiates a new UpdateCertificateByCsrResponseBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateCertificateByCsrResponseBodyWithDefaults() *UpdateCertificateByCsrResponseBody {
	this := UpdateCertificateByCsrResponseBody{}
	return &this
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateCertificateByCsrResponseBody) GetCertificate() string {
	if o == nil || IsNil(o.Certificate.Get()) {
		var ret string
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateCertificateByCsrResponseBody) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *UpdateCertificateByCsrResponseBody) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableString and assigns it to the Certificate field.
func (o *UpdateCertificateByCsrResponseBody) SetCertificate(v string) {
	o.Certificate.Set(&v)
}
// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *UpdateCertificateByCsrResponseBody) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *UpdateCertificateByCsrResponseBody) UnsetCertificate() {
	o.Certificate.Unset()
}

func (o UpdateCertificateByCsrResponseBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateCertificateByCsrResponseBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	return toSerialize, nil
}

type NullableUpdateCertificateByCsrResponseBody struct {
	value *UpdateCertificateByCsrResponseBody
	isSet bool
}

func (v NullableUpdateCertificateByCsrResponseBody) Get() *UpdateCertificateByCsrResponseBody {
	return v.value
}

func (v *NullableUpdateCertificateByCsrResponseBody) Set(val *UpdateCertificateByCsrResponseBody) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateCertificateByCsrResponseBody) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateCertificateByCsrResponseBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateCertificateByCsrResponseBody(val *UpdateCertificateByCsrResponseBody) *NullableUpdateCertificateByCsrResponseBody {
	return &NullableUpdateCertificateByCsrResponseBody{value: val, isSet: true}
}

func (v NullableUpdateCertificateByCsrResponseBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateCertificateByCsrResponseBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


