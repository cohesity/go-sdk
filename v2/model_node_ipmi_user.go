/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeIpmiUser type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeIpmiUser{}

// NodeIpmiUser Specifies the ipmi user info for each node.
type NodeIpmiUser struct {
	// Specifies the ipmi user name of the node.
	IpmiUsername NullableString `json:"ipmiUsername,omitempty"`
	// Specifies the ip address of the node.
	NodeIp NullableString `json:"nodeIp,omitempty"`
}

// NewNodeIpmiUser instantiates a new NodeIpmiUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeIpmiUser() *NodeIpmiUser {
	this := NodeIpmiUser{}
	return &this
}

// NewNodeIpmiUserWithDefaults instantiates a new NodeIpmiUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeIpmiUserWithDefaults() *NodeIpmiUser {
	this := NodeIpmiUser{}
	return &this
}

// GetIpmiUsername returns the IpmiUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeIpmiUser) GetIpmiUsername() string {
	if o == nil || IsNil(o.IpmiUsername.Get()) {
		var ret string
		return ret
	}
	return *o.IpmiUsername.Get()
}

// GetIpmiUsernameOk returns a tuple with the IpmiUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeIpmiUser) GetIpmiUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpmiUsername.Get(), o.IpmiUsername.IsSet()
}

// HasIpmiUsername returns a boolean if a field has been set.
func (o *NodeIpmiUser) HasIpmiUsername() bool {
	if o != nil && o.IpmiUsername.IsSet() {
		return true
	}

	return false
}

// SetIpmiUsername gets a reference to the given NullableString and assigns it to the IpmiUsername field.
func (o *NodeIpmiUser) SetIpmiUsername(v string) {
	o.IpmiUsername.Set(&v)
}
// SetIpmiUsernameNil sets the value for IpmiUsername to be an explicit nil
func (o *NodeIpmiUser) SetIpmiUsernameNil() {
	o.IpmiUsername.Set(nil)
}

// UnsetIpmiUsername ensures that no value is present for IpmiUsername, not even an explicit nil
func (o *NodeIpmiUser) UnsetIpmiUsername() {
	o.IpmiUsername.Unset()
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeIpmiUser) GetNodeIp() string {
	if o == nil || IsNil(o.NodeIp.Get()) {
		var ret string
		return ret
	}
	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeIpmiUser) GetNodeIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// HasNodeIp returns a boolean if a field has been set.
func (o *NodeIpmiUser) HasNodeIp() bool {
	if o != nil && o.NodeIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given NullableString and assigns it to the NodeIp field.
func (o *NodeIpmiUser) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}
// SetNodeIpNil sets the value for NodeIp to be an explicit nil
func (o *NodeIpmiUser) SetNodeIpNil() {
	o.NodeIp.Set(nil)
}

// UnsetNodeIp ensures that no value is present for NodeIp, not even an explicit nil
func (o *NodeIpmiUser) UnsetNodeIp() {
	o.NodeIp.Unset()
}

func (o NodeIpmiUser) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeIpmiUser) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IpmiUsername.IsSet() {
		toSerialize["ipmiUsername"] = o.IpmiUsername.Get()
	}
	if o.NodeIp.IsSet() {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	return toSerialize, nil
}

type NullableNodeIpmiUser struct {
	value *NodeIpmiUser
	isSet bool
}

func (v NullableNodeIpmiUser) Get() *NodeIpmiUser {
	return v.value
}

func (v *NullableNodeIpmiUser) Set(val *NodeIpmiUser) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeIpmiUser) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeIpmiUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeIpmiUser(val *NodeIpmiUser) *NullableNodeIpmiUser {
	return &NullableNodeIpmiUser{value: val, isSet: true}
}

func (v NullableNodeIpmiUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeIpmiUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


