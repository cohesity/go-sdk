/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GraphNodeRelation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GraphNodeRelation{}

// GraphNodeRelation Defintion of node relation spec.
type GraphNodeRelation struct {
	// Specifies the graph node info for which edges are provided.
	GraphNodeInfo *GraphNode `json:"graphNodeInfo,omitempty"`
	// Specifies the list of related edges/neighbours/relations of the source graph node.
	Relations []GraphEdge `json:"relations,omitempty"`
}

// NewGraphNodeRelation instantiates a new GraphNodeRelation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGraphNodeRelation() *GraphNodeRelation {
	this := GraphNodeRelation{}
	return &this
}

// NewGraphNodeRelationWithDefaults instantiates a new GraphNodeRelation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGraphNodeRelationWithDefaults() *GraphNodeRelation {
	this := GraphNodeRelation{}
	return &this
}

// GetGraphNodeInfo returns the GraphNodeInfo field value if set, zero value otherwise.
func (o *GraphNodeRelation) GetGraphNodeInfo() GraphNode {
	if o == nil || IsNil(o.GraphNodeInfo) {
		var ret GraphNode
		return ret
	}
	return *o.GraphNodeInfo
}

// GetGraphNodeInfoOk returns a tuple with the GraphNodeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GraphNodeRelation) GetGraphNodeInfoOk() (*GraphNode, bool) {
	if o == nil || IsNil(o.GraphNodeInfo) {
		return nil, false
	}
	return o.GraphNodeInfo, true
}

// HasGraphNodeInfo returns a boolean if a field has been set.
func (o *GraphNodeRelation) HasGraphNodeInfo() bool {
	if o != nil && !IsNil(o.GraphNodeInfo) {
		return true
	}

	return false
}

// SetGraphNodeInfo gets a reference to the given GraphNode and assigns it to the GraphNodeInfo field.
func (o *GraphNodeRelation) SetGraphNodeInfo(v GraphNode) {
	o.GraphNodeInfo = &v
}

// GetRelations returns the Relations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GraphNodeRelation) GetRelations() []GraphEdge {
	if o == nil {
		var ret []GraphEdge
		return ret
	}
	return o.Relations
}

// GetRelationsOk returns a tuple with the Relations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GraphNodeRelation) GetRelationsOk() ([]GraphEdge, bool) {
	if o == nil || IsNil(o.Relations) {
		return nil, false
	}
	return o.Relations, true
}

// HasRelations returns a boolean if a field has been set.
func (o *GraphNodeRelation) HasRelations() bool {
	if o != nil && !IsNil(o.Relations) {
		return true
	}

	return false
}

// SetRelations gets a reference to the given []GraphEdge and assigns it to the Relations field.
func (o *GraphNodeRelation) SetRelations(v []GraphEdge) {
	o.Relations = v
}

func (o GraphNodeRelation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GraphNodeRelation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.GraphNodeInfo) {
		toSerialize["graphNodeInfo"] = o.GraphNodeInfo
	}
	if o.Relations != nil {
		toSerialize["relations"] = o.Relations
	}
	return toSerialize, nil
}

type NullableGraphNodeRelation struct {
	value *GraphNodeRelation
	isSet bool
}

func (v NullableGraphNodeRelation) Get() *GraphNodeRelation {
	return v.value
}

func (v *NullableGraphNodeRelation) Set(val *GraphNodeRelation) {
	v.value = val
	v.isSet = true
}

func (v NullableGraphNodeRelation) IsSet() bool {
	return v.isSet
}

func (v *NullableGraphNodeRelation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGraphNodeRelation(val *GraphNodeRelation) *NullableGraphNodeRelation {
	return &NullableGraphNodeRelation{value: val, isSet: true}
}

func (v NullableGraphNodeRelation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGraphNodeRelation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


