/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PhysicalTargetParamsForMountVolume type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhysicalTargetParamsForMountVolume{}

// PhysicalTargetParamsForMountVolume Specifies the parameters for a physical recovery target.
type PhysicalTargetParamsForMountVolume struct {
	// Specifies whether to mount to the original target. If true, originalTargetConfig must be specified. If false, newTargetConfig must be specified.
	MountToOriginalTarget NullableBool `json:"mountToOriginalTarget"`
	// Specifies the mapping of original volumes and mounted volumes
	MountedVolumeMapping []MountedVolumeMapping `json:"mountedVolumeMapping,omitempty"`
	NewTargetConfig NullablePhysicalTargetParamsForMountVolumeNewTargetConfig `json:"newTargetConfig,omitempty"`
	OriginalTargetConfig NullablePhysicalTargetParamsForMountVolumeOriginalTargetConfig `json:"originalTargetConfig,omitempty"`
	// Specifies whether to perform a read-only mount. Default is false.
	ReadOnlyMount NullableBool `json:"readOnlyMount,omitempty"`
	VlanConfig NullableHyperVTargetParamsForMountVolumeVlanConfig `json:"vlanConfig,omitempty"`
	// Specifies the names of volumes that need to be mounted. If this is not specified then all volumes that are part of the source VM will be mounted on the target VM.
	VolumeNames []string `json:"volumeNames,omitempty"`
}

type _PhysicalTargetParamsForMountVolume PhysicalTargetParamsForMountVolume

// NewPhysicalTargetParamsForMountVolume instantiates a new PhysicalTargetParamsForMountVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalTargetParamsForMountVolume(mountToOriginalTarget NullableBool) *PhysicalTargetParamsForMountVolume {
	this := PhysicalTargetParamsForMountVolume{}
	this.MountToOriginalTarget = mountToOriginalTarget
	return &this
}

// NewPhysicalTargetParamsForMountVolumeWithDefaults instantiates a new PhysicalTargetParamsForMountVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalTargetParamsForMountVolumeWithDefaults() *PhysicalTargetParamsForMountVolume {
	this := PhysicalTargetParamsForMountVolume{}
	return &this
}

// GetMountToOriginalTarget returns the MountToOriginalTarget field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *PhysicalTargetParamsForMountVolume) GetMountToOriginalTarget() bool {
	if o == nil || o.MountToOriginalTarget.Get() == nil {
		var ret bool
		return ret
	}

	return *o.MountToOriginalTarget.Get()
}

// GetMountToOriginalTargetOk returns a tuple with the MountToOriginalTarget field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForMountVolume) GetMountToOriginalTargetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountToOriginalTarget.Get(), o.MountToOriginalTarget.IsSet()
}

// SetMountToOriginalTarget sets field value
func (o *PhysicalTargetParamsForMountVolume) SetMountToOriginalTarget(v bool) {
	o.MountToOriginalTarget.Set(&v)
}

// GetMountedVolumeMapping returns the MountedVolumeMapping field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalTargetParamsForMountVolume) GetMountedVolumeMapping() []MountedVolumeMapping {
	if o == nil {
		var ret []MountedVolumeMapping
		return ret
	}
	return o.MountedVolumeMapping
}

// GetMountedVolumeMappingOk returns a tuple with the MountedVolumeMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForMountVolume) GetMountedVolumeMappingOk() ([]MountedVolumeMapping, bool) {
	if o == nil || IsNil(o.MountedVolumeMapping) {
		return nil, false
	}
	return o.MountedVolumeMapping, true
}

// HasMountedVolumeMapping returns a boolean if a field has been set.
func (o *PhysicalTargetParamsForMountVolume) HasMountedVolumeMapping() bool {
	if o != nil && !IsNil(o.MountedVolumeMapping) {
		return true
	}

	return false
}

// SetMountedVolumeMapping gets a reference to the given []MountedVolumeMapping and assigns it to the MountedVolumeMapping field.
func (o *PhysicalTargetParamsForMountVolume) SetMountedVolumeMapping(v []MountedVolumeMapping) {
	o.MountedVolumeMapping = v
}

// GetNewTargetConfig returns the NewTargetConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalTargetParamsForMountVolume) GetNewTargetConfig() PhysicalTargetParamsForMountVolumeNewTargetConfig {
	if o == nil || IsNil(o.NewTargetConfig.Get()) {
		var ret PhysicalTargetParamsForMountVolumeNewTargetConfig
		return ret
	}
	return *o.NewTargetConfig.Get()
}

// GetNewTargetConfigOk returns a tuple with the NewTargetConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForMountVolume) GetNewTargetConfigOk() (*PhysicalTargetParamsForMountVolumeNewTargetConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewTargetConfig.Get(), o.NewTargetConfig.IsSet()
}

// HasNewTargetConfig returns a boolean if a field has been set.
func (o *PhysicalTargetParamsForMountVolume) HasNewTargetConfig() bool {
	if o != nil && o.NewTargetConfig.IsSet() {
		return true
	}

	return false
}

// SetNewTargetConfig gets a reference to the given NullablePhysicalTargetParamsForMountVolumeNewTargetConfig and assigns it to the NewTargetConfig field.
func (o *PhysicalTargetParamsForMountVolume) SetNewTargetConfig(v PhysicalTargetParamsForMountVolumeNewTargetConfig) {
	o.NewTargetConfig.Set(&v)
}
// SetNewTargetConfigNil sets the value for NewTargetConfig to be an explicit nil
func (o *PhysicalTargetParamsForMountVolume) SetNewTargetConfigNil() {
	o.NewTargetConfig.Set(nil)
}

// UnsetNewTargetConfig ensures that no value is present for NewTargetConfig, not even an explicit nil
func (o *PhysicalTargetParamsForMountVolume) UnsetNewTargetConfig() {
	o.NewTargetConfig.Unset()
}

// GetOriginalTargetConfig returns the OriginalTargetConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalTargetParamsForMountVolume) GetOriginalTargetConfig() PhysicalTargetParamsForMountVolumeOriginalTargetConfig {
	if o == nil || IsNil(o.OriginalTargetConfig.Get()) {
		var ret PhysicalTargetParamsForMountVolumeOriginalTargetConfig
		return ret
	}
	return *o.OriginalTargetConfig.Get()
}

// GetOriginalTargetConfigOk returns a tuple with the OriginalTargetConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForMountVolume) GetOriginalTargetConfigOk() (*PhysicalTargetParamsForMountVolumeOriginalTargetConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalTargetConfig.Get(), o.OriginalTargetConfig.IsSet()
}

// HasOriginalTargetConfig returns a boolean if a field has been set.
func (o *PhysicalTargetParamsForMountVolume) HasOriginalTargetConfig() bool {
	if o != nil && o.OriginalTargetConfig.IsSet() {
		return true
	}

	return false
}

// SetOriginalTargetConfig gets a reference to the given NullablePhysicalTargetParamsForMountVolumeOriginalTargetConfig and assigns it to the OriginalTargetConfig field.
func (o *PhysicalTargetParamsForMountVolume) SetOriginalTargetConfig(v PhysicalTargetParamsForMountVolumeOriginalTargetConfig) {
	o.OriginalTargetConfig.Set(&v)
}
// SetOriginalTargetConfigNil sets the value for OriginalTargetConfig to be an explicit nil
func (o *PhysicalTargetParamsForMountVolume) SetOriginalTargetConfigNil() {
	o.OriginalTargetConfig.Set(nil)
}

// UnsetOriginalTargetConfig ensures that no value is present for OriginalTargetConfig, not even an explicit nil
func (o *PhysicalTargetParamsForMountVolume) UnsetOriginalTargetConfig() {
	o.OriginalTargetConfig.Unset()
}

// GetReadOnlyMount returns the ReadOnlyMount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalTargetParamsForMountVolume) GetReadOnlyMount() bool {
	if o == nil || IsNil(o.ReadOnlyMount.Get()) {
		var ret bool
		return ret
	}
	return *o.ReadOnlyMount.Get()
}

// GetReadOnlyMountOk returns a tuple with the ReadOnlyMount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForMountVolume) GetReadOnlyMountOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReadOnlyMount.Get(), o.ReadOnlyMount.IsSet()
}

// HasReadOnlyMount returns a boolean if a field has been set.
func (o *PhysicalTargetParamsForMountVolume) HasReadOnlyMount() bool {
	if o != nil && o.ReadOnlyMount.IsSet() {
		return true
	}

	return false
}

// SetReadOnlyMount gets a reference to the given NullableBool and assigns it to the ReadOnlyMount field.
func (o *PhysicalTargetParamsForMountVolume) SetReadOnlyMount(v bool) {
	o.ReadOnlyMount.Set(&v)
}
// SetReadOnlyMountNil sets the value for ReadOnlyMount to be an explicit nil
func (o *PhysicalTargetParamsForMountVolume) SetReadOnlyMountNil() {
	o.ReadOnlyMount.Set(nil)
}

// UnsetReadOnlyMount ensures that no value is present for ReadOnlyMount, not even an explicit nil
func (o *PhysicalTargetParamsForMountVolume) UnsetReadOnlyMount() {
	o.ReadOnlyMount.Unset()
}

// GetVlanConfig returns the VlanConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalTargetParamsForMountVolume) GetVlanConfig() HyperVTargetParamsForMountVolumeVlanConfig {
	if o == nil || IsNil(o.VlanConfig.Get()) {
		var ret HyperVTargetParamsForMountVolumeVlanConfig
		return ret
	}
	return *o.VlanConfig.Get()
}

// GetVlanConfigOk returns a tuple with the VlanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForMountVolume) GetVlanConfigOk() (*HyperVTargetParamsForMountVolumeVlanConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.VlanConfig.Get(), o.VlanConfig.IsSet()
}

// HasVlanConfig returns a boolean if a field has been set.
func (o *PhysicalTargetParamsForMountVolume) HasVlanConfig() bool {
	if o != nil && o.VlanConfig.IsSet() {
		return true
	}

	return false
}

// SetVlanConfig gets a reference to the given NullableHyperVTargetParamsForMountVolumeVlanConfig and assigns it to the VlanConfig field.
func (o *PhysicalTargetParamsForMountVolume) SetVlanConfig(v HyperVTargetParamsForMountVolumeVlanConfig) {
	o.VlanConfig.Set(&v)
}
// SetVlanConfigNil sets the value for VlanConfig to be an explicit nil
func (o *PhysicalTargetParamsForMountVolume) SetVlanConfigNil() {
	o.VlanConfig.Set(nil)
}

// UnsetVlanConfig ensures that no value is present for VlanConfig, not even an explicit nil
func (o *PhysicalTargetParamsForMountVolume) UnsetVlanConfig() {
	o.VlanConfig.Unset()
}

// GetVolumeNames returns the VolumeNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalTargetParamsForMountVolume) GetVolumeNames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.VolumeNames
}

// GetVolumeNamesOk returns a tuple with the VolumeNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalTargetParamsForMountVolume) GetVolumeNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.VolumeNames) {
		return nil, false
	}
	return o.VolumeNames, true
}

// HasVolumeNames returns a boolean if a field has been set.
func (o *PhysicalTargetParamsForMountVolume) HasVolumeNames() bool {
	if o != nil && !IsNil(o.VolumeNames) {
		return true
	}

	return false
}

// SetVolumeNames gets a reference to the given []string and assigns it to the VolumeNames field.
func (o *PhysicalTargetParamsForMountVolume) SetVolumeNames(v []string) {
	o.VolumeNames = v
}

func (o PhysicalTargetParamsForMountVolume) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhysicalTargetParamsForMountVolume) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["mountToOriginalTarget"] = o.MountToOriginalTarget.Get()
	if o.MountedVolumeMapping != nil {
		toSerialize["mountedVolumeMapping"] = o.MountedVolumeMapping
	}
	if o.NewTargetConfig.IsSet() {
		toSerialize["newTargetConfig"] = o.NewTargetConfig.Get()
	}
	if o.OriginalTargetConfig.IsSet() {
		toSerialize["originalTargetConfig"] = o.OriginalTargetConfig.Get()
	}
	if o.ReadOnlyMount.IsSet() {
		toSerialize["readOnlyMount"] = o.ReadOnlyMount.Get()
	}
	if o.VlanConfig.IsSet() {
		toSerialize["vlanConfig"] = o.VlanConfig.Get()
	}
	if o.VolumeNames != nil {
		toSerialize["volumeNames"] = o.VolumeNames
	}
	return toSerialize, nil
}

func (o *PhysicalTargetParamsForMountVolume) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"mountToOriginalTarget",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPhysicalTargetParamsForMountVolume := _PhysicalTargetParamsForMountVolume{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPhysicalTargetParamsForMountVolume)

	if err != nil {
		return err
	}

	*o = PhysicalTargetParamsForMountVolume(varPhysicalTargetParamsForMountVolume)

	return err
}

type NullablePhysicalTargetParamsForMountVolume struct {
	value *PhysicalTargetParamsForMountVolume
	isSet bool
}

func (v NullablePhysicalTargetParamsForMountVolume) Get() *PhysicalTargetParamsForMountVolume {
	return v.value
}

func (v *NullablePhysicalTargetParamsForMountVolume) Set(val *PhysicalTargetParamsForMountVolume) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalTargetParamsForMountVolume) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalTargetParamsForMountVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalTargetParamsForMountVolume(val *PhysicalTargetParamsForMountVolume) *NullablePhysicalTargetParamsForMountVolume {
	return &NullablePhysicalTargetParamsForMountVolume{value: val, isSet: true}
}

func (v NullablePhysicalTargetParamsForMountVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalTargetParamsForMountVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


