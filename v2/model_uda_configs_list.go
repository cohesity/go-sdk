/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UdaConfigsList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaConfigsList{}

// UdaConfigsList List of configs as strings.
type UdaConfigsList struct {
	// Configs list.
	Configs []string `json:"configs,omitempty"`
}

// NewUdaConfigsList instantiates a new UdaConfigsList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaConfigsList() *UdaConfigsList {
	this := UdaConfigsList{}
	return &this
}

// NewUdaConfigsListWithDefaults instantiates a new UdaConfigsList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaConfigsListWithDefaults() *UdaConfigsList {
	this := UdaConfigsList{}
	return &this
}

// GetConfigs returns the Configs field value if set, zero value otherwise.
func (o *UdaConfigsList) GetConfigs() []string {
	if o == nil || IsNil(o.Configs) {
		var ret []string
		return ret
	}
	return o.Configs
}

// GetConfigsOk returns a tuple with the Configs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdaConfigsList) GetConfigsOk() ([]string, bool) {
	if o == nil || IsNil(o.Configs) {
		return nil, false
	}
	return o.Configs, true
}

// HasConfigs returns a boolean if a field has been set.
func (o *UdaConfigsList) HasConfigs() bool {
	if o != nil && !IsNil(o.Configs) {
		return true
	}

	return false
}

// SetConfigs gets a reference to the given []string and assigns it to the Configs field.
func (o *UdaConfigsList) SetConfigs(v []string) {
	o.Configs = v
}

func (o UdaConfigsList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaConfigsList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Configs) {
		toSerialize["configs"] = o.Configs
	}
	return toSerialize, nil
}

type NullableUdaConfigsList struct {
	value *UdaConfigsList
	isSet bool
}

func (v NullableUdaConfigsList) Get() *UdaConfigsList {
	return v.value
}

func (v *NullableUdaConfigsList) Set(val *UdaConfigsList) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaConfigsList) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaConfigsList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaConfigsList(val *UdaConfigsList) *NullableUdaConfigsList {
	return &NullableUdaConfigsList{value: val, isSet: true}
}

func (v NullableUdaConfigsList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaConfigsList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


