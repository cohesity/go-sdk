/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RemoveNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveNode{}

// RemoveNode Specifies details of node removal response.
type RemoveNode struct {
	// Specifies id of the node.
	Id NullableInt64 `json:"id,omitempty"`
	// If true, Node is marked for removal.
	MarkedForRemoval NullableBool `json:"markedForRemoval,omitempty"`
	// Specifies the last run time of the pre-checks execution in Unix epoch timestamp (in seconds).
	TimestampSecs NullableInt64 `json:"timestampSecs,omitempty"`
	// Specifies the pre-check validations results.
	ValidationChecks []PreCheckValidation `json:"validationChecks,omitempty"`
}

// NewRemoveNode instantiates a new RemoveNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveNode() *RemoveNode {
	this := RemoveNode{}
	return &this
}

// NewRemoveNodeWithDefaults instantiates a new RemoveNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveNodeWithDefaults() *RemoveNode {
	this := RemoveNode{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoveNode) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoveNode) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *RemoveNode) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *RemoveNode) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *RemoveNode) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *RemoveNode) UnsetId() {
	o.Id.Unset()
}

// GetMarkedForRemoval returns the MarkedForRemoval field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoveNode) GetMarkedForRemoval() bool {
	if o == nil || IsNil(o.MarkedForRemoval.Get()) {
		var ret bool
		return ret
	}
	return *o.MarkedForRemoval.Get()
}

// GetMarkedForRemovalOk returns a tuple with the MarkedForRemoval field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoveNode) GetMarkedForRemovalOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MarkedForRemoval.Get(), o.MarkedForRemoval.IsSet()
}

// HasMarkedForRemoval returns a boolean if a field has been set.
func (o *RemoveNode) HasMarkedForRemoval() bool {
	if o != nil && o.MarkedForRemoval.IsSet() {
		return true
	}

	return false
}

// SetMarkedForRemoval gets a reference to the given NullableBool and assigns it to the MarkedForRemoval field.
func (o *RemoveNode) SetMarkedForRemoval(v bool) {
	o.MarkedForRemoval.Set(&v)
}
// SetMarkedForRemovalNil sets the value for MarkedForRemoval to be an explicit nil
func (o *RemoveNode) SetMarkedForRemovalNil() {
	o.MarkedForRemoval.Set(nil)
}

// UnsetMarkedForRemoval ensures that no value is present for MarkedForRemoval, not even an explicit nil
func (o *RemoveNode) UnsetMarkedForRemoval() {
	o.MarkedForRemoval.Unset()
}

// GetTimestampSecs returns the TimestampSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoveNode) GetTimestampSecs() int64 {
	if o == nil || IsNil(o.TimestampSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.TimestampSecs.Get()
}

// GetTimestampSecsOk returns a tuple with the TimestampSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoveNode) GetTimestampSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimestampSecs.Get(), o.TimestampSecs.IsSet()
}

// HasTimestampSecs returns a boolean if a field has been set.
func (o *RemoveNode) HasTimestampSecs() bool {
	if o != nil && o.TimestampSecs.IsSet() {
		return true
	}

	return false
}

// SetTimestampSecs gets a reference to the given NullableInt64 and assigns it to the TimestampSecs field.
func (o *RemoveNode) SetTimestampSecs(v int64) {
	o.TimestampSecs.Set(&v)
}
// SetTimestampSecsNil sets the value for TimestampSecs to be an explicit nil
func (o *RemoveNode) SetTimestampSecsNil() {
	o.TimestampSecs.Set(nil)
}

// UnsetTimestampSecs ensures that no value is present for TimestampSecs, not even an explicit nil
func (o *RemoveNode) UnsetTimestampSecs() {
	o.TimestampSecs.Unset()
}

// GetValidationChecks returns the ValidationChecks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoveNode) GetValidationChecks() []PreCheckValidation {
	if o == nil {
		var ret []PreCheckValidation
		return ret
	}
	return o.ValidationChecks
}

// GetValidationChecksOk returns a tuple with the ValidationChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoveNode) GetValidationChecksOk() ([]PreCheckValidation, bool) {
	if o == nil || IsNil(o.ValidationChecks) {
		return nil, false
	}
	return o.ValidationChecks, true
}

// HasValidationChecks returns a boolean if a field has been set.
func (o *RemoveNode) HasValidationChecks() bool {
	if o != nil && !IsNil(o.ValidationChecks) {
		return true
	}

	return false
}

// SetValidationChecks gets a reference to the given []PreCheckValidation and assigns it to the ValidationChecks field.
func (o *RemoveNode) SetValidationChecks(v []PreCheckValidation) {
	o.ValidationChecks = v
}

func (o RemoveNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.MarkedForRemoval.IsSet() {
		toSerialize["markedForRemoval"] = o.MarkedForRemoval.Get()
	}
	if o.TimestampSecs.IsSet() {
		toSerialize["timestampSecs"] = o.TimestampSecs.Get()
	}
	if o.ValidationChecks != nil {
		toSerialize["validationChecks"] = o.ValidationChecks
	}
	return toSerialize, nil
}

type NullableRemoveNode struct {
	value *RemoveNode
	isSet bool
}

func (v NullableRemoveNode) Get() *RemoveNode {
	return v.value
}

func (v *NullableRemoveNode) Set(val *RemoveNode) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveNode) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveNode(val *RemoveNode) *NullableRemoveNode {
	return &NullableRemoveNode{value: val, isSet: true}
}

func (v NullableRemoveNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


