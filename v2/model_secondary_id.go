/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SecondaryId type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecondaryId{}

// SecondaryId Specifies the secondary ID for an object.
type SecondaryId struct {
	// Specifies name of the secondary ID for an object.
	Name NullableString `json:"name"`
	// Specifies value of the secondary ID for an object.
	Value NullableString `json:"value,omitempty"`
}

type _SecondaryId SecondaryId

// NewSecondaryId instantiates a new SecondaryId object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecondaryId(name NullableString) *SecondaryId {
	this := SecondaryId{}
	this.Name = name
	return &this
}

// NewSecondaryIdWithDefaults instantiates a new SecondaryId object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecondaryIdWithDefaults() *SecondaryId {
	this := SecondaryId{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SecondaryId) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecondaryId) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *SecondaryId) SetName(v string) {
	o.Name.Set(&v)
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecondaryId) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecondaryId) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *SecondaryId) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *SecondaryId) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *SecondaryId) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *SecondaryId) UnsetValue() {
	o.Value.Unset()
}

func (o SecondaryId) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecondaryId) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name.Get()
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return toSerialize, nil
}

func (o *SecondaryId) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSecondaryId := _SecondaryId{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSecondaryId)

	if err != nil {
		return err
	}

	*o = SecondaryId(varSecondaryId)

	return err
}

type NullableSecondaryId struct {
	value *SecondaryId
	isSet bool
}

func (v NullableSecondaryId) Get() *SecondaryId {
	return v.value
}

func (v *NullableSecondaryId) Set(val *SecondaryId) {
	v.value = val
	v.isSet = true
}

func (v NullableSecondaryId) IsSet() bool {
	return v.isSet
}

func (v *NullableSecondaryId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecondaryId(val *SecondaryId) *NullableSecondaryId {
	return &NullableSecondaryId{value: val, isSet: true}
}

func (v NullableSecondaryId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecondaryId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


