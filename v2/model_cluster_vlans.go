/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClusterVlans type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterVlans{}

// ClusterVlans Cluster vlans.
type ClusterVlans struct {
	// List of vlans.
	Vlans []ClusterVlanParams `json:"vlans,omitempty"`
}

// NewClusterVlans instantiates a new ClusterVlans object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterVlans() *ClusterVlans {
	this := ClusterVlans{}
	return &this
}

// NewClusterVlansWithDefaults instantiates a new ClusterVlans object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterVlansWithDefaults() *ClusterVlans {
	this := ClusterVlans{}
	return &this
}

// GetVlans returns the Vlans field value if set, zero value otherwise.
func (o *ClusterVlans) GetVlans() []ClusterVlanParams {
	if o == nil || IsNil(o.Vlans) {
		var ret []ClusterVlanParams
		return ret
	}
	return o.Vlans
}

// GetVlansOk returns a tuple with the Vlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterVlans) GetVlansOk() ([]ClusterVlanParams, bool) {
	if o == nil || IsNil(o.Vlans) {
		return nil, false
	}
	return o.Vlans, true
}

// HasVlans returns a boolean if a field has been set.
func (o *ClusterVlans) HasVlans() bool {
	if o != nil && !IsNil(o.Vlans) {
		return true
	}

	return false
}

// SetVlans gets a reference to the given []ClusterVlanParams and assigns it to the Vlans field.
func (o *ClusterVlans) SetVlans(v []ClusterVlanParams) {
	o.Vlans = v
}

func (o ClusterVlans) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterVlans) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Vlans) {
		toSerialize["vlans"] = o.Vlans
	}
	return toSerialize, nil
}

type NullableClusterVlans struct {
	value *ClusterVlans
	isSet bool
}

func (v NullableClusterVlans) Get() *ClusterVlans {
	return v.value
}

func (v *NullableClusterVlans) Set(val *ClusterVlans) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterVlans) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterVlans) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterVlans(val *ClusterVlans) *NullableClusterVlans {
	return &NullableClusterVlans{value: val, isSet: true}
}

func (v NullableClusterVlans) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterVlans) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


