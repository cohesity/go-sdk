/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ObjectUniqueIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectUniqueIdentifier{}

// ObjectUniqueIdentifier Unique metadata for an object.
type ObjectUniqueIdentifier struct {
	// Environment of the object
	Environment NullableString `json:"environment,omitempty"`
	// Unique identifier of the object. This is assigned by the third party adapter and saved with the object data.
	ObjectIdentifier NullableString `json:"objectIdentifier,omitempty"`
	// Unique identifier of the parent for the object. This is assigned by the third party adapter and saved with the object data.
	ParentIdentifier NullableString `json:"parentIdentifier,omitempty"`
}

// NewObjectUniqueIdentifier instantiates a new ObjectUniqueIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectUniqueIdentifier() *ObjectUniqueIdentifier {
	this := ObjectUniqueIdentifier{}
	return &this
}

// NewObjectUniqueIdentifierWithDefaults instantiates a new ObjectUniqueIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectUniqueIdentifierWithDefaults() *ObjectUniqueIdentifier {
	this := ObjectUniqueIdentifier{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectUniqueIdentifier) GetEnvironment() string {
	if o == nil || IsNil(o.Environment.Get()) {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectUniqueIdentifier) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ObjectUniqueIdentifier) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *ObjectUniqueIdentifier) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *ObjectUniqueIdentifier) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *ObjectUniqueIdentifier) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetObjectIdentifier returns the ObjectIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectUniqueIdentifier) GetObjectIdentifier() string {
	if o == nil || IsNil(o.ObjectIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.ObjectIdentifier.Get()
}

// GetObjectIdentifierOk returns a tuple with the ObjectIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectUniqueIdentifier) GetObjectIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectIdentifier.Get(), o.ObjectIdentifier.IsSet()
}

// HasObjectIdentifier returns a boolean if a field has been set.
func (o *ObjectUniqueIdentifier) HasObjectIdentifier() bool {
	if o != nil && o.ObjectIdentifier.IsSet() {
		return true
	}

	return false
}

// SetObjectIdentifier gets a reference to the given NullableString and assigns it to the ObjectIdentifier field.
func (o *ObjectUniqueIdentifier) SetObjectIdentifier(v string) {
	o.ObjectIdentifier.Set(&v)
}
// SetObjectIdentifierNil sets the value for ObjectIdentifier to be an explicit nil
func (o *ObjectUniqueIdentifier) SetObjectIdentifierNil() {
	o.ObjectIdentifier.Set(nil)
}

// UnsetObjectIdentifier ensures that no value is present for ObjectIdentifier, not even an explicit nil
func (o *ObjectUniqueIdentifier) UnsetObjectIdentifier() {
	o.ObjectIdentifier.Unset()
}

// GetParentIdentifier returns the ParentIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectUniqueIdentifier) GetParentIdentifier() string {
	if o == nil || IsNil(o.ParentIdentifier.Get()) {
		var ret string
		return ret
	}
	return *o.ParentIdentifier.Get()
}

// GetParentIdentifierOk returns a tuple with the ParentIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectUniqueIdentifier) GetParentIdentifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentIdentifier.Get(), o.ParentIdentifier.IsSet()
}

// HasParentIdentifier returns a boolean if a field has been set.
func (o *ObjectUniqueIdentifier) HasParentIdentifier() bool {
	if o != nil && o.ParentIdentifier.IsSet() {
		return true
	}

	return false
}

// SetParentIdentifier gets a reference to the given NullableString and assigns it to the ParentIdentifier field.
func (o *ObjectUniqueIdentifier) SetParentIdentifier(v string) {
	o.ParentIdentifier.Set(&v)
}
// SetParentIdentifierNil sets the value for ParentIdentifier to be an explicit nil
func (o *ObjectUniqueIdentifier) SetParentIdentifierNil() {
	o.ParentIdentifier.Set(nil)
}

// UnsetParentIdentifier ensures that no value is present for ParentIdentifier, not even an explicit nil
func (o *ObjectUniqueIdentifier) UnsetParentIdentifier() {
	o.ParentIdentifier.Unset()
}

func (o ObjectUniqueIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectUniqueIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.ObjectIdentifier.IsSet() {
		toSerialize["objectIdentifier"] = o.ObjectIdentifier.Get()
	}
	if o.ParentIdentifier.IsSet() {
		toSerialize["parentIdentifier"] = o.ParentIdentifier.Get()
	}
	return toSerialize, nil
}

type NullableObjectUniqueIdentifier struct {
	value *ObjectUniqueIdentifier
	isSet bool
}

func (v NullableObjectUniqueIdentifier) Get() *ObjectUniqueIdentifier {
	return v.value
}

func (v *NullableObjectUniqueIdentifier) Set(val *ObjectUniqueIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectUniqueIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectUniqueIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectUniqueIdentifier(val *ObjectUniqueIdentifier) *NullableObjectUniqueIdentifier {
	return &NullableObjectUniqueIdentifier{value: val, isSet: true}
}

func (v NullableObjectUniqueIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectUniqueIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


