/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ArchivalRun type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchivalRun{}

// ArchivalRun Specifies information about archival run for an object.
type ArchivalRun struct {
	// Archival result for an archival target.
	ArchivalTargetResults []ArchivalTargetResult `json:"archivalTargetResults,omitempty"`
}

// NewArchivalRun instantiates a new ArchivalRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalRun() *ArchivalRun {
	this := ArchivalRun{}
	return &this
}

// NewArchivalRunWithDefaults instantiates a new ArchivalRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalRunWithDefaults() *ArchivalRun {
	this := ArchivalRun{}
	return &this
}

// GetArchivalTargetResults returns the ArchivalTargetResults field value if set, zero value otherwise.
func (o *ArchivalRun) GetArchivalTargetResults() []ArchivalTargetResult {
	if o == nil || IsNil(o.ArchivalTargetResults) {
		var ret []ArchivalTargetResult
		return ret
	}
	return o.ArchivalTargetResults
}

// GetArchivalTargetResultsOk returns a tuple with the ArchivalTargetResults field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalRun) GetArchivalTargetResultsOk() ([]ArchivalTargetResult, bool) {
	if o == nil || IsNil(o.ArchivalTargetResults) {
		return nil, false
	}
	return o.ArchivalTargetResults, true
}

// HasArchivalTargetResults returns a boolean if a field has been set.
func (o *ArchivalRun) HasArchivalTargetResults() bool {
	if o != nil && !IsNil(o.ArchivalTargetResults) {
		return true
	}

	return false
}

// SetArchivalTargetResults gets a reference to the given []ArchivalTargetResult and assigns it to the ArchivalTargetResults field.
func (o *ArchivalRun) SetArchivalTargetResults(v []ArchivalTargetResult) {
	o.ArchivalTargetResults = v
}

func (o ArchivalRun) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchivalRun) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArchivalTargetResults) {
		toSerialize["archivalTargetResults"] = o.ArchivalTargetResults
	}
	return toSerialize, nil
}

type NullableArchivalRun struct {
	value *ArchivalRun
	isSet bool
}

func (v NullableArchivalRun) Get() *ArchivalRun {
	return v.value
}

func (v *NullableArchivalRun) Set(val *ArchivalRun) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalRun) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalRun(val *ArchivalRun) *NullableArchivalRun {
	return &NullableArchivalRun{value: val, isSet: true}
}

func (v NullableArchivalRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


