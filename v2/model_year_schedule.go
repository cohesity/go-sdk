/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the YearSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &YearSchedule{}

// YearSchedule Specifies settings that define a schedule for a Protection Group to run on specific year and specific day of that year.
type YearSchedule struct {
	// Specifies the day of the Year (such as 'First' or 'Last') in a Yearly Schedule. <br>This field is used to define the day in the year to start the Protection Group Run. <br> Example: if 'dayOfYear' is set to 'First', a backup is performed on the first day of every year. <br> Example: if 'dayOfYear' is set to 'Last', a backup is performed on the last day of every year.
	DayOfYear NullableString `json:"dayOfYear"`
}

type _YearSchedule YearSchedule

// NewYearSchedule instantiates a new YearSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewYearSchedule(dayOfYear NullableString) *YearSchedule {
	this := YearSchedule{}
	this.DayOfYear = dayOfYear
	return &this
}

// NewYearScheduleWithDefaults instantiates a new YearSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewYearScheduleWithDefaults() *YearSchedule {
	this := YearSchedule{}
	return &this
}

// GetDayOfYear returns the DayOfYear field value
// If the value is explicit nil, the zero value for string will be returned
func (o *YearSchedule) GetDayOfYear() string {
	if o == nil || o.DayOfYear.Get() == nil {
		var ret string
		return ret
	}

	return *o.DayOfYear.Get()
}

// GetDayOfYearOk returns a tuple with the DayOfYear field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *YearSchedule) GetDayOfYearOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DayOfYear.Get(), o.DayOfYear.IsSet()
}

// SetDayOfYear sets field value
func (o *YearSchedule) SetDayOfYear(v string) {
	o.DayOfYear.Set(&v)
}

func (o YearSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o YearSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dayOfYear"] = o.DayOfYear.Get()
	return toSerialize, nil
}

func (o *YearSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dayOfYear",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varYearSchedule := _YearSchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varYearSchedule)

	if err != nil {
		return err
	}

	*o = YearSchedule(varYearSchedule)

	return err
}

type NullableYearSchedule struct {
	value *YearSchedule
	isSet bool
}

func (v NullableYearSchedule) Get() *YearSchedule {
	return v.value
}

func (v *NullableYearSchedule) Set(val *YearSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableYearSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableYearSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableYearSchedule(val *YearSchedule) *NullableYearSchedule {
	return &NullableYearSchedule{value: val, isSet: true}
}

func (v NullableYearSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableYearSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


