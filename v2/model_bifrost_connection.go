/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BifrostConnection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BifrostConnection{}

// BifrostConnection Specify a connection of Bifrost.
type BifrostConnection struct {
	// Specifies the version of the connection's certificate. The version is used to revoke/renew connection's certificates.
	CertificateVersion NullableInt64 `json:"certificateVersion,omitempty"`
	// Specifies the ids of the connectors in this connection
	Connectors []string `json:"connectors,omitempty"`
	// Specifies the id of the connection.
	Id NullableInt64 `json:"id"`
	// Specifies the name of the connection.
	Name NullableString `json:"name"`
	NetworkConnectionInfo *NetworkConnectionInfo `json:"networkConnectionInfo,omitempty"`
}

type _BifrostConnection BifrostConnection

// NewBifrostConnection instantiates a new BifrostConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBifrostConnection(id NullableInt64, name NullableString) *BifrostConnection {
	this := BifrostConnection{}
	this.Id = id
	this.Name = name
	return &this
}

// NewBifrostConnectionWithDefaults instantiates a new BifrostConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBifrostConnectionWithDefaults() *BifrostConnection {
	this := BifrostConnection{}
	return &this
}

// GetCertificateVersion returns the CertificateVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BifrostConnection) GetCertificateVersion() int64 {
	if o == nil || IsNil(o.CertificateVersion.Get()) {
		var ret int64
		return ret
	}
	return *o.CertificateVersion.Get()
}

// GetCertificateVersionOk returns a tuple with the CertificateVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnection) GetCertificateVersionOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateVersion.Get(), o.CertificateVersion.IsSet()
}

// HasCertificateVersion returns a boolean if a field has been set.
func (o *BifrostConnection) HasCertificateVersion() bool {
	if o != nil && o.CertificateVersion.IsSet() {
		return true
	}

	return false
}

// SetCertificateVersion gets a reference to the given NullableInt64 and assigns it to the CertificateVersion field.
func (o *BifrostConnection) SetCertificateVersion(v int64) {
	o.CertificateVersion.Set(&v)
}
// SetCertificateVersionNil sets the value for CertificateVersion to be an explicit nil
func (o *BifrostConnection) SetCertificateVersionNil() {
	o.CertificateVersion.Set(nil)
}

// UnsetCertificateVersion ensures that no value is present for CertificateVersion, not even an explicit nil
func (o *BifrostConnection) UnsetCertificateVersion() {
	o.CertificateVersion.Unset()
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *BifrostConnection) GetConnectors() []string {
	if o == nil || IsNil(o.Connectors) {
		var ret []string
		return ret
	}
	return o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BifrostConnection) GetConnectorsOk() ([]string, bool) {
	if o == nil || IsNil(o.Connectors) {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *BifrostConnection) HasConnectors() bool {
	if o != nil && !IsNil(o.Connectors) {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given []string and assigns it to the Connectors field.
func (o *BifrostConnection) SetConnectors(v []string) {
	o.Connectors = v
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *BifrostConnection) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnection) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *BifrostConnection) SetId(v int64) {
	o.Id.Set(&v)
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BifrostConnection) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnection) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *BifrostConnection) SetName(v string) {
	o.Name.Set(&v)
}

// GetNetworkConnectionInfo returns the NetworkConnectionInfo field value if set, zero value otherwise.
func (o *BifrostConnection) GetNetworkConnectionInfo() NetworkConnectionInfo {
	if o == nil || IsNil(o.NetworkConnectionInfo) {
		var ret NetworkConnectionInfo
		return ret
	}
	return *o.NetworkConnectionInfo
}

// GetNetworkConnectionInfoOk returns a tuple with the NetworkConnectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BifrostConnection) GetNetworkConnectionInfoOk() (*NetworkConnectionInfo, bool) {
	if o == nil || IsNil(o.NetworkConnectionInfo) {
		return nil, false
	}
	return o.NetworkConnectionInfo, true
}

// HasNetworkConnectionInfo returns a boolean if a field has been set.
func (o *BifrostConnection) HasNetworkConnectionInfo() bool {
	if o != nil && !IsNil(o.NetworkConnectionInfo) {
		return true
	}

	return false
}

// SetNetworkConnectionInfo gets a reference to the given NetworkConnectionInfo and assigns it to the NetworkConnectionInfo field.
func (o *BifrostConnection) SetNetworkConnectionInfo(v NetworkConnectionInfo) {
	o.NetworkConnectionInfo = &v
}

func (o BifrostConnection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BifrostConnection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CertificateVersion.IsSet() {
		toSerialize["certificateVersion"] = o.CertificateVersion.Get()
	}
	if !IsNil(o.Connectors) {
		toSerialize["connectors"] = o.Connectors
	}
	toSerialize["id"] = o.Id.Get()
	toSerialize["name"] = o.Name.Get()
	if !IsNil(o.NetworkConnectionInfo) {
		toSerialize["networkConnectionInfo"] = o.NetworkConnectionInfo
	}
	return toSerialize, nil
}

func (o *BifrostConnection) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBifrostConnection := _BifrostConnection{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBifrostConnection)

	if err != nil {
		return err
	}

	*o = BifrostConnection(varBifrostConnection)

	return err
}

type NullableBifrostConnection struct {
	value *BifrostConnection
	isSet bool
}

func (v NullableBifrostConnection) Get() *BifrostConnection {
	return v.value
}

func (v *NullableBifrostConnection) Set(val *BifrostConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableBifrostConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableBifrostConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBifrostConnection(val *BifrostConnection) *NullableBifrostConnection {
	return &NullableBifrostConnection{value: val, isSet: true}
}

func (v NullableBifrostConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBifrostConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


