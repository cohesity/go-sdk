/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CouchbaseSearchParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CouchbaseSearchParams{}

// CouchbaseSearchParams Specifies the parameters which are specific for searching Couchbase objects.
type CouchbaseSearchParams struct {
	// Specifies Couchbase object types be searched. For Couchbase it can only be set to 'CouchbaseBuckets'.
	CouchbaseObjectTypes []string `json:"couchbaseObjectTypes"`
	// Specifies the search string to search the Couchbase Objects
	SearchString NullableString `json:"searchString"`
}

type _CouchbaseSearchParams CouchbaseSearchParams

// NewCouchbaseSearchParams instantiates a new CouchbaseSearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouchbaseSearchParams(couchbaseObjectTypes []string, searchString NullableString) *CouchbaseSearchParams {
	this := CouchbaseSearchParams{}
	this.CouchbaseObjectTypes = couchbaseObjectTypes
	this.SearchString = searchString
	return &this
}

// NewCouchbaseSearchParamsWithDefaults instantiates a new CouchbaseSearchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouchbaseSearchParamsWithDefaults() *CouchbaseSearchParams {
	this := CouchbaseSearchParams{}
	return &this
}

// GetCouchbaseObjectTypes returns the CouchbaseObjectTypes field value
func (o *CouchbaseSearchParams) GetCouchbaseObjectTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CouchbaseObjectTypes
}

// GetCouchbaseObjectTypesOk returns a tuple with the CouchbaseObjectTypes field value
// and a boolean to check if the value has been set.
func (o *CouchbaseSearchParams) GetCouchbaseObjectTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CouchbaseObjectTypes, true
}

// SetCouchbaseObjectTypes sets field value
func (o *CouchbaseSearchParams) SetCouchbaseObjectTypes(v []string) {
	o.CouchbaseObjectTypes = v
}

// GetSearchString returns the SearchString field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CouchbaseSearchParams) GetSearchString() string {
	if o == nil || o.SearchString.Get() == nil {
		var ret string
		return ret
	}

	return *o.SearchString.Get()
}

// GetSearchStringOk returns a tuple with the SearchString field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseSearchParams) GetSearchStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchString.Get(), o.SearchString.IsSet()
}

// SetSearchString sets field value
func (o *CouchbaseSearchParams) SetSearchString(v string) {
	o.SearchString.Set(&v)
}

func (o CouchbaseSearchParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CouchbaseSearchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["couchbaseObjectTypes"] = o.CouchbaseObjectTypes
	toSerialize["searchString"] = o.SearchString.Get()
	return toSerialize, nil
}

func (o *CouchbaseSearchParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"couchbaseObjectTypes",
		"searchString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCouchbaseSearchParams := _CouchbaseSearchParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCouchbaseSearchParams)

	if err != nil {
		return err
	}

	*o = CouchbaseSearchParams(varCouchbaseSearchParams)

	return err
}

type NullableCouchbaseSearchParams struct {
	value *CouchbaseSearchParams
	isSet bool
}

func (v NullableCouchbaseSearchParams) Get() *CouchbaseSearchParams {
	return v.value
}

func (v *NullableCouchbaseSearchParams) Set(val *CouchbaseSearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCouchbaseSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCouchbaseSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouchbaseSearchParams(val *CouchbaseSearchParams) *NullableCouchbaseSearchParams {
	return &NullableCouchbaseSearchParams{value: val, isSet: true}
}

func (v NullableCouchbaseSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouchbaseSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


