/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DiffGraphNodeRelation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiffGraphNodeRelation{}

// DiffGraphNodeRelation Definition of graph node relation difference between two snapshots.
type DiffGraphNodeRelation struct {
	// Specifies the difference in the graph node info.
	DiffGraphNode *DiffGraphNode `json:"diffGraphNode,omitempty"`
	// Specifies the all pair of edges/node relations which are added, deleted or modified
	DiffRelations []DiffGraphNodeEdge `json:"diffRelations,omitempty"`
	// Specifies Unique ID of the source node.
	SrcNodeId *string `json:"srcNodeId,omitempty"`
	// Specifies the list of all the edges which are unmodified.
	UnmodifiedRelations []GraphEdge `json:"unmodifiedRelations,omitempty"`
}

// NewDiffGraphNodeRelation instantiates a new DiffGraphNodeRelation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiffGraphNodeRelation() *DiffGraphNodeRelation {
	this := DiffGraphNodeRelation{}
	return &this
}

// NewDiffGraphNodeRelationWithDefaults instantiates a new DiffGraphNodeRelation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiffGraphNodeRelationWithDefaults() *DiffGraphNodeRelation {
	this := DiffGraphNodeRelation{}
	return &this
}

// GetDiffGraphNode returns the DiffGraphNode field value if set, zero value otherwise.
func (o *DiffGraphNodeRelation) GetDiffGraphNode() DiffGraphNode {
	if o == nil || IsNil(o.DiffGraphNode) {
		var ret DiffGraphNode
		return ret
	}
	return *o.DiffGraphNode
}

// GetDiffGraphNodeOk returns a tuple with the DiffGraphNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffGraphNodeRelation) GetDiffGraphNodeOk() (*DiffGraphNode, bool) {
	if o == nil || IsNil(o.DiffGraphNode) {
		return nil, false
	}
	return o.DiffGraphNode, true
}

// HasDiffGraphNode returns a boolean if a field has been set.
func (o *DiffGraphNodeRelation) HasDiffGraphNode() bool {
	if o != nil && !IsNil(o.DiffGraphNode) {
		return true
	}

	return false
}

// SetDiffGraphNode gets a reference to the given DiffGraphNode and assigns it to the DiffGraphNode field.
func (o *DiffGraphNodeRelation) SetDiffGraphNode(v DiffGraphNode) {
	o.DiffGraphNode = &v
}

// GetDiffRelations returns the DiffRelations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiffGraphNodeRelation) GetDiffRelations() []DiffGraphNodeEdge {
	if o == nil {
		var ret []DiffGraphNodeEdge
		return ret
	}
	return o.DiffRelations
}

// GetDiffRelationsOk returns a tuple with the DiffRelations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiffGraphNodeRelation) GetDiffRelationsOk() ([]DiffGraphNodeEdge, bool) {
	if o == nil || IsNil(o.DiffRelations) {
		return nil, false
	}
	return o.DiffRelations, true
}

// HasDiffRelations returns a boolean if a field has been set.
func (o *DiffGraphNodeRelation) HasDiffRelations() bool {
	if o != nil && !IsNil(o.DiffRelations) {
		return true
	}

	return false
}

// SetDiffRelations gets a reference to the given []DiffGraphNodeEdge and assigns it to the DiffRelations field.
func (o *DiffGraphNodeRelation) SetDiffRelations(v []DiffGraphNodeEdge) {
	o.DiffRelations = v
}

// GetSrcNodeId returns the SrcNodeId field value if set, zero value otherwise.
func (o *DiffGraphNodeRelation) GetSrcNodeId() string {
	if o == nil || IsNil(o.SrcNodeId) {
		var ret string
		return ret
	}
	return *o.SrcNodeId
}

// GetSrcNodeIdOk returns a tuple with the SrcNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiffGraphNodeRelation) GetSrcNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SrcNodeId) {
		return nil, false
	}
	return o.SrcNodeId, true
}

// HasSrcNodeId returns a boolean if a field has been set.
func (o *DiffGraphNodeRelation) HasSrcNodeId() bool {
	if o != nil && !IsNil(o.SrcNodeId) {
		return true
	}

	return false
}

// SetSrcNodeId gets a reference to the given string and assigns it to the SrcNodeId field.
func (o *DiffGraphNodeRelation) SetSrcNodeId(v string) {
	o.SrcNodeId = &v
}

// GetUnmodifiedRelations returns the UnmodifiedRelations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiffGraphNodeRelation) GetUnmodifiedRelations() []GraphEdge {
	if o == nil {
		var ret []GraphEdge
		return ret
	}
	return o.UnmodifiedRelations
}

// GetUnmodifiedRelationsOk returns a tuple with the UnmodifiedRelations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiffGraphNodeRelation) GetUnmodifiedRelationsOk() ([]GraphEdge, bool) {
	if o == nil || IsNil(o.UnmodifiedRelations) {
		return nil, false
	}
	return o.UnmodifiedRelations, true
}

// HasUnmodifiedRelations returns a boolean if a field has been set.
func (o *DiffGraphNodeRelation) HasUnmodifiedRelations() bool {
	if o != nil && !IsNil(o.UnmodifiedRelations) {
		return true
	}

	return false
}

// SetUnmodifiedRelations gets a reference to the given []GraphEdge and assigns it to the UnmodifiedRelations field.
func (o *DiffGraphNodeRelation) SetUnmodifiedRelations(v []GraphEdge) {
	o.UnmodifiedRelations = v
}

func (o DiffGraphNodeRelation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiffGraphNodeRelation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DiffGraphNode) {
		toSerialize["diffGraphNode"] = o.DiffGraphNode
	}
	if o.DiffRelations != nil {
		toSerialize["diffRelations"] = o.DiffRelations
	}
	if !IsNil(o.SrcNodeId) {
		toSerialize["srcNodeId"] = o.SrcNodeId
	}
	if o.UnmodifiedRelations != nil {
		toSerialize["unmodifiedRelations"] = o.UnmodifiedRelations
	}
	return toSerialize, nil
}

type NullableDiffGraphNodeRelation struct {
	value *DiffGraphNodeRelation
	isSet bool
}

func (v NullableDiffGraphNodeRelation) Get() *DiffGraphNodeRelation {
	return v.value
}

func (v *NullableDiffGraphNodeRelation) Set(val *DiffGraphNodeRelation) {
	v.value = val
	v.isSet = true
}

func (v NullableDiffGraphNodeRelation) IsSet() bool {
	return v.isSet
}

func (v *NullableDiffGraphNodeRelation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiffGraphNodeRelation(val *DiffGraphNodeRelation) *NullableDiffGraphNodeRelation {
	return &NullableDiffGraphNodeRelation{value: val, isSet: true}
}

func (v NullableDiffGraphNodeRelation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiffGraphNodeRelation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


