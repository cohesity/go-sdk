/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TenantLivenessMode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantLivenessMode{}

// TenantLivenessMode Tenant Liveness Mode
type TenantLivenessMode struct {
	// Tenant Liveness Mode
	Mode *string `json:"mode,omitempty"`
}

// NewTenantLivenessMode instantiates a new TenantLivenessMode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantLivenessMode() *TenantLivenessMode {
	this := TenantLivenessMode{}
	return &this
}

// NewTenantLivenessModeWithDefaults instantiates a new TenantLivenessMode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantLivenessModeWithDefaults() *TenantLivenessMode {
	this := TenantLivenessMode{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *TenantLivenessMode) GetMode() string {
	if o == nil || IsNil(o.Mode) {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantLivenessMode) GetModeOk() (*string, bool) {
	if o == nil || IsNil(o.Mode) {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *TenantLivenessMode) HasMode() bool {
	if o != nil && !IsNil(o.Mode) {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *TenantLivenessMode) SetMode(v string) {
	o.Mode = &v
}

func (o TenantLivenessMode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantLivenessMode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Mode) {
		toSerialize["mode"] = o.Mode
	}
	return toSerialize, nil
}

type NullableTenantLivenessMode struct {
	value *TenantLivenessMode
	isSet bool
}

func (v NullableTenantLivenessMode) Get() *TenantLivenessMode {
	return v.value
}

func (v *NullableTenantLivenessMode) Set(val *TenantLivenessMode) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantLivenessMode) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantLivenessMode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantLivenessMode(val *TenantLivenessMode) *NullableTenantLivenessMode {
	return &NullableTenantLivenessMode{value: val, isSet: true}
}

func (v NullableTenantLivenessMode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantLivenessMode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


