/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GcpVmRecoveryTargetConfigNewSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GcpVmRecoveryTargetConfigNewSourceConfig{}

// GcpVmRecoveryTargetConfigNewSourceConfig Specifies the new destination Source configuration parameters where the VMs will be recovered. This is mandatory if recoverToNewSource is set to true.
type GcpVmRecoveryTargetConfigNewSourceConfig struct {
	AvailabilityZone NullableRecoverGcpVmNewSourceConfigAvailabilityZone `json:"availabilityZone"`
	NetworkConfig NullableRecoverGcpVmNewSourceConfigNetworkConfig `json:"networkConfig"`
	Project NullableRecoverGcpVmNewSourceConfigProject `json:"project"`
	Region NullableRecoverGcpVmNewSourceConfigRegion `json:"region"`
	Source NullableRecoverAcropolisVmNewSourceConfigSource `json:"source"`
}

type _GcpVmRecoveryTargetConfigNewSourceConfig GcpVmRecoveryTargetConfigNewSourceConfig

// NewGcpVmRecoveryTargetConfigNewSourceConfig instantiates a new GcpVmRecoveryTargetConfigNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGcpVmRecoveryTargetConfigNewSourceConfig(availabilityZone NullableRecoverGcpVmNewSourceConfigAvailabilityZone, networkConfig NullableRecoverGcpVmNewSourceConfigNetworkConfig, project NullableRecoverGcpVmNewSourceConfigProject, region NullableRecoverGcpVmNewSourceConfigRegion, source NullableRecoverAcropolisVmNewSourceConfigSource) *GcpVmRecoveryTargetConfigNewSourceConfig {
	this := GcpVmRecoveryTargetConfigNewSourceConfig{}
	this.AvailabilityZone = availabilityZone
	this.NetworkConfig = networkConfig
	this.Project = project
	this.Region = region
	this.Source = source
	return &this
}

// NewGcpVmRecoveryTargetConfigNewSourceConfigWithDefaults instantiates a new GcpVmRecoveryTargetConfigNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGcpVmRecoveryTargetConfigNewSourceConfigWithDefaults() *GcpVmRecoveryTargetConfigNewSourceConfig {
	this := GcpVmRecoveryTargetConfigNewSourceConfig{}
	return &this
}

// GetAvailabilityZone returns the AvailabilityZone field value
// If the value is explicit nil, the zero value for RecoverGcpVmNewSourceConfigAvailabilityZone will be returned
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) GetAvailabilityZone() RecoverGcpVmNewSourceConfigAvailabilityZone {
	if o == nil || o.AvailabilityZone.Get() == nil {
		var ret RecoverGcpVmNewSourceConfigAvailabilityZone
		return ret
	}

	return *o.AvailabilityZone.Get()
}

// GetAvailabilityZoneOk returns a tuple with the AvailabilityZone field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) GetAvailabilityZoneOk() (*RecoverGcpVmNewSourceConfigAvailabilityZone, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvailabilityZone.Get(), o.AvailabilityZone.IsSet()
}

// SetAvailabilityZone sets field value
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) SetAvailabilityZone(v RecoverGcpVmNewSourceConfigAvailabilityZone) {
	o.AvailabilityZone.Set(&v)
}

// GetNetworkConfig returns the NetworkConfig field value
// If the value is explicit nil, the zero value for RecoverGcpVmNewSourceConfigNetworkConfig will be returned
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) GetNetworkConfig() RecoverGcpVmNewSourceConfigNetworkConfig {
	if o == nil || o.NetworkConfig.Get() == nil {
		var ret RecoverGcpVmNewSourceConfigNetworkConfig
		return ret
	}

	return *o.NetworkConfig.Get()
}

// GetNetworkConfigOk returns a tuple with the NetworkConfig field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) GetNetworkConfigOk() (*RecoverGcpVmNewSourceConfigNetworkConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkConfig.Get(), o.NetworkConfig.IsSet()
}

// SetNetworkConfig sets field value
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) SetNetworkConfig(v RecoverGcpVmNewSourceConfigNetworkConfig) {
	o.NetworkConfig.Set(&v)
}

// GetProject returns the Project field value
// If the value is explicit nil, the zero value for RecoverGcpVmNewSourceConfigProject will be returned
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) GetProject() RecoverGcpVmNewSourceConfigProject {
	if o == nil || o.Project.Get() == nil {
		var ret RecoverGcpVmNewSourceConfigProject
		return ret
	}

	return *o.Project.Get()
}

// GetProjectOk returns a tuple with the Project field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) GetProjectOk() (*RecoverGcpVmNewSourceConfigProject, bool) {
	if o == nil {
		return nil, false
	}
	return o.Project.Get(), o.Project.IsSet()
}

// SetProject sets field value
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) SetProject(v RecoverGcpVmNewSourceConfigProject) {
	o.Project.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for RecoverGcpVmNewSourceConfigRegion will be returned
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) GetRegion() RecoverGcpVmNewSourceConfigRegion {
	if o == nil || o.Region.Get() == nil {
		var ret RecoverGcpVmNewSourceConfigRegion
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) GetRegionOk() (*RecoverGcpVmNewSourceConfigRegion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) SetRegion(v RecoverGcpVmNewSourceConfigRegion) {
	o.Region.Set(&v)
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoverAcropolisVmNewSourceConfigSource will be returned
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) GetSource() RecoverAcropolisVmNewSourceConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret RecoverAcropolisVmNewSourceConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) GetSourceOk() (*RecoverAcropolisVmNewSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *GcpVmRecoveryTargetConfigNewSourceConfig) SetSource(v RecoverAcropolisVmNewSourceConfigSource) {
	o.Source.Set(&v)
}

func (o GcpVmRecoveryTargetConfigNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GcpVmRecoveryTargetConfigNewSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["availabilityZone"] = o.AvailabilityZone.Get()
	toSerialize["networkConfig"] = o.NetworkConfig.Get()
	toSerialize["project"] = o.Project.Get()
	toSerialize["region"] = o.Region.Get()
	toSerialize["source"] = o.Source.Get()
	return toSerialize, nil
}

func (o *GcpVmRecoveryTargetConfigNewSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"availabilityZone",
		"networkConfig",
		"project",
		"region",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGcpVmRecoveryTargetConfigNewSourceConfig := _GcpVmRecoveryTargetConfigNewSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGcpVmRecoveryTargetConfigNewSourceConfig)

	if err != nil {
		return err
	}

	*o = GcpVmRecoveryTargetConfigNewSourceConfig(varGcpVmRecoveryTargetConfigNewSourceConfig)

	return err
}

type NullableGcpVmRecoveryTargetConfigNewSourceConfig struct {
	value *GcpVmRecoveryTargetConfigNewSourceConfig
	isSet bool
}

func (v NullableGcpVmRecoveryTargetConfigNewSourceConfig) Get() *GcpVmRecoveryTargetConfigNewSourceConfig {
	return v.value
}

func (v *NullableGcpVmRecoveryTargetConfigNewSourceConfig) Set(val *GcpVmRecoveryTargetConfigNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableGcpVmRecoveryTargetConfigNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableGcpVmRecoveryTargetConfigNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGcpVmRecoveryTargetConfigNewSourceConfig(val *GcpVmRecoveryTargetConfigNewSourceConfig) *NullableGcpVmRecoveryTargetConfigNewSourceConfig {
	return &NullableGcpVmRecoveryTargetConfigNewSourceConfig{value: val, isSet: true}
}

func (v NullableGcpVmRecoveryTargetConfigNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGcpVmRecoveryTargetConfigNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


