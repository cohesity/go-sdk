/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the McmIBMStorageProtectClaimRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &McmIBMStorageProtectClaimRequestParams{}

// McmIBMStorageProtectClaimRequestParams Specifies the request params to claim IBM storage protect cluster to Helios.
type McmIBMStorageProtectClaimRequestParams struct {
	// Specifies the claim token used for authentication into Helios.
	ClaimToken string `json:"claimToken"`
	// Specifies the cluster ID for IBM storage protect.
	ClusterId int64 `json:"clusterId"`
	// Specifies the cluster incarnation ID for IBM storage protect.
	ClusterIncarnationId int64 `json:"clusterIncarnationId"`
	// Specifies the cluster name for IBM storage protect.
	ClusterName string `json:"clusterName"`
}

type _McmIBMStorageProtectClaimRequestParams McmIBMStorageProtectClaimRequestParams

// NewMcmIBMStorageProtectClaimRequestParams instantiates a new McmIBMStorageProtectClaimRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmIBMStorageProtectClaimRequestParams(claimToken string, clusterId int64, clusterIncarnationId int64, clusterName string) *McmIBMStorageProtectClaimRequestParams {
	this := McmIBMStorageProtectClaimRequestParams{}
	this.ClaimToken = claimToken
	this.ClusterId = clusterId
	this.ClusterIncarnationId = clusterIncarnationId
	this.ClusterName = clusterName
	return &this
}

// NewMcmIBMStorageProtectClaimRequestParamsWithDefaults instantiates a new McmIBMStorageProtectClaimRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmIBMStorageProtectClaimRequestParamsWithDefaults() *McmIBMStorageProtectClaimRequestParams {
	this := McmIBMStorageProtectClaimRequestParams{}
	return &this
}

// GetClaimToken returns the ClaimToken field value
func (o *McmIBMStorageProtectClaimRequestParams) GetClaimToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClaimToken
}

// GetClaimTokenOk returns a tuple with the ClaimToken field value
// and a boolean to check if the value has been set.
func (o *McmIBMStorageProtectClaimRequestParams) GetClaimTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClaimToken, true
}

// SetClaimToken sets field value
func (o *McmIBMStorageProtectClaimRequestParams) SetClaimToken(v string) {
	o.ClaimToken = v
}

// GetClusterId returns the ClusterId field value
func (o *McmIBMStorageProtectClaimRequestParams) GetClusterId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
func (o *McmIBMStorageProtectClaimRequestParams) GetClusterIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterId, true
}

// SetClusterId sets field value
func (o *McmIBMStorageProtectClaimRequestParams) SetClusterId(v int64) {
	o.ClusterId = v
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value
func (o *McmIBMStorageProtectClaimRequestParams) GetClusterIncarnationId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ClusterIncarnationId
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value
// and a boolean to check if the value has been set.
func (o *McmIBMStorageProtectClaimRequestParams) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterIncarnationId, true
}

// SetClusterIncarnationId sets field value
func (o *McmIBMStorageProtectClaimRequestParams) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId = v
}

// GetClusterName returns the ClusterName field value
func (o *McmIBMStorageProtectClaimRequestParams) GetClusterName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterName
}

// GetClusterNameOk returns a tuple with the ClusterName field value
// and a boolean to check if the value has been set.
func (o *McmIBMStorageProtectClaimRequestParams) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterName, true
}

// SetClusterName sets field value
func (o *McmIBMStorageProtectClaimRequestParams) SetClusterName(v string) {
	o.ClusterName = v
}

func (o McmIBMStorageProtectClaimRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o McmIBMStorageProtectClaimRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["claimToken"] = o.ClaimToken
	toSerialize["clusterId"] = o.ClusterId
	toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId
	toSerialize["clusterName"] = o.ClusterName
	return toSerialize, nil
}

func (o *McmIBMStorageProtectClaimRequestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"claimToken",
		"clusterId",
		"clusterIncarnationId",
		"clusterName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMcmIBMStorageProtectClaimRequestParams := _McmIBMStorageProtectClaimRequestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMcmIBMStorageProtectClaimRequestParams)

	if err != nil {
		return err
	}

	*o = McmIBMStorageProtectClaimRequestParams(varMcmIBMStorageProtectClaimRequestParams)

	return err
}

type NullableMcmIBMStorageProtectClaimRequestParams struct {
	value *McmIBMStorageProtectClaimRequestParams
	isSet bool
}

func (v NullableMcmIBMStorageProtectClaimRequestParams) Get() *McmIBMStorageProtectClaimRequestParams {
	return v.value
}

func (v *NullableMcmIBMStorageProtectClaimRequestParams) Set(val *McmIBMStorageProtectClaimRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmIBMStorageProtectClaimRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmIBMStorageProtectClaimRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmIBMStorageProtectClaimRequestParams(val *McmIBMStorageProtectClaimRequestParams) *NullableMcmIBMStorageProtectClaimRequestParams {
	return &NullableMcmIBMStorageProtectClaimRequestParams{value: val, isSet: true}
}

func (v NullableMcmIBMStorageProtectClaimRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmIBMStorageProtectClaimRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


