/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StorageDomainPair type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageDomainPair{}

// StorageDomainPair Specifies a Storage Domain pair.
type StorageDomainPair struct {
	// Specifies the local Storage Domain id.
	LocalStorageDomainId NullableInt64 `json:"localStorageDomainId"`
	// Specifies the local Storage Domain name.
	LocalStorageDomainName NullableString `json:"localStorageDomainName,omitempty"`
	// Specifies the remote Storage Domain id.
	RemoteStorageDomainId NullableInt64 `json:"remoteStorageDomainId"`
	// Specifies the remote Storage Domain name.
	RemoteStorageDomainName NullableString `json:"remoteStorageDomainName,omitempty"`
}

type _StorageDomainPair StorageDomainPair

// NewStorageDomainPair instantiates a new StorageDomainPair object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageDomainPair(localStorageDomainId NullableInt64, remoteStorageDomainId NullableInt64) *StorageDomainPair {
	this := StorageDomainPair{}
	this.LocalStorageDomainId = localStorageDomainId
	this.RemoteStorageDomainId = remoteStorageDomainId
	return &this
}

// NewStorageDomainPairWithDefaults instantiates a new StorageDomainPair object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageDomainPairWithDefaults() *StorageDomainPair {
	this := StorageDomainPair{}
	return &this
}

// GetLocalStorageDomainId returns the LocalStorageDomainId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *StorageDomainPair) GetLocalStorageDomainId() int64 {
	if o == nil || o.LocalStorageDomainId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.LocalStorageDomainId.Get()
}

// GetLocalStorageDomainIdOk returns a tuple with the LocalStorageDomainId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainPair) GetLocalStorageDomainIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalStorageDomainId.Get(), o.LocalStorageDomainId.IsSet()
}

// SetLocalStorageDomainId sets field value
func (o *StorageDomainPair) SetLocalStorageDomainId(v int64) {
	o.LocalStorageDomainId.Set(&v)
}

// GetLocalStorageDomainName returns the LocalStorageDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageDomainPair) GetLocalStorageDomainName() string {
	if o == nil || IsNil(o.LocalStorageDomainName.Get()) {
		var ret string
		return ret
	}
	return *o.LocalStorageDomainName.Get()
}

// GetLocalStorageDomainNameOk returns a tuple with the LocalStorageDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainPair) GetLocalStorageDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalStorageDomainName.Get(), o.LocalStorageDomainName.IsSet()
}

// HasLocalStorageDomainName returns a boolean if a field has been set.
func (o *StorageDomainPair) HasLocalStorageDomainName() bool {
	if o != nil && o.LocalStorageDomainName.IsSet() {
		return true
	}

	return false
}

// SetLocalStorageDomainName gets a reference to the given NullableString and assigns it to the LocalStorageDomainName field.
func (o *StorageDomainPair) SetLocalStorageDomainName(v string) {
	o.LocalStorageDomainName.Set(&v)
}
// SetLocalStorageDomainNameNil sets the value for LocalStorageDomainName to be an explicit nil
func (o *StorageDomainPair) SetLocalStorageDomainNameNil() {
	o.LocalStorageDomainName.Set(nil)
}

// UnsetLocalStorageDomainName ensures that no value is present for LocalStorageDomainName, not even an explicit nil
func (o *StorageDomainPair) UnsetLocalStorageDomainName() {
	o.LocalStorageDomainName.Unset()
}

// GetRemoteStorageDomainId returns the RemoteStorageDomainId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *StorageDomainPair) GetRemoteStorageDomainId() int64 {
	if o == nil || o.RemoteStorageDomainId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.RemoteStorageDomainId.Get()
}

// GetRemoteStorageDomainIdOk returns a tuple with the RemoteStorageDomainId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainPair) GetRemoteStorageDomainIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoteStorageDomainId.Get(), o.RemoteStorageDomainId.IsSet()
}

// SetRemoteStorageDomainId sets field value
func (o *StorageDomainPair) SetRemoteStorageDomainId(v int64) {
	o.RemoteStorageDomainId.Set(&v)
}

// GetRemoteStorageDomainName returns the RemoteStorageDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageDomainPair) GetRemoteStorageDomainName() string {
	if o == nil || IsNil(o.RemoteStorageDomainName.Get()) {
		var ret string
		return ret
	}
	return *o.RemoteStorageDomainName.Get()
}

// GetRemoteStorageDomainNameOk returns a tuple with the RemoteStorageDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomainPair) GetRemoteStorageDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemoteStorageDomainName.Get(), o.RemoteStorageDomainName.IsSet()
}

// HasRemoteStorageDomainName returns a boolean if a field has been set.
func (o *StorageDomainPair) HasRemoteStorageDomainName() bool {
	if o != nil && o.RemoteStorageDomainName.IsSet() {
		return true
	}

	return false
}

// SetRemoteStorageDomainName gets a reference to the given NullableString and assigns it to the RemoteStorageDomainName field.
func (o *StorageDomainPair) SetRemoteStorageDomainName(v string) {
	o.RemoteStorageDomainName.Set(&v)
}
// SetRemoteStorageDomainNameNil sets the value for RemoteStorageDomainName to be an explicit nil
func (o *StorageDomainPair) SetRemoteStorageDomainNameNil() {
	o.RemoteStorageDomainName.Set(nil)
}

// UnsetRemoteStorageDomainName ensures that no value is present for RemoteStorageDomainName, not even an explicit nil
func (o *StorageDomainPair) UnsetRemoteStorageDomainName() {
	o.RemoteStorageDomainName.Unset()
}

func (o StorageDomainPair) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageDomainPair) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["localStorageDomainId"] = o.LocalStorageDomainId.Get()
	if o.LocalStorageDomainName.IsSet() {
		toSerialize["localStorageDomainName"] = o.LocalStorageDomainName.Get()
	}
	toSerialize["remoteStorageDomainId"] = o.RemoteStorageDomainId.Get()
	if o.RemoteStorageDomainName.IsSet() {
		toSerialize["remoteStorageDomainName"] = o.RemoteStorageDomainName.Get()
	}
	return toSerialize, nil
}

func (o *StorageDomainPair) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"localStorageDomainId",
		"remoteStorageDomainId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStorageDomainPair := _StorageDomainPair{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStorageDomainPair)

	if err != nil {
		return err
	}

	*o = StorageDomainPair(varStorageDomainPair)

	return err
}

type NullableStorageDomainPair struct {
	value *StorageDomainPair
	isSet bool
}

func (v NullableStorageDomainPair) Get() *StorageDomainPair {
	return v.value
}

func (v *NullableStorageDomainPair) Set(val *StorageDomainPair) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageDomainPair) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageDomainPair) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageDomainPair(val *StorageDomainPair) *NullableStorageDomainPair {
	return &NullableStorageDomainPair{value: val, isSet: true}
}

func (v NullableStorageDomainPair) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageDomainPair) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


