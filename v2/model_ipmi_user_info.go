/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the IpmiUserInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpmiUserInfo{}

// IpmiUserInfo Specifies the ipmi user info for each node.
type IpmiUserInfo struct {
	// Specifies whether the user is allowed to initiate IPMI communication.
	CallIn NullableBool `json:"callIn,omitempty"`
	// Specifies the id for the ipmi user.
	Id NullableInt32 `json:"id,omitempty"`
	// Specifies whether IPMI messaging is enabled for this user.
	IpmiMsg NullableBool `json:"ipmiMsg,omitempty"`
	// Specifies whether link-level authentication is required for this user.
	LinkAuth NullableBool `json:"linkAuth,omitempty"`
	// Specifies the name of the ipmi user.
	Name NullableString `json:"name,omitempty"`
	// Specifies the privilege level assigned for this user.
	PrivilegeLevel NullableInt32 `json:"privilegeLevel,omitempty"`
}

// NewIpmiUserInfo instantiates a new IpmiUserInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpmiUserInfo() *IpmiUserInfo {
	this := IpmiUserInfo{}
	return &this
}

// NewIpmiUserInfoWithDefaults instantiates a new IpmiUserInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpmiUserInfoWithDefaults() *IpmiUserInfo {
	this := IpmiUserInfo{}
	return &this
}

// GetCallIn returns the CallIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiUserInfo) GetCallIn() bool {
	if o == nil || IsNil(o.CallIn.Get()) {
		var ret bool
		return ret
	}
	return *o.CallIn.Get()
}

// GetCallInOk returns a tuple with the CallIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiUserInfo) GetCallInOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallIn.Get(), o.CallIn.IsSet()
}

// HasCallIn returns a boolean if a field has been set.
func (o *IpmiUserInfo) HasCallIn() bool {
	if o != nil && o.CallIn.IsSet() {
		return true
	}

	return false
}

// SetCallIn gets a reference to the given NullableBool and assigns it to the CallIn field.
func (o *IpmiUserInfo) SetCallIn(v bool) {
	o.CallIn.Set(&v)
}
// SetCallInNil sets the value for CallIn to be an explicit nil
func (o *IpmiUserInfo) SetCallInNil() {
	o.CallIn.Set(nil)
}

// UnsetCallIn ensures that no value is present for CallIn, not even an explicit nil
func (o *IpmiUserInfo) UnsetCallIn() {
	o.CallIn.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiUserInfo) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiUserInfo) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *IpmiUserInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *IpmiUserInfo) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *IpmiUserInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *IpmiUserInfo) UnsetId() {
	o.Id.Unset()
}

// GetIpmiMsg returns the IpmiMsg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiUserInfo) GetIpmiMsg() bool {
	if o == nil || IsNil(o.IpmiMsg.Get()) {
		var ret bool
		return ret
	}
	return *o.IpmiMsg.Get()
}

// GetIpmiMsgOk returns a tuple with the IpmiMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiUserInfo) GetIpmiMsgOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpmiMsg.Get(), o.IpmiMsg.IsSet()
}

// HasIpmiMsg returns a boolean if a field has been set.
func (o *IpmiUserInfo) HasIpmiMsg() bool {
	if o != nil && o.IpmiMsg.IsSet() {
		return true
	}

	return false
}

// SetIpmiMsg gets a reference to the given NullableBool and assigns it to the IpmiMsg field.
func (o *IpmiUserInfo) SetIpmiMsg(v bool) {
	o.IpmiMsg.Set(&v)
}
// SetIpmiMsgNil sets the value for IpmiMsg to be an explicit nil
func (o *IpmiUserInfo) SetIpmiMsgNil() {
	o.IpmiMsg.Set(nil)
}

// UnsetIpmiMsg ensures that no value is present for IpmiMsg, not even an explicit nil
func (o *IpmiUserInfo) UnsetIpmiMsg() {
	o.IpmiMsg.Unset()
}

// GetLinkAuth returns the LinkAuth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiUserInfo) GetLinkAuth() bool {
	if o == nil || IsNil(o.LinkAuth.Get()) {
		var ret bool
		return ret
	}
	return *o.LinkAuth.Get()
}

// GetLinkAuthOk returns a tuple with the LinkAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiUserInfo) GetLinkAuthOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkAuth.Get(), o.LinkAuth.IsSet()
}

// HasLinkAuth returns a boolean if a field has been set.
func (o *IpmiUserInfo) HasLinkAuth() bool {
	if o != nil && o.LinkAuth.IsSet() {
		return true
	}

	return false
}

// SetLinkAuth gets a reference to the given NullableBool and assigns it to the LinkAuth field.
func (o *IpmiUserInfo) SetLinkAuth(v bool) {
	o.LinkAuth.Set(&v)
}
// SetLinkAuthNil sets the value for LinkAuth to be an explicit nil
func (o *IpmiUserInfo) SetLinkAuthNil() {
	o.LinkAuth.Set(nil)
}

// UnsetLinkAuth ensures that no value is present for LinkAuth, not even an explicit nil
func (o *IpmiUserInfo) UnsetLinkAuth() {
	o.LinkAuth.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiUserInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiUserInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *IpmiUserInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *IpmiUserInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *IpmiUserInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *IpmiUserInfo) UnsetName() {
	o.Name.Unset()
}

// GetPrivilegeLevel returns the PrivilegeLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiUserInfo) GetPrivilegeLevel() int32 {
	if o == nil || IsNil(o.PrivilegeLevel.Get()) {
		var ret int32
		return ret
	}
	return *o.PrivilegeLevel.Get()
}

// GetPrivilegeLevelOk returns a tuple with the PrivilegeLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiUserInfo) GetPrivilegeLevelOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivilegeLevel.Get(), o.PrivilegeLevel.IsSet()
}

// HasPrivilegeLevel returns a boolean if a field has been set.
func (o *IpmiUserInfo) HasPrivilegeLevel() bool {
	if o != nil && o.PrivilegeLevel.IsSet() {
		return true
	}

	return false
}

// SetPrivilegeLevel gets a reference to the given NullableInt32 and assigns it to the PrivilegeLevel field.
func (o *IpmiUserInfo) SetPrivilegeLevel(v int32) {
	o.PrivilegeLevel.Set(&v)
}
// SetPrivilegeLevelNil sets the value for PrivilegeLevel to be an explicit nil
func (o *IpmiUserInfo) SetPrivilegeLevelNil() {
	o.PrivilegeLevel.Set(nil)
}

// UnsetPrivilegeLevel ensures that no value is present for PrivilegeLevel, not even an explicit nil
func (o *IpmiUserInfo) UnsetPrivilegeLevel() {
	o.PrivilegeLevel.Unset()
}

func (o IpmiUserInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpmiUserInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CallIn.IsSet() {
		toSerialize["callIn"] = o.CallIn.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IpmiMsg.IsSet() {
		toSerialize["ipmiMsg"] = o.IpmiMsg.Get()
	}
	if o.LinkAuth.IsSet() {
		toSerialize["linkAuth"] = o.LinkAuth.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.PrivilegeLevel.IsSet() {
		toSerialize["privilegeLevel"] = o.PrivilegeLevel.Get()
	}
	return toSerialize, nil
}

type NullableIpmiUserInfo struct {
	value *IpmiUserInfo
	isSet bool
}

func (v NullableIpmiUserInfo) Get() *IpmiUserInfo {
	return v.value
}

func (v *NullableIpmiUserInfo) Set(val *IpmiUserInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableIpmiUserInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableIpmiUserInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpmiUserInfo(val *IpmiUserInfo) *NullableIpmiUserInfo {
	return &NullableIpmiUserInfo{value: val, isSet: true}
}

func (v NullableIpmiUserInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpmiUserInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


