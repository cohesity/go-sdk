/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ArchivalNasExternalTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchivalNasExternalTargetParams{}

// ArchivalNasExternalTargetParams Specifies the parameters which are specific to Nas related External Targets of archival purpose type.
type ArchivalNasExternalTargetParams struct {
	// Specifies the host of the NAS external target.
	Host NullableString `json:"host"`
	// Specifies if Forever Incremental Archival setting is enabled or not.
	IsForeverIncrementalArchivalEnabled NullableBool `json:"isForeverIncrementalArchivalEnabled,omitempty"`
	// Specifies if Incremental Archival setting is enabled or not.
	IsIncrementalArchivalEnabled NullableBool `json:"isIncrementalArchivalEnabled,omitempty"`
	// Specifies the Kerberos realm name for a Kerberos-secured target.
	KerberosRealmName NullableString `json:"kerberosRealmName,omitempty"`
	// Specifies the mount path of the NAS external target.
	MountPath NullableString `json:"mountPath"`
	// Specifies the NFS security type of the target.
	NfsSecurityType NullableString `json:"nfsSecurityType,omitempty"`
	// Specifies the NFS version number of the target.
	NfsVersionNumber NullableString `json:"nfsVersionNumber,omitempty"`
	// Specifies the share type of the NAS external target.
	ShareType NullableString `json:"shareType,omitempty"`
	// Specifies the Source Side Deduplication setting for the Nas external target
	SourceSideDeduplication NullableBool `json:"sourceSideDeduplication,omitempty"`
}

type _ArchivalNasExternalTargetParams ArchivalNasExternalTargetParams

// NewArchivalNasExternalTargetParams instantiates a new ArchivalNasExternalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalNasExternalTargetParams(host NullableString, mountPath NullableString) *ArchivalNasExternalTargetParams {
	this := ArchivalNasExternalTargetParams{}
	this.Host = host
	this.MountPath = mountPath
	return &this
}

// NewArchivalNasExternalTargetParamsWithDefaults instantiates a new ArchivalNasExternalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalNasExternalTargetParamsWithDefaults() *ArchivalNasExternalTargetParams {
	this := ArchivalNasExternalTargetParams{}
	return &this
}

// GetHost returns the Host field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalNasExternalTargetParams) GetHost() string {
	if o == nil || o.Host.Get() == nil {
		var ret string
		return ret
	}

	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalNasExternalTargetParams) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// SetHost sets field value
func (o *ArchivalNasExternalTargetParams) SetHost(v string) {
	o.Host.Set(&v)
}

// GetIsForeverIncrementalArchivalEnabled returns the IsForeverIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalNasExternalTargetParams) GetIsForeverIncrementalArchivalEnabled() bool {
	if o == nil || IsNil(o.IsForeverIncrementalArchivalEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsForeverIncrementalArchivalEnabled.Get()
}

// GetIsForeverIncrementalArchivalEnabledOk returns a tuple with the IsForeverIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalNasExternalTargetParams) GetIsForeverIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsForeverIncrementalArchivalEnabled.Get(), o.IsForeverIncrementalArchivalEnabled.IsSet()
}

// HasIsForeverIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalNasExternalTargetParams) HasIsForeverIncrementalArchivalEnabled() bool {
	if o != nil && o.IsForeverIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsForeverIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsForeverIncrementalArchivalEnabled field.
func (o *ArchivalNasExternalTargetParams) SetIsForeverIncrementalArchivalEnabled(v bool) {
	o.IsForeverIncrementalArchivalEnabled.Set(&v)
}
// SetIsForeverIncrementalArchivalEnabledNil sets the value for IsForeverIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalNasExternalTargetParams) SetIsForeverIncrementalArchivalEnabledNil() {
	o.IsForeverIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsForeverIncrementalArchivalEnabled ensures that no value is present for IsForeverIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalNasExternalTargetParams) UnsetIsForeverIncrementalArchivalEnabled() {
	o.IsForeverIncrementalArchivalEnabled.Unset()
}

// GetIsIncrementalArchivalEnabled returns the IsIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalNasExternalTargetParams) GetIsIncrementalArchivalEnabled() bool {
	if o == nil || IsNil(o.IsIncrementalArchivalEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsIncrementalArchivalEnabled.Get()
}

// GetIsIncrementalArchivalEnabledOk returns a tuple with the IsIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalNasExternalTargetParams) GetIsIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsIncrementalArchivalEnabled.Get(), o.IsIncrementalArchivalEnabled.IsSet()
}

// HasIsIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalNasExternalTargetParams) HasIsIncrementalArchivalEnabled() bool {
	if o != nil && o.IsIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsIncrementalArchivalEnabled field.
func (o *ArchivalNasExternalTargetParams) SetIsIncrementalArchivalEnabled(v bool) {
	o.IsIncrementalArchivalEnabled.Set(&v)
}
// SetIsIncrementalArchivalEnabledNil sets the value for IsIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalNasExternalTargetParams) SetIsIncrementalArchivalEnabledNil() {
	o.IsIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsIncrementalArchivalEnabled ensures that no value is present for IsIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalNasExternalTargetParams) UnsetIsIncrementalArchivalEnabled() {
	o.IsIncrementalArchivalEnabled.Unset()
}

// GetKerberosRealmName returns the KerberosRealmName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalNasExternalTargetParams) GetKerberosRealmName() string {
	if o == nil || IsNil(o.KerberosRealmName.Get()) {
		var ret string
		return ret
	}
	return *o.KerberosRealmName.Get()
}

// GetKerberosRealmNameOk returns a tuple with the KerberosRealmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalNasExternalTargetParams) GetKerberosRealmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KerberosRealmName.Get(), o.KerberosRealmName.IsSet()
}

// HasKerberosRealmName returns a boolean if a field has been set.
func (o *ArchivalNasExternalTargetParams) HasKerberosRealmName() bool {
	if o != nil && o.KerberosRealmName.IsSet() {
		return true
	}

	return false
}

// SetKerberosRealmName gets a reference to the given NullableString and assigns it to the KerberosRealmName field.
func (o *ArchivalNasExternalTargetParams) SetKerberosRealmName(v string) {
	o.KerberosRealmName.Set(&v)
}
// SetKerberosRealmNameNil sets the value for KerberosRealmName to be an explicit nil
func (o *ArchivalNasExternalTargetParams) SetKerberosRealmNameNil() {
	o.KerberosRealmName.Set(nil)
}

// UnsetKerberosRealmName ensures that no value is present for KerberosRealmName, not even an explicit nil
func (o *ArchivalNasExternalTargetParams) UnsetKerberosRealmName() {
	o.KerberosRealmName.Unset()
}

// GetMountPath returns the MountPath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalNasExternalTargetParams) GetMountPath() string {
	if o == nil || o.MountPath.Get() == nil {
		var ret string
		return ret
	}

	return *o.MountPath.Get()
}

// GetMountPathOk returns a tuple with the MountPath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalNasExternalTargetParams) GetMountPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountPath.Get(), o.MountPath.IsSet()
}

// SetMountPath sets field value
func (o *ArchivalNasExternalTargetParams) SetMountPath(v string) {
	o.MountPath.Set(&v)
}

// GetNfsSecurityType returns the NfsSecurityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalNasExternalTargetParams) GetNfsSecurityType() string {
	if o == nil || IsNil(o.NfsSecurityType.Get()) {
		var ret string
		return ret
	}
	return *o.NfsSecurityType.Get()
}

// GetNfsSecurityTypeOk returns a tuple with the NfsSecurityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalNasExternalTargetParams) GetNfsSecurityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NfsSecurityType.Get(), o.NfsSecurityType.IsSet()
}

// HasNfsSecurityType returns a boolean if a field has been set.
func (o *ArchivalNasExternalTargetParams) HasNfsSecurityType() bool {
	if o != nil && o.NfsSecurityType.IsSet() {
		return true
	}

	return false
}

// SetNfsSecurityType gets a reference to the given NullableString and assigns it to the NfsSecurityType field.
func (o *ArchivalNasExternalTargetParams) SetNfsSecurityType(v string) {
	o.NfsSecurityType.Set(&v)
}
// SetNfsSecurityTypeNil sets the value for NfsSecurityType to be an explicit nil
func (o *ArchivalNasExternalTargetParams) SetNfsSecurityTypeNil() {
	o.NfsSecurityType.Set(nil)
}

// UnsetNfsSecurityType ensures that no value is present for NfsSecurityType, not even an explicit nil
func (o *ArchivalNasExternalTargetParams) UnsetNfsSecurityType() {
	o.NfsSecurityType.Unset()
}

// GetNfsVersionNumber returns the NfsVersionNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalNasExternalTargetParams) GetNfsVersionNumber() string {
	if o == nil || IsNil(o.NfsVersionNumber.Get()) {
		var ret string
		return ret
	}
	return *o.NfsVersionNumber.Get()
}

// GetNfsVersionNumberOk returns a tuple with the NfsVersionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalNasExternalTargetParams) GetNfsVersionNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NfsVersionNumber.Get(), o.NfsVersionNumber.IsSet()
}

// HasNfsVersionNumber returns a boolean if a field has been set.
func (o *ArchivalNasExternalTargetParams) HasNfsVersionNumber() bool {
	if o != nil && o.NfsVersionNumber.IsSet() {
		return true
	}

	return false
}

// SetNfsVersionNumber gets a reference to the given NullableString and assigns it to the NfsVersionNumber field.
func (o *ArchivalNasExternalTargetParams) SetNfsVersionNumber(v string) {
	o.NfsVersionNumber.Set(&v)
}
// SetNfsVersionNumberNil sets the value for NfsVersionNumber to be an explicit nil
func (o *ArchivalNasExternalTargetParams) SetNfsVersionNumberNil() {
	o.NfsVersionNumber.Set(nil)
}

// UnsetNfsVersionNumber ensures that no value is present for NfsVersionNumber, not even an explicit nil
func (o *ArchivalNasExternalTargetParams) UnsetNfsVersionNumber() {
	o.NfsVersionNumber.Unset()
}

// GetShareType returns the ShareType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalNasExternalTargetParams) GetShareType() string {
	if o == nil || IsNil(o.ShareType.Get()) {
		var ret string
		return ret
	}
	return *o.ShareType.Get()
}

// GetShareTypeOk returns a tuple with the ShareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalNasExternalTargetParams) GetShareTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShareType.Get(), o.ShareType.IsSet()
}

// HasShareType returns a boolean if a field has been set.
func (o *ArchivalNasExternalTargetParams) HasShareType() bool {
	if o != nil && o.ShareType.IsSet() {
		return true
	}

	return false
}

// SetShareType gets a reference to the given NullableString and assigns it to the ShareType field.
func (o *ArchivalNasExternalTargetParams) SetShareType(v string) {
	o.ShareType.Set(&v)
}
// SetShareTypeNil sets the value for ShareType to be an explicit nil
func (o *ArchivalNasExternalTargetParams) SetShareTypeNil() {
	o.ShareType.Set(nil)
}

// UnsetShareType ensures that no value is present for ShareType, not even an explicit nil
func (o *ArchivalNasExternalTargetParams) UnsetShareType() {
	o.ShareType.Unset()
}

// GetSourceSideDeduplication returns the SourceSideDeduplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalNasExternalTargetParams) GetSourceSideDeduplication() bool {
	if o == nil || IsNil(o.SourceSideDeduplication.Get()) {
		var ret bool
		return ret
	}
	return *o.SourceSideDeduplication.Get()
}

// GetSourceSideDeduplicationOk returns a tuple with the SourceSideDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalNasExternalTargetParams) GetSourceSideDeduplicationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceSideDeduplication.Get(), o.SourceSideDeduplication.IsSet()
}

// HasSourceSideDeduplication returns a boolean if a field has been set.
func (o *ArchivalNasExternalTargetParams) HasSourceSideDeduplication() bool {
	if o != nil && o.SourceSideDeduplication.IsSet() {
		return true
	}

	return false
}

// SetSourceSideDeduplication gets a reference to the given NullableBool and assigns it to the SourceSideDeduplication field.
func (o *ArchivalNasExternalTargetParams) SetSourceSideDeduplication(v bool) {
	o.SourceSideDeduplication.Set(&v)
}
// SetSourceSideDeduplicationNil sets the value for SourceSideDeduplication to be an explicit nil
func (o *ArchivalNasExternalTargetParams) SetSourceSideDeduplicationNil() {
	o.SourceSideDeduplication.Set(nil)
}

// UnsetSourceSideDeduplication ensures that no value is present for SourceSideDeduplication, not even an explicit nil
func (o *ArchivalNasExternalTargetParams) UnsetSourceSideDeduplication() {
	o.SourceSideDeduplication.Unset()
}

func (o ArchivalNasExternalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchivalNasExternalTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["host"] = o.Host.Get()
	if o.IsForeverIncrementalArchivalEnabled.IsSet() {
		toSerialize["isForeverIncrementalArchivalEnabled"] = o.IsForeverIncrementalArchivalEnabled.Get()
	}
	if o.IsIncrementalArchivalEnabled.IsSet() {
		toSerialize["isIncrementalArchivalEnabled"] = o.IsIncrementalArchivalEnabled.Get()
	}
	if o.KerberosRealmName.IsSet() {
		toSerialize["kerberosRealmName"] = o.KerberosRealmName.Get()
	}
	toSerialize["mountPath"] = o.MountPath.Get()
	if o.NfsSecurityType.IsSet() {
		toSerialize["nfsSecurityType"] = o.NfsSecurityType.Get()
	}
	if o.NfsVersionNumber.IsSet() {
		toSerialize["nfsVersionNumber"] = o.NfsVersionNumber.Get()
	}
	if o.ShareType.IsSet() {
		toSerialize["shareType"] = o.ShareType.Get()
	}
	if o.SourceSideDeduplication.IsSet() {
		toSerialize["sourceSideDeduplication"] = o.SourceSideDeduplication.Get()
	}
	return toSerialize, nil
}

func (o *ArchivalNasExternalTargetParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"host",
		"mountPath",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varArchivalNasExternalTargetParams := _ArchivalNasExternalTargetParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varArchivalNasExternalTargetParams)

	if err != nil {
		return err
	}

	*o = ArchivalNasExternalTargetParams(varArchivalNasExternalTargetParams)

	return err
}

type NullableArchivalNasExternalTargetParams struct {
	value *ArchivalNasExternalTargetParams
	isSet bool
}

func (v NullableArchivalNasExternalTargetParams) Get() *ArchivalNasExternalTargetParams {
	return v.value
}

func (v *NullableArchivalNasExternalTargetParams) Set(val *ArchivalNasExternalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalNasExternalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalNasExternalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalNasExternalTargetParams(val *ArchivalNasExternalTargetParams) *NullableArchivalNasExternalTargetParams {
	return &NullableArchivalNasExternalTargetParams{value: val, isSet: true}
}

func (v NullableArchivalNasExternalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalNasExternalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


