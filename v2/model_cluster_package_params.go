/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"time"
)

// checks if the ClusterPackageParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterPackageParams{}

// ClusterPackageParams Cluster software package parameters.
type ClusterPackageParams struct {
	// Array of versionName values, representing compatible packages that are available on system. 
	CompatiblePackages []string `json:"compatiblePackages,omitempty"`
	// List of package componenets. Aplicable for one helios package 
	Components []PackageComponent `json:"components,omitempty"`
	// Size of file in bytes
	FileSizeBytes *int64 `json:"fileSizeBytes,omitempty"`
	// List of issues fixed in a package.
	FixedIssues []ClusterPackageFixedIssue `json:"fixedIssues,omitempty"`
	// Indicates whether package need downtime during installation
	IsDowntimeRequired NullableBool `json:"isDowntimeRequired,omitempty"`
	// MD5 Checksum
	Md5Checksum *string `json:"md5Checksum,omitempty"`
	// Node IDs where package is available
	NodeIds []int64 `json:"nodeIds,omitempty"`
	// Sub-type of package - Security Patch or Product Patch
	PackageSubType *string `json:"packageSubType,omitempty"`
	// Type of the package - Upgrade or Patch
	PackageType *string `json:"packageType,omitempty"`
	// Release date of the package.
	ReleaseDate NullableTime `json:"releaseDate,omitempty"`
	// Release version of the package. Examples: For upgrade package: '6.6.0d_u6', '7.0.' For patch package - '6.8.1-p1s1' 
	ReleaseVersion *string `json:"releaseVersion,omitempty"`
	// SHA256 Checksum
	Sha256Checksum *string `json:"sha256Checksum,omitempty"`
	Status *ClusterPackageStatus `json:"status,omitempty"`
	// Name of the package version. Example: '6.6.0d_u6_release-20210714_0fad884e',   '7.0.1_release-20230623_ddbb8c79' for upgrade packages, '6.8.1-p1s1-2023Jun26-221b8a5c' for patch packages 
	VersionName NullableString `json:"versionName,omitempty"`
}

// NewClusterPackageParams instantiates a new ClusterPackageParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterPackageParams() *ClusterPackageParams {
	this := ClusterPackageParams{}
	var isDowntimeRequired bool = false
	this.IsDowntimeRequired = *NewNullableBool(&isDowntimeRequired)
	return &this
}

// NewClusterPackageParamsWithDefaults instantiates a new ClusterPackageParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterPackageParamsWithDefaults() *ClusterPackageParams {
	this := ClusterPackageParams{}
	var isDowntimeRequired bool = false
	this.IsDowntimeRequired = *NewNullableBool(&isDowntimeRequired)
	return &this
}

// GetCompatiblePackages returns the CompatiblePackages field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetCompatiblePackages() []string {
	if o == nil || IsNil(o.CompatiblePackages) {
		var ret []string
		return ret
	}
	return o.CompatiblePackages
}

// GetCompatiblePackagesOk returns a tuple with the CompatiblePackages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetCompatiblePackagesOk() ([]string, bool) {
	if o == nil || IsNil(o.CompatiblePackages) {
		return nil, false
	}
	return o.CompatiblePackages, true
}

// HasCompatiblePackages returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasCompatiblePackages() bool {
	if o != nil && !IsNil(o.CompatiblePackages) {
		return true
	}

	return false
}

// SetCompatiblePackages gets a reference to the given []string and assigns it to the CompatiblePackages field.
func (o *ClusterPackageParams) SetCompatiblePackages(v []string) {
	o.CompatiblePackages = v
}

// GetComponents returns the Components field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetComponents() []PackageComponent {
	if o == nil || IsNil(o.Components) {
		var ret []PackageComponent
		return ret
	}
	return o.Components
}

// GetComponentsOk returns a tuple with the Components field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetComponentsOk() ([]PackageComponent, bool) {
	if o == nil || IsNil(o.Components) {
		return nil, false
	}
	return o.Components, true
}

// HasComponents returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasComponents() bool {
	if o != nil && !IsNil(o.Components) {
		return true
	}

	return false
}

// SetComponents gets a reference to the given []PackageComponent and assigns it to the Components field.
func (o *ClusterPackageParams) SetComponents(v []PackageComponent) {
	o.Components = v
}

// GetFileSizeBytes returns the FileSizeBytes field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetFileSizeBytes() int64 {
	if o == nil || IsNil(o.FileSizeBytes) {
		var ret int64
		return ret
	}
	return *o.FileSizeBytes
}

// GetFileSizeBytesOk returns a tuple with the FileSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetFileSizeBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.FileSizeBytes) {
		return nil, false
	}
	return o.FileSizeBytes, true
}

// HasFileSizeBytes returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasFileSizeBytes() bool {
	if o != nil && !IsNil(o.FileSizeBytes) {
		return true
	}

	return false
}

// SetFileSizeBytes gets a reference to the given int64 and assigns it to the FileSizeBytes field.
func (o *ClusterPackageParams) SetFileSizeBytes(v int64) {
	o.FileSizeBytes = &v
}

// GetFixedIssues returns the FixedIssues field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetFixedIssues() []ClusterPackageFixedIssue {
	if o == nil || IsNil(o.FixedIssues) {
		var ret []ClusterPackageFixedIssue
		return ret
	}
	return o.FixedIssues
}

// GetFixedIssuesOk returns a tuple with the FixedIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetFixedIssuesOk() ([]ClusterPackageFixedIssue, bool) {
	if o == nil || IsNil(o.FixedIssues) {
		return nil, false
	}
	return o.FixedIssues, true
}

// HasFixedIssues returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasFixedIssues() bool {
	if o != nil && !IsNil(o.FixedIssues) {
		return true
	}

	return false
}

// SetFixedIssues gets a reference to the given []ClusterPackageFixedIssue and assigns it to the FixedIssues field.
func (o *ClusterPackageParams) SetFixedIssues(v []ClusterPackageFixedIssue) {
	o.FixedIssues = v
}

// GetIsDowntimeRequired returns the IsDowntimeRequired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterPackageParams) GetIsDowntimeRequired() bool {
	if o == nil || IsNil(o.IsDowntimeRequired.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDowntimeRequired.Get()
}

// GetIsDowntimeRequiredOk returns a tuple with the IsDowntimeRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterPackageParams) GetIsDowntimeRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDowntimeRequired.Get(), o.IsDowntimeRequired.IsSet()
}

// HasIsDowntimeRequired returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasIsDowntimeRequired() bool {
	if o != nil && o.IsDowntimeRequired.IsSet() {
		return true
	}

	return false
}

// SetIsDowntimeRequired gets a reference to the given NullableBool and assigns it to the IsDowntimeRequired field.
func (o *ClusterPackageParams) SetIsDowntimeRequired(v bool) {
	o.IsDowntimeRequired.Set(&v)
}
// SetIsDowntimeRequiredNil sets the value for IsDowntimeRequired to be an explicit nil
func (o *ClusterPackageParams) SetIsDowntimeRequiredNil() {
	o.IsDowntimeRequired.Set(nil)
}

// UnsetIsDowntimeRequired ensures that no value is present for IsDowntimeRequired, not even an explicit nil
func (o *ClusterPackageParams) UnsetIsDowntimeRequired() {
	o.IsDowntimeRequired.Unset()
}

// GetMd5Checksum returns the Md5Checksum field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetMd5Checksum() string {
	if o == nil || IsNil(o.Md5Checksum) {
		var ret string
		return ret
	}
	return *o.Md5Checksum
}

// GetMd5ChecksumOk returns a tuple with the Md5Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetMd5ChecksumOk() (*string, bool) {
	if o == nil || IsNil(o.Md5Checksum) {
		return nil, false
	}
	return o.Md5Checksum, true
}

// HasMd5Checksum returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasMd5Checksum() bool {
	if o != nil && !IsNil(o.Md5Checksum) {
		return true
	}

	return false
}

// SetMd5Checksum gets a reference to the given string and assigns it to the Md5Checksum field.
func (o *ClusterPackageParams) SetMd5Checksum(v string) {
	o.Md5Checksum = &v
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetNodeIds() []int64 {
	if o == nil || IsNil(o.NodeIds) {
		var ret []int64
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetNodeIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.NodeIds) {
		return nil, false
	}
	return o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasNodeIds() bool {
	if o != nil && !IsNil(o.NodeIds) {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []int64 and assigns it to the NodeIds field.
func (o *ClusterPackageParams) SetNodeIds(v []int64) {
	o.NodeIds = v
}

// GetPackageSubType returns the PackageSubType field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetPackageSubType() string {
	if o == nil || IsNil(o.PackageSubType) {
		var ret string
		return ret
	}
	return *o.PackageSubType
}

// GetPackageSubTypeOk returns a tuple with the PackageSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetPackageSubTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageSubType) {
		return nil, false
	}
	return o.PackageSubType, true
}

// HasPackageSubType returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasPackageSubType() bool {
	if o != nil && !IsNil(o.PackageSubType) {
		return true
	}

	return false
}

// SetPackageSubType gets a reference to the given string and assigns it to the PackageSubType field.
func (o *ClusterPackageParams) SetPackageSubType(v string) {
	o.PackageSubType = &v
}

// GetPackageType returns the PackageType field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetPackageType() string {
	if o == nil || IsNil(o.PackageType) {
		var ret string
		return ret
	}
	return *o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetPackageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageType) {
		return nil, false
	}
	return o.PackageType, true
}

// HasPackageType returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasPackageType() bool {
	if o != nil && !IsNil(o.PackageType) {
		return true
	}

	return false
}

// SetPackageType gets a reference to the given string and assigns it to the PackageType field.
func (o *ClusterPackageParams) SetPackageType(v string) {
	o.PackageType = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterPackageParams) GetReleaseDate() time.Time {
	if o == nil || IsNil(o.ReleaseDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ReleaseDate.Get()
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterPackageParams) GetReleaseDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseDate.Get(), o.ReleaseDate.IsSet()
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasReleaseDate() bool {
	if o != nil && o.ReleaseDate.IsSet() {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given NullableTime and assigns it to the ReleaseDate field.
func (o *ClusterPackageParams) SetReleaseDate(v time.Time) {
	o.ReleaseDate.Set(&v)
}
// SetReleaseDateNil sets the value for ReleaseDate to be an explicit nil
func (o *ClusterPackageParams) SetReleaseDateNil() {
	o.ReleaseDate.Set(nil)
}

// UnsetReleaseDate ensures that no value is present for ReleaseDate, not even an explicit nil
func (o *ClusterPackageParams) UnsetReleaseDate() {
	o.ReleaseDate.Unset()
}

// GetReleaseVersion returns the ReleaseVersion field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetReleaseVersion() string {
	if o == nil || IsNil(o.ReleaseVersion) {
		var ret string
		return ret
	}
	return *o.ReleaseVersion
}

// GetReleaseVersionOk returns a tuple with the ReleaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetReleaseVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseVersion) {
		return nil, false
	}
	return o.ReleaseVersion, true
}

// HasReleaseVersion returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasReleaseVersion() bool {
	if o != nil && !IsNil(o.ReleaseVersion) {
		return true
	}

	return false
}

// SetReleaseVersion gets a reference to the given string and assigns it to the ReleaseVersion field.
func (o *ClusterPackageParams) SetReleaseVersion(v string) {
	o.ReleaseVersion = &v
}

// GetSha256Checksum returns the Sha256Checksum field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetSha256Checksum() string {
	if o == nil || IsNil(o.Sha256Checksum) {
		var ret string
		return ret
	}
	return *o.Sha256Checksum
}

// GetSha256ChecksumOk returns a tuple with the Sha256Checksum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetSha256ChecksumOk() (*string, bool) {
	if o == nil || IsNil(o.Sha256Checksum) {
		return nil, false
	}
	return o.Sha256Checksum, true
}

// HasSha256Checksum returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasSha256Checksum() bool {
	if o != nil && !IsNil(o.Sha256Checksum) {
		return true
	}

	return false
}

// SetSha256Checksum gets a reference to the given string and assigns it to the Sha256Checksum field.
func (o *ClusterPackageParams) SetSha256Checksum(v string) {
	o.Sha256Checksum = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ClusterPackageParams) GetStatus() ClusterPackageStatus {
	if o == nil || IsNil(o.Status) {
		var ret ClusterPackageStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterPackageParams) GetStatusOk() (*ClusterPackageStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given ClusterPackageStatus and assigns it to the Status field.
func (o *ClusterPackageParams) SetStatus(v ClusterPackageStatus) {
	o.Status = &v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterPackageParams) GetVersionName() string {
	if o == nil || IsNil(o.VersionName.Get()) {
		var ret string
		return ret
	}
	return *o.VersionName.Get()
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterPackageParams) GetVersionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionName.Get(), o.VersionName.IsSet()
}

// HasVersionName returns a boolean if a field has been set.
func (o *ClusterPackageParams) HasVersionName() bool {
	if o != nil && o.VersionName.IsSet() {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given NullableString and assigns it to the VersionName field.
func (o *ClusterPackageParams) SetVersionName(v string) {
	o.VersionName.Set(&v)
}
// SetVersionNameNil sets the value for VersionName to be an explicit nil
func (o *ClusterPackageParams) SetVersionNameNil() {
	o.VersionName.Set(nil)
}

// UnsetVersionName ensures that no value is present for VersionName, not even an explicit nil
func (o *ClusterPackageParams) UnsetVersionName() {
	o.VersionName.Unset()
}

func (o ClusterPackageParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterPackageParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CompatiblePackages) {
		toSerialize["compatiblePackages"] = o.CompatiblePackages
	}
	if !IsNil(o.Components) {
		toSerialize["components"] = o.Components
	}
	if !IsNil(o.FileSizeBytes) {
		toSerialize["fileSizeBytes"] = o.FileSizeBytes
	}
	if !IsNil(o.FixedIssues) {
		toSerialize["fixedIssues"] = o.FixedIssues
	}
	if o.IsDowntimeRequired.IsSet() {
		toSerialize["isDowntimeRequired"] = o.IsDowntimeRequired.Get()
	}
	if !IsNil(o.Md5Checksum) {
		toSerialize["md5Checksum"] = o.Md5Checksum
	}
	if !IsNil(o.NodeIds) {
		toSerialize["nodeIds"] = o.NodeIds
	}
	if !IsNil(o.PackageSubType) {
		toSerialize["packageSubType"] = o.PackageSubType
	}
	if !IsNil(o.PackageType) {
		toSerialize["packageType"] = o.PackageType
	}
	if o.ReleaseDate.IsSet() {
		toSerialize["releaseDate"] = o.ReleaseDate.Get()
	}
	if !IsNil(o.ReleaseVersion) {
		toSerialize["releaseVersion"] = o.ReleaseVersion
	}
	if !IsNil(o.Sha256Checksum) {
		toSerialize["sha256Checksum"] = o.Sha256Checksum
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.VersionName.IsSet() {
		toSerialize["versionName"] = o.VersionName.Get()
	}
	return toSerialize, nil
}

type NullableClusterPackageParams struct {
	value *ClusterPackageParams
	isSet bool
}

func (v NullableClusterPackageParams) Get() *ClusterPackageParams {
	return v.value
}

func (v *NullableClusterPackageParams) Set(val *ClusterPackageParams) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterPackageParams) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterPackageParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterPackageParams(val *ClusterPackageParams) *NullableClusterPackageParams {
	return &NullableClusterPackageParams{value: val, isSet: true}
}

func (v NullableClusterPackageParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterPackageParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


