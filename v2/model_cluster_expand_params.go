/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterExpandParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterExpandParams{}

// ClusterExpandParams The parameters to expand the cluster.
type ClusterExpandParams struct {
	CloudClusterParams *CloudClusterExpandParams `json:"cloudClusterParams,omitempty"`
	PhysicalClusterParams *PhysicalClusterExpandParams `json:"physicalClusterParams,omitempty"`
	// Type of the cluster. 'Cloud' indicates cloud edition cluster. 'Physical' indicates physical edition cluster. 'Virtual' indicates virtual edition cluster.
	Type string `json:"type"`
}

type _ClusterExpandParams ClusterExpandParams

// NewClusterExpandParams instantiates a new ClusterExpandParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterExpandParams(type_ string) *ClusterExpandParams {
	this := ClusterExpandParams{}
	this.Type = type_
	return &this
}

// NewClusterExpandParamsWithDefaults instantiates a new ClusterExpandParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterExpandParamsWithDefaults() *ClusterExpandParams {
	this := ClusterExpandParams{}
	return &this
}

// GetCloudClusterParams returns the CloudClusterParams field value if set, zero value otherwise.
func (o *ClusterExpandParams) GetCloudClusterParams() CloudClusterExpandParams {
	if o == nil || IsNil(o.CloudClusterParams) {
		var ret CloudClusterExpandParams
		return ret
	}
	return *o.CloudClusterParams
}

// GetCloudClusterParamsOk returns a tuple with the CloudClusterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterExpandParams) GetCloudClusterParamsOk() (*CloudClusterExpandParams, bool) {
	if o == nil || IsNil(o.CloudClusterParams) {
		return nil, false
	}
	return o.CloudClusterParams, true
}

// HasCloudClusterParams returns a boolean if a field has been set.
func (o *ClusterExpandParams) HasCloudClusterParams() bool {
	if o != nil && !IsNil(o.CloudClusterParams) {
		return true
	}

	return false
}

// SetCloudClusterParams gets a reference to the given CloudClusterExpandParams and assigns it to the CloudClusterParams field.
func (o *ClusterExpandParams) SetCloudClusterParams(v CloudClusterExpandParams) {
	o.CloudClusterParams = &v
}

// GetPhysicalClusterParams returns the PhysicalClusterParams field value if set, zero value otherwise.
func (o *ClusterExpandParams) GetPhysicalClusterParams() PhysicalClusterExpandParams {
	if o == nil || IsNil(o.PhysicalClusterParams) {
		var ret PhysicalClusterExpandParams
		return ret
	}
	return *o.PhysicalClusterParams
}

// GetPhysicalClusterParamsOk returns a tuple with the PhysicalClusterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterExpandParams) GetPhysicalClusterParamsOk() (*PhysicalClusterExpandParams, bool) {
	if o == nil || IsNil(o.PhysicalClusterParams) {
		return nil, false
	}
	return o.PhysicalClusterParams, true
}

// HasPhysicalClusterParams returns a boolean if a field has been set.
func (o *ClusterExpandParams) HasPhysicalClusterParams() bool {
	if o != nil && !IsNil(o.PhysicalClusterParams) {
		return true
	}

	return false
}

// SetPhysicalClusterParams gets a reference to the given PhysicalClusterExpandParams and assigns it to the PhysicalClusterParams field.
func (o *ClusterExpandParams) SetPhysicalClusterParams(v PhysicalClusterExpandParams) {
	o.PhysicalClusterParams = &v
}

// GetType returns the Type field value
func (o *ClusterExpandParams) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ClusterExpandParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ClusterExpandParams) SetType(v string) {
	o.Type = v
}

func (o ClusterExpandParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterExpandParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CloudClusterParams) {
		toSerialize["cloudClusterParams"] = o.CloudClusterParams
	}
	if !IsNil(o.PhysicalClusterParams) {
		toSerialize["physicalClusterParams"] = o.PhysicalClusterParams
	}
	toSerialize["type"] = o.Type
	return toSerialize, nil
}

func (o *ClusterExpandParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterExpandParams := _ClusterExpandParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterExpandParams)

	if err != nil {
		return err
	}

	*o = ClusterExpandParams(varClusterExpandParams)

	return err
}

type NullableClusterExpandParams struct {
	value *ClusterExpandParams
	isSet bool
}

func (v NullableClusterExpandParams) Get() *ClusterExpandParams {
	return v.value
}

func (v *NullableClusterExpandParams) Set(val *ClusterExpandParams) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterExpandParams) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterExpandParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterExpandParams(val *ClusterExpandParams) *NullableClusterExpandParams {
	return &NullableClusterExpandParams{value: val, isSet: true}
}

func (v NullableClusterExpandParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterExpandParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


