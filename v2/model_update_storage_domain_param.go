/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateStorageDomainParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateStorageDomainParam{}

// UpdateStorageDomainParam Specifies the parameter to update a Storage Domain.
type UpdateStorageDomainParam struct {
	// Specifies the Active Directory domain name that this Storage Domain is mapped to.
	AdDomainName NullableString `json:"adDomainName,omitempty"`
	// Specifies the brick size used for blobs in this Storage Domain.
	BlobBrickSizeBytes NullableInt32 `json:"blobBrickSizeBytes,omitempty"`
	// Specifies the cloud domain Id.
	CloudDomainId NullableInt64 `json:"cloudDomainId,omitempty"`
	CloudDownWaterFallParams *StorageDomainCloudDownWaterFallParams `json:"cloudDownWaterFallParams,omitempty"`
	// Specifies the cluster partition id of the Storage Domain.
	ClusterPartitionId NullableInt64 `json:"clusterPartitionId"`
	// Specifies the cluster partition name of the Storage Domain.
	ClusterPartitionName NullableString `json:"clusterPartitionName,omitempty"`
	DefaultUserQuota *StorageDomainDefaultUserQuota `json:"defaultUserQuota,omitempty"`
	DefaultViewQuota *StorageDomainDefaultViewQuota `json:"defaultViewQuota,omitempty"`
	// Specifies whether DEK(Data Encryption Key) rotation is enabled for this Storage Domain. This is applicable only when the Storage Domain uses AWS or similar KMS in which the KEK (Key Encryption Key) is not created and maintained by Cohesity. For Internal KMS and keys stored in Safenet servers, DEK rotation will not be performed.
	DekRotationEnabled NullableBool `json:"dekRotationEnabled,omitempty"`
	// Specifies whether to enable driect archive on this Storage Domain. If enabled, this Storage Domain can be used as a staging area while copying a large dataset that can't fit on the cluster to an external target.
	DirectArchiveEnabled NullableBool `json:"directArchiveEnabled,omitempty"`
	// Specifies the file count by size for the View.
	FileCountBySize []FileCount `json:"fileCountBySize,omitempty"`
	// Specifies the Storage Domain id.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the Kerberos realm name that this Storage Domain is mapped to.
	KerberosRealmName NullableString `json:"kerberosRealmName,omitempty"`
	// Specifies the associated KMS server id.
	KmsServerId NullableInt64 `json:"kmsServerId,omitempty"`
	// Last key rotation timestamp in msecs for storage domain.
	LastKeyRotationTimestampMsecs NullableInt64 `json:"lastKeyRotationTimestampMsecs,omitempty"`
	// Specifies the LDAP provider id that this Storage Domain is mapped to.
	LdapProviderId NullableInt64 `json:"ldapProviderId,omitempty"`
	// Specifies the Storage Domain name.
	Name NullableString `json:"name"`
	// Specifies the NIS domain names that this Storage Domain is mapped to.
	NisDomainNames []string `json:"nisDomainNames,omitempty"`
	PhysicalQuota *StorageDomainPhysicalQuota `json:"physicalQuota,omitempty"`
	// Specifies whether Storage Domain is recommended for the specified View template.
	Recommended NullableBool `json:"recommended,omitempty"`
	// Specifies the current removal state of the Storage Domain. 'DontRemove' means the state of object is functional and it is not being removed. 'MarkedForRemoval' means the object is being removed. 'OkToRemove' means the object has been removed on the Cohesity Cluster and if the object is physical, it can be removed from the Cohesity Cluster.
	RemovalState NullableString `json:"removalState,omitempty"`
	// Specifies whether to enable creation of S3 bucket on this Storage Domain.
	S3BucketsEnabled NullableBool `json:"s3BucketsEnabled,omitempty"`
	// Specifies the Storage Domain schemas.
	Schemas []Schema `json:"schemas,omitempty"`
	Stats *StorageDomainStats `json:"stats,omitempty"`
	StoragePolicy *StorageDomainStoragePolicy `json:"storagePolicy,omitempty"`
	// Specifies a list of Subnets with IP addresses that have permissions to access the Storage Domain.
	SubnetWhitelist []Subnet `json:"subnetWhitelist,omitempty"`
	// Specifies a list of tenant ids that that Storage Domain belongs. There can only be one tenant id in this field unless Storage Domain sharing between tenants is allowed on this cluster.
	TenantIds []string `json:"tenantIds,omitempty"`
	// If 'true', when the Cohesity Cluster is writing to a file, the file modification time is not persisted synchronously during the file write, so the modification time may not be accurate. (Typically the file modification time is off by 30 seconds but it can be longer.)
	TreatFileSyncAsDataSync NullableBool `json:"treatFileSyncAsDataSync,omitempty"`
	// Specifies the vault Id associated with cloud domain ID.
	VaultId NullableInt64 `json:"vaultId,omitempty"`
}

type _UpdateStorageDomainParam UpdateStorageDomainParam

// NewUpdateStorageDomainParam instantiates a new UpdateStorageDomainParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateStorageDomainParam(clusterPartitionId NullableInt64, name NullableString) *UpdateStorageDomainParam {
	this := UpdateStorageDomainParam{}
	this.ClusterPartitionId = clusterPartitionId
	this.Name = name
	return &this
}

// NewUpdateStorageDomainParamWithDefaults instantiates a new UpdateStorageDomainParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateStorageDomainParamWithDefaults() *UpdateStorageDomainParam {
	this := UpdateStorageDomainParam{}
	return &this
}

// GetAdDomainName returns the AdDomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetAdDomainName() string {
	if o == nil || IsNil(o.AdDomainName.Get()) {
		var ret string
		return ret
	}
	return *o.AdDomainName.Get()
}

// GetAdDomainNameOk returns a tuple with the AdDomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetAdDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdDomainName.Get(), o.AdDomainName.IsSet()
}

// HasAdDomainName returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasAdDomainName() bool {
	if o != nil && o.AdDomainName.IsSet() {
		return true
	}

	return false
}

// SetAdDomainName gets a reference to the given NullableString and assigns it to the AdDomainName field.
func (o *UpdateStorageDomainParam) SetAdDomainName(v string) {
	o.AdDomainName.Set(&v)
}
// SetAdDomainNameNil sets the value for AdDomainName to be an explicit nil
func (o *UpdateStorageDomainParam) SetAdDomainNameNil() {
	o.AdDomainName.Set(nil)
}

// UnsetAdDomainName ensures that no value is present for AdDomainName, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetAdDomainName() {
	o.AdDomainName.Unset()
}

// GetBlobBrickSizeBytes returns the BlobBrickSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetBlobBrickSizeBytes() int32 {
	if o == nil || IsNil(o.BlobBrickSizeBytes.Get()) {
		var ret int32
		return ret
	}
	return *o.BlobBrickSizeBytes.Get()
}

// GetBlobBrickSizeBytesOk returns a tuple with the BlobBrickSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetBlobBrickSizeBytesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.BlobBrickSizeBytes.Get(), o.BlobBrickSizeBytes.IsSet()
}

// HasBlobBrickSizeBytes returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasBlobBrickSizeBytes() bool {
	if o != nil && o.BlobBrickSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetBlobBrickSizeBytes gets a reference to the given NullableInt32 and assigns it to the BlobBrickSizeBytes field.
func (o *UpdateStorageDomainParam) SetBlobBrickSizeBytes(v int32) {
	o.BlobBrickSizeBytes.Set(&v)
}
// SetBlobBrickSizeBytesNil sets the value for BlobBrickSizeBytes to be an explicit nil
func (o *UpdateStorageDomainParam) SetBlobBrickSizeBytesNil() {
	o.BlobBrickSizeBytes.Set(nil)
}

// UnsetBlobBrickSizeBytes ensures that no value is present for BlobBrickSizeBytes, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetBlobBrickSizeBytes() {
	o.BlobBrickSizeBytes.Unset()
}

// GetCloudDomainId returns the CloudDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetCloudDomainId() int64 {
	if o == nil || IsNil(o.CloudDomainId.Get()) {
		var ret int64
		return ret
	}
	return *o.CloudDomainId.Get()
}

// GetCloudDomainIdOk returns a tuple with the CloudDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetCloudDomainIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudDomainId.Get(), o.CloudDomainId.IsSet()
}

// HasCloudDomainId returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasCloudDomainId() bool {
	if o != nil && o.CloudDomainId.IsSet() {
		return true
	}

	return false
}

// SetCloudDomainId gets a reference to the given NullableInt64 and assigns it to the CloudDomainId field.
func (o *UpdateStorageDomainParam) SetCloudDomainId(v int64) {
	o.CloudDomainId.Set(&v)
}
// SetCloudDomainIdNil sets the value for CloudDomainId to be an explicit nil
func (o *UpdateStorageDomainParam) SetCloudDomainIdNil() {
	o.CloudDomainId.Set(nil)
}

// UnsetCloudDomainId ensures that no value is present for CloudDomainId, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetCloudDomainId() {
	o.CloudDomainId.Unset()
}

// GetCloudDownWaterFallParams returns the CloudDownWaterFallParams field value if set, zero value otherwise.
func (o *UpdateStorageDomainParam) GetCloudDownWaterFallParams() StorageDomainCloudDownWaterFallParams {
	if o == nil || IsNil(o.CloudDownWaterFallParams) {
		var ret StorageDomainCloudDownWaterFallParams
		return ret
	}
	return *o.CloudDownWaterFallParams
}

// GetCloudDownWaterFallParamsOk returns a tuple with the CloudDownWaterFallParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageDomainParam) GetCloudDownWaterFallParamsOk() (*StorageDomainCloudDownWaterFallParams, bool) {
	if o == nil || IsNil(o.CloudDownWaterFallParams) {
		return nil, false
	}
	return o.CloudDownWaterFallParams, true
}

// HasCloudDownWaterFallParams returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasCloudDownWaterFallParams() bool {
	if o != nil && !IsNil(o.CloudDownWaterFallParams) {
		return true
	}

	return false
}

// SetCloudDownWaterFallParams gets a reference to the given StorageDomainCloudDownWaterFallParams and assigns it to the CloudDownWaterFallParams field.
func (o *UpdateStorageDomainParam) SetCloudDownWaterFallParams(v StorageDomainCloudDownWaterFallParams) {
	o.CloudDownWaterFallParams = &v
}

// GetClusterPartitionId returns the ClusterPartitionId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *UpdateStorageDomainParam) GetClusterPartitionId() int64 {
	if o == nil || o.ClusterPartitionId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ClusterPartitionId.Get()
}

// GetClusterPartitionIdOk returns a tuple with the ClusterPartitionId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetClusterPartitionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterPartitionId.Get(), o.ClusterPartitionId.IsSet()
}

// SetClusterPartitionId sets field value
func (o *UpdateStorageDomainParam) SetClusterPartitionId(v int64) {
	o.ClusterPartitionId.Set(&v)
}

// GetClusterPartitionName returns the ClusterPartitionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetClusterPartitionName() string {
	if o == nil || IsNil(o.ClusterPartitionName.Get()) {
		var ret string
		return ret
	}
	return *o.ClusterPartitionName.Get()
}

// GetClusterPartitionNameOk returns a tuple with the ClusterPartitionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetClusterPartitionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterPartitionName.Get(), o.ClusterPartitionName.IsSet()
}

// HasClusterPartitionName returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasClusterPartitionName() bool {
	if o != nil && o.ClusterPartitionName.IsSet() {
		return true
	}

	return false
}

// SetClusterPartitionName gets a reference to the given NullableString and assigns it to the ClusterPartitionName field.
func (o *UpdateStorageDomainParam) SetClusterPartitionName(v string) {
	o.ClusterPartitionName.Set(&v)
}
// SetClusterPartitionNameNil sets the value for ClusterPartitionName to be an explicit nil
func (o *UpdateStorageDomainParam) SetClusterPartitionNameNil() {
	o.ClusterPartitionName.Set(nil)
}

// UnsetClusterPartitionName ensures that no value is present for ClusterPartitionName, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetClusterPartitionName() {
	o.ClusterPartitionName.Unset()
}

// GetDefaultUserQuota returns the DefaultUserQuota field value if set, zero value otherwise.
func (o *UpdateStorageDomainParam) GetDefaultUserQuota() StorageDomainDefaultUserQuota {
	if o == nil || IsNil(o.DefaultUserQuota) {
		var ret StorageDomainDefaultUserQuota
		return ret
	}
	return *o.DefaultUserQuota
}

// GetDefaultUserQuotaOk returns a tuple with the DefaultUserQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageDomainParam) GetDefaultUserQuotaOk() (*StorageDomainDefaultUserQuota, bool) {
	if o == nil || IsNil(o.DefaultUserQuota) {
		return nil, false
	}
	return o.DefaultUserQuota, true
}

// HasDefaultUserQuota returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasDefaultUserQuota() bool {
	if o != nil && !IsNil(o.DefaultUserQuota) {
		return true
	}

	return false
}

// SetDefaultUserQuota gets a reference to the given StorageDomainDefaultUserQuota and assigns it to the DefaultUserQuota field.
func (o *UpdateStorageDomainParam) SetDefaultUserQuota(v StorageDomainDefaultUserQuota) {
	o.DefaultUserQuota = &v
}

// GetDefaultViewQuota returns the DefaultViewQuota field value if set, zero value otherwise.
func (o *UpdateStorageDomainParam) GetDefaultViewQuota() StorageDomainDefaultViewQuota {
	if o == nil || IsNil(o.DefaultViewQuota) {
		var ret StorageDomainDefaultViewQuota
		return ret
	}
	return *o.DefaultViewQuota
}

// GetDefaultViewQuotaOk returns a tuple with the DefaultViewQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageDomainParam) GetDefaultViewQuotaOk() (*StorageDomainDefaultViewQuota, bool) {
	if o == nil || IsNil(o.DefaultViewQuota) {
		return nil, false
	}
	return o.DefaultViewQuota, true
}

// HasDefaultViewQuota returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasDefaultViewQuota() bool {
	if o != nil && !IsNil(o.DefaultViewQuota) {
		return true
	}

	return false
}

// SetDefaultViewQuota gets a reference to the given StorageDomainDefaultViewQuota and assigns it to the DefaultViewQuota field.
func (o *UpdateStorageDomainParam) SetDefaultViewQuota(v StorageDomainDefaultViewQuota) {
	o.DefaultViewQuota = &v
}

// GetDekRotationEnabled returns the DekRotationEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetDekRotationEnabled() bool {
	if o == nil || IsNil(o.DekRotationEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.DekRotationEnabled.Get()
}

// GetDekRotationEnabledOk returns a tuple with the DekRotationEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetDekRotationEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DekRotationEnabled.Get(), o.DekRotationEnabled.IsSet()
}

// HasDekRotationEnabled returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasDekRotationEnabled() bool {
	if o != nil && o.DekRotationEnabled.IsSet() {
		return true
	}

	return false
}

// SetDekRotationEnabled gets a reference to the given NullableBool and assigns it to the DekRotationEnabled field.
func (o *UpdateStorageDomainParam) SetDekRotationEnabled(v bool) {
	o.DekRotationEnabled.Set(&v)
}
// SetDekRotationEnabledNil sets the value for DekRotationEnabled to be an explicit nil
func (o *UpdateStorageDomainParam) SetDekRotationEnabledNil() {
	o.DekRotationEnabled.Set(nil)
}

// UnsetDekRotationEnabled ensures that no value is present for DekRotationEnabled, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetDekRotationEnabled() {
	o.DekRotationEnabled.Unset()
}

// GetDirectArchiveEnabled returns the DirectArchiveEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetDirectArchiveEnabled() bool {
	if o == nil || IsNil(o.DirectArchiveEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.DirectArchiveEnabled.Get()
}

// GetDirectArchiveEnabledOk returns a tuple with the DirectArchiveEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetDirectArchiveEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DirectArchiveEnabled.Get(), o.DirectArchiveEnabled.IsSet()
}

// HasDirectArchiveEnabled returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasDirectArchiveEnabled() bool {
	if o != nil && o.DirectArchiveEnabled.IsSet() {
		return true
	}

	return false
}

// SetDirectArchiveEnabled gets a reference to the given NullableBool and assigns it to the DirectArchiveEnabled field.
func (o *UpdateStorageDomainParam) SetDirectArchiveEnabled(v bool) {
	o.DirectArchiveEnabled.Set(&v)
}
// SetDirectArchiveEnabledNil sets the value for DirectArchiveEnabled to be an explicit nil
func (o *UpdateStorageDomainParam) SetDirectArchiveEnabledNil() {
	o.DirectArchiveEnabled.Set(nil)
}

// UnsetDirectArchiveEnabled ensures that no value is present for DirectArchiveEnabled, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetDirectArchiveEnabled() {
	o.DirectArchiveEnabled.Unset()
}

// GetFileCountBySize returns the FileCountBySize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetFileCountBySize() []FileCount {
	if o == nil {
		var ret []FileCount
		return ret
	}
	return o.FileCountBySize
}

// GetFileCountBySizeOk returns a tuple with the FileCountBySize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetFileCountBySizeOk() ([]FileCount, bool) {
	if o == nil || IsNil(o.FileCountBySize) {
		return nil, false
	}
	return o.FileCountBySize, true
}

// HasFileCountBySize returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasFileCountBySize() bool {
	if o != nil && !IsNil(o.FileCountBySize) {
		return true
	}

	return false
}

// SetFileCountBySize gets a reference to the given []FileCount and assigns it to the FileCountBySize field.
func (o *UpdateStorageDomainParam) SetFileCountBySize(v []FileCount) {
	o.FileCountBySize = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *UpdateStorageDomainParam) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *UpdateStorageDomainParam) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetId() {
	o.Id.Unset()
}

// GetKerberosRealmName returns the KerberosRealmName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetKerberosRealmName() string {
	if o == nil || IsNil(o.KerberosRealmName.Get()) {
		var ret string
		return ret
	}
	return *o.KerberosRealmName.Get()
}

// GetKerberosRealmNameOk returns a tuple with the KerberosRealmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetKerberosRealmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KerberosRealmName.Get(), o.KerberosRealmName.IsSet()
}

// HasKerberosRealmName returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasKerberosRealmName() bool {
	if o != nil && o.KerberosRealmName.IsSet() {
		return true
	}

	return false
}

// SetKerberosRealmName gets a reference to the given NullableString and assigns it to the KerberosRealmName field.
func (o *UpdateStorageDomainParam) SetKerberosRealmName(v string) {
	o.KerberosRealmName.Set(&v)
}
// SetKerberosRealmNameNil sets the value for KerberosRealmName to be an explicit nil
func (o *UpdateStorageDomainParam) SetKerberosRealmNameNil() {
	o.KerberosRealmName.Set(nil)
}

// UnsetKerberosRealmName ensures that no value is present for KerberosRealmName, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetKerberosRealmName() {
	o.KerberosRealmName.Unset()
}

// GetKmsServerId returns the KmsServerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetKmsServerId() int64 {
	if o == nil || IsNil(o.KmsServerId.Get()) {
		var ret int64
		return ret
	}
	return *o.KmsServerId.Get()
}

// GetKmsServerIdOk returns a tuple with the KmsServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetKmsServerIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.KmsServerId.Get(), o.KmsServerId.IsSet()
}

// HasKmsServerId returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasKmsServerId() bool {
	if o != nil && o.KmsServerId.IsSet() {
		return true
	}

	return false
}

// SetKmsServerId gets a reference to the given NullableInt64 and assigns it to the KmsServerId field.
func (o *UpdateStorageDomainParam) SetKmsServerId(v int64) {
	o.KmsServerId.Set(&v)
}
// SetKmsServerIdNil sets the value for KmsServerId to be an explicit nil
func (o *UpdateStorageDomainParam) SetKmsServerIdNil() {
	o.KmsServerId.Set(nil)
}

// UnsetKmsServerId ensures that no value is present for KmsServerId, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetKmsServerId() {
	o.KmsServerId.Unset()
}

// GetLastKeyRotationTimestampMsecs returns the LastKeyRotationTimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetLastKeyRotationTimestampMsecs() int64 {
	if o == nil || IsNil(o.LastKeyRotationTimestampMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.LastKeyRotationTimestampMsecs.Get()
}

// GetLastKeyRotationTimestampMsecsOk returns a tuple with the LastKeyRotationTimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetLastKeyRotationTimestampMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastKeyRotationTimestampMsecs.Get(), o.LastKeyRotationTimestampMsecs.IsSet()
}

// HasLastKeyRotationTimestampMsecs returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasLastKeyRotationTimestampMsecs() bool {
	if o != nil && o.LastKeyRotationTimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastKeyRotationTimestampMsecs gets a reference to the given NullableInt64 and assigns it to the LastKeyRotationTimestampMsecs field.
func (o *UpdateStorageDomainParam) SetLastKeyRotationTimestampMsecs(v int64) {
	o.LastKeyRotationTimestampMsecs.Set(&v)
}
// SetLastKeyRotationTimestampMsecsNil sets the value for LastKeyRotationTimestampMsecs to be an explicit nil
func (o *UpdateStorageDomainParam) SetLastKeyRotationTimestampMsecsNil() {
	o.LastKeyRotationTimestampMsecs.Set(nil)
}

// UnsetLastKeyRotationTimestampMsecs ensures that no value is present for LastKeyRotationTimestampMsecs, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetLastKeyRotationTimestampMsecs() {
	o.LastKeyRotationTimestampMsecs.Unset()
}

// GetLdapProviderId returns the LdapProviderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetLdapProviderId() int64 {
	if o == nil || IsNil(o.LdapProviderId.Get()) {
		var ret int64
		return ret
	}
	return *o.LdapProviderId.Get()
}

// GetLdapProviderIdOk returns a tuple with the LdapProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetLdapProviderIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LdapProviderId.Get(), o.LdapProviderId.IsSet()
}

// HasLdapProviderId returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasLdapProviderId() bool {
	if o != nil && o.LdapProviderId.IsSet() {
		return true
	}

	return false
}

// SetLdapProviderId gets a reference to the given NullableInt64 and assigns it to the LdapProviderId field.
func (o *UpdateStorageDomainParam) SetLdapProviderId(v int64) {
	o.LdapProviderId.Set(&v)
}
// SetLdapProviderIdNil sets the value for LdapProviderId to be an explicit nil
func (o *UpdateStorageDomainParam) SetLdapProviderIdNil() {
	o.LdapProviderId.Set(nil)
}

// UnsetLdapProviderId ensures that no value is present for LdapProviderId, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetLdapProviderId() {
	o.LdapProviderId.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateStorageDomainParam) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *UpdateStorageDomainParam) SetName(v string) {
	o.Name.Set(&v)
}

// GetNisDomainNames returns the NisDomainNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetNisDomainNames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.NisDomainNames
}

// GetNisDomainNamesOk returns a tuple with the NisDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetNisDomainNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.NisDomainNames) {
		return nil, false
	}
	return o.NisDomainNames, true
}

// HasNisDomainNames returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasNisDomainNames() bool {
	if o != nil && !IsNil(o.NisDomainNames) {
		return true
	}

	return false
}

// SetNisDomainNames gets a reference to the given []string and assigns it to the NisDomainNames field.
func (o *UpdateStorageDomainParam) SetNisDomainNames(v []string) {
	o.NisDomainNames = v
}

// GetPhysicalQuota returns the PhysicalQuota field value if set, zero value otherwise.
func (o *UpdateStorageDomainParam) GetPhysicalQuota() StorageDomainPhysicalQuota {
	if o == nil || IsNil(o.PhysicalQuota) {
		var ret StorageDomainPhysicalQuota
		return ret
	}
	return *o.PhysicalQuota
}

// GetPhysicalQuotaOk returns a tuple with the PhysicalQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageDomainParam) GetPhysicalQuotaOk() (*StorageDomainPhysicalQuota, bool) {
	if o == nil || IsNil(o.PhysicalQuota) {
		return nil, false
	}
	return o.PhysicalQuota, true
}

// HasPhysicalQuota returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasPhysicalQuota() bool {
	if o != nil && !IsNil(o.PhysicalQuota) {
		return true
	}

	return false
}

// SetPhysicalQuota gets a reference to the given StorageDomainPhysicalQuota and assigns it to the PhysicalQuota field.
func (o *UpdateStorageDomainParam) SetPhysicalQuota(v StorageDomainPhysicalQuota) {
	o.PhysicalQuota = &v
}

// GetRecommended returns the Recommended field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetRecommended() bool {
	if o == nil || IsNil(o.Recommended.Get()) {
		var ret bool
		return ret
	}
	return *o.Recommended.Get()
}

// GetRecommendedOk returns a tuple with the Recommended field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetRecommendedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recommended.Get(), o.Recommended.IsSet()
}

// HasRecommended returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasRecommended() bool {
	if o != nil && o.Recommended.IsSet() {
		return true
	}

	return false
}

// SetRecommended gets a reference to the given NullableBool and assigns it to the Recommended field.
func (o *UpdateStorageDomainParam) SetRecommended(v bool) {
	o.Recommended.Set(&v)
}
// SetRecommendedNil sets the value for Recommended to be an explicit nil
func (o *UpdateStorageDomainParam) SetRecommendedNil() {
	o.Recommended.Set(nil)
}

// UnsetRecommended ensures that no value is present for Recommended, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetRecommended() {
	o.Recommended.Unset()
}

// GetRemovalState returns the RemovalState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetRemovalState() string {
	if o == nil || IsNil(o.RemovalState.Get()) {
		var ret string
		return ret
	}
	return *o.RemovalState.Get()
}

// GetRemovalStateOk returns a tuple with the RemovalState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetRemovalStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalState.Get(), o.RemovalState.IsSet()
}

// HasRemovalState returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasRemovalState() bool {
	if o != nil && o.RemovalState.IsSet() {
		return true
	}

	return false
}

// SetRemovalState gets a reference to the given NullableString and assigns it to the RemovalState field.
func (o *UpdateStorageDomainParam) SetRemovalState(v string) {
	o.RemovalState.Set(&v)
}
// SetRemovalStateNil sets the value for RemovalState to be an explicit nil
func (o *UpdateStorageDomainParam) SetRemovalStateNil() {
	o.RemovalState.Set(nil)
}

// UnsetRemovalState ensures that no value is present for RemovalState, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetRemovalState() {
	o.RemovalState.Unset()
}

// GetS3BucketsEnabled returns the S3BucketsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetS3BucketsEnabled() bool {
	if o == nil || IsNil(o.S3BucketsEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.S3BucketsEnabled.Get()
}

// GetS3BucketsEnabledOk returns a tuple with the S3BucketsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetS3BucketsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3BucketsEnabled.Get(), o.S3BucketsEnabled.IsSet()
}

// HasS3BucketsEnabled returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasS3BucketsEnabled() bool {
	if o != nil && o.S3BucketsEnabled.IsSet() {
		return true
	}

	return false
}

// SetS3BucketsEnabled gets a reference to the given NullableBool and assigns it to the S3BucketsEnabled field.
func (o *UpdateStorageDomainParam) SetS3BucketsEnabled(v bool) {
	o.S3BucketsEnabled.Set(&v)
}
// SetS3BucketsEnabledNil sets the value for S3BucketsEnabled to be an explicit nil
func (o *UpdateStorageDomainParam) SetS3BucketsEnabledNil() {
	o.S3BucketsEnabled.Set(nil)
}

// UnsetS3BucketsEnabled ensures that no value is present for S3BucketsEnabled, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetS3BucketsEnabled() {
	o.S3BucketsEnabled.Unset()
}

// GetSchemas returns the Schemas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetSchemas() []Schema {
	if o == nil {
		var ret []Schema
		return ret
	}
	return o.Schemas
}

// GetSchemasOk returns a tuple with the Schemas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetSchemasOk() ([]Schema, bool) {
	if o == nil || IsNil(o.Schemas) {
		return nil, false
	}
	return o.Schemas, true
}

// HasSchemas returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasSchemas() bool {
	if o != nil && !IsNil(o.Schemas) {
		return true
	}

	return false
}

// SetSchemas gets a reference to the given []Schema and assigns it to the Schemas field.
func (o *UpdateStorageDomainParam) SetSchemas(v []Schema) {
	o.Schemas = v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *UpdateStorageDomainParam) GetStats() StorageDomainStats {
	if o == nil || IsNil(o.Stats) {
		var ret StorageDomainStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageDomainParam) GetStatsOk() (*StorageDomainStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given StorageDomainStats and assigns it to the Stats field.
func (o *UpdateStorageDomainParam) SetStats(v StorageDomainStats) {
	o.Stats = &v
}

// GetStoragePolicy returns the StoragePolicy field value if set, zero value otherwise.
func (o *UpdateStorageDomainParam) GetStoragePolicy() StorageDomainStoragePolicy {
	if o == nil || IsNil(o.StoragePolicy) {
		var ret StorageDomainStoragePolicy
		return ret
	}
	return *o.StoragePolicy
}

// GetStoragePolicyOk returns a tuple with the StoragePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateStorageDomainParam) GetStoragePolicyOk() (*StorageDomainStoragePolicy, bool) {
	if o == nil || IsNil(o.StoragePolicy) {
		return nil, false
	}
	return o.StoragePolicy, true
}

// HasStoragePolicy returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasStoragePolicy() bool {
	if o != nil && !IsNil(o.StoragePolicy) {
		return true
	}

	return false
}

// SetStoragePolicy gets a reference to the given StorageDomainStoragePolicy and assigns it to the StoragePolicy field.
func (o *UpdateStorageDomainParam) SetStoragePolicy(v StorageDomainStoragePolicy) {
	o.StoragePolicy = &v
}

// GetSubnetWhitelist returns the SubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetSubnetWhitelist() []Subnet {
	if o == nil {
		var ret []Subnet
		return ret
	}
	return o.SubnetWhitelist
}

// GetSubnetWhitelistOk returns a tuple with the SubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetSubnetWhitelistOk() ([]Subnet, bool) {
	if o == nil || IsNil(o.SubnetWhitelist) {
		return nil, false
	}
	return o.SubnetWhitelist, true
}

// HasSubnetWhitelist returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasSubnetWhitelist() bool {
	if o != nil && !IsNil(o.SubnetWhitelist) {
		return true
	}

	return false
}

// SetSubnetWhitelist gets a reference to the given []Subnet and assigns it to the SubnetWhitelist field.
func (o *UpdateStorageDomainParam) SetSubnetWhitelist(v []Subnet) {
	o.SubnetWhitelist = v
}

// GetTenantIds returns the TenantIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetTenantIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.TenantIds
}

// GetTenantIdsOk returns a tuple with the TenantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetTenantIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIds) {
		return nil, false
	}
	return o.TenantIds, true
}

// HasTenantIds returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasTenantIds() bool {
	if o != nil && !IsNil(o.TenantIds) {
		return true
	}

	return false
}

// SetTenantIds gets a reference to the given []string and assigns it to the TenantIds field.
func (o *UpdateStorageDomainParam) SetTenantIds(v []string) {
	o.TenantIds = v
}

// GetTreatFileSyncAsDataSync returns the TreatFileSyncAsDataSync field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetTreatFileSyncAsDataSync() bool {
	if o == nil || IsNil(o.TreatFileSyncAsDataSync.Get()) {
		var ret bool
		return ret
	}
	return *o.TreatFileSyncAsDataSync.Get()
}

// GetTreatFileSyncAsDataSyncOk returns a tuple with the TreatFileSyncAsDataSync field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetTreatFileSyncAsDataSyncOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.TreatFileSyncAsDataSync.Get(), o.TreatFileSyncAsDataSync.IsSet()
}

// HasTreatFileSyncAsDataSync returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasTreatFileSyncAsDataSync() bool {
	if o != nil && o.TreatFileSyncAsDataSync.IsSet() {
		return true
	}

	return false
}

// SetTreatFileSyncAsDataSync gets a reference to the given NullableBool and assigns it to the TreatFileSyncAsDataSync field.
func (o *UpdateStorageDomainParam) SetTreatFileSyncAsDataSync(v bool) {
	o.TreatFileSyncAsDataSync.Set(&v)
}
// SetTreatFileSyncAsDataSyncNil sets the value for TreatFileSyncAsDataSync to be an explicit nil
func (o *UpdateStorageDomainParam) SetTreatFileSyncAsDataSyncNil() {
	o.TreatFileSyncAsDataSync.Set(nil)
}

// UnsetTreatFileSyncAsDataSync ensures that no value is present for TreatFileSyncAsDataSync, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetTreatFileSyncAsDataSync() {
	o.TreatFileSyncAsDataSync.Unset()
}

// GetVaultId returns the VaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateStorageDomainParam) GetVaultId() int64 {
	if o == nil || IsNil(o.VaultId.Get()) {
		var ret int64
		return ret
	}
	return *o.VaultId.Get()
}

// GetVaultIdOk returns a tuple with the VaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateStorageDomainParam) GetVaultIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.VaultId.Get(), o.VaultId.IsSet()
}

// HasVaultId returns a boolean if a field has been set.
func (o *UpdateStorageDomainParam) HasVaultId() bool {
	if o != nil && o.VaultId.IsSet() {
		return true
	}

	return false
}

// SetVaultId gets a reference to the given NullableInt64 and assigns it to the VaultId field.
func (o *UpdateStorageDomainParam) SetVaultId(v int64) {
	o.VaultId.Set(&v)
}
// SetVaultIdNil sets the value for VaultId to be an explicit nil
func (o *UpdateStorageDomainParam) SetVaultIdNil() {
	o.VaultId.Set(nil)
}

// UnsetVaultId ensures that no value is present for VaultId, not even an explicit nil
func (o *UpdateStorageDomainParam) UnsetVaultId() {
	o.VaultId.Unset()
}

func (o UpdateStorageDomainParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateStorageDomainParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AdDomainName.IsSet() {
		toSerialize["adDomainName"] = o.AdDomainName.Get()
	}
	if o.BlobBrickSizeBytes.IsSet() {
		toSerialize["blobBrickSizeBytes"] = o.BlobBrickSizeBytes.Get()
	}
	if o.CloudDomainId.IsSet() {
		toSerialize["cloudDomainId"] = o.CloudDomainId.Get()
	}
	if !IsNil(o.CloudDownWaterFallParams) {
		toSerialize["cloudDownWaterFallParams"] = o.CloudDownWaterFallParams
	}
	toSerialize["clusterPartitionId"] = o.ClusterPartitionId.Get()
	if o.ClusterPartitionName.IsSet() {
		toSerialize["clusterPartitionName"] = o.ClusterPartitionName.Get()
	}
	if !IsNil(o.DefaultUserQuota) {
		toSerialize["defaultUserQuota"] = o.DefaultUserQuota
	}
	if !IsNil(o.DefaultViewQuota) {
		toSerialize["defaultViewQuota"] = o.DefaultViewQuota
	}
	if o.DekRotationEnabled.IsSet() {
		toSerialize["dekRotationEnabled"] = o.DekRotationEnabled.Get()
	}
	if o.DirectArchiveEnabled.IsSet() {
		toSerialize["directArchiveEnabled"] = o.DirectArchiveEnabled.Get()
	}
	if o.FileCountBySize != nil {
		toSerialize["fileCountBySize"] = o.FileCountBySize
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.KerberosRealmName.IsSet() {
		toSerialize["kerberosRealmName"] = o.KerberosRealmName.Get()
	}
	if o.KmsServerId.IsSet() {
		toSerialize["kmsServerId"] = o.KmsServerId.Get()
	}
	if o.LastKeyRotationTimestampMsecs.IsSet() {
		toSerialize["lastKeyRotationTimestampMsecs"] = o.LastKeyRotationTimestampMsecs.Get()
	}
	if o.LdapProviderId.IsSet() {
		toSerialize["ldapProviderId"] = o.LdapProviderId.Get()
	}
	toSerialize["name"] = o.Name.Get()
	if o.NisDomainNames != nil {
		toSerialize["nisDomainNames"] = o.NisDomainNames
	}
	if !IsNil(o.PhysicalQuota) {
		toSerialize["physicalQuota"] = o.PhysicalQuota
	}
	if o.Recommended.IsSet() {
		toSerialize["recommended"] = o.Recommended.Get()
	}
	if o.RemovalState.IsSet() {
		toSerialize["removalState"] = o.RemovalState.Get()
	}
	if o.S3BucketsEnabled.IsSet() {
		toSerialize["s3BucketsEnabled"] = o.S3BucketsEnabled.Get()
	}
	if o.Schemas != nil {
		toSerialize["schemas"] = o.Schemas
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.StoragePolicy) {
		toSerialize["storagePolicy"] = o.StoragePolicy
	}
	if o.SubnetWhitelist != nil {
		toSerialize["subnetWhitelist"] = o.SubnetWhitelist
	}
	if o.TenantIds != nil {
		toSerialize["tenantIds"] = o.TenantIds
	}
	if o.TreatFileSyncAsDataSync.IsSet() {
		toSerialize["treatFileSyncAsDataSync"] = o.TreatFileSyncAsDataSync.Get()
	}
	if o.VaultId.IsSet() {
		toSerialize["vaultId"] = o.VaultId.Get()
	}
	return toSerialize, nil
}

func (o *UpdateStorageDomainParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"clusterPartitionId",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateStorageDomainParam := _UpdateStorageDomainParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateStorageDomainParam)

	if err != nil {
		return err
	}

	*o = UpdateStorageDomainParam(varUpdateStorageDomainParam)

	return err
}

type NullableUpdateStorageDomainParam struct {
	value *UpdateStorageDomainParam
	isSet bool
}

func (v NullableUpdateStorageDomainParam) Get() *UpdateStorageDomainParam {
	return v.value
}

func (v *NullableUpdateStorageDomainParam) Set(val *UpdateStorageDomainParam) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateStorageDomainParam) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateStorageDomainParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateStorageDomainParam(val *UpdateStorageDomainParam) *NullableUpdateStorageDomainParam {
	return &NullableUpdateStorageDomainParam{value: val, isSet: true}
}

func (v NullableUpdateStorageDomainParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateStorageDomainParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


