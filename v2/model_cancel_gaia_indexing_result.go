/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CancelGaiaIndexingResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CancelGaiaIndexingResult{}

// CancelGaiaIndexingResult Specifies the cancel indexing response.
type CancelGaiaIndexingResult struct {
	// Whether the cancellation is finished.
	Cancelled NullableBool `json:"cancelled,omitempty"`
}

// NewCancelGaiaIndexingResult instantiates a new CancelGaiaIndexingResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelGaiaIndexingResult() *CancelGaiaIndexingResult {
	this := CancelGaiaIndexingResult{}
	return &this
}

// NewCancelGaiaIndexingResultWithDefaults instantiates a new CancelGaiaIndexingResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelGaiaIndexingResultWithDefaults() *CancelGaiaIndexingResult {
	this := CancelGaiaIndexingResult{}
	return &this
}

// GetCancelled returns the Cancelled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancelGaiaIndexingResult) GetCancelled() bool {
	if o == nil || IsNil(o.Cancelled.Get()) {
		var ret bool
		return ret
	}
	return *o.Cancelled.Get()
}

// GetCancelledOk returns a tuple with the Cancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelGaiaIndexingResult) GetCancelledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cancelled.Get(), o.Cancelled.IsSet()
}

// HasCancelled returns a boolean if a field has been set.
func (o *CancelGaiaIndexingResult) HasCancelled() bool {
	if o != nil && o.Cancelled.IsSet() {
		return true
	}

	return false
}

// SetCancelled gets a reference to the given NullableBool and assigns it to the Cancelled field.
func (o *CancelGaiaIndexingResult) SetCancelled(v bool) {
	o.Cancelled.Set(&v)
}
// SetCancelledNil sets the value for Cancelled to be an explicit nil
func (o *CancelGaiaIndexingResult) SetCancelledNil() {
	o.Cancelled.Set(nil)
}

// UnsetCancelled ensures that no value is present for Cancelled, not even an explicit nil
func (o *CancelGaiaIndexingResult) UnsetCancelled() {
	o.Cancelled.Unset()
}

func (o CancelGaiaIndexingResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CancelGaiaIndexingResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cancelled.IsSet() {
		toSerialize["cancelled"] = o.Cancelled.Get()
	}
	return toSerialize, nil
}

type NullableCancelGaiaIndexingResult struct {
	value *CancelGaiaIndexingResult
	isSet bool
}

func (v NullableCancelGaiaIndexingResult) Get() *CancelGaiaIndexingResult {
	return v.value
}

func (v *NullableCancelGaiaIndexingResult) Set(val *CancelGaiaIndexingResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelGaiaIndexingResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelGaiaIndexingResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelGaiaIndexingResult(val *CancelGaiaIndexingResult) *NullableCancelGaiaIndexingResult {
	return &NullableCancelGaiaIndexingResult{value: val, isSet: true}
}

func (v NullableCancelGaiaIndexingResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelGaiaIndexingResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


