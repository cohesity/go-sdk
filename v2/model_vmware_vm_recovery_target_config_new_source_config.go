/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VmwareVmRecoveryTargetConfigNewSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmwareVmRecoveryTargetConfigNewSourceConfig{}

// VmwareVmRecoveryTargetConfigNewSourceConfig Specifies the new destination Source configuration parameters where the VMs will be recovered. This is mandatory if recoverToNewSource is set to true.
type VmwareVmRecoveryTargetConfigNewSourceConfig struct {
	// Specifies the type of VMware source to which the VMs are being restored.
	SourceType NullableString `json:"sourceType"`
	StandaloneHostParams *RecoverVmwareVmEsxiSourceConfig `json:"standaloneHostParams,omitempty"`
	VCenterParams *RecoverVmwareVmVCenterSourceConfig `json:"vCenterParams,omitempty"`
	VCloudDirectorParams *RecoverVmwareVmVCDSourceConfig `json:"vCloudDirectorParams,omitempty"`
}

type _VmwareVmRecoveryTargetConfigNewSourceConfig VmwareVmRecoveryTargetConfigNewSourceConfig

// NewVmwareVmRecoveryTargetConfigNewSourceConfig instantiates a new VmwareVmRecoveryTargetConfigNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareVmRecoveryTargetConfigNewSourceConfig(sourceType NullableString) *VmwareVmRecoveryTargetConfigNewSourceConfig {
	this := VmwareVmRecoveryTargetConfigNewSourceConfig{}
	this.SourceType = sourceType
	return &this
}

// NewVmwareVmRecoveryTargetConfigNewSourceConfigWithDefaults instantiates a new VmwareVmRecoveryTargetConfigNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareVmRecoveryTargetConfigNewSourceConfigWithDefaults() *VmwareVmRecoveryTargetConfigNewSourceConfig {
	this := VmwareVmRecoveryTargetConfigNewSourceConfig{}
	return &this
}

// GetSourceType returns the SourceType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) GetSourceType() string {
	if o == nil || o.SourceType.Get() == nil {
		var ret string
		return ret
	}

	return *o.SourceType.Get()
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceType.Get(), o.SourceType.IsSet()
}

// SetSourceType sets field value
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) SetSourceType(v string) {
	o.SourceType.Set(&v)
}

// GetStandaloneHostParams returns the StandaloneHostParams field value if set, zero value otherwise.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) GetStandaloneHostParams() RecoverVmwareVmEsxiSourceConfig {
	if o == nil || IsNil(o.StandaloneHostParams) {
		var ret RecoverVmwareVmEsxiSourceConfig
		return ret
	}
	return *o.StandaloneHostParams
}

// GetStandaloneHostParamsOk returns a tuple with the StandaloneHostParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) GetStandaloneHostParamsOk() (*RecoverVmwareVmEsxiSourceConfig, bool) {
	if o == nil || IsNil(o.StandaloneHostParams) {
		return nil, false
	}
	return o.StandaloneHostParams, true
}

// HasStandaloneHostParams returns a boolean if a field has been set.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) HasStandaloneHostParams() bool {
	if o != nil && !IsNil(o.StandaloneHostParams) {
		return true
	}

	return false
}

// SetStandaloneHostParams gets a reference to the given RecoverVmwareVmEsxiSourceConfig and assigns it to the StandaloneHostParams field.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) SetStandaloneHostParams(v RecoverVmwareVmEsxiSourceConfig) {
	o.StandaloneHostParams = &v
}

// GetVCenterParams returns the VCenterParams field value if set, zero value otherwise.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) GetVCenterParams() RecoverVmwareVmVCenterSourceConfig {
	if o == nil || IsNil(o.VCenterParams) {
		var ret RecoverVmwareVmVCenterSourceConfig
		return ret
	}
	return *o.VCenterParams
}

// GetVCenterParamsOk returns a tuple with the VCenterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) GetVCenterParamsOk() (*RecoverVmwareVmVCenterSourceConfig, bool) {
	if o == nil || IsNil(o.VCenterParams) {
		return nil, false
	}
	return o.VCenterParams, true
}

// HasVCenterParams returns a boolean if a field has been set.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) HasVCenterParams() bool {
	if o != nil && !IsNil(o.VCenterParams) {
		return true
	}

	return false
}

// SetVCenterParams gets a reference to the given RecoverVmwareVmVCenterSourceConfig and assigns it to the VCenterParams field.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) SetVCenterParams(v RecoverVmwareVmVCenterSourceConfig) {
	o.VCenterParams = &v
}

// GetVCloudDirectorParams returns the VCloudDirectorParams field value if set, zero value otherwise.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) GetVCloudDirectorParams() RecoverVmwareVmVCDSourceConfig {
	if o == nil || IsNil(o.VCloudDirectorParams) {
		var ret RecoverVmwareVmVCDSourceConfig
		return ret
	}
	return *o.VCloudDirectorParams
}

// GetVCloudDirectorParamsOk returns a tuple with the VCloudDirectorParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) GetVCloudDirectorParamsOk() (*RecoverVmwareVmVCDSourceConfig, bool) {
	if o == nil || IsNil(o.VCloudDirectorParams) {
		return nil, false
	}
	return o.VCloudDirectorParams, true
}

// HasVCloudDirectorParams returns a boolean if a field has been set.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) HasVCloudDirectorParams() bool {
	if o != nil && !IsNil(o.VCloudDirectorParams) {
		return true
	}

	return false
}

// SetVCloudDirectorParams gets a reference to the given RecoverVmwareVmVCDSourceConfig and assigns it to the VCloudDirectorParams field.
func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) SetVCloudDirectorParams(v RecoverVmwareVmVCDSourceConfig) {
	o.VCloudDirectorParams = &v
}

func (o VmwareVmRecoveryTargetConfigNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmwareVmRecoveryTargetConfigNewSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sourceType"] = o.SourceType.Get()
	if !IsNil(o.StandaloneHostParams) {
		toSerialize["standaloneHostParams"] = o.StandaloneHostParams
	}
	if !IsNil(o.VCenterParams) {
		toSerialize["vCenterParams"] = o.VCenterParams
	}
	if !IsNil(o.VCloudDirectorParams) {
		toSerialize["vCloudDirectorParams"] = o.VCloudDirectorParams
	}
	return toSerialize, nil
}

func (o *VmwareVmRecoveryTargetConfigNewSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVmwareVmRecoveryTargetConfigNewSourceConfig := _VmwareVmRecoveryTargetConfigNewSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVmwareVmRecoveryTargetConfigNewSourceConfig)

	if err != nil {
		return err
	}

	*o = VmwareVmRecoveryTargetConfigNewSourceConfig(varVmwareVmRecoveryTargetConfigNewSourceConfig)

	return err
}

type NullableVmwareVmRecoveryTargetConfigNewSourceConfig struct {
	value *VmwareVmRecoveryTargetConfigNewSourceConfig
	isSet bool
}

func (v NullableVmwareVmRecoveryTargetConfigNewSourceConfig) Get() *VmwareVmRecoveryTargetConfigNewSourceConfig {
	return v.value
}

func (v *NullableVmwareVmRecoveryTargetConfigNewSourceConfig) Set(val *VmwareVmRecoveryTargetConfigNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareVmRecoveryTargetConfigNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareVmRecoveryTargetConfigNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareVmRecoveryTargetConfigNewSourceConfig(val *VmwareVmRecoveryTargetConfigNewSourceConfig) *NullableVmwareVmRecoveryTargetConfigNewSourceConfig {
	return &NullableVmwareVmRecoveryTargetConfigNewSourceConfig{value: val, isSet: true}
}

func (v NullableVmwareVmRecoveryTargetConfigNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareVmRecoveryTargetConfigNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


