/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateGroupParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateGroupParams{}

// CreateGroupParams Specifies the parameters to create a new Cohesity Group.
type CreateGroupParams struct {
	// Specifies the description of the group.
	Description NullableString `json:"description,omitempty"`
	// Specifies the domain of the group. For active directories, this is the fully qualified domain name (FQDN). It is 'LOCAL' for local groups on the Cohesity Cluster. A group is uniquely identified by combination of the name and the domain.
	Domain string `json:"domain"`
	LocalGroupParams *CreateGroupParamsLocalGroupParams `json:"localGroupParams,omitempty"`
	// Specifies the name of the group.
	Name string `json:"name"`
	// Specifies whether the Group is restricted. A restricted group can only view & manage the objects it has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Specifies the Cohesity roles to associate with the group. The Cohesity roles determine privileges on the Cohesity Cluster for this group.
	Roles []string `json:"roles,omitempty"`
	// Specifies a list of tenant ids who can access this group.
	TenantIds []string `json:"tenantIds,omitempty"`
}

type _CreateGroupParams CreateGroupParams

// NewCreateGroupParams instantiates a new CreateGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGroupParams(domain string, name string) *CreateGroupParams {
	this := CreateGroupParams{}
	this.Domain = domain
	this.Name = name
	return &this
}

// NewCreateGroupParamsWithDefaults instantiates a new CreateGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGroupParamsWithDefaults() *CreateGroupParams {
	this := CreateGroupParams{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateGroupParams) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateGroupParams) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateGroupParams) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateGroupParams) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateGroupParams) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateGroupParams) UnsetDescription() {
	o.Description.Unset()
}

// GetDomain returns the Domain field value
func (o *CreateGroupParams) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *CreateGroupParams) SetDomain(v string) {
	o.Domain = v
}

// GetLocalGroupParams returns the LocalGroupParams field value if set, zero value otherwise.
func (o *CreateGroupParams) GetLocalGroupParams() CreateGroupParamsLocalGroupParams {
	if o == nil || IsNil(o.LocalGroupParams) {
		var ret CreateGroupParamsLocalGroupParams
		return ret
	}
	return *o.LocalGroupParams
}

// GetLocalGroupParamsOk returns a tuple with the LocalGroupParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetLocalGroupParamsOk() (*CreateGroupParamsLocalGroupParams, bool) {
	if o == nil || IsNil(o.LocalGroupParams) {
		return nil, false
	}
	return o.LocalGroupParams, true
}

// HasLocalGroupParams returns a boolean if a field has been set.
func (o *CreateGroupParams) HasLocalGroupParams() bool {
	if o != nil && !IsNil(o.LocalGroupParams) {
		return true
	}

	return false
}

// SetLocalGroupParams gets a reference to the given CreateGroupParamsLocalGroupParams and assigns it to the LocalGroupParams field.
func (o *CreateGroupParams) SetLocalGroupParams(v CreateGroupParamsLocalGroupParams) {
	o.LocalGroupParams = &v
}

// GetName returns the Name field value
func (o *CreateGroupParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *CreateGroupParams) SetName(v string) {
	o.Name = v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateGroupParams) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted.Get()) {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateGroupParams) GetRestrictedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *CreateGroupParams) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *CreateGroupParams) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *CreateGroupParams) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *CreateGroupParams) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *CreateGroupParams) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CreateGroupParams) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *CreateGroupParams) SetRoles(v []string) {
	o.Roles = v
}

// GetTenantIds returns the TenantIds field value if set, zero value otherwise.
func (o *CreateGroupParams) GetTenantIds() []string {
	if o == nil || IsNil(o.TenantIds) {
		var ret []string
		return ret
	}
	return o.TenantIds
}

// GetTenantIdsOk returns a tuple with the TenantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateGroupParams) GetTenantIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIds) {
		return nil, false
	}
	return o.TenantIds, true
}

// HasTenantIds returns a boolean if a field has been set.
func (o *CreateGroupParams) HasTenantIds() bool {
	if o != nil && !IsNil(o.TenantIds) {
		return true
	}

	return false
}

// SetTenantIds gets a reference to the given []string and assigns it to the TenantIds field.
func (o *CreateGroupParams) SetTenantIds(v []string) {
	o.TenantIds = v
}

func (o CreateGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGroupParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["domain"] = o.Domain
	if !IsNil(o.LocalGroupParams) {
		toSerialize["localGroupParams"] = o.LocalGroupParams
	}
	toSerialize["name"] = o.Name
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.TenantIds) {
		toSerialize["tenantIds"] = o.TenantIds
	}
	return toSerialize, nil
}

func (o *CreateGroupParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGroupParams := _CreateGroupParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGroupParams)

	if err != nil {
		return err
	}

	*o = CreateGroupParams(varCreateGroupParams)

	return err
}

type NullableCreateGroupParams struct {
	value *CreateGroupParams
	isSet bool
}

func (v NullableCreateGroupParams) Get() *CreateGroupParams {
	return v.value
}

func (v *NullableCreateGroupParams) Set(val *CreateGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGroupParams(val *CreateGroupParams) *NullableCreateGroupParams {
	return &NullableCreateGroupParams{value: val, isSet: true}
}

func (v NullableCreateGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


