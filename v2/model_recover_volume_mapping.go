/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverVolumeMapping type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverVolumeMapping{}

// RecoverVolumeMapping Specifies the mapping from a source volume to a destination volume.
type RecoverVolumeMapping struct {
	// Specifies the guid of the destination volume.
	DestinationVolumeGuid NullableString `json:"destinationVolumeGuid"`
	// Specifies the guid of the source volume.
	SourceVolumeGuid NullableString `json:"sourceVolumeGuid"`
}

type _RecoverVolumeMapping RecoverVolumeMapping

// NewRecoverVolumeMapping instantiates a new RecoverVolumeMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVolumeMapping(destinationVolumeGuid NullableString, sourceVolumeGuid NullableString) *RecoverVolumeMapping {
	this := RecoverVolumeMapping{}
	this.DestinationVolumeGuid = destinationVolumeGuid
	this.SourceVolumeGuid = sourceVolumeGuid
	return &this
}

// NewRecoverVolumeMappingWithDefaults instantiates a new RecoverVolumeMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVolumeMappingWithDefaults() *RecoverVolumeMapping {
	this := RecoverVolumeMapping{}
	return &this
}

// GetDestinationVolumeGuid returns the DestinationVolumeGuid field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RecoverVolumeMapping) GetDestinationVolumeGuid() string {
	if o == nil || o.DestinationVolumeGuid.Get() == nil {
		var ret string
		return ret
	}

	return *o.DestinationVolumeGuid.Get()
}

// GetDestinationVolumeGuidOk returns a tuple with the DestinationVolumeGuid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVolumeMapping) GetDestinationVolumeGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationVolumeGuid.Get(), o.DestinationVolumeGuid.IsSet()
}

// SetDestinationVolumeGuid sets field value
func (o *RecoverVolumeMapping) SetDestinationVolumeGuid(v string) {
	o.DestinationVolumeGuid.Set(&v)
}

// GetSourceVolumeGuid returns the SourceVolumeGuid field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RecoverVolumeMapping) GetSourceVolumeGuid() string {
	if o == nil || o.SourceVolumeGuid.Get() == nil {
		var ret string
		return ret
	}

	return *o.SourceVolumeGuid.Get()
}

// GetSourceVolumeGuidOk returns a tuple with the SourceVolumeGuid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVolumeMapping) GetSourceVolumeGuidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceVolumeGuid.Get(), o.SourceVolumeGuid.IsSet()
}

// SetSourceVolumeGuid sets field value
func (o *RecoverVolumeMapping) SetSourceVolumeGuid(v string) {
	o.SourceVolumeGuid.Set(&v)
}

func (o RecoverVolumeMapping) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverVolumeMapping) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["destinationVolumeGuid"] = o.DestinationVolumeGuid.Get()
	toSerialize["sourceVolumeGuid"] = o.SourceVolumeGuid.Get()
	return toSerialize, nil
}

func (o *RecoverVolumeMapping) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"destinationVolumeGuid",
		"sourceVolumeGuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverVolumeMapping := _RecoverVolumeMapping{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverVolumeMapping)

	if err != nil {
		return err
	}

	*o = RecoverVolumeMapping(varRecoverVolumeMapping)

	return err
}

type NullableRecoverVolumeMapping struct {
	value *RecoverVolumeMapping
	isSet bool
}

func (v NullableRecoverVolumeMapping) Get() *RecoverVolumeMapping {
	return v.value
}

func (v *NullableRecoverVolumeMapping) Set(val *RecoverVolumeMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVolumeMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVolumeMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVolumeMapping(val *RecoverVolumeMapping) *NullableRecoverVolumeMapping {
	return &NullableRecoverVolumeMapping{value: val, isSet: true}
}

func (v NullableRecoverVolumeMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVolumeMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


