/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuditLogConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuditLogConfig{}

// AuditLogConfig Specifies the generic object for audit log configuration.
type AuditLogConfig struct {
	// Specifies if audit log is enabled.
	Enabled NullableBool `json:"enabled"`
	// Specifies the audit log retention period in days. Audit logs generated before the period of time specified by retentionPeriodDays are removed from the Cohesity Cluster.
	RetentionPeriodDays NullableInt32 `json:"retentionPeriodDays"`
}

type _AuditLogConfig AuditLogConfig

// NewAuditLogConfig instantiates a new AuditLogConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuditLogConfig(enabled NullableBool, retentionPeriodDays NullableInt32) *AuditLogConfig {
	this := AuditLogConfig{}
	this.Enabled = enabled
	this.RetentionPeriodDays = retentionPeriodDays
	return &this
}

// NewAuditLogConfigWithDefaults instantiates a new AuditLogConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuditLogConfigWithDefaults() *AuditLogConfig {
	this := AuditLogConfig{}
	return &this
}

// GetEnabled returns the Enabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *AuditLogConfig) GetEnabled() bool {
	if o == nil || o.Enabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLogConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// SetEnabled sets field value
func (o *AuditLogConfig) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}

// GetRetentionPeriodDays returns the RetentionPeriodDays field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *AuditLogConfig) GetRetentionPeriodDays() int32 {
	if o == nil || o.RetentionPeriodDays.Get() == nil {
		var ret int32
		return ret
	}

	return *o.RetentionPeriodDays.Get()
}

// GetRetentionPeriodDaysOk returns a tuple with the RetentionPeriodDays field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuditLogConfig) GetRetentionPeriodDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.RetentionPeriodDays.Get(), o.RetentionPeriodDays.IsSet()
}

// SetRetentionPeriodDays sets field value
func (o *AuditLogConfig) SetRetentionPeriodDays(v int32) {
	o.RetentionPeriodDays.Set(&v)
}

func (o AuditLogConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuditLogConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled.Get()
	toSerialize["retentionPeriodDays"] = o.RetentionPeriodDays.Get()
	return toSerialize, nil
}

func (o *AuditLogConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"retentionPeriodDays",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuditLogConfig := _AuditLogConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuditLogConfig)

	if err != nil {
		return err
	}

	*o = AuditLogConfig(varAuditLogConfig)

	return err
}

type NullableAuditLogConfig struct {
	value *AuditLogConfig
	isSet bool
}

func (v NullableAuditLogConfig) Get() *AuditLogConfig {
	return v.value
}

func (v *NullableAuditLogConfig) Set(val *AuditLogConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAuditLogConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAuditLogConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuditLogConfig(val *AuditLogConfig) *NullableAuditLogConfig {
	return &NullableAuditLogConfig{value: val, isSet: true}
}

func (v NullableAuditLogConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuditLogConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


