/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsS3ObjectLevelParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsS3ObjectLevelParams{}

// AwsS3ObjectLevelParams Specifies the Aws S3 object level settings for object protection.
type AwsS3ObjectLevelParams struct {
	// Specifies the id of the object being protected. This can be a leaf level or non leaf level object.
	Id NullableInt64 `json:"id"`
	// Specifies the list of prefix paths excluded. Objects containing any of these prefixes in their path will be excluded.
	ObjectPrefixExclusions []string `json:"objectPrefixExclusions,omitempty"`
	// Specifies the list of prefix paths included. Objects containing any of these prefixes in their path will be included. Among inclusion and exclusion, inclusion will take precedence.
	ObjectPrefixInclusions []string `json:"objectPrefixInclusions,omitempty"`
}

type _AwsS3ObjectLevelParams AwsS3ObjectLevelParams

// NewAwsS3ObjectLevelParams instantiates a new AwsS3ObjectLevelParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsS3ObjectLevelParams(id NullableInt64) *AwsS3ObjectLevelParams {
	this := AwsS3ObjectLevelParams{}
	this.Id = id
	return &this
}

// NewAwsS3ObjectLevelParamsWithDefaults instantiates a new AwsS3ObjectLevelParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsS3ObjectLevelParamsWithDefaults() *AwsS3ObjectLevelParams {
	this := AwsS3ObjectLevelParams{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *AwsS3ObjectLevelParams) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsS3ObjectLevelParams) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *AwsS3ObjectLevelParams) SetId(v int64) {
	o.Id.Set(&v)
}

// GetObjectPrefixExclusions returns the ObjectPrefixExclusions field value if set, zero value otherwise.
func (o *AwsS3ObjectLevelParams) GetObjectPrefixExclusions() []string {
	if o == nil || IsNil(o.ObjectPrefixExclusions) {
		var ret []string
		return ret
	}
	return o.ObjectPrefixExclusions
}

// GetObjectPrefixExclusionsOk returns a tuple with the ObjectPrefixExclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3ObjectLevelParams) GetObjectPrefixExclusionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ObjectPrefixExclusions) {
		return nil, false
	}
	return o.ObjectPrefixExclusions, true
}

// HasObjectPrefixExclusions returns a boolean if a field has been set.
func (o *AwsS3ObjectLevelParams) HasObjectPrefixExclusions() bool {
	if o != nil && !IsNil(o.ObjectPrefixExclusions) {
		return true
	}

	return false
}

// SetObjectPrefixExclusions gets a reference to the given []string and assigns it to the ObjectPrefixExclusions field.
func (o *AwsS3ObjectLevelParams) SetObjectPrefixExclusions(v []string) {
	o.ObjectPrefixExclusions = v
}

// GetObjectPrefixInclusions returns the ObjectPrefixInclusions field value if set, zero value otherwise.
func (o *AwsS3ObjectLevelParams) GetObjectPrefixInclusions() []string {
	if o == nil || IsNil(o.ObjectPrefixInclusions) {
		var ret []string
		return ret
	}
	return o.ObjectPrefixInclusions
}

// GetObjectPrefixInclusionsOk returns a tuple with the ObjectPrefixInclusions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3ObjectLevelParams) GetObjectPrefixInclusionsOk() ([]string, bool) {
	if o == nil || IsNil(o.ObjectPrefixInclusions) {
		return nil, false
	}
	return o.ObjectPrefixInclusions, true
}

// HasObjectPrefixInclusions returns a boolean if a field has been set.
func (o *AwsS3ObjectLevelParams) HasObjectPrefixInclusions() bool {
	if o != nil && !IsNil(o.ObjectPrefixInclusions) {
		return true
	}

	return false
}

// SetObjectPrefixInclusions gets a reference to the given []string and assigns it to the ObjectPrefixInclusions field.
func (o *AwsS3ObjectLevelParams) SetObjectPrefixInclusions(v []string) {
	o.ObjectPrefixInclusions = v
}

func (o AwsS3ObjectLevelParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsS3ObjectLevelParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	if !IsNil(o.ObjectPrefixExclusions) {
		toSerialize["objectPrefixExclusions"] = o.ObjectPrefixExclusions
	}
	if !IsNil(o.ObjectPrefixInclusions) {
		toSerialize["objectPrefixInclusions"] = o.ObjectPrefixInclusions
	}
	return toSerialize, nil
}

func (o *AwsS3ObjectLevelParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsS3ObjectLevelParams := _AwsS3ObjectLevelParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsS3ObjectLevelParams)

	if err != nil {
		return err
	}

	*o = AwsS3ObjectLevelParams(varAwsS3ObjectLevelParams)

	return err
}

type NullableAwsS3ObjectLevelParams struct {
	value *AwsS3ObjectLevelParams
	isSet bool
}

func (v NullableAwsS3ObjectLevelParams) Get() *AwsS3ObjectLevelParams {
	return v.value
}

func (v *NullableAwsS3ObjectLevelParams) Set(val *AwsS3ObjectLevelParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsS3ObjectLevelParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsS3ObjectLevelParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsS3ObjectLevelParams(val *AwsS3ObjectLevelParams) *NullableAwsS3ObjectLevelParams {
	return &NullableAwsS3ObjectLevelParams{value: val, isSet: true}
}

func (v NullableAwsS3ObjectLevelParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsS3ObjectLevelParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


