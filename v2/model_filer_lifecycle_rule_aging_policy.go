/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FilerLifecycleRuleAgingPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilerLifecycleRuleAgingPolicy{}

// FilerLifecycleRuleAgingPolicy Specifies the file's selection based on of the following: last modification time, creation time or last access time. This filed is mandatory for rules that are Allow type. Note: Both the fields days and dateInUsecs are mutually exclusive to each other.
type FilerLifecycleRuleAgingPolicy struct {
	// Specifies the criteria for aging
	AgingCriteria NullableString `json:"agingCriteria"`
	// Files that possess timestamps exceeding the specified value will be eligible for selection.
	DateInUsecs NullableInt64 `json:"dateInUsecs,omitempty"`
	// Files that possess timestamps older than the specified value in days will be eligible for selection.
	Days NullableInt32 `json:"days,omitempty"`
}

type _FilerLifecycleRuleAgingPolicy FilerLifecycleRuleAgingPolicy

// NewFilerLifecycleRuleAgingPolicy instantiates a new FilerLifecycleRuleAgingPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilerLifecycleRuleAgingPolicy(agingCriteria NullableString) *FilerLifecycleRuleAgingPolicy {
	this := FilerLifecycleRuleAgingPolicy{}
	this.AgingCriteria = agingCriteria
	return &this
}

// NewFilerLifecycleRuleAgingPolicyWithDefaults instantiates a new FilerLifecycleRuleAgingPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilerLifecycleRuleAgingPolicyWithDefaults() *FilerLifecycleRuleAgingPolicy {
	this := FilerLifecycleRuleAgingPolicy{}
	return &this
}

// GetAgingCriteria returns the AgingCriteria field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilerLifecycleRuleAgingPolicy) GetAgingCriteria() string {
	if o == nil || o.AgingCriteria.Get() == nil {
		var ret string
		return ret
	}

	return *o.AgingCriteria.Get()
}

// GetAgingCriteriaOk returns a tuple with the AgingCriteria field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerLifecycleRuleAgingPolicy) GetAgingCriteriaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgingCriteria.Get(), o.AgingCriteria.IsSet()
}

// SetAgingCriteria sets field value
func (o *FilerLifecycleRuleAgingPolicy) SetAgingCriteria(v string) {
	o.AgingCriteria.Set(&v)
}

// GetDateInUsecs returns the DateInUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilerLifecycleRuleAgingPolicy) GetDateInUsecs() int64 {
	if o == nil || IsNil(o.DateInUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.DateInUsecs.Get()
}

// GetDateInUsecsOk returns a tuple with the DateInUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerLifecycleRuleAgingPolicy) GetDateInUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateInUsecs.Get(), o.DateInUsecs.IsSet()
}

// HasDateInUsecs returns a boolean if a field has been set.
func (o *FilerLifecycleRuleAgingPolicy) HasDateInUsecs() bool {
	if o != nil && o.DateInUsecs.IsSet() {
		return true
	}

	return false
}

// SetDateInUsecs gets a reference to the given NullableInt64 and assigns it to the DateInUsecs field.
func (o *FilerLifecycleRuleAgingPolicy) SetDateInUsecs(v int64) {
	o.DateInUsecs.Set(&v)
}
// SetDateInUsecsNil sets the value for DateInUsecs to be an explicit nil
func (o *FilerLifecycleRuleAgingPolicy) SetDateInUsecsNil() {
	o.DateInUsecs.Set(nil)
}

// UnsetDateInUsecs ensures that no value is present for DateInUsecs, not even an explicit nil
func (o *FilerLifecycleRuleAgingPolicy) UnsetDateInUsecs() {
	o.DateInUsecs.Unset()
}

// GetDays returns the Days field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilerLifecycleRuleAgingPolicy) GetDays() int32 {
	if o == nil || IsNil(o.Days.Get()) {
		var ret int32
		return ret
	}
	return *o.Days.Get()
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerLifecycleRuleAgingPolicy) GetDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Days.Get(), o.Days.IsSet()
}

// HasDays returns a boolean if a field has been set.
func (o *FilerLifecycleRuleAgingPolicy) HasDays() bool {
	if o != nil && o.Days.IsSet() {
		return true
	}

	return false
}

// SetDays gets a reference to the given NullableInt32 and assigns it to the Days field.
func (o *FilerLifecycleRuleAgingPolicy) SetDays(v int32) {
	o.Days.Set(&v)
}
// SetDaysNil sets the value for Days to be an explicit nil
func (o *FilerLifecycleRuleAgingPolicy) SetDaysNil() {
	o.Days.Set(nil)
}

// UnsetDays ensures that no value is present for Days, not even an explicit nil
func (o *FilerLifecycleRuleAgingPolicy) UnsetDays() {
	o.Days.Unset()
}

func (o FilerLifecycleRuleAgingPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilerLifecycleRuleAgingPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["agingCriteria"] = o.AgingCriteria.Get()
	if o.DateInUsecs.IsSet() {
		toSerialize["dateInUsecs"] = o.DateInUsecs.Get()
	}
	if o.Days.IsSet() {
		toSerialize["days"] = o.Days.Get()
	}
	return toSerialize, nil
}

func (o *FilerLifecycleRuleAgingPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"agingCriteria",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilerLifecycleRuleAgingPolicy := _FilerLifecycleRuleAgingPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilerLifecycleRuleAgingPolicy)

	if err != nil {
		return err
	}

	*o = FilerLifecycleRuleAgingPolicy(varFilerLifecycleRuleAgingPolicy)

	return err
}

type NullableFilerLifecycleRuleAgingPolicy struct {
	value *FilerLifecycleRuleAgingPolicy
	isSet bool
}

func (v NullableFilerLifecycleRuleAgingPolicy) Get() *FilerLifecycleRuleAgingPolicy {
	return v.value
}

func (v *NullableFilerLifecycleRuleAgingPolicy) Set(val *FilerLifecycleRuleAgingPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableFilerLifecycleRuleAgingPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableFilerLifecycleRuleAgingPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilerLifecycleRuleAgingPolicy(val *FilerLifecycleRuleAgingPolicy) *NullableFilerLifecycleRuleAgingPolicy {
	return &NullableFilerLifecycleRuleAgingPolicy{value: val, isSet: true}
}

func (v NullableFilerLifecycleRuleAgingPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilerLifecycleRuleAgingPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


