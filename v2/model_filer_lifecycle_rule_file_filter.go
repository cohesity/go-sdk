/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FilerLifecycleRuleFileFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilerLifecycleRuleFileFilter{}

// FilerLifecycleRuleFileFilter Specifies the filter used to identify files that a Lifecycle Rule applies to.
type FilerLifecycleRuleFileFilter struct {
	// Specifies the file's selection based on their extension. Eg: .pdf, .txt, etc. Note: Provide extensions here with the initial '.' character, example .pdf and not pdf. Extensions are case-insensitive, i.e. .pdf extension in filter will delete all files have .pdf, .PDF, .pDF, etc.
	FileExtensions []string `json:"fileExtensions,omitempty"`
	FileSize *FilerLifecycleRuleFilterFileSize `json:"fileSize,omitempty"`
}

// NewFilerLifecycleRuleFileFilter instantiates a new FilerLifecycleRuleFileFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilerLifecycleRuleFileFilter() *FilerLifecycleRuleFileFilter {
	this := FilerLifecycleRuleFileFilter{}
	return &this
}

// NewFilerLifecycleRuleFileFilterWithDefaults instantiates a new FilerLifecycleRuleFileFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilerLifecycleRuleFileFilterWithDefaults() *FilerLifecycleRuleFileFilter {
	this := FilerLifecycleRuleFileFilter{}
	return &this
}

// GetFileExtensions returns the FileExtensions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilerLifecycleRuleFileFilter) GetFileExtensions() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.FileExtensions
}

// GetFileExtensionsOk returns a tuple with the FileExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilerLifecycleRuleFileFilter) GetFileExtensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.FileExtensions) {
		return nil, false
	}
	return o.FileExtensions, true
}

// HasFileExtensions returns a boolean if a field has been set.
func (o *FilerLifecycleRuleFileFilter) HasFileExtensions() bool {
	if o != nil && !IsNil(o.FileExtensions) {
		return true
	}

	return false
}

// SetFileExtensions gets a reference to the given []string and assigns it to the FileExtensions field.
func (o *FilerLifecycleRuleFileFilter) SetFileExtensions(v []string) {
	o.FileExtensions = v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *FilerLifecycleRuleFileFilter) GetFileSize() FilerLifecycleRuleFilterFileSize {
	if o == nil || IsNil(o.FileSize) {
		var ret FilerLifecycleRuleFilterFileSize
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FilerLifecycleRuleFileFilter) GetFileSizeOk() (*FilerLifecycleRuleFilterFileSize, bool) {
	if o == nil || IsNil(o.FileSize) {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *FilerLifecycleRuleFileFilter) HasFileSize() bool {
	if o != nil && !IsNil(o.FileSize) {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given FilerLifecycleRuleFilterFileSize and assigns it to the FileSize field.
func (o *FilerLifecycleRuleFileFilter) SetFileSize(v FilerLifecycleRuleFilterFileSize) {
	o.FileSize = &v
}

func (o FilerLifecycleRuleFileFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilerLifecycleRuleFileFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FileExtensions != nil {
		toSerialize["fileExtensions"] = o.FileExtensions
	}
	if !IsNil(o.FileSize) {
		toSerialize["fileSize"] = o.FileSize
	}
	return toSerialize, nil
}

type NullableFilerLifecycleRuleFileFilter struct {
	value *FilerLifecycleRuleFileFilter
	isSet bool
}

func (v NullableFilerLifecycleRuleFileFilter) Get() *FilerLifecycleRuleFileFilter {
	return v.value
}

func (v *NullableFilerLifecycleRuleFileFilter) Set(val *FilerLifecycleRuleFileFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableFilerLifecycleRuleFileFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableFilerLifecycleRuleFileFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilerLifecycleRuleFileFilter(val *FilerLifecycleRuleFileFilter) *NullableFilerLifecycleRuleFileFilter {
	return &NullableFilerLifecycleRuleFileFilter{value: val, isSet: true}
}

func (v NullableFilerLifecycleRuleFileFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilerLifecycleRuleFileFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


