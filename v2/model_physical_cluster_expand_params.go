/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PhysicalClusterExpandParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhysicalClusterExpandParams{}

// PhysicalClusterExpandParams Parameters to expand physical edition cluster.
type PhysicalClusterExpandParams struct {
	// Chassis serial to rack id mapping configuration.
	ChassisRackConfigs []ChassisRackConfigParams `json:"chassisRackConfigs,omitempty"`
	// Configuration of the nodes.
	NodeConfigs []PhysicalNodeConfigParams `json:"nodeConfigs"`
	// Virtual IPs to add to the cluster.
	Vips []string `json:"vips,omitempty"`
}

type _PhysicalClusterExpandParams PhysicalClusterExpandParams

// NewPhysicalClusterExpandParams instantiates a new PhysicalClusterExpandParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalClusterExpandParams(nodeConfigs []PhysicalNodeConfigParams) *PhysicalClusterExpandParams {
	this := PhysicalClusterExpandParams{}
	this.NodeConfigs = nodeConfigs
	return &this
}

// NewPhysicalClusterExpandParamsWithDefaults instantiates a new PhysicalClusterExpandParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalClusterExpandParamsWithDefaults() *PhysicalClusterExpandParams {
	this := PhysicalClusterExpandParams{}
	return &this
}

// GetChassisRackConfigs returns the ChassisRackConfigs field value if set, zero value otherwise.
func (o *PhysicalClusterExpandParams) GetChassisRackConfigs() []ChassisRackConfigParams {
	if o == nil || IsNil(o.ChassisRackConfigs) {
		var ret []ChassisRackConfigParams
		return ret
	}
	return o.ChassisRackConfigs
}

// GetChassisRackConfigsOk returns a tuple with the ChassisRackConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalClusterExpandParams) GetChassisRackConfigsOk() ([]ChassisRackConfigParams, bool) {
	if o == nil || IsNil(o.ChassisRackConfigs) {
		return nil, false
	}
	return o.ChassisRackConfigs, true
}

// HasChassisRackConfigs returns a boolean if a field has been set.
func (o *PhysicalClusterExpandParams) HasChassisRackConfigs() bool {
	if o != nil && !IsNil(o.ChassisRackConfigs) {
		return true
	}

	return false
}

// SetChassisRackConfigs gets a reference to the given []ChassisRackConfigParams and assigns it to the ChassisRackConfigs field.
func (o *PhysicalClusterExpandParams) SetChassisRackConfigs(v []ChassisRackConfigParams) {
	o.ChassisRackConfigs = v
}

// GetNodeConfigs returns the NodeConfigs field value
func (o *PhysicalClusterExpandParams) GetNodeConfigs() []PhysicalNodeConfigParams {
	if o == nil {
		var ret []PhysicalNodeConfigParams
		return ret
	}

	return o.NodeConfigs
}

// GetNodeConfigsOk returns a tuple with the NodeConfigs field value
// and a boolean to check if the value has been set.
func (o *PhysicalClusterExpandParams) GetNodeConfigsOk() ([]PhysicalNodeConfigParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeConfigs, true
}

// SetNodeConfigs sets field value
func (o *PhysicalClusterExpandParams) SetNodeConfigs(v []PhysicalNodeConfigParams) {
	o.NodeConfigs = v
}

// GetVips returns the Vips field value if set, zero value otherwise.
func (o *PhysicalClusterExpandParams) GetVips() []string {
	if o == nil || IsNil(o.Vips) {
		var ret []string
		return ret
	}
	return o.Vips
}

// GetVipsOk returns a tuple with the Vips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalClusterExpandParams) GetVipsOk() ([]string, bool) {
	if o == nil || IsNil(o.Vips) {
		return nil, false
	}
	return o.Vips, true
}

// HasVips returns a boolean if a field has been set.
func (o *PhysicalClusterExpandParams) HasVips() bool {
	if o != nil && !IsNil(o.Vips) {
		return true
	}

	return false
}

// SetVips gets a reference to the given []string and assigns it to the Vips field.
func (o *PhysicalClusterExpandParams) SetVips(v []string) {
	o.Vips = v
}

func (o PhysicalClusterExpandParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhysicalClusterExpandParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChassisRackConfigs) {
		toSerialize["chassisRackConfigs"] = o.ChassisRackConfigs
	}
	toSerialize["nodeConfigs"] = o.NodeConfigs
	if !IsNil(o.Vips) {
		toSerialize["vips"] = o.Vips
	}
	return toSerialize, nil
}

func (o *PhysicalClusterExpandParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeConfigs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPhysicalClusterExpandParams := _PhysicalClusterExpandParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPhysicalClusterExpandParams)

	if err != nil {
		return err
	}

	*o = PhysicalClusterExpandParams(varPhysicalClusterExpandParams)

	return err
}

type NullablePhysicalClusterExpandParams struct {
	value *PhysicalClusterExpandParams
	isSet bool
}

func (v NullablePhysicalClusterExpandParams) Get() *PhysicalClusterExpandParams {
	return v.value
}

func (v *NullablePhysicalClusterExpandParams) Set(val *PhysicalClusterExpandParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalClusterExpandParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalClusterExpandParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalClusterExpandParams(val *PhysicalClusterExpandParams) *NullablePhysicalClusterExpandParams {
	return &NullablePhysicalClusterExpandParams{value: val, isSet: true}
}

func (v NullablePhysicalClusterExpandParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalClusterExpandParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


