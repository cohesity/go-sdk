/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the LegalHold type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LegalHold{}

// LegalHold Legal hold action type for protection runs.
type LegalHold struct {
	// The action type for legal hold on a protection run i.e. enable or release
	ActionType *string `json:"actionType,omitempty"`
}

// NewLegalHold instantiates a new LegalHold object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLegalHold() *LegalHold {
	this := LegalHold{}
	return &this
}

// NewLegalHoldWithDefaults instantiates a new LegalHold object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegalHoldWithDefaults() *LegalHold {
	this := LegalHold{}
	return &this
}

// GetActionType returns the ActionType field value if set, zero value otherwise.
func (o *LegalHold) GetActionType() string {
	if o == nil || IsNil(o.ActionType) {
		var ret string
		return ret
	}
	return *o.ActionType
}

// GetActionTypeOk returns a tuple with the ActionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LegalHold) GetActionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ActionType) {
		return nil, false
	}
	return o.ActionType, true
}

// HasActionType returns a boolean if a field has been set.
func (o *LegalHold) HasActionType() bool {
	if o != nil && !IsNil(o.ActionType) {
		return true
	}

	return false
}

// SetActionType gets a reference to the given string and assigns it to the ActionType field.
func (o *LegalHold) SetActionType(v string) {
	o.ActionType = &v
}

func (o LegalHold) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LegalHold) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ActionType) {
		toSerialize["actionType"] = o.ActionType
	}
	return toSerialize, nil
}

type NullableLegalHold struct {
	value *LegalHold
	isSet bool
}

func (v NullableLegalHold) Get() *LegalHold {
	return v.value
}

func (v *NullableLegalHold) Set(val *LegalHold) {
	v.value = val
	v.isSet = true
}

func (v NullableLegalHold) IsSet() bool {
	return v.isSet
}

func (v *NullableLegalHold) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLegalHold(val *LegalHold) *NullableLegalHold {
	return &NullableLegalHold{value: val, isSet: true}
}

func (v NullableLegalHold) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLegalHold) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


