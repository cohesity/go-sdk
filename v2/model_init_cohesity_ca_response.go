/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the InitCohesityCaResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InitCohesityCaResponse{}

// InitCohesityCaResponse Specifies the response to init cohesity ca request
type InitCohesityCaResponse struct {
	// Specifies ca cert in pem format
	CaCertChain []string `json:"caCertChain,omitempty"`
}

// NewInitCohesityCaResponse instantiates a new InitCohesityCaResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInitCohesityCaResponse() *InitCohesityCaResponse {
	this := InitCohesityCaResponse{}
	return &this
}

// NewInitCohesityCaResponseWithDefaults instantiates a new InitCohesityCaResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInitCohesityCaResponseWithDefaults() *InitCohesityCaResponse {
	this := InitCohesityCaResponse{}
	return &this
}

// GetCaCertChain returns the CaCertChain field value if set, zero value otherwise.
func (o *InitCohesityCaResponse) GetCaCertChain() []string {
	if o == nil || IsNil(o.CaCertChain) {
		var ret []string
		return ret
	}
	return o.CaCertChain
}

// GetCaCertChainOk returns a tuple with the CaCertChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InitCohesityCaResponse) GetCaCertChainOk() ([]string, bool) {
	if o == nil || IsNil(o.CaCertChain) {
		return nil, false
	}
	return o.CaCertChain, true
}

// HasCaCertChain returns a boolean if a field has been set.
func (o *InitCohesityCaResponse) HasCaCertChain() bool {
	if o != nil && !IsNil(o.CaCertChain) {
		return true
	}

	return false
}

// SetCaCertChain gets a reference to the given []string and assigns it to the CaCertChain field.
func (o *InitCohesityCaResponse) SetCaCertChain(v []string) {
	o.CaCertChain = v
}

func (o InitCohesityCaResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InitCohesityCaResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaCertChain) {
		toSerialize["caCertChain"] = o.CaCertChain
	}
	return toSerialize, nil
}

type NullableInitCohesityCaResponse struct {
	value *InitCohesityCaResponse
	isSet bool
}

func (v NullableInitCohesityCaResponse) Get() *InitCohesityCaResponse {
	return v.value
}

func (v *NullableInitCohesityCaResponse) Set(val *InitCohesityCaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableInitCohesityCaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableInitCohesityCaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInitCohesityCaResponse(val *InitCohesityCaResponse) *NullableInitCohesityCaResponse {
	return &NullableInitCohesityCaResponse{value: val, isSet: true}
}

func (v NullableInitCohesityCaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInitCohesityCaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


