/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the HostMappings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HostMappings{}

// HostMappings Specifies the list of host mappings
type HostMappings struct {
	// Specifies the list of host entries
	Hosts []HostEntry `json:"hosts,omitempty"`
}

// NewHostMappings instantiates a new HostMappings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostMappings() *HostMappings {
	this := HostMappings{}
	return &this
}

// NewHostMappingsWithDefaults instantiates a new HostMappings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostMappingsWithDefaults() *HostMappings {
	this := HostMappings{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise.
func (o *HostMappings) GetHosts() []HostEntry {
	if o == nil || IsNil(o.Hosts) {
		var ret []HostEntry
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HostMappings) GetHostsOk() ([]HostEntry, bool) {
	if o == nil || IsNil(o.Hosts) {
		return nil, false
	}
	return o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *HostMappings) HasHosts() bool {
	if o != nil && !IsNil(o.Hosts) {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []HostEntry and assigns it to the Hosts field.
func (o *HostMappings) SetHosts(v []HostEntry) {
	o.Hosts = v
}

func (o HostMappings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HostMappings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Hosts) {
		toSerialize["hosts"] = o.Hosts
	}
	return toSerialize, nil
}

type NullableHostMappings struct {
	value *HostMappings
	isSet bool
}

func (v NullableHostMappings) Get() *HostMappings {
	return v.value
}

func (v *NullableHostMappings) Set(val *HostMappings) {
	v.value = val
	v.isSet = true
}

func (v NullableHostMappings) IsSet() bool {
	return v.isSet
}

func (v *NullableHostMappings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostMappings(val *HostMappings) *NullableHostMappings {
	return &NullableHostMappings{value: val, isSet: true}
}

func (v NullableHostMappings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostMappings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


