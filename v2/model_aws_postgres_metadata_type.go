/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AwsPostgresMetadataType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsPostgresMetadataType{}

// AwsPostgresMetadataType Specifies the metadata type for AWS postgres.
type AwsPostgresMetadataType struct {
	// Specifies the types of metadatas associated to entity.
	EntityMetadataType *string `json:"entityMetadataType,omitempty"`
}

// NewAwsPostgresMetadataType instantiates a new AwsPostgresMetadataType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsPostgresMetadataType() *AwsPostgresMetadataType {
	this := AwsPostgresMetadataType{}
	return &this
}

// NewAwsPostgresMetadataTypeWithDefaults instantiates a new AwsPostgresMetadataType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsPostgresMetadataTypeWithDefaults() *AwsPostgresMetadataType {
	this := AwsPostgresMetadataType{}
	return &this
}

// GetEntityMetadataType returns the EntityMetadataType field value if set, zero value otherwise.
func (o *AwsPostgresMetadataType) GetEntityMetadataType() string {
	if o == nil || IsNil(o.EntityMetadataType) {
		var ret string
		return ret
	}
	return *o.EntityMetadataType
}

// GetEntityMetadataTypeOk returns a tuple with the EntityMetadataType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsPostgresMetadataType) GetEntityMetadataTypeOk() (*string, bool) {
	if o == nil || IsNil(o.EntityMetadataType) {
		return nil, false
	}
	return o.EntityMetadataType, true
}

// HasEntityMetadataType returns a boolean if a field has been set.
func (o *AwsPostgresMetadataType) HasEntityMetadataType() bool {
	if o != nil && !IsNil(o.EntityMetadataType) {
		return true
	}

	return false
}

// SetEntityMetadataType gets a reference to the given string and assigns it to the EntityMetadataType field.
func (o *AwsPostgresMetadataType) SetEntityMetadataType(v string) {
	o.EntityMetadataType = &v
}

func (o AwsPostgresMetadataType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsPostgresMetadataType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityMetadataType) {
		toSerialize["entityMetadataType"] = o.EntityMetadataType
	}
	return toSerialize, nil
}

type NullableAwsPostgresMetadataType struct {
	value *AwsPostgresMetadataType
	isSet bool
}

func (v NullableAwsPostgresMetadataType) Get() *AwsPostgresMetadataType {
	return v.value
}

func (v *NullableAwsPostgresMetadataType) Set(val *AwsPostgresMetadataType) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsPostgresMetadataType) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsPostgresMetadataType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsPostgresMetadataType(val *AwsPostgresMetadataType) *NullableAwsPostgresMetadataType {
	return &NullableAwsPostgresMetadataType{value: val, isSet: true}
}

func (v NullableAwsPostgresMetadataType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsPostgresMetadataType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


