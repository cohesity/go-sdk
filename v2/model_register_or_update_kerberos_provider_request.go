/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RegisterOrUpdateKerberosProviderRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RegisterOrUpdateKerberosProviderRequest{}

// RegisterOrUpdateKerberosProviderRequest Specifies the request to register or update a Kerberos Provider.
type RegisterOrUpdateKerberosProviderRequest struct {
	// Specifies the admin server used for registration from the list of KDC servers.
	AdminServer NullableString `json:"adminServer"`
	// Specifies the DNS routable host alias names.
	HostAlias []string `json:"hostAlias"`
	// Specifies the id.
	Id NullableString `json:"id,omitempty" validate:"regexp=^\\\\d+:\\\\d+:\\\\d+$"`
	// Specifies a list of Key distribution Centre(KDC) Severs.
	KdcServers []string `json:"kdcServers"`
	// Specifies the LDAP provider id to be mapped
	LdapProviderId NullableInt64 `json:"ldapProviderId,omitempty"`
	// Specifies if specified host alias should overwrite existing host alias.
	OverwritehostAlias NullableBool `json:"overwritehostAlias,omitempty"`
	// Specifies the realm name.
	RealmName NullableString `json:"realmName"`
	// Specifies the password of Kerberos admin principal.
	AdminPassword NullableString `json:"adminPassword"`
	// Specifies the name of the Kerberos admin principal.
	AdminPrincipal NullableString `json:"adminPrincipal,omitempty"`
}

type _RegisterOrUpdateKerberosProviderRequest RegisterOrUpdateKerberosProviderRequest

// NewRegisterOrUpdateKerberosProviderRequest instantiates a new RegisterOrUpdateKerberosProviderRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterOrUpdateKerberosProviderRequest(adminServer NullableString, hostAlias []string, kdcServers []string, realmName NullableString, adminPassword NullableString) *RegisterOrUpdateKerberosProviderRequest {
	this := RegisterOrUpdateKerberosProviderRequest{}
	this.AdminServer = adminServer
	this.HostAlias = hostAlias
	this.KdcServers = kdcServers
	this.RealmName = realmName
	this.AdminPassword = adminPassword
	return &this
}

// NewRegisterOrUpdateKerberosProviderRequestWithDefaults instantiates a new RegisterOrUpdateKerberosProviderRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterOrUpdateKerberosProviderRequestWithDefaults() *RegisterOrUpdateKerberosProviderRequest {
	this := RegisterOrUpdateKerberosProviderRequest{}
	return &this
}

// GetAdminServer returns the AdminServer field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RegisterOrUpdateKerberosProviderRequest) GetAdminServer() string {
	if o == nil || o.AdminServer.Get() == nil {
		var ret string
		return ret
	}

	return *o.AdminServer.Get()
}

// GetAdminServerOk returns a tuple with the AdminServer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterOrUpdateKerberosProviderRequest) GetAdminServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminServer.Get(), o.AdminServer.IsSet()
}

// SetAdminServer sets field value
func (o *RegisterOrUpdateKerberosProviderRequest) SetAdminServer(v string) {
	o.AdminServer.Set(&v)
}

// GetHostAlias returns the HostAlias field value
func (o *RegisterOrUpdateKerberosProviderRequest) GetHostAlias() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.HostAlias
}

// GetHostAliasOk returns a tuple with the HostAlias field value
// and a boolean to check if the value has been set.
func (o *RegisterOrUpdateKerberosProviderRequest) GetHostAliasOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HostAlias, true
}

// SetHostAlias sets field value
func (o *RegisterOrUpdateKerberosProviderRequest) SetHostAlias(v []string) {
	o.HostAlias = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterOrUpdateKerberosProviderRequest) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterOrUpdateKerberosProviderRequest) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *RegisterOrUpdateKerberosProviderRequest) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *RegisterOrUpdateKerberosProviderRequest) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *RegisterOrUpdateKerberosProviderRequest) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *RegisterOrUpdateKerberosProviderRequest) UnsetId() {
	o.Id.Unset()
}

// GetKdcServers returns the KdcServers field value
func (o *RegisterOrUpdateKerberosProviderRequest) GetKdcServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.KdcServers
}

// GetKdcServersOk returns a tuple with the KdcServers field value
// and a boolean to check if the value has been set.
func (o *RegisterOrUpdateKerberosProviderRequest) GetKdcServersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KdcServers, true
}

// SetKdcServers sets field value
func (o *RegisterOrUpdateKerberosProviderRequest) SetKdcServers(v []string) {
	o.KdcServers = v
}

// GetLdapProviderId returns the LdapProviderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterOrUpdateKerberosProviderRequest) GetLdapProviderId() int64 {
	if o == nil || IsNil(o.LdapProviderId.Get()) {
		var ret int64
		return ret
	}
	return *o.LdapProviderId.Get()
}

// GetLdapProviderIdOk returns a tuple with the LdapProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterOrUpdateKerberosProviderRequest) GetLdapProviderIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LdapProviderId.Get(), o.LdapProviderId.IsSet()
}

// HasLdapProviderId returns a boolean if a field has been set.
func (o *RegisterOrUpdateKerberosProviderRequest) HasLdapProviderId() bool {
	if o != nil && o.LdapProviderId.IsSet() {
		return true
	}

	return false
}

// SetLdapProviderId gets a reference to the given NullableInt64 and assigns it to the LdapProviderId field.
func (o *RegisterOrUpdateKerberosProviderRequest) SetLdapProviderId(v int64) {
	o.LdapProviderId.Set(&v)
}
// SetLdapProviderIdNil sets the value for LdapProviderId to be an explicit nil
func (o *RegisterOrUpdateKerberosProviderRequest) SetLdapProviderIdNil() {
	o.LdapProviderId.Set(nil)
}

// UnsetLdapProviderId ensures that no value is present for LdapProviderId, not even an explicit nil
func (o *RegisterOrUpdateKerberosProviderRequest) UnsetLdapProviderId() {
	o.LdapProviderId.Unset()
}

// GetOverwritehostAlias returns the OverwritehostAlias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterOrUpdateKerberosProviderRequest) GetOverwritehostAlias() bool {
	if o == nil || IsNil(o.OverwritehostAlias.Get()) {
		var ret bool
		return ret
	}
	return *o.OverwritehostAlias.Get()
}

// GetOverwritehostAliasOk returns a tuple with the OverwritehostAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterOrUpdateKerberosProviderRequest) GetOverwritehostAliasOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverwritehostAlias.Get(), o.OverwritehostAlias.IsSet()
}

// HasOverwritehostAlias returns a boolean if a field has been set.
func (o *RegisterOrUpdateKerberosProviderRequest) HasOverwritehostAlias() bool {
	if o != nil && o.OverwritehostAlias.IsSet() {
		return true
	}

	return false
}

// SetOverwritehostAlias gets a reference to the given NullableBool and assigns it to the OverwritehostAlias field.
func (o *RegisterOrUpdateKerberosProviderRequest) SetOverwritehostAlias(v bool) {
	o.OverwritehostAlias.Set(&v)
}
// SetOverwritehostAliasNil sets the value for OverwritehostAlias to be an explicit nil
func (o *RegisterOrUpdateKerberosProviderRequest) SetOverwritehostAliasNil() {
	o.OverwritehostAlias.Set(nil)
}

// UnsetOverwritehostAlias ensures that no value is present for OverwritehostAlias, not even an explicit nil
func (o *RegisterOrUpdateKerberosProviderRequest) UnsetOverwritehostAlias() {
	o.OverwritehostAlias.Unset()
}

// GetRealmName returns the RealmName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RegisterOrUpdateKerberosProviderRequest) GetRealmName() string {
	if o == nil || o.RealmName.Get() == nil {
		var ret string
		return ret
	}

	return *o.RealmName.Get()
}

// GetRealmNameOk returns a tuple with the RealmName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterOrUpdateKerberosProviderRequest) GetRealmNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RealmName.Get(), o.RealmName.IsSet()
}

// SetRealmName sets field value
func (o *RegisterOrUpdateKerberosProviderRequest) SetRealmName(v string) {
	o.RealmName.Set(&v)
}

// GetAdminPassword returns the AdminPassword field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RegisterOrUpdateKerberosProviderRequest) GetAdminPassword() string {
	if o == nil || o.AdminPassword.Get() == nil {
		var ret string
		return ret
	}

	return *o.AdminPassword.Get()
}

// GetAdminPasswordOk returns a tuple with the AdminPassword field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterOrUpdateKerberosProviderRequest) GetAdminPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminPassword.Get(), o.AdminPassword.IsSet()
}

// SetAdminPassword sets field value
func (o *RegisterOrUpdateKerberosProviderRequest) SetAdminPassword(v string) {
	o.AdminPassword.Set(&v)
}

// GetAdminPrincipal returns the AdminPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterOrUpdateKerberosProviderRequest) GetAdminPrincipal() string {
	if o == nil || IsNil(o.AdminPrincipal.Get()) {
		var ret string
		return ret
	}
	return *o.AdminPrincipal.Get()
}

// GetAdminPrincipalOk returns a tuple with the AdminPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterOrUpdateKerberosProviderRequest) GetAdminPrincipalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdminPrincipal.Get(), o.AdminPrincipal.IsSet()
}

// HasAdminPrincipal returns a boolean if a field has been set.
func (o *RegisterOrUpdateKerberosProviderRequest) HasAdminPrincipal() bool {
	if o != nil && o.AdminPrincipal.IsSet() {
		return true
	}

	return false
}

// SetAdminPrincipal gets a reference to the given NullableString and assigns it to the AdminPrincipal field.
func (o *RegisterOrUpdateKerberosProviderRequest) SetAdminPrincipal(v string) {
	o.AdminPrincipal.Set(&v)
}
// SetAdminPrincipalNil sets the value for AdminPrincipal to be an explicit nil
func (o *RegisterOrUpdateKerberosProviderRequest) SetAdminPrincipalNil() {
	o.AdminPrincipal.Set(nil)
}

// UnsetAdminPrincipal ensures that no value is present for AdminPrincipal, not even an explicit nil
func (o *RegisterOrUpdateKerberosProviderRequest) UnsetAdminPrincipal() {
	o.AdminPrincipal.Unset()
}

func (o RegisterOrUpdateKerberosProviderRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RegisterOrUpdateKerberosProviderRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["adminServer"] = o.AdminServer.Get()
	toSerialize["hostAlias"] = o.HostAlias
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	toSerialize["kdcServers"] = o.KdcServers
	if o.LdapProviderId.IsSet() {
		toSerialize["ldapProviderId"] = o.LdapProviderId.Get()
	}
	if o.OverwritehostAlias.IsSet() {
		toSerialize["overwritehostAlias"] = o.OverwritehostAlias.Get()
	}
	toSerialize["realmName"] = o.RealmName.Get()
	toSerialize["adminPassword"] = o.AdminPassword.Get()
	if o.AdminPrincipal.IsSet() {
		toSerialize["adminPrincipal"] = o.AdminPrincipal.Get()
	}
	return toSerialize, nil
}

func (o *RegisterOrUpdateKerberosProviderRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"adminServer",
		"hostAlias",
		"kdcServers",
		"realmName",
		"adminPassword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRegisterOrUpdateKerberosProviderRequest := _RegisterOrUpdateKerberosProviderRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRegisterOrUpdateKerberosProviderRequest)

	if err != nil {
		return err
	}

	*o = RegisterOrUpdateKerberosProviderRequest(varRegisterOrUpdateKerberosProviderRequest)

	return err
}

type NullableRegisterOrUpdateKerberosProviderRequest struct {
	value *RegisterOrUpdateKerberosProviderRequest
	isSet bool
}

func (v NullableRegisterOrUpdateKerberosProviderRequest) Get() *RegisterOrUpdateKerberosProviderRequest {
	return v.value
}

func (v *NullableRegisterOrUpdateKerberosProviderRequest) Set(val *RegisterOrUpdateKerberosProviderRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterOrUpdateKerberosProviderRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterOrUpdateKerberosProviderRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterOrUpdateKerberosProviderRequest(val *RegisterOrUpdateKerberosProviderRequest) *NullableRegisterOrUpdateKerberosProviderRequest {
	return &NullableRegisterOrUpdateKerberosProviderRequest{value: val, isSet: true}
}

func (v NullableRegisterOrUpdateKerberosProviderRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterOrUpdateKerberosProviderRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


