/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the StorageArraySnapshotConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageArraySnapshotConfig{}

// StorageArraySnapshotConfig Specifies the storage array snapshot config for individual volume/lun.
type StorageArraySnapshotConfig struct {
	MaxSnapshotConfig *StorageArraySnapshotMaxSnapshotConfig `json:"maxSnapshotConfig,omitempty"`
	// Specifies whether we will use storage snapshot managmement max snapshots config to all volumes/luns that are part of the registered entity.
	MaxSnapshotsConfigEnabled NullableBool `json:"maxSnapshotsConfigEnabled,omitempty"`
	MaxSpaceConfig *StorageArraySnapshotMaxSpaceConfig `json:"maxSpaceConfig,omitempty"`
	// Specifies whether we will use storage snapshot managmement max space config to all volumes/luns that are part of the registered entity.
	MaxSpaceConfigEnabled NullableBool `json:"maxSpaceConfigEnabled,omitempty"`
	// Specifies the list of storage array snapshot management throttling policies for individual volume/lun.
	StorageArraySnapshotThrottlingPolicies []StorageArraySnapshotThrottlingPolicy `json:"storageArraySnapshotThrottlingPolicies,omitempty"`
}

// NewStorageArraySnapshotConfig instantiates a new StorageArraySnapshotConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageArraySnapshotConfig() *StorageArraySnapshotConfig {
	this := StorageArraySnapshotConfig{}
	return &this
}

// NewStorageArraySnapshotConfigWithDefaults instantiates a new StorageArraySnapshotConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageArraySnapshotConfigWithDefaults() *StorageArraySnapshotConfig {
	this := StorageArraySnapshotConfig{}
	return &this
}

// GetMaxSnapshotConfig returns the MaxSnapshotConfig field value if set, zero value otherwise.
func (o *StorageArraySnapshotConfig) GetMaxSnapshotConfig() StorageArraySnapshotMaxSnapshotConfig {
	if o == nil || IsNil(o.MaxSnapshotConfig) {
		var ret StorageArraySnapshotMaxSnapshotConfig
		return ret
	}
	return *o.MaxSnapshotConfig
}

// GetMaxSnapshotConfigOk returns a tuple with the MaxSnapshotConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageArraySnapshotConfig) GetMaxSnapshotConfigOk() (*StorageArraySnapshotMaxSnapshotConfig, bool) {
	if o == nil || IsNil(o.MaxSnapshotConfig) {
		return nil, false
	}
	return o.MaxSnapshotConfig, true
}

// HasMaxSnapshotConfig returns a boolean if a field has been set.
func (o *StorageArraySnapshotConfig) HasMaxSnapshotConfig() bool {
	if o != nil && !IsNil(o.MaxSnapshotConfig) {
		return true
	}

	return false
}

// SetMaxSnapshotConfig gets a reference to the given StorageArraySnapshotMaxSnapshotConfig and assigns it to the MaxSnapshotConfig field.
func (o *StorageArraySnapshotConfig) SetMaxSnapshotConfig(v StorageArraySnapshotMaxSnapshotConfig) {
	o.MaxSnapshotConfig = &v
}

// GetMaxSnapshotsConfigEnabled returns the MaxSnapshotsConfigEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageArraySnapshotConfig) GetMaxSnapshotsConfigEnabled() bool {
	if o == nil || IsNil(o.MaxSnapshotsConfigEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.MaxSnapshotsConfigEnabled.Get()
}

// GetMaxSnapshotsConfigEnabledOk returns a tuple with the MaxSnapshotsConfigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageArraySnapshotConfig) GetMaxSnapshotsConfigEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxSnapshotsConfigEnabled.Get(), o.MaxSnapshotsConfigEnabled.IsSet()
}

// HasMaxSnapshotsConfigEnabled returns a boolean if a field has been set.
func (o *StorageArraySnapshotConfig) HasMaxSnapshotsConfigEnabled() bool {
	if o != nil && o.MaxSnapshotsConfigEnabled.IsSet() {
		return true
	}

	return false
}

// SetMaxSnapshotsConfigEnabled gets a reference to the given NullableBool and assigns it to the MaxSnapshotsConfigEnabled field.
func (o *StorageArraySnapshotConfig) SetMaxSnapshotsConfigEnabled(v bool) {
	o.MaxSnapshotsConfigEnabled.Set(&v)
}
// SetMaxSnapshotsConfigEnabledNil sets the value for MaxSnapshotsConfigEnabled to be an explicit nil
func (o *StorageArraySnapshotConfig) SetMaxSnapshotsConfigEnabledNil() {
	o.MaxSnapshotsConfigEnabled.Set(nil)
}

// UnsetMaxSnapshotsConfigEnabled ensures that no value is present for MaxSnapshotsConfigEnabled, not even an explicit nil
func (o *StorageArraySnapshotConfig) UnsetMaxSnapshotsConfigEnabled() {
	o.MaxSnapshotsConfigEnabled.Unset()
}

// GetMaxSpaceConfig returns the MaxSpaceConfig field value if set, zero value otherwise.
func (o *StorageArraySnapshotConfig) GetMaxSpaceConfig() StorageArraySnapshotMaxSpaceConfig {
	if o == nil || IsNil(o.MaxSpaceConfig) {
		var ret StorageArraySnapshotMaxSpaceConfig
		return ret
	}
	return *o.MaxSpaceConfig
}

// GetMaxSpaceConfigOk returns a tuple with the MaxSpaceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StorageArraySnapshotConfig) GetMaxSpaceConfigOk() (*StorageArraySnapshotMaxSpaceConfig, bool) {
	if o == nil || IsNil(o.MaxSpaceConfig) {
		return nil, false
	}
	return o.MaxSpaceConfig, true
}

// HasMaxSpaceConfig returns a boolean if a field has been set.
func (o *StorageArraySnapshotConfig) HasMaxSpaceConfig() bool {
	if o != nil && !IsNil(o.MaxSpaceConfig) {
		return true
	}

	return false
}

// SetMaxSpaceConfig gets a reference to the given StorageArraySnapshotMaxSpaceConfig and assigns it to the MaxSpaceConfig field.
func (o *StorageArraySnapshotConfig) SetMaxSpaceConfig(v StorageArraySnapshotMaxSpaceConfig) {
	o.MaxSpaceConfig = &v
}

// GetMaxSpaceConfigEnabled returns the MaxSpaceConfigEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageArraySnapshotConfig) GetMaxSpaceConfigEnabled() bool {
	if o == nil || IsNil(o.MaxSpaceConfigEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.MaxSpaceConfigEnabled.Get()
}

// GetMaxSpaceConfigEnabledOk returns a tuple with the MaxSpaceConfigEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageArraySnapshotConfig) GetMaxSpaceConfigEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxSpaceConfigEnabled.Get(), o.MaxSpaceConfigEnabled.IsSet()
}

// HasMaxSpaceConfigEnabled returns a boolean if a field has been set.
func (o *StorageArraySnapshotConfig) HasMaxSpaceConfigEnabled() bool {
	if o != nil && o.MaxSpaceConfigEnabled.IsSet() {
		return true
	}

	return false
}

// SetMaxSpaceConfigEnabled gets a reference to the given NullableBool and assigns it to the MaxSpaceConfigEnabled field.
func (o *StorageArraySnapshotConfig) SetMaxSpaceConfigEnabled(v bool) {
	o.MaxSpaceConfigEnabled.Set(&v)
}
// SetMaxSpaceConfigEnabledNil sets the value for MaxSpaceConfigEnabled to be an explicit nil
func (o *StorageArraySnapshotConfig) SetMaxSpaceConfigEnabledNil() {
	o.MaxSpaceConfigEnabled.Set(nil)
}

// UnsetMaxSpaceConfigEnabled ensures that no value is present for MaxSpaceConfigEnabled, not even an explicit nil
func (o *StorageArraySnapshotConfig) UnsetMaxSpaceConfigEnabled() {
	o.MaxSpaceConfigEnabled.Unset()
}

// GetStorageArraySnapshotThrottlingPolicies returns the StorageArraySnapshotThrottlingPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageArraySnapshotConfig) GetStorageArraySnapshotThrottlingPolicies() []StorageArraySnapshotThrottlingPolicy {
	if o == nil {
		var ret []StorageArraySnapshotThrottlingPolicy
		return ret
	}
	return o.StorageArraySnapshotThrottlingPolicies
}

// GetStorageArraySnapshotThrottlingPoliciesOk returns a tuple with the StorageArraySnapshotThrottlingPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageArraySnapshotConfig) GetStorageArraySnapshotThrottlingPoliciesOk() ([]StorageArraySnapshotThrottlingPolicy, bool) {
	if o == nil || IsNil(o.StorageArraySnapshotThrottlingPolicies) {
		return nil, false
	}
	return o.StorageArraySnapshotThrottlingPolicies, true
}

// HasStorageArraySnapshotThrottlingPolicies returns a boolean if a field has been set.
func (o *StorageArraySnapshotConfig) HasStorageArraySnapshotThrottlingPolicies() bool {
	if o != nil && !IsNil(o.StorageArraySnapshotThrottlingPolicies) {
		return true
	}

	return false
}

// SetStorageArraySnapshotThrottlingPolicies gets a reference to the given []StorageArraySnapshotThrottlingPolicy and assigns it to the StorageArraySnapshotThrottlingPolicies field.
func (o *StorageArraySnapshotConfig) SetStorageArraySnapshotThrottlingPolicies(v []StorageArraySnapshotThrottlingPolicy) {
	o.StorageArraySnapshotThrottlingPolicies = v
}

func (o StorageArraySnapshotConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageArraySnapshotConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaxSnapshotConfig) {
		toSerialize["maxSnapshotConfig"] = o.MaxSnapshotConfig
	}
	if o.MaxSnapshotsConfigEnabled.IsSet() {
		toSerialize["maxSnapshotsConfigEnabled"] = o.MaxSnapshotsConfigEnabled.Get()
	}
	if !IsNil(o.MaxSpaceConfig) {
		toSerialize["maxSpaceConfig"] = o.MaxSpaceConfig
	}
	if o.MaxSpaceConfigEnabled.IsSet() {
		toSerialize["maxSpaceConfigEnabled"] = o.MaxSpaceConfigEnabled.Get()
	}
	if o.StorageArraySnapshotThrottlingPolicies != nil {
		toSerialize["storageArraySnapshotThrottlingPolicies"] = o.StorageArraySnapshotThrottlingPolicies
	}
	return toSerialize, nil
}

type NullableStorageArraySnapshotConfig struct {
	value *StorageArraySnapshotConfig
	isSet bool
}

func (v NullableStorageArraySnapshotConfig) Get() *StorageArraySnapshotConfig {
	return v.value
}

func (v *NullableStorageArraySnapshotConfig) Set(val *StorageArraySnapshotConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageArraySnapshotConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageArraySnapshotConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageArraySnapshotConfig(val *StorageArraySnapshotConfig) *NullableStorageArraySnapshotConfig {
	return &NullableStorageArraySnapshotConfig{value: val, isSet: true}
}

func (v NullableStorageArraySnapshotConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageArraySnapshotConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


