/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CommonGraphNodeFilterParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonGraphNodeFilterParams{}

// CommonGraphNodeFilterParams Determines filter that can be applied to query node.
type CommonGraphNodeFilterParams struct {
	// Filters the nodes based on provided current node display name.
	Name NullableString `json:"name,omitempty"`
	// If set to true only root nodes would be returned. A root node refers to nodes in the graph with no incoming edges. Defaults to false.
	RootOnly NullableBool `json:"rootOnly,omitempty"`
}

// NewCommonGraphNodeFilterParams instantiates a new CommonGraphNodeFilterParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonGraphNodeFilterParams() *CommonGraphNodeFilterParams {
	this := CommonGraphNodeFilterParams{}
	return &this
}

// NewCommonGraphNodeFilterParamsWithDefaults instantiates a new CommonGraphNodeFilterParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonGraphNodeFilterParamsWithDefaults() *CommonGraphNodeFilterParams {
	this := CommonGraphNodeFilterParams{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonGraphNodeFilterParams) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonGraphNodeFilterParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CommonGraphNodeFilterParams) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CommonGraphNodeFilterParams) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CommonGraphNodeFilterParams) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CommonGraphNodeFilterParams) UnsetName() {
	o.Name.Unset()
}

// GetRootOnly returns the RootOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonGraphNodeFilterParams) GetRootOnly() bool {
	if o == nil || IsNil(o.RootOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.RootOnly.Get()
}

// GetRootOnlyOk returns a tuple with the RootOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonGraphNodeFilterParams) GetRootOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RootOnly.Get(), o.RootOnly.IsSet()
}

// HasRootOnly returns a boolean if a field has been set.
func (o *CommonGraphNodeFilterParams) HasRootOnly() bool {
	if o != nil && o.RootOnly.IsSet() {
		return true
	}

	return false
}

// SetRootOnly gets a reference to the given NullableBool and assigns it to the RootOnly field.
func (o *CommonGraphNodeFilterParams) SetRootOnly(v bool) {
	o.RootOnly.Set(&v)
}
// SetRootOnlyNil sets the value for RootOnly to be an explicit nil
func (o *CommonGraphNodeFilterParams) SetRootOnlyNil() {
	o.RootOnly.Set(nil)
}

// UnsetRootOnly ensures that no value is present for RootOnly, not even an explicit nil
func (o *CommonGraphNodeFilterParams) UnsetRootOnly() {
	o.RootOnly.Unset()
}

func (o CommonGraphNodeFilterParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonGraphNodeFilterParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.RootOnly.IsSet() {
		toSerialize["rootOnly"] = o.RootOnly.Get()
	}
	return toSerialize, nil
}

type NullableCommonGraphNodeFilterParams struct {
	value *CommonGraphNodeFilterParams
	isSet bool
}

func (v NullableCommonGraphNodeFilterParams) Get() *CommonGraphNodeFilterParams {
	return v.value
}

func (v *NullableCommonGraphNodeFilterParams) Set(val *CommonGraphNodeFilterParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonGraphNodeFilterParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonGraphNodeFilterParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonGraphNodeFilterParams(val *CommonGraphNodeFilterParams) *NullableCommonGraphNodeFilterParams {
	return &NullableCommonGraphNodeFilterParams{value: val, isSet: true}
}

func (v NullableCommonGraphNodeFilterParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonGraphNodeFilterParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


