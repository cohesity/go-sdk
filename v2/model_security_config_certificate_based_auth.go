/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SecurityConfigCertificateBasedAuth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecurityConfigCertificateBasedAuth{}

// SecurityConfigCertificateBasedAuth Specifies security config for certificate based authentication.
type SecurityConfigCertificateBasedAuth struct {
	// Specifies the field to be used in AD user for authentication.
	AdMapping NullableString `json:"adMapping,omitempty"`
	// Specifies the field to be used in certificate for authentication.
	CertificateMapping NullableString `json:"certificateMapping,omitempty"`
	// If true, certfication based authentication is done via configured mapping. Else it will proceed based on legacy serial number match.
	EnableMappingBasedAuthentication NullableBool `json:"enableMappingBasedAuthentication,omitempty"`
}

// NewSecurityConfigCertificateBasedAuth instantiates a new SecurityConfigCertificateBasedAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityConfigCertificateBasedAuth() *SecurityConfigCertificateBasedAuth {
	this := SecurityConfigCertificateBasedAuth{}
	return &this
}

// NewSecurityConfigCertificateBasedAuthWithDefaults instantiates a new SecurityConfigCertificateBasedAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityConfigCertificateBasedAuthWithDefaults() *SecurityConfigCertificateBasedAuth {
	this := SecurityConfigCertificateBasedAuth{}
	return &this
}

// GetAdMapping returns the AdMapping field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigCertificateBasedAuth) GetAdMapping() string {
	if o == nil || IsNil(o.AdMapping.Get()) {
		var ret string
		return ret
	}
	return *o.AdMapping.Get()
}

// GetAdMappingOk returns a tuple with the AdMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigCertificateBasedAuth) GetAdMappingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AdMapping.Get(), o.AdMapping.IsSet()
}

// HasAdMapping returns a boolean if a field has been set.
func (o *SecurityConfigCertificateBasedAuth) HasAdMapping() bool {
	if o != nil && o.AdMapping.IsSet() {
		return true
	}

	return false
}

// SetAdMapping gets a reference to the given NullableString and assigns it to the AdMapping field.
func (o *SecurityConfigCertificateBasedAuth) SetAdMapping(v string) {
	o.AdMapping.Set(&v)
}
// SetAdMappingNil sets the value for AdMapping to be an explicit nil
func (o *SecurityConfigCertificateBasedAuth) SetAdMappingNil() {
	o.AdMapping.Set(nil)
}

// UnsetAdMapping ensures that no value is present for AdMapping, not even an explicit nil
func (o *SecurityConfigCertificateBasedAuth) UnsetAdMapping() {
	o.AdMapping.Unset()
}

// GetCertificateMapping returns the CertificateMapping field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigCertificateBasedAuth) GetCertificateMapping() string {
	if o == nil || IsNil(o.CertificateMapping.Get()) {
		var ret string
		return ret
	}
	return *o.CertificateMapping.Get()
}

// GetCertificateMappingOk returns a tuple with the CertificateMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigCertificateBasedAuth) GetCertificateMappingOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateMapping.Get(), o.CertificateMapping.IsSet()
}

// HasCertificateMapping returns a boolean if a field has been set.
func (o *SecurityConfigCertificateBasedAuth) HasCertificateMapping() bool {
	if o != nil && o.CertificateMapping.IsSet() {
		return true
	}

	return false
}

// SetCertificateMapping gets a reference to the given NullableString and assigns it to the CertificateMapping field.
func (o *SecurityConfigCertificateBasedAuth) SetCertificateMapping(v string) {
	o.CertificateMapping.Set(&v)
}
// SetCertificateMappingNil sets the value for CertificateMapping to be an explicit nil
func (o *SecurityConfigCertificateBasedAuth) SetCertificateMappingNil() {
	o.CertificateMapping.Set(nil)
}

// UnsetCertificateMapping ensures that no value is present for CertificateMapping, not even an explicit nil
func (o *SecurityConfigCertificateBasedAuth) UnsetCertificateMapping() {
	o.CertificateMapping.Unset()
}

// GetEnableMappingBasedAuthentication returns the EnableMappingBasedAuthentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigCertificateBasedAuth) GetEnableMappingBasedAuthentication() bool {
	if o == nil || IsNil(o.EnableMappingBasedAuthentication.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableMappingBasedAuthentication.Get()
}

// GetEnableMappingBasedAuthenticationOk returns a tuple with the EnableMappingBasedAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigCertificateBasedAuth) GetEnableMappingBasedAuthenticationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableMappingBasedAuthentication.Get(), o.EnableMappingBasedAuthentication.IsSet()
}

// HasEnableMappingBasedAuthentication returns a boolean if a field has been set.
func (o *SecurityConfigCertificateBasedAuth) HasEnableMappingBasedAuthentication() bool {
	if o != nil && o.EnableMappingBasedAuthentication.IsSet() {
		return true
	}

	return false
}

// SetEnableMappingBasedAuthentication gets a reference to the given NullableBool and assigns it to the EnableMappingBasedAuthentication field.
func (o *SecurityConfigCertificateBasedAuth) SetEnableMappingBasedAuthentication(v bool) {
	o.EnableMappingBasedAuthentication.Set(&v)
}
// SetEnableMappingBasedAuthenticationNil sets the value for EnableMappingBasedAuthentication to be an explicit nil
func (o *SecurityConfigCertificateBasedAuth) SetEnableMappingBasedAuthenticationNil() {
	o.EnableMappingBasedAuthentication.Set(nil)
}

// UnsetEnableMappingBasedAuthentication ensures that no value is present for EnableMappingBasedAuthentication, not even an explicit nil
func (o *SecurityConfigCertificateBasedAuth) UnsetEnableMappingBasedAuthentication() {
	o.EnableMappingBasedAuthentication.Unset()
}

func (o SecurityConfigCertificateBasedAuth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecurityConfigCertificateBasedAuth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AdMapping.IsSet() {
		toSerialize["adMapping"] = o.AdMapping.Get()
	}
	if o.CertificateMapping.IsSet() {
		toSerialize["certificateMapping"] = o.CertificateMapping.Get()
	}
	if o.EnableMappingBasedAuthentication.IsSet() {
		toSerialize["enableMappingBasedAuthentication"] = o.EnableMappingBasedAuthentication.Get()
	}
	return toSerialize, nil
}

type NullableSecurityConfigCertificateBasedAuth struct {
	value *SecurityConfigCertificateBasedAuth
	isSet bool
}

func (v NullableSecurityConfigCertificateBasedAuth) Get() *SecurityConfigCertificateBasedAuth {
	return v.value
}

func (v *NullableSecurityConfigCertificateBasedAuth) Set(val *SecurityConfigCertificateBasedAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityConfigCertificateBasedAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityConfigCertificateBasedAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityConfigCertificateBasedAuth(val *SecurityConfigCertificateBasedAuth) *NullableSecurityConfigCertificateBasedAuth {
	return &NullableSecurityConfigCertificateBasedAuth{value: val, isSet: true}
}

func (v NullableSecurityConfigCertificateBasedAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityConfigCertificateBasedAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


