/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CertificateBundle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CertificateBundle{}

// CertificateBundle Specifies a leaf certificate, the associated private key and an ordered list of certs in the corresponding chain of trust.
type CertificateBundle struct {
	// List of certs, starting at the root cert, in the chain of trust corresponding to the 'publicCert'.
	CaChain []string `json:"caChain,omitempty"`
	// Private Key corresponding to the 'publicCert'.
	PrivateKey string `json:"privateKey"`
	// The leaf certificate.
	PublicCert string `json:"publicCert"`
}

type _CertificateBundle CertificateBundle

// NewCertificateBundle instantiates a new CertificateBundle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCertificateBundle(privateKey string, publicCert string) *CertificateBundle {
	this := CertificateBundle{}
	this.PrivateKey = privateKey
	this.PublicCert = publicCert
	return &this
}

// NewCertificateBundleWithDefaults instantiates a new CertificateBundle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCertificateBundleWithDefaults() *CertificateBundle {
	this := CertificateBundle{}
	return &this
}

// GetCaChain returns the CaChain field value if set, zero value otherwise.
func (o *CertificateBundle) GetCaChain() []string {
	if o == nil || IsNil(o.CaChain) {
		var ret []string
		return ret
	}
	return o.CaChain
}

// GetCaChainOk returns a tuple with the CaChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CertificateBundle) GetCaChainOk() ([]string, bool) {
	if o == nil || IsNil(o.CaChain) {
		return nil, false
	}
	return o.CaChain, true
}

// HasCaChain returns a boolean if a field has been set.
func (o *CertificateBundle) HasCaChain() bool {
	if o != nil && !IsNil(o.CaChain) {
		return true
	}

	return false
}

// SetCaChain gets a reference to the given []string and assigns it to the CaChain field.
func (o *CertificateBundle) SetCaChain(v []string) {
	o.CaChain = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *CertificateBundle) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *CertificateBundle) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *CertificateBundle) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetPublicCert returns the PublicCert field value
func (o *CertificateBundle) GetPublicCert() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PublicCert
}

// GetPublicCertOk returns a tuple with the PublicCert field value
// and a boolean to check if the value has been set.
func (o *CertificateBundle) GetPublicCertOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PublicCert, true
}

// SetPublicCert sets field value
func (o *CertificateBundle) SetPublicCert(v string) {
	o.PublicCert = v
}

func (o CertificateBundle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CertificateBundle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CaChain) {
		toSerialize["caChain"] = o.CaChain
	}
	toSerialize["privateKey"] = o.PrivateKey
	toSerialize["publicCert"] = o.PublicCert
	return toSerialize, nil
}

func (o *CertificateBundle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"privateKey",
		"publicCert",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCertificateBundle := _CertificateBundle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCertificateBundle)

	if err != nil {
		return err
	}

	*o = CertificateBundle(varCertificateBundle)

	return err
}

type NullableCertificateBundle struct {
	value *CertificateBundle
	isSet bool
}

func (v NullableCertificateBundle) Get() *CertificateBundle {
	return v.value
}

func (v *NullableCertificateBundle) Set(val *CertificateBundle) {
	v.value = val
	v.isSet = true
}

func (v NullableCertificateBundle) IsSet() bool {
	return v.isSet
}

func (v *NullableCertificateBundle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCertificateBundle(val *CertificateBundle) *NullableCertificateBundle {
	return &NullableCertificateBundle{value: val, isSet: true}
}

func (v NullableCertificateBundle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCertificateBundle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


