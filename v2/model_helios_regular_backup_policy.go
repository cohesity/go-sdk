/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the HeliosRegularBackupPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosRegularBackupPolicy{}

// HeliosRegularBackupPolicy Specifies the Incremental and Full policy settings and also the common Retention policy settings.\"
type HeliosRegularBackupPolicy struct {
	Full *HeliosFullBackupPolicy `json:"full,omitempty"`
	// Specifies multiple schedules and retentions for full backup. Specify either of the 'full' or 'fullBackups' values. Its recommended to use 'fullBaackups' value since 'full' will be deprecated after few releases.
	FullBackups []HeliosFullScheduleAndRetention `json:"fullBackups,omitempty"`
	Incremental *HeliosIncrementalBackupPolicy `json:"incremental,omitempty"`
	PrimaryBackupTarget *HeliosPrimaryBackupTarget `json:"primaryBackupTarget,omitempty"`
	Retention *HeliosRetention `json:"retention,omitempty"`
}

// NewHeliosRegularBackupPolicy instantiates a new HeliosRegularBackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosRegularBackupPolicy() *HeliosRegularBackupPolicy {
	this := HeliosRegularBackupPolicy{}
	return &this
}

// NewHeliosRegularBackupPolicyWithDefaults instantiates a new HeliosRegularBackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosRegularBackupPolicyWithDefaults() *HeliosRegularBackupPolicy {
	this := HeliosRegularBackupPolicy{}
	return &this
}

// GetFull returns the Full field value if set, zero value otherwise.
func (o *HeliosRegularBackupPolicy) GetFull() HeliosFullBackupPolicy {
	if o == nil || IsNil(o.Full) {
		var ret HeliosFullBackupPolicy
		return ret
	}
	return *o.Full
}

// GetFullOk returns a tuple with the Full field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRegularBackupPolicy) GetFullOk() (*HeliosFullBackupPolicy, bool) {
	if o == nil || IsNil(o.Full) {
		return nil, false
	}
	return o.Full, true
}

// HasFull returns a boolean if a field has been set.
func (o *HeliosRegularBackupPolicy) HasFull() bool {
	if o != nil && !IsNil(o.Full) {
		return true
	}

	return false
}

// SetFull gets a reference to the given HeliosFullBackupPolicy and assigns it to the Full field.
func (o *HeliosRegularBackupPolicy) SetFull(v HeliosFullBackupPolicy) {
	o.Full = &v
}

// GetFullBackups returns the FullBackups field value if set, zero value otherwise.
func (o *HeliosRegularBackupPolicy) GetFullBackups() []HeliosFullScheduleAndRetention {
	if o == nil || IsNil(o.FullBackups) {
		var ret []HeliosFullScheduleAndRetention
		return ret
	}
	return o.FullBackups
}

// GetFullBackupsOk returns a tuple with the FullBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRegularBackupPolicy) GetFullBackupsOk() ([]HeliosFullScheduleAndRetention, bool) {
	if o == nil || IsNil(o.FullBackups) {
		return nil, false
	}
	return o.FullBackups, true
}

// HasFullBackups returns a boolean if a field has been set.
func (o *HeliosRegularBackupPolicy) HasFullBackups() bool {
	if o != nil && !IsNil(o.FullBackups) {
		return true
	}

	return false
}

// SetFullBackups gets a reference to the given []HeliosFullScheduleAndRetention and assigns it to the FullBackups field.
func (o *HeliosRegularBackupPolicy) SetFullBackups(v []HeliosFullScheduleAndRetention) {
	o.FullBackups = v
}

// GetIncremental returns the Incremental field value if set, zero value otherwise.
func (o *HeliosRegularBackupPolicy) GetIncremental() HeliosIncrementalBackupPolicy {
	if o == nil || IsNil(o.Incremental) {
		var ret HeliosIncrementalBackupPolicy
		return ret
	}
	return *o.Incremental
}

// GetIncrementalOk returns a tuple with the Incremental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRegularBackupPolicy) GetIncrementalOk() (*HeliosIncrementalBackupPolicy, bool) {
	if o == nil || IsNil(o.Incremental) {
		return nil, false
	}
	return o.Incremental, true
}

// HasIncremental returns a boolean if a field has been set.
func (o *HeliosRegularBackupPolicy) HasIncremental() bool {
	if o != nil && !IsNil(o.Incremental) {
		return true
	}

	return false
}

// SetIncremental gets a reference to the given HeliosIncrementalBackupPolicy and assigns it to the Incremental field.
func (o *HeliosRegularBackupPolicy) SetIncremental(v HeliosIncrementalBackupPolicy) {
	o.Incremental = &v
}

// GetPrimaryBackupTarget returns the PrimaryBackupTarget field value if set, zero value otherwise.
func (o *HeliosRegularBackupPolicy) GetPrimaryBackupTarget() HeliosPrimaryBackupTarget {
	if o == nil || IsNil(o.PrimaryBackupTarget) {
		var ret HeliosPrimaryBackupTarget
		return ret
	}
	return *o.PrimaryBackupTarget
}

// GetPrimaryBackupTargetOk returns a tuple with the PrimaryBackupTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRegularBackupPolicy) GetPrimaryBackupTargetOk() (*HeliosPrimaryBackupTarget, bool) {
	if o == nil || IsNil(o.PrimaryBackupTarget) {
		return nil, false
	}
	return o.PrimaryBackupTarget, true
}

// HasPrimaryBackupTarget returns a boolean if a field has been set.
func (o *HeliosRegularBackupPolicy) HasPrimaryBackupTarget() bool {
	if o != nil && !IsNil(o.PrimaryBackupTarget) {
		return true
	}

	return false
}

// SetPrimaryBackupTarget gets a reference to the given HeliosPrimaryBackupTarget and assigns it to the PrimaryBackupTarget field.
func (o *HeliosRegularBackupPolicy) SetPrimaryBackupTarget(v HeliosPrimaryBackupTarget) {
	o.PrimaryBackupTarget = &v
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *HeliosRegularBackupPolicy) GetRetention() HeliosRetention {
	if o == nil || IsNil(o.Retention) {
		var ret HeliosRetention
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRegularBackupPolicy) GetRetentionOk() (*HeliosRetention, bool) {
	if o == nil || IsNil(o.Retention) {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *HeliosRegularBackupPolicy) HasRetention() bool {
	if o != nil && !IsNil(o.Retention) {
		return true
	}

	return false
}

// SetRetention gets a reference to the given HeliosRetention and assigns it to the Retention field.
func (o *HeliosRegularBackupPolicy) SetRetention(v HeliosRetention) {
	o.Retention = &v
}

func (o HeliosRegularBackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosRegularBackupPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Full) {
		toSerialize["full"] = o.Full
	}
	if !IsNil(o.FullBackups) {
		toSerialize["fullBackups"] = o.FullBackups
	}
	if !IsNil(o.Incremental) {
		toSerialize["incremental"] = o.Incremental
	}
	if !IsNil(o.PrimaryBackupTarget) {
		toSerialize["primaryBackupTarget"] = o.PrimaryBackupTarget
	}
	if !IsNil(o.Retention) {
		toSerialize["retention"] = o.Retention
	}
	return toSerialize, nil
}

type NullableHeliosRegularBackupPolicy struct {
	value *HeliosRegularBackupPolicy
	isSet bool
}

func (v NullableHeliosRegularBackupPolicy) Get() *HeliosRegularBackupPolicy {
	return v.value
}

func (v *NullableHeliosRegularBackupPolicy) Set(val *HeliosRegularBackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosRegularBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosRegularBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosRegularBackupPolicy(val *HeliosRegularBackupPolicy) *NullableHeliosRegularBackupPolicy {
	return &NullableHeliosRegularBackupPolicy{value: val, isSet: true}
}

func (v NullableHeliosRegularBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosRegularBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


