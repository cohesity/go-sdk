/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RetrieveArchiveTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RetrieveArchiveTask{}

// RetrieveArchiveTask Specifies the persistent state of a retrieve of an archive task.
type RetrieveArchiveTask struct {
	// Specifies the globally unique id for this retrieval of an archive task.
	TaskUid NullableString `json:"taskUid,omitempty" validate:"regexp=^\\\\d+:\\\\d+:\\\\d+$"`
	// Specifies how much time the retrieved entity is present in the hot-tiers.
	UptierExpiryTimes []int64 `json:"uptierExpiryTimes,omitempty"`
}

// NewRetrieveArchiveTask instantiates a new RetrieveArchiveTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetrieveArchiveTask() *RetrieveArchiveTask {
	this := RetrieveArchiveTask{}
	return &this
}

// NewRetrieveArchiveTaskWithDefaults instantiates a new RetrieveArchiveTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetrieveArchiveTaskWithDefaults() *RetrieveArchiveTask {
	this := RetrieveArchiveTask{}
	return &this
}

// GetTaskUid returns the TaskUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveTask) GetTaskUid() string {
	if o == nil || IsNil(o.TaskUid.Get()) {
		var ret string
		return ret
	}
	return *o.TaskUid.Get()
}

// GetTaskUidOk returns a tuple with the TaskUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveTask) GetTaskUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskUid.Get(), o.TaskUid.IsSet()
}

// HasTaskUid returns a boolean if a field has been set.
func (o *RetrieveArchiveTask) HasTaskUid() bool {
	if o != nil && o.TaskUid.IsSet() {
		return true
	}

	return false
}

// SetTaskUid gets a reference to the given NullableString and assigns it to the TaskUid field.
func (o *RetrieveArchiveTask) SetTaskUid(v string) {
	o.TaskUid.Set(&v)
}
// SetTaskUidNil sets the value for TaskUid to be an explicit nil
func (o *RetrieveArchiveTask) SetTaskUidNil() {
	o.TaskUid.Set(nil)
}

// UnsetTaskUid ensures that no value is present for TaskUid, not even an explicit nil
func (o *RetrieveArchiveTask) UnsetTaskUid() {
	o.TaskUid.Unset()
}

// GetUptierExpiryTimes returns the UptierExpiryTimes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveTask) GetUptierExpiryTimes() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.UptierExpiryTimes
}

// GetUptierExpiryTimesOk returns a tuple with the UptierExpiryTimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveTask) GetUptierExpiryTimesOk() ([]int64, bool) {
	if o == nil || IsNil(o.UptierExpiryTimes) {
		return nil, false
	}
	return o.UptierExpiryTimes, true
}

// HasUptierExpiryTimes returns a boolean if a field has been set.
func (o *RetrieveArchiveTask) HasUptierExpiryTimes() bool {
	if o != nil && !IsNil(o.UptierExpiryTimes) {
		return true
	}

	return false
}

// SetUptierExpiryTimes gets a reference to the given []int64 and assigns it to the UptierExpiryTimes field.
func (o *RetrieveArchiveTask) SetUptierExpiryTimes(v []int64) {
	o.UptierExpiryTimes = v
}

func (o RetrieveArchiveTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RetrieveArchiveTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TaskUid.IsSet() {
		toSerialize["taskUid"] = o.TaskUid.Get()
	}
	if o.UptierExpiryTimes != nil {
		toSerialize["uptierExpiryTimes"] = o.UptierExpiryTimes
	}
	return toSerialize, nil
}

type NullableRetrieveArchiveTask struct {
	value *RetrieveArchiveTask
	isSet bool
}

func (v NullableRetrieveArchiveTask) Get() *RetrieveArchiveTask {
	return v.value
}

func (v *NullableRetrieveArchiveTask) Set(val *RetrieveArchiveTask) {
	v.value = val
	v.isSet = true
}

func (v NullableRetrieveArchiveTask) IsSet() bool {
	return v.isSet
}

func (v *NullableRetrieveArchiveTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetrieveArchiveTask(val *RetrieveArchiveTask) *NullableRetrieveArchiveTask {
	return &NullableRetrieveArchiveTask{value: val, isSet: true}
}

func (v NullableRetrieveArchiveTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetrieveArchiveTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


