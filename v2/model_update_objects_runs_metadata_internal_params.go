/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpdateObjectsRunsMetadataInternalParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateObjectsRunsMetadataInternalParams{}

// UpdateObjectsRunsMetadataInternalParams Specifies the params for updating one or more runs of one or more objects via the cluster's internal API
type UpdateObjectsRunsMetadataInternalParams struct {
	// Specifies the environment.
	Environment *string `json:"environment,omitempty"`
	// Specifies whether to retain the snapshot for legal purpose. If set to 'enable', the snapshots cannot be deleted until the retention period. Note that using this option may cause the Cluster to run out of space. This field can be set only by a User having Data Security Role.  If set to 'release', the snapshots under legal hold will be released.
	LegalHold NullableString `json:"legalHold,omitempty"`
	Retention *Retention `json:"retention,omitempty"`
	// An array of objects. Each containing object id and the run start time that we want to target.
	TargetObjectRuns []TargetObjectRun `json:"targetObjectRuns,omitempty"`
	TimeRange *TimeRangeUsecs `json:"timeRange,omitempty"`
	// Tenant id associated with the incoming request
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewUpdateObjectsRunsMetadataInternalParams instantiates a new UpdateObjectsRunsMetadataInternalParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateObjectsRunsMetadataInternalParams() *UpdateObjectsRunsMetadataInternalParams {
	this := UpdateObjectsRunsMetadataInternalParams{}
	return &this
}

// NewUpdateObjectsRunsMetadataInternalParamsWithDefaults instantiates a new UpdateObjectsRunsMetadataInternalParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateObjectsRunsMetadataInternalParamsWithDefaults() *UpdateObjectsRunsMetadataInternalParams {
	this := UpdateObjectsRunsMetadataInternalParams{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise.
func (o *UpdateObjectsRunsMetadataInternalParams) GetEnvironment() string {
	if o == nil || IsNil(o.Environment) {
		var ret string
		return ret
	}
	return *o.Environment
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateObjectsRunsMetadataInternalParams) GetEnvironmentOk() (*string, bool) {
	if o == nil || IsNil(o.Environment) {
		return nil, false
	}
	return o.Environment, true
}

// HasEnvironment returns a boolean if a field has been set.
func (o *UpdateObjectsRunsMetadataInternalParams) HasEnvironment() bool {
	if o != nil && !IsNil(o.Environment) {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given string and assigns it to the Environment field.
func (o *UpdateObjectsRunsMetadataInternalParams) SetEnvironment(v string) {
	o.Environment = &v
}

// GetLegalHold returns the LegalHold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateObjectsRunsMetadataInternalParams) GetLegalHold() string {
	if o == nil || IsNil(o.LegalHold.Get()) {
		var ret string
		return ret
	}
	return *o.LegalHold.Get()
}

// GetLegalHoldOk returns a tuple with the LegalHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateObjectsRunsMetadataInternalParams) GetLegalHoldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LegalHold.Get(), o.LegalHold.IsSet()
}

// HasLegalHold returns a boolean if a field has been set.
func (o *UpdateObjectsRunsMetadataInternalParams) HasLegalHold() bool {
	if o != nil && o.LegalHold.IsSet() {
		return true
	}

	return false
}

// SetLegalHold gets a reference to the given NullableString and assigns it to the LegalHold field.
func (o *UpdateObjectsRunsMetadataInternalParams) SetLegalHold(v string) {
	o.LegalHold.Set(&v)
}
// SetLegalHoldNil sets the value for LegalHold to be an explicit nil
func (o *UpdateObjectsRunsMetadataInternalParams) SetLegalHoldNil() {
	o.LegalHold.Set(nil)
}

// UnsetLegalHold ensures that no value is present for LegalHold, not even an explicit nil
func (o *UpdateObjectsRunsMetadataInternalParams) UnsetLegalHold() {
	o.LegalHold.Unset()
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *UpdateObjectsRunsMetadataInternalParams) GetRetention() Retention {
	if o == nil || IsNil(o.Retention) {
		var ret Retention
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateObjectsRunsMetadataInternalParams) GetRetentionOk() (*Retention, bool) {
	if o == nil || IsNil(o.Retention) {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *UpdateObjectsRunsMetadataInternalParams) HasRetention() bool {
	if o != nil && !IsNil(o.Retention) {
		return true
	}

	return false
}

// SetRetention gets a reference to the given Retention and assigns it to the Retention field.
func (o *UpdateObjectsRunsMetadataInternalParams) SetRetention(v Retention) {
	o.Retention = &v
}

// GetTargetObjectRuns returns the TargetObjectRuns field value if set, zero value otherwise.
func (o *UpdateObjectsRunsMetadataInternalParams) GetTargetObjectRuns() []TargetObjectRun {
	if o == nil || IsNil(o.TargetObjectRuns) {
		var ret []TargetObjectRun
		return ret
	}
	return o.TargetObjectRuns
}

// GetTargetObjectRunsOk returns a tuple with the TargetObjectRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateObjectsRunsMetadataInternalParams) GetTargetObjectRunsOk() ([]TargetObjectRun, bool) {
	if o == nil || IsNil(o.TargetObjectRuns) {
		return nil, false
	}
	return o.TargetObjectRuns, true
}

// HasTargetObjectRuns returns a boolean if a field has been set.
func (o *UpdateObjectsRunsMetadataInternalParams) HasTargetObjectRuns() bool {
	if o != nil && !IsNil(o.TargetObjectRuns) {
		return true
	}

	return false
}

// SetTargetObjectRuns gets a reference to the given []TargetObjectRun and assigns it to the TargetObjectRuns field.
func (o *UpdateObjectsRunsMetadataInternalParams) SetTargetObjectRuns(v []TargetObjectRun) {
	o.TargetObjectRuns = v
}

// GetTimeRange returns the TimeRange field value if set, zero value otherwise.
func (o *UpdateObjectsRunsMetadataInternalParams) GetTimeRange() TimeRangeUsecs {
	if o == nil || IsNil(o.TimeRange) {
		var ret TimeRangeUsecs
		return ret
	}
	return *o.TimeRange
}

// GetTimeRangeOk returns a tuple with the TimeRange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateObjectsRunsMetadataInternalParams) GetTimeRangeOk() (*TimeRangeUsecs, bool) {
	if o == nil || IsNil(o.TimeRange) {
		return nil, false
	}
	return o.TimeRange, true
}

// HasTimeRange returns a boolean if a field has been set.
func (o *UpdateObjectsRunsMetadataInternalParams) HasTimeRange() bool {
	if o != nil && !IsNil(o.TimeRange) {
		return true
	}

	return false
}

// SetTimeRange gets a reference to the given TimeRangeUsecs and assigns it to the TimeRange field.
func (o *UpdateObjectsRunsMetadataInternalParams) SetTimeRange(v TimeRangeUsecs) {
	o.TimeRange = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateObjectsRunsMetadataInternalParams) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateObjectsRunsMetadataInternalParams) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *UpdateObjectsRunsMetadataInternalParams) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *UpdateObjectsRunsMetadataInternalParams) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *UpdateObjectsRunsMetadataInternalParams) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *UpdateObjectsRunsMetadataInternalParams) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o UpdateObjectsRunsMetadataInternalParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateObjectsRunsMetadataInternalParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Environment) {
		toSerialize["environment"] = o.Environment
	}
	if o.LegalHold.IsSet() {
		toSerialize["legalHold"] = o.LegalHold.Get()
	}
	if !IsNil(o.Retention) {
		toSerialize["retention"] = o.Retention
	}
	if !IsNil(o.TargetObjectRuns) {
		toSerialize["targetObjectRuns"] = o.TargetObjectRuns
	}
	if !IsNil(o.TimeRange) {
		toSerialize["timeRange"] = o.TimeRange
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

type NullableUpdateObjectsRunsMetadataInternalParams struct {
	value *UpdateObjectsRunsMetadataInternalParams
	isSet bool
}

func (v NullableUpdateObjectsRunsMetadataInternalParams) Get() *UpdateObjectsRunsMetadataInternalParams {
	return v.value
}

func (v *NullableUpdateObjectsRunsMetadataInternalParams) Set(val *UpdateObjectsRunsMetadataInternalParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateObjectsRunsMetadataInternalParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateObjectsRunsMetadataInternalParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateObjectsRunsMetadataInternalParams(val *UpdateObjectsRunsMetadataInternalParams) *NullableUpdateObjectsRunsMetadataInternalParams {
	return &NullableUpdateObjectsRunsMetadataInternalParams{value: val, isSet: true}
}

func (v NullableUpdateObjectsRunsMetadataInternalParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateObjectsRunsMetadataInternalParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


