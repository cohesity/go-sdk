/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureArchiveBlobParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureArchiveBlobParams{}

// AzureArchiveBlobParams Specifies the parameters which are specific to Azure related with tier type Archive Blob
type AzureArchiveBlobParams struct {
	// Specifies the category of the external target.
	Category NullableString `json:"category"`
}

type _AzureArchiveBlobParams AzureArchiveBlobParams

// NewAzureArchiveBlobParams instantiates a new AzureArchiveBlobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureArchiveBlobParams(category NullableString) *AzureArchiveBlobParams {
	this := AzureArchiveBlobParams{}
	this.Category = category
	return &this
}

// NewAzureArchiveBlobParamsWithDefaults instantiates a new AzureArchiveBlobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureArchiveBlobParamsWithDefaults() *AzureArchiveBlobParams {
	this := AzureArchiveBlobParams{}
	return &this
}

// GetCategory returns the Category field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AzureArchiveBlobParams) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}

	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureArchiveBlobParams) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// SetCategory sets field value
func (o *AzureArchiveBlobParams) SetCategory(v string) {
	o.Category.Set(&v)
}

func (o AzureArchiveBlobParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureArchiveBlobParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["category"] = o.Category.Get()
	return toSerialize, nil
}

func (o *AzureArchiveBlobParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureArchiveBlobParams := _AzureArchiveBlobParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureArchiveBlobParams)

	if err != nil {
		return err
	}

	*o = AzureArchiveBlobParams(varAzureArchiveBlobParams)

	return err
}

type NullableAzureArchiveBlobParams struct {
	value *AzureArchiveBlobParams
	isSet bool
}

func (v NullableAzureArchiveBlobParams) Get() *AzureArchiveBlobParams {
	return v.value
}

func (v *NullableAzureArchiveBlobParams) Set(val *AzureArchiveBlobParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureArchiveBlobParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureArchiveBlobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureArchiveBlobParams(val *AzureArchiveBlobParams) *NullableAzureArchiveBlobParams {
	return &NullableAzureArchiveBlobParams{value: val, isSet: true}
}

func (v NullableAzureArchiveBlobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureArchiveBlobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


