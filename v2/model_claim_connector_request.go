/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClaimConnectorRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimConnectorRequest{}

// ClaimConnectorRequest Request params for claiming a connector.
type ClaimConnectorRequest struct {
	// Claim token used for authentication.
	ClaimToken string `json:"claimToken"`
	// Cluster id of the connector.
	ClusterId *int64 `json:"clusterId,omitempty"`
	// Incarnation id of the connector.
	ClusterIncarnationId *int64 `json:"clusterIncarnationId,omitempty"`
	// Unique id of the connector.
	ConnectorGuid int64 `json:"connectorGuid"`
	// IP address of the connector.
	ConnectorIp *string `json:"connectorIp,omitempty"`
	// Name of the connector.
	ConnectorName *string `json:"connectorName,omitempty"`
	// Software version of the connector.
	SoftwareVersion *string `json:"softwareVersion,omitempty"`
}

type _ClaimConnectorRequest ClaimConnectorRequest

// NewClaimConnectorRequest instantiates a new ClaimConnectorRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimConnectorRequest(claimToken string, connectorGuid int64) *ClaimConnectorRequest {
	this := ClaimConnectorRequest{}
	this.ClaimToken = claimToken
	this.ConnectorGuid = connectorGuid
	return &this
}

// NewClaimConnectorRequestWithDefaults instantiates a new ClaimConnectorRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimConnectorRequestWithDefaults() *ClaimConnectorRequest {
	this := ClaimConnectorRequest{}
	return &this
}

// GetClaimToken returns the ClaimToken field value
func (o *ClaimConnectorRequest) GetClaimToken() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClaimToken
}

// GetClaimTokenOk returns a tuple with the ClaimToken field value
// and a boolean to check if the value has been set.
func (o *ClaimConnectorRequest) GetClaimTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClaimToken, true
}

// SetClaimToken sets field value
func (o *ClaimConnectorRequest) SetClaimToken(v string) {
	o.ClaimToken = v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *ClaimConnectorRequest) GetClusterId() int64 {
	if o == nil || IsNil(o.ClusterId) {
		var ret int64
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimConnectorRequest) GetClusterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *ClaimConnectorRequest) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given int64 and assigns it to the ClusterId field.
func (o *ClaimConnectorRequest) SetClusterId(v int64) {
	o.ClusterId = &v
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise.
func (o *ClaimConnectorRequest) GetClusterIncarnationId() int64 {
	if o == nil || IsNil(o.ClusterIncarnationId) {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimConnectorRequest) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ClusterIncarnationId) {
		return nil, false
	}
	return o.ClusterIncarnationId, true
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *ClaimConnectorRequest) HasClusterIncarnationId() bool {
	if o != nil && !IsNil(o.ClusterIncarnationId) {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given int64 and assigns it to the ClusterIncarnationId field.
func (o *ClaimConnectorRequest) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId = &v
}

// GetConnectorGuid returns the ConnectorGuid field value
func (o *ClaimConnectorRequest) GetConnectorGuid() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ConnectorGuid
}

// GetConnectorGuidOk returns a tuple with the ConnectorGuid field value
// and a boolean to check if the value has been set.
func (o *ClaimConnectorRequest) GetConnectorGuidOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectorGuid, true
}

// SetConnectorGuid sets field value
func (o *ClaimConnectorRequest) SetConnectorGuid(v int64) {
	o.ConnectorGuid = v
}

// GetConnectorIp returns the ConnectorIp field value if set, zero value otherwise.
func (o *ClaimConnectorRequest) GetConnectorIp() string {
	if o == nil || IsNil(o.ConnectorIp) {
		var ret string
		return ret
	}
	return *o.ConnectorIp
}

// GetConnectorIpOk returns a tuple with the ConnectorIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimConnectorRequest) GetConnectorIpOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorIp) {
		return nil, false
	}
	return o.ConnectorIp, true
}

// HasConnectorIp returns a boolean if a field has been set.
func (o *ClaimConnectorRequest) HasConnectorIp() bool {
	if o != nil && !IsNil(o.ConnectorIp) {
		return true
	}

	return false
}

// SetConnectorIp gets a reference to the given string and assigns it to the ConnectorIp field.
func (o *ClaimConnectorRequest) SetConnectorIp(v string) {
	o.ConnectorIp = &v
}

// GetConnectorName returns the ConnectorName field value if set, zero value otherwise.
func (o *ClaimConnectorRequest) GetConnectorName() string {
	if o == nil || IsNil(o.ConnectorName) {
		var ret string
		return ret
	}
	return *o.ConnectorName
}

// GetConnectorNameOk returns a tuple with the ConnectorName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimConnectorRequest) GetConnectorNameOk() (*string, bool) {
	if o == nil || IsNil(o.ConnectorName) {
		return nil, false
	}
	return o.ConnectorName, true
}

// HasConnectorName returns a boolean if a field has been set.
func (o *ClaimConnectorRequest) HasConnectorName() bool {
	if o != nil && !IsNil(o.ConnectorName) {
		return true
	}

	return false
}

// SetConnectorName gets a reference to the given string and assigns it to the ConnectorName field.
func (o *ClaimConnectorRequest) SetConnectorName(v string) {
	o.ConnectorName = &v
}

// GetSoftwareVersion returns the SoftwareVersion field value if set, zero value otherwise.
func (o *ClaimConnectorRequest) GetSoftwareVersion() string {
	if o == nil || IsNil(o.SoftwareVersion) {
		var ret string
		return ret
	}
	return *o.SoftwareVersion
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimConnectorRequest) GetSoftwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareVersion) {
		return nil, false
	}
	return o.SoftwareVersion, true
}

// HasSoftwareVersion returns a boolean if a field has been set.
func (o *ClaimConnectorRequest) HasSoftwareVersion() bool {
	if o != nil && !IsNil(o.SoftwareVersion) {
		return true
	}

	return false
}

// SetSoftwareVersion gets a reference to the given string and assigns it to the SoftwareVersion field.
func (o *ClaimConnectorRequest) SetSoftwareVersion(v string) {
	o.SoftwareVersion = &v
}

func (o ClaimConnectorRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimConnectorRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["claimToken"] = o.ClaimToken
	if !IsNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if !IsNil(o.ClusterIncarnationId) {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId
	}
	toSerialize["connectorGuid"] = o.ConnectorGuid
	if !IsNil(o.ConnectorIp) {
		toSerialize["connectorIp"] = o.ConnectorIp
	}
	if !IsNil(o.ConnectorName) {
		toSerialize["connectorName"] = o.ConnectorName
	}
	if !IsNil(o.SoftwareVersion) {
		toSerialize["softwareVersion"] = o.SoftwareVersion
	}
	return toSerialize, nil
}

func (o *ClaimConnectorRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"claimToken",
		"connectorGuid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaimConnectorRequest := _ClaimConnectorRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClaimConnectorRequest)

	if err != nil {
		return err
	}

	*o = ClaimConnectorRequest(varClaimConnectorRequest)

	return err
}

type NullableClaimConnectorRequest struct {
	value *ClaimConnectorRequest
	isSet bool
}

func (v NullableClaimConnectorRequest) Get() *ClaimConnectorRequest {
	return v.value
}

func (v *NullableClaimConnectorRequest) Set(val *ClaimConnectorRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimConnectorRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimConnectorRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimConnectorRequest(val *ClaimConnectorRequest) *NullableClaimConnectorRequest {
	return &NullableClaimConnectorRequest{value: val, isSet: true}
}

func (v NullableClaimConnectorRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimConnectorRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


