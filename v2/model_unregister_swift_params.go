/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UnregisterSwiftParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnregisterSwiftParams{}

// UnregisterSwiftParams Specifies the parameters to unregister a Swift service from Keystone server.
type UnregisterSwiftParams struct {
	KeystoneCredentials *KeystoneCredentials `json:"keystoneCredentials,omitempty"`
	// Specifies the tenant Id who's Swift service will be unregistered.
	TenantId NullableString `json:"tenantId"`
}

type _UnregisterSwiftParams UnregisterSwiftParams

// NewUnregisterSwiftParams instantiates a new UnregisterSwiftParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnregisterSwiftParams(tenantId NullableString) *UnregisterSwiftParams {
	this := UnregisterSwiftParams{}
	this.TenantId = tenantId
	return &this
}

// NewUnregisterSwiftParamsWithDefaults instantiates a new UnregisterSwiftParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnregisterSwiftParamsWithDefaults() *UnregisterSwiftParams {
	this := UnregisterSwiftParams{}
	return &this
}

// GetKeystoneCredentials returns the KeystoneCredentials field value if set, zero value otherwise.
func (o *UnregisterSwiftParams) GetKeystoneCredentials() KeystoneCredentials {
	if o == nil || IsNil(o.KeystoneCredentials) {
		var ret KeystoneCredentials
		return ret
	}
	return *o.KeystoneCredentials
}

// GetKeystoneCredentialsOk returns a tuple with the KeystoneCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnregisterSwiftParams) GetKeystoneCredentialsOk() (*KeystoneCredentials, bool) {
	if o == nil || IsNil(o.KeystoneCredentials) {
		return nil, false
	}
	return o.KeystoneCredentials, true
}

// HasKeystoneCredentials returns a boolean if a field has been set.
func (o *UnregisterSwiftParams) HasKeystoneCredentials() bool {
	if o != nil && !IsNil(o.KeystoneCredentials) {
		return true
	}

	return false
}

// SetKeystoneCredentials gets a reference to the given KeystoneCredentials and assigns it to the KeystoneCredentials field.
func (o *UnregisterSwiftParams) SetKeystoneCredentials(v KeystoneCredentials) {
	o.KeystoneCredentials = &v
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UnregisterSwiftParams) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UnregisterSwiftParams) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *UnregisterSwiftParams) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

func (o UnregisterSwiftParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnregisterSwiftParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.KeystoneCredentials) {
		toSerialize["keystoneCredentials"] = o.KeystoneCredentials
	}
	toSerialize["tenantId"] = o.TenantId.Get()
	return toSerialize, nil
}

func (o *UnregisterSwiftParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"tenantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUnregisterSwiftParams := _UnregisterSwiftParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUnregisterSwiftParams)

	if err != nil {
		return err
	}

	*o = UnregisterSwiftParams(varUnregisterSwiftParams)

	return err
}

type NullableUnregisterSwiftParams struct {
	value *UnregisterSwiftParams
	isSet bool
}

func (v NullableUnregisterSwiftParams) Get() *UnregisterSwiftParams {
	return v.value
}

func (v *NullableUnregisterSwiftParams) Set(val *UnregisterSwiftParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUnregisterSwiftParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUnregisterSwiftParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnregisterSwiftParams(val *UnregisterSwiftParams) *NullableUnregisterSwiftParams {
	return &NullableUnregisterSwiftParams{value: val, isSet: true}
}

func (v NullableUnregisterSwiftParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnregisterSwiftParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


