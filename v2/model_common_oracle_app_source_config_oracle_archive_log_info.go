/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CommonOracleAppSourceConfigOracleArchiveLogInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonOracleAppSourceConfigOracleArchiveLogInfo{}

// CommonOracleAppSourceConfigOracleArchiveLogInfo Specifies Range in Time, Scn or Sequence to restore archive logs of a DB.
type CommonOracleAppSourceConfigOracleArchiveLogInfo struct {
	// Specifies destination where archive logs are to be restored.
	ArchiveLogRestoreDest NullableString `json:"archiveLogRestoreDest,omitempty"`
	// Specifies an array of oracle restore ranges.
	RangeInfoVec []OracleRangeMetaInfo `json:"rangeInfoVec,omitempty"`
	// Specifies the type of range.
	RangeType NullableString `json:"rangeType,omitempty"`
}

// NewCommonOracleAppSourceConfigOracleArchiveLogInfo instantiates a new CommonOracleAppSourceConfigOracleArchiveLogInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonOracleAppSourceConfigOracleArchiveLogInfo() *CommonOracleAppSourceConfigOracleArchiveLogInfo {
	this := CommonOracleAppSourceConfigOracleArchiveLogInfo{}
	return &this
}

// NewCommonOracleAppSourceConfigOracleArchiveLogInfoWithDefaults instantiates a new CommonOracleAppSourceConfigOracleArchiveLogInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonOracleAppSourceConfigOracleArchiveLogInfoWithDefaults() *CommonOracleAppSourceConfigOracleArchiveLogInfo {
	this := CommonOracleAppSourceConfigOracleArchiveLogInfo{}
	return &this
}

// GetArchiveLogRestoreDest returns the ArchiveLogRestoreDest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) GetArchiveLogRestoreDest() string {
	if o == nil || IsNil(o.ArchiveLogRestoreDest.Get()) {
		var ret string
		return ret
	}
	return *o.ArchiveLogRestoreDest.Get()
}

// GetArchiveLogRestoreDestOk returns a tuple with the ArchiveLogRestoreDest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) GetArchiveLogRestoreDestOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArchiveLogRestoreDest.Get(), o.ArchiveLogRestoreDest.IsSet()
}

// HasArchiveLogRestoreDest returns a boolean if a field has been set.
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) HasArchiveLogRestoreDest() bool {
	if o != nil && o.ArchiveLogRestoreDest.IsSet() {
		return true
	}

	return false
}

// SetArchiveLogRestoreDest gets a reference to the given NullableString and assigns it to the ArchiveLogRestoreDest field.
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) SetArchiveLogRestoreDest(v string) {
	o.ArchiveLogRestoreDest.Set(&v)
}
// SetArchiveLogRestoreDestNil sets the value for ArchiveLogRestoreDest to be an explicit nil
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) SetArchiveLogRestoreDestNil() {
	o.ArchiveLogRestoreDest.Set(nil)
}

// UnsetArchiveLogRestoreDest ensures that no value is present for ArchiveLogRestoreDest, not even an explicit nil
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) UnsetArchiveLogRestoreDest() {
	o.ArchiveLogRestoreDest.Unset()
}

// GetRangeInfoVec returns the RangeInfoVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) GetRangeInfoVec() []OracleRangeMetaInfo {
	if o == nil {
		var ret []OracleRangeMetaInfo
		return ret
	}
	return o.RangeInfoVec
}

// GetRangeInfoVecOk returns a tuple with the RangeInfoVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) GetRangeInfoVecOk() ([]OracleRangeMetaInfo, bool) {
	if o == nil || IsNil(o.RangeInfoVec) {
		return nil, false
	}
	return o.RangeInfoVec, true
}

// HasRangeInfoVec returns a boolean if a field has been set.
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) HasRangeInfoVec() bool {
	if o != nil && !IsNil(o.RangeInfoVec) {
		return true
	}

	return false
}

// SetRangeInfoVec gets a reference to the given []OracleRangeMetaInfo and assigns it to the RangeInfoVec field.
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) SetRangeInfoVec(v []OracleRangeMetaInfo) {
	o.RangeInfoVec = v
}

// GetRangeType returns the RangeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) GetRangeType() string {
	if o == nil || IsNil(o.RangeType.Get()) {
		var ret string
		return ret
	}
	return *o.RangeType.Get()
}

// GetRangeTypeOk returns a tuple with the RangeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) GetRangeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RangeType.Get(), o.RangeType.IsSet()
}

// HasRangeType returns a boolean if a field has been set.
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) HasRangeType() bool {
	if o != nil && o.RangeType.IsSet() {
		return true
	}

	return false
}

// SetRangeType gets a reference to the given NullableString and assigns it to the RangeType field.
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) SetRangeType(v string) {
	o.RangeType.Set(&v)
}
// SetRangeTypeNil sets the value for RangeType to be an explicit nil
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) SetRangeTypeNil() {
	o.RangeType.Set(nil)
}

// UnsetRangeType ensures that no value is present for RangeType, not even an explicit nil
func (o *CommonOracleAppSourceConfigOracleArchiveLogInfo) UnsetRangeType() {
	o.RangeType.Unset()
}

func (o CommonOracleAppSourceConfigOracleArchiveLogInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonOracleAppSourceConfigOracleArchiveLogInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveLogRestoreDest.IsSet() {
		toSerialize["archiveLogRestoreDest"] = o.ArchiveLogRestoreDest.Get()
	}
	if o.RangeInfoVec != nil {
		toSerialize["rangeInfoVec"] = o.RangeInfoVec
	}
	if o.RangeType.IsSet() {
		toSerialize["rangeType"] = o.RangeType.Get()
	}
	return toSerialize, nil
}

type NullableCommonOracleAppSourceConfigOracleArchiveLogInfo struct {
	value *CommonOracleAppSourceConfigOracleArchiveLogInfo
	isSet bool
}

func (v NullableCommonOracleAppSourceConfigOracleArchiveLogInfo) Get() *CommonOracleAppSourceConfigOracleArchiveLogInfo {
	return v.value
}

func (v *NullableCommonOracleAppSourceConfigOracleArchiveLogInfo) Set(val *CommonOracleAppSourceConfigOracleArchiveLogInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonOracleAppSourceConfigOracleArchiveLogInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonOracleAppSourceConfigOracleArchiveLogInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonOracleAppSourceConfigOracleArchiveLogInfo(val *CommonOracleAppSourceConfigOracleArchiveLogInfo) *NullableCommonOracleAppSourceConfigOracleArchiveLogInfo {
	return &NullableCommonOracleAppSourceConfigOracleArchiveLogInfo{value: val, isSet: true}
}

func (v NullableCommonOracleAppSourceConfigOracleArchiveLogInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonOracleAppSourceConfigOracleArchiveLogInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


