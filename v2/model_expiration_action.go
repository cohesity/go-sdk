/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ExpirationAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExpirationAction{}

// ExpirationAction Specifies the Lifecycle current version ExpirationAction. Note: All the three fields are mutually exclusive to each other.
type ExpirationAction struct {
	// Specifies the Timestamp in Usecs for the date when the object is subject to the rule.
	DateInUsecs NullableInt64 `json:"dateInUsecs,omitempty"`
	// Specifies the Lifetime in days of the objects that are subject to the rule.
	Days NullableInt32 `json:"days,omitempty"`
	// Specifies whether Amazon S3 will remove a delete marker with no non-current versions. If set, the delete marker will be expired.
	ExpiredObjectDeleteMarker NullableBool `json:"expiredObjectDeleteMarker,omitempty"`
}

// NewExpirationAction instantiates a new ExpirationAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpirationAction() *ExpirationAction {
	this := ExpirationAction{}
	return &this
}

// NewExpirationActionWithDefaults instantiates a new ExpirationAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpirationActionWithDefaults() *ExpirationAction {
	this := ExpirationAction{}
	return &this
}

// GetDateInUsecs returns the DateInUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpirationAction) GetDateInUsecs() int64 {
	if o == nil || IsNil(o.DateInUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.DateInUsecs.Get()
}

// GetDateInUsecsOk returns a tuple with the DateInUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpirationAction) GetDateInUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateInUsecs.Get(), o.DateInUsecs.IsSet()
}

// HasDateInUsecs returns a boolean if a field has been set.
func (o *ExpirationAction) HasDateInUsecs() bool {
	if o != nil && o.DateInUsecs.IsSet() {
		return true
	}

	return false
}

// SetDateInUsecs gets a reference to the given NullableInt64 and assigns it to the DateInUsecs field.
func (o *ExpirationAction) SetDateInUsecs(v int64) {
	o.DateInUsecs.Set(&v)
}
// SetDateInUsecsNil sets the value for DateInUsecs to be an explicit nil
func (o *ExpirationAction) SetDateInUsecsNil() {
	o.DateInUsecs.Set(nil)
}

// UnsetDateInUsecs ensures that no value is present for DateInUsecs, not even an explicit nil
func (o *ExpirationAction) UnsetDateInUsecs() {
	o.DateInUsecs.Unset()
}

// GetDays returns the Days field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpirationAction) GetDays() int32 {
	if o == nil || IsNil(o.Days.Get()) {
		var ret int32
		return ret
	}
	return *o.Days.Get()
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpirationAction) GetDaysOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Days.Get(), o.Days.IsSet()
}

// HasDays returns a boolean if a field has been set.
func (o *ExpirationAction) HasDays() bool {
	if o != nil && o.Days.IsSet() {
		return true
	}

	return false
}

// SetDays gets a reference to the given NullableInt32 and assigns it to the Days field.
func (o *ExpirationAction) SetDays(v int32) {
	o.Days.Set(&v)
}
// SetDaysNil sets the value for Days to be an explicit nil
func (o *ExpirationAction) SetDaysNil() {
	o.Days.Set(nil)
}

// UnsetDays ensures that no value is present for Days, not even an explicit nil
func (o *ExpirationAction) UnsetDays() {
	o.Days.Unset()
}

// GetExpiredObjectDeleteMarker returns the ExpiredObjectDeleteMarker field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpirationAction) GetExpiredObjectDeleteMarker() bool {
	if o == nil || IsNil(o.ExpiredObjectDeleteMarker.Get()) {
		var ret bool
		return ret
	}
	return *o.ExpiredObjectDeleteMarker.Get()
}

// GetExpiredObjectDeleteMarkerOk returns a tuple with the ExpiredObjectDeleteMarker field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpirationAction) GetExpiredObjectDeleteMarkerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiredObjectDeleteMarker.Get(), o.ExpiredObjectDeleteMarker.IsSet()
}

// HasExpiredObjectDeleteMarker returns a boolean if a field has been set.
func (o *ExpirationAction) HasExpiredObjectDeleteMarker() bool {
	if o != nil && o.ExpiredObjectDeleteMarker.IsSet() {
		return true
	}

	return false
}

// SetExpiredObjectDeleteMarker gets a reference to the given NullableBool and assigns it to the ExpiredObjectDeleteMarker field.
func (o *ExpirationAction) SetExpiredObjectDeleteMarker(v bool) {
	o.ExpiredObjectDeleteMarker.Set(&v)
}
// SetExpiredObjectDeleteMarkerNil sets the value for ExpiredObjectDeleteMarker to be an explicit nil
func (o *ExpirationAction) SetExpiredObjectDeleteMarkerNil() {
	o.ExpiredObjectDeleteMarker.Set(nil)
}

// UnsetExpiredObjectDeleteMarker ensures that no value is present for ExpiredObjectDeleteMarker, not even an explicit nil
func (o *ExpirationAction) UnsetExpiredObjectDeleteMarker() {
	o.ExpiredObjectDeleteMarker.Unset()
}

func (o ExpirationAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExpirationAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DateInUsecs.IsSet() {
		toSerialize["dateInUsecs"] = o.DateInUsecs.Get()
	}
	if o.Days.IsSet() {
		toSerialize["days"] = o.Days.Get()
	}
	if o.ExpiredObjectDeleteMarker.IsSet() {
		toSerialize["expiredObjectDeleteMarker"] = o.ExpiredObjectDeleteMarker.Get()
	}
	return toSerialize, nil
}

type NullableExpirationAction struct {
	value *ExpirationAction
	isSet bool
}

func (v NullableExpirationAction) Get() *ExpirationAction {
	return v.value
}

func (v *NullableExpirationAction) Set(val *ExpirationAction) {
	v.value = val
	v.isSet = true
}

func (v NullableExpirationAction) IsSet() bool {
	return v.isSet
}

func (v *NullableExpirationAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpirationAction(val *ExpirationAction) *NullableExpirationAction {
	return &NullableExpirationAction{value: val, isSet: true}
}

func (v NullableExpirationAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpirationAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


