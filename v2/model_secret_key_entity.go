/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SecretKeyEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretKeyEntity{}

// SecretKeyEntity Specifies the new secret key instance generated for the user.
type SecretKeyEntity struct {
	// Specifies the new s3 secret key.
	SecretKey NullableString `json:"secret-key,omitempty"`
}

// NewSecretKeyEntity instantiates a new SecretKeyEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretKeyEntity() *SecretKeyEntity {
	this := SecretKeyEntity{}
	return &this
}

// NewSecretKeyEntityWithDefaults instantiates a new SecretKeyEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretKeyEntityWithDefaults() *SecretKeyEntity {
	this := SecretKeyEntity{}
	return &this
}

// GetSecretKey returns the SecretKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecretKeyEntity) GetSecretKey() string {
	if o == nil || IsNil(o.SecretKey.Get()) {
		var ret string
		return ret
	}
	return *o.SecretKey.Get()
}

// GetSecretKeyOk returns a tuple with the SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecretKeyEntity) GetSecretKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecretKey.Get(), o.SecretKey.IsSet()
}

// HasSecretKey returns a boolean if a field has been set.
func (o *SecretKeyEntity) HasSecretKey() bool {
	if o != nil && o.SecretKey.IsSet() {
		return true
	}

	return false
}

// SetSecretKey gets a reference to the given NullableString and assigns it to the SecretKey field.
func (o *SecretKeyEntity) SetSecretKey(v string) {
	o.SecretKey.Set(&v)
}
// SetSecretKeyNil sets the value for SecretKey to be an explicit nil
func (o *SecretKeyEntity) SetSecretKeyNil() {
	o.SecretKey.Set(nil)
}

// UnsetSecretKey ensures that no value is present for SecretKey, not even an explicit nil
func (o *SecretKeyEntity) UnsetSecretKey() {
	o.SecretKey.Unset()
}

func (o SecretKeyEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretKeyEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SecretKey.IsSet() {
		toSerialize["secret-key"] = o.SecretKey.Get()
	}
	return toSerialize, nil
}

type NullableSecretKeyEntity struct {
	value *SecretKeyEntity
	isSet bool
}

func (v NullableSecretKeyEntity) Get() *SecretKeyEntity {
	return v.value
}

func (v *NullableSecretKeyEntity) Set(val *SecretKeyEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretKeyEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretKeyEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretKeyEntity(val *SecretKeyEntity) *NullableSecretKeyEntity {
	return &NullableSecretKeyEntity{value: val, isSet: true}
}

func (v NullableSecretKeyEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretKeyEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


