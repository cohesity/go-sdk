/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BgpTimers type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BgpTimers{}

// BgpTimers BGP protocol timers.
type BgpTimers struct {
	// Hold time in seconds.
	HoldTime NullableInt32 `json:"holdTime,omitempty"`
	// Keep alive interval in seconds.
	KeepAlive NullableInt32 `json:"keepAlive,omitempty"`
}

// NewBgpTimers instantiates a new BgpTimers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBgpTimers() *BgpTimers {
	this := BgpTimers{}
	return &this
}

// NewBgpTimersWithDefaults instantiates a new BgpTimers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBgpTimersWithDefaults() *BgpTimers {
	this := BgpTimers{}
	return &this
}

// GetHoldTime returns the HoldTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BgpTimers) GetHoldTime() int32 {
	if o == nil || IsNil(o.HoldTime.Get()) {
		var ret int32
		return ret
	}
	return *o.HoldTime.Get()
}

// GetHoldTimeOk returns a tuple with the HoldTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BgpTimers) GetHoldTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HoldTime.Get(), o.HoldTime.IsSet()
}

// HasHoldTime returns a boolean if a field has been set.
func (o *BgpTimers) HasHoldTime() bool {
	if o != nil && o.HoldTime.IsSet() {
		return true
	}

	return false
}

// SetHoldTime gets a reference to the given NullableInt32 and assigns it to the HoldTime field.
func (o *BgpTimers) SetHoldTime(v int32) {
	o.HoldTime.Set(&v)
}
// SetHoldTimeNil sets the value for HoldTime to be an explicit nil
func (o *BgpTimers) SetHoldTimeNil() {
	o.HoldTime.Set(nil)
}

// UnsetHoldTime ensures that no value is present for HoldTime, not even an explicit nil
func (o *BgpTimers) UnsetHoldTime() {
	o.HoldTime.Unset()
}

// GetKeepAlive returns the KeepAlive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BgpTimers) GetKeepAlive() int32 {
	if o == nil || IsNil(o.KeepAlive.Get()) {
		var ret int32
		return ret
	}
	return *o.KeepAlive.Get()
}

// GetKeepAliveOk returns a tuple with the KeepAlive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BgpTimers) GetKeepAliveOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeepAlive.Get(), o.KeepAlive.IsSet()
}

// HasKeepAlive returns a boolean if a field has been set.
func (o *BgpTimers) HasKeepAlive() bool {
	if o != nil && o.KeepAlive.IsSet() {
		return true
	}

	return false
}

// SetKeepAlive gets a reference to the given NullableInt32 and assigns it to the KeepAlive field.
func (o *BgpTimers) SetKeepAlive(v int32) {
	o.KeepAlive.Set(&v)
}
// SetKeepAliveNil sets the value for KeepAlive to be an explicit nil
func (o *BgpTimers) SetKeepAliveNil() {
	o.KeepAlive.Set(nil)
}

// UnsetKeepAlive ensures that no value is present for KeepAlive, not even an explicit nil
func (o *BgpTimers) UnsetKeepAlive() {
	o.KeepAlive.Unset()
}

func (o BgpTimers) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BgpTimers) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.HoldTime.IsSet() {
		toSerialize["holdTime"] = o.HoldTime.Get()
	}
	if o.KeepAlive.IsSet() {
		toSerialize["keepAlive"] = o.KeepAlive.Get()
	}
	return toSerialize, nil
}

type NullableBgpTimers struct {
	value *BgpTimers
	isSet bool
}

func (v NullableBgpTimers) Get() *BgpTimers {
	return v.value
}

func (v *NullableBgpTimers) Set(val *BgpTimers) {
	v.value = val
	v.isSet = true
}

func (v NullableBgpTimers) IsSet() bool {
	return v.isSet
}

func (v *NullableBgpTimers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBgpTimers(val *BgpTimers) *NullableBgpTimers {
	return &NullableBgpTimers{value: val, isSet: true}
}

func (v NullableBgpTimers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBgpTimers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


