/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OpenIdProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OpenIdProvider{}

// OpenIdProvider Open ID provider
type OpenIdProvider struct {
	// Specifies the audience IDs of the configuration. This is used for validation. We will check this against the 'aud' field sent in the JWT at authorization time and if they do not match against at least one of the elements in this list, then authentication will fail.
	AudienceIds []string `json:"audienceIds"`
	// Specifies the number of minutes the cluster should wait before polling for a new public key. Default value is 1440 (24 hours).
	PollingFrequencyMins NullableInt64 `json:"pollingFrequencyMins,omitempty"`
	// Specifies the URL to poll for the public key.
	PublicKeyUrl NullableString `json:"publicKeyUrl"`
}

type _OpenIdProvider OpenIdProvider

// NewOpenIdProvider instantiates a new OpenIdProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOpenIdProvider(audienceIds []string, publicKeyUrl NullableString) *OpenIdProvider {
	this := OpenIdProvider{}
	this.AudienceIds = audienceIds
	var pollingFrequencyMins int64 = 1440
	this.PollingFrequencyMins = *NewNullableInt64(&pollingFrequencyMins)
	this.PublicKeyUrl = publicKeyUrl
	return &this
}

// NewOpenIdProviderWithDefaults instantiates a new OpenIdProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOpenIdProviderWithDefaults() *OpenIdProvider {
	this := OpenIdProvider{}
	var pollingFrequencyMins int64 = 1440
	this.PollingFrequencyMins = *NewNullableInt64(&pollingFrequencyMins)
	return &this
}

// GetAudienceIds returns the AudienceIds field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *OpenIdProvider) GetAudienceIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.AudienceIds
}

// GetAudienceIdsOk returns a tuple with the AudienceIds field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenIdProvider) GetAudienceIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.AudienceIds) {
		return nil, false
	}
	return o.AudienceIds, true
}

// SetAudienceIds sets field value
func (o *OpenIdProvider) SetAudienceIds(v []string) {
	o.AudienceIds = v
}

// GetPollingFrequencyMins returns the PollingFrequencyMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OpenIdProvider) GetPollingFrequencyMins() int64 {
	if o == nil || IsNil(o.PollingFrequencyMins.Get()) {
		var ret int64
		return ret
	}
	return *o.PollingFrequencyMins.Get()
}

// GetPollingFrequencyMinsOk returns a tuple with the PollingFrequencyMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenIdProvider) GetPollingFrequencyMinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PollingFrequencyMins.Get(), o.PollingFrequencyMins.IsSet()
}

// HasPollingFrequencyMins returns a boolean if a field has been set.
func (o *OpenIdProvider) HasPollingFrequencyMins() bool {
	if o != nil && o.PollingFrequencyMins.IsSet() {
		return true
	}

	return false
}

// SetPollingFrequencyMins gets a reference to the given NullableInt64 and assigns it to the PollingFrequencyMins field.
func (o *OpenIdProvider) SetPollingFrequencyMins(v int64) {
	o.PollingFrequencyMins.Set(&v)
}
// SetPollingFrequencyMinsNil sets the value for PollingFrequencyMins to be an explicit nil
func (o *OpenIdProvider) SetPollingFrequencyMinsNil() {
	o.PollingFrequencyMins.Set(nil)
}

// UnsetPollingFrequencyMins ensures that no value is present for PollingFrequencyMins, not even an explicit nil
func (o *OpenIdProvider) UnsetPollingFrequencyMins() {
	o.PollingFrequencyMins.Unset()
}

// GetPublicKeyUrl returns the PublicKeyUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OpenIdProvider) GetPublicKeyUrl() string {
	if o == nil || o.PublicKeyUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.PublicKeyUrl.Get()
}

// GetPublicKeyUrlOk returns a tuple with the PublicKeyUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OpenIdProvider) GetPublicKeyUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicKeyUrl.Get(), o.PublicKeyUrl.IsSet()
}

// SetPublicKeyUrl sets field value
func (o *OpenIdProvider) SetPublicKeyUrl(v string) {
	o.PublicKeyUrl.Set(&v)
}

func (o OpenIdProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OpenIdProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AudienceIds != nil {
		toSerialize["audienceIds"] = o.AudienceIds
	}
	if o.PollingFrequencyMins.IsSet() {
		toSerialize["pollingFrequencyMins"] = o.PollingFrequencyMins.Get()
	}
	toSerialize["publicKeyUrl"] = o.PublicKeyUrl.Get()
	return toSerialize, nil
}

func (o *OpenIdProvider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"audienceIds",
		"publicKeyUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOpenIdProvider := _OpenIdProvider{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOpenIdProvider)

	if err != nil {
		return err
	}

	*o = OpenIdProvider(varOpenIdProvider)

	return err
}

type NullableOpenIdProvider struct {
	value *OpenIdProvider
	isSet bool
}

func (v NullableOpenIdProvider) Get() *OpenIdProvider {
	return v.value
}

func (v *NullableOpenIdProvider) Set(val *OpenIdProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableOpenIdProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableOpenIdProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOpenIdProvider(val *OpenIdProvider) *NullableOpenIdProvider {
	return &NullableOpenIdProvider{value: val, isSet: true}
}

func (v NullableOpenIdProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOpenIdProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


