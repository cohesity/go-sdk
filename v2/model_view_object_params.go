/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewObjectParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewObjectParams{}

// ViewObjectParams Specifies the details of a view.
type ViewObjectParams struct {
	// Specifies the name of the view.
	Name NullableString `json:"name,omitempty"`
	// Specifies a distinct value that's unique to a source.
	Uid NullableString `json:"uid,omitempty"`
}

// NewViewObjectParams instantiates a new ViewObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewObjectParams() *ViewObjectParams {
	this := ViewObjectParams{}
	return &this
}

// NewViewObjectParamsWithDefaults instantiates a new ViewObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewObjectParamsWithDefaults() *ViewObjectParams {
	this := ViewObjectParams{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewObjectParams) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewObjectParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ViewObjectParams) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ViewObjectParams) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ViewObjectParams) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ViewObjectParams) UnsetName() {
	o.Name.Unset()
}

// GetUid returns the Uid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewObjectParams) GetUid() string {
	if o == nil || IsNil(o.Uid.Get()) {
		var ret string
		return ret
	}
	return *o.Uid.Get()
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewObjectParams) GetUidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uid.Get(), o.Uid.IsSet()
}

// HasUid returns a boolean if a field has been set.
func (o *ViewObjectParams) HasUid() bool {
	if o != nil && o.Uid.IsSet() {
		return true
	}

	return false
}

// SetUid gets a reference to the given NullableString and assigns it to the Uid field.
func (o *ViewObjectParams) SetUid(v string) {
	o.Uid.Set(&v)
}
// SetUidNil sets the value for Uid to be an explicit nil
func (o *ViewObjectParams) SetUidNil() {
	o.Uid.Set(nil)
}

// UnsetUid ensures that no value is present for Uid, not even an explicit nil
func (o *ViewObjectParams) UnsetUid() {
	o.Uid.Unset()
}

func (o ViewObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewObjectParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Uid.IsSet() {
		toSerialize["uid"] = o.Uid.Get()
	}
	return toSerialize, nil
}

type NullableViewObjectParams struct {
	value *ViewObjectParams
	isSet bool
}

func (v NullableViewObjectParams) Get() *ViewObjectParams {
	return v.value
}

func (v *NullableViewObjectParams) Set(val *ViewObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableViewObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableViewObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewObjectParams(val *ViewObjectParams) *NullableViewObjectParams {
	return &NullableViewObjectParams{value: val, isSet: true}
}

func (v NullableViewObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


