/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SignOnProtocol type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignOnProtocol{}

// SignOnProtocol Sign On Protocol
type SignOnProtocol struct {
	// Specifies the Sign On Protocol.
	Protocol *string `json:"protocol,omitempty"`
}

// NewSignOnProtocol instantiates a new SignOnProtocol object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignOnProtocol() *SignOnProtocol {
	this := SignOnProtocol{}
	return &this
}

// NewSignOnProtocolWithDefaults instantiates a new SignOnProtocol object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignOnProtocolWithDefaults() *SignOnProtocol {
	this := SignOnProtocol{}
	return &this
}

// GetProtocol returns the Protocol field value if set, zero value otherwise.
func (o *SignOnProtocol) GetProtocol() string {
	if o == nil || IsNil(o.Protocol) {
		var ret string
		return ret
	}
	return *o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignOnProtocol) GetProtocolOk() (*string, bool) {
	if o == nil || IsNil(o.Protocol) {
		return nil, false
	}
	return o.Protocol, true
}

// HasProtocol returns a boolean if a field has been set.
func (o *SignOnProtocol) HasProtocol() bool {
	if o != nil && !IsNil(o.Protocol) {
		return true
	}

	return false
}

// SetProtocol gets a reference to the given string and assigns it to the Protocol field.
func (o *SignOnProtocol) SetProtocol(v string) {
	o.Protocol = &v
}

func (o SignOnProtocol) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignOnProtocol) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Protocol) {
		toSerialize["protocol"] = o.Protocol
	}
	return toSerialize, nil
}

type NullableSignOnProtocol struct {
	value *SignOnProtocol
	isSet bool
}

func (v NullableSignOnProtocol) Get() *SignOnProtocol {
	return v.value
}

func (v *NullableSignOnProtocol) Set(val *SignOnProtocol) {
	v.value = val
	v.isSet = true
}

func (v NullableSignOnProtocol) IsSet() bool {
	return v.isSet
}

func (v *NullableSignOnProtocol) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignOnProtocol(val *SignOnProtocol) *NullableSignOnProtocol {
	return &NullableSignOnProtocol{value: val, isSet: true}
}

func (v NullableSignOnProtocol) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignOnProtocol) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


