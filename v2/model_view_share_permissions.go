/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewSharePermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewSharePermissions{}

// ViewSharePermissions Specifies share permissions of the view.
type ViewSharePermissions struct {
	// Specifies a list of share permissions.
	Permissions []SmbPermission `json:"permissions,omitempty"`
	// Specifies a list of super user sids.
	SuperUserSids []string `json:"superUserSids,omitempty"`
}

// NewViewSharePermissions instantiates a new ViewSharePermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewSharePermissions() *ViewSharePermissions {
	this := ViewSharePermissions{}
	return &this
}

// NewViewSharePermissionsWithDefaults instantiates a new ViewSharePermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewSharePermissionsWithDefaults() *ViewSharePermissions {
	this := ViewSharePermissions{}
	return &this
}

// GetPermissions returns the Permissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewSharePermissions) GetPermissions() []SmbPermission {
	if o == nil {
		var ret []SmbPermission
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewSharePermissions) GetPermissionsOk() ([]SmbPermission, bool) {
	if o == nil || IsNil(o.Permissions) {
		return nil, false
	}
	return o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ViewSharePermissions) HasPermissions() bool {
	if o != nil && !IsNil(o.Permissions) {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []SmbPermission and assigns it to the Permissions field.
func (o *ViewSharePermissions) SetPermissions(v []SmbPermission) {
	o.Permissions = v
}

// GetSuperUserSids returns the SuperUserSids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewSharePermissions) GetSuperUserSids() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SuperUserSids
}

// GetSuperUserSidsOk returns a tuple with the SuperUserSids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewSharePermissions) GetSuperUserSidsOk() ([]string, bool) {
	if o == nil || IsNil(o.SuperUserSids) {
		return nil, false
	}
	return o.SuperUserSids, true
}

// HasSuperUserSids returns a boolean if a field has been set.
func (o *ViewSharePermissions) HasSuperUserSids() bool {
	if o != nil && !IsNil(o.SuperUserSids) {
		return true
	}

	return false
}

// SetSuperUserSids gets a reference to the given []string and assigns it to the SuperUserSids field.
func (o *ViewSharePermissions) SetSuperUserSids(v []string) {
	o.SuperUserSids = v
}

func (o ViewSharePermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewSharePermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if o.SuperUserSids != nil {
		toSerialize["superUserSids"] = o.SuperUserSids
	}
	return toSerialize, nil
}

type NullableViewSharePermissions struct {
	value *ViewSharePermissions
	isSet bool
}

func (v NullableViewSharePermissions) Get() *ViewSharePermissions {
	return v.value
}

func (v *NullableViewSharePermissions) Set(val *ViewSharePermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableViewSharePermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableViewSharePermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewSharePermissions(val *ViewSharePermissions) *NullableViewSharePermissions {
	return &NullableViewSharePermissions{value: val, isSet: true}
}

func (v NullableViewSharePermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewSharePermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


