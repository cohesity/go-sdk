/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewUserQuotaSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewUserQuotaSettings{}

// ViewUserQuotaSettings Specifies the user quota config on the View.
type ViewUserQuotaSettings struct {
	DefaultQuotaPolicy *ViewUserQuotaSettingsDefaultQuotaPolicy `json:"defaultQuotaPolicy,omitempty"`
	// Specifies whether user quota is enabled for the View.
	Enabled bool `json:"enabled"`
}

type _ViewUserQuotaSettings ViewUserQuotaSettings

// NewViewUserQuotaSettings instantiates a new ViewUserQuotaSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewUserQuotaSettings(enabled bool) *ViewUserQuotaSettings {
	this := ViewUserQuotaSettings{}
	this.Enabled = enabled
	return &this
}

// NewViewUserQuotaSettingsWithDefaults instantiates a new ViewUserQuotaSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewUserQuotaSettingsWithDefaults() *ViewUserQuotaSettings {
	this := ViewUserQuotaSettings{}
	return &this
}

// GetDefaultQuotaPolicy returns the DefaultQuotaPolicy field value if set, zero value otherwise.
func (o *ViewUserQuotaSettings) GetDefaultQuotaPolicy() ViewUserQuotaSettingsDefaultQuotaPolicy {
	if o == nil || IsNil(o.DefaultQuotaPolicy) {
		var ret ViewUserQuotaSettingsDefaultQuotaPolicy
		return ret
	}
	return *o.DefaultQuotaPolicy
}

// GetDefaultQuotaPolicyOk returns a tuple with the DefaultQuotaPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewUserQuotaSettings) GetDefaultQuotaPolicyOk() (*ViewUserQuotaSettingsDefaultQuotaPolicy, bool) {
	if o == nil || IsNil(o.DefaultQuotaPolicy) {
		return nil, false
	}
	return o.DefaultQuotaPolicy, true
}

// HasDefaultQuotaPolicy returns a boolean if a field has been set.
func (o *ViewUserQuotaSettings) HasDefaultQuotaPolicy() bool {
	if o != nil && !IsNil(o.DefaultQuotaPolicy) {
		return true
	}

	return false
}

// SetDefaultQuotaPolicy gets a reference to the given ViewUserQuotaSettingsDefaultQuotaPolicy and assigns it to the DefaultQuotaPolicy field.
func (o *ViewUserQuotaSettings) SetDefaultQuotaPolicy(v ViewUserQuotaSettingsDefaultQuotaPolicy) {
	o.DefaultQuotaPolicy = &v
}

// GetEnabled returns the Enabled field value
func (o *ViewUserQuotaSettings) GetEnabled() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
func (o *ViewUserQuotaSettings) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enabled, true
}

// SetEnabled sets field value
func (o *ViewUserQuotaSettings) SetEnabled(v bool) {
	o.Enabled = v
}

func (o ViewUserQuotaSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewUserQuotaSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultQuotaPolicy) {
		toSerialize["defaultQuotaPolicy"] = o.DefaultQuotaPolicy
	}
	toSerialize["enabled"] = o.Enabled
	return toSerialize, nil
}

func (o *ViewUserQuotaSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewUserQuotaSettings := _ViewUserQuotaSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewUserQuotaSettings)

	if err != nil {
		return err
	}

	*o = ViewUserQuotaSettings(varViewUserQuotaSettings)

	return err
}

type NullableViewUserQuotaSettings struct {
	value *ViewUserQuotaSettings
	isSet bool
}

func (v NullableViewUserQuotaSettings) Get() *ViewUserQuotaSettings {
	return v.value
}

func (v *NullableViewUserQuotaSettings) Set(val *ViewUserQuotaSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUserQuotaSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUserQuotaSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUserQuotaSettings(val *ViewUserQuotaSettings) *NullableViewUserQuotaSettings {
	return &NullableViewUserQuotaSettings{value: val, isSet: true}
}

func (v NullableViewUserQuotaSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUserQuotaSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


