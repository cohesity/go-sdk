/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverOneDriveParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverOneDriveParams{}

// RecoverOneDriveParams Specifies the parameters to recover an Office 365 OneDrive.
type RecoverOneDriveParams struct {
	// Specifies whether to continue recovering other OneDrive items if one of items failed to recover. Default value is false.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies a list of OneDrive params associated with the objects to recover. These parameters allow overriding the request level 'recoverUserDefaultDrive' parameter for each object specified here.
	Objects []ObjectOneDriveParam `json:"objects"`
	// Specifies whether to recover Preservation Hold Library associated with the OneDrives selected for restore. Default value is false.
	RecoverPreservationHoldLibrary NullableBool `json:"recoverPreservationHoldLibrary,omitempty"`
	// Specifies whether to recover default drives associated with the OneDrives selected for restore. Default value is true. This setting can be overridden for each object selected for recovery, by specifying 'recoverEntireDrive' for the desired drive within 'oneDriveParams'. Granular recovery is still allowed even if this value is set to true.
	RecoverUserDefaultDrive NullableBool `json:"recoverUserDefaultDrive,omitempty"`
	TargetDrive *RecoverOneDriveParamsTargetDrive `json:"targetDrive,omitempty"`
}

type _RecoverOneDriveParams RecoverOneDriveParams

// NewRecoverOneDriveParams instantiates a new RecoverOneDriveParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverOneDriveParams(objects []ObjectOneDriveParam) *RecoverOneDriveParams {
	this := RecoverOneDriveParams{}
	this.Objects = objects
	return &this
}

// NewRecoverOneDriveParamsWithDefaults instantiates a new RecoverOneDriveParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverOneDriveParamsWithDefaults() *RecoverOneDriveParams {
	this := RecoverOneDriveParams{}
	return &this
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOneDriveParams) GetContinueOnError() bool {
	if o == nil || IsNil(o.ContinueOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOneDriveParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *RecoverOneDriveParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *RecoverOneDriveParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *RecoverOneDriveParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *RecoverOneDriveParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetObjects returns the Objects field value
// If the value is explicit nil, the zero value for []ObjectOneDriveParam will be returned
func (o *RecoverOneDriveParams) GetObjects() []ObjectOneDriveParam {
	if o == nil {
		var ret []ObjectOneDriveParam
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOneDriveParams) GetObjectsOk() ([]ObjectOneDriveParam, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// SetObjects sets field value
func (o *RecoverOneDriveParams) SetObjects(v []ObjectOneDriveParam) {
	o.Objects = v
}

// GetRecoverPreservationHoldLibrary returns the RecoverPreservationHoldLibrary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOneDriveParams) GetRecoverPreservationHoldLibrary() bool {
	if o == nil || IsNil(o.RecoverPreservationHoldLibrary.Get()) {
		var ret bool
		return ret
	}
	return *o.RecoverPreservationHoldLibrary.Get()
}

// GetRecoverPreservationHoldLibraryOk returns a tuple with the RecoverPreservationHoldLibrary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOneDriveParams) GetRecoverPreservationHoldLibraryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverPreservationHoldLibrary.Get(), o.RecoverPreservationHoldLibrary.IsSet()
}

// HasRecoverPreservationHoldLibrary returns a boolean if a field has been set.
func (o *RecoverOneDriveParams) HasRecoverPreservationHoldLibrary() bool {
	if o != nil && o.RecoverPreservationHoldLibrary.IsSet() {
		return true
	}

	return false
}

// SetRecoverPreservationHoldLibrary gets a reference to the given NullableBool and assigns it to the RecoverPreservationHoldLibrary field.
func (o *RecoverOneDriveParams) SetRecoverPreservationHoldLibrary(v bool) {
	o.RecoverPreservationHoldLibrary.Set(&v)
}
// SetRecoverPreservationHoldLibraryNil sets the value for RecoverPreservationHoldLibrary to be an explicit nil
func (o *RecoverOneDriveParams) SetRecoverPreservationHoldLibraryNil() {
	o.RecoverPreservationHoldLibrary.Set(nil)
}

// UnsetRecoverPreservationHoldLibrary ensures that no value is present for RecoverPreservationHoldLibrary, not even an explicit nil
func (o *RecoverOneDriveParams) UnsetRecoverPreservationHoldLibrary() {
	o.RecoverPreservationHoldLibrary.Unset()
}

// GetRecoverUserDefaultDrive returns the RecoverUserDefaultDrive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOneDriveParams) GetRecoverUserDefaultDrive() bool {
	if o == nil || IsNil(o.RecoverUserDefaultDrive.Get()) {
		var ret bool
		return ret
	}
	return *o.RecoverUserDefaultDrive.Get()
}

// GetRecoverUserDefaultDriveOk returns a tuple with the RecoverUserDefaultDrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOneDriveParams) GetRecoverUserDefaultDriveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverUserDefaultDrive.Get(), o.RecoverUserDefaultDrive.IsSet()
}

// HasRecoverUserDefaultDrive returns a boolean if a field has been set.
func (o *RecoverOneDriveParams) HasRecoverUserDefaultDrive() bool {
	if o != nil && o.RecoverUserDefaultDrive.IsSet() {
		return true
	}

	return false
}

// SetRecoverUserDefaultDrive gets a reference to the given NullableBool and assigns it to the RecoverUserDefaultDrive field.
func (o *RecoverOneDriveParams) SetRecoverUserDefaultDrive(v bool) {
	o.RecoverUserDefaultDrive.Set(&v)
}
// SetRecoverUserDefaultDriveNil sets the value for RecoverUserDefaultDrive to be an explicit nil
func (o *RecoverOneDriveParams) SetRecoverUserDefaultDriveNil() {
	o.RecoverUserDefaultDrive.Set(nil)
}

// UnsetRecoverUserDefaultDrive ensures that no value is present for RecoverUserDefaultDrive, not even an explicit nil
func (o *RecoverOneDriveParams) UnsetRecoverUserDefaultDrive() {
	o.RecoverUserDefaultDrive.Unset()
}

// GetTargetDrive returns the TargetDrive field value if set, zero value otherwise.
func (o *RecoverOneDriveParams) GetTargetDrive() RecoverOneDriveParamsTargetDrive {
	if o == nil || IsNil(o.TargetDrive) {
		var ret RecoverOneDriveParamsTargetDrive
		return ret
	}
	return *o.TargetDrive
}

// GetTargetDriveOk returns a tuple with the TargetDrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverOneDriveParams) GetTargetDriveOk() (*RecoverOneDriveParamsTargetDrive, bool) {
	if o == nil || IsNil(o.TargetDrive) {
		return nil, false
	}
	return o.TargetDrive, true
}

// HasTargetDrive returns a boolean if a field has been set.
func (o *RecoverOneDriveParams) HasTargetDrive() bool {
	if o != nil && !IsNil(o.TargetDrive) {
		return true
	}

	return false
}

// SetTargetDrive gets a reference to the given RecoverOneDriveParamsTargetDrive and assigns it to the TargetDrive field.
func (o *RecoverOneDriveParams) SetTargetDrive(v RecoverOneDriveParamsTargetDrive) {
	o.TargetDrive = &v
}

func (o RecoverOneDriveParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverOneDriveParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.RecoverPreservationHoldLibrary.IsSet() {
		toSerialize["recoverPreservationHoldLibrary"] = o.RecoverPreservationHoldLibrary.Get()
	}
	if o.RecoverUserDefaultDrive.IsSet() {
		toSerialize["recoverUserDefaultDrive"] = o.RecoverUserDefaultDrive.Get()
	}
	if !IsNil(o.TargetDrive) {
		toSerialize["targetDrive"] = o.TargetDrive
	}
	return toSerialize, nil
}

func (o *RecoverOneDriveParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverOneDriveParams := _RecoverOneDriveParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverOneDriveParams)

	if err != nil {
		return err
	}

	*o = RecoverOneDriveParams(varRecoverOneDriveParams)

	return err
}

type NullableRecoverOneDriveParams struct {
	value *RecoverOneDriveParams
	isSet bool
}

func (v NullableRecoverOneDriveParams) Get() *RecoverOneDriveParams {
	return v.value
}

func (v *NullableRecoverOneDriveParams) Set(val *RecoverOneDriveParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverOneDriveParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverOneDriveParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverOneDriveParams(val *RecoverOneDriveParams) *NullableRecoverOneDriveParams {
	return &NullableRecoverOneDriveParams{value: val, isSet: true}
}

func (v NullableRecoverOneDriveParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverOneDriveParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


