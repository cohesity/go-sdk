/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LifecycleRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LifecycleRule{}

// LifecycleRule Specifies the Lifecycle configuration rule.
type LifecycleRule struct {
	AbortIncompleteMultipartUploadAction *LifecycleRuleAbortIncompleteMultipartUploadAction `json:"abortIncompleteMultipartUploadAction,omitempty"`
	Expiration *LifecycleRuleExpiration `json:"expiration,omitempty"`
	Filter *LifecycleRuleFilter `json:"filter,omitempty"`
	// Specifies the Unique identifier for the rule. The value cannot be longer than 255 characters.
	Id NullableString `json:"id"`
	NonCurrentVersionExpirationAction *LifecycleRuleNonCurrentVersionExpirationAction `json:"nonCurrentVersionExpirationAction,omitempty"`
	// Specifies the prefix used to identify objects that a lifecycle rule applies to.
	Prefix NullableString `json:"prefix,omitempty"`
	// Specifies if the rule is currently being applied.
	Status NullableBool `json:"status"`
}

type _LifecycleRule LifecycleRule

// NewLifecycleRule instantiates a new LifecycleRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLifecycleRule(id NullableString, status NullableBool) *LifecycleRule {
	this := LifecycleRule{}
	this.Id = id
	this.Status = status
	return &this
}

// NewLifecycleRuleWithDefaults instantiates a new LifecycleRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLifecycleRuleWithDefaults() *LifecycleRule {
	this := LifecycleRule{}
	return &this
}

// GetAbortIncompleteMultipartUploadAction returns the AbortIncompleteMultipartUploadAction field value if set, zero value otherwise.
func (o *LifecycleRule) GetAbortIncompleteMultipartUploadAction() LifecycleRuleAbortIncompleteMultipartUploadAction {
	if o == nil || IsNil(o.AbortIncompleteMultipartUploadAction) {
		var ret LifecycleRuleAbortIncompleteMultipartUploadAction
		return ret
	}
	return *o.AbortIncompleteMultipartUploadAction
}

// GetAbortIncompleteMultipartUploadActionOk returns a tuple with the AbortIncompleteMultipartUploadAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetAbortIncompleteMultipartUploadActionOk() (*LifecycleRuleAbortIncompleteMultipartUploadAction, bool) {
	if o == nil || IsNil(o.AbortIncompleteMultipartUploadAction) {
		return nil, false
	}
	return o.AbortIncompleteMultipartUploadAction, true
}

// HasAbortIncompleteMultipartUploadAction returns a boolean if a field has been set.
func (o *LifecycleRule) HasAbortIncompleteMultipartUploadAction() bool {
	if o != nil && !IsNil(o.AbortIncompleteMultipartUploadAction) {
		return true
	}

	return false
}

// SetAbortIncompleteMultipartUploadAction gets a reference to the given LifecycleRuleAbortIncompleteMultipartUploadAction and assigns it to the AbortIncompleteMultipartUploadAction field.
func (o *LifecycleRule) SetAbortIncompleteMultipartUploadAction(v LifecycleRuleAbortIncompleteMultipartUploadAction) {
	o.AbortIncompleteMultipartUploadAction = &v
}

// GetExpiration returns the Expiration field value if set, zero value otherwise.
func (o *LifecycleRule) GetExpiration() LifecycleRuleExpiration {
	if o == nil || IsNil(o.Expiration) {
		var ret LifecycleRuleExpiration
		return ret
	}
	return *o.Expiration
}

// GetExpirationOk returns a tuple with the Expiration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetExpirationOk() (*LifecycleRuleExpiration, bool) {
	if o == nil || IsNil(o.Expiration) {
		return nil, false
	}
	return o.Expiration, true
}

// HasExpiration returns a boolean if a field has been set.
func (o *LifecycleRule) HasExpiration() bool {
	if o != nil && !IsNil(o.Expiration) {
		return true
	}

	return false
}

// SetExpiration gets a reference to the given LifecycleRuleExpiration and assigns it to the Expiration field.
func (o *LifecycleRule) SetExpiration(v LifecycleRuleExpiration) {
	o.Expiration = &v
}

// GetFilter returns the Filter field value if set, zero value otherwise.
func (o *LifecycleRule) GetFilter() LifecycleRuleFilter {
	if o == nil || IsNil(o.Filter) {
		var ret LifecycleRuleFilter
		return ret
	}
	return *o.Filter
}

// GetFilterOk returns a tuple with the Filter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetFilterOk() (*LifecycleRuleFilter, bool) {
	if o == nil || IsNil(o.Filter) {
		return nil, false
	}
	return o.Filter, true
}

// HasFilter returns a boolean if a field has been set.
func (o *LifecycleRule) HasFilter() bool {
	if o != nil && !IsNil(o.Filter) {
		return true
	}

	return false
}

// SetFilter gets a reference to the given LifecycleRuleFilter and assigns it to the Filter field.
func (o *LifecycleRule) SetFilter(v LifecycleRuleFilter) {
	o.Filter = &v
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *LifecycleRule) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LifecycleRule) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *LifecycleRule) SetId(v string) {
	o.Id.Set(&v)
}

// GetNonCurrentVersionExpirationAction returns the NonCurrentVersionExpirationAction field value if set, zero value otherwise.
func (o *LifecycleRule) GetNonCurrentVersionExpirationAction() LifecycleRuleNonCurrentVersionExpirationAction {
	if o == nil || IsNil(o.NonCurrentVersionExpirationAction) {
		var ret LifecycleRuleNonCurrentVersionExpirationAction
		return ret
	}
	return *o.NonCurrentVersionExpirationAction
}

// GetNonCurrentVersionExpirationActionOk returns a tuple with the NonCurrentVersionExpirationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LifecycleRule) GetNonCurrentVersionExpirationActionOk() (*LifecycleRuleNonCurrentVersionExpirationAction, bool) {
	if o == nil || IsNil(o.NonCurrentVersionExpirationAction) {
		return nil, false
	}
	return o.NonCurrentVersionExpirationAction, true
}

// HasNonCurrentVersionExpirationAction returns a boolean if a field has been set.
func (o *LifecycleRule) HasNonCurrentVersionExpirationAction() bool {
	if o != nil && !IsNil(o.NonCurrentVersionExpirationAction) {
		return true
	}

	return false
}

// SetNonCurrentVersionExpirationAction gets a reference to the given LifecycleRuleNonCurrentVersionExpirationAction and assigns it to the NonCurrentVersionExpirationAction field.
func (o *LifecycleRule) SetNonCurrentVersionExpirationAction(v LifecycleRuleNonCurrentVersionExpirationAction) {
	o.NonCurrentVersionExpirationAction = &v
}

// GetPrefix returns the Prefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LifecycleRule) GetPrefix() string {
	if o == nil || IsNil(o.Prefix.Get()) {
		var ret string
		return ret
	}
	return *o.Prefix.Get()
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LifecycleRule) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prefix.Get(), o.Prefix.IsSet()
}

// HasPrefix returns a boolean if a field has been set.
func (o *LifecycleRule) HasPrefix() bool {
	if o != nil && o.Prefix.IsSet() {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given NullableString and assigns it to the Prefix field.
func (o *LifecycleRule) SetPrefix(v string) {
	o.Prefix.Set(&v)
}
// SetPrefixNil sets the value for Prefix to be an explicit nil
func (o *LifecycleRule) SetPrefixNil() {
	o.Prefix.Set(nil)
}

// UnsetPrefix ensures that no value is present for Prefix, not even an explicit nil
func (o *LifecycleRule) UnsetPrefix() {
	o.Prefix.Unset()
}

// GetStatus returns the Status field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *LifecycleRule) GetStatus() bool {
	if o == nil || o.Status.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LifecycleRule) GetStatusOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// SetStatus sets field value
func (o *LifecycleRule) SetStatus(v bool) {
	o.Status.Set(&v)
}

func (o LifecycleRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LifecycleRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbortIncompleteMultipartUploadAction) {
		toSerialize["abortIncompleteMultipartUploadAction"] = o.AbortIncompleteMultipartUploadAction
	}
	if !IsNil(o.Expiration) {
		toSerialize["expiration"] = o.Expiration
	}
	if !IsNil(o.Filter) {
		toSerialize["filter"] = o.Filter
	}
	toSerialize["id"] = o.Id.Get()
	if !IsNil(o.NonCurrentVersionExpirationAction) {
		toSerialize["nonCurrentVersionExpirationAction"] = o.NonCurrentVersionExpirationAction
	}
	if o.Prefix.IsSet() {
		toSerialize["prefix"] = o.Prefix.Get()
	}
	toSerialize["status"] = o.Status.Get()
	return toSerialize, nil
}

func (o *LifecycleRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLifecycleRule := _LifecycleRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLifecycleRule)

	if err != nil {
		return err
	}

	*o = LifecycleRule(varLifecycleRule)

	return err
}

type NullableLifecycleRule struct {
	value *LifecycleRule
	isSet bool
}

func (v NullableLifecycleRule) Get() *LifecycleRule {
	return v.value
}

func (v *NullableLifecycleRule) Set(val *LifecycleRule) {
	v.value = val
	v.isSet = true
}

func (v NullableLifecycleRule) IsSet() bool {
	return v.isSet
}

func (v *NullableLifecycleRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLifecycleRule(val *LifecycleRule) *NullableLifecycleRule {
	return &NullableLifecycleRule{value: val, isSet: true}
}

func (v NullableLifecycleRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLifecycleRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


