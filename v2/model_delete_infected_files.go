/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DeleteInfectedFiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteInfectedFiles{}

// DeleteInfectedFiles Specifies a list of infected files.
type DeleteInfectedFiles struct {
	// Specifies the list of infected files that failed deletion.
	DeleteFailedInfectedFiles []InfectedFile `json:"deleteFailedInfectedFiles,omitempty"`
	// Specifies the list of infected files that are successfully deleted.
	DeleteSucceededInfectedFiles []InfectedFile `json:"deleteSucceededInfectedFiles,omitempty"`
}

// NewDeleteInfectedFiles instantiates a new DeleteInfectedFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteInfectedFiles() *DeleteInfectedFiles {
	this := DeleteInfectedFiles{}
	return &this
}

// NewDeleteInfectedFilesWithDefaults instantiates a new DeleteInfectedFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteInfectedFilesWithDefaults() *DeleteInfectedFiles {
	this := DeleteInfectedFiles{}
	return &this
}

// GetDeleteFailedInfectedFiles returns the DeleteFailedInfectedFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteInfectedFiles) GetDeleteFailedInfectedFiles() []InfectedFile {
	if o == nil {
		var ret []InfectedFile
		return ret
	}
	return o.DeleteFailedInfectedFiles
}

// GetDeleteFailedInfectedFilesOk returns a tuple with the DeleteFailedInfectedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteInfectedFiles) GetDeleteFailedInfectedFilesOk() ([]InfectedFile, bool) {
	if o == nil || IsNil(o.DeleteFailedInfectedFiles) {
		return nil, false
	}
	return o.DeleteFailedInfectedFiles, true
}

// HasDeleteFailedInfectedFiles returns a boolean if a field has been set.
func (o *DeleteInfectedFiles) HasDeleteFailedInfectedFiles() bool {
	if o != nil && !IsNil(o.DeleteFailedInfectedFiles) {
		return true
	}

	return false
}

// SetDeleteFailedInfectedFiles gets a reference to the given []InfectedFile and assigns it to the DeleteFailedInfectedFiles field.
func (o *DeleteInfectedFiles) SetDeleteFailedInfectedFiles(v []InfectedFile) {
	o.DeleteFailedInfectedFiles = v
}

// GetDeleteSucceededInfectedFiles returns the DeleteSucceededInfectedFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteInfectedFiles) GetDeleteSucceededInfectedFiles() []InfectedFile {
	if o == nil {
		var ret []InfectedFile
		return ret
	}
	return o.DeleteSucceededInfectedFiles
}

// GetDeleteSucceededInfectedFilesOk returns a tuple with the DeleteSucceededInfectedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteInfectedFiles) GetDeleteSucceededInfectedFilesOk() ([]InfectedFile, bool) {
	if o == nil || IsNil(o.DeleteSucceededInfectedFiles) {
		return nil, false
	}
	return o.DeleteSucceededInfectedFiles, true
}

// HasDeleteSucceededInfectedFiles returns a boolean if a field has been set.
func (o *DeleteInfectedFiles) HasDeleteSucceededInfectedFiles() bool {
	if o != nil && !IsNil(o.DeleteSucceededInfectedFiles) {
		return true
	}

	return false
}

// SetDeleteSucceededInfectedFiles gets a reference to the given []InfectedFile and assigns it to the DeleteSucceededInfectedFiles field.
func (o *DeleteInfectedFiles) SetDeleteSucceededInfectedFiles(v []InfectedFile) {
	o.DeleteSucceededInfectedFiles = v
}

func (o DeleteInfectedFiles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteInfectedFiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DeleteFailedInfectedFiles != nil {
		toSerialize["deleteFailedInfectedFiles"] = o.DeleteFailedInfectedFiles
	}
	if o.DeleteSucceededInfectedFiles != nil {
		toSerialize["deleteSucceededInfectedFiles"] = o.DeleteSucceededInfectedFiles
	}
	return toSerialize, nil
}

type NullableDeleteInfectedFiles struct {
	value *DeleteInfectedFiles
	isSet bool
}

func (v NullableDeleteInfectedFiles) Get() *DeleteInfectedFiles {
	return v.value
}

func (v *NullableDeleteInfectedFiles) Set(val *DeleteInfectedFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteInfectedFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteInfectedFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteInfectedFiles(val *DeleteInfectedFiles) *NullableDeleteInfectedFiles {
	return &NullableDeleteInfectedFiles{value: val, isSet: true}
}

func (v NullableDeleteInfectedFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteInfectedFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


