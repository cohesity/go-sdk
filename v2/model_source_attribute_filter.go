/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SourceAttributeFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceAttributeFilter{}

// SourceAttributeFilter Specifies a pair of source filter attribute and its possible values.
type SourceAttributeFilter struct {
	// Specifies the list of attribute values for above filter.
	AttributeValues []string `json:"attributeValues,omitempty"`
	// Specifies the filter attribute for the source.
	FilterAttribute NullableString `json:"filterAttribute,omitempty"`
}

// NewSourceAttributeFilter instantiates a new SourceAttributeFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceAttributeFilter() *SourceAttributeFilter {
	this := SourceAttributeFilter{}
	return &this
}

// NewSourceAttributeFilterWithDefaults instantiates a new SourceAttributeFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceAttributeFilterWithDefaults() *SourceAttributeFilter {
	this := SourceAttributeFilter{}
	return &this
}

// GetAttributeValues returns the AttributeValues field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceAttributeFilter) GetAttributeValues() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AttributeValues
}

// GetAttributeValuesOk returns a tuple with the AttributeValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceAttributeFilter) GetAttributeValuesOk() ([]string, bool) {
	if o == nil || IsNil(o.AttributeValues) {
		return nil, false
	}
	return o.AttributeValues, true
}

// HasAttributeValues returns a boolean if a field has been set.
func (o *SourceAttributeFilter) HasAttributeValues() bool {
	if o != nil && !IsNil(o.AttributeValues) {
		return true
	}

	return false
}

// SetAttributeValues gets a reference to the given []string and assigns it to the AttributeValues field.
func (o *SourceAttributeFilter) SetAttributeValues(v []string) {
	o.AttributeValues = v
}

// GetFilterAttribute returns the FilterAttribute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceAttributeFilter) GetFilterAttribute() string {
	if o == nil || IsNil(o.FilterAttribute.Get()) {
		var ret string
		return ret
	}
	return *o.FilterAttribute.Get()
}

// GetFilterAttributeOk returns a tuple with the FilterAttribute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceAttributeFilter) GetFilterAttributeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterAttribute.Get(), o.FilterAttribute.IsSet()
}

// HasFilterAttribute returns a boolean if a field has been set.
func (o *SourceAttributeFilter) HasFilterAttribute() bool {
	if o != nil && o.FilterAttribute.IsSet() {
		return true
	}

	return false
}

// SetFilterAttribute gets a reference to the given NullableString and assigns it to the FilterAttribute field.
func (o *SourceAttributeFilter) SetFilterAttribute(v string) {
	o.FilterAttribute.Set(&v)
}
// SetFilterAttributeNil sets the value for FilterAttribute to be an explicit nil
func (o *SourceAttributeFilter) SetFilterAttributeNil() {
	o.FilterAttribute.Set(nil)
}

// UnsetFilterAttribute ensures that no value is present for FilterAttribute, not even an explicit nil
func (o *SourceAttributeFilter) UnsetFilterAttribute() {
	o.FilterAttribute.Unset()
}

func (o SourceAttributeFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceAttributeFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AttributeValues != nil {
		toSerialize["attributeValues"] = o.AttributeValues
	}
	if o.FilterAttribute.IsSet() {
		toSerialize["filterAttribute"] = o.FilterAttribute.Get()
	}
	return toSerialize, nil
}

type NullableSourceAttributeFilter struct {
	value *SourceAttributeFilter
	isSet bool
}

func (v NullableSourceAttributeFilter) Get() *SourceAttributeFilter {
	return v.value
}

func (v *NullableSourceAttributeFilter) Set(val *SourceAttributeFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceAttributeFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceAttributeFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceAttributeFilter(val *SourceAttributeFilter) *NullableSourceAttributeFilter {
	return &NullableSourceAttributeFilter{value: val, isSet: true}
}

func (v NullableSourceAttributeFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceAttributeFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


