/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FilterDocumentsParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterDocumentsParams{}

// FilterDocumentsParams Specifies the parameters to filter documents to be restored.
type FilterDocumentsParams struct {
	// Specifies the filter type for Documents to be restored.
	DocumentFilterType NullableString `json:"documentFilterType"`
	// A filter expression to match Documents content to be restored.
	FilterExpression NullableString `json:"filterExpression,omitempty"`
	// A regular expression to match Documents ID's to be restored.
	IdRegex NullableString `json:"idRegex,omitempty"`
}

type _FilterDocumentsParams FilterDocumentsParams

// NewFilterDocumentsParams instantiates a new FilterDocumentsParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterDocumentsParams(documentFilterType NullableString) *FilterDocumentsParams {
	this := FilterDocumentsParams{}
	this.DocumentFilterType = documentFilterType
	return &this
}

// NewFilterDocumentsParamsWithDefaults instantiates a new FilterDocumentsParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterDocumentsParamsWithDefaults() *FilterDocumentsParams {
	this := FilterDocumentsParams{}
	return &this
}

// GetDocumentFilterType returns the DocumentFilterType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FilterDocumentsParams) GetDocumentFilterType() string {
	if o == nil || o.DocumentFilterType.Get() == nil {
		var ret string
		return ret
	}

	return *o.DocumentFilterType.Get()
}

// GetDocumentFilterTypeOk returns a tuple with the DocumentFilterType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterDocumentsParams) GetDocumentFilterTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DocumentFilterType.Get(), o.DocumentFilterType.IsSet()
}

// SetDocumentFilterType sets field value
func (o *FilterDocumentsParams) SetDocumentFilterType(v string) {
	o.DocumentFilterType.Set(&v)
}

// GetFilterExpression returns the FilterExpression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterDocumentsParams) GetFilterExpression() string {
	if o == nil || IsNil(o.FilterExpression.Get()) {
		var ret string
		return ret
	}
	return *o.FilterExpression.Get()
}

// GetFilterExpressionOk returns a tuple with the FilterExpression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterDocumentsParams) GetFilterExpressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterExpression.Get(), o.FilterExpression.IsSet()
}

// HasFilterExpression returns a boolean if a field has been set.
func (o *FilterDocumentsParams) HasFilterExpression() bool {
	if o != nil && o.FilterExpression.IsSet() {
		return true
	}

	return false
}

// SetFilterExpression gets a reference to the given NullableString and assigns it to the FilterExpression field.
func (o *FilterDocumentsParams) SetFilterExpression(v string) {
	o.FilterExpression.Set(&v)
}
// SetFilterExpressionNil sets the value for FilterExpression to be an explicit nil
func (o *FilterDocumentsParams) SetFilterExpressionNil() {
	o.FilterExpression.Set(nil)
}

// UnsetFilterExpression ensures that no value is present for FilterExpression, not even an explicit nil
func (o *FilterDocumentsParams) UnsetFilterExpression() {
	o.FilterExpression.Unset()
}

// GetIdRegex returns the IdRegex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterDocumentsParams) GetIdRegex() string {
	if o == nil || IsNil(o.IdRegex.Get()) {
		var ret string
		return ret
	}
	return *o.IdRegex.Get()
}

// GetIdRegexOk returns a tuple with the IdRegex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterDocumentsParams) GetIdRegexOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdRegex.Get(), o.IdRegex.IsSet()
}

// HasIdRegex returns a boolean if a field has been set.
func (o *FilterDocumentsParams) HasIdRegex() bool {
	if o != nil && o.IdRegex.IsSet() {
		return true
	}

	return false
}

// SetIdRegex gets a reference to the given NullableString and assigns it to the IdRegex field.
func (o *FilterDocumentsParams) SetIdRegex(v string) {
	o.IdRegex.Set(&v)
}
// SetIdRegexNil sets the value for IdRegex to be an explicit nil
func (o *FilterDocumentsParams) SetIdRegexNil() {
	o.IdRegex.Set(nil)
}

// UnsetIdRegex ensures that no value is present for IdRegex, not even an explicit nil
func (o *FilterDocumentsParams) UnsetIdRegex() {
	o.IdRegex.Unset()
}

func (o FilterDocumentsParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterDocumentsParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["documentFilterType"] = o.DocumentFilterType.Get()
	if o.FilterExpression.IsSet() {
		toSerialize["filterExpression"] = o.FilterExpression.Get()
	}
	if o.IdRegex.IsSet() {
		toSerialize["idRegex"] = o.IdRegex.Get()
	}
	return toSerialize, nil
}

func (o *FilterDocumentsParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"documentFilterType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFilterDocumentsParams := _FilterDocumentsParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFilterDocumentsParams)

	if err != nil {
		return err
	}

	*o = FilterDocumentsParams(varFilterDocumentsParams)

	return err
}

type NullableFilterDocumentsParams struct {
	value *FilterDocumentsParams
	isSet bool
}

func (v NullableFilterDocumentsParams) Get() *FilterDocumentsParams {
	return v.value
}

func (v *NullableFilterDocumentsParams) Set(val *FilterDocumentsParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterDocumentsParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterDocumentsParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterDocumentsParams(val *FilterDocumentsParams) *NullableFilterDocumentsParams {
	return &NullableFilterDocumentsParams{value: val, isSet: true}
}

func (v NullableFilterDocumentsParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterDocumentsParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


