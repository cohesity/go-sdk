/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DownloadClusterCertResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DownloadClusterCertResponse{}

// DownloadClusterCertResponse Specifies the response of the download cluster certificate request
type DownloadClusterCertResponse struct {
	// Array of certificates from the cluster certificates proto
	Certificates []Certificate `json:"certificates,omitempty"`
}

// NewDownloadClusterCertResponse instantiates a new DownloadClusterCertResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDownloadClusterCertResponse() *DownloadClusterCertResponse {
	this := DownloadClusterCertResponse{}
	return &this
}

// NewDownloadClusterCertResponseWithDefaults instantiates a new DownloadClusterCertResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDownloadClusterCertResponseWithDefaults() *DownloadClusterCertResponse {
	this := DownloadClusterCertResponse{}
	return &this
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *DownloadClusterCertResponse) GetCertificates() []Certificate {
	if o == nil || IsNil(o.Certificates) {
		var ret []Certificate
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DownloadClusterCertResponse) GetCertificatesOk() ([]Certificate, bool) {
	if o == nil || IsNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *DownloadClusterCertResponse) HasCertificates() bool {
	if o != nil && !IsNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []Certificate and assigns it to the Certificates field.
func (o *DownloadClusterCertResponse) SetCertificates(v []Certificate) {
	o.Certificates = v
}

func (o DownloadClusterCertResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DownloadClusterCertResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificates) {
		toSerialize["certificates"] = o.Certificates
	}
	return toSerialize, nil
}

type NullableDownloadClusterCertResponse struct {
	value *DownloadClusterCertResponse
	isSet bool
}

func (v NullableDownloadClusterCertResponse) Get() *DownloadClusterCertResponse {
	return v.value
}

func (v *NullableDownloadClusterCertResponse) Set(val *DownloadClusterCertResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDownloadClusterCertResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDownloadClusterCertResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDownloadClusterCertResponse(val *DownloadClusterCertResponse) *NullableDownloadClusterCertResponse {
	return &NullableDownloadClusterCertResponse{value: val, isSet: true}
}

func (v NullableDownloadClusterCertResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDownloadClusterCertResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


