/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the MetadataSelector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetadataSelector{}

// MetadataSelector Selector for the metadata to be exported.
type MetadataSelector struct {
	EntitySelector *EntitySelector `json:"entitySelector,omitempty"`
	// Contains the environments info that will be exported. If this is empty, all the environments info will be exported..
	IncludeEnvironments []string `json:"includeEnvironments,omitempty"`
	// If true, exports the job descriptions. This is automatically true if the include_restore_tasks is true.
	IncludeJobDescriptions *bool `json:"includeJobDescriptions,omitempty"`
	// If true, exports the accessible policies.
	IncludePolicies *bool `json:"includePolicies,omitempty"`
	// If true, exports the qualified restore tasks.
	IncludeRestoreTasks *bool `json:"includeRestoreTasks,omitempty"`
	RunSelector *ProtectionRunSelector `json:"runSelector,omitempty"`
	// Denotes the tenant whose metadata needs to be exported
	TenantId *string `json:"tenantId,omitempty"`
}

// NewMetadataSelector instantiates a new MetadataSelector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetadataSelector() *MetadataSelector {
	this := MetadataSelector{}
	return &this
}

// NewMetadataSelectorWithDefaults instantiates a new MetadataSelector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetadataSelectorWithDefaults() *MetadataSelector {
	this := MetadataSelector{}
	return &this
}

// GetEntitySelector returns the EntitySelector field value if set, zero value otherwise.
func (o *MetadataSelector) GetEntitySelector() EntitySelector {
	if o == nil || IsNil(o.EntitySelector) {
		var ret EntitySelector
		return ret
	}
	return *o.EntitySelector
}

// GetEntitySelectorOk returns a tuple with the EntitySelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataSelector) GetEntitySelectorOk() (*EntitySelector, bool) {
	if o == nil || IsNil(o.EntitySelector) {
		return nil, false
	}
	return o.EntitySelector, true
}

// HasEntitySelector returns a boolean if a field has been set.
func (o *MetadataSelector) HasEntitySelector() bool {
	if o != nil && !IsNil(o.EntitySelector) {
		return true
	}

	return false
}

// SetEntitySelector gets a reference to the given EntitySelector and assigns it to the EntitySelector field.
func (o *MetadataSelector) SetEntitySelector(v EntitySelector) {
	o.EntitySelector = &v
}

// GetIncludeEnvironments returns the IncludeEnvironments field value if set, zero value otherwise.
func (o *MetadataSelector) GetIncludeEnvironments() []string {
	if o == nil || IsNil(o.IncludeEnvironments) {
		var ret []string
		return ret
	}
	return o.IncludeEnvironments
}

// GetIncludeEnvironmentsOk returns a tuple with the IncludeEnvironments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataSelector) GetIncludeEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeEnvironments) {
		return nil, false
	}
	return o.IncludeEnvironments, true
}

// HasIncludeEnvironments returns a boolean if a field has been set.
func (o *MetadataSelector) HasIncludeEnvironments() bool {
	if o != nil && !IsNil(o.IncludeEnvironments) {
		return true
	}

	return false
}

// SetIncludeEnvironments gets a reference to the given []string and assigns it to the IncludeEnvironments field.
func (o *MetadataSelector) SetIncludeEnvironments(v []string) {
	o.IncludeEnvironments = v
}

// GetIncludeJobDescriptions returns the IncludeJobDescriptions field value if set, zero value otherwise.
func (o *MetadataSelector) GetIncludeJobDescriptions() bool {
	if o == nil || IsNil(o.IncludeJobDescriptions) {
		var ret bool
		return ret
	}
	return *o.IncludeJobDescriptions
}

// GetIncludeJobDescriptionsOk returns a tuple with the IncludeJobDescriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataSelector) GetIncludeJobDescriptionsOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeJobDescriptions) {
		return nil, false
	}
	return o.IncludeJobDescriptions, true
}

// HasIncludeJobDescriptions returns a boolean if a field has been set.
func (o *MetadataSelector) HasIncludeJobDescriptions() bool {
	if o != nil && !IsNil(o.IncludeJobDescriptions) {
		return true
	}

	return false
}

// SetIncludeJobDescriptions gets a reference to the given bool and assigns it to the IncludeJobDescriptions field.
func (o *MetadataSelector) SetIncludeJobDescriptions(v bool) {
	o.IncludeJobDescriptions = &v
}

// GetIncludePolicies returns the IncludePolicies field value if set, zero value otherwise.
func (o *MetadataSelector) GetIncludePolicies() bool {
	if o == nil || IsNil(o.IncludePolicies) {
		var ret bool
		return ret
	}
	return *o.IncludePolicies
}

// GetIncludePoliciesOk returns a tuple with the IncludePolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataSelector) GetIncludePoliciesOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludePolicies) {
		return nil, false
	}
	return o.IncludePolicies, true
}

// HasIncludePolicies returns a boolean if a field has been set.
func (o *MetadataSelector) HasIncludePolicies() bool {
	if o != nil && !IsNil(o.IncludePolicies) {
		return true
	}

	return false
}

// SetIncludePolicies gets a reference to the given bool and assigns it to the IncludePolicies field.
func (o *MetadataSelector) SetIncludePolicies(v bool) {
	o.IncludePolicies = &v
}

// GetIncludeRestoreTasks returns the IncludeRestoreTasks field value if set, zero value otherwise.
func (o *MetadataSelector) GetIncludeRestoreTasks() bool {
	if o == nil || IsNil(o.IncludeRestoreTasks) {
		var ret bool
		return ret
	}
	return *o.IncludeRestoreTasks
}

// GetIncludeRestoreTasksOk returns a tuple with the IncludeRestoreTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataSelector) GetIncludeRestoreTasksOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeRestoreTasks) {
		return nil, false
	}
	return o.IncludeRestoreTasks, true
}

// HasIncludeRestoreTasks returns a boolean if a field has been set.
func (o *MetadataSelector) HasIncludeRestoreTasks() bool {
	if o != nil && !IsNil(o.IncludeRestoreTasks) {
		return true
	}

	return false
}

// SetIncludeRestoreTasks gets a reference to the given bool and assigns it to the IncludeRestoreTasks field.
func (o *MetadataSelector) SetIncludeRestoreTasks(v bool) {
	o.IncludeRestoreTasks = &v
}

// GetRunSelector returns the RunSelector field value if set, zero value otherwise.
func (o *MetadataSelector) GetRunSelector() ProtectionRunSelector {
	if o == nil || IsNil(o.RunSelector) {
		var ret ProtectionRunSelector
		return ret
	}
	return *o.RunSelector
}

// GetRunSelectorOk returns a tuple with the RunSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataSelector) GetRunSelectorOk() (*ProtectionRunSelector, bool) {
	if o == nil || IsNil(o.RunSelector) {
		return nil, false
	}
	return o.RunSelector, true
}

// HasRunSelector returns a boolean if a field has been set.
func (o *MetadataSelector) HasRunSelector() bool {
	if o != nil && !IsNil(o.RunSelector) {
		return true
	}

	return false
}

// SetRunSelector gets a reference to the given ProtectionRunSelector and assigns it to the RunSelector field.
func (o *MetadataSelector) SetRunSelector(v ProtectionRunSelector) {
	o.RunSelector = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *MetadataSelector) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetadataSelector) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *MetadataSelector) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *MetadataSelector) SetTenantId(v string) {
	o.TenantId = &v
}

func (o MetadataSelector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetadataSelector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntitySelector) {
		toSerialize["entitySelector"] = o.EntitySelector
	}
	if !IsNil(o.IncludeEnvironments) {
		toSerialize["includeEnvironments"] = o.IncludeEnvironments
	}
	if !IsNil(o.IncludeJobDescriptions) {
		toSerialize["includeJobDescriptions"] = o.IncludeJobDescriptions
	}
	if !IsNil(o.IncludePolicies) {
		toSerialize["includePolicies"] = o.IncludePolicies
	}
	if !IsNil(o.IncludeRestoreTasks) {
		toSerialize["includeRestoreTasks"] = o.IncludeRestoreTasks
	}
	if !IsNil(o.RunSelector) {
		toSerialize["runSelector"] = o.RunSelector
	}
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	return toSerialize, nil
}

type NullableMetadataSelector struct {
	value *MetadataSelector
	isSet bool
}

func (v NullableMetadataSelector) Get() *MetadataSelector {
	return v.value
}

func (v *NullableMetadataSelector) Set(val *MetadataSelector) {
	v.value = val
	v.isSet = true
}

func (v NullableMetadataSelector) IsSet() bool {
	return v.isSet
}

func (v *NullableMetadataSelector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetadataSelector(val *MetadataSelector) *NullableMetadataSelector {
	return &NullableMetadataSelector{value: val, isSet: true}
}

func (v NullableMetadataSelector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetadataSelector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


