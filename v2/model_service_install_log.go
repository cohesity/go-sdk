/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ServiceInstallLog type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceInstallLog{}

// ServiceInstallLog Install Logs for a Service.
type ServiceInstallLog struct {
	// Install message.
	Message *string `json:"message,omitempty"`
	// \"The install status of services\" \"(e.g., Success, InProgress, Failed, Pending).\" 
	ServiceInstallStatus *string `json:"serviceInstallStatus,omitempty"`
	// The name of the service.
	ServiceName *string `json:"serviceName,omitempty"`
}

// NewServiceInstallLog instantiates a new ServiceInstallLog object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceInstallLog() *ServiceInstallLog {
	this := ServiceInstallLog{}
	return &this
}

// NewServiceInstallLogWithDefaults instantiates a new ServiceInstallLog object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceInstallLogWithDefaults() *ServiceInstallLog {
	this := ServiceInstallLog{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *ServiceInstallLog) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstallLog) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *ServiceInstallLog) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *ServiceInstallLog) SetMessage(v string) {
	o.Message = &v
}

// GetServiceInstallStatus returns the ServiceInstallStatus field value if set, zero value otherwise.
func (o *ServiceInstallLog) GetServiceInstallStatus() string {
	if o == nil || IsNil(o.ServiceInstallStatus) {
		var ret string
		return ret
	}
	return *o.ServiceInstallStatus
}

// GetServiceInstallStatusOk returns a tuple with the ServiceInstallStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstallLog) GetServiceInstallStatusOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceInstallStatus) {
		return nil, false
	}
	return o.ServiceInstallStatus, true
}

// HasServiceInstallStatus returns a boolean if a field has been set.
func (o *ServiceInstallLog) HasServiceInstallStatus() bool {
	if o != nil && !IsNil(o.ServiceInstallStatus) {
		return true
	}

	return false
}

// SetServiceInstallStatus gets a reference to the given string and assigns it to the ServiceInstallStatus field.
func (o *ServiceInstallLog) SetServiceInstallStatus(v string) {
	o.ServiceInstallStatus = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *ServiceInstallLog) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceInstallLog) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *ServiceInstallLog) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *ServiceInstallLog) SetServiceName(v string) {
	o.ServiceName = &v
}

func (o ServiceInstallLog) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceInstallLog) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.ServiceInstallStatus) {
		toSerialize["serviceInstallStatus"] = o.ServiceInstallStatus
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	return toSerialize, nil
}

type NullableServiceInstallLog struct {
	value *ServiceInstallLog
	isSet bool
}

func (v NullableServiceInstallLog) Get() *ServiceInstallLog {
	return v.value
}

func (v *NullableServiceInstallLog) Set(val *ServiceInstallLog) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceInstallLog) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceInstallLog) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceInstallLog(val *ServiceInstallLog) *NullableServiceInstallLog {
	return &NullableServiceInstallLog{value: val, isSet: true}
}

func (v NullableServiceInstallLog) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceInstallLog) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


