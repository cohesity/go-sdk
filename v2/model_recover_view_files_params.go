/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverViewFilesParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverViewFilesParams{}

// RecoverViewFilesParams Specifies the parameters to recover View files.
type RecoverViewFilesParams struct {
	// Specifies the list of info about the view files and folders to be recovered.
	FilesAndFolders []ViewRecoverFileAndFolderInfo `json:"filesAndFolders"`
	ViewTargetParams NullableRecoverViewFilesParamsViewTargetParams `json:"viewTargetParams,omitempty"`
}

type _RecoverViewFilesParams RecoverViewFilesParams

// NewRecoverViewFilesParams instantiates a new RecoverViewFilesParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverViewFilesParams(filesAndFolders []ViewRecoverFileAndFolderInfo) *RecoverViewFilesParams {
	this := RecoverViewFilesParams{}
	this.FilesAndFolders = filesAndFolders
	return &this
}

// NewRecoverViewFilesParamsWithDefaults instantiates a new RecoverViewFilesParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverViewFilesParamsWithDefaults() *RecoverViewFilesParams {
	this := RecoverViewFilesParams{}
	return &this
}

// GetFilesAndFolders returns the FilesAndFolders field value
// If the value is explicit nil, the zero value for []ViewRecoverFileAndFolderInfo will be returned
func (o *RecoverViewFilesParams) GetFilesAndFolders() []ViewRecoverFileAndFolderInfo {
	if o == nil {
		var ret []ViewRecoverFileAndFolderInfo
		return ret
	}

	return o.FilesAndFolders
}

// GetFilesAndFoldersOk returns a tuple with the FilesAndFolders field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverViewFilesParams) GetFilesAndFoldersOk() ([]ViewRecoverFileAndFolderInfo, bool) {
	if o == nil || IsNil(o.FilesAndFolders) {
		return nil, false
	}
	return o.FilesAndFolders, true
}

// SetFilesAndFolders sets field value
func (o *RecoverViewFilesParams) SetFilesAndFolders(v []ViewRecoverFileAndFolderInfo) {
	o.FilesAndFolders = v
}

// GetViewTargetParams returns the ViewTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverViewFilesParams) GetViewTargetParams() RecoverViewFilesParamsViewTargetParams {
	if o == nil || IsNil(o.ViewTargetParams.Get()) {
		var ret RecoverViewFilesParamsViewTargetParams
		return ret
	}
	return *o.ViewTargetParams.Get()
}

// GetViewTargetParamsOk returns a tuple with the ViewTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverViewFilesParams) GetViewTargetParamsOk() (*RecoverViewFilesParamsViewTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewTargetParams.Get(), o.ViewTargetParams.IsSet()
}

// HasViewTargetParams returns a boolean if a field has been set.
func (o *RecoverViewFilesParams) HasViewTargetParams() bool {
	if o != nil && o.ViewTargetParams.IsSet() {
		return true
	}

	return false
}

// SetViewTargetParams gets a reference to the given NullableRecoverViewFilesParamsViewTargetParams and assigns it to the ViewTargetParams field.
func (o *RecoverViewFilesParams) SetViewTargetParams(v RecoverViewFilesParamsViewTargetParams) {
	o.ViewTargetParams.Set(&v)
}
// SetViewTargetParamsNil sets the value for ViewTargetParams to be an explicit nil
func (o *RecoverViewFilesParams) SetViewTargetParamsNil() {
	o.ViewTargetParams.Set(nil)
}

// UnsetViewTargetParams ensures that no value is present for ViewTargetParams, not even an explicit nil
func (o *RecoverViewFilesParams) UnsetViewTargetParams() {
	o.ViewTargetParams.Unset()
}

func (o RecoverViewFilesParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverViewFilesParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesAndFolders != nil {
		toSerialize["filesAndFolders"] = o.FilesAndFolders
	}
	if o.ViewTargetParams.IsSet() {
		toSerialize["viewTargetParams"] = o.ViewTargetParams.Get()
	}
	return toSerialize, nil
}

func (o *RecoverViewFilesParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filesAndFolders",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverViewFilesParams := _RecoverViewFilesParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverViewFilesParams)

	if err != nil {
		return err
	}

	*o = RecoverViewFilesParams(varRecoverViewFilesParams)

	return err
}

type NullableRecoverViewFilesParams struct {
	value *RecoverViewFilesParams
	isSet bool
}

func (v NullableRecoverViewFilesParams) Get() *RecoverViewFilesParams {
	return v.value
}

func (v *NullableRecoverViewFilesParams) Set(val *RecoverViewFilesParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverViewFilesParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverViewFilesParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverViewFilesParams(val *RecoverViewFilesParams) *NullableRecoverViewFilesParams {
	return &NullableRecoverViewFilesParams{value: val, isSet: true}
}

func (v NullableRecoverViewFilesParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverViewFilesParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


