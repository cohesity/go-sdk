/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the EndPoint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndPoint{}

// EndPoint Specifies information about a node interface.
type EndPoint struct {
	// Index of the interface as given by 'ip a' command.
	Index *int32 `json:"index,omitempty"`
	// IP addresses on the interface
	IpAddresses []string `json:"ipAddresses,omitempty"`
	// Name of the interface like bond0.
	Name *string `json:"name,omitempty"`
}

// NewEndPoint instantiates a new EndPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndPoint() *EndPoint {
	this := EndPoint{}
	return &this
}

// NewEndPointWithDefaults instantiates a new EndPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndPointWithDefaults() *EndPoint {
	this := EndPoint{}
	return &this
}

// GetIndex returns the Index field value if set, zero value otherwise.
func (o *EndPoint) GetIndex() int32 {
	if o == nil || IsNil(o.Index) {
		var ret int32
		return ret
	}
	return *o.Index
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndPoint) GetIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.Index) {
		return nil, false
	}
	return o.Index, true
}

// HasIndex returns a boolean if a field has been set.
func (o *EndPoint) HasIndex() bool {
	if o != nil && !IsNil(o.Index) {
		return true
	}

	return false
}

// SetIndex gets a reference to the given int32 and assigns it to the Index field.
func (o *EndPoint) SetIndex(v int32) {
	o.Index = &v
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise.
func (o *EndPoint) GetIpAddresses() []string {
	if o == nil || IsNil(o.IpAddresses) {
		var ret []string
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndPoint) GetIpAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.IpAddresses) {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *EndPoint) HasIpAddresses() bool {
	if o != nil && !IsNil(o.IpAddresses) {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []string and assigns it to the IpAddresses field.
func (o *EndPoint) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *EndPoint) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EndPoint) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *EndPoint) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *EndPoint) SetName(v string) {
	o.Name = &v
}

func (o EndPoint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndPoint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Index) {
		toSerialize["index"] = o.Index
	}
	if !IsNil(o.IpAddresses) {
		toSerialize["ipAddresses"] = o.IpAddresses
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	return toSerialize, nil
}

type NullableEndPoint struct {
	value *EndPoint
	isSet bool
}

func (v NullableEndPoint) Get() *EndPoint {
	return v.value
}

func (v *NullableEndPoint) Set(val *EndPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableEndPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableEndPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndPoint(val *EndPoint) *NullableEndPoint {
	return &NullableEndPoint{value: val, isSet: true}
}

func (v NullableEndPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


