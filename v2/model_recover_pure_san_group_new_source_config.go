/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverPureSanGroupNewSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverPureSanGroupNewSourceConfig{}

// RecoverPureSanGroupNewSourceConfig Specifies the new destination Source configuration where the Pure group will be recovered.
type RecoverPureSanGroupNewSourceConfig struct {
	RenameRecoveredGroupParams NullableRecoverPureSanGroupNewSourceConfigRenameRecoveredGroupParams `json:"renameRecoveredGroupParams,omitempty"`
	ResourcePool NullableRecoverPureSanGroupNewSourceConfigResourcePool `json:"resourcePool,omitempty"`
	Source NullableRecoverPureSanGroupNewSourceConfigSource `json:"source"`
}

type _RecoverPureSanGroupNewSourceConfig RecoverPureSanGroupNewSourceConfig

// NewRecoverPureSanGroupNewSourceConfig instantiates a new RecoverPureSanGroupNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverPureSanGroupNewSourceConfig(source NullableRecoverPureSanGroupNewSourceConfigSource) *RecoverPureSanGroupNewSourceConfig {
	this := RecoverPureSanGroupNewSourceConfig{}
	this.Source = source
	return &this
}

// NewRecoverPureSanGroupNewSourceConfigWithDefaults instantiates a new RecoverPureSanGroupNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverPureSanGroupNewSourceConfigWithDefaults() *RecoverPureSanGroupNewSourceConfig {
	this := RecoverPureSanGroupNewSourceConfig{}
	return &this
}

// GetRenameRecoveredGroupParams returns the RenameRecoveredGroupParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPureSanGroupNewSourceConfig) GetRenameRecoveredGroupParams() RecoverPureSanGroupNewSourceConfigRenameRecoveredGroupParams {
	if o == nil || IsNil(o.RenameRecoveredGroupParams.Get()) {
		var ret RecoverPureSanGroupNewSourceConfigRenameRecoveredGroupParams
		return ret
	}
	return *o.RenameRecoveredGroupParams.Get()
}

// GetRenameRecoveredGroupParamsOk returns a tuple with the RenameRecoveredGroupParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPureSanGroupNewSourceConfig) GetRenameRecoveredGroupParamsOk() (*RecoverPureSanGroupNewSourceConfigRenameRecoveredGroupParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenameRecoveredGroupParams.Get(), o.RenameRecoveredGroupParams.IsSet()
}

// HasRenameRecoveredGroupParams returns a boolean if a field has been set.
func (o *RecoverPureSanGroupNewSourceConfig) HasRenameRecoveredGroupParams() bool {
	if o != nil && o.RenameRecoveredGroupParams.IsSet() {
		return true
	}

	return false
}

// SetRenameRecoveredGroupParams gets a reference to the given NullableRecoverPureSanGroupNewSourceConfigRenameRecoveredGroupParams and assigns it to the RenameRecoveredGroupParams field.
func (o *RecoverPureSanGroupNewSourceConfig) SetRenameRecoveredGroupParams(v RecoverPureSanGroupNewSourceConfigRenameRecoveredGroupParams) {
	o.RenameRecoveredGroupParams.Set(&v)
}
// SetRenameRecoveredGroupParamsNil sets the value for RenameRecoveredGroupParams to be an explicit nil
func (o *RecoverPureSanGroupNewSourceConfig) SetRenameRecoveredGroupParamsNil() {
	o.RenameRecoveredGroupParams.Set(nil)
}

// UnsetRenameRecoveredGroupParams ensures that no value is present for RenameRecoveredGroupParams, not even an explicit nil
func (o *RecoverPureSanGroupNewSourceConfig) UnsetRenameRecoveredGroupParams() {
	o.RenameRecoveredGroupParams.Unset()
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPureSanGroupNewSourceConfig) GetResourcePool() RecoverPureSanGroupNewSourceConfigResourcePool {
	if o == nil || IsNil(o.ResourcePool.Get()) {
		var ret RecoverPureSanGroupNewSourceConfigResourcePool
		return ret
	}
	return *o.ResourcePool.Get()
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPureSanGroupNewSourceConfig) GetResourcePoolOk() (*RecoverPureSanGroupNewSourceConfigResourcePool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourcePool.Get(), o.ResourcePool.IsSet()
}

// HasResourcePool returns a boolean if a field has been set.
func (o *RecoverPureSanGroupNewSourceConfig) HasResourcePool() bool {
	if o != nil && o.ResourcePool.IsSet() {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given NullableRecoverPureSanGroupNewSourceConfigResourcePool and assigns it to the ResourcePool field.
func (o *RecoverPureSanGroupNewSourceConfig) SetResourcePool(v RecoverPureSanGroupNewSourceConfigResourcePool) {
	o.ResourcePool.Set(&v)
}
// SetResourcePoolNil sets the value for ResourcePool to be an explicit nil
func (o *RecoverPureSanGroupNewSourceConfig) SetResourcePoolNil() {
	o.ResourcePool.Set(nil)
}

// UnsetResourcePool ensures that no value is present for ResourcePool, not even an explicit nil
func (o *RecoverPureSanGroupNewSourceConfig) UnsetResourcePool() {
	o.ResourcePool.Unset()
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoverPureSanGroupNewSourceConfigSource will be returned
func (o *RecoverPureSanGroupNewSourceConfig) GetSource() RecoverPureSanGroupNewSourceConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret RecoverPureSanGroupNewSourceConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPureSanGroupNewSourceConfig) GetSourceOk() (*RecoverPureSanGroupNewSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *RecoverPureSanGroupNewSourceConfig) SetSource(v RecoverPureSanGroupNewSourceConfigSource) {
	o.Source.Set(&v)
}

func (o RecoverPureSanGroupNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverPureSanGroupNewSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RenameRecoveredGroupParams.IsSet() {
		toSerialize["renameRecoveredGroupParams"] = o.RenameRecoveredGroupParams.Get()
	}
	if o.ResourcePool.IsSet() {
		toSerialize["resourcePool"] = o.ResourcePool.Get()
	}
	toSerialize["source"] = o.Source.Get()
	return toSerialize, nil
}

func (o *RecoverPureSanGroupNewSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverPureSanGroupNewSourceConfig := _RecoverPureSanGroupNewSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverPureSanGroupNewSourceConfig)

	if err != nil {
		return err
	}

	*o = RecoverPureSanGroupNewSourceConfig(varRecoverPureSanGroupNewSourceConfig)

	return err
}

type NullableRecoverPureSanGroupNewSourceConfig struct {
	value *RecoverPureSanGroupNewSourceConfig
	isSet bool
}

func (v NullableRecoverPureSanGroupNewSourceConfig) Get() *RecoverPureSanGroupNewSourceConfig {
	return v.value
}

func (v *NullableRecoverPureSanGroupNewSourceConfig) Set(val *RecoverPureSanGroupNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverPureSanGroupNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverPureSanGroupNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverPureSanGroupNewSourceConfig(val *RecoverPureSanGroupNewSourceConfig) *NullableRecoverPureSanGroupNewSourceConfig {
	return &NullableRecoverPureSanGroupNewSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverPureSanGroupNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverPureSanGroupNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


