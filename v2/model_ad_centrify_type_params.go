/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AdCentrifyTypeParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdCentrifyTypeParams{}

// AdCentrifyTypeParams Specifies the properties associated to a Centrify type user id mapping.
type AdCentrifyTypeParams struct {
	// Specifies a description of the Centrify zone.
	Description NullableString `json:"description"`
	// Specifies the distinguished name of the Centrify zone.
	DistinguishedName NullableString `json:"distinguishedName"`
	// Specifies the schema of this Centrify zone.
	Schema NullableString `json:"schema"`
	// Specifies the zone domain of the Centrify zone.
	ZoneDomain NullableString `json:"zoneDomain,omitempty"`
	// Specifies the zone name of the Centrify zone.
	ZoneName NullableString `json:"zoneName,omitempty"`
	// Specifies a fallback user id mapping param in case the primary config does not work.
	FallbackOption map[string]interface{} `json:"fallbackOption"`
}

type _AdCentrifyTypeParams AdCentrifyTypeParams

// NewAdCentrifyTypeParams instantiates a new AdCentrifyTypeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdCentrifyTypeParams(description NullableString, distinguishedName NullableString, schema NullableString, fallbackOption map[string]interface{}) *AdCentrifyTypeParams {
	this := AdCentrifyTypeParams{}
	this.Description = description
	this.DistinguishedName = distinguishedName
	this.Schema = schema
	this.FallbackOption = fallbackOption
	return &this
}

// NewAdCentrifyTypeParamsWithDefaults instantiates a new AdCentrifyTypeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdCentrifyTypeParamsWithDefaults() *AdCentrifyTypeParams {
	this := AdCentrifyTypeParams{}
	return &this
}

// GetDescription returns the Description field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AdCentrifyTypeParams) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}

	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdCentrifyTypeParams) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// SetDescription sets field value
func (o *AdCentrifyTypeParams) SetDescription(v string) {
	o.Description.Set(&v)
}

// GetDistinguishedName returns the DistinguishedName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AdCentrifyTypeParams) GetDistinguishedName() string {
	if o == nil || o.DistinguishedName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DistinguishedName.Get()
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdCentrifyTypeParams) GetDistinguishedNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DistinguishedName.Get(), o.DistinguishedName.IsSet()
}

// SetDistinguishedName sets field value
func (o *AdCentrifyTypeParams) SetDistinguishedName(v string) {
	o.DistinguishedName.Set(&v)
}

// GetSchema returns the Schema field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AdCentrifyTypeParams) GetSchema() string {
	if o == nil || o.Schema.Get() == nil {
		var ret string
		return ret
	}

	return *o.Schema.Get()
}

// GetSchemaOk returns a tuple with the Schema field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdCentrifyTypeParams) GetSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schema.Get(), o.Schema.IsSet()
}

// SetSchema sets field value
func (o *AdCentrifyTypeParams) SetSchema(v string) {
	o.Schema.Set(&v)
}

// GetZoneDomain returns the ZoneDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdCentrifyTypeParams) GetZoneDomain() string {
	if o == nil || IsNil(o.ZoneDomain.Get()) {
		var ret string
		return ret
	}
	return *o.ZoneDomain.Get()
}

// GetZoneDomainOk returns a tuple with the ZoneDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdCentrifyTypeParams) GetZoneDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZoneDomain.Get(), o.ZoneDomain.IsSet()
}

// HasZoneDomain returns a boolean if a field has been set.
func (o *AdCentrifyTypeParams) HasZoneDomain() bool {
	if o != nil && o.ZoneDomain.IsSet() {
		return true
	}

	return false
}

// SetZoneDomain gets a reference to the given NullableString and assigns it to the ZoneDomain field.
func (o *AdCentrifyTypeParams) SetZoneDomain(v string) {
	o.ZoneDomain.Set(&v)
}
// SetZoneDomainNil sets the value for ZoneDomain to be an explicit nil
func (o *AdCentrifyTypeParams) SetZoneDomainNil() {
	o.ZoneDomain.Set(nil)
}

// UnsetZoneDomain ensures that no value is present for ZoneDomain, not even an explicit nil
func (o *AdCentrifyTypeParams) UnsetZoneDomain() {
	o.ZoneDomain.Unset()
}

// GetZoneName returns the ZoneName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdCentrifyTypeParams) GetZoneName() string {
	if o == nil || IsNil(o.ZoneName.Get()) {
		var ret string
		return ret
	}
	return *o.ZoneName.Get()
}

// GetZoneNameOk returns a tuple with the ZoneName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdCentrifyTypeParams) GetZoneNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ZoneName.Get(), o.ZoneName.IsSet()
}

// HasZoneName returns a boolean if a field has been set.
func (o *AdCentrifyTypeParams) HasZoneName() bool {
	if o != nil && o.ZoneName.IsSet() {
		return true
	}

	return false
}

// SetZoneName gets a reference to the given NullableString and assigns it to the ZoneName field.
func (o *AdCentrifyTypeParams) SetZoneName(v string) {
	o.ZoneName.Set(&v)
}
// SetZoneNameNil sets the value for ZoneName to be an explicit nil
func (o *AdCentrifyTypeParams) SetZoneNameNil() {
	o.ZoneName.Set(nil)
}

// UnsetZoneName ensures that no value is present for ZoneName, not even an explicit nil
func (o *AdCentrifyTypeParams) UnsetZoneName() {
	o.ZoneName.Unset()
}

// GetFallbackOption returns the FallbackOption field value
// If the value is explicit nil, the zero value for map[string]interface{} will be returned
func (o *AdCentrifyTypeParams) GetFallbackOption() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.FallbackOption
}

// GetFallbackOptionOk returns a tuple with the FallbackOption field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdCentrifyTypeParams) GetFallbackOptionOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FallbackOption) {
		return map[string]interface{}{}, false
	}
	return o.FallbackOption, true
}

// SetFallbackOption sets field value
func (o *AdCentrifyTypeParams) SetFallbackOption(v map[string]interface{}) {
	o.FallbackOption = v
}

func (o AdCentrifyTypeParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdCentrifyTypeParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description.Get()
	toSerialize["distinguishedName"] = o.DistinguishedName.Get()
	toSerialize["schema"] = o.Schema.Get()
	if o.ZoneDomain.IsSet() {
		toSerialize["zoneDomain"] = o.ZoneDomain.Get()
	}
	if o.ZoneName.IsSet() {
		toSerialize["zoneName"] = o.ZoneName.Get()
	}
	if o.FallbackOption != nil {
		toSerialize["fallbackOption"] = o.FallbackOption
	}
	return toSerialize, nil
}

func (o *AdCentrifyTypeParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"distinguishedName",
		"schema",
		"fallbackOption",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdCentrifyTypeParams := _AdCentrifyTypeParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdCentrifyTypeParams)

	if err != nil {
		return err
	}

	*o = AdCentrifyTypeParams(varAdCentrifyTypeParams)

	return err
}

type NullableAdCentrifyTypeParams struct {
	value *AdCentrifyTypeParams
	isSet bool
}

func (v NullableAdCentrifyTypeParams) Get() *AdCentrifyTypeParams {
	return v.value
}

func (v *NullableAdCentrifyTypeParams) Set(val *AdCentrifyTypeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAdCentrifyTypeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAdCentrifyTypeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdCentrifyTypeParams(val *AdCentrifyTypeParams) *NullableAdCentrifyTypeParams {
	return &NullableAdCentrifyTypeParams{value: val, isSet: true}
}

func (v NullableAdCentrifyTypeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdCentrifyTypeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


