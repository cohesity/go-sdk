/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the QueryTenantMigrationValidationStatusResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryTenantMigrationValidationStatusResult{}

// QueryTenantMigrationValidationStatusResult Response of Validate Metadata status.
type QueryTenantMigrationValidationStatusResult struct {
	ReportLocation *DataLocator `json:"reportLocation,omitempty"`
	// The status of the Validate Metadata task.
	Status *string `json:"status,omitempty"`
}

// NewQueryTenantMigrationValidationStatusResult instantiates a new QueryTenantMigrationValidationStatusResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryTenantMigrationValidationStatusResult() *QueryTenantMigrationValidationStatusResult {
	this := QueryTenantMigrationValidationStatusResult{}
	return &this
}

// NewQueryTenantMigrationValidationStatusResultWithDefaults instantiates a new QueryTenantMigrationValidationStatusResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryTenantMigrationValidationStatusResultWithDefaults() *QueryTenantMigrationValidationStatusResult {
	this := QueryTenantMigrationValidationStatusResult{}
	return &this
}

// GetReportLocation returns the ReportLocation field value if set, zero value otherwise.
func (o *QueryTenantMigrationValidationStatusResult) GetReportLocation() DataLocator {
	if o == nil || IsNil(o.ReportLocation) {
		var ret DataLocator
		return ret
	}
	return *o.ReportLocation
}

// GetReportLocationOk returns a tuple with the ReportLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryTenantMigrationValidationStatusResult) GetReportLocationOk() (*DataLocator, bool) {
	if o == nil || IsNil(o.ReportLocation) {
		return nil, false
	}
	return o.ReportLocation, true
}

// HasReportLocation returns a boolean if a field has been set.
func (o *QueryTenantMigrationValidationStatusResult) HasReportLocation() bool {
	if o != nil && !IsNil(o.ReportLocation) {
		return true
	}

	return false
}

// SetReportLocation gets a reference to the given DataLocator and assigns it to the ReportLocation field.
func (o *QueryTenantMigrationValidationStatusResult) SetReportLocation(v DataLocator) {
	o.ReportLocation = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *QueryTenantMigrationValidationStatusResult) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryTenantMigrationValidationStatusResult) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *QueryTenantMigrationValidationStatusResult) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *QueryTenantMigrationValidationStatusResult) SetStatus(v string) {
	o.Status = &v
}

func (o QueryTenantMigrationValidationStatusResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryTenantMigrationValidationStatusResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ReportLocation) {
		toSerialize["reportLocation"] = o.ReportLocation
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableQueryTenantMigrationValidationStatusResult struct {
	value *QueryTenantMigrationValidationStatusResult
	isSet bool
}

func (v NullableQueryTenantMigrationValidationStatusResult) Get() *QueryTenantMigrationValidationStatusResult {
	return v.value
}

func (v *NullableQueryTenantMigrationValidationStatusResult) Set(val *QueryTenantMigrationValidationStatusResult) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryTenantMigrationValidationStatusResult) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryTenantMigrationValidationStatusResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryTenantMigrationValidationStatusResult(val *QueryTenantMigrationValidationStatusResult) *NullableQueryTenantMigrationValidationStatusResult {
	return &NullableQueryTenantMigrationValidationStatusResult{value: val, isSet: true}
}

func (v NullableQueryTenantMigrationValidationStatusResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryTenantMigrationValidationStatusResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


