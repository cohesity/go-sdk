/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RecoverAzureSqlObjectParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverAzureSqlObjectParams{}

// RecoverAzureSqlObjectParams Specifies details of recovery object to be recovered.
type RecoverAzureSqlObjectParams struct {
	// Specifies the new name to which the object should be renamed to after the recovery.
	NewDatabaseName NullableString `json:"newDatabaseName,omitempty"`
	// Set to true to overwrite an existing object at the destination. If set to false, and the same object exists at the destination, then recovery will fail for that object.
	OverwriteDatabase NullableBool `json:"overwriteDatabase,omitempty"`
	RestoredDatabaseSku *AzureSqlSkuOptions `json:"restoredDatabaseSku,omitempty"`
	SqlPackageOptions *AzureSqlPackageOptions `json:"sqlPackageOptions,omitempty"`
}

// NewRecoverAzureSqlObjectParams instantiates a new RecoverAzureSqlObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAzureSqlObjectParams() *RecoverAzureSqlObjectParams {
	this := RecoverAzureSqlObjectParams{}
	return &this
}

// NewRecoverAzureSqlObjectParamsWithDefaults instantiates a new RecoverAzureSqlObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAzureSqlObjectParamsWithDefaults() *RecoverAzureSqlObjectParams {
	this := RecoverAzureSqlObjectParams{}
	return &this
}

// GetNewDatabaseName returns the NewDatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAzureSqlObjectParams) GetNewDatabaseName() string {
	if o == nil || IsNil(o.NewDatabaseName.Get()) {
		var ret string
		return ret
	}
	return *o.NewDatabaseName.Get()
}

// GetNewDatabaseNameOk returns a tuple with the NewDatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureSqlObjectParams) GetNewDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewDatabaseName.Get(), o.NewDatabaseName.IsSet()
}

// HasNewDatabaseName returns a boolean if a field has been set.
func (o *RecoverAzureSqlObjectParams) HasNewDatabaseName() bool {
	if o != nil && o.NewDatabaseName.IsSet() {
		return true
	}

	return false
}

// SetNewDatabaseName gets a reference to the given NullableString and assigns it to the NewDatabaseName field.
func (o *RecoverAzureSqlObjectParams) SetNewDatabaseName(v string) {
	o.NewDatabaseName.Set(&v)
}
// SetNewDatabaseNameNil sets the value for NewDatabaseName to be an explicit nil
func (o *RecoverAzureSqlObjectParams) SetNewDatabaseNameNil() {
	o.NewDatabaseName.Set(nil)
}

// UnsetNewDatabaseName ensures that no value is present for NewDatabaseName, not even an explicit nil
func (o *RecoverAzureSqlObjectParams) UnsetNewDatabaseName() {
	o.NewDatabaseName.Unset()
}

// GetOverwriteDatabase returns the OverwriteDatabase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAzureSqlObjectParams) GetOverwriteDatabase() bool {
	if o == nil || IsNil(o.OverwriteDatabase.Get()) {
		var ret bool
		return ret
	}
	return *o.OverwriteDatabase.Get()
}

// GetOverwriteDatabaseOk returns a tuple with the OverwriteDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureSqlObjectParams) GetOverwriteDatabaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverwriteDatabase.Get(), o.OverwriteDatabase.IsSet()
}

// HasOverwriteDatabase returns a boolean if a field has been set.
func (o *RecoverAzureSqlObjectParams) HasOverwriteDatabase() bool {
	if o != nil && o.OverwriteDatabase.IsSet() {
		return true
	}

	return false
}

// SetOverwriteDatabase gets a reference to the given NullableBool and assigns it to the OverwriteDatabase field.
func (o *RecoverAzureSqlObjectParams) SetOverwriteDatabase(v bool) {
	o.OverwriteDatabase.Set(&v)
}
// SetOverwriteDatabaseNil sets the value for OverwriteDatabase to be an explicit nil
func (o *RecoverAzureSqlObjectParams) SetOverwriteDatabaseNil() {
	o.OverwriteDatabase.Set(nil)
}

// UnsetOverwriteDatabase ensures that no value is present for OverwriteDatabase, not even an explicit nil
func (o *RecoverAzureSqlObjectParams) UnsetOverwriteDatabase() {
	o.OverwriteDatabase.Unset()
}

// GetRestoredDatabaseSku returns the RestoredDatabaseSku field value if set, zero value otherwise.
func (o *RecoverAzureSqlObjectParams) GetRestoredDatabaseSku() AzureSqlSkuOptions {
	if o == nil || IsNil(o.RestoredDatabaseSku) {
		var ret AzureSqlSkuOptions
		return ret
	}
	return *o.RestoredDatabaseSku
}

// GetRestoredDatabaseSkuOk returns a tuple with the RestoredDatabaseSku field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverAzureSqlObjectParams) GetRestoredDatabaseSkuOk() (*AzureSqlSkuOptions, bool) {
	if o == nil || IsNil(o.RestoredDatabaseSku) {
		return nil, false
	}
	return o.RestoredDatabaseSku, true
}

// HasRestoredDatabaseSku returns a boolean if a field has been set.
func (o *RecoverAzureSqlObjectParams) HasRestoredDatabaseSku() bool {
	if o != nil && !IsNil(o.RestoredDatabaseSku) {
		return true
	}

	return false
}

// SetRestoredDatabaseSku gets a reference to the given AzureSqlSkuOptions and assigns it to the RestoredDatabaseSku field.
func (o *RecoverAzureSqlObjectParams) SetRestoredDatabaseSku(v AzureSqlSkuOptions) {
	o.RestoredDatabaseSku = &v
}

// GetSqlPackageOptions returns the SqlPackageOptions field value if set, zero value otherwise.
func (o *RecoverAzureSqlObjectParams) GetSqlPackageOptions() AzureSqlPackageOptions {
	if o == nil || IsNil(o.SqlPackageOptions) {
		var ret AzureSqlPackageOptions
		return ret
	}
	return *o.SqlPackageOptions
}

// GetSqlPackageOptionsOk returns a tuple with the SqlPackageOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverAzureSqlObjectParams) GetSqlPackageOptionsOk() (*AzureSqlPackageOptions, bool) {
	if o == nil || IsNil(o.SqlPackageOptions) {
		return nil, false
	}
	return o.SqlPackageOptions, true
}

// HasSqlPackageOptions returns a boolean if a field has been set.
func (o *RecoverAzureSqlObjectParams) HasSqlPackageOptions() bool {
	if o != nil && !IsNil(o.SqlPackageOptions) {
		return true
	}

	return false
}

// SetSqlPackageOptions gets a reference to the given AzureSqlPackageOptions and assigns it to the SqlPackageOptions field.
func (o *RecoverAzureSqlObjectParams) SetSqlPackageOptions(v AzureSqlPackageOptions) {
	o.SqlPackageOptions = &v
}

func (o RecoverAzureSqlObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverAzureSqlObjectParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NewDatabaseName.IsSet() {
		toSerialize["newDatabaseName"] = o.NewDatabaseName.Get()
	}
	if o.OverwriteDatabase.IsSet() {
		toSerialize["overwriteDatabase"] = o.OverwriteDatabase.Get()
	}
	if !IsNil(o.RestoredDatabaseSku) {
		toSerialize["restoredDatabaseSku"] = o.RestoredDatabaseSku
	}
	if !IsNil(o.SqlPackageOptions) {
		toSerialize["sqlPackageOptions"] = o.SqlPackageOptions
	}
	return toSerialize, nil
}

type NullableRecoverAzureSqlObjectParams struct {
	value *RecoverAzureSqlObjectParams
	isSet bool
}

func (v NullableRecoverAzureSqlObjectParams) Get() *RecoverAzureSqlObjectParams {
	return v.value
}

func (v *NullableRecoverAzureSqlObjectParams) Set(val *RecoverAzureSqlObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAzureSqlObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAzureSqlObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAzureSqlObjectParams(val *RecoverAzureSqlObjectParams) *NullableRecoverAzureSqlObjectParams {
	return &NullableRecoverAzureSqlObjectParams{value: val, isSet: true}
}

func (v NullableRecoverAzureSqlObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAzureSqlObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


