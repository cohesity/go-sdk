/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AlertInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AlertInfo{}

// AlertInfo Specifies the fields of an alert.
type AlertInfo struct {
	// Specifies the alert category.
	AlertCategory NullableString `json:"alertCategory,omitempty"`
	// Specifies a unique code that categorizes the Alert, for example: CE00200014, where CE stands for Cohesity Error, the alert state next 3 digits is the id of the Alert Category (e.g. 002 for 'kNode') and the last 5 digits is the id of the Alert Type (e.g. 00014 for 'kNodeHighCpuUsage').
	AlertCode NullableString `json:"alertCode,omitempty"`
	AlertDocument *AlertDocument `json:"alertDocument,omitempty"`
	// Specifies the alert state.
	AlertState NullableString `json:"alertState,omitempty"`
	// Specifies the alert type.
	AlertType NullableInt32 `json:"alertType,omitempty"`
	// Specifies the Alert type bucket.
	AlertTypeBucket NullableString `json:"alertTypeBucket,omitempty"`
	// Id of the cluster which the alert is associated
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the name of cluster which alert is raised from.
	ClusterName NullableString `json:"clusterName,omitempty"`
	// Specifies the dedup count of alert.
	DedupCount NullableInt32 `json:"dedupCount,omitempty"`
	// Specifies Unix epoch Timestamps (in microseconds) for the last 25 occurrences of duplicated Alerts that are stored with the original/primary Alert. Alerts are grouped into one Alert if the Alerts are the same type, are reporting on the same Object and occur within one hour. 'dedupCount' always reports the total count of duplicated Alerts even if there are more than 25 occurrences. For example, if there are 100 occurrences of this Alert, dedupTimestamps stores the timestamps of the last 25 occurrences and dedupCount equals 100.
	DedupTimestamps []int64 `json:"dedupTimestamps,omitempty"`
	// Specifies source where the event occurred.
	EventSource NullableString `json:"eventSource,omitempty"`
	// Specifies Unix epoch Timestamp (in microseconds) of the first occurrence of the Alert.
	FirstTimestampUsecs NullableInt64 `json:"firstTimestampUsecs,omitempty"`
	// Specifies unique id of the alert.
	Id NullableString `json:"id,omitempty"`
	// Specifies the labels for which this alert has been raised.
	LabelIds []string `json:"labelIds,omitempty"`
	// Specifies Unix epoch Timestamp (in microseconds) of the most recent occurrence of the Alert.
	LatestTimestampUsecs NullableInt64 `json:"latestTimestampUsecs,omitempty"`
	// List of property key and values associated with alert
	PropertyList []Label `json:"propertyList,omitempty"`
	// Specifies the region id of the alert.
	RegionId NullableString `json:"regionId,omitempty"`
	ResolutionDetails NullableAlertResolutionDetails `json:"resolutionDetails,omitempty"`
	// Resolution Id String.
	ResolutionIdString NullableString `json:"resolutionIdString,omitempty"`
	// Specifies Unix epoch Timestamps in microseconds when alert is resolved.
	ResolvedTimestampUsecs NullableInt64 `json:"resolvedTimestampUsecs,omitempty"`
	// Specifies the alert severity.
	Severity NullableString `json:"severity,omitempty"`
	// Specifies unique id generated when the Alert is suppressed by the admin.
	SuppressionId NullableInt64 `json:"suppressionId,omitempty"`
	// Specifies the tenants for which this alert has been raised.
	TenantIds []string `json:"tenantIds,omitempty"`
	// Specifies information about vaults where source object associated with alert is vaulted. This could be empty if alert is not related to any source object or it is not vaulted.
	Vaults []Vault `json:"vaults,omitempty"`
}

// NewAlertInfo instantiates a new AlertInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlertInfo() *AlertInfo {
	this := AlertInfo{}
	return &this
}

// NewAlertInfoWithDefaults instantiates a new AlertInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertInfoWithDefaults() *AlertInfo {
	this := AlertInfo{}
	return &this
}

// GetAlertCategory returns the AlertCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetAlertCategory() string {
	if o == nil || IsNil(o.AlertCategory.Get()) {
		var ret string
		return ret
	}
	return *o.AlertCategory.Get()
}

// GetAlertCategoryOk returns a tuple with the AlertCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetAlertCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlertCategory.Get(), o.AlertCategory.IsSet()
}

// HasAlertCategory returns a boolean if a field has been set.
func (o *AlertInfo) HasAlertCategory() bool {
	if o != nil && o.AlertCategory.IsSet() {
		return true
	}

	return false
}

// SetAlertCategory gets a reference to the given NullableString and assigns it to the AlertCategory field.
func (o *AlertInfo) SetAlertCategory(v string) {
	o.AlertCategory.Set(&v)
}
// SetAlertCategoryNil sets the value for AlertCategory to be an explicit nil
func (o *AlertInfo) SetAlertCategoryNil() {
	o.AlertCategory.Set(nil)
}

// UnsetAlertCategory ensures that no value is present for AlertCategory, not even an explicit nil
func (o *AlertInfo) UnsetAlertCategory() {
	o.AlertCategory.Unset()
}

// GetAlertCode returns the AlertCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetAlertCode() string {
	if o == nil || IsNil(o.AlertCode.Get()) {
		var ret string
		return ret
	}
	return *o.AlertCode.Get()
}

// GetAlertCodeOk returns a tuple with the AlertCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetAlertCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlertCode.Get(), o.AlertCode.IsSet()
}

// HasAlertCode returns a boolean if a field has been set.
func (o *AlertInfo) HasAlertCode() bool {
	if o != nil && o.AlertCode.IsSet() {
		return true
	}

	return false
}

// SetAlertCode gets a reference to the given NullableString and assigns it to the AlertCode field.
func (o *AlertInfo) SetAlertCode(v string) {
	o.AlertCode.Set(&v)
}
// SetAlertCodeNil sets the value for AlertCode to be an explicit nil
func (o *AlertInfo) SetAlertCodeNil() {
	o.AlertCode.Set(nil)
}

// UnsetAlertCode ensures that no value is present for AlertCode, not even an explicit nil
func (o *AlertInfo) UnsetAlertCode() {
	o.AlertCode.Unset()
}

// GetAlertDocument returns the AlertDocument field value if set, zero value otherwise.
func (o *AlertInfo) GetAlertDocument() AlertDocument {
	if o == nil || IsNil(o.AlertDocument) {
		var ret AlertDocument
		return ret
	}
	return *o.AlertDocument
}

// GetAlertDocumentOk returns a tuple with the AlertDocument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfo) GetAlertDocumentOk() (*AlertDocument, bool) {
	if o == nil || IsNil(o.AlertDocument) {
		return nil, false
	}
	return o.AlertDocument, true
}

// HasAlertDocument returns a boolean if a field has been set.
func (o *AlertInfo) HasAlertDocument() bool {
	if o != nil && !IsNil(o.AlertDocument) {
		return true
	}

	return false
}

// SetAlertDocument gets a reference to the given AlertDocument and assigns it to the AlertDocument field.
func (o *AlertInfo) SetAlertDocument(v AlertDocument) {
	o.AlertDocument = &v
}

// GetAlertState returns the AlertState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetAlertState() string {
	if o == nil || IsNil(o.AlertState.Get()) {
		var ret string
		return ret
	}
	return *o.AlertState.Get()
}

// GetAlertStateOk returns a tuple with the AlertState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetAlertStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlertState.Get(), o.AlertState.IsSet()
}

// HasAlertState returns a boolean if a field has been set.
func (o *AlertInfo) HasAlertState() bool {
	if o != nil && o.AlertState.IsSet() {
		return true
	}

	return false
}

// SetAlertState gets a reference to the given NullableString and assigns it to the AlertState field.
func (o *AlertInfo) SetAlertState(v string) {
	o.AlertState.Set(&v)
}
// SetAlertStateNil sets the value for AlertState to be an explicit nil
func (o *AlertInfo) SetAlertStateNil() {
	o.AlertState.Set(nil)
}

// UnsetAlertState ensures that no value is present for AlertState, not even an explicit nil
func (o *AlertInfo) UnsetAlertState() {
	o.AlertState.Unset()
}

// GetAlertType returns the AlertType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetAlertType() int32 {
	if o == nil || IsNil(o.AlertType.Get()) {
		var ret int32
		return ret
	}
	return *o.AlertType.Get()
}

// GetAlertTypeOk returns a tuple with the AlertType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetAlertTypeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlertType.Get(), o.AlertType.IsSet()
}

// HasAlertType returns a boolean if a field has been set.
func (o *AlertInfo) HasAlertType() bool {
	if o != nil && o.AlertType.IsSet() {
		return true
	}

	return false
}

// SetAlertType gets a reference to the given NullableInt32 and assigns it to the AlertType field.
func (o *AlertInfo) SetAlertType(v int32) {
	o.AlertType.Set(&v)
}
// SetAlertTypeNil sets the value for AlertType to be an explicit nil
func (o *AlertInfo) SetAlertTypeNil() {
	o.AlertType.Set(nil)
}

// UnsetAlertType ensures that no value is present for AlertType, not even an explicit nil
func (o *AlertInfo) UnsetAlertType() {
	o.AlertType.Unset()
}

// GetAlertTypeBucket returns the AlertTypeBucket field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetAlertTypeBucket() string {
	if o == nil || IsNil(o.AlertTypeBucket.Get()) {
		var ret string
		return ret
	}
	return *o.AlertTypeBucket.Get()
}

// GetAlertTypeBucketOk returns a tuple with the AlertTypeBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetAlertTypeBucketOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlertTypeBucket.Get(), o.AlertTypeBucket.IsSet()
}

// HasAlertTypeBucket returns a boolean if a field has been set.
func (o *AlertInfo) HasAlertTypeBucket() bool {
	if o != nil && o.AlertTypeBucket.IsSet() {
		return true
	}

	return false
}

// SetAlertTypeBucket gets a reference to the given NullableString and assigns it to the AlertTypeBucket field.
func (o *AlertInfo) SetAlertTypeBucket(v string) {
	o.AlertTypeBucket.Set(&v)
}
// SetAlertTypeBucketNil sets the value for AlertTypeBucket to be an explicit nil
func (o *AlertInfo) SetAlertTypeBucketNil() {
	o.AlertTypeBucket.Set(nil)
}

// UnsetAlertTypeBucket ensures that no value is present for AlertTypeBucket, not even an explicit nil
func (o *AlertInfo) UnsetAlertTypeBucket() {
	o.AlertTypeBucket.Unset()
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetClusterId() int64 {
	if o == nil || IsNil(o.ClusterId.Get()) {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetClusterIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *AlertInfo) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *AlertInfo) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *AlertInfo) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *AlertInfo) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetClusterName() string {
	if o == nil || IsNil(o.ClusterName.Get()) {
		var ret string
		return ret
	}
	return *o.ClusterName.Get()
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetClusterNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterName.Get(), o.ClusterName.IsSet()
}

// HasClusterName returns a boolean if a field has been set.
func (o *AlertInfo) HasClusterName() bool {
	if o != nil && o.ClusterName.IsSet() {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given NullableString and assigns it to the ClusterName field.
func (o *AlertInfo) SetClusterName(v string) {
	o.ClusterName.Set(&v)
}
// SetClusterNameNil sets the value for ClusterName to be an explicit nil
func (o *AlertInfo) SetClusterNameNil() {
	o.ClusterName.Set(nil)
}

// UnsetClusterName ensures that no value is present for ClusterName, not even an explicit nil
func (o *AlertInfo) UnsetClusterName() {
	o.ClusterName.Unset()
}

// GetDedupCount returns the DedupCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetDedupCount() int32 {
	if o == nil || IsNil(o.DedupCount.Get()) {
		var ret int32
		return ret
	}
	return *o.DedupCount.Get()
}

// GetDedupCountOk returns a tuple with the DedupCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetDedupCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DedupCount.Get(), o.DedupCount.IsSet()
}

// HasDedupCount returns a boolean if a field has been set.
func (o *AlertInfo) HasDedupCount() bool {
	if o != nil && o.DedupCount.IsSet() {
		return true
	}

	return false
}

// SetDedupCount gets a reference to the given NullableInt32 and assigns it to the DedupCount field.
func (o *AlertInfo) SetDedupCount(v int32) {
	o.DedupCount.Set(&v)
}
// SetDedupCountNil sets the value for DedupCount to be an explicit nil
func (o *AlertInfo) SetDedupCountNil() {
	o.DedupCount.Set(nil)
}

// UnsetDedupCount ensures that no value is present for DedupCount, not even an explicit nil
func (o *AlertInfo) UnsetDedupCount() {
	o.DedupCount.Unset()
}

// GetDedupTimestamps returns the DedupTimestamps field value if set, zero value otherwise.
func (o *AlertInfo) GetDedupTimestamps() []int64 {
	if o == nil || IsNil(o.DedupTimestamps) {
		var ret []int64
		return ret
	}
	return o.DedupTimestamps
}

// GetDedupTimestampsOk returns a tuple with the DedupTimestamps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfo) GetDedupTimestampsOk() ([]int64, bool) {
	if o == nil || IsNil(o.DedupTimestamps) {
		return nil, false
	}
	return o.DedupTimestamps, true
}

// HasDedupTimestamps returns a boolean if a field has been set.
func (o *AlertInfo) HasDedupTimestamps() bool {
	if o != nil && !IsNil(o.DedupTimestamps) {
		return true
	}

	return false
}

// SetDedupTimestamps gets a reference to the given []int64 and assigns it to the DedupTimestamps field.
func (o *AlertInfo) SetDedupTimestamps(v []int64) {
	o.DedupTimestamps = v
}

// GetEventSource returns the EventSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetEventSource() string {
	if o == nil || IsNil(o.EventSource.Get()) {
		var ret string
		return ret
	}
	return *o.EventSource.Get()
}

// GetEventSourceOk returns a tuple with the EventSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetEventSourceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventSource.Get(), o.EventSource.IsSet()
}

// HasEventSource returns a boolean if a field has been set.
func (o *AlertInfo) HasEventSource() bool {
	if o != nil && o.EventSource.IsSet() {
		return true
	}

	return false
}

// SetEventSource gets a reference to the given NullableString and assigns it to the EventSource field.
func (o *AlertInfo) SetEventSource(v string) {
	o.EventSource.Set(&v)
}
// SetEventSourceNil sets the value for EventSource to be an explicit nil
func (o *AlertInfo) SetEventSourceNil() {
	o.EventSource.Set(nil)
}

// UnsetEventSource ensures that no value is present for EventSource, not even an explicit nil
func (o *AlertInfo) UnsetEventSource() {
	o.EventSource.Unset()
}

// GetFirstTimestampUsecs returns the FirstTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetFirstTimestampUsecs() int64 {
	if o == nil || IsNil(o.FirstTimestampUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.FirstTimestampUsecs.Get()
}

// GetFirstTimestampUsecsOk returns a tuple with the FirstTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetFirstTimestampUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FirstTimestampUsecs.Get(), o.FirstTimestampUsecs.IsSet()
}

// HasFirstTimestampUsecs returns a boolean if a field has been set.
func (o *AlertInfo) HasFirstTimestampUsecs() bool {
	if o != nil && o.FirstTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetFirstTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the FirstTimestampUsecs field.
func (o *AlertInfo) SetFirstTimestampUsecs(v int64) {
	o.FirstTimestampUsecs.Set(&v)
}
// SetFirstTimestampUsecsNil sets the value for FirstTimestampUsecs to be an explicit nil
func (o *AlertInfo) SetFirstTimestampUsecsNil() {
	o.FirstTimestampUsecs.Set(nil)
}

// UnsetFirstTimestampUsecs ensures that no value is present for FirstTimestampUsecs, not even an explicit nil
func (o *AlertInfo) UnsetFirstTimestampUsecs() {
	o.FirstTimestampUsecs.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *AlertInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *AlertInfo) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *AlertInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *AlertInfo) UnsetId() {
	o.Id.Unset()
}

// GetLabelIds returns the LabelIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetLabelIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.LabelIds
}

// GetLabelIdsOk returns a tuple with the LabelIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetLabelIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.LabelIds) {
		return nil, false
	}
	return o.LabelIds, true
}

// HasLabelIds returns a boolean if a field has been set.
func (o *AlertInfo) HasLabelIds() bool {
	if o != nil && !IsNil(o.LabelIds) {
		return true
	}

	return false
}

// SetLabelIds gets a reference to the given []string and assigns it to the LabelIds field.
func (o *AlertInfo) SetLabelIds(v []string) {
	o.LabelIds = v
}

// GetLatestTimestampUsecs returns the LatestTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetLatestTimestampUsecs() int64 {
	if o == nil || IsNil(o.LatestTimestampUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.LatestTimestampUsecs.Get()
}

// GetLatestTimestampUsecsOk returns a tuple with the LatestTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetLatestTimestampUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LatestTimestampUsecs.Get(), o.LatestTimestampUsecs.IsSet()
}

// HasLatestTimestampUsecs returns a boolean if a field has been set.
func (o *AlertInfo) HasLatestTimestampUsecs() bool {
	if o != nil && o.LatestTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetLatestTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the LatestTimestampUsecs field.
func (o *AlertInfo) SetLatestTimestampUsecs(v int64) {
	o.LatestTimestampUsecs.Set(&v)
}
// SetLatestTimestampUsecsNil sets the value for LatestTimestampUsecs to be an explicit nil
func (o *AlertInfo) SetLatestTimestampUsecsNil() {
	o.LatestTimestampUsecs.Set(nil)
}

// UnsetLatestTimestampUsecs ensures that no value is present for LatestTimestampUsecs, not even an explicit nil
func (o *AlertInfo) UnsetLatestTimestampUsecs() {
	o.LatestTimestampUsecs.Unset()
}

// GetPropertyList returns the PropertyList field value if set, zero value otherwise.
func (o *AlertInfo) GetPropertyList() []Label {
	if o == nil || IsNil(o.PropertyList) {
		var ret []Label
		return ret
	}
	return o.PropertyList
}

// GetPropertyListOk returns a tuple with the PropertyList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfo) GetPropertyListOk() ([]Label, bool) {
	if o == nil || IsNil(o.PropertyList) {
		return nil, false
	}
	return o.PropertyList, true
}

// HasPropertyList returns a boolean if a field has been set.
func (o *AlertInfo) HasPropertyList() bool {
	if o != nil && !IsNil(o.PropertyList) {
		return true
	}

	return false
}

// SetPropertyList gets a reference to the given []Label and assigns it to the PropertyList field.
func (o *AlertInfo) SetPropertyList(v []Label) {
	o.PropertyList = v
}

// GetRegionId returns the RegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetRegionId() string {
	if o == nil || IsNil(o.RegionId.Get()) {
		var ret string
		return ret
	}
	return *o.RegionId.Get()
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegionId.Get(), o.RegionId.IsSet()
}

// HasRegionId returns a boolean if a field has been set.
func (o *AlertInfo) HasRegionId() bool {
	if o != nil && o.RegionId.IsSet() {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given NullableString and assigns it to the RegionId field.
func (o *AlertInfo) SetRegionId(v string) {
	o.RegionId.Set(&v)
}
// SetRegionIdNil sets the value for RegionId to be an explicit nil
func (o *AlertInfo) SetRegionIdNil() {
	o.RegionId.Set(nil)
}

// UnsetRegionId ensures that no value is present for RegionId, not even an explicit nil
func (o *AlertInfo) UnsetRegionId() {
	o.RegionId.Unset()
}

// GetResolutionDetails returns the ResolutionDetails field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetResolutionDetails() AlertResolutionDetails {
	if o == nil || IsNil(o.ResolutionDetails.Get()) {
		var ret AlertResolutionDetails
		return ret
	}
	return *o.ResolutionDetails.Get()
}

// GetResolutionDetailsOk returns a tuple with the ResolutionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetResolutionDetailsOk() (*AlertResolutionDetails, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionDetails.Get(), o.ResolutionDetails.IsSet()
}

// HasResolutionDetails returns a boolean if a field has been set.
func (o *AlertInfo) HasResolutionDetails() bool {
	if o != nil && o.ResolutionDetails.IsSet() {
		return true
	}

	return false
}

// SetResolutionDetails gets a reference to the given NullableAlertResolutionDetails and assigns it to the ResolutionDetails field.
func (o *AlertInfo) SetResolutionDetails(v AlertResolutionDetails) {
	o.ResolutionDetails.Set(&v)
}
// SetResolutionDetailsNil sets the value for ResolutionDetails to be an explicit nil
func (o *AlertInfo) SetResolutionDetailsNil() {
	o.ResolutionDetails.Set(nil)
}

// UnsetResolutionDetails ensures that no value is present for ResolutionDetails, not even an explicit nil
func (o *AlertInfo) UnsetResolutionDetails() {
	o.ResolutionDetails.Unset()
}

// GetResolutionIdString returns the ResolutionIdString field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetResolutionIdString() string {
	if o == nil || IsNil(o.ResolutionIdString.Get()) {
		var ret string
		return ret
	}
	return *o.ResolutionIdString.Get()
}

// GetResolutionIdStringOk returns a tuple with the ResolutionIdString field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetResolutionIdStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolutionIdString.Get(), o.ResolutionIdString.IsSet()
}

// HasResolutionIdString returns a boolean if a field has been set.
func (o *AlertInfo) HasResolutionIdString() bool {
	if o != nil && o.ResolutionIdString.IsSet() {
		return true
	}

	return false
}

// SetResolutionIdString gets a reference to the given NullableString and assigns it to the ResolutionIdString field.
func (o *AlertInfo) SetResolutionIdString(v string) {
	o.ResolutionIdString.Set(&v)
}
// SetResolutionIdStringNil sets the value for ResolutionIdString to be an explicit nil
func (o *AlertInfo) SetResolutionIdStringNil() {
	o.ResolutionIdString.Set(nil)
}

// UnsetResolutionIdString ensures that no value is present for ResolutionIdString, not even an explicit nil
func (o *AlertInfo) UnsetResolutionIdString() {
	o.ResolutionIdString.Unset()
}

// GetResolvedTimestampUsecs returns the ResolvedTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetResolvedTimestampUsecs() int64 {
	if o == nil || IsNil(o.ResolvedTimestampUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.ResolvedTimestampUsecs.Get()
}

// GetResolvedTimestampUsecsOk returns a tuple with the ResolvedTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetResolvedTimestampUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResolvedTimestampUsecs.Get(), o.ResolvedTimestampUsecs.IsSet()
}

// HasResolvedTimestampUsecs returns a boolean if a field has been set.
func (o *AlertInfo) HasResolvedTimestampUsecs() bool {
	if o != nil && o.ResolvedTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetResolvedTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the ResolvedTimestampUsecs field.
func (o *AlertInfo) SetResolvedTimestampUsecs(v int64) {
	o.ResolvedTimestampUsecs.Set(&v)
}
// SetResolvedTimestampUsecsNil sets the value for ResolvedTimestampUsecs to be an explicit nil
func (o *AlertInfo) SetResolvedTimestampUsecsNil() {
	o.ResolvedTimestampUsecs.Set(nil)
}

// UnsetResolvedTimestampUsecs ensures that no value is present for ResolvedTimestampUsecs, not even an explicit nil
func (o *AlertInfo) UnsetResolvedTimestampUsecs() {
	o.ResolvedTimestampUsecs.Unset()
}

// GetSeverity returns the Severity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetSeverity() string {
	if o == nil || IsNil(o.Severity.Get()) {
		var ret string
		return ret
	}
	return *o.Severity.Get()
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetSeverityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Severity.Get(), o.Severity.IsSet()
}

// HasSeverity returns a boolean if a field has been set.
func (o *AlertInfo) HasSeverity() bool {
	if o != nil && o.Severity.IsSet() {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given NullableString and assigns it to the Severity field.
func (o *AlertInfo) SetSeverity(v string) {
	o.Severity.Set(&v)
}
// SetSeverityNil sets the value for Severity to be an explicit nil
func (o *AlertInfo) SetSeverityNil() {
	o.Severity.Set(nil)
}

// UnsetSeverity ensures that no value is present for Severity, not even an explicit nil
func (o *AlertInfo) UnsetSeverity() {
	o.Severity.Unset()
}

// GetSuppressionId returns the SuppressionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetSuppressionId() int64 {
	if o == nil || IsNil(o.SuppressionId.Get()) {
		var ret int64
		return ret
	}
	return *o.SuppressionId.Get()
}

// GetSuppressionIdOk returns a tuple with the SuppressionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetSuppressionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuppressionId.Get(), o.SuppressionId.IsSet()
}

// HasSuppressionId returns a boolean if a field has been set.
func (o *AlertInfo) HasSuppressionId() bool {
	if o != nil && o.SuppressionId.IsSet() {
		return true
	}

	return false
}

// SetSuppressionId gets a reference to the given NullableInt64 and assigns it to the SuppressionId field.
func (o *AlertInfo) SetSuppressionId(v int64) {
	o.SuppressionId.Set(&v)
}
// SetSuppressionIdNil sets the value for SuppressionId to be an explicit nil
func (o *AlertInfo) SetSuppressionIdNil() {
	o.SuppressionId.Set(nil)
}

// UnsetSuppressionId ensures that no value is present for SuppressionId, not even an explicit nil
func (o *AlertInfo) UnsetSuppressionId() {
	o.SuppressionId.Unset()
}

// GetTenantIds returns the TenantIds field value if set, zero value otherwise.
func (o *AlertInfo) GetTenantIds() []string {
	if o == nil || IsNil(o.TenantIds) {
		var ret []string
		return ret
	}
	return o.TenantIds
}

// GetTenantIdsOk returns a tuple with the TenantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AlertInfo) GetTenantIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIds) {
		return nil, false
	}
	return o.TenantIds, true
}

// HasTenantIds returns a boolean if a field has been set.
func (o *AlertInfo) HasTenantIds() bool {
	if o != nil && !IsNil(o.TenantIds) {
		return true
	}

	return false
}

// SetTenantIds gets a reference to the given []string and assigns it to the TenantIds field.
func (o *AlertInfo) SetTenantIds(v []string) {
	o.TenantIds = v
}

// GetVaults returns the Vaults field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AlertInfo) GetVaults() []Vault {
	if o == nil {
		var ret []Vault
		return ret
	}
	return o.Vaults
}

// GetVaultsOk returns a tuple with the Vaults field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AlertInfo) GetVaultsOk() ([]Vault, bool) {
	if o == nil || IsNil(o.Vaults) {
		return nil, false
	}
	return o.Vaults, true
}

// HasVaults returns a boolean if a field has been set.
func (o *AlertInfo) HasVaults() bool {
	if o != nil && !IsNil(o.Vaults) {
		return true
	}

	return false
}

// SetVaults gets a reference to the given []Vault and assigns it to the Vaults field.
func (o *AlertInfo) SetVaults(v []Vault) {
	o.Vaults = v
}

func (o AlertInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AlertInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AlertCategory.IsSet() {
		toSerialize["alertCategory"] = o.AlertCategory.Get()
	}
	if o.AlertCode.IsSet() {
		toSerialize["alertCode"] = o.AlertCode.Get()
	}
	if !IsNil(o.AlertDocument) {
		toSerialize["alertDocument"] = o.AlertDocument
	}
	if o.AlertState.IsSet() {
		toSerialize["alertState"] = o.AlertState.Get()
	}
	if o.AlertType.IsSet() {
		toSerialize["alertType"] = o.AlertType.Get()
	}
	if o.AlertTypeBucket.IsSet() {
		toSerialize["alertTypeBucket"] = o.AlertTypeBucket.Get()
	}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterName.IsSet() {
		toSerialize["clusterName"] = o.ClusterName.Get()
	}
	if o.DedupCount.IsSet() {
		toSerialize["dedupCount"] = o.DedupCount.Get()
	}
	if !IsNil(o.DedupTimestamps) {
		toSerialize["dedupTimestamps"] = o.DedupTimestamps
	}
	if o.EventSource.IsSet() {
		toSerialize["eventSource"] = o.EventSource.Get()
	}
	if o.FirstTimestampUsecs.IsSet() {
		toSerialize["firstTimestampUsecs"] = o.FirstTimestampUsecs.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.LabelIds != nil {
		toSerialize["labelIds"] = o.LabelIds
	}
	if o.LatestTimestampUsecs.IsSet() {
		toSerialize["latestTimestampUsecs"] = o.LatestTimestampUsecs.Get()
	}
	if !IsNil(o.PropertyList) {
		toSerialize["propertyList"] = o.PropertyList
	}
	if o.RegionId.IsSet() {
		toSerialize["regionId"] = o.RegionId.Get()
	}
	if o.ResolutionDetails.IsSet() {
		toSerialize["resolutionDetails"] = o.ResolutionDetails.Get()
	}
	if o.ResolutionIdString.IsSet() {
		toSerialize["resolutionIdString"] = o.ResolutionIdString.Get()
	}
	if o.ResolvedTimestampUsecs.IsSet() {
		toSerialize["resolvedTimestampUsecs"] = o.ResolvedTimestampUsecs.Get()
	}
	if o.Severity.IsSet() {
		toSerialize["severity"] = o.Severity.Get()
	}
	if o.SuppressionId.IsSet() {
		toSerialize["suppressionId"] = o.SuppressionId.Get()
	}
	if !IsNil(o.TenantIds) {
		toSerialize["tenantIds"] = o.TenantIds
	}
	if o.Vaults != nil {
		toSerialize["vaults"] = o.Vaults
	}
	return toSerialize, nil
}

type NullableAlertInfo struct {
	value *AlertInfo
	isSet bool
}

func (v NullableAlertInfo) Get() *AlertInfo {
	return v.value
}

func (v *NullableAlertInfo) Set(val *AlertInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertInfo(val *AlertInfo) *NullableAlertInfo {
	return &NullableAlertInfo{value: val, isSet: true}
}

func (v NullableAlertInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


