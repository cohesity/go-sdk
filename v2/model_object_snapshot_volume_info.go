/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ObjectSnapshotVolumeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectSnapshotVolumeInfo{}

// ObjectSnapshotVolumeInfo Detail info of an object snapshot volume.
type ObjectSnapshotVolumeInfo struct {
	// Specifies a list of volume info.
	Volumes []VolumeInfo `json:"volumes,omitempty"`
}

// NewObjectSnapshotVolumeInfo instantiates a new ObjectSnapshotVolumeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectSnapshotVolumeInfo() *ObjectSnapshotVolumeInfo {
	this := ObjectSnapshotVolumeInfo{}
	return &this
}

// NewObjectSnapshotVolumeInfoWithDefaults instantiates a new ObjectSnapshotVolumeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectSnapshotVolumeInfoWithDefaults() *ObjectSnapshotVolumeInfo {
	this := ObjectSnapshotVolumeInfo{}
	return &this
}

// GetVolumes returns the Volumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshotVolumeInfo) GetVolumes() []VolumeInfo {
	if o == nil {
		var ret []VolumeInfo
		return ret
	}
	return o.Volumes
}

// GetVolumesOk returns a tuple with the Volumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshotVolumeInfo) GetVolumesOk() ([]VolumeInfo, bool) {
	if o == nil || IsNil(o.Volumes) {
		return nil, false
	}
	return o.Volumes, true
}

// HasVolumes returns a boolean if a field has been set.
func (o *ObjectSnapshotVolumeInfo) HasVolumes() bool {
	if o != nil && !IsNil(o.Volumes) {
		return true
	}

	return false
}

// SetVolumes gets a reference to the given []VolumeInfo and assigns it to the Volumes field.
func (o *ObjectSnapshotVolumeInfo) SetVolumes(v []VolumeInfo) {
	o.Volumes = v
}

func (o ObjectSnapshotVolumeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectSnapshotVolumeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Volumes != nil {
		toSerialize["volumes"] = o.Volumes
	}
	return toSerialize, nil
}

type NullableObjectSnapshotVolumeInfo struct {
	value *ObjectSnapshotVolumeInfo
	isSet bool
}

func (v NullableObjectSnapshotVolumeInfo) Get() *ObjectSnapshotVolumeInfo {
	return v.value
}

func (v *NullableObjectSnapshotVolumeInfo) Set(val *ObjectSnapshotVolumeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectSnapshotVolumeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectSnapshotVolumeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectSnapshotVolumeInfo(val *ObjectSnapshotVolumeInfo) *NullableObjectSnapshotVolumeInfo {
	return &NullableObjectSnapshotVolumeInfo{value: val, isSet: true}
}

func (v NullableObjectSnapshotVolumeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectSnapshotVolumeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


