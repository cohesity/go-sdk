/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the S3CompatibleArchivalStorageClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3CompatibleArchivalStorageClass{}

// S3CompatibleArchivalStorageClass Specifies the storage class of S3Compatible Target of archival purpose type.
type S3CompatibleArchivalStorageClass struct {
	// Specifies the storage class of S3Compatible External Target of archival purpose type.
	Enum *string `json:"enum,omitempty"`
}

// NewS3CompatibleArchivalStorageClass instantiates a new S3CompatibleArchivalStorageClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3CompatibleArchivalStorageClass() *S3CompatibleArchivalStorageClass {
	this := S3CompatibleArchivalStorageClass{}
	return &this
}

// NewS3CompatibleArchivalStorageClassWithDefaults instantiates a new S3CompatibleArchivalStorageClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3CompatibleArchivalStorageClassWithDefaults() *S3CompatibleArchivalStorageClass {
	this := S3CompatibleArchivalStorageClass{}
	return &this
}

// GetEnum returns the Enum field value if set, zero value otherwise.
func (o *S3CompatibleArchivalStorageClass) GetEnum() string {
	if o == nil || IsNil(o.Enum) {
		var ret string
		return ret
	}
	return *o.Enum
}

// GetEnumOk returns a tuple with the Enum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3CompatibleArchivalStorageClass) GetEnumOk() (*string, bool) {
	if o == nil || IsNil(o.Enum) {
		return nil, false
	}
	return o.Enum, true
}

// HasEnum returns a boolean if a field has been set.
func (o *S3CompatibleArchivalStorageClass) HasEnum() bool {
	if o != nil && !IsNil(o.Enum) {
		return true
	}

	return false
}

// SetEnum gets a reference to the given string and assigns it to the Enum field.
func (o *S3CompatibleArchivalStorageClass) SetEnum(v string) {
	o.Enum = &v
}

func (o S3CompatibleArchivalStorageClass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3CompatibleArchivalStorageClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enum) {
		toSerialize["enum"] = o.Enum
	}
	return toSerialize, nil
}

type NullableS3CompatibleArchivalStorageClass struct {
	value *S3CompatibleArchivalStorageClass
	isSet bool
}

func (v NullableS3CompatibleArchivalStorageClass) Get() *S3CompatibleArchivalStorageClass {
	return v.value
}

func (v *NullableS3CompatibleArchivalStorageClass) Set(val *S3CompatibleArchivalStorageClass) {
	v.value = val
	v.isSet = true
}

func (v NullableS3CompatibleArchivalStorageClass) IsSet() bool {
	return v.isSet
}

func (v *NullableS3CompatibleArchivalStorageClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3CompatibleArchivalStorageClass(val *S3CompatibleArchivalStorageClass) *NullableS3CompatibleArchivalStorageClass {
	return &NullableS3CompatibleArchivalStorageClass{value: val, isSet: true}
}

func (v NullableS3CompatibleArchivalStorageClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3CompatibleArchivalStorageClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


