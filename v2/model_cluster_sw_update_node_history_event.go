/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClusterSWUpdateNodeHistoryEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterSWUpdateNodeHistoryEvent{}

// ClusterSWUpdateNodeHistoryEvent Represents an event of node upgrade/patch
type ClusterSWUpdateNodeHistoryEvent struct {
	// Unix epoch timestamp (in seconds) when the upgrade/patch was done on the node. 
	EventTimestampSecs NullableInt64 `json:"eventTimestampSecs,omitempty"`
	// Node id of the node.
	NodeId *int64 `json:"nodeId,omitempty"`
}

// NewClusterSWUpdateNodeHistoryEvent instantiates a new ClusterSWUpdateNodeHistoryEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterSWUpdateNodeHistoryEvent() *ClusterSWUpdateNodeHistoryEvent {
	this := ClusterSWUpdateNodeHistoryEvent{}
	return &this
}

// NewClusterSWUpdateNodeHistoryEventWithDefaults instantiates a new ClusterSWUpdateNodeHistoryEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterSWUpdateNodeHistoryEventWithDefaults() *ClusterSWUpdateNodeHistoryEvent {
	this := ClusterSWUpdateNodeHistoryEvent{}
	return &this
}

// GetEventTimestampSecs returns the EventTimestampSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterSWUpdateNodeHistoryEvent) GetEventTimestampSecs() int64 {
	if o == nil || IsNil(o.EventTimestampSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.EventTimestampSecs.Get()
}

// GetEventTimestampSecsOk returns a tuple with the EventTimestampSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterSWUpdateNodeHistoryEvent) GetEventTimestampSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTimestampSecs.Get(), o.EventTimestampSecs.IsSet()
}

// HasEventTimestampSecs returns a boolean if a field has been set.
func (o *ClusterSWUpdateNodeHistoryEvent) HasEventTimestampSecs() bool {
	if o != nil && o.EventTimestampSecs.IsSet() {
		return true
	}

	return false
}

// SetEventTimestampSecs gets a reference to the given NullableInt64 and assigns it to the EventTimestampSecs field.
func (o *ClusterSWUpdateNodeHistoryEvent) SetEventTimestampSecs(v int64) {
	o.EventTimestampSecs.Set(&v)
}
// SetEventTimestampSecsNil sets the value for EventTimestampSecs to be an explicit nil
func (o *ClusterSWUpdateNodeHistoryEvent) SetEventTimestampSecsNil() {
	o.EventTimestampSecs.Set(nil)
}

// UnsetEventTimestampSecs ensures that no value is present for EventTimestampSecs, not even an explicit nil
func (o *ClusterSWUpdateNodeHistoryEvent) UnsetEventTimestampSecs() {
	o.EventTimestampSecs.Unset()
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *ClusterSWUpdateNodeHistoryEvent) GetNodeId() int64 {
	if o == nil || IsNil(o.NodeId) {
		var ret int64
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSWUpdateNodeHistoryEvent) GetNodeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *ClusterSWUpdateNodeHistoryEvent) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given int64 and assigns it to the NodeId field.
func (o *ClusterSWUpdateNodeHistoryEvent) SetNodeId(v int64) {
	o.NodeId = &v
}

func (o ClusterSWUpdateNodeHistoryEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterSWUpdateNodeHistoryEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EventTimestampSecs.IsSet() {
		toSerialize["eventTimestampSecs"] = o.EventTimestampSecs.Get()
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	return toSerialize, nil
}

type NullableClusterSWUpdateNodeHistoryEvent struct {
	value *ClusterSWUpdateNodeHistoryEvent
	isSet bool
}

func (v NullableClusterSWUpdateNodeHistoryEvent) Get() *ClusterSWUpdateNodeHistoryEvent {
	return v.value
}

func (v *NullableClusterSWUpdateNodeHistoryEvent) Set(val *ClusterSWUpdateNodeHistoryEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterSWUpdateNodeHistoryEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterSWUpdateNodeHistoryEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterSWUpdateNodeHistoryEvent(val *ClusterSWUpdateNodeHistoryEvent) *NullableClusterSWUpdateNodeHistoryEvent {
	return &NullableClusterSWUpdateNodeHistoryEvent{value: val, isSet: true}
}

func (v NullableClusterSWUpdateNodeHistoryEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterSWUpdateNodeHistoryEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


