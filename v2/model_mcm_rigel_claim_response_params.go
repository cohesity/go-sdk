/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the McmRigelClaimResponseParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &McmRigelClaimResponseParams{}

// McmRigelClaimResponseParams Specifies the response of claiming a Rigel to Helios.
type McmRigelClaimResponseParams struct {
	// Connection id for rigel instance.
	ConnectionId NullableInt64 `json:"connectionId,omitempty"`
	// Endpoint for associated data plane.
	DataplaneEndpoint NullableString `json:"dataplaneEndpoint,omitempty"`
	// Specifies the Helios certificate that can be used to authenticate api calls made from Helios to Rigel.
	HeliosCertificate NullableString `json:"heliosCertificate,omitempty"`
	// Specifies the region id of the Rigel cluster.
	RegionId NullableString `json:"regionId,omitempty"`
	// Specifies the CA chain that is used to sign the Rigel certificate.
	RigelCaChain NullableString `json:"rigelCaChain,omitempty"`
	// Specifies the Rigel certificate.
	RigelCertificate NullableString `json:"rigelCertificate,omitempty"`
	// Unique id for rigel instance.
	RigelGuid NullableInt64 `json:"rigelGuid,omitempty"`
	// Specifies the Rigel private key.
	RigelPrivateKey NullableString `json:"rigelPrivateKey,omitempty"`
	// Specifies the Rigel type that is being claimed.
	RigelType NullableString `json:"rigelType,omitempty"`
	// Specifies the Rigel use case.
	RigelUseCase NullableString `json:"rigelUseCase,omitempty"`
	// Specifies the Tenant CA chain.
	TenantCaChain []*string `json:"tenantCaChain,omitempty"`
	// Tenant id associated with the claimed rigel.
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewMcmRigelClaimResponseParams instantiates a new McmRigelClaimResponseParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmRigelClaimResponseParams() *McmRigelClaimResponseParams {
	this := McmRigelClaimResponseParams{}
	return &this
}

// NewMcmRigelClaimResponseParamsWithDefaults instantiates a new McmRigelClaimResponseParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmRigelClaimResponseParamsWithDefaults() *McmRigelClaimResponseParams {
	this := McmRigelClaimResponseParams{}
	return &this
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetConnectionId() int64 {
	if o == nil || IsNil(o.ConnectionId.Get()) {
		var ret int64
		return ret
	}
	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetConnectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// HasConnectionId returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasConnectionId() bool {
	if o != nil && o.ConnectionId.IsSet() {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given NullableInt64 and assigns it to the ConnectionId field.
func (o *McmRigelClaimResponseParams) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}
// SetConnectionIdNil sets the value for ConnectionId to be an explicit nil
func (o *McmRigelClaimResponseParams) SetConnectionIdNil() {
	o.ConnectionId.Set(nil)
}

// UnsetConnectionId ensures that no value is present for ConnectionId, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetConnectionId() {
	o.ConnectionId.Unset()
}

// GetDataplaneEndpoint returns the DataplaneEndpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetDataplaneEndpoint() string {
	if o == nil || IsNil(o.DataplaneEndpoint.Get()) {
		var ret string
		return ret
	}
	return *o.DataplaneEndpoint.Get()
}

// GetDataplaneEndpointOk returns a tuple with the DataplaneEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetDataplaneEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataplaneEndpoint.Get(), o.DataplaneEndpoint.IsSet()
}

// HasDataplaneEndpoint returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasDataplaneEndpoint() bool {
	if o != nil && o.DataplaneEndpoint.IsSet() {
		return true
	}

	return false
}

// SetDataplaneEndpoint gets a reference to the given NullableString and assigns it to the DataplaneEndpoint field.
func (o *McmRigelClaimResponseParams) SetDataplaneEndpoint(v string) {
	o.DataplaneEndpoint.Set(&v)
}
// SetDataplaneEndpointNil sets the value for DataplaneEndpoint to be an explicit nil
func (o *McmRigelClaimResponseParams) SetDataplaneEndpointNil() {
	o.DataplaneEndpoint.Set(nil)
}

// UnsetDataplaneEndpoint ensures that no value is present for DataplaneEndpoint, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetDataplaneEndpoint() {
	o.DataplaneEndpoint.Unset()
}

// GetHeliosCertificate returns the HeliosCertificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetHeliosCertificate() string {
	if o == nil || IsNil(o.HeliosCertificate.Get()) {
		var ret string
		return ret
	}
	return *o.HeliosCertificate.Get()
}

// GetHeliosCertificateOk returns a tuple with the HeliosCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetHeliosCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HeliosCertificate.Get(), o.HeliosCertificate.IsSet()
}

// HasHeliosCertificate returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasHeliosCertificate() bool {
	if o != nil && o.HeliosCertificate.IsSet() {
		return true
	}

	return false
}

// SetHeliosCertificate gets a reference to the given NullableString and assigns it to the HeliosCertificate field.
func (o *McmRigelClaimResponseParams) SetHeliosCertificate(v string) {
	o.HeliosCertificate.Set(&v)
}
// SetHeliosCertificateNil sets the value for HeliosCertificate to be an explicit nil
func (o *McmRigelClaimResponseParams) SetHeliosCertificateNil() {
	o.HeliosCertificate.Set(nil)
}

// UnsetHeliosCertificate ensures that no value is present for HeliosCertificate, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetHeliosCertificate() {
	o.HeliosCertificate.Unset()
}

// GetRegionId returns the RegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetRegionId() string {
	if o == nil || IsNil(o.RegionId.Get()) {
		var ret string
		return ret
	}
	return *o.RegionId.Get()
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetRegionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegionId.Get(), o.RegionId.IsSet()
}

// HasRegionId returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasRegionId() bool {
	if o != nil && o.RegionId.IsSet() {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given NullableString and assigns it to the RegionId field.
func (o *McmRigelClaimResponseParams) SetRegionId(v string) {
	o.RegionId.Set(&v)
}
// SetRegionIdNil sets the value for RegionId to be an explicit nil
func (o *McmRigelClaimResponseParams) SetRegionIdNil() {
	o.RegionId.Set(nil)
}

// UnsetRegionId ensures that no value is present for RegionId, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetRegionId() {
	o.RegionId.Unset()
}

// GetRigelCaChain returns the RigelCaChain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetRigelCaChain() string {
	if o == nil || IsNil(o.RigelCaChain.Get()) {
		var ret string
		return ret
	}
	return *o.RigelCaChain.Get()
}

// GetRigelCaChainOk returns a tuple with the RigelCaChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetRigelCaChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RigelCaChain.Get(), o.RigelCaChain.IsSet()
}

// HasRigelCaChain returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasRigelCaChain() bool {
	if o != nil && o.RigelCaChain.IsSet() {
		return true
	}

	return false
}

// SetRigelCaChain gets a reference to the given NullableString and assigns it to the RigelCaChain field.
func (o *McmRigelClaimResponseParams) SetRigelCaChain(v string) {
	o.RigelCaChain.Set(&v)
}
// SetRigelCaChainNil sets the value for RigelCaChain to be an explicit nil
func (o *McmRigelClaimResponseParams) SetRigelCaChainNil() {
	o.RigelCaChain.Set(nil)
}

// UnsetRigelCaChain ensures that no value is present for RigelCaChain, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetRigelCaChain() {
	o.RigelCaChain.Unset()
}

// GetRigelCertificate returns the RigelCertificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetRigelCertificate() string {
	if o == nil || IsNil(o.RigelCertificate.Get()) {
		var ret string
		return ret
	}
	return *o.RigelCertificate.Get()
}

// GetRigelCertificateOk returns a tuple with the RigelCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetRigelCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RigelCertificate.Get(), o.RigelCertificate.IsSet()
}

// HasRigelCertificate returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasRigelCertificate() bool {
	if o != nil && o.RigelCertificate.IsSet() {
		return true
	}

	return false
}

// SetRigelCertificate gets a reference to the given NullableString and assigns it to the RigelCertificate field.
func (o *McmRigelClaimResponseParams) SetRigelCertificate(v string) {
	o.RigelCertificate.Set(&v)
}
// SetRigelCertificateNil sets the value for RigelCertificate to be an explicit nil
func (o *McmRigelClaimResponseParams) SetRigelCertificateNil() {
	o.RigelCertificate.Set(nil)
}

// UnsetRigelCertificate ensures that no value is present for RigelCertificate, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetRigelCertificate() {
	o.RigelCertificate.Unset()
}

// GetRigelGuid returns the RigelGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetRigelGuid() int64 {
	if o == nil || IsNil(o.RigelGuid.Get()) {
		var ret int64
		return ret
	}
	return *o.RigelGuid.Get()
}

// GetRigelGuidOk returns a tuple with the RigelGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetRigelGuidOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RigelGuid.Get(), o.RigelGuid.IsSet()
}

// HasRigelGuid returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasRigelGuid() bool {
	if o != nil && o.RigelGuid.IsSet() {
		return true
	}

	return false
}

// SetRigelGuid gets a reference to the given NullableInt64 and assigns it to the RigelGuid field.
func (o *McmRigelClaimResponseParams) SetRigelGuid(v int64) {
	o.RigelGuid.Set(&v)
}
// SetRigelGuidNil sets the value for RigelGuid to be an explicit nil
func (o *McmRigelClaimResponseParams) SetRigelGuidNil() {
	o.RigelGuid.Set(nil)
}

// UnsetRigelGuid ensures that no value is present for RigelGuid, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetRigelGuid() {
	o.RigelGuid.Unset()
}

// GetRigelPrivateKey returns the RigelPrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetRigelPrivateKey() string {
	if o == nil || IsNil(o.RigelPrivateKey.Get()) {
		var ret string
		return ret
	}
	return *o.RigelPrivateKey.Get()
}

// GetRigelPrivateKeyOk returns a tuple with the RigelPrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetRigelPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RigelPrivateKey.Get(), o.RigelPrivateKey.IsSet()
}

// HasRigelPrivateKey returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasRigelPrivateKey() bool {
	if o != nil && o.RigelPrivateKey.IsSet() {
		return true
	}

	return false
}

// SetRigelPrivateKey gets a reference to the given NullableString and assigns it to the RigelPrivateKey field.
func (o *McmRigelClaimResponseParams) SetRigelPrivateKey(v string) {
	o.RigelPrivateKey.Set(&v)
}
// SetRigelPrivateKeyNil sets the value for RigelPrivateKey to be an explicit nil
func (o *McmRigelClaimResponseParams) SetRigelPrivateKeyNil() {
	o.RigelPrivateKey.Set(nil)
}

// UnsetRigelPrivateKey ensures that no value is present for RigelPrivateKey, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetRigelPrivateKey() {
	o.RigelPrivateKey.Unset()
}

// GetRigelType returns the RigelType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetRigelType() string {
	if o == nil || IsNil(o.RigelType.Get()) {
		var ret string
		return ret
	}
	return *o.RigelType.Get()
}

// GetRigelTypeOk returns a tuple with the RigelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetRigelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RigelType.Get(), o.RigelType.IsSet()
}

// HasRigelType returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasRigelType() bool {
	if o != nil && o.RigelType.IsSet() {
		return true
	}

	return false
}

// SetRigelType gets a reference to the given NullableString and assigns it to the RigelType field.
func (o *McmRigelClaimResponseParams) SetRigelType(v string) {
	o.RigelType.Set(&v)
}
// SetRigelTypeNil sets the value for RigelType to be an explicit nil
func (o *McmRigelClaimResponseParams) SetRigelTypeNil() {
	o.RigelType.Set(nil)
}

// UnsetRigelType ensures that no value is present for RigelType, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetRigelType() {
	o.RigelType.Unset()
}

// GetRigelUseCase returns the RigelUseCase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetRigelUseCase() string {
	if o == nil || IsNil(o.RigelUseCase.Get()) {
		var ret string
		return ret
	}
	return *o.RigelUseCase.Get()
}

// GetRigelUseCaseOk returns a tuple with the RigelUseCase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetRigelUseCaseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RigelUseCase.Get(), o.RigelUseCase.IsSet()
}

// HasRigelUseCase returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasRigelUseCase() bool {
	if o != nil && o.RigelUseCase.IsSet() {
		return true
	}

	return false
}

// SetRigelUseCase gets a reference to the given NullableString and assigns it to the RigelUseCase field.
func (o *McmRigelClaimResponseParams) SetRigelUseCase(v string) {
	o.RigelUseCase.Set(&v)
}
// SetRigelUseCaseNil sets the value for RigelUseCase to be an explicit nil
func (o *McmRigelClaimResponseParams) SetRigelUseCaseNil() {
	o.RigelUseCase.Set(nil)
}

// UnsetRigelUseCase ensures that no value is present for RigelUseCase, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetRigelUseCase() {
	o.RigelUseCase.Unset()
}

// GetTenantCaChain returns the TenantCaChain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetTenantCaChain() []*string {
	if o == nil {
		var ret []*string
		return ret
	}
	return o.TenantCaChain
}

// GetTenantCaChainOk returns a tuple with the TenantCaChain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetTenantCaChainOk() ([]*string, bool) {
	if o == nil || IsNil(o.TenantCaChain) {
		return nil, false
	}
	return o.TenantCaChain, true
}

// HasTenantCaChain returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasTenantCaChain() bool {
	if o != nil && !IsNil(o.TenantCaChain) {
		return true
	}

	return false
}

// SetTenantCaChain gets a reference to the given []*string and assigns it to the TenantCaChain field.
func (o *McmRigelClaimResponseParams) SetTenantCaChain(v []*string) {
	o.TenantCaChain = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmRigelClaimResponseParams) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmRigelClaimResponseParams) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *McmRigelClaimResponseParams) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *McmRigelClaimResponseParams) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *McmRigelClaimResponseParams) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *McmRigelClaimResponseParams) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o McmRigelClaimResponseParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o McmRigelClaimResponseParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionId.IsSet() {
		toSerialize["connectionId"] = o.ConnectionId.Get()
	}
	if o.DataplaneEndpoint.IsSet() {
		toSerialize["dataplaneEndpoint"] = o.DataplaneEndpoint.Get()
	}
	if o.HeliosCertificate.IsSet() {
		toSerialize["heliosCertificate"] = o.HeliosCertificate.Get()
	}
	if o.RegionId.IsSet() {
		toSerialize["regionId"] = o.RegionId.Get()
	}
	if o.RigelCaChain.IsSet() {
		toSerialize["rigelCaChain"] = o.RigelCaChain.Get()
	}
	if o.RigelCertificate.IsSet() {
		toSerialize["rigelCertificate"] = o.RigelCertificate.Get()
	}
	if o.RigelGuid.IsSet() {
		toSerialize["rigelGuid"] = o.RigelGuid.Get()
	}
	if o.RigelPrivateKey.IsSet() {
		toSerialize["rigelPrivateKey"] = o.RigelPrivateKey.Get()
	}
	if o.RigelType.IsSet() {
		toSerialize["rigelType"] = o.RigelType.Get()
	}
	if o.RigelUseCase.IsSet() {
		toSerialize["rigelUseCase"] = o.RigelUseCase.Get()
	}
	if o.TenantCaChain != nil {
		toSerialize["tenantCaChain"] = o.TenantCaChain
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

type NullableMcmRigelClaimResponseParams struct {
	value *McmRigelClaimResponseParams
	isSet bool
}

func (v NullableMcmRigelClaimResponseParams) Get() *McmRigelClaimResponseParams {
	return v.value
}

func (v *NullableMcmRigelClaimResponseParams) Set(val *McmRigelClaimResponseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmRigelClaimResponseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmRigelClaimResponseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmRigelClaimResponseParams(val *McmRigelClaimResponseParams) *NullableMcmRigelClaimResponseParams {
	return &NullableMcmRigelClaimResponseParams{value: val, isSet: true}
}

func (v NullableMcmRigelClaimResponseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmRigelClaimResponseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


