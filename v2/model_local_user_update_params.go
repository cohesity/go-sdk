/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the LocalUserUpdateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocalUserUpdateParams{}

// LocalUserUpdateParams Specifies properties for LOCAL cohesity user which are updatable.
type LocalUserUpdateParams struct {
	// Specifies the email address of the User.
	Email NullableString `json:"email,omitempty"`
	// Specifies additional groups the User may belong to.
	Groups []string `json:"groups,omitempty"`
	// Specifies the password of the User.
	Password NullableString `json:"password,omitempty"`
	// Specifies the primary group of the User. Primary group is used for file access.
	PrimaryGroup NullableString `json:"primaryGroup,omitempty"`
	// Specifies the current password of the user. This is required when a session user tries to update his own password.
	CurrentPassword NullableString `json:"currentPassword,omitempty"`
}

// NewLocalUserUpdateParams instantiates a new LocalUserUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalUserUpdateParams() *LocalUserUpdateParams {
	this := LocalUserUpdateParams{}
	return &this
}

// NewLocalUserUpdateParamsWithDefaults instantiates a new LocalUserUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalUserUpdateParamsWithDefaults() *LocalUserUpdateParams {
	this := LocalUserUpdateParams{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocalUserUpdateParams) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocalUserUpdateParams) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *LocalUserUpdateParams) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *LocalUserUpdateParams) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *LocalUserUpdateParams) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *LocalUserUpdateParams) UnsetEmail() {
	o.Email.Unset()
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *LocalUserUpdateParams) GetGroups() []string {
	if o == nil || IsNil(o.Groups) {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalUserUpdateParams) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *LocalUserUpdateParams) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *LocalUserUpdateParams) SetGroups(v []string) {
	o.Groups = v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocalUserUpdateParams) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocalUserUpdateParams) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *LocalUserUpdateParams) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *LocalUserUpdateParams) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *LocalUserUpdateParams) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *LocalUserUpdateParams) UnsetPassword() {
	o.Password.Unset()
}

// GetPrimaryGroup returns the PrimaryGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocalUserUpdateParams) GetPrimaryGroup() string {
	if o == nil || IsNil(o.PrimaryGroup.Get()) {
		var ret string
		return ret
	}
	return *o.PrimaryGroup.Get()
}

// GetPrimaryGroupOk returns a tuple with the PrimaryGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocalUserUpdateParams) GetPrimaryGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryGroup.Get(), o.PrimaryGroup.IsSet()
}

// HasPrimaryGroup returns a boolean if a field has been set.
func (o *LocalUserUpdateParams) HasPrimaryGroup() bool {
	if o != nil && o.PrimaryGroup.IsSet() {
		return true
	}

	return false
}

// SetPrimaryGroup gets a reference to the given NullableString and assigns it to the PrimaryGroup field.
func (o *LocalUserUpdateParams) SetPrimaryGroup(v string) {
	o.PrimaryGroup.Set(&v)
}
// SetPrimaryGroupNil sets the value for PrimaryGroup to be an explicit nil
func (o *LocalUserUpdateParams) SetPrimaryGroupNil() {
	o.PrimaryGroup.Set(nil)
}

// UnsetPrimaryGroup ensures that no value is present for PrimaryGroup, not even an explicit nil
func (o *LocalUserUpdateParams) UnsetPrimaryGroup() {
	o.PrimaryGroup.Unset()
}

// GetCurrentPassword returns the CurrentPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LocalUserUpdateParams) GetCurrentPassword() string {
	if o == nil || IsNil(o.CurrentPassword.Get()) {
		var ret string
		return ret
	}
	return *o.CurrentPassword.Get()
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LocalUserUpdateParams) GetCurrentPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentPassword.Get(), o.CurrentPassword.IsSet()
}

// HasCurrentPassword returns a boolean if a field has been set.
func (o *LocalUserUpdateParams) HasCurrentPassword() bool {
	if o != nil && o.CurrentPassword.IsSet() {
		return true
	}

	return false
}

// SetCurrentPassword gets a reference to the given NullableString and assigns it to the CurrentPassword field.
func (o *LocalUserUpdateParams) SetCurrentPassword(v string) {
	o.CurrentPassword.Set(&v)
}
// SetCurrentPasswordNil sets the value for CurrentPassword to be an explicit nil
func (o *LocalUserUpdateParams) SetCurrentPasswordNil() {
	o.CurrentPassword.Set(nil)
}

// UnsetCurrentPassword ensures that no value is present for CurrentPassword, not even an explicit nil
func (o *LocalUserUpdateParams) UnsetCurrentPassword() {
	o.CurrentPassword.Unset()
}

func (o LocalUserUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocalUserUpdateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.PrimaryGroup.IsSet() {
		toSerialize["primaryGroup"] = o.PrimaryGroup.Get()
	}
	if o.CurrentPassword.IsSet() {
		toSerialize["currentPassword"] = o.CurrentPassword.Get()
	}
	return toSerialize, nil
}

type NullableLocalUserUpdateParams struct {
	value *LocalUserUpdateParams
	isSet bool
}

func (v NullableLocalUserUpdateParams) Get() *LocalUserUpdateParams {
	return v.value
}

func (v *NullableLocalUserUpdateParams) Set(val *LocalUserUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalUserUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalUserUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalUserUpdateParams(val *LocalUserUpdateParams) *NullableLocalUserUpdateParams {
	return &NullableLocalUserUpdateParams{value: val, isSet: true}
}

func (v NullableLocalUserUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalUserUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


