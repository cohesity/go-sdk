/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UserQuota type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserQuota{}

// UserQuota Specifies a user quota for a user.
type UserQuota struct {
	// Specifies the domain name of the user, where the principal' account is maintained.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the user sid.
	Sid NullableString `json:"sid,omitempty"`
	// Specifies the unix Uid.
	UnixUid NullableInt32 `json:"unixUid,omitempty"`
	// Specifies the full name of the user
	UserName NullableString `json:"userName,omitempty"`
	// Specifies the quota policy for the given user.
	QuotaPolicy map[string]interface{} `json:"quotaPolicy,omitempty"`
	// Specifies the user usage in bytes.
	UsageBytes NullableInt64 `json:"usageBytes,omitempty"`
}

// NewUserQuota instantiates a new UserQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserQuota() *UserQuota {
	this := UserQuota{}
	return &this
}

// NewUserQuotaWithDefaults instantiates a new UserQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserQuotaWithDefaults() *UserQuota {
	this := UserQuota{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuota) GetDomain() string {
	if o == nil || IsNil(o.Domain.Get()) {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuota) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *UserQuota) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *UserQuota) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *UserQuota) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *UserQuota) UnsetDomain() {
	o.Domain.Unset()
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuota) GetSid() string {
	if o == nil || IsNil(o.Sid.Get()) {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuota) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *UserQuota) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *UserQuota) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *UserQuota) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *UserQuota) UnsetSid() {
	o.Sid.Unset()
}

// GetUnixUid returns the UnixUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuota) GetUnixUid() int32 {
	if o == nil || IsNil(o.UnixUid.Get()) {
		var ret int32
		return ret
	}
	return *o.UnixUid.Get()
}

// GetUnixUidOk returns a tuple with the UnixUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuota) GetUnixUidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnixUid.Get(), o.UnixUid.IsSet()
}

// HasUnixUid returns a boolean if a field has been set.
func (o *UserQuota) HasUnixUid() bool {
	if o != nil && o.UnixUid.IsSet() {
		return true
	}

	return false
}

// SetUnixUid gets a reference to the given NullableInt32 and assigns it to the UnixUid field.
func (o *UserQuota) SetUnixUid(v int32) {
	o.UnixUid.Set(&v)
}
// SetUnixUidNil sets the value for UnixUid to be an explicit nil
func (o *UserQuota) SetUnixUidNil() {
	o.UnixUid.Set(nil)
}

// UnsetUnixUid ensures that no value is present for UnixUid, not even an explicit nil
func (o *UserQuota) UnsetUnixUid() {
	o.UnixUid.Unset()
}

// GetUserName returns the UserName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuota) GetUserName() string {
	if o == nil || IsNil(o.UserName.Get()) {
		var ret string
		return ret
	}
	return *o.UserName.Get()
}

// GetUserNameOk returns a tuple with the UserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuota) GetUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserName.Get(), o.UserName.IsSet()
}

// HasUserName returns a boolean if a field has been set.
func (o *UserQuota) HasUserName() bool {
	if o != nil && o.UserName.IsSet() {
		return true
	}

	return false
}

// SetUserName gets a reference to the given NullableString and assigns it to the UserName field.
func (o *UserQuota) SetUserName(v string) {
	o.UserName.Set(&v)
}
// SetUserNameNil sets the value for UserName to be an explicit nil
func (o *UserQuota) SetUserNameNil() {
	o.UserName.Set(nil)
}

// UnsetUserName ensures that no value is present for UserName, not even an explicit nil
func (o *UserQuota) UnsetUserName() {
	o.UserName.Unset()
}

// GetQuotaPolicy returns the QuotaPolicy field value if set, zero value otherwise.
func (o *UserQuota) GetQuotaPolicy() map[string]interface{} {
	if o == nil || IsNil(o.QuotaPolicy) {
		var ret map[string]interface{}
		return ret
	}
	return o.QuotaPolicy
}

// GetQuotaPolicyOk returns a tuple with the QuotaPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserQuota) GetQuotaPolicyOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.QuotaPolicy) {
		return map[string]interface{}{}, false
	}
	return o.QuotaPolicy, true
}

// HasQuotaPolicy returns a boolean if a field has been set.
func (o *UserQuota) HasQuotaPolicy() bool {
	if o != nil && !IsNil(o.QuotaPolicy) {
		return true
	}

	return false
}

// SetQuotaPolicy gets a reference to the given map[string]interface{} and assigns it to the QuotaPolicy field.
func (o *UserQuota) SetQuotaPolicy(v map[string]interface{}) {
	o.QuotaPolicy = v
}

// GetUsageBytes returns the UsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuota) GetUsageBytes() int64 {
	if o == nil || IsNil(o.UsageBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.UsageBytes.Get()
}

// GetUsageBytesOk returns a tuple with the UsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuota) GetUsageBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsageBytes.Get(), o.UsageBytes.IsSet()
}

// HasUsageBytes returns a boolean if a field has been set.
func (o *UserQuota) HasUsageBytes() bool {
	if o != nil && o.UsageBytes.IsSet() {
		return true
	}

	return false
}

// SetUsageBytes gets a reference to the given NullableInt64 and assigns it to the UsageBytes field.
func (o *UserQuota) SetUsageBytes(v int64) {
	o.UsageBytes.Set(&v)
}
// SetUsageBytesNil sets the value for UsageBytes to be an explicit nil
func (o *UserQuota) SetUsageBytesNil() {
	o.UsageBytes.Set(nil)
}

// UnsetUsageBytes ensures that no value is present for UsageBytes, not even an explicit nil
func (o *UserQuota) UnsetUsageBytes() {
	o.UsageBytes.Unset()
}

func (o UserQuota) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserQuota) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.UnixUid.IsSet() {
		toSerialize["unixUid"] = o.UnixUid.Get()
	}
	if o.UserName.IsSet() {
		toSerialize["userName"] = o.UserName.Get()
	}
	if !IsNil(o.QuotaPolicy) {
		toSerialize["quotaPolicy"] = o.QuotaPolicy
	}
	if o.UsageBytes.IsSet() {
		toSerialize["usageBytes"] = o.UsageBytes.Get()
	}
	return toSerialize, nil
}

type NullableUserQuota struct {
	value *UserQuota
	isSet bool
}

func (v NullableUserQuota) Get() *UserQuota {
	return v.value
}

func (v *NullableUserQuota) Set(val *UserQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableUserQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableUserQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserQuota(val *UserQuota) *NullableUserQuota {
	return &NullableUserQuota{value: val, isSet: true}
}

func (v NullableUserQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


