/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the IbmIdProvider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IbmIdProvider{}

// IbmIdProvider IBM ID provider
type IbmIdProvider struct {
	// Specifies the number of minutes the cluster will wait before reperforming token introspection on a token it has already seen. Default value is 15 minutes. Maximum is 24 hours.
	IntrospectCacheTimeMins NullableInt64 `json:"introspectCacheTimeMins,omitempty"`
	// Specifies the number of minutes the cluster will wait before polling for a new operator token. Default value is 15 minutes. Maximum is 24 hours.
	OperatorTokenCacheTimeMins NullableInt64 `json:"operatorTokenCacheTimeMins,omitempty"`
	// Specifies the number of minutes the cluster will wait before fetching roles again for a user it has already seen. Default value is 15 minutes. Maximum is 24 hours.
	RoleCacheTimeMins NullableInt64 `json:"roleCacheTimeMins,omitempty"`
}

// NewIbmIdProvider instantiates a new IbmIdProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIbmIdProvider() *IbmIdProvider {
	this := IbmIdProvider{}
	var introspectCacheTimeMins int64 = 15
	this.IntrospectCacheTimeMins = *NewNullableInt64(&introspectCacheTimeMins)
	var operatorTokenCacheTimeMins int64 = 15
	this.OperatorTokenCacheTimeMins = *NewNullableInt64(&operatorTokenCacheTimeMins)
	var roleCacheTimeMins int64 = 15
	this.RoleCacheTimeMins = *NewNullableInt64(&roleCacheTimeMins)
	return &this
}

// NewIbmIdProviderWithDefaults instantiates a new IbmIdProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIbmIdProviderWithDefaults() *IbmIdProvider {
	this := IbmIdProvider{}
	var introspectCacheTimeMins int64 = 15
	this.IntrospectCacheTimeMins = *NewNullableInt64(&introspectCacheTimeMins)
	var operatorTokenCacheTimeMins int64 = 15
	this.OperatorTokenCacheTimeMins = *NewNullableInt64(&operatorTokenCacheTimeMins)
	var roleCacheTimeMins int64 = 15
	this.RoleCacheTimeMins = *NewNullableInt64(&roleCacheTimeMins)
	return &this
}

// GetIntrospectCacheTimeMins returns the IntrospectCacheTimeMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IbmIdProvider) GetIntrospectCacheTimeMins() int64 {
	if o == nil || IsNil(o.IntrospectCacheTimeMins.Get()) {
		var ret int64
		return ret
	}
	return *o.IntrospectCacheTimeMins.Get()
}

// GetIntrospectCacheTimeMinsOk returns a tuple with the IntrospectCacheTimeMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IbmIdProvider) GetIntrospectCacheTimeMinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.IntrospectCacheTimeMins.Get(), o.IntrospectCacheTimeMins.IsSet()
}

// HasIntrospectCacheTimeMins returns a boolean if a field has been set.
func (o *IbmIdProvider) HasIntrospectCacheTimeMins() bool {
	if o != nil && o.IntrospectCacheTimeMins.IsSet() {
		return true
	}

	return false
}

// SetIntrospectCacheTimeMins gets a reference to the given NullableInt64 and assigns it to the IntrospectCacheTimeMins field.
func (o *IbmIdProvider) SetIntrospectCacheTimeMins(v int64) {
	o.IntrospectCacheTimeMins.Set(&v)
}
// SetIntrospectCacheTimeMinsNil sets the value for IntrospectCacheTimeMins to be an explicit nil
func (o *IbmIdProvider) SetIntrospectCacheTimeMinsNil() {
	o.IntrospectCacheTimeMins.Set(nil)
}

// UnsetIntrospectCacheTimeMins ensures that no value is present for IntrospectCacheTimeMins, not even an explicit nil
func (o *IbmIdProvider) UnsetIntrospectCacheTimeMins() {
	o.IntrospectCacheTimeMins.Unset()
}

// GetOperatorTokenCacheTimeMins returns the OperatorTokenCacheTimeMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IbmIdProvider) GetOperatorTokenCacheTimeMins() int64 {
	if o == nil || IsNil(o.OperatorTokenCacheTimeMins.Get()) {
		var ret int64
		return ret
	}
	return *o.OperatorTokenCacheTimeMins.Get()
}

// GetOperatorTokenCacheTimeMinsOk returns a tuple with the OperatorTokenCacheTimeMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IbmIdProvider) GetOperatorTokenCacheTimeMinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.OperatorTokenCacheTimeMins.Get(), o.OperatorTokenCacheTimeMins.IsSet()
}

// HasOperatorTokenCacheTimeMins returns a boolean if a field has been set.
func (o *IbmIdProvider) HasOperatorTokenCacheTimeMins() bool {
	if o != nil && o.OperatorTokenCacheTimeMins.IsSet() {
		return true
	}

	return false
}

// SetOperatorTokenCacheTimeMins gets a reference to the given NullableInt64 and assigns it to the OperatorTokenCacheTimeMins field.
func (o *IbmIdProvider) SetOperatorTokenCacheTimeMins(v int64) {
	o.OperatorTokenCacheTimeMins.Set(&v)
}
// SetOperatorTokenCacheTimeMinsNil sets the value for OperatorTokenCacheTimeMins to be an explicit nil
func (o *IbmIdProvider) SetOperatorTokenCacheTimeMinsNil() {
	o.OperatorTokenCacheTimeMins.Set(nil)
}

// UnsetOperatorTokenCacheTimeMins ensures that no value is present for OperatorTokenCacheTimeMins, not even an explicit nil
func (o *IbmIdProvider) UnsetOperatorTokenCacheTimeMins() {
	o.OperatorTokenCacheTimeMins.Unset()
}

// GetRoleCacheTimeMins returns the RoleCacheTimeMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IbmIdProvider) GetRoleCacheTimeMins() int64 {
	if o == nil || IsNil(o.RoleCacheTimeMins.Get()) {
		var ret int64
		return ret
	}
	return *o.RoleCacheTimeMins.Get()
}

// GetRoleCacheTimeMinsOk returns a tuple with the RoleCacheTimeMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IbmIdProvider) GetRoleCacheTimeMinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RoleCacheTimeMins.Get(), o.RoleCacheTimeMins.IsSet()
}

// HasRoleCacheTimeMins returns a boolean if a field has been set.
func (o *IbmIdProvider) HasRoleCacheTimeMins() bool {
	if o != nil && o.RoleCacheTimeMins.IsSet() {
		return true
	}

	return false
}

// SetRoleCacheTimeMins gets a reference to the given NullableInt64 and assigns it to the RoleCacheTimeMins field.
func (o *IbmIdProvider) SetRoleCacheTimeMins(v int64) {
	o.RoleCacheTimeMins.Set(&v)
}
// SetRoleCacheTimeMinsNil sets the value for RoleCacheTimeMins to be an explicit nil
func (o *IbmIdProvider) SetRoleCacheTimeMinsNil() {
	o.RoleCacheTimeMins.Set(nil)
}

// UnsetRoleCacheTimeMins ensures that no value is present for RoleCacheTimeMins, not even an explicit nil
func (o *IbmIdProvider) UnsetRoleCacheTimeMins() {
	o.RoleCacheTimeMins.Unset()
}

func (o IbmIdProvider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IbmIdProvider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IntrospectCacheTimeMins.IsSet() {
		toSerialize["introspectCacheTimeMins"] = o.IntrospectCacheTimeMins.Get()
	}
	if o.OperatorTokenCacheTimeMins.IsSet() {
		toSerialize["operatorTokenCacheTimeMins"] = o.OperatorTokenCacheTimeMins.Get()
	}
	if o.RoleCacheTimeMins.IsSet() {
		toSerialize["roleCacheTimeMins"] = o.RoleCacheTimeMins.Get()
	}
	return toSerialize, nil
}

type NullableIbmIdProvider struct {
	value *IbmIdProvider
	isSet bool
}

func (v NullableIbmIdProvider) Get() *IbmIdProvider {
	return v.value
}

func (v *NullableIbmIdProvider) Set(val *IbmIdProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableIbmIdProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableIbmIdProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIbmIdProvider(val *IbmIdProvider) *NullableIbmIdProvider {
	return &NullableIbmIdProvider{value: val, isSet: true}
}

func (v NullableIbmIdProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIbmIdProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


