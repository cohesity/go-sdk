/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NlmLock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NlmLock{}

// NlmLock Specifies a NLM lock.
type NlmLock struct {
	// Specifies the client ID.
	ClientId NullableString `json:"clientId,omitempty"`
	// Specifies the list of lock ranges.
	LockRanges []LockRange `json:"lockRanges,omitempty"`
}

// NewNlmLock instantiates a new NlmLock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNlmLock() *NlmLock {
	this := NlmLock{}
	return &this
}

// NewNlmLockWithDefaults instantiates a new NlmLock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNlmLockWithDefaults() *NlmLock {
	this := NlmLock{}
	return &this
}

// GetClientId returns the ClientId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NlmLock) GetClientId() string {
	if o == nil || IsNil(o.ClientId.Get()) {
		var ret string
		return ret
	}
	return *o.ClientId.Get()
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NlmLock) GetClientIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClientId.Get(), o.ClientId.IsSet()
}

// HasClientId returns a boolean if a field has been set.
func (o *NlmLock) HasClientId() bool {
	if o != nil && o.ClientId.IsSet() {
		return true
	}

	return false
}

// SetClientId gets a reference to the given NullableString and assigns it to the ClientId field.
func (o *NlmLock) SetClientId(v string) {
	o.ClientId.Set(&v)
}
// SetClientIdNil sets the value for ClientId to be an explicit nil
func (o *NlmLock) SetClientIdNil() {
	o.ClientId.Set(nil)
}

// UnsetClientId ensures that no value is present for ClientId, not even an explicit nil
func (o *NlmLock) UnsetClientId() {
	o.ClientId.Unset()
}

// GetLockRanges returns the LockRanges field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NlmLock) GetLockRanges() []LockRange {
	if o == nil {
		var ret []LockRange
		return ret
	}
	return o.LockRanges
}

// GetLockRangesOk returns a tuple with the LockRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NlmLock) GetLockRangesOk() ([]LockRange, bool) {
	if o == nil || IsNil(o.LockRanges) {
		return nil, false
	}
	return o.LockRanges, true
}

// HasLockRanges returns a boolean if a field has been set.
func (o *NlmLock) HasLockRanges() bool {
	if o != nil && !IsNil(o.LockRanges) {
		return true
	}

	return false
}

// SetLockRanges gets a reference to the given []LockRange and assigns it to the LockRanges field.
func (o *NlmLock) SetLockRanges(v []LockRange) {
	o.LockRanges = v
}

func (o NlmLock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NlmLock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ClientId.IsSet() {
		toSerialize["clientId"] = o.ClientId.Get()
	}
	if o.LockRanges != nil {
		toSerialize["lockRanges"] = o.LockRanges
	}
	return toSerialize, nil
}

type NullableNlmLock struct {
	value *NlmLock
	isSet bool
}

func (v NullableNlmLock) Get() *NlmLock {
	return v.value
}

func (v *NullableNlmLock) Set(val *NlmLock) {
	v.value = val
	v.isSet = true
}

func (v NullableNlmLock) IsSet() bool {
	return v.isSet
}

func (v *NullableNlmLock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNlmLock(val *NlmLock) *NullableNlmLock {
	return &NullableNlmLock{value: val, isSet: true}
}

func (v NullableNlmLock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNlmLock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


