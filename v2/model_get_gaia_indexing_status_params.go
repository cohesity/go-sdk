/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GetGaiaIndexingStatusParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetGaiaIndexingStatusParams{}

// GetGaiaIndexingStatusParams Specifies the Get Index documents params.
type GetGaiaIndexingStatusParams struct {
	// Job handle for this request.
	JobHandle NullableString `json:"jobHandle,omitempty"`
}

// NewGetGaiaIndexingStatusParams instantiates a new GetGaiaIndexingStatusParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetGaiaIndexingStatusParams() *GetGaiaIndexingStatusParams {
	this := GetGaiaIndexingStatusParams{}
	return &this
}

// NewGetGaiaIndexingStatusParamsWithDefaults instantiates a new GetGaiaIndexingStatusParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetGaiaIndexingStatusParamsWithDefaults() *GetGaiaIndexingStatusParams {
	this := GetGaiaIndexingStatusParams{}
	return &this
}

// GetJobHandle returns the JobHandle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGaiaIndexingStatusParams) GetJobHandle() string {
	if o == nil || IsNil(o.JobHandle.Get()) {
		var ret string
		return ret
	}
	return *o.JobHandle.Get()
}

// GetJobHandleOk returns a tuple with the JobHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGaiaIndexingStatusParams) GetJobHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobHandle.Get(), o.JobHandle.IsSet()
}

// HasJobHandle returns a boolean if a field has been set.
func (o *GetGaiaIndexingStatusParams) HasJobHandle() bool {
	if o != nil && o.JobHandle.IsSet() {
		return true
	}

	return false
}

// SetJobHandle gets a reference to the given NullableString and assigns it to the JobHandle field.
func (o *GetGaiaIndexingStatusParams) SetJobHandle(v string) {
	o.JobHandle.Set(&v)
}
// SetJobHandleNil sets the value for JobHandle to be an explicit nil
func (o *GetGaiaIndexingStatusParams) SetJobHandleNil() {
	o.JobHandle.Set(nil)
}

// UnsetJobHandle ensures that no value is present for JobHandle, not even an explicit nil
func (o *GetGaiaIndexingStatusParams) UnsetJobHandle() {
	o.JobHandle.Unset()
}

func (o GetGaiaIndexingStatusParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetGaiaIndexingStatusParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.JobHandle.IsSet() {
		toSerialize["jobHandle"] = o.JobHandle.Get()
	}
	return toSerialize, nil
}

type NullableGetGaiaIndexingStatusParams struct {
	value *GetGaiaIndexingStatusParams
	isSet bool
}

func (v NullableGetGaiaIndexingStatusParams) Get() *GetGaiaIndexingStatusParams {
	return v.value
}

func (v *NullableGetGaiaIndexingStatusParams) Set(val *GetGaiaIndexingStatusParams) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGaiaIndexingStatusParams) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGaiaIndexingStatusParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGaiaIndexingStatusParams(val *GetGaiaIndexingStatusParams) *NullableGetGaiaIndexingStatusParams {
	return &NullableGetGaiaIndexingStatusParams{value: val, isSet: true}
}

func (v NullableGetGaiaIndexingStatusParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGaiaIndexingStatusParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


