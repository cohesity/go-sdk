/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverVmwareVmVCDSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverVmwareVmVCDSourceConfig{}

// RecoverVmwareVmVCDSourceConfig Specifies the new destination Source configuration where the VMs will be recovered for vCloudDirector sources.
type RecoverVmwareVmVCDSourceConfig struct {
	// Specifies the datastore objects where the object's files should be recovered to. This should only be specified if storageProfile is not specified.
	Datastores []RecoveryObjectIdentifier `json:"datastores,omitempty"`
	NetworkConfig NullableRecoverVmwareVmVCDSourceConfigNetworkConfig `json:"networkConfig,omitempty"`
	OrgVdcNetwork *OrgVDCNetwork `json:"orgVdcNetwork,omitempty"`
	Source NullableRecoverAcropolisVmNewSourceConfigSource `json:"source"`
	StorageProfile *RecoverVmwareVAppTemplateVCDSourceConfigStorageProfile `json:"storageProfile,omitempty"`
	VApp NullableRecoverVmwareVmVCDSourceConfigVApp `json:"vApp,omitempty"`
	Vdc NullableRecoverVmwareVAppTemplateVCDSourceConfigVdc `json:"vdc"`
}

type _RecoverVmwareVmVCDSourceConfig RecoverVmwareVmVCDSourceConfig

// NewRecoverVmwareVmVCDSourceConfig instantiates a new RecoverVmwareVmVCDSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVmwareVmVCDSourceConfig(source NullableRecoverAcropolisVmNewSourceConfigSource, vdc NullableRecoverVmwareVAppTemplateVCDSourceConfigVdc) *RecoverVmwareVmVCDSourceConfig {
	this := RecoverVmwareVmVCDSourceConfig{}
	this.Source = source
	this.Vdc = vdc
	return &this
}

// NewRecoverVmwareVmVCDSourceConfigWithDefaults instantiates a new RecoverVmwareVmVCDSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVmwareVmVCDSourceConfigWithDefaults() *RecoverVmwareVmVCDSourceConfig {
	this := RecoverVmwareVmVCDSourceConfig{}
	return &this
}

// GetDatastores returns the Datastores field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmVCDSourceConfig) GetDatastores() []RecoveryObjectIdentifier {
	if o == nil {
		var ret []RecoveryObjectIdentifier
		return ret
	}
	return o.Datastores
}

// GetDatastoresOk returns a tuple with the Datastores field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmVCDSourceConfig) GetDatastoresOk() ([]RecoveryObjectIdentifier, bool) {
	if o == nil || IsNil(o.Datastores) {
		return nil, false
	}
	return o.Datastores, true
}

// HasDatastores returns a boolean if a field has been set.
func (o *RecoverVmwareVmVCDSourceConfig) HasDatastores() bool {
	if o != nil && !IsNil(o.Datastores) {
		return true
	}

	return false
}

// SetDatastores gets a reference to the given []RecoveryObjectIdentifier and assigns it to the Datastores field.
func (o *RecoverVmwareVmVCDSourceConfig) SetDatastores(v []RecoveryObjectIdentifier) {
	o.Datastores = v
}

// GetNetworkConfig returns the NetworkConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmVCDSourceConfig) GetNetworkConfig() RecoverVmwareVmVCDSourceConfigNetworkConfig {
	if o == nil || IsNil(o.NetworkConfig.Get()) {
		var ret RecoverVmwareVmVCDSourceConfigNetworkConfig
		return ret
	}
	return *o.NetworkConfig.Get()
}

// GetNetworkConfigOk returns a tuple with the NetworkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmVCDSourceConfig) GetNetworkConfigOk() (*RecoverVmwareVmVCDSourceConfigNetworkConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkConfig.Get(), o.NetworkConfig.IsSet()
}

// HasNetworkConfig returns a boolean if a field has been set.
func (o *RecoverVmwareVmVCDSourceConfig) HasNetworkConfig() bool {
	if o != nil && o.NetworkConfig.IsSet() {
		return true
	}

	return false
}

// SetNetworkConfig gets a reference to the given NullableRecoverVmwareVmVCDSourceConfigNetworkConfig and assigns it to the NetworkConfig field.
func (o *RecoverVmwareVmVCDSourceConfig) SetNetworkConfig(v RecoverVmwareVmVCDSourceConfigNetworkConfig) {
	o.NetworkConfig.Set(&v)
}
// SetNetworkConfigNil sets the value for NetworkConfig to be an explicit nil
func (o *RecoverVmwareVmVCDSourceConfig) SetNetworkConfigNil() {
	o.NetworkConfig.Set(nil)
}

// UnsetNetworkConfig ensures that no value is present for NetworkConfig, not even an explicit nil
func (o *RecoverVmwareVmVCDSourceConfig) UnsetNetworkConfig() {
	o.NetworkConfig.Unset()
}

// GetOrgVdcNetwork returns the OrgVdcNetwork field value if set, zero value otherwise.
func (o *RecoverVmwareVmVCDSourceConfig) GetOrgVdcNetwork() OrgVDCNetwork {
	if o == nil || IsNil(o.OrgVdcNetwork) {
		var ret OrgVDCNetwork
		return ret
	}
	return *o.OrgVdcNetwork
}

// GetOrgVdcNetworkOk returns a tuple with the OrgVdcNetwork field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverVmwareVmVCDSourceConfig) GetOrgVdcNetworkOk() (*OrgVDCNetwork, bool) {
	if o == nil || IsNil(o.OrgVdcNetwork) {
		return nil, false
	}
	return o.OrgVdcNetwork, true
}

// HasOrgVdcNetwork returns a boolean if a field has been set.
func (o *RecoverVmwareVmVCDSourceConfig) HasOrgVdcNetwork() bool {
	if o != nil && !IsNil(o.OrgVdcNetwork) {
		return true
	}

	return false
}

// SetOrgVdcNetwork gets a reference to the given OrgVDCNetwork and assigns it to the OrgVdcNetwork field.
func (o *RecoverVmwareVmVCDSourceConfig) SetOrgVdcNetwork(v OrgVDCNetwork) {
	o.OrgVdcNetwork = &v
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoverAcropolisVmNewSourceConfigSource will be returned
func (o *RecoverVmwareVmVCDSourceConfig) GetSource() RecoverAcropolisVmNewSourceConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret RecoverAcropolisVmNewSourceConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmVCDSourceConfig) GetSourceOk() (*RecoverAcropolisVmNewSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *RecoverVmwareVmVCDSourceConfig) SetSource(v RecoverAcropolisVmNewSourceConfigSource) {
	o.Source.Set(&v)
}

// GetStorageProfile returns the StorageProfile field value if set, zero value otherwise.
func (o *RecoverVmwareVmVCDSourceConfig) GetStorageProfile() RecoverVmwareVAppTemplateVCDSourceConfigStorageProfile {
	if o == nil || IsNil(o.StorageProfile) {
		var ret RecoverVmwareVAppTemplateVCDSourceConfigStorageProfile
		return ret
	}
	return *o.StorageProfile
}

// GetStorageProfileOk returns a tuple with the StorageProfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverVmwareVmVCDSourceConfig) GetStorageProfileOk() (*RecoverVmwareVAppTemplateVCDSourceConfigStorageProfile, bool) {
	if o == nil || IsNil(o.StorageProfile) {
		return nil, false
	}
	return o.StorageProfile, true
}

// HasStorageProfile returns a boolean if a field has been set.
func (o *RecoverVmwareVmVCDSourceConfig) HasStorageProfile() bool {
	if o != nil && !IsNil(o.StorageProfile) {
		return true
	}

	return false
}

// SetStorageProfile gets a reference to the given RecoverVmwareVAppTemplateVCDSourceConfigStorageProfile and assigns it to the StorageProfile field.
func (o *RecoverVmwareVmVCDSourceConfig) SetStorageProfile(v RecoverVmwareVAppTemplateVCDSourceConfigStorageProfile) {
	o.StorageProfile = &v
}

// GetVApp returns the VApp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmVCDSourceConfig) GetVApp() RecoverVmwareVmVCDSourceConfigVApp {
	if o == nil || IsNil(o.VApp.Get()) {
		var ret RecoverVmwareVmVCDSourceConfigVApp
		return ret
	}
	return *o.VApp.Get()
}

// GetVAppOk returns a tuple with the VApp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmVCDSourceConfig) GetVAppOk() (*RecoverVmwareVmVCDSourceConfigVApp, bool) {
	if o == nil {
		return nil, false
	}
	return o.VApp.Get(), o.VApp.IsSet()
}

// HasVApp returns a boolean if a field has been set.
func (o *RecoverVmwareVmVCDSourceConfig) HasVApp() bool {
	if o != nil && o.VApp.IsSet() {
		return true
	}

	return false
}

// SetVApp gets a reference to the given NullableRecoverVmwareVmVCDSourceConfigVApp and assigns it to the VApp field.
func (o *RecoverVmwareVmVCDSourceConfig) SetVApp(v RecoverVmwareVmVCDSourceConfigVApp) {
	o.VApp.Set(&v)
}
// SetVAppNil sets the value for VApp to be an explicit nil
func (o *RecoverVmwareVmVCDSourceConfig) SetVAppNil() {
	o.VApp.Set(nil)
}

// UnsetVApp ensures that no value is present for VApp, not even an explicit nil
func (o *RecoverVmwareVmVCDSourceConfig) UnsetVApp() {
	o.VApp.Unset()
}

// GetVdc returns the Vdc field value
// If the value is explicit nil, the zero value for RecoverVmwareVAppTemplateVCDSourceConfigVdc will be returned
func (o *RecoverVmwareVmVCDSourceConfig) GetVdc() RecoverVmwareVAppTemplateVCDSourceConfigVdc {
	if o == nil || o.Vdc.Get() == nil {
		var ret RecoverVmwareVAppTemplateVCDSourceConfigVdc
		return ret
	}

	return *o.Vdc.Get()
}

// GetVdcOk returns a tuple with the Vdc field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmVCDSourceConfig) GetVdcOk() (*RecoverVmwareVAppTemplateVCDSourceConfigVdc, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vdc.Get(), o.Vdc.IsSet()
}

// SetVdc sets field value
func (o *RecoverVmwareVmVCDSourceConfig) SetVdc(v RecoverVmwareVAppTemplateVCDSourceConfigVdc) {
	o.Vdc.Set(&v)
}

func (o RecoverVmwareVmVCDSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverVmwareVmVCDSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Datastores != nil {
		toSerialize["datastores"] = o.Datastores
	}
	if o.NetworkConfig.IsSet() {
		toSerialize["networkConfig"] = o.NetworkConfig.Get()
	}
	if !IsNil(o.OrgVdcNetwork) {
		toSerialize["orgVdcNetwork"] = o.OrgVdcNetwork
	}
	toSerialize["source"] = o.Source.Get()
	if !IsNil(o.StorageProfile) {
		toSerialize["storageProfile"] = o.StorageProfile
	}
	if o.VApp.IsSet() {
		toSerialize["vApp"] = o.VApp.Get()
	}
	toSerialize["vdc"] = o.Vdc.Get()
	return toSerialize, nil
}

func (o *RecoverVmwareVmVCDSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
		"vdc",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverVmwareVmVCDSourceConfig := _RecoverVmwareVmVCDSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverVmwareVmVCDSourceConfig)

	if err != nil {
		return err
	}

	*o = RecoverVmwareVmVCDSourceConfig(varRecoverVmwareVmVCDSourceConfig)

	return err
}

type NullableRecoverVmwareVmVCDSourceConfig struct {
	value *RecoverVmwareVmVCDSourceConfig
	isSet bool
}

func (v NullableRecoverVmwareVmVCDSourceConfig) Get() *RecoverVmwareVmVCDSourceConfig {
	return v.value
}

func (v *NullableRecoverVmwareVmVCDSourceConfig) Set(val *RecoverVmwareVmVCDSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVmwareVmVCDSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVmwareVmVCDSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVmwareVmVCDSourceConfig(val *RecoverVmwareVmVCDSourceConfig) *NullableRecoverVmwareVmVCDSourceConfig {
	return &NullableRecoverVmwareVmVCDSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverVmwareVmVCDSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVmwareVmVCDSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


