/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RigelClusterNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RigelClusterNode{}

// RigelClusterNode Params for a Rigel Cluster Node
type RigelClusterNode struct {
	// Specifies the ID of the Node.
	NodeId NullableInt64 `json:"nodeId,omitempty"`
	// Specifies the IP address of the Node.
	NodeIp NullableString `json:"nodeIp"`
	// Specifies the secondary IP address of the Node.
	SecondaryNodeIp NullableString `json:"secondaryNodeIp,omitempty"`
}

type _RigelClusterNode RigelClusterNode

// NewRigelClusterNode instantiates a new RigelClusterNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRigelClusterNode(nodeIp NullableString) *RigelClusterNode {
	this := RigelClusterNode{}
	this.NodeIp = nodeIp
	return &this
}

// NewRigelClusterNodeWithDefaults instantiates a new RigelClusterNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRigelClusterNodeWithDefaults() *RigelClusterNode {
	this := RigelClusterNode{}
	return &this
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelClusterNode) GetNodeId() int64 {
	if o == nil || IsNil(o.NodeId.Get()) {
		var ret int64
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelClusterNode) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *RigelClusterNode) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableInt64 and assigns it to the NodeId field.
func (o *RigelClusterNode) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *RigelClusterNode) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *RigelClusterNode) UnsetNodeId() {
	o.NodeId.Unset()
}

// GetNodeIp returns the NodeIp field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RigelClusterNode) GetNodeIp() string {
	if o == nil || o.NodeIp.Get() == nil {
		var ret string
		return ret
	}

	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelClusterNode) GetNodeIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// SetNodeIp sets field value
func (o *RigelClusterNode) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}

// GetSecondaryNodeIp returns the SecondaryNodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelClusterNode) GetSecondaryNodeIp() string {
	if o == nil || IsNil(o.SecondaryNodeIp.Get()) {
		var ret string
		return ret
	}
	return *o.SecondaryNodeIp.Get()
}

// GetSecondaryNodeIpOk returns a tuple with the SecondaryNodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelClusterNode) GetSecondaryNodeIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecondaryNodeIp.Get(), o.SecondaryNodeIp.IsSet()
}

// HasSecondaryNodeIp returns a boolean if a field has been set.
func (o *RigelClusterNode) HasSecondaryNodeIp() bool {
	if o != nil && o.SecondaryNodeIp.IsSet() {
		return true
	}

	return false
}

// SetSecondaryNodeIp gets a reference to the given NullableString and assigns it to the SecondaryNodeIp field.
func (o *RigelClusterNode) SetSecondaryNodeIp(v string) {
	o.SecondaryNodeIp.Set(&v)
}
// SetSecondaryNodeIpNil sets the value for SecondaryNodeIp to be an explicit nil
func (o *RigelClusterNode) SetSecondaryNodeIpNil() {
	o.SecondaryNodeIp.Set(nil)
}

// UnsetSecondaryNodeIp ensures that no value is present for SecondaryNodeIp, not even an explicit nil
func (o *RigelClusterNode) UnsetSecondaryNodeIp() {
	o.SecondaryNodeIp.Unset()
}

func (o RigelClusterNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RigelClusterNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	toSerialize["nodeIp"] = o.NodeIp.Get()
	if o.SecondaryNodeIp.IsSet() {
		toSerialize["secondaryNodeIp"] = o.SecondaryNodeIp.Get()
	}
	return toSerialize, nil
}

func (o *RigelClusterNode) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeIp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRigelClusterNode := _RigelClusterNode{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRigelClusterNode)

	if err != nil {
		return err
	}

	*o = RigelClusterNode(varRigelClusterNode)

	return err
}

type NullableRigelClusterNode struct {
	value *RigelClusterNode
	isSet bool
}

func (v NullableRigelClusterNode) Get() *RigelClusterNode {
	return v.value
}

func (v *NullableRigelClusterNode) Set(val *RigelClusterNode) {
	v.value = val
	v.isSet = true
}

func (v NullableRigelClusterNode) IsSet() bool {
	return v.isSet
}

func (v *NullableRigelClusterNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRigelClusterNode(val *RigelClusterNode) *NullableRigelClusterNode {
	return &NullableRigelClusterNode{value: val, isSet: true}
}

func (v NullableRigelClusterNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRigelClusterNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


