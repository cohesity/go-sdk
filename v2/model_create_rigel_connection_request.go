/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateRigelConnectionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateRigelConnectionRequest{}

// CreateRigelConnectionRequest Specify the params to create a connection of Rigel.
type CreateRigelConnectionRequest struct {
	// Specifies the name of the connection.
	Name NullableString `json:"name"`
	// Flag to specify if the connection is scalable.
	Scalable NullableBool `json:"scalable,omitempty"`
	// Specifies the id of the tenant which the connection belongs to.
	TenantId NullableString `json:"tenantId"`
	// Specifies the id of the connection. Required if environment type is 'kHelios'
	ConnectionId NullableInt64 `json:"connectionId,omitempty"`
	// Specifies the type of the connection.
	EnvType NullableString `json:"envType,omitempty"`
}

type _CreateRigelConnectionRequest CreateRigelConnectionRequest

// NewCreateRigelConnectionRequest instantiates a new CreateRigelConnectionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateRigelConnectionRequest(name NullableString, tenantId NullableString) *CreateRigelConnectionRequest {
	this := CreateRigelConnectionRequest{}
	this.Name = name
	this.TenantId = tenantId
	return &this
}

// NewCreateRigelConnectionRequestWithDefaults instantiates a new CreateRigelConnectionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateRigelConnectionRequestWithDefaults() *CreateRigelConnectionRequest {
	this := CreateRigelConnectionRequest{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateRigelConnectionRequest) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRigelConnectionRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CreateRigelConnectionRequest) SetName(v string) {
	o.Name.Set(&v)
}

// GetScalable returns the Scalable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateRigelConnectionRequest) GetScalable() bool {
	if o == nil || IsNil(o.Scalable.Get()) {
		var ret bool
		return ret
	}
	return *o.Scalable.Get()
}

// GetScalableOk returns a tuple with the Scalable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRigelConnectionRequest) GetScalableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Scalable.Get(), o.Scalable.IsSet()
}

// HasScalable returns a boolean if a field has been set.
func (o *CreateRigelConnectionRequest) HasScalable() bool {
	if o != nil && o.Scalable.IsSet() {
		return true
	}

	return false
}

// SetScalable gets a reference to the given NullableBool and assigns it to the Scalable field.
func (o *CreateRigelConnectionRequest) SetScalable(v bool) {
	o.Scalable.Set(&v)
}
// SetScalableNil sets the value for Scalable to be an explicit nil
func (o *CreateRigelConnectionRequest) SetScalableNil() {
	o.Scalable.Set(nil)
}

// UnsetScalable ensures that no value is present for Scalable, not even an explicit nil
func (o *CreateRigelConnectionRequest) UnsetScalable() {
	o.Scalable.Unset()
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateRigelConnectionRequest) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRigelConnectionRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *CreateRigelConnectionRequest) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateRigelConnectionRequest) GetConnectionId() int64 {
	if o == nil || IsNil(o.ConnectionId.Get()) {
		var ret int64
		return ret
	}
	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRigelConnectionRequest) GetConnectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// HasConnectionId returns a boolean if a field has been set.
func (o *CreateRigelConnectionRequest) HasConnectionId() bool {
	if o != nil && o.ConnectionId.IsSet() {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given NullableInt64 and assigns it to the ConnectionId field.
func (o *CreateRigelConnectionRequest) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}
// SetConnectionIdNil sets the value for ConnectionId to be an explicit nil
func (o *CreateRigelConnectionRequest) SetConnectionIdNil() {
	o.ConnectionId.Set(nil)
}

// UnsetConnectionId ensures that no value is present for ConnectionId, not even an explicit nil
func (o *CreateRigelConnectionRequest) UnsetConnectionId() {
	o.ConnectionId.Unset()
}

// GetEnvType returns the EnvType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateRigelConnectionRequest) GetEnvType() string {
	if o == nil || IsNil(o.EnvType.Get()) {
		var ret string
		return ret
	}
	return *o.EnvType.Get()
}

// GetEnvTypeOk returns a tuple with the EnvType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateRigelConnectionRequest) GetEnvTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnvType.Get(), o.EnvType.IsSet()
}

// HasEnvType returns a boolean if a field has been set.
func (o *CreateRigelConnectionRequest) HasEnvType() bool {
	if o != nil && o.EnvType.IsSet() {
		return true
	}

	return false
}

// SetEnvType gets a reference to the given NullableString and assigns it to the EnvType field.
func (o *CreateRigelConnectionRequest) SetEnvType(v string) {
	o.EnvType.Set(&v)
}
// SetEnvTypeNil sets the value for EnvType to be an explicit nil
func (o *CreateRigelConnectionRequest) SetEnvTypeNil() {
	o.EnvType.Set(nil)
}

// UnsetEnvType ensures that no value is present for EnvType, not even an explicit nil
func (o *CreateRigelConnectionRequest) UnsetEnvType() {
	o.EnvType.Unset()
}

func (o CreateRigelConnectionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateRigelConnectionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name.Get()
	if o.Scalable.IsSet() {
		toSerialize["scalable"] = o.Scalable.Get()
	}
	toSerialize["tenantId"] = o.TenantId.Get()
	if o.ConnectionId.IsSet() {
		toSerialize["connectionId"] = o.ConnectionId.Get()
	}
	if o.EnvType.IsSet() {
		toSerialize["envType"] = o.EnvType.Get()
	}
	return toSerialize, nil
}

func (o *CreateRigelConnectionRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"tenantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateRigelConnectionRequest := _CreateRigelConnectionRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateRigelConnectionRequest)

	if err != nil {
		return err
	}

	*o = CreateRigelConnectionRequest(varCreateRigelConnectionRequest)

	return err
}

type NullableCreateRigelConnectionRequest struct {
	value *CreateRigelConnectionRequest
	isSet bool
}

func (v NullableCreateRigelConnectionRequest) Get() *CreateRigelConnectionRequest {
	return v.value
}

func (v *NullableCreateRigelConnectionRequest) Set(val *CreateRigelConnectionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateRigelConnectionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateRigelConnectionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateRigelConnectionRequest(val *CreateRigelConnectionRequest) *NullableCreateRigelConnectionRequest {
	return &NullableCreateRigelConnectionRequest{value: val, isSet: true}
}

func (v NullableCreateRigelConnectionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateRigelConnectionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


