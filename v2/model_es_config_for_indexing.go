/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ESConfigForIndexing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ESConfigForIndexing{}

// ESConfigForIndexing Elasticsearch config for indexing in AWS CE.
type ESConfigForIndexing struct {
	// Fully qualified ES domain name.
	EsDomain NullableString `json:"esDomain"`
	// IAM role ARN which has access to ES instance.
	EsIamRoleArn NullableString `json:"esIamRoleArn"`
}

type _ESConfigForIndexing ESConfigForIndexing

// NewESConfigForIndexing instantiates a new ESConfigForIndexing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewESConfigForIndexing(esDomain NullableString, esIamRoleArn NullableString) *ESConfigForIndexing {
	this := ESConfigForIndexing{}
	this.EsDomain = esDomain
	this.EsIamRoleArn = esIamRoleArn
	return &this
}

// NewESConfigForIndexingWithDefaults instantiates a new ESConfigForIndexing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewESConfigForIndexingWithDefaults() *ESConfigForIndexing {
	this := ESConfigForIndexing{}
	return &this
}

// GetEsDomain returns the EsDomain field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ESConfigForIndexing) GetEsDomain() string {
	if o == nil || o.EsDomain.Get() == nil {
		var ret string
		return ret
	}

	return *o.EsDomain.Get()
}

// GetEsDomainOk returns a tuple with the EsDomain field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ESConfigForIndexing) GetEsDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EsDomain.Get(), o.EsDomain.IsSet()
}

// SetEsDomain sets field value
func (o *ESConfigForIndexing) SetEsDomain(v string) {
	o.EsDomain.Set(&v)
}

// GetEsIamRoleArn returns the EsIamRoleArn field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ESConfigForIndexing) GetEsIamRoleArn() string {
	if o == nil || o.EsIamRoleArn.Get() == nil {
		var ret string
		return ret
	}

	return *o.EsIamRoleArn.Get()
}

// GetEsIamRoleArnOk returns a tuple with the EsIamRoleArn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ESConfigForIndexing) GetEsIamRoleArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EsIamRoleArn.Get(), o.EsIamRoleArn.IsSet()
}

// SetEsIamRoleArn sets field value
func (o *ESConfigForIndexing) SetEsIamRoleArn(v string) {
	o.EsIamRoleArn.Set(&v)
}

func (o ESConfigForIndexing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ESConfigForIndexing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["esDomain"] = o.EsDomain.Get()
	toSerialize["esIamRoleArn"] = o.EsIamRoleArn.Get()
	return toSerialize, nil
}

func (o *ESConfigForIndexing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"esDomain",
		"esIamRoleArn",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varESConfigForIndexing := _ESConfigForIndexing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varESConfigForIndexing)

	if err != nil {
		return err
	}

	*o = ESConfigForIndexing(varESConfigForIndexing)

	return err
}

type NullableESConfigForIndexing struct {
	value *ESConfigForIndexing
	isSet bool
}

func (v NullableESConfigForIndexing) Get() *ESConfigForIndexing {
	return v.value
}

func (v *NullableESConfigForIndexing) Set(val *ESConfigForIndexing) {
	v.value = val
	v.isSet = true
}

func (v NullableESConfigForIndexing) IsSet() bool {
	return v.isSet
}

func (v *NullableESConfigForIndexing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableESConfigForIndexing(val *ESConfigForIndexing) *NullableESConfigForIndexing {
	return &NullableESConfigForIndexing{value: val, isSet: true}
}

func (v NullableESConfigForIndexing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableESConfigForIndexing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


