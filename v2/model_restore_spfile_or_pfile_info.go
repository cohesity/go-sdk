/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RestoreSpfileOrPfileInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestoreSpfileOrPfileInfo{}

// RestoreSpfileOrPfileInfo Specifies information related to restoring Spfile/Pfile.
type RestoreSpfileOrPfileInfo struct {
	// Specifies the location where spfile/file will be restored. If this is empty and shouldRestoreSpfileOrPfile is true we restore at default location: $ORACLE_HOME/dbs
	FileLocation NullableString `json:"fileLocation,omitempty"`
	// Specifies whether to restore spfile/pfile or skip it.
	ShouldRestoreSpfileOrPfile NullableBool `json:"shouldRestoreSpfileOrPfile,omitempty"`
}

// NewRestoreSpfileOrPfileInfo instantiates a new RestoreSpfileOrPfileInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreSpfileOrPfileInfo() *RestoreSpfileOrPfileInfo {
	this := RestoreSpfileOrPfileInfo{}
	return &this
}

// NewRestoreSpfileOrPfileInfoWithDefaults instantiates a new RestoreSpfileOrPfileInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreSpfileOrPfileInfoWithDefaults() *RestoreSpfileOrPfileInfo {
	this := RestoreSpfileOrPfileInfo{}
	return &this
}

// GetFileLocation returns the FileLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSpfileOrPfileInfo) GetFileLocation() string {
	if o == nil || IsNil(o.FileLocation.Get()) {
		var ret string
		return ret
	}
	return *o.FileLocation.Get()
}

// GetFileLocationOk returns a tuple with the FileLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSpfileOrPfileInfo) GetFileLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileLocation.Get(), o.FileLocation.IsSet()
}

// HasFileLocation returns a boolean if a field has been set.
func (o *RestoreSpfileOrPfileInfo) HasFileLocation() bool {
	if o != nil && o.FileLocation.IsSet() {
		return true
	}

	return false
}

// SetFileLocation gets a reference to the given NullableString and assigns it to the FileLocation field.
func (o *RestoreSpfileOrPfileInfo) SetFileLocation(v string) {
	o.FileLocation.Set(&v)
}
// SetFileLocationNil sets the value for FileLocation to be an explicit nil
func (o *RestoreSpfileOrPfileInfo) SetFileLocationNil() {
	o.FileLocation.Set(nil)
}

// UnsetFileLocation ensures that no value is present for FileLocation, not even an explicit nil
func (o *RestoreSpfileOrPfileInfo) UnsetFileLocation() {
	o.FileLocation.Unset()
}

// GetShouldRestoreSpfileOrPfile returns the ShouldRestoreSpfileOrPfile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreSpfileOrPfileInfo) GetShouldRestoreSpfileOrPfile() bool {
	if o == nil || IsNil(o.ShouldRestoreSpfileOrPfile.Get()) {
		var ret bool
		return ret
	}
	return *o.ShouldRestoreSpfileOrPfile.Get()
}

// GetShouldRestoreSpfileOrPfileOk returns a tuple with the ShouldRestoreSpfileOrPfile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreSpfileOrPfileInfo) GetShouldRestoreSpfileOrPfileOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ShouldRestoreSpfileOrPfile.Get(), o.ShouldRestoreSpfileOrPfile.IsSet()
}

// HasShouldRestoreSpfileOrPfile returns a boolean if a field has been set.
func (o *RestoreSpfileOrPfileInfo) HasShouldRestoreSpfileOrPfile() bool {
	if o != nil && o.ShouldRestoreSpfileOrPfile.IsSet() {
		return true
	}

	return false
}

// SetShouldRestoreSpfileOrPfile gets a reference to the given NullableBool and assigns it to the ShouldRestoreSpfileOrPfile field.
func (o *RestoreSpfileOrPfileInfo) SetShouldRestoreSpfileOrPfile(v bool) {
	o.ShouldRestoreSpfileOrPfile.Set(&v)
}
// SetShouldRestoreSpfileOrPfileNil sets the value for ShouldRestoreSpfileOrPfile to be an explicit nil
func (o *RestoreSpfileOrPfileInfo) SetShouldRestoreSpfileOrPfileNil() {
	o.ShouldRestoreSpfileOrPfile.Set(nil)
}

// UnsetShouldRestoreSpfileOrPfile ensures that no value is present for ShouldRestoreSpfileOrPfile, not even an explicit nil
func (o *RestoreSpfileOrPfileInfo) UnsetShouldRestoreSpfileOrPfile() {
	o.ShouldRestoreSpfileOrPfile.Unset()
}

func (o RestoreSpfileOrPfileInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestoreSpfileOrPfileInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FileLocation.IsSet() {
		toSerialize["fileLocation"] = o.FileLocation.Get()
	}
	if o.ShouldRestoreSpfileOrPfile.IsSet() {
		toSerialize["shouldRestoreSpfileOrPfile"] = o.ShouldRestoreSpfileOrPfile.Get()
	}
	return toSerialize, nil
}

type NullableRestoreSpfileOrPfileInfo struct {
	value *RestoreSpfileOrPfileInfo
	isSet bool
}

func (v NullableRestoreSpfileOrPfileInfo) Get() *RestoreSpfileOrPfileInfo {
	return v.value
}

func (v *NullableRestoreSpfileOrPfileInfo) Set(val *RestoreSpfileOrPfileInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreSpfileOrPfileInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreSpfileOrPfileInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreSpfileOrPfileInfo(val *RestoreSpfileOrPfileInfo) *NullableRestoreSpfileOrPfileInfo {
	return &NullableRestoreSpfileOrPfileInfo{value: val, isSet: true}
}

func (v NullableRestoreSpfileOrPfileInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreSpfileOrPfileInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


