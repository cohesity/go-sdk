/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DocumentObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentObject{}

// DocumentObject Specifies a document to download using item id.
type DocumentObject struct {
	// Specifies whether the document is a directory. Since currently only files are supported this should always be false.
	IsDirectory NullableBool `json:"isDirectory,omitempty"`
	// Specifies the item id of the document.
	ItemId NullableString `json:"itemId"`
}

type _DocumentObject DocumentObject

// NewDocumentObject instantiates a new DocumentObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentObject(itemId NullableString) *DocumentObject {
	this := DocumentObject{}
	this.ItemId = itemId
	return &this
}

// NewDocumentObjectWithDefaults instantiates a new DocumentObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentObjectWithDefaults() *DocumentObject {
	this := DocumentObject{}
	return &this
}

// GetIsDirectory returns the IsDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DocumentObject) GetIsDirectory() bool {
	if o == nil || IsNil(o.IsDirectory.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDirectory.Get()
}

// GetIsDirectoryOk returns a tuple with the IsDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentObject) GetIsDirectoryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDirectory.Get(), o.IsDirectory.IsSet()
}

// HasIsDirectory returns a boolean if a field has been set.
func (o *DocumentObject) HasIsDirectory() bool {
	if o != nil && o.IsDirectory.IsSet() {
		return true
	}

	return false
}

// SetIsDirectory gets a reference to the given NullableBool and assigns it to the IsDirectory field.
func (o *DocumentObject) SetIsDirectory(v bool) {
	o.IsDirectory.Set(&v)
}
// SetIsDirectoryNil sets the value for IsDirectory to be an explicit nil
func (o *DocumentObject) SetIsDirectoryNil() {
	o.IsDirectory.Set(nil)
}

// UnsetIsDirectory ensures that no value is present for IsDirectory, not even an explicit nil
func (o *DocumentObject) UnsetIsDirectory() {
	o.IsDirectory.Unset()
}

// GetItemId returns the ItemId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DocumentObject) GetItemId() string {
	if o == nil || o.ItemId.Get() == nil {
		var ret string
		return ret
	}

	return *o.ItemId.Get()
}

// GetItemIdOk returns a tuple with the ItemId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DocumentObject) GetItemIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemId.Get(), o.ItemId.IsSet()
}

// SetItemId sets field value
func (o *DocumentObject) SetItemId(v string) {
	o.ItemId.Set(&v)
}

func (o DocumentObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IsDirectory.IsSet() {
		toSerialize["isDirectory"] = o.IsDirectory.Get()
	}
	toSerialize["itemId"] = o.ItemId.Get()
	return toSerialize, nil
}

func (o *DocumentObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"itemId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDocumentObject := _DocumentObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDocumentObject)

	if err != nil {
		return err
	}

	*o = DocumentObject(varDocumentObject)

	return err
}

type NullableDocumentObject struct {
	value *DocumentObject
	isSet bool
}

func (v NullableDocumentObject) Get() *DocumentObject {
	return v.value
}

func (v *NullableDocumentObject) Set(val *DocumentObject) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentObject) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentObject(val *DocumentObject) *NullableDocumentObject {
	return &NullableDocumentObject{value: val, isSet: true}
}

func (v NullableDocumentObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


