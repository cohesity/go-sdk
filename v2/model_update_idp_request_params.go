/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateIdpRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateIdpRequestParams{}

// UpdateIdpRequestParams Specifies parameters to update identity providers
type UpdateIdpRequestParams struct {
	// Specifies if local user login is allowed. When idp is configured, only idp users are allowed to login to the cluster, local login is disabled except for users with admin role. If this flag is set to true, local (non-idp) logins are allowed for all local and AD users. Local or AD users with admin role can login always independent of this flag's setting. By default there is no local authentication i.e the value is false.
	AllowLocalUserLogin NullableBool `json:"allowLocalUserLogin,omitempty"`
	// Specifies the certificate generated for the app by the idp service when the cluster is registered as an app. This is required to verify the SAML response.
	Certificate NullableString `json:"certificate"`
	// Specifies the filename used for the certificate. The default value is idp_certificate.pem
	CertificateFilename NullableString `json:"certificateFilename,omitempty"`
	// Specifies a flag to enable or disable this idp service. When it is set to true, idp service is enabled. When it is set to false, idp service is disabled. By defaut idp is enabled i.e the value is true.
	IsEnabled NullableBool `json:"isEnabled,omitempty"`
	// Specifies identity provider issuer id
	IssuerId NullableString `json:"issuerId"`
	// Specifies the default roles assined for all SSO users
	Roles []string `json:"roles,omitempty"`
	// Specifies the SAML attribute name that contains a comma separated list of cluster roles. This sets the default roles for all SSO users. Either this field or roles must be set, this field takes higher precedence than the roles field.
	SamlAttributeName NullableString `json:"samlAttributeName,omitempty"`
	// Specifies whether to sign the SAML request or not. When it is set to true, SAML request will be signed. When it is set to false, SAML request is not signed. Default is false, set this flag to true if the idp site is configured to expect the SAML request from the Cluster signed. If this is set to true, users must get the cluster's certificate and upload it on the idp site.
	SignRequest NullableBool `json:"signRequest,omitempty"`
	// Specifies the identity provider SSO url
	SsoUrl NullableString `json:"ssoUrl"`
}

type _UpdateIdpRequestParams UpdateIdpRequestParams

// NewUpdateIdpRequestParams instantiates a new UpdateIdpRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateIdpRequestParams(certificate NullableString, issuerId NullableString, ssoUrl NullableString) *UpdateIdpRequestParams {
	this := UpdateIdpRequestParams{}
	this.Certificate = certificate
	this.IssuerId = issuerId
	this.SsoUrl = ssoUrl
	return &this
}

// NewUpdateIdpRequestParamsWithDefaults instantiates a new UpdateIdpRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateIdpRequestParamsWithDefaults() *UpdateIdpRequestParams {
	this := UpdateIdpRequestParams{}
	return &this
}

// GetAllowLocalUserLogin returns the AllowLocalUserLogin field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateIdpRequestParams) GetAllowLocalUserLogin() bool {
	if o == nil || IsNil(o.AllowLocalUserLogin.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowLocalUserLogin.Get()
}

// GetAllowLocalUserLoginOk returns a tuple with the AllowLocalUserLogin field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateIdpRequestParams) GetAllowLocalUserLoginOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowLocalUserLogin.Get(), o.AllowLocalUserLogin.IsSet()
}

// HasAllowLocalUserLogin returns a boolean if a field has been set.
func (o *UpdateIdpRequestParams) HasAllowLocalUserLogin() bool {
	if o != nil && o.AllowLocalUserLogin.IsSet() {
		return true
	}

	return false
}

// SetAllowLocalUserLogin gets a reference to the given NullableBool and assigns it to the AllowLocalUserLogin field.
func (o *UpdateIdpRequestParams) SetAllowLocalUserLogin(v bool) {
	o.AllowLocalUserLogin.Set(&v)
}
// SetAllowLocalUserLoginNil sets the value for AllowLocalUserLogin to be an explicit nil
func (o *UpdateIdpRequestParams) SetAllowLocalUserLoginNil() {
	o.AllowLocalUserLogin.Set(nil)
}

// UnsetAllowLocalUserLogin ensures that no value is present for AllowLocalUserLogin, not even an explicit nil
func (o *UpdateIdpRequestParams) UnsetAllowLocalUserLogin() {
	o.AllowLocalUserLogin.Unset()
}

// GetCertificate returns the Certificate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateIdpRequestParams) GetCertificate() string {
	if o == nil || o.Certificate.Get() == nil {
		var ret string
		return ret
	}

	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateIdpRequestParams) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// SetCertificate sets field value
func (o *UpdateIdpRequestParams) SetCertificate(v string) {
	o.Certificate.Set(&v)
}

// GetCertificateFilename returns the CertificateFilename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateIdpRequestParams) GetCertificateFilename() string {
	if o == nil || IsNil(o.CertificateFilename.Get()) {
		var ret string
		return ret
	}
	return *o.CertificateFilename.Get()
}

// GetCertificateFilenameOk returns a tuple with the CertificateFilename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateIdpRequestParams) GetCertificateFilenameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CertificateFilename.Get(), o.CertificateFilename.IsSet()
}

// HasCertificateFilename returns a boolean if a field has been set.
func (o *UpdateIdpRequestParams) HasCertificateFilename() bool {
	if o != nil && o.CertificateFilename.IsSet() {
		return true
	}

	return false
}

// SetCertificateFilename gets a reference to the given NullableString and assigns it to the CertificateFilename field.
func (o *UpdateIdpRequestParams) SetCertificateFilename(v string) {
	o.CertificateFilename.Set(&v)
}
// SetCertificateFilenameNil sets the value for CertificateFilename to be an explicit nil
func (o *UpdateIdpRequestParams) SetCertificateFilenameNil() {
	o.CertificateFilename.Set(nil)
}

// UnsetCertificateFilename ensures that no value is present for CertificateFilename, not even an explicit nil
func (o *UpdateIdpRequestParams) UnsetCertificateFilename() {
	o.CertificateFilename.Unset()
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateIdpRequestParams) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateIdpRequestParams) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *UpdateIdpRequestParams) HasIsEnabled() bool {
	if o != nil && o.IsEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given NullableBool and assigns it to the IsEnabled field.
func (o *UpdateIdpRequestParams) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}
// SetIsEnabledNil sets the value for IsEnabled to be an explicit nil
func (o *UpdateIdpRequestParams) SetIsEnabledNil() {
	o.IsEnabled.Set(nil)
}

// UnsetIsEnabled ensures that no value is present for IsEnabled, not even an explicit nil
func (o *UpdateIdpRequestParams) UnsetIsEnabled() {
	o.IsEnabled.Unset()
}

// GetIssuerId returns the IssuerId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateIdpRequestParams) GetIssuerId() string {
	if o == nil || o.IssuerId.Get() == nil {
		var ret string
		return ret
	}

	return *o.IssuerId.Get()
}

// GetIssuerIdOk returns a tuple with the IssuerId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateIdpRequestParams) GetIssuerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IssuerId.Get(), o.IssuerId.IsSet()
}

// SetIssuerId sets field value
func (o *UpdateIdpRequestParams) SetIssuerId(v string) {
	o.IssuerId.Set(&v)
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateIdpRequestParams) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateIdpRequestParams) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UpdateIdpRequestParams) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UpdateIdpRequestParams) SetRoles(v []string) {
	o.Roles = v
}

// GetSamlAttributeName returns the SamlAttributeName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateIdpRequestParams) GetSamlAttributeName() string {
	if o == nil || IsNil(o.SamlAttributeName.Get()) {
		var ret string
		return ret
	}
	return *o.SamlAttributeName.Get()
}

// GetSamlAttributeNameOk returns a tuple with the SamlAttributeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateIdpRequestParams) GetSamlAttributeNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SamlAttributeName.Get(), o.SamlAttributeName.IsSet()
}

// HasSamlAttributeName returns a boolean if a field has been set.
func (o *UpdateIdpRequestParams) HasSamlAttributeName() bool {
	if o != nil && o.SamlAttributeName.IsSet() {
		return true
	}

	return false
}

// SetSamlAttributeName gets a reference to the given NullableString and assigns it to the SamlAttributeName field.
func (o *UpdateIdpRequestParams) SetSamlAttributeName(v string) {
	o.SamlAttributeName.Set(&v)
}
// SetSamlAttributeNameNil sets the value for SamlAttributeName to be an explicit nil
func (o *UpdateIdpRequestParams) SetSamlAttributeNameNil() {
	o.SamlAttributeName.Set(nil)
}

// UnsetSamlAttributeName ensures that no value is present for SamlAttributeName, not even an explicit nil
func (o *UpdateIdpRequestParams) UnsetSamlAttributeName() {
	o.SamlAttributeName.Unset()
}

// GetSignRequest returns the SignRequest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateIdpRequestParams) GetSignRequest() bool {
	if o == nil || IsNil(o.SignRequest.Get()) {
		var ret bool
		return ret
	}
	return *o.SignRequest.Get()
}

// GetSignRequestOk returns a tuple with the SignRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateIdpRequestParams) GetSignRequestOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SignRequest.Get(), o.SignRequest.IsSet()
}

// HasSignRequest returns a boolean if a field has been set.
func (o *UpdateIdpRequestParams) HasSignRequest() bool {
	if o != nil && o.SignRequest.IsSet() {
		return true
	}

	return false
}

// SetSignRequest gets a reference to the given NullableBool and assigns it to the SignRequest field.
func (o *UpdateIdpRequestParams) SetSignRequest(v bool) {
	o.SignRequest.Set(&v)
}
// SetSignRequestNil sets the value for SignRequest to be an explicit nil
func (o *UpdateIdpRequestParams) SetSignRequestNil() {
	o.SignRequest.Set(nil)
}

// UnsetSignRequest ensures that no value is present for SignRequest, not even an explicit nil
func (o *UpdateIdpRequestParams) UnsetSignRequest() {
	o.SignRequest.Unset()
}

// GetSsoUrl returns the SsoUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateIdpRequestParams) GetSsoUrl() string {
	if o == nil || o.SsoUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.SsoUrl.Get()
}

// GetSsoUrlOk returns a tuple with the SsoUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateIdpRequestParams) GetSsoUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SsoUrl.Get(), o.SsoUrl.IsSet()
}

// SetSsoUrl sets field value
func (o *UpdateIdpRequestParams) SetSsoUrl(v string) {
	o.SsoUrl.Set(&v)
}

func (o UpdateIdpRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateIdpRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowLocalUserLogin.IsSet() {
		toSerialize["allowLocalUserLogin"] = o.AllowLocalUserLogin.Get()
	}
	toSerialize["certificate"] = o.Certificate.Get()
	if o.CertificateFilename.IsSet() {
		toSerialize["certificateFilename"] = o.CertificateFilename.Get()
	}
	if o.IsEnabled.IsSet() {
		toSerialize["isEnabled"] = o.IsEnabled.Get()
	}
	toSerialize["issuerId"] = o.IssuerId.Get()
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.SamlAttributeName.IsSet() {
		toSerialize["samlAttributeName"] = o.SamlAttributeName.Get()
	}
	if o.SignRequest.IsSet() {
		toSerialize["signRequest"] = o.SignRequest.Get()
	}
	toSerialize["ssoUrl"] = o.SsoUrl.Get()
	return toSerialize, nil
}

func (o *UpdateIdpRequestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate",
		"issuerId",
		"ssoUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateIdpRequestParams := _UpdateIdpRequestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateIdpRequestParams)

	if err != nil {
		return err
	}

	*o = UpdateIdpRequestParams(varUpdateIdpRequestParams)

	return err
}

type NullableUpdateIdpRequestParams struct {
	value *UpdateIdpRequestParams
	isSet bool
}

func (v NullableUpdateIdpRequestParams) Get() *UpdateIdpRequestParams {
	return v.value
}

func (v *NullableUpdateIdpRequestParams) Set(val *UpdateIdpRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateIdpRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateIdpRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateIdpRequestParams(val *UpdateIdpRequestParams) *NullableUpdateIdpRequestParams {
	return &NullableUpdateIdpRequestParams{value: val, isSet: true}
}

func (v NullableUpdateIdpRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateIdpRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


