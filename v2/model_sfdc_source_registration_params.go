/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SfdcSourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SfdcSourceRegistrationParams{}

// SfdcSourceRegistrationParams Specifies parameters to register an SFDC Protection Source.
type SfdcSourceRegistrationParams struct {
	// Specifies the token that will be used for fetching oAuth tokens from salesforce.
	AuthToken NullableString `json:"authToken"`
	// Specifies the URL added in the connected apps Callback URL field. You can find this URL on the connected apps Manage Connected Apps page or from the connected apps definition. This value must be URL encoded.
	CallbackUrl NullableString `json:"callbackUrl,omitempty"`
	// Specifies the maximum number of concurrent API requests allowed for salesforce.
	ConcurrentApiRequestsLimit NullableInt64 `json:"concurrentApiRequestsLimit"`
	// Specifies Consumer key from the connected app in SFDC.
	ConsumerKey NullableString `json:"consumerKey"`
	// Specifies Consumer secret from the connected app in SFDC.
	ConsumerSecret NullableString `json:"consumerSecret"`
	// Specifies the maximum number of daily API requests allowed for salesforce.
	DailyApiLimit NullableInt64 `json:"dailyApiLimit"`
	// Specifies the SFDC endpoint URL.
	Endpoint NullableString `json:"endpoint"`
	// SFDC Endpoint type.
	EndpointType NullableString `json:"endpointType"`
	// Specifies the url to access salesforce metadata requests.
	MetadataEndpointUrl NullableString `json:"metadataEndpointUrl,omitempty"`
	// Specifies the password to access salesforce.
	Password NullableString `json:"password,omitempty"`
	// Specifies the url to access salesforce soap requests.
	SoapEndpointUrl NullableString `json:"soapEndpointUrl,omitempty"`
	// Specifies the username to access salesforce.
	Username NullableString `json:"username,omitempty"`
}

type _SfdcSourceRegistrationParams SfdcSourceRegistrationParams

// NewSfdcSourceRegistrationParams instantiates a new SfdcSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSfdcSourceRegistrationParams(authToken NullableString, concurrentApiRequestsLimit NullableInt64, consumerKey NullableString, consumerSecret NullableString, dailyApiLimit NullableInt64, endpoint NullableString, endpointType NullableString) *SfdcSourceRegistrationParams {
	this := SfdcSourceRegistrationParams{}
	this.AuthToken = authToken
	this.ConcurrentApiRequestsLimit = concurrentApiRequestsLimit
	this.ConsumerKey = consumerKey
	this.ConsumerSecret = consumerSecret
	this.DailyApiLimit = dailyApiLimit
	this.Endpoint = endpoint
	this.EndpointType = endpointType
	return &this
}

// NewSfdcSourceRegistrationParamsWithDefaults instantiates a new SfdcSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSfdcSourceRegistrationParamsWithDefaults() *SfdcSourceRegistrationParams {
	this := SfdcSourceRegistrationParams{}
	return &this
}

// GetAuthToken returns the AuthToken field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SfdcSourceRegistrationParams) GetAuthToken() string {
	if o == nil || o.AuthToken.Get() == nil {
		var ret string
		return ret
	}

	return *o.AuthToken.Get()
}

// GetAuthTokenOk returns a tuple with the AuthToken field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetAuthTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthToken.Get(), o.AuthToken.IsSet()
}

// SetAuthToken sets field value
func (o *SfdcSourceRegistrationParams) SetAuthToken(v string) {
	o.AuthToken.Set(&v)
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SfdcSourceRegistrationParams) GetCallbackUrl() string {
	if o == nil || IsNil(o.CallbackUrl.Get()) {
		var ret string
		return ret
	}
	return *o.CallbackUrl.Get()
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackUrl.Get(), o.CallbackUrl.IsSet()
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *SfdcSourceRegistrationParams) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl.IsSet() {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given NullableString and assigns it to the CallbackUrl field.
func (o *SfdcSourceRegistrationParams) SetCallbackUrl(v string) {
	o.CallbackUrl.Set(&v)
}
// SetCallbackUrlNil sets the value for CallbackUrl to be an explicit nil
func (o *SfdcSourceRegistrationParams) SetCallbackUrlNil() {
	o.CallbackUrl.Set(nil)
}

// UnsetCallbackUrl ensures that no value is present for CallbackUrl, not even an explicit nil
func (o *SfdcSourceRegistrationParams) UnsetCallbackUrl() {
	o.CallbackUrl.Unset()
}

// GetConcurrentApiRequestsLimit returns the ConcurrentApiRequestsLimit field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *SfdcSourceRegistrationParams) GetConcurrentApiRequestsLimit() int64 {
	if o == nil || o.ConcurrentApiRequestsLimit.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ConcurrentApiRequestsLimit.Get()
}

// GetConcurrentApiRequestsLimitOk returns a tuple with the ConcurrentApiRequestsLimit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetConcurrentApiRequestsLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConcurrentApiRequestsLimit.Get(), o.ConcurrentApiRequestsLimit.IsSet()
}

// SetConcurrentApiRequestsLimit sets field value
func (o *SfdcSourceRegistrationParams) SetConcurrentApiRequestsLimit(v int64) {
	o.ConcurrentApiRequestsLimit.Set(&v)
}

// GetConsumerKey returns the ConsumerKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SfdcSourceRegistrationParams) GetConsumerKey() string {
	if o == nil || o.ConsumerKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.ConsumerKey.Get()
}

// GetConsumerKeyOk returns a tuple with the ConsumerKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetConsumerKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConsumerKey.Get(), o.ConsumerKey.IsSet()
}

// SetConsumerKey sets field value
func (o *SfdcSourceRegistrationParams) SetConsumerKey(v string) {
	o.ConsumerKey.Set(&v)
}

// GetConsumerSecret returns the ConsumerSecret field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SfdcSourceRegistrationParams) GetConsumerSecret() string {
	if o == nil || o.ConsumerSecret.Get() == nil {
		var ret string
		return ret
	}

	return *o.ConsumerSecret.Get()
}

// GetConsumerSecretOk returns a tuple with the ConsumerSecret field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetConsumerSecretOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConsumerSecret.Get(), o.ConsumerSecret.IsSet()
}

// SetConsumerSecret sets field value
func (o *SfdcSourceRegistrationParams) SetConsumerSecret(v string) {
	o.ConsumerSecret.Set(&v)
}

// GetDailyApiLimit returns the DailyApiLimit field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *SfdcSourceRegistrationParams) GetDailyApiLimit() int64 {
	if o == nil || o.DailyApiLimit.Get() == nil {
		var ret int64
		return ret
	}

	return *o.DailyApiLimit.Get()
}

// GetDailyApiLimitOk returns a tuple with the DailyApiLimit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetDailyApiLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DailyApiLimit.Get(), o.DailyApiLimit.IsSet()
}

// SetDailyApiLimit sets field value
func (o *SfdcSourceRegistrationParams) SetDailyApiLimit(v int64) {
	o.DailyApiLimit.Set(&v)
}

// GetEndpoint returns the Endpoint field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SfdcSourceRegistrationParams) GetEndpoint() string {
	if o == nil || o.Endpoint.Get() == nil {
		var ret string
		return ret
	}

	return *o.Endpoint.Get()
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Endpoint.Get(), o.Endpoint.IsSet()
}

// SetEndpoint sets field value
func (o *SfdcSourceRegistrationParams) SetEndpoint(v string) {
	o.Endpoint.Set(&v)
}

// GetEndpointType returns the EndpointType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SfdcSourceRegistrationParams) GetEndpointType() string {
	if o == nil || o.EndpointType.Get() == nil {
		var ret string
		return ret
	}

	return *o.EndpointType.Get()
}

// GetEndpointTypeOk returns a tuple with the EndpointType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetEndpointTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndpointType.Get(), o.EndpointType.IsSet()
}

// SetEndpointType sets field value
func (o *SfdcSourceRegistrationParams) SetEndpointType(v string) {
	o.EndpointType.Set(&v)
}

// GetMetadataEndpointUrl returns the MetadataEndpointUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SfdcSourceRegistrationParams) GetMetadataEndpointUrl() string {
	if o == nil || IsNil(o.MetadataEndpointUrl.Get()) {
		var ret string
		return ret
	}
	return *o.MetadataEndpointUrl.Get()
}

// GetMetadataEndpointUrlOk returns a tuple with the MetadataEndpointUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetMetadataEndpointUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataEndpointUrl.Get(), o.MetadataEndpointUrl.IsSet()
}

// HasMetadataEndpointUrl returns a boolean if a field has been set.
func (o *SfdcSourceRegistrationParams) HasMetadataEndpointUrl() bool {
	if o != nil && o.MetadataEndpointUrl.IsSet() {
		return true
	}

	return false
}

// SetMetadataEndpointUrl gets a reference to the given NullableString and assigns it to the MetadataEndpointUrl field.
func (o *SfdcSourceRegistrationParams) SetMetadataEndpointUrl(v string) {
	o.MetadataEndpointUrl.Set(&v)
}
// SetMetadataEndpointUrlNil sets the value for MetadataEndpointUrl to be an explicit nil
func (o *SfdcSourceRegistrationParams) SetMetadataEndpointUrlNil() {
	o.MetadataEndpointUrl.Set(nil)
}

// UnsetMetadataEndpointUrl ensures that no value is present for MetadataEndpointUrl, not even an explicit nil
func (o *SfdcSourceRegistrationParams) UnsetMetadataEndpointUrl() {
	o.MetadataEndpointUrl.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SfdcSourceRegistrationParams) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *SfdcSourceRegistrationParams) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *SfdcSourceRegistrationParams) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *SfdcSourceRegistrationParams) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *SfdcSourceRegistrationParams) UnsetPassword() {
	o.Password.Unset()
}

// GetSoapEndpointUrl returns the SoapEndpointUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SfdcSourceRegistrationParams) GetSoapEndpointUrl() string {
	if o == nil || IsNil(o.SoapEndpointUrl.Get()) {
		var ret string
		return ret
	}
	return *o.SoapEndpointUrl.Get()
}

// GetSoapEndpointUrlOk returns a tuple with the SoapEndpointUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetSoapEndpointUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SoapEndpointUrl.Get(), o.SoapEndpointUrl.IsSet()
}

// HasSoapEndpointUrl returns a boolean if a field has been set.
func (o *SfdcSourceRegistrationParams) HasSoapEndpointUrl() bool {
	if o != nil && o.SoapEndpointUrl.IsSet() {
		return true
	}

	return false
}

// SetSoapEndpointUrl gets a reference to the given NullableString and assigns it to the SoapEndpointUrl field.
func (o *SfdcSourceRegistrationParams) SetSoapEndpointUrl(v string) {
	o.SoapEndpointUrl.Set(&v)
}
// SetSoapEndpointUrlNil sets the value for SoapEndpointUrl to be an explicit nil
func (o *SfdcSourceRegistrationParams) SetSoapEndpointUrlNil() {
	o.SoapEndpointUrl.Set(nil)
}

// UnsetSoapEndpointUrl ensures that no value is present for SoapEndpointUrl, not even an explicit nil
func (o *SfdcSourceRegistrationParams) UnsetSoapEndpointUrl() {
	o.SoapEndpointUrl.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SfdcSourceRegistrationParams) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SfdcSourceRegistrationParams) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *SfdcSourceRegistrationParams) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *SfdcSourceRegistrationParams) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *SfdcSourceRegistrationParams) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *SfdcSourceRegistrationParams) UnsetUsername() {
	o.Username.Unset()
}

func (o SfdcSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SfdcSourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authToken"] = o.AuthToken.Get()
	if o.CallbackUrl.IsSet() {
		toSerialize["callbackUrl"] = o.CallbackUrl.Get()
	}
	toSerialize["concurrentApiRequestsLimit"] = o.ConcurrentApiRequestsLimit.Get()
	toSerialize["consumerKey"] = o.ConsumerKey.Get()
	toSerialize["consumerSecret"] = o.ConsumerSecret.Get()
	toSerialize["dailyApiLimit"] = o.DailyApiLimit.Get()
	toSerialize["endpoint"] = o.Endpoint.Get()
	toSerialize["endpointType"] = o.EndpointType.Get()
	if o.MetadataEndpointUrl.IsSet() {
		toSerialize["metadataEndpointUrl"] = o.MetadataEndpointUrl.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.SoapEndpointUrl.IsSet() {
		toSerialize["soapEndpointUrl"] = o.SoapEndpointUrl.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return toSerialize, nil
}

func (o *SfdcSourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authToken",
		"concurrentApiRequestsLimit",
		"consumerKey",
		"consumerSecret",
		"dailyApiLimit",
		"endpoint",
		"endpointType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSfdcSourceRegistrationParams := _SfdcSourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSfdcSourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = SfdcSourceRegistrationParams(varSfdcSourceRegistrationParams)

	return err
}

type NullableSfdcSourceRegistrationParams struct {
	value *SfdcSourceRegistrationParams
	isSet bool
}

func (v NullableSfdcSourceRegistrationParams) Get() *SfdcSourceRegistrationParams {
	return v.value
}

func (v *NullableSfdcSourceRegistrationParams) Set(val *SfdcSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSfdcSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSfdcSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSfdcSourceRegistrationParams(val *SfdcSourceRegistrationParams) *NullableSfdcSourceRegistrationParams {
	return &NullableSfdcSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableSfdcSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSfdcSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


