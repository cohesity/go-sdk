/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeAssessmentResults type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeAssessmentResults{}

// NodeAssessmentResults Results of assessment tests for a node
type NodeAssessmentResults struct {
	// Specifies the ID of the node.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the IP address of the node.
	Ip NullableString `json:"ip,omitempty"`
	// Specifies the test results for node.
	Results []AssessmentTestResult `json:"results,omitempty"`
	// Specifies the test run status for node.
	Status *string `json:"status,omitempty"`
}

// NewNodeAssessmentResults instantiates a new NodeAssessmentResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeAssessmentResults() *NodeAssessmentResults {
	this := NodeAssessmentResults{}
	return &this
}

// NewNodeAssessmentResultsWithDefaults instantiates a new NodeAssessmentResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeAssessmentResultsWithDefaults() *NodeAssessmentResults {
	this := NodeAssessmentResults{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeAssessmentResults) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeAssessmentResults) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NodeAssessmentResults) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *NodeAssessmentResults) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NodeAssessmentResults) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NodeAssessmentResults) UnsetId() {
	o.Id.Unset()
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeAssessmentResults) GetIp() string {
	if o == nil || IsNil(o.Ip.Get()) {
		var ret string
		return ret
	}
	return *o.Ip.Get()
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeAssessmentResults) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ip.Get(), o.Ip.IsSet()
}

// HasIp returns a boolean if a field has been set.
func (o *NodeAssessmentResults) HasIp() bool {
	if o != nil && o.Ip.IsSet() {
		return true
	}

	return false
}

// SetIp gets a reference to the given NullableString and assigns it to the Ip field.
func (o *NodeAssessmentResults) SetIp(v string) {
	o.Ip.Set(&v)
}
// SetIpNil sets the value for Ip to be an explicit nil
func (o *NodeAssessmentResults) SetIpNil() {
	o.Ip.Set(nil)
}

// UnsetIp ensures that no value is present for Ip, not even an explicit nil
func (o *NodeAssessmentResults) UnsetIp() {
	o.Ip.Unset()
}

// GetResults returns the Results field value if set, zero value otherwise.
func (o *NodeAssessmentResults) GetResults() []AssessmentTestResult {
	if o == nil || IsNil(o.Results) {
		var ret []AssessmentTestResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeAssessmentResults) GetResultsOk() ([]AssessmentTestResult, bool) {
	if o == nil || IsNil(o.Results) {
		return nil, false
	}
	return o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *NodeAssessmentResults) HasResults() bool {
	if o != nil && !IsNil(o.Results) {
		return true
	}

	return false
}

// SetResults gets a reference to the given []AssessmentTestResult and assigns it to the Results field.
func (o *NodeAssessmentResults) SetResults(v []AssessmentTestResult) {
	o.Results = v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *NodeAssessmentResults) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeAssessmentResults) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *NodeAssessmentResults) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *NodeAssessmentResults) SetStatus(v string) {
	o.Status = &v
}

func (o NodeAssessmentResults) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeAssessmentResults) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Ip.IsSet() {
		toSerialize["ip"] = o.Ip.Get()
	}
	if !IsNil(o.Results) {
		toSerialize["results"] = o.Results
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableNodeAssessmentResults struct {
	value *NodeAssessmentResults
	isSet bool
}

func (v NullableNodeAssessmentResults) Get() *NodeAssessmentResults {
	return v.value
}

func (v *NullableNodeAssessmentResults) Set(val *NodeAssessmentResults) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeAssessmentResults) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeAssessmentResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeAssessmentResults(val *NodeAssessmentResults) *NullableNodeAssessmentResults {
	return &NullableNodeAssessmentResults{value: val, isSet: true}
}

func (v NullableNodeAssessmentResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeAssessmentResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


