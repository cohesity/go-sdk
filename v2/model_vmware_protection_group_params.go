/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the VmwareProtectionGroupParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmwareProtectionGroupParams{}

// VmwareProtectionGroupParams Specifies the parameters which are specific to VMware related Protection Groups.
type VmwareProtectionGroupParams struct {
	// Specifies whether or not to quiesce apps and the file system in order to take app consistent snapshots.
	AppConsistentSnapshot NullableBool `json:"appConsistentSnapshot,omitempty"`
	// If this field is set to true and SAN transport backup fails, then backup will fallback to use NBDSSL transport. This field only applies if 'leverageSanTransport' is set to true.
	EnableNBDSSLFallback NullableBool `json:"enableNBDSSLFallback,omitempty"`
	// Specifies whether or not to fallback to a crash consistent snapshot in the event that an app consistent snapshot fails. This parameter defaults to true and only changes the behavior of the operation if 'appConsistentSnapshot' is set to 'true'.
	FallbackToCrashConsistentSnapshot NullableBool `json:"fallbackToCrashConsistentSnapshot,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	// If this field is set to true, then the backup for the objects will be performed using dedicated storage area network (SAN) instead of LAN or managment network.
	LeverageSanTransport NullableBool `json:"leverageSanTransport,omitempty"`
	PrePostScript *PrePostScriptParams `json:"prePostScript,omitempty"`
	// Specifies whether or not to skip backing up physical RDM disks. Physical RDM disks cannot be backed up, so if you attempt to backup a VM with physical RDM disks and this value is set to 'false', then those VM backups will fail.
	SkipPhysicalRDMDisks NullableBool `json:"skipPhysicalRDMDisks,omitempty"`
	// Specifies whether or not this job can have parallel runs.
	AllowParallelRuns NullableBool `json:"allowParallelRuns,omitempty"`
	// Specifies whether or not to move the workload to the cloud.
	CloudMigration NullableBool `json:"cloudMigration,omitempty"`
	// Specifies the list of exclusion filters applied during the group creation or edit. These exclusion filters can be wildcard supported strings or regular expressions. Objects satisfying these filters will be excluded during backup and also auto protected objects will be ignored if filtered by any of the filters.
	ExcludeFilters []VMFilter `json:"excludeFilters,omitempty"`
	// Specifies the list of IDs of the objects to not be protected in this backup. This field only applies if provided object id is non leaf entity such as Tag or a folder. This can be used to ignore specific objects under a parent object which has been included for protection.
	ExcludeObjectIds []*int64 `json:"excludeObjectIds,omitempty"`
	// Array of Arrays of VM Tag Ids that Specify VMs to Exclude. Optionally specify a list of VMs to exclude from protecting by listing Protection Source ids of VM Tags in this two dimensional array. Using this two dimensional array of Tag ids, the Cluster generates a list of VMs to exclude from protecting, which are derived from intersections of the inner arrays and union of the outer array, as shown by the following example. For example a Datacenter is selected to be protected but you want to exclude all the 'Former Employees' VMs in the East and West but keep all the VMs for 'Former Employees' in the South which are also stored in this Datacenter, by specifying the following tag id array: [ [1000, 2221], [1000, 3031] ], where 1000 is the 'Former Employee' VM Tag id, 2221 is the 'East' VM Tag id and 3031 is the 'West' VM Tag id. The first inner array [1000, 2221] produces a list of VMs that are both tagged with 'Former Employees' and 'East' (an intersection). The second inner array [1000, 3031] produces a list of VMs that are both tagged with 'Former Employees' and 'West' (an intersection). The outer array combines the list of VMs from the two inner arrays. The list of resulting VMs are excluded from being protected this Job.
	ExcludeVmTagIds [][]int64 `json:"excludeVmTagIds,omitempty"`
	// Whether to leverage the hyperflex based snapshots for this backup. To leverage hyperflex snapshots, it has to first be registered. If hyperflex based snapshots cannot be taken, backup will fallback to the default backup method.
	LeverageHyperflexSnapshots NullableBool `json:"leverageHyperflexSnapshots,omitempty"`
	// Whether to leverage the nutanix based snapshots for this backup. To leverage nutanix snapshots, it has to first be registered. If nutanix based snapshots cannot be taken, backup will fallback to the default backup method.
	LeverageNutanixSnapshots NullableBool `json:"leverageNutanixSnapshots,omitempty"`
	// Whether to leverage the storage array based snapshots for this backup. To leverage storage snapshots, the storage array has to be registered as a source. If storage based snapshots can not be taken, backup will fallback to the default backup method.
	LeverageStorageSnapshots NullableBool `json:"leverageStorageSnapshots,omitempty"`
	// Specifies the id of the parent of the objects.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Specifies the name of the parent of the objects.
	SourceName NullableString `json:"sourceName,omitempty"`
	// Array of Array of VM Tag Ids that Specify VMs to Protect. Optionally specify a list of VMs to protect by listing Protection Source ids of VM Tags in this two dimensional array. Using this two dimensional array of Tag ids, the Cluster generates a list of VMs to protect which are derived from intersections of the inner arrays and union of the outer array, as shown by the following example. To protect only 'Eng' VMs in the East and all the VMs in the West, specify the following tag id array: [ [1101, 2221], [3031] ], where 1101 is the 'Eng' VM Tag id, 2221 is the 'East' VM Tag id and 3031 is the 'West' VM Tag id. The inner array [1101, 2221] produces a list of VMs that are both tagged with 'Eng' and 'East' (an intersection). The outer array combines the list from the inner array with list of VMs tagged with 'West' (a union). The list of resulting VMs are protected by this Protection Group.
	VmTagIds [][]int64 `json:"vmTagIds,omitempty"`
	// Specifies whether synchronous replication is enabled for CDP Protection Group when replication target is specified in attached policy.
	EnableCdpSyncReplication NullableBool `json:"enableCdpSyncReplication,omitempty"`
	// Specifies a list of disks to exclude from the backup.
	GlobalExcludeDisks []DiskInfo `json:"globalExcludeDisks,omitempty"`
	// Specifies the objects to include in the backup.
	Objects []VmwareProtectionGroupObjectParams `json:"objects,omitempty"`
	// Specifies the standby resource objects for this backup.
	StandbyResourceObjects []VmwareProtectionGroupStandbyResourceParams `json:"standbyResourceObjects,omitempty"`
}

// NewVmwareProtectionGroupParams instantiates a new VmwareProtectionGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareProtectionGroupParams() *VmwareProtectionGroupParams {
	this := VmwareProtectionGroupParams{}
	return &this
}

// NewVmwareProtectionGroupParamsWithDefaults instantiates a new VmwareProtectionGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareProtectionGroupParamsWithDefaults() *VmwareProtectionGroupParams {
	this := VmwareProtectionGroupParams{}
	return &this
}

// GetAppConsistentSnapshot returns the AppConsistentSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetAppConsistentSnapshot() bool {
	if o == nil || IsNil(o.AppConsistentSnapshot.Get()) {
		var ret bool
		return ret
	}
	return *o.AppConsistentSnapshot.Get()
}

// GetAppConsistentSnapshotOk returns a tuple with the AppConsistentSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetAppConsistentSnapshotOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AppConsistentSnapshot.Get(), o.AppConsistentSnapshot.IsSet()
}

// HasAppConsistentSnapshot returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasAppConsistentSnapshot() bool {
	if o != nil && o.AppConsistentSnapshot.IsSet() {
		return true
	}

	return false
}

// SetAppConsistentSnapshot gets a reference to the given NullableBool and assigns it to the AppConsistentSnapshot field.
func (o *VmwareProtectionGroupParams) SetAppConsistentSnapshot(v bool) {
	o.AppConsistentSnapshot.Set(&v)
}
// SetAppConsistentSnapshotNil sets the value for AppConsistentSnapshot to be an explicit nil
func (o *VmwareProtectionGroupParams) SetAppConsistentSnapshotNil() {
	o.AppConsistentSnapshot.Set(nil)
}

// UnsetAppConsistentSnapshot ensures that no value is present for AppConsistentSnapshot, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetAppConsistentSnapshot() {
	o.AppConsistentSnapshot.Unset()
}

// GetEnableNBDSSLFallback returns the EnableNBDSSLFallback field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetEnableNBDSSLFallback() bool {
	if o == nil || IsNil(o.EnableNBDSSLFallback.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableNBDSSLFallback.Get()
}

// GetEnableNBDSSLFallbackOk returns a tuple with the EnableNBDSSLFallback field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetEnableNBDSSLFallbackOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableNBDSSLFallback.Get(), o.EnableNBDSSLFallback.IsSet()
}

// HasEnableNBDSSLFallback returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasEnableNBDSSLFallback() bool {
	if o != nil && o.EnableNBDSSLFallback.IsSet() {
		return true
	}

	return false
}

// SetEnableNBDSSLFallback gets a reference to the given NullableBool and assigns it to the EnableNBDSSLFallback field.
func (o *VmwareProtectionGroupParams) SetEnableNBDSSLFallback(v bool) {
	o.EnableNBDSSLFallback.Set(&v)
}
// SetEnableNBDSSLFallbackNil sets the value for EnableNBDSSLFallback to be an explicit nil
func (o *VmwareProtectionGroupParams) SetEnableNBDSSLFallbackNil() {
	o.EnableNBDSSLFallback.Set(nil)
}

// UnsetEnableNBDSSLFallback ensures that no value is present for EnableNBDSSLFallback, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetEnableNBDSSLFallback() {
	o.EnableNBDSSLFallback.Unset()
}

// GetFallbackToCrashConsistentSnapshot returns the FallbackToCrashConsistentSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetFallbackToCrashConsistentSnapshot() bool {
	if o == nil || IsNil(o.FallbackToCrashConsistentSnapshot.Get()) {
		var ret bool
		return ret
	}
	return *o.FallbackToCrashConsistentSnapshot.Get()
}

// GetFallbackToCrashConsistentSnapshotOk returns a tuple with the FallbackToCrashConsistentSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetFallbackToCrashConsistentSnapshotOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FallbackToCrashConsistentSnapshot.Get(), o.FallbackToCrashConsistentSnapshot.IsSet()
}

// HasFallbackToCrashConsistentSnapshot returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasFallbackToCrashConsistentSnapshot() bool {
	if o != nil && o.FallbackToCrashConsistentSnapshot.IsSet() {
		return true
	}

	return false
}

// SetFallbackToCrashConsistentSnapshot gets a reference to the given NullableBool and assigns it to the FallbackToCrashConsistentSnapshot field.
func (o *VmwareProtectionGroupParams) SetFallbackToCrashConsistentSnapshot(v bool) {
	o.FallbackToCrashConsistentSnapshot.Set(&v)
}
// SetFallbackToCrashConsistentSnapshotNil sets the value for FallbackToCrashConsistentSnapshot to be an explicit nil
func (o *VmwareProtectionGroupParams) SetFallbackToCrashConsistentSnapshotNil() {
	o.FallbackToCrashConsistentSnapshot.Set(nil)
}

// UnsetFallbackToCrashConsistentSnapshot ensures that no value is present for FallbackToCrashConsistentSnapshot, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetFallbackToCrashConsistentSnapshot() {
	o.FallbackToCrashConsistentSnapshot.Unset()
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *VmwareProtectionGroupParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || IsNil(o.IndexingPolicy) {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareProtectionGroupParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || IsNil(o.IndexingPolicy) {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasIndexingPolicy() bool {
	if o != nil && !IsNil(o.IndexingPolicy) {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *VmwareProtectionGroupParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetLeverageSanTransport returns the LeverageSanTransport field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetLeverageSanTransport() bool {
	if o == nil || IsNil(o.LeverageSanTransport.Get()) {
		var ret bool
		return ret
	}
	return *o.LeverageSanTransport.Get()
}

// GetLeverageSanTransportOk returns a tuple with the LeverageSanTransport field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetLeverageSanTransportOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeverageSanTransport.Get(), o.LeverageSanTransport.IsSet()
}

// HasLeverageSanTransport returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasLeverageSanTransport() bool {
	if o != nil && o.LeverageSanTransport.IsSet() {
		return true
	}

	return false
}

// SetLeverageSanTransport gets a reference to the given NullableBool and assigns it to the LeverageSanTransport field.
func (o *VmwareProtectionGroupParams) SetLeverageSanTransport(v bool) {
	o.LeverageSanTransport.Set(&v)
}
// SetLeverageSanTransportNil sets the value for LeverageSanTransport to be an explicit nil
func (o *VmwareProtectionGroupParams) SetLeverageSanTransportNil() {
	o.LeverageSanTransport.Set(nil)
}

// UnsetLeverageSanTransport ensures that no value is present for LeverageSanTransport, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetLeverageSanTransport() {
	o.LeverageSanTransport.Unset()
}

// GetPrePostScript returns the PrePostScript field value if set, zero value otherwise.
func (o *VmwareProtectionGroupParams) GetPrePostScript() PrePostScriptParams {
	if o == nil || IsNil(o.PrePostScript) {
		var ret PrePostScriptParams
		return ret
	}
	return *o.PrePostScript
}

// GetPrePostScriptOk returns a tuple with the PrePostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareProtectionGroupParams) GetPrePostScriptOk() (*PrePostScriptParams, bool) {
	if o == nil || IsNil(o.PrePostScript) {
		return nil, false
	}
	return o.PrePostScript, true
}

// HasPrePostScript returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasPrePostScript() bool {
	if o != nil && !IsNil(o.PrePostScript) {
		return true
	}

	return false
}

// SetPrePostScript gets a reference to the given PrePostScriptParams and assigns it to the PrePostScript field.
func (o *VmwareProtectionGroupParams) SetPrePostScript(v PrePostScriptParams) {
	o.PrePostScript = &v
}

// GetSkipPhysicalRDMDisks returns the SkipPhysicalRDMDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetSkipPhysicalRDMDisks() bool {
	if o == nil || IsNil(o.SkipPhysicalRDMDisks.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipPhysicalRDMDisks.Get()
}

// GetSkipPhysicalRDMDisksOk returns a tuple with the SkipPhysicalRDMDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetSkipPhysicalRDMDisksOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipPhysicalRDMDisks.Get(), o.SkipPhysicalRDMDisks.IsSet()
}

// HasSkipPhysicalRDMDisks returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasSkipPhysicalRDMDisks() bool {
	if o != nil && o.SkipPhysicalRDMDisks.IsSet() {
		return true
	}

	return false
}

// SetSkipPhysicalRDMDisks gets a reference to the given NullableBool and assigns it to the SkipPhysicalRDMDisks field.
func (o *VmwareProtectionGroupParams) SetSkipPhysicalRDMDisks(v bool) {
	o.SkipPhysicalRDMDisks.Set(&v)
}
// SetSkipPhysicalRDMDisksNil sets the value for SkipPhysicalRDMDisks to be an explicit nil
func (o *VmwareProtectionGroupParams) SetSkipPhysicalRDMDisksNil() {
	o.SkipPhysicalRDMDisks.Set(nil)
}

// UnsetSkipPhysicalRDMDisks ensures that no value is present for SkipPhysicalRDMDisks, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetSkipPhysicalRDMDisks() {
	o.SkipPhysicalRDMDisks.Unset()
}

// GetAllowParallelRuns returns the AllowParallelRuns field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetAllowParallelRuns() bool {
	if o == nil || IsNil(o.AllowParallelRuns.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowParallelRuns.Get()
}

// GetAllowParallelRunsOk returns a tuple with the AllowParallelRuns field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetAllowParallelRunsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowParallelRuns.Get(), o.AllowParallelRuns.IsSet()
}

// HasAllowParallelRuns returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasAllowParallelRuns() bool {
	if o != nil && o.AllowParallelRuns.IsSet() {
		return true
	}

	return false
}

// SetAllowParallelRuns gets a reference to the given NullableBool and assigns it to the AllowParallelRuns field.
func (o *VmwareProtectionGroupParams) SetAllowParallelRuns(v bool) {
	o.AllowParallelRuns.Set(&v)
}
// SetAllowParallelRunsNil sets the value for AllowParallelRuns to be an explicit nil
func (o *VmwareProtectionGroupParams) SetAllowParallelRunsNil() {
	o.AllowParallelRuns.Set(nil)
}

// UnsetAllowParallelRuns ensures that no value is present for AllowParallelRuns, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetAllowParallelRuns() {
	o.AllowParallelRuns.Unset()
}

// GetCloudMigration returns the CloudMigration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetCloudMigration() bool {
	if o == nil || IsNil(o.CloudMigration.Get()) {
		var ret bool
		return ret
	}
	return *o.CloudMigration.Get()
}

// GetCloudMigrationOk returns a tuple with the CloudMigration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetCloudMigrationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudMigration.Get(), o.CloudMigration.IsSet()
}

// HasCloudMigration returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasCloudMigration() bool {
	if o != nil && o.CloudMigration.IsSet() {
		return true
	}

	return false
}

// SetCloudMigration gets a reference to the given NullableBool and assigns it to the CloudMigration field.
func (o *VmwareProtectionGroupParams) SetCloudMigration(v bool) {
	o.CloudMigration.Set(&v)
}
// SetCloudMigrationNil sets the value for CloudMigration to be an explicit nil
func (o *VmwareProtectionGroupParams) SetCloudMigrationNil() {
	o.CloudMigration.Set(nil)
}

// UnsetCloudMigration ensures that no value is present for CloudMigration, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetCloudMigration() {
	o.CloudMigration.Unset()
}

// GetExcludeFilters returns the ExcludeFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetExcludeFilters() []VMFilter {
	if o == nil {
		var ret []VMFilter
		return ret
	}
	return o.ExcludeFilters
}

// GetExcludeFiltersOk returns a tuple with the ExcludeFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetExcludeFiltersOk() ([]VMFilter, bool) {
	if o == nil || IsNil(o.ExcludeFilters) {
		return nil, false
	}
	return o.ExcludeFilters, true
}

// HasExcludeFilters returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasExcludeFilters() bool {
	if o != nil && !IsNil(o.ExcludeFilters) {
		return true
	}

	return false
}

// SetExcludeFilters gets a reference to the given []VMFilter and assigns it to the ExcludeFilters field.
func (o *VmwareProtectionGroupParams) SetExcludeFilters(v []VMFilter) {
	o.ExcludeFilters = v
}

// GetExcludeObjectIds returns the ExcludeObjectIds field value if set, zero value otherwise.
func (o *VmwareProtectionGroupParams) GetExcludeObjectIds() []*int64 {
	if o == nil || IsNil(o.ExcludeObjectIds) {
		var ret []*int64
		return ret
	}
	return o.ExcludeObjectIds
}

// GetExcludeObjectIdsOk returns a tuple with the ExcludeObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareProtectionGroupParams) GetExcludeObjectIdsOk() ([]*int64, bool) {
	if o == nil || IsNil(o.ExcludeObjectIds) {
		return nil, false
	}
	return o.ExcludeObjectIds, true
}

// HasExcludeObjectIds returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasExcludeObjectIds() bool {
	if o != nil && !IsNil(o.ExcludeObjectIds) {
		return true
	}

	return false
}

// SetExcludeObjectIds gets a reference to the given []*int64 and assigns it to the ExcludeObjectIds field.
func (o *VmwareProtectionGroupParams) SetExcludeObjectIds(v []*int64) {
	o.ExcludeObjectIds = v
}

// GetExcludeVmTagIds returns the ExcludeVmTagIds field value if set, zero value otherwise.
func (o *VmwareProtectionGroupParams) GetExcludeVmTagIds() [][]int64 {
	if o == nil || IsNil(o.ExcludeVmTagIds) {
		var ret [][]int64
		return ret
	}
	return o.ExcludeVmTagIds
}

// GetExcludeVmTagIdsOk returns a tuple with the ExcludeVmTagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareProtectionGroupParams) GetExcludeVmTagIdsOk() ([][]int64, bool) {
	if o == nil || IsNil(o.ExcludeVmTagIds) {
		return nil, false
	}
	return o.ExcludeVmTagIds, true
}

// HasExcludeVmTagIds returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasExcludeVmTagIds() bool {
	if o != nil && !IsNil(o.ExcludeVmTagIds) {
		return true
	}

	return false
}

// SetExcludeVmTagIds gets a reference to the given [][]int64 and assigns it to the ExcludeVmTagIds field.
func (o *VmwareProtectionGroupParams) SetExcludeVmTagIds(v [][]int64) {
	o.ExcludeVmTagIds = v
}

// GetLeverageHyperflexSnapshots returns the LeverageHyperflexSnapshots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetLeverageHyperflexSnapshots() bool {
	if o == nil || IsNil(o.LeverageHyperflexSnapshots.Get()) {
		var ret bool
		return ret
	}
	return *o.LeverageHyperflexSnapshots.Get()
}

// GetLeverageHyperflexSnapshotsOk returns a tuple with the LeverageHyperflexSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetLeverageHyperflexSnapshotsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeverageHyperflexSnapshots.Get(), o.LeverageHyperflexSnapshots.IsSet()
}

// HasLeverageHyperflexSnapshots returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasLeverageHyperflexSnapshots() bool {
	if o != nil && o.LeverageHyperflexSnapshots.IsSet() {
		return true
	}

	return false
}

// SetLeverageHyperflexSnapshots gets a reference to the given NullableBool and assigns it to the LeverageHyperflexSnapshots field.
func (o *VmwareProtectionGroupParams) SetLeverageHyperflexSnapshots(v bool) {
	o.LeverageHyperflexSnapshots.Set(&v)
}
// SetLeverageHyperflexSnapshotsNil sets the value for LeverageHyperflexSnapshots to be an explicit nil
func (o *VmwareProtectionGroupParams) SetLeverageHyperflexSnapshotsNil() {
	o.LeverageHyperflexSnapshots.Set(nil)
}

// UnsetLeverageHyperflexSnapshots ensures that no value is present for LeverageHyperflexSnapshots, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetLeverageHyperflexSnapshots() {
	o.LeverageHyperflexSnapshots.Unset()
}

// GetLeverageNutanixSnapshots returns the LeverageNutanixSnapshots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetLeverageNutanixSnapshots() bool {
	if o == nil || IsNil(o.LeverageNutanixSnapshots.Get()) {
		var ret bool
		return ret
	}
	return *o.LeverageNutanixSnapshots.Get()
}

// GetLeverageNutanixSnapshotsOk returns a tuple with the LeverageNutanixSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetLeverageNutanixSnapshotsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeverageNutanixSnapshots.Get(), o.LeverageNutanixSnapshots.IsSet()
}

// HasLeverageNutanixSnapshots returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasLeverageNutanixSnapshots() bool {
	if o != nil && o.LeverageNutanixSnapshots.IsSet() {
		return true
	}

	return false
}

// SetLeverageNutanixSnapshots gets a reference to the given NullableBool and assigns it to the LeverageNutanixSnapshots field.
func (o *VmwareProtectionGroupParams) SetLeverageNutanixSnapshots(v bool) {
	o.LeverageNutanixSnapshots.Set(&v)
}
// SetLeverageNutanixSnapshotsNil sets the value for LeverageNutanixSnapshots to be an explicit nil
func (o *VmwareProtectionGroupParams) SetLeverageNutanixSnapshotsNil() {
	o.LeverageNutanixSnapshots.Set(nil)
}

// UnsetLeverageNutanixSnapshots ensures that no value is present for LeverageNutanixSnapshots, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetLeverageNutanixSnapshots() {
	o.LeverageNutanixSnapshots.Unset()
}

// GetLeverageStorageSnapshots returns the LeverageStorageSnapshots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetLeverageStorageSnapshots() bool {
	if o == nil || IsNil(o.LeverageStorageSnapshots.Get()) {
		var ret bool
		return ret
	}
	return *o.LeverageStorageSnapshots.Get()
}

// GetLeverageStorageSnapshotsOk returns a tuple with the LeverageStorageSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetLeverageStorageSnapshotsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LeverageStorageSnapshots.Get(), o.LeverageStorageSnapshots.IsSet()
}

// HasLeverageStorageSnapshots returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasLeverageStorageSnapshots() bool {
	if o != nil && o.LeverageStorageSnapshots.IsSet() {
		return true
	}

	return false
}

// SetLeverageStorageSnapshots gets a reference to the given NullableBool and assigns it to the LeverageStorageSnapshots field.
func (o *VmwareProtectionGroupParams) SetLeverageStorageSnapshots(v bool) {
	o.LeverageStorageSnapshots.Set(&v)
}
// SetLeverageStorageSnapshotsNil sets the value for LeverageStorageSnapshots to be an explicit nil
func (o *VmwareProtectionGroupParams) SetLeverageStorageSnapshotsNil() {
	o.LeverageStorageSnapshots.Set(nil)
}

// UnsetLeverageStorageSnapshots ensures that no value is present for LeverageStorageSnapshots, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetLeverageStorageSnapshots() {
	o.LeverageStorageSnapshots.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetSourceId() int64 {
	if o == nil || IsNil(o.SourceId.Get()) {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *VmwareProtectionGroupParams) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *VmwareProtectionGroupParams) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetSourceName() string {
	if o == nil || IsNil(o.SourceName.Get()) {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *VmwareProtectionGroupParams) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *VmwareProtectionGroupParams) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetSourceName() {
	o.SourceName.Unset()
}

// GetVmTagIds returns the VmTagIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetVmTagIds() [][]int64 {
	if o == nil {
		var ret [][]int64
		return ret
	}
	return o.VmTagIds
}

// GetVmTagIdsOk returns a tuple with the VmTagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetVmTagIdsOk() ([][]int64, bool) {
	if o == nil || IsNil(o.VmTagIds) {
		return nil, false
	}
	return o.VmTagIds, true
}

// HasVmTagIds returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasVmTagIds() bool {
	if o != nil && !IsNil(o.VmTagIds) {
		return true
	}

	return false
}

// SetVmTagIds gets a reference to the given [][]int64 and assigns it to the VmTagIds field.
func (o *VmwareProtectionGroupParams) SetVmTagIds(v [][]int64) {
	o.VmTagIds = v
}

// GetEnableCdpSyncReplication returns the EnableCdpSyncReplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetEnableCdpSyncReplication() bool {
	if o == nil || IsNil(o.EnableCdpSyncReplication.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableCdpSyncReplication.Get()
}

// GetEnableCdpSyncReplicationOk returns a tuple with the EnableCdpSyncReplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetEnableCdpSyncReplicationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableCdpSyncReplication.Get(), o.EnableCdpSyncReplication.IsSet()
}

// HasEnableCdpSyncReplication returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasEnableCdpSyncReplication() bool {
	if o != nil && o.EnableCdpSyncReplication.IsSet() {
		return true
	}

	return false
}

// SetEnableCdpSyncReplication gets a reference to the given NullableBool and assigns it to the EnableCdpSyncReplication field.
func (o *VmwareProtectionGroupParams) SetEnableCdpSyncReplication(v bool) {
	o.EnableCdpSyncReplication.Set(&v)
}
// SetEnableCdpSyncReplicationNil sets the value for EnableCdpSyncReplication to be an explicit nil
func (o *VmwareProtectionGroupParams) SetEnableCdpSyncReplicationNil() {
	o.EnableCdpSyncReplication.Set(nil)
}

// UnsetEnableCdpSyncReplication ensures that no value is present for EnableCdpSyncReplication, not even an explicit nil
func (o *VmwareProtectionGroupParams) UnsetEnableCdpSyncReplication() {
	o.EnableCdpSyncReplication.Unset()
}

// GetGlobalExcludeDisks returns the GlobalExcludeDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetGlobalExcludeDisks() []DiskInfo {
	if o == nil {
		var ret []DiskInfo
		return ret
	}
	return o.GlobalExcludeDisks
}

// GetGlobalExcludeDisksOk returns a tuple with the GlobalExcludeDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetGlobalExcludeDisksOk() ([]DiskInfo, bool) {
	if o == nil || IsNil(o.GlobalExcludeDisks) {
		return nil, false
	}
	return o.GlobalExcludeDisks, true
}

// HasGlobalExcludeDisks returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasGlobalExcludeDisks() bool {
	if o != nil && !IsNil(o.GlobalExcludeDisks) {
		return true
	}

	return false
}

// SetGlobalExcludeDisks gets a reference to the given []DiskInfo and assigns it to the GlobalExcludeDisks field.
func (o *VmwareProtectionGroupParams) SetGlobalExcludeDisks(v []DiskInfo) {
	o.GlobalExcludeDisks = v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *VmwareProtectionGroupParams) GetObjects() []VmwareProtectionGroupObjectParams {
	if o == nil || IsNil(o.Objects) {
		var ret []VmwareProtectionGroupObjectParams
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareProtectionGroupParams) GetObjectsOk() ([]VmwareProtectionGroupObjectParams, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []VmwareProtectionGroupObjectParams and assigns it to the Objects field.
func (o *VmwareProtectionGroupParams) SetObjects(v []VmwareProtectionGroupObjectParams) {
	o.Objects = v
}

// GetStandbyResourceObjects returns the StandbyResourceObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareProtectionGroupParams) GetStandbyResourceObjects() []VmwareProtectionGroupStandbyResourceParams {
	if o == nil {
		var ret []VmwareProtectionGroupStandbyResourceParams
		return ret
	}
	return o.StandbyResourceObjects
}

// GetStandbyResourceObjectsOk returns a tuple with the StandbyResourceObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareProtectionGroupParams) GetStandbyResourceObjectsOk() ([]VmwareProtectionGroupStandbyResourceParams, bool) {
	if o == nil || IsNil(o.StandbyResourceObjects) {
		return nil, false
	}
	return o.StandbyResourceObjects, true
}

// HasStandbyResourceObjects returns a boolean if a field has been set.
func (o *VmwareProtectionGroupParams) HasStandbyResourceObjects() bool {
	if o != nil && !IsNil(o.StandbyResourceObjects) {
		return true
	}

	return false
}

// SetStandbyResourceObjects gets a reference to the given []VmwareProtectionGroupStandbyResourceParams and assigns it to the StandbyResourceObjects field.
func (o *VmwareProtectionGroupParams) SetStandbyResourceObjects(v []VmwareProtectionGroupStandbyResourceParams) {
	o.StandbyResourceObjects = v
}

func (o VmwareProtectionGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmwareProtectionGroupParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AppConsistentSnapshot.IsSet() {
		toSerialize["appConsistentSnapshot"] = o.AppConsistentSnapshot.Get()
	}
	if o.EnableNBDSSLFallback.IsSet() {
		toSerialize["enableNBDSSLFallback"] = o.EnableNBDSSLFallback.Get()
	}
	if o.FallbackToCrashConsistentSnapshot.IsSet() {
		toSerialize["fallbackToCrashConsistentSnapshot"] = o.FallbackToCrashConsistentSnapshot.Get()
	}
	if !IsNil(o.IndexingPolicy) {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	if o.LeverageSanTransport.IsSet() {
		toSerialize["leverageSanTransport"] = o.LeverageSanTransport.Get()
	}
	if !IsNil(o.PrePostScript) {
		toSerialize["prePostScript"] = o.PrePostScript
	}
	if o.SkipPhysicalRDMDisks.IsSet() {
		toSerialize["skipPhysicalRDMDisks"] = o.SkipPhysicalRDMDisks.Get()
	}
	if o.AllowParallelRuns.IsSet() {
		toSerialize["allowParallelRuns"] = o.AllowParallelRuns.Get()
	}
	if o.CloudMigration.IsSet() {
		toSerialize["cloudMigration"] = o.CloudMigration.Get()
	}
	if o.ExcludeFilters != nil {
		toSerialize["excludeFilters"] = o.ExcludeFilters
	}
	if !IsNil(o.ExcludeObjectIds) {
		toSerialize["excludeObjectIds"] = o.ExcludeObjectIds
	}
	if !IsNil(o.ExcludeVmTagIds) {
		toSerialize["excludeVmTagIds"] = o.ExcludeVmTagIds
	}
	if o.LeverageHyperflexSnapshots.IsSet() {
		toSerialize["leverageHyperflexSnapshots"] = o.LeverageHyperflexSnapshots.Get()
	}
	if o.LeverageNutanixSnapshots.IsSet() {
		toSerialize["leverageNutanixSnapshots"] = o.LeverageNutanixSnapshots.Get()
	}
	if o.LeverageStorageSnapshots.IsSet() {
		toSerialize["leverageStorageSnapshots"] = o.LeverageStorageSnapshots.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	if o.VmTagIds != nil {
		toSerialize["vmTagIds"] = o.VmTagIds
	}
	if o.EnableCdpSyncReplication.IsSet() {
		toSerialize["enableCdpSyncReplication"] = o.EnableCdpSyncReplication.Get()
	}
	if o.GlobalExcludeDisks != nil {
		toSerialize["globalExcludeDisks"] = o.GlobalExcludeDisks
	}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	if o.StandbyResourceObjects != nil {
		toSerialize["standbyResourceObjects"] = o.StandbyResourceObjects
	}
	return toSerialize, nil
}

type NullableVmwareProtectionGroupParams struct {
	value *VmwareProtectionGroupParams
	isSet bool
}

func (v NullableVmwareProtectionGroupParams) Get() *VmwareProtectionGroupParams {
	return v.value
}

func (v *NullableVmwareProtectionGroupParams) Set(val *VmwareProtectionGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareProtectionGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareProtectionGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareProtectionGroupParams(val *VmwareProtectionGroupParams) *NullableVmwareProtectionGroupParams {
	return &NullableVmwareProtectionGroupParams{value: val, isSet: true}
}

func (v NullableVmwareProtectionGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareProtectionGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


