/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ActiveSessionsCountParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveSessionsCountParams{}

// ActiveSessionsCountParams Specifies the number of sessions.
type ActiveSessionsCountParams struct {
	// Specifies the sessions count per user.
	SessionsPerUser []UserSessionsCount `json:"sessionsPerUser,omitempty"`
	// Specifies the aggregated sessions count for the user sessions returned. If sids are not given this returns the total system wide sessions count and if the sids are given, this returns the total sessions count for the given sids.
	TotalSessionsCount *int64 `json:"totalSessionsCount,omitempty"`
}

// NewActiveSessionsCountParams instantiates a new ActiveSessionsCountParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveSessionsCountParams() *ActiveSessionsCountParams {
	this := ActiveSessionsCountParams{}
	return &this
}

// NewActiveSessionsCountParamsWithDefaults instantiates a new ActiveSessionsCountParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveSessionsCountParamsWithDefaults() *ActiveSessionsCountParams {
	this := ActiveSessionsCountParams{}
	return &this
}

// GetSessionsPerUser returns the SessionsPerUser field value if set, zero value otherwise.
func (o *ActiveSessionsCountParams) GetSessionsPerUser() []UserSessionsCount {
	if o == nil || IsNil(o.SessionsPerUser) {
		var ret []UserSessionsCount
		return ret
	}
	return o.SessionsPerUser
}

// GetSessionsPerUserOk returns a tuple with the SessionsPerUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionsCountParams) GetSessionsPerUserOk() ([]UserSessionsCount, bool) {
	if o == nil || IsNil(o.SessionsPerUser) {
		return nil, false
	}
	return o.SessionsPerUser, true
}

// HasSessionsPerUser returns a boolean if a field has been set.
func (o *ActiveSessionsCountParams) HasSessionsPerUser() bool {
	if o != nil && !IsNil(o.SessionsPerUser) {
		return true
	}

	return false
}

// SetSessionsPerUser gets a reference to the given []UserSessionsCount and assigns it to the SessionsPerUser field.
func (o *ActiveSessionsCountParams) SetSessionsPerUser(v []UserSessionsCount) {
	o.SessionsPerUser = v
}

// GetTotalSessionsCount returns the TotalSessionsCount field value if set, zero value otherwise.
func (o *ActiveSessionsCountParams) GetTotalSessionsCount() int64 {
	if o == nil || IsNil(o.TotalSessionsCount) {
		var ret int64
		return ret
	}
	return *o.TotalSessionsCount
}

// GetTotalSessionsCountOk returns a tuple with the TotalSessionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveSessionsCountParams) GetTotalSessionsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.TotalSessionsCount) {
		return nil, false
	}
	return o.TotalSessionsCount, true
}

// HasTotalSessionsCount returns a boolean if a field has been set.
func (o *ActiveSessionsCountParams) HasTotalSessionsCount() bool {
	if o != nil && !IsNil(o.TotalSessionsCount) {
		return true
	}

	return false
}

// SetTotalSessionsCount gets a reference to the given int64 and assigns it to the TotalSessionsCount field.
func (o *ActiveSessionsCountParams) SetTotalSessionsCount(v int64) {
	o.TotalSessionsCount = &v
}

func (o ActiveSessionsCountParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveSessionsCountParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SessionsPerUser) {
		toSerialize["sessionsPerUser"] = o.SessionsPerUser
	}
	if !IsNil(o.TotalSessionsCount) {
		toSerialize["totalSessionsCount"] = o.TotalSessionsCount
	}
	return toSerialize, nil
}

type NullableActiveSessionsCountParams struct {
	value *ActiveSessionsCountParams
	isSet bool
}

func (v NullableActiveSessionsCountParams) Get() *ActiveSessionsCountParams {
	return v.value
}

func (v *NullableActiveSessionsCountParams) Set(val *ActiveSessionsCountParams) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveSessionsCountParams) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveSessionsCountParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveSessionsCountParams(val *ActiveSessionsCountParams) *NullableActiveSessionsCountParams {
	return &NullableActiveSessionsCountParams{value: val, isSet: true}
}

func (v NullableActiveSessionsCountParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveSessionsCountParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


