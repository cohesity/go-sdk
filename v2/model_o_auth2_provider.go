/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OAuth2Provider type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OAuth2Provider{}

// OAuth2Provider OAuth 2 provider
type OAuth2Provider struct {
	// Specifies the audiences of the configuration. This is used for validation. We will check this against the 'aud' field sent in the JWT at authorization time and if they do not match against at least one of the elements in this list, then authentication will fail. We will also check the 'clientIds' under the specified audience to make sure it matches the 'appid' in the token.
	Audiences []OAuthAudience `json:"audiences"`
	// Specifies the number of minutes the cluster should wait before polling for a new public key. Default value is 1440 (24 hours).
	PollingFrequencyMins NullableInt64 `json:"pollingFrequencyMins,omitempty"`
	// Specifies the URL to poll for the public key.
	PublicKeyUrl NullableString `json:"publicKeyUrl"`
}

type _OAuth2Provider OAuth2Provider

// NewOAuth2Provider instantiates a new OAuth2Provider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOAuth2Provider(audiences []OAuthAudience, publicKeyUrl NullableString) *OAuth2Provider {
	this := OAuth2Provider{}
	this.Audiences = audiences
	var pollingFrequencyMins int64 = 1440
	this.PollingFrequencyMins = *NewNullableInt64(&pollingFrequencyMins)
	this.PublicKeyUrl = publicKeyUrl
	return &this
}

// NewOAuth2ProviderWithDefaults instantiates a new OAuth2Provider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOAuth2ProviderWithDefaults() *OAuth2Provider {
	this := OAuth2Provider{}
	var pollingFrequencyMins int64 = 1440
	this.PollingFrequencyMins = *NewNullableInt64(&pollingFrequencyMins)
	return &this
}

// GetAudiences returns the Audiences field value
// If the value is explicit nil, the zero value for []OAuthAudience will be returned
func (o *OAuth2Provider) GetAudiences() []OAuthAudience {
	if o == nil {
		var ret []OAuthAudience
		return ret
	}

	return o.Audiences
}

// GetAudiencesOk returns a tuple with the Audiences field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuth2Provider) GetAudiencesOk() ([]OAuthAudience, bool) {
	if o == nil || IsNil(o.Audiences) {
		return nil, false
	}
	return o.Audiences, true
}

// SetAudiences sets field value
func (o *OAuth2Provider) SetAudiences(v []OAuthAudience) {
	o.Audiences = v
}

// GetPollingFrequencyMins returns the PollingFrequencyMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OAuth2Provider) GetPollingFrequencyMins() int64 {
	if o == nil || IsNil(o.PollingFrequencyMins.Get()) {
		var ret int64
		return ret
	}
	return *o.PollingFrequencyMins.Get()
}

// GetPollingFrequencyMinsOk returns a tuple with the PollingFrequencyMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuth2Provider) GetPollingFrequencyMinsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PollingFrequencyMins.Get(), o.PollingFrequencyMins.IsSet()
}

// HasPollingFrequencyMins returns a boolean if a field has been set.
func (o *OAuth2Provider) HasPollingFrequencyMins() bool {
	if o != nil && o.PollingFrequencyMins.IsSet() {
		return true
	}

	return false
}

// SetPollingFrequencyMins gets a reference to the given NullableInt64 and assigns it to the PollingFrequencyMins field.
func (o *OAuth2Provider) SetPollingFrequencyMins(v int64) {
	o.PollingFrequencyMins.Set(&v)
}
// SetPollingFrequencyMinsNil sets the value for PollingFrequencyMins to be an explicit nil
func (o *OAuth2Provider) SetPollingFrequencyMinsNil() {
	o.PollingFrequencyMins.Set(nil)
}

// UnsetPollingFrequencyMins ensures that no value is present for PollingFrequencyMins, not even an explicit nil
func (o *OAuth2Provider) UnsetPollingFrequencyMins() {
	o.PollingFrequencyMins.Unset()
}

// GetPublicKeyUrl returns the PublicKeyUrl field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OAuth2Provider) GetPublicKeyUrl() string {
	if o == nil || o.PublicKeyUrl.Get() == nil {
		var ret string
		return ret
	}

	return *o.PublicKeyUrl.Get()
}

// GetPublicKeyUrlOk returns a tuple with the PublicKeyUrl field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OAuth2Provider) GetPublicKeyUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PublicKeyUrl.Get(), o.PublicKeyUrl.IsSet()
}

// SetPublicKeyUrl sets field value
func (o *OAuth2Provider) SetPublicKeyUrl(v string) {
	o.PublicKeyUrl.Set(&v)
}

func (o OAuth2Provider) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OAuth2Provider) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Audiences != nil {
		toSerialize["audiences"] = o.Audiences
	}
	if o.PollingFrequencyMins.IsSet() {
		toSerialize["pollingFrequencyMins"] = o.PollingFrequencyMins.Get()
	}
	toSerialize["publicKeyUrl"] = o.PublicKeyUrl.Get()
	return toSerialize, nil
}

func (o *OAuth2Provider) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"audiences",
		"publicKeyUrl",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOAuth2Provider := _OAuth2Provider{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOAuth2Provider)

	if err != nil {
		return err
	}

	*o = OAuth2Provider(varOAuth2Provider)

	return err
}

type NullableOAuth2Provider struct {
	value *OAuth2Provider
	isSet bool
}

func (v NullableOAuth2Provider) Get() *OAuth2Provider {
	return v.value
}

func (v *NullableOAuth2Provider) Set(val *OAuth2Provider) {
	v.value = val
	v.isSet = true
}

func (v NullableOAuth2Provider) IsSet() bool {
	return v.isSet
}

func (v *NullableOAuth2Provider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOAuth2Provider(val *OAuth2Provider) *NullableOAuth2Provider {
	return &NullableOAuth2Provider{value: val, isSet: true}
}

func (v NullableOAuth2Provider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOAuth2Provider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


