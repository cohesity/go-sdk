/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RecoverRDSPostgresToKnownSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverRDSPostgresToKnownSourceConfig{}

// RecoverRDSPostgresToKnownSourceConfig Specifies the configuration for recovering RDS Postgres objects to the known target.
type RecoverRDSPostgresToKnownSourceConfig struct {
	Instance NullableRecoverRDSPostgresToKnownSourceConfigInstance `json:"instance,omitempty"`
	// Specifies the parameter whether the recovery should be performed to a new target.
	RecoverToNewSource NullableBool `json:"recoverToNewSource,omitempty"`
	Region NullableRecoverRDSPostgresToKnownSourceConfigRegion `json:"region,omitempty"`
	Source NullableRecoverRDSPostgresToKnownSourceConfigSource `json:"source,omitempty"`
}

// NewRecoverRDSPostgresToKnownSourceConfig instantiates a new RecoverRDSPostgresToKnownSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverRDSPostgresToKnownSourceConfig() *RecoverRDSPostgresToKnownSourceConfig {
	this := RecoverRDSPostgresToKnownSourceConfig{}
	return &this
}

// NewRecoverRDSPostgresToKnownSourceConfigWithDefaults instantiates a new RecoverRDSPostgresToKnownSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverRDSPostgresToKnownSourceConfigWithDefaults() *RecoverRDSPostgresToKnownSourceConfig {
	this := RecoverRDSPostgresToKnownSourceConfig{}
	return &this
}

// GetInstance returns the Instance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverRDSPostgresToKnownSourceConfig) GetInstance() RecoverRDSPostgresToKnownSourceConfigInstance {
	if o == nil || IsNil(o.Instance.Get()) {
		var ret RecoverRDSPostgresToKnownSourceConfigInstance
		return ret
	}
	return *o.Instance.Get()
}

// GetInstanceOk returns a tuple with the Instance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverRDSPostgresToKnownSourceConfig) GetInstanceOk() (*RecoverRDSPostgresToKnownSourceConfigInstance, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instance.Get(), o.Instance.IsSet()
}

// HasInstance returns a boolean if a field has been set.
func (o *RecoverRDSPostgresToKnownSourceConfig) HasInstance() bool {
	if o != nil && o.Instance.IsSet() {
		return true
	}

	return false
}

// SetInstance gets a reference to the given NullableRecoverRDSPostgresToKnownSourceConfigInstance and assigns it to the Instance field.
func (o *RecoverRDSPostgresToKnownSourceConfig) SetInstance(v RecoverRDSPostgresToKnownSourceConfigInstance) {
	o.Instance.Set(&v)
}
// SetInstanceNil sets the value for Instance to be an explicit nil
func (o *RecoverRDSPostgresToKnownSourceConfig) SetInstanceNil() {
	o.Instance.Set(nil)
}

// UnsetInstance ensures that no value is present for Instance, not even an explicit nil
func (o *RecoverRDSPostgresToKnownSourceConfig) UnsetInstance() {
	o.Instance.Unset()
}

// GetRecoverToNewSource returns the RecoverToNewSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverRDSPostgresToKnownSourceConfig) GetRecoverToNewSource() bool {
	if o == nil || IsNil(o.RecoverToNewSource.Get()) {
		var ret bool
		return ret
	}
	return *o.RecoverToNewSource.Get()
}

// GetRecoverToNewSourceOk returns a tuple with the RecoverToNewSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverRDSPostgresToKnownSourceConfig) GetRecoverToNewSourceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverToNewSource.Get(), o.RecoverToNewSource.IsSet()
}

// HasRecoverToNewSource returns a boolean if a field has been set.
func (o *RecoverRDSPostgresToKnownSourceConfig) HasRecoverToNewSource() bool {
	if o != nil && o.RecoverToNewSource.IsSet() {
		return true
	}

	return false
}

// SetRecoverToNewSource gets a reference to the given NullableBool and assigns it to the RecoverToNewSource field.
func (o *RecoverRDSPostgresToKnownSourceConfig) SetRecoverToNewSource(v bool) {
	o.RecoverToNewSource.Set(&v)
}
// SetRecoverToNewSourceNil sets the value for RecoverToNewSource to be an explicit nil
func (o *RecoverRDSPostgresToKnownSourceConfig) SetRecoverToNewSourceNil() {
	o.RecoverToNewSource.Set(nil)
}

// UnsetRecoverToNewSource ensures that no value is present for RecoverToNewSource, not even an explicit nil
func (o *RecoverRDSPostgresToKnownSourceConfig) UnsetRecoverToNewSource() {
	o.RecoverToNewSource.Unset()
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverRDSPostgresToKnownSourceConfig) GetRegion() RecoverRDSPostgresToKnownSourceConfigRegion {
	if o == nil || IsNil(o.Region.Get()) {
		var ret RecoverRDSPostgresToKnownSourceConfigRegion
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverRDSPostgresToKnownSourceConfig) GetRegionOk() (*RecoverRDSPostgresToKnownSourceConfigRegion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *RecoverRDSPostgresToKnownSourceConfig) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableRecoverRDSPostgresToKnownSourceConfigRegion and assigns it to the Region field.
func (o *RecoverRDSPostgresToKnownSourceConfig) SetRegion(v RecoverRDSPostgresToKnownSourceConfigRegion) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *RecoverRDSPostgresToKnownSourceConfig) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *RecoverRDSPostgresToKnownSourceConfig) UnsetRegion() {
	o.Region.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverRDSPostgresToKnownSourceConfig) GetSource() RecoverRDSPostgresToKnownSourceConfigSource {
	if o == nil || IsNil(o.Source.Get()) {
		var ret RecoverRDSPostgresToKnownSourceConfigSource
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverRDSPostgresToKnownSourceConfig) GetSourceOk() (*RecoverRDSPostgresToKnownSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *RecoverRDSPostgresToKnownSourceConfig) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableRecoverRDSPostgresToKnownSourceConfigSource and assigns it to the Source field.
func (o *RecoverRDSPostgresToKnownSourceConfig) SetSource(v RecoverRDSPostgresToKnownSourceConfigSource) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *RecoverRDSPostgresToKnownSourceConfig) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *RecoverRDSPostgresToKnownSourceConfig) UnsetSource() {
	o.Source.Unset()
}

func (o RecoverRDSPostgresToKnownSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverRDSPostgresToKnownSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Instance.IsSet() {
		toSerialize["instance"] = o.Instance.Get()
	}
	if o.RecoverToNewSource.IsSet() {
		toSerialize["recoverToNewSource"] = o.RecoverToNewSource.Get()
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	return toSerialize, nil
}

type NullableRecoverRDSPostgresToKnownSourceConfig struct {
	value *RecoverRDSPostgresToKnownSourceConfig
	isSet bool
}

func (v NullableRecoverRDSPostgresToKnownSourceConfig) Get() *RecoverRDSPostgresToKnownSourceConfig {
	return v.value
}

func (v *NullableRecoverRDSPostgresToKnownSourceConfig) Set(val *RecoverRDSPostgresToKnownSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverRDSPostgresToKnownSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverRDSPostgresToKnownSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverRDSPostgresToKnownSourceConfig(val *RecoverRDSPostgresToKnownSourceConfig) *NullableRecoverRDSPostgresToKnownSourceConfig {
	return &NullableRecoverRDSPostgresToKnownSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverRDSPostgresToKnownSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverRDSPostgresToKnownSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


