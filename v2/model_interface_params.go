/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InterfaceParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceParams{}

// InterfaceParams Parameters of an interface.
type InterfaceParams struct {
	// Name of the interface.
	Name string `json:"name"`
	NetworkParams *InterfaceNetworkParams `json:"networkParams,omitempty"`
}

type _InterfaceParams InterfaceParams

// NewInterfaceParams instantiates a new InterfaceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceParams(name string) *InterfaceParams {
	this := InterfaceParams{}
	this.Name = name
	return &this
}

// NewInterfaceParamsWithDefaults instantiates a new InterfaceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceParamsWithDefaults() *InterfaceParams {
	this := InterfaceParams{}
	return &this
}

// GetName returns the Name field value
func (o *InterfaceParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InterfaceParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InterfaceParams) SetName(v string) {
	o.Name = v
}

// GetNetworkParams returns the NetworkParams field value if set, zero value otherwise.
func (o *InterfaceParams) GetNetworkParams() InterfaceNetworkParams {
	if o == nil || IsNil(o.NetworkParams) {
		var ret InterfaceNetworkParams
		return ret
	}
	return *o.NetworkParams
}

// GetNetworkParamsOk returns a tuple with the NetworkParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceParams) GetNetworkParamsOk() (*InterfaceNetworkParams, bool) {
	if o == nil || IsNil(o.NetworkParams) {
		return nil, false
	}
	return o.NetworkParams, true
}

// HasNetworkParams returns a boolean if a field has been set.
func (o *InterfaceParams) HasNetworkParams() bool {
	if o != nil && !IsNil(o.NetworkParams) {
		return true
	}

	return false
}

// SetNetworkParams gets a reference to the given InterfaceNetworkParams and assigns it to the NetworkParams field.
func (o *InterfaceParams) SetNetworkParams(v InterfaceNetworkParams) {
	o.NetworkParams = &v
}

func (o InterfaceParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.NetworkParams) {
		toSerialize["networkParams"] = o.NetworkParams
	}
	return toSerialize, nil
}

func (o *InterfaceParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInterfaceParams := _InterfaceParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInterfaceParams)

	if err != nil {
		return err
	}

	*o = InterfaceParams(varInterfaceParams)

	return err
}

type NullableInterfaceParams struct {
	value *InterfaceParams
	isSet bool
}

func (v NullableInterfaceParams) Get() *InterfaceParams {
	return v.value
}

func (v *NullableInterfaceParams) Set(val *InterfaceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceParams(val *InterfaceParams) *NullableInterfaceParams {
	return &NullableInterfaceParams{value: val, isSet: true}
}

func (v NullableInterfaceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


