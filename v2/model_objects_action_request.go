/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ObjectsActionRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectsActionRequest{}

// ObjectsActionRequest Specifies the type of the action need to be performed on given set of objects.
type ObjectsActionRequest struct {
	// Specifies the action type that need to be performed.
	Action NullableString `json:"action,omitempty"`
	LinkParams *ObjectLinkingParams `json:"linkParams,omitempty"`
	// Specifies the link type for the link/unlink action.
	LinkType NullableString `json:"linkType,omitempty"`
	UnLinkParams *ObjectUnLinkingParams `json:"unLinkParams,omitempty"`
}

// NewObjectsActionRequest instantiates a new ObjectsActionRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectsActionRequest() *ObjectsActionRequest {
	this := ObjectsActionRequest{}
	return &this
}

// NewObjectsActionRequestWithDefaults instantiates a new ObjectsActionRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectsActionRequestWithDefaults() *ObjectsActionRequest {
	this := ObjectsActionRequest{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectsActionRequest) GetAction() string {
	if o == nil || IsNil(o.Action.Get()) {
		var ret string
		return ret
	}
	return *o.Action.Get()
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectsActionRequest) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action.Get(), o.Action.IsSet()
}

// HasAction returns a boolean if a field has been set.
func (o *ObjectsActionRequest) HasAction() bool {
	if o != nil && o.Action.IsSet() {
		return true
	}

	return false
}

// SetAction gets a reference to the given NullableString and assigns it to the Action field.
func (o *ObjectsActionRequest) SetAction(v string) {
	o.Action.Set(&v)
}
// SetActionNil sets the value for Action to be an explicit nil
func (o *ObjectsActionRequest) SetActionNil() {
	o.Action.Set(nil)
}

// UnsetAction ensures that no value is present for Action, not even an explicit nil
func (o *ObjectsActionRequest) UnsetAction() {
	o.Action.Unset()
}

// GetLinkParams returns the LinkParams field value if set, zero value otherwise.
func (o *ObjectsActionRequest) GetLinkParams() ObjectLinkingParams {
	if o == nil || IsNil(o.LinkParams) {
		var ret ObjectLinkingParams
		return ret
	}
	return *o.LinkParams
}

// GetLinkParamsOk returns a tuple with the LinkParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsActionRequest) GetLinkParamsOk() (*ObjectLinkingParams, bool) {
	if o == nil || IsNil(o.LinkParams) {
		return nil, false
	}
	return o.LinkParams, true
}

// HasLinkParams returns a boolean if a field has been set.
func (o *ObjectsActionRequest) HasLinkParams() bool {
	if o != nil && !IsNil(o.LinkParams) {
		return true
	}

	return false
}

// SetLinkParams gets a reference to the given ObjectLinkingParams and assigns it to the LinkParams field.
func (o *ObjectsActionRequest) SetLinkParams(v ObjectLinkingParams) {
	o.LinkParams = &v
}

// GetLinkType returns the LinkType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectsActionRequest) GetLinkType() string {
	if o == nil || IsNil(o.LinkType.Get()) {
		var ret string
		return ret
	}
	return *o.LinkType.Get()
}

// GetLinkTypeOk returns a tuple with the LinkType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectsActionRequest) GetLinkTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkType.Get(), o.LinkType.IsSet()
}

// HasLinkType returns a boolean if a field has been set.
func (o *ObjectsActionRequest) HasLinkType() bool {
	if o != nil && o.LinkType.IsSet() {
		return true
	}

	return false
}

// SetLinkType gets a reference to the given NullableString and assigns it to the LinkType field.
func (o *ObjectsActionRequest) SetLinkType(v string) {
	o.LinkType.Set(&v)
}
// SetLinkTypeNil sets the value for LinkType to be an explicit nil
func (o *ObjectsActionRequest) SetLinkTypeNil() {
	o.LinkType.Set(nil)
}

// UnsetLinkType ensures that no value is present for LinkType, not even an explicit nil
func (o *ObjectsActionRequest) UnsetLinkType() {
	o.LinkType.Unset()
}

// GetUnLinkParams returns the UnLinkParams field value if set, zero value otherwise.
func (o *ObjectsActionRequest) GetUnLinkParams() ObjectUnLinkingParams {
	if o == nil || IsNil(o.UnLinkParams) {
		var ret ObjectUnLinkingParams
		return ret
	}
	return *o.UnLinkParams
}

// GetUnLinkParamsOk returns a tuple with the UnLinkParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectsActionRequest) GetUnLinkParamsOk() (*ObjectUnLinkingParams, bool) {
	if o == nil || IsNil(o.UnLinkParams) {
		return nil, false
	}
	return o.UnLinkParams, true
}

// HasUnLinkParams returns a boolean if a field has been set.
func (o *ObjectsActionRequest) HasUnLinkParams() bool {
	if o != nil && !IsNil(o.UnLinkParams) {
		return true
	}

	return false
}

// SetUnLinkParams gets a reference to the given ObjectUnLinkingParams and assigns it to the UnLinkParams field.
func (o *ObjectsActionRequest) SetUnLinkParams(v ObjectUnLinkingParams) {
	o.UnLinkParams = &v
}

func (o ObjectsActionRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectsActionRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Action.IsSet() {
		toSerialize["action"] = o.Action.Get()
	}
	if !IsNil(o.LinkParams) {
		toSerialize["linkParams"] = o.LinkParams
	}
	if o.LinkType.IsSet() {
		toSerialize["linkType"] = o.LinkType.Get()
	}
	if !IsNil(o.UnLinkParams) {
		toSerialize["unLinkParams"] = o.UnLinkParams
	}
	return toSerialize, nil
}

type NullableObjectsActionRequest struct {
	value *ObjectsActionRequest
	isSet bool
}

func (v NullableObjectsActionRequest) Get() *ObjectsActionRequest {
	return v.value
}

func (v *NullableObjectsActionRequest) Set(val *ObjectsActionRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectsActionRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectsActionRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectsActionRequest(val *ObjectsActionRequest) *NullableObjectsActionRequest {
	return &NullableObjectsActionRequest{value: val, isSet: true}
}

func (v NullableObjectsActionRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectsActionRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


