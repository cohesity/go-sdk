/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PlannedFailoverParamsPreparePlannedFailverParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlannedFailoverParamsPreparePlannedFailverParams{}

// PlannedFailoverParamsPreparePlannedFailverParams Specifies parameters of preparation of a planned failover.
type PlannedFailoverParamsPreparePlannedFailverParams struct {
	// Specifies whether a reverse replication needs to be set for the view on target cluster after failover.
	ReverseReplication NullableBool `json:"reverseReplication,omitempty"`
}

// NewPlannedFailoverParamsPreparePlannedFailverParams instantiates a new PlannedFailoverParamsPreparePlannedFailverParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlannedFailoverParamsPreparePlannedFailverParams() *PlannedFailoverParamsPreparePlannedFailverParams {
	this := PlannedFailoverParamsPreparePlannedFailverParams{}
	return &this
}

// NewPlannedFailoverParamsPreparePlannedFailverParamsWithDefaults instantiates a new PlannedFailoverParamsPreparePlannedFailverParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlannedFailoverParamsPreparePlannedFailverParamsWithDefaults() *PlannedFailoverParamsPreparePlannedFailverParams {
	this := PlannedFailoverParamsPreparePlannedFailverParams{}
	return &this
}

// GetReverseReplication returns the ReverseReplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedFailoverParamsPreparePlannedFailverParams) GetReverseReplication() bool {
	if o == nil || IsNil(o.ReverseReplication.Get()) {
		var ret bool
		return ret
	}
	return *o.ReverseReplication.Get()
}

// GetReverseReplicationOk returns a tuple with the ReverseReplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedFailoverParamsPreparePlannedFailverParams) GetReverseReplicationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReverseReplication.Get(), o.ReverseReplication.IsSet()
}

// HasReverseReplication returns a boolean if a field has been set.
func (o *PlannedFailoverParamsPreparePlannedFailverParams) HasReverseReplication() bool {
	if o != nil && o.ReverseReplication.IsSet() {
		return true
	}

	return false
}

// SetReverseReplication gets a reference to the given NullableBool and assigns it to the ReverseReplication field.
func (o *PlannedFailoverParamsPreparePlannedFailverParams) SetReverseReplication(v bool) {
	o.ReverseReplication.Set(&v)
}
// SetReverseReplicationNil sets the value for ReverseReplication to be an explicit nil
func (o *PlannedFailoverParamsPreparePlannedFailverParams) SetReverseReplicationNil() {
	o.ReverseReplication.Set(nil)
}

// UnsetReverseReplication ensures that no value is present for ReverseReplication, not even an explicit nil
func (o *PlannedFailoverParamsPreparePlannedFailverParams) UnsetReverseReplication() {
	o.ReverseReplication.Unset()
}

func (o PlannedFailoverParamsPreparePlannedFailverParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlannedFailoverParamsPreparePlannedFailverParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ReverseReplication.IsSet() {
		toSerialize["reverseReplication"] = o.ReverseReplication.Get()
	}
	return toSerialize, nil
}

type NullablePlannedFailoverParamsPreparePlannedFailverParams struct {
	value *PlannedFailoverParamsPreparePlannedFailverParams
	isSet bool
}

func (v NullablePlannedFailoverParamsPreparePlannedFailverParams) Get() *PlannedFailoverParamsPreparePlannedFailverParams {
	return v.value
}

func (v *NullablePlannedFailoverParamsPreparePlannedFailverParams) Set(val *PlannedFailoverParamsPreparePlannedFailverParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedFailoverParamsPreparePlannedFailverParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedFailoverParamsPreparePlannedFailverParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedFailoverParamsPreparePlannedFailverParams(val *PlannedFailoverParamsPreparePlannedFailverParams) *NullablePlannedFailoverParamsPreparePlannedFailverParams {
	return &NullablePlannedFailoverParamsPreparePlannedFailverParams{value: val, isSet: true}
}

func (v NullablePlannedFailoverParamsPreparePlannedFailverParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedFailoverParamsPreparePlannedFailverParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


