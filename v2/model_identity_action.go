/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IdentityAction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityAction{}

// IdentityAction Identity Action
type IdentityAction struct {
	// Specifies the type of identity provider the action will be performed on.
	IdentityProviderType string `json:"identityProviderType"`
	OAuth2Params *OAuth2Action `json:"oAuth2Params,omitempty"`
	OpenIdConnectParams *OpenIdConnectAction `json:"openIdConnectParams,omitempty"`
}

type _IdentityAction IdentityAction

// NewIdentityAction instantiates a new IdentityAction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityAction(identityProviderType string) *IdentityAction {
	this := IdentityAction{}
	this.IdentityProviderType = identityProviderType
	return &this
}

// NewIdentityActionWithDefaults instantiates a new IdentityAction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityActionWithDefaults() *IdentityAction {
	this := IdentityAction{}
	return &this
}

// GetIdentityProviderType returns the IdentityProviderType field value
func (o *IdentityAction) GetIdentityProviderType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IdentityProviderType
}

// GetIdentityProviderTypeOk returns a tuple with the IdentityProviderType field value
// and a boolean to check if the value has been set.
func (o *IdentityAction) GetIdentityProviderTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IdentityProviderType, true
}

// SetIdentityProviderType sets field value
func (o *IdentityAction) SetIdentityProviderType(v string) {
	o.IdentityProviderType = v
}

// GetOAuth2Params returns the OAuth2Params field value if set, zero value otherwise.
func (o *IdentityAction) GetOAuth2Params() OAuth2Action {
	if o == nil || IsNil(o.OAuth2Params) {
		var ret OAuth2Action
		return ret
	}
	return *o.OAuth2Params
}

// GetOAuth2ParamsOk returns a tuple with the OAuth2Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAction) GetOAuth2ParamsOk() (*OAuth2Action, bool) {
	if o == nil || IsNil(o.OAuth2Params) {
		return nil, false
	}
	return o.OAuth2Params, true
}

// HasOAuth2Params returns a boolean if a field has been set.
func (o *IdentityAction) HasOAuth2Params() bool {
	if o != nil && !IsNil(o.OAuth2Params) {
		return true
	}

	return false
}

// SetOAuth2Params gets a reference to the given OAuth2Action and assigns it to the OAuth2Params field.
func (o *IdentityAction) SetOAuth2Params(v OAuth2Action) {
	o.OAuth2Params = &v
}

// GetOpenIdConnectParams returns the OpenIdConnectParams field value if set, zero value otherwise.
func (o *IdentityAction) GetOpenIdConnectParams() OpenIdConnectAction {
	if o == nil || IsNil(o.OpenIdConnectParams) {
		var ret OpenIdConnectAction
		return ret
	}
	return *o.OpenIdConnectParams
}

// GetOpenIdConnectParamsOk returns a tuple with the OpenIdConnectParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityAction) GetOpenIdConnectParamsOk() (*OpenIdConnectAction, bool) {
	if o == nil || IsNil(o.OpenIdConnectParams) {
		return nil, false
	}
	return o.OpenIdConnectParams, true
}

// HasOpenIdConnectParams returns a boolean if a field has been set.
func (o *IdentityAction) HasOpenIdConnectParams() bool {
	if o != nil && !IsNil(o.OpenIdConnectParams) {
		return true
	}

	return false
}

// SetOpenIdConnectParams gets a reference to the given OpenIdConnectAction and assigns it to the OpenIdConnectParams field.
func (o *IdentityAction) SetOpenIdConnectParams(v OpenIdConnectAction) {
	o.OpenIdConnectParams = &v
}

func (o IdentityAction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityAction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["identityProviderType"] = o.IdentityProviderType
	if !IsNil(o.OAuth2Params) {
		toSerialize["oAuth2Params"] = o.OAuth2Params
	}
	if !IsNil(o.OpenIdConnectParams) {
		toSerialize["openIdConnectParams"] = o.OpenIdConnectParams
	}
	return toSerialize, nil
}

func (o *IdentityAction) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identityProviderType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityAction := _IdentityAction{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdentityAction)

	if err != nil {
		return err
	}

	*o = IdentityAction(varIdentityAction)

	return err
}

type NullableIdentityAction struct {
	value *IdentityAction
	isSet bool
}

func (v NullableIdentityAction) Get() *IdentityAction {
	return v.value
}

func (v *NullableIdentityAction) Set(val *IdentityAction) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityAction) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityAction(val *IdentityAction) *NullableIdentityAction {
	return &NullableIdentityAction{value: val, isSet: true}
}

func (v NullableIdentityAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


