/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DiskIdentify type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskIdentify{}

// DiskIdentify Specifies the parameters needed to identify disk.
type DiskIdentify struct {
	// Specifies the disk id of the disk. This parameter is incompatible with 'nodeId' and 'serialNumber'.
	DiskId NullableInt64 `json:"diskId,omitempty"`
	// Turn on/off led light if it is set to true/false
	Identify NullableBool `json:"identify"`
	// Specifies the node id of node that disk belongs to. This parameter is incompatible with 'diskId'. Must be used together with 'serialNumber'.
	NodeId NullableInt64 `json:"nodeId,omitempty"`
	// Specifies serial number of disk. This parameter is incompatible with 'diskId'. Must be used together with 'nodeId'.
	SerialNumber NullableString `json:"serialNumber,omitempty"`
}

type _DiskIdentify DiskIdentify

// NewDiskIdentify instantiates a new DiskIdentify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskIdentify(identify NullableBool) *DiskIdentify {
	this := DiskIdentify{}
	this.Identify = identify
	return &this
}

// NewDiskIdentifyWithDefaults instantiates a new DiskIdentify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskIdentifyWithDefaults() *DiskIdentify {
	this := DiskIdentify{}
	return &this
}

// GetDiskId returns the DiskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskIdentify) GetDiskId() int64 {
	if o == nil || IsNil(o.DiskId.Get()) {
		var ret int64
		return ret
	}
	return *o.DiskId.Get()
}

// GetDiskIdOk returns a tuple with the DiskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskIdentify) GetDiskIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskId.Get(), o.DiskId.IsSet()
}

// HasDiskId returns a boolean if a field has been set.
func (o *DiskIdentify) HasDiskId() bool {
	if o != nil && o.DiskId.IsSet() {
		return true
	}

	return false
}

// SetDiskId gets a reference to the given NullableInt64 and assigns it to the DiskId field.
func (o *DiskIdentify) SetDiskId(v int64) {
	o.DiskId.Set(&v)
}
// SetDiskIdNil sets the value for DiskId to be an explicit nil
func (o *DiskIdentify) SetDiskIdNil() {
	o.DiskId.Set(nil)
}

// UnsetDiskId ensures that no value is present for DiskId, not even an explicit nil
func (o *DiskIdentify) UnsetDiskId() {
	o.DiskId.Unset()
}

// GetIdentify returns the Identify field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *DiskIdentify) GetIdentify() bool {
	if o == nil || o.Identify.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Identify.Get()
}

// GetIdentifyOk returns a tuple with the Identify field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskIdentify) GetIdentifyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Identify.Get(), o.Identify.IsSet()
}

// SetIdentify sets field value
func (o *DiskIdentify) SetIdentify(v bool) {
	o.Identify.Set(&v)
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskIdentify) GetNodeId() int64 {
	if o == nil || IsNil(o.NodeId.Get()) {
		var ret int64
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskIdentify) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *DiskIdentify) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableInt64 and assigns it to the NodeId field.
func (o *DiskIdentify) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *DiskIdentify) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *DiskIdentify) UnsetNodeId() {
	o.NodeId.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskIdentify) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber.Get()) {
		var ret string
		return ret
	}
	return *o.SerialNumber.Get()
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskIdentify) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerialNumber.Get(), o.SerialNumber.IsSet()
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *DiskIdentify) HasSerialNumber() bool {
	if o != nil && o.SerialNumber.IsSet() {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given NullableString and assigns it to the SerialNumber field.
func (o *DiskIdentify) SetSerialNumber(v string) {
	o.SerialNumber.Set(&v)
}
// SetSerialNumberNil sets the value for SerialNumber to be an explicit nil
func (o *DiskIdentify) SetSerialNumberNil() {
	o.SerialNumber.Set(nil)
}

// UnsetSerialNumber ensures that no value is present for SerialNumber, not even an explicit nil
func (o *DiskIdentify) UnsetSerialNumber() {
	o.SerialNumber.Unset()
}

func (o DiskIdentify) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskIdentify) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskId.IsSet() {
		toSerialize["diskId"] = o.DiskId.Get()
	}
	toSerialize["identify"] = o.Identify.Get()
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	if o.SerialNumber.IsSet() {
		toSerialize["serialNumber"] = o.SerialNumber.Get()
	}
	return toSerialize, nil
}

func (o *DiskIdentify) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"identify",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiskIdentify := _DiskIdentify{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiskIdentify)

	if err != nil {
		return err
	}

	*o = DiskIdentify(varDiskIdentify)

	return err
}

type NullableDiskIdentify struct {
	value *DiskIdentify
	isSet bool
}

func (v NullableDiskIdentify) Get() *DiskIdentify {
	return v.value
}

func (v *NullableDiskIdentify) Set(val *DiskIdentify) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskIdentify) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskIdentify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskIdentify(val *DiskIdentify) *NullableDiskIdentify {
	return &NullableDiskIdentify{value: val, isSet: true}
}

func (v NullableDiskIdentify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskIdentify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


