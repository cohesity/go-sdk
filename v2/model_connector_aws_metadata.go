/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectorAwsMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorAwsMetadata{}

// ConnectorAwsMetadata Specifies AWS specific instance metadata details.
type ConnectorAwsMetadata struct {
	// AWS EC2 instance id.
	AwsInstanceId NullableString `json:"awsInstanceId"`
}

type _ConnectorAwsMetadata ConnectorAwsMetadata

// NewConnectorAwsMetadata instantiates a new ConnectorAwsMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorAwsMetadata(awsInstanceId NullableString) *ConnectorAwsMetadata {
	this := ConnectorAwsMetadata{}
	this.AwsInstanceId = awsInstanceId
	return &this
}

// NewConnectorAwsMetadataWithDefaults instantiates a new ConnectorAwsMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorAwsMetadataWithDefaults() *ConnectorAwsMetadata {
	this := ConnectorAwsMetadata{}
	return &this
}

// GetAwsInstanceId returns the AwsInstanceId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConnectorAwsMetadata) GetAwsInstanceId() string {
	if o == nil || o.AwsInstanceId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AwsInstanceId.Get()
}

// GetAwsInstanceIdOk returns a tuple with the AwsInstanceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorAwsMetadata) GetAwsInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsInstanceId.Get(), o.AwsInstanceId.IsSet()
}

// SetAwsInstanceId sets field value
func (o *ConnectorAwsMetadata) SetAwsInstanceId(v string) {
	o.AwsInstanceId.Set(&v)
}

func (o ConnectorAwsMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorAwsMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["awsInstanceId"] = o.AwsInstanceId.Get()
	return toSerialize, nil
}

func (o *ConnectorAwsMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"awsInstanceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectorAwsMetadata := _ConnectorAwsMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectorAwsMetadata)

	if err != nil {
		return err
	}

	*o = ConnectorAwsMetadata(varConnectorAwsMetadata)

	return err
}

type NullableConnectorAwsMetadata struct {
	value *ConnectorAwsMetadata
	isSet bool
}

func (v NullableConnectorAwsMetadata) Get() *ConnectorAwsMetadata {
	return v.value
}

func (v *NullableConnectorAwsMetadata) Set(val *ConnectorAwsMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorAwsMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorAwsMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorAwsMetadata(val *ConnectorAwsMetadata) *NullableConnectorAwsMetadata {
	return &NullableConnectorAwsMetadata{value: val, isSet: true}
}

func (v NullableConnectorAwsMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorAwsMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


