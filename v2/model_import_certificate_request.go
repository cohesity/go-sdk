/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ImportCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportCertificateRequest{}

// ImportCertificateRequest Specifies the request for importing custom certificates
type ImportCertificateRequest struct {
	// SSL identity file in PKCS12 format
	CertBundle *string `json:"certBundle,omitempty" validate:"regexp=^(?:[A-Za-z0-9+\\/]{4})*(?:[A-Za-z0-9+\\/]{2}==|[A-Za-z0-9+\\/]{3}=)?$"`
	CertRequest *ImportCertRequest `json:"certRequest,omitempty"`
	// passphrase for certBundle file
	Passphrase *string `json:"passphrase,omitempty"`
}

// NewImportCertificateRequest instantiates a new ImportCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportCertificateRequest() *ImportCertificateRequest {
	this := ImportCertificateRequest{}
	return &this
}

// NewImportCertificateRequestWithDefaults instantiates a new ImportCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportCertificateRequestWithDefaults() *ImportCertificateRequest {
	this := ImportCertificateRequest{}
	return &this
}

// GetCertBundle returns the CertBundle field value if set, zero value otherwise.
func (o *ImportCertificateRequest) GetCertBundle() string {
	if o == nil || IsNil(o.CertBundle) {
		var ret string
		return ret
	}
	return *o.CertBundle
}

// GetCertBundleOk returns a tuple with the CertBundle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCertificateRequest) GetCertBundleOk() (*string, bool) {
	if o == nil || IsNil(o.CertBundle) {
		return nil, false
	}
	return o.CertBundle, true
}

// HasCertBundle returns a boolean if a field has been set.
func (o *ImportCertificateRequest) HasCertBundle() bool {
	if o != nil && !IsNil(o.CertBundle) {
		return true
	}

	return false
}

// SetCertBundle gets a reference to the given string and assigns it to the CertBundle field.
func (o *ImportCertificateRequest) SetCertBundle(v string) {
	o.CertBundle = &v
}

// GetCertRequest returns the CertRequest field value if set, zero value otherwise.
func (o *ImportCertificateRequest) GetCertRequest() ImportCertRequest {
	if o == nil || IsNil(o.CertRequest) {
		var ret ImportCertRequest
		return ret
	}
	return *o.CertRequest
}

// GetCertRequestOk returns a tuple with the CertRequest field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCertificateRequest) GetCertRequestOk() (*ImportCertRequest, bool) {
	if o == nil || IsNil(o.CertRequest) {
		return nil, false
	}
	return o.CertRequest, true
}

// HasCertRequest returns a boolean if a field has been set.
func (o *ImportCertificateRequest) HasCertRequest() bool {
	if o != nil && !IsNil(o.CertRequest) {
		return true
	}

	return false
}

// SetCertRequest gets a reference to the given ImportCertRequest and assigns it to the CertRequest field.
func (o *ImportCertificateRequest) SetCertRequest(v ImportCertRequest) {
	o.CertRequest = &v
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise.
func (o *ImportCertificateRequest) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase) {
		var ret string
		return ret
	}
	return *o.Passphrase
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportCertificateRequest) GetPassphraseOk() (*string, bool) {
	if o == nil || IsNil(o.Passphrase) {
		return nil, false
	}
	return o.Passphrase, true
}

// HasPassphrase returns a boolean if a field has been set.
func (o *ImportCertificateRequest) HasPassphrase() bool {
	if o != nil && !IsNil(o.Passphrase) {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given string and assigns it to the Passphrase field.
func (o *ImportCertificateRequest) SetPassphrase(v string) {
	o.Passphrase = &v
}

func (o ImportCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CertBundle) {
		toSerialize["certBundle"] = o.CertBundle
	}
	if !IsNil(o.CertRequest) {
		toSerialize["certRequest"] = o.CertRequest
	}
	if !IsNil(o.Passphrase) {
		toSerialize["passphrase"] = o.Passphrase
	}
	return toSerialize, nil
}

type NullableImportCertificateRequest struct {
	value *ImportCertificateRequest
	isSet bool
}

func (v NullableImportCertificateRequest) Get() *ImportCertificateRequest {
	return v.value
}

func (v *NullableImportCertificateRequest) Set(val *ImportCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportCertificateRequest(val *ImportCertificateRequest) *NullableImportCertificateRequest {
	return &NullableImportCertificateRequest{value: val, isSet: true}
}

func (v NullableImportCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


