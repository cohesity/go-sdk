/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MachineAccount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MachineAccount{}

// MachineAccount Specifies a machine account.
type MachineAccount struct {
	// Specifies the DNS host name of the machine account.
	DnsHostName NullableString `json:"dnsHostName,omitempty"`
	// Specifies a list of encryption types apply to the machine account.
	Encryption []string `json:"encryption,omitempty"`
	// Specifies the machine account name.
	Name NullableString `json:"name" validate:"regexp=^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,13}[a-zA-Z0-9])$"`
	// Specifies the customized Service Principal Names of the Machine Account. Service Principal Name should be unique across the Active Directory forest.
	ServicePrincipalNames []string `json:"servicePrincipalNames,omitempty"`
}

type _MachineAccount MachineAccount

// NewMachineAccount instantiates a new MachineAccount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMachineAccount(name NullableString) *MachineAccount {
	this := MachineAccount{}
	this.Name = name
	return &this
}

// NewMachineAccountWithDefaults instantiates a new MachineAccount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMachineAccountWithDefaults() *MachineAccount {
	this := MachineAccount{}
	return &this
}

// GetDnsHostName returns the DnsHostName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MachineAccount) GetDnsHostName() string {
	if o == nil || IsNil(o.DnsHostName.Get()) {
		var ret string
		return ret
	}
	return *o.DnsHostName.Get()
}

// GetDnsHostNameOk returns a tuple with the DnsHostName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MachineAccount) GetDnsHostNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DnsHostName.Get(), o.DnsHostName.IsSet()
}

// HasDnsHostName returns a boolean if a field has been set.
func (o *MachineAccount) HasDnsHostName() bool {
	if o != nil && o.DnsHostName.IsSet() {
		return true
	}

	return false
}

// SetDnsHostName gets a reference to the given NullableString and assigns it to the DnsHostName field.
func (o *MachineAccount) SetDnsHostName(v string) {
	o.DnsHostName.Set(&v)
}
// SetDnsHostNameNil sets the value for DnsHostName to be an explicit nil
func (o *MachineAccount) SetDnsHostNameNil() {
	o.DnsHostName.Set(nil)
}

// UnsetDnsHostName ensures that no value is present for DnsHostName, not even an explicit nil
func (o *MachineAccount) UnsetDnsHostName() {
	o.DnsHostName.Unset()
}

// GetEncryption returns the Encryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MachineAccount) GetEncryption() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MachineAccount) GetEncryptionOk() ([]string, bool) {
	if o == nil || IsNil(o.Encryption) {
		return nil, false
	}
	return o.Encryption, true
}

// HasEncryption returns a boolean if a field has been set.
func (o *MachineAccount) HasEncryption() bool {
	if o != nil && !IsNil(o.Encryption) {
		return true
	}

	return false
}

// SetEncryption gets a reference to the given []string and assigns it to the Encryption field.
func (o *MachineAccount) SetEncryption(v []string) {
	o.Encryption = v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MachineAccount) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MachineAccount) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *MachineAccount) SetName(v string) {
	o.Name.Set(&v)
}

// GetServicePrincipalNames returns the ServicePrincipalNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MachineAccount) GetServicePrincipalNames() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ServicePrincipalNames
}

// GetServicePrincipalNamesOk returns a tuple with the ServicePrincipalNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MachineAccount) GetServicePrincipalNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ServicePrincipalNames) {
		return nil, false
	}
	return o.ServicePrincipalNames, true
}

// HasServicePrincipalNames returns a boolean if a field has been set.
func (o *MachineAccount) HasServicePrincipalNames() bool {
	if o != nil && !IsNil(o.ServicePrincipalNames) {
		return true
	}

	return false
}

// SetServicePrincipalNames gets a reference to the given []string and assigns it to the ServicePrincipalNames field.
func (o *MachineAccount) SetServicePrincipalNames(v []string) {
	o.ServicePrincipalNames = v
}

func (o MachineAccount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MachineAccount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DnsHostName.IsSet() {
		toSerialize["dnsHostName"] = o.DnsHostName.Get()
	}
	if o.Encryption != nil {
		toSerialize["encryption"] = o.Encryption
	}
	toSerialize["name"] = o.Name.Get()
	if o.ServicePrincipalNames != nil {
		toSerialize["servicePrincipalNames"] = o.ServicePrincipalNames
	}
	return toSerialize, nil
}

func (o *MachineAccount) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMachineAccount := _MachineAccount{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMachineAccount)

	if err != nil {
		return err
	}

	*o = MachineAccount(varMachineAccount)

	return err
}

type NullableMachineAccount struct {
	value *MachineAccount
	isSet bool
}

func (v NullableMachineAccount) Get() *MachineAccount {
	return v.value
}

func (v *NullableMachineAccount) Set(val *MachineAccount) {
	v.value = val
	v.isSet = true
}

func (v NullableMachineAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableMachineAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMachineAccount(val *MachineAccount) *NullableMachineAccount {
	return &NullableMachineAccount{value: val, isSet: true}
}

func (v NullableMachineAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMachineAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


