/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Disk type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Disk{}

// Disk Specifies the details of a disk that belongs to a node.
type Disk struct {
	// Specifies capacity of disk in bytes.
	CapacityInBytes NullableInt64 `json:"capacityInBytes,omitempty"`
	// Specifies disk encryption state.
	EncryptionStatus *string `json:"encryptionStatus,omitempty"`
	// Specifies id to uniquely identify a disk.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies location of the disk in node.
	Location NullableString `json:"location,omitempty"`
	// Specifies product model of disk.
	Model NullableString `json:"model,omitempty"`
	// Specifies node id of the node that this disk belong to.
	NodeId NullableInt64 `json:"nodeId,omitempty"`
	// Specifies the last run time of the pre-checks execution in Unix epoch timestamp (in seconds).
	PrecheckTimestampSecs NullableInt64 `json:"precheckTimestampSecs,omitempty"`
	// Specifies the overall progress percentage in removing the Disk.
	ProgressPercentage NullableInt32 `json:"progressPercentage,omitempty"`
	// Specifies the removal progress details for services that are not acked yet.
	RemovalProgressList []ComponentRemovalProgress `json:"removalProgressList,omitempty"`
	// Specifies the removal reason of the disk.
	RemovalReason NullableString `json:"removalReason,omitempty"`
	// Specifies the Unix epoch timestamp (in seconds) when the Disk was marked for removal.
	RemovalTimestampSecs NullableInt64 `json:"removalTimestampSecs,omitempty"`
	// Specifies serial number of disk.
	SerialNumber NullableString `json:"serialNumber,omitempty"`
	// Specifies the services already ACKed for removal of this entity.
	ServicesAckedList []string `json:"servicesAckedList,omitempty"`
	// Specifies the services that are not ACKed after disk is marked for removal.
	ServicesNotAcked NullableString `json:"servicesNotAcked,omitempty"`
	// Specifies the services not ACKed yet for removal of this entity.
	ServicesNotAckedList []string `json:"servicesNotAckedList,omitempty"`
	// Specifies SSD used percentage.
	SsdUsedPercentage NullableInt32 `json:"ssdUsedPercentage,omitempty"`
	// Specifies status of the disk.
	Status *string `json:"status,omitempty"`
	// Specifies the total duration in seconds left to remove the Disk.
	TimeRemaining NullableInt64 `json:"timeRemaining,omitempty"`
	// Specifies type of the disk.
	Type *string `json:"type,omitempty"`
	// Specifies the pre-check validations results.
	ValidationChecks []PreCheckValidation `json:"validationChecks,omitempty"`
}

// NewDisk instantiates a new Disk object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDisk() *Disk {
	this := Disk{}
	return &this
}

// NewDiskWithDefaults instantiates a new Disk object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskWithDefaults() *Disk {
	this := Disk{}
	return &this
}

// GetCapacityInBytes returns the CapacityInBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetCapacityInBytes() int64 {
	if o == nil || IsNil(o.CapacityInBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.CapacityInBytes.Get()
}

// GetCapacityInBytesOk returns a tuple with the CapacityInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetCapacityInBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CapacityInBytes.Get(), o.CapacityInBytes.IsSet()
}

// HasCapacityInBytes returns a boolean if a field has been set.
func (o *Disk) HasCapacityInBytes() bool {
	if o != nil && o.CapacityInBytes.IsSet() {
		return true
	}

	return false
}

// SetCapacityInBytes gets a reference to the given NullableInt64 and assigns it to the CapacityInBytes field.
func (o *Disk) SetCapacityInBytes(v int64) {
	o.CapacityInBytes.Set(&v)
}
// SetCapacityInBytesNil sets the value for CapacityInBytes to be an explicit nil
func (o *Disk) SetCapacityInBytesNil() {
	o.CapacityInBytes.Set(nil)
}

// UnsetCapacityInBytes ensures that no value is present for CapacityInBytes, not even an explicit nil
func (o *Disk) UnsetCapacityInBytes() {
	o.CapacityInBytes.Unset()
}

// GetEncryptionStatus returns the EncryptionStatus field value if set, zero value otherwise.
func (o *Disk) GetEncryptionStatus() string {
	if o == nil || IsNil(o.EncryptionStatus) {
		var ret string
		return ret
	}
	return *o.EncryptionStatus
}

// GetEncryptionStatusOk returns a tuple with the EncryptionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disk) GetEncryptionStatusOk() (*string, bool) {
	if o == nil || IsNil(o.EncryptionStatus) {
		return nil, false
	}
	return o.EncryptionStatus, true
}

// HasEncryptionStatus returns a boolean if a field has been set.
func (o *Disk) HasEncryptionStatus() bool {
	if o != nil && !IsNil(o.EncryptionStatus) {
		return true
	}

	return false
}

// SetEncryptionStatus gets a reference to the given string and assigns it to the EncryptionStatus field.
func (o *Disk) SetEncryptionStatus(v string) {
	o.EncryptionStatus = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Disk) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *Disk) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Disk) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Disk) UnsetId() {
	o.Id.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetLocation() string {
	if o == nil || IsNil(o.Location.Get()) {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *Disk) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *Disk) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *Disk) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *Disk) UnsetLocation() {
	o.Location.Unset()
}

// GetModel returns the Model field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetModel() string {
	if o == nil || IsNil(o.Model.Get()) {
		var ret string
		return ret
	}
	return *o.Model.Get()
}

// GetModelOk returns a tuple with the Model field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Model.Get(), o.Model.IsSet()
}

// HasModel returns a boolean if a field has been set.
func (o *Disk) HasModel() bool {
	if o != nil && o.Model.IsSet() {
		return true
	}

	return false
}

// SetModel gets a reference to the given NullableString and assigns it to the Model field.
func (o *Disk) SetModel(v string) {
	o.Model.Set(&v)
}
// SetModelNil sets the value for Model to be an explicit nil
func (o *Disk) SetModelNil() {
	o.Model.Set(nil)
}

// UnsetModel ensures that no value is present for Model, not even an explicit nil
func (o *Disk) UnsetModel() {
	o.Model.Unset()
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetNodeId() int64 {
	if o == nil || IsNil(o.NodeId.Get()) {
		var ret int64
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetNodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *Disk) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableInt64 and assigns it to the NodeId field.
func (o *Disk) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *Disk) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *Disk) UnsetNodeId() {
	o.NodeId.Unset()
}

// GetPrecheckTimestampSecs returns the PrecheckTimestampSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetPrecheckTimestampSecs() int64 {
	if o == nil || IsNil(o.PrecheckTimestampSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.PrecheckTimestampSecs.Get()
}

// GetPrecheckTimestampSecsOk returns a tuple with the PrecheckTimestampSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetPrecheckTimestampSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrecheckTimestampSecs.Get(), o.PrecheckTimestampSecs.IsSet()
}

// HasPrecheckTimestampSecs returns a boolean if a field has been set.
func (o *Disk) HasPrecheckTimestampSecs() bool {
	if o != nil && o.PrecheckTimestampSecs.IsSet() {
		return true
	}

	return false
}

// SetPrecheckTimestampSecs gets a reference to the given NullableInt64 and assigns it to the PrecheckTimestampSecs field.
func (o *Disk) SetPrecheckTimestampSecs(v int64) {
	o.PrecheckTimestampSecs.Set(&v)
}
// SetPrecheckTimestampSecsNil sets the value for PrecheckTimestampSecs to be an explicit nil
func (o *Disk) SetPrecheckTimestampSecsNil() {
	o.PrecheckTimestampSecs.Set(nil)
}

// UnsetPrecheckTimestampSecs ensures that no value is present for PrecheckTimestampSecs, not even an explicit nil
func (o *Disk) UnsetPrecheckTimestampSecs() {
	o.PrecheckTimestampSecs.Unset()
}

// GetProgressPercentage returns the ProgressPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetProgressPercentage() int32 {
	if o == nil || IsNil(o.ProgressPercentage.Get()) {
		var ret int32
		return ret
	}
	return *o.ProgressPercentage.Get()
}

// GetProgressPercentageOk returns a tuple with the ProgressPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetProgressPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProgressPercentage.Get(), o.ProgressPercentage.IsSet()
}

// HasProgressPercentage returns a boolean if a field has been set.
func (o *Disk) HasProgressPercentage() bool {
	if o != nil && o.ProgressPercentage.IsSet() {
		return true
	}

	return false
}

// SetProgressPercentage gets a reference to the given NullableInt32 and assigns it to the ProgressPercentage field.
func (o *Disk) SetProgressPercentage(v int32) {
	o.ProgressPercentage.Set(&v)
}
// SetProgressPercentageNil sets the value for ProgressPercentage to be an explicit nil
func (o *Disk) SetProgressPercentageNil() {
	o.ProgressPercentage.Set(nil)
}

// UnsetProgressPercentage ensures that no value is present for ProgressPercentage, not even an explicit nil
func (o *Disk) UnsetProgressPercentage() {
	o.ProgressPercentage.Unset()
}

// GetRemovalProgressList returns the RemovalProgressList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetRemovalProgressList() []ComponentRemovalProgress {
	if o == nil {
		var ret []ComponentRemovalProgress
		return ret
	}
	return o.RemovalProgressList
}

// GetRemovalProgressListOk returns a tuple with the RemovalProgressList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetRemovalProgressListOk() ([]ComponentRemovalProgress, bool) {
	if o == nil || IsNil(o.RemovalProgressList) {
		return nil, false
	}
	return o.RemovalProgressList, true
}

// HasRemovalProgressList returns a boolean if a field has been set.
func (o *Disk) HasRemovalProgressList() bool {
	if o != nil && !IsNil(o.RemovalProgressList) {
		return true
	}

	return false
}

// SetRemovalProgressList gets a reference to the given []ComponentRemovalProgress and assigns it to the RemovalProgressList field.
func (o *Disk) SetRemovalProgressList(v []ComponentRemovalProgress) {
	o.RemovalProgressList = v
}

// GetRemovalReason returns the RemovalReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetRemovalReason() string {
	if o == nil || IsNil(o.RemovalReason.Get()) {
		var ret string
		return ret
	}
	return *o.RemovalReason.Get()
}

// GetRemovalReasonOk returns a tuple with the RemovalReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetRemovalReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalReason.Get(), o.RemovalReason.IsSet()
}

// HasRemovalReason returns a boolean if a field has been set.
func (o *Disk) HasRemovalReason() bool {
	if o != nil && o.RemovalReason.IsSet() {
		return true
	}

	return false
}

// SetRemovalReason gets a reference to the given NullableString and assigns it to the RemovalReason field.
func (o *Disk) SetRemovalReason(v string) {
	o.RemovalReason.Set(&v)
}
// SetRemovalReasonNil sets the value for RemovalReason to be an explicit nil
func (o *Disk) SetRemovalReasonNil() {
	o.RemovalReason.Set(nil)
}

// UnsetRemovalReason ensures that no value is present for RemovalReason, not even an explicit nil
func (o *Disk) UnsetRemovalReason() {
	o.RemovalReason.Unset()
}

// GetRemovalTimestampSecs returns the RemovalTimestampSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetRemovalTimestampSecs() int64 {
	if o == nil || IsNil(o.RemovalTimestampSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.RemovalTimestampSecs.Get()
}

// GetRemovalTimestampSecsOk returns a tuple with the RemovalTimestampSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetRemovalTimestampSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalTimestampSecs.Get(), o.RemovalTimestampSecs.IsSet()
}

// HasRemovalTimestampSecs returns a boolean if a field has been set.
func (o *Disk) HasRemovalTimestampSecs() bool {
	if o != nil && o.RemovalTimestampSecs.IsSet() {
		return true
	}

	return false
}

// SetRemovalTimestampSecs gets a reference to the given NullableInt64 and assigns it to the RemovalTimestampSecs field.
func (o *Disk) SetRemovalTimestampSecs(v int64) {
	o.RemovalTimestampSecs.Set(&v)
}
// SetRemovalTimestampSecsNil sets the value for RemovalTimestampSecs to be an explicit nil
func (o *Disk) SetRemovalTimestampSecsNil() {
	o.RemovalTimestampSecs.Set(nil)
}

// UnsetRemovalTimestampSecs ensures that no value is present for RemovalTimestampSecs, not even an explicit nil
func (o *Disk) UnsetRemovalTimestampSecs() {
	o.RemovalTimestampSecs.Unset()
}

// GetSerialNumber returns the SerialNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetSerialNumber() string {
	if o == nil || IsNil(o.SerialNumber.Get()) {
		var ret string
		return ret
	}
	return *o.SerialNumber.Get()
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetSerialNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SerialNumber.Get(), o.SerialNumber.IsSet()
}

// HasSerialNumber returns a boolean if a field has been set.
func (o *Disk) HasSerialNumber() bool {
	if o != nil && o.SerialNumber.IsSet() {
		return true
	}

	return false
}

// SetSerialNumber gets a reference to the given NullableString and assigns it to the SerialNumber field.
func (o *Disk) SetSerialNumber(v string) {
	o.SerialNumber.Set(&v)
}
// SetSerialNumberNil sets the value for SerialNumber to be an explicit nil
func (o *Disk) SetSerialNumberNil() {
	o.SerialNumber.Set(nil)
}

// UnsetSerialNumber ensures that no value is present for SerialNumber, not even an explicit nil
func (o *Disk) UnsetSerialNumber() {
	o.SerialNumber.Unset()
}

// GetServicesAckedList returns the ServicesAckedList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetServicesAckedList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ServicesAckedList
}

// GetServicesAckedListOk returns a tuple with the ServicesAckedList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetServicesAckedListOk() ([]string, bool) {
	if o == nil || IsNil(o.ServicesAckedList) {
		return nil, false
	}
	return o.ServicesAckedList, true
}

// HasServicesAckedList returns a boolean if a field has been set.
func (o *Disk) HasServicesAckedList() bool {
	if o != nil && !IsNil(o.ServicesAckedList) {
		return true
	}

	return false
}

// SetServicesAckedList gets a reference to the given []string and assigns it to the ServicesAckedList field.
func (o *Disk) SetServicesAckedList(v []string) {
	o.ServicesAckedList = v
}

// GetServicesNotAcked returns the ServicesNotAcked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetServicesNotAcked() string {
	if o == nil || IsNil(o.ServicesNotAcked.Get()) {
		var ret string
		return ret
	}
	return *o.ServicesNotAcked.Get()
}

// GetServicesNotAckedOk returns a tuple with the ServicesNotAcked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetServicesNotAckedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServicesNotAcked.Get(), o.ServicesNotAcked.IsSet()
}

// HasServicesNotAcked returns a boolean if a field has been set.
func (o *Disk) HasServicesNotAcked() bool {
	if o != nil && o.ServicesNotAcked.IsSet() {
		return true
	}

	return false
}

// SetServicesNotAcked gets a reference to the given NullableString and assigns it to the ServicesNotAcked field.
func (o *Disk) SetServicesNotAcked(v string) {
	o.ServicesNotAcked.Set(&v)
}
// SetServicesNotAckedNil sets the value for ServicesNotAcked to be an explicit nil
func (o *Disk) SetServicesNotAckedNil() {
	o.ServicesNotAcked.Set(nil)
}

// UnsetServicesNotAcked ensures that no value is present for ServicesNotAcked, not even an explicit nil
func (o *Disk) UnsetServicesNotAcked() {
	o.ServicesNotAcked.Unset()
}

// GetServicesNotAckedList returns the ServicesNotAckedList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetServicesNotAckedList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ServicesNotAckedList
}

// GetServicesNotAckedListOk returns a tuple with the ServicesNotAckedList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetServicesNotAckedListOk() ([]string, bool) {
	if o == nil || IsNil(o.ServicesNotAckedList) {
		return nil, false
	}
	return o.ServicesNotAckedList, true
}

// HasServicesNotAckedList returns a boolean if a field has been set.
func (o *Disk) HasServicesNotAckedList() bool {
	if o != nil && !IsNil(o.ServicesNotAckedList) {
		return true
	}

	return false
}

// SetServicesNotAckedList gets a reference to the given []string and assigns it to the ServicesNotAckedList field.
func (o *Disk) SetServicesNotAckedList(v []string) {
	o.ServicesNotAckedList = v
}

// GetSsdUsedPercentage returns the SsdUsedPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetSsdUsedPercentage() int32 {
	if o == nil || IsNil(o.SsdUsedPercentage.Get()) {
		var ret int32
		return ret
	}
	return *o.SsdUsedPercentage.Get()
}

// GetSsdUsedPercentageOk returns a tuple with the SsdUsedPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetSsdUsedPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SsdUsedPercentage.Get(), o.SsdUsedPercentage.IsSet()
}

// HasSsdUsedPercentage returns a boolean if a field has been set.
func (o *Disk) HasSsdUsedPercentage() bool {
	if o != nil && o.SsdUsedPercentage.IsSet() {
		return true
	}

	return false
}

// SetSsdUsedPercentage gets a reference to the given NullableInt32 and assigns it to the SsdUsedPercentage field.
func (o *Disk) SetSsdUsedPercentage(v int32) {
	o.SsdUsedPercentage.Set(&v)
}
// SetSsdUsedPercentageNil sets the value for SsdUsedPercentage to be an explicit nil
func (o *Disk) SetSsdUsedPercentageNil() {
	o.SsdUsedPercentage.Set(nil)
}

// UnsetSsdUsedPercentage ensures that no value is present for SsdUsedPercentage, not even an explicit nil
func (o *Disk) UnsetSsdUsedPercentage() {
	o.SsdUsedPercentage.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Disk) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disk) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Disk) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Disk) SetStatus(v string) {
	o.Status = &v
}

// GetTimeRemaining returns the TimeRemaining field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetTimeRemaining() int64 {
	if o == nil || IsNil(o.TimeRemaining.Get()) {
		var ret int64
		return ret
	}
	return *o.TimeRemaining.Get()
}

// GetTimeRemainingOk returns a tuple with the TimeRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetTimeRemainingOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeRemaining.Get(), o.TimeRemaining.IsSet()
}

// HasTimeRemaining returns a boolean if a field has been set.
func (o *Disk) HasTimeRemaining() bool {
	if o != nil && o.TimeRemaining.IsSet() {
		return true
	}

	return false
}

// SetTimeRemaining gets a reference to the given NullableInt64 and assigns it to the TimeRemaining field.
func (o *Disk) SetTimeRemaining(v int64) {
	o.TimeRemaining.Set(&v)
}
// SetTimeRemainingNil sets the value for TimeRemaining to be an explicit nil
func (o *Disk) SetTimeRemainingNil() {
	o.TimeRemaining.Set(nil)
}

// UnsetTimeRemaining ensures that no value is present for TimeRemaining, not even an explicit nil
func (o *Disk) UnsetTimeRemaining() {
	o.TimeRemaining.Unset()
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Disk) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Disk) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Disk) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Disk) SetType(v string) {
	o.Type = &v
}

// GetValidationChecks returns the ValidationChecks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Disk) GetValidationChecks() []PreCheckValidation {
	if o == nil {
		var ret []PreCheckValidation
		return ret
	}
	return o.ValidationChecks
}

// GetValidationChecksOk returns a tuple with the ValidationChecks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Disk) GetValidationChecksOk() ([]PreCheckValidation, bool) {
	if o == nil || IsNil(o.ValidationChecks) {
		return nil, false
	}
	return o.ValidationChecks, true
}

// HasValidationChecks returns a boolean if a field has been set.
func (o *Disk) HasValidationChecks() bool {
	if o != nil && !IsNil(o.ValidationChecks) {
		return true
	}

	return false
}

// SetValidationChecks gets a reference to the given []PreCheckValidation and assigns it to the ValidationChecks field.
func (o *Disk) SetValidationChecks(v []PreCheckValidation) {
	o.ValidationChecks = v
}

func (o Disk) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Disk) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CapacityInBytes.IsSet() {
		toSerialize["capacityInBytes"] = o.CapacityInBytes.Get()
	}
	if !IsNil(o.EncryptionStatus) {
		toSerialize["encryptionStatus"] = o.EncryptionStatus
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.Model.IsSet() {
		toSerialize["model"] = o.Model.Get()
	}
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	if o.PrecheckTimestampSecs.IsSet() {
		toSerialize["precheckTimestampSecs"] = o.PrecheckTimestampSecs.Get()
	}
	if o.ProgressPercentage.IsSet() {
		toSerialize["progressPercentage"] = o.ProgressPercentage.Get()
	}
	if o.RemovalProgressList != nil {
		toSerialize["removalProgressList"] = o.RemovalProgressList
	}
	if o.RemovalReason.IsSet() {
		toSerialize["removalReason"] = o.RemovalReason.Get()
	}
	if o.RemovalTimestampSecs.IsSet() {
		toSerialize["removalTimestampSecs"] = o.RemovalTimestampSecs.Get()
	}
	if o.SerialNumber.IsSet() {
		toSerialize["serialNumber"] = o.SerialNumber.Get()
	}
	if o.ServicesAckedList != nil {
		toSerialize["servicesAckedList"] = o.ServicesAckedList
	}
	if o.ServicesNotAcked.IsSet() {
		toSerialize["servicesNotAcked"] = o.ServicesNotAcked.Get()
	}
	if o.ServicesNotAckedList != nil {
		toSerialize["servicesNotAckedList"] = o.ServicesNotAckedList
	}
	if o.SsdUsedPercentage.IsSet() {
		toSerialize["ssdUsedPercentage"] = o.SsdUsedPercentage.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.TimeRemaining.IsSet() {
		toSerialize["timeRemaining"] = o.TimeRemaining.Get()
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if o.ValidationChecks != nil {
		toSerialize["validationChecks"] = o.ValidationChecks
	}
	return toSerialize, nil
}

type NullableDisk struct {
	value *Disk
	isSet bool
}

func (v NullableDisk) Get() *Disk {
	return v.value
}

func (v *NullableDisk) Set(val *Disk) {
	v.value = val
	v.isSet = true
}

func (v NullableDisk) IsSet() bool {
	return v.isSet
}

func (v *NullableDisk) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDisk(val *Disk) *NullableDisk {
	return &NullableDisk{value: val, isSet: true}
}

func (v NullableDisk) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDisk) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


