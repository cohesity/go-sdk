/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewDirectoryQuotaQuotaPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewDirectoryQuotaQuotaPolicy{}

// ViewDirectoryQuotaQuotaPolicy Specifies the directory quota policy.
type ViewDirectoryQuotaQuotaPolicy struct {
	// Specifies if an alert should be triggered when the usage of this resource exceeds this quota limit. This limit is optional and is specified in bytes. If no value is specified, there is no limit.
	AlertLimitBytes NullableInt64 `json:"alertLimitBytes,omitempty"`
	// Specifies an optional quota limit on the usage allowed for this resource. This limit is specified in bytes. If no value is specified, there is no limit.
	HardLimitBytes NullableInt64 `json:"hardLimitBytes,omitempty"`
}

// NewViewDirectoryQuotaQuotaPolicy instantiates a new ViewDirectoryQuotaQuotaPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewDirectoryQuotaQuotaPolicy() *ViewDirectoryQuotaQuotaPolicy {
	this := ViewDirectoryQuotaQuotaPolicy{}
	return &this
}

// NewViewDirectoryQuotaQuotaPolicyWithDefaults instantiates a new ViewDirectoryQuotaQuotaPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewDirectoryQuotaQuotaPolicyWithDefaults() *ViewDirectoryQuotaQuotaPolicy {
	this := ViewDirectoryQuotaQuotaPolicy{}
	return &this
}

// GetAlertLimitBytes returns the AlertLimitBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewDirectoryQuotaQuotaPolicy) GetAlertLimitBytes() int64 {
	if o == nil || IsNil(o.AlertLimitBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.AlertLimitBytes.Get()
}

// GetAlertLimitBytesOk returns a tuple with the AlertLimitBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewDirectoryQuotaQuotaPolicy) GetAlertLimitBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlertLimitBytes.Get(), o.AlertLimitBytes.IsSet()
}

// HasAlertLimitBytes returns a boolean if a field has been set.
func (o *ViewDirectoryQuotaQuotaPolicy) HasAlertLimitBytes() bool {
	if o != nil && o.AlertLimitBytes.IsSet() {
		return true
	}

	return false
}

// SetAlertLimitBytes gets a reference to the given NullableInt64 and assigns it to the AlertLimitBytes field.
func (o *ViewDirectoryQuotaQuotaPolicy) SetAlertLimitBytes(v int64) {
	o.AlertLimitBytes.Set(&v)
}
// SetAlertLimitBytesNil sets the value for AlertLimitBytes to be an explicit nil
func (o *ViewDirectoryQuotaQuotaPolicy) SetAlertLimitBytesNil() {
	o.AlertLimitBytes.Set(nil)
}

// UnsetAlertLimitBytes ensures that no value is present for AlertLimitBytes, not even an explicit nil
func (o *ViewDirectoryQuotaQuotaPolicy) UnsetAlertLimitBytes() {
	o.AlertLimitBytes.Unset()
}

// GetHardLimitBytes returns the HardLimitBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewDirectoryQuotaQuotaPolicy) GetHardLimitBytes() int64 {
	if o == nil || IsNil(o.HardLimitBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.HardLimitBytes.Get()
}

// GetHardLimitBytesOk returns a tuple with the HardLimitBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewDirectoryQuotaQuotaPolicy) GetHardLimitBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.HardLimitBytes.Get(), o.HardLimitBytes.IsSet()
}

// HasHardLimitBytes returns a boolean if a field has been set.
func (o *ViewDirectoryQuotaQuotaPolicy) HasHardLimitBytes() bool {
	if o != nil && o.HardLimitBytes.IsSet() {
		return true
	}

	return false
}

// SetHardLimitBytes gets a reference to the given NullableInt64 and assigns it to the HardLimitBytes field.
func (o *ViewDirectoryQuotaQuotaPolicy) SetHardLimitBytes(v int64) {
	o.HardLimitBytes.Set(&v)
}
// SetHardLimitBytesNil sets the value for HardLimitBytes to be an explicit nil
func (o *ViewDirectoryQuotaQuotaPolicy) SetHardLimitBytesNil() {
	o.HardLimitBytes.Set(nil)
}

// UnsetHardLimitBytes ensures that no value is present for HardLimitBytes, not even an explicit nil
func (o *ViewDirectoryQuotaQuotaPolicy) UnsetHardLimitBytes() {
	o.HardLimitBytes.Unset()
}

func (o ViewDirectoryQuotaQuotaPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewDirectoryQuotaQuotaPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AlertLimitBytes.IsSet() {
		toSerialize["alertLimitBytes"] = o.AlertLimitBytes.Get()
	}
	if o.HardLimitBytes.IsSet() {
		toSerialize["hardLimitBytes"] = o.HardLimitBytes.Get()
	}
	return toSerialize, nil
}

type NullableViewDirectoryQuotaQuotaPolicy struct {
	value *ViewDirectoryQuotaQuotaPolicy
	isSet bool
}

func (v NullableViewDirectoryQuotaQuotaPolicy) Get() *ViewDirectoryQuotaQuotaPolicy {
	return v.value
}

func (v *NullableViewDirectoryQuotaQuotaPolicy) Set(val *ViewDirectoryQuotaQuotaPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableViewDirectoryQuotaQuotaPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableViewDirectoryQuotaQuotaPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewDirectoryQuotaQuotaPolicy(val *ViewDirectoryQuotaQuotaPolicy) *NullableViewDirectoryQuotaQuotaPolicy {
	return &NullableViewDirectoryQuotaQuotaPolicy{value: val, isSet: true}
}

func (v NullableViewDirectoryQuotaQuotaPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewDirectoryQuotaQuotaPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


