/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SapHanaSourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SapHanaSourceRegistrationParams{}

// SapHanaSourceRegistrationParams Specifies parameters to register a SAP HANA source.
type SapHanaSourceRegistrationParams struct {
	// Specifies the IPs/hostnames for the nodes forming the SAP HANA source cluster.
	Hosts []string `json:"hosts"`
	// Specifies the absolute path of scripts used to interact with the SAP HANA source.
	ScriptDir string `json:"scriptDir"`
	// Specifies user friendly name for the source.
	SourceName string `json:"sourceName"`
}

type _SapHanaSourceRegistrationParams SapHanaSourceRegistrationParams

// NewSapHanaSourceRegistrationParams instantiates a new SapHanaSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSapHanaSourceRegistrationParams(hosts []string, scriptDir string, sourceName string) *SapHanaSourceRegistrationParams {
	this := SapHanaSourceRegistrationParams{}
	this.Hosts = hosts
	this.ScriptDir = scriptDir
	this.SourceName = sourceName
	return &this
}

// NewSapHanaSourceRegistrationParamsWithDefaults instantiates a new SapHanaSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSapHanaSourceRegistrationParamsWithDefaults() *SapHanaSourceRegistrationParams {
	this := SapHanaSourceRegistrationParams{}
	return &this
}

// GetHosts returns the Hosts field value
func (o *SapHanaSourceRegistrationParams) GetHosts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value
// and a boolean to check if the value has been set.
func (o *SapHanaSourceRegistrationParams) GetHostsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hosts, true
}

// SetHosts sets field value
func (o *SapHanaSourceRegistrationParams) SetHosts(v []string) {
	o.Hosts = v
}

// GetScriptDir returns the ScriptDir field value
func (o *SapHanaSourceRegistrationParams) GetScriptDir() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScriptDir
}

// GetScriptDirOk returns a tuple with the ScriptDir field value
// and a boolean to check if the value has been set.
func (o *SapHanaSourceRegistrationParams) GetScriptDirOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScriptDir, true
}

// SetScriptDir sets field value
func (o *SapHanaSourceRegistrationParams) SetScriptDir(v string) {
	o.ScriptDir = v
}

// GetSourceName returns the SourceName field value
func (o *SapHanaSourceRegistrationParams) GetSourceName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceName
}

// GetSourceNameOk returns a tuple with the SourceName field value
// and a boolean to check if the value has been set.
func (o *SapHanaSourceRegistrationParams) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceName, true
}

// SetSourceName sets field value
func (o *SapHanaSourceRegistrationParams) SetSourceName(v string) {
	o.SourceName = v
}

func (o SapHanaSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SapHanaSourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hosts"] = o.Hosts
	toSerialize["scriptDir"] = o.ScriptDir
	toSerialize["sourceName"] = o.SourceName
	return toSerialize, nil
}

func (o *SapHanaSourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hosts",
		"scriptDir",
		"sourceName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSapHanaSourceRegistrationParams := _SapHanaSourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSapHanaSourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = SapHanaSourceRegistrationParams(varSapHanaSourceRegistrationParams)

	return err
}

type NullableSapHanaSourceRegistrationParams struct {
	value *SapHanaSourceRegistrationParams
	isSet bool
}

func (v NullableSapHanaSourceRegistrationParams) Get() *SapHanaSourceRegistrationParams {
	return v.value
}

func (v *NullableSapHanaSourceRegistrationParams) Set(val *SapHanaSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSapHanaSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSapHanaSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSapHanaSourceRegistrationParams(val *SapHanaSourceRegistrationParams) *NullableSapHanaSourceRegistrationParams {
	return &NullableSapHanaSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableSapHanaSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSapHanaSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


