/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FileOperation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileOperation{}

// FileOperation struct for FileOperation
type FileOperation struct {
	FilePath string `json:"filePath"`
	Operation string `json:"operation"`
}

type _FileOperation FileOperation

// NewFileOperation instantiates a new FileOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileOperation(filePath string, operation string) *FileOperation {
	this := FileOperation{}
	this.FilePath = filePath
	this.Operation = operation
	return &this
}

// NewFileOperationWithDefaults instantiates a new FileOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileOperationWithDefaults() *FileOperation {
	this := FileOperation{}
	return &this
}

// GetFilePath returns the FilePath field value
func (o *FileOperation) GetFilePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value
// and a boolean to check if the value has been set.
func (o *FileOperation) GetFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FilePath, true
}

// SetFilePath sets field value
func (o *FileOperation) SetFilePath(v string) {
	o.FilePath = v
}

// GetOperation returns the Operation field value
func (o *FileOperation) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *FileOperation) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *FileOperation) SetOperation(v string) {
	o.Operation = v
}

func (o FileOperation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileOperation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["filePath"] = o.FilePath
	toSerialize["operation"] = o.Operation
	return toSerialize, nil
}

func (o *FileOperation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filePath",
		"operation",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFileOperation := _FileOperation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFileOperation)

	if err != nil {
		return err
	}

	*o = FileOperation(varFileOperation)

	return err
}

type NullableFileOperation struct {
	value *FileOperation
	isSet bool
}

func (v NullableFileOperation) Get() *FileOperation {
	return v.value
}

func (v *NullableFileOperation) Set(val *FileOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableFileOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableFileOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileOperation(val *FileOperation) *NullableFileOperation {
	return &NullableFileOperation{value: val, isSet: true}
}

func (v NullableFileOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


