/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Ldaps type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Ldaps{}

// Ldaps Specifies a list of LDAPs.
type Ldaps struct {
	// Specifies the list of LDAPs.
	Ldaps []Ldap `json:"ldaps,omitempty"`
}

// NewLdaps instantiates a new Ldaps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdaps() *Ldaps {
	this := Ldaps{}
	return &this
}

// NewLdapsWithDefaults instantiates a new Ldaps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapsWithDefaults() *Ldaps {
	this := Ldaps{}
	return &this
}

// GetLdaps returns the Ldaps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Ldaps) GetLdaps() []Ldap {
	if o == nil {
		var ret []Ldap
		return ret
	}
	return o.Ldaps
}

// GetLdapsOk returns a tuple with the Ldaps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Ldaps) GetLdapsOk() ([]Ldap, bool) {
	if o == nil || IsNil(o.Ldaps) {
		return nil, false
	}
	return o.Ldaps, true
}

// HasLdaps returns a boolean if a field has been set.
func (o *Ldaps) HasLdaps() bool {
	if o != nil && !IsNil(o.Ldaps) {
		return true
	}

	return false
}

// SetLdaps gets a reference to the given []Ldap and assigns it to the Ldaps field.
func (o *Ldaps) SetLdaps(v []Ldap) {
	o.Ldaps = v
}

func (o Ldaps) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Ldaps) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Ldaps != nil {
		toSerialize["ldaps"] = o.Ldaps
	}
	return toSerialize, nil
}

type NullableLdaps struct {
	value *Ldaps
	isSet bool
}

func (v NullableLdaps) Get() *Ldaps {
	return v.value
}

func (v *NullableLdaps) Set(val *Ldaps) {
	v.value = val
	v.isSet = true
}

func (v NullableLdaps) IsSet() bool {
	return v.isSet
}

func (v *NullableLdaps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdaps(val *Ldaps) *NullableLdaps {
	return &NullableLdaps{value: val, isSet: true}
}

func (v NullableLdaps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdaps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


