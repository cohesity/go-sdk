/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UserQuotaSummaryForView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserQuotaSummaryForView{}

// UserQuotaSummaryForView Specifies summary for user quotas in a view.
type UserQuotaSummaryForView struct {
	DefaultQuotaPolicy *QuotaPolicy `json:"defaultQuotaPolicy,omitempty"`
	// Number of users who has exceeded their specified alert limit.
	NumUsersAboveAlertThreshold NullableInt64 `json:"numUsersAboveAlertThreshold,omitempty"`
	// Number of users who has exceeded their specified quota hard limit.
	NumUsersAboveHardLimit NullableInt64 `json:"numUsersAboveHardLimit,omitempty"`
	// Total number of users who has either a user quota policy override specified or has non-zero logical usage.
	TotalNumUsers NullableInt64 `json:"totalNumUsers,omitempty"`
}

// NewUserQuotaSummaryForView instantiates a new UserQuotaSummaryForView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserQuotaSummaryForView() *UserQuotaSummaryForView {
	this := UserQuotaSummaryForView{}
	return &this
}

// NewUserQuotaSummaryForViewWithDefaults instantiates a new UserQuotaSummaryForView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserQuotaSummaryForViewWithDefaults() *UserQuotaSummaryForView {
	this := UserQuotaSummaryForView{}
	return &this
}

// GetDefaultQuotaPolicy returns the DefaultQuotaPolicy field value if set, zero value otherwise.
func (o *UserQuotaSummaryForView) GetDefaultQuotaPolicy() QuotaPolicy {
	if o == nil || IsNil(o.DefaultQuotaPolicy) {
		var ret QuotaPolicy
		return ret
	}
	return *o.DefaultQuotaPolicy
}

// GetDefaultQuotaPolicyOk returns a tuple with the DefaultQuotaPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserQuotaSummaryForView) GetDefaultQuotaPolicyOk() (*QuotaPolicy, bool) {
	if o == nil || IsNil(o.DefaultQuotaPolicy) {
		return nil, false
	}
	return o.DefaultQuotaPolicy, true
}

// HasDefaultQuotaPolicy returns a boolean if a field has been set.
func (o *UserQuotaSummaryForView) HasDefaultQuotaPolicy() bool {
	if o != nil && !IsNil(o.DefaultQuotaPolicy) {
		return true
	}

	return false
}

// SetDefaultQuotaPolicy gets a reference to the given QuotaPolicy and assigns it to the DefaultQuotaPolicy field.
func (o *UserQuotaSummaryForView) SetDefaultQuotaPolicy(v QuotaPolicy) {
	o.DefaultQuotaPolicy = &v
}

// GetNumUsersAboveAlertThreshold returns the NumUsersAboveAlertThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuotaSummaryForView) GetNumUsersAboveAlertThreshold() int64 {
	if o == nil || IsNil(o.NumUsersAboveAlertThreshold.Get()) {
		var ret int64
		return ret
	}
	return *o.NumUsersAboveAlertThreshold.Get()
}

// GetNumUsersAboveAlertThresholdOk returns a tuple with the NumUsersAboveAlertThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuotaSummaryForView) GetNumUsersAboveAlertThresholdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumUsersAboveAlertThreshold.Get(), o.NumUsersAboveAlertThreshold.IsSet()
}

// HasNumUsersAboveAlertThreshold returns a boolean if a field has been set.
func (o *UserQuotaSummaryForView) HasNumUsersAboveAlertThreshold() bool {
	if o != nil && o.NumUsersAboveAlertThreshold.IsSet() {
		return true
	}

	return false
}

// SetNumUsersAboveAlertThreshold gets a reference to the given NullableInt64 and assigns it to the NumUsersAboveAlertThreshold field.
func (o *UserQuotaSummaryForView) SetNumUsersAboveAlertThreshold(v int64) {
	o.NumUsersAboveAlertThreshold.Set(&v)
}
// SetNumUsersAboveAlertThresholdNil sets the value for NumUsersAboveAlertThreshold to be an explicit nil
func (o *UserQuotaSummaryForView) SetNumUsersAboveAlertThresholdNil() {
	o.NumUsersAboveAlertThreshold.Set(nil)
}

// UnsetNumUsersAboveAlertThreshold ensures that no value is present for NumUsersAboveAlertThreshold, not even an explicit nil
func (o *UserQuotaSummaryForView) UnsetNumUsersAboveAlertThreshold() {
	o.NumUsersAboveAlertThreshold.Unset()
}

// GetNumUsersAboveHardLimit returns the NumUsersAboveHardLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuotaSummaryForView) GetNumUsersAboveHardLimit() int64 {
	if o == nil || IsNil(o.NumUsersAboveHardLimit.Get()) {
		var ret int64
		return ret
	}
	return *o.NumUsersAboveHardLimit.Get()
}

// GetNumUsersAboveHardLimitOk returns a tuple with the NumUsersAboveHardLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuotaSummaryForView) GetNumUsersAboveHardLimitOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumUsersAboveHardLimit.Get(), o.NumUsersAboveHardLimit.IsSet()
}

// HasNumUsersAboveHardLimit returns a boolean if a field has been set.
func (o *UserQuotaSummaryForView) HasNumUsersAboveHardLimit() bool {
	if o != nil && o.NumUsersAboveHardLimit.IsSet() {
		return true
	}

	return false
}

// SetNumUsersAboveHardLimit gets a reference to the given NullableInt64 and assigns it to the NumUsersAboveHardLimit field.
func (o *UserQuotaSummaryForView) SetNumUsersAboveHardLimit(v int64) {
	o.NumUsersAboveHardLimit.Set(&v)
}
// SetNumUsersAboveHardLimitNil sets the value for NumUsersAboveHardLimit to be an explicit nil
func (o *UserQuotaSummaryForView) SetNumUsersAboveHardLimitNil() {
	o.NumUsersAboveHardLimit.Set(nil)
}

// UnsetNumUsersAboveHardLimit ensures that no value is present for NumUsersAboveHardLimit, not even an explicit nil
func (o *UserQuotaSummaryForView) UnsetNumUsersAboveHardLimit() {
	o.NumUsersAboveHardLimit.Unset()
}

// GetTotalNumUsers returns the TotalNumUsers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuotaSummaryForView) GetTotalNumUsers() int64 {
	if o == nil || IsNil(o.TotalNumUsers.Get()) {
		var ret int64
		return ret
	}
	return *o.TotalNumUsers.Get()
}

// GetTotalNumUsersOk returns a tuple with the TotalNumUsers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuotaSummaryForView) GetTotalNumUsersOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalNumUsers.Get(), o.TotalNumUsers.IsSet()
}

// HasTotalNumUsers returns a boolean if a field has been set.
func (o *UserQuotaSummaryForView) HasTotalNumUsers() bool {
	if o != nil && o.TotalNumUsers.IsSet() {
		return true
	}

	return false
}

// SetTotalNumUsers gets a reference to the given NullableInt64 and assigns it to the TotalNumUsers field.
func (o *UserQuotaSummaryForView) SetTotalNumUsers(v int64) {
	o.TotalNumUsers.Set(&v)
}
// SetTotalNumUsersNil sets the value for TotalNumUsers to be an explicit nil
func (o *UserQuotaSummaryForView) SetTotalNumUsersNil() {
	o.TotalNumUsers.Set(nil)
}

// UnsetTotalNumUsers ensures that no value is present for TotalNumUsers, not even an explicit nil
func (o *UserQuotaSummaryForView) UnsetTotalNumUsers() {
	o.TotalNumUsers.Unset()
}

func (o UserQuotaSummaryForView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserQuotaSummaryForView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DefaultQuotaPolicy) {
		toSerialize["defaultQuotaPolicy"] = o.DefaultQuotaPolicy
	}
	if o.NumUsersAboveAlertThreshold.IsSet() {
		toSerialize["numUsersAboveAlertThreshold"] = o.NumUsersAboveAlertThreshold.Get()
	}
	if o.NumUsersAboveHardLimit.IsSet() {
		toSerialize["numUsersAboveHardLimit"] = o.NumUsersAboveHardLimit.Get()
	}
	if o.TotalNumUsers.IsSet() {
		toSerialize["totalNumUsers"] = o.TotalNumUsers.Get()
	}
	return toSerialize, nil
}

type NullableUserQuotaSummaryForView struct {
	value *UserQuotaSummaryForView
	isSet bool
}

func (v NullableUserQuotaSummaryForView) Get() *UserQuotaSummaryForView {
	return v.value
}

func (v *NullableUserQuotaSummaryForView) Set(val *UserQuotaSummaryForView) {
	v.value = val
	v.isSet = true
}

func (v NullableUserQuotaSummaryForView) IsSet() bool {
	return v.isSet
}

func (v *NullableUserQuotaSummaryForView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserQuotaSummaryForView(val *UserQuotaSummaryForView) *NullableUserQuotaSummaryForView {
	return &NullableUserQuotaSummaryForView{value: val, isSet: true}
}

func (v NullableUserQuotaSummaryForView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserQuotaSummaryForView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


