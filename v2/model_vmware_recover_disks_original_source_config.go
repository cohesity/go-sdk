/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VmwareRecoverDisksOriginalSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmwareRecoverDisksOriginalSourceConfig{}

// VmwareRecoverDisksOriginalSourceConfig Specifies the configuration for restoring a disk to the original VM from which the snapshot was taken.
type VmwareRecoverDisksOriginalSourceConfig struct {
	// Specifies the disks to be recovered and the location to which they will be recovered.
	Disks []VmwareRecoverOriginalSourceDiskParams `json:"disks"`
}

type _VmwareRecoverDisksOriginalSourceConfig VmwareRecoverDisksOriginalSourceConfig

// NewVmwareRecoverDisksOriginalSourceConfig instantiates a new VmwareRecoverDisksOriginalSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareRecoverDisksOriginalSourceConfig(disks []VmwareRecoverOriginalSourceDiskParams) *VmwareRecoverDisksOriginalSourceConfig {
	this := VmwareRecoverDisksOriginalSourceConfig{}
	this.Disks = disks
	return &this
}

// NewVmwareRecoverDisksOriginalSourceConfigWithDefaults instantiates a new VmwareRecoverDisksOriginalSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareRecoverDisksOriginalSourceConfigWithDefaults() *VmwareRecoverDisksOriginalSourceConfig {
	this := VmwareRecoverDisksOriginalSourceConfig{}
	return &this
}

// GetDisks returns the Disks field value
func (o *VmwareRecoverDisksOriginalSourceConfig) GetDisks() []VmwareRecoverOriginalSourceDiskParams {
	if o == nil {
		var ret []VmwareRecoverOriginalSourceDiskParams
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *VmwareRecoverDisksOriginalSourceConfig) GetDisksOk() ([]VmwareRecoverOriginalSourceDiskParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disks, true
}

// SetDisks sets field value
func (o *VmwareRecoverDisksOriginalSourceConfig) SetDisks(v []VmwareRecoverOriginalSourceDiskParams) {
	o.Disks = v
}

func (o VmwareRecoverDisksOriginalSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmwareRecoverDisksOriginalSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disks"] = o.Disks
	return toSerialize, nil
}

func (o *VmwareRecoverDisksOriginalSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVmwareRecoverDisksOriginalSourceConfig := _VmwareRecoverDisksOriginalSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVmwareRecoverDisksOriginalSourceConfig)

	if err != nil {
		return err
	}

	*o = VmwareRecoverDisksOriginalSourceConfig(varVmwareRecoverDisksOriginalSourceConfig)

	return err
}

type NullableVmwareRecoverDisksOriginalSourceConfig struct {
	value *VmwareRecoverDisksOriginalSourceConfig
	isSet bool
}

func (v NullableVmwareRecoverDisksOriginalSourceConfig) Get() *VmwareRecoverDisksOriginalSourceConfig {
	return v.value
}

func (v *NullableVmwareRecoverDisksOriginalSourceConfig) Set(val *VmwareRecoverDisksOriginalSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareRecoverDisksOriginalSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareRecoverDisksOriginalSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareRecoverDisksOriginalSourceConfig(val *VmwareRecoverDisksOriginalSourceConfig) *NullableVmwareRecoverDisksOriginalSourceConfig {
	return &NullableVmwareRecoverDisksOriginalSourceConfig{value: val, isSet: true}
}

func (v NullableVmwareRecoverDisksOriginalSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareRecoverDisksOriginalSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


