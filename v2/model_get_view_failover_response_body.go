/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GetViewFailoverResponseBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetViewFailoverResponseBody{}

// GetViewFailoverResponseBody Specifies planned failovers and unplanned failovers of a view.
type GetViewFailoverResponseBody struct {
	// Specifies a list of failovers.
	Failovers []Failover `json:"failovers,omitempty"`
}

// NewGetViewFailoverResponseBody instantiates a new GetViewFailoverResponseBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetViewFailoverResponseBody() *GetViewFailoverResponseBody {
	this := GetViewFailoverResponseBody{}
	return &this
}

// NewGetViewFailoverResponseBodyWithDefaults instantiates a new GetViewFailoverResponseBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetViewFailoverResponseBodyWithDefaults() *GetViewFailoverResponseBody {
	this := GetViewFailoverResponseBody{}
	return &this
}

// GetFailovers returns the Failovers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetViewFailoverResponseBody) GetFailovers() []Failover {
	if o == nil {
		var ret []Failover
		return ret
	}
	return o.Failovers
}

// GetFailoversOk returns a tuple with the Failovers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetViewFailoverResponseBody) GetFailoversOk() ([]Failover, bool) {
	if o == nil || IsNil(o.Failovers) {
		return nil, false
	}
	return o.Failovers, true
}

// HasFailovers returns a boolean if a field has been set.
func (o *GetViewFailoverResponseBody) HasFailovers() bool {
	if o != nil && !IsNil(o.Failovers) {
		return true
	}

	return false
}

// SetFailovers gets a reference to the given []Failover and assigns it to the Failovers field.
func (o *GetViewFailoverResponseBody) SetFailovers(v []Failover) {
	o.Failovers = v
}

func (o GetViewFailoverResponseBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetViewFailoverResponseBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Failovers != nil {
		toSerialize["failovers"] = o.Failovers
	}
	return toSerialize, nil
}

type NullableGetViewFailoverResponseBody struct {
	value *GetViewFailoverResponseBody
	isSet bool
}

func (v NullableGetViewFailoverResponseBody) Get() *GetViewFailoverResponseBody {
	return v.value
}

func (v *NullableGetViewFailoverResponseBody) Set(val *GetViewFailoverResponseBody) {
	v.value = val
	v.isSet = true
}

func (v NullableGetViewFailoverResponseBody) IsSet() bool {
	return v.isSet
}

func (v *NullableGetViewFailoverResponseBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetViewFailoverResponseBody(val *GetViewFailoverResponseBody) *NullableGetViewFailoverResponseBody {
	return &NullableGetViewFailoverResponseBody{value: val, isSet: true}
}

func (v NullableGetViewFailoverResponseBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetViewFailoverResponseBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


