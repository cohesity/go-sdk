/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SupportMfaConfigInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SupportMfaConfigInfo{}

// SupportMfaConfigInfo Holds the MFA configuration to be returned or stored.
type SupportMfaConfigInfo struct {
	// Specifies email address of the support user. Used when MFA mode is email.
	Email NullableString `json:"email,omitempty"`
	// Specifies whether MFA is enabled for support user.
	Enabled *bool `json:"enabled,omitempty"`
	// MFA code that needs to be passed when disabling MFA or changing email address when email based MFA is configured.
	MfaCode NullableString `json:"mfaCode,omitempty"`
	// Specifies the mechanism to receive the OTP code.
	MfaType NullableString `json:"mfaType,omitempty"`
	// Specifies the status of otp verification.
	OtpVerificationState NullableString `json:"otpVerificationState,omitempty"`
}

// NewSupportMfaConfigInfo instantiates a new SupportMfaConfigInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportMfaConfigInfo() *SupportMfaConfigInfo {
	this := SupportMfaConfigInfo{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// NewSupportMfaConfigInfoWithDefaults instantiates a new SupportMfaConfigInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportMfaConfigInfoWithDefaults() *SupportMfaConfigInfo {
	this := SupportMfaConfigInfo{}
	var enabled bool = false
	this.Enabled = &enabled
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportMfaConfigInfo) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportMfaConfigInfo) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *SupportMfaConfigInfo) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *SupportMfaConfigInfo) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *SupportMfaConfigInfo) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *SupportMfaConfigInfo) UnsetEmail() {
	o.Email.Unset()
}

// GetEnabled returns the Enabled field value if set, zero value otherwise.
func (o *SupportMfaConfigInfo) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled) {
		var ret bool
		return ret
	}
	return *o.Enabled
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SupportMfaConfigInfo) GetEnabledOk() (*bool, bool) {
	if o == nil || IsNil(o.Enabled) {
		return nil, false
	}
	return o.Enabled, true
}

// HasEnabled returns a boolean if a field has been set.
func (o *SupportMfaConfigInfo) HasEnabled() bool {
	if o != nil && !IsNil(o.Enabled) {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given bool and assigns it to the Enabled field.
func (o *SupportMfaConfigInfo) SetEnabled(v bool) {
	o.Enabled = &v
}

// GetMfaCode returns the MfaCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportMfaConfigInfo) GetMfaCode() string {
	if o == nil || IsNil(o.MfaCode.Get()) {
		var ret string
		return ret
	}
	return *o.MfaCode.Get()
}

// GetMfaCodeOk returns a tuple with the MfaCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportMfaConfigInfo) GetMfaCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MfaCode.Get(), o.MfaCode.IsSet()
}

// HasMfaCode returns a boolean if a field has been set.
func (o *SupportMfaConfigInfo) HasMfaCode() bool {
	if o != nil && o.MfaCode.IsSet() {
		return true
	}

	return false
}

// SetMfaCode gets a reference to the given NullableString and assigns it to the MfaCode field.
func (o *SupportMfaConfigInfo) SetMfaCode(v string) {
	o.MfaCode.Set(&v)
}
// SetMfaCodeNil sets the value for MfaCode to be an explicit nil
func (o *SupportMfaConfigInfo) SetMfaCodeNil() {
	o.MfaCode.Set(nil)
}

// UnsetMfaCode ensures that no value is present for MfaCode, not even an explicit nil
func (o *SupportMfaConfigInfo) UnsetMfaCode() {
	o.MfaCode.Unset()
}

// GetMfaType returns the MfaType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportMfaConfigInfo) GetMfaType() string {
	if o == nil || IsNil(o.MfaType.Get()) {
		var ret string
		return ret
	}
	return *o.MfaType.Get()
}

// GetMfaTypeOk returns a tuple with the MfaType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportMfaConfigInfo) GetMfaTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MfaType.Get(), o.MfaType.IsSet()
}

// HasMfaType returns a boolean if a field has been set.
func (o *SupportMfaConfigInfo) HasMfaType() bool {
	if o != nil && o.MfaType.IsSet() {
		return true
	}

	return false
}

// SetMfaType gets a reference to the given NullableString and assigns it to the MfaType field.
func (o *SupportMfaConfigInfo) SetMfaType(v string) {
	o.MfaType.Set(&v)
}
// SetMfaTypeNil sets the value for MfaType to be an explicit nil
func (o *SupportMfaConfigInfo) SetMfaTypeNil() {
	o.MfaType.Set(nil)
}

// UnsetMfaType ensures that no value is present for MfaType, not even an explicit nil
func (o *SupportMfaConfigInfo) UnsetMfaType() {
	o.MfaType.Unset()
}

// GetOtpVerificationState returns the OtpVerificationState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SupportMfaConfigInfo) GetOtpVerificationState() string {
	if o == nil || IsNil(o.OtpVerificationState.Get()) {
		var ret string
		return ret
	}
	return *o.OtpVerificationState.Get()
}

// GetOtpVerificationStateOk returns a tuple with the OtpVerificationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportMfaConfigInfo) GetOtpVerificationStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtpVerificationState.Get(), o.OtpVerificationState.IsSet()
}

// HasOtpVerificationState returns a boolean if a field has been set.
func (o *SupportMfaConfigInfo) HasOtpVerificationState() bool {
	if o != nil && o.OtpVerificationState.IsSet() {
		return true
	}

	return false
}

// SetOtpVerificationState gets a reference to the given NullableString and assigns it to the OtpVerificationState field.
func (o *SupportMfaConfigInfo) SetOtpVerificationState(v string) {
	o.OtpVerificationState.Set(&v)
}
// SetOtpVerificationStateNil sets the value for OtpVerificationState to be an explicit nil
func (o *SupportMfaConfigInfo) SetOtpVerificationStateNil() {
	o.OtpVerificationState.Set(nil)
}

// UnsetOtpVerificationState ensures that no value is present for OtpVerificationState, not even an explicit nil
func (o *SupportMfaConfigInfo) UnsetOtpVerificationState() {
	o.OtpVerificationState.Unset()
}

func (o SupportMfaConfigInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SupportMfaConfigInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if !IsNil(o.Enabled) {
		toSerialize["enabled"] = o.Enabled
	}
	if o.MfaCode.IsSet() {
		toSerialize["mfaCode"] = o.MfaCode.Get()
	}
	if o.MfaType.IsSet() {
		toSerialize["mfaType"] = o.MfaType.Get()
	}
	if o.OtpVerificationState.IsSet() {
		toSerialize["otpVerificationState"] = o.OtpVerificationState.Get()
	}
	return toSerialize, nil
}

type NullableSupportMfaConfigInfo struct {
	value *SupportMfaConfigInfo
	isSet bool
}

func (v NullableSupportMfaConfigInfo) Get() *SupportMfaConfigInfo {
	return v.value
}

func (v *NullableSupportMfaConfigInfo) Set(val *SupportMfaConfigInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportMfaConfigInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportMfaConfigInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportMfaConfigInfo(val *SupportMfaConfigInfo) *NullableSupportMfaConfigInfo {
	return &NullableSupportMfaConfigInfo{value: val, isSet: true}
}

func (v NullableSupportMfaConfigInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportMfaConfigInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


