/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VMWareCDPFilterParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VMWareCDPFilterParams{}

// VMWareCDPFilterParams Specifies the parameters to download VMware CDP IO filter.
type VMWareCDPFilterParams struct {
	// Specifies the version of the ESXi host where filter needs to be installed.
	EsxiVersion NullableString `json:"esxiVersion"`
}

type _VMWareCDPFilterParams VMWareCDPFilterParams

// NewVMWareCDPFilterParams instantiates a new VMWareCDPFilterParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMWareCDPFilterParams(esxiVersion NullableString) *VMWareCDPFilterParams {
	this := VMWareCDPFilterParams{}
	this.EsxiVersion = esxiVersion
	return &this
}

// NewVMWareCDPFilterParamsWithDefaults instantiates a new VMWareCDPFilterParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMWareCDPFilterParamsWithDefaults() *VMWareCDPFilterParams {
	this := VMWareCDPFilterParams{}
	return &this
}

// GetEsxiVersion returns the EsxiVersion field value
// If the value is explicit nil, the zero value for string will be returned
func (o *VMWareCDPFilterParams) GetEsxiVersion() string {
	if o == nil || o.EsxiVersion.Get() == nil {
		var ret string
		return ret
	}

	return *o.EsxiVersion.Get()
}

// GetEsxiVersionOk returns a tuple with the EsxiVersion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMWareCDPFilterParams) GetEsxiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EsxiVersion.Get(), o.EsxiVersion.IsSet()
}

// SetEsxiVersion sets field value
func (o *VMWareCDPFilterParams) SetEsxiVersion(v string) {
	o.EsxiVersion.Set(&v)
}

func (o VMWareCDPFilterParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VMWareCDPFilterParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["esxiVersion"] = o.EsxiVersion.Get()
	return toSerialize, nil
}

func (o *VMWareCDPFilterParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"esxiVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVMWareCDPFilterParams := _VMWareCDPFilterParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVMWareCDPFilterParams)

	if err != nil {
		return err
	}

	*o = VMWareCDPFilterParams(varVMWareCDPFilterParams)

	return err
}

type NullableVMWareCDPFilterParams struct {
	value *VMWareCDPFilterParams
	isSet bool
}

func (v NullableVMWareCDPFilterParams) Get() *VMWareCDPFilterParams {
	return v.value
}

func (v *NullableVMWareCDPFilterParams) Set(val *VMWareCDPFilterParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVMWareCDPFilterParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVMWareCDPFilterParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMWareCDPFilterParams(val *VMWareCDPFilterParams) *NullableVMWareCDPFilterParams {
	return &NullableVMWareCDPFilterParams{value: val, isSet: true}
}

func (v NullableVMWareCDPFilterParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMWareCDPFilterParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


