/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverGcpParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverGcpParams{}

// RecoverGcpParams Specifies the recovery options specific to GCP environment.
type RecoverGcpParams struct {
	DownloadFileAndFolderParams NullableRecoverGcpParamsDownloadFileAndFolderParams `json:"downloadFileAndFolderParams,omitempty"`
	// Specifies the list of recover Object parameters. This property is mandatory for all recovery action types except recover vms. While recovering VMs, a user can specify snapshots of VM's or a Protection Group Run details to recover all the VM's that are backed up by that Run.
	Objects []CommonRecoverObjectSnapshotParams `json:"objects,omitempty"`
	RecoverFileAndFolderParams NullableRecoverGcpParamsRecoverFileAndFolderParams `json:"recoverFileAndFolderParams,omitempty"`
	RecoverVmParams NullableRecoverGcpParamsRecoverVmParams `json:"recoverVmParams,omitempty"`
	// Specifies the type of recover action to be performed.
	RecoveryAction string `json:"recoveryAction"`
}

type _RecoverGcpParams RecoverGcpParams

// NewRecoverGcpParams instantiates a new RecoverGcpParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverGcpParams(recoveryAction string) *RecoverGcpParams {
	this := RecoverGcpParams{}
	this.RecoveryAction = recoveryAction
	return &this
}

// NewRecoverGcpParamsWithDefaults instantiates a new RecoverGcpParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverGcpParamsWithDefaults() *RecoverGcpParams {
	this := RecoverGcpParams{}
	return &this
}

// GetDownloadFileAndFolderParams returns the DownloadFileAndFolderParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverGcpParams) GetDownloadFileAndFolderParams() RecoverGcpParamsDownloadFileAndFolderParams {
	if o == nil || IsNil(o.DownloadFileAndFolderParams.Get()) {
		var ret RecoverGcpParamsDownloadFileAndFolderParams
		return ret
	}
	return *o.DownloadFileAndFolderParams.Get()
}

// GetDownloadFileAndFolderParamsOk returns a tuple with the DownloadFileAndFolderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverGcpParams) GetDownloadFileAndFolderParamsOk() (*RecoverGcpParamsDownloadFileAndFolderParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadFileAndFolderParams.Get(), o.DownloadFileAndFolderParams.IsSet()
}

// HasDownloadFileAndFolderParams returns a boolean if a field has been set.
func (o *RecoverGcpParams) HasDownloadFileAndFolderParams() bool {
	if o != nil && o.DownloadFileAndFolderParams.IsSet() {
		return true
	}

	return false
}

// SetDownloadFileAndFolderParams gets a reference to the given NullableRecoverGcpParamsDownloadFileAndFolderParams and assigns it to the DownloadFileAndFolderParams field.
func (o *RecoverGcpParams) SetDownloadFileAndFolderParams(v RecoverGcpParamsDownloadFileAndFolderParams) {
	o.DownloadFileAndFolderParams.Set(&v)
}
// SetDownloadFileAndFolderParamsNil sets the value for DownloadFileAndFolderParams to be an explicit nil
func (o *RecoverGcpParams) SetDownloadFileAndFolderParamsNil() {
	o.DownloadFileAndFolderParams.Set(nil)
}

// UnsetDownloadFileAndFolderParams ensures that no value is present for DownloadFileAndFolderParams, not even an explicit nil
func (o *RecoverGcpParams) UnsetDownloadFileAndFolderParams() {
	o.DownloadFileAndFolderParams.Unset()
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverGcpParams) GetObjects() []CommonRecoverObjectSnapshotParams {
	if o == nil {
		var ret []CommonRecoverObjectSnapshotParams
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverGcpParams) GetObjectsOk() ([]CommonRecoverObjectSnapshotParams, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *RecoverGcpParams) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []CommonRecoverObjectSnapshotParams and assigns it to the Objects field.
func (o *RecoverGcpParams) SetObjects(v []CommonRecoverObjectSnapshotParams) {
	o.Objects = v
}

// GetRecoverFileAndFolderParams returns the RecoverFileAndFolderParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverGcpParams) GetRecoverFileAndFolderParams() RecoverGcpParamsRecoverFileAndFolderParams {
	if o == nil || IsNil(o.RecoverFileAndFolderParams.Get()) {
		var ret RecoverGcpParamsRecoverFileAndFolderParams
		return ret
	}
	return *o.RecoverFileAndFolderParams.Get()
}

// GetRecoverFileAndFolderParamsOk returns a tuple with the RecoverFileAndFolderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverGcpParams) GetRecoverFileAndFolderParamsOk() (*RecoverGcpParamsRecoverFileAndFolderParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverFileAndFolderParams.Get(), o.RecoverFileAndFolderParams.IsSet()
}

// HasRecoverFileAndFolderParams returns a boolean if a field has been set.
func (o *RecoverGcpParams) HasRecoverFileAndFolderParams() bool {
	if o != nil && o.RecoverFileAndFolderParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverFileAndFolderParams gets a reference to the given NullableRecoverGcpParamsRecoverFileAndFolderParams and assigns it to the RecoverFileAndFolderParams field.
func (o *RecoverGcpParams) SetRecoverFileAndFolderParams(v RecoverGcpParamsRecoverFileAndFolderParams) {
	o.RecoverFileAndFolderParams.Set(&v)
}
// SetRecoverFileAndFolderParamsNil sets the value for RecoverFileAndFolderParams to be an explicit nil
func (o *RecoverGcpParams) SetRecoverFileAndFolderParamsNil() {
	o.RecoverFileAndFolderParams.Set(nil)
}

// UnsetRecoverFileAndFolderParams ensures that no value is present for RecoverFileAndFolderParams, not even an explicit nil
func (o *RecoverGcpParams) UnsetRecoverFileAndFolderParams() {
	o.RecoverFileAndFolderParams.Unset()
}

// GetRecoverVmParams returns the RecoverVmParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverGcpParams) GetRecoverVmParams() RecoverGcpParamsRecoverVmParams {
	if o == nil || IsNil(o.RecoverVmParams.Get()) {
		var ret RecoverGcpParamsRecoverVmParams
		return ret
	}
	return *o.RecoverVmParams.Get()
}

// GetRecoverVmParamsOk returns a tuple with the RecoverVmParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverGcpParams) GetRecoverVmParamsOk() (*RecoverGcpParamsRecoverVmParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverVmParams.Get(), o.RecoverVmParams.IsSet()
}

// HasRecoverVmParams returns a boolean if a field has been set.
func (o *RecoverGcpParams) HasRecoverVmParams() bool {
	if o != nil && o.RecoverVmParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverVmParams gets a reference to the given NullableRecoverGcpParamsRecoverVmParams and assigns it to the RecoverVmParams field.
func (o *RecoverGcpParams) SetRecoverVmParams(v RecoverGcpParamsRecoverVmParams) {
	o.RecoverVmParams.Set(&v)
}
// SetRecoverVmParamsNil sets the value for RecoverVmParams to be an explicit nil
func (o *RecoverGcpParams) SetRecoverVmParamsNil() {
	o.RecoverVmParams.Set(nil)
}

// UnsetRecoverVmParams ensures that no value is present for RecoverVmParams, not even an explicit nil
func (o *RecoverGcpParams) UnsetRecoverVmParams() {
	o.RecoverVmParams.Unset()
}

// GetRecoveryAction returns the RecoveryAction field value
func (o *RecoverGcpParams) GetRecoveryAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecoveryAction
}

// GetRecoveryActionOk returns a tuple with the RecoveryAction field value
// and a boolean to check if the value has been set.
func (o *RecoverGcpParams) GetRecoveryActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoveryAction, true
}

// SetRecoveryAction sets field value
func (o *RecoverGcpParams) SetRecoveryAction(v string) {
	o.RecoveryAction = v
}

func (o RecoverGcpParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverGcpParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DownloadFileAndFolderParams.IsSet() {
		toSerialize["downloadFileAndFolderParams"] = o.DownloadFileAndFolderParams.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.RecoverFileAndFolderParams.IsSet() {
		toSerialize["recoverFileAndFolderParams"] = o.RecoverFileAndFolderParams.Get()
	}
	if o.RecoverVmParams.IsSet() {
		toSerialize["recoverVmParams"] = o.RecoverVmParams.Get()
	}
	toSerialize["recoveryAction"] = o.RecoveryAction
	return toSerialize, nil
}

func (o *RecoverGcpParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoveryAction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverGcpParams := _RecoverGcpParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverGcpParams)

	if err != nil {
		return err
	}

	*o = RecoverGcpParams(varRecoverGcpParams)

	return err
}

type NullableRecoverGcpParams struct {
	value *RecoverGcpParams
	isSet bool
}

func (v NullableRecoverGcpParams) Get() *RecoverGcpParams {
	return v.value
}

func (v *NullableRecoverGcpParams) Set(val *RecoverGcpParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverGcpParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverGcpParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverGcpParams(val *RecoverGcpParams) *NullableRecoverGcpParams {
	return &NullableRecoverGcpParams{value: val, isSet: true}
}

func (v NullableRecoverGcpParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverGcpParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


