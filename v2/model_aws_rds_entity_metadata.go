/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsRdsEntityMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsRdsEntityMetadata{}

// AwsRdsEntityMetadata Specifies the entity metadata of aws rds entities.
type AwsRdsEntityMetadata struct {
	// Specifies the engine id of the database which can be used to identify the type of database.
	DbEngineId *string `json:"dbEngineId,omitempty"`
	// Specifies the metadata list.
	MetadataList []AwsPostgresMetadata `json:"metadataList"`
}

type _AwsRdsEntityMetadata AwsRdsEntityMetadata

// NewAwsRdsEntityMetadata instantiates a new AwsRdsEntityMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsRdsEntityMetadata(metadataList []AwsPostgresMetadata) *AwsRdsEntityMetadata {
	this := AwsRdsEntityMetadata{}
	this.MetadataList = metadataList
	return &this
}

// NewAwsRdsEntityMetadataWithDefaults instantiates a new AwsRdsEntityMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsRdsEntityMetadataWithDefaults() *AwsRdsEntityMetadata {
	this := AwsRdsEntityMetadata{}
	return &this
}

// GetDbEngineId returns the DbEngineId field value if set, zero value otherwise.
func (o *AwsRdsEntityMetadata) GetDbEngineId() string {
	if o == nil || IsNil(o.DbEngineId) {
		var ret string
		return ret
	}
	return *o.DbEngineId
}

// GetDbEngineIdOk returns a tuple with the DbEngineId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsRdsEntityMetadata) GetDbEngineIdOk() (*string, bool) {
	if o == nil || IsNil(o.DbEngineId) {
		return nil, false
	}
	return o.DbEngineId, true
}

// HasDbEngineId returns a boolean if a field has been set.
func (o *AwsRdsEntityMetadata) HasDbEngineId() bool {
	if o != nil && !IsNil(o.DbEngineId) {
		return true
	}

	return false
}

// SetDbEngineId gets a reference to the given string and assigns it to the DbEngineId field.
func (o *AwsRdsEntityMetadata) SetDbEngineId(v string) {
	o.DbEngineId = &v
}

// GetMetadataList returns the MetadataList field value
func (o *AwsRdsEntityMetadata) GetMetadataList() []AwsPostgresMetadata {
	if o == nil {
		var ret []AwsPostgresMetadata
		return ret
	}

	return o.MetadataList
}

// GetMetadataListOk returns a tuple with the MetadataList field value
// and a boolean to check if the value has been set.
func (o *AwsRdsEntityMetadata) GetMetadataListOk() ([]AwsPostgresMetadata, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataList, true
}

// SetMetadataList sets field value
func (o *AwsRdsEntityMetadata) SetMetadataList(v []AwsPostgresMetadata) {
	o.MetadataList = v
}

func (o AwsRdsEntityMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsRdsEntityMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DbEngineId) {
		toSerialize["dbEngineId"] = o.DbEngineId
	}
	toSerialize["metadataList"] = o.MetadataList
	return toSerialize, nil
}

func (o *AwsRdsEntityMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataList",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsRdsEntityMetadata := _AwsRdsEntityMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsRdsEntityMetadata)

	if err != nil {
		return err
	}

	*o = AwsRdsEntityMetadata(varAwsRdsEntityMetadata)

	return err
}

type NullableAwsRdsEntityMetadata struct {
	value *AwsRdsEntityMetadata
	isSet bool
}

func (v NullableAwsRdsEntityMetadata) Get() *AwsRdsEntityMetadata {
	return v.value
}

func (v *NullableAwsRdsEntityMetadata) Set(val *AwsRdsEntityMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsRdsEntityMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsRdsEntityMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsRdsEntityMetadata(val *AwsRdsEntityMetadata) *NullableAwsRdsEntityMetadata {
	return &NullableAwsRdsEntityMetadata{value: val, isSet: true}
}

func (v NullableAwsRdsEntityMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsRdsEntityMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


