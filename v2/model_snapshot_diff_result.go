/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SnapshotDiffResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotDiffResult{}

// SnapshotDiffResult struct for SnapshotDiffResult
type SnapshotDiffResult struct {
	FileOperations []FileOperation `json:"fileOperations,omitempty"`
	Status string `json:"status"`
}

type _SnapshotDiffResult SnapshotDiffResult

// NewSnapshotDiffResult instantiates a new SnapshotDiffResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotDiffResult(status string) *SnapshotDiffResult {
	this := SnapshotDiffResult{}
	this.Status = status
	return &this
}

// NewSnapshotDiffResultWithDefaults instantiates a new SnapshotDiffResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotDiffResultWithDefaults() *SnapshotDiffResult {
	this := SnapshotDiffResult{}
	return &this
}

// GetFileOperations returns the FileOperations field value if set, zero value otherwise.
func (o *SnapshotDiffResult) GetFileOperations() []FileOperation {
	if o == nil || IsNil(o.FileOperations) {
		var ret []FileOperation
		return ret
	}
	return o.FileOperations
}

// GetFileOperationsOk returns a tuple with the FileOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotDiffResult) GetFileOperationsOk() ([]FileOperation, bool) {
	if o == nil || IsNil(o.FileOperations) {
		return nil, false
	}
	return o.FileOperations, true
}

// HasFileOperations returns a boolean if a field has been set.
func (o *SnapshotDiffResult) HasFileOperations() bool {
	if o != nil && !IsNil(o.FileOperations) {
		return true
	}

	return false
}

// SetFileOperations gets a reference to the given []FileOperation and assigns it to the FileOperations field.
func (o *SnapshotDiffResult) SetFileOperations(v []FileOperation) {
	o.FileOperations = v
}

// GetStatus returns the Status field value
func (o *SnapshotDiffResult) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SnapshotDiffResult) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SnapshotDiffResult) SetStatus(v string) {
	o.Status = v
}

func (o SnapshotDiffResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotDiffResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FileOperations) {
		toSerialize["fileOperations"] = o.FileOperations
	}
	toSerialize["status"] = o.Status
	return toSerialize, nil
}

func (o *SnapshotDiffResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSnapshotDiffResult := _SnapshotDiffResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSnapshotDiffResult)

	if err != nil {
		return err
	}

	*o = SnapshotDiffResult(varSnapshotDiffResult)

	return err
}

type NullableSnapshotDiffResult struct {
	value *SnapshotDiffResult
	isSet bool
}

func (v NullableSnapshotDiffResult) Get() *SnapshotDiffResult {
	return v.value
}

func (v *NullableSnapshotDiffResult) Set(val *SnapshotDiffResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotDiffResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotDiffResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotDiffResult(val *SnapshotDiffResult) *NullableSnapshotDiffResult {
	return &NullableSnapshotDiffResult{value: val, isSet: true}
}

func (v NullableSnapshotDiffResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotDiffResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


