/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverVmwareParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverVmwareParams{}

// RecoverVmwareParams Specifies the recovery options specific to VMware environment.
type RecoverVmwareParams struct {
	DownloadFileAndFolderParams NullableRecoverAwsParamsDownloadFileAndFolderParams `json:"downloadFileAndFolderParams,omitempty"`
	MountVolumeParams NullableRecoverVmwareParamsMountVolumeParams `json:"mountVolumeParams,omitempty"`
	// Specifies the list of recover Object parameters. This property is mandatory for all recovery action types except recover vms. While recovering VMs, a user can specify snapshots of VM's or a Protection Group Run details to recover all the VM's that are backed up by that Run. For recovering files, specifies the object contains the file to recover.
	Objects []RecoverVmwareSnapshotParams `json:"objects,omitempty"`
	RecoverFileAndFolderParams NullableRecoverVmwareParamsRecoverFileAndFolderParams `json:"recoverFileAndFolderParams,omitempty"`
	RecoverVAppParams NullableRecoverVmwareParamsRecoverVAppParams `json:"recoverVAppParams,omitempty"`
	RecoverVAppTemplateParams NullableRecoverVmwareParamsRecoverVAppTemplateParams `json:"recoverVAppTemplateParams,omitempty"`
	RecoverVmDiskParams NullableRecoverVmwareParamsRecoverVmDiskParams `json:"recoverVmDiskParams,omitempty"`
	RecoverVmParams NullableRecoverVmwareParamsRecoverVmParams `json:"recoverVmParams,omitempty"`
	// Specifies the type of recovery action to be performed.
	RecoveryAction string `json:"recoveryAction"`
}

type _RecoverVmwareParams RecoverVmwareParams

// NewRecoverVmwareParams instantiates a new RecoverVmwareParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVmwareParams(recoveryAction string) *RecoverVmwareParams {
	this := RecoverVmwareParams{}
	this.RecoveryAction = recoveryAction
	return &this
}

// NewRecoverVmwareParamsWithDefaults instantiates a new RecoverVmwareParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVmwareParamsWithDefaults() *RecoverVmwareParams {
	this := RecoverVmwareParams{}
	return &this
}

// GetDownloadFileAndFolderParams returns the DownloadFileAndFolderParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParams) GetDownloadFileAndFolderParams() RecoverAwsParamsDownloadFileAndFolderParams {
	if o == nil || IsNil(o.DownloadFileAndFolderParams.Get()) {
		var ret RecoverAwsParamsDownloadFileAndFolderParams
		return ret
	}
	return *o.DownloadFileAndFolderParams.Get()
}

// GetDownloadFileAndFolderParamsOk returns a tuple with the DownloadFileAndFolderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParams) GetDownloadFileAndFolderParamsOk() (*RecoverAwsParamsDownloadFileAndFolderParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadFileAndFolderParams.Get(), o.DownloadFileAndFolderParams.IsSet()
}

// HasDownloadFileAndFolderParams returns a boolean if a field has been set.
func (o *RecoverVmwareParams) HasDownloadFileAndFolderParams() bool {
	if o != nil && o.DownloadFileAndFolderParams.IsSet() {
		return true
	}

	return false
}

// SetDownloadFileAndFolderParams gets a reference to the given NullableRecoverAwsParamsDownloadFileAndFolderParams and assigns it to the DownloadFileAndFolderParams field.
func (o *RecoverVmwareParams) SetDownloadFileAndFolderParams(v RecoverAwsParamsDownloadFileAndFolderParams) {
	o.DownloadFileAndFolderParams.Set(&v)
}
// SetDownloadFileAndFolderParamsNil sets the value for DownloadFileAndFolderParams to be an explicit nil
func (o *RecoverVmwareParams) SetDownloadFileAndFolderParamsNil() {
	o.DownloadFileAndFolderParams.Set(nil)
}

// UnsetDownloadFileAndFolderParams ensures that no value is present for DownloadFileAndFolderParams, not even an explicit nil
func (o *RecoverVmwareParams) UnsetDownloadFileAndFolderParams() {
	o.DownloadFileAndFolderParams.Unset()
}

// GetMountVolumeParams returns the MountVolumeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParams) GetMountVolumeParams() RecoverVmwareParamsMountVolumeParams {
	if o == nil || IsNil(o.MountVolumeParams.Get()) {
		var ret RecoverVmwareParamsMountVolumeParams
		return ret
	}
	return *o.MountVolumeParams.Get()
}

// GetMountVolumeParamsOk returns a tuple with the MountVolumeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParams) GetMountVolumeParamsOk() (*RecoverVmwareParamsMountVolumeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountVolumeParams.Get(), o.MountVolumeParams.IsSet()
}

// HasMountVolumeParams returns a boolean if a field has been set.
func (o *RecoverVmwareParams) HasMountVolumeParams() bool {
	if o != nil && o.MountVolumeParams.IsSet() {
		return true
	}

	return false
}

// SetMountVolumeParams gets a reference to the given NullableRecoverVmwareParamsMountVolumeParams and assigns it to the MountVolumeParams field.
func (o *RecoverVmwareParams) SetMountVolumeParams(v RecoverVmwareParamsMountVolumeParams) {
	o.MountVolumeParams.Set(&v)
}
// SetMountVolumeParamsNil sets the value for MountVolumeParams to be an explicit nil
func (o *RecoverVmwareParams) SetMountVolumeParamsNil() {
	o.MountVolumeParams.Set(nil)
}

// UnsetMountVolumeParams ensures that no value is present for MountVolumeParams, not even an explicit nil
func (o *RecoverVmwareParams) UnsetMountVolumeParams() {
	o.MountVolumeParams.Unset()
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParams) GetObjects() []RecoverVmwareSnapshotParams {
	if o == nil {
		var ret []RecoverVmwareSnapshotParams
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParams) GetObjectsOk() ([]RecoverVmwareSnapshotParams, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *RecoverVmwareParams) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []RecoverVmwareSnapshotParams and assigns it to the Objects field.
func (o *RecoverVmwareParams) SetObjects(v []RecoverVmwareSnapshotParams) {
	o.Objects = v
}

// GetRecoverFileAndFolderParams returns the RecoverFileAndFolderParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParams) GetRecoverFileAndFolderParams() RecoverVmwareParamsRecoverFileAndFolderParams {
	if o == nil || IsNil(o.RecoverFileAndFolderParams.Get()) {
		var ret RecoverVmwareParamsRecoverFileAndFolderParams
		return ret
	}
	return *o.RecoverFileAndFolderParams.Get()
}

// GetRecoverFileAndFolderParamsOk returns a tuple with the RecoverFileAndFolderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParams) GetRecoverFileAndFolderParamsOk() (*RecoverVmwareParamsRecoverFileAndFolderParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverFileAndFolderParams.Get(), o.RecoverFileAndFolderParams.IsSet()
}

// HasRecoverFileAndFolderParams returns a boolean if a field has been set.
func (o *RecoverVmwareParams) HasRecoverFileAndFolderParams() bool {
	if o != nil && o.RecoverFileAndFolderParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverFileAndFolderParams gets a reference to the given NullableRecoverVmwareParamsRecoverFileAndFolderParams and assigns it to the RecoverFileAndFolderParams field.
func (o *RecoverVmwareParams) SetRecoverFileAndFolderParams(v RecoverVmwareParamsRecoverFileAndFolderParams) {
	o.RecoverFileAndFolderParams.Set(&v)
}
// SetRecoverFileAndFolderParamsNil sets the value for RecoverFileAndFolderParams to be an explicit nil
func (o *RecoverVmwareParams) SetRecoverFileAndFolderParamsNil() {
	o.RecoverFileAndFolderParams.Set(nil)
}

// UnsetRecoverFileAndFolderParams ensures that no value is present for RecoverFileAndFolderParams, not even an explicit nil
func (o *RecoverVmwareParams) UnsetRecoverFileAndFolderParams() {
	o.RecoverFileAndFolderParams.Unset()
}

// GetRecoverVAppParams returns the RecoverVAppParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParams) GetRecoverVAppParams() RecoverVmwareParamsRecoverVAppParams {
	if o == nil || IsNil(o.RecoverVAppParams.Get()) {
		var ret RecoverVmwareParamsRecoverVAppParams
		return ret
	}
	return *o.RecoverVAppParams.Get()
}

// GetRecoverVAppParamsOk returns a tuple with the RecoverVAppParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParams) GetRecoverVAppParamsOk() (*RecoverVmwareParamsRecoverVAppParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverVAppParams.Get(), o.RecoverVAppParams.IsSet()
}

// HasRecoverVAppParams returns a boolean if a field has been set.
func (o *RecoverVmwareParams) HasRecoverVAppParams() bool {
	if o != nil && o.RecoverVAppParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverVAppParams gets a reference to the given NullableRecoverVmwareParamsRecoverVAppParams and assigns it to the RecoverVAppParams field.
func (o *RecoverVmwareParams) SetRecoverVAppParams(v RecoverVmwareParamsRecoverVAppParams) {
	o.RecoverVAppParams.Set(&v)
}
// SetRecoverVAppParamsNil sets the value for RecoverVAppParams to be an explicit nil
func (o *RecoverVmwareParams) SetRecoverVAppParamsNil() {
	o.RecoverVAppParams.Set(nil)
}

// UnsetRecoverVAppParams ensures that no value is present for RecoverVAppParams, not even an explicit nil
func (o *RecoverVmwareParams) UnsetRecoverVAppParams() {
	o.RecoverVAppParams.Unset()
}

// GetRecoverVAppTemplateParams returns the RecoverVAppTemplateParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParams) GetRecoverVAppTemplateParams() RecoverVmwareParamsRecoverVAppTemplateParams {
	if o == nil || IsNil(o.RecoverVAppTemplateParams.Get()) {
		var ret RecoverVmwareParamsRecoverVAppTemplateParams
		return ret
	}
	return *o.RecoverVAppTemplateParams.Get()
}

// GetRecoverVAppTemplateParamsOk returns a tuple with the RecoverVAppTemplateParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParams) GetRecoverVAppTemplateParamsOk() (*RecoverVmwareParamsRecoverVAppTemplateParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverVAppTemplateParams.Get(), o.RecoverVAppTemplateParams.IsSet()
}

// HasRecoverVAppTemplateParams returns a boolean if a field has been set.
func (o *RecoverVmwareParams) HasRecoverVAppTemplateParams() bool {
	if o != nil && o.RecoverVAppTemplateParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverVAppTemplateParams gets a reference to the given NullableRecoverVmwareParamsRecoverVAppTemplateParams and assigns it to the RecoverVAppTemplateParams field.
func (o *RecoverVmwareParams) SetRecoverVAppTemplateParams(v RecoverVmwareParamsRecoverVAppTemplateParams) {
	o.RecoverVAppTemplateParams.Set(&v)
}
// SetRecoverVAppTemplateParamsNil sets the value for RecoverVAppTemplateParams to be an explicit nil
func (o *RecoverVmwareParams) SetRecoverVAppTemplateParamsNil() {
	o.RecoverVAppTemplateParams.Set(nil)
}

// UnsetRecoverVAppTemplateParams ensures that no value is present for RecoverVAppTemplateParams, not even an explicit nil
func (o *RecoverVmwareParams) UnsetRecoverVAppTemplateParams() {
	o.RecoverVAppTemplateParams.Unset()
}

// GetRecoverVmDiskParams returns the RecoverVmDiskParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParams) GetRecoverVmDiskParams() RecoverVmwareParamsRecoverVmDiskParams {
	if o == nil || IsNil(o.RecoverVmDiskParams.Get()) {
		var ret RecoverVmwareParamsRecoverVmDiskParams
		return ret
	}
	return *o.RecoverVmDiskParams.Get()
}

// GetRecoverVmDiskParamsOk returns a tuple with the RecoverVmDiskParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParams) GetRecoverVmDiskParamsOk() (*RecoverVmwareParamsRecoverVmDiskParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverVmDiskParams.Get(), o.RecoverVmDiskParams.IsSet()
}

// HasRecoverVmDiskParams returns a boolean if a field has been set.
func (o *RecoverVmwareParams) HasRecoverVmDiskParams() bool {
	if o != nil && o.RecoverVmDiskParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverVmDiskParams gets a reference to the given NullableRecoverVmwareParamsRecoverVmDiskParams and assigns it to the RecoverVmDiskParams field.
func (o *RecoverVmwareParams) SetRecoverVmDiskParams(v RecoverVmwareParamsRecoverVmDiskParams) {
	o.RecoverVmDiskParams.Set(&v)
}
// SetRecoverVmDiskParamsNil sets the value for RecoverVmDiskParams to be an explicit nil
func (o *RecoverVmwareParams) SetRecoverVmDiskParamsNil() {
	o.RecoverVmDiskParams.Set(nil)
}

// UnsetRecoverVmDiskParams ensures that no value is present for RecoverVmDiskParams, not even an explicit nil
func (o *RecoverVmwareParams) UnsetRecoverVmDiskParams() {
	o.RecoverVmDiskParams.Unset()
}

// GetRecoverVmParams returns the RecoverVmParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParams) GetRecoverVmParams() RecoverVmwareParamsRecoverVmParams {
	if o == nil || IsNil(o.RecoverVmParams.Get()) {
		var ret RecoverVmwareParamsRecoverVmParams
		return ret
	}
	return *o.RecoverVmParams.Get()
}

// GetRecoverVmParamsOk returns a tuple with the RecoverVmParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParams) GetRecoverVmParamsOk() (*RecoverVmwareParamsRecoverVmParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverVmParams.Get(), o.RecoverVmParams.IsSet()
}

// HasRecoverVmParams returns a boolean if a field has been set.
func (o *RecoverVmwareParams) HasRecoverVmParams() bool {
	if o != nil && o.RecoverVmParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverVmParams gets a reference to the given NullableRecoverVmwareParamsRecoverVmParams and assigns it to the RecoverVmParams field.
func (o *RecoverVmwareParams) SetRecoverVmParams(v RecoverVmwareParamsRecoverVmParams) {
	o.RecoverVmParams.Set(&v)
}
// SetRecoverVmParamsNil sets the value for RecoverVmParams to be an explicit nil
func (o *RecoverVmwareParams) SetRecoverVmParamsNil() {
	o.RecoverVmParams.Set(nil)
}

// UnsetRecoverVmParams ensures that no value is present for RecoverVmParams, not even an explicit nil
func (o *RecoverVmwareParams) UnsetRecoverVmParams() {
	o.RecoverVmParams.Unset()
}

// GetRecoveryAction returns the RecoveryAction field value
func (o *RecoverVmwareParams) GetRecoveryAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecoveryAction
}

// GetRecoveryActionOk returns a tuple with the RecoveryAction field value
// and a boolean to check if the value has been set.
func (o *RecoverVmwareParams) GetRecoveryActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoveryAction, true
}

// SetRecoveryAction sets field value
func (o *RecoverVmwareParams) SetRecoveryAction(v string) {
	o.RecoveryAction = v
}

func (o RecoverVmwareParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverVmwareParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DownloadFileAndFolderParams.IsSet() {
		toSerialize["downloadFileAndFolderParams"] = o.DownloadFileAndFolderParams.Get()
	}
	if o.MountVolumeParams.IsSet() {
		toSerialize["mountVolumeParams"] = o.MountVolumeParams.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.RecoverFileAndFolderParams.IsSet() {
		toSerialize["recoverFileAndFolderParams"] = o.RecoverFileAndFolderParams.Get()
	}
	if o.RecoverVAppParams.IsSet() {
		toSerialize["recoverVAppParams"] = o.RecoverVAppParams.Get()
	}
	if o.RecoverVAppTemplateParams.IsSet() {
		toSerialize["recoverVAppTemplateParams"] = o.RecoverVAppTemplateParams.Get()
	}
	if o.RecoverVmDiskParams.IsSet() {
		toSerialize["recoverVmDiskParams"] = o.RecoverVmDiskParams.Get()
	}
	if o.RecoverVmParams.IsSet() {
		toSerialize["recoverVmParams"] = o.RecoverVmParams.Get()
	}
	toSerialize["recoveryAction"] = o.RecoveryAction
	return toSerialize, nil
}

func (o *RecoverVmwareParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoveryAction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverVmwareParams := _RecoverVmwareParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverVmwareParams)

	if err != nil {
		return err
	}

	*o = RecoverVmwareParams(varRecoverVmwareParams)

	return err
}

type NullableRecoverVmwareParams struct {
	value *RecoverVmwareParams
	isSet bool
}

func (v NullableRecoverVmwareParams) Get() *RecoverVmwareParams {
	return v.value
}

func (v *NullableRecoverVmwareParams) Set(val *RecoverVmwareParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVmwareParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVmwareParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVmwareParams(val *RecoverVmwareParams) *NullableRecoverVmwareParams {
	return &NullableRecoverVmwareParams{value: val, isSet: true}
}

func (v NullableRecoverVmwareParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVmwareParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


