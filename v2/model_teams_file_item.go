/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TeamsFileItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamsFileItem{}

// TeamsFileItem Specifies a M365 Teams channel file item.
type TeamsFileItem struct {
	// Specifies the Unix timestamp epoch in seconds at which this item is created.
	CreationTimeSecs NullableInt64 `json:"creationTimeSecs,omitempty"`
	// Specifies the name of the drive location for this file.
	DriveName NullableString `json:"driveName,omitempty"`
	// Specifies the file type.
	FileType NullableString `json:"fileType,omitempty"`
	// Specifies the size in bytes for the indexed item.
	ItemSize NullableInt64 `json:"itemSize,omitempty"`
}

// NewTeamsFileItem instantiates a new TeamsFileItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamsFileItem() *TeamsFileItem {
	this := TeamsFileItem{}
	return &this
}

// NewTeamsFileItemWithDefaults instantiates a new TeamsFileItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamsFileItemWithDefaults() *TeamsFileItem {
	this := TeamsFileItem{}
	return &this
}

// GetCreationTimeSecs returns the CreationTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamsFileItem) GetCreationTimeSecs() int64 {
	if o == nil || IsNil(o.CreationTimeSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.CreationTimeSecs.Get()
}

// GetCreationTimeSecsOk returns a tuple with the CreationTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamsFileItem) GetCreationTimeSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreationTimeSecs.Get(), o.CreationTimeSecs.IsSet()
}

// HasCreationTimeSecs returns a boolean if a field has been set.
func (o *TeamsFileItem) HasCreationTimeSecs() bool {
	if o != nil && o.CreationTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetCreationTimeSecs gets a reference to the given NullableInt64 and assigns it to the CreationTimeSecs field.
func (o *TeamsFileItem) SetCreationTimeSecs(v int64) {
	o.CreationTimeSecs.Set(&v)
}
// SetCreationTimeSecsNil sets the value for CreationTimeSecs to be an explicit nil
func (o *TeamsFileItem) SetCreationTimeSecsNil() {
	o.CreationTimeSecs.Set(nil)
}

// UnsetCreationTimeSecs ensures that no value is present for CreationTimeSecs, not even an explicit nil
func (o *TeamsFileItem) UnsetCreationTimeSecs() {
	o.CreationTimeSecs.Unset()
}

// GetDriveName returns the DriveName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamsFileItem) GetDriveName() string {
	if o == nil || IsNil(o.DriveName.Get()) {
		var ret string
		return ret
	}
	return *o.DriveName.Get()
}

// GetDriveNameOk returns a tuple with the DriveName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamsFileItem) GetDriveNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DriveName.Get(), o.DriveName.IsSet()
}

// HasDriveName returns a boolean if a field has been set.
func (o *TeamsFileItem) HasDriveName() bool {
	if o != nil && o.DriveName.IsSet() {
		return true
	}

	return false
}

// SetDriveName gets a reference to the given NullableString and assigns it to the DriveName field.
func (o *TeamsFileItem) SetDriveName(v string) {
	o.DriveName.Set(&v)
}
// SetDriveNameNil sets the value for DriveName to be an explicit nil
func (o *TeamsFileItem) SetDriveNameNil() {
	o.DriveName.Set(nil)
}

// UnsetDriveName ensures that no value is present for DriveName, not even an explicit nil
func (o *TeamsFileItem) UnsetDriveName() {
	o.DriveName.Unset()
}

// GetFileType returns the FileType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamsFileItem) GetFileType() string {
	if o == nil || IsNil(o.FileType.Get()) {
		var ret string
		return ret
	}
	return *o.FileType.Get()
}

// GetFileTypeOk returns a tuple with the FileType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamsFileItem) GetFileTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileType.Get(), o.FileType.IsSet()
}

// HasFileType returns a boolean if a field has been set.
func (o *TeamsFileItem) HasFileType() bool {
	if o != nil && o.FileType.IsSet() {
		return true
	}

	return false
}

// SetFileType gets a reference to the given NullableString and assigns it to the FileType field.
func (o *TeamsFileItem) SetFileType(v string) {
	o.FileType.Set(&v)
}
// SetFileTypeNil sets the value for FileType to be an explicit nil
func (o *TeamsFileItem) SetFileTypeNil() {
	o.FileType.Set(nil)
}

// UnsetFileType ensures that no value is present for FileType, not even an explicit nil
func (o *TeamsFileItem) UnsetFileType() {
	o.FileType.Unset()
}

// GetItemSize returns the ItemSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamsFileItem) GetItemSize() int64 {
	if o == nil || IsNil(o.ItemSize.Get()) {
		var ret int64
		return ret
	}
	return *o.ItemSize.Get()
}

// GetItemSizeOk returns a tuple with the ItemSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamsFileItem) GetItemSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ItemSize.Get(), o.ItemSize.IsSet()
}

// HasItemSize returns a boolean if a field has been set.
func (o *TeamsFileItem) HasItemSize() bool {
	if o != nil && o.ItemSize.IsSet() {
		return true
	}

	return false
}

// SetItemSize gets a reference to the given NullableInt64 and assigns it to the ItemSize field.
func (o *TeamsFileItem) SetItemSize(v int64) {
	o.ItemSize.Set(&v)
}
// SetItemSizeNil sets the value for ItemSize to be an explicit nil
func (o *TeamsFileItem) SetItemSizeNil() {
	o.ItemSize.Set(nil)
}

// UnsetItemSize ensures that no value is present for ItemSize, not even an explicit nil
func (o *TeamsFileItem) UnsetItemSize() {
	o.ItemSize.Unset()
}

func (o TeamsFileItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamsFileItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CreationTimeSecs.IsSet() {
		toSerialize["creationTimeSecs"] = o.CreationTimeSecs.Get()
	}
	if o.DriveName.IsSet() {
		toSerialize["driveName"] = o.DriveName.Get()
	}
	if o.FileType.IsSet() {
		toSerialize["fileType"] = o.FileType.Get()
	}
	if o.ItemSize.IsSet() {
		toSerialize["itemSize"] = o.ItemSize.Get()
	}
	return toSerialize, nil
}

type NullableTeamsFileItem struct {
	value *TeamsFileItem
	isSet bool
}

func (v NullableTeamsFileItem) Get() *TeamsFileItem {
	return v.value
}

func (v *NullableTeamsFileItem) Set(val *TeamsFileItem) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamsFileItem) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamsFileItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamsFileItem(val *TeamsFileItem) *NullableTeamsFileItem {
	return &NullableTeamsFileItem{value: val, isSet: true}
}

func (v NullableTeamsFileItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamsFileItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


