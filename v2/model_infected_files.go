/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the InfectedFiles type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfectedFiles{}

// InfectedFiles Specifies a list of infected entities.
type InfectedFiles struct {
	// Specifies the pagination cookie. Cookie is used to  resume the enumeration of infected entities. When the cookie is set the fields viewNameVec, includeQuarantinedFiles and include UnquarantinedFiles are ignored. 
	Cookie NullableString `json:"cookie,omitempty"`
	// Specifies the list of infected entities.
	InfectedFiles []InfectedFile `json:"infectedFiles,omitempty"`
}

// NewInfectedFiles instantiates a new InfectedFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfectedFiles() *InfectedFiles {
	this := InfectedFiles{}
	return &this
}

// NewInfectedFilesWithDefaults instantiates a new InfectedFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfectedFilesWithDefaults() *InfectedFiles {
	this := InfectedFiles{}
	return &this
}

// GetCookie returns the Cookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFiles) GetCookie() string {
	if o == nil || IsNil(o.Cookie.Get()) {
		var ret string
		return ret
	}
	return *o.Cookie.Get()
}

// GetCookieOk returns a tuple with the Cookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFiles) GetCookieOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cookie.Get(), o.Cookie.IsSet()
}

// HasCookie returns a boolean if a field has been set.
func (o *InfectedFiles) HasCookie() bool {
	if o != nil && o.Cookie.IsSet() {
		return true
	}

	return false
}

// SetCookie gets a reference to the given NullableString and assigns it to the Cookie field.
func (o *InfectedFiles) SetCookie(v string) {
	o.Cookie.Set(&v)
}
// SetCookieNil sets the value for Cookie to be an explicit nil
func (o *InfectedFiles) SetCookieNil() {
	o.Cookie.Set(nil)
}

// UnsetCookie ensures that no value is present for Cookie, not even an explicit nil
func (o *InfectedFiles) UnsetCookie() {
	o.Cookie.Unset()
}

// GetInfectedFiles returns the InfectedFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFiles) GetInfectedFiles() []InfectedFile {
	if o == nil {
		var ret []InfectedFile
		return ret
	}
	return o.InfectedFiles
}

// GetInfectedFilesOk returns a tuple with the InfectedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFiles) GetInfectedFilesOk() ([]InfectedFile, bool) {
	if o == nil || IsNil(o.InfectedFiles) {
		return nil, false
	}
	return o.InfectedFiles, true
}

// HasInfectedFiles returns a boolean if a field has been set.
func (o *InfectedFiles) HasInfectedFiles() bool {
	if o != nil && !IsNil(o.InfectedFiles) {
		return true
	}

	return false
}

// SetInfectedFiles gets a reference to the given []InfectedFile and assigns it to the InfectedFiles field.
func (o *InfectedFiles) SetInfectedFiles(v []InfectedFile) {
	o.InfectedFiles = v
}

func (o InfectedFiles) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfectedFiles) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Cookie.IsSet() {
		toSerialize["cookie"] = o.Cookie.Get()
	}
	if o.InfectedFiles != nil {
		toSerialize["infectedFiles"] = o.InfectedFiles
	}
	return toSerialize, nil
}

type NullableInfectedFiles struct {
	value *InfectedFiles
	isSet bool
}

func (v NullableInfectedFiles) Get() *InfectedFiles {
	return v.value
}

func (v *NullableInfectedFiles) Set(val *InfectedFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableInfectedFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableInfectedFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfectedFiles(val *InfectedFiles) *NullableInfectedFiles {
	return &NullableInfectedFiles{value: val, isSet: true}
}

func (v NullableInfectedFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfectedFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


