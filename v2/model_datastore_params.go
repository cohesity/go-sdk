/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DatastoreParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatastoreParams{}

// DatastoreParams Specifies the datastore params.
type DatastoreParams struct {
	// Specifies the Id of the datastore.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the max concurrent stream per datastore.
	MaxConcurrentStreams NullableInt32 `json:"maxConcurrentStreams,omitempty"`
}

// NewDatastoreParams instantiates a new DatastoreParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatastoreParams() *DatastoreParams {
	this := DatastoreParams{}
	return &this
}

// NewDatastoreParamsWithDefaults instantiates a new DatastoreParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatastoreParamsWithDefaults() *DatastoreParams {
	this := DatastoreParams{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatastoreParams) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatastoreParams) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DatastoreParams) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *DatastoreParams) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DatastoreParams) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DatastoreParams) UnsetId() {
	o.Id.Unset()
}

// GetMaxConcurrentStreams returns the MaxConcurrentStreams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DatastoreParams) GetMaxConcurrentStreams() int32 {
	if o == nil || IsNil(o.MaxConcurrentStreams.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxConcurrentStreams.Get()
}

// GetMaxConcurrentStreamsOk returns a tuple with the MaxConcurrentStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DatastoreParams) GetMaxConcurrentStreamsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxConcurrentStreams.Get(), o.MaxConcurrentStreams.IsSet()
}

// HasMaxConcurrentStreams returns a boolean if a field has been set.
func (o *DatastoreParams) HasMaxConcurrentStreams() bool {
	if o != nil && o.MaxConcurrentStreams.IsSet() {
		return true
	}

	return false
}

// SetMaxConcurrentStreams gets a reference to the given NullableInt32 and assigns it to the MaxConcurrentStreams field.
func (o *DatastoreParams) SetMaxConcurrentStreams(v int32) {
	o.MaxConcurrentStreams.Set(&v)
}
// SetMaxConcurrentStreamsNil sets the value for MaxConcurrentStreams to be an explicit nil
func (o *DatastoreParams) SetMaxConcurrentStreamsNil() {
	o.MaxConcurrentStreams.Set(nil)
}

// UnsetMaxConcurrentStreams ensures that no value is present for MaxConcurrentStreams, not even an explicit nil
func (o *DatastoreParams) UnsetMaxConcurrentStreams() {
	o.MaxConcurrentStreams.Unset()
}

func (o DatastoreParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatastoreParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.MaxConcurrentStreams.IsSet() {
		toSerialize["maxConcurrentStreams"] = o.MaxConcurrentStreams.Get()
	}
	return toSerialize, nil
}

type NullableDatastoreParams struct {
	value *DatastoreParams
	isSet bool
}

func (v NullableDatastoreParams) Get() *DatastoreParams {
	return v.value
}

func (v *NullableDatastoreParams) Set(val *DatastoreParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDatastoreParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDatastoreParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatastoreParams(val *DatastoreParams) *NullableDatastoreParams {
	return &NullableDatastoreParams{value: val, isSet: true}
}

func (v NullableDatastoreParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatastoreParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


