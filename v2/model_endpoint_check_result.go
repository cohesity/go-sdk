/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the EndpointCheckResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EndpointCheckResult{}

// EndpointCheckResult Specify the connectivity check results on each endpoint.
type EndpointCheckResult struct {
	// Specifies the name of the check.
	CheckName NullableString `json:"checkName,omitempty"`
	// Specifies the error message to help troubleshoot.
	ErrorMsg NullableString `json:"errorMsg,omitempty"`
	// Specifies the status of the check.
	Status NullableString `json:"status,omitempty"`
}

// NewEndpointCheckResult instantiates a new EndpointCheckResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEndpointCheckResult() *EndpointCheckResult {
	this := EndpointCheckResult{}
	return &this
}

// NewEndpointCheckResultWithDefaults instantiates a new EndpointCheckResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEndpointCheckResultWithDefaults() *EndpointCheckResult {
	this := EndpointCheckResult{}
	return &this
}

// GetCheckName returns the CheckName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EndpointCheckResult) GetCheckName() string {
	if o == nil || IsNil(o.CheckName.Get()) {
		var ret string
		return ret
	}
	return *o.CheckName.Get()
}

// GetCheckNameOk returns a tuple with the CheckName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EndpointCheckResult) GetCheckNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CheckName.Get(), o.CheckName.IsSet()
}

// HasCheckName returns a boolean if a field has been set.
func (o *EndpointCheckResult) HasCheckName() bool {
	if o != nil && o.CheckName.IsSet() {
		return true
	}

	return false
}

// SetCheckName gets a reference to the given NullableString and assigns it to the CheckName field.
func (o *EndpointCheckResult) SetCheckName(v string) {
	o.CheckName.Set(&v)
}
// SetCheckNameNil sets the value for CheckName to be an explicit nil
func (o *EndpointCheckResult) SetCheckNameNil() {
	o.CheckName.Set(nil)
}

// UnsetCheckName ensures that no value is present for CheckName, not even an explicit nil
func (o *EndpointCheckResult) UnsetCheckName() {
	o.CheckName.Unset()
}

// GetErrorMsg returns the ErrorMsg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EndpointCheckResult) GetErrorMsg() string {
	if o == nil || IsNil(o.ErrorMsg.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMsg.Get()
}

// GetErrorMsgOk returns a tuple with the ErrorMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EndpointCheckResult) GetErrorMsgOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMsg.Get(), o.ErrorMsg.IsSet()
}

// HasErrorMsg returns a boolean if a field has been set.
func (o *EndpointCheckResult) HasErrorMsg() bool {
	if o != nil && o.ErrorMsg.IsSet() {
		return true
	}

	return false
}

// SetErrorMsg gets a reference to the given NullableString and assigns it to the ErrorMsg field.
func (o *EndpointCheckResult) SetErrorMsg(v string) {
	o.ErrorMsg.Set(&v)
}
// SetErrorMsgNil sets the value for ErrorMsg to be an explicit nil
func (o *EndpointCheckResult) SetErrorMsgNil() {
	o.ErrorMsg.Set(nil)
}

// UnsetErrorMsg ensures that no value is present for ErrorMsg, not even an explicit nil
func (o *EndpointCheckResult) UnsetErrorMsg() {
	o.ErrorMsg.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EndpointCheckResult) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EndpointCheckResult) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *EndpointCheckResult) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *EndpointCheckResult) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *EndpointCheckResult) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *EndpointCheckResult) UnsetStatus() {
	o.Status.Unset()
}

func (o EndpointCheckResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EndpointCheckResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CheckName.IsSet() {
		toSerialize["checkName"] = o.CheckName.Get()
	}
	if o.ErrorMsg.IsSet() {
		toSerialize["errorMsg"] = o.ErrorMsg.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return toSerialize, nil
}

type NullableEndpointCheckResult struct {
	value *EndpointCheckResult
	isSet bool
}

func (v NullableEndpointCheckResult) Get() *EndpointCheckResult {
	return v.value
}

func (v *NullableEndpointCheckResult) Set(val *EndpointCheckResult) {
	v.value = val
	v.isSet = true
}

func (v NullableEndpointCheckResult) IsSet() bool {
	return v.isSet
}

func (v *NullableEndpointCheckResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEndpointCheckResult(val *EndpointCheckResult) *NullableEndpointCheckResult {
	return &NullableEndpointCheckResult{value: val, isSet: true}
}

func (v NullableEndpointCheckResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEndpointCheckResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


