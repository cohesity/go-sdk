/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverSiteParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverSiteParams{}

// RecoverSiteParams Specifies the parameters to recover Microsoft Office 365 Sharepoint site.
type RecoverSiteParams struct {
	// Specifies whether to continue recovering the doc libs of a site, if one or more of doc libs failed to recover. Default value is false.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies a list of site params associated with the objects to recover.
	Objects []ObjectSiteParam `json:"objects"`
	// Specifies whether to recover Preservation Hold Library associated with the Sites selected for restore. Default value is false.
	RecoverPreservationHoldLibrary NullableBool `json:"recoverPreservationHoldLibrary,omitempty"`
	TargetDomainObjectId NullableRecoverSiteParamsTargetDomainObjectId `json:"targetDomainObjectId,omitempty"`
	TargetSite *RecoverSiteParamsTargetSite `json:"targetSite,omitempty"`
}

type _RecoverSiteParams RecoverSiteParams

// NewRecoverSiteParams instantiates a new RecoverSiteParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverSiteParams(objects []ObjectSiteParam) *RecoverSiteParams {
	this := RecoverSiteParams{}
	this.Objects = objects
	return &this
}

// NewRecoverSiteParamsWithDefaults instantiates a new RecoverSiteParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverSiteParamsWithDefaults() *RecoverSiteParams {
	this := RecoverSiteParams{}
	return &this
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSiteParams) GetContinueOnError() bool {
	if o == nil || IsNil(o.ContinueOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSiteParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *RecoverSiteParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *RecoverSiteParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *RecoverSiteParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *RecoverSiteParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetObjects returns the Objects field value
// If the value is explicit nil, the zero value for []ObjectSiteParam will be returned
func (o *RecoverSiteParams) GetObjects() []ObjectSiteParam {
	if o == nil {
		var ret []ObjectSiteParam
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSiteParams) GetObjectsOk() ([]ObjectSiteParam, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// SetObjects sets field value
func (o *RecoverSiteParams) SetObjects(v []ObjectSiteParam) {
	o.Objects = v
}

// GetRecoverPreservationHoldLibrary returns the RecoverPreservationHoldLibrary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSiteParams) GetRecoverPreservationHoldLibrary() bool {
	if o == nil || IsNil(o.RecoverPreservationHoldLibrary.Get()) {
		var ret bool
		return ret
	}
	return *o.RecoverPreservationHoldLibrary.Get()
}

// GetRecoverPreservationHoldLibraryOk returns a tuple with the RecoverPreservationHoldLibrary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSiteParams) GetRecoverPreservationHoldLibraryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverPreservationHoldLibrary.Get(), o.RecoverPreservationHoldLibrary.IsSet()
}

// HasRecoverPreservationHoldLibrary returns a boolean if a field has been set.
func (o *RecoverSiteParams) HasRecoverPreservationHoldLibrary() bool {
	if o != nil && o.RecoverPreservationHoldLibrary.IsSet() {
		return true
	}

	return false
}

// SetRecoverPreservationHoldLibrary gets a reference to the given NullableBool and assigns it to the RecoverPreservationHoldLibrary field.
func (o *RecoverSiteParams) SetRecoverPreservationHoldLibrary(v bool) {
	o.RecoverPreservationHoldLibrary.Set(&v)
}
// SetRecoverPreservationHoldLibraryNil sets the value for RecoverPreservationHoldLibrary to be an explicit nil
func (o *RecoverSiteParams) SetRecoverPreservationHoldLibraryNil() {
	o.RecoverPreservationHoldLibrary.Set(nil)
}

// UnsetRecoverPreservationHoldLibrary ensures that no value is present for RecoverPreservationHoldLibrary, not even an explicit nil
func (o *RecoverSiteParams) UnsetRecoverPreservationHoldLibrary() {
	o.RecoverPreservationHoldLibrary.Unset()
}

// GetTargetDomainObjectId returns the TargetDomainObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSiteParams) GetTargetDomainObjectId() RecoverSiteParamsTargetDomainObjectId {
	if o == nil || IsNil(o.TargetDomainObjectId.Get()) {
		var ret RecoverSiteParamsTargetDomainObjectId
		return ret
	}
	return *o.TargetDomainObjectId.Get()
}

// GetTargetDomainObjectIdOk returns a tuple with the TargetDomainObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSiteParams) GetTargetDomainObjectIdOk() (*RecoverSiteParamsTargetDomainObjectId, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetDomainObjectId.Get(), o.TargetDomainObjectId.IsSet()
}

// HasTargetDomainObjectId returns a boolean if a field has been set.
func (o *RecoverSiteParams) HasTargetDomainObjectId() bool {
	if o != nil && o.TargetDomainObjectId.IsSet() {
		return true
	}

	return false
}

// SetTargetDomainObjectId gets a reference to the given NullableRecoverSiteParamsTargetDomainObjectId and assigns it to the TargetDomainObjectId field.
func (o *RecoverSiteParams) SetTargetDomainObjectId(v RecoverSiteParamsTargetDomainObjectId) {
	o.TargetDomainObjectId.Set(&v)
}
// SetTargetDomainObjectIdNil sets the value for TargetDomainObjectId to be an explicit nil
func (o *RecoverSiteParams) SetTargetDomainObjectIdNil() {
	o.TargetDomainObjectId.Set(nil)
}

// UnsetTargetDomainObjectId ensures that no value is present for TargetDomainObjectId, not even an explicit nil
func (o *RecoverSiteParams) UnsetTargetDomainObjectId() {
	o.TargetDomainObjectId.Unset()
}

// GetTargetSite returns the TargetSite field value if set, zero value otherwise.
func (o *RecoverSiteParams) GetTargetSite() RecoverSiteParamsTargetSite {
	if o == nil || IsNil(o.TargetSite) {
		var ret RecoverSiteParamsTargetSite
		return ret
	}
	return *o.TargetSite
}

// GetTargetSiteOk returns a tuple with the TargetSite field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverSiteParams) GetTargetSiteOk() (*RecoverSiteParamsTargetSite, bool) {
	if o == nil || IsNil(o.TargetSite) {
		return nil, false
	}
	return o.TargetSite, true
}

// HasTargetSite returns a boolean if a field has been set.
func (o *RecoverSiteParams) HasTargetSite() bool {
	if o != nil && !IsNil(o.TargetSite) {
		return true
	}

	return false
}

// SetTargetSite gets a reference to the given RecoverSiteParamsTargetSite and assigns it to the TargetSite field.
func (o *RecoverSiteParams) SetTargetSite(v RecoverSiteParamsTargetSite) {
	o.TargetSite = &v
}

func (o RecoverSiteParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverSiteParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.RecoverPreservationHoldLibrary.IsSet() {
		toSerialize["recoverPreservationHoldLibrary"] = o.RecoverPreservationHoldLibrary.Get()
	}
	if o.TargetDomainObjectId.IsSet() {
		toSerialize["targetDomainObjectId"] = o.TargetDomainObjectId.Get()
	}
	if !IsNil(o.TargetSite) {
		toSerialize["targetSite"] = o.TargetSite
	}
	return toSerialize, nil
}

func (o *RecoverSiteParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverSiteParams := _RecoverSiteParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverSiteParams)

	if err != nil {
		return err
	}

	*o = RecoverSiteParams(varRecoverSiteParams)

	return err
}

type NullableRecoverSiteParams struct {
	value *RecoverSiteParams
	isSet bool
}

func (v NullableRecoverSiteParams) Get() *RecoverSiteParams {
	return v.value
}

func (v *NullableRecoverSiteParams) Set(val *RecoverSiteParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverSiteParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverSiteParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverSiteParams(val *RecoverSiteParams) *NullableRecoverSiteParams {
	return &NullableRecoverSiteParams{value: val, isSet: true}
}

func (v NullableRecoverSiteParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverSiteParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


