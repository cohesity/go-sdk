/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ConnectorGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorGroup{}

// ConnectorGroup Specify a group of connectors.
type ConnectorGroup struct {
	// Specifies the ids of the connectors in the group.
	Connectors []int64 `json:"connectors,omitempty"`
	// Specifies the id of the group.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the name of the group.
	Name NullableString `json:"name,omitempty"`
}

// NewConnectorGroup instantiates a new ConnectorGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorGroup() *ConnectorGroup {
	this := ConnectorGroup{}
	return &this
}

// NewConnectorGroupWithDefaults instantiates a new ConnectorGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorGroupWithDefaults() *ConnectorGroup {
	this := ConnectorGroup{}
	return &this
}

// GetConnectors returns the Connectors field value if set, zero value otherwise.
func (o *ConnectorGroup) GetConnectors() []int64 {
	if o == nil || IsNil(o.Connectors) {
		var ret []int64
		return ret
	}
	return o.Connectors
}

// GetConnectorsOk returns a tuple with the Connectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorGroup) GetConnectorsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Connectors) {
		return nil, false
	}
	return o.Connectors, true
}

// HasConnectors returns a boolean if a field has been set.
func (o *ConnectorGroup) HasConnectors() bool {
	if o != nil && !IsNil(o.Connectors) {
		return true
	}

	return false
}

// SetConnectors gets a reference to the given []int64 and assigns it to the Connectors field.
func (o *ConnectorGroup) SetConnectors(v []int64) {
	o.Connectors = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorGroup) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorGroup) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ConnectorGroup) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ConnectorGroup) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ConnectorGroup) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ConnectorGroup) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorGroup) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ConnectorGroup) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ConnectorGroup) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ConnectorGroup) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ConnectorGroup) UnsetName() {
	o.Name.Unset()
}

func (o ConnectorGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Connectors) {
		toSerialize["connectors"] = o.Connectors
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

type NullableConnectorGroup struct {
	value *ConnectorGroup
	isSet bool
}

func (v NullableConnectorGroup) Get() *ConnectorGroup {
	return v.value
}

func (v *NullableConnectorGroup) Set(val *ConnectorGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorGroup(val *ConnectorGroup) *NullableConnectorGroup {
	return &NullableConnectorGroup{value: val, isSet: true}
}

func (v NullableConnectorGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


