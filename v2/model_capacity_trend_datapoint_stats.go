/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CapacityTrendDatapointStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CapacityTrendDatapointStats{}

// CapacityTrendDatapointStats Stats contained inside a data point of the capacity trend analysis chart.
type CapacityTrendDatapointStats struct {
	// Specifies the size of data corresponding to above tag.
	NumBytes NullableInt64 `json:"numBytes,omitempty"`
	TagInfo *DataTieringTag `json:"tagInfo,omitempty"`
}

// NewCapacityTrendDatapointStats instantiates a new CapacityTrendDatapointStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCapacityTrendDatapointStats() *CapacityTrendDatapointStats {
	this := CapacityTrendDatapointStats{}
	return &this
}

// NewCapacityTrendDatapointStatsWithDefaults instantiates a new CapacityTrendDatapointStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCapacityTrendDatapointStatsWithDefaults() *CapacityTrendDatapointStats {
	this := CapacityTrendDatapointStats{}
	return &this
}

// GetNumBytes returns the NumBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CapacityTrendDatapointStats) GetNumBytes() int64 {
	if o == nil || IsNil(o.NumBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.NumBytes.Get()
}

// GetNumBytesOk returns a tuple with the NumBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CapacityTrendDatapointStats) GetNumBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumBytes.Get(), o.NumBytes.IsSet()
}

// HasNumBytes returns a boolean if a field has been set.
func (o *CapacityTrendDatapointStats) HasNumBytes() bool {
	if o != nil && o.NumBytes.IsSet() {
		return true
	}

	return false
}

// SetNumBytes gets a reference to the given NullableInt64 and assigns it to the NumBytes field.
func (o *CapacityTrendDatapointStats) SetNumBytes(v int64) {
	o.NumBytes.Set(&v)
}
// SetNumBytesNil sets the value for NumBytes to be an explicit nil
func (o *CapacityTrendDatapointStats) SetNumBytesNil() {
	o.NumBytes.Set(nil)
}

// UnsetNumBytes ensures that no value is present for NumBytes, not even an explicit nil
func (o *CapacityTrendDatapointStats) UnsetNumBytes() {
	o.NumBytes.Unset()
}

// GetTagInfo returns the TagInfo field value if set, zero value otherwise.
func (o *CapacityTrendDatapointStats) GetTagInfo() DataTieringTag {
	if o == nil || IsNil(o.TagInfo) {
		var ret DataTieringTag
		return ret
	}
	return *o.TagInfo
}

// GetTagInfoOk returns a tuple with the TagInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CapacityTrendDatapointStats) GetTagInfoOk() (*DataTieringTag, bool) {
	if o == nil || IsNil(o.TagInfo) {
		return nil, false
	}
	return o.TagInfo, true
}

// HasTagInfo returns a boolean if a field has been set.
func (o *CapacityTrendDatapointStats) HasTagInfo() bool {
	if o != nil && !IsNil(o.TagInfo) {
		return true
	}

	return false
}

// SetTagInfo gets a reference to the given DataTieringTag and assigns it to the TagInfo field.
func (o *CapacityTrendDatapointStats) SetTagInfo(v DataTieringTag) {
	o.TagInfo = &v
}

func (o CapacityTrendDatapointStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CapacityTrendDatapointStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NumBytes.IsSet() {
		toSerialize["numBytes"] = o.NumBytes.Get()
	}
	if !IsNil(o.TagInfo) {
		toSerialize["tagInfo"] = o.TagInfo
	}
	return toSerialize, nil
}

type NullableCapacityTrendDatapointStats struct {
	value *CapacityTrendDatapointStats
	isSet bool
}

func (v NullableCapacityTrendDatapointStats) Get() *CapacityTrendDatapointStats {
	return v.value
}

func (v *NullableCapacityTrendDatapointStats) Set(val *CapacityTrendDatapointStats) {
	v.value = val
	v.isSet = true
}

func (v NullableCapacityTrendDatapointStats) IsSet() bool {
	return v.isSet
}

func (v *NullableCapacityTrendDatapointStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapacityTrendDatapointStats(val *CapacityTrendDatapointStats) *NullableCapacityTrendDatapointStats {
	return &NullableCapacityTrendDatapointStats{value: val, isSet: true}
}

func (v NullableCapacityTrendDatapointStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapacityTrendDatapointStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


