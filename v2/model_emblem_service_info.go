/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the EmblemServiceInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EmblemServiceInfo{}

// EmblemServiceInfo Emblem Service Info.
type EmblemServiceInfo struct {
	// Address of the service to connect to.
	EmblemHostAddress NullableString `json:"emblemHostAddress,omitempty"`
	// Port on which service is listening.
	EmblemPort NullableInt32 `json:"emblemPort,omitempty"`
}

// NewEmblemServiceInfo instantiates a new EmblemServiceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmblemServiceInfo() *EmblemServiceInfo {
	this := EmblemServiceInfo{}
	return &this
}

// NewEmblemServiceInfoWithDefaults instantiates a new EmblemServiceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmblemServiceInfoWithDefaults() *EmblemServiceInfo {
	this := EmblemServiceInfo{}
	return &this
}

// GetEmblemHostAddress returns the EmblemHostAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmblemServiceInfo) GetEmblemHostAddress() string {
	if o == nil || IsNil(o.EmblemHostAddress.Get()) {
		var ret string
		return ret
	}
	return *o.EmblemHostAddress.Get()
}

// GetEmblemHostAddressOk returns a tuple with the EmblemHostAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmblemServiceInfo) GetEmblemHostAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmblemHostAddress.Get(), o.EmblemHostAddress.IsSet()
}

// HasEmblemHostAddress returns a boolean if a field has been set.
func (o *EmblemServiceInfo) HasEmblemHostAddress() bool {
	if o != nil && o.EmblemHostAddress.IsSet() {
		return true
	}

	return false
}

// SetEmblemHostAddress gets a reference to the given NullableString and assigns it to the EmblemHostAddress field.
func (o *EmblemServiceInfo) SetEmblemHostAddress(v string) {
	o.EmblemHostAddress.Set(&v)
}
// SetEmblemHostAddressNil sets the value for EmblemHostAddress to be an explicit nil
func (o *EmblemServiceInfo) SetEmblemHostAddressNil() {
	o.EmblemHostAddress.Set(nil)
}

// UnsetEmblemHostAddress ensures that no value is present for EmblemHostAddress, not even an explicit nil
func (o *EmblemServiceInfo) UnsetEmblemHostAddress() {
	o.EmblemHostAddress.Unset()
}

// GetEmblemPort returns the EmblemPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmblemServiceInfo) GetEmblemPort() int32 {
	if o == nil || IsNil(o.EmblemPort.Get()) {
		var ret int32
		return ret
	}
	return *o.EmblemPort.Get()
}

// GetEmblemPortOk returns a tuple with the EmblemPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmblemServiceInfo) GetEmblemPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmblemPort.Get(), o.EmblemPort.IsSet()
}

// HasEmblemPort returns a boolean if a field has been set.
func (o *EmblemServiceInfo) HasEmblemPort() bool {
	if o != nil && o.EmblemPort.IsSet() {
		return true
	}

	return false
}

// SetEmblemPort gets a reference to the given NullableInt32 and assigns it to the EmblemPort field.
func (o *EmblemServiceInfo) SetEmblemPort(v int32) {
	o.EmblemPort.Set(&v)
}
// SetEmblemPortNil sets the value for EmblemPort to be an explicit nil
func (o *EmblemServiceInfo) SetEmblemPortNil() {
	o.EmblemPort.Set(nil)
}

// UnsetEmblemPort ensures that no value is present for EmblemPort, not even an explicit nil
func (o *EmblemServiceInfo) UnsetEmblemPort() {
	o.EmblemPort.Unset()
}

func (o EmblemServiceInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EmblemServiceInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EmblemHostAddress.IsSet() {
		toSerialize["emblemHostAddress"] = o.EmblemHostAddress.Get()
	}
	if o.EmblemPort.IsSet() {
		toSerialize["emblemPort"] = o.EmblemPort.Get()
	}
	return toSerialize, nil
}

type NullableEmblemServiceInfo struct {
	value *EmblemServiceInfo
	isSet bool
}

func (v NullableEmblemServiceInfo) Get() *EmblemServiceInfo {
	return v.value
}

func (v *NullableEmblemServiceInfo) Set(val *EmblemServiceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableEmblemServiceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableEmblemServiceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmblemServiceInfo(val *EmblemServiceInfo) *NullableEmblemServiceInfo {
	return &NullableEmblemServiceInfo{value: val, isSet: true}
}

func (v NullableEmblemServiceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmblemServiceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


