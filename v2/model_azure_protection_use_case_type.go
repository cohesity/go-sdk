/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AzureProtectionUseCaseType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureProtectionUseCaseType{}

// AzureProtectionUseCaseType Azure Protection Use case type.
type AzureProtectionUseCaseType struct {
	// Specifies Azure Protection Use case type.
	Enum *string `json:"enum,omitempty"`
}

// NewAzureProtectionUseCaseType instantiates a new AzureProtectionUseCaseType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureProtectionUseCaseType() *AzureProtectionUseCaseType {
	this := AzureProtectionUseCaseType{}
	return &this
}

// NewAzureProtectionUseCaseTypeWithDefaults instantiates a new AzureProtectionUseCaseType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureProtectionUseCaseTypeWithDefaults() *AzureProtectionUseCaseType {
	this := AzureProtectionUseCaseType{}
	return &this
}

// GetEnum returns the Enum field value if set, zero value otherwise.
func (o *AzureProtectionUseCaseType) GetEnum() string {
	if o == nil || IsNil(o.Enum) {
		var ret string
		return ret
	}
	return *o.Enum
}

// GetEnumOk returns a tuple with the Enum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureProtectionUseCaseType) GetEnumOk() (*string, bool) {
	if o == nil || IsNil(o.Enum) {
		return nil, false
	}
	return o.Enum, true
}

// HasEnum returns a boolean if a field has been set.
func (o *AzureProtectionUseCaseType) HasEnum() bool {
	if o != nil && !IsNil(o.Enum) {
		return true
	}

	return false
}

// SetEnum gets a reference to the given string and assigns it to the Enum field.
func (o *AzureProtectionUseCaseType) SetEnum(v string) {
	o.Enum = &v
}

func (o AzureProtectionUseCaseType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureProtectionUseCaseType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enum) {
		toSerialize["enum"] = o.Enum
	}
	return toSerialize, nil
}

type NullableAzureProtectionUseCaseType struct {
	value *AzureProtectionUseCaseType
	isSet bool
}

func (v NullableAzureProtectionUseCaseType) Get() *AzureProtectionUseCaseType {
	return v.value
}

func (v *NullableAzureProtectionUseCaseType) Set(val *AzureProtectionUseCaseType) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureProtectionUseCaseType) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureProtectionUseCaseType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureProtectionUseCaseType(val *AzureProtectionUseCaseType) *NullableAzureProtectionUseCaseType {
	return &NullableAzureProtectionUseCaseType{value: val, isSet: true}
}

func (v NullableAzureProtectionUseCaseType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureProtectionUseCaseType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


