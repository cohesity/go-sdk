/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateInfectedFilesParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateInfectedFilesParameters{}

// UpdateInfectedFilesParameters Specifies the parameters of infected entities to be updated.
type UpdateInfectedFilesParameters struct {
	// Specifies a list of infected entities to be updated.
	InfectedFiles []InfectedFile `json:"infectedFiles"`
	// Specifies the state[Quarantined, Unquarantined] of the infected entity.
	State NullableString `json:"state,omitempty"`
}

type _UpdateInfectedFilesParameters UpdateInfectedFilesParameters

// NewUpdateInfectedFilesParameters instantiates a new UpdateInfectedFilesParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateInfectedFilesParameters(infectedFiles []InfectedFile) *UpdateInfectedFilesParameters {
	this := UpdateInfectedFilesParameters{}
	this.InfectedFiles = infectedFiles
	return &this
}

// NewUpdateInfectedFilesParametersWithDefaults instantiates a new UpdateInfectedFilesParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateInfectedFilesParametersWithDefaults() *UpdateInfectedFilesParameters {
	this := UpdateInfectedFilesParameters{}
	return &this
}

// GetInfectedFiles returns the InfectedFiles field value
// If the value is explicit nil, the zero value for []InfectedFile will be returned
func (o *UpdateInfectedFilesParameters) GetInfectedFiles() []InfectedFile {
	if o == nil {
		var ret []InfectedFile
		return ret
	}

	return o.InfectedFiles
}

// GetInfectedFilesOk returns a tuple with the InfectedFiles field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInfectedFilesParameters) GetInfectedFilesOk() ([]InfectedFile, bool) {
	if o == nil || IsNil(o.InfectedFiles) {
		return nil, false
	}
	return o.InfectedFiles, true
}

// SetInfectedFiles sets field value
func (o *UpdateInfectedFilesParameters) SetInfectedFiles(v []InfectedFile) {
	o.InfectedFiles = v
}

// GetState returns the State field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateInfectedFilesParameters) GetState() string {
	if o == nil || IsNil(o.State.Get()) {
		var ret string
		return ret
	}
	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateInfectedFilesParameters) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// HasState returns a boolean if a field has been set.
func (o *UpdateInfectedFilesParameters) HasState() bool {
	if o != nil && o.State.IsSet() {
		return true
	}

	return false
}

// SetState gets a reference to the given NullableString and assigns it to the State field.
func (o *UpdateInfectedFilesParameters) SetState(v string) {
	o.State.Set(&v)
}
// SetStateNil sets the value for State to be an explicit nil
func (o *UpdateInfectedFilesParameters) SetStateNil() {
	o.State.Set(nil)
}

// UnsetState ensures that no value is present for State, not even an explicit nil
func (o *UpdateInfectedFilesParameters) UnsetState() {
	o.State.Unset()
}

func (o UpdateInfectedFilesParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateInfectedFilesParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.InfectedFiles != nil {
		toSerialize["infectedFiles"] = o.InfectedFiles
	}
	if o.State.IsSet() {
		toSerialize["state"] = o.State.Get()
	}
	return toSerialize, nil
}

func (o *UpdateInfectedFilesParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"infectedFiles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateInfectedFilesParameters := _UpdateInfectedFilesParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateInfectedFilesParameters)

	if err != nil {
		return err
	}

	*o = UpdateInfectedFilesParameters(varUpdateInfectedFilesParameters)

	return err
}

type NullableUpdateInfectedFilesParameters struct {
	value *UpdateInfectedFilesParameters
	isSet bool
}

func (v NullableUpdateInfectedFilesParameters) Get() *UpdateInfectedFilesParameters {
	return v.value
}

func (v *NullableUpdateInfectedFilesParameters) Set(val *UpdateInfectedFilesParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateInfectedFilesParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateInfectedFilesParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateInfectedFilesParameters(val *UpdateInfectedFilesParameters) *NullableUpdateInfectedFilesParameters {
	return &NullableUpdateInfectedFilesParameters{value: val, isSet: true}
}

func (v NullableUpdateInfectedFilesParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateInfectedFilesParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


