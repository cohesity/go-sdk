/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the StorageDomains type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StorageDomains{}

// StorageDomains Specifies a list of Storage Domains.
type StorageDomains struct {
	// Specifies the list of storage domains.
	StorageDomains []StorageDomain `json:"storageDomains,omitempty"`
}

// NewStorageDomains instantiates a new StorageDomains object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStorageDomains() *StorageDomains {
	this := StorageDomains{}
	return &this
}

// NewStorageDomainsWithDefaults instantiates a new StorageDomains object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStorageDomainsWithDefaults() *StorageDomains {
	this := StorageDomains{}
	return &this
}

// GetStorageDomains returns the StorageDomains field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StorageDomains) GetStorageDomains() []StorageDomain {
	if o == nil {
		var ret []StorageDomain
		return ret
	}
	return o.StorageDomains
}

// GetStorageDomainsOk returns a tuple with the StorageDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StorageDomains) GetStorageDomainsOk() ([]StorageDomain, bool) {
	if o == nil || IsNil(o.StorageDomains) {
		return nil, false
	}
	return o.StorageDomains, true
}

// HasStorageDomains returns a boolean if a field has been set.
func (o *StorageDomains) HasStorageDomains() bool {
	if o != nil && !IsNil(o.StorageDomains) {
		return true
	}

	return false
}

// SetStorageDomains gets a reference to the given []StorageDomain and assigns it to the StorageDomains field.
func (o *StorageDomains) SetStorageDomains(v []StorageDomain) {
	o.StorageDomains = v
}

func (o StorageDomains) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StorageDomains) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.StorageDomains != nil {
		toSerialize["storageDomains"] = o.StorageDomains
	}
	return toSerialize, nil
}

type NullableStorageDomains struct {
	value *StorageDomains
	isSet bool
}

func (v NullableStorageDomains) Get() *StorageDomains {
	return v.value
}

func (v *NullableStorageDomains) Set(val *StorageDomains) {
	v.value = val
	v.isSet = true
}

func (v NullableStorageDomains) IsSet() bool {
	return v.isSet
}

func (v *NullableStorageDomains) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStorageDomains(val *StorageDomains) *NullableStorageDomains {
	return &NullableStorageDomains{value: val, isSet: true}
}

func (v NullableStorageDomains) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStorageDomains) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


