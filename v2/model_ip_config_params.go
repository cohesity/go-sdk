/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the IPConfigParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IPConfigParams{}

// IPConfigParams Specifies the IP config parameters.
type IPConfigParams struct {
	// Specifies the network interface name. IPs would be assigned to the specified interface.
	Interface NullableString `json:"interface,omitempty"`
	// Specifies the IP family of the config.
	IpFamily NullableInt64 `json:"ipFamily,omitempty"`
	// Specifies a list of IP addresses to be assigned.
	Ips []string `json:"ips,omitempty"`
	// Specifies the cluster node ids.
	NodeIds []string `json:"nodeIds,omitempty"`
	// Specifies the interface role.
	Role NullableString `json:"role,omitempty"`
	// Specifies the interface gateway.
	SubnetGateway NullableString `json:"subnetGateway,omitempty"`
	// Specifies the interface subnet mask bits.
	SubnetMaskBits NullableInt64 `json:"subnetMaskBits,omitempty"`
}

// NewIPConfigParams instantiates a new IPConfigParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIPConfigParams() *IPConfigParams {
	this := IPConfigParams{}
	return &this
}

// NewIPConfigParamsWithDefaults instantiates a new IPConfigParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIPConfigParamsWithDefaults() *IPConfigParams {
	this := IPConfigParams{}
	return &this
}

// GetInterface returns the Interface field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPConfigParams) GetInterface() string {
	if o == nil || IsNil(o.Interface.Get()) {
		var ret string
		return ret
	}
	return *o.Interface.Get()
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPConfigParams) GetInterfaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Interface.Get(), o.Interface.IsSet()
}

// HasInterface returns a boolean if a field has been set.
func (o *IPConfigParams) HasInterface() bool {
	if o != nil && o.Interface.IsSet() {
		return true
	}

	return false
}

// SetInterface gets a reference to the given NullableString and assigns it to the Interface field.
func (o *IPConfigParams) SetInterface(v string) {
	o.Interface.Set(&v)
}
// SetInterfaceNil sets the value for Interface to be an explicit nil
func (o *IPConfigParams) SetInterfaceNil() {
	o.Interface.Set(nil)
}

// UnsetInterface ensures that no value is present for Interface, not even an explicit nil
func (o *IPConfigParams) UnsetInterface() {
	o.Interface.Unset()
}

// GetIpFamily returns the IpFamily field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPConfigParams) GetIpFamily() int64 {
	if o == nil || IsNil(o.IpFamily.Get()) {
		var ret int64
		return ret
	}
	return *o.IpFamily.Get()
}

// GetIpFamilyOk returns a tuple with the IpFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPConfigParams) GetIpFamilyOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpFamily.Get(), o.IpFamily.IsSet()
}

// HasIpFamily returns a boolean if a field has been set.
func (o *IPConfigParams) HasIpFamily() bool {
	if o != nil && o.IpFamily.IsSet() {
		return true
	}

	return false
}

// SetIpFamily gets a reference to the given NullableInt64 and assigns it to the IpFamily field.
func (o *IPConfigParams) SetIpFamily(v int64) {
	o.IpFamily.Set(&v)
}
// SetIpFamilyNil sets the value for IpFamily to be an explicit nil
func (o *IPConfigParams) SetIpFamilyNil() {
	o.IpFamily.Set(nil)
}

// UnsetIpFamily ensures that no value is present for IpFamily, not even an explicit nil
func (o *IPConfigParams) UnsetIpFamily() {
	o.IpFamily.Unset()
}

// GetIps returns the Ips field value if set, zero value otherwise.
func (o *IPConfigParams) GetIps() []string {
	if o == nil || IsNil(o.Ips) {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPConfigParams) GetIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *IPConfigParams) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *IPConfigParams) SetIps(v []string) {
	o.Ips = v
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise.
func (o *IPConfigParams) GetNodeIds() []string {
	if o == nil || IsNil(o.NodeIds) {
		var ret []string
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IPConfigParams) GetNodeIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.NodeIds) {
		return nil, false
	}
	return o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *IPConfigParams) HasNodeIds() bool {
	if o != nil && !IsNil(o.NodeIds) {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []string and assigns it to the NodeIds field.
func (o *IPConfigParams) SetNodeIds(v []string) {
	o.NodeIds = v
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPConfigParams) GetRole() string {
	if o == nil || IsNil(o.Role.Get()) {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPConfigParams) GetRoleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *IPConfigParams) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *IPConfigParams) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *IPConfigParams) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *IPConfigParams) UnsetRole() {
	o.Role.Unset()
}

// GetSubnetGateway returns the SubnetGateway field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPConfigParams) GetSubnetGateway() string {
	if o == nil || IsNil(o.SubnetGateway.Get()) {
		var ret string
		return ret
	}
	return *o.SubnetGateway.Get()
}

// GetSubnetGatewayOk returns a tuple with the SubnetGateway field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPConfigParams) GetSubnetGatewayOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubnetGateway.Get(), o.SubnetGateway.IsSet()
}

// HasSubnetGateway returns a boolean if a field has been set.
func (o *IPConfigParams) HasSubnetGateway() bool {
	if o != nil && o.SubnetGateway.IsSet() {
		return true
	}

	return false
}

// SetSubnetGateway gets a reference to the given NullableString and assigns it to the SubnetGateway field.
func (o *IPConfigParams) SetSubnetGateway(v string) {
	o.SubnetGateway.Set(&v)
}
// SetSubnetGatewayNil sets the value for SubnetGateway to be an explicit nil
func (o *IPConfigParams) SetSubnetGatewayNil() {
	o.SubnetGateway.Set(nil)
}

// UnsetSubnetGateway ensures that no value is present for SubnetGateway, not even an explicit nil
func (o *IPConfigParams) UnsetSubnetGateway() {
	o.SubnetGateway.Unset()
}

// GetSubnetMaskBits returns the SubnetMaskBits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IPConfigParams) GetSubnetMaskBits() int64 {
	if o == nil || IsNil(o.SubnetMaskBits.Get()) {
		var ret int64
		return ret
	}
	return *o.SubnetMaskBits.Get()
}

// GetSubnetMaskBitsOk returns a tuple with the SubnetMaskBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IPConfigParams) GetSubnetMaskBitsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubnetMaskBits.Get(), o.SubnetMaskBits.IsSet()
}

// HasSubnetMaskBits returns a boolean if a field has been set.
func (o *IPConfigParams) HasSubnetMaskBits() bool {
	if o != nil && o.SubnetMaskBits.IsSet() {
		return true
	}

	return false
}

// SetSubnetMaskBits gets a reference to the given NullableInt64 and assigns it to the SubnetMaskBits field.
func (o *IPConfigParams) SetSubnetMaskBits(v int64) {
	o.SubnetMaskBits.Set(&v)
}
// SetSubnetMaskBitsNil sets the value for SubnetMaskBits to be an explicit nil
func (o *IPConfigParams) SetSubnetMaskBitsNil() {
	o.SubnetMaskBits.Set(nil)
}

// UnsetSubnetMaskBits ensures that no value is present for SubnetMaskBits, not even an explicit nil
func (o *IPConfigParams) UnsetSubnetMaskBits() {
	o.SubnetMaskBits.Unset()
}

func (o IPConfigParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IPConfigParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Interface.IsSet() {
		toSerialize["interface"] = o.Interface.Get()
	}
	if o.IpFamily.IsSet() {
		toSerialize["ipFamily"] = o.IpFamily.Get()
	}
	if !IsNil(o.Ips) {
		toSerialize["ips"] = o.Ips
	}
	if !IsNil(o.NodeIds) {
		toSerialize["nodeIds"] = o.NodeIds
	}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.SubnetGateway.IsSet() {
		toSerialize["subnetGateway"] = o.SubnetGateway.Get()
	}
	if o.SubnetMaskBits.IsSet() {
		toSerialize["subnetMaskBits"] = o.SubnetMaskBits.Get()
	}
	return toSerialize, nil
}

type NullableIPConfigParams struct {
	value *IPConfigParams
	isSet bool
}

func (v NullableIPConfigParams) Get() *IPConfigParams {
	return v.value
}

func (v *NullableIPConfigParams) Set(val *IPConfigParams) {
	v.value = val
	v.isSet = true
}

func (v NullableIPConfigParams) IsSet() bool {
	return v.isSet
}

func (v *NullableIPConfigParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIPConfigParams(val *IPConfigParams) *NullableIPConfigParams {
	return &NullableIPConfigParams{value: val, isSet: true}
}

func (v NullableIPConfigParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIPConfigParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


