/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GetTrackingViewIdResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetTrackingViewIdResponse{}

// GetTrackingViewIdResponse Specifies the response upon requesting a tracking view id
type GetTrackingViewIdResponse struct {
	// Specifies the local view id corresponding to the view uid.
	TrackingViewId NullableInt64 `json:"trackingViewId,omitempty"`
}

// NewGetTrackingViewIdResponse instantiates a new GetTrackingViewIdResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetTrackingViewIdResponse() *GetTrackingViewIdResponse {
	this := GetTrackingViewIdResponse{}
	return &this
}

// NewGetTrackingViewIdResponseWithDefaults instantiates a new GetTrackingViewIdResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetTrackingViewIdResponseWithDefaults() *GetTrackingViewIdResponse {
	this := GetTrackingViewIdResponse{}
	return &this
}

// GetTrackingViewId returns the TrackingViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetTrackingViewIdResponse) GetTrackingViewId() int64 {
	if o == nil || IsNil(o.TrackingViewId.Get()) {
		var ret int64
		return ret
	}
	return *o.TrackingViewId.Get()
}

// GetTrackingViewIdOk returns a tuple with the TrackingViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetTrackingViewIdResponse) GetTrackingViewIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrackingViewId.Get(), o.TrackingViewId.IsSet()
}

// HasTrackingViewId returns a boolean if a field has been set.
func (o *GetTrackingViewIdResponse) HasTrackingViewId() bool {
	if o != nil && o.TrackingViewId.IsSet() {
		return true
	}

	return false
}

// SetTrackingViewId gets a reference to the given NullableInt64 and assigns it to the TrackingViewId field.
func (o *GetTrackingViewIdResponse) SetTrackingViewId(v int64) {
	o.TrackingViewId.Set(&v)
}
// SetTrackingViewIdNil sets the value for TrackingViewId to be an explicit nil
func (o *GetTrackingViewIdResponse) SetTrackingViewIdNil() {
	o.TrackingViewId.Set(nil)
}

// UnsetTrackingViewId ensures that no value is present for TrackingViewId, not even an explicit nil
func (o *GetTrackingViewIdResponse) UnsetTrackingViewId() {
	o.TrackingViewId.Unset()
}

func (o GetTrackingViewIdResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetTrackingViewIdResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.TrackingViewId.IsSet() {
		toSerialize["trackingViewId"] = o.TrackingViewId.Get()
	}
	return toSerialize, nil
}

type NullableGetTrackingViewIdResponse struct {
	value *GetTrackingViewIdResponse
	isSet bool
}

func (v NullableGetTrackingViewIdResponse) Get() *GetTrackingViewIdResponse {
	return v.value
}

func (v *NullableGetTrackingViewIdResponse) Set(val *GetTrackingViewIdResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetTrackingViewIdResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetTrackingViewIdResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetTrackingViewIdResponse(val *GetTrackingViewIdResponse) *NullableGetTrackingViewIdResponse {
	return &NullableGetTrackingViewIdResponse{value: val, isSet: true}
}

func (v NullableGetTrackingViewIdResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetTrackingViewIdResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


