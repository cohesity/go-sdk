/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverSfdcObjectParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverSfdcObjectParams{}

// RecoverSfdcObjectParams Specifies the parameters to recover Salesforce objects.
type RecoverSfdcObjectParams struct {
	// Specifies a list of child object IDs to include in the recovery. Specified object IDs will also be recovered as part of this recovery.
	ChildObjectIds []string `json:"childObjectIds,omitempty"`
	// Specifies a Query to filter the records. This filtered list of records will be used for recovery.
	FilterQuery NullableString `json:"filterQuery,omitempty"`
	// Specifies whether to include deleted Objects in the recovery.
	IncludeDeletedObjects NullableBool `json:"includeDeletedObjects"`
	// Specifies a list of mutuation types for an object. Mutation type is required in conjunction with 'filterQuery'.
	MutationTypes []string `json:"mutationTypes,omitempty"`
	// Specifies the name of the object to be restored.
	ObjectName NullableString `json:"objectName,omitempty"`
	// Specifies a list of parent object IDs to include in recovery. Specified parent objects will also be recovered as part of this recovery.
	ParentObjectIds []string `json:"parentObjectIds,omitempty"`
	// Specifies a list of records IDs to be recovered for the specified Object.
	Records []string `json:"records,omitempty"`
}

type _RecoverSfdcObjectParams RecoverSfdcObjectParams

// NewRecoverSfdcObjectParams instantiates a new RecoverSfdcObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverSfdcObjectParams(includeDeletedObjects NullableBool) *RecoverSfdcObjectParams {
	this := RecoverSfdcObjectParams{}
	this.IncludeDeletedObjects = includeDeletedObjects
	return &this
}

// NewRecoverSfdcObjectParamsWithDefaults instantiates a new RecoverSfdcObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverSfdcObjectParamsWithDefaults() *RecoverSfdcObjectParams {
	this := RecoverSfdcObjectParams{}
	return &this
}

// GetChildObjectIds returns the ChildObjectIds field value if set, zero value otherwise.
func (o *RecoverSfdcObjectParams) GetChildObjectIds() []string {
	if o == nil || IsNil(o.ChildObjectIds) {
		var ret []string
		return ret
	}
	return o.ChildObjectIds
}

// GetChildObjectIdsOk returns a tuple with the ChildObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverSfdcObjectParams) GetChildObjectIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ChildObjectIds) {
		return nil, false
	}
	return o.ChildObjectIds, true
}

// HasChildObjectIds returns a boolean if a field has been set.
func (o *RecoverSfdcObjectParams) HasChildObjectIds() bool {
	if o != nil && !IsNil(o.ChildObjectIds) {
		return true
	}

	return false
}

// SetChildObjectIds gets a reference to the given []string and assigns it to the ChildObjectIds field.
func (o *RecoverSfdcObjectParams) SetChildObjectIds(v []string) {
	o.ChildObjectIds = v
}

// GetFilterQuery returns the FilterQuery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSfdcObjectParams) GetFilterQuery() string {
	if o == nil || IsNil(o.FilterQuery.Get()) {
		var ret string
		return ret
	}
	return *o.FilterQuery.Get()
}

// GetFilterQueryOk returns a tuple with the FilterQuery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSfdcObjectParams) GetFilterQueryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilterQuery.Get(), o.FilterQuery.IsSet()
}

// HasFilterQuery returns a boolean if a field has been set.
func (o *RecoverSfdcObjectParams) HasFilterQuery() bool {
	if o != nil && o.FilterQuery.IsSet() {
		return true
	}

	return false
}

// SetFilterQuery gets a reference to the given NullableString and assigns it to the FilterQuery field.
func (o *RecoverSfdcObjectParams) SetFilterQuery(v string) {
	o.FilterQuery.Set(&v)
}
// SetFilterQueryNil sets the value for FilterQuery to be an explicit nil
func (o *RecoverSfdcObjectParams) SetFilterQueryNil() {
	o.FilterQuery.Set(nil)
}

// UnsetFilterQuery ensures that no value is present for FilterQuery, not even an explicit nil
func (o *RecoverSfdcObjectParams) UnsetFilterQuery() {
	o.FilterQuery.Unset()
}

// GetIncludeDeletedObjects returns the IncludeDeletedObjects field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *RecoverSfdcObjectParams) GetIncludeDeletedObjects() bool {
	if o == nil || o.IncludeDeletedObjects.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IncludeDeletedObjects.Get()
}

// GetIncludeDeletedObjectsOk returns a tuple with the IncludeDeletedObjects field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSfdcObjectParams) GetIncludeDeletedObjectsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeDeletedObjects.Get(), o.IncludeDeletedObjects.IsSet()
}

// SetIncludeDeletedObjects sets field value
func (o *RecoverSfdcObjectParams) SetIncludeDeletedObjects(v bool) {
	o.IncludeDeletedObjects.Set(&v)
}

// GetMutationTypes returns the MutationTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSfdcObjectParams) GetMutationTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.MutationTypes
}

// GetMutationTypesOk returns a tuple with the MutationTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSfdcObjectParams) GetMutationTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.MutationTypes) {
		return nil, false
	}
	return o.MutationTypes, true
}

// HasMutationTypes returns a boolean if a field has been set.
func (o *RecoverSfdcObjectParams) HasMutationTypes() bool {
	if o != nil && !IsNil(o.MutationTypes) {
		return true
	}

	return false
}

// SetMutationTypes gets a reference to the given []string and assigns it to the MutationTypes field.
func (o *RecoverSfdcObjectParams) SetMutationTypes(v []string) {
	o.MutationTypes = v
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSfdcObjectParams) GetObjectName() string {
	if o == nil || IsNil(o.ObjectName.Get()) {
		var ret string
		return ret
	}
	return *o.ObjectName.Get()
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSfdcObjectParams) GetObjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectName.Get(), o.ObjectName.IsSet()
}

// HasObjectName returns a boolean if a field has been set.
func (o *RecoverSfdcObjectParams) HasObjectName() bool {
	if o != nil && o.ObjectName.IsSet() {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given NullableString and assigns it to the ObjectName field.
func (o *RecoverSfdcObjectParams) SetObjectName(v string) {
	o.ObjectName.Set(&v)
}
// SetObjectNameNil sets the value for ObjectName to be an explicit nil
func (o *RecoverSfdcObjectParams) SetObjectNameNil() {
	o.ObjectName.Set(nil)
}

// UnsetObjectName ensures that no value is present for ObjectName, not even an explicit nil
func (o *RecoverSfdcObjectParams) UnsetObjectName() {
	o.ObjectName.Unset()
}

// GetParentObjectIds returns the ParentObjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSfdcObjectParams) GetParentObjectIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ParentObjectIds
}

// GetParentObjectIdsOk returns a tuple with the ParentObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSfdcObjectParams) GetParentObjectIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ParentObjectIds) {
		return nil, false
	}
	return o.ParentObjectIds, true
}

// HasParentObjectIds returns a boolean if a field has been set.
func (o *RecoverSfdcObjectParams) HasParentObjectIds() bool {
	if o != nil && !IsNil(o.ParentObjectIds) {
		return true
	}

	return false
}

// SetParentObjectIds gets a reference to the given []string and assigns it to the ParentObjectIds field.
func (o *RecoverSfdcObjectParams) SetParentObjectIds(v []string) {
	o.ParentObjectIds = v
}

// GetRecords returns the Records field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSfdcObjectParams) GetRecords() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Records
}

// GetRecordsOk returns a tuple with the Records field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSfdcObjectParams) GetRecordsOk() ([]string, bool) {
	if o == nil || IsNil(o.Records) {
		return nil, false
	}
	return o.Records, true
}

// HasRecords returns a boolean if a field has been set.
func (o *RecoverSfdcObjectParams) HasRecords() bool {
	if o != nil && !IsNil(o.Records) {
		return true
	}

	return false
}

// SetRecords gets a reference to the given []string and assigns it to the Records field.
func (o *RecoverSfdcObjectParams) SetRecords(v []string) {
	o.Records = v
}

func (o RecoverSfdcObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverSfdcObjectParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChildObjectIds) {
		toSerialize["childObjectIds"] = o.ChildObjectIds
	}
	if o.FilterQuery.IsSet() {
		toSerialize["filterQuery"] = o.FilterQuery.Get()
	}
	toSerialize["includeDeletedObjects"] = o.IncludeDeletedObjects.Get()
	if o.MutationTypes != nil {
		toSerialize["mutationTypes"] = o.MutationTypes
	}
	if o.ObjectName.IsSet() {
		toSerialize["objectName"] = o.ObjectName.Get()
	}
	if o.ParentObjectIds != nil {
		toSerialize["parentObjectIds"] = o.ParentObjectIds
	}
	if o.Records != nil {
		toSerialize["records"] = o.Records
	}
	return toSerialize, nil
}

func (o *RecoverSfdcObjectParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"includeDeletedObjects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverSfdcObjectParams := _RecoverSfdcObjectParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverSfdcObjectParams)

	if err != nil {
		return err
	}

	*o = RecoverSfdcObjectParams(varRecoverSfdcObjectParams)

	return err
}

type NullableRecoverSfdcObjectParams struct {
	value *RecoverSfdcObjectParams
	isSet bool
}

func (v NullableRecoverSfdcObjectParams) Get() *RecoverSfdcObjectParams {
	return v.value
}

func (v *NullableRecoverSfdcObjectParams) Set(val *RecoverSfdcObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverSfdcObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverSfdcObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverSfdcObjectParams(val *RecoverSfdcObjectParams) *NullableRecoverSfdcObjectParams {
	return &NullableRecoverSfdcObjectParams{value: val, isSet: true}
}

func (v NullableRecoverSfdcObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverSfdcObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


