/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UdaLocaleSpecificTranslations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaLocaleSpecificTranslations{}

// UdaLocaleSpecificTranslations Specifies the translation messages for a specific locale.
type UdaLocaleSpecificTranslations struct {
	// Name of the locale.
	LocaleName *string `json:"localeName,omitempty"`
	// Translations json for the locale.
	Translations *string `json:"translations,omitempty"`
}

// NewUdaLocaleSpecificTranslations instantiates a new UdaLocaleSpecificTranslations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaLocaleSpecificTranslations() *UdaLocaleSpecificTranslations {
	this := UdaLocaleSpecificTranslations{}
	return &this
}

// NewUdaLocaleSpecificTranslationsWithDefaults instantiates a new UdaLocaleSpecificTranslations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaLocaleSpecificTranslationsWithDefaults() *UdaLocaleSpecificTranslations {
	this := UdaLocaleSpecificTranslations{}
	return &this
}

// GetLocaleName returns the LocaleName field value if set, zero value otherwise.
func (o *UdaLocaleSpecificTranslations) GetLocaleName() string {
	if o == nil || IsNil(o.LocaleName) {
		var ret string
		return ret
	}
	return *o.LocaleName
}

// GetLocaleNameOk returns a tuple with the LocaleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdaLocaleSpecificTranslations) GetLocaleNameOk() (*string, bool) {
	if o == nil || IsNil(o.LocaleName) {
		return nil, false
	}
	return o.LocaleName, true
}

// HasLocaleName returns a boolean if a field has been set.
func (o *UdaLocaleSpecificTranslations) HasLocaleName() bool {
	if o != nil && !IsNil(o.LocaleName) {
		return true
	}

	return false
}

// SetLocaleName gets a reference to the given string and assigns it to the LocaleName field.
func (o *UdaLocaleSpecificTranslations) SetLocaleName(v string) {
	o.LocaleName = &v
}

// GetTranslations returns the Translations field value if set, zero value otherwise.
func (o *UdaLocaleSpecificTranslations) GetTranslations() string {
	if o == nil || IsNil(o.Translations) {
		var ret string
		return ret
	}
	return *o.Translations
}

// GetTranslationsOk returns a tuple with the Translations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdaLocaleSpecificTranslations) GetTranslationsOk() (*string, bool) {
	if o == nil || IsNil(o.Translations) {
		return nil, false
	}
	return o.Translations, true
}

// HasTranslations returns a boolean if a field has been set.
func (o *UdaLocaleSpecificTranslations) HasTranslations() bool {
	if o != nil && !IsNil(o.Translations) {
		return true
	}

	return false
}

// SetTranslations gets a reference to the given string and assigns it to the Translations field.
func (o *UdaLocaleSpecificTranslations) SetTranslations(v string) {
	o.Translations = &v
}

func (o UdaLocaleSpecificTranslations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaLocaleSpecificTranslations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocaleName) {
		toSerialize["localeName"] = o.LocaleName
	}
	if !IsNil(o.Translations) {
		toSerialize["translations"] = o.Translations
	}
	return toSerialize, nil
}

type NullableUdaLocaleSpecificTranslations struct {
	value *UdaLocaleSpecificTranslations
	isSet bool
}

func (v NullableUdaLocaleSpecificTranslations) Get() *UdaLocaleSpecificTranslations {
	return v.value
}

func (v *NullableUdaLocaleSpecificTranslations) Set(val *UdaLocaleSpecificTranslations) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaLocaleSpecificTranslations) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaLocaleSpecificTranslations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaLocaleSpecificTranslations(val *UdaLocaleSpecificTranslations) *NullableUdaLocaleSpecificTranslations {
	return &NullableUdaLocaleSpecificTranslations{value: val, isSet: true}
}

func (v NullableUdaLocaleSpecificTranslations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaLocaleSpecificTranslations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


