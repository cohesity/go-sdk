/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FirewallIPSet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallIPSet{}

// FirewallIPSet Specifies a firewall IP set information
type FirewallIPSet struct {
	// Specifies the name of the IP set.
	Name NullableString `json:"name,omitempty"`
	// Specifies the subnets in the IP set.
	Subnets []string `json:"subnets,omitempty"`
}

// NewFirewallIPSet instantiates a new FirewallIPSet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallIPSet() *FirewallIPSet {
	this := FirewallIPSet{}
	return &this
}

// NewFirewallIPSetWithDefaults instantiates a new FirewallIPSet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallIPSetWithDefaults() *FirewallIPSet {
	this := FirewallIPSet{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FirewallIPSet) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FirewallIPSet) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *FirewallIPSet) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *FirewallIPSet) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *FirewallIPSet) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *FirewallIPSet) UnsetName() {
	o.Name.Unset()
}

// GetSubnets returns the Subnets field value if set, zero value otherwise.
func (o *FirewallIPSet) GetSubnets() []string {
	if o == nil || IsNil(o.Subnets) {
		var ret []string
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallIPSet) GetSubnetsOk() ([]string, bool) {
	if o == nil || IsNil(o.Subnets) {
		return nil, false
	}
	return o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *FirewallIPSet) HasSubnets() bool {
	if o != nil && !IsNil(o.Subnets) {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []string and assigns it to the Subnets field.
func (o *FirewallIPSet) SetSubnets(v []string) {
	o.Subnets = v
}

func (o FirewallIPSet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallIPSet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.Subnets) {
		toSerialize["subnets"] = o.Subnets
	}
	return toSerialize, nil
}

type NullableFirewallIPSet struct {
	value *FirewallIPSet
	isSet bool
}

func (v NullableFirewallIPSet) Get() *FirewallIPSet {
	return v.value
}

func (v *NullableFirewallIPSet) Set(val *FirewallIPSet) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallIPSet) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallIPSet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallIPSet(val *FirewallIPSet) *NullableFirewallIPSet {
	return &NullableFirewallIPSet{value: val, isSet: true}
}

func (v NullableFirewallIPSet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallIPSet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


