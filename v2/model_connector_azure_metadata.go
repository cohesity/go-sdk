/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ConnectorAzureMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConnectorAzureMetadata{}

// ConnectorAzureMetadata Specifies Azure specific instance metadata details.
type ConnectorAzureMetadata struct {
	// Azure VM id.
	AzureVmId NullableString `json:"azureVmId"`
	// Maximum number of data disks which could be attached to rigel VM.
	MaxDataDiskCount NullableInt64 `json:"maxDataDiskCount"`
}

type _ConnectorAzureMetadata ConnectorAzureMetadata

// NewConnectorAzureMetadata instantiates a new ConnectorAzureMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorAzureMetadata(azureVmId NullableString, maxDataDiskCount NullableInt64) *ConnectorAzureMetadata {
	this := ConnectorAzureMetadata{}
	this.AzureVmId = azureVmId
	this.MaxDataDiskCount = maxDataDiskCount
	return &this
}

// NewConnectorAzureMetadataWithDefaults instantiates a new ConnectorAzureMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorAzureMetadataWithDefaults() *ConnectorAzureMetadata {
	this := ConnectorAzureMetadata{}
	return &this
}

// GetAzureVmId returns the AzureVmId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConnectorAzureMetadata) GetAzureVmId() string {
	if o == nil || o.AzureVmId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AzureVmId.Get()
}

// GetAzureVmIdOk returns a tuple with the AzureVmId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorAzureMetadata) GetAzureVmIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AzureVmId.Get(), o.AzureVmId.IsSet()
}

// SetAzureVmId sets field value
func (o *ConnectorAzureMetadata) SetAzureVmId(v string) {
	o.AzureVmId.Set(&v)
}

// GetMaxDataDiskCount returns the MaxDataDiskCount field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *ConnectorAzureMetadata) GetMaxDataDiskCount() int64 {
	if o == nil || o.MaxDataDiskCount.Get() == nil {
		var ret int64
		return ret
	}

	return *o.MaxDataDiskCount.Get()
}

// GetMaxDataDiskCountOk returns a tuple with the MaxDataDiskCount field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorAzureMetadata) GetMaxDataDiskCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxDataDiskCount.Get(), o.MaxDataDiskCount.IsSet()
}

// SetMaxDataDiskCount sets field value
func (o *ConnectorAzureMetadata) SetMaxDataDiskCount(v int64) {
	o.MaxDataDiskCount.Set(&v)
}

func (o ConnectorAzureMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConnectorAzureMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["azureVmId"] = o.AzureVmId.Get()
	toSerialize["maxDataDiskCount"] = o.MaxDataDiskCount.Get()
	return toSerialize, nil
}

func (o *ConnectorAzureMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"azureVmId",
		"maxDataDiskCount",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varConnectorAzureMetadata := _ConnectorAzureMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varConnectorAzureMetadata)

	if err != nil {
		return err
	}

	*o = ConnectorAzureMetadata(varConnectorAzureMetadata)

	return err
}

type NullableConnectorAzureMetadata struct {
	value *ConnectorAzureMetadata
	isSet bool
}

func (v NullableConnectorAzureMetadata) Get() *ConnectorAzureMetadata {
	return v.value
}

func (v *NullableConnectorAzureMetadata) Set(val *ConnectorAzureMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorAzureMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorAzureMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorAzureMetadata(val *ConnectorAzureMetadata) *NullableConnectorAzureMetadata {
	return &NullableConnectorAzureMetadata{value: val, isSet: true}
}

func (v NullableConnectorAzureMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorAzureMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


