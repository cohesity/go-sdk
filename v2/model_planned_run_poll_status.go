/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PlannedRunPollStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlannedRunPollStatus{}

// PlannedRunPollStatus Specifies whether run has been scheduled or not and also returns the unique run id along with failoverId upon scheduling the run.
type PlannedRunPollStatus struct {
	// Status of the backup job. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.
	BackupTaskStatus NullableString `json:"backupTaskStatus,omitempty"`
	// Specifies the unique failover Id which will be generated by orchestrator. This Id will be used to uniquely identify current failover operation.
	FailoverId NullableString `json:"failoverId,omitempty"`
	// Status of the OnPrem deploy task. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.
	OnPremDeployTaskStatus NullableString `json:"onPremDeployTaskStatus,omitempty"`
	// Specifies the protection group id to which this run belongs.
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
	// If run has been scheduled then this field will be populated with unique run id.
	RunId NullableString `json:"runId,omitempty"`
	// If cancelNonFailoverRuns was passed as true during creation of run for current failover then this will return the status of other run cacellations. If other runs are still pending for cancellations then this will be returned as true otherwise it will be return as false.
	WaitingOnOtherRunCancellations NullableBool `json:"waitingOnOtherRunCancellations,omitempty"`
}

// NewPlannedRunPollStatus instantiates a new PlannedRunPollStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlannedRunPollStatus() *PlannedRunPollStatus {
	this := PlannedRunPollStatus{}
	return &this
}

// NewPlannedRunPollStatusWithDefaults instantiates a new PlannedRunPollStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlannedRunPollStatusWithDefaults() *PlannedRunPollStatus {
	this := PlannedRunPollStatus{}
	return &this
}

// GetBackupTaskStatus returns the BackupTaskStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedRunPollStatus) GetBackupTaskStatus() string {
	if o == nil || IsNil(o.BackupTaskStatus.Get()) {
		var ret string
		return ret
	}
	return *o.BackupTaskStatus.Get()
}

// GetBackupTaskStatusOk returns a tuple with the BackupTaskStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedRunPollStatus) GetBackupTaskStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupTaskStatus.Get(), o.BackupTaskStatus.IsSet()
}

// HasBackupTaskStatus returns a boolean if a field has been set.
func (o *PlannedRunPollStatus) HasBackupTaskStatus() bool {
	if o != nil && o.BackupTaskStatus.IsSet() {
		return true
	}

	return false
}

// SetBackupTaskStatus gets a reference to the given NullableString and assigns it to the BackupTaskStatus field.
func (o *PlannedRunPollStatus) SetBackupTaskStatus(v string) {
	o.BackupTaskStatus.Set(&v)
}
// SetBackupTaskStatusNil sets the value for BackupTaskStatus to be an explicit nil
func (o *PlannedRunPollStatus) SetBackupTaskStatusNil() {
	o.BackupTaskStatus.Set(nil)
}

// UnsetBackupTaskStatus ensures that no value is present for BackupTaskStatus, not even an explicit nil
func (o *PlannedRunPollStatus) UnsetBackupTaskStatus() {
	o.BackupTaskStatus.Unset()
}

// GetFailoverId returns the FailoverId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedRunPollStatus) GetFailoverId() string {
	if o == nil || IsNil(o.FailoverId.Get()) {
		var ret string
		return ret
	}
	return *o.FailoverId.Get()
}

// GetFailoverIdOk returns a tuple with the FailoverId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedRunPollStatus) GetFailoverIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailoverId.Get(), o.FailoverId.IsSet()
}

// HasFailoverId returns a boolean if a field has been set.
func (o *PlannedRunPollStatus) HasFailoverId() bool {
	if o != nil && o.FailoverId.IsSet() {
		return true
	}

	return false
}

// SetFailoverId gets a reference to the given NullableString and assigns it to the FailoverId field.
func (o *PlannedRunPollStatus) SetFailoverId(v string) {
	o.FailoverId.Set(&v)
}
// SetFailoverIdNil sets the value for FailoverId to be an explicit nil
func (o *PlannedRunPollStatus) SetFailoverIdNil() {
	o.FailoverId.Set(nil)
}

// UnsetFailoverId ensures that no value is present for FailoverId, not even an explicit nil
func (o *PlannedRunPollStatus) UnsetFailoverId() {
	o.FailoverId.Unset()
}

// GetOnPremDeployTaskStatus returns the OnPremDeployTaskStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedRunPollStatus) GetOnPremDeployTaskStatus() string {
	if o == nil || IsNil(o.OnPremDeployTaskStatus.Get()) {
		var ret string
		return ret
	}
	return *o.OnPremDeployTaskStatus.Get()
}

// GetOnPremDeployTaskStatusOk returns a tuple with the OnPremDeployTaskStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedRunPollStatus) GetOnPremDeployTaskStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnPremDeployTaskStatus.Get(), o.OnPremDeployTaskStatus.IsSet()
}

// HasOnPremDeployTaskStatus returns a boolean if a field has been set.
func (o *PlannedRunPollStatus) HasOnPremDeployTaskStatus() bool {
	if o != nil && o.OnPremDeployTaskStatus.IsSet() {
		return true
	}

	return false
}

// SetOnPremDeployTaskStatus gets a reference to the given NullableString and assigns it to the OnPremDeployTaskStatus field.
func (o *PlannedRunPollStatus) SetOnPremDeployTaskStatus(v string) {
	o.OnPremDeployTaskStatus.Set(&v)
}
// SetOnPremDeployTaskStatusNil sets the value for OnPremDeployTaskStatus to be an explicit nil
func (o *PlannedRunPollStatus) SetOnPremDeployTaskStatusNil() {
	o.OnPremDeployTaskStatus.Set(nil)
}

// UnsetOnPremDeployTaskStatus ensures that no value is present for OnPremDeployTaskStatus, not even an explicit nil
func (o *PlannedRunPollStatus) UnsetOnPremDeployTaskStatus() {
	o.OnPremDeployTaskStatus.Unset()
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedRunPollStatus) GetProtectionGroupId() string {
	if o == nil || IsNil(o.ProtectionGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedRunPollStatus) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *PlannedRunPollStatus) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *PlannedRunPollStatus) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *PlannedRunPollStatus) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *PlannedRunPollStatus) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

// GetRunId returns the RunId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedRunPollStatus) GetRunId() string {
	if o == nil || IsNil(o.RunId.Get()) {
		var ret string
		return ret
	}
	return *o.RunId.Get()
}

// GetRunIdOk returns a tuple with the RunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedRunPollStatus) GetRunIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunId.Get(), o.RunId.IsSet()
}

// HasRunId returns a boolean if a field has been set.
func (o *PlannedRunPollStatus) HasRunId() bool {
	if o != nil && o.RunId.IsSet() {
		return true
	}

	return false
}

// SetRunId gets a reference to the given NullableString and assigns it to the RunId field.
func (o *PlannedRunPollStatus) SetRunId(v string) {
	o.RunId.Set(&v)
}
// SetRunIdNil sets the value for RunId to be an explicit nil
func (o *PlannedRunPollStatus) SetRunIdNil() {
	o.RunId.Set(nil)
}

// UnsetRunId ensures that no value is present for RunId, not even an explicit nil
func (o *PlannedRunPollStatus) UnsetRunId() {
	o.RunId.Unset()
}

// GetWaitingOnOtherRunCancellations returns the WaitingOnOtherRunCancellations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PlannedRunPollStatus) GetWaitingOnOtherRunCancellations() bool {
	if o == nil || IsNil(o.WaitingOnOtherRunCancellations.Get()) {
		var ret bool
		return ret
	}
	return *o.WaitingOnOtherRunCancellations.Get()
}

// GetWaitingOnOtherRunCancellationsOk returns a tuple with the WaitingOnOtherRunCancellations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PlannedRunPollStatus) GetWaitingOnOtherRunCancellationsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WaitingOnOtherRunCancellations.Get(), o.WaitingOnOtherRunCancellations.IsSet()
}

// HasWaitingOnOtherRunCancellations returns a boolean if a field has been set.
func (o *PlannedRunPollStatus) HasWaitingOnOtherRunCancellations() bool {
	if o != nil && o.WaitingOnOtherRunCancellations.IsSet() {
		return true
	}

	return false
}

// SetWaitingOnOtherRunCancellations gets a reference to the given NullableBool and assigns it to the WaitingOnOtherRunCancellations field.
func (o *PlannedRunPollStatus) SetWaitingOnOtherRunCancellations(v bool) {
	o.WaitingOnOtherRunCancellations.Set(&v)
}
// SetWaitingOnOtherRunCancellationsNil sets the value for WaitingOnOtherRunCancellations to be an explicit nil
func (o *PlannedRunPollStatus) SetWaitingOnOtherRunCancellationsNil() {
	o.WaitingOnOtherRunCancellations.Set(nil)
}

// UnsetWaitingOnOtherRunCancellations ensures that no value is present for WaitingOnOtherRunCancellations, not even an explicit nil
func (o *PlannedRunPollStatus) UnsetWaitingOnOtherRunCancellations() {
	o.WaitingOnOtherRunCancellations.Unset()
}

func (o PlannedRunPollStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlannedRunPollStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupTaskStatus.IsSet() {
		toSerialize["backupTaskStatus"] = o.BackupTaskStatus.Get()
	}
	if o.FailoverId.IsSet() {
		toSerialize["failoverId"] = o.FailoverId.Get()
	}
	if o.OnPremDeployTaskStatus.IsSet() {
		toSerialize["onPremDeployTaskStatus"] = o.OnPremDeployTaskStatus.Get()
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	if o.RunId.IsSet() {
		toSerialize["runId"] = o.RunId.Get()
	}
	if o.WaitingOnOtherRunCancellations.IsSet() {
		toSerialize["waitingOnOtherRunCancellations"] = o.WaitingOnOtherRunCancellations.Get()
	}
	return toSerialize, nil
}

type NullablePlannedRunPollStatus struct {
	value *PlannedRunPollStatus
	isSet bool
}

func (v NullablePlannedRunPollStatus) Get() *PlannedRunPollStatus {
	return v.value
}

func (v *NullablePlannedRunPollStatus) Set(val *PlannedRunPollStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePlannedRunPollStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePlannedRunPollStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlannedRunPollStatus(val *PlannedRunPollStatus) *NullablePlannedRunPollStatus {
	return &NullablePlannedRunPollStatus{value: val, isSet: true}
}

func (v NullablePlannedRunPollStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlannedRunPollStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


