/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ServiceProcessEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceProcessEntry{}

// ServiceProcessEntry Specifies the process entry for a service.
type ServiceProcessEntry struct {
	// Specifies the process Ids.
	ProcessIds []int64 `json:"processIds,omitempty"`
	// Specifies the service name.
	ServiceName NullableString `json:"serviceName,omitempty"`
}

// NewServiceProcessEntry instantiates a new ServiceProcessEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceProcessEntry() *ServiceProcessEntry {
	this := ServiceProcessEntry{}
	return &this
}

// NewServiceProcessEntryWithDefaults instantiates a new ServiceProcessEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceProcessEntryWithDefaults() *ServiceProcessEntry {
	this := ServiceProcessEntry{}
	return &this
}

// GetProcessIds returns the ProcessIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceProcessEntry) GetProcessIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.ProcessIds
}

// GetProcessIdsOk returns a tuple with the ProcessIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceProcessEntry) GetProcessIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ProcessIds) {
		return nil, false
	}
	return o.ProcessIds, true
}

// HasProcessIds returns a boolean if a field has been set.
func (o *ServiceProcessEntry) HasProcessIds() bool {
	if o != nil && !IsNil(o.ProcessIds) {
		return true
	}

	return false
}

// SetProcessIds gets a reference to the given []int64 and assigns it to the ProcessIds field.
func (o *ServiceProcessEntry) SetProcessIds(v []int64) {
	o.ProcessIds = v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ServiceProcessEntry) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName.Get()) {
		var ret string
		return ret
	}
	return *o.ServiceName.Get()
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ServiceProcessEntry) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceName.Get(), o.ServiceName.IsSet()
}

// HasServiceName returns a boolean if a field has been set.
func (o *ServiceProcessEntry) HasServiceName() bool {
	if o != nil && o.ServiceName.IsSet() {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given NullableString and assigns it to the ServiceName field.
func (o *ServiceProcessEntry) SetServiceName(v string) {
	o.ServiceName.Set(&v)
}
// SetServiceNameNil sets the value for ServiceName to be an explicit nil
func (o *ServiceProcessEntry) SetServiceNameNil() {
	o.ServiceName.Set(nil)
}

// UnsetServiceName ensures that no value is present for ServiceName, not even an explicit nil
func (o *ServiceProcessEntry) UnsetServiceName() {
	o.ServiceName.Unset()
}

func (o ServiceProcessEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceProcessEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ProcessIds != nil {
		toSerialize["processIds"] = o.ProcessIds
	}
	if o.ServiceName.IsSet() {
		toSerialize["serviceName"] = o.ServiceName.Get()
	}
	return toSerialize, nil
}

type NullableServiceProcessEntry struct {
	value *ServiceProcessEntry
	isSet bool
}

func (v NullableServiceProcessEntry) Get() *ServiceProcessEntry {
	return v.value
}

func (v *NullableServiceProcessEntry) Set(val *ServiceProcessEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceProcessEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceProcessEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceProcessEntry(val *ServiceProcessEntry) *NullableServiceProcessEntry {
	return &NullableServiceProcessEntry{value: val, isSet: true}
}

func (v NullableServiceProcessEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceProcessEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


