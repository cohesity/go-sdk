/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverAwsParamsRecoverRdsIngestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverAwsParamsRecoverRdsIngestParams{}

// RecoverAwsParamsRecoverRdsIngestParams Specifies the parameters to recover AWS RDS Ingest.
type RecoverAwsParamsRecoverRdsIngestParams struct {
	AwsTargetParams NullableRecoverRDSPostgresParamsAwsTargetParams `json:"awsTargetParams,omitempty"`
	// Set to true to overwrite an existing object at the destination. If set to false, and the same object exists at the destination, then recovery will fail for that object.
	OverwriteDatabase NullableBool `json:"overwriteDatabase,omitempty"`
	// Specifies the prefix to be prepended to the object name after the recovery.
	Prefix NullableString `json:"prefix,omitempty"`
	// Specifies the suffix to be appended to the object name after the recovery.
	Suffix NullableString `json:"suffix,omitempty"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
}

type _RecoverAwsParamsRecoverRdsIngestParams RecoverAwsParamsRecoverRdsIngestParams

// NewRecoverAwsParamsRecoverRdsIngestParams instantiates a new RecoverAwsParamsRecoverRdsIngestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAwsParamsRecoverRdsIngestParams(targetEnvironment string) *RecoverAwsParamsRecoverRdsIngestParams {
	this := RecoverAwsParamsRecoverRdsIngestParams{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverAwsParamsRecoverRdsIngestParamsWithDefaults instantiates a new RecoverAwsParamsRecoverRdsIngestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAwsParamsRecoverRdsIngestParamsWithDefaults() *RecoverAwsParamsRecoverRdsIngestParams {
	this := RecoverAwsParamsRecoverRdsIngestParams{}
	return &this
}

// GetAwsTargetParams returns the AwsTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParamsRecoverRdsIngestParams) GetAwsTargetParams() RecoverRDSPostgresParamsAwsTargetParams {
	if o == nil || IsNil(o.AwsTargetParams.Get()) {
		var ret RecoverRDSPostgresParamsAwsTargetParams
		return ret
	}
	return *o.AwsTargetParams.Get()
}

// GetAwsTargetParamsOk returns a tuple with the AwsTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParamsRecoverRdsIngestParams) GetAwsTargetParamsOk() (*RecoverRDSPostgresParamsAwsTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.AwsTargetParams.Get(), o.AwsTargetParams.IsSet()
}

// HasAwsTargetParams returns a boolean if a field has been set.
func (o *RecoverAwsParamsRecoverRdsIngestParams) HasAwsTargetParams() bool {
	if o != nil && o.AwsTargetParams.IsSet() {
		return true
	}

	return false
}

// SetAwsTargetParams gets a reference to the given NullableRecoverRDSPostgresParamsAwsTargetParams and assigns it to the AwsTargetParams field.
func (o *RecoverAwsParamsRecoverRdsIngestParams) SetAwsTargetParams(v RecoverRDSPostgresParamsAwsTargetParams) {
	o.AwsTargetParams.Set(&v)
}
// SetAwsTargetParamsNil sets the value for AwsTargetParams to be an explicit nil
func (o *RecoverAwsParamsRecoverRdsIngestParams) SetAwsTargetParamsNil() {
	o.AwsTargetParams.Set(nil)
}

// UnsetAwsTargetParams ensures that no value is present for AwsTargetParams, not even an explicit nil
func (o *RecoverAwsParamsRecoverRdsIngestParams) UnsetAwsTargetParams() {
	o.AwsTargetParams.Unset()
}

// GetOverwriteDatabase returns the OverwriteDatabase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParamsRecoverRdsIngestParams) GetOverwriteDatabase() bool {
	if o == nil || IsNil(o.OverwriteDatabase.Get()) {
		var ret bool
		return ret
	}
	return *o.OverwriteDatabase.Get()
}

// GetOverwriteDatabaseOk returns a tuple with the OverwriteDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParamsRecoverRdsIngestParams) GetOverwriteDatabaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverwriteDatabase.Get(), o.OverwriteDatabase.IsSet()
}

// HasOverwriteDatabase returns a boolean if a field has been set.
func (o *RecoverAwsParamsRecoverRdsIngestParams) HasOverwriteDatabase() bool {
	if o != nil && o.OverwriteDatabase.IsSet() {
		return true
	}

	return false
}

// SetOverwriteDatabase gets a reference to the given NullableBool and assigns it to the OverwriteDatabase field.
func (o *RecoverAwsParamsRecoverRdsIngestParams) SetOverwriteDatabase(v bool) {
	o.OverwriteDatabase.Set(&v)
}
// SetOverwriteDatabaseNil sets the value for OverwriteDatabase to be an explicit nil
func (o *RecoverAwsParamsRecoverRdsIngestParams) SetOverwriteDatabaseNil() {
	o.OverwriteDatabase.Set(nil)
}

// UnsetOverwriteDatabase ensures that no value is present for OverwriteDatabase, not even an explicit nil
func (o *RecoverAwsParamsRecoverRdsIngestParams) UnsetOverwriteDatabase() {
	o.OverwriteDatabase.Unset()
}

// GetPrefix returns the Prefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParamsRecoverRdsIngestParams) GetPrefix() string {
	if o == nil || IsNil(o.Prefix.Get()) {
		var ret string
		return ret
	}
	return *o.Prefix.Get()
}

// GetPrefixOk returns a tuple with the Prefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParamsRecoverRdsIngestParams) GetPrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Prefix.Get(), o.Prefix.IsSet()
}

// HasPrefix returns a boolean if a field has been set.
func (o *RecoverAwsParamsRecoverRdsIngestParams) HasPrefix() bool {
	if o != nil && o.Prefix.IsSet() {
		return true
	}

	return false
}

// SetPrefix gets a reference to the given NullableString and assigns it to the Prefix field.
func (o *RecoverAwsParamsRecoverRdsIngestParams) SetPrefix(v string) {
	o.Prefix.Set(&v)
}
// SetPrefixNil sets the value for Prefix to be an explicit nil
func (o *RecoverAwsParamsRecoverRdsIngestParams) SetPrefixNil() {
	o.Prefix.Set(nil)
}

// UnsetPrefix ensures that no value is present for Prefix, not even an explicit nil
func (o *RecoverAwsParamsRecoverRdsIngestParams) UnsetPrefix() {
	o.Prefix.Unset()
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsParamsRecoverRdsIngestParams) GetSuffix() string {
	if o == nil || IsNil(o.Suffix.Get()) {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsParamsRecoverRdsIngestParams) GetSuffixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *RecoverAwsParamsRecoverRdsIngestParams) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *RecoverAwsParamsRecoverRdsIngestParams) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *RecoverAwsParamsRecoverRdsIngestParams) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *RecoverAwsParamsRecoverRdsIngestParams) UnsetSuffix() {
	o.Suffix.Unset()
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverAwsParamsRecoverRdsIngestParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverAwsParamsRecoverRdsIngestParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverAwsParamsRecoverRdsIngestParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

func (o RecoverAwsParamsRecoverRdsIngestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverAwsParamsRecoverRdsIngestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AwsTargetParams.IsSet() {
		toSerialize["awsTargetParams"] = o.AwsTargetParams.Get()
	}
	if o.OverwriteDatabase.IsSet() {
		toSerialize["overwriteDatabase"] = o.OverwriteDatabase.Get()
	}
	if o.Prefix.IsSet() {
		toSerialize["prefix"] = o.Prefix.Get()
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	toSerialize["targetEnvironment"] = o.TargetEnvironment
	return toSerialize, nil
}

func (o *RecoverAwsParamsRecoverRdsIngestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetEnvironment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverAwsParamsRecoverRdsIngestParams := _RecoverAwsParamsRecoverRdsIngestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverAwsParamsRecoverRdsIngestParams)

	if err != nil {
		return err
	}

	*o = RecoverAwsParamsRecoverRdsIngestParams(varRecoverAwsParamsRecoverRdsIngestParams)

	return err
}

type NullableRecoverAwsParamsRecoverRdsIngestParams struct {
	value *RecoverAwsParamsRecoverRdsIngestParams
	isSet bool
}

func (v NullableRecoverAwsParamsRecoverRdsIngestParams) Get() *RecoverAwsParamsRecoverRdsIngestParams {
	return v.value
}

func (v *NullableRecoverAwsParamsRecoverRdsIngestParams) Set(val *RecoverAwsParamsRecoverRdsIngestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAwsParamsRecoverRdsIngestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAwsParamsRecoverRdsIngestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAwsParamsRecoverRdsIngestParams(val *RecoverAwsParamsRecoverRdsIngestParams) *NullableRecoverAwsParamsRecoverRdsIngestParams {
	return &NullableRecoverAwsParamsRecoverRdsIngestParams{value: val, isSet: true}
}

func (v NullableRecoverAwsParamsRecoverRdsIngestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAwsParamsRecoverRdsIngestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


