/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataTieringTarget type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTieringTarget{}

// DataTieringTarget Specifies the target data tiering details.
type DataTieringTarget struct {
	// Specifies the mount path inside the view.
	MountPath NullableString `json:"mountPath,omitempty"`
	// Specifies the Storage Domain ID where the view will be kept.
	StorageDomainId NullableInt64 `json:"storageDomainId"`
	// Specifies the view name.
	ViewName NullableString `json:"viewName"`
}

type _DataTieringTarget DataTieringTarget

// NewDataTieringTarget instantiates a new DataTieringTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTieringTarget(storageDomainId NullableInt64, viewName NullableString) *DataTieringTarget {
	this := DataTieringTarget{}
	this.StorageDomainId = storageDomainId
	this.ViewName = viewName
	return &this
}

// NewDataTieringTargetWithDefaults instantiates a new DataTieringTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTieringTargetWithDefaults() *DataTieringTarget {
	this := DataTieringTarget{}
	return &this
}

// GetMountPath returns the MountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTarget) GetMountPath() string {
	if o == nil || IsNil(o.MountPath.Get()) {
		var ret string
		return ret
	}
	return *o.MountPath.Get()
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTarget) GetMountPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountPath.Get(), o.MountPath.IsSet()
}

// HasMountPath returns a boolean if a field has been set.
func (o *DataTieringTarget) HasMountPath() bool {
	if o != nil && o.MountPath.IsSet() {
		return true
	}

	return false
}

// SetMountPath gets a reference to the given NullableString and assigns it to the MountPath field.
func (o *DataTieringTarget) SetMountPath(v string) {
	o.MountPath.Set(&v)
}
// SetMountPathNil sets the value for MountPath to be an explicit nil
func (o *DataTieringTarget) SetMountPathNil() {
	o.MountPath.Set(nil)
}

// UnsetMountPath ensures that no value is present for MountPath, not even an explicit nil
func (o *DataTieringTarget) UnsetMountPath() {
	o.MountPath.Unset()
}

// GetStorageDomainId returns the StorageDomainId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *DataTieringTarget) GetStorageDomainId() int64 {
	if o == nil || o.StorageDomainId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.StorageDomainId.Get()
}

// GetStorageDomainIdOk returns a tuple with the StorageDomainId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTarget) GetStorageDomainIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageDomainId.Get(), o.StorageDomainId.IsSet()
}

// SetStorageDomainId sets field value
func (o *DataTieringTarget) SetStorageDomainId(v int64) {
	o.StorageDomainId.Set(&v)
}

// GetViewName returns the ViewName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DataTieringTarget) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTarget) GetViewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// SetViewName sets field value
func (o *DataTieringTarget) SetViewName(v string) {
	o.ViewName.Set(&v)
}

func (o DataTieringTarget) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTieringTarget) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.MountPath.IsSet() {
		toSerialize["mountPath"] = o.MountPath.Get()
	}
	toSerialize["storageDomainId"] = o.StorageDomainId.Get()
	toSerialize["viewName"] = o.ViewName.Get()
	return toSerialize, nil
}

func (o *DataTieringTarget) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"storageDomainId",
		"viewName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataTieringTarget := _DataTieringTarget{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataTieringTarget)

	if err != nil {
		return err
	}

	*o = DataTieringTarget(varDataTieringTarget)

	return err
}

type NullableDataTieringTarget struct {
	value *DataTieringTarget
	isSet bool
}

func (v NullableDataTieringTarget) Get() *DataTieringTarget {
	return v.value
}

func (v *NullableDataTieringTarget) Set(val *DataTieringTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTieringTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTieringTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTieringTarget(val *DataTieringTarget) *NullableDataTieringTarget {
	return &NullableDataTieringTarget{value: val, isSet: true}
}

func (v NullableDataTieringTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTieringTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


