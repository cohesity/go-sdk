/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverPureVolumeTargetParamsNewSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverPureVolumeTargetParamsNewSourceConfig{}

// RecoverPureVolumeTargetParamsNewSourceConfig Specifies the new destination Source configuration parameters where the Pure volume will be recovered. This is mandatory if recoverToNewSource is set to true.
type RecoverPureVolumeTargetParamsNewSourceConfig struct {
	RenameRecoveredVolumeParams NullableRecoverPureSanVolumeNewSourceConfigRenameRecoveredVolumeParams `json:"renameRecoveredVolumeParams,omitempty"`
	ResourcePool NullableRecoverPureSanGroupNewSourceConfigResourcePool `json:"resourcePool,omitempty"`
	Source NullableRecoverPureSanVolumeNewSourceConfigSource `json:"source"`
}

type _RecoverPureVolumeTargetParamsNewSourceConfig RecoverPureVolumeTargetParamsNewSourceConfig

// NewRecoverPureVolumeTargetParamsNewSourceConfig instantiates a new RecoverPureVolumeTargetParamsNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverPureVolumeTargetParamsNewSourceConfig(source NullableRecoverPureSanVolumeNewSourceConfigSource) *RecoverPureVolumeTargetParamsNewSourceConfig {
	this := RecoverPureVolumeTargetParamsNewSourceConfig{}
	this.Source = source
	return &this
}

// NewRecoverPureVolumeTargetParamsNewSourceConfigWithDefaults instantiates a new RecoverPureVolumeTargetParamsNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverPureVolumeTargetParamsNewSourceConfigWithDefaults() *RecoverPureVolumeTargetParamsNewSourceConfig {
	this := RecoverPureVolumeTargetParamsNewSourceConfig{}
	return &this
}

// GetRenameRecoveredVolumeParams returns the RenameRecoveredVolumeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) GetRenameRecoveredVolumeParams() RecoverPureSanVolumeNewSourceConfigRenameRecoveredVolumeParams {
	if o == nil || IsNil(o.RenameRecoveredVolumeParams.Get()) {
		var ret RecoverPureSanVolumeNewSourceConfigRenameRecoveredVolumeParams
		return ret
	}
	return *o.RenameRecoveredVolumeParams.Get()
}

// GetRenameRecoveredVolumeParamsOk returns a tuple with the RenameRecoveredVolumeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) GetRenameRecoveredVolumeParamsOk() (*RecoverPureSanVolumeNewSourceConfigRenameRecoveredVolumeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenameRecoveredVolumeParams.Get(), o.RenameRecoveredVolumeParams.IsSet()
}

// HasRenameRecoveredVolumeParams returns a boolean if a field has been set.
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) HasRenameRecoveredVolumeParams() bool {
	if o != nil && o.RenameRecoveredVolumeParams.IsSet() {
		return true
	}

	return false
}

// SetRenameRecoveredVolumeParams gets a reference to the given NullableRecoverPureSanVolumeNewSourceConfigRenameRecoveredVolumeParams and assigns it to the RenameRecoveredVolumeParams field.
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) SetRenameRecoveredVolumeParams(v RecoverPureSanVolumeNewSourceConfigRenameRecoveredVolumeParams) {
	o.RenameRecoveredVolumeParams.Set(&v)
}
// SetRenameRecoveredVolumeParamsNil sets the value for RenameRecoveredVolumeParams to be an explicit nil
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) SetRenameRecoveredVolumeParamsNil() {
	o.RenameRecoveredVolumeParams.Set(nil)
}

// UnsetRenameRecoveredVolumeParams ensures that no value is present for RenameRecoveredVolumeParams, not even an explicit nil
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) UnsetRenameRecoveredVolumeParams() {
	o.RenameRecoveredVolumeParams.Unset()
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) GetResourcePool() RecoverPureSanGroupNewSourceConfigResourcePool {
	if o == nil || IsNil(o.ResourcePool.Get()) {
		var ret RecoverPureSanGroupNewSourceConfigResourcePool
		return ret
	}
	return *o.ResourcePool.Get()
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) GetResourcePoolOk() (*RecoverPureSanGroupNewSourceConfigResourcePool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourcePool.Get(), o.ResourcePool.IsSet()
}

// HasResourcePool returns a boolean if a field has been set.
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) HasResourcePool() bool {
	if o != nil && o.ResourcePool.IsSet() {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given NullableRecoverPureSanGroupNewSourceConfigResourcePool and assigns it to the ResourcePool field.
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) SetResourcePool(v RecoverPureSanGroupNewSourceConfigResourcePool) {
	o.ResourcePool.Set(&v)
}
// SetResourcePoolNil sets the value for ResourcePool to be an explicit nil
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) SetResourcePoolNil() {
	o.ResourcePool.Set(nil)
}

// UnsetResourcePool ensures that no value is present for ResourcePool, not even an explicit nil
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) UnsetResourcePool() {
	o.ResourcePool.Unset()
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoverPureSanVolumeNewSourceConfigSource will be returned
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) GetSource() RecoverPureSanVolumeNewSourceConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret RecoverPureSanVolumeNewSourceConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) GetSourceOk() (*RecoverPureSanVolumeNewSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *RecoverPureVolumeTargetParamsNewSourceConfig) SetSource(v RecoverPureSanVolumeNewSourceConfigSource) {
	o.Source.Set(&v)
}

func (o RecoverPureVolumeTargetParamsNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverPureVolumeTargetParamsNewSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RenameRecoveredVolumeParams.IsSet() {
		toSerialize["renameRecoveredVolumeParams"] = o.RenameRecoveredVolumeParams.Get()
	}
	if o.ResourcePool.IsSet() {
		toSerialize["resourcePool"] = o.ResourcePool.Get()
	}
	toSerialize["source"] = o.Source.Get()
	return toSerialize, nil
}

func (o *RecoverPureVolumeTargetParamsNewSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverPureVolumeTargetParamsNewSourceConfig := _RecoverPureVolumeTargetParamsNewSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverPureVolumeTargetParamsNewSourceConfig)

	if err != nil {
		return err
	}

	*o = RecoverPureVolumeTargetParamsNewSourceConfig(varRecoverPureVolumeTargetParamsNewSourceConfig)

	return err
}

type NullableRecoverPureVolumeTargetParamsNewSourceConfig struct {
	value *RecoverPureVolumeTargetParamsNewSourceConfig
	isSet bool
}

func (v NullableRecoverPureVolumeTargetParamsNewSourceConfig) Get() *RecoverPureVolumeTargetParamsNewSourceConfig {
	return v.value
}

func (v *NullableRecoverPureVolumeTargetParamsNewSourceConfig) Set(val *RecoverPureVolumeTargetParamsNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverPureVolumeTargetParamsNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverPureVolumeTargetParamsNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverPureVolumeTargetParamsNewSourceConfig(val *RecoverPureVolumeTargetParamsNewSourceConfig) *NullableRecoverPureVolumeTargetParamsNewSourceConfig {
	return &NullableRecoverPureVolumeTargetParamsNewSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverPureVolumeTargetParamsNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverPureVolumeTargetParamsNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


