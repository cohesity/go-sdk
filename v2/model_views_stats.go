/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewsStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewsStats{}

// ViewsStats Specifies a list of View stats.
type ViewsStats struct {
	// Specifies a list of View stats.
	ViewsStats []ViewStatsInfo `json:"viewsStats,omitempty"`
}

// NewViewsStats instantiates a new ViewsStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewsStats() *ViewsStats {
	this := ViewsStats{}
	return &this
}

// NewViewsStatsWithDefaults instantiates a new ViewsStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewsStatsWithDefaults() *ViewsStats {
	this := ViewsStats{}
	return &this
}

// GetViewsStats returns the ViewsStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewsStats) GetViewsStats() []ViewStatsInfo {
	if o == nil {
		var ret []ViewStatsInfo
		return ret
	}
	return o.ViewsStats
}

// GetViewsStatsOk returns a tuple with the ViewsStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewsStats) GetViewsStatsOk() ([]ViewStatsInfo, bool) {
	if o == nil || IsNil(o.ViewsStats) {
		return nil, false
	}
	return o.ViewsStats, true
}

// HasViewsStats returns a boolean if a field has been set.
func (o *ViewsStats) HasViewsStats() bool {
	if o != nil && !IsNil(o.ViewsStats) {
		return true
	}

	return false
}

// SetViewsStats gets a reference to the given []ViewStatsInfo and assigns it to the ViewsStats field.
func (o *ViewsStats) SetViewsStats(v []ViewStatsInfo) {
	o.ViewsStats = v
}

func (o ViewsStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewsStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ViewsStats != nil {
		toSerialize["viewsStats"] = o.ViewsStats
	}
	return toSerialize, nil
}

type NullableViewsStats struct {
	value *ViewsStats
	isSet bool
}

func (v NullableViewsStats) Get() *ViewsStats {
	return v.value
}

func (v *NullableViewsStats) Set(val *ViewsStats) {
	v.value = val
	v.isSet = true
}

func (v NullableViewsStats) IsSet() bool {
	return v.isSet
}

func (v *NullableViewsStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewsStats(val *ViewsStats) *NullableViewsStats {
	return &NullableViewsStats{value: val, isSet: true}
}

func (v NullableViewsStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewsStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


