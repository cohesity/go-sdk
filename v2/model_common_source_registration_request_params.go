/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonSourceRegistrationRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonSourceRegistrationRequestParams{}

// CommonSourceRegistrationRequestParams Specifies the parameters which are common between all Protection Source registrations.
type CommonSourceRegistrationRequestParams struct {
	// Specifies the advanced configuration for a protection source.
	AdvancedConfigs []KeyValuePair `json:"advancedConfigs,omitempty"`
	// Specifies the id of the connection from where this source is reachable. This should only be set for a source being registered by a tenant user.
	ConnectionId NullableInt64 `json:"connectionId,omitempty"`
	// Specfies the list of connections for the source.
	Connections []ConnectionConfig `json:"connections,omitempty"`
	// Specifies the connector group id of connector groups.
	ConnectorGroupId NullableInt64 `json:"connectorGroupId,omitempty"`
	// Specifies the key that user has encrypted the credential with.
	EncryptionKey NullableString `json:"encryptionKey,omitempty"`
	// Specifies the environment type of the Protection Source.
	Environment NullableString `json:"environment"`
	// Specifies if credentials are encrypted by internal key.
	IsInternalEncrypted NullableBool `json:"isInternalEncrypted,omitempty"`
	// A user specified name for this source.
	Name NullableString `json:"name,omitempty"`
}

type _CommonSourceRegistrationRequestParams CommonSourceRegistrationRequestParams

// NewCommonSourceRegistrationRequestParams instantiates a new CommonSourceRegistrationRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonSourceRegistrationRequestParams(environment NullableString) *CommonSourceRegistrationRequestParams {
	this := CommonSourceRegistrationRequestParams{}
	this.Environment = environment
	return &this
}

// NewCommonSourceRegistrationRequestParamsWithDefaults instantiates a new CommonSourceRegistrationRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonSourceRegistrationRequestParamsWithDefaults() *CommonSourceRegistrationRequestParams {
	this := CommonSourceRegistrationRequestParams{}
	return &this
}

// GetAdvancedConfigs returns the AdvancedConfigs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationRequestParams) GetAdvancedConfigs() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.AdvancedConfigs
}

// GetAdvancedConfigsOk returns a tuple with the AdvancedConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationRequestParams) GetAdvancedConfigsOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.AdvancedConfigs) {
		return nil, false
	}
	return o.AdvancedConfigs, true
}

// HasAdvancedConfigs returns a boolean if a field has been set.
func (o *CommonSourceRegistrationRequestParams) HasAdvancedConfigs() bool {
	if o != nil && !IsNil(o.AdvancedConfigs) {
		return true
	}

	return false
}

// SetAdvancedConfigs gets a reference to the given []KeyValuePair and assigns it to the AdvancedConfigs field.
func (o *CommonSourceRegistrationRequestParams) SetAdvancedConfigs(v []KeyValuePair) {
	o.AdvancedConfigs = v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationRequestParams) GetConnectionId() int64 {
	if o == nil || IsNil(o.ConnectionId.Get()) {
		var ret int64
		return ret
	}
	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationRequestParams) GetConnectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// HasConnectionId returns a boolean if a field has been set.
func (o *CommonSourceRegistrationRequestParams) HasConnectionId() bool {
	if o != nil && o.ConnectionId.IsSet() {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given NullableInt64 and assigns it to the ConnectionId field.
func (o *CommonSourceRegistrationRequestParams) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}
// SetConnectionIdNil sets the value for ConnectionId to be an explicit nil
func (o *CommonSourceRegistrationRequestParams) SetConnectionIdNil() {
	o.ConnectionId.Set(nil)
}

// UnsetConnectionId ensures that no value is present for ConnectionId, not even an explicit nil
func (o *CommonSourceRegistrationRequestParams) UnsetConnectionId() {
	o.ConnectionId.Unset()
}

// GetConnections returns the Connections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationRequestParams) GetConnections() []ConnectionConfig {
	if o == nil {
		var ret []ConnectionConfig
		return ret
	}
	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationRequestParams) GetConnectionsOk() ([]ConnectionConfig, bool) {
	if o == nil || IsNil(o.Connections) {
		return nil, false
	}
	return o.Connections, true
}

// HasConnections returns a boolean if a field has been set.
func (o *CommonSourceRegistrationRequestParams) HasConnections() bool {
	if o != nil && !IsNil(o.Connections) {
		return true
	}

	return false
}

// SetConnections gets a reference to the given []ConnectionConfig and assigns it to the Connections field.
func (o *CommonSourceRegistrationRequestParams) SetConnections(v []ConnectionConfig) {
	o.Connections = v
}

// GetConnectorGroupId returns the ConnectorGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationRequestParams) GetConnectorGroupId() int64 {
	if o == nil || IsNil(o.ConnectorGroupId.Get()) {
		var ret int64
		return ret
	}
	return *o.ConnectorGroupId.Get()
}

// GetConnectorGroupIdOk returns a tuple with the ConnectorGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationRequestParams) GetConnectorGroupIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectorGroupId.Get(), o.ConnectorGroupId.IsSet()
}

// HasConnectorGroupId returns a boolean if a field has been set.
func (o *CommonSourceRegistrationRequestParams) HasConnectorGroupId() bool {
	if o != nil && o.ConnectorGroupId.IsSet() {
		return true
	}

	return false
}

// SetConnectorGroupId gets a reference to the given NullableInt64 and assigns it to the ConnectorGroupId field.
func (o *CommonSourceRegistrationRequestParams) SetConnectorGroupId(v int64) {
	o.ConnectorGroupId.Set(&v)
}
// SetConnectorGroupIdNil sets the value for ConnectorGroupId to be an explicit nil
func (o *CommonSourceRegistrationRequestParams) SetConnectorGroupIdNil() {
	o.ConnectorGroupId.Set(nil)
}

// UnsetConnectorGroupId ensures that no value is present for ConnectorGroupId, not even an explicit nil
func (o *CommonSourceRegistrationRequestParams) UnsetConnectorGroupId() {
	o.ConnectorGroupId.Unset()
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationRequestParams) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey.Get()) {
		var ret string
		return ret
	}
	return *o.EncryptionKey.Get()
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationRequestParams) GetEncryptionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionKey.Get(), o.EncryptionKey.IsSet()
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *CommonSourceRegistrationRequestParams) HasEncryptionKey() bool {
	if o != nil && o.EncryptionKey.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given NullableString and assigns it to the EncryptionKey field.
func (o *CommonSourceRegistrationRequestParams) SetEncryptionKey(v string) {
	o.EncryptionKey.Set(&v)
}
// SetEncryptionKeyNil sets the value for EncryptionKey to be an explicit nil
func (o *CommonSourceRegistrationRequestParams) SetEncryptionKeyNil() {
	o.EncryptionKey.Set(nil)
}

// UnsetEncryptionKey ensures that no value is present for EncryptionKey, not even an explicit nil
func (o *CommonSourceRegistrationRequestParams) UnsetEncryptionKey() {
	o.EncryptionKey.Unset()
}

// GetEnvironment returns the Environment field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonSourceRegistrationRequestParams) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}

	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationRequestParams) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// SetEnvironment sets field value
func (o *CommonSourceRegistrationRequestParams) SetEnvironment(v string) {
	o.Environment.Set(&v)
}

// GetIsInternalEncrypted returns the IsInternalEncrypted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationRequestParams) GetIsInternalEncrypted() bool {
	if o == nil || IsNil(o.IsInternalEncrypted.Get()) {
		var ret bool
		return ret
	}
	return *o.IsInternalEncrypted.Get()
}

// GetIsInternalEncryptedOk returns a tuple with the IsInternalEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationRequestParams) GetIsInternalEncryptedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsInternalEncrypted.Get(), o.IsInternalEncrypted.IsSet()
}

// HasIsInternalEncrypted returns a boolean if a field has been set.
func (o *CommonSourceRegistrationRequestParams) HasIsInternalEncrypted() bool {
	if o != nil && o.IsInternalEncrypted.IsSet() {
		return true
	}

	return false
}

// SetIsInternalEncrypted gets a reference to the given NullableBool and assigns it to the IsInternalEncrypted field.
func (o *CommonSourceRegistrationRequestParams) SetIsInternalEncrypted(v bool) {
	o.IsInternalEncrypted.Set(&v)
}
// SetIsInternalEncryptedNil sets the value for IsInternalEncrypted to be an explicit nil
func (o *CommonSourceRegistrationRequestParams) SetIsInternalEncryptedNil() {
	o.IsInternalEncrypted.Set(nil)
}

// UnsetIsInternalEncrypted ensures that no value is present for IsInternalEncrypted, not even an explicit nil
func (o *CommonSourceRegistrationRequestParams) UnsetIsInternalEncrypted() {
	o.IsInternalEncrypted.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonSourceRegistrationRequestParams) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonSourceRegistrationRequestParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CommonSourceRegistrationRequestParams) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CommonSourceRegistrationRequestParams) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CommonSourceRegistrationRequestParams) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CommonSourceRegistrationRequestParams) UnsetName() {
	o.Name.Unset()
}

func (o CommonSourceRegistrationRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonSourceRegistrationRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AdvancedConfigs != nil {
		toSerialize["advancedConfigs"] = o.AdvancedConfigs
	}
	if o.ConnectionId.IsSet() {
		toSerialize["connectionId"] = o.ConnectionId.Get()
	}
	if o.Connections != nil {
		toSerialize["connections"] = o.Connections
	}
	if o.ConnectorGroupId.IsSet() {
		toSerialize["connectorGroupId"] = o.ConnectorGroupId.Get()
	}
	if o.EncryptionKey.IsSet() {
		toSerialize["encryptionKey"] = o.EncryptionKey.Get()
	}
	toSerialize["environment"] = o.Environment.Get()
	if o.IsInternalEncrypted.IsSet() {
		toSerialize["isInternalEncrypted"] = o.IsInternalEncrypted.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

func (o *CommonSourceRegistrationRequestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonSourceRegistrationRequestParams := _CommonSourceRegistrationRequestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonSourceRegistrationRequestParams)

	if err != nil {
		return err
	}

	*o = CommonSourceRegistrationRequestParams(varCommonSourceRegistrationRequestParams)

	return err
}

type NullableCommonSourceRegistrationRequestParams struct {
	value *CommonSourceRegistrationRequestParams
	isSet bool
}

func (v NullableCommonSourceRegistrationRequestParams) Get() *CommonSourceRegistrationRequestParams {
	return v.value
}

func (v *NullableCommonSourceRegistrationRequestParams) Set(val *CommonSourceRegistrationRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonSourceRegistrationRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonSourceRegistrationRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonSourceRegistrationRequestParams(val *CommonSourceRegistrationRequestParams) *NullableCommonSourceRegistrationRequestParams {
	return &NullableCommonSourceRegistrationRequestParams{value: val, isSet: true}
}

func (v NullableCommonSourceRegistrationRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonSourceRegistrationRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


