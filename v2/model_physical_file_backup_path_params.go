/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PhysicalFileBackupPathParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhysicalFileBackupPathParams{}

// PhysicalFileBackupPathParams struct for PhysicalFileBackupPathParams
type PhysicalFileBackupPathParams struct {
	// Specifies a set of paths nested under the include path which should be excluded from the Protection Group.
	ExcludedPaths []string `json:"excludedPaths,omitempty"`
	// Specifies a path to be included on the source. All paths under this path will be included unless they are specifically mentioned in excluded paths.
	IncludedPath string `json:"includedPath"`
	// Specifies whether to skip any nested volumes (both local and network) that are mounted under include path. Applicable only for windows sources.
	SkipNestedVolumes NullableBool `json:"skipNestedVolumes,omitempty"`
}

type _PhysicalFileBackupPathParams PhysicalFileBackupPathParams

// NewPhysicalFileBackupPathParams instantiates a new PhysicalFileBackupPathParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalFileBackupPathParams(includedPath string) *PhysicalFileBackupPathParams {
	this := PhysicalFileBackupPathParams{}
	this.IncludedPath = includedPath
	return &this
}

// NewPhysicalFileBackupPathParamsWithDefaults instantiates a new PhysicalFileBackupPathParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalFileBackupPathParamsWithDefaults() *PhysicalFileBackupPathParams {
	this := PhysicalFileBackupPathParams{}
	return &this
}

// GetExcludedPaths returns the ExcludedPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupPathParams) GetExcludedPaths() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludedPaths
}

// GetExcludedPathsOk returns a tuple with the ExcludedPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupPathParams) GetExcludedPathsOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludedPaths) {
		return nil, false
	}
	return o.ExcludedPaths, true
}

// HasExcludedPaths returns a boolean if a field has been set.
func (o *PhysicalFileBackupPathParams) HasExcludedPaths() bool {
	if o != nil && !IsNil(o.ExcludedPaths) {
		return true
	}

	return false
}

// SetExcludedPaths gets a reference to the given []string and assigns it to the ExcludedPaths field.
func (o *PhysicalFileBackupPathParams) SetExcludedPaths(v []string) {
	o.ExcludedPaths = v
}

// GetIncludedPath returns the IncludedPath field value
func (o *PhysicalFileBackupPathParams) GetIncludedPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IncludedPath
}

// GetIncludedPathOk returns a tuple with the IncludedPath field value
// and a boolean to check if the value has been set.
func (o *PhysicalFileBackupPathParams) GetIncludedPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IncludedPath, true
}

// SetIncludedPath sets field value
func (o *PhysicalFileBackupPathParams) SetIncludedPath(v string) {
	o.IncludedPath = v
}

// GetSkipNestedVolumes returns the SkipNestedVolumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupPathParams) GetSkipNestedVolumes() bool {
	if o == nil || IsNil(o.SkipNestedVolumes.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipNestedVolumes.Get()
}

// GetSkipNestedVolumesOk returns a tuple with the SkipNestedVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupPathParams) GetSkipNestedVolumesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipNestedVolumes.Get(), o.SkipNestedVolumes.IsSet()
}

// HasSkipNestedVolumes returns a boolean if a field has been set.
func (o *PhysicalFileBackupPathParams) HasSkipNestedVolumes() bool {
	if o != nil && o.SkipNestedVolumes.IsSet() {
		return true
	}

	return false
}

// SetSkipNestedVolumes gets a reference to the given NullableBool and assigns it to the SkipNestedVolumes field.
func (o *PhysicalFileBackupPathParams) SetSkipNestedVolumes(v bool) {
	o.SkipNestedVolumes.Set(&v)
}
// SetSkipNestedVolumesNil sets the value for SkipNestedVolumes to be an explicit nil
func (o *PhysicalFileBackupPathParams) SetSkipNestedVolumesNil() {
	o.SkipNestedVolumes.Set(nil)
}

// UnsetSkipNestedVolumes ensures that no value is present for SkipNestedVolumes, not even an explicit nil
func (o *PhysicalFileBackupPathParams) UnsetSkipNestedVolumes() {
	o.SkipNestedVolumes.Unset()
}

func (o PhysicalFileBackupPathParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhysicalFileBackupPathParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludedPaths != nil {
		toSerialize["excludedPaths"] = o.ExcludedPaths
	}
	toSerialize["includedPath"] = o.IncludedPath
	if o.SkipNestedVolumes.IsSet() {
		toSerialize["skipNestedVolumes"] = o.SkipNestedVolumes.Get()
	}
	return toSerialize, nil
}

func (o *PhysicalFileBackupPathParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"includedPath",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPhysicalFileBackupPathParams := _PhysicalFileBackupPathParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPhysicalFileBackupPathParams)

	if err != nil {
		return err
	}

	*o = PhysicalFileBackupPathParams(varPhysicalFileBackupPathParams)

	return err
}

type NullablePhysicalFileBackupPathParams struct {
	value *PhysicalFileBackupPathParams
	isSet bool
}

func (v NullablePhysicalFileBackupPathParams) Get() *PhysicalFileBackupPathParams {
	return v.value
}

func (v *NullablePhysicalFileBackupPathParams) Set(val *PhysicalFileBackupPathParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalFileBackupPathParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalFileBackupPathParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalFileBackupPathParams(val *PhysicalFileBackupPathParams) *NullablePhysicalFileBackupPathParams {
	return &NullablePhysicalFileBackupPathParams{value: val, isSet: true}
}

func (v NullablePhysicalFileBackupPathParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalFileBackupPathParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


