/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectPolicy{}

// ObjectPolicy Specifies the protection policy for protecting an object.
type ObjectPolicy struct {
	// Specifies the id of protection policy.
	Id NullableString `json:"id"`
	// Specifies the protection type.
	ProtectionType NullableString `json:"protectionType"`
}

type _ObjectPolicy ObjectPolicy

// NewObjectPolicy instantiates a new ObjectPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectPolicy(id NullableString, protectionType NullableString) *ObjectPolicy {
	this := ObjectPolicy{}
	this.Id = id
	this.ProtectionType = protectionType
	return &this
}

// NewObjectPolicyWithDefaults instantiates a new ObjectPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectPolicyWithDefaults() *ObjectPolicy {
	this := ObjectPolicy{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ObjectPolicy) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectPolicy) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *ObjectPolicy) SetId(v string) {
	o.Id.Set(&v)
}

// GetProtectionType returns the ProtectionType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ObjectPolicy) GetProtectionType() string {
	if o == nil || o.ProtectionType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ProtectionType.Get()
}

// GetProtectionTypeOk returns a tuple with the ProtectionType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectPolicy) GetProtectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProtectionType.Get(), o.ProtectionType.IsSet()
}

// SetProtectionType sets field value
func (o *ObjectPolicy) SetProtectionType(v string) {
	o.ProtectionType.Set(&v)
}

func (o ObjectPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	toSerialize["protectionType"] = o.ProtectionType.Get()
	return toSerialize, nil
}

func (o *ObjectPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"protectionType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectPolicy := _ObjectPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectPolicy)

	if err != nil {
		return err
	}

	*o = ObjectPolicy(varObjectPolicy)

	return err
}

type NullableObjectPolicy struct {
	value *ObjectPolicy
	isSet bool
}

func (v NullableObjectPolicy) Get() *ObjectPolicy {
	return v.value
}

func (v *NullableObjectPolicy) Set(val *ObjectPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectPolicy(val *ObjectPolicy) *NullableObjectPolicy {
	return &NullableObjectPolicy{value: val, isSet: true}
}

func (v NullableObjectPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


