/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RpoPolicySettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RpoPolicySettings{}

// RpoPolicySettings Specifies all the additional settings that are applicable only to an RPO policy. This can include storage domain, settings of different environments, etc.
type RpoPolicySettings struct {
	AlertingPolicy *ProtectionGroupAlertingPolicy `json:"alertingPolicy,omitempty"`
	// Specifies whether the data will be written to HDD or SSD.
	BackupQosPrincipal NullableString `json:"backupQosPrincipal,omitempty"`
	EnvBackupParams *EnvironmentTypeJobParams `json:"envBackupParams,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	// Specifies the Storage Domain to which data will be written
	StorageDomainId NullableInt64 `json:"storageDomainId,omitempty"`
}

// NewRpoPolicySettings instantiates a new RpoPolicySettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRpoPolicySettings() *RpoPolicySettings {
	this := RpoPolicySettings{}
	return &this
}

// NewRpoPolicySettingsWithDefaults instantiates a new RpoPolicySettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRpoPolicySettingsWithDefaults() *RpoPolicySettings {
	this := RpoPolicySettings{}
	return &this
}

// GetAlertingPolicy returns the AlertingPolicy field value if set, zero value otherwise.
func (o *RpoPolicySettings) GetAlertingPolicy() ProtectionGroupAlertingPolicy {
	if o == nil || IsNil(o.AlertingPolicy) {
		var ret ProtectionGroupAlertingPolicy
		return ret
	}
	return *o.AlertingPolicy
}

// GetAlertingPolicyOk returns a tuple with the AlertingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpoPolicySettings) GetAlertingPolicyOk() (*ProtectionGroupAlertingPolicy, bool) {
	if o == nil || IsNil(o.AlertingPolicy) {
		return nil, false
	}
	return o.AlertingPolicy, true
}

// HasAlertingPolicy returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasAlertingPolicy() bool {
	if o != nil && !IsNil(o.AlertingPolicy) {
		return true
	}

	return false
}

// SetAlertingPolicy gets a reference to the given ProtectionGroupAlertingPolicy and assigns it to the AlertingPolicy field.
func (o *RpoPolicySettings) SetAlertingPolicy(v ProtectionGroupAlertingPolicy) {
	o.AlertingPolicy = &v
}

// GetBackupQosPrincipal returns the BackupQosPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RpoPolicySettings) GetBackupQosPrincipal() string {
	if o == nil || IsNil(o.BackupQosPrincipal.Get()) {
		var ret string
		return ret
	}
	return *o.BackupQosPrincipal.Get()
}

// GetBackupQosPrincipalOk returns a tuple with the BackupQosPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RpoPolicySettings) GetBackupQosPrincipalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupQosPrincipal.Get(), o.BackupQosPrincipal.IsSet()
}

// HasBackupQosPrincipal returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasBackupQosPrincipal() bool {
	if o != nil && o.BackupQosPrincipal.IsSet() {
		return true
	}

	return false
}

// SetBackupQosPrincipal gets a reference to the given NullableString and assigns it to the BackupQosPrincipal field.
func (o *RpoPolicySettings) SetBackupQosPrincipal(v string) {
	o.BackupQosPrincipal.Set(&v)
}
// SetBackupQosPrincipalNil sets the value for BackupQosPrincipal to be an explicit nil
func (o *RpoPolicySettings) SetBackupQosPrincipalNil() {
	o.BackupQosPrincipal.Set(nil)
}

// UnsetBackupQosPrincipal ensures that no value is present for BackupQosPrincipal, not even an explicit nil
func (o *RpoPolicySettings) UnsetBackupQosPrincipal() {
	o.BackupQosPrincipal.Unset()
}

// GetEnvBackupParams returns the EnvBackupParams field value if set, zero value otherwise.
func (o *RpoPolicySettings) GetEnvBackupParams() EnvironmentTypeJobParams {
	if o == nil || IsNil(o.EnvBackupParams) {
		var ret EnvironmentTypeJobParams
		return ret
	}
	return *o.EnvBackupParams
}

// GetEnvBackupParamsOk returns a tuple with the EnvBackupParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpoPolicySettings) GetEnvBackupParamsOk() (*EnvironmentTypeJobParams, bool) {
	if o == nil || IsNil(o.EnvBackupParams) {
		return nil, false
	}
	return o.EnvBackupParams, true
}

// HasEnvBackupParams returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasEnvBackupParams() bool {
	if o != nil && !IsNil(o.EnvBackupParams) {
		return true
	}

	return false
}

// SetEnvBackupParams gets a reference to the given EnvironmentTypeJobParams and assigns it to the EnvBackupParams field.
func (o *RpoPolicySettings) SetEnvBackupParams(v EnvironmentTypeJobParams) {
	o.EnvBackupParams = &v
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *RpoPolicySettings) GetIndexingPolicy() IndexingPolicy {
	if o == nil || IsNil(o.IndexingPolicy) {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RpoPolicySettings) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || IsNil(o.IndexingPolicy) {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasIndexingPolicy() bool {
	if o != nil && !IsNil(o.IndexingPolicy) {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *RpoPolicySettings) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetStorageDomainId returns the StorageDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RpoPolicySettings) GetStorageDomainId() int64 {
	if o == nil || IsNil(o.StorageDomainId.Get()) {
		var ret int64
		return ret
	}
	return *o.StorageDomainId.Get()
}

// GetStorageDomainIdOk returns a tuple with the StorageDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RpoPolicySettings) GetStorageDomainIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageDomainId.Get(), o.StorageDomainId.IsSet()
}

// HasStorageDomainId returns a boolean if a field has been set.
func (o *RpoPolicySettings) HasStorageDomainId() bool {
	if o != nil && o.StorageDomainId.IsSet() {
		return true
	}

	return false
}

// SetStorageDomainId gets a reference to the given NullableInt64 and assigns it to the StorageDomainId field.
func (o *RpoPolicySettings) SetStorageDomainId(v int64) {
	o.StorageDomainId.Set(&v)
}
// SetStorageDomainIdNil sets the value for StorageDomainId to be an explicit nil
func (o *RpoPolicySettings) SetStorageDomainIdNil() {
	o.StorageDomainId.Set(nil)
}

// UnsetStorageDomainId ensures that no value is present for StorageDomainId, not even an explicit nil
func (o *RpoPolicySettings) UnsetStorageDomainId() {
	o.StorageDomainId.Unset()
}

func (o RpoPolicySettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RpoPolicySettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AlertingPolicy) {
		toSerialize["alertingPolicy"] = o.AlertingPolicy
	}
	if o.BackupQosPrincipal.IsSet() {
		toSerialize["backupQosPrincipal"] = o.BackupQosPrincipal.Get()
	}
	if !IsNil(o.EnvBackupParams) {
		toSerialize["envBackupParams"] = o.EnvBackupParams
	}
	if !IsNil(o.IndexingPolicy) {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	if o.StorageDomainId.IsSet() {
		toSerialize["storageDomainId"] = o.StorageDomainId.Get()
	}
	return toSerialize, nil
}

type NullableRpoPolicySettings struct {
	value *RpoPolicySettings
	isSet bool
}

func (v NullableRpoPolicySettings) Get() *RpoPolicySettings {
	return v.value
}

func (v *NullableRpoPolicySettings) Set(val *RpoPolicySettings) {
	v.value = val
	v.isSet = true
}

func (v NullableRpoPolicySettings) IsSet() bool {
	return v.isSet
}

func (v *NullableRpoPolicySettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRpoPolicySettings(val *RpoPolicySettings) *NullableRpoPolicySettings {
	return &NullableRpoPolicySettings{value: val, isSet: true}
}

func (v NullableRpoPolicySettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRpoPolicySettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


