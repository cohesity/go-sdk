/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DnsDelegationZone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DnsDelegationZone{}

// DnsDelegationZone Dns delegation zone of the vlan.
type DnsDelegationZone struct {
	// Dns zone resolved VIPs.
	DnsZoneResolvedVips []string `json:"dnsZoneResolvedVips,omitempty"`
	// VIPs part of dns zone.
	DnsZoneVips []string `json:"dnsZoneVips,omitempty"`
	// Name of dns zone.
	Name string `json:"name"`
}

type _DnsDelegationZone DnsDelegationZone

// NewDnsDelegationZone instantiates a new DnsDelegationZone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDnsDelegationZone(name string) *DnsDelegationZone {
	this := DnsDelegationZone{}
	this.Name = name
	return &this
}

// NewDnsDelegationZoneWithDefaults instantiates a new DnsDelegationZone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDnsDelegationZoneWithDefaults() *DnsDelegationZone {
	this := DnsDelegationZone{}
	return &this
}

// GetDnsZoneResolvedVips returns the DnsZoneResolvedVips field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DnsDelegationZone) GetDnsZoneResolvedVips() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DnsZoneResolvedVips
}

// GetDnsZoneResolvedVipsOk returns a tuple with the DnsZoneResolvedVips field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DnsDelegationZone) GetDnsZoneResolvedVipsOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsZoneResolvedVips) {
		return nil, false
	}
	return o.DnsZoneResolvedVips, true
}

// HasDnsZoneResolvedVips returns a boolean if a field has been set.
func (o *DnsDelegationZone) HasDnsZoneResolvedVips() bool {
	if o != nil && !IsNil(o.DnsZoneResolvedVips) {
		return true
	}

	return false
}

// SetDnsZoneResolvedVips gets a reference to the given []string and assigns it to the DnsZoneResolvedVips field.
func (o *DnsDelegationZone) SetDnsZoneResolvedVips(v []string) {
	o.DnsZoneResolvedVips = v
}

// GetDnsZoneVips returns the DnsZoneVips field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DnsDelegationZone) GetDnsZoneVips() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DnsZoneVips
}

// GetDnsZoneVipsOk returns a tuple with the DnsZoneVips field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DnsDelegationZone) GetDnsZoneVipsOk() ([]string, bool) {
	if o == nil || IsNil(o.DnsZoneVips) {
		return nil, false
	}
	return o.DnsZoneVips, true
}

// HasDnsZoneVips returns a boolean if a field has been set.
func (o *DnsDelegationZone) HasDnsZoneVips() bool {
	if o != nil && !IsNil(o.DnsZoneVips) {
		return true
	}

	return false
}

// SetDnsZoneVips gets a reference to the given []string and assigns it to the DnsZoneVips field.
func (o *DnsDelegationZone) SetDnsZoneVips(v []string) {
	o.DnsZoneVips = v
}

// GetName returns the Name field value
func (o *DnsDelegationZone) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DnsDelegationZone) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DnsDelegationZone) SetName(v string) {
	o.Name = v
}

func (o DnsDelegationZone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DnsDelegationZone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DnsZoneResolvedVips != nil {
		toSerialize["dnsZoneResolvedVips"] = o.DnsZoneResolvedVips
	}
	if o.DnsZoneVips != nil {
		toSerialize["dnsZoneVips"] = o.DnsZoneVips
	}
	toSerialize["name"] = o.Name
	return toSerialize, nil
}

func (o *DnsDelegationZone) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDnsDelegationZone := _DnsDelegationZone{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDnsDelegationZone)

	if err != nil {
		return err
	}

	*o = DnsDelegationZone(varDnsDelegationZone)

	return err
}

type NullableDnsDelegationZone struct {
	value *DnsDelegationZone
	isSet bool
}

func (v NullableDnsDelegationZone) Get() *DnsDelegationZone {
	return v.value
}

func (v *NullableDnsDelegationZone) Set(val *DnsDelegationZone) {
	v.value = val
	v.isSet = true
}

func (v NullableDnsDelegationZone) IsSet() bool {
	return v.isSet
}

func (v *NullableDnsDelegationZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDnsDelegationZone(val *DnsDelegationZone) *NullableDnsDelegationZone {
	return &NullableDnsDelegationZone{value: val, isSet: true}
}

func (v NullableDnsDelegationZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDnsDelegationZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


