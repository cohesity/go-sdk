/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterFreeDisks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterFreeDisks{}

// ClusterFreeDisks Sepcifies the free disks of cluster.
type ClusterFreeDisks struct {
	// Specifies list of free disks of cluster.
	NodeFreeDisks []NodeFreeDisks `json:"nodeFreeDisks"`
}

type _ClusterFreeDisks ClusterFreeDisks

// NewClusterFreeDisks instantiates a new ClusterFreeDisks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterFreeDisks(nodeFreeDisks []NodeFreeDisks) *ClusterFreeDisks {
	this := ClusterFreeDisks{}
	this.NodeFreeDisks = nodeFreeDisks
	return &this
}

// NewClusterFreeDisksWithDefaults instantiates a new ClusterFreeDisks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterFreeDisksWithDefaults() *ClusterFreeDisks {
	this := ClusterFreeDisks{}
	return &this
}

// GetNodeFreeDisks returns the NodeFreeDisks field value
// If the value is explicit nil, the zero value for []NodeFreeDisks will be returned
func (o *ClusterFreeDisks) GetNodeFreeDisks() []NodeFreeDisks {
	if o == nil {
		var ret []NodeFreeDisks
		return ret
	}

	return o.NodeFreeDisks
}

// GetNodeFreeDisksOk returns a tuple with the NodeFreeDisks field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterFreeDisks) GetNodeFreeDisksOk() ([]NodeFreeDisks, bool) {
	if o == nil || IsNil(o.NodeFreeDisks) {
		return nil, false
	}
	return o.NodeFreeDisks, true
}

// SetNodeFreeDisks sets field value
func (o *ClusterFreeDisks) SetNodeFreeDisks(v []NodeFreeDisks) {
	o.NodeFreeDisks = v
}

func (o ClusterFreeDisks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterFreeDisks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeFreeDisks != nil {
		toSerialize["nodeFreeDisks"] = o.NodeFreeDisks
	}
	return toSerialize, nil
}

func (o *ClusterFreeDisks) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"nodeFreeDisks",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterFreeDisks := _ClusterFreeDisks{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterFreeDisks)

	if err != nil {
		return err
	}

	*o = ClusterFreeDisks(varClusterFreeDisks)

	return err
}

type NullableClusterFreeDisks struct {
	value *ClusterFreeDisks
	isSet bool
}

func (v NullableClusterFreeDisks) Get() *ClusterFreeDisks {
	return v.value
}

func (v *NullableClusterFreeDisks) Set(val *ClusterFreeDisks) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterFreeDisks) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterFreeDisks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterFreeDisks(val *ClusterFreeDisks) *NullableClusterFreeDisks {
	return &NullableClusterFreeDisks{value: val, isSet: true}
}

func (v NullableClusterFreeDisks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterFreeDisks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


