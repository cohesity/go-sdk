/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the KubernetesFilterParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesFilterParams{}

// KubernetesFilterParams Specifies the parameters to in/exclude objects (e.g.: volumes). An object satisfying any of these criteria will be included by this filter.
type KubernetesFilterParams struct {
	// Whether to include all the labels or any of them while performing inclusion/exclusion of objects.
	LabelCombinationMethod NullableString `json:"labelCombinationMethod,omitempty"`
	// Array of Object to represent Label that Specify Objects (e.g.: Persistent Volumes and Persistent Volume Claims) to Include or Exclude.It will be a two-dimensional array, where each inner array will consist of a key and value representing labels. Using this two dimensional array of Labels, the Cluster generates a list of items to include in the filter, which are derived from intersections or the union of these labels, as decided by operation parameter.
	LabelVector []KubernetesLabel `json:"labelVector,omitempty"`
	// Array of objects that are to be included.
	Objects []int64 `json:"objects,omitempty"`
}

// NewKubernetesFilterParams instantiates a new KubernetesFilterParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesFilterParams() *KubernetesFilterParams {
	this := KubernetesFilterParams{}
	return &this
}

// NewKubernetesFilterParamsWithDefaults instantiates a new KubernetesFilterParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesFilterParamsWithDefaults() *KubernetesFilterParams {
	this := KubernetesFilterParams{}
	return &this
}

// GetLabelCombinationMethod returns the LabelCombinationMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesFilterParams) GetLabelCombinationMethod() string {
	if o == nil || IsNil(o.LabelCombinationMethod.Get()) {
		var ret string
		return ret
	}
	return *o.LabelCombinationMethod.Get()
}

// GetLabelCombinationMethodOk returns a tuple with the LabelCombinationMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesFilterParams) GetLabelCombinationMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LabelCombinationMethod.Get(), o.LabelCombinationMethod.IsSet()
}

// HasLabelCombinationMethod returns a boolean if a field has been set.
func (o *KubernetesFilterParams) HasLabelCombinationMethod() bool {
	if o != nil && o.LabelCombinationMethod.IsSet() {
		return true
	}

	return false
}

// SetLabelCombinationMethod gets a reference to the given NullableString and assigns it to the LabelCombinationMethod field.
func (o *KubernetesFilterParams) SetLabelCombinationMethod(v string) {
	o.LabelCombinationMethod.Set(&v)
}
// SetLabelCombinationMethodNil sets the value for LabelCombinationMethod to be an explicit nil
func (o *KubernetesFilterParams) SetLabelCombinationMethodNil() {
	o.LabelCombinationMethod.Set(nil)
}

// UnsetLabelCombinationMethod ensures that no value is present for LabelCombinationMethod, not even an explicit nil
func (o *KubernetesFilterParams) UnsetLabelCombinationMethod() {
	o.LabelCombinationMethod.Unset()
}

// GetLabelVector returns the LabelVector field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesFilterParams) GetLabelVector() []KubernetesLabel {
	if o == nil {
		var ret []KubernetesLabel
		return ret
	}
	return o.LabelVector
}

// GetLabelVectorOk returns a tuple with the LabelVector field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesFilterParams) GetLabelVectorOk() ([]KubernetesLabel, bool) {
	if o == nil || IsNil(o.LabelVector) {
		return nil, false
	}
	return o.LabelVector, true
}

// HasLabelVector returns a boolean if a field has been set.
func (o *KubernetesFilterParams) HasLabelVector() bool {
	if o != nil && !IsNil(o.LabelVector) {
		return true
	}

	return false
}

// SetLabelVector gets a reference to the given []KubernetesLabel and assigns it to the LabelVector field.
func (o *KubernetesFilterParams) SetLabelVector(v []KubernetesLabel) {
	o.LabelVector = v
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesFilterParams) GetObjects() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesFilterParams) GetObjectsOk() ([]int64, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *KubernetesFilterParams) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []int64 and assigns it to the Objects field.
func (o *KubernetesFilterParams) SetObjects(v []int64) {
	o.Objects = v
}

func (o KubernetesFilterParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesFilterParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.LabelCombinationMethod.IsSet() {
		toSerialize["labelCombinationMethod"] = o.LabelCombinationMethod.Get()
	}
	if o.LabelVector != nil {
		toSerialize["labelVector"] = o.LabelVector
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	return toSerialize, nil
}

type NullableKubernetesFilterParams struct {
	value *KubernetesFilterParams
	isSet bool
}

func (v NullableKubernetesFilterParams) Get() *KubernetesFilterParams {
	return v.value
}

func (v *NullableKubernetesFilterParams) Set(val *KubernetesFilterParams) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesFilterParams) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesFilterParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesFilterParams(val *KubernetesFilterParams) *NullableKubernetesFilterParams {
	return &NullableKubernetesFilterParams{value: val, isSet: true}
}

func (v NullableKubernetesFilterParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesFilterParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


