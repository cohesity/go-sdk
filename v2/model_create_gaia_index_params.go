/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateGaiaIndexParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateGaiaIndexParams{}

// CreateGaiaIndexParams Specifies the Index documents params.
type CreateGaiaIndexParams struct {
	// Opaque Id passed to emblem service on where to store the generated vector embeddings for these documents
	CollectionId NullableString `json:"collectionId,omitempty"`
	EmblemServiceInfo NullableEmblemServiceInfo `json:"emblemServiceInfo,omitempty"`
	// Job handle for this request.
	JobHandle NullableString `json:"jobHandle,omitempty"`
	// Specifies the number of Bytes.
	MaxDocumentSize NullableInt64 `json:"maxDocumentSize,omitempty"`
	// The objects and their snapshots to index.
	Objects []ObjectInfo `json:"objects"`
}

type _CreateGaiaIndexParams CreateGaiaIndexParams

// NewCreateGaiaIndexParams instantiates a new CreateGaiaIndexParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateGaiaIndexParams(objects []ObjectInfo) *CreateGaiaIndexParams {
	this := CreateGaiaIndexParams{}
	this.Objects = objects
	return &this
}

// NewCreateGaiaIndexParamsWithDefaults instantiates a new CreateGaiaIndexParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateGaiaIndexParamsWithDefaults() *CreateGaiaIndexParams {
	this := CreateGaiaIndexParams{}
	return &this
}

// GetCollectionId returns the CollectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateGaiaIndexParams) GetCollectionId() string {
	if o == nil || IsNil(o.CollectionId.Get()) {
		var ret string
		return ret
	}
	return *o.CollectionId.Get()
}

// GetCollectionIdOk returns a tuple with the CollectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateGaiaIndexParams) GetCollectionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CollectionId.Get(), o.CollectionId.IsSet()
}

// HasCollectionId returns a boolean if a field has been set.
func (o *CreateGaiaIndexParams) HasCollectionId() bool {
	if o != nil && o.CollectionId.IsSet() {
		return true
	}

	return false
}

// SetCollectionId gets a reference to the given NullableString and assigns it to the CollectionId field.
func (o *CreateGaiaIndexParams) SetCollectionId(v string) {
	o.CollectionId.Set(&v)
}
// SetCollectionIdNil sets the value for CollectionId to be an explicit nil
func (o *CreateGaiaIndexParams) SetCollectionIdNil() {
	o.CollectionId.Set(nil)
}

// UnsetCollectionId ensures that no value is present for CollectionId, not even an explicit nil
func (o *CreateGaiaIndexParams) UnsetCollectionId() {
	o.CollectionId.Unset()
}

// GetEmblemServiceInfo returns the EmblemServiceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateGaiaIndexParams) GetEmblemServiceInfo() EmblemServiceInfo {
	if o == nil || IsNil(o.EmblemServiceInfo.Get()) {
		var ret EmblemServiceInfo
		return ret
	}
	return *o.EmblemServiceInfo.Get()
}

// GetEmblemServiceInfoOk returns a tuple with the EmblemServiceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateGaiaIndexParams) GetEmblemServiceInfoOk() (*EmblemServiceInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmblemServiceInfo.Get(), o.EmblemServiceInfo.IsSet()
}

// HasEmblemServiceInfo returns a boolean if a field has been set.
func (o *CreateGaiaIndexParams) HasEmblemServiceInfo() bool {
	if o != nil && o.EmblemServiceInfo.IsSet() {
		return true
	}

	return false
}

// SetEmblemServiceInfo gets a reference to the given NullableEmblemServiceInfo and assigns it to the EmblemServiceInfo field.
func (o *CreateGaiaIndexParams) SetEmblemServiceInfo(v EmblemServiceInfo) {
	o.EmblemServiceInfo.Set(&v)
}
// SetEmblemServiceInfoNil sets the value for EmblemServiceInfo to be an explicit nil
func (o *CreateGaiaIndexParams) SetEmblemServiceInfoNil() {
	o.EmblemServiceInfo.Set(nil)
}

// UnsetEmblemServiceInfo ensures that no value is present for EmblemServiceInfo, not even an explicit nil
func (o *CreateGaiaIndexParams) UnsetEmblemServiceInfo() {
	o.EmblemServiceInfo.Unset()
}

// GetJobHandle returns the JobHandle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateGaiaIndexParams) GetJobHandle() string {
	if o == nil || IsNil(o.JobHandle.Get()) {
		var ret string
		return ret
	}
	return *o.JobHandle.Get()
}

// GetJobHandleOk returns a tuple with the JobHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateGaiaIndexParams) GetJobHandleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobHandle.Get(), o.JobHandle.IsSet()
}

// HasJobHandle returns a boolean if a field has been set.
func (o *CreateGaiaIndexParams) HasJobHandle() bool {
	if o != nil && o.JobHandle.IsSet() {
		return true
	}

	return false
}

// SetJobHandle gets a reference to the given NullableString and assigns it to the JobHandle field.
func (o *CreateGaiaIndexParams) SetJobHandle(v string) {
	o.JobHandle.Set(&v)
}
// SetJobHandleNil sets the value for JobHandle to be an explicit nil
func (o *CreateGaiaIndexParams) SetJobHandleNil() {
	o.JobHandle.Set(nil)
}

// UnsetJobHandle ensures that no value is present for JobHandle, not even an explicit nil
func (o *CreateGaiaIndexParams) UnsetJobHandle() {
	o.JobHandle.Unset()
}

// GetMaxDocumentSize returns the MaxDocumentSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateGaiaIndexParams) GetMaxDocumentSize() int64 {
	if o == nil || IsNil(o.MaxDocumentSize.Get()) {
		var ret int64
		return ret
	}
	return *o.MaxDocumentSize.Get()
}

// GetMaxDocumentSizeOk returns a tuple with the MaxDocumentSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateGaiaIndexParams) GetMaxDocumentSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxDocumentSize.Get(), o.MaxDocumentSize.IsSet()
}

// HasMaxDocumentSize returns a boolean if a field has been set.
func (o *CreateGaiaIndexParams) HasMaxDocumentSize() bool {
	if o != nil && o.MaxDocumentSize.IsSet() {
		return true
	}

	return false
}

// SetMaxDocumentSize gets a reference to the given NullableInt64 and assigns it to the MaxDocumentSize field.
func (o *CreateGaiaIndexParams) SetMaxDocumentSize(v int64) {
	o.MaxDocumentSize.Set(&v)
}
// SetMaxDocumentSizeNil sets the value for MaxDocumentSize to be an explicit nil
func (o *CreateGaiaIndexParams) SetMaxDocumentSizeNil() {
	o.MaxDocumentSize.Set(nil)
}

// UnsetMaxDocumentSize ensures that no value is present for MaxDocumentSize, not even an explicit nil
func (o *CreateGaiaIndexParams) UnsetMaxDocumentSize() {
	o.MaxDocumentSize.Unset()
}

// GetObjects returns the Objects field value
// If the value is explicit nil, the zero value for []ObjectInfo will be returned
func (o *CreateGaiaIndexParams) GetObjects() []ObjectInfo {
	if o == nil {
		var ret []ObjectInfo
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateGaiaIndexParams) GetObjectsOk() ([]ObjectInfo, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// SetObjects sets field value
func (o *CreateGaiaIndexParams) SetObjects(v []ObjectInfo) {
	o.Objects = v
}

func (o CreateGaiaIndexParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateGaiaIndexParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CollectionId.IsSet() {
		toSerialize["collectionId"] = o.CollectionId.Get()
	}
	if o.EmblemServiceInfo.IsSet() {
		toSerialize["emblemServiceInfo"] = o.EmblemServiceInfo.Get()
	}
	if o.JobHandle.IsSet() {
		toSerialize["jobHandle"] = o.JobHandle.Get()
	}
	if o.MaxDocumentSize.IsSet() {
		toSerialize["maxDocumentSize"] = o.MaxDocumentSize.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	return toSerialize, nil
}

func (o *CreateGaiaIndexParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateGaiaIndexParams := _CreateGaiaIndexParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateGaiaIndexParams)

	if err != nil {
		return err
	}

	*o = CreateGaiaIndexParams(varCreateGaiaIndexParams)

	return err
}

type NullableCreateGaiaIndexParams struct {
	value *CreateGaiaIndexParams
	isSet bool
}

func (v NullableCreateGaiaIndexParams) Get() *CreateGaiaIndexParams {
	return v.value
}

func (v *NullableCreateGaiaIndexParams) Set(val *CreateGaiaIndexParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateGaiaIndexParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateGaiaIndexParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateGaiaIndexParams(val *CreateGaiaIndexParams) *NullableCreateGaiaIndexParams {
	return &NullableCreateGaiaIndexParams{value: val, isSet: true}
}

func (v NullableCreateGaiaIndexParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateGaiaIndexParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


