/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverVmwareVmVCenterSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverVmwareVmVCenterSourceConfig{}

// RecoverVmwareVmVCenterSourceConfig Specifies the new destination Source configuration where the VMs will be recovered for vCenter sources.
type RecoverVmwareVmVCenterSourceConfig struct {
	// Specifies the datastore objects where the object's files should be recovered to.
	Datastores []RecoveryObjectIdentifier `json:"datastores"`
	NetworkConfig NullableRecoverVmwareVAppVCDSourceConfigNetworkConfig `json:"networkConfig,omitempty"`
	ResourcePool NullableRecoverVmwareVmEsxiSourceConfigResourcePool `json:"resourcePool"`
	Source NullableRecoverAcropolisVmNewSourceConfigSource `json:"source"`
	VmFolder NullableRecoverVmwareVmEsxiSourceConfigVmFolder `json:"vmFolder,omitempty"`
}

type _RecoverVmwareVmVCenterSourceConfig RecoverVmwareVmVCenterSourceConfig

// NewRecoverVmwareVmVCenterSourceConfig instantiates a new RecoverVmwareVmVCenterSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVmwareVmVCenterSourceConfig(datastores []RecoveryObjectIdentifier, resourcePool NullableRecoverVmwareVmEsxiSourceConfigResourcePool, source NullableRecoverAcropolisVmNewSourceConfigSource) *RecoverVmwareVmVCenterSourceConfig {
	this := RecoverVmwareVmVCenterSourceConfig{}
	this.Datastores = datastores
	this.ResourcePool = resourcePool
	this.Source = source
	return &this
}

// NewRecoverVmwareVmVCenterSourceConfigWithDefaults instantiates a new RecoverVmwareVmVCenterSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVmwareVmVCenterSourceConfigWithDefaults() *RecoverVmwareVmVCenterSourceConfig {
	this := RecoverVmwareVmVCenterSourceConfig{}
	return &this
}

// GetDatastores returns the Datastores field value
// If the value is explicit nil, the zero value for []RecoveryObjectIdentifier will be returned
func (o *RecoverVmwareVmVCenterSourceConfig) GetDatastores() []RecoveryObjectIdentifier {
	if o == nil {
		var ret []RecoveryObjectIdentifier
		return ret
	}

	return o.Datastores
}

// GetDatastoresOk returns a tuple with the Datastores field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmVCenterSourceConfig) GetDatastoresOk() ([]RecoveryObjectIdentifier, bool) {
	if o == nil || IsNil(o.Datastores) {
		return nil, false
	}
	return o.Datastores, true
}

// SetDatastores sets field value
func (o *RecoverVmwareVmVCenterSourceConfig) SetDatastores(v []RecoveryObjectIdentifier) {
	o.Datastores = v
}

// GetNetworkConfig returns the NetworkConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmVCenterSourceConfig) GetNetworkConfig() RecoverVmwareVAppVCDSourceConfigNetworkConfig {
	if o == nil || IsNil(o.NetworkConfig.Get()) {
		var ret RecoverVmwareVAppVCDSourceConfigNetworkConfig
		return ret
	}
	return *o.NetworkConfig.Get()
}

// GetNetworkConfigOk returns a tuple with the NetworkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmVCenterSourceConfig) GetNetworkConfigOk() (*RecoverVmwareVAppVCDSourceConfigNetworkConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkConfig.Get(), o.NetworkConfig.IsSet()
}

// HasNetworkConfig returns a boolean if a field has been set.
func (o *RecoverVmwareVmVCenterSourceConfig) HasNetworkConfig() bool {
	if o != nil && o.NetworkConfig.IsSet() {
		return true
	}

	return false
}

// SetNetworkConfig gets a reference to the given NullableRecoverVmwareVAppVCDSourceConfigNetworkConfig and assigns it to the NetworkConfig field.
func (o *RecoverVmwareVmVCenterSourceConfig) SetNetworkConfig(v RecoverVmwareVAppVCDSourceConfigNetworkConfig) {
	o.NetworkConfig.Set(&v)
}
// SetNetworkConfigNil sets the value for NetworkConfig to be an explicit nil
func (o *RecoverVmwareVmVCenterSourceConfig) SetNetworkConfigNil() {
	o.NetworkConfig.Set(nil)
}

// UnsetNetworkConfig ensures that no value is present for NetworkConfig, not even an explicit nil
func (o *RecoverVmwareVmVCenterSourceConfig) UnsetNetworkConfig() {
	o.NetworkConfig.Unset()
}

// GetResourcePool returns the ResourcePool field value
// If the value is explicit nil, the zero value for RecoverVmwareVmEsxiSourceConfigResourcePool will be returned
func (o *RecoverVmwareVmVCenterSourceConfig) GetResourcePool() RecoverVmwareVmEsxiSourceConfigResourcePool {
	if o == nil || o.ResourcePool.Get() == nil {
		var ret RecoverVmwareVmEsxiSourceConfigResourcePool
		return ret
	}

	return *o.ResourcePool.Get()
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmVCenterSourceConfig) GetResourcePoolOk() (*RecoverVmwareVmEsxiSourceConfigResourcePool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourcePool.Get(), o.ResourcePool.IsSet()
}

// SetResourcePool sets field value
func (o *RecoverVmwareVmVCenterSourceConfig) SetResourcePool(v RecoverVmwareVmEsxiSourceConfigResourcePool) {
	o.ResourcePool.Set(&v)
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoverAcropolisVmNewSourceConfigSource will be returned
func (o *RecoverVmwareVmVCenterSourceConfig) GetSource() RecoverAcropolisVmNewSourceConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret RecoverAcropolisVmNewSourceConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmVCenterSourceConfig) GetSourceOk() (*RecoverAcropolisVmNewSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *RecoverVmwareVmVCenterSourceConfig) SetSource(v RecoverAcropolisVmNewSourceConfigSource) {
	o.Source.Set(&v)
}

// GetVmFolder returns the VmFolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVmVCenterSourceConfig) GetVmFolder() RecoverVmwareVmEsxiSourceConfigVmFolder {
	if o == nil || IsNil(o.VmFolder.Get()) {
		var ret RecoverVmwareVmEsxiSourceConfigVmFolder
		return ret
	}
	return *o.VmFolder.Get()
}

// GetVmFolderOk returns a tuple with the VmFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVmVCenterSourceConfig) GetVmFolderOk() (*RecoverVmwareVmEsxiSourceConfigVmFolder, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmFolder.Get(), o.VmFolder.IsSet()
}

// HasVmFolder returns a boolean if a field has been set.
func (o *RecoverVmwareVmVCenterSourceConfig) HasVmFolder() bool {
	if o != nil && o.VmFolder.IsSet() {
		return true
	}

	return false
}

// SetVmFolder gets a reference to the given NullableRecoverVmwareVmEsxiSourceConfigVmFolder and assigns it to the VmFolder field.
func (o *RecoverVmwareVmVCenterSourceConfig) SetVmFolder(v RecoverVmwareVmEsxiSourceConfigVmFolder) {
	o.VmFolder.Set(&v)
}
// SetVmFolderNil sets the value for VmFolder to be an explicit nil
func (o *RecoverVmwareVmVCenterSourceConfig) SetVmFolderNil() {
	o.VmFolder.Set(nil)
}

// UnsetVmFolder ensures that no value is present for VmFolder, not even an explicit nil
func (o *RecoverVmwareVmVCenterSourceConfig) UnsetVmFolder() {
	o.VmFolder.Unset()
}

func (o RecoverVmwareVmVCenterSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverVmwareVmVCenterSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Datastores != nil {
		toSerialize["datastores"] = o.Datastores
	}
	if o.NetworkConfig.IsSet() {
		toSerialize["networkConfig"] = o.NetworkConfig.Get()
	}
	toSerialize["resourcePool"] = o.ResourcePool.Get()
	toSerialize["source"] = o.Source.Get()
	if o.VmFolder.IsSet() {
		toSerialize["vmFolder"] = o.VmFolder.Get()
	}
	return toSerialize, nil
}

func (o *RecoverVmwareVmVCenterSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"datastores",
		"resourcePool",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverVmwareVmVCenterSourceConfig := _RecoverVmwareVmVCenterSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverVmwareVmVCenterSourceConfig)

	if err != nil {
		return err
	}

	*o = RecoverVmwareVmVCenterSourceConfig(varRecoverVmwareVmVCenterSourceConfig)

	return err
}

type NullableRecoverVmwareVmVCenterSourceConfig struct {
	value *RecoverVmwareVmVCenterSourceConfig
	isSet bool
}

func (v NullableRecoverVmwareVmVCenterSourceConfig) Get() *RecoverVmwareVmVCenterSourceConfig {
	return v.value
}

func (v *NullableRecoverVmwareVmVCenterSourceConfig) Set(val *RecoverVmwareVmVCenterSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVmwareVmVCenterSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVmwareVmVCenterSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVmwareVmVCenterSourceConfig(val *RecoverVmwareVmVCenterSourceConfig) *NullableRecoverVmwareVmVCenterSourceConfig {
	return &NullableRecoverVmwareVmVCenterSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverVmwareVmVCenterSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVmwareVmVCenterSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


