/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CommonDataAccessSessionInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonDataAccessSessionInformation{}

// CommonDataAccessSessionInformation Common Data Access Session Information.
type CommonDataAccessSessionInformation struct {
	// Specifies the time at which the session was created.
	CreationTimeUsecs *int64 `json:"creationTimeUsecs,omitempty"`
	// Specifies the list of data worker endpoints. For load balancing client can make rpc call to different data worker for different nodes. Client should make the rpc call to same worker for data for a given node.
	DataWorkerEndpoints []WorkerEndpoint `json:"dataWorkerEndpoints,omitempty"`
	// Specifies the time at which the session was last modified.
	LastModificationTimeUsecs *int64 `json:"lastModificationTimeUsecs,omitempty"`
	// Specifies the list of metadata worker endpoints. In case of more than one metadata point client can contact any metadata worker.
	MetadataWorkerEndpoints []WorkerEndpoint `json:"metadataWorkerEndpoints,omitempty"`
	// The name of the data access session.
	Name NullableString `json:"name,omitempty"`
	// Specifies the id of the data access session.
	SessionId NullableString `json:"sessionId,omitempty"`
	// Specifies the status of the Data Access Session. Machine status such as Admitted/WaitingForArchiveDownload/ WaitingForResource/SetupInProgress/Ready/Finished
	Status *string `json:"status,omitempty"`
}

// NewCommonDataAccessSessionInformation instantiates a new CommonDataAccessSessionInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonDataAccessSessionInformation() *CommonDataAccessSessionInformation {
	this := CommonDataAccessSessionInformation{}
	return &this
}

// NewCommonDataAccessSessionInformationWithDefaults instantiates a new CommonDataAccessSessionInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonDataAccessSessionInformationWithDefaults() *CommonDataAccessSessionInformation {
	this := CommonDataAccessSessionInformation{}
	return &this
}

// GetCreationTimeUsecs returns the CreationTimeUsecs field value if set, zero value otherwise.
func (o *CommonDataAccessSessionInformation) GetCreationTimeUsecs() int64 {
	if o == nil || IsNil(o.CreationTimeUsecs) {
		var ret int64
		return ret
	}
	return *o.CreationTimeUsecs
}

// GetCreationTimeUsecsOk returns a tuple with the CreationTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonDataAccessSessionInformation) GetCreationTimeUsecsOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTimeUsecs) {
		return nil, false
	}
	return o.CreationTimeUsecs, true
}

// HasCreationTimeUsecs returns a boolean if a field has been set.
func (o *CommonDataAccessSessionInformation) HasCreationTimeUsecs() bool {
	if o != nil && !IsNil(o.CreationTimeUsecs) {
		return true
	}

	return false
}

// SetCreationTimeUsecs gets a reference to the given int64 and assigns it to the CreationTimeUsecs field.
func (o *CommonDataAccessSessionInformation) SetCreationTimeUsecs(v int64) {
	o.CreationTimeUsecs = &v
}

// GetDataWorkerEndpoints returns the DataWorkerEndpoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonDataAccessSessionInformation) GetDataWorkerEndpoints() []WorkerEndpoint {
	if o == nil {
		var ret []WorkerEndpoint
		return ret
	}
	return o.DataWorkerEndpoints
}

// GetDataWorkerEndpointsOk returns a tuple with the DataWorkerEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDataAccessSessionInformation) GetDataWorkerEndpointsOk() ([]WorkerEndpoint, bool) {
	if o == nil || IsNil(o.DataWorkerEndpoints) {
		return nil, false
	}
	return o.DataWorkerEndpoints, true
}

// HasDataWorkerEndpoints returns a boolean if a field has been set.
func (o *CommonDataAccessSessionInformation) HasDataWorkerEndpoints() bool {
	if o != nil && !IsNil(o.DataWorkerEndpoints) {
		return true
	}

	return false
}

// SetDataWorkerEndpoints gets a reference to the given []WorkerEndpoint and assigns it to the DataWorkerEndpoints field.
func (o *CommonDataAccessSessionInformation) SetDataWorkerEndpoints(v []WorkerEndpoint) {
	o.DataWorkerEndpoints = v
}

// GetLastModificationTimeUsecs returns the LastModificationTimeUsecs field value if set, zero value otherwise.
func (o *CommonDataAccessSessionInformation) GetLastModificationTimeUsecs() int64 {
	if o == nil || IsNil(o.LastModificationTimeUsecs) {
		var ret int64
		return ret
	}
	return *o.LastModificationTimeUsecs
}

// GetLastModificationTimeUsecsOk returns a tuple with the LastModificationTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonDataAccessSessionInformation) GetLastModificationTimeUsecsOk() (*int64, bool) {
	if o == nil || IsNil(o.LastModificationTimeUsecs) {
		return nil, false
	}
	return o.LastModificationTimeUsecs, true
}

// HasLastModificationTimeUsecs returns a boolean if a field has been set.
func (o *CommonDataAccessSessionInformation) HasLastModificationTimeUsecs() bool {
	if o != nil && !IsNil(o.LastModificationTimeUsecs) {
		return true
	}

	return false
}

// SetLastModificationTimeUsecs gets a reference to the given int64 and assigns it to the LastModificationTimeUsecs field.
func (o *CommonDataAccessSessionInformation) SetLastModificationTimeUsecs(v int64) {
	o.LastModificationTimeUsecs = &v
}

// GetMetadataWorkerEndpoints returns the MetadataWorkerEndpoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonDataAccessSessionInformation) GetMetadataWorkerEndpoints() []WorkerEndpoint {
	if o == nil {
		var ret []WorkerEndpoint
		return ret
	}
	return o.MetadataWorkerEndpoints
}

// GetMetadataWorkerEndpointsOk returns a tuple with the MetadataWorkerEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDataAccessSessionInformation) GetMetadataWorkerEndpointsOk() ([]WorkerEndpoint, bool) {
	if o == nil || IsNil(o.MetadataWorkerEndpoints) {
		return nil, false
	}
	return o.MetadataWorkerEndpoints, true
}

// HasMetadataWorkerEndpoints returns a boolean if a field has been set.
func (o *CommonDataAccessSessionInformation) HasMetadataWorkerEndpoints() bool {
	if o != nil && !IsNil(o.MetadataWorkerEndpoints) {
		return true
	}

	return false
}

// SetMetadataWorkerEndpoints gets a reference to the given []WorkerEndpoint and assigns it to the MetadataWorkerEndpoints field.
func (o *CommonDataAccessSessionInformation) SetMetadataWorkerEndpoints(v []WorkerEndpoint) {
	o.MetadataWorkerEndpoints = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonDataAccessSessionInformation) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDataAccessSessionInformation) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CommonDataAccessSessionInformation) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CommonDataAccessSessionInformation) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CommonDataAccessSessionInformation) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CommonDataAccessSessionInformation) UnsetName() {
	o.Name.Unset()
}

// GetSessionId returns the SessionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonDataAccessSessionInformation) GetSessionId() string {
	if o == nil || IsNil(o.SessionId.Get()) {
		var ret string
		return ret
	}
	return *o.SessionId.Get()
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDataAccessSessionInformation) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SessionId.Get(), o.SessionId.IsSet()
}

// HasSessionId returns a boolean if a field has been set.
func (o *CommonDataAccessSessionInformation) HasSessionId() bool {
	if o != nil && o.SessionId.IsSet() {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given NullableString and assigns it to the SessionId field.
func (o *CommonDataAccessSessionInformation) SetSessionId(v string) {
	o.SessionId.Set(&v)
}
// SetSessionIdNil sets the value for SessionId to be an explicit nil
func (o *CommonDataAccessSessionInformation) SetSessionIdNil() {
	o.SessionId.Set(nil)
}

// UnsetSessionId ensures that no value is present for SessionId, not even an explicit nil
func (o *CommonDataAccessSessionInformation) UnsetSessionId() {
	o.SessionId.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *CommonDataAccessSessionInformation) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonDataAccessSessionInformation) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *CommonDataAccessSessionInformation) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *CommonDataAccessSessionInformation) SetStatus(v string) {
	o.Status = &v
}

func (o CommonDataAccessSessionInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonDataAccessSessionInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreationTimeUsecs) {
		toSerialize["creationTimeUsecs"] = o.CreationTimeUsecs
	}
	if o.DataWorkerEndpoints != nil {
		toSerialize["dataWorkerEndpoints"] = o.DataWorkerEndpoints
	}
	if !IsNil(o.LastModificationTimeUsecs) {
		toSerialize["lastModificationTimeUsecs"] = o.LastModificationTimeUsecs
	}
	if o.MetadataWorkerEndpoints != nil {
		toSerialize["metadataWorkerEndpoints"] = o.MetadataWorkerEndpoints
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.SessionId.IsSet() {
		toSerialize["sessionId"] = o.SessionId.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableCommonDataAccessSessionInformation struct {
	value *CommonDataAccessSessionInformation
	isSet bool
}

func (v NullableCommonDataAccessSessionInformation) Get() *CommonDataAccessSessionInformation {
	return v.value
}

func (v *NullableCommonDataAccessSessionInformation) Set(val *CommonDataAccessSessionInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonDataAccessSessionInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonDataAccessSessionInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonDataAccessSessionInformation(val *CommonDataAccessSessionInformation) *NullableCommonDataAccessSessionInformation {
	return &NullableCommonDataAccessSessionInformation{value: val, isSet: true}
}

func (v NullableCommonDataAccessSessionInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonDataAccessSessionInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


