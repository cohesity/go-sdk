/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ChassisRackConfigParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChassisRackConfigParams{}

// ChassisRackConfigParams Specifies the chassis serial to rack id mapping configuration.
type ChassisRackConfigParams struct {
	// Specifies the chassis serial.
	ChassisSerial *string `json:"chassisSerial,omitempty"`
	// Specifies the rack id.
	RackId *int64 `json:"rackId,omitempty"`
}

// NewChassisRackConfigParams instantiates a new ChassisRackConfigParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChassisRackConfigParams() *ChassisRackConfigParams {
	this := ChassisRackConfigParams{}
	return &this
}

// NewChassisRackConfigParamsWithDefaults instantiates a new ChassisRackConfigParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChassisRackConfigParamsWithDefaults() *ChassisRackConfigParams {
	this := ChassisRackConfigParams{}
	return &this
}

// GetChassisSerial returns the ChassisSerial field value if set, zero value otherwise.
func (o *ChassisRackConfigParams) GetChassisSerial() string {
	if o == nil || IsNil(o.ChassisSerial) {
		var ret string
		return ret
	}
	return *o.ChassisSerial
}

// GetChassisSerialOk returns a tuple with the ChassisSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChassisRackConfigParams) GetChassisSerialOk() (*string, bool) {
	if o == nil || IsNil(o.ChassisSerial) {
		return nil, false
	}
	return o.ChassisSerial, true
}

// HasChassisSerial returns a boolean if a field has been set.
func (o *ChassisRackConfigParams) HasChassisSerial() bool {
	if o != nil && !IsNil(o.ChassisSerial) {
		return true
	}

	return false
}

// SetChassisSerial gets a reference to the given string and assigns it to the ChassisSerial field.
func (o *ChassisRackConfigParams) SetChassisSerial(v string) {
	o.ChassisSerial = &v
}

// GetRackId returns the RackId field value if set, zero value otherwise.
func (o *ChassisRackConfigParams) GetRackId() int64 {
	if o == nil || IsNil(o.RackId) {
		var ret int64
		return ret
	}
	return *o.RackId
}

// GetRackIdOk returns a tuple with the RackId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChassisRackConfigParams) GetRackIdOk() (*int64, bool) {
	if o == nil || IsNil(o.RackId) {
		return nil, false
	}
	return o.RackId, true
}

// HasRackId returns a boolean if a field has been set.
func (o *ChassisRackConfigParams) HasRackId() bool {
	if o != nil && !IsNil(o.RackId) {
		return true
	}

	return false
}

// SetRackId gets a reference to the given int64 and assigns it to the RackId field.
func (o *ChassisRackConfigParams) SetRackId(v int64) {
	o.RackId = &v
}

func (o ChassisRackConfigParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChassisRackConfigParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChassisSerial) {
		toSerialize["chassisSerial"] = o.ChassisSerial
	}
	if !IsNil(o.RackId) {
		toSerialize["rackId"] = o.RackId
	}
	return toSerialize, nil
}

type NullableChassisRackConfigParams struct {
	value *ChassisRackConfigParams
	isSet bool
}

func (v NullableChassisRackConfigParams) Get() *ChassisRackConfigParams {
	return v.value
}

func (v *NullableChassisRackConfigParams) Set(val *ChassisRackConfigParams) {
	v.value = val
	v.isSet = true
}

func (v NullableChassisRackConfigParams) IsSet() bool {
	return v.isSet
}

func (v *NullableChassisRackConfigParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChassisRackConfigParams(val *ChassisRackConfigParams) *NullableChassisRackConfigParams {
	return &NullableChassisRackConfigParams{value: val, isSet: true}
}

func (v NullableChassisRackConfigParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChassisRackConfigParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


