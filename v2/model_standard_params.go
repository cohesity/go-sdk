/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StandardParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StandardParams{}

// StandardParams Specifies the parameters to register a commercial AWS
type StandardParams struct {
	// Specifies the Authentication method(IamArn/IamRole) used by api
	AuthMethodType NullableString `json:"authMethodType"`
	IamRoleAwsCredentials *IamRoleAwsCredentials `json:"iamRoleAwsCredentials,omitempty"`
	IamUserAwsCredentials *IamUserAwsCredentials `json:"iamUserAwsCredentials,omitempty"`
}

type _StandardParams StandardParams

// NewStandardParams instantiates a new StandardParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStandardParams(authMethodType NullableString) *StandardParams {
	this := StandardParams{}
	this.AuthMethodType = authMethodType
	return &this
}

// NewStandardParamsWithDefaults instantiates a new StandardParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStandardParamsWithDefaults() *StandardParams {
	this := StandardParams{}
	return &this
}

// GetAuthMethodType returns the AuthMethodType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *StandardParams) GetAuthMethodType() string {
	if o == nil || o.AuthMethodType.Get() == nil {
		var ret string
		return ret
	}

	return *o.AuthMethodType.Get()
}

// GetAuthMethodTypeOk returns a tuple with the AuthMethodType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StandardParams) GetAuthMethodTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AuthMethodType.Get(), o.AuthMethodType.IsSet()
}

// SetAuthMethodType sets field value
func (o *StandardParams) SetAuthMethodType(v string) {
	o.AuthMethodType.Set(&v)
}

// GetIamRoleAwsCredentials returns the IamRoleAwsCredentials field value if set, zero value otherwise.
func (o *StandardParams) GetIamRoleAwsCredentials() IamRoleAwsCredentials {
	if o == nil || IsNil(o.IamRoleAwsCredentials) {
		var ret IamRoleAwsCredentials
		return ret
	}
	return *o.IamRoleAwsCredentials
}

// GetIamRoleAwsCredentialsOk returns a tuple with the IamRoleAwsCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardParams) GetIamRoleAwsCredentialsOk() (*IamRoleAwsCredentials, bool) {
	if o == nil || IsNil(o.IamRoleAwsCredentials) {
		return nil, false
	}
	return o.IamRoleAwsCredentials, true
}

// HasIamRoleAwsCredentials returns a boolean if a field has been set.
func (o *StandardParams) HasIamRoleAwsCredentials() bool {
	if o != nil && !IsNil(o.IamRoleAwsCredentials) {
		return true
	}

	return false
}

// SetIamRoleAwsCredentials gets a reference to the given IamRoleAwsCredentials and assigns it to the IamRoleAwsCredentials field.
func (o *StandardParams) SetIamRoleAwsCredentials(v IamRoleAwsCredentials) {
	o.IamRoleAwsCredentials = &v
}

// GetIamUserAwsCredentials returns the IamUserAwsCredentials field value if set, zero value otherwise.
func (o *StandardParams) GetIamUserAwsCredentials() IamUserAwsCredentials {
	if o == nil || IsNil(o.IamUserAwsCredentials) {
		var ret IamUserAwsCredentials
		return ret
	}
	return *o.IamUserAwsCredentials
}

// GetIamUserAwsCredentialsOk returns a tuple with the IamUserAwsCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StandardParams) GetIamUserAwsCredentialsOk() (*IamUserAwsCredentials, bool) {
	if o == nil || IsNil(o.IamUserAwsCredentials) {
		return nil, false
	}
	return o.IamUserAwsCredentials, true
}

// HasIamUserAwsCredentials returns a boolean if a field has been set.
func (o *StandardParams) HasIamUserAwsCredentials() bool {
	if o != nil && !IsNil(o.IamUserAwsCredentials) {
		return true
	}

	return false
}

// SetIamUserAwsCredentials gets a reference to the given IamUserAwsCredentials and assigns it to the IamUserAwsCredentials field.
func (o *StandardParams) SetIamUserAwsCredentials(v IamUserAwsCredentials) {
	o.IamUserAwsCredentials = &v
}

func (o StandardParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StandardParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["authMethodType"] = o.AuthMethodType.Get()
	if !IsNil(o.IamRoleAwsCredentials) {
		toSerialize["iamRoleAwsCredentials"] = o.IamRoleAwsCredentials
	}
	if !IsNil(o.IamUserAwsCredentials) {
		toSerialize["iamUserAwsCredentials"] = o.IamUserAwsCredentials
	}
	return toSerialize, nil
}

func (o *StandardParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"authMethodType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStandardParams := _StandardParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStandardParams)

	if err != nil {
		return err
	}

	*o = StandardParams(varStandardParams)

	return err
}

type NullableStandardParams struct {
	value *StandardParams
	isSet bool
}

func (v NullableStandardParams) Get() *StandardParams {
	return v.value
}

func (v *NullableStandardParams) Set(val *StandardParams) {
	v.value = val
	v.isSet = true
}

func (v NullableStandardParams) IsSet() bool {
	return v.isSet
}

func (v *NullableStandardParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStandardParams(val *StandardParams) *NullableStandardParams {
	return &NullableStandardParams{value: val, isSet: true}
}

func (v NullableStandardParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStandardParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


