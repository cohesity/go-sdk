/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"fmt"
)

// AllowedFailoverOperation Specifies the allowed failover operation.
type AllowedFailoverOperation string

// List of AllowedFailoverOperation
const (
	UNKNOWN AllowedFailoverOperation = "Unknown"
	UNPLANNED AllowedFailoverOperation = "Unplanned"
	PREPARE AllowedFailoverOperation = "Prepare"
	FINALIZE AllowedFailoverOperation = "Finalize"
	CANCEL AllowedFailoverOperation = "Cancel"
)

// All allowed values of AllowedFailoverOperation enum
var AllowedAllowedFailoverOperationEnumValues = []AllowedFailoverOperation{
	"Unknown",
	"Unplanned",
	"Prepare",
	"Finalize",
	"Cancel",
}

func (v *AllowedFailoverOperation) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AllowedFailoverOperation(value)
	for _, existing := range AllowedAllowedFailoverOperationEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AllowedFailoverOperation", value)
}

// NewAllowedFailoverOperationFromValue returns a pointer to a valid AllowedFailoverOperation
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAllowedFailoverOperationFromValue(v string) (*AllowedFailoverOperation, error) {
	ev := AllowedFailoverOperation(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AllowedFailoverOperation: valid values are %v", v, AllowedAllowedFailoverOperationEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AllowedFailoverOperation) IsValid() bool {
	for _, existing := range AllowedAllowedFailoverOperationEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AllowedFailoverOperation value
func (v AllowedFailoverOperation) Ptr() *AllowedFailoverOperation {
	return &v
}

type NullableAllowedFailoverOperation struct {
	value *AllowedFailoverOperation
	isSet bool
}

func (v NullableAllowedFailoverOperation) Get() *AllowedFailoverOperation {
	return v.value
}

func (v *NullableAllowedFailoverOperation) Set(val *AllowedFailoverOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableAllowedFailoverOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableAllowedFailoverOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllowedFailoverOperation(val *AllowedFailoverOperation) *NullableAllowedFailoverOperation {
	return &NullableAllowedFailoverOperation{value: val, isSet: true}
}

func (v NullableAllowedFailoverOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllowedFailoverOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

