/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KmsConfigurationCreateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KmsConfigurationCreateParams{}

// KmsConfigurationCreateParams Parameters to add key management system(KMS) on the cluster.
type KmsConfigurationCreateParams struct {
	// Ids of external targets used to assign the KMS for encryption. Once an external KMS (AWS KMS or KIMP KMS) is assigned to an external target, it cannot be changed.
	ExternalTargetIds []int64 `json:"externalTargetIds,omitempty"`
	KmipKmsParams *KmipKmsConfiguration `json:"kmipKmsParams,omitempty"`
	// Name of the KMS.
	Name string `json:"name"`
	// Ids of storage domains used to assign the KMS for encryption. Once an external KMS (AWS KMS or KIMP KMS) is assigned to a storage domain, it cannot be changed.
	StorageDomainIds []int64 `json:"storageDomainIds,omitempty"`
	AwsKmsParams *AwsKmsConfiguration `json:"awsKmsParams,omitempty"`
	// Specifies the ownership context of the kms config. 'Local' indicates this is used for regular archival. 'FortKnox' indicates this is used for FortKnox only.
	OwnershipContext NullableString `json:"ownershipContext,omitempty"`
	// Type of KMS. 'InternalKms' indicates the internal cluster KMS. 'AwsKms' indicates AWS KMS. 'KmipKms' indicates any KMIP compliant KMS.
	Type string `json:"type"`
	// Specifies the usage type of the kms config. 'kArchival' indicates this is used for regular archival. 'kRpaasArchival' indicates this is used for RPaaS only.
	UsageType NullableString `json:"usageType,omitempty"`
}

type _KmsConfigurationCreateParams KmsConfigurationCreateParams

// NewKmsConfigurationCreateParams instantiates a new KmsConfigurationCreateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKmsConfigurationCreateParams(name string, type_ string) *KmsConfigurationCreateParams {
	this := KmsConfigurationCreateParams{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewKmsConfigurationCreateParamsWithDefaults instantiates a new KmsConfigurationCreateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKmsConfigurationCreateParamsWithDefaults() *KmsConfigurationCreateParams {
	this := KmsConfigurationCreateParams{}
	return &this
}

// GetExternalTargetIds returns the ExternalTargetIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KmsConfigurationCreateParams) GetExternalTargetIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.ExternalTargetIds
}

// GetExternalTargetIdsOk returns a tuple with the ExternalTargetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KmsConfigurationCreateParams) GetExternalTargetIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.ExternalTargetIds) {
		return nil, false
	}
	return o.ExternalTargetIds, true
}

// HasExternalTargetIds returns a boolean if a field has been set.
func (o *KmsConfigurationCreateParams) HasExternalTargetIds() bool {
	if o != nil && !IsNil(o.ExternalTargetIds) {
		return true
	}

	return false
}

// SetExternalTargetIds gets a reference to the given []int64 and assigns it to the ExternalTargetIds field.
func (o *KmsConfigurationCreateParams) SetExternalTargetIds(v []int64) {
	o.ExternalTargetIds = v
}

// GetKmipKmsParams returns the KmipKmsParams field value if set, zero value otherwise.
func (o *KmsConfigurationCreateParams) GetKmipKmsParams() KmipKmsConfiguration {
	if o == nil || IsNil(o.KmipKmsParams) {
		var ret KmipKmsConfiguration
		return ret
	}
	return *o.KmipKmsParams
}

// GetKmipKmsParamsOk returns a tuple with the KmipKmsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KmsConfigurationCreateParams) GetKmipKmsParamsOk() (*KmipKmsConfiguration, bool) {
	if o == nil || IsNil(o.KmipKmsParams) {
		return nil, false
	}
	return o.KmipKmsParams, true
}

// HasKmipKmsParams returns a boolean if a field has been set.
func (o *KmsConfigurationCreateParams) HasKmipKmsParams() bool {
	if o != nil && !IsNil(o.KmipKmsParams) {
		return true
	}

	return false
}

// SetKmipKmsParams gets a reference to the given KmipKmsConfiguration and assigns it to the KmipKmsParams field.
func (o *KmsConfigurationCreateParams) SetKmipKmsParams(v KmipKmsConfiguration) {
	o.KmipKmsParams = &v
}

// GetName returns the Name field value
func (o *KmsConfigurationCreateParams) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *KmsConfigurationCreateParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *KmsConfigurationCreateParams) SetName(v string) {
	o.Name = v
}

// GetStorageDomainIds returns the StorageDomainIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KmsConfigurationCreateParams) GetStorageDomainIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.StorageDomainIds
}

// GetStorageDomainIdsOk returns a tuple with the StorageDomainIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KmsConfigurationCreateParams) GetStorageDomainIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.StorageDomainIds) {
		return nil, false
	}
	return o.StorageDomainIds, true
}

// HasStorageDomainIds returns a boolean if a field has been set.
func (o *KmsConfigurationCreateParams) HasStorageDomainIds() bool {
	if o != nil && !IsNil(o.StorageDomainIds) {
		return true
	}

	return false
}

// SetStorageDomainIds gets a reference to the given []int64 and assigns it to the StorageDomainIds field.
func (o *KmsConfigurationCreateParams) SetStorageDomainIds(v []int64) {
	o.StorageDomainIds = v
}

// GetAwsKmsParams returns the AwsKmsParams field value if set, zero value otherwise.
func (o *KmsConfigurationCreateParams) GetAwsKmsParams() AwsKmsConfiguration {
	if o == nil || IsNil(o.AwsKmsParams) {
		var ret AwsKmsConfiguration
		return ret
	}
	return *o.AwsKmsParams
}

// GetAwsKmsParamsOk returns a tuple with the AwsKmsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KmsConfigurationCreateParams) GetAwsKmsParamsOk() (*AwsKmsConfiguration, bool) {
	if o == nil || IsNil(o.AwsKmsParams) {
		return nil, false
	}
	return o.AwsKmsParams, true
}

// HasAwsKmsParams returns a boolean if a field has been set.
func (o *KmsConfigurationCreateParams) HasAwsKmsParams() bool {
	if o != nil && !IsNil(o.AwsKmsParams) {
		return true
	}

	return false
}

// SetAwsKmsParams gets a reference to the given AwsKmsConfiguration and assigns it to the AwsKmsParams field.
func (o *KmsConfigurationCreateParams) SetAwsKmsParams(v AwsKmsConfiguration) {
	o.AwsKmsParams = &v
}

// GetOwnershipContext returns the OwnershipContext field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KmsConfigurationCreateParams) GetOwnershipContext() string {
	if o == nil || IsNil(o.OwnershipContext.Get()) {
		var ret string
		return ret
	}
	return *o.OwnershipContext.Get()
}

// GetOwnershipContextOk returns a tuple with the OwnershipContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KmsConfigurationCreateParams) GetOwnershipContextOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OwnershipContext.Get(), o.OwnershipContext.IsSet()
}

// HasOwnershipContext returns a boolean if a field has been set.
func (o *KmsConfigurationCreateParams) HasOwnershipContext() bool {
	if o != nil && o.OwnershipContext.IsSet() {
		return true
	}

	return false
}

// SetOwnershipContext gets a reference to the given NullableString and assigns it to the OwnershipContext field.
func (o *KmsConfigurationCreateParams) SetOwnershipContext(v string) {
	o.OwnershipContext.Set(&v)
}
// SetOwnershipContextNil sets the value for OwnershipContext to be an explicit nil
func (o *KmsConfigurationCreateParams) SetOwnershipContextNil() {
	o.OwnershipContext.Set(nil)
}

// UnsetOwnershipContext ensures that no value is present for OwnershipContext, not even an explicit nil
func (o *KmsConfigurationCreateParams) UnsetOwnershipContext() {
	o.OwnershipContext.Unset()
}

// GetType returns the Type field value
func (o *KmsConfigurationCreateParams) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *KmsConfigurationCreateParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *KmsConfigurationCreateParams) SetType(v string) {
	o.Type = v
}

// GetUsageType returns the UsageType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KmsConfigurationCreateParams) GetUsageType() string {
	if o == nil || IsNil(o.UsageType.Get()) {
		var ret string
		return ret
	}
	return *o.UsageType.Get()
}

// GetUsageTypeOk returns a tuple with the UsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KmsConfigurationCreateParams) GetUsageTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsageType.Get(), o.UsageType.IsSet()
}

// HasUsageType returns a boolean if a field has been set.
func (o *KmsConfigurationCreateParams) HasUsageType() bool {
	if o != nil && o.UsageType.IsSet() {
		return true
	}

	return false
}

// SetUsageType gets a reference to the given NullableString and assigns it to the UsageType field.
func (o *KmsConfigurationCreateParams) SetUsageType(v string) {
	o.UsageType.Set(&v)
}
// SetUsageTypeNil sets the value for UsageType to be an explicit nil
func (o *KmsConfigurationCreateParams) SetUsageTypeNil() {
	o.UsageType.Set(nil)
}

// UnsetUsageType ensures that no value is present for UsageType, not even an explicit nil
func (o *KmsConfigurationCreateParams) UnsetUsageType() {
	o.UsageType.Unset()
}

func (o KmsConfigurationCreateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KmsConfigurationCreateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExternalTargetIds != nil {
		toSerialize["externalTargetIds"] = o.ExternalTargetIds
	}
	if !IsNil(o.KmipKmsParams) {
		toSerialize["kmipKmsParams"] = o.KmipKmsParams
	}
	toSerialize["name"] = o.Name
	if o.StorageDomainIds != nil {
		toSerialize["storageDomainIds"] = o.StorageDomainIds
	}
	if !IsNil(o.AwsKmsParams) {
		toSerialize["awsKmsParams"] = o.AwsKmsParams
	}
	if o.OwnershipContext.IsSet() {
		toSerialize["ownershipContext"] = o.OwnershipContext.Get()
	}
	toSerialize["type"] = o.Type
	if o.UsageType.IsSet() {
		toSerialize["usageType"] = o.UsageType.Get()
	}
	return toSerialize, nil
}

func (o *KmsConfigurationCreateParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKmsConfigurationCreateParams := _KmsConfigurationCreateParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKmsConfigurationCreateParams)

	if err != nil {
		return err
	}

	*o = KmsConfigurationCreateParams(varKmsConfigurationCreateParams)

	return err
}

type NullableKmsConfigurationCreateParams struct {
	value *KmsConfigurationCreateParams
	isSet bool
}

func (v NullableKmsConfigurationCreateParams) Get() *KmsConfigurationCreateParams {
	return v.value
}

func (v *NullableKmsConfigurationCreateParams) Set(val *KmsConfigurationCreateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableKmsConfigurationCreateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableKmsConfigurationCreateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKmsConfigurationCreateParams(val *KmsConfigurationCreateParams) *NullableKmsConfigurationCreateParams {
	return &NullableKmsConfigurationCreateParams{value: val, isSet: true}
}

func (v NullableKmsConfigurationCreateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKmsConfigurationCreateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


