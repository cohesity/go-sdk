/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ContinuousSnapshotParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ContinuousSnapshotParams{}

// ContinuousSnapshotParams Specifies the source snapshots to be taken even if there is a pending run in a protection group.
type ContinuousSnapshotParams struct {
	// Specifies whether source snapshots should be taken even if there is a pending run.
	IsEnabled NullableBool `json:"isEnabled"`
	// Specifies the maximum number of source snapshots allowed for a given object in a protection group. This is only applicable if isContinuousSnapshottingEnabled is set to true.
	MaxAllowedSnapshots NullableInt32 `json:"maxAllowedSnapshots,omitempty"`
}

type _ContinuousSnapshotParams ContinuousSnapshotParams

// NewContinuousSnapshotParams instantiates a new ContinuousSnapshotParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContinuousSnapshotParams(isEnabled NullableBool) *ContinuousSnapshotParams {
	this := ContinuousSnapshotParams{}
	this.IsEnabled = isEnabled
	return &this
}

// NewContinuousSnapshotParamsWithDefaults instantiates a new ContinuousSnapshotParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContinuousSnapshotParamsWithDefaults() *ContinuousSnapshotParams {
	this := ContinuousSnapshotParams{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ContinuousSnapshotParams) GetIsEnabled() bool {
	if o == nil || o.IsEnabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContinuousSnapshotParams) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// SetIsEnabled sets field value
func (o *ContinuousSnapshotParams) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}

// GetMaxAllowedSnapshots returns the MaxAllowedSnapshots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContinuousSnapshotParams) GetMaxAllowedSnapshots() int32 {
	if o == nil || IsNil(o.MaxAllowedSnapshots.Get()) {
		var ret int32
		return ret
	}
	return *o.MaxAllowedSnapshots.Get()
}

// GetMaxAllowedSnapshotsOk returns a tuple with the MaxAllowedSnapshots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContinuousSnapshotParams) GetMaxAllowedSnapshotsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxAllowedSnapshots.Get(), o.MaxAllowedSnapshots.IsSet()
}

// HasMaxAllowedSnapshots returns a boolean if a field has been set.
func (o *ContinuousSnapshotParams) HasMaxAllowedSnapshots() bool {
	if o != nil && o.MaxAllowedSnapshots.IsSet() {
		return true
	}

	return false
}

// SetMaxAllowedSnapshots gets a reference to the given NullableInt32 and assigns it to the MaxAllowedSnapshots field.
func (o *ContinuousSnapshotParams) SetMaxAllowedSnapshots(v int32) {
	o.MaxAllowedSnapshots.Set(&v)
}
// SetMaxAllowedSnapshotsNil sets the value for MaxAllowedSnapshots to be an explicit nil
func (o *ContinuousSnapshotParams) SetMaxAllowedSnapshotsNil() {
	o.MaxAllowedSnapshots.Set(nil)
}

// UnsetMaxAllowedSnapshots ensures that no value is present for MaxAllowedSnapshots, not even an explicit nil
func (o *ContinuousSnapshotParams) UnsetMaxAllowedSnapshots() {
	o.MaxAllowedSnapshots.Unset()
}

func (o ContinuousSnapshotParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ContinuousSnapshotParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["isEnabled"] = o.IsEnabled.Get()
	if o.MaxAllowedSnapshots.IsSet() {
		toSerialize["maxAllowedSnapshots"] = o.MaxAllowedSnapshots.Get()
	}
	return toSerialize, nil
}

func (o *ContinuousSnapshotParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"isEnabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varContinuousSnapshotParams := _ContinuousSnapshotParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varContinuousSnapshotParams)

	if err != nil {
		return err
	}

	*o = ContinuousSnapshotParams(varContinuousSnapshotParams)

	return err
}

type NullableContinuousSnapshotParams struct {
	value *ContinuousSnapshotParams
	isSet bool
}

func (v NullableContinuousSnapshotParams) Get() *ContinuousSnapshotParams {
	return v.value
}

func (v *NullableContinuousSnapshotParams) Set(val *ContinuousSnapshotParams) {
	v.value = val
	v.isSet = true
}

func (v NullableContinuousSnapshotParams) IsSet() bool {
	return v.isSet
}

func (v *NullableContinuousSnapshotParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContinuousSnapshotParams(val *ContinuousSnapshotParams) *NullableContinuousSnapshotParams {
	return &NullableContinuousSnapshotParams{value: val, isSet: true}
}

func (v NullableContinuousSnapshotParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContinuousSnapshotParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


