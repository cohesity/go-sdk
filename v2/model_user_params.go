/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UserParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserParams{}

// UserParams Specifies a User.
type UserParams struct {
	// Specifies the description of the User.
	Description NullableString `json:"description,omitempty"`
	// Specifies the epoch time in milliseconds since when the user can login.
	EffectiveTimeMsecs NullableInt64 `json:"effectiveTimeMsecs,omitempty"`
	// Specifies the epoch time in milliseconds when the user expires. Post expiry the user cannot access Cohesity cluster.
	ExpiryTimeMsecs NullableInt64 `json:"expiryTimeMsecs,omitempty"`
	// Specifies whether the User is locked.
	Locked NullableBool `json:"locked,omitempty"`
	// Specifies whether the User is restricted. A restricted user can only view & manage the objects it has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Specifies the Cohesity roles to associate with the user. The Cohesity roles determine privileges on the Cohesity Cluster for this user.
	Roles []string `json:"roles,omitempty"`
	// Specifies the epoch time in milliseconds when the user account was created.
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies the domain of the user. For active directories, this is the fully qualified domain name (FQDN). It is 'LOCAL' for local users on the Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
	Domain *string `json:"domain,omitempty"`
	// Specifies if the user must change password.
	ForcePasswordChange NullableBool `json:"forcePasswordChange,omitempty"`
	// Specifies the epoch time in milliseconds when the user last logged in successfully.
	LastLoginTimeMsecs NullableInt64 `json:"lastLoginTimeMsecs,omitempty"`
	// Specifies the epoch time in milliseconds when the user account was last modified.
	LastUpdatedTimeMsecs NullableInt64 `json:"lastUpdatedTimeMsecs,omitempty"`
	// Specifies the LOCAL user properties. This field is required when adding a new LOCAL Cohesity User.
	LocalUserParams map[string]interface{} `json:"localUserParams,omitempty"`
	// Specifies the reason for locking the User.
	LockedReason NullableString `json:"lockedReason,omitempty"`
	// Specifies additional groups the User may belong to.
	OtherGroups []string `json:"otherGroups,omitempty"`
	// Specifies the primary group of the User. Primary group is used for file access.
	PrimaryGroup NullableString `json:"primaryGroup,omitempty"`
	// Specifies the S3 Account parameters of the User.
	S3AccountParams map[string]interface{} `json:"s3AccountParams,omitempty"`
	// Specifies the sid of the User.
	Sid NullableString `json:"sid,omitempty"`
	// Specifies the tenant id of the User.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the username.
	Username *string `json:"username,omitempty"`
}

// NewUserParams instantiates a new UserParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserParams() *UserParams {
	this := UserParams{}
	return &this
}

// NewUserParamsWithDefaults instantiates a new UserParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserParamsWithDefaults() *UserParams {
	this := UserParams{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UserParams) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UserParams) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UserParams) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UserParams) UnsetDescription() {
	o.Description.Unset()
}

// GetEffectiveTimeMsecs returns the EffectiveTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetEffectiveTimeMsecs() int64 {
	if o == nil || IsNil(o.EffectiveTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.EffectiveTimeMsecs.Get()
}

// GetEffectiveTimeMsecsOk returns a tuple with the EffectiveTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetEffectiveTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EffectiveTimeMsecs.Get(), o.EffectiveTimeMsecs.IsSet()
}

// HasEffectiveTimeMsecs returns a boolean if a field has been set.
func (o *UserParams) HasEffectiveTimeMsecs() bool {
	if o != nil && o.EffectiveTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetEffectiveTimeMsecs gets a reference to the given NullableInt64 and assigns it to the EffectiveTimeMsecs field.
func (o *UserParams) SetEffectiveTimeMsecs(v int64) {
	o.EffectiveTimeMsecs.Set(&v)
}
// SetEffectiveTimeMsecsNil sets the value for EffectiveTimeMsecs to be an explicit nil
func (o *UserParams) SetEffectiveTimeMsecsNil() {
	o.EffectiveTimeMsecs.Set(nil)
}

// UnsetEffectiveTimeMsecs ensures that no value is present for EffectiveTimeMsecs, not even an explicit nil
func (o *UserParams) UnsetEffectiveTimeMsecs() {
	o.EffectiveTimeMsecs.Unset()
}

// GetExpiryTimeMsecs returns the ExpiryTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetExpiryTimeMsecs() int64 {
	if o == nil || IsNil(o.ExpiryTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.ExpiryTimeMsecs.Get()
}

// GetExpiryTimeMsecsOk returns a tuple with the ExpiryTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetExpiryTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiryTimeMsecs.Get(), o.ExpiryTimeMsecs.IsSet()
}

// HasExpiryTimeMsecs returns a boolean if a field has been set.
func (o *UserParams) HasExpiryTimeMsecs() bool {
	if o != nil && o.ExpiryTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ExpiryTimeMsecs field.
func (o *UserParams) SetExpiryTimeMsecs(v int64) {
	o.ExpiryTimeMsecs.Set(&v)
}
// SetExpiryTimeMsecsNil sets the value for ExpiryTimeMsecs to be an explicit nil
func (o *UserParams) SetExpiryTimeMsecsNil() {
	o.ExpiryTimeMsecs.Set(nil)
}

// UnsetExpiryTimeMsecs ensures that no value is present for ExpiryTimeMsecs, not even an explicit nil
func (o *UserParams) UnsetExpiryTimeMsecs() {
	o.ExpiryTimeMsecs.Unset()
}

// GetLocked returns the Locked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetLocked() bool {
	if o == nil || IsNil(o.Locked.Get()) {
		var ret bool
		return ret
	}
	return *o.Locked.Get()
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locked.Get(), o.Locked.IsSet()
}

// HasLocked returns a boolean if a field has been set.
func (o *UserParams) HasLocked() bool {
	if o != nil && o.Locked.IsSet() {
		return true
	}

	return false
}

// SetLocked gets a reference to the given NullableBool and assigns it to the Locked field.
func (o *UserParams) SetLocked(v bool) {
	o.Locked.Set(&v)
}
// SetLockedNil sets the value for Locked to be an explicit nil
func (o *UserParams) SetLockedNil() {
	o.Locked.Set(nil)
}

// UnsetLocked ensures that no value is present for Locked, not even an explicit nil
func (o *UserParams) UnsetLocked() {
	o.Locked.Unset()
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted.Get()) {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetRestrictedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *UserParams) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *UserParams) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *UserParams) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *UserParams) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UserParams) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UserParams) SetRoles(v []string) {
	o.Roles = v
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetCreatedTimeMsecs() int64 {
	if o == nil || IsNil(o.CreatedTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *UserParams) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *UserParams) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *UserParams) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *UserParams) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise.
func (o *UserParams) GetDomain() string {
	if o == nil || IsNil(o.Domain) {
		var ret string
		return ret
	}
	return *o.Domain
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserParams) GetDomainOk() (*string, bool) {
	if o == nil || IsNil(o.Domain) {
		return nil, false
	}
	return o.Domain, true
}

// HasDomain returns a boolean if a field has been set.
func (o *UserParams) HasDomain() bool {
	if o != nil && !IsNil(o.Domain) {
		return true
	}

	return false
}

// SetDomain gets a reference to the given string and assigns it to the Domain field.
func (o *UserParams) SetDomain(v string) {
	o.Domain = &v
}

// GetForcePasswordChange returns the ForcePasswordChange field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetForcePasswordChange() bool {
	if o == nil || IsNil(o.ForcePasswordChange.Get()) {
		var ret bool
		return ret
	}
	return *o.ForcePasswordChange.Get()
}

// GetForcePasswordChangeOk returns a tuple with the ForcePasswordChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetForcePasswordChangeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForcePasswordChange.Get(), o.ForcePasswordChange.IsSet()
}

// HasForcePasswordChange returns a boolean if a field has been set.
func (o *UserParams) HasForcePasswordChange() bool {
	if o != nil && o.ForcePasswordChange.IsSet() {
		return true
	}

	return false
}

// SetForcePasswordChange gets a reference to the given NullableBool and assigns it to the ForcePasswordChange field.
func (o *UserParams) SetForcePasswordChange(v bool) {
	o.ForcePasswordChange.Set(&v)
}
// SetForcePasswordChangeNil sets the value for ForcePasswordChange to be an explicit nil
func (o *UserParams) SetForcePasswordChangeNil() {
	o.ForcePasswordChange.Set(nil)
}

// UnsetForcePasswordChange ensures that no value is present for ForcePasswordChange, not even an explicit nil
func (o *UserParams) UnsetForcePasswordChange() {
	o.ForcePasswordChange.Unset()
}

// GetLastLoginTimeMsecs returns the LastLoginTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetLastLoginTimeMsecs() int64 {
	if o == nil || IsNil(o.LastLoginTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.LastLoginTimeMsecs.Get()
}

// GetLastLoginTimeMsecsOk returns a tuple with the LastLoginTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetLastLoginTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastLoginTimeMsecs.Get(), o.LastLoginTimeMsecs.IsSet()
}

// HasLastLoginTimeMsecs returns a boolean if a field has been set.
func (o *UserParams) HasLastLoginTimeMsecs() bool {
	if o != nil && o.LastLoginTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastLoginTimeMsecs gets a reference to the given NullableInt64 and assigns it to the LastLoginTimeMsecs field.
func (o *UserParams) SetLastLoginTimeMsecs(v int64) {
	o.LastLoginTimeMsecs.Set(&v)
}
// SetLastLoginTimeMsecsNil sets the value for LastLoginTimeMsecs to be an explicit nil
func (o *UserParams) SetLastLoginTimeMsecsNil() {
	o.LastLoginTimeMsecs.Set(nil)
}

// UnsetLastLoginTimeMsecs ensures that no value is present for LastLoginTimeMsecs, not even an explicit nil
func (o *UserParams) UnsetLastLoginTimeMsecs() {
	o.LastLoginTimeMsecs.Unset()
}

// GetLastUpdatedTimeMsecs returns the LastUpdatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetLastUpdatedTimeMsecs() int64 {
	if o == nil || IsNil(o.LastUpdatedTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimeMsecs.Get()
}

// GetLastUpdatedTimeMsecsOk returns a tuple with the LastUpdatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetLastUpdatedTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdatedTimeMsecs.Get(), o.LastUpdatedTimeMsecs.IsSet()
}

// HasLastUpdatedTimeMsecs returns a boolean if a field has been set.
func (o *UserParams) HasLastUpdatedTimeMsecs() bool {
	if o != nil && o.LastUpdatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the LastUpdatedTimeMsecs field.
func (o *UserParams) SetLastUpdatedTimeMsecs(v int64) {
	o.LastUpdatedTimeMsecs.Set(&v)
}
// SetLastUpdatedTimeMsecsNil sets the value for LastUpdatedTimeMsecs to be an explicit nil
func (o *UserParams) SetLastUpdatedTimeMsecsNil() {
	o.LastUpdatedTimeMsecs.Set(nil)
}

// UnsetLastUpdatedTimeMsecs ensures that no value is present for LastUpdatedTimeMsecs, not even an explicit nil
func (o *UserParams) UnsetLastUpdatedTimeMsecs() {
	o.LastUpdatedTimeMsecs.Unset()
}

// GetLocalUserParams returns the LocalUserParams field value if set, zero value otherwise.
func (o *UserParams) GetLocalUserParams() map[string]interface{} {
	if o == nil || IsNil(o.LocalUserParams) {
		var ret map[string]interface{}
		return ret
	}
	return o.LocalUserParams
}

// GetLocalUserParamsOk returns a tuple with the LocalUserParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserParams) GetLocalUserParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LocalUserParams) {
		return map[string]interface{}{}, false
	}
	return o.LocalUserParams, true
}

// HasLocalUserParams returns a boolean if a field has been set.
func (o *UserParams) HasLocalUserParams() bool {
	if o != nil && !IsNil(o.LocalUserParams) {
		return true
	}

	return false
}

// SetLocalUserParams gets a reference to the given map[string]interface{} and assigns it to the LocalUserParams field.
func (o *UserParams) SetLocalUserParams(v map[string]interface{}) {
	o.LocalUserParams = v
}

// GetLockedReason returns the LockedReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetLockedReason() string {
	if o == nil || IsNil(o.LockedReason.Get()) {
		var ret string
		return ret
	}
	return *o.LockedReason.Get()
}

// GetLockedReasonOk returns a tuple with the LockedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetLockedReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LockedReason.Get(), o.LockedReason.IsSet()
}

// HasLockedReason returns a boolean if a field has been set.
func (o *UserParams) HasLockedReason() bool {
	if o != nil && o.LockedReason.IsSet() {
		return true
	}

	return false
}

// SetLockedReason gets a reference to the given NullableString and assigns it to the LockedReason field.
func (o *UserParams) SetLockedReason(v string) {
	o.LockedReason.Set(&v)
}
// SetLockedReasonNil sets the value for LockedReason to be an explicit nil
func (o *UserParams) SetLockedReasonNil() {
	o.LockedReason.Set(nil)
}

// UnsetLockedReason ensures that no value is present for LockedReason, not even an explicit nil
func (o *UserParams) UnsetLockedReason() {
	o.LockedReason.Unset()
}

// GetOtherGroups returns the OtherGroups field value if set, zero value otherwise.
func (o *UserParams) GetOtherGroups() []string {
	if o == nil || IsNil(o.OtherGroups) {
		var ret []string
		return ret
	}
	return o.OtherGroups
}

// GetOtherGroupsOk returns a tuple with the OtherGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserParams) GetOtherGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.OtherGroups) {
		return nil, false
	}
	return o.OtherGroups, true
}

// HasOtherGroups returns a boolean if a field has been set.
func (o *UserParams) HasOtherGroups() bool {
	if o != nil && !IsNil(o.OtherGroups) {
		return true
	}

	return false
}

// SetOtherGroups gets a reference to the given []string and assigns it to the OtherGroups field.
func (o *UserParams) SetOtherGroups(v []string) {
	o.OtherGroups = v
}

// GetPrimaryGroup returns the PrimaryGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetPrimaryGroup() string {
	if o == nil || IsNil(o.PrimaryGroup.Get()) {
		var ret string
		return ret
	}
	return *o.PrimaryGroup.Get()
}

// GetPrimaryGroupOk returns a tuple with the PrimaryGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetPrimaryGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryGroup.Get(), o.PrimaryGroup.IsSet()
}

// HasPrimaryGroup returns a boolean if a field has been set.
func (o *UserParams) HasPrimaryGroup() bool {
	if o != nil && o.PrimaryGroup.IsSet() {
		return true
	}

	return false
}

// SetPrimaryGroup gets a reference to the given NullableString and assigns it to the PrimaryGroup field.
func (o *UserParams) SetPrimaryGroup(v string) {
	o.PrimaryGroup.Set(&v)
}
// SetPrimaryGroupNil sets the value for PrimaryGroup to be an explicit nil
func (o *UserParams) SetPrimaryGroupNil() {
	o.PrimaryGroup.Set(nil)
}

// UnsetPrimaryGroup ensures that no value is present for PrimaryGroup, not even an explicit nil
func (o *UserParams) UnsetPrimaryGroup() {
	o.PrimaryGroup.Unset()
}

// GetS3AccountParams returns the S3AccountParams field value if set, zero value otherwise.
func (o *UserParams) GetS3AccountParams() map[string]interface{} {
	if o == nil || IsNil(o.S3AccountParams) {
		var ret map[string]interface{}
		return ret
	}
	return o.S3AccountParams
}

// GetS3AccountParamsOk returns a tuple with the S3AccountParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserParams) GetS3AccountParamsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.S3AccountParams) {
		return map[string]interface{}{}, false
	}
	return o.S3AccountParams, true
}

// HasS3AccountParams returns a boolean if a field has been set.
func (o *UserParams) HasS3AccountParams() bool {
	if o != nil && !IsNil(o.S3AccountParams) {
		return true
	}

	return false
}

// SetS3AccountParams gets a reference to the given map[string]interface{} and assigns it to the S3AccountParams field.
func (o *UserParams) SetS3AccountParams(v map[string]interface{}) {
	o.S3AccountParams = v
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetSid() string {
	if o == nil || IsNil(o.Sid.Get()) {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *UserParams) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *UserParams) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *UserParams) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *UserParams) UnsetSid() {
	o.Sid.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParams) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParams) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *UserParams) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *UserParams) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *UserParams) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *UserParams) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise.
func (o *UserParams) GetUsername() string {
	if o == nil || IsNil(o.Username) {
		var ret string
		return ret
	}
	return *o.Username
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserParams) GetUsernameOk() (*string, bool) {
	if o == nil || IsNil(o.Username) {
		return nil, false
	}
	return o.Username, true
}

// HasUsername returns a boolean if a field has been set.
func (o *UserParams) HasUsername() bool {
	if o != nil && !IsNil(o.Username) {
		return true
	}

	return false
}

// SetUsername gets a reference to the given string and assigns it to the Username field.
func (o *UserParams) SetUsername(v string) {
	o.Username = &v
}

func (o UserParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.EffectiveTimeMsecs.IsSet() {
		toSerialize["effectiveTimeMsecs"] = o.EffectiveTimeMsecs.Get()
	}
	if o.ExpiryTimeMsecs.IsSet() {
		toSerialize["expiryTimeMsecs"] = o.ExpiryTimeMsecs.Get()
	}
	if o.Locked.IsSet() {
		toSerialize["locked"] = o.Locked.Get()
	}
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if !IsNil(o.Domain) {
		toSerialize["domain"] = o.Domain
	}
	if o.ForcePasswordChange.IsSet() {
		toSerialize["forcePasswordChange"] = o.ForcePasswordChange.Get()
	}
	if o.LastLoginTimeMsecs.IsSet() {
		toSerialize["lastLoginTimeMsecs"] = o.LastLoginTimeMsecs.Get()
	}
	if o.LastUpdatedTimeMsecs.IsSet() {
		toSerialize["lastUpdatedTimeMsecs"] = o.LastUpdatedTimeMsecs.Get()
	}
	if !IsNil(o.LocalUserParams) {
		toSerialize["localUserParams"] = o.LocalUserParams
	}
	if o.LockedReason.IsSet() {
		toSerialize["lockedReason"] = o.LockedReason.Get()
	}
	if !IsNil(o.OtherGroups) {
		toSerialize["otherGroups"] = o.OtherGroups
	}
	if o.PrimaryGroup.IsSet() {
		toSerialize["primaryGroup"] = o.PrimaryGroup.Get()
	}
	if !IsNil(o.S3AccountParams) {
		toSerialize["s3AccountParams"] = o.S3AccountParams
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if !IsNil(o.Username) {
		toSerialize["username"] = o.Username
	}
	return toSerialize, nil
}

type NullableUserParams struct {
	value *UserParams
	isSet bool
}

func (v NullableUserParams) Get() *UserParams {
	return v.value
}

func (v *NullableUserParams) Set(val *UserParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUserParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUserParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserParams(val *UserParams) *NullableUserParams {
	return &NullableUserParams{value: val, isSet: true}
}

func (v NullableUserParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


