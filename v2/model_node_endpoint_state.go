/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeEndpointState type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeEndpointState{}

// NodeEndpointState Specify the results after checking connectivity on endpoints on each node.
type NodeEndpointState struct {
	// Specifies the time in Epoch in micro seconds when the check is performed.
	CheckTimestampUsecs NullableInt64 `json:"checkTimestampUsecs,omitempty"`
	DnsServerReachability *EndpointConnectionState `json:"dnsServerReachability,omitempty"`
	// Specifies the results of the endpoints.
	Endpoints []EndpointConnectionState `json:"endpoints,omitempty"`
	GatewayReachability *EndpointConnectionState `json:"gatewayReachability,omitempty"`
	// Specifies the Id of the node.
	Id NullableInt64 `json:"id,omitempty"`
	NtpServerReachability *EndpointConnectionState `json:"ntpServerReachability,omitempty"`
}

// NewNodeEndpointState instantiates a new NodeEndpointState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeEndpointState() *NodeEndpointState {
	this := NodeEndpointState{}
	return &this
}

// NewNodeEndpointStateWithDefaults instantiates a new NodeEndpointState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeEndpointStateWithDefaults() *NodeEndpointState {
	this := NodeEndpointState{}
	return &this
}

// GetCheckTimestampUsecs returns the CheckTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeEndpointState) GetCheckTimestampUsecs() int64 {
	if o == nil || IsNil(o.CheckTimestampUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.CheckTimestampUsecs.Get()
}

// GetCheckTimestampUsecsOk returns a tuple with the CheckTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeEndpointState) GetCheckTimestampUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CheckTimestampUsecs.Get(), o.CheckTimestampUsecs.IsSet()
}

// HasCheckTimestampUsecs returns a boolean if a field has been set.
func (o *NodeEndpointState) HasCheckTimestampUsecs() bool {
	if o != nil && o.CheckTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetCheckTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the CheckTimestampUsecs field.
func (o *NodeEndpointState) SetCheckTimestampUsecs(v int64) {
	o.CheckTimestampUsecs.Set(&v)
}
// SetCheckTimestampUsecsNil sets the value for CheckTimestampUsecs to be an explicit nil
func (o *NodeEndpointState) SetCheckTimestampUsecsNil() {
	o.CheckTimestampUsecs.Set(nil)
}

// UnsetCheckTimestampUsecs ensures that no value is present for CheckTimestampUsecs, not even an explicit nil
func (o *NodeEndpointState) UnsetCheckTimestampUsecs() {
	o.CheckTimestampUsecs.Unset()
}

// GetDnsServerReachability returns the DnsServerReachability field value if set, zero value otherwise.
func (o *NodeEndpointState) GetDnsServerReachability() EndpointConnectionState {
	if o == nil || IsNil(o.DnsServerReachability) {
		var ret EndpointConnectionState
		return ret
	}
	return *o.DnsServerReachability
}

// GetDnsServerReachabilityOk returns a tuple with the DnsServerReachability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeEndpointState) GetDnsServerReachabilityOk() (*EndpointConnectionState, bool) {
	if o == nil || IsNil(o.DnsServerReachability) {
		return nil, false
	}
	return o.DnsServerReachability, true
}

// HasDnsServerReachability returns a boolean if a field has been set.
func (o *NodeEndpointState) HasDnsServerReachability() bool {
	if o != nil && !IsNil(o.DnsServerReachability) {
		return true
	}

	return false
}

// SetDnsServerReachability gets a reference to the given EndpointConnectionState and assigns it to the DnsServerReachability field.
func (o *NodeEndpointState) SetDnsServerReachability(v EndpointConnectionState) {
	o.DnsServerReachability = &v
}

// GetEndpoints returns the Endpoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeEndpointState) GetEndpoints() []EndpointConnectionState {
	if o == nil {
		var ret []EndpointConnectionState
		return ret
	}
	return o.Endpoints
}

// GetEndpointsOk returns a tuple with the Endpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeEndpointState) GetEndpointsOk() ([]EndpointConnectionState, bool) {
	if o == nil || IsNil(o.Endpoints) {
		return nil, false
	}
	return o.Endpoints, true
}

// HasEndpoints returns a boolean if a field has been set.
func (o *NodeEndpointState) HasEndpoints() bool {
	if o != nil && !IsNil(o.Endpoints) {
		return true
	}

	return false
}

// SetEndpoints gets a reference to the given []EndpointConnectionState and assigns it to the Endpoints field.
func (o *NodeEndpointState) SetEndpoints(v []EndpointConnectionState) {
	o.Endpoints = v
}

// GetGatewayReachability returns the GatewayReachability field value if set, zero value otherwise.
func (o *NodeEndpointState) GetGatewayReachability() EndpointConnectionState {
	if o == nil || IsNil(o.GatewayReachability) {
		var ret EndpointConnectionState
		return ret
	}
	return *o.GatewayReachability
}

// GetGatewayReachabilityOk returns a tuple with the GatewayReachability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeEndpointState) GetGatewayReachabilityOk() (*EndpointConnectionState, bool) {
	if o == nil || IsNil(o.GatewayReachability) {
		return nil, false
	}
	return o.GatewayReachability, true
}

// HasGatewayReachability returns a boolean if a field has been set.
func (o *NodeEndpointState) HasGatewayReachability() bool {
	if o != nil && !IsNil(o.GatewayReachability) {
		return true
	}

	return false
}

// SetGatewayReachability gets a reference to the given EndpointConnectionState and assigns it to the GatewayReachability field.
func (o *NodeEndpointState) SetGatewayReachability(v EndpointConnectionState) {
	o.GatewayReachability = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeEndpointState) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeEndpointState) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NodeEndpointState) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *NodeEndpointState) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NodeEndpointState) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NodeEndpointState) UnsetId() {
	o.Id.Unset()
}

// GetNtpServerReachability returns the NtpServerReachability field value if set, zero value otherwise.
func (o *NodeEndpointState) GetNtpServerReachability() EndpointConnectionState {
	if o == nil || IsNil(o.NtpServerReachability) {
		var ret EndpointConnectionState
		return ret
	}
	return *o.NtpServerReachability
}

// GetNtpServerReachabilityOk returns a tuple with the NtpServerReachability field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeEndpointState) GetNtpServerReachabilityOk() (*EndpointConnectionState, bool) {
	if o == nil || IsNil(o.NtpServerReachability) {
		return nil, false
	}
	return o.NtpServerReachability, true
}

// HasNtpServerReachability returns a boolean if a field has been set.
func (o *NodeEndpointState) HasNtpServerReachability() bool {
	if o != nil && !IsNil(o.NtpServerReachability) {
		return true
	}

	return false
}

// SetNtpServerReachability gets a reference to the given EndpointConnectionState and assigns it to the NtpServerReachability field.
func (o *NodeEndpointState) SetNtpServerReachability(v EndpointConnectionState) {
	o.NtpServerReachability = &v
}

func (o NodeEndpointState) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeEndpointState) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CheckTimestampUsecs.IsSet() {
		toSerialize["checkTimestampUsecs"] = o.CheckTimestampUsecs.Get()
	}
	if !IsNil(o.DnsServerReachability) {
		toSerialize["dnsServerReachability"] = o.DnsServerReachability
	}
	if o.Endpoints != nil {
		toSerialize["endpoints"] = o.Endpoints
	}
	if !IsNil(o.GatewayReachability) {
		toSerialize["gatewayReachability"] = o.GatewayReachability
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.NtpServerReachability) {
		toSerialize["ntpServerReachability"] = o.NtpServerReachability
	}
	return toSerialize, nil
}

type NullableNodeEndpointState struct {
	value *NodeEndpointState
	isSet bool
}

func (v NullableNodeEndpointState) Get() *NodeEndpointState {
	return v.value
}

func (v *NullableNodeEndpointState) Set(val *NodeEndpointState) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeEndpointState) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeEndpointState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeEndpointState(val *NodeEndpointState) *NullableNodeEndpointState {
	return &NullableNodeEndpointState{value: val, isSet: true}
}

func (v NullableNodeEndpointState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeEndpointState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


