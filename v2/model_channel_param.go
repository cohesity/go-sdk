/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChannelParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelParam{}

// ChannelParam Specifies the parameters to recover a Microsoft 365 Teams Channel.
type ChannelParam struct {
	// Specifies the list of doclibs of the Channel to recover. It is populated iff recoverEntireChannel is false.
	DocumentLibraryParams []OneDriveParam `json:"documentLibraryParams,omitempty"`
	// Specifies the Channel id.
	Id NullableString `json:"id"`
	// Specifies the Channel name.
	Name NullableString `json:"name,omitempty"`
	// Specifies whether to recover the whole Microsoft 365 Channel.
	RecoverEntireChannel NullableBool `json:"recoverEntireChannel"`
	// Specifies the type of channel public or private
	Type *string `json:"type,omitempty"`
}

type _ChannelParam ChannelParam

// NewChannelParam instantiates a new ChannelParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelParam(id NullableString, recoverEntireChannel NullableBool) *ChannelParam {
	this := ChannelParam{}
	this.Id = id
	this.RecoverEntireChannel = recoverEntireChannel
	return &this
}

// NewChannelParamWithDefaults instantiates a new ChannelParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelParamWithDefaults() *ChannelParam {
	this := ChannelParam{}
	return &this
}

// GetDocumentLibraryParams returns the DocumentLibraryParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelParam) GetDocumentLibraryParams() []OneDriveParam {
	if o == nil {
		var ret []OneDriveParam
		return ret
	}
	return o.DocumentLibraryParams
}

// GetDocumentLibraryParamsOk returns a tuple with the DocumentLibraryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelParam) GetDocumentLibraryParamsOk() ([]OneDriveParam, bool) {
	if o == nil || IsNil(o.DocumentLibraryParams) {
		return nil, false
	}
	return o.DocumentLibraryParams, true
}

// HasDocumentLibraryParams returns a boolean if a field has been set.
func (o *ChannelParam) HasDocumentLibraryParams() bool {
	if o != nil && !IsNil(o.DocumentLibraryParams) {
		return true
	}

	return false
}

// SetDocumentLibraryParams gets a reference to the given []OneDriveParam and assigns it to the DocumentLibraryParams field.
func (o *ChannelParam) SetDocumentLibraryParams(v []OneDriveParam) {
	o.DocumentLibraryParams = v
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ChannelParam) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelParam) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *ChannelParam) SetId(v string) {
	o.Id.Set(&v)
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChannelParam) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelParam) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ChannelParam) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ChannelParam) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ChannelParam) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ChannelParam) UnsetName() {
	o.Name.Unset()
}

// GetRecoverEntireChannel returns the RecoverEntireChannel field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ChannelParam) GetRecoverEntireChannel() bool {
	if o == nil || o.RecoverEntireChannel.Get() == nil {
		var ret bool
		return ret
	}

	return *o.RecoverEntireChannel.Get()
}

// GetRecoverEntireChannelOk returns a tuple with the RecoverEntireChannel field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChannelParam) GetRecoverEntireChannelOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverEntireChannel.Get(), o.RecoverEntireChannel.IsSet()
}

// SetRecoverEntireChannel sets field value
func (o *ChannelParam) SetRecoverEntireChannel(v bool) {
	o.RecoverEntireChannel.Set(&v)
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ChannelParam) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ChannelParam) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ChannelParam) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ChannelParam) SetType(v string) {
	o.Type = &v
}

func (o ChannelParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentLibraryParams != nil {
		toSerialize["documentLibraryParams"] = o.DocumentLibraryParams
	}
	toSerialize["id"] = o.Id.Get()
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	toSerialize["recoverEntireChannel"] = o.RecoverEntireChannel.Get()
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

func (o *ChannelParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"recoverEntireChannel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChannelParam := _ChannelParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChannelParam)

	if err != nil {
		return err
	}

	*o = ChannelParam(varChannelParam)

	return err
}

type NullableChannelParam struct {
	value *ChannelParam
	isSet bool
}

func (v NullableChannelParam) Get() *ChannelParam {
	return v.value
}

func (v *NullableChannelParam) Set(val *ChannelParam) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelParam) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelParam(val *ChannelParam) *NullableChannelParam {
	return &NullableChannelParam{value: val, isSet: true}
}

func (v NullableChannelParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


