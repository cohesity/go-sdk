/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CouchbaseSourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CouchbaseSourceRegistrationParams{}

// CouchbaseSourceRegistrationParams Specifies parameters to register Couchbase source.
type CouchbaseSourceRegistrationParams struct {
	// Specifies the password to access target entity.
	Password string `json:"password"`
	// Specifies the username to access target entity.
	Username string `json:"username"`
	// Carrier direct or Carrier SSL port.
	CarrierPort NullableInt32 `json:"carrierPort"`
	// HTTP direct or HTTP SSL port.
	HttpPort NullableInt32 `json:"httpPort"`
	// Set to true if connection to couchbase has to be using SSL.
	IsSslRequired NullableBool `json:"isSslRequired"`
	// Specifies the IP Addresses or hostnames of the Couchbase cluster seed nodes.
	Seeds []string `json:"seeds"`
}

type _CouchbaseSourceRegistrationParams CouchbaseSourceRegistrationParams

// NewCouchbaseSourceRegistrationParams instantiates a new CouchbaseSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCouchbaseSourceRegistrationParams(password string, username string, carrierPort NullableInt32, httpPort NullableInt32, isSslRequired NullableBool, seeds []string) *CouchbaseSourceRegistrationParams {
	this := CouchbaseSourceRegistrationParams{}
	this.Password = password
	this.Username = username
	this.CarrierPort = carrierPort
	this.HttpPort = httpPort
	this.IsSslRequired = isSslRequired
	this.Seeds = seeds
	return &this
}

// NewCouchbaseSourceRegistrationParamsWithDefaults instantiates a new CouchbaseSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCouchbaseSourceRegistrationParamsWithDefaults() *CouchbaseSourceRegistrationParams {
	this := CouchbaseSourceRegistrationParams{}
	return &this
}

// GetPassword returns the Password field value
func (o *CouchbaseSourceRegistrationParams) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *CouchbaseSourceRegistrationParams) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *CouchbaseSourceRegistrationParams) SetPassword(v string) {
	o.Password = v
}

// GetUsername returns the Username field value
func (o *CouchbaseSourceRegistrationParams) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CouchbaseSourceRegistrationParams) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CouchbaseSourceRegistrationParams) SetUsername(v string) {
	o.Username = v
}

// GetCarrierPort returns the CarrierPort field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CouchbaseSourceRegistrationParams) GetCarrierPort() int32 {
	if o == nil || o.CarrierPort.Get() == nil {
		var ret int32
		return ret
	}

	return *o.CarrierPort.Get()
}

// GetCarrierPortOk returns a tuple with the CarrierPort field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseSourceRegistrationParams) GetCarrierPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CarrierPort.Get(), o.CarrierPort.IsSet()
}

// SetCarrierPort sets field value
func (o *CouchbaseSourceRegistrationParams) SetCarrierPort(v int32) {
	o.CarrierPort.Set(&v)
}

// GetHttpPort returns the HttpPort field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *CouchbaseSourceRegistrationParams) GetHttpPort() int32 {
	if o == nil || o.HttpPort.Get() == nil {
		var ret int32
		return ret
	}

	return *o.HttpPort.Get()
}

// GetHttpPortOk returns a tuple with the HttpPort field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseSourceRegistrationParams) GetHttpPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.HttpPort.Get(), o.HttpPort.IsSet()
}

// SetHttpPort sets field value
func (o *CouchbaseSourceRegistrationParams) SetHttpPort(v int32) {
	o.HttpPort.Set(&v)
}

// GetIsSslRequired returns the IsSslRequired field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *CouchbaseSourceRegistrationParams) GetIsSslRequired() bool {
	if o == nil || o.IsSslRequired.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsSslRequired.Get()
}

// GetIsSslRequiredOk returns a tuple with the IsSslRequired field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CouchbaseSourceRegistrationParams) GetIsSslRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSslRequired.Get(), o.IsSslRequired.IsSet()
}

// SetIsSslRequired sets field value
func (o *CouchbaseSourceRegistrationParams) SetIsSslRequired(v bool) {
	o.IsSslRequired.Set(&v)
}

// GetSeeds returns the Seeds field value
func (o *CouchbaseSourceRegistrationParams) GetSeeds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Seeds
}

// GetSeedsOk returns a tuple with the Seeds field value
// and a boolean to check if the value has been set.
func (o *CouchbaseSourceRegistrationParams) GetSeedsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Seeds, true
}

// SetSeeds sets field value
func (o *CouchbaseSourceRegistrationParams) SetSeeds(v []string) {
	o.Seeds = v
}

func (o CouchbaseSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CouchbaseSourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	toSerialize["username"] = o.Username
	toSerialize["carrierPort"] = o.CarrierPort.Get()
	toSerialize["httpPort"] = o.HttpPort.Get()
	toSerialize["isSslRequired"] = o.IsSslRequired.Get()
	toSerialize["seeds"] = o.Seeds
	return toSerialize, nil
}

func (o *CouchbaseSourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
		"username",
		"carrierPort",
		"httpPort",
		"isSslRequired",
		"seeds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCouchbaseSourceRegistrationParams := _CouchbaseSourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCouchbaseSourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = CouchbaseSourceRegistrationParams(varCouchbaseSourceRegistrationParams)

	return err
}

type NullableCouchbaseSourceRegistrationParams struct {
	value *CouchbaseSourceRegistrationParams
	isSet bool
}

func (v NullableCouchbaseSourceRegistrationParams) Get() *CouchbaseSourceRegistrationParams {
	return v.value
}

func (v *NullableCouchbaseSourceRegistrationParams) Set(val *CouchbaseSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCouchbaseSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCouchbaseSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCouchbaseSourceRegistrationParams(val *CouchbaseSourceRegistrationParams) *NullableCouchbaseSourceRegistrationParams {
	return &NullableCouchbaseSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableCouchbaseSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCouchbaseSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


