/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverGcpVmNewSourceNetworkConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverGcpVmNewSourceNetworkConfig{}

// RecoverGcpVmNewSourceNetworkConfig Specifies the network config parameters to be applied for GCP VMs if recovering to new Source.
type RecoverGcpVmNewSourceNetworkConfig struct {
	Subnet NullableRecoverGcpVmNewSourceNetworkConfigSubnet `json:"subnet"`
}

type _RecoverGcpVmNewSourceNetworkConfig RecoverGcpVmNewSourceNetworkConfig

// NewRecoverGcpVmNewSourceNetworkConfig instantiates a new RecoverGcpVmNewSourceNetworkConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverGcpVmNewSourceNetworkConfig(subnet NullableRecoverGcpVmNewSourceNetworkConfigSubnet) *RecoverGcpVmNewSourceNetworkConfig {
	this := RecoverGcpVmNewSourceNetworkConfig{}
	this.Subnet = subnet
	return &this
}

// NewRecoverGcpVmNewSourceNetworkConfigWithDefaults instantiates a new RecoverGcpVmNewSourceNetworkConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverGcpVmNewSourceNetworkConfigWithDefaults() *RecoverGcpVmNewSourceNetworkConfig {
	this := RecoverGcpVmNewSourceNetworkConfig{}
	return &this
}

// GetSubnet returns the Subnet field value
// If the value is explicit nil, the zero value for RecoverGcpVmNewSourceNetworkConfigSubnet will be returned
func (o *RecoverGcpVmNewSourceNetworkConfig) GetSubnet() RecoverGcpVmNewSourceNetworkConfigSubnet {
	if o == nil || o.Subnet.Get() == nil {
		var ret RecoverGcpVmNewSourceNetworkConfigSubnet
		return ret
	}

	return *o.Subnet.Get()
}

// GetSubnetOk returns a tuple with the Subnet field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverGcpVmNewSourceNetworkConfig) GetSubnetOk() (*RecoverGcpVmNewSourceNetworkConfigSubnet, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subnet.Get(), o.Subnet.IsSet()
}

// SetSubnet sets field value
func (o *RecoverGcpVmNewSourceNetworkConfig) SetSubnet(v RecoverGcpVmNewSourceNetworkConfigSubnet) {
	o.Subnet.Set(&v)
}

func (o RecoverGcpVmNewSourceNetworkConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverGcpVmNewSourceNetworkConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subnet"] = o.Subnet.Get()
	return toSerialize, nil
}

func (o *RecoverGcpVmNewSourceNetworkConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subnet",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverGcpVmNewSourceNetworkConfig := _RecoverGcpVmNewSourceNetworkConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverGcpVmNewSourceNetworkConfig)

	if err != nil {
		return err
	}

	*o = RecoverGcpVmNewSourceNetworkConfig(varRecoverGcpVmNewSourceNetworkConfig)

	return err
}

type NullableRecoverGcpVmNewSourceNetworkConfig struct {
	value *RecoverGcpVmNewSourceNetworkConfig
	isSet bool
}

func (v NullableRecoverGcpVmNewSourceNetworkConfig) Get() *RecoverGcpVmNewSourceNetworkConfig {
	return v.value
}

func (v *NullableRecoverGcpVmNewSourceNetworkConfig) Set(val *RecoverGcpVmNewSourceNetworkConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverGcpVmNewSourceNetworkConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverGcpVmNewSourceNetworkConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverGcpVmNewSourceNetworkConfig(val *RecoverGcpVmNewSourceNetworkConfig) *NullableRecoverGcpVmNewSourceNetworkConfig {
	return &NullableRecoverGcpVmNewSourceNetworkConfig{value: val, isSet: true}
}

func (v NullableRecoverGcpVmNewSourceNetworkConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverGcpVmNewSourceNetworkConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


