/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewPinningConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewPinningConfig{}

// ViewPinningConfig Specifies the pinning config of a view.
type ViewPinningConfig struct {
	// Specifies if view pinning is enabled. If set to true, view will be pinned to SSD and view data will be stored there.
	Enabled NullableBool `json:"enabled"`
	// Specifies the timestamp when view pinning config is last updated.
	LastUpdatedTimestampSecs NullableInt64 `json:"lastUpdatedTimestampSecs,omitempty"`
	// Specifies the time to pin files after last access.
	PinnedTimeSecs NullableInt64 `json:"pinnedTimeSecs,omitempty"`
}

type _ViewPinningConfig ViewPinningConfig

// NewViewPinningConfig instantiates a new ViewPinningConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewPinningConfig(enabled NullableBool) *ViewPinningConfig {
	this := ViewPinningConfig{}
	this.Enabled = enabled
	return &this
}

// NewViewPinningConfigWithDefaults instantiates a new ViewPinningConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewPinningConfigWithDefaults() *ViewPinningConfig {
	this := ViewPinningConfig{}
	return &this
}

// GetEnabled returns the Enabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *ViewPinningConfig) GetEnabled() bool {
	if o == nil || o.Enabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewPinningConfig) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// SetEnabled sets field value
func (o *ViewPinningConfig) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}

// GetLastUpdatedTimestampSecs returns the LastUpdatedTimestampSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewPinningConfig) GetLastUpdatedTimestampSecs() int64 {
	if o == nil || IsNil(o.LastUpdatedTimestampSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimestampSecs.Get()
}

// GetLastUpdatedTimestampSecsOk returns a tuple with the LastUpdatedTimestampSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewPinningConfig) GetLastUpdatedTimestampSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdatedTimestampSecs.Get(), o.LastUpdatedTimestampSecs.IsSet()
}

// HasLastUpdatedTimestampSecs returns a boolean if a field has been set.
func (o *ViewPinningConfig) HasLastUpdatedTimestampSecs() bool {
	if o != nil && o.LastUpdatedTimestampSecs.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedTimestampSecs gets a reference to the given NullableInt64 and assigns it to the LastUpdatedTimestampSecs field.
func (o *ViewPinningConfig) SetLastUpdatedTimestampSecs(v int64) {
	o.LastUpdatedTimestampSecs.Set(&v)
}
// SetLastUpdatedTimestampSecsNil sets the value for LastUpdatedTimestampSecs to be an explicit nil
func (o *ViewPinningConfig) SetLastUpdatedTimestampSecsNil() {
	o.LastUpdatedTimestampSecs.Set(nil)
}

// UnsetLastUpdatedTimestampSecs ensures that no value is present for LastUpdatedTimestampSecs, not even an explicit nil
func (o *ViewPinningConfig) UnsetLastUpdatedTimestampSecs() {
	o.LastUpdatedTimestampSecs.Unset()
}

// GetPinnedTimeSecs returns the PinnedTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewPinningConfig) GetPinnedTimeSecs() int64 {
	if o == nil || IsNil(o.PinnedTimeSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.PinnedTimeSecs.Get()
}

// GetPinnedTimeSecsOk returns a tuple with the PinnedTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewPinningConfig) GetPinnedTimeSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PinnedTimeSecs.Get(), o.PinnedTimeSecs.IsSet()
}

// HasPinnedTimeSecs returns a boolean if a field has been set.
func (o *ViewPinningConfig) HasPinnedTimeSecs() bool {
	if o != nil && o.PinnedTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetPinnedTimeSecs gets a reference to the given NullableInt64 and assigns it to the PinnedTimeSecs field.
func (o *ViewPinningConfig) SetPinnedTimeSecs(v int64) {
	o.PinnedTimeSecs.Set(&v)
}
// SetPinnedTimeSecsNil sets the value for PinnedTimeSecs to be an explicit nil
func (o *ViewPinningConfig) SetPinnedTimeSecsNil() {
	o.PinnedTimeSecs.Set(nil)
}

// UnsetPinnedTimeSecs ensures that no value is present for PinnedTimeSecs, not even an explicit nil
func (o *ViewPinningConfig) UnsetPinnedTimeSecs() {
	o.PinnedTimeSecs.Unset()
}

func (o ViewPinningConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewPinningConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["enabled"] = o.Enabled.Get()
	if o.LastUpdatedTimestampSecs.IsSet() {
		toSerialize["lastUpdatedTimestampSecs"] = o.LastUpdatedTimestampSecs.Get()
	}
	if o.PinnedTimeSecs.IsSet() {
		toSerialize["pinnedTimeSecs"] = o.PinnedTimeSecs.Get()
	}
	return toSerialize, nil
}

func (o *ViewPinningConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewPinningConfig := _ViewPinningConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewPinningConfig)

	if err != nil {
		return err
	}

	*o = ViewPinningConfig(varViewPinningConfig)

	return err
}

type NullableViewPinningConfig struct {
	value *ViewPinningConfig
	isSet bool
}

func (v NullableViewPinningConfig) Get() *ViewPinningConfig {
	return v.value
}

func (v *NullableViewPinningConfig) Set(val *ViewPinningConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableViewPinningConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableViewPinningConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewPinningConfig(val *ViewPinningConfig) *NullableViewPinningConfig {
	return &NullableViewPinningConfig{value: val, isSet: true}
}

func (v NullableViewPinningConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewPinningConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


