/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverVmwareParamsRecoverVmParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverVmwareParamsRecoverVmParams{}

// RecoverVmwareParamsRecoverVmParams Specifies the parameters to recover VMware VM.
type RecoverVmwareParamsRecoverVmParams struct {
	// Specifies the Protection Group Runs params to recover. All the VM's that are successfully backed up by specified Runs will be recovered. This can be specified along with individual snapshots of VMs. User has to make sure that specified Object snapshots and Protection Group Runs should not have any intersection. For example, user cannot specify multiple Runs which has same Object or an Object snapshot and a Run which has same Object's snapshot.
	RecoverProtectionGroupRunsParams []RecoverProtectionGroupRunParams `json:"recoverProtectionGroupRunsParams,omitempty"`
	// Specifies the customization for the VMs being restored.
	RestoreObjectCustomizations []RestoreObjectCustomization `json:"restoreObjectCustomizations,omitempty"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	VmwareTargetParams NullableRecoverVmwareVmParamsVmwareTargetParams `json:"vmwareTargetParams,omitempty"`
}

type _RecoverVmwareParamsRecoverVmParams RecoverVmwareParamsRecoverVmParams

// NewRecoverVmwareParamsRecoverVmParams instantiates a new RecoverVmwareParamsRecoverVmParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVmwareParamsRecoverVmParams(targetEnvironment string) *RecoverVmwareParamsRecoverVmParams {
	this := RecoverVmwareParamsRecoverVmParams{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverVmwareParamsRecoverVmParamsWithDefaults instantiates a new RecoverVmwareParamsRecoverVmParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVmwareParamsRecoverVmParamsWithDefaults() *RecoverVmwareParamsRecoverVmParams {
	this := RecoverVmwareParamsRecoverVmParams{}
	return &this
}

// GetRecoverProtectionGroupRunsParams returns the RecoverProtectionGroupRunsParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParamsRecoverVmParams) GetRecoverProtectionGroupRunsParams() []RecoverProtectionGroupRunParams {
	if o == nil {
		var ret []RecoverProtectionGroupRunParams
		return ret
	}
	return o.RecoverProtectionGroupRunsParams
}

// GetRecoverProtectionGroupRunsParamsOk returns a tuple with the RecoverProtectionGroupRunsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParamsRecoverVmParams) GetRecoverProtectionGroupRunsParamsOk() ([]RecoverProtectionGroupRunParams, bool) {
	if o == nil || IsNil(o.RecoverProtectionGroupRunsParams) {
		return nil, false
	}
	return o.RecoverProtectionGroupRunsParams, true
}

// HasRecoverProtectionGroupRunsParams returns a boolean if a field has been set.
func (o *RecoverVmwareParamsRecoverVmParams) HasRecoverProtectionGroupRunsParams() bool {
	if o != nil && !IsNil(o.RecoverProtectionGroupRunsParams) {
		return true
	}

	return false
}

// SetRecoverProtectionGroupRunsParams gets a reference to the given []RecoverProtectionGroupRunParams and assigns it to the RecoverProtectionGroupRunsParams field.
func (o *RecoverVmwareParamsRecoverVmParams) SetRecoverProtectionGroupRunsParams(v []RecoverProtectionGroupRunParams) {
	o.RecoverProtectionGroupRunsParams = v
}

// GetRestoreObjectCustomizations returns the RestoreObjectCustomizations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParamsRecoverVmParams) GetRestoreObjectCustomizations() []RestoreObjectCustomization {
	if o == nil {
		var ret []RestoreObjectCustomization
		return ret
	}
	return o.RestoreObjectCustomizations
}

// GetRestoreObjectCustomizationsOk returns a tuple with the RestoreObjectCustomizations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParamsRecoverVmParams) GetRestoreObjectCustomizationsOk() ([]RestoreObjectCustomization, bool) {
	if o == nil || IsNil(o.RestoreObjectCustomizations) {
		return nil, false
	}
	return o.RestoreObjectCustomizations, true
}

// HasRestoreObjectCustomizations returns a boolean if a field has been set.
func (o *RecoverVmwareParamsRecoverVmParams) HasRestoreObjectCustomizations() bool {
	if o != nil && !IsNil(o.RestoreObjectCustomizations) {
		return true
	}

	return false
}

// SetRestoreObjectCustomizations gets a reference to the given []RestoreObjectCustomization and assigns it to the RestoreObjectCustomizations field.
func (o *RecoverVmwareParamsRecoverVmParams) SetRestoreObjectCustomizations(v []RestoreObjectCustomization) {
	o.RestoreObjectCustomizations = v
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverVmwareParamsRecoverVmParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverVmwareParamsRecoverVmParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverVmwareParamsRecoverVmParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetVmwareTargetParams returns the VmwareTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareParamsRecoverVmParams) GetVmwareTargetParams() RecoverVmwareVmParamsVmwareTargetParams {
	if o == nil || IsNil(o.VmwareTargetParams.Get()) {
		var ret RecoverVmwareVmParamsVmwareTargetParams
		return ret
	}
	return *o.VmwareTargetParams.Get()
}

// GetVmwareTargetParamsOk returns a tuple with the VmwareTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareParamsRecoverVmParams) GetVmwareTargetParamsOk() (*RecoverVmwareVmParamsVmwareTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.VmwareTargetParams.Get(), o.VmwareTargetParams.IsSet()
}

// HasVmwareTargetParams returns a boolean if a field has been set.
func (o *RecoverVmwareParamsRecoverVmParams) HasVmwareTargetParams() bool {
	if o != nil && o.VmwareTargetParams.IsSet() {
		return true
	}

	return false
}

// SetVmwareTargetParams gets a reference to the given NullableRecoverVmwareVmParamsVmwareTargetParams and assigns it to the VmwareTargetParams field.
func (o *RecoverVmwareParamsRecoverVmParams) SetVmwareTargetParams(v RecoverVmwareVmParamsVmwareTargetParams) {
	o.VmwareTargetParams.Set(&v)
}
// SetVmwareTargetParamsNil sets the value for VmwareTargetParams to be an explicit nil
func (o *RecoverVmwareParamsRecoverVmParams) SetVmwareTargetParamsNil() {
	o.VmwareTargetParams.Set(nil)
}

// UnsetVmwareTargetParams ensures that no value is present for VmwareTargetParams, not even an explicit nil
func (o *RecoverVmwareParamsRecoverVmParams) UnsetVmwareTargetParams() {
	o.VmwareTargetParams.Unset()
}

func (o RecoverVmwareParamsRecoverVmParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverVmwareParamsRecoverVmParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RecoverProtectionGroupRunsParams != nil {
		toSerialize["recoverProtectionGroupRunsParams"] = o.RecoverProtectionGroupRunsParams
	}
	if o.RestoreObjectCustomizations != nil {
		toSerialize["restoreObjectCustomizations"] = o.RestoreObjectCustomizations
	}
	toSerialize["targetEnvironment"] = o.TargetEnvironment
	if o.VmwareTargetParams.IsSet() {
		toSerialize["vmwareTargetParams"] = o.VmwareTargetParams.Get()
	}
	return toSerialize, nil
}

func (o *RecoverVmwareParamsRecoverVmParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetEnvironment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverVmwareParamsRecoverVmParams := _RecoverVmwareParamsRecoverVmParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverVmwareParamsRecoverVmParams)

	if err != nil {
		return err
	}

	*o = RecoverVmwareParamsRecoverVmParams(varRecoverVmwareParamsRecoverVmParams)

	return err
}

type NullableRecoverVmwareParamsRecoverVmParams struct {
	value *RecoverVmwareParamsRecoverVmParams
	isSet bool
}

func (v NullableRecoverVmwareParamsRecoverVmParams) Get() *RecoverVmwareParamsRecoverVmParams {
	return v.value
}

func (v *NullableRecoverVmwareParamsRecoverVmParams) Set(val *RecoverVmwareParamsRecoverVmParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVmwareParamsRecoverVmParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVmwareParamsRecoverVmParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVmwareParamsRecoverVmParams(val *RecoverVmwareParamsRecoverVmParams) *NullableRecoverVmwareParamsRecoverVmParams {
	return &NullableRecoverVmwareParamsRecoverVmParams{value: val, isSet: true}
}

func (v NullableRecoverVmwareParamsRecoverVmParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVmwareParamsRecoverVmParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


