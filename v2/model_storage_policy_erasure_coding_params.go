/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the StoragePolicyErasureCodingParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePolicyErasureCodingParams{}

// StoragePolicyErasureCodingParams Specifies the erasure coding parameters for a Storage Domain.
type StoragePolicyErasureCodingParams struct {
	// Specifies the time in seconds when erasure coding starts.
	DelaySecs NullableInt32 `json:"delaySecs,omitempty"`
	// Specifies whether to enable erasure coding on a Storage Domain.
	Enabled NullableBool `json:"enabled"`
	// Specifies whether inline erasure coding is enabled. This field is appliciable only if enabled is set to true.
	InlineEnabled NullableBool `json:"inlineEnabled,omitempty"`
	// Specifies the number of coded stripes.
	NumCodedStripes NullableInt32 `json:"numCodedStripes"`
	// Specifies the number of data stripes.
	NumDataStripes NullableInt32 `json:"numDataStripes"`
}

type _StoragePolicyErasureCodingParams StoragePolicyErasureCodingParams

// NewStoragePolicyErasureCodingParams instantiates a new StoragePolicyErasureCodingParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePolicyErasureCodingParams(enabled NullableBool, numCodedStripes NullableInt32, numDataStripes NullableInt32) *StoragePolicyErasureCodingParams {
	this := StoragePolicyErasureCodingParams{}
	this.Enabled = enabled
	this.NumCodedStripes = numCodedStripes
	this.NumDataStripes = numDataStripes
	return &this
}

// NewStoragePolicyErasureCodingParamsWithDefaults instantiates a new StoragePolicyErasureCodingParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePolicyErasureCodingParamsWithDefaults() *StoragePolicyErasureCodingParams {
	this := StoragePolicyErasureCodingParams{}
	return &this
}

// GetDelaySecs returns the DelaySecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicyErasureCodingParams) GetDelaySecs() int32 {
	if o == nil || IsNil(o.DelaySecs.Get()) {
		var ret int32
		return ret
	}
	return *o.DelaySecs.Get()
}

// GetDelaySecsOk returns a tuple with the DelaySecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicyErasureCodingParams) GetDelaySecsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DelaySecs.Get(), o.DelaySecs.IsSet()
}

// HasDelaySecs returns a boolean if a field has been set.
func (o *StoragePolicyErasureCodingParams) HasDelaySecs() bool {
	if o != nil && o.DelaySecs.IsSet() {
		return true
	}

	return false
}

// SetDelaySecs gets a reference to the given NullableInt32 and assigns it to the DelaySecs field.
func (o *StoragePolicyErasureCodingParams) SetDelaySecs(v int32) {
	o.DelaySecs.Set(&v)
}
// SetDelaySecsNil sets the value for DelaySecs to be an explicit nil
func (o *StoragePolicyErasureCodingParams) SetDelaySecsNil() {
	o.DelaySecs.Set(nil)
}

// UnsetDelaySecs ensures that no value is present for DelaySecs, not even an explicit nil
func (o *StoragePolicyErasureCodingParams) UnsetDelaySecs() {
	o.DelaySecs.Unset()
}

// GetEnabled returns the Enabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *StoragePolicyErasureCodingParams) GetEnabled() bool {
	if o == nil || o.Enabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicyErasureCodingParams) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// SetEnabled sets field value
func (o *StoragePolicyErasureCodingParams) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}

// GetInlineEnabled returns the InlineEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicyErasureCodingParams) GetInlineEnabled() bool {
	if o == nil || IsNil(o.InlineEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.InlineEnabled.Get()
}

// GetInlineEnabledOk returns a tuple with the InlineEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicyErasureCodingParams) GetInlineEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InlineEnabled.Get(), o.InlineEnabled.IsSet()
}

// HasInlineEnabled returns a boolean if a field has been set.
func (o *StoragePolicyErasureCodingParams) HasInlineEnabled() bool {
	if o != nil && o.InlineEnabled.IsSet() {
		return true
	}

	return false
}

// SetInlineEnabled gets a reference to the given NullableBool and assigns it to the InlineEnabled field.
func (o *StoragePolicyErasureCodingParams) SetInlineEnabled(v bool) {
	o.InlineEnabled.Set(&v)
}
// SetInlineEnabledNil sets the value for InlineEnabled to be an explicit nil
func (o *StoragePolicyErasureCodingParams) SetInlineEnabledNil() {
	o.InlineEnabled.Set(nil)
}

// UnsetInlineEnabled ensures that no value is present for InlineEnabled, not even an explicit nil
func (o *StoragePolicyErasureCodingParams) UnsetInlineEnabled() {
	o.InlineEnabled.Unset()
}

// GetNumCodedStripes returns the NumCodedStripes field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *StoragePolicyErasureCodingParams) GetNumCodedStripes() int32 {
	if o == nil || o.NumCodedStripes.Get() == nil {
		var ret int32
		return ret
	}

	return *o.NumCodedStripes.Get()
}

// GetNumCodedStripesOk returns a tuple with the NumCodedStripes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicyErasureCodingParams) GetNumCodedStripesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumCodedStripes.Get(), o.NumCodedStripes.IsSet()
}

// SetNumCodedStripes sets field value
func (o *StoragePolicyErasureCodingParams) SetNumCodedStripes(v int32) {
	o.NumCodedStripes.Set(&v)
}

// GetNumDataStripes returns the NumDataStripes field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *StoragePolicyErasureCodingParams) GetNumDataStripes() int32 {
	if o == nil || o.NumDataStripes.Get() == nil {
		var ret int32
		return ret
	}

	return *o.NumDataStripes.Get()
}

// GetNumDataStripesOk returns a tuple with the NumDataStripes field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicyErasureCodingParams) GetNumDataStripesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumDataStripes.Get(), o.NumDataStripes.IsSet()
}

// SetNumDataStripes sets field value
func (o *StoragePolicyErasureCodingParams) SetNumDataStripes(v int32) {
	o.NumDataStripes.Set(&v)
}

func (o StoragePolicyErasureCodingParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePolicyErasureCodingParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DelaySecs.IsSet() {
		toSerialize["delaySecs"] = o.DelaySecs.Get()
	}
	toSerialize["enabled"] = o.Enabled.Get()
	if o.InlineEnabled.IsSet() {
		toSerialize["inlineEnabled"] = o.InlineEnabled.Get()
	}
	toSerialize["numCodedStripes"] = o.NumCodedStripes.Get()
	toSerialize["numDataStripes"] = o.NumDataStripes.Get()
	return toSerialize, nil
}

func (o *StoragePolicyErasureCodingParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"enabled",
		"numCodedStripes",
		"numDataStripes",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStoragePolicyErasureCodingParams := _StoragePolicyErasureCodingParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStoragePolicyErasureCodingParams)

	if err != nil {
		return err
	}

	*o = StoragePolicyErasureCodingParams(varStoragePolicyErasureCodingParams)

	return err
}

type NullableStoragePolicyErasureCodingParams struct {
	value *StoragePolicyErasureCodingParams
	isSet bool
}

func (v NullableStoragePolicyErasureCodingParams) Get() *StoragePolicyErasureCodingParams {
	return v.value
}

func (v *NullableStoragePolicyErasureCodingParams) Set(val *StoragePolicyErasureCodingParams) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePolicyErasureCodingParams) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePolicyErasureCodingParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePolicyErasureCodingParams(val *StoragePolicyErasureCodingParams) *NullableStoragePolicyErasureCodingParams {
	return &NullableStoragePolicyErasureCodingParams{value: val, isSet: true}
}

func (v NullableStoragePolicyErasureCodingParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePolicyErasureCodingParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


