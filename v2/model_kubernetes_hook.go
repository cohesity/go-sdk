/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KubernetesHook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesHook{}

// KubernetesHook Specifies the set of parameters for applying scripts.
type KubernetesHook struct {
	// Specifies the commands.
	Commands []string `json:"commands"`
	// Specifies the name of the container.
	Container NullableString `json:"container,omitempty"`
	// Specifies whether to fail on error or not.
	FailOnError NullableBool `json:"failOnError,omitempty"`
	// Specifies timeout for the operation.
	Timeout NullableInt64 `json:"timeout,omitempty"`
}

type _KubernetesHook KubernetesHook

// NewKubernetesHook instantiates a new KubernetesHook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesHook(commands []string) *KubernetesHook {
	this := KubernetesHook{}
	this.Commands = commands
	return &this
}

// NewKubernetesHookWithDefaults instantiates a new KubernetesHook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesHookWithDefaults() *KubernetesHook {
	this := KubernetesHook{}
	return &this
}

// GetCommands returns the Commands field value
func (o *KubernetesHook) GetCommands() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Commands
}

// GetCommandsOk returns a tuple with the Commands field value
// and a boolean to check if the value has been set.
func (o *KubernetesHook) GetCommandsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Commands, true
}

// SetCommands sets field value
func (o *KubernetesHook) SetCommands(v []string) {
	o.Commands = v
}

// GetContainer returns the Container field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesHook) GetContainer() string {
	if o == nil || IsNil(o.Container.Get()) {
		var ret string
		return ret
	}
	return *o.Container.Get()
}

// GetContainerOk returns a tuple with the Container field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesHook) GetContainerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Container.Get(), o.Container.IsSet()
}

// HasContainer returns a boolean if a field has been set.
func (o *KubernetesHook) HasContainer() bool {
	if o != nil && o.Container.IsSet() {
		return true
	}

	return false
}

// SetContainer gets a reference to the given NullableString and assigns it to the Container field.
func (o *KubernetesHook) SetContainer(v string) {
	o.Container.Set(&v)
}
// SetContainerNil sets the value for Container to be an explicit nil
func (o *KubernetesHook) SetContainerNil() {
	o.Container.Set(nil)
}

// UnsetContainer ensures that no value is present for Container, not even an explicit nil
func (o *KubernetesHook) UnsetContainer() {
	o.Container.Unset()
}

// GetFailOnError returns the FailOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesHook) GetFailOnError() bool {
	if o == nil || IsNil(o.FailOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.FailOnError.Get()
}

// GetFailOnErrorOk returns a tuple with the FailOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesHook) GetFailOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailOnError.Get(), o.FailOnError.IsSet()
}

// HasFailOnError returns a boolean if a field has been set.
func (o *KubernetesHook) HasFailOnError() bool {
	if o != nil && o.FailOnError.IsSet() {
		return true
	}

	return false
}

// SetFailOnError gets a reference to the given NullableBool and assigns it to the FailOnError field.
func (o *KubernetesHook) SetFailOnError(v bool) {
	o.FailOnError.Set(&v)
}
// SetFailOnErrorNil sets the value for FailOnError to be an explicit nil
func (o *KubernetesHook) SetFailOnErrorNil() {
	o.FailOnError.Set(nil)
}

// UnsetFailOnError ensures that no value is present for FailOnError, not even an explicit nil
func (o *KubernetesHook) UnsetFailOnError() {
	o.FailOnError.Unset()
}

// GetTimeout returns the Timeout field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesHook) GetTimeout() int64 {
	if o == nil || IsNil(o.Timeout.Get()) {
		var ret int64
		return ret
	}
	return *o.Timeout.Get()
}

// GetTimeoutOk returns a tuple with the Timeout field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesHook) GetTimeoutOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timeout.Get(), o.Timeout.IsSet()
}

// HasTimeout returns a boolean if a field has been set.
func (o *KubernetesHook) HasTimeout() bool {
	if o != nil && o.Timeout.IsSet() {
		return true
	}

	return false
}

// SetTimeout gets a reference to the given NullableInt64 and assigns it to the Timeout field.
func (o *KubernetesHook) SetTimeout(v int64) {
	o.Timeout.Set(&v)
}
// SetTimeoutNil sets the value for Timeout to be an explicit nil
func (o *KubernetesHook) SetTimeoutNil() {
	o.Timeout.Set(nil)
}

// UnsetTimeout ensures that no value is present for Timeout, not even an explicit nil
func (o *KubernetesHook) UnsetTimeout() {
	o.Timeout.Unset()
}

func (o KubernetesHook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesHook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commands"] = o.Commands
	if o.Container.IsSet() {
		toSerialize["container"] = o.Container.Get()
	}
	if o.FailOnError.IsSet() {
		toSerialize["failOnError"] = o.FailOnError.Get()
	}
	if o.Timeout.IsSet() {
		toSerialize["timeout"] = o.Timeout.Get()
	}
	return toSerialize, nil
}

func (o *KubernetesHook) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commands",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubernetesHook := _KubernetesHook{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKubernetesHook)

	if err != nil {
		return err
	}

	*o = KubernetesHook(varKubernetesHook)

	return err
}

type NullableKubernetesHook struct {
	value *KubernetesHook
	isSet bool
}

func (v NullableKubernetesHook) Get() *KubernetesHook {
	return v.value
}

func (v *NullableKubernetesHook) Set(val *KubernetesHook) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesHook) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesHook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesHook(val *KubernetesHook) *NullableKubernetesHook {
	return &NullableKubernetesHook{value: val, isSet: true}
}

func (v NullableKubernetesHook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesHook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


