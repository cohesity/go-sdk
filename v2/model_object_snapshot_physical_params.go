/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ObjectSnapshotPhysicalParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectSnapshotPhysicalParams{}

// ObjectSnapshotPhysicalParams Specifies the parameters specific to Physical type snapshot.
type ObjectSnapshotPhysicalParams struct {
	// Specifies if system backup was enabled for the source in that particular run.
	EnableSystemBackup NullableBool `json:"enableSystemBackup,omitempty"`
	// Specifies the protection type of Physical snapshots.
	ProtectionType NullableString `json:"protectionType,omitempty"`
}

// NewObjectSnapshotPhysicalParams instantiates a new ObjectSnapshotPhysicalParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectSnapshotPhysicalParams() *ObjectSnapshotPhysicalParams {
	this := ObjectSnapshotPhysicalParams{}
	return &this
}

// NewObjectSnapshotPhysicalParamsWithDefaults instantiates a new ObjectSnapshotPhysicalParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectSnapshotPhysicalParamsWithDefaults() *ObjectSnapshotPhysicalParams {
	this := ObjectSnapshotPhysicalParams{}
	return &this
}

// GetEnableSystemBackup returns the EnableSystemBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshotPhysicalParams) GetEnableSystemBackup() bool {
	if o == nil || IsNil(o.EnableSystemBackup.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSystemBackup.Get()
}

// GetEnableSystemBackupOk returns a tuple with the EnableSystemBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshotPhysicalParams) GetEnableSystemBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSystemBackup.Get(), o.EnableSystemBackup.IsSet()
}

// HasEnableSystemBackup returns a boolean if a field has been set.
func (o *ObjectSnapshotPhysicalParams) HasEnableSystemBackup() bool {
	if o != nil && o.EnableSystemBackup.IsSet() {
		return true
	}

	return false
}

// SetEnableSystemBackup gets a reference to the given NullableBool and assigns it to the EnableSystemBackup field.
func (o *ObjectSnapshotPhysicalParams) SetEnableSystemBackup(v bool) {
	o.EnableSystemBackup.Set(&v)
}
// SetEnableSystemBackupNil sets the value for EnableSystemBackup to be an explicit nil
func (o *ObjectSnapshotPhysicalParams) SetEnableSystemBackupNil() {
	o.EnableSystemBackup.Set(nil)
}

// UnsetEnableSystemBackup ensures that no value is present for EnableSystemBackup, not even an explicit nil
func (o *ObjectSnapshotPhysicalParams) UnsetEnableSystemBackup() {
	o.EnableSystemBackup.Unset()
}

// GetProtectionType returns the ProtectionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshotPhysicalParams) GetProtectionType() string {
	if o == nil || IsNil(o.ProtectionType.Get()) {
		var ret string
		return ret
	}
	return *o.ProtectionType.Get()
}

// GetProtectionTypeOk returns a tuple with the ProtectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshotPhysicalParams) GetProtectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProtectionType.Get(), o.ProtectionType.IsSet()
}

// HasProtectionType returns a boolean if a field has been set.
func (o *ObjectSnapshotPhysicalParams) HasProtectionType() bool {
	if o != nil && o.ProtectionType.IsSet() {
		return true
	}

	return false
}

// SetProtectionType gets a reference to the given NullableString and assigns it to the ProtectionType field.
func (o *ObjectSnapshotPhysicalParams) SetProtectionType(v string) {
	o.ProtectionType.Set(&v)
}
// SetProtectionTypeNil sets the value for ProtectionType to be an explicit nil
func (o *ObjectSnapshotPhysicalParams) SetProtectionTypeNil() {
	o.ProtectionType.Set(nil)
}

// UnsetProtectionType ensures that no value is present for ProtectionType, not even an explicit nil
func (o *ObjectSnapshotPhysicalParams) UnsetProtectionType() {
	o.ProtectionType.Unset()
}

func (o ObjectSnapshotPhysicalParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectSnapshotPhysicalParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableSystemBackup.IsSet() {
		toSerialize["enableSystemBackup"] = o.EnableSystemBackup.Get()
	}
	if o.ProtectionType.IsSet() {
		toSerialize["protectionType"] = o.ProtectionType.Get()
	}
	return toSerialize, nil
}

type NullableObjectSnapshotPhysicalParams struct {
	value *ObjectSnapshotPhysicalParams
	isSet bool
}

func (v NullableObjectSnapshotPhysicalParams) Get() *ObjectSnapshotPhysicalParams {
	return v.value
}

func (v *NullableObjectSnapshotPhysicalParams) Set(val *ObjectSnapshotPhysicalParams) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectSnapshotPhysicalParams) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectSnapshotPhysicalParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectSnapshotPhysicalParams(val *ObjectSnapshotPhysicalParams) *NullableObjectSnapshotPhysicalParams {
	return &NullableObjectSnapshotPhysicalParams{value: val, isSet: true}
}

func (v NullableObjectSnapshotPhysicalParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectSnapshotPhysicalParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


