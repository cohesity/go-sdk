/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClusterOperationAttribute type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterOperationAttribute{}

// ClusterOperationAttribute Name value pair representing an attribute of the operation
type ClusterOperationAttribute struct {
	// Name of the attribute. Following attributres are possible. * `kUpgradePackageName` - Indicates the name of the package for   operation types is from enum `cluster_software_operation_type` that   represent upgrade related operations. * `kPatchPackageName` - Indicates the   name of the package for operation types is from enum   `cluster_software_operation_type` that represents patch related   operations. * `kPackageType` specifies whether operation is related to upgrade   or patch.  This will have values from enum `cluster_package_type`. * `kPackageSubType` specifies package sub type.  This will have values   from enum `cluster_package_sub_type`. 
	Name string `json:"name"`
	Value string `json:"value"`
}

type _ClusterOperationAttribute ClusterOperationAttribute

// NewClusterOperationAttribute instantiates a new ClusterOperationAttribute object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterOperationAttribute(name string, value string) *ClusterOperationAttribute {
	this := ClusterOperationAttribute{}
	this.Name = name
	this.Value = value
	return &this
}

// NewClusterOperationAttributeWithDefaults instantiates a new ClusterOperationAttribute object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterOperationAttributeWithDefaults() *ClusterOperationAttribute {
	this := ClusterOperationAttribute{}
	return &this
}

// GetName returns the Name field value
func (o *ClusterOperationAttribute) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ClusterOperationAttribute) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ClusterOperationAttribute) SetName(v string) {
	o.Name = v
}

// GetValue returns the Value field value
func (o *ClusterOperationAttribute) GetValue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Value
}

// GetValueOk returns a tuple with the Value field value
// and a boolean to check if the value has been set.
func (o *ClusterOperationAttribute) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Value, true
}

// SetValue sets field value
func (o *ClusterOperationAttribute) SetValue(v string) {
	o.Value = v
}

func (o ClusterOperationAttribute) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterOperationAttribute) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	toSerialize["value"] = o.Value
	return toSerialize, nil
}

func (o *ClusterOperationAttribute) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"value",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClusterOperationAttribute := _ClusterOperationAttribute{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClusterOperationAttribute)

	if err != nil {
		return err
	}

	*o = ClusterOperationAttribute(varClusterOperationAttribute)

	return err
}

type NullableClusterOperationAttribute struct {
	value *ClusterOperationAttribute
	isSet bool
}

func (v NullableClusterOperationAttribute) Get() *ClusterOperationAttribute {
	return v.value
}

func (v *NullableClusterOperationAttribute) Set(val *ClusterOperationAttribute) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterOperationAttribute) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterOperationAttribute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterOperationAttribute(val *ClusterOperationAttribute) *NullableClusterOperationAttribute {
	return &NullableClusterOperationAttribute{value: val, isSet: true}
}

func (v NullableClusterOperationAttribute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterOperationAttribute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


