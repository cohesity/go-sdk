/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InfectedObject type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InfectedObject{}

// InfectedObject Specifies an infected object.
type InfectedObject struct {
	// Specifies the bucket name of the infected object.
	BucketName NullableString `json:"bucketName"`
	// Specifies the key name of the infected object.
	ObjectName NullableString `json:"objectName"`
	// Specifies the version id of the infected object.
	VersionId NullableString `json:"versionId,omitempty"`
}

type _InfectedObject InfectedObject

// NewInfectedObject instantiates a new InfectedObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfectedObject(bucketName NullableString, objectName NullableString) *InfectedObject {
	this := InfectedObject{}
	this.BucketName = bucketName
	this.ObjectName = objectName
	return &this
}

// NewInfectedObjectWithDefaults instantiates a new InfectedObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfectedObjectWithDefaults() *InfectedObject {
	this := InfectedObject{}
	return &this
}

// GetBucketName returns the BucketName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *InfectedObject) GetBucketName() string {
	if o == nil || o.BucketName.Get() == nil {
		var ret string
		return ret
	}

	return *o.BucketName.Get()
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedObject) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BucketName.Get(), o.BucketName.IsSet()
}

// SetBucketName sets field value
func (o *InfectedObject) SetBucketName(v string) {
	o.BucketName.Set(&v)
}

// GetObjectName returns the ObjectName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *InfectedObject) GetObjectName() string {
	if o == nil || o.ObjectName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ObjectName.Get()
}

// GetObjectNameOk returns a tuple with the ObjectName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedObject) GetObjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectName.Get(), o.ObjectName.IsSet()
}

// SetObjectName sets field value
func (o *InfectedObject) SetObjectName(v string) {
	o.ObjectName.Set(&v)
}

// GetVersionId returns the VersionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedObject) GetVersionId() string {
	if o == nil || IsNil(o.VersionId.Get()) {
		var ret string
		return ret
	}
	return *o.VersionId.Get()
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedObject) GetVersionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionId.Get(), o.VersionId.IsSet()
}

// HasVersionId returns a boolean if a field has been set.
func (o *InfectedObject) HasVersionId() bool {
	if o != nil && o.VersionId.IsSet() {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given NullableString and assigns it to the VersionId field.
func (o *InfectedObject) SetVersionId(v string) {
	o.VersionId.Set(&v)
}
// SetVersionIdNil sets the value for VersionId to be an explicit nil
func (o *InfectedObject) SetVersionIdNil() {
	o.VersionId.Set(nil)
}

// UnsetVersionId ensures that no value is present for VersionId, not even an explicit nil
func (o *InfectedObject) UnsetVersionId() {
	o.VersionId.Unset()
}

func (o InfectedObject) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InfectedObject) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucketName"] = o.BucketName.Get()
	toSerialize["objectName"] = o.ObjectName.Get()
	if o.VersionId.IsSet() {
		toSerialize["versionId"] = o.VersionId.Get()
	}
	return toSerialize, nil
}

func (o *InfectedObject) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucketName",
		"objectName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInfectedObject := _InfectedObject{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInfectedObject)

	if err != nil {
		return err
	}

	*o = InfectedObject(varInfectedObject)

	return err
}

type NullableInfectedObject struct {
	value *InfectedObject
	isSet bool
}

func (v NullableInfectedObject) Get() *InfectedObject {
	return v.value
}

func (v *NullableInfectedObject) Set(val *InfectedObject) {
	v.value = val
	v.isSet = true
}

func (v NullableInfectedObject) IsSet() bool {
	return v.isSet
}

func (v *NullableInfectedObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfectedObject(val *InfectedObject) *NullableInfectedObject {
	return &NullableInfectedObject{value: val, isSet: true}
}

func (v NullableInfectedObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfectedObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


