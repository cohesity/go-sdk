/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DataTieringAnalysisGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTieringAnalysisGroup{}

// DataTieringAnalysisGroup Specifies the data tiering analysis group.
type DataTieringAnalysisGroup struct {
	// Specifies the name of the data tiering analysis group.
	Name NullableString `json:"name"`
	Schedule *DataTieringSchedule `json:"schedule,omitempty"`
	Source *DataTieringSource `json:"source,omitempty"`
	// Specifies the ID of the data tiering analysis group.
	Id NullableString `json:"id,omitempty"`
	LastRun *DataTieringAnalysisGroupRun `json:"lastRun,omitempty"`
	LastSuccessfulRun *DataTieringAnalysisGroupRun `json:"lastSuccessfulRun,omitempty"`
}

type _DataTieringAnalysisGroup DataTieringAnalysisGroup

// NewDataTieringAnalysisGroup instantiates a new DataTieringAnalysisGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTieringAnalysisGroup(name NullableString) *DataTieringAnalysisGroup {
	this := DataTieringAnalysisGroup{}
	this.Name = name
	return &this
}

// NewDataTieringAnalysisGroupWithDefaults instantiates a new DataTieringAnalysisGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTieringAnalysisGroupWithDefaults() *DataTieringAnalysisGroup {
	this := DataTieringAnalysisGroup{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DataTieringAnalysisGroup) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringAnalysisGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *DataTieringAnalysisGroup) SetName(v string) {
	o.Name.Set(&v)
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *DataTieringAnalysisGroup) GetSchedule() DataTieringSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret DataTieringSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringAnalysisGroup) GetScheduleOk() (*DataTieringSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *DataTieringAnalysisGroup) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given DataTieringSchedule and assigns it to the Schedule field.
func (o *DataTieringAnalysisGroup) SetSchedule(v DataTieringSchedule) {
	o.Schedule = &v
}

// GetSource returns the Source field value if set, zero value otherwise.
func (o *DataTieringAnalysisGroup) GetSource() DataTieringSource {
	if o == nil || IsNil(o.Source) {
		var ret DataTieringSource
		return ret
	}
	return *o.Source
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringAnalysisGroup) GetSourceOk() (*DataTieringSource, bool) {
	if o == nil || IsNil(o.Source) {
		return nil, false
	}
	return o.Source, true
}

// HasSource returns a boolean if a field has been set.
func (o *DataTieringAnalysisGroup) HasSource() bool {
	if o != nil && !IsNil(o.Source) {
		return true
	}

	return false
}

// SetSource gets a reference to the given DataTieringSource and assigns it to the Source field.
func (o *DataTieringAnalysisGroup) SetSource(v DataTieringSource) {
	o.Source = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringAnalysisGroup) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringAnalysisGroup) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DataTieringAnalysisGroup) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DataTieringAnalysisGroup) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DataTieringAnalysisGroup) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DataTieringAnalysisGroup) UnsetId() {
	o.Id.Unset()
}

// GetLastRun returns the LastRun field value if set, zero value otherwise.
func (o *DataTieringAnalysisGroup) GetLastRun() DataTieringAnalysisGroupRun {
	if o == nil || IsNil(o.LastRun) {
		var ret DataTieringAnalysisGroupRun
		return ret
	}
	return *o.LastRun
}

// GetLastRunOk returns a tuple with the LastRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringAnalysisGroup) GetLastRunOk() (*DataTieringAnalysisGroupRun, bool) {
	if o == nil || IsNil(o.LastRun) {
		return nil, false
	}
	return o.LastRun, true
}

// HasLastRun returns a boolean if a field has been set.
func (o *DataTieringAnalysisGroup) HasLastRun() bool {
	if o != nil && !IsNil(o.LastRun) {
		return true
	}

	return false
}

// SetLastRun gets a reference to the given DataTieringAnalysisGroupRun and assigns it to the LastRun field.
func (o *DataTieringAnalysisGroup) SetLastRun(v DataTieringAnalysisGroupRun) {
	o.LastRun = &v
}

// GetLastSuccessfulRun returns the LastSuccessfulRun field value if set, zero value otherwise.
func (o *DataTieringAnalysisGroup) GetLastSuccessfulRun() DataTieringAnalysisGroupRun {
	if o == nil || IsNil(o.LastSuccessfulRun) {
		var ret DataTieringAnalysisGroupRun
		return ret
	}
	return *o.LastSuccessfulRun
}

// GetLastSuccessfulRunOk returns a tuple with the LastSuccessfulRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringAnalysisGroup) GetLastSuccessfulRunOk() (*DataTieringAnalysisGroupRun, bool) {
	if o == nil || IsNil(o.LastSuccessfulRun) {
		return nil, false
	}
	return o.LastSuccessfulRun, true
}

// HasLastSuccessfulRun returns a boolean if a field has been set.
func (o *DataTieringAnalysisGroup) HasLastSuccessfulRun() bool {
	if o != nil && !IsNil(o.LastSuccessfulRun) {
		return true
	}

	return false
}

// SetLastSuccessfulRun gets a reference to the given DataTieringAnalysisGroupRun and assigns it to the LastSuccessfulRun field.
func (o *DataTieringAnalysisGroup) SetLastSuccessfulRun(v DataTieringAnalysisGroupRun) {
	o.LastSuccessfulRun = &v
}

func (o DataTieringAnalysisGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTieringAnalysisGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name.Get()
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	if !IsNil(o.Source) {
		toSerialize["source"] = o.Source
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.LastRun) {
		toSerialize["lastRun"] = o.LastRun
	}
	if !IsNil(o.LastSuccessfulRun) {
		toSerialize["lastSuccessfulRun"] = o.LastSuccessfulRun
	}
	return toSerialize, nil
}

func (o *DataTieringAnalysisGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDataTieringAnalysisGroup := _DataTieringAnalysisGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDataTieringAnalysisGroup)

	if err != nil {
		return err
	}

	*o = DataTieringAnalysisGroup(varDataTieringAnalysisGroup)

	return err
}

type NullableDataTieringAnalysisGroup struct {
	value *DataTieringAnalysisGroup
	isSet bool
}

func (v NullableDataTieringAnalysisGroup) Get() *DataTieringAnalysisGroup {
	return v.value
}

func (v *NullableDataTieringAnalysisGroup) Set(val *DataTieringAnalysisGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTieringAnalysisGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTieringAnalysisGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTieringAnalysisGroup(val *DataTieringAnalysisGroup) *NullableDataTieringAnalysisGroup {
	return &NullableDataTieringAnalysisGroup{value: val, isSet: true}
}

func (v NullableDataTieringAnalysisGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTieringAnalysisGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


