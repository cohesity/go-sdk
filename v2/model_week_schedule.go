/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WeekSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WeekSchedule{}

// WeekSchedule Specifies settings that define a schedule for a Protection Group runs to start on certain days of week.
type WeekSchedule struct {
	// Specifies a list of days of the week when to start Protection Group Runs. <br> Example: To run a Protection Group on every Monday and Tuesday, set the schedule with following values: <br>  unit: 'Weeks' <br>  dayOfWeek: ['Monday','Tuesday']
	DayOfWeek []string `json:"dayOfWeek"`
}

type _WeekSchedule WeekSchedule

// NewWeekSchedule instantiates a new WeekSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWeekSchedule(dayOfWeek []string) *WeekSchedule {
	this := WeekSchedule{}
	this.DayOfWeek = dayOfWeek
	return &this
}

// NewWeekScheduleWithDefaults instantiates a new WeekSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWeekScheduleWithDefaults() *WeekSchedule {
	this := WeekSchedule{}
	return &this
}

// GetDayOfWeek returns the DayOfWeek field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *WeekSchedule) GetDayOfWeek() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WeekSchedule) GetDayOfWeekOk() ([]string, bool) {
	if o == nil || IsNil(o.DayOfWeek) {
		return nil, false
	}
	return o.DayOfWeek, true
}

// SetDayOfWeek sets field value
func (o *WeekSchedule) SetDayOfWeek(v []string) {
	o.DayOfWeek = v
}

func (o WeekSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WeekSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DayOfWeek != nil {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	return toSerialize, nil
}

func (o *WeekSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dayOfWeek",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWeekSchedule := _WeekSchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWeekSchedule)

	if err != nil {
		return err
	}

	*o = WeekSchedule(varWeekSchedule)

	return err
}

type NullableWeekSchedule struct {
	value *WeekSchedule
	isSet bool
}

func (v NullableWeekSchedule) Get() *WeekSchedule {
	return v.value
}

func (v *NullableWeekSchedule) Set(val *WeekSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableWeekSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableWeekSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWeekSchedule(val *WeekSchedule) *NullableWeekSchedule {
	return &NullableWeekSchedule{value: val, isSet: true}
}

func (v NullableWeekSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWeekSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


