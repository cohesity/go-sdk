/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AzureSqlPackageOptions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureSqlPackageOptions{}

// AzureSqlPackageOptions Specifies the SQL package parameters which are specific to Azure related Object Protection & Recovery.
type AzureSqlPackageOptions struct {
	// Specifies the compression option supported by SQL package export command during Azure SQL backup.
	Compression NullableString `json:"compression,omitempty"`
}

// NewAzureSqlPackageOptions instantiates a new AzureSqlPackageOptions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureSqlPackageOptions() *AzureSqlPackageOptions {
	this := AzureSqlPackageOptions{}
	return &this
}

// NewAzureSqlPackageOptionsWithDefaults instantiates a new AzureSqlPackageOptions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureSqlPackageOptionsWithDefaults() *AzureSqlPackageOptions {
	this := AzureSqlPackageOptions{}
	return &this
}

// GetCompression returns the Compression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureSqlPackageOptions) GetCompression() string {
	if o == nil || IsNil(o.Compression.Get()) {
		var ret string
		return ret
	}
	return *o.Compression.Get()
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureSqlPackageOptions) GetCompressionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Compression.Get(), o.Compression.IsSet()
}

// HasCompression returns a boolean if a field has been set.
func (o *AzureSqlPackageOptions) HasCompression() bool {
	if o != nil && o.Compression.IsSet() {
		return true
	}

	return false
}

// SetCompression gets a reference to the given NullableString and assigns it to the Compression field.
func (o *AzureSqlPackageOptions) SetCompression(v string) {
	o.Compression.Set(&v)
}
// SetCompressionNil sets the value for Compression to be an explicit nil
func (o *AzureSqlPackageOptions) SetCompressionNil() {
	o.Compression.Set(nil)
}

// UnsetCompression ensures that no value is present for Compression, not even an explicit nil
func (o *AzureSqlPackageOptions) UnsetCompression() {
	o.Compression.Unset()
}

func (o AzureSqlPackageOptions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureSqlPackageOptions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Compression.IsSet() {
		toSerialize["compression"] = o.Compression.Get()
	}
	return toSerialize, nil
}

type NullableAzureSqlPackageOptions struct {
	value *AzureSqlPackageOptions
	isSet bool
}

func (v NullableAzureSqlPackageOptions) Get() *AzureSqlPackageOptions {
	return v.value
}

func (v *NullableAzureSqlPackageOptions) Set(val *AzureSqlPackageOptions) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureSqlPackageOptions) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureSqlPackageOptions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureSqlPackageOptions(val *AzureSqlPackageOptions) *NullableAzureSqlPackageOptions {
	return &NullableAzureSqlPackageOptions{value: val, isSet: true}
}

func (v NullableAzureSqlPackageOptions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureSqlPackageOptions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


