/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ArchivalDataStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArchivalDataStats{}

// ArchivalDataStats Specifies statistics about archival data.
type ArchivalDataStats struct {
	// Specifies the average rate of transfer in bytes per second.
	AvgLogicalTransferRateBps NullableInt64 `json:"avgLogicalTransferRateBps,omitempty"`
	// Specifies the total number of file and directory entities that are backed up in this run. Only applicable to file based backups.
	BackupFileCount NullableInt64 `json:"backupFileCount,omitempty"`
	// Specifies total logical bytes read for creating the snapshot.
	BytesRead NullableInt64 `json:"bytesRead,omitempty"`
	// Specifies whether the file system walk is done. Only applicable to file based backups.
	FileWalkDone NullableBool `json:"fileWalkDone,omitempty"`
	// Specifies the logical bytes transferred.
	LogicalBytesTransferred NullableInt64 `json:"logicalBytesTransferred,omitempty"`
	// Specifies the logicalSizeBytes.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
	// Specifies the physical bytes transferred.
	PhysicalBytesTransferred NullableInt64 `json:"physicalBytesTransferred,omitempty"`
	// Specifies the total number of file and directory entities visited in this backup. Only applicable to file based backups.
	TotalFileCount NullableInt64 `json:"totalFileCount,omitempty"`
}

// NewArchivalDataStats instantiates a new ArchivalDataStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalDataStats() *ArchivalDataStats {
	this := ArchivalDataStats{}
	return &this
}

// NewArchivalDataStatsWithDefaults instantiates a new ArchivalDataStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalDataStatsWithDefaults() *ArchivalDataStats {
	this := ArchivalDataStats{}
	return &this
}

// GetAvgLogicalTransferRateBps returns the AvgLogicalTransferRateBps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalDataStats) GetAvgLogicalTransferRateBps() int64 {
	if o == nil || IsNil(o.AvgLogicalTransferRateBps.Get()) {
		var ret int64
		return ret
	}
	return *o.AvgLogicalTransferRateBps.Get()
}

// GetAvgLogicalTransferRateBpsOk returns a tuple with the AvgLogicalTransferRateBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalDataStats) GetAvgLogicalTransferRateBpsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.AvgLogicalTransferRateBps.Get(), o.AvgLogicalTransferRateBps.IsSet()
}

// HasAvgLogicalTransferRateBps returns a boolean if a field has been set.
func (o *ArchivalDataStats) HasAvgLogicalTransferRateBps() bool {
	if o != nil && o.AvgLogicalTransferRateBps.IsSet() {
		return true
	}

	return false
}

// SetAvgLogicalTransferRateBps gets a reference to the given NullableInt64 and assigns it to the AvgLogicalTransferRateBps field.
func (o *ArchivalDataStats) SetAvgLogicalTransferRateBps(v int64) {
	o.AvgLogicalTransferRateBps.Set(&v)
}
// SetAvgLogicalTransferRateBpsNil sets the value for AvgLogicalTransferRateBps to be an explicit nil
func (o *ArchivalDataStats) SetAvgLogicalTransferRateBpsNil() {
	o.AvgLogicalTransferRateBps.Set(nil)
}

// UnsetAvgLogicalTransferRateBps ensures that no value is present for AvgLogicalTransferRateBps, not even an explicit nil
func (o *ArchivalDataStats) UnsetAvgLogicalTransferRateBps() {
	o.AvgLogicalTransferRateBps.Unset()
}

// GetBackupFileCount returns the BackupFileCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalDataStats) GetBackupFileCount() int64 {
	if o == nil || IsNil(o.BackupFileCount.Get()) {
		var ret int64
		return ret
	}
	return *o.BackupFileCount.Get()
}

// GetBackupFileCountOk returns a tuple with the BackupFileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalDataStats) GetBackupFileCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupFileCount.Get(), o.BackupFileCount.IsSet()
}

// HasBackupFileCount returns a boolean if a field has been set.
func (o *ArchivalDataStats) HasBackupFileCount() bool {
	if o != nil && o.BackupFileCount.IsSet() {
		return true
	}

	return false
}

// SetBackupFileCount gets a reference to the given NullableInt64 and assigns it to the BackupFileCount field.
func (o *ArchivalDataStats) SetBackupFileCount(v int64) {
	o.BackupFileCount.Set(&v)
}
// SetBackupFileCountNil sets the value for BackupFileCount to be an explicit nil
func (o *ArchivalDataStats) SetBackupFileCountNil() {
	o.BackupFileCount.Set(nil)
}

// UnsetBackupFileCount ensures that no value is present for BackupFileCount, not even an explicit nil
func (o *ArchivalDataStats) UnsetBackupFileCount() {
	o.BackupFileCount.Unset()
}

// GetBytesRead returns the BytesRead field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalDataStats) GetBytesRead() int64 {
	if o == nil || IsNil(o.BytesRead.Get()) {
		var ret int64
		return ret
	}
	return *o.BytesRead.Get()
}

// GetBytesReadOk returns a tuple with the BytesRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalDataStats) GetBytesReadOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BytesRead.Get(), o.BytesRead.IsSet()
}

// HasBytesRead returns a boolean if a field has been set.
func (o *ArchivalDataStats) HasBytesRead() bool {
	if o != nil && o.BytesRead.IsSet() {
		return true
	}

	return false
}

// SetBytesRead gets a reference to the given NullableInt64 and assigns it to the BytesRead field.
func (o *ArchivalDataStats) SetBytesRead(v int64) {
	o.BytesRead.Set(&v)
}
// SetBytesReadNil sets the value for BytesRead to be an explicit nil
func (o *ArchivalDataStats) SetBytesReadNil() {
	o.BytesRead.Set(nil)
}

// UnsetBytesRead ensures that no value is present for BytesRead, not even an explicit nil
func (o *ArchivalDataStats) UnsetBytesRead() {
	o.BytesRead.Unset()
}

// GetFileWalkDone returns the FileWalkDone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalDataStats) GetFileWalkDone() bool {
	if o == nil || IsNil(o.FileWalkDone.Get()) {
		var ret bool
		return ret
	}
	return *o.FileWalkDone.Get()
}

// GetFileWalkDoneOk returns a tuple with the FileWalkDone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalDataStats) GetFileWalkDoneOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileWalkDone.Get(), o.FileWalkDone.IsSet()
}

// HasFileWalkDone returns a boolean if a field has been set.
func (o *ArchivalDataStats) HasFileWalkDone() bool {
	if o != nil && o.FileWalkDone.IsSet() {
		return true
	}

	return false
}

// SetFileWalkDone gets a reference to the given NullableBool and assigns it to the FileWalkDone field.
func (o *ArchivalDataStats) SetFileWalkDone(v bool) {
	o.FileWalkDone.Set(&v)
}
// SetFileWalkDoneNil sets the value for FileWalkDone to be an explicit nil
func (o *ArchivalDataStats) SetFileWalkDoneNil() {
	o.FileWalkDone.Set(nil)
}

// UnsetFileWalkDone ensures that no value is present for FileWalkDone, not even an explicit nil
func (o *ArchivalDataStats) UnsetFileWalkDone() {
	o.FileWalkDone.Unset()
}

// GetLogicalBytesTransferred returns the LogicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalDataStats) GetLogicalBytesTransferred() int64 {
	if o == nil || IsNil(o.LogicalBytesTransferred.Get()) {
		var ret int64
		return ret
	}
	return *o.LogicalBytesTransferred.Get()
}

// GetLogicalBytesTransferredOk returns a tuple with the LogicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalDataStats) GetLogicalBytesTransferredOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogicalBytesTransferred.Get(), o.LogicalBytesTransferred.IsSet()
}

// HasLogicalBytesTransferred returns a boolean if a field has been set.
func (o *ArchivalDataStats) HasLogicalBytesTransferred() bool {
	if o != nil && o.LogicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetLogicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the LogicalBytesTransferred field.
func (o *ArchivalDataStats) SetLogicalBytesTransferred(v int64) {
	o.LogicalBytesTransferred.Set(&v)
}
// SetLogicalBytesTransferredNil sets the value for LogicalBytesTransferred to be an explicit nil
func (o *ArchivalDataStats) SetLogicalBytesTransferredNil() {
	o.LogicalBytesTransferred.Set(nil)
}

// UnsetLogicalBytesTransferred ensures that no value is present for LogicalBytesTransferred, not even an explicit nil
func (o *ArchivalDataStats) UnsetLogicalBytesTransferred() {
	o.LogicalBytesTransferred.Unset()
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalDataStats) GetLogicalSizeBytes() int64 {
	if o == nil || IsNil(o.LogicalSizeBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalDataStats) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *ArchivalDataStats) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *ArchivalDataStats) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *ArchivalDataStats) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *ArchivalDataStats) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetPhysicalBytesTransferred returns the PhysicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalDataStats) GetPhysicalBytesTransferred() int64 {
	if o == nil || IsNil(o.PhysicalBytesTransferred.Get()) {
		var ret int64
		return ret
	}
	return *o.PhysicalBytesTransferred.Get()
}

// GetPhysicalBytesTransferredOk returns a tuple with the PhysicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalDataStats) GetPhysicalBytesTransferredOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PhysicalBytesTransferred.Get(), o.PhysicalBytesTransferred.IsSet()
}

// HasPhysicalBytesTransferred returns a boolean if a field has been set.
func (o *ArchivalDataStats) HasPhysicalBytesTransferred() bool {
	if o != nil && o.PhysicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetPhysicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the PhysicalBytesTransferred field.
func (o *ArchivalDataStats) SetPhysicalBytesTransferred(v int64) {
	o.PhysicalBytesTransferred.Set(&v)
}
// SetPhysicalBytesTransferredNil sets the value for PhysicalBytesTransferred to be an explicit nil
func (o *ArchivalDataStats) SetPhysicalBytesTransferredNil() {
	o.PhysicalBytesTransferred.Set(nil)
}

// UnsetPhysicalBytesTransferred ensures that no value is present for PhysicalBytesTransferred, not even an explicit nil
func (o *ArchivalDataStats) UnsetPhysicalBytesTransferred() {
	o.PhysicalBytesTransferred.Unset()
}

// GetTotalFileCount returns the TotalFileCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalDataStats) GetTotalFileCount() int64 {
	if o == nil || IsNil(o.TotalFileCount.Get()) {
		var ret int64
		return ret
	}
	return *o.TotalFileCount.Get()
}

// GetTotalFileCountOk returns a tuple with the TotalFileCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalDataStats) GetTotalFileCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalFileCount.Get(), o.TotalFileCount.IsSet()
}

// HasTotalFileCount returns a boolean if a field has been set.
func (o *ArchivalDataStats) HasTotalFileCount() bool {
	if o != nil && o.TotalFileCount.IsSet() {
		return true
	}

	return false
}

// SetTotalFileCount gets a reference to the given NullableInt64 and assigns it to the TotalFileCount field.
func (o *ArchivalDataStats) SetTotalFileCount(v int64) {
	o.TotalFileCount.Set(&v)
}
// SetTotalFileCountNil sets the value for TotalFileCount to be an explicit nil
func (o *ArchivalDataStats) SetTotalFileCountNil() {
	o.TotalFileCount.Set(nil)
}

// UnsetTotalFileCount ensures that no value is present for TotalFileCount, not even an explicit nil
func (o *ArchivalDataStats) UnsetTotalFileCount() {
	o.TotalFileCount.Unset()
}

func (o ArchivalDataStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArchivalDataStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AvgLogicalTransferRateBps.IsSet() {
		toSerialize["avgLogicalTransferRateBps"] = o.AvgLogicalTransferRateBps.Get()
	}
	if o.BackupFileCount.IsSet() {
		toSerialize["backupFileCount"] = o.BackupFileCount.Get()
	}
	if o.BytesRead.IsSet() {
		toSerialize["bytesRead"] = o.BytesRead.Get()
	}
	if o.FileWalkDone.IsSet() {
		toSerialize["fileWalkDone"] = o.FileWalkDone.Get()
	}
	if o.LogicalBytesTransferred.IsSet() {
		toSerialize["logicalBytesTransferred"] = o.LogicalBytesTransferred.Get()
	}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.PhysicalBytesTransferred.IsSet() {
		toSerialize["physicalBytesTransferred"] = o.PhysicalBytesTransferred.Get()
	}
	if o.TotalFileCount.IsSet() {
		toSerialize["totalFileCount"] = o.TotalFileCount.Get()
	}
	return toSerialize, nil
}

type NullableArchivalDataStats struct {
	value *ArchivalDataStats
	isSet bool
}

func (v NullableArchivalDataStats) Get() *ArchivalDataStats {
	return v.value
}

func (v *NullableArchivalDataStats) Set(val *ArchivalDataStats) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalDataStats) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalDataStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalDataStats(val *ArchivalDataStats) *NullableArchivalDataStats {
	return &NullableArchivalDataStats{value: val, isSet: true}
}

func (v NullableArchivalDataStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalDataStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


