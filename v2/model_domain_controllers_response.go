/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DomainControllersResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DomainControllersResponse{}

// DomainControllersResponse Specifies the response of get domain controllers request.
type DomainControllersResponse struct {
	// A list of domain names with a list of it's domain controllers.
	DomainControllers []DomainControllers `json:"domainControllers,omitempty"`
}

// NewDomainControllersResponse instantiates a new DomainControllersResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDomainControllersResponse() *DomainControllersResponse {
	this := DomainControllersResponse{}
	return &this
}

// NewDomainControllersResponseWithDefaults instantiates a new DomainControllersResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDomainControllersResponseWithDefaults() *DomainControllersResponse {
	this := DomainControllersResponse{}
	return &this
}

// GetDomainControllers returns the DomainControllers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DomainControllersResponse) GetDomainControllers() []DomainControllers {
	if o == nil {
		var ret []DomainControllers
		return ret
	}
	return o.DomainControllers
}

// GetDomainControllersOk returns a tuple with the DomainControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DomainControllersResponse) GetDomainControllersOk() ([]DomainControllers, bool) {
	if o == nil || IsNil(o.DomainControllers) {
		return nil, false
	}
	return o.DomainControllers, true
}

// HasDomainControllers returns a boolean if a field has been set.
func (o *DomainControllersResponse) HasDomainControllers() bool {
	if o != nil && !IsNil(o.DomainControllers) {
		return true
	}

	return false
}

// SetDomainControllers gets a reference to the given []DomainControllers and assigns it to the DomainControllers field.
func (o *DomainControllersResponse) SetDomainControllers(v []DomainControllers) {
	o.DomainControllers = v
}

func (o DomainControllersResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DomainControllersResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DomainControllers != nil {
		toSerialize["domainControllers"] = o.DomainControllers
	}
	return toSerialize, nil
}

type NullableDomainControllersResponse struct {
	value *DomainControllersResponse
	isSet bool
}

func (v NullableDomainControllersResponse) Get() *DomainControllersResponse {
	return v.value
}

func (v *NullableDomainControllersResponse) Set(val *DomainControllersResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDomainControllersResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDomainControllersResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDomainControllersResponse(val *DomainControllersResponse) *NullableDomainControllersResponse {
	return &NullableDomainControllersResponse{value: val, isSet: true}
}

func (v NullableDomainControllersResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDomainControllersResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


