/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverIsilonParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverIsilonParams{}

// RecoverIsilonParams Specifies the recovery options specific to Isilon environment.
type RecoverIsilonParams struct {
	DownloadFileAndFolderParams NullableRecoverAcropolisParamsDownloadFileAndFolderParams `json:"downloadFileAndFolderParams,omitempty"`
	// Specifies the list of recover Object parameters.
	Objects []CommonRecoverObjectSnapshotParams `json:"objects"`
	RecoverFileAndFolderParams NullableRecoverIsilonParamsRecoverFileAndFolderParams `json:"recoverFileAndFolderParams,omitempty"`
	RecoverNasVolumeParams NullableRecoverIsilonParamsRecoverNasVolumeParams `json:"recoverNasVolumeParams,omitempty"`
	// Specifies the type of recover action to be performed.
	RecoveryAction string `json:"recoveryAction"`
}

type _RecoverIsilonParams RecoverIsilonParams

// NewRecoverIsilonParams instantiates a new RecoverIsilonParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverIsilonParams(objects []CommonRecoverObjectSnapshotParams, recoveryAction string) *RecoverIsilonParams {
	this := RecoverIsilonParams{}
	this.Objects = objects
	this.RecoveryAction = recoveryAction
	return &this
}

// NewRecoverIsilonParamsWithDefaults instantiates a new RecoverIsilonParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverIsilonParamsWithDefaults() *RecoverIsilonParams {
	this := RecoverIsilonParams{}
	return &this
}

// GetDownloadFileAndFolderParams returns the DownloadFileAndFolderParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverIsilonParams) GetDownloadFileAndFolderParams() RecoverAcropolisParamsDownloadFileAndFolderParams {
	if o == nil || IsNil(o.DownloadFileAndFolderParams.Get()) {
		var ret RecoverAcropolisParamsDownloadFileAndFolderParams
		return ret
	}
	return *o.DownloadFileAndFolderParams.Get()
}

// GetDownloadFileAndFolderParamsOk returns a tuple with the DownloadFileAndFolderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverIsilonParams) GetDownloadFileAndFolderParamsOk() (*RecoverAcropolisParamsDownloadFileAndFolderParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.DownloadFileAndFolderParams.Get(), o.DownloadFileAndFolderParams.IsSet()
}

// HasDownloadFileAndFolderParams returns a boolean if a field has been set.
func (o *RecoverIsilonParams) HasDownloadFileAndFolderParams() bool {
	if o != nil && o.DownloadFileAndFolderParams.IsSet() {
		return true
	}

	return false
}

// SetDownloadFileAndFolderParams gets a reference to the given NullableRecoverAcropolisParamsDownloadFileAndFolderParams and assigns it to the DownloadFileAndFolderParams field.
func (o *RecoverIsilonParams) SetDownloadFileAndFolderParams(v RecoverAcropolisParamsDownloadFileAndFolderParams) {
	o.DownloadFileAndFolderParams.Set(&v)
}
// SetDownloadFileAndFolderParamsNil sets the value for DownloadFileAndFolderParams to be an explicit nil
func (o *RecoverIsilonParams) SetDownloadFileAndFolderParamsNil() {
	o.DownloadFileAndFolderParams.Set(nil)
}

// UnsetDownloadFileAndFolderParams ensures that no value is present for DownloadFileAndFolderParams, not even an explicit nil
func (o *RecoverIsilonParams) UnsetDownloadFileAndFolderParams() {
	o.DownloadFileAndFolderParams.Unset()
}

// GetObjects returns the Objects field value
// If the value is explicit nil, the zero value for []CommonRecoverObjectSnapshotParams will be returned
func (o *RecoverIsilonParams) GetObjects() []CommonRecoverObjectSnapshotParams {
	if o == nil {
		var ret []CommonRecoverObjectSnapshotParams
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverIsilonParams) GetObjectsOk() ([]CommonRecoverObjectSnapshotParams, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// SetObjects sets field value
func (o *RecoverIsilonParams) SetObjects(v []CommonRecoverObjectSnapshotParams) {
	o.Objects = v
}

// GetRecoverFileAndFolderParams returns the RecoverFileAndFolderParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverIsilonParams) GetRecoverFileAndFolderParams() RecoverIsilonParamsRecoverFileAndFolderParams {
	if o == nil || IsNil(o.RecoverFileAndFolderParams.Get()) {
		var ret RecoverIsilonParamsRecoverFileAndFolderParams
		return ret
	}
	return *o.RecoverFileAndFolderParams.Get()
}

// GetRecoverFileAndFolderParamsOk returns a tuple with the RecoverFileAndFolderParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverIsilonParams) GetRecoverFileAndFolderParamsOk() (*RecoverIsilonParamsRecoverFileAndFolderParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverFileAndFolderParams.Get(), o.RecoverFileAndFolderParams.IsSet()
}

// HasRecoverFileAndFolderParams returns a boolean if a field has been set.
func (o *RecoverIsilonParams) HasRecoverFileAndFolderParams() bool {
	if o != nil && o.RecoverFileAndFolderParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverFileAndFolderParams gets a reference to the given NullableRecoverIsilonParamsRecoverFileAndFolderParams and assigns it to the RecoverFileAndFolderParams field.
func (o *RecoverIsilonParams) SetRecoverFileAndFolderParams(v RecoverIsilonParamsRecoverFileAndFolderParams) {
	o.RecoverFileAndFolderParams.Set(&v)
}
// SetRecoverFileAndFolderParamsNil sets the value for RecoverFileAndFolderParams to be an explicit nil
func (o *RecoverIsilonParams) SetRecoverFileAndFolderParamsNil() {
	o.RecoverFileAndFolderParams.Set(nil)
}

// UnsetRecoverFileAndFolderParams ensures that no value is present for RecoverFileAndFolderParams, not even an explicit nil
func (o *RecoverIsilonParams) UnsetRecoverFileAndFolderParams() {
	o.RecoverFileAndFolderParams.Unset()
}

// GetRecoverNasVolumeParams returns the RecoverNasVolumeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverIsilonParams) GetRecoverNasVolumeParams() RecoverIsilonParamsRecoverNasVolumeParams {
	if o == nil || IsNil(o.RecoverNasVolumeParams.Get()) {
		var ret RecoverIsilonParamsRecoverNasVolumeParams
		return ret
	}
	return *o.RecoverNasVolumeParams.Get()
}

// GetRecoverNasVolumeParamsOk returns a tuple with the RecoverNasVolumeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverIsilonParams) GetRecoverNasVolumeParamsOk() (*RecoverIsilonParamsRecoverNasVolumeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverNasVolumeParams.Get(), o.RecoverNasVolumeParams.IsSet()
}

// HasRecoverNasVolumeParams returns a boolean if a field has been set.
func (o *RecoverIsilonParams) HasRecoverNasVolumeParams() bool {
	if o != nil && o.RecoverNasVolumeParams.IsSet() {
		return true
	}

	return false
}

// SetRecoverNasVolumeParams gets a reference to the given NullableRecoverIsilonParamsRecoverNasVolumeParams and assigns it to the RecoverNasVolumeParams field.
func (o *RecoverIsilonParams) SetRecoverNasVolumeParams(v RecoverIsilonParamsRecoverNasVolumeParams) {
	o.RecoverNasVolumeParams.Set(&v)
}
// SetRecoverNasVolumeParamsNil sets the value for RecoverNasVolumeParams to be an explicit nil
func (o *RecoverIsilonParams) SetRecoverNasVolumeParamsNil() {
	o.RecoverNasVolumeParams.Set(nil)
}

// UnsetRecoverNasVolumeParams ensures that no value is present for RecoverNasVolumeParams, not even an explicit nil
func (o *RecoverIsilonParams) UnsetRecoverNasVolumeParams() {
	o.RecoverNasVolumeParams.Unset()
}

// GetRecoveryAction returns the RecoveryAction field value
func (o *RecoverIsilonParams) GetRecoveryAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecoveryAction
}

// GetRecoveryActionOk returns a tuple with the RecoveryAction field value
// and a boolean to check if the value has been set.
func (o *RecoverIsilonParams) GetRecoveryActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoveryAction, true
}

// SetRecoveryAction sets field value
func (o *RecoverIsilonParams) SetRecoveryAction(v string) {
	o.RecoveryAction = v
}

func (o RecoverIsilonParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverIsilonParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DownloadFileAndFolderParams.IsSet() {
		toSerialize["downloadFileAndFolderParams"] = o.DownloadFileAndFolderParams.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.RecoverFileAndFolderParams.IsSet() {
		toSerialize["recoverFileAndFolderParams"] = o.RecoverFileAndFolderParams.Get()
	}
	if o.RecoverNasVolumeParams.IsSet() {
		toSerialize["recoverNasVolumeParams"] = o.RecoverNasVolumeParams.Get()
	}
	toSerialize["recoveryAction"] = o.RecoveryAction
	return toSerialize, nil
}

func (o *RecoverIsilonParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objects",
		"recoveryAction",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverIsilonParams := _RecoverIsilonParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverIsilonParams)

	if err != nil {
		return err
	}

	*o = RecoverIsilonParams(varRecoverIsilonParams)

	return err
}

type NullableRecoverIsilonParams struct {
	value *RecoverIsilonParams
	isSet bool
}

func (v NullableRecoverIsilonParams) Get() *RecoverIsilonParams {
	return v.value
}

func (v *NullableRecoverIsilonParams) Set(val *RecoverIsilonParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverIsilonParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverIsilonParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverIsilonParams(val *RecoverIsilonParams) *NullableRecoverIsilonParams {
	return &NullableRecoverIsilonParams{value: val, isSet: true}
}

func (v NullableRecoverIsilonParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverIsilonParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


