/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectMsTeamParam type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectMsTeamParam{}

// ObjectMsTeamParam Specifies recovery parameters associated with a Microsoft 365 Team.
type ObjectMsTeamParam struct {
	MsTeamParam ObjectMsTeamParamMsTeamParam `json:"msTeamParam"`
	RecoverObject ObjectMsTeamParamRecoverObject `json:"recoverObject"`
}

type _ObjectMsTeamParam ObjectMsTeamParam

// NewObjectMsTeamParam instantiates a new ObjectMsTeamParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectMsTeamParam(msTeamParam ObjectMsTeamParamMsTeamParam, recoverObject ObjectMsTeamParamRecoverObject) *ObjectMsTeamParam {
	this := ObjectMsTeamParam{}
	this.MsTeamParam = msTeamParam
	this.RecoverObject = recoverObject
	return &this
}

// NewObjectMsTeamParamWithDefaults instantiates a new ObjectMsTeamParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectMsTeamParamWithDefaults() *ObjectMsTeamParam {
	this := ObjectMsTeamParam{}
	return &this
}

// GetMsTeamParam returns the MsTeamParam field value
func (o *ObjectMsTeamParam) GetMsTeamParam() ObjectMsTeamParamMsTeamParam {
	if o == nil {
		var ret ObjectMsTeamParamMsTeamParam
		return ret
	}

	return o.MsTeamParam
}

// GetMsTeamParamOk returns a tuple with the MsTeamParam field value
// and a boolean to check if the value has been set.
func (o *ObjectMsTeamParam) GetMsTeamParamOk() (*ObjectMsTeamParamMsTeamParam, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MsTeamParam, true
}

// SetMsTeamParam sets field value
func (o *ObjectMsTeamParam) SetMsTeamParam(v ObjectMsTeamParamMsTeamParam) {
	o.MsTeamParam = v
}

// GetRecoverObject returns the RecoverObject field value
func (o *ObjectMsTeamParam) GetRecoverObject() ObjectMsTeamParamRecoverObject {
	if o == nil {
		var ret ObjectMsTeamParamRecoverObject
		return ret
	}

	return o.RecoverObject
}

// GetRecoverObjectOk returns a tuple with the RecoverObject field value
// and a boolean to check if the value has been set.
func (o *ObjectMsTeamParam) GetRecoverObjectOk() (*ObjectMsTeamParamRecoverObject, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoverObject, true
}

// SetRecoverObject sets field value
func (o *ObjectMsTeamParam) SetRecoverObject(v ObjectMsTeamParamRecoverObject) {
	o.RecoverObject = v
}

func (o ObjectMsTeamParam) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectMsTeamParam) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["msTeamParam"] = o.MsTeamParam
	toSerialize["recoverObject"] = o.RecoverObject
	return toSerialize, nil
}

func (o *ObjectMsTeamParam) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"msTeamParam",
		"recoverObject",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectMsTeamParam := _ObjectMsTeamParam{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectMsTeamParam)

	if err != nil {
		return err
	}

	*o = ObjectMsTeamParam(varObjectMsTeamParam)

	return err
}

type NullableObjectMsTeamParam struct {
	value *ObjectMsTeamParam
	isSet bool
}

func (v NullableObjectMsTeamParam) Get() *ObjectMsTeamParam {
	return v.value
}

func (v *NullableObjectMsTeamParam) Set(val *ObjectMsTeamParam) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectMsTeamParam) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectMsTeamParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectMsTeamParam(val *ObjectMsTeamParam) *NullableObjectMsTeamParam {
	return &NullableObjectMsTeamParam{value: val, isSet: true}
}

func (v NullableObjectMsTeamParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectMsTeamParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


