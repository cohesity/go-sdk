/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the StatsTaskInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatsTaskInfo{}

// StatsTaskInfo Specifies the details about a Stats Task.
type StatsTaskInfo struct {
	BackupGenericStats *BackupGenericStats `json:"backupGenericStats,omitempty"`
	NasStats *BackupNasStats `json:"nasStats,omitempty"`
}

// NewStatsTaskInfo instantiates a new StatsTaskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsTaskInfo() *StatsTaskInfo {
	this := StatsTaskInfo{}
	return &this
}

// NewStatsTaskInfoWithDefaults instantiates a new StatsTaskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsTaskInfoWithDefaults() *StatsTaskInfo {
	this := StatsTaskInfo{}
	return &this
}

// GetBackupGenericStats returns the BackupGenericStats field value if set, zero value otherwise.
func (o *StatsTaskInfo) GetBackupGenericStats() BackupGenericStats {
	if o == nil || IsNil(o.BackupGenericStats) {
		var ret BackupGenericStats
		return ret
	}
	return *o.BackupGenericStats
}

// GetBackupGenericStatsOk returns a tuple with the BackupGenericStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsTaskInfo) GetBackupGenericStatsOk() (*BackupGenericStats, bool) {
	if o == nil || IsNil(o.BackupGenericStats) {
		return nil, false
	}
	return o.BackupGenericStats, true
}

// HasBackupGenericStats returns a boolean if a field has been set.
func (o *StatsTaskInfo) HasBackupGenericStats() bool {
	if o != nil && !IsNil(o.BackupGenericStats) {
		return true
	}

	return false
}

// SetBackupGenericStats gets a reference to the given BackupGenericStats and assigns it to the BackupGenericStats field.
func (o *StatsTaskInfo) SetBackupGenericStats(v BackupGenericStats) {
	o.BackupGenericStats = &v
}

// GetNasStats returns the NasStats field value if set, zero value otherwise.
func (o *StatsTaskInfo) GetNasStats() BackupNasStats {
	if o == nil || IsNil(o.NasStats) {
		var ret BackupNasStats
		return ret
	}
	return *o.NasStats
}

// GetNasStatsOk returns a tuple with the NasStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsTaskInfo) GetNasStatsOk() (*BackupNasStats, bool) {
	if o == nil || IsNil(o.NasStats) {
		return nil, false
	}
	return o.NasStats, true
}

// HasNasStats returns a boolean if a field has been set.
func (o *StatsTaskInfo) HasNasStats() bool {
	if o != nil && !IsNil(o.NasStats) {
		return true
	}

	return false
}

// SetNasStats gets a reference to the given BackupNasStats and assigns it to the NasStats field.
func (o *StatsTaskInfo) SetNasStats(v BackupNasStats) {
	o.NasStats = &v
}

func (o StatsTaskInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatsTaskInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackupGenericStats) {
		toSerialize["backupGenericStats"] = o.BackupGenericStats
	}
	if !IsNil(o.NasStats) {
		toSerialize["nasStats"] = o.NasStats
	}
	return toSerialize, nil
}

type NullableStatsTaskInfo struct {
	value *StatsTaskInfo
	isSet bool
}

func (v NullableStatsTaskInfo) Get() *StatsTaskInfo {
	return v.value
}

func (v *NullableStatsTaskInfo) Set(val *StatsTaskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsTaskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsTaskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsTaskInfo(val *StatsTaskInfo) *NullableStatsTaskInfo {
	return &NullableStatsTaskInfo{value: val, isSet: true}
}

func (v NullableStatsTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsTaskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


