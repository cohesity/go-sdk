/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the HyperVTargetParamsForRecoverVmVlanConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperVTargetParamsForRecoverVmVlanConfig{}

// HyperVTargetParamsForRecoverVmVlanConfig Specifies VLAN Params associated with the recovered. If this is not specified, then the VLAN settings will be automatically selected from one of the below options: a. If VLANs are configured on Cohesity, then the VLAN host/VIP will be automatically based on the client's (e.g. ESXI host) IP address. b. If VLANs are not configured on Cohesity, then the partition hostname or VIPs will be used for Recovery.
type HyperVTargetParamsForRecoverVmVlanConfig struct {
	// If this is set to true, then even if VLANs are configured on the system, the partition VIPs will be used for the Recovery.
	DisableVlan NullableBool `json:"disableVlan,omitempty"`
	// If this is set, then the Cohesity host name or the IP address associated with this vlan is used for mounting Cohesity's view on the remote host.
	Id NullableInt32 `json:"id,omitempty"`
	// Interface group to use for Recovery.
	InterfaceName NullableString `json:"interfaceName,omitempty"`
}

// NewHyperVTargetParamsForRecoverVmVlanConfig instantiates a new HyperVTargetParamsForRecoverVmVlanConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperVTargetParamsForRecoverVmVlanConfig() *HyperVTargetParamsForRecoverVmVlanConfig {
	this := HyperVTargetParamsForRecoverVmVlanConfig{}
	return &this
}

// NewHyperVTargetParamsForRecoverVmVlanConfigWithDefaults instantiates a new HyperVTargetParamsForRecoverVmVlanConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperVTargetParamsForRecoverVmVlanConfigWithDefaults() *HyperVTargetParamsForRecoverVmVlanConfig {
	this := HyperVTargetParamsForRecoverVmVlanConfig{}
	return &this
}

// GetDisableVlan returns the DisableVlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVTargetParamsForRecoverVmVlanConfig) GetDisableVlan() bool {
	if o == nil || IsNil(o.DisableVlan.Get()) {
		var ret bool
		return ret
	}
	return *o.DisableVlan.Get()
}

// GetDisableVlanOk returns a tuple with the DisableVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVTargetParamsForRecoverVmVlanConfig) GetDisableVlanOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisableVlan.Get(), o.DisableVlan.IsSet()
}

// HasDisableVlan returns a boolean if a field has been set.
func (o *HyperVTargetParamsForRecoverVmVlanConfig) HasDisableVlan() bool {
	if o != nil && o.DisableVlan.IsSet() {
		return true
	}

	return false
}

// SetDisableVlan gets a reference to the given NullableBool and assigns it to the DisableVlan field.
func (o *HyperVTargetParamsForRecoverVmVlanConfig) SetDisableVlan(v bool) {
	o.DisableVlan.Set(&v)
}
// SetDisableVlanNil sets the value for DisableVlan to be an explicit nil
func (o *HyperVTargetParamsForRecoverVmVlanConfig) SetDisableVlanNil() {
	o.DisableVlan.Set(nil)
}

// UnsetDisableVlan ensures that no value is present for DisableVlan, not even an explicit nil
func (o *HyperVTargetParamsForRecoverVmVlanConfig) UnsetDisableVlan() {
	o.DisableVlan.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVTargetParamsForRecoverVmVlanConfig) GetId() int32 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVTargetParamsForRecoverVmVlanConfig) GetIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *HyperVTargetParamsForRecoverVmVlanConfig) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *HyperVTargetParamsForRecoverVmVlanConfig) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *HyperVTargetParamsForRecoverVmVlanConfig) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *HyperVTargetParamsForRecoverVmVlanConfig) UnsetId() {
	o.Id.Unset()
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVTargetParamsForRecoverVmVlanConfig) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName.Get()) {
		var ret string
		return ret
	}
	return *o.InterfaceName.Get()
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVTargetParamsForRecoverVmVlanConfig) GetInterfaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InterfaceName.Get(), o.InterfaceName.IsSet()
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *HyperVTargetParamsForRecoverVmVlanConfig) HasInterfaceName() bool {
	if o != nil && o.InterfaceName.IsSet() {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given NullableString and assigns it to the InterfaceName field.
func (o *HyperVTargetParamsForRecoverVmVlanConfig) SetInterfaceName(v string) {
	o.InterfaceName.Set(&v)
}
// SetInterfaceNameNil sets the value for InterfaceName to be an explicit nil
func (o *HyperVTargetParamsForRecoverVmVlanConfig) SetInterfaceNameNil() {
	o.InterfaceName.Set(nil)
}

// UnsetInterfaceName ensures that no value is present for InterfaceName, not even an explicit nil
func (o *HyperVTargetParamsForRecoverVmVlanConfig) UnsetInterfaceName() {
	o.InterfaceName.Unset()
}

func (o HyperVTargetParamsForRecoverVmVlanConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperVTargetParamsForRecoverVmVlanConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DisableVlan.IsSet() {
		toSerialize["disableVlan"] = o.DisableVlan.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.InterfaceName.IsSet() {
		toSerialize["interfaceName"] = o.InterfaceName.Get()
	}
	return toSerialize, nil
}

type NullableHyperVTargetParamsForRecoverVmVlanConfig struct {
	value *HyperVTargetParamsForRecoverVmVlanConfig
	isSet bool
}

func (v NullableHyperVTargetParamsForRecoverVmVlanConfig) Get() *HyperVTargetParamsForRecoverVmVlanConfig {
	return v.value
}

func (v *NullableHyperVTargetParamsForRecoverVmVlanConfig) Set(val *HyperVTargetParamsForRecoverVmVlanConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperVTargetParamsForRecoverVmVlanConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperVTargetParamsForRecoverVmVlanConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperVTargetParamsForRecoverVmVlanConfig(val *HyperVTargetParamsForRecoverVmVlanConfig) *NullableHyperVTargetParamsForRecoverVmVlanConfig {
	return &NullableHyperVTargetParamsForRecoverVmVlanConfig{value: val, isSet: true}
}

func (v NullableHyperVTargetParamsForRecoverVmVlanConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperVTargetParamsForRecoverVmVlanConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


