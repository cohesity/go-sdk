/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SharepointItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SharepointItem{}

// SharepointItem Specifies the indexed Sharepoint item.
type SharepointItem struct {
	DocumentLibraryItem *DocumentLibraryItem `json:"documentLibraryItem,omitempty"`
}

// NewSharepointItem instantiates a new SharepointItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSharepointItem() *SharepointItem {
	this := SharepointItem{}
	return &this
}

// NewSharepointItemWithDefaults instantiates a new SharepointItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSharepointItemWithDefaults() *SharepointItem {
	this := SharepointItem{}
	return &this
}

// GetDocumentLibraryItem returns the DocumentLibraryItem field value if set, zero value otherwise.
func (o *SharepointItem) GetDocumentLibraryItem() DocumentLibraryItem {
	if o == nil || IsNil(o.DocumentLibraryItem) {
		var ret DocumentLibraryItem
		return ret
	}
	return *o.DocumentLibraryItem
}

// GetDocumentLibraryItemOk returns a tuple with the DocumentLibraryItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SharepointItem) GetDocumentLibraryItemOk() (*DocumentLibraryItem, bool) {
	if o == nil || IsNil(o.DocumentLibraryItem) {
		return nil, false
	}
	return o.DocumentLibraryItem, true
}

// HasDocumentLibraryItem returns a boolean if a field has been set.
func (o *SharepointItem) HasDocumentLibraryItem() bool {
	if o != nil && !IsNil(o.DocumentLibraryItem) {
		return true
	}

	return false
}

// SetDocumentLibraryItem gets a reference to the given DocumentLibraryItem and assigns it to the DocumentLibraryItem field.
func (o *SharepointItem) SetDocumentLibraryItem(v DocumentLibraryItem) {
	o.DocumentLibraryItem = &v
}

func (o SharepointItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SharepointItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentLibraryItem) {
		toSerialize["documentLibraryItem"] = o.DocumentLibraryItem
	}
	return toSerialize, nil
}

type NullableSharepointItem struct {
	value *SharepointItem
	isSet bool
}

func (v NullableSharepointItem) Get() *SharepointItem {
	return v.value
}

func (v *NullableSharepointItem) Set(val *SharepointItem) {
	v.value = val
	v.isSet = true
}

func (v NullableSharepointItem) IsSet() bool {
	return v.isSet
}

func (v *NullableSharepointItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSharepointItem(val *SharepointItem) *NullableSharepointItem {
	return &NullableSharepointItem{value: val, isSet: true}
}

func (v NullableSharepointItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSharepointItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


