/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OracleObjectProtectionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OracleObjectProtectionInfo{}

// OracleObjectProtectionInfo Specifies the object identifier for Object based Oracle Protection
type OracleObjectProtectionInfo struct {
	// Specifies the properties of the Oracle databases.
	DbParams []OracleProtectionGroupDbParams `json:"dbParams,omitempty"`
	// Specifies the id of the host on which databases are hosted
	ObjectId NullableInt64 `json:"objectId"`
}

type _OracleObjectProtectionInfo OracleObjectProtectionInfo

// NewOracleObjectProtectionInfo instantiates a new OracleObjectProtectionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleObjectProtectionInfo(objectId NullableInt64) *OracleObjectProtectionInfo {
	this := OracleObjectProtectionInfo{}
	this.ObjectId = objectId
	return &this
}

// NewOracleObjectProtectionInfoWithDefaults instantiates a new OracleObjectProtectionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleObjectProtectionInfoWithDefaults() *OracleObjectProtectionInfo {
	this := OracleObjectProtectionInfo{}
	return &this
}

// GetDbParams returns the DbParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleObjectProtectionInfo) GetDbParams() []OracleProtectionGroupDbParams {
	if o == nil {
		var ret []OracleProtectionGroupDbParams
		return ret
	}
	return o.DbParams
}

// GetDbParamsOk returns a tuple with the DbParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleObjectProtectionInfo) GetDbParamsOk() ([]OracleProtectionGroupDbParams, bool) {
	if o == nil || IsNil(o.DbParams) {
		return nil, false
	}
	return o.DbParams, true
}

// HasDbParams returns a boolean if a field has been set.
func (o *OracleObjectProtectionInfo) HasDbParams() bool {
	if o != nil && !IsNil(o.DbParams) {
		return true
	}

	return false
}

// SetDbParams gets a reference to the given []OracleProtectionGroupDbParams and assigns it to the DbParams field.
func (o *OracleObjectProtectionInfo) SetDbParams(v []OracleProtectionGroupDbParams) {
	o.DbParams = v
}

// GetObjectId returns the ObjectId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *OracleObjectProtectionInfo) GetObjectId() int64 {
	if o == nil || o.ObjectId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleObjectProtectionInfo) GetObjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// SetObjectId sets field value
func (o *OracleObjectProtectionInfo) SetObjectId(v int64) {
	o.ObjectId.Set(&v)
}

func (o OracleObjectProtectionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OracleObjectProtectionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DbParams != nil {
		toSerialize["dbParams"] = o.DbParams
	}
	toSerialize["objectId"] = o.ObjectId.Get()
	return toSerialize, nil
}

func (o *OracleObjectProtectionInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOracleObjectProtectionInfo := _OracleObjectProtectionInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOracleObjectProtectionInfo)

	if err != nil {
		return err
	}

	*o = OracleObjectProtectionInfo(varOracleObjectProtectionInfo)

	return err
}

type NullableOracleObjectProtectionInfo struct {
	value *OracleObjectProtectionInfo
	isSet bool
}

func (v NullableOracleObjectProtectionInfo) Get() *OracleObjectProtectionInfo {
	return v.value
}

func (v *NullableOracleObjectProtectionInfo) Set(val *OracleObjectProtectionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleObjectProtectionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleObjectProtectionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleObjectProtectionInfo(val *OracleObjectProtectionInfo) *NullableOracleObjectProtectionInfo {
	return &NullableOracleObjectProtectionInfo{value: val, isSet: true}
}

func (v NullableOracleObjectProtectionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleObjectProtectionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


