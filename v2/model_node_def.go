/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeDef type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeDef{}

// NodeDef Kubernetes Workload Cluster Node Information
type NodeDef struct {
	// Node Health Status
	HealthStatus *string `json:"HealthStatus,omitempty"`
	// Node ID
	Id *string `json:"id,omitempty"`
	// Node Role
	Role *string `json:"role,omitempty"`
}

// NewNodeDef instantiates a new NodeDef object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeDef() *NodeDef {
	this := NodeDef{}
	return &this
}

// NewNodeDefWithDefaults instantiates a new NodeDef object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeDefWithDefaults() *NodeDef {
	this := NodeDef{}
	return &this
}

// GetHealthStatus returns the HealthStatus field value if set, zero value otherwise.
func (o *NodeDef) GetHealthStatus() string {
	if o == nil || IsNil(o.HealthStatus) {
		var ret string
		return ret
	}
	return *o.HealthStatus
}

// GetHealthStatusOk returns a tuple with the HealthStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDef) GetHealthStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HealthStatus) {
		return nil, false
	}
	return o.HealthStatus, true
}

// HasHealthStatus returns a boolean if a field has been set.
func (o *NodeDef) HasHealthStatus() bool {
	if o != nil && !IsNil(o.HealthStatus) {
		return true
	}

	return false
}

// SetHealthStatus gets a reference to the given string and assigns it to the HealthStatus field.
func (o *NodeDef) SetHealthStatus(v string) {
	o.HealthStatus = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *NodeDef) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDef) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *NodeDef) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *NodeDef) SetId(v string) {
	o.Id = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *NodeDef) GetRole() string {
	if o == nil || IsNil(o.Role) {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeDef) GetRoleOk() (*string, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *NodeDef) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *NodeDef) SetRole(v string) {
	o.Role = &v
}

func (o NodeDef) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeDef) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HealthStatus) {
		toSerialize["HealthStatus"] = o.HealthStatus
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

type NullableNodeDef struct {
	value *NodeDef
	isSet bool
}

func (v NullableNodeDef) Get() *NodeDef {
	return v.value
}

func (v *NullableNodeDef) Set(val *NodeDef) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeDef) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeDef) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeDef(val *NodeDef) *NullableNodeDef {
	return &NullableNodeDef{value: val, isSet: true}
}

func (v NullableNodeDef) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeDef) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


