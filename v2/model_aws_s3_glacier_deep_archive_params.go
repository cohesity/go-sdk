/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsS3GlacierDeepArchiveParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsS3GlacierDeepArchiveParams{}

// AwsS3GlacierDeepArchiveParams Specifies the parameters which are specific to AWS related External Targets with storage class S3 Glacier Deep Archive.
type AwsS3GlacierDeepArchiveParams struct {
	// Specifies the AWS External Target type.
	CloudType NullableString `json:"cloudType"`
	AwsCloudGovParams *AwsCloudGovParams `json:"awsCloudGovParams,omitempty"`
	AwsCloudStandardParams *AwsCloudStandardParams `json:"awsCloudStandardParams,omitempty"`
}

type _AwsS3GlacierDeepArchiveParams AwsS3GlacierDeepArchiveParams

// NewAwsS3GlacierDeepArchiveParams instantiates a new AwsS3GlacierDeepArchiveParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsS3GlacierDeepArchiveParams(cloudType NullableString) *AwsS3GlacierDeepArchiveParams {
	this := AwsS3GlacierDeepArchiveParams{}
	this.CloudType = cloudType
	return &this
}

// NewAwsS3GlacierDeepArchiveParamsWithDefaults instantiates a new AwsS3GlacierDeepArchiveParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsS3GlacierDeepArchiveParamsWithDefaults() *AwsS3GlacierDeepArchiveParams {
	this := AwsS3GlacierDeepArchiveParams{}
	return &this
}

// GetCloudType returns the CloudType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsS3GlacierDeepArchiveParams) GetCloudType() string {
	if o == nil || o.CloudType.Get() == nil {
		var ret string
		return ret
	}

	return *o.CloudType.Get()
}

// GetCloudTypeOk returns a tuple with the CloudType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsS3GlacierDeepArchiveParams) GetCloudTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CloudType.Get(), o.CloudType.IsSet()
}

// SetCloudType sets field value
func (o *AwsS3GlacierDeepArchiveParams) SetCloudType(v string) {
	o.CloudType.Set(&v)
}

// GetAwsCloudGovParams returns the AwsCloudGovParams field value if set, zero value otherwise.
func (o *AwsS3GlacierDeepArchiveParams) GetAwsCloudGovParams() AwsCloudGovParams {
	if o == nil || IsNil(o.AwsCloudGovParams) {
		var ret AwsCloudGovParams
		return ret
	}
	return *o.AwsCloudGovParams
}

// GetAwsCloudGovParamsOk returns a tuple with the AwsCloudGovParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3GlacierDeepArchiveParams) GetAwsCloudGovParamsOk() (*AwsCloudGovParams, bool) {
	if o == nil || IsNil(o.AwsCloudGovParams) {
		return nil, false
	}
	return o.AwsCloudGovParams, true
}

// HasAwsCloudGovParams returns a boolean if a field has been set.
func (o *AwsS3GlacierDeepArchiveParams) HasAwsCloudGovParams() bool {
	if o != nil && !IsNil(o.AwsCloudGovParams) {
		return true
	}

	return false
}

// SetAwsCloudGovParams gets a reference to the given AwsCloudGovParams and assigns it to the AwsCloudGovParams field.
func (o *AwsS3GlacierDeepArchiveParams) SetAwsCloudGovParams(v AwsCloudGovParams) {
	o.AwsCloudGovParams = &v
}

// GetAwsCloudStandardParams returns the AwsCloudStandardParams field value if set, zero value otherwise.
func (o *AwsS3GlacierDeepArchiveParams) GetAwsCloudStandardParams() AwsCloudStandardParams {
	if o == nil || IsNil(o.AwsCloudStandardParams) {
		var ret AwsCloudStandardParams
		return ret
	}
	return *o.AwsCloudStandardParams
}

// GetAwsCloudStandardParamsOk returns a tuple with the AwsCloudStandardParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsS3GlacierDeepArchiveParams) GetAwsCloudStandardParamsOk() (*AwsCloudStandardParams, bool) {
	if o == nil || IsNil(o.AwsCloudStandardParams) {
		return nil, false
	}
	return o.AwsCloudStandardParams, true
}

// HasAwsCloudStandardParams returns a boolean if a field has been set.
func (o *AwsS3GlacierDeepArchiveParams) HasAwsCloudStandardParams() bool {
	if o != nil && !IsNil(o.AwsCloudStandardParams) {
		return true
	}

	return false
}

// SetAwsCloudStandardParams gets a reference to the given AwsCloudStandardParams and assigns it to the AwsCloudStandardParams field.
func (o *AwsS3GlacierDeepArchiveParams) SetAwsCloudStandardParams(v AwsCloudStandardParams) {
	o.AwsCloudStandardParams = &v
}

func (o AwsS3GlacierDeepArchiveParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsS3GlacierDeepArchiveParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cloudType"] = o.CloudType.Get()
	if !IsNil(o.AwsCloudGovParams) {
		toSerialize["awsCloudGovParams"] = o.AwsCloudGovParams
	}
	if !IsNil(o.AwsCloudStandardParams) {
		toSerialize["awsCloudStandardParams"] = o.AwsCloudStandardParams
	}
	return toSerialize, nil
}

func (o *AwsS3GlacierDeepArchiveParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cloudType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsS3GlacierDeepArchiveParams := _AwsS3GlacierDeepArchiveParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsS3GlacierDeepArchiveParams)

	if err != nil {
		return err
	}

	*o = AwsS3GlacierDeepArchiveParams(varAwsS3GlacierDeepArchiveParams)

	return err
}

type NullableAwsS3GlacierDeepArchiveParams struct {
	value *AwsS3GlacierDeepArchiveParams
	isSet bool
}

func (v NullableAwsS3GlacierDeepArchiveParams) Get() *AwsS3GlacierDeepArchiveParams {
	return v.value
}

func (v *NullableAwsS3GlacierDeepArchiveParams) Set(val *AwsS3GlacierDeepArchiveParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsS3GlacierDeepArchiveParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsS3GlacierDeepArchiveParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsS3GlacierDeepArchiveParams(val *AwsS3GlacierDeepArchiveParams) *NullableAwsS3GlacierDeepArchiveParams {
	return &NullableAwsS3GlacierDeepArchiveParams{value: val, isSet: true}
}

func (v NullableAwsS3GlacierDeepArchiveParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsS3GlacierDeepArchiveParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


