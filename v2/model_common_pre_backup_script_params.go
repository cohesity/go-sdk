/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonPreBackupScriptParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonPreBackupScriptParams{}

// CommonPreBackupScriptParams Specifies the common params for PreBackup scripts.
type CommonPreBackupScriptParams struct {
	// Specifies whether the script should be enabled, default value set to true.
	IsActive NullableBool `json:"isActive,omitempty"`
	// Specifies the arguments or parameters and values to pass into the remote script. For example if the script expects values for the 'database' and 'user' parameters, specify the parameters and values using the following string: \"database=myDatabase user=me\".
	Params NullableString `json:"params,omitempty"`
	// Specifies the absolute path to the script on the remote host.
	Path string `json:"path"`
	// Specifies the timeout of the script in seconds. The script will be killed if it exceeds this value. By default, no timeout will occur if left empty.
	TimeoutSecs NullableInt32 `json:"timeoutSecs,omitempty"`
	// Specifies if the script needs to continue even if there is an occurence of an error. If this flag is set to true, then Backup Run will start even if the pre backup script fails. If not specified or false, then backup run will not start when script fails.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
}

type _CommonPreBackupScriptParams CommonPreBackupScriptParams

// NewCommonPreBackupScriptParams instantiates a new CommonPreBackupScriptParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonPreBackupScriptParams(path string) *CommonPreBackupScriptParams {
	this := CommonPreBackupScriptParams{}
	this.Path = path
	return &this
}

// NewCommonPreBackupScriptParamsWithDefaults instantiates a new CommonPreBackupScriptParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonPreBackupScriptParamsWithDefaults() *CommonPreBackupScriptParams {
	this := CommonPreBackupScriptParams{}
	return &this
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonPreBackupScriptParams) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive.Get()) {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonPreBackupScriptParams) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *CommonPreBackupScriptParams) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *CommonPreBackupScriptParams) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *CommonPreBackupScriptParams) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *CommonPreBackupScriptParams) UnsetIsActive() {
	o.IsActive.Unset()
}

// GetParams returns the Params field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonPreBackupScriptParams) GetParams() string {
	if o == nil || IsNil(o.Params.Get()) {
		var ret string
		return ret
	}
	return *o.Params.Get()
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonPreBackupScriptParams) GetParamsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Params.Get(), o.Params.IsSet()
}

// HasParams returns a boolean if a field has been set.
func (o *CommonPreBackupScriptParams) HasParams() bool {
	if o != nil && o.Params.IsSet() {
		return true
	}

	return false
}

// SetParams gets a reference to the given NullableString and assigns it to the Params field.
func (o *CommonPreBackupScriptParams) SetParams(v string) {
	o.Params.Set(&v)
}
// SetParamsNil sets the value for Params to be an explicit nil
func (o *CommonPreBackupScriptParams) SetParamsNil() {
	o.Params.Set(nil)
}

// UnsetParams ensures that no value is present for Params, not even an explicit nil
func (o *CommonPreBackupScriptParams) UnsetParams() {
	o.Params.Unset()
}

// GetPath returns the Path field value
func (o *CommonPreBackupScriptParams) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *CommonPreBackupScriptParams) GetPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *CommonPreBackupScriptParams) SetPath(v string) {
	o.Path = v
}

// GetTimeoutSecs returns the TimeoutSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonPreBackupScriptParams) GetTimeoutSecs() int32 {
	if o == nil || IsNil(o.TimeoutSecs.Get()) {
		var ret int32
		return ret
	}
	return *o.TimeoutSecs.Get()
}

// GetTimeoutSecsOk returns a tuple with the TimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonPreBackupScriptParams) GetTimeoutSecsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeoutSecs.Get(), o.TimeoutSecs.IsSet()
}

// HasTimeoutSecs returns a boolean if a field has been set.
func (o *CommonPreBackupScriptParams) HasTimeoutSecs() bool {
	if o != nil && o.TimeoutSecs.IsSet() {
		return true
	}

	return false
}

// SetTimeoutSecs gets a reference to the given NullableInt32 and assigns it to the TimeoutSecs field.
func (o *CommonPreBackupScriptParams) SetTimeoutSecs(v int32) {
	o.TimeoutSecs.Set(&v)
}
// SetTimeoutSecsNil sets the value for TimeoutSecs to be an explicit nil
func (o *CommonPreBackupScriptParams) SetTimeoutSecsNil() {
	o.TimeoutSecs.Set(nil)
}

// UnsetTimeoutSecs ensures that no value is present for TimeoutSecs, not even an explicit nil
func (o *CommonPreBackupScriptParams) UnsetTimeoutSecs() {
	o.TimeoutSecs.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonPreBackupScriptParams) GetContinueOnError() bool {
	if o == nil || IsNil(o.ContinueOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonPreBackupScriptParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *CommonPreBackupScriptParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *CommonPreBackupScriptParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *CommonPreBackupScriptParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *CommonPreBackupScriptParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

func (o CommonPreBackupScriptParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonPreBackupScriptParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	if o.Params.IsSet() {
		toSerialize["params"] = o.Params.Get()
	}
	toSerialize["path"] = o.Path
	if o.TimeoutSecs.IsSet() {
		toSerialize["timeoutSecs"] = o.TimeoutSecs.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	return toSerialize, nil
}

func (o *CommonPreBackupScriptParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"path",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonPreBackupScriptParams := _CommonPreBackupScriptParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonPreBackupScriptParams)

	if err != nil {
		return err
	}

	*o = CommonPreBackupScriptParams(varCommonPreBackupScriptParams)

	return err
}

type NullableCommonPreBackupScriptParams struct {
	value *CommonPreBackupScriptParams
	isSet bool
}

func (v NullableCommonPreBackupScriptParams) Get() *CommonPreBackupScriptParams {
	return v.value
}

func (v *NullableCommonPreBackupScriptParams) Set(val *CommonPreBackupScriptParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonPreBackupScriptParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonPreBackupScriptParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonPreBackupScriptParams(val *CommonPreBackupScriptParams) *NullableCommonPreBackupScriptParams {
	return &NullableCommonPreBackupScriptParams{value: val, isSet: true}
}

func (v NullableCommonPreBackupScriptParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonPreBackupScriptParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


