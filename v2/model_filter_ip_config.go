/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FilterIpConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilterIpConfig{}

// FilterIpConfig Specifies the list of IP addresses that are allowed or denied during recovery. Allowed IPs and Denied IPs cannot be used together.
type FilterIpConfig struct {
	// Specifies the IP addresses that should be used exclusively during recovery. Cannot be set if deniedIpAddresses is set.
	AllowedIpAddresses []string `json:"allowedIpAddresses,omitempty"`
	// Specifies the IP addresses that should not be used during recovery recovery. Cannot be set if allowedIpAddresses is set.
	DeniedIpAddresses []string `json:"deniedIpAddresses,omitempty"`
}

// NewFilterIpConfig instantiates a new FilterIpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilterIpConfig() *FilterIpConfig {
	this := FilterIpConfig{}
	return &this
}

// NewFilterIpConfigWithDefaults instantiates a new FilterIpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilterIpConfigWithDefaults() *FilterIpConfig {
	this := FilterIpConfig{}
	return &this
}

// GetAllowedIpAddresses returns the AllowedIpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterIpConfig) GetAllowedIpAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AllowedIpAddresses
}

// GetAllowedIpAddressesOk returns a tuple with the AllowedIpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterIpConfig) GetAllowedIpAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.AllowedIpAddresses) {
		return nil, false
	}
	return o.AllowedIpAddresses, true
}

// HasAllowedIpAddresses returns a boolean if a field has been set.
func (o *FilterIpConfig) HasAllowedIpAddresses() bool {
	if o != nil && !IsNil(o.AllowedIpAddresses) {
		return true
	}

	return false
}

// SetAllowedIpAddresses gets a reference to the given []string and assigns it to the AllowedIpAddresses field.
func (o *FilterIpConfig) SetAllowedIpAddresses(v []string) {
	o.AllowedIpAddresses = v
}

// GetDeniedIpAddresses returns the DeniedIpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilterIpConfig) GetDeniedIpAddresses() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DeniedIpAddresses
}

// GetDeniedIpAddressesOk returns a tuple with the DeniedIpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilterIpConfig) GetDeniedIpAddressesOk() ([]string, bool) {
	if o == nil || IsNil(o.DeniedIpAddresses) {
		return nil, false
	}
	return o.DeniedIpAddresses, true
}

// HasDeniedIpAddresses returns a boolean if a field has been set.
func (o *FilterIpConfig) HasDeniedIpAddresses() bool {
	if o != nil && !IsNil(o.DeniedIpAddresses) {
		return true
	}

	return false
}

// SetDeniedIpAddresses gets a reference to the given []string and assigns it to the DeniedIpAddresses field.
func (o *FilterIpConfig) SetDeniedIpAddresses(v []string) {
	o.DeniedIpAddresses = v
}

func (o FilterIpConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilterIpConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowedIpAddresses != nil {
		toSerialize["allowedIpAddresses"] = o.AllowedIpAddresses
	}
	if o.DeniedIpAddresses != nil {
		toSerialize["deniedIpAddresses"] = o.DeniedIpAddresses
	}
	return toSerialize, nil
}

type NullableFilterIpConfig struct {
	value *FilterIpConfig
	isSet bool
}

func (v NullableFilterIpConfig) Get() *FilterIpConfig {
	return v.value
}

func (v *NullableFilterIpConfig) Set(val *FilterIpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFilterIpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFilterIpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilterIpConfig(val *FilterIpConfig) *NullableFilterIpConfig {
	return &NullableFilterIpConfig{value: val, isSet: true}
}

func (v NullableFilterIpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilterIpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


