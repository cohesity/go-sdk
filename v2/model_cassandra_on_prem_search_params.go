/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CassandraOnPremSearchParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CassandraOnPremSearchParams{}

// CassandraOnPremSearchParams Parameters required to search Cassandra on a cluster.
type CassandraOnPremSearchParams struct {
	// Specifies one or more Cassandra object types to be searched.
	CassandraObjectTypes []string `json:"cassandraObjectTypes"`
	// Specifies the search string to search the Cassandra Objects
	SearchString NullableString `json:"searchString"`
	// Specifies a list of source ids. Only files found in these sources will be returned.
	SourceIds []int64 `json:"sourceIds,omitempty"`
}

type _CassandraOnPremSearchParams CassandraOnPremSearchParams

// NewCassandraOnPremSearchParams instantiates a new CassandraOnPremSearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCassandraOnPremSearchParams(cassandraObjectTypes []string, searchString NullableString) *CassandraOnPremSearchParams {
	this := CassandraOnPremSearchParams{}
	this.CassandraObjectTypes = cassandraObjectTypes
	this.SearchString = searchString
	return &this
}

// NewCassandraOnPremSearchParamsWithDefaults instantiates a new CassandraOnPremSearchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCassandraOnPremSearchParamsWithDefaults() *CassandraOnPremSearchParams {
	this := CassandraOnPremSearchParams{}
	return &this
}

// GetCassandraObjectTypes returns the CassandraObjectTypes field value
func (o *CassandraOnPremSearchParams) GetCassandraObjectTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CassandraObjectTypes
}

// GetCassandraObjectTypesOk returns a tuple with the CassandraObjectTypes field value
// and a boolean to check if the value has been set.
func (o *CassandraOnPremSearchParams) GetCassandraObjectTypesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CassandraObjectTypes, true
}

// SetCassandraObjectTypes sets field value
func (o *CassandraOnPremSearchParams) SetCassandraObjectTypes(v []string) {
	o.CassandraObjectTypes = v
}

// GetSearchString returns the SearchString field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CassandraOnPremSearchParams) GetSearchString() string {
	if o == nil || o.SearchString.Get() == nil {
		var ret string
		return ret
	}

	return *o.SearchString.Get()
}

// GetSearchStringOk returns a tuple with the SearchString field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraOnPremSearchParams) GetSearchStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SearchString.Get(), o.SearchString.IsSet()
}

// SetSearchString sets field value
func (o *CassandraOnPremSearchParams) SetSearchString(v string) {
	o.SearchString.Set(&v)
}

// GetSourceIds returns the SourceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraOnPremSearchParams) GetSourceIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.SourceIds
}

// GetSourceIdsOk returns a tuple with the SourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraOnPremSearchParams) GetSourceIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.SourceIds) {
		return nil, false
	}
	return o.SourceIds, true
}

// HasSourceIds returns a boolean if a field has been set.
func (o *CassandraOnPremSearchParams) HasSourceIds() bool {
	if o != nil && !IsNil(o.SourceIds) {
		return true
	}

	return false
}

// SetSourceIds gets a reference to the given []int64 and assigns it to the SourceIds field.
func (o *CassandraOnPremSearchParams) SetSourceIds(v []int64) {
	o.SourceIds = v
}

func (o CassandraOnPremSearchParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CassandraOnPremSearchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["cassandraObjectTypes"] = o.CassandraObjectTypes
	toSerialize["searchString"] = o.SearchString.Get()
	if o.SourceIds != nil {
		toSerialize["sourceIds"] = o.SourceIds
	}
	return toSerialize, nil
}

func (o *CassandraOnPremSearchParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"cassandraObjectTypes",
		"searchString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCassandraOnPremSearchParams := _CassandraOnPremSearchParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCassandraOnPremSearchParams)

	if err != nil {
		return err
	}

	*o = CassandraOnPremSearchParams(varCassandraOnPremSearchParams)

	return err
}

type NullableCassandraOnPremSearchParams struct {
	value *CassandraOnPremSearchParams
	isSet bool
}

func (v NullableCassandraOnPremSearchParams) Get() *CassandraOnPremSearchParams {
	return v.value
}

func (v *NullableCassandraOnPremSearchParams) Set(val *CassandraOnPremSearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCassandraOnPremSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCassandraOnPremSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCassandraOnPremSearchParams(val *CassandraOnPremSearchParams) *NullableCassandraOnPremSearchParams {
	return &NullableCassandraOnPremSearchParams{value: val, isSet: true}
}

func (v NullableCassandraOnPremSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCassandraOnPremSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


