/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the IpmiSelInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IpmiSelInfo{}

// IpmiSelInfo Specifies the sel info for the ipmi.
type IpmiSelInfo struct {
	// Specifies the size of each allocation unit in bytes.
	AllocationUnitSize NullableString `json:"allocationUnitSize,omitempty"`
	// Specifies the number of allocation units available in SEL.
	AllocationUnits NullableString `json:"allocationUnits,omitempty"`
	// Specifies the number of log entries stores in SEL.
	Entries NullableString `json:"entries,omitempty"`
	// Specifies the number of free bytes in SEL.
	FreeSpace NullableString `json:"freeSpace,omitempty"`
	// Specifies the number of free allocation units present in SEL.
	FreeUnits NullableString `json:"freeUnits,omitempty"`
	// Specifies the size of the largest contiguous block of free space available in the SEL.
	LargestFreeBlk NullableString `json:"largestFreeBlk,omitempty"`
	// Specifies the maximum size of a single log record that can be stored in the SEL measured in bytes.
	LargestRecordSize NullableString `json:"largestRecordSize,omitempty"`
	// Specifies the latest time stamp at which a log entry was added to SEL.
	LastAdditionTime NullableString `json:"lastAdditionTime,omitempty"`
	// Specifies the latest time stamp at which a log entry was deleted from SEL.
	LastDeletionTime NullableString `json:"lastDeletionTime,omitempty"`
	// Specifies whether an overflow has occured in SEL.
	Overflow NullableString `json:"overflow,omitempty"`
	// Specifies the percentage of SEL used by log entries.
	PercentUsed NullableString `json:"percentUsed,omitempty"`
	// Specifies a space seperated list of commands that are supported for managing the SEL.
	SupportedCommands NullableString `json:"supportedCommands,omitempty"`
	// Specifies the SEL(System Event Log) version for given node.
	Version NullableString `json:"version,omitempty"`
}

// NewIpmiSelInfo instantiates a new IpmiSelInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIpmiSelInfo() *IpmiSelInfo {
	this := IpmiSelInfo{}
	return &this
}

// NewIpmiSelInfoWithDefaults instantiates a new IpmiSelInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIpmiSelInfoWithDefaults() *IpmiSelInfo {
	this := IpmiSelInfo{}
	return &this
}

// GetAllocationUnitSize returns the AllocationUnitSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetAllocationUnitSize() string {
	if o == nil || IsNil(o.AllocationUnitSize.Get()) {
		var ret string
		return ret
	}
	return *o.AllocationUnitSize.Get()
}

// GetAllocationUnitSizeOk returns a tuple with the AllocationUnitSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetAllocationUnitSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllocationUnitSize.Get(), o.AllocationUnitSize.IsSet()
}

// HasAllocationUnitSize returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasAllocationUnitSize() bool {
	if o != nil && o.AllocationUnitSize.IsSet() {
		return true
	}

	return false
}

// SetAllocationUnitSize gets a reference to the given NullableString and assigns it to the AllocationUnitSize field.
func (o *IpmiSelInfo) SetAllocationUnitSize(v string) {
	o.AllocationUnitSize.Set(&v)
}
// SetAllocationUnitSizeNil sets the value for AllocationUnitSize to be an explicit nil
func (o *IpmiSelInfo) SetAllocationUnitSizeNil() {
	o.AllocationUnitSize.Set(nil)
}

// UnsetAllocationUnitSize ensures that no value is present for AllocationUnitSize, not even an explicit nil
func (o *IpmiSelInfo) UnsetAllocationUnitSize() {
	o.AllocationUnitSize.Unset()
}

// GetAllocationUnits returns the AllocationUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetAllocationUnits() string {
	if o == nil || IsNil(o.AllocationUnits.Get()) {
		var ret string
		return ret
	}
	return *o.AllocationUnits.Get()
}

// GetAllocationUnitsOk returns a tuple with the AllocationUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetAllocationUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllocationUnits.Get(), o.AllocationUnits.IsSet()
}

// HasAllocationUnits returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasAllocationUnits() bool {
	if o != nil && o.AllocationUnits.IsSet() {
		return true
	}

	return false
}

// SetAllocationUnits gets a reference to the given NullableString and assigns it to the AllocationUnits field.
func (o *IpmiSelInfo) SetAllocationUnits(v string) {
	o.AllocationUnits.Set(&v)
}
// SetAllocationUnitsNil sets the value for AllocationUnits to be an explicit nil
func (o *IpmiSelInfo) SetAllocationUnitsNil() {
	o.AllocationUnits.Set(nil)
}

// UnsetAllocationUnits ensures that no value is present for AllocationUnits, not even an explicit nil
func (o *IpmiSelInfo) UnsetAllocationUnits() {
	o.AllocationUnits.Unset()
}

// GetEntries returns the Entries field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetEntries() string {
	if o == nil || IsNil(o.Entries.Get()) {
		var ret string
		return ret
	}
	return *o.Entries.Get()
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetEntriesOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Entries.Get(), o.Entries.IsSet()
}

// HasEntries returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasEntries() bool {
	if o != nil && o.Entries.IsSet() {
		return true
	}

	return false
}

// SetEntries gets a reference to the given NullableString and assigns it to the Entries field.
func (o *IpmiSelInfo) SetEntries(v string) {
	o.Entries.Set(&v)
}
// SetEntriesNil sets the value for Entries to be an explicit nil
func (o *IpmiSelInfo) SetEntriesNil() {
	o.Entries.Set(nil)
}

// UnsetEntries ensures that no value is present for Entries, not even an explicit nil
func (o *IpmiSelInfo) UnsetEntries() {
	o.Entries.Unset()
}

// GetFreeSpace returns the FreeSpace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetFreeSpace() string {
	if o == nil || IsNil(o.FreeSpace.Get()) {
		var ret string
		return ret
	}
	return *o.FreeSpace.Get()
}

// GetFreeSpaceOk returns a tuple with the FreeSpace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetFreeSpaceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreeSpace.Get(), o.FreeSpace.IsSet()
}

// HasFreeSpace returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasFreeSpace() bool {
	if o != nil && o.FreeSpace.IsSet() {
		return true
	}

	return false
}

// SetFreeSpace gets a reference to the given NullableString and assigns it to the FreeSpace field.
func (o *IpmiSelInfo) SetFreeSpace(v string) {
	o.FreeSpace.Set(&v)
}
// SetFreeSpaceNil sets the value for FreeSpace to be an explicit nil
func (o *IpmiSelInfo) SetFreeSpaceNil() {
	o.FreeSpace.Set(nil)
}

// UnsetFreeSpace ensures that no value is present for FreeSpace, not even an explicit nil
func (o *IpmiSelInfo) UnsetFreeSpace() {
	o.FreeSpace.Unset()
}

// GetFreeUnits returns the FreeUnits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetFreeUnits() string {
	if o == nil || IsNil(o.FreeUnits.Get()) {
		var ret string
		return ret
	}
	return *o.FreeUnits.Get()
}

// GetFreeUnitsOk returns a tuple with the FreeUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetFreeUnitsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FreeUnits.Get(), o.FreeUnits.IsSet()
}

// HasFreeUnits returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasFreeUnits() bool {
	if o != nil && o.FreeUnits.IsSet() {
		return true
	}

	return false
}

// SetFreeUnits gets a reference to the given NullableString and assigns it to the FreeUnits field.
func (o *IpmiSelInfo) SetFreeUnits(v string) {
	o.FreeUnits.Set(&v)
}
// SetFreeUnitsNil sets the value for FreeUnits to be an explicit nil
func (o *IpmiSelInfo) SetFreeUnitsNil() {
	o.FreeUnits.Set(nil)
}

// UnsetFreeUnits ensures that no value is present for FreeUnits, not even an explicit nil
func (o *IpmiSelInfo) UnsetFreeUnits() {
	o.FreeUnits.Unset()
}

// GetLargestFreeBlk returns the LargestFreeBlk field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetLargestFreeBlk() string {
	if o == nil || IsNil(o.LargestFreeBlk.Get()) {
		var ret string
		return ret
	}
	return *o.LargestFreeBlk.Get()
}

// GetLargestFreeBlkOk returns a tuple with the LargestFreeBlk field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetLargestFreeBlkOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LargestFreeBlk.Get(), o.LargestFreeBlk.IsSet()
}

// HasLargestFreeBlk returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasLargestFreeBlk() bool {
	if o != nil && o.LargestFreeBlk.IsSet() {
		return true
	}

	return false
}

// SetLargestFreeBlk gets a reference to the given NullableString and assigns it to the LargestFreeBlk field.
func (o *IpmiSelInfo) SetLargestFreeBlk(v string) {
	o.LargestFreeBlk.Set(&v)
}
// SetLargestFreeBlkNil sets the value for LargestFreeBlk to be an explicit nil
func (o *IpmiSelInfo) SetLargestFreeBlkNil() {
	o.LargestFreeBlk.Set(nil)
}

// UnsetLargestFreeBlk ensures that no value is present for LargestFreeBlk, not even an explicit nil
func (o *IpmiSelInfo) UnsetLargestFreeBlk() {
	o.LargestFreeBlk.Unset()
}

// GetLargestRecordSize returns the LargestRecordSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetLargestRecordSize() string {
	if o == nil || IsNil(o.LargestRecordSize.Get()) {
		var ret string
		return ret
	}
	return *o.LargestRecordSize.Get()
}

// GetLargestRecordSizeOk returns a tuple with the LargestRecordSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetLargestRecordSizeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LargestRecordSize.Get(), o.LargestRecordSize.IsSet()
}

// HasLargestRecordSize returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasLargestRecordSize() bool {
	if o != nil && o.LargestRecordSize.IsSet() {
		return true
	}

	return false
}

// SetLargestRecordSize gets a reference to the given NullableString and assigns it to the LargestRecordSize field.
func (o *IpmiSelInfo) SetLargestRecordSize(v string) {
	o.LargestRecordSize.Set(&v)
}
// SetLargestRecordSizeNil sets the value for LargestRecordSize to be an explicit nil
func (o *IpmiSelInfo) SetLargestRecordSizeNil() {
	o.LargestRecordSize.Set(nil)
}

// UnsetLargestRecordSize ensures that no value is present for LargestRecordSize, not even an explicit nil
func (o *IpmiSelInfo) UnsetLargestRecordSize() {
	o.LargestRecordSize.Unset()
}

// GetLastAdditionTime returns the LastAdditionTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetLastAdditionTime() string {
	if o == nil || IsNil(o.LastAdditionTime.Get()) {
		var ret string
		return ret
	}
	return *o.LastAdditionTime.Get()
}

// GetLastAdditionTimeOk returns a tuple with the LastAdditionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetLastAdditionTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastAdditionTime.Get(), o.LastAdditionTime.IsSet()
}

// HasLastAdditionTime returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasLastAdditionTime() bool {
	if o != nil && o.LastAdditionTime.IsSet() {
		return true
	}

	return false
}

// SetLastAdditionTime gets a reference to the given NullableString and assigns it to the LastAdditionTime field.
func (o *IpmiSelInfo) SetLastAdditionTime(v string) {
	o.LastAdditionTime.Set(&v)
}
// SetLastAdditionTimeNil sets the value for LastAdditionTime to be an explicit nil
func (o *IpmiSelInfo) SetLastAdditionTimeNil() {
	o.LastAdditionTime.Set(nil)
}

// UnsetLastAdditionTime ensures that no value is present for LastAdditionTime, not even an explicit nil
func (o *IpmiSelInfo) UnsetLastAdditionTime() {
	o.LastAdditionTime.Unset()
}

// GetLastDeletionTime returns the LastDeletionTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetLastDeletionTime() string {
	if o == nil || IsNil(o.LastDeletionTime.Get()) {
		var ret string
		return ret
	}
	return *o.LastDeletionTime.Get()
}

// GetLastDeletionTimeOk returns a tuple with the LastDeletionTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetLastDeletionTimeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastDeletionTime.Get(), o.LastDeletionTime.IsSet()
}

// HasLastDeletionTime returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasLastDeletionTime() bool {
	if o != nil && o.LastDeletionTime.IsSet() {
		return true
	}

	return false
}

// SetLastDeletionTime gets a reference to the given NullableString and assigns it to the LastDeletionTime field.
func (o *IpmiSelInfo) SetLastDeletionTime(v string) {
	o.LastDeletionTime.Set(&v)
}
// SetLastDeletionTimeNil sets the value for LastDeletionTime to be an explicit nil
func (o *IpmiSelInfo) SetLastDeletionTimeNil() {
	o.LastDeletionTime.Set(nil)
}

// UnsetLastDeletionTime ensures that no value is present for LastDeletionTime, not even an explicit nil
func (o *IpmiSelInfo) UnsetLastDeletionTime() {
	o.LastDeletionTime.Unset()
}

// GetOverflow returns the Overflow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetOverflow() string {
	if o == nil || IsNil(o.Overflow.Get()) {
		var ret string
		return ret
	}
	return *o.Overflow.Get()
}

// GetOverflowOk returns a tuple with the Overflow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetOverflowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Overflow.Get(), o.Overflow.IsSet()
}

// HasOverflow returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasOverflow() bool {
	if o != nil && o.Overflow.IsSet() {
		return true
	}

	return false
}

// SetOverflow gets a reference to the given NullableString and assigns it to the Overflow field.
func (o *IpmiSelInfo) SetOverflow(v string) {
	o.Overflow.Set(&v)
}
// SetOverflowNil sets the value for Overflow to be an explicit nil
func (o *IpmiSelInfo) SetOverflowNil() {
	o.Overflow.Set(nil)
}

// UnsetOverflow ensures that no value is present for Overflow, not even an explicit nil
func (o *IpmiSelInfo) UnsetOverflow() {
	o.Overflow.Unset()
}

// GetPercentUsed returns the PercentUsed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetPercentUsed() string {
	if o == nil || IsNil(o.PercentUsed.Get()) {
		var ret string
		return ret
	}
	return *o.PercentUsed.Get()
}

// GetPercentUsedOk returns a tuple with the PercentUsed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetPercentUsedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PercentUsed.Get(), o.PercentUsed.IsSet()
}

// HasPercentUsed returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasPercentUsed() bool {
	if o != nil && o.PercentUsed.IsSet() {
		return true
	}

	return false
}

// SetPercentUsed gets a reference to the given NullableString and assigns it to the PercentUsed field.
func (o *IpmiSelInfo) SetPercentUsed(v string) {
	o.PercentUsed.Set(&v)
}
// SetPercentUsedNil sets the value for PercentUsed to be an explicit nil
func (o *IpmiSelInfo) SetPercentUsedNil() {
	o.PercentUsed.Set(nil)
}

// UnsetPercentUsed ensures that no value is present for PercentUsed, not even an explicit nil
func (o *IpmiSelInfo) UnsetPercentUsed() {
	o.PercentUsed.Unset()
}

// GetSupportedCommands returns the SupportedCommands field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetSupportedCommands() string {
	if o == nil || IsNil(o.SupportedCommands.Get()) {
		var ret string
		return ret
	}
	return *o.SupportedCommands.Get()
}

// GetSupportedCommandsOk returns a tuple with the SupportedCommands field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetSupportedCommandsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SupportedCommands.Get(), o.SupportedCommands.IsSet()
}

// HasSupportedCommands returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasSupportedCommands() bool {
	if o != nil && o.SupportedCommands.IsSet() {
		return true
	}

	return false
}

// SetSupportedCommands gets a reference to the given NullableString and assigns it to the SupportedCommands field.
func (o *IpmiSelInfo) SetSupportedCommands(v string) {
	o.SupportedCommands.Set(&v)
}
// SetSupportedCommandsNil sets the value for SupportedCommands to be an explicit nil
func (o *IpmiSelInfo) SetSupportedCommandsNil() {
	o.SupportedCommands.Set(nil)
}

// UnsetSupportedCommands ensures that no value is present for SupportedCommands, not even an explicit nil
func (o *IpmiSelInfo) UnsetSupportedCommands() {
	o.SupportedCommands.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IpmiSelInfo) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IpmiSelInfo) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *IpmiSelInfo) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *IpmiSelInfo) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *IpmiSelInfo) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *IpmiSelInfo) UnsetVersion() {
	o.Version.Unset()
}

func (o IpmiSelInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IpmiSelInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllocationUnitSize.IsSet() {
		toSerialize["allocationUnitSize"] = o.AllocationUnitSize.Get()
	}
	if o.AllocationUnits.IsSet() {
		toSerialize["allocationUnits"] = o.AllocationUnits.Get()
	}
	if o.Entries.IsSet() {
		toSerialize["entries"] = o.Entries.Get()
	}
	if o.FreeSpace.IsSet() {
		toSerialize["freeSpace"] = o.FreeSpace.Get()
	}
	if o.FreeUnits.IsSet() {
		toSerialize["freeUnits"] = o.FreeUnits.Get()
	}
	if o.LargestFreeBlk.IsSet() {
		toSerialize["largestFreeBlk"] = o.LargestFreeBlk.Get()
	}
	if o.LargestRecordSize.IsSet() {
		toSerialize["largestRecordSize"] = o.LargestRecordSize.Get()
	}
	if o.LastAdditionTime.IsSet() {
		toSerialize["lastAdditionTime"] = o.LastAdditionTime.Get()
	}
	if o.LastDeletionTime.IsSet() {
		toSerialize["lastDeletionTime"] = o.LastDeletionTime.Get()
	}
	if o.Overflow.IsSet() {
		toSerialize["overflow"] = o.Overflow.Get()
	}
	if o.PercentUsed.IsSet() {
		toSerialize["percentUsed"] = o.PercentUsed.Get()
	}
	if o.SupportedCommands.IsSet() {
		toSerialize["supportedCommands"] = o.SupportedCommands.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return toSerialize, nil
}

type NullableIpmiSelInfo struct {
	value *IpmiSelInfo
	isSet bool
}

func (v NullableIpmiSelInfo) Get() *IpmiSelInfo {
	return v.value
}

func (v *NullableIpmiSelInfo) Set(val *IpmiSelInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableIpmiSelInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableIpmiSelInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIpmiSelInfo(val *IpmiSelInfo) *NullableIpmiSelInfo {
	return &NullableIpmiSelInfo{value: val, isSet: true}
}

func (v NullableIpmiSelInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIpmiSelInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


