/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AppliedPatch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AppliedPatch{}

// AppliedPatch Specifies the description of an applied patch.
type AppliedPatch struct {
	// Specifies the time when the patch was applied in Unix epoch in milliseconds.
	AppliedTimeMsecs *int64 `json:"appliedTimeMsecs,omitempty"`
	// Specifies the description of the service.
	Component *string `json:"component,omitempty"`
	// Specifies the number of fixed issues.
	Count *int64 `json:"count,omitempty"`
	// Specifies the services for which their patches were applied together. They will also be reverted together.
	Dependencies []string `json:"dependencies,omitempty"`
	// Specifies the details of the issues fixed in the patch.
	FixedIssues []FixedIssue `json:"fixedIssues,omitempty"`
	// Specifies the number of patches applied so far for this service.
	PatchLevel *int64 `json:"patchLevel,omitempty"`
	// Specifies the name of the service.
	Service *string `json:"service,omitempty"`
	// Specifies the version of the patch.
	Version *string `json:"version,omitempty"`
	// Specifies the version it replaced.
	VersionReplaced *string `json:"versionReplaced,omitempty"`
}

// NewAppliedPatch instantiates a new AppliedPatch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppliedPatch() *AppliedPatch {
	this := AppliedPatch{}
	return &this
}

// NewAppliedPatchWithDefaults instantiates a new AppliedPatch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppliedPatchWithDefaults() *AppliedPatch {
	this := AppliedPatch{}
	return &this
}

// GetAppliedTimeMsecs returns the AppliedTimeMsecs field value if set, zero value otherwise.
func (o *AppliedPatch) GetAppliedTimeMsecs() int64 {
	if o == nil || IsNil(o.AppliedTimeMsecs) {
		var ret int64
		return ret
	}
	return *o.AppliedTimeMsecs
}

// GetAppliedTimeMsecsOk returns a tuple with the AppliedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPatch) GetAppliedTimeMsecsOk() (*int64, bool) {
	if o == nil || IsNil(o.AppliedTimeMsecs) {
		return nil, false
	}
	return o.AppliedTimeMsecs, true
}

// HasAppliedTimeMsecs returns a boolean if a field has been set.
func (o *AppliedPatch) HasAppliedTimeMsecs() bool {
	if o != nil && !IsNil(o.AppliedTimeMsecs) {
		return true
	}

	return false
}

// SetAppliedTimeMsecs gets a reference to the given int64 and assigns it to the AppliedTimeMsecs field.
func (o *AppliedPatch) SetAppliedTimeMsecs(v int64) {
	o.AppliedTimeMsecs = &v
}

// GetComponent returns the Component field value if set, zero value otherwise.
func (o *AppliedPatch) GetComponent() string {
	if o == nil || IsNil(o.Component) {
		var ret string
		return ret
	}
	return *o.Component
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPatch) GetComponentOk() (*string, bool) {
	if o == nil || IsNil(o.Component) {
		return nil, false
	}
	return o.Component, true
}

// HasComponent returns a boolean if a field has been set.
func (o *AppliedPatch) HasComponent() bool {
	if o != nil && !IsNil(o.Component) {
		return true
	}

	return false
}

// SetComponent gets a reference to the given string and assigns it to the Component field.
func (o *AppliedPatch) SetComponent(v string) {
	o.Component = &v
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *AppliedPatch) GetCount() int64 {
	if o == nil || IsNil(o.Count) {
		var ret int64
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPatch) GetCountOk() (*int64, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *AppliedPatch) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int64 and assigns it to the Count field.
func (o *AppliedPatch) SetCount(v int64) {
	o.Count = &v
}

// GetDependencies returns the Dependencies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppliedPatch) GetDependencies() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Dependencies
}

// GetDependenciesOk returns a tuple with the Dependencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppliedPatch) GetDependenciesOk() ([]string, bool) {
	if o == nil || IsNil(o.Dependencies) {
		return nil, false
	}
	return o.Dependencies, true
}

// HasDependencies returns a boolean if a field has been set.
func (o *AppliedPatch) HasDependencies() bool {
	if o != nil && !IsNil(o.Dependencies) {
		return true
	}

	return false
}

// SetDependencies gets a reference to the given []string and assigns it to the Dependencies field.
func (o *AppliedPatch) SetDependencies(v []string) {
	o.Dependencies = v
}

// GetFixedIssues returns the FixedIssues field value if set, zero value otherwise.
func (o *AppliedPatch) GetFixedIssues() []FixedIssue {
	if o == nil || IsNil(o.FixedIssues) {
		var ret []FixedIssue
		return ret
	}
	return o.FixedIssues
}

// GetFixedIssuesOk returns a tuple with the FixedIssues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPatch) GetFixedIssuesOk() ([]FixedIssue, bool) {
	if o == nil || IsNil(o.FixedIssues) {
		return nil, false
	}
	return o.FixedIssues, true
}

// HasFixedIssues returns a boolean if a field has been set.
func (o *AppliedPatch) HasFixedIssues() bool {
	if o != nil && !IsNil(o.FixedIssues) {
		return true
	}

	return false
}

// SetFixedIssues gets a reference to the given []FixedIssue and assigns it to the FixedIssues field.
func (o *AppliedPatch) SetFixedIssues(v []FixedIssue) {
	o.FixedIssues = v
}

// GetPatchLevel returns the PatchLevel field value if set, zero value otherwise.
func (o *AppliedPatch) GetPatchLevel() int64 {
	if o == nil || IsNil(o.PatchLevel) {
		var ret int64
		return ret
	}
	return *o.PatchLevel
}

// GetPatchLevelOk returns a tuple with the PatchLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPatch) GetPatchLevelOk() (*int64, bool) {
	if o == nil || IsNil(o.PatchLevel) {
		return nil, false
	}
	return o.PatchLevel, true
}

// HasPatchLevel returns a boolean if a field has been set.
func (o *AppliedPatch) HasPatchLevel() bool {
	if o != nil && !IsNil(o.PatchLevel) {
		return true
	}

	return false
}

// SetPatchLevel gets a reference to the given int64 and assigns it to the PatchLevel field.
func (o *AppliedPatch) SetPatchLevel(v int64) {
	o.PatchLevel = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *AppliedPatch) GetService() string {
	if o == nil || IsNil(o.Service) {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPatch) GetServiceOk() (*string, bool) {
	if o == nil || IsNil(o.Service) {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *AppliedPatch) HasService() bool {
	if o != nil && !IsNil(o.Service) {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *AppliedPatch) SetService(v string) {
	o.Service = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *AppliedPatch) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPatch) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *AppliedPatch) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *AppliedPatch) SetVersion(v string) {
	o.Version = &v
}

// GetVersionReplaced returns the VersionReplaced field value if set, zero value otherwise.
func (o *AppliedPatch) GetVersionReplaced() string {
	if o == nil || IsNil(o.VersionReplaced) {
		var ret string
		return ret
	}
	return *o.VersionReplaced
}

// GetVersionReplacedOk returns a tuple with the VersionReplaced field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppliedPatch) GetVersionReplacedOk() (*string, bool) {
	if o == nil || IsNil(o.VersionReplaced) {
		return nil, false
	}
	return o.VersionReplaced, true
}

// HasVersionReplaced returns a boolean if a field has been set.
func (o *AppliedPatch) HasVersionReplaced() bool {
	if o != nil && !IsNil(o.VersionReplaced) {
		return true
	}

	return false
}

// SetVersionReplaced gets a reference to the given string and assigns it to the VersionReplaced field.
func (o *AppliedPatch) SetVersionReplaced(v string) {
	o.VersionReplaced = &v
}

func (o AppliedPatch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AppliedPatch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AppliedTimeMsecs) {
		toSerialize["appliedTimeMsecs"] = o.AppliedTimeMsecs
	}
	if !IsNil(o.Component) {
		toSerialize["component"] = o.Component
	}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if o.Dependencies != nil {
		toSerialize["dependencies"] = o.Dependencies
	}
	if !IsNil(o.FixedIssues) {
		toSerialize["fixedIssues"] = o.FixedIssues
	}
	if !IsNil(o.PatchLevel) {
		toSerialize["patchLevel"] = o.PatchLevel
	}
	if !IsNil(o.Service) {
		toSerialize["service"] = o.Service
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	if !IsNil(o.VersionReplaced) {
		toSerialize["versionReplaced"] = o.VersionReplaced
	}
	return toSerialize, nil
}

type NullableAppliedPatch struct {
	value *AppliedPatch
	isSet bool
}

func (v NullableAppliedPatch) Get() *AppliedPatch {
	return v.value
}

func (v *NullableAppliedPatch) Set(val *AppliedPatch) {
	v.value = val
	v.isSet = true
}

func (v NullableAppliedPatch) IsSet() bool {
	return v.isSet
}

func (v *NullableAppliedPatch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppliedPatch(val *AppliedPatch) *NullableAppliedPatch {
	return &NullableAppliedPatch{value: val, isSet: true}
}

func (v NullableAppliedPatch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppliedPatch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


