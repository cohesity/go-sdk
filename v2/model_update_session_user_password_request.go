/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateSessionUserPasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateSessionUserPasswordRequest{}

// UpdateSessionUserPasswordRequest Specifies the request parameters of the update password.
type UpdateSessionUserPasswordRequest struct {
	// Specifies the current password of the user. This is required when trying to update the current user's password.
	CurrentPassword NullableString `json:"currentPassword"`
	// Specifies the new password.
	NewPassword NullableString `json:"newPassword,omitempty"`
}

type _UpdateSessionUserPasswordRequest UpdateSessionUserPasswordRequest

// NewUpdateSessionUserPasswordRequest instantiates a new UpdateSessionUserPasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateSessionUserPasswordRequest(currentPassword NullableString) *UpdateSessionUserPasswordRequest {
	this := UpdateSessionUserPasswordRequest{}
	this.CurrentPassword = currentPassword
	return &this
}

// NewUpdateSessionUserPasswordRequestWithDefaults instantiates a new UpdateSessionUserPasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateSessionUserPasswordRequestWithDefaults() *UpdateSessionUserPasswordRequest {
	this := UpdateSessionUserPasswordRequest{}
	return &this
}

// GetCurrentPassword returns the CurrentPassword field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateSessionUserPasswordRequest) GetCurrentPassword() string {
	if o == nil || o.CurrentPassword.Get() == nil {
		var ret string
		return ret
	}

	return *o.CurrentPassword.Get()
}

// GetCurrentPasswordOk returns a tuple with the CurrentPassword field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSessionUserPasswordRequest) GetCurrentPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentPassword.Get(), o.CurrentPassword.IsSet()
}

// SetCurrentPassword sets field value
func (o *UpdateSessionUserPasswordRequest) SetCurrentPassword(v string) {
	o.CurrentPassword.Set(&v)
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateSessionUserPasswordRequest) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword.Get()) {
		var ret string
		return ret
	}
	return *o.NewPassword.Get()
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateSessionUserPasswordRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewPassword.Get(), o.NewPassword.IsSet()
}

// HasNewPassword returns a boolean if a field has been set.
func (o *UpdateSessionUserPasswordRequest) HasNewPassword() bool {
	if o != nil && o.NewPassword.IsSet() {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given NullableString and assigns it to the NewPassword field.
func (o *UpdateSessionUserPasswordRequest) SetNewPassword(v string) {
	o.NewPassword.Set(&v)
}
// SetNewPasswordNil sets the value for NewPassword to be an explicit nil
func (o *UpdateSessionUserPasswordRequest) SetNewPasswordNil() {
	o.NewPassword.Set(nil)
}

// UnsetNewPassword ensures that no value is present for NewPassword, not even an explicit nil
func (o *UpdateSessionUserPasswordRequest) UnsetNewPassword() {
	o.NewPassword.Unset()
}

func (o UpdateSessionUserPasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateSessionUserPasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currentPassword"] = o.CurrentPassword.Get()
	if o.NewPassword.IsSet() {
		toSerialize["newPassword"] = o.NewPassword.Get()
	}
	return toSerialize, nil
}

func (o *UpdateSessionUserPasswordRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currentPassword",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateSessionUserPasswordRequest := _UpdateSessionUserPasswordRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateSessionUserPasswordRequest)

	if err != nil {
		return err
	}

	*o = UpdateSessionUserPasswordRequest(varUpdateSessionUserPasswordRequest)

	return err
}

type NullableUpdateSessionUserPasswordRequest struct {
	value *UpdateSessionUserPasswordRequest
	isSet bool
}

func (v NullableUpdateSessionUserPasswordRequest) Get() *UpdateSessionUserPasswordRequest {
	return v.value
}

func (v *NullableUpdateSessionUserPasswordRequest) Set(val *UpdateSessionUserPasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateSessionUserPasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateSessionUserPasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateSessionUserPasswordRequest(val *UpdateSessionUserPasswordRequest) *NullableUpdateSessionUserPasswordRequest {
	return &NullableUpdateSessionUserPasswordRequest{value: val, isSet: true}
}

func (v NullableUpdateSessionUserPasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateSessionUserPasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


