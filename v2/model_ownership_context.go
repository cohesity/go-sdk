/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the OwnershipContext type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OwnershipContext{}

// OwnershipContext Specifies how the External Target or KMS will be consumed internal.
type OwnershipContext struct {
	// Specifies the ownership context of Vault or KMS.
	Enum *string `json:"enum,omitempty"`
}

// NewOwnershipContext instantiates a new OwnershipContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOwnershipContext() *OwnershipContext {
	this := OwnershipContext{}
	return &this
}

// NewOwnershipContextWithDefaults instantiates a new OwnershipContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOwnershipContextWithDefaults() *OwnershipContext {
	this := OwnershipContext{}
	return &this
}

// GetEnum returns the Enum field value if set, zero value otherwise.
func (o *OwnershipContext) GetEnum() string {
	if o == nil || IsNil(o.Enum) {
		var ret string
		return ret
	}
	return *o.Enum
}

// GetEnumOk returns a tuple with the Enum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OwnershipContext) GetEnumOk() (*string, bool) {
	if o == nil || IsNil(o.Enum) {
		return nil, false
	}
	return o.Enum, true
}

// HasEnum returns a boolean if a field has been set.
func (o *OwnershipContext) HasEnum() bool {
	if o != nil && !IsNil(o.Enum) {
		return true
	}

	return false
}

// SetEnum gets a reference to the given string and assigns it to the Enum field.
func (o *OwnershipContext) SetEnum(v string) {
	o.Enum = &v
}

func (o OwnershipContext) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OwnershipContext) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Enum) {
		toSerialize["enum"] = o.Enum
	}
	return toSerialize, nil
}

type NullableOwnershipContext struct {
	value *OwnershipContext
	isSet bool
}

func (v NullableOwnershipContext) Get() *OwnershipContext {
	return v.value
}

func (v *NullableOwnershipContext) Set(val *OwnershipContext) {
	v.value = val
	v.isSet = true
}

func (v NullableOwnershipContext) IsSet() bool {
	return v.isSet
}

func (v *NullableOwnershipContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOwnershipContext(val *OwnershipContext) *NullableOwnershipContext {
	return &NullableOwnershipContext{value: val, isSet: true}
}

func (v NullableOwnershipContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOwnershipContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


