/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RunFilterValues type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunFilterValues{}

// RunFilterValues Run Filter Values.
type RunFilterValues struct {
	// Specifies Run Filter Value.
	RunFilterValues *string `json:"runFilterValues,omitempty"`
}

// NewRunFilterValues instantiates a new RunFilterValues object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunFilterValues() *RunFilterValues {
	this := RunFilterValues{}
	return &this
}

// NewRunFilterValuesWithDefaults instantiates a new RunFilterValues object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunFilterValuesWithDefaults() *RunFilterValues {
	this := RunFilterValues{}
	return &this
}

// GetRunFilterValues returns the RunFilterValues field value if set, zero value otherwise.
func (o *RunFilterValues) GetRunFilterValues() string {
	if o == nil || IsNil(o.RunFilterValues) {
		var ret string
		return ret
	}
	return *o.RunFilterValues
}

// GetRunFilterValuesOk returns a tuple with the RunFilterValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunFilterValues) GetRunFilterValuesOk() (*string, bool) {
	if o == nil || IsNil(o.RunFilterValues) {
		return nil, false
	}
	return o.RunFilterValues, true
}

// HasRunFilterValues returns a boolean if a field has been set.
func (o *RunFilterValues) HasRunFilterValues() bool {
	if o != nil && !IsNil(o.RunFilterValues) {
		return true
	}

	return false
}

// SetRunFilterValues gets a reference to the given string and assigns it to the RunFilterValues field.
func (o *RunFilterValues) SetRunFilterValues(v string) {
	o.RunFilterValues = &v
}

func (o RunFilterValues) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunFilterValues) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RunFilterValues) {
		toSerialize["runFilterValues"] = o.RunFilterValues
	}
	return toSerialize, nil
}

type NullableRunFilterValues struct {
	value *RunFilterValues
	isSet bool
}

func (v NullableRunFilterValues) Get() *RunFilterValues {
	return v.value
}

func (v *NullableRunFilterValues) Set(val *RunFilterValues) {
	v.value = val
	v.isSet = true
}

func (v NullableRunFilterValues) IsSet() bool {
	return v.isSet
}

func (v *NullableRunFilterValues) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunFilterValues(val *RunFilterValues) *NullableRunFilterValues {
	return &NullableRunFilterValues{value: val, isSet: true}
}

func (v NullableRunFilterValues) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunFilterValues) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


