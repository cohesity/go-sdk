/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KubernetesNamespaceRecoveryNewSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesNamespaceRecoveryNewSourceConfig{}

// KubernetesNamespaceRecoveryNewSourceConfig Specifies the new source configuration if a Kubernetes Namespace is being restored to a different source than the one from which it was protected.
type KubernetesNamespaceRecoveryNewSourceConfig struct {
	Source NullableKubernetesNamespaceRecoveryNewSourceConfigSource `json:"source"`
}

type _KubernetesNamespaceRecoveryNewSourceConfig KubernetesNamespaceRecoveryNewSourceConfig

// NewKubernetesNamespaceRecoveryNewSourceConfig instantiates a new KubernetesNamespaceRecoveryNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesNamespaceRecoveryNewSourceConfig(source NullableKubernetesNamespaceRecoveryNewSourceConfigSource) *KubernetesNamespaceRecoveryNewSourceConfig {
	this := KubernetesNamespaceRecoveryNewSourceConfig{}
	this.Source = source
	return &this
}

// NewKubernetesNamespaceRecoveryNewSourceConfigWithDefaults instantiates a new KubernetesNamespaceRecoveryNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesNamespaceRecoveryNewSourceConfigWithDefaults() *KubernetesNamespaceRecoveryNewSourceConfig {
	this := KubernetesNamespaceRecoveryNewSourceConfig{}
	return &this
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for KubernetesNamespaceRecoveryNewSourceConfigSource will be returned
func (o *KubernetesNamespaceRecoveryNewSourceConfig) GetSource() KubernetesNamespaceRecoveryNewSourceConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret KubernetesNamespaceRecoveryNewSourceConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesNamespaceRecoveryNewSourceConfig) GetSourceOk() (*KubernetesNamespaceRecoveryNewSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *KubernetesNamespaceRecoveryNewSourceConfig) SetSource(v KubernetesNamespaceRecoveryNewSourceConfigSource) {
	o.Source.Set(&v)
}

func (o KubernetesNamespaceRecoveryNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesNamespaceRecoveryNewSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["source"] = o.Source.Get()
	return toSerialize, nil
}

func (o *KubernetesNamespaceRecoveryNewSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubernetesNamespaceRecoveryNewSourceConfig := _KubernetesNamespaceRecoveryNewSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKubernetesNamespaceRecoveryNewSourceConfig)

	if err != nil {
		return err
	}

	*o = KubernetesNamespaceRecoveryNewSourceConfig(varKubernetesNamespaceRecoveryNewSourceConfig)

	return err
}

type NullableKubernetesNamespaceRecoveryNewSourceConfig struct {
	value *KubernetesNamespaceRecoveryNewSourceConfig
	isSet bool
}

func (v NullableKubernetesNamespaceRecoveryNewSourceConfig) Get() *KubernetesNamespaceRecoveryNewSourceConfig {
	return v.value
}

func (v *NullableKubernetesNamespaceRecoveryNewSourceConfig) Set(val *KubernetesNamespaceRecoveryNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesNamespaceRecoveryNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesNamespaceRecoveryNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesNamespaceRecoveryNewSourceConfig(val *KubernetesNamespaceRecoveryNewSourceConfig) *NullableKubernetesNamespaceRecoveryNewSourceConfig {
	return &NullableKubernetesNamespaceRecoveryNewSourceConfig{value: val, isSet: true}
}

func (v NullableKubernetesNamespaceRecoveryNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesNamespaceRecoveryNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


