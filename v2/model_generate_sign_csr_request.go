/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GenerateSignCsrRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateSignCsrRequest{}

// GenerateSignCsrRequest Specifies the parameters required to sign a certificate.
type GenerateSignCsrRequest struct {
	// Certificate signing request (csr) in pem format
	CsrPem string `json:"csrPem"`
	// Duration(e.g. 100h) of the certificate
	Expiry *string `json:"expiry,omitempty"`
	// Specifies an alternative subject name component to be included in the certificate. It is used to identify the ways the Cluster will be accessed. It is given as a comma separated list of FQDNs. The default value is the Cluster's VIP hostname.
	SanList []string `json:"sanList,omitempty"`
	// Specifies the tenant id
	TenantId NullableString `json:"tenantId,omitempty"`
}

type _GenerateSignCsrRequest GenerateSignCsrRequest

// NewGenerateSignCsrRequest instantiates a new GenerateSignCsrRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateSignCsrRequest(csrPem string) *GenerateSignCsrRequest {
	this := GenerateSignCsrRequest{}
	this.CsrPem = csrPem
	return &this
}

// NewGenerateSignCsrRequestWithDefaults instantiates a new GenerateSignCsrRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateSignCsrRequestWithDefaults() *GenerateSignCsrRequest {
	this := GenerateSignCsrRequest{}
	return &this
}

// GetCsrPem returns the CsrPem field value
func (o *GenerateSignCsrRequest) GetCsrPem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CsrPem
}

// GetCsrPemOk returns a tuple with the CsrPem field value
// and a boolean to check if the value has been set.
func (o *GenerateSignCsrRequest) GetCsrPemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CsrPem, true
}

// SetCsrPem sets field value
func (o *GenerateSignCsrRequest) SetCsrPem(v string) {
	o.CsrPem = v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *GenerateSignCsrRequest) GetExpiry() string {
	if o == nil || IsNil(o.Expiry) {
		var ret string
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateSignCsrRequest) GetExpiryOk() (*string, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *GenerateSignCsrRequest) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given string and assigns it to the Expiry field.
func (o *GenerateSignCsrRequest) SetExpiry(v string) {
	o.Expiry = &v
}

// GetSanList returns the SanList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenerateSignCsrRequest) GetSanList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SanList
}

// GetSanListOk returns a tuple with the SanList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateSignCsrRequest) GetSanListOk() ([]string, bool) {
	if o == nil || IsNil(o.SanList) {
		return nil, false
	}
	return o.SanList, true
}

// HasSanList returns a boolean if a field has been set.
func (o *GenerateSignCsrRequest) HasSanList() bool {
	if o != nil && !IsNil(o.SanList) {
		return true
	}

	return false
}

// SetSanList gets a reference to the given []string and assigns it to the SanList field.
func (o *GenerateSignCsrRequest) SetSanList(v []string) {
	o.SanList = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenerateSignCsrRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateSignCsrRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *GenerateSignCsrRequest) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *GenerateSignCsrRequest) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *GenerateSignCsrRequest) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *GenerateSignCsrRequest) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o GenerateSignCsrRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateSignCsrRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["csrPem"] = o.CsrPem
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	if o.SanList != nil {
		toSerialize["sanList"] = o.SanList
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

func (o *GenerateSignCsrRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"csrPem",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenerateSignCsrRequest := _GenerateSignCsrRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGenerateSignCsrRequest)

	if err != nil {
		return err
	}

	*o = GenerateSignCsrRequest(varGenerateSignCsrRequest)

	return err
}

type NullableGenerateSignCsrRequest struct {
	value *GenerateSignCsrRequest
	isSet bool
}

func (v NullableGenerateSignCsrRequest) Get() *GenerateSignCsrRequest {
	return v.value
}

func (v *NullableGenerateSignCsrRequest) Set(val *GenerateSignCsrRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateSignCsrRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateSignCsrRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateSignCsrRequest(val *GenerateSignCsrRequest) *NullableGenerateSignCsrRequest {
	return &NullableGenerateSignCsrRequest{value: val, isSet: true}
}

func (v NullableGenerateSignCsrRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateSignCsrRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


