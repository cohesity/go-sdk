/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureSourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureSourceRegistrationParams{}

// AzureSourceRegistrationParams Specifies the paramaters to register an Azure source.
type AzureSourceRegistrationParams struct {
	// Specifies the credentials for a list of applications from azure active directory.
	ApplicationCredentials []AzureApplicationCredentials `json:"applicationCredentials,omitempty"`
	// Specifies Tenant Id of the active directory of Azure account. Accpets both Azure tanant Id and tenant domain name.
	AzureTenantId NullableString `json:"azureTenantId,omitempty"`
	// Specifies the graph access token for using Azure graph API's.
	GraphAccessToken NullableString `json:"graphAccessToken,omitempty"`
	// Specifies the management access token for using Azure management API's.
	ManagementAccessToken NullableString `json:"managementAccessToken,omitempty"`
	// Specifies whether the registration is at tenant level or subscription level.
	RegistrationLevel NullableString `json:"registrationLevel"`
	// Specifies whether the type of registration is express or manual.
	RegistrationWorkflow NullableString `json:"registrationWorkflow"`
	// Specifies the list subscription ids to be registered.
	SubscriptionDetails []AzureSubscription `json:"subscriptionDetails,omitempty"`
	// The use cases for which the source is to be registered.
	UseCases []string `json:"useCases,omitempty"`
}

type _AzureSourceRegistrationParams AzureSourceRegistrationParams

// NewAzureSourceRegistrationParams instantiates a new AzureSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureSourceRegistrationParams(registrationLevel NullableString, registrationWorkflow NullableString) *AzureSourceRegistrationParams {
	this := AzureSourceRegistrationParams{}
	this.RegistrationLevel = registrationLevel
	this.RegistrationWorkflow = registrationWorkflow
	return &this
}

// NewAzureSourceRegistrationParamsWithDefaults instantiates a new AzureSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureSourceRegistrationParamsWithDefaults() *AzureSourceRegistrationParams {
	this := AzureSourceRegistrationParams{}
	return &this
}

// GetApplicationCredentials returns the ApplicationCredentials field value if set, zero value otherwise.
func (o *AzureSourceRegistrationParams) GetApplicationCredentials() []AzureApplicationCredentials {
	if o == nil || IsNil(o.ApplicationCredentials) {
		var ret []AzureApplicationCredentials
		return ret
	}
	return o.ApplicationCredentials
}

// GetApplicationCredentialsOk returns a tuple with the ApplicationCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSourceRegistrationParams) GetApplicationCredentialsOk() ([]AzureApplicationCredentials, bool) {
	if o == nil || IsNil(o.ApplicationCredentials) {
		return nil, false
	}
	return o.ApplicationCredentials, true
}

// HasApplicationCredentials returns a boolean if a field has been set.
func (o *AzureSourceRegistrationParams) HasApplicationCredentials() bool {
	if o != nil && !IsNil(o.ApplicationCredentials) {
		return true
	}

	return false
}

// SetApplicationCredentials gets a reference to the given []AzureApplicationCredentials and assigns it to the ApplicationCredentials field.
func (o *AzureSourceRegistrationParams) SetApplicationCredentials(v []AzureApplicationCredentials) {
	o.ApplicationCredentials = v
}

// GetAzureTenantId returns the AzureTenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureSourceRegistrationParams) GetAzureTenantId() string {
	if o == nil || IsNil(o.AzureTenantId.Get()) {
		var ret string
		return ret
	}
	return *o.AzureTenantId.Get()
}

// GetAzureTenantIdOk returns a tuple with the AzureTenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureSourceRegistrationParams) GetAzureTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AzureTenantId.Get(), o.AzureTenantId.IsSet()
}

// HasAzureTenantId returns a boolean if a field has been set.
func (o *AzureSourceRegistrationParams) HasAzureTenantId() bool {
	if o != nil && o.AzureTenantId.IsSet() {
		return true
	}

	return false
}

// SetAzureTenantId gets a reference to the given NullableString and assigns it to the AzureTenantId field.
func (o *AzureSourceRegistrationParams) SetAzureTenantId(v string) {
	o.AzureTenantId.Set(&v)
}
// SetAzureTenantIdNil sets the value for AzureTenantId to be an explicit nil
func (o *AzureSourceRegistrationParams) SetAzureTenantIdNil() {
	o.AzureTenantId.Set(nil)
}

// UnsetAzureTenantId ensures that no value is present for AzureTenantId, not even an explicit nil
func (o *AzureSourceRegistrationParams) UnsetAzureTenantId() {
	o.AzureTenantId.Unset()
}

// GetGraphAccessToken returns the GraphAccessToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureSourceRegistrationParams) GetGraphAccessToken() string {
	if o == nil || IsNil(o.GraphAccessToken.Get()) {
		var ret string
		return ret
	}
	return *o.GraphAccessToken.Get()
}

// GetGraphAccessTokenOk returns a tuple with the GraphAccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureSourceRegistrationParams) GetGraphAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GraphAccessToken.Get(), o.GraphAccessToken.IsSet()
}

// HasGraphAccessToken returns a boolean if a field has been set.
func (o *AzureSourceRegistrationParams) HasGraphAccessToken() bool {
	if o != nil && o.GraphAccessToken.IsSet() {
		return true
	}

	return false
}

// SetGraphAccessToken gets a reference to the given NullableString and assigns it to the GraphAccessToken field.
func (o *AzureSourceRegistrationParams) SetGraphAccessToken(v string) {
	o.GraphAccessToken.Set(&v)
}
// SetGraphAccessTokenNil sets the value for GraphAccessToken to be an explicit nil
func (o *AzureSourceRegistrationParams) SetGraphAccessTokenNil() {
	o.GraphAccessToken.Set(nil)
}

// UnsetGraphAccessToken ensures that no value is present for GraphAccessToken, not even an explicit nil
func (o *AzureSourceRegistrationParams) UnsetGraphAccessToken() {
	o.GraphAccessToken.Unset()
}

// GetManagementAccessToken returns the ManagementAccessToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureSourceRegistrationParams) GetManagementAccessToken() string {
	if o == nil || IsNil(o.ManagementAccessToken.Get()) {
		var ret string
		return ret
	}
	return *o.ManagementAccessToken.Get()
}

// GetManagementAccessTokenOk returns a tuple with the ManagementAccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureSourceRegistrationParams) GetManagementAccessTokenOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ManagementAccessToken.Get(), o.ManagementAccessToken.IsSet()
}

// HasManagementAccessToken returns a boolean if a field has been set.
func (o *AzureSourceRegistrationParams) HasManagementAccessToken() bool {
	if o != nil && o.ManagementAccessToken.IsSet() {
		return true
	}

	return false
}

// SetManagementAccessToken gets a reference to the given NullableString and assigns it to the ManagementAccessToken field.
func (o *AzureSourceRegistrationParams) SetManagementAccessToken(v string) {
	o.ManagementAccessToken.Set(&v)
}
// SetManagementAccessTokenNil sets the value for ManagementAccessToken to be an explicit nil
func (o *AzureSourceRegistrationParams) SetManagementAccessTokenNil() {
	o.ManagementAccessToken.Set(nil)
}

// UnsetManagementAccessToken ensures that no value is present for ManagementAccessToken, not even an explicit nil
func (o *AzureSourceRegistrationParams) UnsetManagementAccessToken() {
	o.ManagementAccessToken.Unset()
}

// GetRegistrationLevel returns the RegistrationLevel field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AzureSourceRegistrationParams) GetRegistrationLevel() string {
	if o == nil || o.RegistrationLevel.Get() == nil {
		var ret string
		return ret
	}

	return *o.RegistrationLevel.Get()
}

// GetRegistrationLevelOk returns a tuple with the RegistrationLevel field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureSourceRegistrationParams) GetRegistrationLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationLevel.Get(), o.RegistrationLevel.IsSet()
}

// SetRegistrationLevel sets field value
func (o *AzureSourceRegistrationParams) SetRegistrationLevel(v string) {
	o.RegistrationLevel.Set(&v)
}

// GetRegistrationWorkflow returns the RegistrationWorkflow field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AzureSourceRegistrationParams) GetRegistrationWorkflow() string {
	if o == nil || o.RegistrationWorkflow.Get() == nil {
		var ret string
		return ret
	}

	return *o.RegistrationWorkflow.Get()
}

// GetRegistrationWorkflowOk returns a tuple with the RegistrationWorkflow field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureSourceRegistrationParams) GetRegistrationWorkflowOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationWorkflow.Get(), o.RegistrationWorkflow.IsSet()
}

// SetRegistrationWorkflow sets field value
func (o *AzureSourceRegistrationParams) SetRegistrationWorkflow(v string) {
	o.RegistrationWorkflow.Set(&v)
}

// GetSubscriptionDetails returns the SubscriptionDetails field value if set, zero value otherwise.
func (o *AzureSourceRegistrationParams) GetSubscriptionDetails() []AzureSubscription {
	if o == nil || IsNil(o.SubscriptionDetails) {
		var ret []AzureSubscription
		return ret
	}
	return o.SubscriptionDetails
}

// GetSubscriptionDetailsOk returns a tuple with the SubscriptionDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureSourceRegistrationParams) GetSubscriptionDetailsOk() ([]AzureSubscription, bool) {
	if o == nil || IsNil(o.SubscriptionDetails) {
		return nil, false
	}
	return o.SubscriptionDetails, true
}

// HasSubscriptionDetails returns a boolean if a field has been set.
func (o *AzureSourceRegistrationParams) HasSubscriptionDetails() bool {
	if o != nil && !IsNil(o.SubscriptionDetails) {
		return true
	}

	return false
}

// SetSubscriptionDetails gets a reference to the given []AzureSubscription and assigns it to the SubscriptionDetails field.
func (o *AzureSourceRegistrationParams) SetSubscriptionDetails(v []AzureSubscription) {
	o.SubscriptionDetails = v
}

// GetUseCases returns the UseCases field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureSourceRegistrationParams) GetUseCases() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.UseCases
}

// GetUseCasesOk returns a tuple with the UseCases field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureSourceRegistrationParams) GetUseCasesOk() ([]string, bool) {
	if o == nil || IsNil(o.UseCases) {
		return nil, false
	}
	return o.UseCases, true
}

// HasUseCases returns a boolean if a field has been set.
func (o *AzureSourceRegistrationParams) HasUseCases() bool {
	if o != nil && !IsNil(o.UseCases) {
		return true
	}

	return false
}

// SetUseCases gets a reference to the given []string and assigns it to the UseCases field.
func (o *AzureSourceRegistrationParams) SetUseCases(v []string) {
	o.UseCases = v
}

func (o AzureSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureSourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationCredentials) {
		toSerialize["applicationCredentials"] = o.ApplicationCredentials
	}
	if o.AzureTenantId.IsSet() {
		toSerialize["azureTenantId"] = o.AzureTenantId.Get()
	}
	if o.GraphAccessToken.IsSet() {
		toSerialize["graphAccessToken"] = o.GraphAccessToken.Get()
	}
	if o.ManagementAccessToken.IsSet() {
		toSerialize["managementAccessToken"] = o.ManagementAccessToken.Get()
	}
	toSerialize["registrationLevel"] = o.RegistrationLevel.Get()
	toSerialize["registrationWorkflow"] = o.RegistrationWorkflow.Get()
	if !IsNil(o.SubscriptionDetails) {
		toSerialize["subscriptionDetails"] = o.SubscriptionDetails
	}
	if o.UseCases != nil {
		toSerialize["useCases"] = o.UseCases
	}
	return toSerialize, nil
}

func (o *AzureSourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"registrationLevel",
		"registrationWorkflow",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureSourceRegistrationParams := _AzureSourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureSourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = AzureSourceRegistrationParams(varAzureSourceRegistrationParams)

	return err
}

type NullableAzureSourceRegistrationParams struct {
	value *AzureSourceRegistrationParams
	isSet bool
}

func (v NullableAzureSourceRegistrationParams) Get() *AzureSourceRegistrationParams {
	return v.value
}

func (v *NullableAzureSourceRegistrationParams) Set(val *AzureSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureSourceRegistrationParams(val *AzureSourceRegistrationParams) *NullableAzureSourceRegistrationParams {
	return &NullableAzureSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableAzureSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


