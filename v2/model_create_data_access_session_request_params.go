/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateDataAccessSessionRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDataAccessSessionRequestParams{}

// CreateDataAccessSessionRequestParams Specifies the request parameters to create a data access session.
type CreateDataAccessSessionRequestParams struct {
	// Specifies information about the base snapshot of an object.
	BaseSnapshotInfo NullableDataAccessSnapshotInfo `json:"baseSnapshotInfo,omitempty"`
	// Specifies information about the backup snapshot and object whose data/metadata needs to be accessed.
	CurrentSnapshotInfo DataAccessSnapshotInfo `json:"currentSnapshotInfo"`
	// Specifies the entity id of the source.
	SourceId int64 `json:"sourceId"`
}

type _CreateDataAccessSessionRequestParams CreateDataAccessSessionRequestParams

// NewCreateDataAccessSessionRequestParams instantiates a new CreateDataAccessSessionRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDataAccessSessionRequestParams(currentSnapshotInfo DataAccessSnapshotInfo, sourceId int64) *CreateDataAccessSessionRequestParams {
	this := CreateDataAccessSessionRequestParams{}
	this.CurrentSnapshotInfo = currentSnapshotInfo
	this.SourceId = sourceId
	return &this
}

// NewCreateDataAccessSessionRequestParamsWithDefaults instantiates a new CreateDataAccessSessionRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDataAccessSessionRequestParamsWithDefaults() *CreateDataAccessSessionRequestParams {
	this := CreateDataAccessSessionRequestParams{}
	return &this
}

// GetBaseSnapshotInfo returns the BaseSnapshotInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateDataAccessSessionRequestParams) GetBaseSnapshotInfo() DataAccessSnapshotInfo {
	if o == nil || IsNil(o.BaseSnapshotInfo.Get()) {
		var ret DataAccessSnapshotInfo
		return ret
	}
	return *o.BaseSnapshotInfo.Get()
}

// GetBaseSnapshotInfoOk returns a tuple with the BaseSnapshotInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateDataAccessSessionRequestParams) GetBaseSnapshotInfoOk() (*DataAccessSnapshotInfo, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseSnapshotInfo.Get(), o.BaseSnapshotInfo.IsSet()
}

// HasBaseSnapshotInfo returns a boolean if a field has been set.
func (o *CreateDataAccessSessionRequestParams) HasBaseSnapshotInfo() bool {
	if o != nil && o.BaseSnapshotInfo.IsSet() {
		return true
	}

	return false
}

// SetBaseSnapshotInfo gets a reference to the given NullableDataAccessSnapshotInfo and assigns it to the BaseSnapshotInfo field.
func (o *CreateDataAccessSessionRequestParams) SetBaseSnapshotInfo(v DataAccessSnapshotInfo) {
	o.BaseSnapshotInfo.Set(&v)
}
// SetBaseSnapshotInfoNil sets the value for BaseSnapshotInfo to be an explicit nil
func (o *CreateDataAccessSessionRequestParams) SetBaseSnapshotInfoNil() {
	o.BaseSnapshotInfo.Set(nil)
}

// UnsetBaseSnapshotInfo ensures that no value is present for BaseSnapshotInfo, not even an explicit nil
func (o *CreateDataAccessSessionRequestParams) UnsetBaseSnapshotInfo() {
	o.BaseSnapshotInfo.Unset()
}

// GetCurrentSnapshotInfo returns the CurrentSnapshotInfo field value
func (o *CreateDataAccessSessionRequestParams) GetCurrentSnapshotInfo() DataAccessSnapshotInfo {
	if o == nil {
		var ret DataAccessSnapshotInfo
		return ret
	}

	return o.CurrentSnapshotInfo
}

// GetCurrentSnapshotInfoOk returns a tuple with the CurrentSnapshotInfo field value
// and a boolean to check if the value has been set.
func (o *CreateDataAccessSessionRequestParams) GetCurrentSnapshotInfoOk() (*DataAccessSnapshotInfo, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentSnapshotInfo, true
}

// SetCurrentSnapshotInfo sets field value
func (o *CreateDataAccessSessionRequestParams) SetCurrentSnapshotInfo(v DataAccessSnapshotInfo) {
	o.CurrentSnapshotInfo = v
}

// GetSourceId returns the SourceId field value
func (o *CreateDataAccessSessionRequestParams) GetSourceId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.SourceId
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
func (o *CreateDataAccessSessionRequestParams) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceId, true
}

// SetSourceId sets field value
func (o *CreateDataAccessSessionRequestParams) SetSourceId(v int64) {
	o.SourceId = v
}

func (o CreateDataAccessSessionRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDataAccessSessionRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BaseSnapshotInfo.IsSet() {
		toSerialize["baseSnapshotInfo"] = o.BaseSnapshotInfo.Get()
	}
	toSerialize["currentSnapshotInfo"] = o.CurrentSnapshotInfo
	toSerialize["sourceId"] = o.SourceId
	return toSerialize, nil
}

func (o *CreateDataAccessSessionRequestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"currentSnapshotInfo",
		"sourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateDataAccessSessionRequestParams := _CreateDataAccessSessionRequestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateDataAccessSessionRequestParams)

	if err != nil {
		return err
	}

	*o = CreateDataAccessSessionRequestParams(varCreateDataAccessSessionRequestParams)

	return err
}

type NullableCreateDataAccessSessionRequestParams struct {
	value *CreateDataAccessSessionRequestParams
	isSet bool
}

func (v NullableCreateDataAccessSessionRequestParams) Get() *CreateDataAccessSessionRequestParams {
	return v.value
}

func (v *NullableCreateDataAccessSessionRequestParams) Set(val *CreateDataAccessSessionRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDataAccessSessionRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDataAccessSessionRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDataAccessSessionRequestParams(val *CreateDataAccessSessionRequestParams) *NullableCreateDataAccessSessionRequestParams {
	return &NullableCreateDataAccessSessionRequestParams{value: val, isSet: true}
}

func (v NullableCreateDataAccessSessionRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDataAccessSessionRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


