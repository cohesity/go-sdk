/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeliosRpaasConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosRpaasConfig{}

// HeliosRpaasConfig Specifies settings for copying Snapshots to RPaaS Targets.
type HeliosRpaasConfig struct {
	// Specifies the unique identifier for the target getting added. This field need to be passed only when helios policies are updated.
	ConfigId NullableString `json:"configId,omitempty"`
	// Specifies if Snapshots are copied from the first completely successful Protection Group Run or the first partially successful Protection Group Run occurring at the start of the replication schedule. <br> If true, Snapshots are copied from the first Protection Group Run occurring at the start of the replication schedule that was completely successful i.e. Snapshots for all the Objects in the Protection Group were successfully captured. <br> If false, Snapshots are copied from the first Protection Group Run occurring at the start of the replication schedule, even if first Protection Group Run was not completely successful i.e. Snapshots were not captured for all Objects in the Protection Group.
	CopyOnRunSuccess NullableBool `json:"copyOnRunSuccess,omitempty"`
	Retention *HeliosRetention `json:"retention,omitempty"`
	Schedule *HeliosTargetSchedule `json:"schedule,omitempty"`
	// Specifies the RPaaS target to copy the Snapshots.
	TargetId NullableInt64 `json:"targetId"`
	// Specifies the RPaaS target name where Snapshots are copied.
	TargetName NullableString `json:"targetName,omitempty"`
	// Specifies the RPaaS target type where Snapshots are copied.
	TargetType NullableString `json:"targetType,omitempty"`
}

type _HeliosRpaasConfig HeliosRpaasConfig

// NewHeliosRpaasConfig instantiates a new HeliosRpaasConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosRpaasConfig(targetId NullableInt64) *HeliosRpaasConfig {
	this := HeliosRpaasConfig{}
	this.TargetId = targetId
	return &this
}

// NewHeliosRpaasConfigWithDefaults instantiates a new HeliosRpaasConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosRpaasConfigWithDefaults() *HeliosRpaasConfig {
	this := HeliosRpaasConfig{}
	return &this
}

// GetConfigId returns the ConfigId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosRpaasConfig) GetConfigId() string {
	if o == nil || IsNil(o.ConfigId.Get()) {
		var ret string
		return ret
	}
	return *o.ConfigId.Get()
}

// GetConfigIdOk returns a tuple with the ConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosRpaasConfig) GetConfigIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigId.Get(), o.ConfigId.IsSet()
}

// HasConfigId returns a boolean if a field has been set.
func (o *HeliosRpaasConfig) HasConfigId() bool {
	if o != nil && o.ConfigId.IsSet() {
		return true
	}

	return false
}

// SetConfigId gets a reference to the given NullableString and assigns it to the ConfigId field.
func (o *HeliosRpaasConfig) SetConfigId(v string) {
	o.ConfigId.Set(&v)
}
// SetConfigIdNil sets the value for ConfigId to be an explicit nil
func (o *HeliosRpaasConfig) SetConfigIdNil() {
	o.ConfigId.Set(nil)
}

// UnsetConfigId ensures that no value is present for ConfigId, not even an explicit nil
func (o *HeliosRpaasConfig) UnsetConfigId() {
	o.ConfigId.Unset()
}

// GetCopyOnRunSuccess returns the CopyOnRunSuccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosRpaasConfig) GetCopyOnRunSuccess() bool {
	if o == nil || IsNil(o.CopyOnRunSuccess.Get()) {
		var ret bool
		return ret
	}
	return *o.CopyOnRunSuccess.Get()
}

// GetCopyOnRunSuccessOk returns a tuple with the CopyOnRunSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosRpaasConfig) GetCopyOnRunSuccessOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CopyOnRunSuccess.Get(), o.CopyOnRunSuccess.IsSet()
}

// HasCopyOnRunSuccess returns a boolean if a field has been set.
func (o *HeliosRpaasConfig) HasCopyOnRunSuccess() bool {
	if o != nil && o.CopyOnRunSuccess.IsSet() {
		return true
	}

	return false
}

// SetCopyOnRunSuccess gets a reference to the given NullableBool and assigns it to the CopyOnRunSuccess field.
func (o *HeliosRpaasConfig) SetCopyOnRunSuccess(v bool) {
	o.CopyOnRunSuccess.Set(&v)
}
// SetCopyOnRunSuccessNil sets the value for CopyOnRunSuccess to be an explicit nil
func (o *HeliosRpaasConfig) SetCopyOnRunSuccessNil() {
	o.CopyOnRunSuccess.Set(nil)
}

// UnsetCopyOnRunSuccess ensures that no value is present for CopyOnRunSuccess, not even an explicit nil
func (o *HeliosRpaasConfig) UnsetCopyOnRunSuccess() {
	o.CopyOnRunSuccess.Unset()
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *HeliosRpaasConfig) GetRetention() HeliosRetention {
	if o == nil || IsNil(o.Retention) {
		var ret HeliosRetention
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRpaasConfig) GetRetentionOk() (*HeliosRetention, bool) {
	if o == nil || IsNil(o.Retention) {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *HeliosRpaasConfig) HasRetention() bool {
	if o != nil && !IsNil(o.Retention) {
		return true
	}

	return false
}

// SetRetention gets a reference to the given HeliosRetention and assigns it to the Retention field.
func (o *HeliosRpaasConfig) SetRetention(v HeliosRetention) {
	o.Retention = &v
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *HeliosRpaasConfig) GetSchedule() HeliosTargetSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret HeliosTargetSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRpaasConfig) GetScheduleOk() (*HeliosTargetSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *HeliosRpaasConfig) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given HeliosTargetSchedule and assigns it to the Schedule field.
func (o *HeliosRpaasConfig) SetSchedule(v HeliosTargetSchedule) {
	o.Schedule = &v
}

// GetTargetId returns the TargetId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *HeliosRpaasConfig) GetTargetId() int64 {
	if o == nil || o.TargetId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.TargetId.Get()
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosRpaasConfig) GetTargetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetId.Get(), o.TargetId.IsSet()
}

// SetTargetId sets field value
func (o *HeliosRpaasConfig) SetTargetId(v int64) {
	o.TargetId.Set(&v)
}

// GetTargetName returns the TargetName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosRpaasConfig) GetTargetName() string {
	if o == nil || IsNil(o.TargetName.Get()) {
		var ret string
		return ret
	}
	return *o.TargetName.Get()
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosRpaasConfig) GetTargetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetName.Get(), o.TargetName.IsSet()
}

// HasTargetName returns a boolean if a field has been set.
func (o *HeliosRpaasConfig) HasTargetName() bool {
	if o != nil && o.TargetName.IsSet() {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given NullableString and assigns it to the TargetName field.
func (o *HeliosRpaasConfig) SetTargetName(v string) {
	o.TargetName.Set(&v)
}
// SetTargetNameNil sets the value for TargetName to be an explicit nil
func (o *HeliosRpaasConfig) SetTargetNameNil() {
	o.TargetName.Set(nil)
}

// UnsetTargetName ensures that no value is present for TargetName, not even an explicit nil
func (o *HeliosRpaasConfig) UnsetTargetName() {
	o.TargetName.Unset()
}

// GetTargetType returns the TargetType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosRpaasConfig) GetTargetType() string {
	if o == nil || IsNil(o.TargetType.Get()) {
		var ret string
		return ret
	}
	return *o.TargetType.Get()
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosRpaasConfig) GetTargetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetType.Get(), o.TargetType.IsSet()
}

// HasTargetType returns a boolean if a field has been set.
func (o *HeliosRpaasConfig) HasTargetType() bool {
	if o != nil && o.TargetType.IsSet() {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given NullableString and assigns it to the TargetType field.
func (o *HeliosRpaasConfig) SetTargetType(v string) {
	o.TargetType.Set(&v)
}
// SetTargetTypeNil sets the value for TargetType to be an explicit nil
func (o *HeliosRpaasConfig) SetTargetTypeNil() {
	o.TargetType.Set(nil)
}

// UnsetTargetType ensures that no value is present for TargetType, not even an explicit nil
func (o *HeliosRpaasConfig) UnsetTargetType() {
	o.TargetType.Unset()
}

func (o HeliosRpaasConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosRpaasConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigId.IsSet() {
		toSerialize["configId"] = o.ConfigId.Get()
	}
	if o.CopyOnRunSuccess.IsSet() {
		toSerialize["copyOnRunSuccess"] = o.CopyOnRunSuccess.Get()
	}
	if !IsNil(o.Retention) {
		toSerialize["retention"] = o.Retention
	}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	toSerialize["targetId"] = o.TargetId.Get()
	if o.TargetName.IsSet() {
		toSerialize["targetName"] = o.TargetName.Get()
	}
	if o.TargetType.IsSet() {
		toSerialize["targetType"] = o.TargetType.Get()
	}
	return toSerialize, nil
}

func (o *HeliosRpaasConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeliosRpaasConfig := _HeliosRpaasConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeliosRpaasConfig)

	if err != nil {
		return err
	}

	*o = HeliosRpaasConfig(varHeliosRpaasConfig)

	return err
}

type NullableHeliosRpaasConfig struct {
	value *HeliosRpaasConfig
	isSet bool
}

func (v NullableHeliosRpaasConfig) Get() *HeliosRpaasConfig {
	return v.value
}

func (v *NullableHeliosRpaasConfig) Set(val *HeliosRpaasConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosRpaasConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosRpaasConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosRpaasConfig(val *HeliosRpaasConfig) *NullableHeliosRpaasConfig {
	return &NullableHeliosRpaasConfig{value: val, isSet: true}
}

func (v NullableHeliosRpaasConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosRpaasConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


