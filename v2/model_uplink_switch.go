/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UplinkSwitch type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UplinkSwitch{}

// UplinkSwitch Uplink switch details.
type UplinkSwitch struct {
	// Description of the system.
	Description NullableString `json:"description,omitempty"`
	// Name of the system.
	Name NullableString `json:"name,omitempty"`
	// Port id.
	PortId NullableString `json:"portId,omitempty"`
}

// NewUplinkSwitch instantiates a new UplinkSwitch object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUplinkSwitch() *UplinkSwitch {
	this := UplinkSwitch{}
	return &this
}

// NewUplinkSwitchWithDefaults instantiates a new UplinkSwitch object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUplinkSwitchWithDefaults() *UplinkSwitch {
	this := UplinkSwitch{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UplinkSwitch) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UplinkSwitch) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UplinkSwitch) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UplinkSwitch) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UplinkSwitch) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UplinkSwitch) UnsetDescription() {
	o.Description.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UplinkSwitch) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UplinkSwitch) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *UplinkSwitch) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *UplinkSwitch) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *UplinkSwitch) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *UplinkSwitch) UnsetName() {
	o.Name.Unset()
}

// GetPortId returns the PortId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UplinkSwitch) GetPortId() string {
	if o == nil || IsNil(o.PortId.Get()) {
		var ret string
		return ret
	}
	return *o.PortId.Get()
}

// GetPortIdOk returns a tuple with the PortId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UplinkSwitch) GetPortIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PortId.Get(), o.PortId.IsSet()
}

// HasPortId returns a boolean if a field has been set.
func (o *UplinkSwitch) HasPortId() bool {
	if o != nil && o.PortId.IsSet() {
		return true
	}

	return false
}

// SetPortId gets a reference to the given NullableString and assigns it to the PortId field.
func (o *UplinkSwitch) SetPortId(v string) {
	o.PortId.Set(&v)
}
// SetPortIdNil sets the value for PortId to be an explicit nil
func (o *UplinkSwitch) SetPortIdNil() {
	o.PortId.Set(nil)
}

// UnsetPortId ensures that no value is present for PortId, not even an explicit nil
func (o *UplinkSwitch) UnsetPortId() {
	o.PortId.Unset()
}

func (o UplinkSwitch) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UplinkSwitch) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.PortId.IsSet() {
		toSerialize["portId"] = o.PortId.Get()
	}
	return toSerialize, nil
}

type NullableUplinkSwitch struct {
	value *UplinkSwitch
	isSet bool
}

func (v NullableUplinkSwitch) Get() *UplinkSwitch {
	return v.value
}

func (v *NullableUplinkSwitch) Set(val *UplinkSwitch) {
	v.value = val
	v.isSet = true
}

func (v NullableUplinkSwitch) IsSet() bool {
	return v.isSet
}

func (v *NullableUplinkSwitch) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUplinkSwitch(val *UplinkSwitch) *NullableUplinkSwitch {
	return &NullableUplinkSwitch{value: val, isSet: true}
}

func (v NullableUplinkSwitch) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUplinkSwitch) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


