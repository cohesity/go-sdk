/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ArtifactUrl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ArtifactUrl{}

// ArtifactUrl Specifies the URL of an artifact.
type ArtifactUrl struct {
	// HTTP headers to be included in download requests for the purposes of authenticating the client, in case the package is hosted in secure file server or artifactory. 
	AuthHeaders []AuthHeader `json:"authHeaders,omitempty"`
	// The URL where the artifact can be downloaded from. 
	Url *string `json:"url,omitempty"`
}

// NewArtifactUrl instantiates a new ArtifactUrl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArtifactUrl() *ArtifactUrl {
	this := ArtifactUrl{}
	return &this
}

// NewArtifactUrlWithDefaults instantiates a new ArtifactUrl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArtifactUrlWithDefaults() *ArtifactUrl {
	this := ArtifactUrl{}
	return &this
}

// GetAuthHeaders returns the AuthHeaders field value if set, zero value otherwise.
func (o *ArtifactUrl) GetAuthHeaders() []AuthHeader {
	if o == nil || IsNil(o.AuthHeaders) {
		var ret []AuthHeader
		return ret
	}
	return o.AuthHeaders
}

// GetAuthHeadersOk returns a tuple with the AuthHeaders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactUrl) GetAuthHeadersOk() ([]AuthHeader, bool) {
	if o == nil || IsNil(o.AuthHeaders) {
		return nil, false
	}
	return o.AuthHeaders, true
}

// HasAuthHeaders returns a boolean if a field has been set.
func (o *ArtifactUrl) HasAuthHeaders() bool {
	if o != nil && !IsNil(o.AuthHeaders) {
		return true
	}

	return false
}

// SetAuthHeaders gets a reference to the given []AuthHeader and assigns it to the AuthHeaders field.
func (o *ArtifactUrl) SetAuthHeaders(v []AuthHeader) {
	o.AuthHeaders = v
}

// GetUrl returns the Url field value if set, zero value otherwise.
func (o *ArtifactUrl) GetUrl() string {
	if o == nil || IsNil(o.Url) {
		var ret string
		return ret
	}
	return *o.Url
}

// GetUrlOk returns a tuple with the Url field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArtifactUrl) GetUrlOk() (*string, bool) {
	if o == nil || IsNil(o.Url) {
		return nil, false
	}
	return o.Url, true
}

// HasUrl returns a boolean if a field has been set.
func (o *ArtifactUrl) HasUrl() bool {
	if o != nil && !IsNil(o.Url) {
		return true
	}

	return false
}

// SetUrl gets a reference to the given string and assigns it to the Url field.
func (o *ArtifactUrl) SetUrl(v string) {
	o.Url = &v
}

func (o ArtifactUrl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ArtifactUrl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuthHeaders) {
		toSerialize["authHeaders"] = o.AuthHeaders
	}
	if !IsNil(o.Url) {
		toSerialize["url"] = o.Url
	}
	return toSerialize, nil
}

type NullableArtifactUrl struct {
	value *ArtifactUrl
	isSet bool
}

func (v NullableArtifactUrl) Get() *ArtifactUrl {
	return v.value
}

func (v *NullableArtifactUrl) Set(val *ArtifactUrl) {
	v.value = val
	v.isSet = true
}

func (v NullableArtifactUrl) IsSet() bool {
	return v.isSet
}

func (v *NullableArtifactUrl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArtifactUrl(val *ArtifactUrl) *NullableArtifactUrl {
	return &NullableArtifactUrl{value: val, isSet: true}
}

func (v NullableArtifactUrl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArtifactUrl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


