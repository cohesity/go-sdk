/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the Time type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Time{}

// Time Specifies the time in hours and minutes.
type Time struct {
	// Specifies the hour of this time.
	Hour NullableInt32 `json:"hour,omitempty"`
	// Specifies the minute of this time.
	Minute NullableInt32 `json:"minute,omitempty"`
}

// NewTime instantiates a new Time object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTime() *Time {
	this := Time{}
	return &this
}

// NewTimeWithDefaults instantiates a new Time object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeWithDefaults() *Time {
	this := Time{}
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Time) GetHour() int32 {
	if o == nil || IsNil(o.Hour.Get()) {
		var ret int32
		return ret
	}
	return *o.Hour.Get()
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Time) GetHourOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hour.Get(), o.Hour.IsSet()
}

// HasHour returns a boolean if a field has been set.
func (o *Time) HasHour() bool {
	if o != nil && o.Hour.IsSet() {
		return true
	}

	return false
}

// SetHour gets a reference to the given NullableInt32 and assigns it to the Hour field.
func (o *Time) SetHour(v int32) {
	o.Hour.Set(&v)
}
// SetHourNil sets the value for Hour to be an explicit nil
func (o *Time) SetHourNil() {
	o.Hour.Set(nil)
}

// UnsetHour ensures that no value is present for Hour, not even an explicit nil
func (o *Time) UnsetHour() {
	o.Hour.Unset()
}

// GetMinute returns the Minute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Time) GetMinute() int32 {
	if o == nil || IsNil(o.Minute.Get()) {
		var ret int32
		return ret
	}
	return *o.Minute.Get()
}

// GetMinuteOk returns a tuple with the Minute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Time) GetMinuteOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Minute.Get(), o.Minute.IsSet()
}

// HasMinute returns a boolean if a field has been set.
func (o *Time) HasMinute() bool {
	if o != nil && o.Minute.IsSet() {
		return true
	}

	return false
}

// SetMinute gets a reference to the given NullableInt32 and assigns it to the Minute field.
func (o *Time) SetMinute(v int32) {
	o.Minute.Set(&v)
}
// SetMinuteNil sets the value for Minute to be an explicit nil
func (o *Time) SetMinuteNil() {
	o.Minute.Set(nil)
}

// UnsetMinute ensures that no value is present for Minute, not even an explicit nil
func (o *Time) UnsetMinute() {
	o.Minute.Unset()
}

func (o Time) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Time) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Hour.IsSet() {
		toSerialize["hour"] = o.Hour.Get()
	}
	if o.Minute.IsSet() {
		toSerialize["minute"] = o.Minute.Get()
	}
	return toSerialize, nil
}

type NullableTime struct {
	value *Time
	isSet bool
}

func (v NullableTime) Get() *Time {
	return v.value
}

func (v *NullableTime) Set(val *Time) {
	v.value = val
	v.isSet = true
}

func (v NullableTime) IsSet() bool {
	return v.isSet
}

func (v *NullableTime) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTime(val *Time) *NullableTime {
	return &NullableTime{value: val, isSet: true}
}

func (v NullableTime) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTime) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


