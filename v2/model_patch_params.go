/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PatchParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchParams{}

// PatchParams One of `packageUrl` or `versionName` must be specified. 
type PatchParams struct {
	// Specifies if healthchecks failure will cause apply patch to be aborted. By default we patch if there are healthchecks failures. Cluster will stop the apply patch and present the failures which need to be resolved before proceeding with apply patch. If set to false, apply patchwill not be aborted on healthchecks failure. 
	AbortOnPreChecksFailure *bool `json:"abortOnPreChecksFailure,omitempty"`
	// If set to true, patch will be applied in parallel on all nodes. Applicable for operations: * `ApplyPatch` * `DownloadAndApplyPatch` 
	ApplyPatchInParallel *bool `json:"applyPatchInParallel,omitempty"`
	// Node IDs where patch has to be applied.  If unspecified, patch will be applied on all nodes. 
	NodeIds []int64 `json:"nodeIds,omitempty"`
	PackageUrl *ArtifactUrl `json:"packageUrl,omitempty"`
	// Version name of the package if the package is already downloaded. Example: 7.0.1-p1-2023Jul04-cc6d7c5f Applicable for operations: * `ApplyPatch` * `RevertPatch` * `UpgradeAndPatch` 
	VersionName *string `json:"versionName,omitempty"`
}

// NewPatchParams instantiates a new PatchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchParams() *PatchParams {
	this := PatchParams{}
	var abortOnPreChecksFailure bool = true
	this.AbortOnPreChecksFailure = &abortOnPreChecksFailure
	var applyPatchInParallel bool = false
	this.ApplyPatchInParallel = &applyPatchInParallel
	return &this
}

// NewPatchParamsWithDefaults instantiates a new PatchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchParamsWithDefaults() *PatchParams {
	this := PatchParams{}
	var abortOnPreChecksFailure bool = true
	this.AbortOnPreChecksFailure = &abortOnPreChecksFailure
	var applyPatchInParallel bool = false
	this.ApplyPatchInParallel = &applyPatchInParallel
	return &this
}

// GetAbortOnPreChecksFailure returns the AbortOnPreChecksFailure field value if set, zero value otherwise.
func (o *PatchParams) GetAbortOnPreChecksFailure() bool {
	if o == nil || IsNil(o.AbortOnPreChecksFailure) {
		var ret bool
		return ret
	}
	return *o.AbortOnPreChecksFailure
}

// GetAbortOnPreChecksFailureOk returns a tuple with the AbortOnPreChecksFailure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetAbortOnPreChecksFailureOk() (*bool, bool) {
	if o == nil || IsNil(o.AbortOnPreChecksFailure) {
		return nil, false
	}
	return o.AbortOnPreChecksFailure, true
}

// HasAbortOnPreChecksFailure returns a boolean if a field has been set.
func (o *PatchParams) HasAbortOnPreChecksFailure() bool {
	if o != nil && !IsNil(o.AbortOnPreChecksFailure) {
		return true
	}

	return false
}

// SetAbortOnPreChecksFailure gets a reference to the given bool and assigns it to the AbortOnPreChecksFailure field.
func (o *PatchParams) SetAbortOnPreChecksFailure(v bool) {
	o.AbortOnPreChecksFailure = &v
}

// GetApplyPatchInParallel returns the ApplyPatchInParallel field value if set, zero value otherwise.
func (o *PatchParams) GetApplyPatchInParallel() bool {
	if o == nil || IsNil(o.ApplyPatchInParallel) {
		var ret bool
		return ret
	}
	return *o.ApplyPatchInParallel
}

// GetApplyPatchInParallelOk returns a tuple with the ApplyPatchInParallel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetApplyPatchInParallelOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyPatchInParallel) {
		return nil, false
	}
	return o.ApplyPatchInParallel, true
}

// HasApplyPatchInParallel returns a boolean if a field has been set.
func (o *PatchParams) HasApplyPatchInParallel() bool {
	if o != nil && !IsNil(o.ApplyPatchInParallel) {
		return true
	}

	return false
}

// SetApplyPatchInParallel gets a reference to the given bool and assigns it to the ApplyPatchInParallel field.
func (o *PatchParams) SetApplyPatchInParallel(v bool) {
	o.ApplyPatchInParallel = &v
}

// GetNodeIds returns the NodeIds field value if set, zero value otherwise.
func (o *PatchParams) GetNodeIds() []int64 {
	if o == nil || IsNil(o.NodeIds) {
		var ret []int64
		return ret
	}
	return o.NodeIds
}

// GetNodeIdsOk returns a tuple with the NodeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetNodeIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.NodeIds) {
		return nil, false
	}
	return o.NodeIds, true
}

// HasNodeIds returns a boolean if a field has been set.
func (o *PatchParams) HasNodeIds() bool {
	if o != nil && !IsNil(o.NodeIds) {
		return true
	}

	return false
}

// SetNodeIds gets a reference to the given []int64 and assigns it to the NodeIds field.
func (o *PatchParams) SetNodeIds(v []int64) {
	o.NodeIds = v
}

// GetPackageUrl returns the PackageUrl field value if set, zero value otherwise.
func (o *PatchParams) GetPackageUrl() ArtifactUrl {
	if o == nil || IsNil(o.PackageUrl) {
		var ret ArtifactUrl
		return ret
	}
	return *o.PackageUrl
}

// GetPackageUrlOk returns a tuple with the PackageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetPackageUrlOk() (*ArtifactUrl, bool) {
	if o == nil || IsNil(o.PackageUrl) {
		return nil, false
	}
	return o.PackageUrl, true
}

// HasPackageUrl returns a boolean if a field has been set.
func (o *PatchParams) HasPackageUrl() bool {
	if o != nil && !IsNil(o.PackageUrl) {
		return true
	}

	return false
}

// SetPackageUrl gets a reference to the given ArtifactUrl and assigns it to the PackageUrl field.
func (o *PatchParams) SetPackageUrl(v ArtifactUrl) {
	o.PackageUrl = &v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise.
func (o *PatchParams) GetVersionName() string {
	if o == nil || IsNil(o.VersionName) {
		var ret string
		return ret
	}
	return *o.VersionName
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchParams) GetVersionNameOk() (*string, bool) {
	if o == nil || IsNil(o.VersionName) {
		return nil, false
	}
	return o.VersionName, true
}

// HasVersionName returns a boolean if a field has been set.
func (o *PatchParams) HasVersionName() bool {
	if o != nil && !IsNil(o.VersionName) {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given string and assigns it to the VersionName field.
func (o *PatchParams) SetVersionName(v string) {
	o.VersionName = &v
}

func (o PatchParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AbortOnPreChecksFailure) {
		toSerialize["abortOnPreChecksFailure"] = o.AbortOnPreChecksFailure
	}
	if !IsNil(o.ApplyPatchInParallel) {
		toSerialize["applyPatchInParallel"] = o.ApplyPatchInParallel
	}
	if !IsNil(o.NodeIds) {
		toSerialize["nodeIds"] = o.NodeIds
	}
	if !IsNil(o.PackageUrl) {
		toSerialize["packageUrl"] = o.PackageUrl
	}
	if !IsNil(o.VersionName) {
		toSerialize["versionName"] = o.VersionName
	}
	return toSerialize, nil
}

type NullablePatchParams struct {
	value *PatchParams
	isSet bool
}

func (v NullablePatchParams) Get() *PatchParams {
	return v.value
}

func (v *NullablePatchParams) Set(val *PatchParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchParams(val *PatchParams) *NullablePatchParams {
	return &NullablePatchParams{value: val, isSet: true}
}

func (v NullablePatchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


