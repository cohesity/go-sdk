/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the MonthSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MonthSchedule{}

// MonthSchedule Specifies settings that define a schedule for a Protection Group runs to on specific week and specific days of that week.
type MonthSchedule struct {
	// Specifies the exact date of the month (such as 18) in a Monthly Schedule specified by unit field as 'Years'. <br> Example: if 'dayOfMonth' is set to '18', a backup is performed on the 18th of every month.
	DayOfMonth NullableInt32 `json:"dayOfMonth,omitempty"`
	// Specifies a list of days of the week when to start Protection Group Runs. <br> Example: To run a Protection Group on every Monday and Tuesday, set the schedule with following values: <br>  unit: 'Weeks' <br>  dayOfWeek: ['Monday','Tuesday']
	DayOfWeek []string `json:"dayOfWeek,omitempty"`
	// Specifies the week of the month (such as 'Third') or nth day of month (such as 'First' or 'Last') in a Monthly Schedule specified by unit field as 'Months'. <br>This field can be used in combination with 'dayOfWeek' to define the day in the month to start the Protection Group Run. <br> Example: if 'weekOfMonth' is set to 'Third' and day is set to 'Monday', a backup is performed on the third Monday of every month. <br> Example: if 'weekOfMonth' is set to 'Last' and dayOfWeek is not set, a backup is performed on the last day of every month.
	WeekOfMonth NullableString `json:"weekOfMonth,omitempty"`
}

// NewMonthSchedule instantiates a new MonthSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthSchedule() *MonthSchedule {
	this := MonthSchedule{}
	return &this
}

// NewMonthScheduleWithDefaults instantiates a new MonthSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthScheduleWithDefaults() *MonthSchedule {
	this := MonthSchedule{}
	return &this
}

// GetDayOfMonth returns the DayOfMonth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MonthSchedule) GetDayOfMonth() int32 {
	if o == nil || IsNil(o.DayOfMonth.Get()) {
		var ret int32
		return ret
	}
	return *o.DayOfMonth.Get()
}

// GetDayOfMonthOk returns a tuple with the DayOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthSchedule) GetDayOfMonthOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DayOfMonth.Get(), o.DayOfMonth.IsSet()
}

// HasDayOfMonth returns a boolean if a field has been set.
func (o *MonthSchedule) HasDayOfMonth() bool {
	if o != nil && o.DayOfMonth.IsSet() {
		return true
	}

	return false
}

// SetDayOfMonth gets a reference to the given NullableInt32 and assigns it to the DayOfMonth field.
func (o *MonthSchedule) SetDayOfMonth(v int32) {
	o.DayOfMonth.Set(&v)
}
// SetDayOfMonthNil sets the value for DayOfMonth to be an explicit nil
func (o *MonthSchedule) SetDayOfMonthNil() {
	o.DayOfMonth.Set(nil)
}

// UnsetDayOfMonth ensures that no value is present for DayOfMonth, not even an explicit nil
func (o *MonthSchedule) UnsetDayOfMonth() {
	o.DayOfMonth.Unset()
}

// GetDayOfWeek returns the DayOfWeek field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MonthSchedule) GetDayOfWeek() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthSchedule) GetDayOfWeekOk() ([]string, bool) {
	if o == nil || IsNil(o.DayOfWeek) {
		return nil, false
	}
	return o.DayOfWeek, true
}

// HasDayOfWeek returns a boolean if a field has been set.
func (o *MonthSchedule) HasDayOfWeek() bool {
	if o != nil && !IsNil(o.DayOfWeek) {
		return true
	}

	return false
}

// SetDayOfWeek gets a reference to the given []string and assigns it to the DayOfWeek field.
func (o *MonthSchedule) SetDayOfWeek(v []string) {
	o.DayOfWeek = v
}

// GetWeekOfMonth returns the WeekOfMonth field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MonthSchedule) GetWeekOfMonth() string {
	if o == nil || IsNil(o.WeekOfMonth.Get()) {
		var ret string
		return ret
	}
	return *o.WeekOfMonth.Get()
}

// GetWeekOfMonthOk returns a tuple with the WeekOfMonth field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthSchedule) GetWeekOfMonthOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WeekOfMonth.Get(), o.WeekOfMonth.IsSet()
}

// HasWeekOfMonth returns a boolean if a field has been set.
func (o *MonthSchedule) HasWeekOfMonth() bool {
	if o != nil && o.WeekOfMonth.IsSet() {
		return true
	}

	return false
}

// SetWeekOfMonth gets a reference to the given NullableString and assigns it to the WeekOfMonth field.
func (o *MonthSchedule) SetWeekOfMonth(v string) {
	o.WeekOfMonth.Set(&v)
}
// SetWeekOfMonthNil sets the value for WeekOfMonth to be an explicit nil
func (o *MonthSchedule) SetWeekOfMonthNil() {
	o.WeekOfMonth.Set(nil)
}

// UnsetWeekOfMonth ensures that no value is present for WeekOfMonth, not even an explicit nil
func (o *MonthSchedule) UnsetWeekOfMonth() {
	o.WeekOfMonth.Unset()
}

func (o MonthSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MonthSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DayOfMonth.IsSet() {
		toSerialize["dayOfMonth"] = o.DayOfMonth.Get()
	}
	if o.DayOfWeek != nil {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	if o.WeekOfMonth.IsSet() {
		toSerialize["weekOfMonth"] = o.WeekOfMonth.Get()
	}
	return toSerialize, nil
}

type NullableMonthSchedule struct {
	value *MonthSchedule
	isSet bool
}

func (v NullableMonthSchedule) Get() *MonthSchedule {
	return v.value
}

func (v *NullableMonthSchedule) Set(val *MonthSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthSchedule(val *MonthSchedule) *NullableMonthSchedule {
	return &NullableMonthSchedule{value: val, isSet: true}
}

func (v NullableMonthSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


