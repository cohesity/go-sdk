/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpdateGroupParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateGroupParameters{}

// UpdateGroupParameters Specifies group properties to update.
type UpdateGroupParameters struct {
	// Specifies the description of the group.
	Description NullableString `json:"description,omitempty"`
	LocalGroupParams *UpdateGroupParametersLocalGroupParams `json:"localGroupParams,omitempty"`
	// Specifies whether the Group is restricted. A restricted group can only view & manage the objects it has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Specifies the Cohesity roles to associate with the group. The Cohesity roles determine privileges on the Cohesity Cluster for this group.
	Roles []string `json:"roles,omitempty"`
	// Specifies a list of tenant ids who can access this group.
	TenantIds []string `json:"tenantIds,omitempty"`
}

// NewUpdateGroupParameters instantiates a new UpdateGroupParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateGroupParameters() *UpdateGroupParameters {
	this := UpdateGroupParameters{}
	return &this
}

// NewUpdateGroupParametersWithDefaults instantiates a new UpdateGroupParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateGroupParametersWithDefaults() *UpdateGroupParameters {
	this := UpdateGroupParameters{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateGroupParameters) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateGroupParameters) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *UpdateGroupParameters) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *UpdateGroupParameters) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *UpdateGroupParameters) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *UpdateGroupParameters) UnsetDescription() {
	o.Description.Unset()
}

// GetLocalGroupParams returns the LocalGroupParams field value if set, zero value otherwise.
func (o *UpdateGroupParameters) GetLocalGroupParams() UpdateGroupParametersLocalGroupParams {
	if o == nil || IsNil(o.LocalGroupParams) {
		var ret UpdateGroupParametersLocalGroupParams
		return ret
	}
	return *o.LocalGroupParams
}

// GetLocalGroupParamsOk returns a tuple with the LocalGroupParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupParameters) GetLocalGroupParamsOk() (*UpdateGroupParametersLocalGroupParams, bool) {
	if o == nil || IsNil(o.LocalGroupParams) {
		return nil, false
	}
	return o.LocalGroupParams, true
}

// HasLocalGroupParams returns a boolean if a field has been set.
func (o *UpdateGroupParameters) HasLocalGroupParams() bool {
	if o != nil && !IsNil(o.LocalGroupParams) {
		return true
	}

	return false
}

// SetLocalGroupParams gets a reference to the given UpdateGroupParametersLocalGroupParams and assigns it to the LocalGroupParams field.
func (o *UpdateGroupParameters) SetLocalGroupParams(v UpdateGroupParametersLocalGroupParams) {
	o.LocalGroupParams = &v
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateGroupParameters) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted.Get()) {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateGroupParameters) GetRestrictedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *UpdateGroupParameters) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *UpdateGroupParameters) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *UpdateGroupParameters) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *UpdateGroupParameters) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *UpdateGroupParameters) GetRoles() []string {
	if o == nil || IsNil(o.Roles) {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupParameters) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *UpdateGroupParameters) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *UpdateGroupParameters) SetRoles(v []string) {
	o.Roles = v
}

// GetTenantIds returns the TenantIds field value if set, zero value otherwise.
func (o *UpdateGroupParameters) GetTenantIds() []string {
	if o == nil || IsNil(o.TenantIds) {
		var ret []string
		return ret
	}
	return o.TenantIds
}

// GetTenantIdsOk returns a tuple with the TenantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateGroupParameters) GetTenantIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TenantIds) {
		return nil, false
	}
	return o.TenantIds, true
}

// HasTenantIds returns a boolean if a field has been set.
func (o *UpdateGroupParameters) HasTenantIds() bool {
	if o != nil && !IsNil(o.TenantIds) {
		return true
	}

	return false
}

// SetTenantIds gets a reference to the given []string and assigns it to the TenantIds field.
func (o *UpdateGroupParameters) SetTenantIds(v []string) {
	o.TenantIds = v
}

func (o UpdateGroupParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateGroupParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if !IsNil(o.LocalGroupParams) {
		toSerialize["localGroupParams"] = o.LocalGroupParams
	}
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if !IsNil(o.Roles) {
		toSerialize["roles"] = o.Roles
	}
	if !IsNil(o.TenantIds) {
		toSerialize["tenantIds"] = o.TenantIds
	}
	return toSerialize, nil
}

type NullableUpdateGroupParameters struct {
	value *UpdateGroupParameters
	isSet bool
}

func (v NullableUpdateGroupParameters) Get() *UpdateGroupParameters {
	return v.value
}

func (v *NullableUpdateGroupParameters) Set(val *UpdateGroupParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateGroupParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateGroupParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateGroupParameters(val *UpdateGroupParameters) *NullableUpdateGroupParameters {
	return &NullableUpdateGroupParameters{value: val, isSet: true}
}

func (v NullableUpdateGroupParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateGroupParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


