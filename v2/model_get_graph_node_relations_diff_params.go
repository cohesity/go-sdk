/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GetGraphNodeRelationsDiffParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetGraphNodeRelationsDiffParams{}

// GetGraphNodeRelationsDiffParams Specify the query params to determine difference of node relation between two snapshots for a given node id.
type GetGraphNodeRelationsDiffParams struct {
	// If set to false only the diff of node info will be returned else the diff of relations matching the below edge filters will also be returned. Defaults to false.
	DiffRelation NullableBool `json:"diffRelation,omitempty"`
	// Specifies an optional mask to filter only certain kinds of diffs. Supported diff types - Added/Modified/Deleted/Unmodified
	DiffTypes []string `json:"diffTypes,omitempty"`
	// Specifies the edges filter params for a graph node.
	RelationFilter NullableGraphNodeRelationFilterParams `json:"relationFilter,omitempty"`
}

// NewGetGraphNodeRelationsDiffParams instantiates a new GetGraphNodeRelationsDiffParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetGraphNodeRelationsDiffParams() *GetGraphNodeRelationsDiffParams {
	this := GetGraphNodeRelationsDiffParams{}
	return &this
}

// NewGetGraphNodeRelationsDiffParamsWithDefaults instantiates a new GetGraphNodeRelationsDiffParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetGraphNodeRelationsDiffParamsWithDefaults() *GetGraphNodeRelationsDiffParams {
	this := GetGraphNodeRelationsDiffParams{}
	return &this
}

// GetDiffRelation returns the DiffRelation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGraphNodeRelationsDiffParams) GetDiffRelation() bool {
	if o == nil || IsNil(o.DiffRelation.Get()) {
		var ret bool
		return ret
	}
	return *o.DiffRelation.Get()
}

// GetDiffRelationOk returns a tuple with the DiffRelation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGraphNodeRelationsDiffParams) GetDiffRelationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiffRelation.Get(), o.DiffRelation.IsSet()
}

// HasDiffRelation returns a boolean if a field has been set.
func (o *GetGraphNodeRelationsDiffParams) HasDiffRelation() bool {
	if o != nil && o.DiffRelation.IsSet() {
		return true
	}

	return false
}

// SetDiffRelation gets a reference to the given NullableBool and assigns it to the DiffRelation field.
func (o *GetGraphNodeRelationsDiffParams) SetDiffRelation(v bool) {
	o.DiffRelation.Set(&v)
}
// SetDiffRelationNil sets the value for DiffRelation to be an explicit nil
func (o *GetGraphNodeRelationsDiffParams) SetDiffRelationNil() {
	o.DiffRelation.Set(nil)
}

// UnsetDiffRelation ensures that no value is present for DiffRelation, not even an explicit nil
func (o *GetGraphNodeRelationsDiffParams) UnsetDiffRelation() {
	o.DiffRelation.Unset()
}

// GetDiffTypes returns the DiffTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGraphNodeRelationsDiffParams) GetDiffTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DiffTypes
}

// GetDiffTypesOk returns a tuple with the DiffTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGraphNodeRelationsDiffParams) GetDiffTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.DiffTypes) {
		return nil, false
	}
	return o.DiffTypes, true
}

// HasDiffTypes returns a boolean if a field has been set.
func (o *GetGraphNodeRelationsDiffParams) HasDiffTypes() bool {
	if o != nil && !IsNil(o.DiffTypes) {
		return true
	}

	return false
}

// SetDiffTypes gets a reference to the given []string and assigns it to the DiffTypes field.
func (o *GetGraphNodeRelationsDiffParams) SetDiffTypes(v []string) {
	o.DiffTypes = v
}

// GetRelationFilter returns the RelationFilter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGraphNodeRelationsDiffParams) GetRelationFilter() GraphNodeRelationFilterParams {
	if o == nil || IsNil(o.RelationFilter.Get()) {
		var ret GraphNodeRelationFilterParams
		return ret
	}
	return *o.RelationFilter.Get()
}

// GetRelationFilterOk returns a tuple with the RelationFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGraphNodeRelationsDiffParams) GetRelationFilterOk() (*GraphNodeRelationFilterParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelationFilter.Get(), o.RelationFilter.IsSet()
}

// HasRelationFilter returns a boolean if a field has been set.
func (o *GetGraphNodeRelationsDiffParams) HasRelationFilter() bool {
	if o != nil && o.RelationFilter.IsSet() {
		return true
	}

	return false
}

// SetRelationFilter gets a reference to the given NullableGraphNodeRelationFilterParams and assigns it to the RelationFilter field.
func (o *GetGraphNodeRelationsDiffParams) SetRelationFilter(v GraphNodeRelationFilterParams) {
	o.RelationFilter.Set(&v)
}
// SetRelationFilterNil sets the value for RelationFilter to be an explicit nil
func (o *GetGraphNodeRelationsDiffParams) SetRelationFilterNil() {
	o.RelationFilter.Set(nil)
}

// UnsetRelationFilter ensures that no value is present for RelationFilter, not even an explicit nil
func (o *GetGraphNodeRelationsDiffParams) UnsetRelationFilter() {
	o.RelationFilter.Unset()
}

func (o GetGraphNodeRelationsDiffParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetGraphNodeRelationsDiffParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DiffRelation.IsSet() {
		toSerialize["diffRelation"] = o.DiffRelation.Get()
	}
	if o.DiffTypes != nil {
		toSerialize["diffTypes"] = o.DiffTypes
	}
	if o.RelationFilter.IsSet() {
		toSerialize["relationFilter"] = o.RelationFilter.Get()
	}
	return toSerialize, nil
}

type NullableGetGraphNodeRelationsDiffParams struct {
	value *GetGraphNodeRelationsDiffParams
	isSet bool
}

func (v NullableGetGraphNodeRelationsDiffParams) Get() *GetGraphNodeRelationsDiffParams {
	return v.value
}

func (v *NullableGetGraphNodeRelationsDiffParams) Set(val *GetGraphNodeRelationsDiffParams) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGraphNodeRelationsDiffParams) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGraphNodeRelationsDiffParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGraphNodeRelationsDiffParams(val *GetGraphNodeRelationsDiffParams) *NullableGetGraphNodeRelationsDiffParams {
	return &NullableGetGraphNodeRelationsDiffParams{value: val, isSet: true}
}

func (v NullableGetGraphNodeRelationsDiffParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGraphNodeRelationsDiffParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


