/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PrivateNetworkInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PrivateNetworkInfo{}

// PrivateNetworkInfo Specifies the object parameters to create Azure Snapshot Manager Protection Group.
type PrivateNetworkInfo struct {
	// Specifies the subnet for creating a private endpoint.
	Location NullableString `json:"location,omitempty"`
	Region NullablePrivateNetworkInfoRegion `json:"region,omitempty"`
	Subnet NullablePrivateNetworkInfoSubnet `json:"subnet,omitempty"`
	Vpn NullablePrivateNetworkInfoVpn `json:"vpn,omitempty"`
}

// NewPrivateNetworkInfo instantiates a new PrivateNetworkInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivateNetworkInfo() *PrivateNetworkInfo {
	this := PrivateNetworkInfo{}
	return &this
}

// NewPrivateNetworkInfoWithDefaults instantiates a new PrivateNetworkInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivateNetworkInfoWithDefaults() *PrivateNetworkInfo {
	this := PrivateNetworkInfo{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivateNetworkInfo) GetLocation() string {
	if o == nil || IsNil(o.Location.Get()) {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivateNetworkInfo) GetLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *PrivateNetworkInfo) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *PrivateNetworkInfo) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *PrivateNetworkInfo) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *PrivateNetworkInfo) UnsetLocation() {
	o.Location.Unset()
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivateNetworkInfo) GetRegion() PrivateNetworkInfoRegion {
	if o == nil || IsNil(o.Region.Get()) {
		var ret PrivateNetworkInfoRegion
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivateNetworkInfo) GetRegionOk() (*PrivateNetworkInfoRegion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *PrivateNetworkInfo) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullablePrivateNetworkInfoRegion and assigns it to the Region field.
func (o *PrivateNetworkInfo) SetRegion(v PrivateNetworkInfoRegion) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *PrivateNetworkInfo) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *PrivateNetworkInfo) UnsetRegion() {
	o.Region.Unset()
}

// GetSubnet returns the Subnet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivateNetworkInfo) GetSubnet() PrivateNetworkInfoSubnet {
	if o == nil || IsNil(o.Subnet.Get()) {
		var ret PrivateNetworkInfoSubnet
		return ret
	}
	return *o.Subnet.Get()
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivateNetworkInfo) GetSubnetOk() (*PrivateNetworkInfoSubnet, bool) {
	if o == nil {
		return nil, false
	}
	return o.Subnet.Get(), o.Subnet.IsSet()
}

// HasSubnet returns a boolean if a field has been set.
func (o *PrivateNetworkInfo) HasSubnet() bool {
	if o != nil && o.Subnet.IsSet() {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given NullablePrivateNetworkInfoSubnet and assigns it to the Subnet field.
func (o *PrivateNetworkInfo) SetSubnet(v PrivateNetworkInfoSubnet) {
	o.Subnet.Set(&v)
}
// SetSubnetNil sets the value for Subnet to be an explicit nil
func (o *PrivateNetworkInfo) SetSubnetNil() {
	o.Subnet.Set(nil)
}

// UnsetSubnet ensures that no value is present for Subnet, not even an explicit nil
func (o *PrivateNetworkInfo) UnsetSubnet() {
	o.Subnet.Unset()
}

// GetVpn returns the Vpn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivateNetworkInfo) GetVpn() PrivateNetworkInfoVpn {
	if o == nil || IsNil(o.Vpn.Get()) {
		var ret PrivateNetworkInfoVpn
		return ret
	}
	return *o.Vpn.Get()
}

// GetVpnOk returns a tuple with the Vpn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivateNetworkInfo) GetVpnOk() (*PrivateNetworkInfoVpn, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vpn.Get(), o.Vpn.IsSet()
}

// HasVpn returns a boolean if a field has been set.
func (o *PrivateNetworkInfo) HasVpn() bool {
	if o != nil && o.Vpn.IsSet() {
		return true
	}

	return false
}

// SetVpn gets a reference to the given NullablePrivateNetworkInfoVpn and assigns it to the Vpn field.
func (o *PrivateNetworkInfo) SetVpn(v PrivateNetworkInfoVpn) {
	o.Vpn.Set(&v)
}
// SetVpnNil sets the value for Vpn to be an explicit nil
func (o *PrivateNetworkInfo) SetVpnNil() {
	o.Vpn.Set(nil)
}

// UnsetVpn ensures that no value is present for Vpn, not even an explicit nil
func (o *PrivateNetworkInfo) UnsetVpn() {
	o.Vpn.Unset()
}

func (o PrivateNetworkInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PrivateNetworkInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	if o.Subnet.IsSet() {
		toSerialize["subnet"] = o.Subnet.Get()
	}
	if o.Vpn.IsSet() {
		toSerialize["vpn"] = o.Vpn.Get()
	}
	return toSerialize, nil
}

type NullablePrivateNetworkInfo struct {
	value *PrivateNetworkInfo
	isSet bool
}

func (v NullablePrivateNetworkInfo) Get() *PrivateNetworkInfo {
	return v.value
}

func (v *NullablePrivateNetworkInfo) Set(val *PrivateNetworkInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivateNetworkInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivateNetworkInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivateNetworkInfo(val *PrivateNetworkInfo) *NullablePrivateNetworkInfo {
	return &NullablePrivateNetworkInfo{value: val, isSet: true}
}

func (v NullablePrivateNetworkInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivateNetworkInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


