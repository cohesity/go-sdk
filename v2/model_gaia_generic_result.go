/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GaiaGenericResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GaiaGenericResult{}

// GaiaGenericResult Specifies the Gaia generic results.
type GaiaGenericResult struct {
	// Specifies the Grpc Error type.
	GrpcError NullableString `json:"grpc_error,omitempty"`
	// Specifies the serialized result.
	GrpcRespSerialized NullableString `json:"grpc_resp_serialized,omitempty"`
}

// NewGaiaGenericResult instantiates a new GaiaGenericResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGaiaGenericResult() *GaiaGenericResult {
	this := GaiaGenericResult{}
	return &this
}

// NewGaiaGenericResultWithDefaults instantiates a new GaiaGenericResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGaiaGenericResultWithDefaults() *GaiaGenericResult {
	this := GaiaGenericResult{}
	return &this
}

// GetGrpcError returns the GrpcError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaGenericResult) GetGrpcError() string {
	if o == nil || IsNil(o.GrpcError.Get()) {
		var ret string
		return ret
	}
	return *o.GrpcError.Get()
}

// GetGrpcErrorOk returns a tuple with the GrpcError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaGenericResult) GetGrpcErrorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GrpcError.Get(), o.GrpcError.IsSet()
}

// HasGrpcError returns a boolean if a field has been set.
func (o *GaiaGenericResult) HasGrpcError() bool {
	if o != nil && o.GrpcError.IsSet() {
		return true
	}

	return false
}

// SetGrpcError gets a reference to the given NullableString and assigns it to the GrpcError field.
func (o *GaiaGenericResult) SetGrpcError(v string) {
	o.GrpcError.Set(&v)
}
// SetGrpcErrorNil sets the value for GrpcError to be an explicit nil
func (o *GaiaGenericResult) SetGrpcErrorNil() {
	o.GrpcError.Set(nil)
}

// UnsetGrpcError ensures that no value is present for GrpcError, not even an explicit nil
func (o *GaiaGenericResult) UnsetGrpcError() {
	o.GrpcError.Unset()
}

// GetGrpcRespSerialized returns the GrpcRespSerialized field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaGenericResult) GetGrpcRespSerialized() string {
	if o == nil || IsNil(o.GrpcRespSerialized.Get()) {
		var ret string
		return ret
	}
	return *o.GrpcRespSerialized.Get()
}

// GetGrpcRespSerializedOk returns a tuple with the GrpcRespSerialized field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaGenericResult) GetGrpcRespSerializedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.GrpcRespSerialized.Get(), o.GrpcRespSerialized.IsSet()
}

// HasGrpcRespSerialized returns a boolean if a field has been set.
func (o *GaiaGenericResult) HasGrpcRespSerialized() bool {
	if o != nil && o.GrpcRespSerialized.IsSet() {
		return true
	}

	return false
}

// SetGrpcRespSerialized gets a reference to the given NullableString and assigns it to the GrpcRespSerialized field.
func (o *GaiaGenericResult) SetGrpcRespSerialized(v string) {
	o.GrpcRespSerialized.Set(&v)
}
// SetGrpcRespSerializedNil sets the value for GrpcRespSerialized to be an explicit nil
func (o *GaiaGenericResult) SetGrpcRespSerializedNil() {
	o.GrpcRespSerialized.Set(nil)
}

// UnsetGrpcRespSerialized ensures that no value is present for GrpcRespSerialized, not even an explicit nil
func (o *GaiaGenericResult) UnsetGrpcRespSerialized() {
	o.GrpcRespSerialized.Unset()
}

func (o GaiaGenericResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GaiaGenericResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.GrpcError.IsSet() {
		toSerialize["grpc_error"] = o.GrpcError.Get()
	}
	if o.GrpcRespSerialized.IsSet() {
		toSerialize["grpc_resp_serialized"] = o.GrpcRespSerialized.Get()
	}
	return toSerialize, nil
}

type NullableGaiaGenericResult struct {
	value *GaiaGenericResult
	isSet bool
}

func (v NullableGaiaGenericResult) Get() *GaiaGenericResult {
	return v.value
}

func (v *NullableGaiaGenericResult) Set(val *GaiaGenericResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGaiaGenericResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGaiaGenericResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaiaGenericResult(val *GaiaGenericResult) *NullableGaiaGenericResult {
	return &NullableGaiaGenericResult{value: val, isSet: true}
}

func (v NullableGaiaGenericResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaiaGenericResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


