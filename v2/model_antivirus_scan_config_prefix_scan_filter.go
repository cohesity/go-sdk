/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AntivirusScanConfigPrefixScanFilter type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AntivirusScanConfigPrefixScanFilter{}

// AntivirusScanConfigPrefixScanFilter For S3 usage only. Prefixes that meets these filter criteria will be sent to antivirus server for the scan. This filter is case-sensitive.
type AntivirusScanConfigPrefixScanFilter struct {
	// The list of file extensions to apply
	FileExtensionsList []string `json:"fileExtensionsList,omitempty"`
	// If set, it enables the file extension filter
	IsEnabled NullableBool `json:"isEnabled,omitempty"`
	// The mode applied to the list of file extensions 'Whitelist' indicates a whitelist extension filter. 'Blacklist' indicates a blacklist extension filter.
	Mode NullableString `json:"mode,omitempty"`
}

// NewAntivirusScanConfigPrefixScanFilter instantiates a new AntivirusScanConfigPrefixScanFilter object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAntivirusScanConfigPrefixScanFilter() *AntivirusScanConfigPrefixScanFilter {
	this := AntivirusScanConfigPrefixScanFilter{}
	return &this
}

// NewAntivirusScanConfigPrefixScanFilterWithDefaults instantiates a new AntivirusScanConfigPrefixScanFilter object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAntivirusScanConfigPrefixScanFilterWithDefaults() *AntivirusScanConfigPrefixScanFilter {
	this := AntivirusScanConfigPrefixScanFilter{}
	return &this
}

// GetFileExtensionsList returns the FileExtensionsList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AntivirusScanConfigPrefixScanFilter) GetFileExtensionsList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.FileExtensionsList
}

// GetFileExtensionsListOk returns a tuple with the FileExtensionsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AntivirusScanConfigPrefixScanFilter) GetFileExtensionsListOk() ([]string, bool) {
	if o == nil || IsNil(o.FileExtensionsList) {
		return nil, false
	}
	return o.FileExtensionsList, true
}

// HasFileExtensionsList returns a boolean if a field has been set.
func (o *AntivirusScanConfigPrefixScanFilter) HasFileExtensionsList() bool {
	if o != nil && !IsNil(o.FileExtensionsList) {
		return true
	}

	return false
}

// SetFileExtensionsList gets a reference to the given []string and assigns it to the FileExtensionsList field.
func (o *AntivirusScanConfigPrefixScanFilter) SetFileExtensionsList(v []string) {
	o.FileExtensionsList = v
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AntivirusScanConfigPrefixScanFilter) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AntivirusScanConfigPrefixScanFilter) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *AntivirusScanConfigPrefixScanFilter) HasIsEnabled() bool {
	if o != nil && o.IsEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given NullableBool and assigns it to the IsEnabled field.
func (o *AntivirusScanConfigPrefixScanFilter) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}
// SetIsEnabledNil sets the value for IsEnabled to be an explicit nil
func (o *AntivirusScanConfigPrefixScanFilter) SetIsEnabledNil() {
	o.IsEnabled.Set(nil)
}

// UnsetIsEnabled ensures that no value is present for IsEnabled, not even an explicit nil
func (o *AntivirusScanConfigPrefixScanFilter) UnsetIsEnabled() {
	o.IsEnabled.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AntivirusScanConfigPrefixScanFilter) GetMode() string {
	if o == nil || IsNil(o.Mode.Get()) {
		var ret string
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AntivirusScanConfigPrefixScanFilter) GetModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *AntivirusScanConfigPrefixScanFilter) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableString and assigns it to the Mode field.
func (o *AntivirusScanConfigPrefixScanFilter) SetMode(v string) {
	o.Mode.Set(&v)
}
// SetModeNil sets the value for Mode to be an explicit nil
func (o *AntivirusScanConfigPrefixScanFilter) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *AntivirusScanConfigPrefixScanFilter) UnsetMode() {
	o.Mode.Unset()
}

func (o AntivirusScanConfigPrefixScanFilter) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AntivirusScanConfigPrefixScanFilter) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FileExtensionsList != nil {
		toSerialize["fileExtensionsList"] = o.FileExtensionsList
	}
	if o.IsEnabled.IsSet() {
		toSerialize["isEnabled"] = o.IsEnabled.Get()
	}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	return toSerialize, nil
}

type NullableAntivirusScanConfigPrefixScanFilter struct {
	value *AntivirusScanConfigPrefixScanFilter
	isSet bool
}

func (v NullableAntivirusScanConfigPrefixScanFilter) Get() *AntivirusScanConfigPrefixScanFilter {
	return v.value
}

func (v *NullableAntivirusScanConfigPrefixScanFilter) Set(val *AntivirusScanConfigPrefixScanFilter) {
	v.value = val
	v.isSet = true
}

func (v NullableAntivirusScanConfigPrefixScanFilter) IsSet() bool {
	return v.isSet
}

func (v *NullableAntivirusScanConfigPrefixScanFilter) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAntivirusScanConfigPrefixScanFilter(val *AntivirusScanConfigPrefixScanFilter) *NullableAntivirusScanConfigPrefixScanFilter {
	return &NullableAntivirusScanConfigPrefixScanFilter{value: val, isSet: true}
}

func (v NullableAntivirusScanConfigPrefixScanFilter) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAntivirusScanConfigPrefixScanFilter) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


