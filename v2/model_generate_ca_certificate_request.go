/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GenerateCaCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateCaCertificateRequest{}

// GenerateCaCertificateRequest Specifies the parameters required to generate CA certificate/key material
type GenerateCaCertificateRequest struct {
	// Common Name
	CommonName string `json:"commonName"`
	// Country
	Country string `json:"country"`
	// Duration (in hours) of the CA certificate.
	Expiry *string `json:"expiry,omitempty"`
	// Locality
	Locality string `json:"locality"`
	// Organization
	Organization string `json:"organization"`
	// Organizational Unit
	OrganizationalUnit *string `json:"organizationalUnit,omitempty"`
}

type _GenerateCaCertificateRequest GenerateCaCertificateRequest

// NewGenerateCaCertificateRequest instantiates a new GenerateCaCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateCaCertificateRequest(commonName string, country string, locality string, organization string) *GenerateCaCertificateRequest {
	this := GenerateCaCertificateRequest{}
	this.CommonName = commonName
	this.Country = country
	this.Locality = locality
	this.Organization = organization
	return &this
}

// NewGenerateCaCertificateRequestWithDefaults instantiates a new GenerateCaCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateCaCertificateRequestWithDefaults() *GenerateCaCertificateRequest {
	this := GenerateCaCertificateRequest{}
	return &this
}

// GetCommonName returns the CommonName field value
func (o *GenerateCaCertificateRequest) GetCommonName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CommonName
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
func (o *GenerateCaCertificateRequest) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CommonName, true
}

// SetCommonName sets field value
func (o *GenerateCaCertificateRequest) SetCommonName(v string) {
	o.CommonName = v
}

// GetCountry returns the Country field value
func (o *GenerateCaCertificateRequest) GetCountry() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Country
}

// GetCountryOk returns a tuple with the Country field value
// and a boolean to check if the value has been set.
func (o *GenerateCaCertificateRequest) GetCountryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Country, true
}

// SetCountry sets field value
func (o *GenerateCaCertificateRequest) SetCountry(v string) {
	o.Country = v
}

// GetExpiry returns the Expiry field value if set, zero value otherwise.
func (o *GenerateCaCertificateRequest) GetExpiry() string {
	if o == nil || IsNil(o.Expiry) {
		var ret string
		return ret
	}
	return *o.Expiry
}

// GetExpiryOk returns a tuple with the Expiry field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCaCertificateRequest) GetExpiryOk() (*string, bool) {
	if o == nil || IsNil(o.Expiry) {
		return nil, false
	}
	return o.Expiry, true
}

// HasExpiry returns a boolean if a field has been set.
func (o *GenerateCaCertificateRequest) HasExpiry() bool {
	if o != nil && !IsNil(o.Expiry) {
		return true
	}

	return false
}

// SetExpiry gets a reference to the given string and assigns it to the Expiry field.
func (o *GenerateCaCertificateRequest) SetExpiry(v string) {
	o.Expiry = &v
}

// GetLocality returns the Locality field value
func (o *GenerateCaCertificateRequest) GetLocality() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Locality
}

// GetLocalityOk returns a tuple with the Locality field value
// and a boolean to check if the value has been set.
func (o *GenerateCaCertificateRequest) GetLocalityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Locality, true
}

// SetLocality sets field value
func (o *GenerateCaCertificateRequest) SetLocality(v string) {
	o.Locality = v
}

// GetOrganization returns the Organization field value
func (o *GenerateCaCertificateRequest) GetOrganization() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
func (o *GenerateCaCertificateRequest) GetOrganizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Organization, true
}

// SetOrganization sets field value
func (o *GenerateCaCertificateRequest) SetOrganization(v string) {
	o.Organization = v
}

// GetOrganizationalUnit returns the OrganizationalUnit field value if set, zero value otherwise.
func (o *GenerateCaCertificateRequest) GetOrganizationalUnit() string {
	if o == nil || IsNil(o.OrganizationalUnit) {
		var ret string
		return ret
	}
	return *o.OrganizationalUnit
}

// GetOrganizationalUnitOk returns a tuple with the OrganizationalUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenerateCaCertificateRequest) GetOrganizationalUnitOk() (*string, bool) {
	if o == nil || IsNil(o.OrganizationalUnit) {
		return nil, false
	}
	return o.OrganizationalUnit, true
}

// HasOrganizationalUnit returns a boolean if a field has been set.
func (o *GenerateCaCertificateRequest) HasOrganizationalUnit() bool {
	if o != nil && !IsNil(o.OrganizationalUnit) {
		return true
	}

	return false
}

// SetOrganizationalUnit gets a reference to the given string and assigns it to the OrganizationalUnit field.
func (o *GenerateCaCertificateRequest) SetOrganizationalUnit(v string) {
	o.OrganizationalUnit = &v
}

func (o GenerateCaCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateCaCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["commonName"] = o.CommonName
	toSerialize["country"] = o.Country
	if !IsNil(o.Expiry) {
		toSerialize["expiry"] = o.Expiry
	}
	toSerialize["locality"] = o.Locality
	toSerialize["organization"] = o.Organization
	if !IsNil(o.OrganizationalUnit) {
		toSerialize["organizationalUnit"] = o.OrganizationalUnit
	}
	return toSerialize, nil
}

func (o *GenerateCaCertificateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"commonName",
		"country",
		"locality",
		"organization",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenerateCaCertificateRequest := _GenerateCaCertificateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGenerateCaCertificateRequest)

	if err != nil {
		return err
	}

	*o = GenerateCaCertificateRequest(varGenerateCaCertificateRequest)

	return err
}

type NullableGenerateCaCertificateRequest struct {
	value *GenerateCaCertificateRequest
	isSet bool
}

func (v NullableGenerateCaCertificateRequest) Get() *GenerateCaCertificateRequest {
	return v.value
}

func (v *NullableGenerateCaCertificateRequest) Set(val *GenerateCaCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateCaCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateCaCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateCaCertificateRequest(val *GenerateCaCertificateRequest) *NullableGenerateCaCertificateRequest {
	return &NullableGenerateCaCertificateRequest{value: val, isSet: true}
}

func (v NullableGenerateCaCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateCaCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


