/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FilesStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesStats{}

// FilesStats Specifies the files stats.
type FilesStats struct {
	// Specifies the aggregated distribution by size of files stored in the Cohesity cluster.
	FileSizeDistribution []FileCount `json:"fileSizeDistribution,omitempty"`
	// Specifies a list of file stats for entities.
	FilesStats []FilesStatsForEntity `json:"filesStats,omitempty"`
}

// NewFilesStats instantiates a new FilesStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesStats() *FilesStats {
	this := FilesStats{}
	return &this
}

// NewFilesStatsWithDefaults instantiates a new FilesStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesStatsWithDefaults() *FilesStats {
	this := FilesStats{}
	return &this
}

// GetFileSizeDistribution returns the FileSizeDistribution field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesStats) GetFileSizeDistribution() []FileCount {
	if o == nil {
		var ret []FileCount
		return ret
	}
	return o.FileSizeDistribution
}

// GetFileSizeDistributionOk returns a tuple with the FileSizeDistribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesStats) GetFileSizeDistributionOk() ([]FileCount, bool) {
	if o == nil || IsNil(o.FileSizeDistribution) {
		return nil, false
	}
	return o.FileSizeDistribution, true
}

// HasFileSizeDistribution returns a boolean if a field has been set.
func (o *FilesStats) HasFileSizeDistribution() bool {
	if o != nil && !IsNil(o.FileSizeDistribution) {
		return true
	}

	return false
}

// SetFileSizeDistribution gets a reference to the given []FileCount and assigns it to the FileSizeDistribution field.
func (o *FilesStats) SetFileSizeDistribution(v []FileCount) {
	o.FileSizeDistribution = v
}

// GetFilesStats returns the FilesStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesStats) GetFilesStats() []FilesStatsForEntity {
	if o == nil {
		var ret []FilesStatsForEntity
		return ret
	}
	return o.FilesStats
}

// GetFilesStatsOk returns a tuple with the FilesStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesStats) GetFilesStatsOk() ([]FilesStatsForEntity, bool) {
	if o == nil || IsNil(o.FilesStats) {
		return nil, false
	}
	return o.FilesStats, true
}

// HasFilesStats returns a boolean if a field has been set.
func (o *FilesStats) HasFilesStats() bool {
	if o != nil && !IsNil(o.FilesStats) {
		return true
	}

	return false
}

// SetFilesStats gets a reference to the given []FilesStatsForEntity and assigns it to the FilesStats field.
func (o *FilesStats) SetFilesStats(v []FilesStatsForEntity) {
	o.FilesStats = v
}

func (o FilesStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FileSizeDistribution != nil {
		toSerialize["fileSizeDistribution"] = o.FileSizeDistribution
	}
	if o.FilesStats != nil {
		toSerialize["filesStats"] = o.FilesStats
	}
	return toSerialize, nil
}

type NullableFilesStats struct {
	value *FilesStats
	isSet bool
}

func (v NullableFilesStats) Get() *FilesStats {
	return v.value
}

func (v *NullableFilesStats) Set(val *FilesStats) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesStats) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesStats(val *FilesStats) *NullableFilesStats {
	return &NullableFilesStats{value: val, isSet: true}
}

func (v NullableFilesStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


