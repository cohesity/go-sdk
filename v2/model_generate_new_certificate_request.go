/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GenerateNewCertificateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GenerateNewCertificateRequest{}

// GenerateNewCertificateRequest Specifies the parameters required to generate a certificate.
type GenerateNewCertificateRequest struct {
	// Specifies the locality attribute, which is part of the distinguished name definition. It is used to identify the city where the company is located or the Cluster is installed.
	City NullableString `json:"city"`
	// Specifies the common name attribute, which is part of the distinguished name definition. Common name is used to specify a context for the certificate, for example, the name of the Cluster to which the certificate is to be assigned. Default value is the name of the Cluster.
	CommonName NullableString `json:"commonName"`
	// Specifies the country attribute, which is part of the distinguished name definition. It is used to identify the country where the state is located. It is specified as two letter code defined by the ISO standard.
	CountryCode NullableString `json:"countryCode"`
	// Specifies duration of the certificate expiry in(hours).
	Duration NullableString `json:"duration,omitempty"`
	// Specifies an alternative subject name component to be included in the certificate. Format is a standard e-mail address, for example joe@company.com.
	EmailAddress NullableString `json:"emailAddress,omitempty"`
	// Specifies the algorithm to be used to generate the key pair. RSA is the default value.
	KeyType NullableString `json:"keyType,omitempty"`
	// Specifies the organization attribute, which is part of the distinguished name definition. It is used to specify the name of the company.
	Organization NullableString `json:"organization"`
	// Specifies the organization unit attribute, which is part of the distinguished name definition. It is used to identify the specific department or business unit in the company that is owning the Cluster.
	OrganizationUnit NullableString `json:"organizationUnit"`
	// Specifies an alternative subject name component to be included in the certificate. It is used to identify the ways the Cluster will be accessed. It is given as a comma separated list of FQDNs. The default value is the Cluster's VIP hostname.
	SanList []string `json:"sanList,omitempty"`
	// Specifies the state attribute, which is part of the distinguished name definition. It is used to identify the state where the city is located.
	State NullableString `json:"state"`
	// Specifies the tenant id
	TenantId NullableString `json:"tenantId,omitempty"`
}

type _GenerateNewCertificateRequest GenerateNewCertificateRequest

// NewGenerateNewCertificateRequest instantiates a new GenerateNewCertificateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenerateNewCertificateRequest(city NullableString, commonName NullableString, countryCode NullableString, organization NullableString, organizationUnit NullableString, state NullableString) *GenerateNewCertificateRequest {
	this := GenerateNewCertificateRequest{}
	this.City = city
	this.CommonName = commonName
	this.CountryCode = countryCode
	var keyType KEY_TYPE = "RSA_4096"
	this.KeyType = *NewNullableString(&keyType)
	this.Organization = organization
	this.OrganizationUnit = organizationUnit
	this.State = state
	return &this
}

// NewGenerateNewCertificateRequestWithDefaults instantiates a new GenerateNewCertificateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenerateNewCertificateRequestWithDefaults() *GenerateNewCertificateRequest {
	this := GenerateNewCertificateRequest{}
	var keyType KEY_TYPE = "RSA_4096"
	this.KeyType = *NewNullableString(&keyType)
	return &this
}

// GetCity returns the City field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GenerateNewCertificateRequest) GetCity() string {
	if o == nil || o.City.Get() == nil {
		var ret string
		return ret
	}

	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetCityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// SetCity sets field value
func (o *GenerateNewCertificateRequest) SetCity(v string) {
	o.City.Set(&v)
}

// GetCommonName returns the CommonName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GenerateNewCertificateRequest) GetCommonName() string {
	if o == nil || o.CommonName.Get() == nil {
		var ret string
		return ret
	}

	return *o.CommonName.Get()
}

// GetCommonNameOk returns a tuple with the CommonName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetCommonNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CommonName.Get(), o.CommonName.IsSet()
}

// SetCommonName sets field value
func (o *GenerateNewCertificateRequest) SetCommonName(v string) {
	o.CommonName.Set(&v)
}

// GetCountryCode returns the CountryCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GenerateNewCertificateRequest) GetCountryCode() string {
	if o == nil || o.CountryCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.CountryCode.Get()
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetCountryCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountryCode.Get(), o.CountryCode.IsSet()
}

// SetCountryCode sets field value
func (o *GenerateNewCertificateRequest) SetCountryCode(v string) {
	o.CountryCode.Set(&v)
}

// GetDuration returns the Duration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenerateNewCertificateRequest) GetDuration() string {
	if o == nil || IsNil(o.Duration.Get()) {
		var ret string
		return ret
	}
	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetDurationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// HasDuration returns a boolean if a field has been set.
func (o *GenerateNewCertificateRequest) HasDuration() bool {
	if o != nil && o.Duration.IsSet() {
		return true
	}

	return false
}

// SetDuration gets a reference to the given NullableString and assigns it to the Duration field.
func (o *GenerateNewCertificateRequest) SetDuration(v string) {
	o.Duration.Set(&v)
}
// SetDurationNil sets the value for Duration to be an explicit nil
func (o *GenerateNewCertificateRequest) SetDurationNil() {
	o.Duration.Set(nil)
}

// UnsetDuration ensures that no value is present for Duration, not even an explicit nil
func (o *GenerateNewCertificateRequest) UnsetDuration() {
	o.Duration.Unset()
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenerateNewCertificateRequest) GetEmailAddress() string {
	if o == nil || IsNil(o.EmailAddress.Get()) {
		var ret string
		return ret
	}
	return *o.EmailAddress.Get()
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetEmailAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EmailAddress.Get(), o.EmailAddress.IsSet()
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *GenerateNewCertificateRequest) HasEmailAddress() bool {
	if o != nil && o.EmailAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given NullableString and assigns it to the EmailAddress field.
func (o *GenerateNewCertificateRequest) SetEmailAddress(v string) {
	o.EmailAddress.Set(&v)
}
// SetEmailAddressNil sets the value for EmailAddress to be an explicit nil
func (o *GenerateNewCertificateRequest) SetEmailAddressNil() {
	o.EmailAddress.Set(nil)
}

// UnsetEmailAddress ensures that no value is present for EmailAddress, not even an explicit nil
func (o *GenerateNewCertificateRequest) UnsetEmailAddress() {
	o.EmailAddress.Unset()
}

// GetKeyType returns the KeyType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenerateNewCertificateRequest) GetKeyType() string {
	if o == nil || IsNil(o.KeyType.Get()) {
		var ret string
		return ret
	}
	return *o.KeyType.Get()
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetKeyTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyType.Get(), o.KeyType.IsSet()
}

// HasKeyType returns a boolean if a field has been set.
func (o *GenerateNewCertificateRequest) HasKeyType() bool {
	if o != nil && o.KeyType.IsSet() {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given NullableString and assigns it to the KeyType field.
func (o *GenerateNewCertificateRequest) SetKeyType(v string) {
	o.KeyType.Set(&v)
}
// SetKeyTypeNil sets the value for KeyType to be an explicit nil
func (o *GenerateNewCertificateRequest) SetKeyTypeNil() {
	o.KeyType.Set(nil)
}

// UnsetKeyType ensures that no value is present for KeyType, not even an explicit nil
func (o *GenerateNewCertificateRequest) UnsetKeyType() {
	o.KeyType.Unset()
}

// GetOrganization returns the Organization field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GenerateNewCertificateRequest) GetOrganization() string {
	if o == nil || o.Organization.Get() == nil {
		var ret string
		return ret
	}

	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetOrganizationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// SetOrganization sets field value
func (o *GenerateNewCertificateRequest) SetOrganization(v string) {
	o.Organization.Set(&v)
}

// GetOrganizationUnit returns the OrganizationUnit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GenerateNewCertificateRequest) GetOrganizationUnit() string {
	if o == nil || o.OrganizationUnit.Get() == nil {
		var ret string
		return ret
	}

	return *o.OrganizationUnit.Get()
}

// GetOrganizationUnitOk returns a tuple with the OrganizationUnit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetOrganizationUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationUnit.Get(), o.OrganizationUnit.IsSet()
}

// SetOrganizationUnit sets field value
func (o *GenerateNewCertificateRequest) SetOrganizationUnit(v string) {
	o.OrganizationUnit.Set(&v)
}

// GetSanList returns the SanList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenerateNewCertificateRequest) GetSanList() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.SanList
}

// GetSanListOk returns a tuple with the SanList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetSanListOk() ([]string, bool) {
	if o == nil || IsNil(o.SanList) {
		return nil, false
	}
	return o.SanList, true
}

// HasSanList returns a boolean if a field has been set.
func (o *GenerateNewCertificateRequest) HasSanList() bool {
	if o != nil && !IsNil(o.SanList) {
		return true
	}

	return false
}

// SetSanList gets a reference to the given []string and assigns it to the SanList field.
func (o *GenerateNewCertificateRequest) SetSanList(v []string) {
	o.SanList = v
}

// GetState returns the State field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GenerateNewCertificateRequest) GetState() string {
	if o == nil || o.State.Get() == nil {
		var ret string
		return ret
	}

	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// SetState sets field value
func (o *GenerateNewCertificateRequest) SetState(v string) {
	o.State.Set(&v)
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenerateNewCertificateRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenerateNewCertificateRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *GenerateNewCertificateRequest) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *GenerateNewCertificateRequest) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *GenerateNewCertificateRequest) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *GenerateNewCertificateRequest) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o GenerateNewCertificateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GenerateNewCertificateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["city"] = o.City.Get()
	toSerialize["commonName"] = o.CommonName.Get()
	toSerialize["countryCode"] = o.CountryCode.Get()
	if o.Duration.IsSet() {
		toSerialize["duration"] = o.Duration.Get()
	}
	if o.EmailAddress.IsSet() {
		toSerialize["emailAddress"] = o.EmailAddress.Get()
	}
	if o.KeyType.IsSet() {
		toSerialize["keyType"] = o.KeyType.Get()
	}
	toSerialize["organization"] = o.Organization.Get()
	toSerialize["organizationUnit"] = o.OrganizationUnit.Get()
	if o.SanList != nil {
		toSerialize["sanList"] = o.SanList
	}
	toSerialize["state"] = o.State.Get()
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

func (o *GenerateNewCertificateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"city",
		"commonName",
		"countryCode",
		"organization",
		"organizationUnit",
		"state",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGenerateNewCertificateRequest := _GenerateNewCertificateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGenerateNewCertificateRequest)

	if err != nil {
		return err
	}

	*o = GenerateNewCertificateRequest(varGenerateNewCertificateRequest)

	return err
}

type NullableGenerateNewCertificateRequest struct {
	value *GenerateNewCertificateRequest
	isSet bool
}

func (v NullableGenerateNewCertificateRequest) Get() *GenerateNewCertificateRequest {
	return v.value
}

func (v *NullableGenerateNewCertificateRequest) Set(val *GenerateNewCertificateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableGenerateNewCertificateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableGenerateNewCertificateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenerateNewCertificateRequest(val *GenerateNewCertificateRequest) *NullableGenerateNewCertificateRequest {
	return &NullableGenerateNewCertificateRequest{value: val, isSet: true}
}

func (v NullableGenerateNewCertificateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenerateNewCertificateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


