/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AzureNativeObjectProtectionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureNativeObjectProtectionParams{}

// AzureNativeObjectProtectionParams Specifies the parameters which are specific to Azure Object Protection Groups using Azure native APIs. Atlease one of tags or objects must be specified.
type AzureNativeObjectProtectionParams struct {
	DataTransferInfo *DataTransferInfo `json:"dataTransferInfo,omitempty"`
	DiskExclusionParams *AzureDiskExclusionParams `json:"diskExclusionParams,omitempty"`
	// Specifies the objects to be protected.
	Objects []AzureObjectLevelParams `json:"objects,omitempty"`
}

// NewAzureNativeObjectProtectionParams instantiates a new AzureNativeObjectProtectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureNativeObjectProtectionParams() *AzureNativeObjectProtectionParams {
	this := AzureNativeObjectProtectionParams{}
	return &this
}

// NewAzureNativeObjectProtectionParamsWithDefaults instantiates a new AzureNativeObjectProtectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureNativeObjectProtectionParamsWithDefaults() *AzureNativeObjectProtectionParams {
	this := AzureNativeObjectProtectionParams{}
	return &this
}

// GetDataTransferInfo returns the DataTransferInfo field value if set, zero value otherwise.
func (o *AzureNativeObjectProtectionParams) GetDataTransferInfo() DataTransferInfo {
	if o == nil || IsNil(o.DataTransferInfo) {
		var ret DataTransferInfo
		return ret
	}
	return *o.DataTransferInfo
}

// GetDataTransferInfoOk returns a tuple with the DataTransferInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureNativeObjectProtectionParams) GetDataTransferInfoOk() (*DataTransferInfo, bool) {
	if o == nil || IsNil(o.DataTransferInfo) {
		return nil, false
	}
	return o.DataTransferInfo, true
}

// HasDataTransferInfo returns a boolean if a field has been set.
func (o *AzureNativeObjectProtectionParams) HasDataTransferInfo() bool {
	if o != nil && !IsNil(o.DataTransferInfo) {
		return true
	}

	return false
}

// SetDataTransferInfo gets a reference to the given DataTransferInfo and assigns it to the DataTransferInfo field.
func (o *AzureNativeObjectProtectionParams) SetDataTransferInfo(v DataTransferInfo) {
	o.DataTransferInfo = &v
}

// GetDiskExclusionParams returns the DiskExclusionParams field value if set, zero value otherwise.
func (o *AzureNativeObjectProtectionParams) GetDiskExclusionParams() AzureDiskExclusionParams {
	if o == nil || IsNil(o.DiskExclusionParams) {
		var ret AzureDiskExclusionParams
		return ret
	}
	return *o.DiskExclusionParams
}

// GetDiskExclusionParamsOk returns a tuple with the DiskExclusionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureNativeObjectProtectionParams) GetDiskExclusionParamsOk() (*AzureDiskExclusionParams, bool) {
	if o == nil || IsNil(o.DiskExclusionParams) {
		return nil, false
	}
	return o.DiskExclusionParams, true
}

// HasDiskExclusionParams returns a boolean if a field has been set.
func (o *AzureNativeObjectProtectionParams) HasDiskExclusionParams() bool {
	if o != nil && !IsNil(o.DiskExclusionParams) {
		return true
	}

	return false
}

// SetDiskExclusionParams gets a reference to the given AzureDiskExclusionParams and assigns it to the DiskExclusionParams field.
func (o *AzureNativeObjectProtectionParams) SetDiskExclusionParams(v AzureDiskExclusionParams) {
	o.DiskExclusionParams = &v
}

// GetObjects returns the Objects field value if set, zero value otherwise.
func (o *AzureNativeObjectProtectionParams) GetObjects() []AzureObjectLevelParams {
	if o == nil || IsNil(o.Objects) {
		var ret []AzureObjectLevelParams
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureNativeObjectProtectionParams) GetObjectsOk() ([]AzureObjectLevelParams, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *AzureNativeObjectProtectionParams) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []AzureObjectLevelParams and assigns it to the Objects field.
func (o *AzureNativeObjectProtectionParams) SetObjects(v []AzureObjectLevelParams) {
	o.Objects = v
}

func (o AzureNativeObjectProtectionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureNativeObjectProtectionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DataTransferInfo) {
		toSerialize["dataTransferInfo"] = o.DataTransferInfo
	}
	if !IsNil(o.DiskExclusionParams) {
		toSerialize["diskExclusionParams"] = o.DiskExclusionParams
	}
	if !IsNil(o.Objects) {
		toSerialize["objects"] = o.Objects
	}
	return toSerialize, nil
}

type NullableAzureNativeObjectProtectionParams struct {
	value *AzureNativeObjectProtectionParams
	isSet bool
}

func (v NullableAzureNativeObjectProtectionParams) Get() *AzureNativeObjectProtectionParams {
	return v.value
}

func (v *NullableAzureNativeObjectProtectionParams) Set(val *AzureNativeObjectProtectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureNativeObjectProtectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureNativeObjectProtectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureNativeObjectProtectionParams(val *AzureNativeObjectProtectionParams) *NullableAzureNativeObjectProtectionParams {
	return &NullableAzureNativeObjectProtectionParams{value: val, isSet: true}
}

func (v NullableAzureNativeObjectProtectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureNativeObjectProtectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


