/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the EncryptionSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EncryptionSettings{}

// EncryptionSettings Specifis the encryption setting of the External Target
type EncryptionSettings struct {
	// Enable Additional security by managing key manually
	EnableAdditionalSecurity NullableBool `json:"enableAdditionalSecurity,omitempty"`
	// Specifies if the encryption key file has been downloaded using the Cohesity Dashboard (Cohesity UI). If true, the encryption key has been downloaded using the Cohesity Dashboard. An encryption key can only be downloaded once using the Cohesity Dashboard. After setting it to true once, subsequent updates to this field will be ignored.
	EncryptionKeyFileDownloaded NullableBool `json:"encryptionKeyFileDownloaded,omitempty"`
	// Specifies the type of encryption for the Setting.
	EncryptionLevel NullableString `json:"encryptionLevel"`
	// Specifies the time (in microseconds) when the encryption key file was downloaded from the Cohesity Dashboard (Cohesity UI). An encryption key can only be downloaded once using Cohesity Dashboard. Can be set only once when the key is downloaded.
	KeyFileDownloadTimeUsecs NullableInt64 `json:"keyFileDownloadTimeUsecs,omitempty"`
	// Specifies the user who downloaded the encryption key from the Cohesity Dashboard (Cohesity UI). This field is only populated if encryption is enabled for the Vault and customerManagingEncryptionKeys is true. Can be set only once when the key is downloaded.
	KeyFileDownloadUser NullableString `json:"keyFileDownloadUser,omitempty"`
	// Specifies the Key Management Service Server ID for the Encryption Setting.
	KmsServerId NullableInt64 `json:"kmsServerId,omitempty"`
}

type _EncryptionSettings EncryptionSettings

// NewEncryptionSettings instantiates a new EncryptionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptionSettings(encryptionLevel NullableString) *EncryptionSettings {
	this := EncryptionSettings{}
	this.EncryptionLevel = encryptionLevel
	return &this
}

// NewEncryptionSettingsWithDefaults instantiates a new EncryptionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptionSettingsWithDefaults() *EncryptionSettings {
	this := EncryptionSettings{}
	return &this
}

// GetEnableAdditionalSecurity returns the EnableAdditionalSecurity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionSettings) GetEnableAdditionalSecurity() bool {
	if o == nil || IsNil(o.EnableAdditionalSecurity.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableAdditionalSecurity.Get()
}

// GetEnableAdditionalSecurityOk returns a tuple with the EnableAdditionalSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionSettings) GetEnableAdditionalSecurityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableAdditionalSecurity.Get(), o.EnableAdditionalSecurity.IsSet()
}

// HasEnableAdditionalSecurity returns a boolean if a field has been set.
func (o *EncryptionSettings) HasEnableAdditionalSecurity() bool {
	if o != nil && o.EnableAdditionalSecurity.IsSet() {
		return true
	}

	return false
}

// SetEnableAdditionalSecurity gets a reference to the given NullableBool and assigns it to the EnableAdditionalSecurity field.
func (o *EncryptionSettings) SetEnableAdditionalSecurity(v bool) {
	o.EnableAdditionalSecurity.Set(&v)
}
// SetEnableAdditionalSecurityNil sets the value for EnableAdditionalSecurity to be an explicit nil
func (o *EncryptionSettings) SetEnableAdditionalSecurityNil() {
	o.EnableAdditionalSecurity.Set(nil)
}

// UnsetEnableAdditionalSecurity ensures that no value is present for EnableAdditionalSecurity, not even an explicit nil
func (o *EncryptionSettings) UnsetEnableAdditionalSecurity() {
	o.EnableAdditionalSecurity.Unset()
}

// GetEncryptionKeyFileDownloaded returns the EncryptionKeyFileDownloaded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionSettings) GetEncryptionKeyFileDownloaded() bool {
	if o == nil || IsNil(o.EncryptionKeyFileDownloaded.Get()) {
		var ret bool
		return ret
	}
	return *o.EncryptionKeyFileDownloaded.Get()
}

// GetEncryptionKeyFileDownloadedOk returns a tuple with the EncryptionKeyFileDownloaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionSettings) GetEncryptionKeyFileDownloadedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionKeyFileDownloaded.Get(), o.EncryptionKeyFileDownloaded.IsSet()
}

// HasEncryptionKeyFileDownloaded returns a boolean if a field has been set.
func (o *EncryptionSettings) HasEncryptionKeyFileDownloaded() bool {
	if o != nil && o.EncryptionKeyFileDownloaded.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKeyFileDownloaded gets a reference to the given NullableBool and assigns it to the EncryptionKeyFileDownloaded field.
func (o *EncryptionSettings) SetEncryptionKeyFileDownloaded(v bool) {
	o.EncryptionKeyFileDownloaded.Set(&v)
}
// SetEncryptionKeyFileDownloadedNil sets the value for EncryptionKeyFileDownloaded to be an explicit nil
func (o *EncryptionSettings) SetEncryptionKeyFileDownloadedNil() {
	o.EncryptionKeyFileDownloaded.Set(nil)
}

// UnsetEncryptionKeyFileDownloaded ensures that no value is present for EncryptionKeyFileDownloaded, not even an explicit nil
func (o *EncryptionSettings) UnsetEncryptionKeyFileDownloaded() {
	o.EncryptionKeyFileDownloaded.Unset()
}

// GetEncryptionLevel returns the EncryptionLevel field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EncryptionSettings) GetEncryptionLevel() string {
	if o == nil || o.EncryptionLevel.Get() == nil {
		var ret string
		return ret
	}

	return *o.EncryptionLevel.Get()
}

// GetEncryptionLevelOk returns a tuple with the EncryptionLevel field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionSettings) GetEncryptionLevelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionLevel.Get(), o.EncryptionLevel.IsSet()
}

// SetEncryptionLevel sets field value
func (o *EncryptionSettings) SetEncryptionLevel(v string) {
	o.EncryptionLevel.Set(&v)
}

// GetKeyFileDownloadTimeUsecs returns the KeyFileDownloadTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionSettings) GetKeyFileDownloadTimeUsecs() int64 {
	if o == nil || IsNil(o.KeyFileDownloadTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.KeyFileDownloadTimeUsecs.Get()
}

// GetKeyFileDownloadTimeUsecsOk returns a tuple with the KeyFileDownloadTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionSettings) GetKeyFileDownloadTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyFileDownloadTimeUsecs.Get(), o.KeyFileDownloadTimeUsecs.IsSet()
}

// HasKeyFileDownloadTimeUsecs returns a boolean if a field has been set.
func (o *EncryptionSettings) HasKeyFileDownloadTimeUsecs() bool {
	if o != nil && o.KeyFileDownloadTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetKeyFileDownloadTimeUsecs gets a reference to the given NullableInt64 and assigns it to the KeyFileDownloadTimeUsecs field.
func (o *EncryptionSettings) SetKeyFileDownloadTimeUsecs(v int64) {
	o.KeyFileDownloadTimeUsecs.Set(&v)
}
// SetKeyFileDownloadTimeUsecsNil sets the value for KeyFileDownloadTimeUsecs to be an explicit nil
func (o *EncryptionSettings) SetKeyFileDownloadTimeUsecsNil() {
	o.KeyFileDownloadTimeUsecs.Set(nil)
}

// UnsetKeyFileDownloadTimeUsecs ensures that no value is present for KeyFileDownloadTimeUsecs, not even an explicit nil
func (o *EncryptionSettings) UnsetKeyFileDownloadTimeUsecs() {
	o.KeyFileDownloadTimeUsecs.Unset()
}

// GetKeyFileDownloadUser returns the KeyFileDownloadUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionSettings) GetKeyFileDownloadUser() string {
	if o == nil || IsNil(o.KeyFileDownloadUser.Get()) {
		var ret string
		return ret
	}
	return *o.KeyFileDownloadUser.Get()
}

// GetKeyFileDownloadUserOk returns a tuple with the KeyFileDownloadUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionSettings) GetKeyFileDownloadUserOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeyFileDownloadUser.Get(), o.KeyFileDownloadUser.IsSet()
}

// HasKeyFileDownloadUser returns a boolean if a field has been set.
func (o *EncryptionSettings) HasKeyFileDownloadUser() bool {
	if o != nil && o.KeyFileDownloadUser.IsSet() {
		return true
	}

	return false
}

// SetKeyFileDownloadUser gets a reference to the given NullableString and assigns it to the KeyFileDownloadUser field.
func (o *EncryptionSettings) SetKeyFileDownloadUser(v string) {
	o.KeyFileDownloadUser.Set(&v)
}
// SetKeyFileDownloadUserNil sets the value for KeyFileDownloadUser to be an explicit nil
func (o *EncryptionSettings) SetKeyFileDownloadUserNil() {
	o.KeyFileDownloadUser.Set(nil)
}

// UnsetKeyFileDownloadUser ensures that no value is present for KeyFileDownloadUser, not even an explicit nil
func (o *EncryptionSettings) UnsetKeyFileDownloadUser() {
	o.KeyFileDownloadUser.Unset()
}

// GetKmsServerId returns the KmsServerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionSettings) GetKmsServerId() int64 {
	if o == nil || IsNil(o.KmsServerId.Get()) {
		var ret int64
		return ret
	}
	return *o.KmsServerId.Get()
}

// GetKmsServerIdOk returns a tuple with the KmsServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionSettings) GetKmsServerIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.KmsServerId.Get(), o.KmsServerId.IsSet()
}

// HasKmsServerId returns a boolean if a field has been set.
func (o *EncryptionSettings) HasKmsServerId() bool {
	if o != nil && o.KmsServerId.IsSet() {
		return true
	}

	return false
}

// SetKmsServerId gets a reference to the given NullableInt64 and assigns it to the KmsServerId field.
func (o *EncryptionSettings) SetKmsServerId(v int64) {
	o.KmsServerId.Set(&v)
}
// SetKmsServerIdNil sets the value for KmsServerId to be an explicit nil
func (o *EncryptionSettings) SetKmsServerIdNil() {
	o.KmsServerId.Set(nil)
}

// UnsetKmsServerId ensures that no value is present for KmsServerId, not even an explicit nil
func (o *EncryptionSettings) UnsetKmsServerId() {
	o.KmsServerId.Unset()
}

func (o EncryptionSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EncryptionSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableAdditionalSecurity.IsSet() {
		toSerialize["enableAdditionalSecurity"] = o.EnableAdditionalSecurity.Get()
	}
	if o.EncryptionKeyFileDownloaded.IsSet() {
		toSerialize["encryptionKeyFileDownloaded"] = o.EncryptionKeyFileDownloaded.Get()
	}
	toSerialize["encryptionLevel"] = o.EncryptionLevel.Get()
	if o.KeyFileDownloadTimeUsecs.IsSet() {
		toSerialize["keyFileDownloadTimeUsecs"] = o.KeyFileDownloadTimeUsecs.Get()
	}
	if o.KeyFileDownloadUser.IsSet() {
		toSerialize["keyFileDownloadUser"] = o.KeyFileDownloadUser.Get()
	}
	if o.KmsServerId.IsSet() {
		toSerialize["kmsServerId"] = o.KmsServerId.Get()
	}
	return toSerialize, nil
}

func (o *EncryptionSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"encryptionLevel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEncryptionSettings := _EncryptionSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEncryptionSettings)

	if err != nil {
		return err
	}

	*o = EncryptionSettings(varEncryptionSettings)

	return err
}

type NullableEncryptionSettings struct {
	value *EncryptionSettings
	isSet bool
}

func (v NullableEncryptionSettings) Get() *EncryptionSettings {
	return v.value
}

func (v *NullableEncryptionSettings) Set(val *EncryptionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptionSettings(val *EncryptionSettings) *NullableEncryptionSettings {
	return &NullableEncryptionSettings{value: val, isSet: true}
}

func (v NullableEncryptionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


