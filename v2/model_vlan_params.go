/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the VlanParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VlanParams{}

// VlanParams Specifies VLAN params associated with the backup/restore operation.
type VlanParams struct {
	// If this is set to true, then even if VLANs are configured on the system, the partition VIPs will be used for the restore.
	DisableVlan NullableBool `json:"disableVlan,omitempty"`
	// Interface group to use for backup/restore. If this is not specified, primary interface group for the cluster will be used.
	InterfaceName NullableString `json:"interfaceName,omitempty"`
	// If this is set, then the Cohesity host name or the IP address associated with this VLAN is used for mounting Cohesity's view on the remote host.
	VlanId NullableInt32 `json:"vlanId,omitempty"`
}

// NewVlanParams instantiates a new VlanParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVlanParams() *VlanParams {
	this := VlanParams{}
	return &this
}

// NewVlanParamsWithDefaults instantiates a new VlanParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVlanParamsWithDefaults() *VlanParams {
	this := VlanParams{}
	return &this
}

// GetDisableVlan returns the DisableVlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VlanParams) GetDisableVlan() bool {
	if o == nil || IsNil(o.DisableVlan.Get()) {
		var ret bool
		return ret
	}
	return *o.DisableVlan.Get()
}

// GetDisableVlanOk returns a tuple with the DisableVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VlanParams) GetDisableVlanOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DisableVlan.Get(), o.DisableVlan.IsSet()
}

// HasDisableVlan returns a boolean if a field has been set.
func (o *VlanParams) HasDisableVlan() bool {
	if o != nil && o.DisableVlan.IsSet() {
		return true
	}

	return false
}

// SetDisableVlan gets a reference to the given NullableBool and assigns it to the DisableVlan field.
func (o *VlanParams) SetDisableVlan(v bool) {
	o.DisableVlan.Set(&v)
}
// SetDisableVlanNil sets the value for DisableVlan to be an explicit nil
func (o *VlanParams) SetDisableVlanNil() {
	o.DisableVlan.Set(nil)
}

// UnsetDisableVlan ensures that no value is present for DisableVlan, not even an explicit nil
func (o *VlanParams) UnsetDisableVlan() {
	o.DisableVlan.Unset()
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VlanParams) GetInterfaceName() string {
	if o == nil || IsNil(o.InterfaceName.Get()) {
		var ret string
		return ret
	}
	return *o.InterfaceName.Get()
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VlanParams) GetInterfaceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.InterfaceName.Get(), o.InterfaceName.IsSet()
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *VlanParams) HasInterfaceName() bool {
	if o != nil && o.InterfaceName.IsSet() {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given NullableString and assigns it to the InterfaceName field.
func (o *VlanParams) SetInterfaceName(v string) {
	o.InterfaceName.Set(&v)
}
// SetInterfaceNameNil sets the value for InterfaceName to be an explicit nil
func (o *VlanParams) SetInterfaceNameNil() {
	o.InterfaceName.Set(nil)
}

// UnsetInterfaceName ensures that no value is present for InterfaceName, not even an explicit nil
func (o *VlanParams) UnsetInterfaceName() {
	o.InterfaceName.Unset()
}

// GetVlanId returns the VlanId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VlanParams) GetVlanId() int32 {
	if o == nil || IsNil(o.VlanId.Get()) {
		var ret int32
		return ret
	}
	return *o.VlanId.Get()
}

// GetVlanIdOk returns a tuple with the VlanId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VlanParams) GetVlanIdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.VlanId.Get(), o.VlanId.IsSet()
}

// HasVlanId returns a boolean if a field has been set.
func (o *VlanParams) HasVlanId() bool {
	if o != nil && o.VlanId.IsSet() {
		return true
	}

	return false
}

// SetVlanId gets a reference to the given NullableInt32 and assigns it to the VlanId field.
func (o *VlanParams) SetVlanId(v int32) {
	o.VlanId.Set(&v)
}
// SetVlanIdNil sets the value for VlanId to be an explicit nil
func (o *VlanParams) SetVlanIdNil() {
	o.VlanId.Set(nil)
}

// UnsetVlanId ensures that no value is present for VlanId, not even an explicit nil
func (o *VlanParams) UnsetVlanId() {
	o.VlanId.Unset()
}

func (o VlanParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VlanParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DisableVlan.IsSet() {
		toSerialize["disableVlan"] = o.DisableVlan.Get()
	}
	if o.InterfaceName.IsSet() {
		toSerialize["interfaceName"] = o.InterfaceName.Get()
	}
	if o.VlanId.IsSet() {
		toSerialize["vlanId"] = o.VlanId.Get()
	}
	return toSerialize, nil
}

type NullableVlanParams struct {
	value *VlanParams
	isSet bool
}

func (v NullableVlanParams) Get() *VlanParams {
	return v.value
}

func (v *NullableVlanParams) Set(val *VlanParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVlanParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVlanParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVlanParams(val *VlanParams) *NullableVlanParams {
	return &NullableVlanParams{value: val, isSet: true}
}

func (v NullableVlanParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVlanParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


