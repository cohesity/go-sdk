/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the IdentityConfigs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityConfigs{}

// IdentityConfigs Identity Provider Configurations
type IdentityConfigs struct {
	// Specifies a list of Identity Providers.
	Idps []IdentityConfig `json:"idps,omitempty"`
}

// NewIdentityConfigs instantiates a new IdentityConfigs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityConfigs() *IdentityConfigs {
	this := IdentityConfigs{}
	return &this
}

// NewIdentityConfigsWithDefaults instantiates a new IdentityConfigs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityConfigsWithDefaults() *IdentityConfigs {
	this := IdentityConfigs{}
	return &this
}

// GetIdps returns the Idps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityConfigs) GetIdps() []IdentityConfig {
	if o == nil {
		var ret []IdentityConfig
		return ret
	}
	return o.Idps
}

// GetIdpsOk returns a tuple with the Idps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityConfigs) GetIdpsOk() ([]IdentityConfig, bool) {
	if o == nil || IsNil(o.Idps) {
		return nil, false
	}
	return o.Idps, true
}

// HasIdps returns a boolean if a field has been set.
func (o *IdentityConfigs) HasIdps() bool {
	if o != nil && !IsNil(o.Idps) {
		return true
	}

	return false
}

// SetIdps gets a reference to the given []IdentityConfig and assigns it to the Idps field.
func (o *IdentityConfigs) SetIdps(v []IdentityConfig) {
	o.Idps = v
}

func (o IdentityConfigs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityConfigs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Idps != nil {
		toSerialize["idps"] = o.Idps
	}
	return toSerialize, nil
}

type NullableIdentityConfigs struct {
	value *IdentityConfigs
	isSet bool
}

func (v NullableIdentityConfigs) Get() *IdentityConfigs {
	return v.value
}

func (v *NullableIdentityConfigs) Set(val *IdentityConfigs) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityConfigs) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityConfigs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityConfigs(val *IdentityConfigs) *NullableIdentityConfigs {
	return &NullableIdentityConfigs{value: val, isSet: true}
}

func (v NullableIdentityConfigs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityConfigs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


