/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ConstructMetaInfoResultOracleParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ConstructMetaInfoResultOracleParams{}

// ConstructMetaInfoResultOracleParams Specifies 3 Maps required to fill pfile text box.
type ConstructMetaInfoResultOracleParams struct {
	// Specifies map for cohesity controlled pfile params.
	CohesityPfileParamMap []KeyValuePair `json:"cohesityPfileParamMap,omitempty"`
	// Specifies map for inherited pfile params.
	InheritedPfileParamMap []KeyValuePair `json:"inheritedPfileParamMap,omitempty"`
	// Specifies map for restricted pfile params.
	RestrictedPfileParamMap []KeyValuePair `json:"restrictedPfileParamMap,omitempty"`
}

// NewConstructMetaInfoResultOracleParams instantiates a new ConstructMetaInfoResultOracleParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstructMetaInfoResultOracleParams() *ConstructMetaInfoResultOracleParams {
	this := ConstructMetaInfoResultOracleParams{}
	return &this
}

// NewConstructMetaInfoResultOracleParamsWithDefaults instantiates a new ConstructMetaInfoResultOracleParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstructMetaInfoResultOracleParamsWithDefaults() *ConstructMetaInfoResultOracleParams {
	this := ConstructMetaInfoResultOracleParams{}
	return &this
}

// GetCohesityPfileParamMap returns the CohesityPfileParamMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConstructMetaInfoResultOracleParams) GetCohesityPfileParamMap() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.CohesityPfileParamMap
}

// GetCohesityPfileParamMapOk returns a tuple with the CohesityPfileParamMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConstructMetaInfoResultOracleParams) GetCohesityPfileParamMapOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.CohesityPfileParamMap) {
		return nil, false
	}
	return o.CohesityPfileParamMap, true
}

// HasCohesityPfileParamMap returns a boolean if a field has been set.
func (o *ConstructMetaInfoResultOracleParams) HasCohesityPfileParamMap() bool {
	if o != nil && !IsNil(o.CohesityPfileParamMap) {
		return true
	}

	return false
}

// SetCohesityPfileParamMap gets a reference to the given []KeyValuePair and assigns it to the CohesityPfileParamMap field.
func (o *ConstructMetaInfoResultOracleParams) SetCohesityPfileParamMap(v []KeyValuePair) {
	o.CohesityPfileParamMap = v
}

// GetInheritedPfileParamMap returns the InheritedPfileParamMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConstructMetaInfoResultOracleParams) GetInheritedPfileParamMap() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.InheritedPfileParamMap
}

// GetInheritedPfileParamMapOk returns a tuple with the InheritedPfileParamMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConstructMetaInfoResultOracleParams) GetInheritedPfileParamMapOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.InheritedPfileParamMap) {
		return nil, false
	}
	return o.InheritedPfileParamMap, true
}

// HasInheritedPfileParamMap returns a boolean if a field has been set.
func (o *ConstructMetaInfoResultOracleParams) HasInheritedPfileParamMap() bool {
	if o != nil && !IsNil(o.InheritedPfileParamMap) {
		return true
	}

	return false
}

// SetInheritedPfileParamMap gets a reference to the given []KeyValuePair and assigns it to the InheritedPfileParamMap field.
func (o *ConstructMetaInfoResultOracleParams) SetInheritedPfileParamMap(v []KeyValuePair) {
	o.InheritedPfileParamMap = v
}

// GetRestrictedPfileParamMap returns the RestrictedPfileParamMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConstructMetaInfoResultOracleParams) GetRestrictedPfileParamMap() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.RestrictedPfileParamMap
}

// GetRestrictedPfileParamMapOk returns a tuple with the RestrictedPfileParamMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConstructMetaInfoResultOracleParams) GetRestrictedPfileParamMapOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.RestrictedPfileParamMap) {
		return nil, false
	}
	return o.RestrictedPfileParamMap, true
}

// HasRestrictedPfileParamMap returns a boolean if a field has been set.
func (o *ConstructMetaInfoResultOracleParams) HasRestrictedPfileParamMap() bool {
	if o != nil && !IsNil(o.RestrictedPfileParamMap) {
		return true
	}

	return false
}

// SetRestrictedPfileParamMap gets a reference to the given []KeyValuePair and assigns it to the RestrictedPfileParamMap field.
func (o *ConstructMetaInfoResultOracleParams) SetRestrictedPfileParamMap(v []KeyValuePair) {
	o.RestrictedPfileParamMap = v
}

func (o ConstructMetaInfoResultOracleParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ConstructMetaInfoResultOracleParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CohesityPfileParamMap != nil {
		toSerialize["cohesityPfileParamMap"] = o.CohesityPfileParamMap
	}
	if o.InheritedPfileParamMap != nil {
		toSerialize["inheritedPfileParamMap"] = o.InheritedPfileParamMap
	}
	if o.RestrictedPfileParamMap != nil {
		toSerialize["restrictedPfileParamMap"] = o.RestrictedPfileParamMap
	}
	return toSerialize, nil
}

type NullableConstructMetaInfoResultOracleParams struct {
	value *ConstructMetaInfoResultOracleParams
	isSet bool
}

func (v NullableConstructMetaInfoResultOracleParams) Get() *ConstructMetaInfoResultOracleParams {
	return v.value
}

func (v *NullableConstructMetaInfoResultOracleParams) Set(val *ConstructMetaInfoResultOracleParams) {
	v.value = val
	v.isSet = true
}

func (v NullableConstructMetaInfoResultOracleParams) IsSet() bool {
	return v.isSet
}

func (v *NullableConstructMetaInfoResultOracleParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstructMetaInfoResultOracleParams(val *ConstructMetaInfoResultOracleParams) *NullableConstructMetaInfoResultOracleParams {
	return &NullableConstructMetaInfoResultOracleParams{value: val, isSet: true}
}

func (v NullableConstructMetaInfoResultOracleParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstructMetaInfoResultOracleParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


