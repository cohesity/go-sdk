/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FirewallIPSets type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FirewallIPSets{}

// FirewallIPSets Specifies the list of firewall IP sets.
type FirewallIPSets struct {
	IpSets []FirewallIPSet `json:"ipSets,omitempty"`
}

// NewFirewallIPSets instantiates a new FirewallIPSets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFirewallIPSets() *FirewallIPSets {
	this := FirewallIPSets{}
	return &this
}

// NewFirewallIPSetsWithDefaults instantiates a new FirewallIPSets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFirewallIPSetsWithDefaults() *FirewallIPSets {
	this := FirewallIPSets{}
	return &this
}

// GetIpSets returns the IpSets field value if set, zero value otherwise.
func (o *FirewallIPSets) GetIpSets() []FirewallIPSet {
	if o == nil || IsNil(o.IpSets) {
		var ret []FirewallIPSet
		return ret
	}
	return o.IpSets
}

// GetIpSetsOk returns a tuple with the IpSets field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FirewallIPSets) GetIpSetsOk() ([]FirewallIPSet, bool) {
	if o == nil || IsNil(o.IpSets) {
		return nil, false
	}
	return o.IpSets, true
}

// HasIpSets returns a boolean if a field has been set.
func (o *FirewallIPSets) HasIpSets() bool {
	if o != nil && !IsNil(o.IpSets) {
		return true
	}

	return false
}

// SetIpSets gets a reference to the given []FirewallIPSet and assigns it to the IpSets field.
func (o *FirewallIPSets) SetIpSets(v []FirewallIPSet) {
	o.IpSets = v
}

func (o FirewallIPSets) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FirewallIPSets) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IpSets) {
		toSerialize["ipSets"] = o.IpSets
	}
	return toSerialize, nil
}

type NullableFirewallIPSets struct {
	value *FirewallIPSets
	isSet bool
}

func (v NullableFirewallIPSets) Get() *FirewallIPSets {
	return v.value
}

func (v *NullableFirewallIPSets) Set(val *FirewallIPSets) {
	v.value = val
	v.isSet = true
}

func (v NullableFirewallIPSets) IsSet() bool {
	return v.isSet
}

func (v *NullableFirewallIPSets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFirewallIPSets(val *FirewallIPSets) *NullableFirewallIPSets {
	return &NullableFirewallIPSets{value: val, isSet: true}
}

func (v NullableFirewallIPSets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFirewallIPSets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


