/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ServiceVersionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceVersionInfo{}

// ServiceVersionInfo Specifies version information for a cohesity service.
type ServiceVersionInfo struct {
	// LastCommitTime of the service.
	LastCommitTime *string `json:"lastCommitTime,omitempty"`
	// Name of the service.
	ServiceName *string `json:"serviceName,omitempty"`
	// Version of the service.
	ServiceVersion *string `json:"serviceVersion,omitempty"`
}

// NewServiceVersionInfo instantiates a new ServiceVersionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceVersionInfo() *ServiceVersionInfo {
	this := ServiceVersionInfo{}
	return &this
}

// NewServiceVersionInfoWithDefaults instantiates a new ServiceVersionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceVersionInfoWithDefaults() *ServiceVersionInfo {
	this := ServiceVersionInfo{}
	return &this
}

// GetLastCommitTime returns the LastCommitTime field value if set, zero value otherwise.
func (o *ServiceVersionInfo) GetLastCommitTime() string {
	if o == nil || IsNil(o.LastCommitTime) {
		var ret string
		return ret
	}
	return *o.LastCommitTime
}

// GetLastCommitTimeOk returns a tuple with the LastCommitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceVersionInfo) GetLastCommitTimeOk() (*string, bool) {
	if o == nil || IsNil(o.LastCommitTime) {
		return nil, false
	}
	return o.LastCommitTime, true
}

// HasLastCommitTime returns a boolean if a field has been set.
func (o *ServiceVersionInfo) HasLastCommitTime() bool {
	if o != nil && !IsNil(o.LastCommitTime) {
		return true
	}

	return false
}

// SetLastCommitTime gets a reference to the given string and assigns it to the LastCommitTime field.
func (o *ServiceVersionInfo) SetLastCommitTime(v string) {
	o.LastCommitTime = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *ServiceVersionInfo) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceVersionInfo) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *ServiceVersionInfo) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *ServiceVersionInfo) SetServiceName(v string) {
	o.ServiceName = &v
}

// GetServiceVersion returns the ServiceVersion field value if set, zero value otherwise.
func (o *ServiceVersionInfo) GetServiceVersion() string {
	if o == nil || IsNil(o.ServiceVersion) {
		var ret string
		return ret
	}
	return *o.ServiceVersion
}

// GetServiceVersionOk returns a tuple with the ServiceVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceVersionInfo) GetServiceVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceVersion) {
		return nil, false
	}
	return o.ServiceVersion, true
}

// HasServiceVersion returns a boolean if a field has been set.
func (o *ServiceVersionInfo) HasServiceVersion() bool {
	if o != nil && !IsNil(o.ServiceVersion) {
		return true
	}

	return false
}

// SetServiceVersion gets a reference to the given string and assigns it to the ServiceVersion field.
func (o *ServiceVersionInfo) SetServiceVersion(v string) {
	o.ServiceVersion = &v
}

func (o ServiceVersionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceVersionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LastCommitTime) {
		toSerialize["lastCommitTime"] = o.LastCommitTime
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	if !IsNil(o.ServiceVersion) {
		toSerialize["serviceVersion"] = o.ServiceVersion
	}
	return toSerialize, nil
}

type NullableServiceVersionInfo struct {
	value *ServiceVersionInfo
	isSet bool
}

func (v NullableServiceVersionInfo) Get() *ServiceVersionInfo {
	return v.value
}

func (v *NullableServiceVersionInfo) Set(val *ServiceVersionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceVersionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceVersionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceVersionInfo(val *ServiceVersionInfo) *NullableServiceVersionInfo {
	return &NullableServiceVersionInfo{value: val, isSet: true}
}

func (v NullableServiceVersionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceVersionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


