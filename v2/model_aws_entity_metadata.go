/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AwsEntityMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsEntityMetadata{}

// AwsEntityMetadata Specifies the entity metadata of aws entities.
type AwsEntityMetadata struct {
	AuroraParams *AwsAuroraEntityMetadata `json:"auroraParams,omitempty"`
	ChildMetadata *AwsEntityChildMetadata `json:"childMetadata,omitempty"`
	PostgresParams *AwsPostgresEntityMetadata `json:"postgresParams,omitempty"`
	RdsParams *AwsRdsEntityMetadata `json:"rdsParams,omitempty"`
}

// NewAwsEntityMetadata instantiates a new AwsEntityMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsEntityMetadata() *AwsEntityMetadata {
	this := AwsEntityMetadata{}
	return &this
}

// NewAwsEntityMetadataWithDefaults instantiates a new AwsEntityMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsEntityMetadataWithDefaults() *AwsEntityMetadata {
	this := AwsEntityMetadata{}
	return &this
}

// GetAuroraParams returns the AuroraParams field value if set, zero value otherwise.
func (o *AwsEntityMetadata) GetAuroraParams() AwsAuroraEntityMetadata {
	if o == nil || IsNil(o.AuroraParams) {
		var ret AwsAuroraEntityMetadata
		return ret
	}
	return *o.AuroraParams
}

// GetAuroraParamsOk returns a tuple with the AuroraParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEntityMetadata) GetAuroraParamsOk() (*AwsAuroraEntityMetadata, bool) {
	if o == nil || IsNil(o.AuroraParams) {
		return nil, false
	}
	return o.AuroraParams, true
}

// HasAuroraParams returns a boolean if a field has been set.
func (o *AwsEntityMetadata) HasAuroraParams() bool {
	if o != nil && !IsNil(o.AuroraParams) {
		return true
	}

	return false
}

// SetAuroraParams gets a reference to the given AwsAuroraEntityMetadata and assigns it to the AuroraParams field.
func (o *AwsEntityMetadata) SetAuroraParams(v AwsAuroraEntityMetadata) {
	o.AuroraParams = &v
}

// GetChildMetadata returns the ChildMetadata field value if set, zero value otherwise.
func (o *AwsEntityMetadata) GetChildMetadata() AwsEntityChildMetadata {
	if o == nil || IsNil(o.ChildMetadata) {
		var ret AwsEntityChildMetadata
		return ret
	}
	return *o.ChildMetadata
}

// GetChildMetadataOk returns a tuple with the ChildMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEntityMetadata) GetChildMetadataOk() (*AwsEntityChildMetadata, bool) {
	if o == nil || IsNil(o.ChildMetadata) {
		return nil, false
	}
	return o.ChildMetadata, true
}

// HasChildMetadata returns a boolean if a field has been set.
func (o *AwsEntityMetadata) HasChildMetadata() bool {
	if o != nil && !IsNil(o.ChildMetadata) {
		return true
	}

	return false
}

// SetChildMetadata gets a reference to the given AwsEntityChildMetadata and assigns it to the ChildMetadata field.
func (o *AwsEntityMetadata) SetChildMetadata(v AwsEntityChildMetadata) {
	o.ChildMetadata = &v
}

// GetPostgresParams returns the PostgresParams field value if set, zero value otherwise.
func (o *AwsEntityMetadata) GetPostgresParams() AwsPostgresEntityMetadata {
	if o == nil || IsNil(o.PostgresParams) {
		var ret AwsPostgresEntityMetadata
		return ret
	}
	return *o.PostgresParams
}

// GetPostgresParamsOk returns a tuple with the PostgresParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEntityMetadata) GetPostgresParamsOk() (*AwsPostgresEntityMetadata, bool) {
	if o == nil || IsNil(o.PostgresParams) {
		return nil, false
	}
	return o.PostgresParams, true
}

// HasPostgresParams returns a boolean if a field has been set.
func (o *AwsEntityMetadata) HasPostgresParams() bool {
	if o != nil && !IsNil(o.PostgresParams) {
		return true
	}

	return false
}

// SetPostgresParams gets a reference to the given AwsPostgresEntityMetadata and assigns it to the PostgresParams field.
func (o *AwsEntityMetadata) SetPostgresParams(v AwsPostgresEntityMetadata) {
	o.PostgresParams = &v
}

// GetRdsParams returns the RdsParams field value if set, zero value otherwise.
func (o *AwsEntityMetadata) GetRdsParams() AwsRdsEntityMetadata {
	if o == nil || IsNil(o.RdsParams) {
		var ret AwsRdsEntityMetadata
		return ret
	}
	return *o.RdsParams
}

// GetRdsParamsOk returns a tuple with the RdsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsEntityMetadata) GetRdsParamsOk() (*AwsRdsEntityMetadata, bool) {
	if o == nil || IsNil(o.RdsParams) {
		return nil, false
	}
	return o.RdsParams, true
}

// HasRdsParams returns a boolean if a field has been set.
func (o *AwsEntityMetadata) HasRdsParams() bool {
	if o != nil && !IsNil(o.RdsParams) {
		return true
	}

	return false
}

// SetRdsParams gets a reference to the given AwsRdsEntityMetadata and assigns it to the RdsParams field.
func (o *AwsEntityMetadata) SetRdsParams(v AwsRdsEntityMetadata) {
	o.RdsParams = &v
}

func (o AwsEntityMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsEntityMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AuroraParams) {
		toSerialize["auroraParams"] = o.AuroraParams
	}
	if !IsNil(o.ChildMetadata) {
		toSerialize["childMetadata"] = o.ChildMetadata
	}
	if !IsNil(o.PostgresParams) {
		toSerialize["postgresParams"] = o.PostgresParams
	}
	if !IsNil(o.RdsParams) {
		toSerialize["rdsParams"] = o.RdsParams
	}
	return toSerialize, nil
}

type NullableAwsEntityMetadata struct {
	value *AwsEntityMetadata
	isSet bool
}

func (v NullableAwsEntityMetadata) Get() *AwsEntityMetadata {
	return v.value
}

func (v *NullableAwsEntityMetadata) Set(val *AwsEntityMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsEntityMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsEntityMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsEntityMetadata(val *AwsEntityMetadata) *NullableAwsEntityMetadata {
	return &NullableAwsEntityMetadata{value: val, isSet: true}
}

func (v NullableAwsEntityMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsEntityMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


