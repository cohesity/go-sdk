/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the EntityIdentifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EntityIdentifier{}

// EntityIdentifier Specifies the Identifier for an Entity.
type EntityIdentifier struct {
	// Specifies the Id of an Entity.
	EntityId NullableString `json:"entityId,omitempty"`
	// Specifies the name of an Entity.
	Name NullableString `json:"name,omitempty"`
}

// NewEntityIdentifier instantiates a new EntityIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityIdentifier() *EntityIdentifier {
	this := EntityIdentifier{}
	return &this
}

// NewEntityIdentifierWithDefaults instantiates a new EntityIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityIdentifierWithDefaults() *EntityIdentifier {
	this := EntityIdentifier{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntityIdentifier) GetEntityId() string {
	if o == nil || IsNil(o.EntityId.Get()) {
		var ret string
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntityIdentifier) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *EntityIdentifier) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableString and assigns it to the EntityId field.
func (o *EntityIdentifier) SetEntityId(v string) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *EntityIdentifier) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *EntityIdentifier) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntityIdentifier) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntityIdentifier) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *EntityIdentifier) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *EntityIdentifier) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *EntityIdentifier) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *EntityIdentifier) UnsetName() {
	o.Name.Unset()
}

func (o EntityIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EntityIdentifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

type NullableEntityIdentifier struct {
	value *EntityIdentifier
	isSet bool
}

func (v NullableEntityIdentifier) Get() *EntityIdentifier {
	return v.value
}

func (v *NullableEntityIdentifier) Set(val *EntityIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityIdentifier(val *EntityIdentifier) *NullableEntityIdentifier {
	return &NullableEntityIdentifier{value: val, isSet: true}
}

func (v NullableEntityIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


