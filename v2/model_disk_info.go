/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DiskInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DiskInfo{}

// DiskInfo Specifies information about a disk.
type DiskInfo struct {
	// Specifies the Id of the controller bus that controls the disk.
	BusNumber NullableInt64 `json:"busNumber"`
	// Specifies the disk controller type.
	ControllerType NullableString `json:"controllerType,omitempty"`
	// Specifies the disk file name. This is the VMDK name and not the flat file name.
	UnitNumber NullableInt64 `json:"unitNumber"`
}

type _DiskInfo DiskInfo

// NewDiskInfo instantiates a new DiskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskInfo(busNumber NullableInt64, unitNumber NullableInt64) *DiskInfo {
	this := DiskInfo{}
	this.BusNumber = busNumber
	this.UnitNumber = unitNumber
	return &this
}

// NewDiskInfoWithDefaults instantiates a new DiskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskInfoWithDefaults() *DiskInfo {
	this := DiskInfo{}
	return &this
}

// GetBusNumber returns the BusNumber field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *DiskInfo) GetBusNumber() int64 {
	if o == nil || o.BusNumber.Get() == nil {
		var ret int64
		return ret
	}

	return *o.BusNumber.Get()
}

// GetBusNumberOk returns a tuple with the BusNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskInfo) GetBusNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BusNumber.Get(), o.BusNumber.IsSet()
}

// SetBusNumber sets field value
func (o *DiskInfo) SetBusNumber(v int64) {
	o.BusNumber.Set(&v)
}

// GetControllerType returns the ControllerType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskInfo) GetControllerType() string {
	if o == nil || IsNil(o.ControllerType.Get()) {
		var ret string
		return ret
	}
	return *o.ControllerType.Get()
}

// GetControllerTypeOk returns a tuple with the ControllerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskInfo) GetControllerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControllerType.Get(), o.ControllerType.IsSet()
}

// HasControllerType returns a boolean if a field has been set.
func (o *DiskInfo) HasControllerType() bool {
	if o != nil && o.ControllerType.IsSet() {
		return true
	}

	return false
}

// SetControllerType gets a reference to the given NullableString and assigns it to the ControllerType field.
func (o *DiskInfo) SetControllerType(v string) {
	o.ControllerType.Set(&v)
}
// SetControllerTypeNil sets the value for ControllerType to be an explicit nil
func (o *DiskInfo) SetControllerTypeNil() {
	o.ControllerType.Set(nil)
}

// UnsetControllerType ensures that no value is present for ControllerType, not even an explicit nil
func (o *DiskInfo) UnsetControllerType() {
	o.ControllerType.Unset()
}

// GetUnitNumber returns the UnitNumber field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *DiskInfo) GetUnitNumber() int64 {
	if o == nil || o.UnitNumber.Get() == nil {
		var ret int64
		return ret
	}

	return *o.UnitNumber.Get()
}

// GetUnitNumberOk returns a tuple with the UnitNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskInfo) GetUnitNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitNumber.Get(), o.UnitNumber.IsSet()
}

// SetUnitNumber sets field value
func (o *DiskInfo) SetUnitNumber(v int64) {
	o.UnitNumber.Set(&v)
}

func (o DiskInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DiskInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["busNumber"] = o.BusNumber.Get()
	if o.ControllerType.IsSet() {
		toSerialize["controllerType"] = o.ControllerType.Get()
	}
	toSerialize["unitNumber"] = o.UnitNumber.Get()
	return toSerialize, nil
}

func (o *DiskInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"busNumber",
		"unitNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDiskInfo := _DiskInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDiskInfo)

	if err != nil {
		return err
	}

	*o = DiskInfo(varDiskInfo)

	return err
}

type NullableDiskInfo struct {
	value *DiskInfo
	isSet bool
}

func (v NullableDiskInfo) Get() *DiskInfo {
	return v.value
}

func (v *NullableDiskInfo) Set(val *DiskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskInfo(val *DiskInfo) *NullableDiskInfo {
	return &NullableDiskInfo{value: val, isSet: true}
}

func (v NullableDiskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


