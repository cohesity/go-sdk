/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NasEnvJobParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NasEnvJobParams{}

// NasEnvJobParams Specifies additional special parameters that are applicable only to Types of 'kGenericNas' type.
type NasEnvJobParams struct {
	// Specifies whether to audit log the file tiering activity.
	EnableAuditLogging NullableBool `json:"enableAuditLogging,omitempty"`
	FilePath *FileFilteringPolicy `json:"filePath,omitempty"`
	FileSize *FileSizePolicy `json:"fileSize,omitempty"`
	// If set, all files in the view will be uptiered regardless of file_select_policy, num_file_access, hot_file_window, file_size constraints.
	IncludeAllFiles NullableBool `json:"includeAllFiles,omitempty"`
	Target NullableDataTieringTarget `json:"target,omitempty"`
	UptieringFileAge *UptieringFileAgePolicy `json:"uptieringFileAge,omitempty"`
	// Specifies whether to remove the orphan data from the target if the symlink is removed from the source.
	AutoOrphanDataCleanup NullableBool `json:"autoOrphanDataCleanup,omitempty"`
	DowntieringFileAge *DowntieringFileAgePolicy `json:"downtieringFileAge,omitempty"`
	// Specifies whether to create a symlink for the migrated data from source to target.
	SkipBackSymlink NullableBool `json:"skipBackSymlink,omitempty"`
	// Specifies that snapshot label is not set for Data-Protect Netapp Volumes backup. If field is set to true, existing oldest snapshot is used for backup and subsequent incremental will be selected in ascending order of snapshot create time on the source. If snapshot label is set, this field is set to false.
	BackupExistingSnapshot NullableBool `json:"backupExistingSnapshot,omitempty"`
	// Specifies whether or not the Protection Group should continue regardless of whether or not an error was encountered during protection group run.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies whether this job will enable faster incremental backups using change list or similar APIs
	EnableFasterIncrementalBackups NullableBool `json:"enableFasterIncrementalBackups,omitempty"`
	// Specifies whether the protection group should use encryption while backup or not.
	EncryptionEnabled NullableBool `json:"encryptionEnabled,omitempty"`
	FileLockConfig *FileLevelDataLockConfig `json:"fileLockConfig,omitempty"`
	FilePathFilters *FileFilteringPolicy `json:"filePathFilters,omitempty"`
	FilterIpConfig *FilterIpConfig `json:"filterIpConfig,omitempty"`
	// Specifies if the NAS source permissions should be modified internally to allow backups.
	ModifySourcePermissions NullableBool `json:"modifySourcePermissions,omitempty"`
	// Specifies the preferred protocol to use if this device supports multiple protocols.
	NasProtocol NullableString `json:"nasProtocol,omitempty"`
	// Specifies the preference of NFS version to be backed up if a volume supports multiple versions of NFS.
	NfsVersionPreference NullableString `json:"nfsVersionPreference,omitempty"`
	SnapshotLabel *SnapshotLabel `json:"snapshotLabel,omitempty"`
	ThrottlingConfig *NasThrottlingConfig `json:"throttlingConfig,omitempty"`
	// Specify whether to use the Isilon Changelist API to directly discover changed files/directories for faster incremental backup. Cohesity will keep an extra snapshot which will be deleted by the next successful backup.
	UseChangelist NullableBool `json:"useChangelist,omitempty"`
}

// NewNasEnvJobParams instantiates a new NasEnvJobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNasEnvJobParams() *NasEnvJobParams {
	this := NasEnvJobParams{}
	var enableAuditLogging bool = false
	this.EnableAuditLogging = *NewNullableBool(&enableAuditLogging)
	var includeAllFiles bool = false
	this.IncludeAllFiles = *NewNullableBool(&includeAllFiles)
	var autoOrphanDataCleanup bool = true
	this.AutoOrphanDataCleanup = *NewNullableBool(&autoOrphanDataCleanup)
	var skipBackSymlink bool = true
	this.SkipBackSymlink = *NewNullableBool(&skipBackSymlink)
	return &this
}

// NewNasEnvJobParamsWithDefaults instantiates a new NasEnvJobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNasEnvJobParamsWithDefaults() *NasEnvJobParams {
	this := NasEnvJobParams{}
	var enableAuditLogging bool = false
	this.EnableAuditLogging = *NewNullableBool(&enableAuditLogging)
	var includeAllFiles bool = false
	this.IncludeAllFiles = *NewNullableBool(&includeAllFiles)
	var autoOrphanDataCleanup bool = true
	this.AutoOrphanDataCleanup = *NewNullableBool(&autoOrphanDataCleanup)
	var skipBackSymlink bool = true
	this.SkipBackSymlink = *NewNullableBool(&skipBackSymlink)
	return &this
}

// GetEnableAuditLogging returns the EnableAuditLogging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetEnableAuditLogging() bool {
	if o == nil || IsNil(o.EnableAuditLogging.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableAuditLogging.Get()
}

// GetEnableAuditLoggingOk returns a tuple with the EnableAuditLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetEnableAuditLoggingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableAuditLogging.Get(), o.EnableAuditLogging.IsSet()
}

// HasEnableAuditLogging returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasEnableAuditLogging() bool {
	if o != nil && o.EnableAuditLogging.IsSet() {
		return true
	}

	return false
}

// SetEnableAuditLogging gets a reference to the given NullableBool and assigns it to the EnableAuditLogging field.
func (o *NasEnvJobParams) SetEnableAuditLogging(v bool) {
	o.EnableAuditLogging.Set(&v)
}
// SetEnableAuditLoggingNil sets the value for EnableAuditLogging to be an explicit nil
func (o *NasEnvJobParams) SetEnableAuditLoggingNil() {
	o.EnableAuditLogging.Set(nil)
}

// UnsetEnableAuditLogging ensures that no value is present for EnableAuditLogging, not even an explicit nil
func (o *NasEnvJobParams) UnsetEnableAuditLogging() {
	o.EnableAuditLogging.Unset()
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *NasEnvJobParams) GetFilePath() FileFilteringPolicy {
	if o == nil || IsNil(o.FilePath) {
		var ret FileFilteringPolicy
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasEnvJobParams) GetFilePathOk() (*FileFilteringPolicy, bool) {
	if o == nil || IsNil(o.FilePath) {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasFilePath() bool {
	if o != nil && !IsNil(o.FilePath) {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given FileFilteringPolicy and assigns it to the FilePath field.
func (o *NasEnvJobParams) SetFilePath(v FileFilteringPolicy) {
	o.FilePath = &v
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *NasEnvJobParams) GetFileSize() FileSizePolicy {
	if o == nil || IsNil(o.FileSize) {
		var ret FileSizePolicy
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasEnvJobParams) GetFileSizeOk() (*FileSizePolicy, bool) {
	if o == nil || IsNil(o.FileSize) {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasFileSize() bool {
	if o != nil && !IsNil(o.FileSize) {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given FileSizePolicy and assigns it to the FileSize field.
func (o *NasEnvJobParams) SetFileSize(v FileSizePolicy) {
	o.FileSize = &v
}

// GetIncludeAllFiles returns the IncludeAllFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetIncludeAllFiles() bool {
	if o == nil || IsNil(o.IncludeAllFiles.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeAllFiles.Get()
}

// GetIncludeAllFilesOk returns a tuple with the IncludeAllFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetIncludeAllFilesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeAllFiles.Get(), o.IncludeAllFiles.IsSet()
}

// HasIncludeAllFiles returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasIncludeAllFiles() bool {
	if o != nil && o.IncludeAllFiles.IsSet() {
		return true
	}

	return false
}

// SetIncludeAllFiles gets a reference to the given NullableBool and assigns it to the IncludeAllFiles field.
func (o *NasEnvJobParams) SetIncludeAllFiles(v bool) {
	o.IncludeAllFiles.Set(&v)
}
// SetIncludeAllFilesNil sets the value for IncludeAllFiles to be an explicit nil
func (o *NasEnvJobParams) SetIncludeAllFilesNil() {
	o.IncludeAllFiles.Set(nil)
}

// UnsetIncludeAllFiles ensures that no value is present for IncludeAllFiles, not even an explicit nil
func (o *NasEnvJobParams) UnsetIncludeAllFiles() {
	o.IncludeAllFiles.Unset()
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetTarget() DataTieringTarget {
	if o == nil || IsNil(o.Target.Get()) {
		var ret DataTieringTarget
		return ret
	}
	return *o.Target.Get()
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetTargetOk() (*DataTieringTarget, bool) {
	if o == nil {
		return nil, false
	}
	return o.Target.Get(), o.Target.IsSet()
}

// HasTarget returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasTarget() bool {
	if o != nil && o.Target.IsSet() {
		return true
	}

	return false
}

// SetTarget gets a reference to the given NullableDataTieringTarget and assigns it to the Target field.
func (o *NasEnvJobParams) SetTarget(v DataTieringTarget) {
	o.Target.Set(&v)
}
// SetTargetNil sets the value for Target to be an explicit nil
func (o *NasEnvJobParams) SetTargetNil() {
	o.Target.Set(nil)
}

// UnsetTarget ensures that no value is present for Target, not even an explicit nil
func (o *NasEnvJobParams) UnsetTarget() {
	o.Target.Unset()
}

// GetUptieringFileAge returns the UptieringFileAge field value if set, zero value otherwise.
func (o *NasEnvJobParams) GetUptieringFileAge() UptieringFileAgePolicy {
	if o == nil || IsNil(o.UptieringFileAge) {
		var ret UptieringFileAgePolicy
		return ret
	}
	return *o.UptieringFileAge
}

// GetUptieringFileAgeOk returns a tuple with the UptieringFileAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasEnvJobParams) GetUptieringFileAgeOk() (*UptieringFileAgePolicy, bool) {
	if o == nil || IsNil(o.UptieringFileAge) {
		return nil, false
	}
	return o.UptieringFileAge, true
}

// HasUptieringFileAge returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasUptieringFileAge() bool {
	if o != nil && !IsNil(o.UptieringFileAge) {
		return true
	}

	return false
}

// SetUptieringFileAge gets a reference to the given UptieringFileAgePolicy and assigns it to the UptieringFileAge field.
func (o *NasEnvJobParams) SetUptieringFileAge(v UptieringFileAgePolicy) {
	o.UptieringFileAge = &v
}

// GetAutoOrphanDataCleanup returns the AutoOrphanDataCleanup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetAutoOrphanDataCleanup() bool {
	if o == nil || IsNil(o.AutoOrphanDataCleanup.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoOrphanDataCleanup.Get()
}

// GetAutoOrphanDataCleanupOk returns a tuple with the AutoOrphanDataCleanup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetAutoOrphanDataCleanupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoOrphanDataCleanup.Get(), o.AutoOrphanDataCleanup.IsSet()
}

// HasAutoOrphanDataCleanup returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasAutoOrphanDataCleanup() bool {
	if o != nil && o.AutoOrphanDataCleanup.IsSet() {
		return true
	}

	return false
}

// SetAutoOrphanDataCleanup gets a reference to the given NullableBool and assigns it to the AutoOrphanDataCleanup field.
func (o *NasEnvJobParams) SetAutoOrphanDataCleanup(v bool) {
	o.AutoOrphanDataCleanup.Set(&v)
}
// SetAutoOrphanDataCleanupNil sets the value for AutoOrphanDataCleanup to be an explicit nil
func (o *NasEnvJobParams) SetAutoOrphanDataCleanupNil() {
	o.AutoOrphanDataCleanup.Set(nil)
}

// UnsetAutoOrphanDataCleanup ensures that no value is present for AutoOrphanDataCleanup, not even an explicit nil
func (o *NasEnvJobParams) UnsetAutoOrphanDataCleanup() {
	o.AutoOrphanDataCleanup.Unset()
}

// GetDowntieringFileAge returns the DowntieringFileAge field value if set, zero value otherwise.
func (o *NasEnvJobParams) GetDowntieringFileAge() DowntieringFileAgePolicy {
	if o == nil || IsNil(o.DowntieringFileAge) {
		var ret DowntieringFileAgePolicy
		return ret
	}
	return *o.DowntieringFileAge
}

// GetDowntieringFileAgeOk returns a tuple with the DowntieringFileAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasEnvJobParams) GetDowntieringFileAgeOk() (*DowntieringFileAgePolicy, bool) {
	if o == nil || IsNil(o.DowntieringFileAge) {
		return nil, false
	}
	return o.DowntieringFileAge, true
}

// HasDowntieringFileAge returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasDowntieringFileAge() bool {
	if o != nil && !IsNil(o.DowntieringFileAge) {
		return true
	}

	return false
}

// SetDowntieringFileAge gets a reference to the given DowntieringFileAgePolicy and assigns it to the DowntieringFileAge field.
func (o *NasEnvJobParams) SetDowntieringFileAge(v DowntieringFileAgePolicy) {
	o.DowntieringFileAge = &v
}

// GetSkipBackSymlink returns the SkipBackSymlink field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetSkipBackSymlink() bool {
	if o == nil || IsNil(o.SkipBackSymlink.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipBackSymlink.Get()
}

// GetSkipBackSymlinkOk returns a tuple with the SkipBackSymlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetSkipBackSymlinkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipBackSymlink.Get(), o.SkipBackSymlink.IsSet()
}

// HasSkipBackSymlink returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasSkipBackSymlink() bool {
	if o != nil && o.SkipBackSymlink.IsSet() {
		return true
	}

	return false
}

// SetSkipBackSymlink gets a reference to the given NullableBool and assigns it to the SkipBackSymlink field.
func (o *NasEnvJobParams) SetSkipBackSymlink(v bool) {
	o.SkipBackSymlink.Set(&v)
}
// SetSkipBackSymlinkNil sets the value for SkipBackSymlink to be an explicit nil
func (o *NasEnvJobParams) SetSkipBackSymlinkNil() {
	o.SkipBackSymlink.Set(nil)
}

// UnsetSkipBackSymlink ensures that no value is present for SkipBackSymlink, not even an explicit nil
func (o *NasEnvJobParams) UnsetSkipBackSymlink() {
	o.SkipBackSymlink.Unset()
}

// GetBackupExistingSnapshot returns the BackupExistingSnapshot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetBackupExistingSnapshot() bool {
	if o == nil || IsNil(o.BackupExistingSnapshot.Get()) {
		var ret bool
		return ret
	}
	return *o.BackupExistingSnapshot.Get()
}

// GetBackupExistingSnapshotOk returns a tuple with the BackupExistingSnapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetBackupExistingSnapshotOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupExistingSnapshot.Get(), o.BackupExistingSnapshot.IsSet()
}

// HasBackupExistingSnapshot returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasBackupExistingSnapshot() bool {
	if o != nil && o.BackupExistingSnapshot.IsSet() {
		return true
	}

	return false
}

// SetBackupExistingSnapshot gets a reference to the given NullableBool and assigns it to the BackupExistingSnapshot field.
func (o *NasEnvJobParams) SetBackupExistingSnapshot(v bool) {
	o.BackupExistingSnapshot.Set(&v)
}
// SetBackupExistingSnapshotNil sets the value for BackupExistingSnapshot to be an explicit nil
func (o *NasEnvJobParams) SetBackupExistingSnapshotNil() {
	o.BackupExistingSnapshot.Set(nil)
}

// UnsetBackupExistingSnapshot ensures that no value is present for BackupExistingSnapshot, not even an explicit nil
func (o *NasEnvJobParams) UnsetBackupExistingSnapshot() {
	o.BackupExistingSnapshot.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetContinueOnError() bool {
	if o == nil || IsNil(o.ContinueOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *NasEnvJobParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *NasEnvJobParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *NasEnvJobParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetEnableFasterIncrementalBackups returns the EnableFasterIncrementalBackups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetEnableFasterIncrementalBackups() bool {
	if o == nil || IsNil(o.EnableFasterIncrementalBackups.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableFasterIncrementalBackups.Get()
}

// GetEnableFasterIncrementalBackupsOk returns a tuple with the EnableFasterIncrementalBackups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetEnableFasterIncrementalBackupsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableFasterIncrementalBackups.Get(), o.EnableFasterIncrementalBackups.IsSet()
}

// HasEnableFasterIncrementalBackups returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasEnableFasterIncrementalBackups() bool {
	if o != nil && o.EnableFasterIncrementalBackups.IsSet() {
		return true
	}

	return false
}

// SetEnableFasterIncrementalBackups gets a reference to the given NullableBool and assigns it to the EnableFasterIncrementalBackups field.
func (o *NasEnvJobParams) SetEnableFasterIncrementalBackups(v bool) {
	o.EnableFasterIncrementalBackups.Set(&v)
}
// SetEnableFasterIncrementalBackupsNil sets the value for EnableFasterIncrementalBackups to be an explicit nil
func (o *NasEnvJobParams) SetEnableFasterIncrementalBackupsNil() {
	o.EnableFasterIncrementalBackups.Set(nil)
}

// UnsetEnableFasterIncrementalBackups ensures that no value is present for EnableFasterIncrementalBackups, not even an explicit nil
func (o *NasEnvJobParams) UnsetEnableFasterIncrementalBackups() {
	o.EnableFasterIncrementalBackups.Unset()
}

// GetEncryptionEnabled returns the EncryptionEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetEncryptionEnabled() bool {
	if o == nil || IsNil(o.EncryptionEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.EncryptionEnabled.Get()
}

// GetEncryptionEnabledOk returns a tuple with the EncryptionEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetEncryptionEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionEnabled.Get(), o.EncryptionEnabled.IsSet()
}

// HasEncryptionEnabled returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasEncryptionEnabled() bool {
	if o != nil && o.EncryptionEnabled.IsSet() {
		return true
	}

	return false
}

// SetEncryptionEnabled gets a reference to the given NullableBool and assigns it to the EncryptionEnabled field.
func (o *NasEnvJobParams) SetEncryptionEnabled(v bool) {
	o.EncryptionEnabled.Set(&v)
}
// SetEncryptionEnabledNil sets the value for EncryptionEnabled to be an explicit nil
func (o *NasEnvJobParams) SetEncryptionEnabledNil() {
	o.EncryptionEnabled.Set(nil)
}

// UnsetEncryptionEnabled ensures that no value is present for EncryptionEnabled, not even an explicit nil
func (o *NasEnvJobParams) UnsetEncryptionEnabled() {
	o.EncryptionEnabled.Unset()
}

// GetFileLockConfig returns the FileLockConfig field value if set, zero value otherwise.
func (o *NasEnvJobParams) GetFileLockConfig() FileLevelDataLockConfig {
	if o == nil || IsNil(o.FileLockConfig) {
		var ret FileLevelDataLockConfig
		return ret
	}
	return *o.FileLockConfig
}

// GetFileLockConfigOk returns a tuple with the FileLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasEnvJobParams) GetFileLockConfigOk() (*FileLevelDataLockConfig, bool) {
	if o == nil || IsNil(o.FileLockConfig) {
		return nil, false
	}
	return o.FileLockConfig, true
}

// HasFileLockConfig returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasFileLockConfig() bool {
	if o != nil && !IsNil(o.FileLockConfig) {
		return true
	}

	return false
}

// SetFileLockConfig gets a reference to the given FileLevelDataLockConfig and assigns it to the FileLockConfig field.
func (o *NasEnvJobParams) SetFileLockConfig(v FileLevelDataLockConfig) {
	o.FileLockConfig = &v
}

// GetFilePathFilters returns the FilePathFilters field value if set, zero value otherwise.
func (o *NasEnvJobParams) GetFilePathFilters() FileFilteringPolicy {
	if o == nil || IsNil(o.FilePathFilters) {
		var ret FileFilteringPolicy
		return ret
	}
	return *o.FilePathFilters
}

// GetFilePathFiltersOk returns a tuple with the FilePathFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasEnvJobParams) GetFilePathFiltersOk() (*FileFilteringPolicy, bool) {
	if o == nil || IsNil(o.FilePathFilters) {
		return nil, false
	}
	return o.FilePathFilters, true
}

// HasFilePathFilters returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasFilePathFilters() bool {
	if o != nil && !IsNil(o.FilePathFilters) {
		return true
	}

	return false
}

// SetFilePathFilters gets a reference to the given FileFilteringPolicy and assigns it to the FilePathFilters field.
func (o *NasEnvJobParams) SetFilePathFilters(v FileFilteringPolicy) {
	o.FilePathFilters = &v
}

// GetFilterIpConfig returns the FilterIpConfig field value if set, zero value otherwise.
func (o *NasEnvJobParams) GetFilterIpConfig() FilterIpConfig {
	if o == nil || IsNil(o.FilterIpConfig) {
		var ret FilterIpConfig
		return ret
	}
	return *o.FilterIpConfig
}

// GetFilterIpConfigOk returns a tuple with the FilterIpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasEnvJobParams) GetFilterIpConfigOk() (*FilterIpConfig, bool) {
	if o == nil || IsNil(o.FilterIpConfig) {
		return nil, false
	}
	return o.FilterIpConfig, true
}

// HasFilterIpConfig returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasFilterIpConfig() bool {
	if o != nil && !IsNil(o.FilterIpConfig) {
		return true
	}

	return false
}

// SetFilterIpConfig gets a reference to the given FilterIpConfig and assigns it to the FilterIpConfig field.
func (o *NasEnvJobParams) SetFilterIpConfig(v FilterIpConfig) {
	o.FilterIpConfig = &v
}

// GetModifySourcePermissions returns the ModifySourcePermissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetModifySourcePermissions() bool {
	if o == nil || IsNil(o.ModifySourcePermissions.Get()) {
		var ret bool
		return ret
	}
	return *o.ModifySourcePermissions.Get()
}

// GetModifySourcePermissionsOk returns a tuple with the ModifySourcePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetModifySourcePermissionsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ModifySourcePermissions.Get(), o.ModifySourcePermissions.IsSet()
}

// HasModifySourcePermissions returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasModifySourcePermissions() bool {
	if o != nil && o.ModifySourcePermissions.IsSet() {
		return true
	}

	return false
}

// SetModifySourcePermissions gets a reference to the given NullableBool and assigns it to the ModifySourcePermissions field.
func (o *NasEnvJobParams) SetModifySourcePermissions(v bool) {
	o.ModifySourcePermissions.Set(&v)
}
// SetModifySourcePermissionsNil sets the value for ModifySourcePermissions to be an explicit nil
func (o *NasEnvJobParams) SetModifySourcePermissionsNil() {
	o.ModifySourcePermissions.Set(nil)
}

// UnsetModifySourcePermissions ensures that no value is present for ModifySourcePermissions, not even an explicit nil
func (o *NasEnvJobParams) UnsetModifySourcePermissions() {
	o.ModifySourcePermissions.Unset()
}

// GetNasProtocol returns the NasProtocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetNasProtocol() string {
	if o == nil || IsNil(o.NasProtocol.Get()) {
		var ret string
		return ret
	}
	return *o.NasProtocol.Get()
}

// GetNasProtocolOk returns a tuple with the NasProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetNasProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NasProtocol.Get(), o.NasProtocol.IsSet()
}

// HasNasProtocol returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasNasProtocol() bool {
	if o != nil && o.NasProtocol.IsSet() {
		return true
	}

	return false
}

// SetNasProtocol gets a reference to the given NullableString and assigns it to the NasProtocol field.
func (o *NasEnvJobParams) SetNasProtocol(v string) {
	o.NasProtocol.Set(&v)
}
// SetNasProtocolNil sets the value for NasProtocol to be an explicit nil
func (o *NasEnvJobParams) SetNasProtocolNil() {
	o.NasProtocol.Set(nil)
}

// UnsetNasProtocol ensures that no value is present for NasProtocol, not even an explicit nil
func (o *NasEnvJobParams) UnsetNasProtocol() {
	o.NasProtocol.Unset()
}

// GetNfsVersionPreference returns the NfsVersionPreference field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetNfsVersionPreference() string {
	if o == nil || IsNil(o.NfsVersionPreference.Get()) {
		var ret string
		return ret
	}
	return *o.NfsVersionPreference.Get()
}

// GetNfsVersionPreferenceOk returns a tuple with the NfsVersionPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetNfsVersionPreferenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NfsVersionPreference.Get(), o.NfsVersionPreference.IsSet()
}

// HasNfsVersionPreference returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasNfsVersionPreference() bool {
	if o != nil && o.NfsVersionPreference.IsSet() {
		return true
	}

	return false
}

// SetNfsVersionPreference gets a reference to the given NullableString and assigns it to the NfsVersionPreference field.
func (o *NasEnvJobParams) SetNfsVersionPreference(v string) {
	o.NfsVersionPreference.Set(&v)
}
// SetNfsVersionPreferenceNil sets the value for NfsVersionPreference to be an explicit nil
func (o *NasEnvJobParams) SetNfsVersionPreferenceNil() {
	o.NfsVersionPreference.Set(nil)
}

// UnsetNfsVersionPreference ensures that no value is present for NfsVersionPreference, not even an explicit nil
func (o *NasEnvJobParams) UnsetNfsVersionPreference() {
	o.NfsVersionPreference.Unset()
}

// GetSnapshotLabel returns the SnapshotLabel field value if set, zero value otherwise.
func (o *NasEnvJobParams) GetSnapshotLabel() SnapshotLabel {
	if o == nil || IsNil(o.SnapshotLabel) {
		var ret SnapshotLabel
		return ret
	}
	return *o.SnapshotLabel
}

// GetSnapshotLabelOk returns a tuple with the SnapshotLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasEnvJobParams) GetSnapshotLabelOk() (*SnapshotLabel, bool) {
	if o == nil || IsNil(o.SnapshotLabel) {
		return nil, false
	}
	return o.SnapshotLabel, true
}

// HasSnapshotLabel returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasSnapshotLabel() bool {
	if o != nil && !IsNil(o.SnapshotLabel) {
		return true
	}

	return false
}

// SetSnapshotLabel gets a reference to the given SnapshotLabel and assigns it to the SnapshotLabel field.
func (o *NasEnvJobParams) SetSnapshotLabel(v SnapshotLabel) {
	o.SnapshotLabel = &v
}

// GetThrottlingConfig returns the ThrottlingConfig field value if set, zero value otherwise.
func (o *NasEnvJobParams) GetThrottlingConfig() NasThrottlingConfig {
	if o == nil || IsNil(o.ThrottlingConfig) {
		var ret NasThrottlingConfig
		return ret
	}
	return *o.ThrottlingConfig
}

// GetThrottlingConfigOk returns a tuple with the ThrottlingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NasEnvJobParams) GetThrottlingConfigOk() (*NasThrottlingConfig, bool) {
	if o == nil || IsNil(o.ThrottlingConfig) {
		return nil, false
	}
	return o.ThrottlingConfig, true
}

// HasThrottlingConfig returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasThrottlingConfig() bool {
	if o != nil && !IsNil(o.ThrottlingConfig) {
		return true
	}

	return false
}

// SetThrottlingConfig gets a reference to the given NasThrottlingConfig and assigns it to the ThrottlingConfig field.
func (o *NasEnvJobParams) SetThrottlingConfig(v NasThrottlingConfig) {
	o.ThrottlingConfig = &v
}

// GetUseChangelist returns the UseChangelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NasEnvJobParams) GetUseChangelist() bool {
	if o == nil || IsNil(o.UseChangelist.Get()) {
		var ret bool
		return ret
	}
	return *o.UseChangelist.Get()
}

// GetUseChangelistOk returns a tuple with the UseChangelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NasEnvJobParams) GetUseChangelistOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseChangelist.Get(), o.UseChangelist.IsSet()
}

// HasUseChangelist returns a boolean if a field has been set.
func (o *NasEnvJobParams) HasUseChangelist() bool {
	if o != nil && o.UseChangelist.IsSet() {
		return true
	}

	return false
}

// SetUseChangelist gets a reference to the given NullableBool and assigns it to the UseChangelist field.
func (o *NasEnvJobParams) SetUseChangelist(v bool) {
	o.UseChangelist.Set(&v)
}
// SetUseChangelistNil sets the value for UseChangelist to be an explicit nil
func (o *NasEnvJobParams) SetUseChangelistNil() {
	o.UseChangelist.Set(nil)
}

// UnsetUseChangelist ensures that no value is present for UseChangelist, not even an explicit nil
func (o *NasEnvJobParams) UnsetUseChangelist() {
	o.UseChangelist.Unset()
}

func (o NasEnvJobParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NasEnvJobParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableAuditLogging.IsSet() {
		toSerialize["enableAuditLogging"] = o.EnableAuditLogging.Get()
	}
	if !IsNil(o.FilePath) {
		toSerialize["filePath"] = o.FilePath
	}
	if !IsNil(o.FileSize) {
		toSerialize["fileSize"] = o.FileSize
	}
	if o.IncludeAllFiles.IsSet() {
		toSerialize["includeAllFiles"] = o.IncludeAllFiles.Get()
	}
	if o.Target.IsSet() {
		toSerialize["target"] = o.Target.Get()
	}
	if !IsNil(o.UptieringFileAge) {
		toSerialize["uptieringFileAge"] = o.UptieringFileAge
	}
	if o.AutoOrphanDataCleanup.IsSet() {
		toSerialize["autoOrphanDataCleanup"] = o.AutoOrphanDataCleanup.Get()
	}
	if !IsNil(o.DowntieringFileAge) {
		toSerialize["downtieringFileAge"] = o.DowntieringFileAge
	}
	if o.SkipBackSymlink.IsSet() {
		toSerialize["skipBackSymlink"] = o.SkipBackSymlink.Get()
	}
	if o.BackupExistingSnapshot.IsSet() {
		toSerialize["backupExistingSnapshot"] = o.BackupExistingSnapshot.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.EnableFasterIncrementalBackups.IsSet() {
		toSerialize["enableFasterIncrementalBackups"] = o.EnableFasterIncrementalBackups.Get()
	}
	if o.EncryptionEnabled.IsSet() {
		toSerialize["encryptionEnabled"] = o.EncryptionEnabled.Get()
	}
	if !IsNil(o.FileLockConfig) {
		toSerialize["fileLockConfig"] = o.FileLockConfig
	}
	if !IsNil(o.FilePathFilters) {
		toSerialize["filePathFilters"] = o.FilePathFilters
	}
	if !IsNil(o.FilterIpConfig) {
		toSerialize["filterIpConfig"] = o.FilterIpConfig
	}
	if o.ModifySourcePermissions.IsSet() {
		toSerialize["modifySourcePermissions"] = o.ModifySourcePermissions.Get()
	}
	if o.NasProtocol.IsSet() {
		toSerialize["nasProtocol"] = o.NasProtocol.Get()
	}
	if o.NfsVersionPreference.IsSet() {
		toSerialize["nfsVersionPreference"] = o.NfsVersionPreference.Get()
	}
	if !IsNil(o.SnapshotLabel) {
		toSerialize["snapshotLabel"] = o.SnapshotLabel
	}
	if !IsNil(o.ThrottlingConfig) {
		toSerialize["throttlingConfig"] = o.ThrottlingConfig
	}
	if o.UseChangelist.IsSet() {
		toSerialize["useChangelist"] = o.UseChangelist.Get()
	}
	return toSerialize, nil
}

type NullableNasEnvJobParams struct {
	value *NasEnvJobParams
	isSet bool
}

func (v NullableNasEnvJobParams) Get() *NasEnvJobParams {
	return v.value
}

func (v *NullableNasEnvJobParams) Set(val *NasEnvJobParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNasEnvJobParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNasEnvJobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNasEnvJobParams(val *NasEnvJobParams) *NullableNasEnvJobParams {
	return &NullableNasEnvJobParams{value: val, isSet: true}
}

func (v NullableNasEnvJobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNasEnvJobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


