/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UdaOSSpecificConfigParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaOSSpecificConfigParams{}

// UdaOSSpecificConfigParams Specifices operating system specific config.
type UdaOSSpecificConfigParams struct {
	// Specifies the basic configuration for the operating system type as a json string.
	IndexConfig NullableString `json:"indexConfig,omitempty"`
	// Name of the operating system.
	OsType *string `json:"osType,omitempty"`
	// Specifies the protection config as json string.
	ProtectionConfig NullableString `json:"protectionConfig,omitempty"`
	// Specifies the recovery config as json string.
	RecoveryConfig NullableString `json:"recoveryConfig,omitempty"`
	// Specifies the registration config as json string.
	RegistrationConfig NullableString `json:"registrationConfig,omitempty"`
}

// NewUdaOSSpecificConfigParams instantiates a new UdaOSSpecificConfigParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaOSSpecificConfigParams() *UdaOSSpecificConfigParams {
	this := UdaOSSpecificConfigParams{}
	return &this
}

// NewUdaOSSpecificConfigParamsWithDefaults instantiates a new UdaOSSpecificConfigParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaOSSpecificConfigParamsWithDefaults() *UdaOSSpecificConfigParams {
	this := UdaOSSpecificConfigParams{}
	return &this
}

// GetIndexConfig returns the IndexConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaOSSpecificConfigParams) GetIndexConfig() string {
	if o == nil || IsNil(o.IndexConfig.Get()) {
		var ret string
		return ret
	}
	return *o.IndexConfig.Get()
}

// GetIndexConfigOk returns a tuple with the IndexConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaOSSpecificConfigParams) GetIndexConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IndexConfig.Get(), o.IndexConfig.IsSet()
}

// HasIndexConfig returns a boolean if a field has been set.
func (o *UdaOSSpecificConfigParams) HasIndexConfig() bool {
	if o != nil && o.IndexConfig.IsSet() {
		return true
	}

	return false
}

// SetIndexConfig gets a reference to the given NullableString and assigns it to the IndexConfig field.
func (o *UdaOSSpecificConfigParams) SetIndexConfig(v string) {
	o.IndexConfig.Set(&v)
}
// SetIndexConfigNil sets the value for IndexConfig to be an explicit nil
func (o *UdaOSSpecificConfigParams) SetIndexConfigNil() {
	o.IndexConfig.Set(nil)
}

// UnsetIndexConfig ensures that no value is present for IndexConfig, not even an explicit nil
func (o *UdaOSSpecificConfigParams) UnsetIndexConfig() {
	o.IndexConfig.Unset()
}

// GetOsType returns the OsType field value if set, zero value otherwise.
func (o *UdaOSSpecificConfigParams) GetOsType() string {
	if o == nil || IsNil(o.OsType) {
		var ret string
		return ret
	}
	return *o.OsType
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdaOSSpecificConfigParams) GetOsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OsType) {
		return nil, false
	}
	return o.OsType, true
}

// HasOsType returns a boolean if a field has been set.
func (o *UdaOSSpecificConfigParams) HasOsType() bool {
	if o != nil && !IsNil(o.OsType) {
		return true
	}

	return false
}

// SetOsType gets a reference to the given string and assigns it to the OsType field.
func (o *UdaOSSpecificConfigParams) SetOsType(v string) {
	o.OsType = &v
}

// GetProtectionConfig returns the ProtectionConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaOSSpecificConfigParams) GetProtectionConfig() string {
	if o == nil || IsNil(o.ProtectionConfig.Get()) {
		var ret string
		return ret
	}
	return *o.ProtectionConfig.Get()
}

// GetProtectionConfigOk returns a tuple with the ProtectionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaOSSpecificConfigParams) GetProtectionConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProtectionConfig.Get(), o.ProtectionConfig.IsSet()
}

// HasProtectionConfig returns a boolean if a field has been set.
func (o *UdaOSSpecificConfigParams) HasProtectionConfig() bool {
	if o != nil && o.ProtectionConfig.IsSet() {
		return true
	}

	return false
}

// SetProtectionConfig gets a reference to the given NullableString and assigns it to the ProtectionConfig field.
func (o *UdaOSSpecificConfigParams) SetProtectionConfig(v string) {
	o.ProtectionConfig.Set(&v)
}
// SetProtectionConfigNil sets the value for ProtectionConfig to be an explicit nil
func (o *UdaOSSpecificConfigParams) SetProtectionConfigNil() {
	o.ProtectionConfig.Set(nil)
}

// UnsetProtectionConfig ensures that no value is present for ProtectionConfig, not even an explicit nil
func (o *UdaOSSpecificConfigParams) UnsetProtectionConfig() {
	o.ProtectionConfig.Unset()
}

// GetRecoveryConfig returns the RecoveryConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaOSSpecificConfigParams) GetRecoveryConfig() string {
	if o == nil || IsNil(o.RecoveryConfig.Get()) {
		var ret string
		return ret
	}
	return *o.RecoveryConfig.Get()
}

// GetRecoveryConfigOk returns a tuple with the RecoveryConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaOSSpecificConfigParams) GetRecoveryConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoveryConfig.Get(), o.RecoveryConfig.IsSet()
}

// HasRecoveryConfig returns a boolean if a field has been set.
func (o *UdaOSSpecificConfigParams) HasRecoveryConfig() bool {
	if o != nil && o.RecoveryConfig.IsSet() {
		return true
	}

	return false
}

// SetRecoveryConfig gets a reference to the given NullableString and assigns it to the RecoveryConfig field.
func (o *UdaOSSpecificConfigParams) SetRecoveryConfig(v string) {
	o.RecoveryConfig.Set(&v)
}
// SetRecoveryConfigNil sets the value for RecoveryConfig to be an explicit nil
func (o *UdaOSSpecificConfigParams) SetRecoveryConfigNil() {
	o.RecoveryConfig.Set(nil)
}

// UnsetRecoveryConfig ensures that no value is present for RecoveryConfig, not even an explicit nil
func (o *UdaOSSpecificConfigParams) UnsetRecoveryConfig() {
	o.RecoveryConfig.Unset()
}

// GetRegistrationConfig returns the RegistrationConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaOSSpecificConfigParams) GetRegistrationConfig() string {
	if o == nil || IsNil(o.RegistrationConfig.Get()) {
		var ret string
		return ret
	}
	return *o.RegistrationConfig.Get()
}

// GetRegistrationConfigOk returns a tuple with the RegistrationConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaOSSpecificConfigParams) GetRegistrationConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RegistrationConfig.Get(), o.RegistrationConfig.IsSet()
}

// HasRegistrationConfig returns a boolean if a field has been set.
func (o *UdaOSSpecificConfigParams) HasRegistrationConfig() bool {
	if o != nil && o.RegistrationConfig.IsSet() {
		return true
	}

	return false
}

// SetRegistrationConfig gets a reference to the given NullableString and assigns it to the RegistrationConfig field.
func (o *UdaOSSpecificConfigParams) SetRegistrationConfig(v string) {
	o.RegistrationConfig.Set(&v)
}
// SetRegistrationConfigNil sets the value for RegistrationConfig to be an explicit nil
func (o *UdaOSSpecificConfigParams) SetRegistrationConfigNil() {
	o.RegistrationConfig.Set(nil)
}

// UnsetRegistrationConfig ensures that no value is present for RegistrationConfig, not even an explicit nil
func (o *UdaOSSpecificConfigParams) UnsetRegistrationConfig() {
	o.RegistrationConfig.Unset()
}

func (o UdaOSSpecificConfigParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaOSSpecificConfigParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IndexConfig.IsSet() {
		toSerialize["indexConfig"] = o.IndexConfig.Get()
	}
	if !IsNil(o.OsType) {
		toSerialize["osType"] = o.OsType
	}
	if o.ProtectionConfig.IsSet() {
		toSerialize["protectionConfig"] = o.ProtectionConfig.Get()
	}
	if o.RecoveryConfig.IsSet() {
		toSerialize["recoveryConfig"] = o.RecoveryConfig.Get()
	}
	if o.RegistrationConfig.IsSet() {
		toSerialize["registrationConfig"] = o.RegistrationConfig.Get()
	}
	return toSerialize, nil
}

type NullableUdaOSSpecificConfigParams struct {
	value *UdaOSSpecificConfigParams
	isSet bool
}

func (v NullableUdaOSSpecificConfigParams) Get() *UdaOSSpecificConfigParams {
	return v.value
}

func (v *NullableUdaOSSpecificConfigParams) Set(val *UdaOSSpecificConfigParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaOSSpecificConfigParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaOSSpecificConfigParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaOSSpecificConfigParams(val *UdaOSSpecificConfigParams) *NullableUdaOSSpecificConfigParams {
	return &NullableUdaOSSpecificConfigParams{value: val, isSet: true}
}

func (v NullableUdaOSSpecificConfigParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaOSSpecificConfigParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


