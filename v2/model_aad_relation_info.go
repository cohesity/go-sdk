/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AadRelationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AadRelationInfo{}

// AadRelationInfo Specifies the information about aad node relation.
type AadRelationInfo struct {
	// Specifies Unique ID of the destination node.
	DestNodeId *string `json:"destNodeId,omitempty"`
	// Specifies the list of node relation attributes provided in key/value pair.
	RelationAttributes []KeyValuePair `json:"relationAttributes,omitempty"`
	// Specified type of the aad node relation.
	RelationType NullableString `json:"relationType,omitempty"`
	// Specifies Unique ID of the source node.
	SrcNodeId *string `json:"srcNodeId,omitempty"`
}

// NewAadRelationInfo instantiates a new AadRelationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAadRelationInfo() *AadRelationInfo {
	this := AadRelationInfo{}
	return &this
}

// NewAadRelationInfoWithDefaults instantiates a new AadRelationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAadRelationInfoWithDefaults() *AadRelationInfo {
	this := AadRelationInfo{}
	return &this
}

// GetDestNodeId returns the DestNodeId field value if set, zero value otherwise.
func (o *AadRelationInfo) GetDestNodeId() string {
	if o == nil || IsNil(o.DestNodeId) {
		var ret string
		return ret
	}
	return *o.DestNodeId
}

// GetDestNodeIdOk returns a tuple with the DestNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AadRelationInfo) GetDestNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.DestNodeId) {
		return nil, false
	}
	return o.DestNodeId, true
}

// HasDestNodeId returns a boolean if a field has been set.
func (o *AadRelationInfo) HasDestNodeId() bool {
	if o != nil && !IsNil(o.DestNodeId) {
		return true
	}

	return false
}

// SetDestNodeId gets a reference to the given string and assigns it to the DestNodeId field.
func (o *AadRelationInfo) SetDestNodeId(v string) {
	o.DestNodeId = &v
}

// GetRelationAttributes returns the RelationAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AadRelationInfo) GetRelationAttributes() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.RelationAttributes
}

// GetRelationAttributesOk returns a tuple with the RelationAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AadRelationInfo) GetRelationAttributesOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.RelationAttributes) {
		return nil, false
	}
	return o.RelationAttributes, true
}

// HasRelationAttributes returns a boolean if a field has been set.
func (o *AadRelationInfo) HasRelationAttributes() bool {
	if o != nil && !IsNil(o.RelationAttributes) {
		return true
	}

	return false
}

// SetRelationAttributes gets a reference to the given []KeyValuePair and assigns it to the RelationAttributes field.
func (o *AadRelationInfo) SetRelationAttributes(v []KeyValuePair) {
	o.RelationAttributes = v
}

// GetRelationType returns the RelationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AadRelationInfo) GetRelationType() string {
	if o == nil || IsNil(o.RelationType.Get()) {
		var ret string
		return ret
	}
	return *o.RelationType.Get()
}

// GetRelationTypeOk returns a tuple with the RelationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AadRelationInfo) GetRelationTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RelationType.Get(), o.RelationType.IsSet()
}

// HasRelationType returns a boolean if a field has been set.
func (o *AadRelationInfo) HasRelationType() bool {
	if o != nil && o.RelationType.IsSet() {
		return true
	}

	return false
}

// SetRelationType gets a reference to the given NullableString and assigns it to the RelationType field.
func (o *AadRelationInfo) SetRelationType(v string) {
	o.RelationType.Set(&v)
}
// SetRelationTypeNil sets the value for RelationType to be an explicit nil
func (o *AadRelationInfo) SetRelationTypeNil() {
	o.RelationType.Set(nil)
}

// UnsetRelationType ensures that no value is present for RelationType, not even an explicit nil
func (o *AadRelationInfo) UnsetRelationType() {
	o.RelationType.Unset()
}

// GetSrcNodeId returns the SrcNodeId field value if set, zero value otherwise.
func (o *AadRelationInfo) GetSrcNodeId() string {
	if o == nil || IsNil(o.SrcNodeId) {
		var ret string
		return ret
	}
	return *o.SrcNodeId
}

// GetSrcNodeIdOk returns a tuple with the SrcNodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AadRelationInfo) GetSrcNodeIdOk() (*string, bool) {
	if o == nil || IsNil(o.SrcNodeId) {
		return nil, false
	}
	return o.SrcNodeId, true
}

// HasSrcNodeId returns a boolean if a field has been set.
func (o *AadRelationInfo) HasSrcNodeId() bool {
	if o != nil && !IsNil(o.SrcNodeId) {
		return true
	}

	return false
}

// SetSrcNodeId gets a reference to the given string and assigns it to the SrcNodeId field.
func (o *AadRelationInfo) SetSrcNodeId(v string) {
	o.SrcNodeId = &v
}

func (o AadRelationInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AadRelationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DestNodeId) {
		toSerialize["destNodeId"] = o.DestNodeId
	}
	if o.RelationAttributes != nil {
		toSerialize["relationAttributes"] = o.RelationAttributes
	}
	if o.RelationType.IsSet() {
		toSerialize["relationType"] = o.RelationType.Get()
	}
	if !IsNil(o.SrcNodeId) {
		toSerialize["srcNodeId"] = o.SrcNodeId
	}
	return toSerialize, nil
}

type NullableAadRelationInfo struct {
	value *AadRelationInfo
	isSet bool
}

func (v NullableAadRelationInfo) Get() *AadRelationInfo {
	return v.value
}

func (v *NullableAadRelationInfo) Set(val *AadRelationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAadRelationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAadRelationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAadRelationInfo(val *AadRelationInfo) *NullableAadRelationInfo {
	return &NullableAadRelationInfo{value: val, isSet: true}
}

func (v NullableAadRelationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAadRelationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


