/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverHyperVParamsRecoverFileAndFolderParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverHyperVParamsRecoverFileAndFolderParams{}

// RecoverHyperVParamsRecoverFileAndFolderParams Specifies the parameters to recover files and folders.
type RecoverHyperVParamsRecoverFileAndFolderParams struct {
	// Specifies the info about the files and folders to be recovered.
	FilesAndFolders []CommonRecoverFileAndFolderInfo `json:"filesAndFolders"`
	HypervTargetParams NullableRecoverHyperVFileAndFolderParamsHypervTargetParams `json:"hypervTargetParams,omitempty"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
}

type _RecoverHyperVParamsRecoverFileAndFolderParams RecoverHyperVParamsRecoverFileAndFolderParams

// NewRecoverHyperVParamsRecoverFileAndFolderParams instantiates a new RecoverHyperVParamsRecoverFileAndFolderParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverHyperVParamsRecoverFileAndFolderParams(filesAndFolders []CommonRecoverFileAndFolderInfo, targetEnvironment string) *RecoverHyperVParamsRecoverFileAndFolderParams {
	this := RecoverHyperVParamsRecoverFileAndFolderParams{}
	this.FilesAndFolders = filesAndFolders
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverHyperVParamsRecoverFileAndFolderParamsWithDefaults instantiates a new RecoverHyperVParamsRecoverFileAndFolderParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverHyperVParamsRecoverFileAndFolderParamsWithDefaults() *RecoverHyperVParamsRecoverFileAndFolderParams {
	this := RecoverHyperVParamsRecoverFileAndFolderParams{}
	return &this
}

// GetFilesAndFolders returns the FilesAndFolders field value
// If the value is explicit nil, the zero value for []CommonRecoverFileAndFolderInfo will be returned
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) GetFilesAndFolders() []CommonRecoverFileAndFolderInfo {
	if o == nil {
		var ret []CommonRecoverFileAndFolderInfo
		return ret
	}

	return o.FilesAndFolders
}

// GetFilesAndFoldersOk returns a tuple with the FilesAndFolders field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) GetFilesAndFoldersOk() ([]CommonRecoverFileAndFolderInfo, bool) {
	if o == nil || IsNil(o.FilesAndFolders) {
		return nil, false
	}
	return o.FilesAndFolders, true
}

// SetFilesAndFolders sets field value
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) SetFilesAndFolders(v []CommonRecoverFileAndFolderInfo) {
	o.FilesAndFolders = v
}

// GetHypervTargetParams returns the HypervTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) GetHypervTargetParams() RecoverHyperVFileAndFolderParamsHypervTargetParams {
	if o == nil || IsNil(o.HypervTargetParams.Get()) {
		var ret RecoverHyperVFileAndFolderParamsHypervTargetParams
		return ret
	}
	return *o.HypervTargetParams.Get()
}

// GetHypervTargetParamsOk returns a tuple with the HypervTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) GetHypervTargetParamsOk() (*RecoverHyperVFileAndFolderParamsHypervTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.HypervTargetParams.Get(), o.HypervTargetParams.IsSet()
}

// HasHypervTargetParams returns a boolean if a field has been set.
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) HasHypervTargetParams() bool {
	if o != nil && o.HypervTargetParams.IsSet() {
		return true
	}

	return false
}

// SetHypervTargetParams gets a reference to the given NullableRecoverHyperVFileAndFolderParamsHypervTargetParams and assigns it to the HypervTargetParams field.
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) SetHypervTargetParams(v RecoverHyperVFileAndFolderParamsHypervTargetParams) {
	o.HypervTargetParams.Set(&v)
}
// SetHypervTargetParamsNil sets the value for HypervTargetParams to be an explicit nil
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) SetHypervTargetParamsNil() {
	o.HypervTargetParams.Set(nil)
}

// UnsetHypervTargetParams ensures that no value is present for HypervTargetParams, not even an explicit nil
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) UnsetHypervTargetParams() {
	o.HypervTargetParams.Unset()
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverHyperVParamsRecoverFileAndFolderParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

func (o RecoverHyperVParamsRecoverFileAndFolderParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverHyperVParamsRecoverFileAndFolderParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesAndFolders != nil {
		toSerialize["filesAndFolders"] = o.FilesAndFolders
	}
	if o.HypervTargetParams.IsSet() {
		toSerialize["hypervTargetParams"] = o.HypervTargetParams.Get()
	}
	toSerialize["targetEnvironment"] = o.TargetEnvironment
	return toSerialize, nil
}

func (o *RecoverHyperVParamsRecoverFileAndFolderParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"filesAndFolders",
		"targetEnvironment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverHyperVParamsRecoverFileAndFolderParams := _RecoverHyperVParamsRecoverFileAndFolderParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverHyperVParamsRecoverFileAndFolderParams)

	if err != nil {
		return err
	}

	*o = RecoverHyperVParamsRecoverFileAndFolderParams(varRecoverHyperVParamsRecoverFileAndFolderParams)

	return err
}

type NullableRecoverHyperVParamsRecoverFileAndFolderParams struct {
	value *RecoverHyperVParamsRecoverFileAndFolderParams
	isSet bool
}

func (v NullableRecoverHyperVParamsRecoverFileAndFolderParams) Get() *RecoverHyperVParamsRecoverFileAndFolderParams {
	return v.value
}

func (v *NullableRecoverHyperVParamsRecoverFileAndFolderParams) Set(val *RecoverHyperVParamsRecoverFileAndFolderParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverHyperVParamsRecoverFileAndFolderParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverHyperVParamsRecoverFileAndFolderParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverHyperVParamsRecoverFileAndFolderParams(val *RecoverHyperVParamsRecoverFileAndFolderParams) *NullableRecoverHyperVParamsRecoverFileAndFolderParams {
	return &NullableRecoverHyperVParamsRecoverFileAndFolderParams{value: val, isSet: true}
}

func (v NullableRecoverHyperVParamsRecoverFileAndFolderParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverHyperVParamsRecoverFileAndFolderParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


