/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SitesDiscoveryParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SitesDiscoveryParams{}

// SitesDiscoveryParams Specifies discovery params for SharePoint Site entities. It should only be populated if the 'DiscoveryParams.discoverableObjectTypeList' includes 'kSites' otherwise this will be ignored.
type SitesDiscoveryParams struct {
	// Specifies whether the SHarePoint Sites will be tagged whether they belong to a group site or teams site.
	EnableSiteTagging NullableBool `json:"enableSiteTagging,omitempty"`
}

// NewSitesDiscoveryParams instantiates a new SitesDiscoveryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSitesDiscoveryParams() *SitesDiscoveryParams {
	this := SitesDiscoveryParams{}
	return &this
}

// NewSitesDiscoveryParamsWithDefaults instantiates a new SitesDiscoveryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSitesDiscoveryParamsWithDefaults() *SitesDiscoveryParams {
	this := SitesDiscoveryParams{}
	return &this
}

// GetEnableSiteTagging returns the EnableSiteTagging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SitesDiscoveryParams) GetEnableSiteTagging() bool {
	if o == nil || IsNil(o.EnableSiteTagging.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSiteTagging.Get()
}

// GetEnableSiteTaggingOk returns a tuple with the EnableSiteTagging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SitesDiscoveryParams) GetEnableSiteTaggingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSiteTagging.Get(), o.EnableSiteTagging.IsSet()
}

// HasEnableSiteTagging returns a boolean if a field has been set.
func (o *SitesDiscoveryParams) HasEnableSiteTagging() bool {
	if o != nil && o.EnableSiteTagging.IsSet() {
		return true
	}

	return false
}

// SetEnableSiteTagging gets a reference to the given NullableBool and assigns it to the EnableSiteTagging field.
func (o *SitesDiscoveryParams) SetEnableSiteTagging(v bool) {
	o.EnableSiteTagging.Set(&v)
}
// SetEnableSiteTaggingNil sets the value for EnableSiteTagging to be an explicit nil
func (o *SitesDiscoveryParams) SetEnableSiteTaggingNil() {
	o.EnableSiteTagging.Set(nil)
}

// UnsetEnableSiteTagging ensures that no value is present for EnableSiteTagging, not even an explicit nil
func (o *SitesDiscoveryParams) UnsetEnableSiteTagging() {
	o.EnableSiteTagging.Unset()
}

func (o SitesDiscoveryParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SitesDiscoveryParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableSiteTagging.IsSet() {
		toSerialize["enableSiteTagging"] = o.EnableSiteTagging.Get()
	}
	return toSerialize, nil
}

type NullableSitesDiscoveryParams struct {
	value *SitesDiscoveryParams
	isSet bool
}

func (v NullableSitesDiscoveryParams) Get() *SitesDiscoveryParams {
	return v.value
}

func (v *NullableSitesDiscoveryParams) Set(val *SitesDiscoveryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSitesDiscoveryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSitesDiscoveryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSitesDiscoveryParams(val *SitesDiscoveryParams) *NullableSitesDiscoveryParams {
	return &NullableSitesDiscoveryParams{value: val, isSet: true}
}

func (v NullableSitesDiscoveryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSitesDiscoveryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


