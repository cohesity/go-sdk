/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RemoteDisks type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteDisks{}

// RemoteDisks Specifies a list of remote disks.
type RemoteDisks struct {
	// Specifies a list of remote disks.
	RemoteDisks []RemoteDisk `json:"remoteDisks,omitempty"`
}

// NewRemoteDisks instantiates a new RemoteDisks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteDisks() *RemoteDisks {
	this := RemoteDisks{}
	return &this
}

// NewRemoteDisksWithDefaults instantiates a new RemoteDisks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteDisksWithDefaults() *RemoteDisks {
	this := RemoteDisks{}
	return &this
}

// GetRemoteDisks returns the RemoteDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteDisks) GetRemoteDisks() []RemoteDisk {
	if o == nil {
		var ret []RemoteDisk
		return ret
	}
	return o.RemoteDisks
}

// GetRemoteDisksOk returns a tuple with the RemoteDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteDisks) GetRemoteDisksOk() ([]RemoteDisk, bool) {
	if o == nil || IsNil(o.RemoteDisks) {
		return nil, false
	}
	return o.RemoteDisks, true
}

// HasRemoteDisks returns a boolean if a field has been set.
func (o *RemoteDisks) HasRemoteDisks() bool {
	if o != nil && !IsNil(o.RemoteDisks) {
		return true
	}

	return false
}

// SetRemoteDisks gets a reference to the given []RemoteDisk and assigns it to the RemoteDisks field.
func (o *RemoteDisks) SetRemoteDisks(v []RemoteDisk) {
	o.RemoteDisks = v
}

func (o RemoteDisks) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteDisks) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RemoteDisks != nil {
		toSerialize["remoteDisks"] = o.RemoteDisks
	}
	return toSerialize, nil
}

type NullableRemoteDisks struct {
	value *RemoteDisks
	isSet bool
}

func (v NullableRemoteDisks) Get() *RemoteDisks {
	return v.value
}

func (v *NullableRemoteDisks) Set(val *RemoteDisks) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteDisks) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteDisks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteDisks(val *RemoteDisks) *NullableRemoteDisks {
	return &NullableRemoteDisks{value: val, isSet: true}
}

func (v NullableRemoteDisks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteDisks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


