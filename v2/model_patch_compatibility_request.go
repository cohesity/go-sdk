/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PatchCompatibilityRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchCompatibilityRequest{}

// PatchCompatibilityRequest Specifies the request to check patch compatibility.
type PatchCompatibilityRequest struct {
	// Specifies patch compatibility check is required for apply or revert patch.
	Action string `json:"action"`
	// Specifies the current version.
	CurrentVersion NullableString `json:"currentVersion"`
	// Specifies the target version.
	TargetVersion NullableString `json:"targetVersion"`
}

type _PatchCompatibilityRequest PatchCompatibilityRequest

// NewPatchCompatibilityRequest instantiates a new PatchCompatibilityRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchCompatibilityRequest(action string, currentVersion NullableString, targetVersion NullableString) *PatchCompatibilityRequest {
	this := PatchCompatibilityRequest{}
	this.Action = action
	this.CurrentVersion = currentVersion
	this.TargetVersion = targetVersion
	return &this
}

// NewPatchCompatibilityRequestWithDefaults instantiates a new PatchCompatibilityRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchCompatibilityRequestWithDefaults() *PatchCompatibilityRequest {
	this := PatchCompatibilityRequest{}
	return &this
}

// GetAction returns the Action field value
func (o *PatchCompatibilityRequest) GetAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Action
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
func (o *PatchCompatibilityRequest) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Action, true
}

// SetAction sets field value
func (o *PatchCompatibilityRequest) SetAction(v string) {
	o.Action = v
}

// GetCurrentVersion returns the CurrentVersion field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PatchCompatibilityRequest) GetCurrentVersion() string {
	if o == nil || o.CurrentVersion.Get() == nil {
		var ret string
		return ret
	}

	return *o.CurrentVersion.Get()
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchCompatibilityRequest) GetCurrentVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentVersion.Get(), o.CurrentVersion.IsSet()
}

// SetCurrentVersion sets field value
func (o *PatchCompatibilityRequest) SetCurrentVersion(v string) {
	o.CurrentVersion.Set(&v)
}

// GetTargetVersion returns the TargetVersion field value
// If the value is explicit nil, the zero value for string will be returned
func (o *PatchCompatibilityRequest) GetTargetVersion() string {
	if o == nil || o.TargetVersion.Get() == nil {
		var ret string
		return ret
	}

	return *o.TargetVersion.Get()
}

// GetTargetVersionOk returns a tuple with the TargetVersion field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchCompatibilityRequest) GetTargetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetVersion.Get(), o.TargetVersion.IsSet()
}

// SetTargetVersion sets field value
func (o *PatchCompatibilityRequest) SetTargetVersion(v string) {
	o.TargetVersion.Set(&v)
}

func (o PatchCompatibilityRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchCompatibilityRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action
	toSerialize["currentVersion"] = o.CurrentVersion.Get()
	toSerialize["targetVersion"] = o.TargetVersion.Get()
	return toSerialize, nil
}

func (o *PatchCompatibilityRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"currentVersion",
		"targetVersion",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPatchCompatibilityRequest := _PatchCompatibilityRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPatchCompatibilityRequest)

	if err != nil {
		return err
	}

	*o = PatchCompatibilityRequest(varPatchCompatibilityRequest)

	return err
}

type NullablePatchCompatibilityRequest struct {
	value *PatchCompatibilityRequest
	isSet bool
}

func (v NullablePatchCompatibilityRequest) Get() *PatchCompatibilityRequest {
	return v.value
}

func (v *NullablePatchCompatibilityRequest) Set(val *PatchCompatibilityRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchCompatibilityRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchCompatibilityRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchCompatibilityRequest(val *PatchCompatibilityRequest) *NullablePatchCompatibilityRequest {
	return &NullablePatchCompatibilityRequest{value: val, isSet: true}
}

func (v NullablePatchCompatibilityRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchCompatibilityRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


