/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ClusterSLAMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterSLAMetadata{}

// ClusterSLAMetadata Specifies the SLA related metadata associated with the cluster.
type ClusterSLAMetadata struct {
	// Specifies the default SLA in minutes at cluster level which will be applied as default across all protection groups. This value is only used by UI to populate the default value.
	DefaultSLA NullableInt32 `json:"defaultSLA,omitempty"`
	// Specifies the minimum SLA in minutes at cluster level which will be validated against all protection groups SLA configuration. If the provided SLA at protection group creation or update is less than this value then protection group request will be invalidated.
	MinimumSLA NullableInt32 `json:"minimumSLA,omitempty"`
}

// NewClusterSLAMetadata instantiates a new ClusterSLAMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterSLAMetadata() *ClusterSLAMetadata {
	this := ClusterSLAMetadata{}
	return &this
}

// NewClusterSLAMetadataWithDefaults instantiates a new ClusterSLAMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterSLAMetadataWithDefaults() *ClusterSLAMetadata {
	this := ClusterSLAMetadata{}
	return &this
}

// GetDefaultSLA returns the DefaultSLA field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterSLAMetadata) GetDefaultSLA() int32 {
	if o == nil || IsNil(o.DefaultSLA.Get()) {
		var ret int32
		return ret
	}
	return *o.DefaultSLA.Get()
}

// GetDefaultSLAOk returns a tuple with the DefaultSLA field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterSLAMetadata) GetDefaultSLAOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultSLA.Get(), o.DefaultSLA.IsSet()
}

// HasDefaultSLA returns a boolean if a field has been set.
func (o *ClusterSLAMetadata) HasDefaultSLA() bool {
	if o != nil && o.DefaultSLA.IsSet() {
		return true
	}

	return false
}

// SetDefaultSLA gets a reference to the given NullableInt32 and assigns it to the DefaultSLA field.
func (o *ClusterSLAMetadata) SetDefaultSLA(v int32) {
	o.DefaultSLA.Set(&v)
}
// SetDefaultSLANil sets the value for DefaultSLA to be an explicit nil
func (o *ClusterSLAMetadata) SetDefaultSLANil() {
	o.DefaultSLA.Set(nil)
}

// UnsetDefaultSLA ensures that no value is present for DefaultSLA, not even an explicit nil
func (o *ClusterSLAMetadata) UnsetDefaultSLA() {
	o.DefaultSLA.Unset()
}

// GetMinimumSLA returns the MinimumSLA field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterSLAMetadata) GetMinimumSLA() int32 {
	if o == nil || IsNil(o.MinimumSLA.Get()) {
		var ret int32
		return ret
	}
	return *o.MinimumSLA.Get()
}

// GetMinimumSLAOk returns a tuple with the MinimumSLA field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterSLAMetadata) GetMinimumSLAOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinimumSLA.Get(), o.MinimumSLA.IsSet()
}

// HasMinimumSLA returns a boolean if a field has been set.
func (o *ClusterSLAMetadata) HasMinimumSLA() bool {
	if o != nil && o.MinimumSLA.IsSet() {
		return true
	}

	return false
}

// SetMinimumSLA gets a reference to the given NullableInt32 and assigns it to the MinimumSLA field.
func (o *ClusterSLAMetadata) SetMinimumSLA(v int32) {
	o.MinimumSLA.Set(&v)
}
// SetMinimumSLANil sets the value for MinimumSLA to be an explicit nil
func (o *ClusterSLAMetadata) SetMinimumSLANil() {
	o.MinimumSLA.Set(nil)
}

// UnsetMinimumSLA ensures that no value is present for MinimumSLA, not even an explicit nil
func (o *ClusterSLAMetadata) UnsetMinimumSLA() {
	o.MinimumSLA.Unset()
}

func (o ClusterSLAMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterSLAMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultSLA.IsSet() {
		toSerialize["defaultSLA"] = o.DefaultSLA.Get()
	}
	if o.MinimumSLA.IsSet() {
		toSerialize["minimumSLA"] = o.MinimumSLA.Get()
	}
	return toSerialize, nil
}

type NullableClusterSLAMetadata struct {
	value *ClusterSLAMetadata
	isSet bool
}

func (v NullableClusterSLAMetadata) Get() *ClusterSLAMetadata {
	return v.value
}

func (v *NullableClusterSLAMetadata) Set(val *ClusterSLAMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterSLAMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterSLAMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterSLAMetadata(val *ClusterSLAMetadata) *NullableClusterSLAMetadata {
	return &NullableClusterSLAMetadata{value: val, isSet: true}
}

func (v NullableClusterSLAMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterSLAMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


