/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the HdfsSourceRegistrationUpdateParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HdfsSourceRegistrationUpdateParams{}

// HdfsSourceRegistrationUpdateParams Specifies parameters to update the registeration of an HDFS source.
type HdfsSourceRegistrationUpdateParams struct {
	// The directory containing the core-site.xml and hdfs-site.xml configuration files.
	ConfigurationDirectory NullableString `json:"configurationDirectory,omitempty"`
	// HDFS Connection Type.
	ConnectionType NullableString `json:"connectionType,omitempty"`
	// IP or hostname of any host from which the HDFS configuration files core-site.xml and hdfs-site.xml can be read.
	Host NullableString `json:"host,omitempty"`
	// The kerberos principal to be used to connect to this HDFS source.
	KerberosPrincipal NullableString `json:"kerberosPrincipal,omitempty"`
	SshPasswordCredentials NullableHbaseSourceRegistrationParamsAllOfSshPasswordCredentials `json:"sshPasswordCredentials,omitempty"`
	SshPrivateKeyCredentials NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
}

// NewHdfsSourceRegistrationUpdateParams instantiates a new HdfsSourceRegistrationUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHdfsSourceRegistrationUpdateParams() *HdfsSourceRegistrationUpdateParams {
	this := HdfsSourceRegistrationUpdateParams{}
	return &this
}

// NewHdfsSourceRegistrationUpdateParamsWithDefaults instantiates a new HdfsSourceRegistrationUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHdfsSourceRegistrationUpdateParamsWithDefaults() *HdfsSourceRegistrationUpdateParams {
	this := HdfsSourceRegistrationUpdateParams{}
	return &this
}

// GetConfigurationDirectory returns the ConfigurationDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationUpdateParams) GetConfigurationDirectory() string {
	if o == nil || IsNil(o.ConfigurationDirectory.Get()) {
		var ret string
		return ret
	}
	return *o.ConfigurationDirectory.Get()
}

// GetConfigurationDirectoryOk returns a tuple with the ConfigurationDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationUpdateParams) GetConfigurationDirectoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConfigurationDirectory.Get(), o.ConfigurationDirectory.IsSet()
}

// HasConfigurationDirectory returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationUpdateParams) HasConfigurationDirectory() bool {
	if o != nil && o.ConfigurationDirectory.IsSet() {
		return true
	}

	return false
}

// SetConfigurationDirectory gets a reference to the given NullableString and assigns it to the ConfigurationDirectory field.
func (o *HdfsSourceRegistrationUpdateParams) SetConfigurationDirectory(v string) {
	o.ConfigurationDirectory.Set(&v)
}
// SetConfigurationDirectoryNil sets the value for ConfigurationDirectory to be an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) SetConfigurationDirectoryNil() {
	o.ConfigurationDirectory.Set(nil)
}

// UnsetConfigurationDirectory ensures that no value is present for ConfigurationDirectory, not even an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) UnsetConfigurationDirectory() {
	o.ConfigurationDirectory.Unset()
}

// GetConnectionType returns the ConnectionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationUpdateParams) GetConnectionType() string {
	if o == nil || IsNil(o.ConnectionType.Get()) {
		var ret string
		return ret
	}
	return *o.ConnectionType.Get()
}

// GetConnectionTypeOk returns a tuple with the ConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationUpdateParams) GetConnectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionType.Get(), o.ConnectionType.IsSet()
}

// HasConnectionType returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationUpdateParams) HasConnectionType() bool {
	if o != nil && o.ConnectionType.IsSet() {
		return true
	}

	return false
}

// SetConnectionType gets a reference to the given NullableString and assigns it to the ConnectionType field.
func (o *HdfsSourceRegistrationUpdateParams) SetConnectionType(v string) {
	o.ConnectionType.Set(&v)
}
// SetConnectionTypeNil sets the value for ConnectionType to be an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) SetConnectionTypeNil() {
	o.ConnectionType.Set(nil)
}

// UnsetConnectionType ensures that no value is present for ConnectionType, not even an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) UnsetConnectionType() {
	o.ConnectionType.Unset()
}

// GetHost returns the Host field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationUpdateParams) GetHost() string {
	if o == nil || IsNil(o.Host.Get()) {
		var ret string
		return ret
	}
	return *o.Host.Get()
}

// GetHostOk returns a tuple with the Host field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationUpdateParams) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Host.Get(), o.Host.IsSet()
}

// HasHost returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationUpdateParams) HasHost() bool {
	if o != nil && o.Host.IsSet() {
		return true
	}

	return false
}

// SetHost gets a reference to the given NullableString and assigns it to the Host field.
func (o *HdfsSourceRegistrationUpdateParams) SetHost(v string) {
	o.Host.Set(&v)
}
// SetHostNil sets the value for Host to be an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) SetHostNil() {
	o.Host.Set(nil)
}

// UnsetHost ensures that no value is present for Host, not even an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) UnsetHost() {
	o.Host.Unset()
}

// GetKerberosPrincipal returns the KerberosPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationUpdateParams) GetKerberosPrincipal() string {
	if o == nil || IsNil(o.KerberosPrincipal.Get()) {
		var ret string
		return ret
	}
	return *o.KerberosPrincipal.Get()
}

// GetKerberosPrincipalOk returns a tuple with the KerberosPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationUpdateParams) GetKerberosPrincipalOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.KerberosPrincipal.Get(), o.KerberosPrincipal.IsSet()
}

// HasKerberosPrincipal returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationUpdateParams) HasKerberosPrincipal() bool {
	if o != nil && o.KerberosPrincipal.IsSet() {
		return true
	}

	return false
}

// SetKerberosPrincipal gets a reference to the given NullableString and assigns it to the KerberosPrincipal field.
func (o *HdfsSourceRegistrationUpdateParams) SetKerberosPrincipal(v string) {
	o.KerberosPrincipal.Set(&v)
}
// SetKerberosPrincipalNil sets the value for KerberosPrincipal to be an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) SetKerberosPrincipalNil() {
	o.KerberosPrincipal.Set(nil)
}

// UnsetKerberosPrincipal ensures that no value is present for KerberosPrincipal, not even an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) UnsetKerberosPrincipal() {
	o.KerberosPrincipal.Unset()
}

// GetSshPasswordCredentials returns the SshPasswordCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationUpdateParams) GetSshPasswordCredentials() HbaseSourceRegistrationParamsAllOfSshPasswordCredentials {
	if o == nil || IsNil(o.SshPasswordCredentials.Get()) {
		var ret HbaseSourceRegistrationParamsAllOfSshPasswordCredentials
		return ret
	}
	return *o.SshPasswordCredentials.Get()
}

// GetSshPasswordCredentialsOk returns a tuple with the SshPasswordCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationUpdateParams) GetSshPasswordCredentialsOk() (*HbaseSourceRegistrationParamsAllOfSshPasswordCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshPasswordCredentials.Get(), o.SshPasswordCredentials.IsSet()
}

// HasSshPasswordCredentials returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationUpdateParams) HasSshPasswordCredentials() bool {
	if o != nil && o.SshPasswordCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshPasswordCredentials gets a reference to the given NullableHbaseSourceRegistrationParamsAllOfSshPasswordCredentials and assigns it to the SshPasswordCredentials field.
func (o *HdfsSourceRegistrationUpdateParams) SetSshPasswordCredentials(v HbaseSourceRegistrationParamsAllOfSshPasswordCredentials) {
	o.SshPasswordCredentials.Set(&v)
}
// SetSshPasswordCredentialsNil sets the value for SshPasswordCredentials to be an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) SetSshPasswordCredentialsNil() {
	o.SshPasswordCredentials.Set(nil)
}

// UnsetSshPasswordCredentials ensures that no value is present for SshPasswordCredentials, not even an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) UnsetSshPasswordCredentials() {
	o.SshPasswordCredentials.Unset()
}

// GetSshPrivateKeyCredentials returns the SshPrivateKeyCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HdfsSourceRegistrationUpdateParams) GetSshPrivateKeyCredentials() HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials {
	if o == nil || IsNil(o.SshPrivateKeyCredentials.Get()) {
		var ret HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials
		return ret
	}
	return *o.SshPrivateKeyCredentials.Get()
}

// GetSshPrivateKeyCredentialsOk returns a tuple with the SshPrivateKeyCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HdfsSourceRegistrationUpdateParams) GetSshPrivateKeyCredentialsOk() (*HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return o.SshPrivateKeyCredentials.Get(), o.SshPrivateKeyCredentials.IsSet()
}

// HasSshPrivateKeyCredentials returns a boolean if a field has been set.
func (o *HdfsSourceRegistrationUpdateParams) HasSshPrivateKeyCredentials() bool {
	if o != nil && o.SshPrivateKeyCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshPrivateKeyCredentials gets a reference to the given NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials and assigns it to the SshPrivateKeyCredentials field.
func (o *HdfsSourceRegistrationUpdateParams) SetSshPrivateKeyCredentials(v HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) {
	o.SshPrivateKeyCredentials.Set(&v)
}
// SetSshPrivateKeyCredentialsNil sets the value for SshPrivateKeyCredentials to be an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) SetSshPrivateKeyCredentialsNil() {
	o.SshPrivateKeyCredentials.Set(nil)
}

// UnsetSshPrivateKeyCredentials ensures that no value is present for SshPrivateKeyCredentials, not even an explicit nil
func (o *HdfsSourceRegistrationUpdateParams) UnsetSshPrivateKeyCredentials() {
	o.SshPrivateKeyCredentials.Unset()
}

func (o HdfsSourceRegistrationUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HdfsSourceRegistrationUpdateParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ConfigurationDirectory.IsSet() {
		toSerialize["configurationDirectory"] = o.ConfigurationDirectory.Get()
	}
	if o.ConnectionType.IsSet() {
		toSerialize["connectionType"] = o.ConnectionType.Get()
	}
	if o.Host.IsSet() {
		toSerialize["host"] = o.Host.Get()
	}
	if o.KerberosPrincipal.IsSet() {
		toSerialize["kerberosPrincipal"] = o.KerberosPrincipal.Get()
	}
	if o.SshPasswordCredentials.IsSet() {
		toSerialize["sshPasswordCredentials"] = o.SshPasswordCredentials.Get()
	}
	if o.SshPrivateKeyCredentials.IsSet() {
		toSerialize["sshPrivateKeyCredentials"] = o.SshPrivateKeyCredentials.Get()
	}
	return toSerialize, nil
}

type NullableHdfsSourceRegistrationUpdateParams struct {
	value *HdfsSourceRegistrationUpdateParams
	isSet bool
}

func (v NullableHdfsSourceRegistrationUpdateParams) Get() *HdfsSourceRegistrationUpdateParams {
	return v.value
}

func (v *NullableHdfsSourceRegistrationUpdateParams) Set(val *HdfsSourceRegistrationUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHdfsSourceRegistrationUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHdfsSourceRegistrationUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHdfsSourceRegistrationUpdateParams(val *HdfsSourceRegistrationUpdateParams) *NullableHdfsSourceRegistrationUpdateParams {
	return &NullableHdfsSourceRegistrationUpdateParams{value: val, isSet: true}
}

func (v NullableHdfsSourceRegistrationUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHdfsSourceRegistrationUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


