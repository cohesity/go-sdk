/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PhysicalEnvJobParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PhysicalEnvJobParams{}

// PhysicalEnvJobParams Protection Job parameters applicable to 'kPhysical' Environment type. Specifies job parameters applicable for all 'kPhysical' Environment type Protection Sources in a Protection Job.
type PhysicalEnvJobParams struct {
	// Specifies whether to enable CoBMR backup.
	CobmrBackup NullableBool `json:"cobmrBackup,omitempty"`
	FilePathFilters *FileFilteringPolicy `json:"filePathFilters,omitempty"`
	// If true, performs an incremental backup after server restarts. Otherwise a full backup is done. NOTE: This is applicable only to Windows servers. If not set, default value is false.
	IncrementalSnapshotUponRestart NullableBool `json:"incrementalSnapshotUponRestart,omitempty"`
}

// NewPhysicalEnvJobParams instantiates a new PhysicalEnvJobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalEnvJobParams() *PhysicalEnvJobParams {
	this := PhysicalEnvJobParams{}
	return &this
}

// NewPhysicalEnvJobParamsWithDefaults instantiates a new PhysicalEnvJobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalEnvJobParamsWithDefaults() *PhysicalEnvJobParams {
	this := PhysicalEnvJobParams{}
	return &this
}

// GetCobmrBackup returns the CobmrBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalEnvJobParams) GetCobmrBackup() bool {
	if o == nil || IsNil(o.CobmrBackup.Get()) {
		var ret bool
		return ret
	}
	return *o.CobmrBackup.Get()
}

// GetCobmrBackupOk returns a tuple with the CobmrBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalEnvJobParams) GetCobmrBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CobmrBackup.Get(), o.CobmrBackup.IsSet()
}

// HasCobmrBackup returns a boolean if a field has been set.
func (o *PhysicalEnvJobParams) HasCobmrBackup() bool {
	if o != nil && o.CobmrBackup.IsSet() {
		return true
	}

	return false
}

// SetCobmrBackup gets a reference to the given NullableBool and assigns it to the CobmrBackup field.
func (o *PhysicalEnvJobParams) SetCobmrBackup(v bool) {
	o.CobmrBackup.Set(&v)
}
// SetCobmrBackupNil sets the value for CobmrBackup to be an explicit nil
func (o *PhysicalEnvJobParams) SetCobmrBackupNil() {
	o.CobmrBackup.Set(nil)
}

// UnsetCobmrBackup ensures that no value is present for CobmrBackup, not even an explicit nil
func (o *PhysicalEnvJobParams) UnsetCobmrBackup() {
	o.CobmrBackup.Unset()
}

// GetFilePathFilters returns the FilePathFilters field value if set, zero value otherwise.
func (o *PhysicalEnvJobParams) GetFilePathFilters() FileFilteringPolicy {
	if o == nil || IsNil(o.FilePathFilters) {
		var ret FileFilteringPolicy
		return ret
	}
	return *o.FilePathFilters
}

// GetFilePathFiltersOk returns a tuple with the FilePathFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PhysicalEnvJobParams) GetFilePathFiltersOk() (*FileFilteringPolicy, bool) {
	if o == nil || IsNil(o.FilePathFilters) {
		return nil, false
	}
	return o.FilePathFilters, true
}

// HasFilePathFilters returns a boolean if a field has been set.
func (o *PhysicalEnvJobParams) HasFilePathFilters() bool {
	if o != nil && !IsNil(o.FilePathFilters) {
		return true
	}

	return false
}

// SetFilePathFilters gets a reference to the given FileFilteringPolicy and assigns it to the FilePathFilters field.
func (o *PhysicalEnvJobParams) SetFilePathFilters(v FileFilteringPolicy) {
	o.FilePathFilters = &v
}

// GetIncrementalSnapshotUponRestart returns the IncrementalSnapshotUponRestart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalEnvJobParams) GetIncrementalSnapshotUponRestart() bool {
	if o == nil || IsNil(o.IncrementalSnapshotUponRestart.Get()) {
		var ret bool
		return ret
	}
	return *o.IncrementalSnapshotUponRestart.Get()
}

// GetIncrementalSnapshotUponRestartOk returns a tuple with the IncrementalSnapshotUponRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalEnvJobParams) GetIncrementalSnapshotUponRestartOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncrementalSnapshotUponRestart.Get(), o.IncrementalSnapshotUponRestart.IsSet()
}

// HasIncrementalSnapshotUponRestart returns a boolean if a field has been set.
func (o *PhysicalEnvJobParams) HasIncrementalSnapshotUponRestart() bool {
	if o != nil && o.IncrementalSnapshotUponRestart.IsSet() {
		return true
	}

	return false
}

// SetIncrementalSnapshotUponRestart gets a reference to the given NullableBool and assigns it to the IncrementalSnapshotUponRestart field.
func (o *PhysicalEnvJobParams) SetIncrementalSnapshotUponRestart(v bool) {
	o.IncrementalSnapshotUponRestart.Set(&v)
}
// SetIncrementalSnapshotUponRestartNil sets the value for IncrementalSnapshotUponRestart to be an explicit nil
func (o *PhysicalEnvJobParams) SetIncrementalSnapshotUponRestartNil() {
	o.IncrementalSnapshotUponRestart.Set(nil)
}

// UnsetIncrementalSnapshotUponRestart ensures that no value is present for IncrementalSnapshotUponRestart, not even an explicit nil
func (o *PhysicalEnvJobParams) UnsetIncrementalSnapshotUponRestart() {
	o.IncrementalSnapshotUponRestart.Unset()
}

func (o PhysicalEnvJobParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PhysicalEnvJobParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CobmrBackup.IsSet() {
		toSerialize["cobmrBackup"] = o.CobmrBackup.Get()
	}
	if !IsNil(o.FilePathFilters) {
		toSerialize["filePathFilters"] = o.FilePathFilters
	}
	if o.IncrementalSnapshotUponRestart.IsSet() {
		toSerialize["incrementalSnapshotUponRestart"] = o.IncrementalSnapshotUponRestart.Get()
	}
	return toSerialize, nil
}

type NullablePhysicalEnvJobParams struct {
	value *PhysicalEnvJobParams
	isSet bool
}

func (v NullablePhysicalEnvJobParams) Get() *PhysicalEnvJobParams {
	return v.value
}

func (v *NullablePhysicalEnvJobParams) Set(val *PhysicalEnvJobParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalEnvJobParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalEnvJobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalEnvJobParams(val *PhysicalEnvJobParams) *NullablePhysicalEnvJobParams {
	return &NullablePhysicalEnvJobParams{value: val, isSet: true}
}

func (v NullablePhysicalEnvJobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalEnvJobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


