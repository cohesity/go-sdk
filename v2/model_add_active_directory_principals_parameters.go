/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddActiveDirectoryPrincipalsParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddActiveDirectoryPrincipalsParameters{}

// AddActiveDirectoryPrincipalsParameters Specifies the parameters for adding Active Directory users and groups to the Cohesity Cluster. You cannot create users and groups in the default Cohesity domain called 'LOCAL' using this operation.
type AddActiveDirectoryPrincipalsParameters struct {
	// Specifies a description about the user or group.
	Description NullableString `json:"description,omitempty"`
	// Specifies the domain of the Active Directory where the referenced principal is stored.
	DomainName NullableString `json:"domainName" validate:"regexp=^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$"`
	// Specifies the name of the Active Directory principal, that will be referenced by the group or user. The name of the Active Directory principal is used for naming the new group or user on the Cohesity Cluster.
	Name NullableString `json:"name"`
	// Specifies the type of Active Directory principal.<br> 'User' specifies a user object class.<br> 'Group' specifies a group object class.<br> 'ServiceAccount' specifies a service account object class.
	ObjectClass NullableString `json:"objectClass"`
	// Whether the principal is a restricted principal. A restricted principal can only view the objects he has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Specifies the Cohesity roles to associate with this user or group such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for this group or user. For example if the 'joe' user is added form the Active Directory and is associated with the Cohesity 'View' role,'joe' can log in to the Cohesity Dashboard and has a read-only view of the data on the Cohesity Cluster.
	Roles []string `json:"roles,omitempty"`
}

type _AddActiveDirectoryPrincipalsParameters AddActiveDirectoryPrincipalsParameters

// NewAddActiveDirectoryPrincipalsParameters instantiates a new AddActiveDirectoryPrincipalsParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddActiveDirectoryPrincipalsParameters(domainName NullableString, name NullableString, objectClass NullableString) *AddActiveDirectoryPrincipalsParameters {
	this := AddActiveDirectoryPrincipalsParameters{}
	this.DomainName = domainName
	this.Name = name
	this.ObjectClass = objectClass
	return &this
}

// NewAddActiveDirectoryPrincipalsParametersWithDefaults instantiates a new AddActiveDirectoryPrincipalsParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddActiveDirectoryPrincipalsParametersWithDefaults() *AddActiveDirectoryPrincipalsParameters {
	this := AddActiveDirectoryPrincipalsParameters{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddActiveDirectoryPrincipalsParameters) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddActiveDirectoryPrincipalsParameters) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AddActiveDirectoryPrincipalsParameters) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AddActiveDirectoryPrincipalsParameters) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AddActiveDirectoryPrincipalsParameters) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AddActiveDirectoryPrincipalsParameters) UnsetDescription() {
	o.Description.Unset()
}

// GetDomainName returns the DomainName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddActiveDirectoryPrincipalsParameters) GetDomainName() string {
	if o == nil || o.DomainName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DomainName.Get()
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddActiveDirectoryPrincipalsParameters) GetDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomainName.Get(), o.DomainName.IsSet()
}

// SetDomainName sets field value
func (o *AddActiveDirectoryPrincipalsParameters) SetDomainName(v string) {
	o.DomainName.Set(&v)
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddActiveDirectoryPrincipalsParameters) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddActiveDirectoryPrincipalsParameters) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *AddActiveDirectoryPrincipalsParameters) SetName(v string) {
	o.Name.Set(&v)
}

// GetObjectClass returns the ObjectClass field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddActiveDirectoryPrincipalsParameters) GetObjectClass() string {
	if o == nil || o.ObjectClass.Get() == nil {
		var ret string
		return ret
	}

	return *o.ObjectClass.Get()
}

// GetObjectClassOk returns a tuple with the ObjectClass field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddActiveDirectoryPrincipalsParameters) GetObjectClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectClass.Get(), o.ObjectClass.IsSet()
}

// SetObjectClass sets field value
func (o *AddActiveDirectoryPrincipalsParameters) SetObjectClass(v string) {
	o.ObjectClass.Set(&v)
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddActiveDirectoryPrincipalsParameters) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted.Get()) {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddActiveDirectoryPrincipalsParameters) GetRestrictedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *AddActiveDirectoryPrincipalsParameters) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *AddActiveDirectoryPrincipalsParameters) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *AddActiveDirectoryPrincipalsParameters) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *AddActiveDirectoryPrincipalsParameters) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddActiveDirectoryPrincipalsParameters) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddActiveDirectoryPrincipalsParameters) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *AddActiveDirectoryPrincipalsParameters) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *AddActiveDirectoryPrincipalsParameters) SetRoles(v []string) {
	o.Roles = v
}

func (o AddActiveDirectoryPrincipalsParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddActiveDirectoryPrincipalsParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["domainName"] = o.DomainName.Get()
	toSerialize["name"] = o.Name.Get()
	toSerialize["objectClass"] = o.ObjectClass.Get()
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	return toSerialize, nil
}

func (o *AddActiveDirectoryPrincipalsParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domainName",
		"name",
		"objectClass",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddActiveDirectoryPrincipalsParameters := _AddActiveDirectoryPrincipalsParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddActiveDirectoryPrincipalsParameters)

	if err != nil {
		return err
	}

	*o = AddActiveDirectoryPrincipalsParameters(varAddActiveDirectoryPrincipalsParameters)

	return err
}

type NullableAddActiveDirectoryPrincipalsParameters struct {
	value *AddActiveDirectoryPrincipalsParameters
	isSet bool
}

func (v NullableAddActiveDirectoryPrincipalsParameters) Get() *AddActiveDirectoryPrincipalsParameters {
	return v.value
}

func (v *NullableAddActiveDirectoryPrincipalsParameters) Set(val *AddActiveDirectoryPrincipalsParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableAddActiveDirectoryPrincipalsParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableAddActiveDirectoryPrincipalsParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddActiveDirectoryPrincipalsParameters(val *AddActiveDirectoryPrincipalsParameters) *NullableAddActiveDirectoryPrincipalsParameters {
	return &NullableAddActiveDirectoryPrincipalsParameters{value: val, isSet: true}
}

func (v NullableAddActiveDirectoryPrincipalsParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddActiveDirectoryPrincipalsParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


