/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateView{}

// CreateView Specifies the information required for creating a new View w/o required fields.
type CreateView struct {
	// Array of Security Identifiers (SIDs) Specifies the list of security identifiers (SIDs) for the restricted Principals who have access to this View.
	AccessSids []string `json:"accessSids,omitempty"`
	// Specifies if this View can be mounted using the NFS protocol on Windows systems. If true, this View can be NFS mounted on Windows systems.
	AllowMountOnWindows NullableBool `json:"allowMountOnWindows,omitempty"`
	// Specifies the antivirus scan config settings for this View.
	AntivirusScanConfig map[string]interface{} `json:"antivirusScanConfig,omitempty"`
	// Specifies the category of the View.
	Category NullableString `json:"category"`
	// Specifies an optional text description about the View.
	Description NullableString `json:"description,omitempty"`
	// Specifies if Filer Audit Logging is enabled for this view.
	EnableFilerAuditLogging NullableBool `json:"enableFilerAuditLogging,omitempty"`
	// Specifies whether to enable live indexing for the view.
	EnableLiveIndexing NullableBool `json:"enableLiveIndexing,omitempty"`
	// Specifies if metadata accelerator is enabled for this view. Only supported while creating a view.
	EnableMetadataAccelerator NullableBool `json:"enableMetadataAccelerator,omitempty"`
	// Specifies if this view should allow minion or not. If true, this will allow minion.
	EnableMinion NullableBool `json:"enableMinion,omitempty"`
	// Specifies whether to enable offline file caching of the view.
	EnableOfflineCaching NullableBool `json:"enableOfflineCaching,omitempty"`
	// Optional filtering criteria that should be satisfied by all the files created in this view. It does not affect existing files.
	FileExtensionFilter map[string]interface{} `json:"fileExtensionFilter,omitempty"`
	// Optional config that enables file locking for this view. It cannot be disabled during the edit of a view, if it has been enabled during the creation of the view. Also, it cannot be enabled if it was disabled during the creation of the view.
	FileLockConfig map[string]interface{} `json:"fileLockConfig,omitempty"`
	// Specifies the Lifecycle policy of this filer (NFS/SMB) view.
	FilerLifecycleManagement map[string]interface{} `json:"filerLifecycleManagement,omitempty"`
	// Specifies whether the view is for externally triggered backup target. If so, Magneto will ignore the backup schedule for the view protection job of this view. By default it is disabled.
	IsExternallyTriggeredBackupTarget NullableBool `json:"isExternallyTriggeredBackupTarget,omitempty"`
	// Specifies if the view is a read only view. User will no longer be able to write to this view if this is set to true.
	IsReadOnly NullableBool `json:"isReadOnly,omitempty"`
	// If small files are accessed sequentially from a client, this specifies whether to detect and prefetch files based on the lexicographic index to improve file read performance.
	LexicographicPrefetch NullableBool `json:"lexicographicPrefetch,omitempty"`
	// Specifies an optional logical quota limit (in bytes) for the usage allowed on this View. (Logical data is when the data is fully hydrated and expanded.) This limit overrides the limit inherited from the Storage Domain (View Box) (if set). If logicalQuota is nil, the limit is inherited from the Storage Domain (View Box) (if set). A new write is not allowed if the Storage Domain (View Box) will exceed the specified quota. However, it takes time for the Cohesity Cluster to calculate the usage across Nodes, so the limit may be exceeded by a small amount. In addition, if the limit is increased or data is removed, there may be a delay before the Cohesity Cluster allows more data to be written to the View, as the Cluster is calculating the usage across Nodes.
	LogicalQuota map[string]interface{} `json:"logicalQuota,omitempty"`
	// Specifies the name of the View.
	Name NullableString `json:"name,omitempty"`
	// Array of Netgroups. Specifies a list of netgroups with domains that have permissions to access the View. (Overrides or extends the Netgroup specified at the global Cohesity Cluster level.)
	NetgroupWhitelist map[string]interface{} `json:"netgroupWhitelist,omitempty"`
	// Specifies whether view level client netgroup whitelist overrides cluster and global setting.
	OverrideGlobalNetgroupWhitelist NullableBool `json:"overrideGlobalNetgroupWhitelist,omitempty"`
	// Specifies whether view level client subnet whitelist overrides cluster and global setting.
	OverrideGlobalSubnetWhitelist NullableBool `json:"overrideGlobalSubnetWhitelist,omitempty"`
	// Specifies the supported Protocols for the View.
	ProtocolAccess []ViewProtocol `json:"protocolAccess"`
	// Specifies the Quality of Service (QoS) Policy for the View.
	Qos map[string]interface{} `json:"qos"`
	// Specifies the security mode used for this view. Currently we support the following modes: Native, Unified and NTFS style. 'NativeMode' indicates a native security mode. 'UnifiedMode' indicates a unified security mode. 'NtfsMode' indicates a NTFS style security mode.
	SecurityMode NullableString `json:"securityMode,omitempty"`
	// Specifies self service config of this view.
	SelfServiceSnapshotConfig map[string]interface{} `json:"selfServiceSnapshotConfig,omitempty"`
	// Specifies if inline deduplication and compression settings inherited from the Storage Domain (View Box) should be disabled for this View.
	StoragePolicyOverride map[string]interface{} `json:"storagePolicyOverride,omitempty"`
	// Array of Subnets. Specifies a list of Subnets with IP addresses that have permissions to access the View. (Overrides or extends the Subnets specified at the global Cohesity Cluster level.)
	SubnetWhitelist []Subnet `json:"subnetWhitelist,omitempty"`
	// Optional tenant id who has access to this View.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies whether view lock is enabled. If enabled the view cannot be modified or deleted until unlock. By default it is disabled.
	ViewLockEnabled NullableBool `json:"viewLockEnabled,omitempty"`
	// Specifies the pinning config of this view.
	ViewPinningConfig map[string]interface{} `json:"viewPinningConfig,omitempty"`
	// If set, it enables NFS Kerberos Authentication
	EnableNfsKerberosAuthentication NullableBool `json:"enableNfsKerberosAuthentication,omitempty"`
	// If set, it enables NFS Kerberos Integrity
	EnableNfsKerberosIntegrity NullableBool `json:"enableNfsKerberosIntegrity,omitempty"`
	// If set, it enables NFS Kerberos Privacy
	EnableNfsKerberosPrivacy NullableBool `json:"enableNfsKerberosPrivacy,omitempty"`
	// If set, it enables NFS UNIX Authentication
	EnableNfsUnixAuthentication NullableBool `json:"enableNfsUnixAuthentication,omitempty"`
	// If set, it enables discovery of view for NFS.
	EnableNfsViewDiscovery NullableBool `json:"enableNfsViewDiscovery,omitempty"`
	// If set, it enables NFS weak cache consistency.
	EnableNfsWcc NullableBool `json:"enableNfsWcc,omitempty"`
	NfsAllSquash *NfsConfigNfsAllSquash `json:"nfsAllSquash,omitempty"`
	NfsRootPermissions *NfsConfigNfsRootPermissions `json:"nfsRootPermissions,omitempty"`
	NfsRootSquash *NfsConfigNfsRootSquash `json:"nfsRootSquash,omitempty"`
	// Specifies whether fast durable handle is enabled. If enabled, view open handle will be kept in memory, which results in a higher performance. But the handles cannot be recovered if node or service crashes.
	EnableFastDurableHandle NullableBool `json:"enableFastDurableHandle,omitempty"`
	// Specifies if access-based enumeration should be enabled. If 'true', only files and folders that the user has permissions to access are visible on the SMB share for that user.
	EnableSmbAccessBasedEnumeration NullableBool `json:"enableSmbAccessBasedEnumeration,omitempty"`
	// Specifies the SMB encryption for the View. If set, it enables the SMB encryption for the View. Encryption is supported only by SMB 3.x dialects. Dialects that do not support would still access data in unencrypted format.
	EnableSmbEncryption NullableBool `json:"enableSmbEncryption,omitempty"`
	// Specifies whether SMB opportunistic lock is enabled.
	EnableSmbOplock NullableBool `json:"enableSmbOplock,omitempty"`
	// If set, it enables discovery of view for SMB.
	EnableSmbViewDiscovery NullableBool `json:"enableSmbViewDiscovery,omitempty"`
	// Specifies the SMB encryption for all the sessions for the View. If set, encryption is enforced for all the sessions for the View. When enabled all future and existing unencrypted sessions are disallowed.
	EnforceSmbEncryption NullableBool `json:"enforceSmbEncryption,omitempty"`
	SharePermissions *SmbConfigSharePermissions `json:"sharePermissions,omitempty"`
	SmbPermissionsInfo *SmbConfigSmbPermissionsInfo `json:"smbPermissionsInfo,omitempty"`
	AclConfig *S3ConfigAclConfig `json:"aclConfig,omitempty"`
	BucketPolicy *S3ConfigBucketPolicy `json:"bucketPolicy,omitempty"`
	// Specifies if this View has S3 ABAC enabled. This can only be set while creating a view. The ABAC server corresponding the tenant will be used for authentication and authorization checks. 
	EnableAbac NullableBool `json:"enableAbac,omitempty"`
	LifecycleManagement *S3ConfigLifecycleManagement `json:"lifecycleManagement,omitempty"`
	OwnerInfo *S3ConfigOwnerInfo `json:"ownerInfo,omitempty"`
	// Specifies the path to access this View as an S3 share.
	S3AccessPath NullableString `json:"s3AccessPath,omitempty"`
	// Specifies if this View has S3 MPU 2.0 enabled. This can set while editing a view. 
	S3EfficientMpuMaxSubfiles NullableInt32 `json:"s3EfficientMpuMaxSubfiles,omitempty"`
	// Specifies if this View has S3 MPU 2.0 enabled. This can set while editing a view. 
	S3EnableEfficientMpu NullableBool `json:"s3EnableEfficientMpu,omitempty"`
	// Specifies the S3 migration action to be performed on this View. Supported migration actions are: [Enable, Cancel, Pause, Resume].
	S3MigrationAction NullableString `json:"s3MigrationAction,omitempty"`
	// Specifies the current S3 migration state for this View. A View can be under following migration states: [Eligible, Enable, Pause, Complete, UnderMigration].
	S3MigrationState NullableString `json:"s3MigrationState,omitempty"`
	// Specifies the versioning state of S3 bucket. Buckets can be in one of three states: UnVersioned (default), VersioningEnabled, or VersioningSuspended. Once versioning is enabled for a bucket, it can never return to an UnVersioned state. However, versioning on the bucket can be suspended.
	Versioning NullableString `json:"versioning,omitempty"`
	// Specifies the Keystone project domain.
	SwiftProjectDomain NullableString `json:"swiftProjectDomain,omitempty"`
	// Specifies the Keystone project name.
	SwiftProjectName NullableString `json:"swiftProjectName,omitempty"`
	// Specifies the Keystone user domain.
	SwiftUserDomain NullableString `json:"swiftUserDomain,omitempty"`
	// Specifies the Keystone username.
	SwiftUsername NullableString `json:"swiftUsername,omitempty"`
	// Specifies whether to support case insensitive file/folder names. This parameter can only be set during create and cannot be changed.
	CaseInsensitiveNamesEnabled NullableBool `json:"caseInsensitiveNamesEnabled,omitempty"`
	// Specifies the intent of the View.
	Intent map[string]interface{} `json:"intent,omitempty"`
	// Specifies the Object Services key mapping config of the view. This parameter can only be set during create and cannot be changed. Configuration of Object Services key mapping. Specifies the type of Object Services key mapping config.
	ObjectServicesMappingConfig NullableString `json:"objectServicesMappingConfig,omitempty"`
	// Specifies whether to support s3 folder support feature. This parameter can only be set during create and cannot be changed.
	S3FolderSupportEnabled NullableBool `json:"s3FolderSupportEnabled,omitempty"`
	// Specifies the id of the Storage Domain (View Box) where the View will be created.
	StorageDomainId NullableInt64 `json:"storageDomainId"`
	// Specifies the protection config of the View.
	ViewProtectionConfig map[string]interface{} `json:"viewProtectionConfig,omitempty"`
}

type _CreateView CreateView

// NewCreateView instantiates a new CreateView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateView(category NullableString, protocolAccess []ViewProtocol, qos map[string]interface{}, storageDomainId NullableInt64) *CreateView {
	this := CreateView{}
	this.Category = category
	this.ProtocolAccess = protocolAccess
	this.Qos = qos
	this.StorageDomainId = storageDomainId
	return &this
}

// NewCreateViewWithDefaults instantiates a new CreateView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateViewWithDefaults() *CreateView {
	this := CreateView{}
	return &this
}

// GetAccessSids returns the AccessSids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetAccessSids() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.AccessSids
}

// GetAccessSidsOk returns a tuple with the AccessSids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetAccessSidsOk() ([]string, bool) {
	if o == nil || IsNil(o.AccessSids) {
		return nil, false
	}
	return o.AccessSids, true
}

// HasAccessSids returns a boolean if a field has been set.
func (o *CreateView) HasAccessSids() bool {
	if o != nil && !IsNil(o.AccessSids) {
		return true
	}

	return false
}

// SetAccessSids gets a reference to the given []string and assigns it to the AccessSids field.
func (o *CreateView) SetAccessSids(v []string) {
	o.AccessSids = v
}

// GetAllowMountOnWindows returns the AllowMountOnWindows field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetAllowMountOnWindows() bool {
	if o == nil || IsNil(o.AllowMountOnWindows.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowMountOnWindows.Get()
}

// GetAllowMountOnWindowsOk returns a tuple with the AllowMountOnWindows field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetAllowMountOnWindowsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowMountOnWindows.Get(), o.AllowMountOnWindows.IsSet()
}

// HasAllowMountOnWindows returns a boolean if a field has been set.
func (o *CreateView) HasAllowMountOnWindows() bool {
	if o != nil && o.AllowMountOnWindows.IsSet() {
		return true
	}

	return false
}

// SetAllowMountOnWindows gets a reference to the given NullableBool and assigns it to the AllowMountOnWindows field.
func (o *CreateView) SetAllowMountOnWindows(v bool) {
	o.AllowMountOnWindows.Set(&v)
}
// SetAllowMountOnWindowsNil sets the value for AllowMountOnWindows to be an explicit nil
func (o *CreateView) SetAllowMountOnWindowsNil() {
	o.AllowMountOnWindows.Set(nil)
}

// UnsetAllowMountOnWindows ensures that no value is present for AllowMountOnWindows, not even an explicit nil
func (o *CreateView) UnsetAllowMountOnWindows() {
	o.AllowMountOnWindows.Unset()
}

// GetAntivirusScanConfig returns the AntivirusScanConfig field value if set, zero value otherwise.
func (o *CreateView) GetAntivirusScanConfig() map[string]interface{} {
	if o == nil || IsNil(o.AntivirusScanConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.AntivirusScanConfig
}

// GetAntivirusScanConfigOk returns a tuple with the AntivirusScanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetAntivirusScanConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AntivirusScanConfig) {
		return map[string]interface{}{}, false
	}
	return o.AntivirusScanConfig, true
}

// HasAntivirusScanConfig returns a boolean if a field has been set.
func (o *CreateView) HasAntivirusScanConfig() bool {
	if o != nil && !IsNil(o.AntivirusScanConfig) {
		return true
	}

	return false
}

// SetAntivirusScanConfig gets a reference to the given map[string]interface{} and assigns it to the AntivirusScanConfig field.
func (o *CreateView) SetAntivirusScanConfig(v map[string]interface{}) {
	o.AntivirusScanConfig = v
}

// GetCategory returns the Category field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateView) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}

	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// SetCategory sets field value
func (o *CreateView) SetCategory(v string) {
	o.Category.Set(&v)
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateView) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateView) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateView) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateView) UnsetDescription() {
	o.Description.Unset()
}

// GetEnableFilerAuditLogging returns the EnableFilerAuditLogging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableFilerAuditLogging() bool {
	if o == nil || IsNil(o.EnableFilerAuditLogging.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableFilerAuditLogging.Get()
}

// GetEnableFilerAuditLoggingOk returns a tuple with the EnableFilerAuditLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableFilerAuditLoggingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableFilerAuditLogging.Get(), o.EnableFilerAuditLogging.IsSet()
}

// HasEnableFilerAuditLogging returns a boolean if a field has been set.
func (o *CreateView) HasEnableFilerAuditLogging() bool {
	if o != nil && o.EnableFilerAuditLogging.IsSet() {
		return true
	}

	return false
}

// SetEnableFilerAuditLogging gets a reference to the given NullableBool and assigns it to the EnableFilerAuditLogging field.
func (o *CreateView) SetEnableFilerAuditLogging(v bool) {
	o.EnableFilerAuditLogging.Set(&v)
}
// SetEnableFilerAuditLoggingNil sets the value for EnableFilerAuditLogging to be an explicit nil
func (o *CreateView) SetEnableFilerAuditLoggingNil() {
	o.EnableFilerAuditLogging.Set(nil)
}

// UnsetEnableFilerAuditLogging ensures that no value is present for EnableFilerAuditLogging, not even an explicit nil
func (o *CreateView) UnsetEnableFilerAuditLogging() {
	o.EnableFilerAuditLogging.Unset()
}

// GetEnableLiveIndexing returns the EnableLiveIndexing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableLiveIndexing() bool {
	if o == nil || IsNil(o.EnableLiveIndexing.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableLiveIndexing.Get()
}

// GetEnableLiveIndexingOk returns a tuple with the EnableLiveIndexing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableLiveIndexingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableLiveIndexing.Get(), o.EnableLiveIndexing.IsSet()
}

// HasEnableLiveIndexing returns a boolean if a field has been set.
func (o *CreateView) HasEnableLiveIndexing() bool {
	if o != nil && o.EnableLiveIndexing.IsSet() {
		return true
	}

	return false
}

// SetEnableLiveIndexing gets a reference to the given NullableBool and assigns it to the EnableLiveIndexing field.
func (o *CreateView) SetEnableLiveIndexing(v bool) {
	o.EnableLiveIndexing.Set(&v)
}
// SetEnableLiveIndexingNil sets the value for EnableLiveIndexing to be an explicit nil
func (o *CreateView) SetEnableLiveIndexingNil() {
	o.EnableLiveIndexing.Set(nil)
}

// UnsetEnableLiveIndexing ensures that no value is present for EnableLiveIndexing, not even an explicit nil
func (o *CreateView) UnsetEnableLiveIndexing() {
	o.EnableLiveIndexing.Unset()
}

// GetEnableMetadataAccelerator returns the EnableMetadataAccelerator field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableMetadataAccelerator() bool {
	if o == nil || IsNil(o.EnableMetadataAccelerator.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableMetadataAccelerator.Get()
}

// GetEnableMetadataAcceleratorOk returns a tuple with the EnableMetadataAccelerator field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableMetadataAcceleratorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableMetadataAccelerator.Get(), o.EnableMetadataAccelerator.IsSet()
}

// HasEnableMetadataAccelerator returns a boolean if a field has been set.
func (o *CreateView) HasEnableMetadataAccelerator() bool {
	if o != nil && o.EnableMetadataAccelerator.IsSet() {
		return true
	}

	return false
}

// SetEnableMetadataAccelerator gets a reference to the given NullableBool and assigns it to the EnableMetadataAccelerator field.
func (o *CreateView) SetEnableMetadataAccelerator(v bool) {
	o.EnableMetadataAccelerator.Set(&v)
}
// SetEnableMetadataAcceleratorNil sets the value for EnableMetadataAccelerator to be an explicit nil
func (o *CreateView) SetEnableMetadataAcceleratorNil() {
	o.EnableMetadataAccelerator.Set(nil)
}

// UnsetEnableMetadataAccelerator ensures that no value is present for EnableMetadataAccelerator, not even an explicit nil
func (o *CreateView) UnsetEnableMetadataAccelerator() {
	o.EnableMetadataAccelerator.Unset()
}

// GetEnableMinion returns the EnableMinion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableMinion() bool {
	if o == nil || IsNil(o.EnableMinion.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableMinion.Get()
}

// GetEnableMinionOk returns a tuple with the EnableMinion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableMinionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableMinion.Get(), o.EnableMinion.IsSet()
}

// HasEnableMinion returns a boolean if a field has been set.
func (o *CreateView) HasEnableMinion() bool {
	if o != nil && o.EnableMinion.IsSet() {
		return true
	}

	return false
}

// SetEnableMinion gets a reference to the given NullableBool and assigns it to the EnableMinion field.
func (o *CreateView) SetEnableMinion(v bool) {
	o.EnableMinion.Set(&v)
}
// SetEnableMinionNil sets the value for EnableMinion to be an explicit nil
func (o *CreateView) SetEnableMinionNil() {
	o.EnableMinion.Set(nil)
}

// UnsetEnableMinion ensures that no value is present for EnableMinion, not even an explicit nil
func (o *CreateView) UnsetEnableMinion() {
	o.EnableMinion.Unset()
}

// GetEnableOfflineCaching returns the EnableOfflineCaching field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableOfflineCaching() bool {
	if o == nil || IsNil(o.EnableOfflineCaching.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableOfflineCaching.Get()
}

// GetEnableOfflineCachingOk returns a tuple with the EnableOfflineCaching field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableOfflineCachingOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableOfflineCaching.Get(), o.EnableOfflineCaching.IsSet()
}

// HasEnableOfflineCaching returns a boolean if a field has been set.
func (o *CreateView) HasEnableOfflineCaching() bool {
	if o != nil && o.EnableOfflineCaching.IsSet() {
		return true
	}

	return false
}

// SetEnableOfflineCaching gets a reference to the given NullableBool and assigns it to the EnableOfflineCaching field.
func (o *CreateView) SetEnableOfflineCaching(v bool) {
	o.EnableOfflineCaching.Set(&v)
}
// SetEnableOfflineCachingNil sets the value for EnableOfflineCaching to be an explicit nil
func (o *CreateView) SetEnableOfflineCachingNil() {
	o.EnableOfflineCaching.Set(nil)
}

// UnsetEnableOfflineCaching ensures that no value is present for EnableOfflineCaching, not even an explicit nil
func (o *CreateView) UnsetEnableOfflineCaching() {
	o.EnableOfflineCaching.Unset()
}

// GetFileExtensionFilter returns the FileExtensionFilter field value if set, zero value otherwise.
func (o *CreateView) GetFileExtensionFilter() map[string]interface{} {
	if o == nil || IsNil(o.FileExtensionFilter) {
		var ret map[string]interface{}
		return ret
	}
	return o.FileExtensionFilter
}

// GetFileExtensionFilterOk returns a tuple with the FileExtensionFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetFileExtensionFilterOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FileExtensionFilter) {
		return map[string]interface{}{}, false
	}
	return o.FileExtensionFilter, true
}

// HasFileExtensionFilter returns a boolean if a field has been set.
func (o *CreateView) HasFileExtensionFilter() bool {
	if o != nil && !IsNil(o.FileExtensionFilter) {
		return true
	}

	return false
}

// SetFileExtensionFilter gets a reference to the given map[string]interface{} and assigns it to the FileExtensionFilter field.
func (o *CreateView) SetFileExtensionFilter(v map[string]interface{}) {
	o.FileExtensionFilter = v
}

// GetFileLockConfig returns the FileLockConfig field value if set, zero value otherwise.
func (o *CreateView) GetFileLockConfig() map[string]interface{} {
	if o == nil || IsNil(o.FileLockConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.FileLockConfig
}

// GetFileLockConfigOk returns a tuple with the FileLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetFileLockConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FileLockConfig) {
		return map[string]interface{}{}, false
	}
	return o.FileLockConfig, true
}

// HasFileLockConfig returns a boolean if a field has been set.
func (o *CreateView) HasFileLockConfig() bool {
	if o != nil && !IsNil(o.FileLockConfig) {
		return true
	}

	return false
}

// SetFileLockConfig gets a reference to the given map[string]interface{} and assigns it to the FileLockConfig field.
func (o *CreateView) SetFileLockConfig(v map[string]interface{}) {
	o.FileLockConfig = v
}

// GetFilerLifecycleManagement returns the FilerLifecycleManagement field value if set, zero value otherwise.
func (o *CreateView) GetFilerLifecycleManagement() map[string]interface{} {
	if o == nil || IsNil(o.FilerLifecycleManagement) {
		var ret map[string]interface{}
		return ret
	}
	return o.FilerLifecycleManagement
}

// GetFilerLifecycleManagementOk returns a tuple with the FilerLifecycleManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetFilerLifecycleManagementOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.FilerLifecycleManagement) {
		return map[string]interface{}{}, false
	}
	return o.FilerLifecycleManagement, true
}

// HasFilerLifecycleManagement returns a boolean if a field has been set.
func (o *CreateView) HasFilerLifecycleManagement() bool {
	if o != nil && !IsNil(o.FilerLifecycleManagement) {
		return true
	}

	return false
}

// SetFilerLifecycleManagement gets a reference to the given map[string]interface{} and assigns it to the FilerLifecycleManagement field.
func (o *CreateView) SetFilerLifecycleManagement(v map[string]interface{}) {
	o.FilerLifecycleManagement = v
}

// GetIsExternallyTriggeredBackupTarget returns the IsExternallyTriggeredBackupTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetIsExternallyTriggeredBackupTarget() bool {
	if o == nil || IsNil(o.IsExternallyTriggeredBackupTarget.Get()) {
		var ret bool
		return ret
	}
	return *o.IsExternallyTriggeredBackupTarget.Get()
}

// GetIsExternallyTriggeredBackupTargetOk returns a tuple with the IsExternallyTriggeredBackupTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetIsExternallyTriggeredBackupTargetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsExternallyTriggeredBackupTarget.Get(), o.IsExternallyTriggeredBackupTarget.IsSet()
}

// HasIsExternallyTriggeredBackupTarget returns a boolean if a field has been set.
func (o *CreateView) HasIsExternallyTriggeredBackupTarget() bool {
	if o != nil && o.IsExternallyTriggeredBackupTarget.IsSet() {
		return true
	}

	return false
}

// SetIsExternallyTriggeredBackupTarget gets a reference to the given NullableBool and assigns it to the IsExternallyTriggeredBackupTarget field.
func (o *CreateView) SetIsExternallyTriggeredBackupTarget(v bool) {
	o.IsExternallyTriggeredBackupTarget.Set(&v)
}
// SetIsExternallyTriggeredBackupTargetNil sets the value for IsExternallyTriggeredBackupTarget to be an explicit nil
func (o *CreateView) SetIsExternallyTriggeredBackupTargetNil() {
	o.IsExternallyTriggeredBackupTarget.Set(nil)
}

// UnsetIsExternallyTriggeredBackupTarget ensures that no value is present for IsExternallyTriggeredBackupTarget, not even an explicit nil
func (o *CreateView) UnsetIsExternallyTriggeredBackupTarget() {
	o.IsExternallyTriggeredBackupTarget.Unset()
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetIsReadOnly() bool {
	if o == nil || IsNil(o.IsReadOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly.Get()
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsReadOnly.Get(), o.IsReadOnly.IsSet()
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *CreateView) HasIsReadOnly() bool {
	if o != nil && o.IsReadOnly.IsSet() {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given NullableBool and assigns it to the IsReadOnly field.
func (o *CreateView) SetIsReadOnly(v bool) {
	o.IsReadOnly.Set(&v)
}
// SetIsReadOnlyNil sets the value for IsReadOnly to be an explicit nil
func (o *CreateView) SetIsReadOnlyNil() {
	o.IsReadOnly.Set(nil)
}

// UnsetIsReadOnly ensures that no value is present for IsReadOnly, not even an explicit nil
func (o *CreateView) UnsetIsReadOnly() {
	o.IsReadOnly.Unset()
}

// GetLexicographicPrefetch returns the LexicographicPrefetch field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetLexicographicPrefetch() bool {
	if o == nil || IsNil(o.LexicographicPrefetch.Get()) {
		var ret bool
		return ret
	}
	return *o.LexicographicPrefetch.Get()
}

// GetLexicographicPrefetchOk returns a tuple with the LexicographicPrefetch field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetLexicographicPrefetchOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.LexicographicPrefetch.Get(), o.LexicographicPrefetch.IsSet()
}

// HasLexicographicPrefetch returns a boolean if a field has been set.
func (o *CreateView) HasLexicographicPrefetch() bool {
	if o != nil && o.LexicographicPrefetch.IsSet() {
		return true
	}

	return false
}

// SetLexicographicPrefetch gets a reference to the given NullableBool and assigns it to the LexicographicPrefetch field.
func (o *CreateView) SetLexicographicPrefetch(v bool) {
	o.LexicographicPrefetch.Set(&v)
}
// SetLexicographicPrefetchNil sets the value for LexicographicPrefetch to be an explicit nil
func (o *CreateView) SetLexicographicPrefetchNil() {
	o.LexicographicPrefetch.Set(nil)
}

// UnsetLexicographicPrefetch ensures that no value is present for LexicographicPrefetch, not even an explicit nil
func (o *CreateView) UnsetLexicographicPrefetch() {
	o.LexicographicPrefetch.Unset()
}

// GetLogicalQuota returns the LogicalQuota field value if set, zero value otherwise.
func (o *CreateView) GetLogicalQuota() map[string]interface{} {
	if o == nil || IsNil(o.LogicalQuota) {
		var ret map[string]interface{}
		return ret
	}
	return o.LogicalQuota
}

// GetLogicalQuotaOk returns a tuple with the LogicalQuota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetLogicalQuotaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.LogicalQuota) {
		return map[string]interface{}{}, false
	}
	return o.LogicalQuota, true
}

// HasLogicalQuota returns a boolean if a field has been set.
func (o *CreateView) HasLogicalQuota() bool {
	if o != nil && !IsNil(o.LogicalQuota) {
		return true
	}

	return false
}

// SetLogicalQuota gets a reference to the given map[string]interface{} and assigns it to the LogicalQuota field.
func (o *CreateView) SetLogicalQuota(v map[string]interface{}) {
	o.LogicalQuota = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *CreateView) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *CreateView) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *CreateView) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *CreateView) UnsetName() {
	o.Name.Unset()
}

// GetNetgroupWhitelist returns the NetgroupWhitelist field value if set, zero value otherwise.
func (o *CreateView) GetNetgroupWhitelist() map[string]interface{} {
	if o == nil || IsNil(o.NetgroupWhitelist) {
		var ret map[string]interface{}
		return ret
	}
	return o.NetgroupWhitelist
}

// GetNetgroupWhitelistOk returns a tuple with the NetgroupWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetNetgroupWhitelistOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.NetgroupWhitelist) {
		return map[string]interface{}{}, false
	}
	return o.NetgroupWhitelist, true
}

// HasNetgroupWhitelist returns a boolean if a field has been set.
func (o *CreateView) HasNetgroupWhitelist() bool {
	if o != nil && !IsNil(o.NetgroupWhitelist) {
		return true
	}

	return false
}

// SetNetgroupWhitelist gets a reference to the given map[string]interface{} and assigns it to the NetgroupWhitelist field.
func (o *CreateView) SetNetgroupWhitelist(v map[string]interface{}) {
	o.NetgroupWhitelist = v
}

// GetOverrideGlobalNetgroupWhitelist returns the OverrideGlobalNetgroupWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetOverrideGlobalNetgroupWhitelist() bool {
	if o == nil || IsNil(o.OverrideGlobalNetgroupWhitelist.Get()) {
		var ret bool
		return ret
	}
	return *o.OverrideGlobalNetgroupWhitelist.Get()
}

// GetOverrideGlobalNetgroupWhitelistOk returns a tuple with the OverrideGlobalNetgroupWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetOverrideGlobalNetgroupWhitelistOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverrideGlobalNetgroupWhitelist.Get(), o.OverrideGlobalNetgroupWhitelist.IsSet()
}

// HasOverrideGlobalNetgroupWhitelist returns a boolean if a field has been set.
func (o *CreateView) HasOverrideGlobalNetgroupWhitelist() bool {
	if o != nil && o.OverrideGlobalNetgroupWhitelist.IsSet() {
		return true
	}

	return false
}

// SetOverrideGlobalNetgroupWhitelist gets a reference to the given NullableBool and assigns it to the OverrideGlobalNetgroupWhitelist field.
func (o *CreateView) SetOverrideGlobalNetgroupWhitelist(v bool) {
	o.OverrideGlobalNetgroupWhitelist.Set(&v)
}
// SetOverrideGlobalNetgroupWhitelistNil sets the value for OverrideGlobalNetgroupWhitelist to be an explicit nil
func (o *CreateView) SetOverrideGlobalNetgroupWhitelistNil() {
	o.OverrideGlobalNetgroupWhitelist.Set(nil)
}

// UnsetOverrideGlobalNetgroupWhitelist ensures that no value is present for OverrideGlobalNetgroupWhitelist, not even an explicit nil
func (o *CreateView) UnsetOverrideGlobalNetgroupWhitelist() {
	o.OverrideGlobalNetgroupWhitelist.Unset()
}

// GetOverrideGlobalSubnetWhitelist returns the OverrideGlobalSubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetOverrideGlobalSubnetWhitelist() bool {
	if o == nil || IsNil(o.OverrideGlobalSubnetWhitelist.Get()) {
		var ret bool
		return ret
	}
	return *o.OverrideGlobalSubnetWhitelist.Get()
}

// GetOverrideGlobalSubnetWhitelistOk returns a tuple with the OverrideGlobalSubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetOverrideGlobalSubnetWhitelistOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverrideGlobalSubnetWhitelist.Get(), o.OverrideGlobalSubnetWhitelist.IsSet()
}

// HasOverrideGlobalSubnetWhitelist returns a boolean if a field has been set.
func (o *CreateView) HasOverrideGlobalSubnetWhitelist() bool {
	if o != nil && o.OverrideGlobalSubnetWhitelist.IsSet() {
		return true
	}

	return false
}

// SetOverrideGlobalSubnetWhitelist gets a reference to the given NullableBool and assigns it to the OverrideGlobalSubnetWhitelist field.
func (o *CreateView) SetOverrideGlobalSubnetWhitelist(v bool) {
	o.OverrideGlobalSubnetWhitelist.Set(&v)
}
// SetOverrideGlobalSubnetWhitelistNil sets the value for OverrideGlobalSubnetWhitelist to be an explicit nil
func (o *CreateView) SetOverrideGlobalSubnetWhitelistNil() {
	o.OverrideGlobalSubnetWhitelist.Set(nil)
}

// UnsetOverrideGlobalSubnetWhitelist ensures that no value is present for OverrideGlobalSubnetWhitelist, not even an explicit nil
func (o *CreateView) UnsetOverrideGlobalSubnetWhitelist() {
	o.OverrideGlobalSubnetWhitelist.Unset()
}

// GetProtocolAccess returns the ProtocolAccess field value
// If the value is explicit nil, the zero value for []ViewProtocol will be returned
func (o *CreateView) GetProtocolAccess() []ViewProtocol {
	if o == nil {
		var ret []ViewProtocol
		return ret
	}

	return o.ProtocolAccess
}

// GetProtocolAccessOk returns a tuple with the ProtocolAccess field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetProtocolAccessOk() ([]ViewProtocol, bool) {
	if o == nil || IsNil(o.ProtocolAccess) {
		return nil, false
	}
	return o.ProtocolAccess, true
}

// SetProtocolAccess sets field value
func (o *CreateView) SetProtocolAccess(v []ViewProtocol) {
	o.ProtocolAccess = v
}

// GetQos returns the Qos field value
func (o *CreateView) GetQos() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Qos
}

// GetQosOk returns a tuple with the Qos field value
// and a boolean to check if the value has been set.
func (o *CreateView) GetQosOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Qos, true
}

// SetQos sets field value
func (o *CreateView) SetQos(v map[string]interface{}) {
	o.Qos = v
}

// GetSecurityMode returns the SecurityMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetSecurityMode() string {
	if o == nil || IsNil(o.SecurityMode.Get()) {
		var ret string
		return ret
	}
	return *o.SecurityMode.Get()
}

// GetSecurityModeOk returns a tuple with the SecurityMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetSecurityModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecurityMode.Get(), o.SecurityMode.IsSet()
}

// HasSecurityMode returns a boolean if a field has been set.
func (o *CreateView) HasSecurityMode() bool {
	if o != nil && o.SecurityMode.IsSet() {
		return true
	}

	return false
}

// SetSecurityMode gets a reference to the given NullableString and assigns it to the SecurityMode field.
func (o *CreateView) SetSecurityMode(v string) {
	o.SecurityMode.Set(&v)
}
// SetSecurityModeNil sets the value for SecurityMode to be an explicit nil
func (o *CreateView) SetSecurityModeNil() {
	o.SecurityMode.Set(nil)
}

// UnsetSecurityMode ensures that no value is present for SecurityMode, not even an explicit nil
func (o *CreateView) UnsetSecurityMode() {
	o.SecurityMode.Unset()
}

// GetSelfServiceSnapshotConfig returns the SelfServiceSnapshotConfig field value if set, zero value otherwise.
func (o *CreateView) GetSelfServiceSnapshotConfig() map[string]interface{} {
	if o == nil || IsNil(o.SelfServiceSnapshotConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.SelfServiceSnapshotConfig
}

// GetSelfServiceSnapshotConfigOk returns a tuple with the SelfServiceSnapshotConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetSelfServiceSnapshotConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.SelfServiceSnapshotConfig) {
		return map[string]interface{}{}, false
	}
	return o.SelfServiceSnapshotConfig, true
}

// HasSelfServiceSnapshotConfig returns a boolean if a field has been set.
func (o *CreateView) HasSelfServiceSnapshotConfig() bool {
	if o != nil && !IsNil(o.SelfServiceSnapshotConfig) {
		return true
	}

	return false
}

// SetSelfServiceSnapshotConfig gets a reference to the given map[string]interface{} and assigns it to the SelfServiceSnapshotConfig field.
func (o *CreateView) SetSelfServiceSnapshotConfig(v map[string]interface{}) {
	o.SelfServiceSnapshotConfig = v
}

// GetStoragePolicyOverride returns the StoragePolicyOverride field value if set, zero value otherwise.
func (o *CreateView) GetStoragePolicyOverride() map[string]interface{} {
	if o == nil || IsNil(o.StoragePolicyOverride) {
		var ret map[string]interface{}
		return ret
	}
	return o.StoragePolicyOverride
}

// GetStoragePolicyOverrideOk returns a tuple with the StoragePolicyOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetStoragePolicyOverrideOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.StoragePolicyOverride) {
		return map[string]interface{}{}, false
	}
	return o.StoragePolicyOverride, true
}

// HasStoragePolicyOverride returns a boolean if a field has been set.
func (o *CreateView) HasStoragePolicyOverride() bool {
	if o != nil && !IsNil(o.StoragePolicyOverride) {
		return true
	}

	return false
}

// SetStoragePolicyOverride gets a reference to the given map[string]interface{} and assigns it to the StoragePolicyOverride field.
func (o *CreateView) SetStoragePolicyOverride(v map[string]interface{}) {
	o.StoragePolicyOverride = v
}

// GetSubnetWhitelist returns the SubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetSubnetWhitelist() []Subnet {
	if o == nil {
		var ret []Subnet
		return ret
	}
	return o.SubnetWhitelist
}

// GetSubnetWhitelistOk returns a tuple with the SubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetSubnetWhitelistOk() ([]Subnet, bool) {
	if o == nil || IsNil(o.SubnetWhitelist) {
		return nil, false
	}
	return o.SubnetWhitelist, true
}

// HasSubnetWhitelist returns a boolean if a field has been set.
func (o *CreateView) HasSubnetWhitelist() bool {
	if o != nil && !IsNil(o.SubnetWhitelist) {
		return true
	}

	return false
}

// SetSubnetWhitelist gets a reference to the given []Subnet and assigns it to the SubnetWhitelist field.
func (o *CreateView) SetSubnetWhitelist(v []Subnet) {
	o.SubnetWhitelist = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *CreateView) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *CreateView) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *CreateView) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *CreateView) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetViewLockEnabled returns the ViewLockEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetViewLockEnabled() bool {
	if o == nil || IsNil(o.ViewLockEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.ViewLockEnabled.Get()
}

// GetViewLockEnabledOk returns a tuple with the ViewLockEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetViewLockEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewLockEnabled.Get(), o.ViewLockEnabled.IsSet()
}

// HasViewLockEnabled returns a boolean if a field has been set.
func (o *CreateView) HasViewLockEnabled() bool {
	if o != nil && o.ViewLockEnabled.IsSet() {
		return true
	}

	return false
}

// SetViewLockEnabled gets a reference to the given NullableBool and assigns it to the ViewLockEnabled field.
func (o *CreateView) SetViewLockEnabled(v bool) {
	o.ViewLockEnabled.Set(&v)
}
// SetViewLockEnabledNil sets the value for ViewLockEnabled to be an explicit nil
func (o *CreateView) SetViewLockEnabledNil() {
	o.ViewLockEnabled.Set(nil)
}

// UnsetViewLockEnabled ensures that no value is present for ViewLockEnabled, not even an explicit nil
func (o *CreateView) UnsetViewLockEnabled() {
	o.ViewLockEnabled.Unset()
}

// GetViewPinningConfig returns the ViewPinningConfig field value if set, zero value otherwise.
func (o *CreateView) GetViewPinningConfig() map[string]interface{} {
	if o == nil || IsNil(o.ViewPinningConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.ViewPinningConfig
}

// GetViewPinningConfigOk returns a tuple with the ViewPinningConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetViewPinningConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ViewPinningConfig) {
		return map[string]interface{}{}, false
	}
	return o.ViewPinningConfig, true
}

// HasViewPinningConfig returns a boolean if a field has been set.
func (o *CreateView) HasViewPinningConfig() bool {
	if o != nil && !IsNil(o.ViewPinningConfig) {
		return true
	}

	return false
}

// SetViewPinningConfig gets a reference to the given map[string]interface{} and assigns it to the ViewPinningConfig field.
func (o *CreateView) SetViewPinningConfig(v map[string]interface{}) {
	o.ViewPinningConfig = v
}

// GetEnableNfsKerberosAuthentication returns the EnableNfsKerberosAuthentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableNfsKerberosAuthentication() bool {
	if o == nil || IsNil(o.EnableNfsKerberosAuthentication.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableNfsKerberosAuthentication.Get()
}

// GetEnableNfsKerberosAuthenticationOk returns a tuple with the EnableNfsKerberosAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableNfsKerberosAuthenticationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableNfsKerberosAuthentication.Get(), o.EnableNfsKerberosAuthentication.IsSet()
}

// HasEnableNfsKerberosAuthentication returns a boolean if a field has been set.
func (o *CreateView) HasEnableNfsKerberosAuthentication() bool {
	if o != nil && o.EnableNfsKerberosAuthentication.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsKerberosAuthentication gets a reference to the given NullableBool and assigns it to the EnableNfsKerberosAuthentication field.
func (o *CreateView) SetEnableNfsKerberosAuthentication(v bool) {
	o.EnableNfsKerberosAuthentication.Set(&v)
}
// SetEnableNfsKerberosAuthenticationNil sets the value for EnableNfsKerberosAuthentication to be an explicit nil
func (o *CreateView) SetEnableNfsKerberosAuthenticationNil() {
	o.EnableNfsKerberosAuthentication.Set(nil)
}

// UnsetEnableNfsKerberosAuthentication ensures that no value is present for EnableNfsKerberosAuthentication, not even an explicit nil
func (o *CreateView) UnsetEnableNfsKerberosAuthentication() {
	o.EnableNfsKerberosAuthentication.Unset()
}

// GetEnableNfsKerberosIntegrity returns the EnableNfsKerberosIntegrity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableNfsKerberosIntegrity() bool {
	if o == nil || IsNil(o.EnableNfsKerberosIntegrity.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableNfsKerberosIntegrity.Get()
}

// GetEnableNfsKerberosIntegrityOk returns a tuple with the EnableNfsKerberosIntegrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableNfsKerberosIntegrityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableNfsKerberosIntegrity.Get(), o.EnableNfsKerberosIntegrity.IsSet()
}

// HasEnableNfsKerberosIntegrity returns a boolean if a field has been set.
func (o *CreateView) HasEnableNfsKerberosIntegrity() bool {
	if o != nil && o.EnableNfsKerberosIntegrity.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsKerberosIntegrity gets a reference to the given NullableBool and assigns it to the EnableNfsKerberosIntegrity field.
func (o *CreateView) SetEnableNfsKerberosIntegrity(v bool) {
	o.EnableNfsKerberosIntegrity.Set(&v)
}
// SetEnableNfsKerberosIntegrityNil sets the value for EnableNfsKerberosIntegrity to be an explicit nil
func (o *CreateView) SetEnableNfsKerberosIntegrityNil() {
	o.EnableNfsKerberosIntegrity.Set(nil)
}

// UnsetEnableNfsKerberosIntegrity ensures that no value is present for EnableNfsKerberosIntegrity, not even an explicit nil
func (o *CreateView) UnsetEnableNfsKerberosIntegrity() {
	o.EnableNfsKerberosIntegrity.Unset()
}

// GetEnableNfsKerberosPrivacy returns the EnableNfsKerberosPrivacy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableNfsKerberosPrivacy() bool {
	if o == nil || IsNil(o.EnableNfsKerberosPrivacy.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableNfsKerberosPrivacy.Get()
}

// GetEnableNfsKerberosPrivacyOk returns a tuple with the EnableNfsKerberosPrivacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableNfsKerberosPrivacyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableNfsKerberosPrivacy.Get(), o.EnableNfsKerberosPrivacy.IsSet()
}

// HasEnableNfsKerberosPrivacy returns a boolean if a field has been set.
func (o *CreateView) HasEnableNfsKerberosPrivacy() bool {
	if o != nil && o.EnableNfsKerberosPrivacy.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsKerberosPrivacy gets a reference to the given NullableBool and assigns it to the EnableNfsKerberosPrivacy field.
func (o *CreateView) SetEnableNfsKerberosPrivacy(v bool) {
	o.EnableNfsKerberosPrivacy.Set(&v)
}
// SetEnableNfsKerberosPrivacyNil sets the value for EnableNfsKerberosPrivacy to be an explicit nil
func (o *CreateView) SetEnableNfsKerberosPrivacyNil() {
	o.EnableNfsKerberosPrivacy.Set(nil)
}

// UnsetEnableNfsKerberosPrivacy ensures that no value is present for EnableNfsKerberosPrivacy, not even an explicit nil
func (o *CreateView) UnsetEnableNfsKerberosPrivacy() {
	o.EnableNfsKerberosPrivacy.Unset()
}

// GetEnableNfsUnixAuthentication returns the EnableNfsUnixAuthentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableNfsUnixAuthentication() bool {
	if o == nil || IsNil(o.EnableNfsUnixAuthentication.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableNfsUnixAuthentication.Get()
}

// GetEnableNfsUnixAuthenticationOk returns a tuple with the EnableNfsUnixAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableNfsUnixAuthenticationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableNfsUnixAuthentication.Get(), o.EnableNfsUnixAuthentication.IsSet()
}

// HasEnableNfsUnixAuthentication returns a boolean if a field has been set.
func (o *CreateView) HasEnableNfsUnixAuthentication() bool {
	if o != nil && o.EnableNfsUnixAuthentication.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsUnixAuthentication gets a reference to the given NullableBool and assigns it to the EnableNfsUnixAuthentication field.
func (o *CreateView) SetEnableNfsUnixAuthentication(v bool) {
	o.EnableNfsUnixAuthentication.Set(&v)
}
// SetEnableNfsUnixAuthenticationNil sets the value for EnableNfsUnixAuthentication to be an explicit nil
func (o *CreateView) SetEnableNfsUnixAuthenticationNil() {
	o.EnableNfsUnixAuthentication.Set(nil)
}

// UnsetEnableNfsUnixAuthentication ensures that no value is present for EnableNfsUnixAuthentication, not even an explicit nil
func (o *CreateView) UnsetEnableNfsUnixAuthentication() {
	o.EnableNfsUnixAuthentication.Unset()
}

// GetEnableNfsViewDiscovery returns the EnableNfsViewDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableNfsViewDiscovery() bool {
	if o == nil || IsNil(o.EnableNfsViewDiscovery.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableNfsViewDiscovery.Get()
}

// GetEnableNfsViewDiscoveryOk returns a tuple with the EnableNfsViewDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableNfsViewDiscoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableNfsViewDiscovery.Get(), o.EnableNfsViewDiscovery.IsSet()
}

// HasEnableNfsViewDiscovery returns a boolean if a field has been set.
func (o *CreateView) HasEnableNfsViewDiscovery() bool {
	if o != nil && o.EnableNfsViewDiscovery.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsViewDiscovery gets a reference to the given NullableBool and assigns it to the EnableNfsViewDiscovery field.
func (o *CreateView) SetEnableNfsViewDiscovery(v bool) {
	o.EnableNfsViewDiscovery.Set(&v)
}
// SetEnableNfsViewDiscoveryNil sets the value for EnableNfsViewDiscovery to be an explicit nil
func (o *CreateView) SetEnableNfsViewDiscoveryNil() {
	o.EnableNfsViewDiscovery.Set(nil)
}

// UnsetEnableNfsViewDiscovery ensures that no value is present for EnableNfsViewDiscovery, not even an explicit nil
func (o *CreateView) UnsetEnableNfsViewDiscovery() {
	o.EnableNfsViewDiscovery.Unset()
}

// GetEnableNfsWcc returns the EnableNfsWcc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableNfsWcc() bool {
	if o == nil || IsNil(o.EnableNfsWcc.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableNfsWcc.Get()
}

// GetEnableNfsWccOk returns a tuple with the EnableNfsWcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableNfsWccOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableNfsWcc.Get(), o.EnableNfsWcc.IsSet()
}

// HasEnableNfsWcc returns a boolean if a field has been set.
func (o *CreateView) HasEnableNfsWcc() bool {
	if o != nil && o.EnableNfsWcc.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsWcc gets a reference to the given NullableBool and assigns it to the EnableNfsWcc field.
func (o *CreateView) SetEnableNfsWcc(v bool) {
	o.EnableNfsWcc.Set(&v)
}
// SetEnableNfsWccNil sets the value for EnableNfsWcc to be an explicit nil
func (o *CreateView) SetEnableNfsWccNil() {
	o.EnableNfsWcc.Set(nil)
}

// UnsetEnableNfsWcc ensures that no value is present for EnableNfsWcc, not even an explicit nil
func (o *CreateView) UnsetEnableNfsWcc() {
	o.EnableNfsWcc.Unset()
}

// GetNfsAllSquash returns the NfsAllSquash field value if set, zero value otherwise.
func (o *CreateView) GetNfsAllSquash() NfsConfigNfsAllSquash {
	if o == nil || IsNil(o.NfsAllSquash) {
		var ret NfsConfigNfsAllSquash
		return ret
	}
	return *o.NfsAllSquash
}

// GetNfsAllSquashOk returns a tuple with the NfsAllSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetNfsAllSquashOk() (*NfsConfigNfsAllSquash, bool) {
	if o == nil || IsNil(o.NfsAllSquash) {
		return nil, false
	}
	return o.NfsAllSquash, true
}

// HasNfsAllSquash returns a boolean if a field has been set.
func (o *CreateView) HasNfsAllSquash() bool {
	if o != nil && !IsNil(o.NfsAllSquash) {
		return true
	}

	return false
}

// SetNfsAllSquash gets a reference to the given NfsConfigNfsAllSquash and assigns it to the NfsAllSquash field.
func (o *CreateView) SetNfsAllSquash(v NfsConfigNfsAllSquash) {
	o.NfsAllSquash = &v
}

// GetNfsRootPermissions returns the NfsRootPermissions field value if set, zero value otherwise.
func (o *CreateView) GetNfsRootPermissions() NfsConfigNfsRootPermissions {
	if o == nil || IsNil(o.NfsRootPermissions) {
		var ret NfsConfigNfsRootPermissions
		return ret
	}
	return *o.NfsRootPermissions
}

// GetNfsRootPermissionsOk returns a tuple with the NfsRootPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetNfsRootPermissionsOk() (*NfsConfigNfsRootPermissions, bool) {
	if o == nil || IsNil(o.NfsRootPermissions) {
		return nil, false
	}
	return o.NfsRootPermissions, true
}

// HasNfsRootPermissions returns a boolean if a field has been set.
func (o *CreateView) HasNfsRootPermissions() bool {
	if o != nil && !IsNil(o.NfsRootPermissions) {
		return true
	}

	return false
}

// SetNfsRootPermissions gets a reference to the given NfsConfigNfsRootPermissions and assigns it to the NfsRootPermissions field.
func (o *CreateView) SetNfsRootPermissions(v NfsConfigNfsRootPermissions) {
	o.NfsRootPermissions = &v
}

// GetNfsRootSquash returns the NfsRootSquash field value if set, zero value otherwise.
func (o *CreateView) GetNfsRootSquash() NfsConfigNfsRootSquash {
	if o == nil || IsNil(o.NfsRootSquash) {
		var ret NfsConfigNfsRootSquash
		return ret
	}
	return *o.NfsRootSquash
}

// GetNfsRootSquashOk returns a tuple with the NfsRootSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetNfsRootSquashOk() (*NfsConfigNfsRootSquash, bool) {
	if o == nil || IsNil(o.NfsRootSquash) {
		return nil, false
	}
	return o.NfsRootSquash, true
}

// HasNfsRootSquash returns a boolean if a field has been set.
func (o *CreateView) HasNfsRootSquash() bool {
	if o != nil && !IsNil(o.NfsRootSquash) {
		return true
	}

	return false
}

// SetNfsRootSquash gets a reference to the given NfsConfigNfsRootSquash and assigns it to the NfsRootSquash field.
func (o *CreateView) SetNfsRootSquash(v NfsConfigNfsRootSquash) {
	o.NfsRootSquash = &v
}

// GetEnableFastDurableHandle returns the EnableFastDurableHandle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableFastDurableHandle() bool {
	if o == nil || IsNil(o.EnableFastDurableHandle.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableFastDurableHandle.Get()
}

// GetEnableFastDurableHandleOk returns a tuple with the EnableFastDurableHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableFastDurableHandleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableFastDurableHandle.Get(), o.EnableFastDurableHandle.IsSet()
}

// HasEnableFastDurableHandle returns a boolean if a field has been set.
func (o *CreateView) HasEnableFastDurableHandle() bool {
	if o != nil && o.EnableFastDurableHandle.IsSet() {
		return true
	}

	return false
}

// SetEnableFastDurableHandle gets a reference to the given NullableBool and assigns it to the EnableFastDurableHandle field.
func (o *CreateView) SetEnableFastDurableHandle(v bool) {
	o.EnableFastDurableHandle.Set(&v)
}
// SetEnableFastDurableHandleNil sets the value for EnableFastDurableHandle to be an explicit nil
func (o *CreateView) SetEnableFastDurableHandleNil() {
	o.EnableFastDurableHandle.Set(nil)
}

// UnsetEnableFastDurableHandle ensures that no value is present for EnableFastDurableHandle, not even an explicit nil
func (o *CreateView) UnsetEnableFastDurableHandle() {
	o.EnableFastDurableHandle.Unset()
}

// GetEnableSmbAccessBasedEnumeration returns the EnableSmbAccessBasedEnumeration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableSmbAccessBasedEnumeration() bool {
	if o == nil || IsNil(o.EnableSmbAccessBasedEnumeration.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSmbAccessBasedEnumeration.Get()
}

// GetEnableSmbAccessBasedEnumerationOk returns a tuple with the EnableSmbAccessBasedEnumeration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableSmbAccessBasedEnumerationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSmbAccessBasedEnumeration.Get(), o.EnableSmbAccessBasedEnumeration.IsSet()
}

// HasEnableSmbAccessBasedEnumeration returns a boolean if a field has been set.
func (o *CreateView) HasEnableSmbAccessBasedEnumeration() bool {
	if o != nil && o.EnableSmbAccessBasedEnumeration.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbAccessBasedEnumeration gets a reference to the given NullableBool and assigns it to the EnableSmbAccessBasedEnumeration field.
func (o *CreateView) SetEnableSmbAccessBasedEnumeration(v bool) {
	o.EnableSmbAccessBasedEnumeration.Set(&v)
}
// SetEnableSmbAccessBasedEnumerationNil sets the value for EnableSmbAccessBasedEnumeration to be an explicit nil
func (o *CreateView) SetEnableSmbAccessBasedEnumerationNil() {
	o.EnableSmbAccessBasedEnumeration.Set(nil)
}

// UnsetEnableSmbAccessBasedEnumeration ensures that no value is present for EnableSmbAccessBasedEnumeration, not even an explicit nil
func (o *CreateView) UnsetEnableSmbAccessBasedEnumeration() {
	o.EnableSmbAccessBasedEnumeration.Unset()
}

// GetEnableSmbEncryption returns the EnableSmbEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableSmbEncryption() bool {
	if o == nil || IsNil(o.EnableSmbEncryption.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSmbEncryption.Get()
}

// GetEnableSmbEncryptionOk returns a tuple with the EnableSmbEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableSmbEncryptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSmbEncryption.Get(), o.EnableSmbEncryption.IsSet()
}

// HasEnableSmbEncryption returns a boolean if a field has been set.
func (o *CreateView) HasEnableSmbEncryption() bool {
	if o != nil && o.EnableSmbEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbEncryption gets a reference to the given NullableBool and assigns it to the EnableSmbEncryption field.
func (o *CreateView) SetEnableSmbEncryption(v bool) {
	o.EnableSmbEncryption.Set(&v)
}
// SetEnableSmbEncryptionNil sets the value for EnableSmbEncryption to be an explicit nil
func (o *CreateView) SetEnableSmbEncryptionNil() {
	o.EnableSmbEncryption.Set(nil)
}

// UnsetEnableSmbEncryption ensures that no value is present for EnableSmbEncryption, not even an explicit nil
func (o *CreateView) UnsetEnableSmbEncryption() {
	o.EnableSmbEncryption.Unset()
}

// GetEnableSmbOplock returns the EnableSmbOplock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableSmbOplock() bool {
	if o == nil || IsNil(o.EnableSmbOplock.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSmbOplock.Get()
}

// GetEnableSmbOplockOk returns a tuple with the EnableSmbOplock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableSmbOplockOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSmbOplock.Get(), o.EnableSmbOplock.IsSet()
}

// HasEnableSmbOplock returns a boolean if a field has been set.
func (o *CreateView) HasEnableSmbOplock() bool {
	if o != nil && o.EnableSmbOplock.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbOplock gets a reference to the given NullableBool and assigns it to the EnableSmbOplock field.
func (o *CreateView) SetEnableSmbOplock(v bool) {
	o.EnableSmbOplock.Set(&v)
}
// SetEnableSmbOplockNil sets the value for EnableSmbOplock to be an explicit nil
func (o *CreateView) SetEnableSmbOplockNil() {
	o.EnableSmbOplock.Set(nil)
}

// UnsetEnableSmbOplock ensures that no value is present for EnableSmbOplock, not even an explicit nil
func (o *CreateView) UnsetEnableSmbOplock() {
	o.EnableSmbOplock.Unset()
}

// GetEnableSmbViewDiscovery returns the EnableSmbViewDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableSmbViewDiscovery() bool {
	if o == nil || IsNil(o.EnableSmbViewDiscovery.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableSmbViewDiscovery.Get()
}

// GetEnableSmbViewDiscoveryOk returns a tuple with the EnableSmbViewDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableSmbViewDiscoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableSmbViewDiscovery.Get(), o.EnableSmbViewDiscovery.IsSet()
}

// HasEnableSmbViewDiscovery returns a boolean if a field has been set.
func (o *CreateView) HasEnableSmbViewDiscovery() bool {
	if o != nil && o.EnableSmbViewDiscovery.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbViewDiscovery gets a reference to the given NullableBool and assigns it to the EnableSmbViewDiscovery field.
func (o *CreateView) SetEnableSmbViewDiscovery(v bool) {
	o.EnableSmbViewDiscovery.Set(&v)
}
// SetEnableSmbViewDiscoveryNil sets the value for EnableSmbViewDiscovery to be an explicit nil
func (o *CreateView) SetEnableSmbViewDiscoveryNil() {
	o.EnableSmbViewDiscovery.Set(nil)
}

// UnsetEnableSmbViewDiscovery ensures that no value is present for EnableSmbViewDiscovery, not even an explicit nil
func (o *CreateView) UnsetEnableSmbViewDiscovery() {
	o.EnableSmbViewDiscovery.Unset()
}

// GetEnforceSmbEncryption returns the EnforceSmbEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnforceSmbEncryption() bool {
	if o == nil || IsNil(o.EnforceSmbEncryption.Get()) {
		var ret bool
		return ret
	}
	return *o.EnforceSmbEncryption.Get()
}

// GetEnforceSmbEncryptionOk returns a tuple with the EnforceSmbEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnforceSmbEncryptionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnforceSmbEncryption.Get(), o.EnforceSmbEncryption.IsSet()
}

// HasEnforceSmbEncryption returns a boolean if a field has been set.
func (o *CreateView) HasEnforceSmbEncryption() bool {
	if o != nil && o.EnforceSmbEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnforceSmbEncryption gets a reference to the given NullableBool and assigns it to the EnforceSmbEncryption field.
func (o *CreateView) SetEnforceSmbEncryption(v bool) {
	o.EnforceSmbEncryption.Set(&v)
}
// SetEnforceSmbEncryptionNil sets the value for EnforceSmbEncryption to be an explicit nil
func (o *CreateView) SetEnforceSmbEncryptionNil() {
	o.EnforceSmbEncryption.Set(nil)
}

// UnsetEnforceSmbEncryption ensures that no value is present for EnforceSmbEncryption, not even an explicit nil
func (o *CreateView) UnsetEnforceSmbEncryption() {
	o.EnforceSmbEncryption.Unset()
}

// GetSharePermissions returns the SharePermissions field value if set, zero value otherwise.
func (o *CreateView) GetSharePermissions() SmbConfigSharePermissions {
	if o == nil || IsNil(o.SharePermissions) {
		var ret SmbConfigSharePermissions
		return ret
	}
	return *o.SharePermissions
}

// GetSharePermissionsOk returns a tuple with the SharePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetSharePermissionsOk() (*SmbConfigSharePermissions, bool) {
	if o == nil || IsNil(o.SharePermissions) {
		return nil, false
	}
	return o.SharePermissions, true
}

// HasSharePermissions returns a boolean if a field has been set.
func (o *CreateView) HasSharePermissions() bool {
	if o != nil && !IsNil(o.SharePermissions) {
		return true
	}

	return false
}

// SetSharePermissions gets a reference to the given SmbConfigSharePermissions and assigns it to the SharePermissions field.
func (o *CreateView) SetSharePermissions(v SmbConfigSharePermissions) {
	o.SharePermissions = &v
}

// GetSmbPermissionsInfo returns the SmbPermissionsInfo field value if set, zero value otherwise.
func (o *CreateView) GetSmbPermissionsInfo() SmbConfigSmbPermissionsInfo {
	if o == nil || IsNil(o.SmbPermissionsInfo) {
		var ret SmbConfigSmbPermissionsInfo
		return ret
	}
	return *o.SmbPermissionsInfo
}

// GetSmbPermissionsInfoOk returns a tuple with the SmbPermissionsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetSmbPermissionsInfoOk() (*SmbConfigSmbPermissionsInfo, bool) {
	if o == nil || IsNil(o.SmbPermissionsInfo) {
		return nil, false
	}
	return o.SmbPermissionsInfo, true
}

// HasSmbPermissionsInfo returns a boolean if a field has been set.
func (o *CreateView) HasSmbPermissionsInfo() bool {
	if o != nil && !IsNil(o.SmbPermissionsInfo) {
		return true
	}

	return false
}

// SetSmbPermissionsInfo gets a reference to the given SmbConfigSmbPermissionsInfo and assigns it to the SmbPermissionsInfo field.
func (o *CreateView) SetSmbPermissionsInfo(v SmbConfigSmbPermissionsInfo) {
	o.SmbPermissionsInfo = &v
}

// GetAclConfig returns the AclConfig field value if set, zero value otherwise.
func (o *CreateView) GetAclConfig() S3ConfigAclConfig {
	if o == nil || IsNil(o.AclConfig) {
		var ret S3ConfigAclConfig
		return ret
	}
	return *o.AclConfig
}

// GetAclConfigOk returns a tuple with the AclConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetAclConfigOk() (*S3ConfigAclConfig, bool) {
	if o == nil || IsNil(o.AclConfig) {
		return nil, false
	}
	return o.AclConfig, true
}

// HasAclConfig returns a boolean if a field has been set.
func (o *CreateView) HasAclConfig() bool {
	if o != nil && !IsNil(o.AclConfig) {
		return true
	}

	return false
}

// SetAclConfig gets a reference to the given S3ConfigAclConfig and assigns it to the AclConfig field.
func (o *CreateView) SetAclConfig(v S3ConfigAclConfig) {
	o.AclConfig = &v
}

// GetBucketPolicy returns the BucketPolicy field value if set, zero value otherwise.
func (o *CreateView) GetBucketPolicy() S3ConfigBucketPolicy {
	if o == nil || IsNil(o.BucketPolicy) {
		var ret S3ConfigBucketPolicy
		return ret
	}
	return *o.BucketPolicy
}

// GetBucketPolicyOk returns a tuple with the BucketPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetBucketPolicyOk() (*S3ConfigBucketPolicy, bool) {
	if o == nil || IsNil(o.BucketPolicy) {
		return nil, false
	}
	return o.BucketPolicy, true
}

// HasBucketPolicy returns a boolean if a field has been set.
func (o *CreateView) HasBucketPolicy() bool {
	if o != nil && !IsNil(o.BucketPolicy) {
		return true
	}

	return false
}

// SetBucketPolicy gets a reference to the given S3ConfigBucketPolicy and assigns it to the BucketPolicy field.
func (o *CreateView) SetBucketPolicy(v S3ConfigBucketPolicy) {
	o.BucketPolicy = &v
}

// GetEnableAbac returns the EnableAbac field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetEnableAbac() bool {
	if o == nil || IsNil(o.EnableAbac.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableAbac.Get()
}

// GetEnableAbacOk returns a tuple with the EnableAbac field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetEnableAbacOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableAbac.Get(), o.EnableAbac.IsSet()
}

// HasEnableAbac returns a boolean if a field has been set.
func (o *CreateView) HasEnableAbac() bool {
	if o != nil && o.EnableAbac.IsSet() {
		return true
	}

	return false
}

// SetEnableAbac gets a reference to the given NullableBool and assigns it to the EnableAbac field.
func (o *CreateView) SetEnableAbac(v bool) {
	o.EnableAbac.Set(&v)
}
// SetEnableAbacNil sets the value for EnableAbac to be an explicit nil
func (o *CreateView) SetEnableAbacNil() {
	o.EnableAbac.Set(nil)
}

// UnsetEnableAbac ensures that no value is present for EnableAbac, not even an explicit nil
func (o *CreateView) UnsetEnableAbac() {
	o.EnableAbac.Unset()
}

// GetLifecycleManagement returns the LifecycleManagement field value if set, zero value otherwise.
func (o *CreateView) GetLifecycleManagement() S3ConfigLifecycleManagement {
	if o == nil || IsNil(o.LifecycleManagement) {
		var ret S3ConfigLifecycleManagement
		return ret
	}
	return *o.LifecycleManagement
}

// GetLifecycleManagementOk returns a tuple with the LifecycleManagement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetLifecycleManagementOk() (*S3ConfigLifecycleManagement, bool) {
	if o == nil || IsNil(o.LifecycleManagement) {
		return nil, false
	}
	return o.LifecycleManagement, true
}

// HasLifecycleManagement returns a boolean if a field has been set.
func (o *CreateView) HasLifecycleManagement() bool {
	if o != nil && !IsNil(o.LifecycleManagement) {
		return true
	}

	return false
}

// SetLifecycleManagement gets a reference to the given S3ConfigLifecycleManagement and assigns it to the LifecycleManagement field.
func (o *CreateView) SetLifecycleManagement(v S3ConfigLifecycleManagement) {
	o.LifecycleManagement = &v
}

// GetOwnerInfo returns the OwnerInfo field value if set, zero value otherwise.
func (o *CreateView) GetOwnerInfo() S3ConfigOwnerInfo {
	if o == nil || IsNil(o.OwnerInfo) {
		var ret S3ConfigOwnerInfo
		return ret
	}
	return *o.OwnerInfo
}

// GetOwnerInfoOk returns a tuple with the OwnerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetOwnerInfoOk() (*S3ConfigOwnerInfo, bool) {
	if o == nil || IsNil(o.OwnerInfo) {
		return nil, false
	}
	return o.OwnerInfo, true
}

// HasOwnerInfo returns a boolean if a field has been set.
func (o *CreateView) HasOwnerInfo() bool {
	if o != nil && !IsNil(o.OwnerInfo) {
		return true
	}

	return false
}

// SetOwnerInfo gets a reference to the given S3ConfigOwnerInfo and assigns it to the OwnerInfo field.
func (o *CreateView) SetOwnerInfo(v S3ConfigOwnerInfo) {
	o.OwnerInfo = &v
}

// GetS3AccessPath returns the S3AccessPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetS3AccessPath() string {
	if o == nil || IsNil(o.S3AccessPath.Get()) {
		var ret string
		return ret
	}
	return *o.S3AccessPath.Get()
}

// GetS3AccessPathOk returns a tuple with the S3AccessPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetS3AccessPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3AccessPath.Get(), o.S3AccessPath.IsSet()
}

// HasS3AccessPath returns a boolean if a field has been set.
func (o *CreateView) HasS3AccessPath() bool {
	if o != nil && o.S3AccessPath.IsSet() {
		return true
	}

	return false
}

// SetS3AccessPath gets a reference to the given NullableString and assigns it to the S3AccessPath field.
func (o *CreateView) SetS3AccessPath(v string) {
	o.S3AccessPath.Set(&v)
}
// SetS3AccessPathNil sets the value for S3AccessPath to be an explicit nil
func (o *CreateView) SetS3AccessPathNil() {
	o.S3AccessPath.Set(nil)
}

// UnsetS3AccessPath ensures that no value is present for S3AccessPath, not even an explicit nil
func (o *CreateView) UnsetS3AccessPath() {
	o.S3AccessPath.Unset()
}

// GetS3EfficientMpuMaxSubfiles returns the S3EfficientMpuMaxSubfiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetS3EfficientMpuMaxSubfiles() int32 {
	if o == nil || IsNil(o.S3EfficientMpuMaxSubfiles.Get()) {
		var ret int32
		return ret
	}
	return *o.S3EfficientMpuMaxSubfiles.Get()
}

// GetS3EfficientMpuMaxSubfilesOk returns a tuple with the S3EfficientMpuMaxSubfiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetS3EfficientMpuMaxSubfilesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3EfficientMpuMaxSubfiles.Get(), o.S3EfficientMpuMaxSubfiles.IsSet()
}

// HasS3EfficientMpuMaxSubfiles returns a boolean if a field has been set.
func (o *CreateView) HasS3EfficientMpuMaxSubfiles() bool {
	if o != nil && o.S3EfficientMpuMaxSubfiles.IsSet() {
		return true
	}

	return false
}

// SetS3EfficientMpuMaxSubfiles gets a reference to the given NullableInt32 and assigns it to the S3EfficientMpuMaxSubfiles field.
func (o *CreateView) SetS3EfficientMpuMaxSubfiles(v int32) {
	o.S3EfficientMpuMaxSubfiles.Set(&v)
}
// SetS3EfficientMpuMaxSubfilesNil sets the value for S3EfficientMpuMaxSubfiles to be an explicit nil
func (o *CreateView) SetS3EfficientMpuMaxSubfilesNil() {
	o.S3EfficientMpuMaxSubfiles.Set(nil)
}

// UnsetS3EfficientMpuMaxSubfiles ensures that no value is present for S3EfficientMpuMaxSubfiles, not even an explicit nil
func (o *CreateView) UnsetS3EfficientMpuMaxSubfiles() {
	o.S3EfficientMpuMaxSubfiles.Unset()
}

// GetS3EnableEfficientMpu returns the S3EnableEfficientMpu field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetS3EnableEfficientMpu() bool {
	if o == nil || IsNil(o.S3EnableEfficientMpu.Get()) {
		var ret bool
		return ret
	}
	return *o.S3EnableEfficientMpu.Get()
}

// GetS3EnableEfficientMpuOk returns a tuple with the S3EnableEfficientMpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetS3EnableEfficientMpuOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3EnableEfficientMpu.Get(), o.S3EnableEfficientMpu.IsSet()
}

// HasS3EnableEfficientMpu returns a boolean if a field has been set.
func (o *CreateView) HasS3EnableEfficientMpu() bool {
	if o != nil && o.S3EnableEfficientMpu.IsSet() {
		return true
	}

	return false
}

// SetS3EnableEfficientMpu gets a reference to the given NullableBool and assigns it to the S3EnableEfficientMpu field.
func (o *CreateView) SetS3EnableEfficientMpu(v bool) {
	o.S3EnableEfficientMpu.Set(&v)
}
// SetS3EnableEfficientMpuNil sets the value for S3EnableEfficientMpu to be an explicit nil
func (o *CreateView) SetS3EnableEfficientMpuNil() {
	o.S3EnableEfficientMpu.Set(nil)
}

// UnsetS3EnableEfficientMpu ensures that no value is present for S3EnableEfficientMpu, not even an explicit nil
func (o *CreateView) UnsetS3EnableEfficientMpu() {
	o.S3EnableEfficientMpu.Unset()
}

// GetS3MigrationAction returns the S3MigrationAction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetS3MigrationAction() string {
	if o == nil || IsNil(o.S3MigrationAction.Get()) {
		var ret string
		return ret
	}
	return *o.S3MigrationAction.Get()
}

// GetS3MigrationActionOk returns a tuple with the S3MigrationAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetS3MigrationActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3MigrationAction.Get(), o.S3MigrationAction.IsSet()
}

// HasS3MigrationAction returns a boolean if a field has been set.
func (o *CreateView) HasS3MigrationAction() bool {
	if o != nil && o.S3MigrationAction.IsSet() {
		return true
	}

	return false
}

// SetS3MigrationAction gets a reference to the given NullableString and assigns it to the S3MigrationAction field.
func (o *CreateView) SetS3MigrationAction(v string) {
	o.S3MigrationAction.Set(&v)
}
// SetS3MigrationActionNil sets the value for S3MigrationAction to be an explicit nil
func (o *CreateView) SetS3MigrationActionNil() {
	o.S3MigrationAction.Set(nil)
}

// UnsetS3MigrationAction ensures that no value is present for S3MigrationAction, not even an explicit nil
func (o *CreateView) UnsetS3MigrationAction() {
	o.S3MigrationAction.Unset()
}

// GetS3MigrationState returns the S3MigrationState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetS3MigrationState() string {
	if o == nil || IsNil(o.S3MigrationState.Get()) {
		var ret string
		return ret
	}
	return *o.S3MigrationState.Get()
}

// GetS3MigrationStateOk returns a tuple with the S3MigrationState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetS3MigrationStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3MigrationState.Get(), o.S3MigrationState.IsSet()
}

// HasS3MigrationState returns a boolean if a field has been set.
func (o *CreateView) HasS3MigrationState() bool {
	if o != nil && o.S3MigrationState.IsSet() {
		return true
	}

	return false
}

// SetS3MigrationState gets a reference to the given NullableString and assigns it to the S3MigrationState field.
func (o *CreateView) SetS3MigrationState(v string) {
	o.S3MigrationState.Set(&v)
}
// SetS3MigrationStateNil sets the value for S3MigrationState to be an explicit nil
func (o *CreateView) SetS3MigrationStateNil() {
	o.S3MigrationState.Set(nil)
}

// UnsetS3MigrationState ensures that no value is present for S3MigrationState, not even an explicit nil
func (o *CreateView) UnsetS3MigrationState() {
	o.S3MigrationState.Unset()
}

// GetVersioning returns the Versioning field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetVersioning() string {
	if o == nil || IsNil(o.Versioning.Get()) {
		var ret string
		return ret
	}
	return *o.Versioning.Get()
}

// GetVersioningOk returns a tuple with the Versioning field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetVersioningOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Versioning.Get(), o.Versioning.IsSet()
}

// HasVersioning returns a boolean if a field has been set.
func (o *CreateView) HasVersioning() bool {
	if o != nil && o.Versioning.IsSet() {
		return true
	}

	return false
}

// SetVersioning gets a reference to the given NullableString and assigns it to the Versioning field.
func (o *CreateView) SetVersioning(v string) {
	o.Versioning.Set(&v)
}
// SetVersioningNil sets the value for Versioning to be an explicit nil
func (o *CreateView) SetVersioningNil() {
	o.Versioning.Set(nil)
}

// UnsetVersioning ensures that no value is present for Versioning, not even an explicit nil
func (o *CreateView) UnsetVersioning() {
	o.Versioning.Unset()
}

// GetSwiftProjectDomain returns the SwiftProjectDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetSwiftProjectDomain() string {
	if o == nil || IsNil(o.SwiftProjectDomain.Get()) {
		var ret string
		return ret
	}
	return *o.SwiftProjectDomain.Get()
}

// GetSwiftProjectDomainOk returns a tuple with the SwiftProjectDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetSwiftProjectDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SwiftProjectDomain.Get(), o.SwiftProjectDomain.IsSet()
}

// HasSwiftProjectDomain returns a boolean if a field has been set.
func (o *CreateView) HasSwiftProjectDomain() bool {
	if o != nil && o.SwiftProjectDomain.IsSet() {
		return true
	}

	return false
}

// SetSwiftProjectDomain gets a reference to the given NullableString and assigns it to the SwiftProjectDomain field.
func (o *CreateView) SetSwiftProjectDomain(v string) {
	o.SwiftProjectDomain.Set(&v)
}
// SetSwiftProjectDomainNil sets the value for SwiftProjectDomain to be an explicit nil
func (o *CreateView) SetSwiftProjectDomainNil() {
	o.SwiftProjectDomain.Set(nil)
}

// UnsetSwiftProjectDomain ensures that no value is present for SwiftProjectDomain, not even an explicit nil
func (o *CreateView) UnsetSwiftProjectDomain() {
	o.SwiftProjectDomain.Unset()
}

// GetSwiftProjectName returns the SwiftProjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetSwiftProjectName() string {
	if o == nil || IsNil(o.SwiftProjectName.Get()) {
		var ret string
		return ret
	}
	return *o.SwiftProjectName.Get()
}

// GetSwiftProjectNameOk returns a tuple with the SwiftProjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetSwiftProjectNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SwiftProjectName.Get(), o.SwiftProjectName.IsSet()
}

// HasSwiftProjectName returns a boolean if a field has been set.
func (o *CreateView) HasSwiftProjectName() bool {
	if o != nil && o.SwiftProjectName.IsSet() {
		return true
	}

	return false
}

// SetSwiftProjectName gets a reference to the given NullableString and assigns it to the SwiftProjectName field.
func (o *CreateView) SetSwiftProjectName(v string) {
	o.SwiftProjectName.Set(&v)
}
// SetSwiftProjectNameNil sets the value for SwiftProjectName to be an explicit nil
func (o *CreateView) SetSwiftProjectNameNil() {
	o.SwiftProjectName.Set(nil)
}

// UnsetSwiftProjectName ensures that no value is present for SwiftProjectName, not even an explicit nil
func (o *CreateView) UnsetSwiftProjectName() {
	o.SwiftProjectName.Unset()
}

// GetSwiftUserDomain returns the SwiftUserDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetSwiftUserDomain() string {
	if o == nil || IsNil(o.SwiftUserDomain.Get()) {
		var ret string
		return ret
	}
	return *o.SwiftUserDomain.Get()
}

// GetSwiftUserDomainOk returns a tuple with the SwiftUserDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetSwiftUserDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SwiftUserDomain.Get(), o.SwiftUserDomain.IsSet()
}

// HasSwiftUserDomain returns a boolean if a field has been set.
func (o *CreateView) HasSwiftUserDomain() bool {
	if o != nil && o.SwiftUserDomain.IsSet() {
		return true
	}

	return false
}

// SetSwiftUserDomain gets a reference to the given NullableString and assigns it to the SwiftUserDomain field.
func (o *CreateView) SetSwiftUserDomain(v string) {
	o.SwiftUserDomain.Set(&v)
}
// SetSwiftUserDomainNil sets the value for SwiftUserDomain to be an explicit nil
func (o *CreateView) SetSwiftUserDomainNil() {
	o.SwiftUserDomain.Set(nil)
}

// UnsetSwiftUserDomain ensures that no value is present for SwiftUserDomain, not even an explicit nil
func (o *CreateView) UnsetSwiftUserDomain() {
	o.SwiftUserDomain.Unset()
}

// GetSwiftUsername returns the SwiftUsername field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetSwiftUsername() string {
	if o == nil || IsNil(o.SwiftUsername.Get()) {
		var ret string
		return ret
	}
	return *o.SwiftUsername.Get()
}

// GetSwiftUsernameOk returns a tuple with the SwiftUsername field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetSwiftUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SwiftUsername.Get(), o.SwiftUsername.IsSet()
}

// HasSwiftUsername returns a boolean if a field has been set.
func (o *CreateView) HasSwiftUsername() bool {
	if o != nil && o.SwiftUsername.IsSet() {
		return true
	}

	return false
}

// SetSwiftUsername gets a reference to the given NullableString and assigns it to the SwiftUsername field.
func (o *CreateView) SetSwiftUsername(v string) {
	o.SwiftUsername.Set(&v)
}
// SetSwiftUsernameNil sets the value for SwiftUsername to be an explicit nil
func (o *CreateView) SetSwiftUsernameNil() {
	o.SwiftUsername.Set(nil)
}

// UnsetSwiftUsername ensures that no value is present for SwiftUsername, not even an explicit nil
func (o *CreateView) UnsetSwiftUsername() {
	o.SwiftUsername.Unset()
}

// GetCaseInsensitiveNamesEnabled returns the CaseInsensitiveNamesEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetCaseInsensitiveNamesEnabled() bool {
	if o == nil || IsNil(o.CaseInsensitiveNamesEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.CaseInsensitiveNamesEnabled.Get()
}

// GetCaseInsensitiveNamesEnabledOk returns a tuple with the CaseInsensitiveNamesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetCaseInsensitiveNamesEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaseInsensitiveNamesEnabled.Get(), o.CaseInsensitiveNamesEnabled.IsSet()
}

// HasCaseInsensitiveNamesEnabled returns a boolean if a field has been set.
func (o *CreateView) HasCaseInsensitiveNamesEnabled() bool {
	if o != nil && o.CaseInsensitiveNamesEnabled.IsSet() {
		return true
	}

	return false
}

// SetCaseInsensitiveNamesEnabled gets a reference to the given NullableBool and assigns it to the CaseInsensitiveNamesEnabled field.
func (o *CreateView) SetCaseInsensitiveNamesEnabled(v bool) {
	o.CaseInsensitiveNamesEnabled.Set(&v)
}
// SetCaseInsensitiveNamesEnabledNil sets the value for CaseInsensitiveNamesEnabled to be an explicit nil
func (o *CreateView) SetCaseInsensitiveNamesEnabledNil() {
	o.CaseInsensitiveNamesEnabled.Set(nil)
}

// UnsetCaseInsensitiveNamesEnabled ensures that no value is present for CaseInsensitiveNamesEnabled, not even an explicit nil
func (o *CreateView) UnsetCaseInsensitiveNamesEnabled() {
	o.CaseInsensitiveNamesEnabled.Unset()
}

// GetIntent returns the Intent field value if set, zero value otherwise.
func (o *CreateView) GetIntent() map[string]interface{} {
	if o == nil || IsNil(o.Intent) {
		var ret map[string]interface{}
		return ret
	}
	return o.Intent
}

// GetIntentOk returns a tuple with the Intent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetIntentOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Intent) {
		return map[string]interface{}{}, false
	}
	return o.Intent, true
}

// HasIntent returns a boolean if a field has been set.
func (o *CreateView) HasIntent() bool {
	if o != nil && !IsNil(o.Intent) {
		return true
	}

	return false
}

// SetIntent gets a reference to the given map[string]interface{} and assigns it to the Intent field.
func (o *CreateView) SetIntent(v map[string]interface{}) {
	o.Intent = v
}

// GetObjectServicesMappingConfig returns the ObjectServicesMappingConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetObjectServicesMappingConfig() string {
	if o == nil || IsNil(o.ObjectServicesMappingConfig.Get()) {
		var ret string
		return ret
	}
	return *o.ObjectServicesMappingConfig.Get()
}

// GetObjectServicesMappingConfigOk returns a tuple with the ObjectServicesMappingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetObjectServicesMappingConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectServicesMappingConfig.Get(), o.ObjectServicesMappingConfig.IsSet()
}

// HasObjectServicesMappingConfig returns a boolean if a field has been set.
func (o *CreateView) HasObjectServicesMappingConfig() bool {
	if o != nil && o.ObjectServicesMappingConfig.IsSet() {
		return true
	}

	return false
}

// SetObjectServicesMappingConfig gets a reference to the given NullableString and assigns it to the ObjectServicesMappingConfig field.
func (o *CreateView) SetObjectServicesMappingConfig(v string) {
	o.ObjectServicesMappingConfig.Set(&v)
}
// SetObjectServicesMappingConfigNil sets the value for ObjectServicesMappingConfig to be an explicit nil
func (o *CreateView) SetObjectServicesMappingConfigNil() {
	o.ObjectServicesMappingConfig.Set(nil)
}

// UnsetObjectServicesMappingConfig ensures that no value is present for ObjectServicesMappingConfig, not even an explicit nil
func (o *CreateView) UnsetObjectServicesMappingConfig() {
	o.ObjectServicesMappingConfig.Unset()
}

// GetS3FolderSupportEnabled returns the S3FolderSupportEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateView) GetS3FolderSupportEnabled() bool {
	if o == nil || IsNil(o.S3FolderSupportEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.S3FolderSupportEnabled.Get()
}

// GetS3FolderSupportEnabledOk returns a tuple with the S3FolderSupportEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetS3FolderSupportEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3FolderSupportEnabled.Get(), o.S3FolderSupportEnabled.IsSet()
}

// HasS3FolderSupportEnabled returns a boolean if a field has been set.
func (o *CreateView) HasS3FolderSupportEnabled() bool {
	if o != nil && o.S3FolderSupportEnabled.IsSet() {
		return true
	}

	return false
}

// SetS3FolderSupportEnabled gets a reference to the given NullableBool and assigns it to the S3FolderSupportEnabled field.
func (o *CreateView) SetS3FolderSupportEnabled(v bool) {
	o.S3FolderSupportEnabled.Set(&v)
}
// SetS3FolderSupportEnabledNil sets the value for S3FolderSupportEnabled to be an explicit nil
func (o *CreateView) SetS3FolderSupportEnabledNil() {
	o.S3FolderSupportEnabled.Set(nil)
}

// UnsetS3FolderSupportEnabled ensures that no value is present for S3FolderSupportEnabled, not even an explicit nil
func (o *CreateView) UnsetS3FolderSupportEnabled() {
	o.S3FolderSupportEnabled.Unset()
}

// GetStorageDomainId returns the StorageDomainId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *CreateView) GetStorageDomainId() int64 {
	if o == nil || o.StorageDomainId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.StorageDomainId.Get()
}

// GetStorageDomainIdOk returns a tuple with the StorageDomainId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateView) GetStorageDomainIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageDomainId.Get(), o.StorageDomainId.IsSet()
}

// SetStorageDomainId sets field value
func (o *CreateView) SetStorageDomainId(v int64) {
	o.StorageDomainId.Set(&v)
}

// GetViewProtectionConfig returns the ViewProtectionConfig field value if set, zero value otherwise.
func (o *CreateView) GetViewProtectionConfig() map[string]interface{} {
	if o == nil || IsNil(o.ViewProtectionConfig) {
		var ret map[string]interface{}
		return ret
	}
	return o.ViewProtectionConfig
}

// GetViewProtectionConfigOk returns a tuple with the ViewProtectionConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateView) GetViewProtectionConfigOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.ViewProtectionConfig) {
		return map[string]interface{}{}, false
	}
	return o.ViewProtectionConfig, true
}

// HasViewProtectionConfig returns a boolean if a field has been set.
func (o *CreateView) HasViewProtectionConfig() bool {
	if o != nil && !IsNil(o.ViewProtectionConfig) {
		return true
	}

	return false
}

// SetViewProtectionConfig gets a reference to the given map[string]interface{} and assigns it to the ViewProtectionConfig field.
func (o *CreateView) SetViewProtectionConfig(v map[string]interface{}) {
	o.ViewProtectionConfig = v
}

func (o CreateView) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessSids != nil {
		toSerialize["accessSids"] = o.AccessSids
	}
	if o.AllowMountOnWindows.IsSet() {
		toSerialize["allowMountOnWindows"] = o.AllowMountOnWindows.Get()
	}
	if !IsNil(o.AntivirusScanConfig) {
		toSerialize["antivirusScanConfig"] = o.AntivirusScanConfig
	}
	toSerialize["category"] = o.Category.Get()
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.EnableFilerAuditLogging.IsSet() {
		toSerialize["enableFilerAuditLogging"] = o.EnableFilerAuditLogging.Get()
	}
	if o.EnableLiveIndexing.IsSet() {
		toSerialize["enableLiveIndexing"] = o.EnableLiveIndexing.Get()
	}
	if o.EnableMetadataAccelerator.IsSet() {
		toSerialize["enableMetadataAccelerator"] = o.EnableMetadataAccelerator.Get()
	}
	if o.EnableMinion.IsSet() {
		toSerialize["enableMinion"] = o.EnableMinion.Get()
	}
	if o.EnableOfflineCaching.IsSet() {
		toSerialize["enableOfflineCaching"] = o.EnableOfflineCaching.Get()
	}
	if !IsNil(o.FileExtensionFilter) {
		toSerialize["fileExtensionFilter"] = o.FileExtensionFilter
	}
	if !IsNil(o.FileLockConfig) {
		toSerialize["fileLockConfig"] = o.FileLockConfig
	}
	if !IsNil(o.FilerLifecycleManagement) {
		toSerialize["filerLifecycleManagement"] = o.FilerLifecycleManagement
	}
	if o.IsExternallyTriggeredBackupTarget.IsSet() {
		toSerialize["isExternallyTriggeredBackupTarget"] = o.IsExternallyTriggeredBackupTarget.Get()
	}
	if o.IsReadOnly.IsSet() {
		toSerialize["isReadOnly"] = o.IsReadOnly.Get()
	}
	if o.LexicographicPrefetch.IsSet() {
		toSerialize["lexicographicPrefetch"] = o.LexicographicPrefetch.Get()
	}
	if !IsNil(o.LogicalQuota) {
		toSerialize["logicalQuota"] = o.LogicalQuota
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.NetgroupWhitelist) {
		toSerialize["netgroupWhitelist"] = o.NetgroupWhitelist
	}
	if o.OverrideGlobalNetgroupWhitelist.IsSet() {
		toSerialize["overrideGlobalNetgroupWhitelist"] = o.OverrideGlobalNetgroupWhitelist.Get()
	}
	if o.OverrideGlobalSubnetWhitelist.IsSet() {
		toSerialize["overrideGlobalSubnetWhitelist"] = o.OverrideGlobalSubnetWhitelist.Get()
	}
	if o.ProtocolAccess != nil {
		toSerialize["protocolAccess"] = o.ProtocolAccess
	}
	toSerialize["qos"] = o.Qos
	if o.SecurityMode.IsSet() {
		toSerialize["securityMode"] = o.SecurityMode.Get()
	}
	if !IsNil(o.SelfServiceSnapshotConfig) {
		toSerialize["selfServiceSnapshotConfig"] = o.SelfServiceSnapshotConfig
	}
	if !IsNil(o.StoragePolicyOverride) {
		toSerialize["storagePolicyOverride"] = o.StoragePolicyOverride
	}
	if o.SubnetWhitelist != nil {
		toSerialize["subnetWhitelist"] = o.SubnetWhitelist
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.ViewLockEnabled.IsSet() {
		toSerialize["viewLockEnabled"] = o.ViewLockEnabled.Get()
	}
	if !IsNil(o.ViewPinningConfig) {
		toSerialize["viewPinningConfig"] = o.ViewPinningConfig
	}
	if o.EnableNfsKerberosAuthentication.IsSet() {
		toSerialize["enableNfsKerberosAuthentication"] = o.EnableNfsKerberosAuthentication.Get()
	}
	if o.EnableNfsKerberosIntegrity.IsSet() {
		toSerialize["enableNfsKerberosIntegrity"] = o.EnableNfsKerberosIntegrity.Get()
	}
	if o.EnableNfsKerberosPrivacy.IsSet() {
		toSerialize["enableNfsKerberosPrivacy"] = o.EnableNfsKerberosPrivacy.Get()
	}
	if o.EnableNfsUnixAuthentication.IsSet() {
		toSerialize["enableNfsUnixAuthentication"] = o.EnableNfsUnixAuthentication.Get()
	}
	if o.EnableNfsViewDiscovery.IsSet() {
		toSerialize["enableNfsViewDiscovery"] = o.EnableNfsViewDiscovery.Get()
	}
	if o.EnableNfsWcc.IsSet() {
		toSerialize["enableNfsWcc"] = o.EnableNfsWcc.Get()
	}
	if !IsNil(o.NfsAllSquash) {
		toSerialize["nfsAllSquash"] = o.NfsAllSquash
	}
	if !IsNil(o.NfsRootPermissions) {
		toSerialize["nfsRootPermissions"] = o.NfsRootPermissions
	}
	if !IsNil(o.NfsRootSquash) {
		toSerialize["nfsRootSquash"] = o.NfsRootSquash
	}
	if o.EnableFastDurableHandle.IsSet() {
		toSerialize["enableFastDurableHandle"] = o.EnableFastDurableHandle.Get()
	}
	if o.EnableSmbAccessBasedEnumeration.IsSet() {
		toSerialize["enableSmbAccessBasedEnumeration"] = o.EnableSmbAccessBasedEnumeration.Get()
	}
	if o.EnableSmbEncryption.IsSet() {
		toSerialize["enableSmbEncryption"] = o.EnableSmbEncryption.Get()
	}
	if o.EnableSmbOplock.IsSet() {
		toSerialize["enableSmbOplock"] = o.EnableSmbOplock.Get()
	}
	if o.EnableSmbViewDiscovery.IsSet() {
		toSerialize["enableSmbViewDiscovery"] = o.EnableSmbViewDiscovery.Get()
	}
	if o.EnforceSmbEncryption.IsSet() {
		toSerialize["enforceSmbEncryption"] = o.EnforceSmbEncryption.Get()
	}
	if !IsNil(o.SharePermissions) {
		toSerialize["sharePermissions"] = o.SharePermissions
	}
	if !IsNil(o.SmbPermissionsInfo) {
		toSerialize["smbPermissionsInfo"] = o.SmbPermissionsInfo
	}
	if !IsNil(o.AclConfig) {
		toSerialize["aclConfig"] = o.AclConfig
	}
	if !IsNil(o.BucketPolicy) {
		toSerialize["bucketPolicy"] = o.BucketPolicy
	}
	if o.EnableAbac.IsSet() {
		toSerialize["enableAbac"] = o.EnableAbac.Get()
	}
	if !IsNil(o.LifecycleManagement) {
		toSerialize["lifecycleManagement"] = o.LifecycleManagement
	}
	if !IsNil(o.OwnerInfo) {
		toSerialize["ownerInfo"] = o.OwnerInfo
	}
	if o.S3AccessPath.IsSet() {
		toSerialize["s3AccessPath"] = o.S3AccessPath.Get()
	}
	if o.S3EfficientMpuMaxSubfiles.IsSet() {
		toSerialize["s3EfficientMpuMaxSubfiles"] = o.S3EfficientMpuMaxSubfiles.Get()
	}
	if o.S3EnableEfficientMpu.IsSet() {
		toSerialize["s3EnableEfficientMpu"] = o.S3EnableEfficientMpu.Get()
	}
	if o.S3MigrationAction.IsSet() {
		toSerialize["s3MigrationAction"] = o.S3MigrationAction.Get()
	}
	if o.S3MigrationState.IsSet() {
		toSerialize["s3MigrationState"] = o.S3MigrationState.Get()
	}
	if o.Versioning.IsSet() {
		toSerialize["versioning"] = o.Versioning.Get()
	}
	if o.SwiftProjectDomain.IsSet() {
		toSerialize["swiftProjectDomain"] = o.SwiftProjectDomain.Get()
	}
	if o.SwiftProjectName.IsSet() {
		toSerialize["swiftProjectName"] = o.SwiftProjectName.Get()
	}
	if o.SwiftUserDomain.IsSet() {
		toSerialize["swiftUserDomain"] = o.SwiftUserDomain.Get()
	}
	if o.SwiftUsername.IsSet() {
		toSerialize["swiftUsername"] = o.SwiftUsername.Get()
	}
	if o.CaseInsensitiveNamesEnabled.IsSet() {
		toSerialize["caseInsensitiveNamesEnabled"] = o.CaseInsensitiveNamesEnabled.Get()
	}
	if !IsNil(o.Intent) {
		toSerialize["intent"] = o.Intent
	}
	if o.ObjectServicesMappingConfig.IsSet() {
		toSerialize["objectServicesMappingConfig"] = o.ObjectServicesMappingConfig.Get()
	}
	if o.S3FolderSupportEnabled.IsSet() {
		toSerialize["s3FolderSupportEnabled"] = o.S3FolderSupportEnabled.Get()
	}
	toSerialize["storageDomainId"] = o.StorageDomainId.Get()
	if !IsNil(o.ViewProtectionConfig) {
		toSerialize["viewProtectionConfig"] = o.ViewProtectionConfig
	}
	return toSerialize, nil
}

func (o *CreateView) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"category",
		"protocolAccess",
		"qos",
		"storageDomainId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateView := _CreateView{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateView)

	if err != nil {
		return err
	}

	*o = CreateView(varCreateView)

	return err
}

type NullableCreateView struct {
	value *CreateView
	isSet bool
}

func (v NullableCreateView) Get() *CreateView {
	return v.value
}

func (v *NullableCreateView) Set(val *CreateView) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateView) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateView(val *CreateView) *NullableCreateView {
	return &NullableCreateView{value: val, isSet: true}
}

func (v NullableCreateView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


