/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverAcropolisVmNewSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverAcropolisVmNewSourceConfig{}

// RecoverAcropolisVmNewSourceConfig Specifies the new destination Source configuration where the VMs will be recovered.
type RecoverAcropolisVmNewSourceConfig struct {
	NetworkConfig NullableRecoverAcropolisVmNewSourceConfigNetworkConfig `json:"networkConfig,omitempty"`
	Source NullableRecoverAcropolisVmNewSourceConfigSource `json:"source"`
	StorageContainer NullableRecoverAcropolisVmNewSourceConfigStorageContainer `json:"storageContainer,omitempty"`
}

type _RecoverAcropolisVmNewSourceConfig RecoverAcropolisVmNewSourceConfig

// NewRecoverAcropolisVmNewSourceConfig instantiates a new RecoverAcropolisVmNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAcropolisVmNewSourceConfig(source NullableRecoverAcropolisVmNewSourceConfigSource) *RecoverAcropolisVmNewSourceConfig {
	this := RecoverAcropolisVmNewSourceConfig{}
	this.Source = source
	return &this
}

// NewRecoverAcropolisVmNewSourceConfigWithDefaults instantiates a new RecoverAcropolisVmNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAcropolisVmNewSourceConfigWithDefaults() *RecoverAcropolisVmNewSourceConfig {
	this := RecoverAcropolisVmNewSourceConfig{}
	return &this
}

// GetNetworkConfig returns the NetworkConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAcropolisVmNewSourceConfig) GetNetworkConfig() RecoverAcropolisVmNewSourceConfigNetworkConfig {
	if o == nil || IsNil(o.NetworkConfig.Get()) {
		var ret RecoverAcropolisVmNewSourceConfigNetworkConfig
		return ret
	}
	return *o.NetworkConfig.Get()
}

// GetNetworkConfigOk returns a tuple with the NetworkConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAcropolisVmNewSourceConfig) GetNetworkConfigOk() (*RecoverAcropolisVmNewSourceConfigNetworkConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkConfig.Get(), o.NetworkConfig.IsSet()
}

// HasNetworkConfig returns a boolean if a field has been set.
func (o *RecoverAcropolisVmNewSourceConfig) HasNetworkConfig() bool {
	if o != nil && o.NetworkConfig.IsSet() {
		return true
	}

	return false
}

// SetNetworkConfig gets a reference to the given NullableRecoverAcropolisVmNewSourceConfigNetworkConfig and assigns it to the NetworkConfig field.
func (o *RecoverAcropolisVmNewSourceConfig) SetNetworkConfig(v RecoverAcropolisVmNewSourceConfigNetworkConfig) {
	o.NetworkConfig.Set(&v)
}
// SetNetworkConfigNil sets the value for NetworkConfig to be an explicit nil
func (o *RecoverAcropolisVmNewSourceConfig) SetNetworkConfigNil() {
	o.NetworkConfig.Set(nil)
}

// UnsetNetworkConfig ensures that no value is present for NetworkConfig, not even an explicit nil
func (o *RecoverAcropolisVmNewSourceConfig) UnsetNetworkConfig() {
	o.NetworkConfig.Unset()
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoverAcropolisVmNewSourceConfigSource will be returned
func (o *RecoverAcropolisVmNewSourceConfig) GetSource() RecoverAcropolisVmNewSourceConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret RecoverAcropolisVmNewSourceConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAcropolisVmNewSourceConfig) GetSourceOk() (*RecoverAcropolisVmNewSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *RecoverAcropolisVmNewSourceConfig) SetSource(v RecoverAcropolisVmNewSourceConfigSource) {
	o.Source.Set(&v)
}

// GetStorageContainer returns the StorageContainer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAcropolisVmNewSourceConfig) GetStorageContainer() RecoverAcropolisVmNewSourceConfigStorageContainer {
	if o == nil || IsNil(o.StorageContainer.Get()) {
		var ret RecoverAcropolisVmNewSourceConfigStorageContainer
		return ret
	}
	return *o.StorageContainer.Get()
}

// GetStorageContainerOk returns a tuple with the StorageContainer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAcropolisVmNewSourceConfig) GetStorageContainerOk() (*RecoverAcropolisVmNewSourceConfigStorageContainer, bool) {
	if o == nil {
		return nil, false
	}
	return o.StorageContainer.Get(), o.StorageContainer.IsSet()
}

// HasStorageContainer returns a boolean if a field has been set.
func (o *RecoverAcropolisVmNewSourceConfig) HasStorageContainer() bool {
	if o != nil && o.StorageContainer.IsSet() {
		return true
	}

	return false
}

// SetStorageContainer gets a reference to the given NullableRecoverAcropolisVmNewSourceConfigStorageContainer and assigns it to the StorageContainer field.
func (o *RecoverAcropolisVmNewSourceConfig) SetStorageContainer(v RecoverAcropolisVmNewSourceConfigStorageContainer) {
	o.StorageContainer.Set(&v)
}
// SetStorageContainerNil sets the value for StorageContainer to be an explicit nil
func (o *RecoverAcropolisVmNewSourceConfig) SetStorageContainerNil() {
	o.StorageContainer.Set(nil)
}

// UnsetStorageContainer ensures that no value is present for StorageContainer, not even an explicit nil
func (o *RecoverAcropolisVmNewSourceConfig) UnsetStorageContainer() {
	o.StorageContainer.Unset()
}

func (o RecoverAcropolisVmNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverAcropolisVmNewSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkConfig.IsSet() {
		toSerialize["networkConfig"] = o.NetworkConfig.Get()
	}
	toSerialize["source"] = o.Source.Get()
	if o.StorageContainer.IsSet() {
		toSerialize["storageContainer"] = o.StorageContainer.Get()
	}
	return toSerialize, nil
}

func (o *RecoverAcropolisVmNewSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverAcropolisVmNewSourceConfig := _RecoverAcropolisVmNewSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverAcropolisVmNewSourceConfig)

	if err != nil {
		return err
	}

	*o = RecoverAcropolisVmNewSourceConfig(varRecoverAcropolisVmNewSourceConfig)

	return err
}

type NullableRecoverAcropolisVmNewSourceConfig struct {
	value *RecoverAcropolisVmNewSourceConfig
	isSet bool
}

func (v NullableRecoverAcropolisVmNewSourceConfig) Get() *RecoverAcropolisVmNewSourceConfig {
	return v.value
}

func (v *NullableRecoverAcropolisVmNewSourceConfig) Set(val *RecoverAcropolisVmNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAcropolisVmNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAcropolisVmNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAcropolisVmNewSourceConfig(val *RecoverAcropolisVmNewSourceConfig) *NullableRecoverAcropolisVmNewSourceConfig {
	return &NullableRecoverAcropolisVmNewSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverAcropolisVmNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAcropolisVmNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


