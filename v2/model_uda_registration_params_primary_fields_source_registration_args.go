/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs{}

// UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs Specifies custom arguments to be supplied to the source registration.
type UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs struct {
	// Default value for the field.
	DefaultValue NullableString `json:"defaultValue,omitempty"`
	// Specifies if the field will be hidden on the UI screen or not.
	Hidden NullableBool `json:"hidden,omitempty"`
	// Whether the field will be only a readonly field on the UI.
	Readonly NullableBool `json:"readonly,omitempty"`
	// Whether the field is mandatory.
	Required NullableBool `json:"required,omitempty"`
}

// NewUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs instantiates a new UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs() *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs {
	this := UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs{}
	return &this
}

// NewUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgsWithDefaults instantiates a new UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgsWithDefaults() *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs {
	this := UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}
// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetHidden returns the Hidden field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) GetHidden() bool {
	if o == nil || IsNil(o.Hidden.Get()) {
		var ret bool
		return ret
	}
	return *o.Hidden.Get()
}

// GetHiddenOk returns a tuple with the Hidden field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) GetHiddenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hidden.Get(), o.Hidden.IsSet()
}

// HasHidden returns a boolean if a field has been set.
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) HasHidden() bool {
	if o != nil && o.Hidden.IsSet() {
		return true
	}

	return false
}

// SetHidden gets a reference to the given NullableBool and assigns it to the Hidden field.
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) SetHidden(v bool) {
	o.Hidden.Set(&v)
}
// SetHiddenNil sets the value for Hidden to be an explicit nil
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) SetHiddenNil() {
	o.Hidden.Set(nil)
}

// UnsetHidden ensures that no value is present for Hidden, not even an explicit nil
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) UnsetHidden() {
	o.Hidden.Unset()
}

// GetReadonly returns the Readonly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) GetReadonly() bool {
	if o == nil || IsNil(o.Readonly.Get()) {
		var ret bool
		return ret
	}
	return *o.Readonly.Get()
}

// GetReadonlyOk returns a tuple with the Readonly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) GetReadonlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Readonly.Get(), o.Readonly.IsSet()
}

// HasReadonly returns a boolean if a field has been set.
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) HasReadonly() bool {
	if o != nil && o.Readonly.IsSet() {
		return true
	}

	return false
}

// SetReadonly gets a reference to the given NullableBool and assigns it to the Readonly field.
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) SetReadonly(v bool) {
	o.Readonly.Set(&v)
}
// SetReadonlyNil sets the value for Readonly to be an explicit nil
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) SetReadonlyNil() {
	o.Readonly.Set(nil)
}

// UnsetReadonly ensures that no value is present for Readonly, not even an explicit nil
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) UnsetReadonly() {
	o.Readonly.Unset()
}

// GetRequired returns the Required field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) GetRequired() bool {
	if o == nil || IsNil(o.Required.Get()) {
		var ret bool
		return ret
	}
	return *o.Required.Get()
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Required.Get(), o.Required.IsSet()
}

// HasRequired returns a boolean if a field has been set.
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) HasRequired() bool {
	if o != nil && o.Required.IsSet() {
		return true
	}

	return false
}

// SetRequired gets a reference to the given NullableBool and assigns it to the Required field.
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) SetRequired(v bool) {
	o.Required.Set(&v)
}
// SetRequiredNil sets the value for Required to be an explicit nil
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) SetRequiredNil() {
	o.Required.Set(nil)
}

// UnsetRequired ensures that no value is present for Required, not even an explicit nil
func (o *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) UnsetRequired() {
	o.Required.Unset()
}

func (o UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if o.Hidden.IsSet() {
		toSerialize["hidden"] = o.Hidden.Get()
	}
	if o.Readonly.IsSet() {
		toSerialize["readonly"] = o.Readonly.Get()
	}
	if o.Required.IsSet() {
		toSerialize["required"] = o.Required.Get()
	}
	return toSerialize, nil
}

type NullableUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs struct {
	value *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs
	isSet bool
}

func (v NullableUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) Get() *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs {
	return v.value
}

func (v *NullableUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) Set(val *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs(val *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) *NullableUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs {
	return &NullableUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs{value: val, isSet: true}
}

func (v NullableUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


