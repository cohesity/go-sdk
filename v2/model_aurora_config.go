/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AuroraConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AuroraConfig{}

// AuroraConfig Specifies the parameters to recover AWS Aurora.
type AuroraConfig struct {
	// Specifies the DB instance identifier to use for the restored DB.
	DbInstanceId NullableString `json:"dbInstanceId"`
	DbOptionGroup NullableAuroraConfigDbOptionGroup `json:"dbOptionGroup,omitempty"`
	DbParameterGroup NullableAuroraConfigDbParameterGroup `json:"dbParameterGroup,omitempty"`
	// Specifies the port to use for the DB in the restored Aurora instance.
	DbPort NullableInt32 `json:"dbPort"`
	// Specifies whether to enable auto minor version upgrade in the restored DB.
	EnableAutoMinorVersionUpgrade NullableBool `json:"enableAutoMinorVersionUpgrade"`
	// Specifies whether to enable copying of tags to snapshots of the DB.
	EnableCopyTagsToSnapshots NullableBool `json:"enableCopyTagsToSnapshots"`
	// Specifies whether to enable IAM authentication for the DB.
	EnableIamDbAuthentication NullableBool `json:"enableIamDbAuthentication"`
	// Specifies whether this DB will be publicly accessible or not.
	EnablePublicAccessibility NullableBool `json:"enablePublicAccessibility,omitempty"`
	// Specifies whether this is a multi-az deployment or not.
	IsMultiAzDeployment NullableBool `json:"isMultiAzDeployment"`
	// Specifies a point in time for recovery in microseconds.
	PointInTimeUsecs NullableInt64 `json:"pointInTimeUsecs,omitempty"`
}

type _AuroraConfig AuroraConfig

// NewAuroraConfig instantiates a new AuroraConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuroraConfig(dbInstanceId NullableString, dbPort NullableInt32, enableAutoMinorVersionUpgrade NullableBool, enableCopyTagsToSnapshots NullableBool, enableIamDbAuthentication NullableBool, isMultiAzDeployment NullableBool) *AuroraConfig {
	this := AuroraConfig{}
	this.DbInstanceId = dbInstanceId
	this.DbPort = dbPort
	this.EnableAutoMinorVersionUpgrade = enableAutoMinorVersionUpgrade
	this.EnableCopyTagsToSnapshots = enableCopyTagsToSnapshots
	this.EnableIamDbAuthentication = enableIamDbAuthentication
	this.IsMultiAzDeployment = isMultiAzDeployment
	return &this
}

// NewAuroraConfigWithDefaults instantiates a new AuroraConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuroraConfigWithDefaults() *AuroraConfig {
	this := AuroraConfig{}
	return &this
}

// GetDbInstanceId returns the DbInstanceId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AuroraConfig) GetDbInstanceId() string {
	if o == nil || o.DbInstanceId.Get() == nil {
		var ret string
		return ret
	}

	return *o.DbInstanceId.Get()
}

// GetDbInstanceIdOk returns a tuple with the DbInstanceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuroraConfig) GetDbInstanceIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DbInstanceId.Get(), o.DbInstanceId.IsSet()
}

// SetDbInstanceId sets field value
func (o *AuroraConfig) SetDbInstanceId(v string) {
	o.DbInstanceId.Set(&v)
}

// GetDbOptionGroup returns the DbOptionGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuroraConfig) GetDbOptionGroup() AuroraConfigDbOptionGroup {
	if o == nil || IsNil(o.DbOptionGroup.Get()) {
		var ret AuroraConfigDbOptionGroup
		return ret
	}
	return *o.DbOptionGroup.Get()
}

// GetDbOptionGroupOk returns a tuple with the DbOptionGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuroraConfig) GetDbOptionGroupOk() (*AuroraConfigDbOptionGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.DbOptionGroup.Get(), o.DbOptionGroup.IsSet()
}

// HasDbOptionGroup returns a boolean if a field has been set.
func (o *AuroraConfig) HasDbOptionGroup() bool {
	if o != nil && o.DbOptionGroup.IsSet() {
		return true
	}

	return false
}

// SetDbOptionGroup gets a reference to the given NullableAuroraConfigDbOptionGroup and assigns it to the DbOptionGroup field.
func (o *AuroraConfig) SetDbOptionGroup(v AuroraConfigDbOptionGroup) {
	o.DbOptionGroup.Set(&v)
}
// SetDbOptionGroupNil sets the value for DbOptionGroup to be an explicit nil
func (o *AuroraConfig) SetDbOptionGroupNil() {
	o.DbOptionGroup.Set(nil)
}

// UnsetDbOptionGroup ensures that no value is present for DbOptionGroup, not even an explicit nil
func (o *AuroraConfig) UnsetDbOptionGroup() {
	o.DbOptionGroup.Unset()
}

// GetDbParameterGroup returns the DbParameterGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuroraConfig) GetDbParameterGroup() AuroraConfigDbParameterGroup {
	if o == nil || IsNil(o.DbParameterGroup.Get()) {
		var ret AuroraConfigDbParameterGroup
		return ret
	}
	return *o.DbParameterGroup.Get()
}

// GetDbParameterGroupOk returns a tuple with the DbParameterGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuroraConfig) GetDbParameterGroupOk() (*AuroraConfigDbParameterGroup, bool) {
	if o == nil {
		return nil, false
	}
	return o.DbParameterGroup.Get(), o.DbParameterGroup.IsSet()
}

// HasDbParameterGroup returns a boolean if a field has been set.
func (o *AuroraConfig) HasDbParameterGroup() bool {
	if o != nil && o.DbParameterGroup.IsSet() {
		return true
	}

	return false
}

// SetDbParameterGroup gets a reference to the given NullableAuroraConfigDbParameterGroup and assigns it to the DbParameterGroup field.
func (o *AuroraConfig) SetDbParameterGroup(v AuroraConfigDbParameterGroup) {
	o.DbParameterGroup.Set(&v)
}
// SetDbParameterGroupNil sets the value for DbParameterGroup to be an explicit nil
func (o *AuroraConfig) SetDbParameterGroupNil() {
	o.DbParameterGroup.Set(nil)
}

// UnsetDbParameterGroup ensures that no value is present for DbParameterGroup, not even an explicit nil
func (o *AuroraConfig) UnsetDbParameterGroup() {
	o.DbParameterGroup.Unset()
}

// GetDbPort returns the DbPort field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *AuroraConfig) GetDbPort() int32 {
	if o == nil || o.DbPort.Get() == nil {
		var ret int32
		return ret
	}

	return *o.DbPort.Get()
}

// GetDbPortOk returns a tuple with the DbPort field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuroraConfig) GetDbPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.DbPort.Get(), o.DbPort.IsSet()
}

// SetDbPort sets field value
func (o *AuroraConfig) SetDbPort(v int32) {
	o.DbPort.Set(&v)
}

// GetEnableAutoMinorVersionUpgrade returns the EnableAutoMinorVersionUpgrade field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *AuroraConfig) GetEnableAutoMinorVersionUpgrade() bool {
	if o == nil || o.EnableAutoMinorVersionUpgrade.Get() == nil {
		var ret bool
		return ret
	}

	return *o.EnableAutoMinorVersionUpgrade.Get()
}

// GetEnableAutoMinorVersionUpgradeOk returns a tuple with the EnableAutoMinorVersionUpgrade field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuroraConfig) GetEnableAutoMinorVersionUpgradeOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableAutoMinorVersionUpgrade.Get(), o.EnableAutoMinorVersionUpgrade.IsSet()
}

// SetEnableAutoMinorVersionUpgrade sets field value
func (o *AuroraConfig) SetEnableAutoMinorVersionUpgrade(v bool) {
	o.EnableAutoMinorVersionUpgrade.Set(&v)
}

// GetEnableCopyTagsToSnapshots returns the EnableCopyTagsToSnapshots field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *AuroraConfig) GetEnableCopyTagsToSnapshots() bool {
	if o == nil || o.EnableCopyTagsToSnapshots.Get() == nil {
		var ret bool
		return ret
	}

	return *o.EnableCopyTagsToSnapshots.Get()
}

// GetEnableCopyTagsToSnapshotsOk returns a tuple with the EnableCopyTagsToSnapshots field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuroraConfig) GetEnableCopyTagsToSnapshotsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableCopyTagsToSnapshots.Get(), o.EnableCopyTagsToSnapshots.IsSet()
}

// SetEnableCopyTagsToSnapshots sets field value
func (o *AuroraConfig) SetEnableCopyTagsToSnapshots(v bool) {
	o.EnableCopyTagsToSnapshots.Set(&v)
}

// GetEnableIamDbAuthentication returns the EnableIamDbAuthentication field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *AuroraConfig) GetEnableIamDbAuthentication() bool {
	if o == nil || o.EnableIamDbAuthentication.Get() == nil {
		var ret bool
		return ret
	}

	return *o.EnableIamDbAuthentication.Get()
}

// GetEnableIamDbAuthenticationOk returns a tuple with the EnableIamDbAuthentication field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuroraConfig) GetEnableIamDbAuthenticationOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableIamDbAuthentication.Get(), o.EnableIamDbAuthentication.IsSet()
}

// SetEnableIamDbAuthentication sets field value
func (o *AuroraConfig) SetEnableIamDbAuthentication(v bool) {
	o.EnableIamDbAuthentication.Set(&v)
}

// GetEnablePublicAccessibility returns the EnablePublicAccessibility field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuroraConfig) GetEnablePublicAccessibility() bool {
	if o == nil || IsNil(o.EnablePublicAccessibility.Get()) {
		var ret bool
		return ret
	}
	return *o.EnablePublicAccessibility.Get()
}

// GetEnablePublicAccessibilityOk returns a tuple with the EnablePublicAccessibility field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuroraConfig) GetEnablePublicAccessibilityOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnablePublicAccessibility.Get(), o.EnablePublicAccessibility.IsSet()
}

// HasEnablePublicAccessibility returns a boolean if a field has been set.
func (o *AuroraConfig) HasEnablePublicAccessibility() bool {
	if o != nil && o.EnablePublicAccessibility.IsSet() {
		return true
	}

	return false
}

// SetEnablePublicAccessibility gets a reference to the given NullableBool and assigns it to the EnablePublicAccessibility field.
func (o *AuroraConfig) SetEnablePublicAccessibility(v bool) {
	o.EnablePublicAccessibility.Set(&v)
}
// SetEnablePublicAccessibilityNil sets the value for EnablePublicAccessibility to be an explicit nil
func (o *AuroraConfig) SetEnablePublicAccessibilityNil() {
	o.EnablePublicAccessibility.Set(nil)
}

// UnsetEnablePublicAccessibility ensures that no value is present for EnablePublicAccessibility, not even an explicit nil
func (o *AuroraConfig) UnsetEnablePublicAccessibility() {
	o.EnablePublicAccessibility.Unset()
}

// GetIsMultiAzDeployment returns the IsMultiAzDeployment field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *AuroraConfig) GetIsMultiAzDeployment() bool {
	if o == nil || o.IsMultiAzDeployment.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsMultiAzDeployment.Get()
}

// GetIsMultiAzDeploymentOk returns a tuple with the IsMultiAzDeployment field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuroraConfig) GetIsMultiAzDeploymentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsMultiAzDeployment.Get(), o.IsMultiAzDeployment.IsSet()
}

// SetIsMultiAzDeployment sets field value
func (o *AuroraConfig) SetIsMultiAzDeployment(v bool) {
	o.IsMultiAzDeployment.Set(&v)
}

// GetPointInTimeUsecs returns the PointInTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AuroraConfig) GetPointInTimeUsecs() int64 {
	if o == nil || IsNil(o.PointInTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.PointInTimeUsecs.Get()
}

// GetPointInTimeUsecsOk returns a tuple with the PointInTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AuroraConfig) GetPointInTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.PointInTimeUsecs.Get(), o.PointInTimeUsecs.IsSet()
}

// HasPointInTimeUsecs returns a boolean if a field has been set.
func (o *AuroraConfig) HasPointInTimeUsecs() bool {
	if o != nil && o.PointInTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetPointInTimeUsecs gets a reference to the given NullableInt64 and assigns it to the PointInTimeUsecs field.
func (o *AuroraConfig) SetPointInTimeUsecs(v int64) {
	o.PointInTimeUsecs.Set(&v)
}
// SetPointInTimeUsecsNil sets the value for PointInTimeUsecs to be an explicit nil
func (o *AuroraConfig) SetPointInTimeUsecsNil() {
	o.PointInTimeUsecs.Set(nil)
}

// UnsetPointInTimeUsecs ensures that no value is present for PointInTimeUsecs, not even an explicit nil
func (o *AuroraConfig) UnsetPointInTimeUsecs() {
	o.PointInTimeUsecs.Unset()
}

func (o AuroraConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AuroraConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["dbInstanceId"] = o.DbInstanceId.Get()
	if o.DbOptionGroup.IsSet() {
		toSerialize["dbOptionGroup"] = o.DbOptionGroup.Get()
	}
	if o.DbParameterGroup.IsSet() {
		toSerialize["dbParameterGroup"] = o.DbParameterGroup.Get()
	}
	toSerialize["dbPort"] = o.DbPort.Get()
	toSerialize["enableAutoMinorVersionUpgrade"] = o.EnableAutoMinorVersionUpgrade.Get()
	toSerialize["enableCopyTagsToSnapshots"] = o.EnableCopyTagsToSnapshots.Get()
	toSerialize["enableIamDbAuthentication"] = o.EnableIamDbAuthentication.Get()
	if o.EnablePublicAccessibility.IsSet() {
		toSerialize["enablePublicAccessibility"] = o.EnablePublicAccessibility.Get()
	}
	toSerialize["isMultiAzDeployment"] = o.IsMultiAzDeployment.Get()
	if o.PointInTimeUsecs.IsSet() {
		toSerialize["pointInTimeUsecs"] = o.PointInTimeUsecs.Get()
	}
	return toSerialize, nil
}

func (o *AuroraConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"dbInstanceId",
		"dbPort",
		"enableAutoMinorVersionUpgrade",
		"enableCopyTagsToSnapshots",
		"enableIamDbAuthentication",
		"isMultiAzDeployment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAuroraConfig := _AuroraConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAuroraConfig)

	if err != nil {
		return err
	}

	*o = AuroraConfig(varAuroraConfig)

	return err
}

type NullableAuroraConfig struct {
	value *AuroraConfig
	isSet bool
}

func (v NullableAuroraConfig) Get() *AuroraConfig {
	return v.value
}

func (v *NullableAuroraConfig) Set(val *AuroraConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAuroraConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAuroraConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuroraConfig(val *AuroraConfig) *NullableAuroraConfig {
	return &NullableAuroraConfig{value: val, isSet: true}
}

func (v NullableAuroraConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuroraConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


