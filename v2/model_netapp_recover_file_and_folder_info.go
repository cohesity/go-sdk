/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the NetappRecoverFileAndFolderInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetappRecoverFileAndFolderInfo{}

// NetappRecoverFileAndFolderInfo Specifies the info about the netapp files and folders to be recovered.
type NetappRecoverFileAndFolderInfo struct {
	// Specifies the absolute path to the file or folder.
	AbsolutePath NullableString `json:"absolutePath"`
	// Specifies the destination directory where the file/directory was copied.
	DestinationDir NullableString `json:"destinationDir,omitempty"`
	// Specifies whether this is a directory or not.
	IsDirectory NullableBool `json:"isDirectory,omitempty"`
	// Specify if the recovery is of type view file/folder.
	IsViewFileRecovery NullableBool `json:"isViewFileRecovery,omitempty"`
	// Specify error messages about the file during recovery.
	Messages []string `json:"messages,omitempty"`
	// Specifies the recovery status for this file or folder.
	Status NullableString `json:"status,omitempty"`
	// Specifies the source inode number of the file being recovered.
	InodeId NullableInt64 `json:"inodeId,omitempty"`
}

type _NetappRecoverFileAndFolderInfo NetappRecoverFileAndFolderInfo

// NewNetappRecoverFileAndFolderInfo instantiates a new NetappRecoverFileAndFolderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetappRecoverFileAndFolderInfo(absolutePath NullableString) *NetappRecoverFileAndFolderInfo {
	this := NetappRecoverFileAndFolderInfo{}
	this.AbsolutePath = absolutePath
	return &this
}

// NewNetappRecoverFileAndFolderInfoWithDefaults instantiates a new NetappRecoverFileAndFolderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetappRecoverFileAndFolderInfoWithDefaults() *NetappRecoverFileAndFolderInfo {
	this := NetappRecoverFileAndFolderInfo{}
	return &this
}

// GetAbsolutePath returns the AbsolutePath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NetappRecoverFileAndFolderInfo) GetAbsolutePath() string {
	if o == nil || o.AbsolutePath.Get() == nil {
		var ret string
		return ret
	}

	return *o.AbsolutePath.Get()
}

// GetAbsolutePathOk returns a tuple with the AbsolutePath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRecoverFileAndFolderInfo) GetAbsolutePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AbsolutePath.Get(), o.AbsolutePath.IsSet()
}

// SetAbsolutePath sets field value
func (o *NetappRecoverFileAndFolderInfo) SetAbsolutePath(v string) {
	o.AbsolutePath.Set(&v)
}

// GetDestinationDir returns the DestinationDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappRecoverFileAndFolderInfo) GetDestinationDir() string {
	if o == nil || IsNil(o.DestinationDir.Get()) {
		var ret string
		return ret
	}
	return *o.DestinationDir.Get()
}

// GetDestinationDirOk returns a tuple with the DestinationDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRecoverFileAndFolderInfo) GetDestinationDirOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DestinationDir.Get(), o.DestinationDir.IsSet()
}

// HasDestinationDir returns a boolean if a field has been set.
func (o *NetappRecoverFileAndFolderInfo) HasDestinationDir() bool {
	if o != nil && o.DestinationDir.IsSet() {
		return true
	}

	return false
}

// SetDestinationDir gets a reference to the given NullableString and assigns it to the DestinationDir field.
func (o *NetappRecoverFileAndFolderInfo) SetDestinationDir(v string) {
	o.DestinationDir.Set(&v)
}
// SetDestinationDirNil sets the value for DestinationDir to be an explicit nil
func (o *NetappRecoverFileAndFolderInfo) SetDestinationDirNil() {
	o.DestinationDir.Set(nil)
}

// UnsetDestinationDir ensures that no value is present for DestinationDir, not even an explicit nil
func (o *NetappRecoverFileAndFolderInfo) UnsetDestinationDir() {
	o.DestinationDir.Unset()
}

// GetIsDirectory returns the IsDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappRecoverFileAndFolderInfo) GetIsDirectory() bool {
	if o == nil || IsNil(o.IsDirectory.Get()) {
		var ret bool
		return ret
	}
	return *o.IsDirectory.Get()
}

// GetIsDirectoryOk returns a tuple with the IsDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRecoverFileAndFolderInfo) GetIsDirectoryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsDirectory.Get(), o.IsDirectory.IsSet()
}

// HasIsDirectory returns a boolean if a field has been set.
func (o *NetappRecoverFileAndFolderInfo) HasIsDirectory() bool {
	if o != nil && o.IsDirectory.IsSet() {
		return true
	}

	return false
}

// SetIsDirectory gets a reference to the given NullableBool and assigns it to the IsDirectory field.
func (o *NetappRecoverFileAndFolderInfo) SetIsDirectory(v bool) {
	o.IsDirectory.Set(&v)
}
// SetIsDirectoryNil sets the value for IsDirectory to be an explicit nil
func (o *NetappRecoverFileAndFolderInfo) SetIsDirectoryNil() {
	o.IsDirectory.Set(nil)
}

// UnsetIsDirectory ensures that no value is present for IsDirectory, not even an explicit nil
func (o *NetappRecoverFileAndFolderInfo) UnsetIsDirectory() {
	o.IsDirectory.Unset()
}

// GetIsViewFileRecovery returns the IsViewFileRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappRecoverFileAndFolderInfo) GetIsViewFileRecovery() bool {
	if o == nil || IsNil(o.IsViewFileRecovery.Get()) {
		var ret bool
		return ret
	}
	return *o.IsViewFileRecovery.Get()
}

// GetIsViewFileRecoveryOk returns a tuple with the IsViewFileRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRecoverFileAndFolderInfo) GetIsViewFileRecoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsViewFileRecovery.Get(), o.IsViewFileRecovery.IsSet()
}

// HasIsViewFileRecovery returns a boolean if a field has been set.
func (o *NetappRecoverFileAndFolderInfo) HasIsViewFileRecovery() bool {
	if o != nil && o.IsViewFileRecovery.IsSet() {
		return true
	}

	return false
}

// SetIsViewFileRecovery gets a reference to the given NullableBool and assigns it to the IsViewFileRecovery field.
func (o *NetappRecoverFileAndFolderInfo) SetIsViewFileRecovery(v bool) {
	o.IsViewFileRecovery.Set(&v)
}
// SetIsViewFileRecoveryNil sets the value for IsViewFileRecovery to be an explicit nil
func (o *NetappRecoverFileAndFolderInfo) SetIsViewFileRecoveryNil() {
	o.IsViewFileRecovery.Set(nil)
}

// UnsetIsViewFileRecovery ensures that no value is present for IsViewFileRecovery, not even an explicit nil
func (o *NetappRecoverFileAndFolderInfo) UnsetIsViewFileRecovery() {
	o.IsViewFileRecovery.Unset()
}

// GetMessages returns the Messages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappRecoverFileAndFolderInfo) GetMessages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRecoverFileAndFolderInfo) GetMessagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *NetappRecoverFileAndFolderInfo) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []string and assigns it to the Messages field.
func (o *NetappRecoverFileAndFolderInfo) SetMessages(v []string) {
	o.Messages = v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappRecoverFileAndFolderInfo) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRecoverFileAndFolderInfo) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *NetappRecoverFileAndFolderInfo) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *NetappRecoverFileAndFolderInfo) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *NetappRecoverFileAndFolderInfo) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *NetappRecoverFileAndFolderInfo) UnsetStatus() {
	o.Status.Unset()
}

// GetInodeId returns the InodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappRecoverFileAndFolderInfo) GetInodeId() int64 {
	if o == nil || IsNil(o.InodeId.Get()) {
		var ret int64
		return ret
	}
	return *o.InodeId.Get()
}

// GetInodeIdOk returns a tuple with the InodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappRecoverFileAndFolderInfo) GetInodeIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.InodeId.Get(), o.InodeId.IsSet()
}

// HasInodeId returns a boolean if a field has been set.
func (o *NetappRecoverFileAndFolderInfo) HasInodeId() bool {
	if o != nil && o.InodeId.IsSet() {
		return true
	}

	return false
}

// SetInodeId gets a reference to the given NullableInt64 and assigns it to the InodeId field.
func (o *NetappRecoverFileAndFolderInfo) SetInodeId(v int64) {
	o.InodeId.Set(&v)
}
// SetInodeIdNil sets the value for InodeId to be an explicit nil
func (o *NetappRecoverFileAndFolderInfo) SetInodeIdNil() {
	o.InodeId.Set(nil)
}

// UnsetInodeId ensures that no value is present for InodeId, not even an explicit nil
func (o *NetappRecoverFileAndFolderInfo) UnsetInodeId() {
	o.InodeId.Unset()
}

func (o NetappRecoverFileAndFolderInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetappRecoverFileAndFolderInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["absolutePath"] = o.AbsolutePath.Get()
	if o.DestinationDir.IsSet() {
		toSerialize["destinationDir"] = o.DestinationDir.Get()
	}
	if o.IsDirectory.IsSet() {
		toSerialize["isDirectory"] = o.IsDirectory.Get()
	}
	if o.IsViewFileRecovery.IsSet() {
		toSerialize["isViewFileRecovery"] = o.IsViewFileRecovery.Get()
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.InodeId.IsSet() {
		toSerialize["inodeId"] = o.InodeId.Get()
	}
	return toSerialize, nil
}

func (o *NetappRecoverFileAndFolderInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"absolutePath",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varNetappRecoverFileAndFolderInfo := _NetappRecoverFileAndFolderInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varNetappRecoverFileAndFolderInfo)

	if err != nil {
		return err
	}

	*o = NetappRecoverFileAndFolderInfo(varNetappRecoverFileAndFolderInfo)

	return err
}

type NullableNetappRecoverFileAndFolderInfo struct {
	value *NetappRecoverFileAndFolderInfo
	isSet bool
}

func (v NullableNetappRecoverFileAndFolderInfo) Get() *NetappRecoverFileAndFolderInfo {
	return v.value
}

func (v *NullableNetappRecoverFileAndFolderInfo) Set(val *NetappRecoverFileAndFolderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNetappRecoverFileAndFolderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNetappRecoverFileAndFolderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetappRecoverFileAndFolderInfo(val *NetappRecoverFileAndFolderInfo) *NullableNetappRecoverFileAndFolderInfo {
	return &NullableNetappRecoverFileAndFolderInfo{value: val, isSet: true}
}

func (v NullableNetappRecoverFileAndFolderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetappRecoverFileAndFolderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


