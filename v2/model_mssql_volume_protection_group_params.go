/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MSSQLVolumeProtectionGroupParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MSSQLVolumeProtectionGroupParams{}

// MSSQLVolumeProtectionGroupParams Specifies the params to create a Volume based MSSQL Protection Group.
type MSSQLVolumeProtectionGroupParams struct {
	// Specifies the preference type for backing up databases that are part of an AAG. If not specified, then default preferences of the AAG server are applied. This field wont be applicable if user DB preference is set to skip AAG databases.
	AagBackupPreferenceType NullableString `json:"aagBackupPreferenceType,omitempty"`
	AdvancedSettings *AdvancedSettings `json:"advancedSettings,omitempty"`
	// Specifies whether to backup system databases. If not specified then parameter is set to true.
	BackupSystemDbs NullableBool `json:"backupSystemDbs,omitempty"`
	// Specifies the list of exclusion filters applied during the group creation or edit. These exclusion filters can be wildcard supported strings or regular expressions. Objects satisfying the will filters will be excluded during backup and also auto protected objects will be ignored if filtered by any of the filters.
	ExcludeFilters []Filter `json:"excludeFilters,omitempty"`
	// Specifies whether full backups should be copy-only.
	FullBackupsCopyOnly NullableBool `json:"fullBackupsCopyOnly,omitempty"`
	// Specifies the number of streams to be used for log backups.
	LogBackupNumStreams NullableInt32 `json:"logBackupNumStreams,omitempty"`
	// Specifies the WithClause to be used for log backups.
	LogBackupWithClause NullableString `json:"logBackupWithClause,omitempty"`
	PrePostScript *PrePostScriptParams `json:"prePostScript,omitempty"`
	// Specifies whether or not the AAG backup preferences specified on the SQL Server host should be used.
	UseAagPreferencesFromServer NullableBool `json:"useAagPreferencesFromServer,omitempty"`
	// Specifies the preference type for backing up user databases on the host.
	UserDbBackupPreferenceType NullableString `json:"userDbBackupPreferenceType,omitempty"`
	// Specifies settings which are to be applied to specific host containers in this protection group.
	AdditionalHostParams []MSSQLVolumeProtectionGroupHostParams `json:"additionalHostParams,omitempty"`
	// Specifies whether to only backup volumes on which the specified databases reside. If not specified (default), all the volumes of the host will be protected.
	BackupDbVolumesOnly NullableBool `json:"backupDbVolumesOnly,omitempty"`
	// Specifies whether or to perform incremental backups the first time after a server restarts. By default, a full backup will be performed.
	IncrementalBackupAfterRestart NullableBool `json:"incrementalBackupAfterRestart,omitempty"`
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	// Specifies the list of object ids to be protected.
	Objects []MSSQLVolumeProtectionGroupObjectParams `json:"objects"`
}

type _MSSQLVolumeProtectionGroupParams MSSQLVolumeProtectionGroupParams

// NewMSSQLVolumeProtectionGroupParams instantiates a new MSSQLVolumeProtectionGroupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMSSQLVolumeProtectionGroupParams(objects []MSSQLVolumeProtectionGroupObjectParams) *MSSQLVolumeProtectionGroupParams {
	this := MSSQLVolumeProtectionGroupParams{}
	this.Objects = objects
	return &this
}

// NewMSSQLVolumeProtectionGroupParamsWithDefaults instantiates a new MSSQLVolumeProtectionGroupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMSSQLVolumeProtectionGroupParamsWithDefaults() *MSSQLVolumeProtectionGroupParams {
	this := MSSQLVolumeProtectionGroupParams{}
	return &this
}

// GetAagBackupPreferenceType returns the AagBackupPreferenceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MSSQLVolumeProtectionGroupParams) GetAagBackupPreferenceType() string {
	if o == nil || IsNil(o.AagBackupPreferenceType.Get()) {
		var ret string
		return ret
	}
	return *o.AagBackupPreferenceType.Get()
}

// GetAagBackupPreferenceTypeOk returns a tuple with the AagBackupPreferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetAagBackupPreferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AagBackupPreferenceType.Get(), o.AagBackupPreferenceType.IsSet()
}

// HasAagBackupPreferenceType returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasAagBackupPreferenceType() bool {
	if o != nil && o.AagBackupPreferenceType.IsSet() {
		return true
	}

	return false
}

// SetAagBackupPreferenceType gets a reference to the given NullableString and assigns it to the AagBackupPreferenceType field.
func (o *MSSQLVolumeProtectionGroupParams) SetAagBackupPreferenceType(v string) {
	o.AagBackupPreferenceType.Set(&v)
}
// SetAagBackupPreferenceTypeNil sets the value for AagBackupPreferenceType to be an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) SetAagBackupPreferenceTypeNil() {
	o.AagBackupPreferenceType.Set(nil)
}

// UnsetAagBackupPreferenceType ensures that no value is present for AagBackupPreferenceType, not even an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) UnsetAagBackupPreferenceType() {
	o.AagBackupPreferenceType.Unset()
}

// GetAdvancedSettings returns the AdvancedSettings field value if set, zero value otherwise.
func (o *MSSQLVolumeProtectionGroupParams) GetAdvancedSettings() AdvancedSettings {
	if o == nil || IsNil(o.AdvancedSettings) {
		var ret AdvancedSettings
		return ret
	}
	return *o.AdvancedSettings
}

// GetAdvancedSettingsOk returns a tuple with the AdvancedSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLVolumeProtectionGroupParams) GetAdvancedSettingsOk() (*AdvancedSettings, bool) {
	if o == nil || IsNil(o.AdvancedSettings) {
		return nil, false
	}
	return o.AdvancedSettings, true
}

// HasAdvancedSettings returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasAdvancedSettings() bool {
	if o != nil && !IsNil(o.AdvancedSettings) {
		return true
	}

	return false
}

// SetAdvancedSettings gets a reference to the given AdvancedSettings and assigns it to the AdvancedSettings field.
func (o *MSSQLVolumeProtectionGroupParams) SetAdvancedSettings(v AdvancedSettings) {
	o.AdvancedSettings = &v
}

// GetBackupSystemDbs returns the BackupSystemDbs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MSSQLVolumeProtectionGroupParams) GetBackupSystemDbs() bool {
	if o == nil || IsNil(o.BackupSystemDbs.Get()) {
		var ret bool
		return ret
	}
	return *o.BackupSystemDbs.Get()
}

// GetBackupSystemDbsOk returns a tuple with the BackupSystemDbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetBackupSystemDbsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupSystemDbs.Get(), o.BackupSystemDbs.IsSet()
}

// HasBackupSystemDbs returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasBackupSystemDbs() bool {
	if o != nil && o.BackupSystemDbs.IsSet() {
		return true
	}

	return false
}

// SetBackupSystemDbs gets a reference to the given NullableBool and assigns it to the BackupSystemDbs field.
func (o *MSSQLVolumeProtectionGroupParams) SetBackupSystemDbs(v bool) {
	o.BackupSystemDbs.Set(&v)
}
// SetBackupSystemDbsNil sets the value for BackupSystemDbs to be an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) SetBackupSystemDbsNil() {
	o.BackupSystemDbs.Set(nil)
}

// UnsetBackupSystemDbs ensures that no value is present for BackupSystemDbs, not even an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) UnsetBackupSystemDbs() {
	o.BackupSystemDbs.Unset()
}

// GetExcludeFilters returns the ExcludeFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MSSQLVolumeProtectionGroupParams) GetExcludeFilters() []Filter {
	if o == nil {
		var ret []Filter
		return ret
	}
	return o.ExcludeFilters
}

// GetExcludeFiltersOk returns a tuple with the ExcludeFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetExcludeFiltersOk() ([]Filter, bool) {
	if o == nil || IsNil(o.ExcludeFilters) {
		return nil, false
	}
	return o.ExcludeFilters, true
}

// HasExcludeFilters returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasExcludeFilters() bool {
	if o != nil && !IsNil(o.ExcludeFilters) {
		return true
	}

	return false
}

// SetExcludeFilters gets a reference to the given []Filter and assigns it to the ExcludeFilters field.
func (o *MSSQLVolumeProtectionGroupParams) SetExcludeFilters(v []Filter) {
	o.ExcludeFilters = v
}

// GetFullBackupsCopyOnly returns the FullBackupsCopyOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MSSQLVolumeProtectionGroupParams) GetFullBackupsCopyOnly() bool {
	if o == nil || IsNil(o.FullBackupsCopyOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.FullBackupsCopyOnly.Get()
}

// GetFullBackupsCopyOnlyOk returns a tuple with the FullBackupsCopyOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetFullBackupsCopyOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullBackupsCopyOnly.Get(), o.FullBackupsCopyOnly.IsSet()
}

// HasFullBackupsCopyOnly returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasFullBackupsCopyOnly() bool {
	if o != nil && o.FullBackupsCopyOnly.IsSet() {
		return true
	}

	return false
}

// SetFullBackupsCopyOnly gets a reference to the given NullableBool and assigns it to the FullBackupsCopyOnly field.
func (o *MSSQLVolumeProtectionGroupParams) SetFullBackupsCopyOnly(v bool) {
	o.FullBackupsCopyOnly.Set(&v)
}
// SetFullBackupsCopyOnlyNil sets the value for FullBackupsCopyOnly to be an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) SetFullBackupsCopyOnlyNil() {
	o.FullBackupsCopyOnly.Set(nil)
}

// UnsetFullBackupsCopyOnly ensures that no value is present for FullBackupsCopyOnly, not even an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) UnsetFullBackupsCopyOnly() {
	o.FullBackupsCopyOnly.Unset()
}

// GetLogBackupNumStreams returns the LogBackupNumStreams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MSSQLVolumeProtectionGroupParams) GetLogBackupNumStreams() int32 {
	if o == nil || IsNil(o.LogBackupNumStreams.Get()) {
		var ret int32
		return ret
	}
	return *o.LogBackupNumStreams.Get()
}

// GetLogBackupNumStreamsOk returns a tuple with the LogBackupNumStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetLogBackupNumStreamsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogBackupNumStreams.Get(), o.LogBackupNumStreams.IsSet()
}

// HasLogBackupNumStreams returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasLogBackupNumStreams() bool {
	if o != nil && o.LogBackupNumStreams.IsSet() {
		return true
	}

	return false
}

// SetLogBackupNumStreams gets a reference to the given NullableInt32 and assigns it to the LogBackupNumStreams field.
func (o *MSSQLVolumeProtectionGroupParams) SetLogBackupNumStreams(v int32) {
	o.LogBackupNumStreams.Set(&v)
}
// SetLogBackupNumStreamsNil sets the value for LogBackupNumStreams to be an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) SetLogBackupNumStreamsNil() {
	o.LogBackupNumStreams.Set(nil)
}

// UnsetLogBackupNumStreams ensures that no value is present for LogBackupNumStreams, not even an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) UnsetLogBackupNumStreams() {
	o.LogBackupNumStreams.Unset()
}

// GetLogBackupWithClause returns the LogBackupWithClause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MSSQLVolumeProtectionGroupParams) GetLogBackupWithClause() string {
	if o == nil || IsNil(o.LogBackupWithClause.Get()) {
		var ret string
		return ret
	}
	return *o.LogBackupWithClause.Get()
}

// GetLogBackupWithClauseOk returns a tuple with the LogBackupWithClause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetLogBackupWithClauseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogBackupWithClause.Get(), o.LogBackupWithClause.IsSet()
}

// HasLogBackupWithClause returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasLogBackupWithClause() bool {
	if o != nil && o.LogBackupWithClause.IsSet() {
		return true
	}

	return false
}

// SetLogBackupWithClause gets a reference to the given NullableString and assigns it to the LogBackupWithClause field.
func (o *MSSQLVolumeProtectionGroupParams) SetLogBackupWithClause(v string) {
	o.LogBackupWithClause.Set(&v)
}
// SetLogBackupWithClauseNil sets the value for LogBackupWithClause to be an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) SetLogBackupWithClauseNil() {
	o.LogBackupWithClause.Set(nil)
}

// UnsetLogBackupWithClause ensures that no value is present for LogBackupWithClause, not even an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) UnsetLogBackupWithClause() {
	o.LogBackupWithClause.Unset()
}

// GetPrePostScript returns the PrePostScript field value if set, zero value otherwise.
func (o *MSSQLVolumeProtectionGroupParams) GetPrePostScript() PrePostScriptParams {
	if o == nil || IsNil(o.PrePostScript) {
		var ret PrePostScriptParams
		return ret
	}
	return *o.PrePostScript
}

// GetPrePostScriptOk returns a tuple with the PrePostScript field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLVolumeProtectionGroupParams) GetPrePostScriptOk() (*PrePostScriptParams, bool) {
	if o == nil || IsNil(o.PrePostScript) {
		return nil, false
	}
	return o.PrePostScript, true
}

// HasPrePostScript returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasPrePostScript() bool {
	if o != nil && !IsNil(o.PrePostScript) {
		return true
	}

	return false
}

// SetPrePostScript gets a reference to the given PrePostScriptParams and assigns it to the PrePostScript field.
func (o *MSSQLVolumeProtectionGroupParams) SetPrePostScript(v PrePostScriptParams) {
	o.PrePostScript = &v
}

// GetUseAagPreferencesFromServer returns the UseAagPreferencesFromServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MSSQLVolumeProtectionGroupParams) GetUseAagPreferencesFromServer() bool {
	if o == nil || IsNil(o.UseAagPreferencesFromServer.Get()) {
		var ret bool
		return ret
	}
	return *o.UseAagPreferencesFromServer.Get()
}

// GetUseAagPreferencesFromServerOk returns a tuple with the UseAagPreferencesFromServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetUseAagPreferencesFromServerOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseAagPreferencesFromServer.Get(), o.UseAagPreferencesFromServer.IsSet()
}

// HasUseAagPreferencesFromServer returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasUseAagPreferencesFromServer() bool {
	if o != nil && o.UseAagPreferencesFromServer.IsSet() {
		return true
	}

	return false
}

// SetUseAagPreferencesFromServer gets a reference to the given NullableBool and assigns it to the UseAagPreferencesFromServer field.
func (o *MSSQLVolumeProtectionGroupParams) SetUseAagPreferencesFromServer(v bool) {
	o.UseAagPreferencesFromServer.Set(&v)
}
// SetUseAagPreferencesFromServerNil sets the value for UseAagPreferencesFromServer to be an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) SetUseAagPreferencesFromServerNil() {
	o.UseAagPreferencesFromServer.Set(nil)
}

// UnsetUseAagPreferencesFromServer ensures that no value is present for UseAagPreferencesFromServer, not even an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) UnsetUseAagPreferencesFromServer() {
	o.UseAagPreferencesFromServer.Unset()
}

// GetUserDbBackupPreferenceType returns the UserDbBackupPreferenceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MSSQLVolumeProtectionGroupParams) GetUserDbBackupPreferenceType() string {
	if o == nil || IsNil(o.UserDbBackupPreferenceType.Get()) {
		var ret string
		return ret
	}
	return *o.UserDbBackupPreferenceType.Get()
}

// GetUserDbBackupPreferenceTypeOk returns a tuple with the UserDbBackupPreferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetUserDbBackupPreferenceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserDbBackupPreferenceType.Get(), o.UserDbBackupPreferenceType.IsSet()
}

// HasUserDbBackupPreferenceType returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasUserDbBackupPreferenceType() bool {
	if o != nil && o.UserDbBackupPreferenceType.IsSet() {
		return true
	}

	return false
}

// SetUserDbBackupPreferenceType gets a reference to the given NullableString and assigns it to the UserDbBackupPreferenceType field.
func (o *MSSQLVolumeProtectionGroupParams) SetUserDbBackupPreferenceType(v string) {
	o.UserDbBackupPreferenceType.Set(&v)
}
// SetUserDbBackupPreferenceTypeNil sets the value for UserDbBackupPreferenceType to be an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) SetUserDbBackupPreferenceTypeNil() {
	o.UserDbBackupPreferenceType.Set(nil)
}

// UnsetUserDbBackupPreferenceType ensures that no value is present for UserDbBackupPreferenceType, not even an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) UnsetUserDbBackupPreferenceType() {
	o.UserDbBackupPreferenceType.Unset()
}

// GetAdditionalHostParams returns the AdditionalHostParams field value if set, zero value otherwise.
func (o *MSSQLVolumeProtectionGroupParams) GetAdditionalHostParams() []MSSQLVolumeProtectionGroupHostParams {
	if o == nil || IsNil(o.AdditionalHostParams) {
		var ret []MSSQLVolumeProtectionGroupHostParams
		return ret
	}
	return o.AdditionalHostParams
}

// GetAdditionalHostParamsOk returns a tuple with the AdditionalHostParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLVolumeProtectionGroupParams) GetAdditionalHostParamsOk() ([]MSSQLVolumeProtectionGroupHostParams, bool) {
	if o == nil || IsNil(o.AdditionalHostParams) {
		return nil, false
	}
	return o.AdditionalHostParams, true
}

// HasAdditionalHostParams returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasAdditionalHostParams() bool {
	if o != nil && !IsNil(o.AdditionalHostParams) {
		return true
	}

	return false
}

// SetAdditionalHostParams gets a reference to the given []MSSQLVolumeProtectionGroupHostParams and assigns it to the AdditionalHostParams field.
func (o *MSSQLVolumeProtectionGroupParams) SetAdditionalHostParams(v []MSSQLVolumeProtectionGroupHostParams) {
	o.AdditionalHostParams = v
}

// GetBackupDbVolumesOnly returns the BackupDbVolumesOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MSSQLVolumeProtectionGroupParams) GetBackupDbVolumesOnly() bool {
	if o == nil || IsNil(o.BackupDbVolumesOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.BackupDbVolumesOnly.Get()
}

// GetBackupDbVolumesOnlyOk returns a tuple with the BackupDbVolumesOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetBackupDbVolumesOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackupDbVolumesOnly.Get(), o.BackupDbVolumesOnly.IsSet()
}

// HasBackupDbVolumesOnly returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasBackupDbVolumesOnly() bool {
	if o != nil && o.BackupDbVolumesOnly.IsSet() {
		return true
	}

	return false
}

// SetBackupDbVolumesOnly gets a reference to the given NullableBool and assigns it to the BackupDbVolumesOnly field.
func (o *MSSQLVolumeProtectionGroupParams) SetBackupDbVolumesOnly(v bool) {
	o.BackupDbVolumesOnly.Set(&v)
}
// SetBackupDbVolumesOnlyNil sets the value for BackupDbVolumesOnly to be an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) SetBackupDbVolumesOnlyNil() {
	o.BackupDbVolumesOnly.Set(nil)
}

// UnsetBackupDbVolumesOnly ensures that no value is present for BackupDbVolumesOnly, not even an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) UnsetBackupDbVolumesOnly() {
	o.BackupDbVolumesOnly.Unset()
}

// GetIncrementalBackupAfterRestart returns the IncrementalBackupAfterRestart field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MSSQLVolumeProtectionGroupParams) GetIncrementalBackupAfterRestart() bool {
	if o == nil || IsNil(o.IncrementalBackupAfterRestart.Get()) {
		var ret bool
		return ret
	}
	return *o.IncrementalBackupAfterRestart.Get()
}

// GetIncrementalBackupAfterRestartOk returns a tuple with the IncrementalBackupAfterRestart field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetIncrementalBackupAfterRestartOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncrementalBackupAfterRestart.Get(), o.IncrementalBackupAfterRestart.IsSet()
}

// HasIncrementalBackupAfterRestart returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasIncrementalBackupAfterRestart() bool {
	if o != nil && o.IncrementalBackupAfterRestart.IsSet() {
		return true
	}

	return false
}

// SetIncrementalBackupAfterRestart gets a reference to the given NullableBool and assigns it to the IncrementalBackupAfterRestart field.
func (o *MSSQLVolumeProtectionGroupParams) SetIncrementalBackupAfterRestart(v bool) {
	o.IncrementalBackupAfterRestart.Set(&v)
}
// SetIncrementalBackupAfterRestartNil sets the value for IncrementalBackupAfterRestart to be an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) SetIncrementalBackupAfterRestartNil() {
	o.IncrementalBackupAfterRestart.Set(nil)
}

// UnsetIncrementalBackupAfterRestart ensures that no value is present for IncrementalBackupAfterRestart, not even an explicit nil
func (o *MSSQLVolumeProtectionGroupParams) UnsetIncrementalBackupAfterRestart() {
	o.IncrementalBackupAfterRestart.Unset()
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *MSSQLVolumeProtectionGroupParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || IsNil(o.IndexingPolicy) {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MSSQLVolumeProtectionGroupParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || IsNil(o.IndexingPolicy) {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *MSSQLVolumeProtectionGroupParams) HasIndexingPolicy() bool {
	if o != nil && !IsNil(o.IndexingPolicy) {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *MSSQLVolumeProtectionGroupParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetObjects returns the Objects field value
// If the value is explicit nil, the zero value for []MSSQLVolumeProtectionGroupObjectParams will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetObjects() []MSSQLVolumeProtectionGroupObjectParams {
	if o == nil {
		var ret []MSSQLVolumeProtectionGroupObjectParams
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MSSQLVolumeProtectionGroupParams) GetObjectsOk() ([]MSSQLVolumeProtectionGroupObjectParams, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// SetObjects sets field value
func (o *MSSQLVolumeProtectionGroupParams) SetObjects(v []MSSQLVolumeProtectionGroupObjectParams) {
	o.Objects = v
}

func (o MSSQLVolumeProtectionGroupParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MSSQLVolumeProtectionGroupParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AagBackupPreferenceType.IsSet() {
		toSerialize["aagBackupPreferenceType"] = o.AagBackupPreferenceType.Get()
	}
	if !IsNil(o.AdvancedSettings) {
		toSerialize["advancedSettings"] = o.AdvancedSettings
	}
	if o.BackupSystemDbs.IsSet() {
		toSerialize["backupSystemDbs"] = o.BackupSystemDbs.Get()
	}
	if o.ExcludeFilters != nil {
		toSerialize["excludeFilters"] = o.ExcludeFilters
	}
	if o.FullBackupsCopyOnly.IsSet() {
		toSerialize["fullBackupsCopyOnly"] = o.FullBackupsCopyOnly.Get()
	}
	if o.LogBackupNumStreams.IsSet() {
		toSerialize["logBackupNumStreams"] = o.LogBackupNumStreams.Get()
	}
	if o.LogBackupWithClause.IsSet() {
		toSerialize["logBackupWithClause"] = o.LogBackupWithClause.Get()
	}
	if !IsNil(o.PrePostScript) {
		toSerialize["prePostScript"] = o.PrePostScript
	}
	if o.UseAagPreferencesFromServer.IsSet() {
		toSerialize["useAagPreferencesFromServer"] = o.UseAagPreferencesFromServer.Get()
	}
	if o.UserDbBackupPreferenceType.IsSet() {
		toSerialize["userDbBackupPreferenceType"] = o.UserDbBackupPreferenceType.Get()
	}
	if !IsNil(o.AdditionalHostParams) {
		toSerialize["additionalHostParams"] = o.AdditionalHostParams
	}
	if o.BackupDbVolumesOnly.IsSet() {
		toSerialize["backupDbVolumesOnly"] = o.BackupDbVolumesOnly.Get()
	}
	if o.IncrementalBackupAfterRestart.IsSet() {
		toSerialize["incrementalBackupAfterRestart"] = o.IncrementalBackupAfterRestart.Get()
	}
	if !IsNil(o.IndexingPolicy) {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	return toSerialize, nil
}

func (o *MSSQLVolumeProtectionGroupParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMSSQLVolumeProtectionGroupParams := _MSSQLVolumeProtectionGroupParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMSSQLVolumeProtectionGroupParams)

	if err != nil {
		return err
	}

	*o = MSSQLVolumeProtectionGroupParams(varMSSQLVolumeProtectionGroupParams)

	return err
}

type NullableMSSQLVolumeProtectionGroupParams struct {
	value *MSSQLVolumeProtectionGroupParams
	isSet bool
}

func (v NullableMSSQLVolumeProtectionGroupParams) Get() *MSSQLVolumeProtectionGroupParams {
	return v.value
}

func (v *NullableMSSQLVolumeProtectionGroupParams) Set(val *MSSQLVolumeProtectionGroupParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMSSQLVolumeProtectionGroupParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMSSQLVolumeProtectionGroupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMSSQLVolumeProtectionGroupParams(val *MSSQLVolumeProtectionGroupParams) *NullableMSSQLVolumeProtectionGroupParams {
	return &NullableMSSQLVolumeProtectionGroupParams{value: val, isSet: true}
}

func (v NullableMSSQLVolumeProtectionGroupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMSSQLVolumeProtectionGroupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


