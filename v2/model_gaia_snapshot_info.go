/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GaiaSnapshotInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GaiaSnapshotInfo{}

// GaiaSnapshotInfo struct for GaiaSnapshotInfo
type GaiaSnapshotInfo struct {
	SnapshotHandle NullableSnapshotHandle `json:"snapshotHandle,omitempty"`
}

// NewGaiaSnapshotInfo instantiates a new GaiaSnapshotInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGaiaSnapshotInfo() *GaiaSnapshotInfo {
	this := GaiaSnapshotInfo{}
	return &this
}

// NewGaiaSnapshotInfoWithDefaults instantiates a new GaiaSnapshotInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGaiaSnapshotInfoWithDefaults() *GaiaSnapshotInfo {
	this := GaiaSnapshotInfo{}
	return &this
}

// GetSnapshotHandle returns the SnapshotHandle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GaiaSnapshotInfo) GetSnapshotHandle() SnapshotHandle {
	if o == nil || IsNil(o.SnapshotHandle.Get()) {
		var ret SnapshotHandle
		return ret
	}
	return *o.SnapshotHandle.Get()
}

// GetSnapshotHandleOk returns a tuple with the SnapshotHandle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GaiaSnapshotInfo) GetSnapshotHandleOk() (*SnapshotHandle, bool) {
	if o == nil {
		return nil, false
	}
	return o.SnapshotHandle.Get(), o.SnapshotHandle.IsSet()
}

// HasSnapshotHandle returns a boolean if a field has been set.
func (o *GaiaSnapshotInfo) HasSnapshotHandle() bool {
	if o != nil && o.SnapshotHandle.IsSet() {
		return true
	}

	return false
}

// SetSnapshotHandle gets a reference to the given NullableSnapshotHandle and assigns it to the SnapshotHandle field.
func (o *GaiaSnapshotInfo) SetSnapshotHandle(v SnapshotHandle) {
	o.SnapshotHandle.Set(&v)
}
// SetSnapshotHandleNil sets the value for SnapshotHandle to be an explicit nil
func (o *GaiaSnapshotInfo) SetSnapshotHandleNil() {
	o.SnapshotHandle.Set(nil)
}

// UnsetSnapshotHandle ensures that no value is present for SnapshotHandle, not even an explicit nil
func (o *GaiaSnapshotInfo) UnsetSnapshotHandle() {
	o.SnapshotHandle.Unset()
}

func (o GaiaSnapshotInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GaiaSnapshotInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.SnapshotHandle.IsSet() {
		toSerialize["snapshotHandle"] = o.SnapshotHandle.Get()
	}
	return toSerialize, nil
}

type NullableGaiaSnapshotInfo struct {
	value *GaiaSnapshotInfo
	isSet bool
}

func (v NullableGaiaSnapshotInfo) Get() *GaiaSnapshotInfo {
	return v.value
}

func (v *NullableGaiaSnapshotInfo) Set(val *GaiaSnapshotInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableGaiaSnapshotInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableGaiaSnapshotInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGaiaSnapshotInfo(val *GaiaSnapshotInfo) *NullableGaiaSnapshotInfo {
	return &NullableGaiaSnapshotInfo{value: val, isSet: true}
}

func (v NullableGaiaSnapshotInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGaiaSnapshotInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


