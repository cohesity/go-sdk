/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UdaHostOsSpecificParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaHostOsSpecificParams{}

// UdaHostOsSpecificParams Connector parameters specific to an operating system.
type UdaHostOsSpecificParams struct {
	// Type of the host operating system.
	HostOsType NullableString `json:"hostOsType,omitempty"`
	Index NullableUdaOSIndexConfigParams `json:"index,omitempty"`
	Protection NullableUdaProtectionParams `json:"protection,omitempty"`
	Recovery NullableUdaRecoveryParams `json:"recovery,omitempty"`
	Registration NullableUdaRegistrationParams `json:"registration,omitempty"`
}

// NewUdaHostOsSpecificParams instantiates a new UdaHostOsSpecificParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaHostOsSpecificParams() *UdaHostOsSpecificParams {
	this := UdaHostOsSpecificParams{}
	return &this
}

// NewUdaHostOsSpecificParamsWithDefaults instantiates a new UdaHostOsSpecificParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaHostOsSpecificParamsWithDefaults() *UdaHostOsSpecificParams {
	this := UdaHostOsSpecificParams{}
	return &this
}

// GetHostOsType returns the HostOsType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaHostOsSpecificParams) GetHostOsType() string {
	if o == nil || IsNil(o.HostOsType.Get()) {
		var ret string
		return ret
	}
	return *o.HostOsType.Get()
}

// GetHostOsTypeOk returns a tuple with the HostOsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaHostOsSpecificParams) GetHostOsTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HostOsType.Get(), o.HostOsType.IsSet()
}

// HasHostOsType returns a boolean if a field has been set.
func (o *UdaHostOsSpecificParams) HasHostOsType() bool {
	if o != nil && o.HostOsType.IsSet() {
		return true
	}

	return false
}

// SetHostOsType gets a reference to the given NullableString and assigns it to the HostOsType field.
func (o *UdaHostOsSpecificParams) SetHostOsType(v string) {
	o.HostOsType.Set(&v)
}
// SetHostOsTypeNil sets the value for HostOsType to be an explicit nil
func (o *UdaHostOsSpecificParams) SetHostOsTypeNil() {
	o.HostOsType.Set(nil)
}

// UnsetHostOsType ensures that no value is present for HostOsType, not even an explicit nil
func (o *UdaHostOsSpecificParams) UnsetHostOsType() {
	o.HostOsType.Unset()
}

// GetIndex returns the Index field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaHostOsSpecificParams) GetIndex() UdaOSIndexConfigParams {
	if o == nil || IsNil(o.Index.Get()) {
		var ret UdaOSIndexConfigParams
		return ret
	}
	return *o.Index.Get()
}

// GetIndexOk returns a tuple with the Index field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaHostOsSpecificParams) GetIndexOk() (*UdaOSIndexConfigParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Index.Get(), o.Index.IsSet()
}

// HasIndex returns a boolean if a field has been set.
func (o *UdaHostOsSpecificParams) HasIndex() bool {
	if o != nil && o.Index.IsSet() {
		return true
	}

	return false
}

// SetIndex gets a reference to the given NullableUdaOSIndexConfigParams and assigns it to the Index field.
func (o *UdaHostOsSpecificParams) SetIndex(v UdaOSIndexConfigParams) {
	o.Index.Set(&v)
}
// SetIndexNil sets the value for Index to be an explicit nil
func (o *UdaHostOsSpecificParams) SetIndexNil() {
	o.Index.Set(nil)
}

// UnsetIndex ensures that no value is present for Index, not even an explicit nil
func (o *UdaHostOsSpecificParams) UnsetIndex() {
	o.Index.Unset()
}

// GetProtection returns the Protection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaHostOsSpecificParams) GetProtection() UdaProtectionParams {
	if o == nil || IsNil(o.Protection.Get()) {
		var ret UdaProtectionParams
		return ret
	}
	return *o.Protection.Get()
}

// GetProtectionOk returns a tuple with the Protection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaHostOsSpecificParams) GetProtectionOk() (*UdaProtectionParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Protection.Get(), o.Protection.IsSet()
}

// HasProtection returns a boolean if a field has been set.
func (o *UdaHostOsSpecificParams) HasProtection() bool {
	if o != nil && o.Protection.IsSet() {
		return true
	}

	return false
}

// SetProtection gets a reference to the given NullableUdaProtectionParams and assigns it to the Protection field.
func (o *UdaHostOsSpecificParams) SetProtection(v UdaProtectionParams) {
	o.Protection.Set(&v)
}
// SetProtectionNil sets the value for Protection to be an explicit nil
func (o *UdaHostOsSpecificParams) SetProtectionNil() {
	o.Protection.Set(nil)
}

// UnsetProtection ensures that no value is present for Protection, not even an explicit nil
func (o *UdaHostOsSpecificParams) UnsetProtection() {
	o.Protection.Unset()
}

// GetRecovery returns the Recovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaHostOsSpecificParams) GetRecovery() UdaRecoveryParams {
	if o == nil || IsNil(o.Recovery.Get()) {
		var ret UdaRecoveryParams
		return ret
	}
	return *o.Recovery.Get()
}

// GetRecoveryOk returns a tuple with the Recovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaHostOsSpecificParams) GetRecoveryOk() (*UdaRecoveryParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recovery.Get(), o.Recovery.IsSet()
}

// HasRecovery returns a boolean if a field has been set.
func (o *UdaHostOsSpecificParams) HasRecovery() bool {
	if o != nil && o.Recovery.IsSet() {
		return true
	}

	return false
}

// SetRecovery gets a reference to the given NullableUdaRecoveryParams and assigns it to the Recovery field.
func (o *UdaHostOsSpecificParams) SetRecovery(v UdaRecoveryParams) {
	o.Recovery.Set(&v)
}
// SetRecoveryNil sets the value for Recovery to be an explicit nil
func (o *UdaHostOsSpecificParams) SetRecoveryNil() {
	o.Recovery.Set(nil)
}

// UnsetRecovery ensures that no value is present for Recovery, not even an explicit nil
func (o *UdaHostOsSpecificParams) UnsetRecovery() {
	o.Recovery.Unset()
}

// GetRegistration returns the Registration field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaHostOsSpecificParams) GetRegistration() UdaRegistrationParams {
	if o == nil || IsNil(o.Registration.Get()) {
		var ret UdaRegistrationParams
		return ret
	}
	return *o.Registration.Get()
}

// GetRegistrationOk returns a tuple with the Registration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaHostOsSpecificParams) GetRegistrationOk() (*UdaRegistrationParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Registration.Get(), o.Registration.IsSet()
}

// HasRegistration returns a boolean if a field has been set.
func (o *UdaHostOsSpecificParams) HasRegistration() bool {
	if o != nil && o.Registration.IsSet() {
		return true
	}

	return false
}

// SetRegistration gets a reference to the given NullableUdaRegistrationParams and assigns it to the Registration field.
func (o *UdaHostOsSpecificParams) SetRegistration(v UdaRegistrationParams) {
	o.Registration.Set(&v)
}
// SetRegistrationNil sets the value for Registration to be an explicit nil
func (o *UdaHostOsSpecificParams) SetRegistrationNil() {
	o.Registration.Set(nil)
}

// UnsetRegistration ensures that no value is present for Registration, not even an explicit nil
func (o *UdaHostOsSpecificParams) UnsetRegistration() {
	o.Registration.Unset()
}

func (o UdaHostOsSpecificParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaHostOsSpecificParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.HostOsType.IsSet() {
		toSerialize["hostOsType"] = o.HostOsType.Get()
	}
	if o.Index.IsSet() {
		toSerialize["index"] = o.Index.Get()
	}
	if o.Protection.IsSet() {
		toSerialize["protection"] = o.Protection.Get()
	}
	if o.Recovery.IsSet() {
		toSerialize["recovery"] = o.Recovery.Get()
	}
	if o.Registration.IsSet() {
		toSerialize["registration"] = o.Registration.Get()
	}
	return toSerialize, nil
}

type NullableUdaHostOsSpecificParams struct {
	value *UdaHostOsSpecificParams
	isSet bool
}

func (v NullableUdaHostOsSpecificParams) Get() *UdaHostOsSpecificParams {
	return v.value
}

func (v *NullableUdaHostOsSpecificParams) Set(val *UdaHostOsSpecificParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaHostOsSpecificParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaHostOsSpecificParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaHostOsSpecificParams(val *UdaHostOsSpecificParams) *NullableUdaHostOsSpecificParams {
	return &NullableUdaHostOsSpecificParams{value: val, isSet: true}
}

func (v NullableUdaHostOsSpecificParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaHostOsSpecificParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


