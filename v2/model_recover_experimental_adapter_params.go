/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverExperimentalAdapterParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverExperimentalAdapterParams{}

// RecoverExperimentalAdapterParams Specifies the parameters to recover Experimental Adapter objects.
type RecoverExperimentalAdapterParams struct {
	// Set to true to overwrite an existing object at the destination. If set to false, and the same object exists at the destination, then recovery will fail for that object.
	Overwrite NullableBool `json:"overwrite,omitempty"`
	// Specifies the 'Source Registration ID' of the source where the objects are to be recovered. If this is not specified, the recovery job will recover to the original location.
	RecoverTo NullableInt64 `json:"recoverTo,omitempty"`
	// Specifies the type of experimental adapter restore.
	RestoreType NullableString `json:"restoreType,omitempty"`
	// Specifies the local snapshot ids and other details of the objects to be recovered.
	Snapshots []RecoverExperimentalAdapterSnapshotParams `json:"snapshots"`
	// Workflow parameters to be supplied to all backup workflow tasks. This specifies task configuration such as the time to wait before returning the workflow result, subtasks configuration such as number of subtasks to generate and the depth of the subtask tree, etc.
	WorkflowParams NullableString `json:"workflowParams,omitempty"`
}

type _RecoverExperimentalAdapterParams RecoverExperimentalAdapterParams

// NewRecoverExperimentalAdapterParams instantiates a new RecoverExperimentalAdapterParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverExperimentalAdapterParams(snapshots []RecoverExperimentalAdapterSnapshotParams) *RecoverExperimentalAdapterParams {
	this := RecoverExperimentalAdapterParams{}
	this.Snapshots = snapshots
	return &this
}

// NewRecoverExperimentalAdapterParamsWithDefaults instantiates a new RecoverExperimentalAdapterParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverExperimentalAdapterParamsWithDefaults() *RecoverExperimentalAdapterParams {
	this := RecoverExperimentalAdapterParams{}
	return &this
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverExperimentalAdapterParams) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite.Get()) {
		var ret bool
		return ret
	}
	return *o.Overwrite.Get()
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverExperimentalAdapterParams) GetOverwriteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Overwrite.Get(), o.Overwrite.IsSet()
}

// HasOverwrite returns a boolean if a field has been set.
func (o *RecoverExperimentalAdapterParams) HasOverwrite() bool {
	if o != nil && o.Overwrite.IsSet() {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given NullableBool and assigns it to the Overwrite field.
func (o *RecoverExperimentalAdapterParams) SetOverwrite(v bool) {
	o.Overwrite.Set(&v)
}
// SetOverwriteNil sets the value for Overwrite to be an explicit nil
func (o *RecoverExperimentalAdapterParams) SetOverwriteNil() {
	o.Overwrite.Set(nil)
}

// UnsetOverwrite ensures that no value is present for Overwrite, not even an explicit nil
func (o *RecoverExperimentalAdapterParams) UnsetOverwrite() {
	o.Overwrite.Unset()
}

// GetRecoverTo returns the RecoverTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverExperimentalAdapterParams) GetRecoverTo() int64 {
	if o == nil || IsNil(o.RecoverTo.Get()) {
		var ret int64
		return ret
	}
	return *o.RecoverTo.Get()
}

// GetRecoverToOk returns a tuple with the RecoverTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverExperimentalAdapterParams) GetRecoverToOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverTo.Get(), o.RecoverTo.IsSet()
}

// HasRecoverTo returns a boolean if a field has been set.
func (o *RecoverExperimentalAdapterParams) HasRecoverTo() bool {
	if o != nil && o.RecoverTo.IsSet() {
		return true
	}

	return false
}

// SetRecoverTo gets a reference to the given NullableInt64 and assigns it to the RecoverTo field.
func (o *RecoverExperimentalAdapterParams) SetRecoverTo(v int64) {
	o.RecoverTo.Set(&v)
}
// SetRecoverToNil sets the value for RecoverTo to be an explicit nil
func (o *RecoverExperimentalAdapterParams) SetRecoverToNil() {
	o.RecoverTo.Set(nil)
}

// UnsetRecoverTo ensures that no value is present for RecoverTo, not even an explicit nil
func (o *RecoverExperimentalAdapterParams) UnsetRecoverTo() {
	o.RecoverTo.Unset()
}

// GetRestoreType returns the RestoreType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverExperimentalAdapterParams) GetRestoreType() string {
	if o == nil || IsNil(o.RestoreType.Get()) {
		var ret string
		return ret
	}
	return *o.RestoreType.Get()
}

// GetRestoreTypeOk returns a tuple with the RestoreType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverExperimentalAdapterParams) GetRestoreTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreType.Get(), o.RestoreType.IsSet()
}

// HasRestoreType returns a boolean if a field has been set.
func (o *RecoverExperimentalAdapterParams) HasRestoreType() bool {
	if o != nil && o.RestoreType.IsSet() {
		return true
	}

	return false
}

// SetRestoreType gets a reference to the given NullableString and assigns it to the RestoreType field.
func (o *RecoverExperimentalAdapterParams) SetRestoreType(v string) {
	o.RestoreType.Set(&v)
}
// SetRestoreTypeNil sets the value for RestoreType to be an explicit nil
func (o *RecoverExperimentalAdapterParams) SetRestoreTypeNil() {
	o.RestoreType.Set(nil)
}

// UnsetRestoreType ensures that no value is present for RestoreType, not even an explicit nil
func (o *RecoverExperimentalAdapterParams) UnsetRestoreType() {
	o.RestoreType.Unset()
}

// GetSnapshots returns the Snapshots field value
// If the value is explicit nil, the zero value for []RecoverExperimentalAdapterSnapshotParams will be returned
func (o *RecoverExperimentalAdapterParams) GetSnapshots() []RecoverExperimentalAdapterSnapshotParams {
	if o == nil {
		var ret []RecoverExperimentalAdapterSnapshotParams
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverExperimentalAdapterParams) GetSnapshotsOk() ([]RecoverExperimentalAdapterSnapshotParams, bool) {
	if o == nil || IsNil(o.Snapshots) {
		return nil, false
	}
	return o.Snapshots, true
}

// SetSnapshots sets field value
func (o *RecoverExperimentalAdapterParams) SetSnapshots(v []RecoverExperimentalAdapterSnapshotParams) {
	o.Snapshots = v
}

// GetWorkflowParams returns the WorkflowParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverExperimentalAdapterParams) GetWorkflowParams() string {
	if o == nil || IsNil(o.WorkflowParams.Get()) {
		var ret string
		return ret
	}
	return *o.WorkflowParams.Get()
}

// GetWorkflowParamsOk returns a tuple with the WorkflowParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverExperimentalAdapterParams) GetWorkflowParamsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkflowParams.Get(), o.WorkflowParams.IsSet()
}

// HasWorkflowParams returns a boolean if a field has been set.
func (o *RecoverExperimentalAdapterParams) HasWorkflowParams() bool {
	if o != nil && o.WorkflowParams.IsSet() {
		return true
	}

	return false
}

// SetWorkflowParams gets a reference to the given NullableString and assigns it to the WorkflowParams field.
func (o *RecoverExperimentalAdapterParams) SetWorkflowParams(v string) {
	o.WorkflowParams.Set(&v)
}
// SetWorkflowParamsNil sets the value for WorkflowParams to be an explicit nil
func (o *RecoverExperimentalAdapterParams) SetWorkflowParamsNil() {
	o.WorkflowParams.Set(nil)
}

// UnsetWorkflowParams ensures that no value is present for WorkflowParams, not even an explicit nil
func (o *RecoverExperimentalAdapterParams) UnsetWorkflowParams() {
	o.WorkflowParams.Unset()
}

func (o RecoverExperimentalAdapterParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverExperimentalAdapterParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Overwrite.IsSet() {
		toSerialize["overwrite"] = o.Overwrite.Get()
	}
	if o.RecoverTo.IsSet() {
		toSerialize["recoverTo"] = o.RecoverTo.Get()
	}
	if o.RestoreType.IsSet() {
		toSerialize["restoreType"] = o.RestoreType.Get()
	}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	if o.WorkflowParams.IsSet() {
		toSerialize["workflowParams"] = o.WorkflowParams.Get()
	}
	return toSerialize, nil
}

func (o *RecoverExperimentalAdapterParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"snapshots",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverExperimentalAdapterParams := _RecoverExperimentalAdapterParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverExperimentalAdapterParams)

	if err != nil {
		return err
	}

	*o = RecoverExperimentalAdapterParams(varRecoverExperimentalAdapterParams)

	return err
}

type NullableRecoverExperimentalAdapterParams struct {
	value *RecoverExperimentalAdapterParams
	isSet bool
}

func (v NullableRecoverExperimentalAdapterParams) Get() *RecoverExperimentalAdapterParams {
	return v.value
}

func (v *NullableRecoverExperimentalAdapterParams) Set(val *RecoverExperimentalAdapterParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverExperimentalAdapterParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverExperimentalAdapterParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverExperimentalAdapterParams(val *RecoverExperimentalAdapterParams) *NullableRecoverExperimentalAdapterParams {
	return &NullableRecoverExperimentalAdapterParams{value: val, isSet: true}
}

func (v NullableRecoverExperimentalAdapterParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverExperimentalAdapterParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


