/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverGcpVmNewSourceNetworkConfigSubnet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverGcpVmNewSourceNetworkConfigSubnet{}

// RecoverGcpVmNewSourceNetworkConfigSubnet Specifies the subnet.
type RecoverGcpVmNewSourceNetworkConfigSubnet struct {
	// Specifies the id of the subnet.
	SubnetId NullableInt64 `json:"subnetId"`
	// Specifies the name of the subnet.
	SubnetName NullableString `json:"subnetName,omitempty"`
	// Specifies the name of the vpc network.
	VpcName NullableString `json:"vpcName,omitempty"`
}

type _RecoverGcpVmNewSourceNetworkConfigSubnet RecoverGcpVmNewSourceNetworkConfigSubnet

// NewRecoverGcpVmNewSourceNetworkConfigSubnet instantiates a new RecoverGcpVmNewSourceNetworkConfigSubnet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverGcpVmNewSourceNetworkConfigSubnet(subnetId NullableInt64) *RecoverGcpVmNewSourceNetworkConfigSubnet {
	this := RecoverGcpVmNewSourceNetworkConfigSubnet{}
	this.SubnetId = subnetId
	return &this
}

// NewRecoverGcpVmNewSourceNetworkConfigSubnetWithDefaults instantiates a new RecoverGcpVmNewSourceNetworkConfigSubnet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverGcpVmNewSourceNetworkConfigSubnetWithDefaults() *RecoverGcpVmNewSourceNetworkConfigSubnet {
	this := RecoverGcpVmNewSourceNetworkConfigSubnet{}
	return &this
}

// GetSubnetId returns the SubnetId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) GetSubnetId() int64 {
	if o == nil || o.SubnetId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.SubnetId.Get()
}

// GetSubnetIdOk returns a tuple with the SubnetId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) GetSubnetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubnetId.Get(), o.SubnetId.IsSet()
}

// SetSubnetId sets field value
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) SetSubnetId(v int64) {
	o.SubnetId.Set(&v)
}

// GetSubnetName returns the SubnetName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) GetSubnetName() string {
	if o == nil || IsNil(o.SubnetName.Get()) {
		var ret string
		return ret
	}
	return *o.SubnetName.Get()
}

// GetSubnetNameOk returns a tuple with the SubnetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) GetSubnetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SubnetName.Get(), o.SubnetName.IsSet()
}

// HasSubnetName returns a boolean if a field has been set.
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) HasSubnetName() bool {
	if o != nil && o.SubnetName.IsSet() {
		return true
	}

	return false
}

// SetSubnetName gets a reference to the given NullableString and assigns it to the SubnetName field.
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) SetSubnetName(v string) {
	o.SubnetName.Set(&v)
}
// SetSubnetNameNil sets the value for SubnetName to be an explicit nil
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) SetSubnetNameNil() {
	o.SubnetName.Set(nil)
}

// UnsetSubnetName ensures that no value is present for SubnetName, not even an explicit nil
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) UnsetSubnetName() {
	o.SubnetName.Unset()
}

// GetVpcName returns the VpcName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) GetVpcName() string {
	if o == nil || IsNil(o.VpcName.Get()) {
		var ret string
		return ret
	}
	return *o.VpcName.Get()
}

// GetVpcNameOk returns a tuple with the VpcName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) GetVpcNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VpcName.Get(), o.VpcName.IsSet()
}

// HasVpcName returns a boolean if a field has been set.
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) HasVpcName() bool {
	if o != nil && o.VpcName.IsSet() {
		return true
	}

	return false
}

// SetVpcName gets a reference to the given NullableString and assigns it to the VpcName field.
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) SetVpcName(v string) {
	o.VpcName.Set(&v)
}
// SetVpcNameNil sets the value for VpcName to be an explicit nil
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) SetVpcNameNil() {
	o.VpcName.Set(nil)
}

// UnsetVpcName ensures that no value is present for VpcName, not even an explicit nil
func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) UnsetVpcName() {
	o.VpcName.Unset()
}

func (o RecoverGcpVmNewSourceNetworkConfigSubnet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverGcpVmNewSourceNetworkConfigSubnet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["subnetId"] = o.SubnetId.Get()
	if o.SubnetName.IsSet() {
		toSerialize["subnetName"] = o.SubnetName.Get()
	}
	if o.VpcName.IsSet() {
		toSerialize["vpcName"] = o.VpcName.Get()
	}
	return toSerialize, nil
}

func (o *RecoverGcpVmNewSourceNetworkConfigSubnet) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"subnetId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverGcpVmNewSourceNetworkConfigSubnet := _RecoverGcpVmNewSourceNetworkConfigSubnet{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverGcpVmNewSourceNetworkConfigSubnet)

	if err != nil {
		return err
	}

	*o = RecoverGcpVmNewSourceNetworkConfigSubnet(varRecoverGcpVmNewSourceNetworkConfigSubnet)

	return err
}

type NullableRecoverGcpVmNewSourceNetworkConfigSubnet struct {
	value *RecoverGcpVmNewSourceNetworkConfigSubnet
	isSet bool
}

func (v NullableRecoverGcpVmNewSourceNetworkConfigSubnet) Get() *RecoverGcpVmNewSourceNetworkConfigSubnet {
	return v.value
}

func (v *NullableRecoverGcpVmNewSourceNetworkConfigSubnet) Set(val *RecoverGcpVmNewSourceNetworkConfigSubnet) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverGcpVmNewSourceNetworkConfigSubnet) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverGcpVmNewSourceNetworkConfigSubnet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverGcpVmNewSourceNetworkConfigSubnet(val *RecoverGcpVmNewSourceNetworkConfigSubnet) *NullableRecoverGcpVmNewSourceNetworkConfigSubnet {
	return &NullableRecoverGcpVmNewSourceNetworkConfigSubnet{value: val, isSet: true}
}

func (v NullableRecoverGcpVmNewSourceNetworkConfigSubnet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverGcpVmNewSourceNetworkConfigSubnet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


