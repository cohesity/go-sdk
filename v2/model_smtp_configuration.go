/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SMTPConfiguration type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SMTPConfiguration{}

// SMTPConfiguration Specifies the SMTP configuration details.
type SMTPConfiguration struct {
	// Specifies the IP address or the FQDN of the SMTP server.
	Hostname string `json:"hostname"`
	// Specifies if the SMTP configuration is active.
	IsActive NullableBool `json:"isActive,omitempty"`
	// Specifies the SMTP port. Usually 465 or 587. For authenticated connection, it is generally 587.
	Port int32 `json:"port"`
	// This is set to true when the SMTP server uses SSL/TLS without supporting STARTTLS. Typically, this is used for port 465.
	UseSSL NullableBool `json:"useSSL,omitempty"`
	// Specifies the username which will be used to connect to the SMTP server. If username is not specified, then it would imply that SMTP server is set up for unauthenticated access.
	Username NullableString `json:"username,omitempty"`
}

type _SMTPConfiguration SMTPConfiguration

// NewSMTPConfiguration instantiates a new SMTPConfiguration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSMTPConfiguration(hostname string, port int32) *SMTPConfiguration {
	this := SMTPConfiguration{}
	this.Hostname = hostname
	var isActive bool = true
	this.IsActive = *NewNullableBool(&isActive)
	this.Port = port
	var useSSL bool = false
	this.UseSSL = *NewNullableBool(&useSSL)
	return &this
}

// NewSMTPConfigurationWithDefaults instantiates a new SMTPConfiguration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSMTPConfigurationWithDefaults() *SMTPConfiguration {
	this := SMTPConfiguration{}
	var isActive bool = true
	this.IsActive = *NewNullableBool(&isActive)
	var useSSL bool = false
	this.UseSSL = *NewNullableBool(&useSSL)
	return &this
}

// GetHostname returns the Hostname field value
func (o *SMTPConfiguration) GetHostname() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value
// and a boolean to check if the value has been set.
func (o *SMTPConfiguration) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Hostname, true
}

// SetHostname sets field value
func (o *SMTPConfiguration) SetHostname(v string) {
	o.Hostname = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SMTPConfiguration) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive.Get()) {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SMTPConfiguration) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *SMTPConfiguration) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *SMTPConfiguration) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *SMTPConfiguration) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *SMTPConfiguration) UnsetIsActive() {
	o.IsActive.Unset()
}

// GetPort returns the Port field value
func (o *SMTPConfiguration) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *SMTPConfiguration) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *SMTPConfiguration) SetPort(v int32) {
	o.Port = v
}

// GetUseSSL returns the UseSSL field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SMTPConfiguration) GetUseSSL() bool {
	if o == nil || IsNil(o.UseSSL.Get()) {
		var ret bool
		return ret
	}
	return *o.UseSSL.Get()
}

// GetUseSSLOk returns a tuple with the UseSSL field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SMTPConfiguration) GetUseSSLOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseSSL.Get(), o.UseSSL.IsSet()
}

// HasUseSSL returns a boolean if a field has been set.
func (o *SMTPConfiguration) HasUseSSL() bool {
	if o != nil && o.UseSSL.IsSet() {
		return true
	}

	return false
}

// SetUseSSL gets a reference to the given NullableBool and assigns it to the UseSSL field.
func (o *SMTPConfiguration) SetUseSSL(v bool) {
	o.UseSSL.Set(&v)
}
// SetUseSSLNil sets the value for UseSSL to be an explicit nil
func (o *SMTPConfiguration) SetUseSSLNil() {
	o.UseSSL.Set(nil)
}

// UnsetUseSSL ensures that no value is present for UseSSL, not even an explicit nil
func (o *SMTPConfiguration) UnsetUseSSL() {
	o.UseSSL.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SMTPConfiguration) GetUsername() string {
	if o == nil || IsNil(o.Username.Get()) {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SMTPConfiguration) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *SMTPConfiguration) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *SMTPConfiguration) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *SMTPConfiguration) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *SMTPConfiguration) UnsetUsername() {
	o.Username.Unset()
}

func (o SMTPConfiguration) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SMTPConfiguration) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["hostname"] = o.Hostname
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	toSerialize["port"] = o.Port
	if o.UseSSL.IsSet() {
		toSerialize["useSSL"] = o.UseSSL.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	return toSerialize, nil
}

func (o *SMTPConfiguration) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hostname",
		"port",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSMTPConfiguration := _SMTPConfiguration{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSMTPConfiguration)

	if err != nil {
		return err
	}

	*o = SMTPConfiguration(varSMTPConfiguration)

	return err
}

type NullableSMTPConfiguration struct {
	value *SMTPConfiguration
	isSet bool
}

func (v NullableSMTPConfiguration) Get() *SMTPConfiguration {
	return v.value
}

func (v *NullableSMTPConfiguration) Set(val *SMTPConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableSMTPConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableSMTPConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSMTPConfiguration(val *SMTPConfiguration) *NullableSMTPConfiguration {
	return &NullableSMTPConfiguration{value: val, isSet: true}
}

func (v NullableSMTPConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSMTPConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


