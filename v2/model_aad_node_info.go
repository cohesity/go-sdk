/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AadNodeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AadNodeInfo{}

// AadNodeInfo Determines information about an aad node.
type AadNodeInfo struct {
	// Specifies the list of nodes's attributes as key/value pair.
	NodeAttributes []KeyValuePair `json:"nodeAttributes,omitempty"`
	// Specifies the type of aad node.
	NodeType NullableString `json:"nodeType,omitempty"`
}

// NewAadNodeInfo instantiates a new AadNodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAadNodeInfo() *AadNodeInfo {
	this := AadNodeInfo{}
	return &this
}

// NewAadNodeInfoWithDefaults instantiates a new AadNodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAadNodeInfoWithDefaults() *AadNodeInfo {
	this := AadNodeInfo{}
	return &this
}

// GetNodeAttributes returns the NodeAttributes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AadNodeInfo) GetNodeAttributes() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.NodeAttributes
}

// GetNodeAttributesOk returns a tuple with the NodeAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AadNodeInfo) GetNodeAttributesOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.NodeAttributes) {
		return nil, false
	}
	return o.NodeAttributes, true
}

// HasNodeAttributes returns a boolean if a field has been set.
func (o *AadNodeInfo) HasNodeAttributes() bool {
	if o != nil && !IsNil(o.NodeAttributes) {
		return true
	}

	return false
}

// SetNodeAttributes gets a reference to the given []KeyValuePair and assigns it to the NodeAttributes field.
func (o *AadNodeInfo) SetNodeAttributes(v []KeyValuePair) {
	o.NodeAttributes = v
}

// GetNodeType returns the NodeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AadNodeInfo) GetNodeType() string {
	if o == nil || IsNil(o.NodeType.Get()) {
		var ret string
		return ret
	}
	return *o.NodeType.Get()
}

// GetNodeTypeOk returns a tuple with the NodeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AadNodeInfo) GetNodeTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeType.Get(), o.NodeType.IsSet()
}

// HasNodeType returns a boolean if a field has been set.
func (o *AadNodeInfo) HasNodeType() bool {
	if o != nil && o.NodeType.IsSet() {
		return true
	}

	return false
}

// SetNodeType gets a reference to the given NullableString and assigns it to the NodeType field.
func (o *AadNodeInfo) SetNodeType(v string) {
	o.NodeType.Set(&v)
}
// SetNodeTypeNil sets the value for NodeType to be an explicit nil
func (o *AadNodeInfo) SetNodeTypeNil() {
	o.NodeType.Set(nil)
}

// UnsetNodeType ensures that no value is present for NodeType, not even an explicit nil
func (o *AadNodeInfo) UnsetNodeType() {
	o.NodeType.Unset()
}

func (o AadNodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AadNodeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeAttributes != nil {
		toSerialize["nodeAttributes"] = o.NodeAttributes
	}
	if o.NodeType.IsSet() {
		toSerialize["nodeType"] = o.NodeType.Get()
	}
	return toSerialize, nil
}

type NullableAadNodeInfo struct {
	value *AadNodeInfo
	isSet bool
}

func (v NullableAadNodeInfo) Get() *AadNodeInfo {
	return v.value
}

func (v *NullableAadNodeInfo) Set(val *AadNodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableAadNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableAadNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAadNodeInfo(val *AadNodeInfo) *NullableAadNodeInfo {
	return &NullableAadNodeInfo{value: val, isSet: true}
}

func (v NullableAadNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAadNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


