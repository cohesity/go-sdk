/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the OraclePdbRestoreParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OraclePdbRestoreParams{}

// OraclePdbRestoreParams Specifies information about the list of pdbs to be restored.
type OraclePdbRestoreParams struct {
	// Specifies if the PDB should be ignored if a PDB already exists with same name.
	DropDuplicatePDB NullableBool `json:"dropDuplicatePDB,omitempty"`
	// Specifies whether to restore or skip the provided PDBs list.
	IncludeInRestore NullableBool `json:"includeInRestore,omitempty"`
	// Specifies list of PDB objects to restore.
	PdbObjects []OraclePdbObjectInfo `json:"pdbObjects,omitempty"`
	// Specifies the new PDB name mapping to existing PDBs.
	RenamePdbMap []KeyValuePair `json:"renamePdbMap,omitempty"`
	// Specifies if pdbs should be restored to an existing CDB.
	RestoreToExistingCdb NullableBool `json:"restoreToExistingCdb,omitempty"`
	// Specifies the keystore password of the source CDB.
	SourceCdbKeystorePassword NullableString `json:"sourceCdbKeystorePassword,omitempty"`
	// Specifies the keystore password of the target CDB.
	TargetCdbKeystorePassword NullableString `json:"targetCdbKeystorePassword,omitempty"`
}

// NewOraclePdbRestoreParams instantiates a new OraclePdbRestoreParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOraclePdbRestoreParams() *OraclePdbRestoreParams {
	this := OraclePdbRestoreParams{}
	return &this
}

// NewOraclePdbRestoreParamsWithDefaults instantiates a new OraclePdbRestoreParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOraclePdbRestoreParamsWithDefaults() *OraclePdbRestoreParams {
	this := OraclePdbRestoreParams{}
	return &this
}

// GetDropDuplicatePDB returns the DropDuplicatePDB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OraclePdbRestoreParams) GetDropDuplicatePDB() bool {
	if o == nil || IsNil(o.DropDuplicatePDB.Get()) {
		var ret bool
		return ret
	}
	return *o.DropDuplicatePDB.Get()
}

// GetDropDuplicatePDBOk returns a tuple with the DropDuplicatePDB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbRestoreParams) GetDropDuplicatePDBOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.DropDuplicatePDB.Get(), o.DropDuplicatePDB.IsSet()
}

// HasDropDuplicatePDB returns a boolean if a field has been set.
func (o *OraclePdbRestoreParams) HasDropDuplicatePDB() bool {
	if o != nil && o.DropDuplicatePDB.IsSet() {
		return true
	}

	return false
}

// SetDropDuplicatePDB gets a reference to the given NullableBool and assigns it to the DropDuplicatePDB field.
func (o *OraclePdbRestoreParams) SetDropDuplicatePDB(v bool) {
	o.DropDuplicatePDB.Set(&v)
}
// SetDropDuplicatePDBNil sets the value for DropDuplicatePDB to be an explicit nil
func (o *OraclePdbRestoreParams) SetDropDuplicatePDBNil() {
	o.DropDuplicatePDB.Set(nil)
}

// UnsetDropDuplicatePDB ensures that no value is present for DropDuplicatePDB, not even an explicit nil
func (o *OraclePdbRestoreParams) UnsetDropDuplicatePDB() {
	o.DropDuplicatePDB.Unset()
}

// GetIncludeInRestore returns the IncludeInRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OraclePdbRestoreParams) GetIncludeInRestore() bool {
	if o == nil || IsNil(o.IncludeInRestore.Get()) {
		var ret bool
		return ret
	}
	return *o.IncludeInRestore.Get()
}

// GetIncludeInRestoreOk returns a tuple with the IncludeInRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbRestoreParams) GetIncludeInRestoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeInRestore.Get(), o.IncludeInRestore.IsSet()
}

// HasIncludeInRestore returns a boolean if a field has been set.
func (o *OraclePdbRestoreParams) HasIncludeInRestore() bool {
	if o != nil && o.IncludeInRestore.IsSet() {
		return true
	}

	return false
}

// SetIncludeInRestore gets a reference to the given NullableBool and assigns it to the IncludeInRestore field.
func (o *OraclePdbRestoreParams) SetIncludeInRestore(v bool) {
	o.IncludeInRestore.Set(&v)
}
// SetIncludeInRestoreNil sets the value for IncludeInRestore to be an explicit nil
func (o *OraclePdbRestoreParams) SetIncludeInRestoreNil() {
	o.IncludeInRestore.Set(nil)
}

// UnsetIncludeInRestore ensures that no value is present for IncludeInRestore, not even an explicit nil
func (o *OraclePdbRestoreParams) UnsetIncludeInRestore() {
	o.IncludeInRestore.Unset()
}

// GetPdbObjects returns the PdbObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OraclePdbRestoreParams) GetPdbObjects() []OraclePdbObjectInfo {
	if o == nil {
		var ret []OraclePdbObjectInfo
		return ret
	}
	return o.PdbObjects
}

// GetPdbObjectsOk returns a tuple with the PdbObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbRestoreParams) GetPdbObjectsOk() ([]OraclePdbObjectInfo, bool) {
	if o == nil || IsNil(o.PdbObjects) {
		return nil, false
	}
	return o.PdbObjects, true
}

// HasPdbObjects returns a boolean if a field has been set.
func (o *OraclePdbRestoreParams) HasPdbObjects() bool {
	if o != nil && !IsNil(o.PdbObjects) {
		return true
	}

	return false
}

// SetPdbObjects gets a reference to the given []OraclePdbObjectInfo and assigns it to the PdbObjects field.
func (o *OraclePdbRestoreParams) SetPdbObjects(v []OraclePdbObjectInfo) {
	o.PdbObjects = v
}

// GetRenamePdbMap returns the RenamePdbMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OraclePdbRestoreParams) GetRenamePdbMap() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.RenamePdbMap
}

// GetRenamePdbMapOk returns a tuple with the RenamePdbMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbRestoreParams) GetRenamePdbMapOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.RenamePdbMap) {
		return nil, false
	}
	return o.RenamePdbMap, true
}

// HasRenamePdbMap returns a boolean if a field has been set.
func (o *OraclePdbRestoreParams) HasRenamePdbMap() bool {
	if o != nil && !IsNil(o.RenamePdbMap) {
		return true
	}

	return false
}

// SetRenamePdbMap gets a reference to the given []KeyValuePair and assigns it to the RenamePdbMap field.
func (o *OraclePdbRestoreParams) SetRenamePdbMap(v []KeyValuePair) {
	o.RenamePdbMap = v
}

// GetRestoreToExistingCdb returns the RestoreToExistingCdb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OraclePdbRestoreParams) GetRestoreToExistingCdb() bool {
	if o == nil || IsNil(o.RestoreToExistingCdb.Get()) {
		var ret bool
		return ret
	}
	return *o.RestoreToExistingCdb.Get()
}

// GetRestoreToExistingCdbOk returns a tuple with the RestoreToExistingCdb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbRestoreParams) GetRestoreToExistingCdbOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreToExistingCdb.Get(), o.RestoreToExistingCdb.IsSet()
}

// HasRestoreToExistingCdb returns a boolean if a field has been set.
func (o *OraclePdbRestoreParams) HasRestoreToExistingCdb() bool {
	if o != nil && o.RestoreToExistingCdb.IsSet() {
		return true
	}

	return false
}

// SetRestoreToExistingCdb gets a reference to the given NullableBool and assigns it to the RestoreToExistingCdb field.
func (o *OraclePdbRestoreParams) SetRestoreToExistingCdb(v bool) {
	o.RestoreToExistingCdb.Set(&v)
}
// SetRestoreToExistingCdbNil sets the value for RestoreToExistingCdb to be an explicit nil
func (o *OraclePdbRestoreParams) SetRestoreToExistingCdbNil() {
	o.RestoreToExistingCdb.Set(nil)
}

// UnsetRestoreToExistingCdb ensures that no value is present for RestoreToExistingCdb, not even an explicit nil
func (o *OraclePdbRestoreParams) UnsetRestoreToExistingCdb() {
	o.RestoreToExistingCdb.Unset()
}

// GetSourceCdbKeystorePassword returns the SourceCdbKeystorePassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OraclePdbRestoreParams) GetSourceCdbKeystorePassword() string {
	if o == nil || IsNil(o.SourceCdbKeystorePassword.Get()) {
		var ret string
		return ret
	}
	return *o.SourceCdbKeystorePassword.Get()
}

// GetSourceCdbKeystorePasswordOk returns a tuple with the SourceCdbKeystorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbRestoreParams) GetSourceCdbKeystorePasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceCdbKeystorePassword.Get(), o.SourceCdbKeystorePassword.IsSet()
}

// HasSourceCdbKeystorePassword returns a boolean if a field has been set.
func (o *OraclePdbRestoreParams) HasSourceCdbKeystorePassword() bool {
	if o != nil && o.SourceCdbKeystorePassword.IsSet() {
		return true
	}

	return false
}

// SetSourceCdbKeystorePassword gets a reference to the given NullableString and assigns it to the SourceCdbKeystorePassword field.
func (o *OraclePdbRestoreParams) SetSourceCdbKeystorePassword(v string) {
	o.SourceCdbKeystorePassword.Set(&v)
}
// SetSourceCdbKeystorePasswordNil sets the value for SourceCdbKeystorePassword to be an explicit nil
func (o *OraclePdbRestoreParams) SetSourceCdbKeystorePasswordNil() {
	o.SourceCdbKeystorePassword.Set(nil)
}

// UnsetSourceCdbKeystorePassword ensures that no value is present for SourceCdbKeystorePassword, not even an explicit nil
func (o *OraclePdbRestoreParams) UnsetSourceCdbKeystorePassword() {
	o.SourceCdbKeystorePassword.Unset()
}

// GetTargetCdbKeystorePassword returns the TargetCdbKeystorePassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OraclePdbRestoreParams) GetTargetCdbKeystorePassword() string {
	if o == nil || IsNil(o.TargetCdbKeystorePassword.Get()) {
		var ret string
		return ret
	}
	return *o.TargetCdbKeystorePassword.Get()
}

// GetTargetCdbKeystorePasswordOk returns a tuple with the TargetCdbKeystorePassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OraclePdbRestoreParams) GetTargetCdbKeystorePasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetCdbKeystorePassword.Get(), o.TargetCdbKeystorePassword.IsSet()
}

// HasTargetCdbKeystorePassword returns a boolean if a field has been set.
func (o *OraclePdbRestoreParams) HasTargetCdbKeystorePassword() bool {
	if o != nil && o.TargetCdbKeystorePassword.IsSet() {
		return true
	}

	return false
}

// SetTargetCdbKeystorePassword gets a reference to the given NullableString and assigns it to the TargetCdbKeystorePassword field.
func (o *OraclePdbRestoreParams) SetTargetCdbKeystorePassword(v string) {
	o.TargetCdbKeystorePassword.Set(&v)
}
// SetTargetCdbKeystorePasswordNil sets the value for TargetCdbKeystorePassword to be an explicit nil
func (o *OraclePdbRestoreParams) SetTargetCdbKeystorePasswordNil() {
	o.TargetCdbKeystorePassword.Set(nil)
}

// UnsetTargetCdbKeystorePassword ensures that no value is present for TargetCdbKeystorePassword, not even an explicit nil
func (o *OraclePdbRestoreParams) UnsetTargetCdbKeystorePassword() {
	o.TargetCdbKeystorePassword.Unset()
}

func (o OraclePdbRestoreParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OraclePdbRestoreParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DropDuplicatePDB.IsSet() {
		toSerialize["dropDuplicatePDB"] = o.DropDuplicatePDB.Get()
	}
	if o.IncludeInRestore.IsSet() {
		toSerialize["includeInRestore"] = o.IncludeInRestore.Get()
	}
	if o.PdbObjects != nil {
		toSerialize["pdbObjects"] = o.PdbObjects
	}
	if o.RenamePdbMap != nil {
		toSerialize["renamePdbMap"] = o.RenamePdbMap
	}
	if o.RestoreToExistingCdb.IsSet() {
		toSerialize["restoreToExistingCdb"] = o.RestoreToExistingCdb.Get()
	}
	if o.SourceCdbKeystorePassword.IsSet() {
		toSerialize["sourceCdbKeystorePassword"] = o.SourceCdbKeystorePassword.Get()
	}
	if o.TargetCdbKeystorePassword.IsSet() {
		toSerialize["targetCdbKeystorePassword"] = o.TargetCdbKeystorePassword.Get()
	}
	return toSerialize, nil
}

type NullableOraclePdbRestoreParams struct {
	value *OraclePdbRestoreParams
	isSet bool
}

func (v NullableOraclePdbRestoreParams) Get() *OraclePdbRestoreParams {
	return v.value
}

func (v *NullableOraclePdbRestoreParams) Set(val *OraclePdbRestoreParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOraclePdbRestoreParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOraclePdbRestoreParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOraclePdbRestoreParams(val *OraclePdbRestoreParams) *NullableOraclePdbRestoreParams {
	return &NullableOraclePdbRestoreParams{value: val, isSet: true}
}

func (v NullableOraclePdbRestoreParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOraclePdbRestoreParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


