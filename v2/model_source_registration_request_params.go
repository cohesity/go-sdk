/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceRegistrationRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceRegistrationRequestParams{}

// SourceRegistrationRequestParams Specifies the Source Registration parameters.
type SourceRegistrationRequestParams struct {
	// Specifies the advanced configuration for a protection source.
	AdvancedConfigs []KeyValuePair `json:"advancedConfigs,omitempty"`
	// Specifies the id of the connection from where this source is reachable. This should only be set for a source being registered by a tenant user.
	ConnectionId NullableInt64 `json:"connectionId,omitempty"`
	// Specfies the list of connections for the source.
	Connections []ConnectionConfig `json:"connections,omitempty"`
	// Specifies the connector group id of connector groups.
	ConnectorGroupId NullableInt64 `json:"connectorGroupId,omitempty"`
	// Specifies the key that user has encrypted the credential with.
	EncryptionKey NullableString `json:"encryptionKey,omitempty"`
	// Specifies the environment type of the Protection Source.
	Environment NullableString `json:"environment"`
	// Specifies if credentials are encrypted by internal key.
	IsInternalEncrypted NullableBool `json:"isInternalEncrypted,omitempty"`
	// A user specified name for this source.
	Name NullableString `json:"name,omitempty"`
	AwsParams *AwsSourceRegistrationParams `json:"awsParams,omitempty"`
	AzureParams *AzureSourceRegistrationParams `json:"azureParams,omitempty"`
	CassandraParams *CassandraSourceRegistrationParams `json:"cassandraParams,omitempty"`
	CouchbaseParams *CouchbaseSourceRegistrationParams `json:"couchbaseParams,omitempty"`
	ElastifileParams *ElastifileRegistrationParams `json:"elastifileParams,omitempty"`
	ExperimentalAdapterParams *ExperimentalAdapterSourceRegistrationParams `json:"experimentalAdapterParams,omitempty"`
	FlashbladeParams *FlashbladeRegistrationParams `json:"flashbladeParams,omitempty"`
	GenericNasParams *GenericNasRegistrationParams `json:"genericNasParams,omitempty"`
	GpfsParams *GpfsRegistrationParams `json:"gpfsParams,omitempty"`
	HbaseParams *HbaseSourceRegistrationParams `json:"hbaseParams,omitempty"`
	HdfsParams *HdfsSourceRegistrationParams `json:"hdfsParams,omitempty"`
	HiveParams *HiveSourceRegistrationParams `json:"hiveParams,omitempty"`
	HypervParams *HyperVSourceRegistrationParams `json:"hypervParams,omitempty"`
	IsilonParams *IsilonRegistrationParams `json:"isilonParams,omitempty"`
	MongodbParams *MongoDBSourceRegistrationParams `json:"mongodbParams,omitempty"`
	NetappParams *NetappRegistrationParams `json:"netappParams,omitempty"`
	Office365Params *Office365SourceRegistrationParams `json:"office365Params,omitempty"`
	PhysicalParams *PhysicalSourceRegistrationParams `json:"physicalParams,omitempty"`
	SapHanaParams *SapHanaSourceRegistrationParams `json:"sapHanaParams,omitempty"`
	SfdcParams *SfdcSourceRegistrationParams `json:"sfdcParams,omitempty"`
	UdaParams *UdaSourceRegistrationParams `json:"udaParams,omitempty"`
	VmwareParams *VmwareSourceRegistrationParams `json:"vmwareParams,omitempty"`
}

type _SourceRegistrationRequestParams SourceRegistrationRequestParams

// NewSourceRegistrationRequestParams instantiates a new SourceRegistrationRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceRegistrationRequestParams(environment NullableString) *SourceRegistrationRequestParams {
	this := SourceRegistrationRequestParams{}
	this.Environment = environment
	return &this
}

// NewSourceRegistrationRequestParamsWithDefaults instantiates a new SourceRegistrationRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceRegistrationRequestParamsWithDefaults() *SourceRegistrationRequestParams {
	this := SourceRegistrationRequestParams{}
	return &this
}

// GetAdvancedConfigs returns the AdvancedConfigs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceRegistrationRequestParams) GetAdvancedConfigs() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.AdvancedConfigs
}

// GetAdvancedConfigsOk returns a tuple with the AdvancedConfigs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationRequestParams) GetAdvancedConfigsOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.AdvancedConfigs) {
		return nil, false
	}
	return o.AdvancedConfigs, true
}

// HasAdvancedConfigs returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasAdvancedConfigs() bool {
	if o != nil && !IsNil(o.AdvancedConfigs) {
		return true
	}

	return false
}

// SetAdvancedConfigs gets a reference to the given []KeyValuePair and assigns it to the AdvancedConfigs field.
func (o *SourceRegistrationRequestParams) SetAdvancedConfigs(v []KeyValuePair) {
	o.AdvancedConfigs = v
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceRegistrationRequestParams) GetConnectionId() int64 {
	if o == nil || IsNil(o.ConnectionId.Get()) {
		var ret int64
		return ret
	}
	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationRequestParams) GetConnectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// HasConnectionId returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasConnectionId() bool {
	if o != nil && o.ConnectionId.IsSet() {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given NullableInt64 and assigns it to the ConnectionId field.
func (o *SourceRegistrationRequestParams) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}
// SetConnectionIdNil sets the value for ConnectionId to be an explicit nil
func (o *SourceRegistrationRequestParams) SetConnectionIdNil() {
	o.ConnectionId.Set(nil)
}

// UnsetConnectionId ensures that no value is present for ConnectionId, not even an explicit nil
func (o *SourceRegistrationRequestParams) UnsetConnectionId() {
	o.ConnectionId.Unset()
}

// GetConnections returns the Connections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceRegistrationRequestParams) GetConnections() []ConnectionConfig {
	if o == nil {
		var ret []ConnectionConfig
		return ret
	}
	return o.Connections
}

// GetConnectionsOk returns a tuple with the Connections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationRequestParams) GetConnectionsOk() ([]ConnectionConfig, bool) {
	if o == nil || IsNil(o.Connections) {
		return nil, false
	}
	return o.Connections, true
}

// HasConnections returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasConnections() bool {
	if o != nil && !IsNil(o.Connections) {
		return true
	}

	return false
}

// SetConnections gets a reference to the given []ConnectionConfig and assigns it to the Connections field.
func (o *SourceRegistrationRequestParams) SetConnections(v []ConnectionConfig) {
	o.Connections = v
}

// GetConnectorGroupId returns the ConnectorGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceRegistrationRequestParams) GetConnectorGroupId() int64 {
	if o == nil || IsNil(o.ConnectorGroupId.Get()) {
		var ret int64
		return ret
	}
	return *o.ConnectorGroupId.Get()
}

// GetConnectorGroupIdOk returns a tuple with the ConnectorGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationRequestParams) GetConnectorGroupIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectorGroupId.Get(), o.ConnectorGroupId.IsSet()
}

// HasConnectorGroupId returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasConnectorGroupId() bool {
	if o != nil && o.ConnectorGroupId.IsSet() {
		return true
	}

	return false
}

// SetConnectorGroupId gets a reference to the given NullableInt64 and assigns it to the ConnectorGroupId field.
func (o *SourceRegistrationRequestParams) SetConnectorGroupId(v int64) {
	o.ConnectorGroupId.Set(&v)
}
// SetConnectorGroupIdNil sets the value for ConnectorGroupId to be an explicit nil
func (o *SourceRegistrationRequestParams) SetConnectorGroupIdNil() {
	o.ConnectorGroupId.Set(nil)
}

// UnsetConnectorGroupId ensures that no value is present for ConnectorGroupId, not even an explicit nil
func (o *SourceRegistrationRequestParams) UnsetConnectorGroupId() {
	o.ConnectorGroupId.Unset()
}

// GetEncryptionKey returns the EncryptionKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceRegistrationRequestParams) GetEncryptionKey() string {
	if o == nil || IsNil(o.EncryptionKey.Get()) {
		var ret string
		return ret
	}
	return *o.EncryptionKey.Get()
}

// GetEncryptionKeyOk returns a tuple with the EncryptionKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationRequestParams) GetEncryptionKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EncryptionKey.Get(), o.EncryptionKey.IsSet()
}

// HasEncryptionKey returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasEncryptionKey() bool {
	if o != nil && o.EncryptionKey.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKey gets a reference to the given NullableString and assigns it to the EncryptionKey field.
func (o *SourceRegistrationRequestParams) SetEncryptionKey(v string) {
	o.EncryptionKey.Set(&v)
}
// SetEncryptionKeyNil sets the value for EncryptionKey to be an explicit nil
func (o *SourceRegistrationRequestParams) SetEncryptionKeyNil() {
	o.EncryptionKey.Set(nil)
}

// UnsetEncryptionKey ensures that no value is present for EncryptionKey, not even an explicit nil
func (o *SourceRegistrationRequestParams) UnsetEncryptionKey() {
	o.EncryptionKey.Unset()
}

// GetEnvironment returns the Environment field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SourceRegistrationRequestParams) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}

	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationRequestParams) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// SetEnvironment sets field value
func (o *SourceRegistrationRequestParams) SetEnvironment(v string) {
	o.Environment.Set(&v)
}

// GetIsInternalEncrypted returns the IsInternalEncrypted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceRegistrationRequestParams) GetIsInternalEncrypted() bool {
	if o == nil || IsNil(o.IsInternalEncrypted.Get()) {
		var ret bool
		return ret
	}
	return *o.IsInternalEncrypted.Get()
}

// GetIsInternalEncryptedOk returns a tuple with the IsInternalEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationRequestParams) GetIsInternalEncryptedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsInternalEncrypted.Get(), o.IsInternalEncrypted.IsSet()
}

// HasIsInternalEncrypted returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasIsInternalEncrypted() bool {
	if o != nil && o.IsInternalEncrypted.IsSet() {
		return true
	}

	return false
}

// SetIsInternalEncrypted gets a reference to the given NullableBool and assigns it to the IsInternalEncrypted field.
func (o *SourceRegistrationRequestParams) SetIsInternalEncrypted(v bool) {
	o.IsInternalEncrypted.Set(&v)
}
// SetIsInternalEncryptedNil sets the value for IsInternalEncrypted to be an explicit nil
func (o *SourceRegistrationRequestParams) SetIsInternalEncryptedNil() {
	o.IsInternalEncrypted.Set(nil)
}

// UnsetIsInternalEncrypted ensures that no value is present for IsInternalEncrypted, not even an explicit nil
func (o *SourceRegistrationRequestParams) UnsetIsInternalEncrypted() {
	o.IsInternalEncrypted.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceRegistrationRequestParams) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationRequestParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *SourceRegistrationRequestParams) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *SourceRegistrationRequestParams) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *SourceRegistrationRequestParams) UnsetName() {
	o.Name.Unset()
}

// GetAwsParams returns the AwsParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetAwsParams() AwsSourceRegistrationParams {
	if o == nil || IsNil(o.AwsParams) {
		var ret AwsSourceRegistrationParams
		return ret
	}
	return *o.AwsParams
}

// GetAwsParamsOk returns a tuple with the AwsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetAwsParamsOk() (*AwsSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.AwsParams) {
		return nil, false
	}
	return o.AwsParams, true
}

// HasAwsParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasAwsParams() bool {
	if o != nil && !IsNil(o.AwsParams) {
		return true
	}

	return false
}

// SetAwsParams gets a reference to the given AwsSourceRegistrationParams and assigns it to the AwsParams field.
func (o *SourceRegistrationRequestParams) SetAwsParams(v AwsSourceRegistrationParams) {
	o.AwsParams = &v
}

// GetAzureParams returns the AzureParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetAzureParams() AzureSourceRegistrationParams {
	if o == nil || IsNil(o.AzureParams) {
		var ret AzureSourceRegistrationParams
		return ret
	}
	return *o.AzureParams
}

// GetAzureParamsOk returns a tuple with the AzureParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetAzureParamsOk() (*AzureSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.AzureParams) {
		return nil, false
	}
	return o.AzureParams, true
}

// HasAzureParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasAzureParams() bool {
	if o != nil && !IsNil(o.AzureParams) {
		return true
	}

	return false
}

// SetAzureParams gets a reference to the given AzureSourceRegistrationParams and assigns it to the AzureParams field.
func (o *SourceRegistrationRequestParams) SetAzureParams(v AzureSourceRegistrationParams) {
	o.AzureParams = &v
}

// GetCassandraParams returns the CassandraParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetCassandraParams() CassandraSourceRegistrationParams {
	if o == nil || IsNil(o.CassandraParams) {
		var ret CassandraSourceRegistrationParams
		return ret
	}
	return *o.CassandraParams
}

// GetCassandraParamsOk returns a tuple with the CassandraParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetCassandraParamsOk() (*CassandraSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.CassandraParams) {
		return nil, false
	}
	return o.CassandraParams, true
}

// HasCassandraParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasCassandraParams() bool {
	if o != nil && !IsNil(o.CassandraParams) {
		return true
	}

	return false
}

// SetCassandraParams gets a reference to the given CassandraSourceRegistrationParams and assigns it to the CassandraParams field.
func (o *SourceRegistrationRequestParams) SetCassandraParams(v CassandraSourceRegistrationParams) {
	o.CassandraParams = &v
}

// GetCouchbaseParams returns the CouchbaseParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetCouchbaseParams() CouchbaseSourceRegistrationParams {
	if o == nil || IsNil(o.CouchbaseParams) {
		var ret CouchbaseSourceRegistrationParams
		return ret
	}
	return *o.CouchbaseParams
}

// GetCouchbaseParamsOk returns a tuple with the CouchbaseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetCouchbaseParamsOk() (*CouchbaseSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.CouchbaseParams) {
		return nil, false
	}
	return o.CouchbaseParams, true
}

// HasCouchbaseParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasCouchbaseParams() bool {
	if o != nil && !IsNil(o.CouchbaseParams) {
		return true
	}

	return false
}

// SetCouchbaseParams gets a reference to the given CouchbaseSourceRegistrationParams and assigns it to the CouchbaseParams field.
func (o *SourceRegistrationRequestParams) SetCouchbaseParams(v CouchbaseSourceRegistrationParams) {
	o.CouchbaseParams = &v
}

// GetElastifileParams returns the ElastifileParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetElastifileParams() ElastifileRegistrationParams {
	if o == nil || IsNil(o.ElastifileParams) {
		var ret ElastifileRegistrationParams
		return ret
	}
	return *o.ElastifileParams
}

// GetElastifileParamsOk returns a tuple with the ElastifileParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetElastifileParamsOk() (*ElastifileRegistrationParams, bool) {
	if o == nil || IsNil(o.ElastifileParams) {
		return nil, false
	}
	return o.ElastifileParams, true
}

// HasElastifileParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasElastifileParams() bool {
	if o != nil && !IsNil(o.ElastifileParams) {
		return true
	}

	return false
}

// SetElastifileParams gets a reference to the given ElastifileRegistrationParams and assigns it to the ElastifileParams field.
func (o *SourceRegistrationRequestParams) SetElastifileParams(v ElastifileRegistrationParams) {
	o.ElastifileParams = &v
}

// GetExperimentalAdapterParams returns the ExperimentalAdapterParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetExperimentalAdapterParams() ExperimentalAdapterSourceRegistrationParams {
	if o == nil || IsNil(o.ExperimentalAdapterParams) {
		var ret ExperimentalAdapterSourceRegistrationParams
		return ret
	}
	return *o.ExperimentalAdapterParams
}

// GetExperimentalAdapterParamsOk returns a tuple with the ExperimentalAdapterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetExperimentalAdapterParamsOk() (*ExperimentalAdapterSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.ExperimentalAdapterParams) {
		return nil, false
	}
	return o.ExperimentalAdapterParams, true
}

// HasExperimentalAdapterParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasExperimentalAdapterParams() bool {
	if o != nil && !IsNil(o.ExperimentalAdapterParams) {
		return true
	}

	return false
}

// SetExperimentalAdapterParams gets a reference to the given ExperimentalAdapterSourceRegistrationParams and assigns it to the ExperimentalAdapterParams field.
func (o *SourceRegistrationRequestParams) SetExperimentalAdapterParams(v ExperimentalAdapterSourceRegistrationParams) {
	o.ExperimentalAdapterParams = &v
}

// GetFlashbladeParams returns the FlashbladeParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetFlashbladeParams() FlashbladeRegistrationParams {
	if o == nil || IsNil(o.FlashbladeParams) {
		var ret FlashbladeRegistrationParams
		return ret
	}
	return *o.FlashbladeParams
}

// GetFlashbladeParamsOk returns a tuple with the FlashbladeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetFlashbladeParamsOk() (*FlashbladeRegistrationParams, bool) {
	if o == nil || IsNil(o.FlashbladeParams) {
		return nil, false
	}
	return o.FlashbladeParams, true
}

// HasFlashbladeParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasFlashbladeParams() bool {
	if o != nil && !IsNil(o.FlashbladeParams) {
		return true
	}

	return false
}

// SetFlashbladeParams gets a reference to the given FlashbladeRegistrationParams and assigns it to the FlashbladeParams field.
func (o *SourceRegistrationRequestParams) SetFlashbladeParams(v FlashbladeRegistrationParams) {
	o.FlashbladeParams = &v
}

// GetGenericNasParams returns the GenericNasParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetGenericNasParams() GenericNasRegistrationParams {
	if o == nil || IsNil(o.GenericNasParams) {
		var ret GenericNasRegistrationParams
		return ret
	}
	return *o.GenericNasParams
}

// GetGenericNasParamsOk returns a tuple with the GenericNasParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetGenericNasParamsOk() (*GenericNasRegistrationParams, bool) {
	if o == nil || IsNil(o.GenericNasParams) {
		return nil, false
	}
	return o.GenericNasParams, true
}

// HasGenericNasParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasGenericNasParams() bool {
	if o != nil && !IsNil(o.GenericNasParams) {
		return true
	}

	return false
}

// SetGenericNasParams gets a reference to the given GenericNasRegistrationParams and assigns it to the GenericNasParams field.
func (o *SourceRegistrationRequestParams) SetGenericNasParams(v GenericNasRegistrationParams) {
	o.GenericNasParams = &v
}

// GetGpfsParams returns the GpfsParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetGpfsParams() GpfsRegistrationParams {
	if o == nil || IsNil(o.GpfsParams) {
		var ret GpfsRegistrationParams
		return ret
	}
	return *o.GpfsParams
}

// GetGpfsParamsOk returns a tuple with the GpfsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetGpfsParamsOk() (*GpfsRegistrationParams, bool) {
	if o == nil || IsNil(o.GpfsParams) {
		return nil, false
	}
	return o.GpfsParams, true
}

// HasGpfsParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasGpfsParams() bool {
	if o != nil && !IsNil(o.GpfsParams) {
		return true
	}

	return false
}

// SetGpfsParams gets a reference to the given GpfsRegistrationParams and assigns it to the GpfsParams field.
func (o *SourceRegistrationRequestParams) SetGpfsParams(v GpfsRegistrationParams) {
	o.GpfsParams = &v
}

// GetHbaseParams returns the HbaseParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetHbaseParams() HbaseSourceRegistrationParams {
	if o == nil || IsNil(o.HbaseParams) {
		var ret HbaseSourceRegistrationParams
		return ret
	}
	return *o.HbaseParams
}

// GetHbaseParamsOk returns a tuple with the HbaseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetHbaseParamsOk() (*HbaseSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.HbaseParams) {
		return nil, false
	}
	return o.HbaseParams, true
}

// HasHbaseParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasHbaseParams() bool {
	if o != nil && !IsNil(o.HbaseParams) {
		return true
	}

	return false
}

// SetHbaseParams gets a reference to the given HbaseSourceRegistrationParams and assigns it to the HbaseParams field.
func (o *SourceRegistrationRequestParams) SetHbaseParams(v HbaseSourceRegistrationParams) {
	o.HbaseParams = &v
}

// GetHdfsParams returns the HdfsParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetHdfsParams() HdfsSourceRegistrationParams {
	if o == nil || IsNil(o.HdfsParams) {
		var ret HdfsSourceRegistrationParams
		return ret
	}
	return *o.HdfsParams
}

// GetHdfsParamsOk returns a tuple with the HdfsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetHdfsParamsOk() (*HdfsSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.HdfsParams) {
		return nil, false
	}
	return o.HdfsParams, true
}

// HasHdfsParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasHdfsParams() bool {
	if o != nil && !IsNil(o.HdfsParams) {
		return true
	}

	return false
}

// SetHdfsParams gets a reference to the given HdfsSourceRegistrationParams and assigns it to the HdfsParams field.
func (o *SourceRegistrationRequestParams) SetHdfsParams(v HdfsSourceRegistrationParams) {
	o.HdfsParams = &v
}

// GetHiveParams returns the HiveParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetHiveParams() HiveSourceRegistrationParams {
	if o == nil || IsNil(o.HiveParams) {
		var ret HiveSourceRegistrationParams
		return ret
	}
	return *o.HiveParams
}

// GetHiveParamsOk returns a tuple with the HiveParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetHiveParamsOk() (*HiveSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.HiveParams) {
		return nil, false
	}
	return o.HiveParams, true
}

// HasHiveParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasHiveParams() bool {
	if o != nil && !IsNil(o.HiveParams) {
		return true
	}

	return false
}

// SetHiveParams gets a reference to the given HiveSourceRegistrationParams and assigns it to the HiveParams field.
func (o *SourceRegistrationRequestParams) SetHiveParams(v HiveSourceRegistrationParams) {
	o.HiveParams = &v
}

// GetHypervParams returns the HypervParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetHypervParams() HyperVSourceRegistrationParams {
	if o == nil || IsNil(o.HypervParams) {
		var ret HyperVSourceRegistrationParams
		return ret
	}
	return *o.HypervParams
}

// GetHypervParamsOk returns a tuple with the HypervParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetHypervParamsOk() (*HyperVSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.HypervParams) {
		return nil, false
	}
	return o.HypervParams, true
}

// HasHypervParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasHypervParams() bool {
	if o != nil && !IsNil(o.HypervParams) {
		return true
	}

	return false
}

// SetHypervParams gets a reference to the given HyperVSourceRegistrationParams and assigns it to the HypervParams field.
func (o *SourceRegistrationRequestParams) SetHypervParams(v HyperVSourceRegistrationParams) {
	o.HypervParams = &v
}

// GetIsilonParams returns the IsilonParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetIsilonParams() IsilonRegistrationParams {
	if o == nil || IsNil(o.IsilonParams) {
		var ret IsilonRegistrationParams
		return ret
	}
	return *o.IsilonParams
}

// GetIsilonParamsOk returns a tuple with the IsilonParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetIsilonParamsOk() (*IsilonRegistrationParams, bool) {
	if o == nil || IsNil(o.IsilonParams) {
		return nil, false
	}
	return o.IsilonParams, true
}

// HasIsilonParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasIsilonParams() bool {
	if o != nil && !IsNil(o.IsilonParams) {
		return true
	}

	return false
}

// SetIsilonParams gets a reference to the given IsilonRegistrationParams and assigns it to the IsilonParams field.
func (o *SourceRegistrationRequestParams) SetIsilonParams(v IsilonRegistrationParams) {
	o.IsilonParams = &v
}

// GetMongodbParams returns the MongodbParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetMongodbParams() MongoDBSourceRegistrationParams {
	if o == nil || IsNil(o.MongodbParams) {
		var ret MongoDBSourceRegistrationParams
		return ret
	}
	return *o.MongodbParams
}

// GetMongodbParamsOk returns a tuple with the MongodbParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetMongodbParamsOk() (*MongoDBSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.MongodbParams) {
		return nil, false
	}
	return o.MongodbParams, true
}

// HasMongodbParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasMongodbParams() bool {
	if o != nil && !IsNil(o.MongodbParams) {
		return true
	}

	return false
}

// SetMongodbParams gets a reference to the given MongoDBSourceRegistrationParams and assigns it to the MongodbParams field.
func (o *SourceRegistrationRequestParams) SetMongodbParams(v MongoDBSourceRegistrationParams) {
	o.MongodbParams = &v
}

// GetNetappParams returns the NetappParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetNetappParams() NetappRegistrationParams {
	if o == nil || IsNil(o.NetappParams) {
		var ret NetappRegistrationParams
		return ret
	}
	return *o.NetappParams
}

// GetNetappParamsOk returns a tuple with the NetappParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetNetappParamsOk() (*NetappRegistrationParams, bool) {
	if o == nil || IsNil(o.NetappParams) {
		return nil, false
	}
	return o.NetappParams, true
}

// HasNetappParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasNetappParams() bool {
	if o != nil && !IsNil(o.NetappParams) {
		return true
	}

	return false
}

// SetNetappParams gets a reference to the given NetappRegistrationParams and assigns it to the NetappParams field.
func (o *SourceRegistrationRequestParams) SetNetappParams(v NetappRegistrationParams) {
	o.NetappParams = &v
}

// GetOffice365Params returns the Office365Params field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetOffice365Params() Office365SourceRegistrationParams {
	if o == nil || IsNil(o.Office365Params) {
		var ret Office365SourceRegistrationParams
		return ret
	}
	return *o.Office365Params
}

// GetOffice365ParamsOk returns a tuple with the Office365Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetOffice365ParamsOk() (*Office365SourceRegistrationParams, bool) {
	if o == nil || IsNil(o.Office365Params) {
		return nil, false
	}
	return o.Office365Params, true
}

// HasOffice365Params returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasOffice365Params() bool {
	if o != nil && !IsNil(o.Office365Params) {
		return true
	}

	return false
}

// SetOffice365Params gets a reference to the given Office365SourceRegistrationParams and assigns it to the Office365Params field.
func (o *SourceRegistrationRequestParams) SetOffice365Params(v Office365SourceRegistrationParams) {
	o.Office365Params = &v
}

// GetPhysicalParams returns the PhysicalParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetPhysicalParams() PhysicalSourceRegistrationParams {
	if o == nil || IsNil(o.PhysicalParams) {
		var ret PhysicalSourceRegistrationParams
		return ret
	}
	return *o.PhysicalParams
}

// GetPhysicalParamsOk returns a tuple with the PhysicalParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetPhysicalParamsOk() (*PhysicalSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.PhysicalParams) {
		return nil, false
	}
	return o.PhysicalParams, true
}

// HasPhysicalParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasPhysicalParams() bool {
	if o != nil && !IsNil(o.PhysicalParams) {
		return true
	}

	return false
}

// SetPhysicalParams gets a reference to the given PhysicalSourceRegistrationParams and assigns it to the PhysicalParams field.
func (o *SourceRegistrationRequestParams) SetPhysicalParams(v PhysicalSourceRegistrationParams) {
	o.PhysicalParams = &v
}

// GetSapHanaParams returns the SapHanaParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetSapHanaParams() SapHanaSourceRegistrationParams {
	if o == nil || IsNil(o.SapHanaParams) {
		var ret SapHanaSourceRegistrationParams
		return ret
	}
	return *o.SapHanaParams
}

// GetSapHanaParamsOk returns a tuple with the SapHanaParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetSapHanaParamsOk() (*SapHanaSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.SapHanaParams) {
		return nil, false
	}
	return o.SapHanaParams, true
}

// HasSapHanaParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasSapHanaParams() bool {
	if o != nil && !IsNil(o.SapHanaParams) {
		return true
	}

	return false
}

// SetSapHanaParams gets a reference to the given SapHanaSourceRegistrationParams and assigns it to the SapHanaParams field.
func (o *SourceRegistrationRequestParams) SetSapHanaParams(v SapHanaSourceRegistrationParams) {
	o.SapHanaParams = &v
}

// GetSfdcParams returns the SfdcParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetSfdcParams() SfdcSourceRegistrationParams {
	if o == nil || IsNil(o.SfdcParams) {
		var ret SfdcSourceRegistrationParams
		return ret
	}
	return *o.SfdcParams
}

// GetSfdcParamsOk returns a tuple with the SfdcParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetSfdcParamsOk() (*SfdcSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.SfdcParams) {
		return nil, false
	}
	return o.SfdcParams, true
}

// HasSfdcParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasSfdcParams() bool {
	if o != nil && !IsNil(o.SfdcParams) {
		return true
	}

	return false
}

// SetSfdcParams gets a reference to the given SfdcSourceRegistrationParams and assigns it to the SfdcParams field.
func (o *SourceRegistrationRequestParams) SetSfdcParams(v SfdcSourceRegistrationParams) {
	o.SfdcParams = &v
}

// GetUdaParams returns the UdaParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetUdaParams() UdaSourceRegistrationParams {
	if o == nil || IsNil(o.UdaParams) {
		var ret UdaSourceRegistrationParams
		return ret
	}
	return *o.UdaParams
}

// GetUdaParamsOk returns a tuple with the UdaParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetUdaParamsOk() (*UdaSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.UdaParams) {
		return nil, false
	}
	return o.UdaParams, true
}

// HasUdaParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasUdaParams() bool {
	if o != nil && !IsNil(o.UdaParams) {
		return true
	}

	return false
}

// SetUdaParams gets a reference to the given UdaSourceRegistrationParams and assigns it to the UdaParams field.
func (o *SourceRegistrationRequestParams) SetUdaParams(v UdaSourceRegistrationParams) {
	o.UdaParams = &v
}

// GetVmwareParams returns the VmwareParams field value if set, zero value otherwise.
func (o *SourceRegistrationRequestParams) GetVmwareParams() VmwareSourceRegistrationParams {
	if o == nil || IsNil(o.VmwareParams) {
		var ret VmwareSourceRegistrationParams
		return ret
	}
	return *o.VmwareParams
}

// GetVmwareParamsOk returns a tuple with the VmwareParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationRequestParams) GetVmwareParamsOk() (*VmwareSourceRegistrationParams, bool) {
	if o == nil || IsNil(o.VmwareParams) {
		return nil, false
	}
	return o.VmwareParams, true
}

// HasVmwareParams returns a boolean if a field has been set.
func (o *SourceRegistrationRequestParams) HasVmwareParams() bool {
	if o != nil && !IsNil(o.VmwareParams) {
		return true
	}

	return false
}

// SetVmwareParams gets a reference to the given VmwareSourceRegistrationParams and assigns it to the VmwareParams field.
func (o *SourceRegistrationRequestParams) SetVmwareParams(v VmwareSourceRegistrationParams) {
	o.VmwareParams = &v
}

func (o SourceRegistrationRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceRegistrationRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AdvancedConfigs != nil {
		toSerialize["advancedConfigs"] = o.AdvancedConfigs
	}
	if o.ConnectionId.IsSet() {
		toSerialize["connectionId"] = o.ConnectionId.Get()
	}
	if o.Connections != nil {
		toSerialize["connections"] = o.Connections
	}
	if o.ConnectorGroupId.IsSet() {
		toSerialize["connectorGroupId"] = o.ConnectorGroupId.Get()
	}
	if o.EncryptionKey.IsSet() {
		toSerialize["encryptionKey"] = o.EncryptionKey.Get()
	}
	toSerialize["environment"] = o.Environment.Get()
	if o.IsInternalEncrypted.IsSet() {
		toSerialize["isInternalEncrypted"] = o.IsInternalEncrypted.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if !IsNil(o.AwsParams) {
		toSerialize["awsParams"] = o.AwsParams
	}
	if !IsNil(o.AzureParams) {
		toSerialize["azureParams"] = o.AzureParams
	}
	if !IsNil(o.CassandraParams) {
		toSerialize["cassandraParams"] = o.CassandraParams
	}
	if !IsNil(o.CouchbaseParams) {
		toSerialize["couchbaseParams"] = o.CouchbaseParams
	}
	if !IsNil(o.ElastifileParams) {
		toSerialize["elastifileParams"] = o.ElastifileParams
	}
	if !IsNil(o.ExperimentalAdapterParams) {
		toSerialize["experimentalAdapterParams"] = o.ExperimentalAdapterParams
	}
	if !IsNil(o.FlashbladeParams) {
		toSerialize["flashbladeParams"] = o.FlashbladeParams
	}
	if !IsNil(o.GenericNasParams) {
		toSerialize["genericNasParams"] = o.GenericNasParams
	}
	if !IsNil(o.GpfsParams) {
		toSerialize["gpfsParams"] = o.GpfsParams
	}
	if !IsNil(o.HbaseParams) {
		toSerialize["hbaseParams"] = o.HbaseParams
	}
	if !IsNil(o.HdfsParams) {
		toSerialize["hdfsParams"] = o.HdfsParams
	}
	if !IsNil(o.HiveParams) {
		toSerialize["hiveParams"] = o.HiveParams
	}
	if !IsNil(o.HypervParams) {
		toSerialize["hypervParams"] = o.HypervParams
	}
	if !IsNil(o.IsilonParams) {
		toSerialize["isilonParams"] = o.IsilonParams
	}
	if !IsNil(o.MongodbParams) {
		toSerialize["mongodbParams"] = o.MongodbParams
	}
	if !IsNil(o.NetappParams) {
		toSerialize["netappParams"] = o.NetappParams
	}
	if !IsNil(o.Office365Params) {
		toSerialize["office365Params"] = o.Office365Params
	}
	if !IsNil(o.PhysicalParams) {
		toSerialize["physicalParams"] = o.PhysicalParams
	}
	if !IsNil(o.SapHanaParams) {
		toSerialize["sapHanaParams"] = o.SapHanaParams
	}
	if !IsNil(o.SfdcParams) {
		toSerialize["sfdcParams"] = o.SfdcParams
	}
	if !IsNil(o.UdaParams) {
		toSerialize["udaParams"] = o.UdaParams
	}
	if !IsNil(o.VmwareParams) {
		toSerialize["vmwareParams"] = o.VmwareParams
	}
	return toSerialize, nil
}

func (o *SourceRegistrationRequestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceRegistrationRequestParams := _SourceRegistrationRequestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceRegistrationRequestParams)

	if err != nil {
		return err
	}

	*o = SourceRegistrationRequestParams(varSourceRegistrationRequestParams)

	return err
}

type NullableSourceRegistrationRequestParams struct {
	value *SourceRegistrationRequestParams
	isSet bool
}

func (v NullableSourceRegistrationRequestParams) Get() *SourceRegistrationRequestParams {
	return v.value
}

func (v *NullableSourceRegistrationRequestParams) Set(val *SourceRegistrationRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceRegistrationRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceRegistrationRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceRegistrationRequestParams(val *SourceRegistrationRequestParams) *NullableSourceRegistrationRequestParams {
	return &NullableSourceRegistrationRequestParams{value: val, isSet: true}
}

func (v NullableSourceRegistrationRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceRegistrationRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


