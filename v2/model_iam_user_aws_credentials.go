/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IamUserAwsCredentials type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IamUserAwsCredentials{}

// IamUserAwsCredentials Specifies the credentials to register a commercial AWS
type IamUserAwsCredentials struct {
	// Specifies Access key of the AWS account.
	AccessKey NullableString `json:"accessKey"`
	// Specifies Amazon Resource Name (owner ID) of the IAM user, acts as an unique identifier of as AWS entity.
	Arn NullableString `json:"arn"`
	// Specifies Secret Access key of the AWS account.
	SecretAccessKey NullableString `json:"secretAccessKey"`
}

type _IamUserAwsCredentials IamUserAwsCredentials

// NewIamUserAwsCredentials instantiates a new IamUserAwsCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIamUserAwsCredentials(accessKey NullableString, arn NullableString, secretAccessKey NullableString) *IamUserAwsCredentials {
	this := IamUserAwsCredentials{}
	this.AccessKey = accessKey
	this.Arn = arn
	this.SecretAccessKey = secretAccessKey
	return &this
}

// NewIamUserAwsCredentialsWithDefaults instantiates a new IamUserAwsCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIamUserAwsCredentialsWithDefaults() *IamUserAwsCredentials {
	this := IamUserAwsCredentials{}
	return &this
}

// GetAccessKey returns the AccessKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IamUserAwsCredentials) GetAccessKey() string {
	if o == nil || o.AccessKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccessKey.Get()
}

// GetAccessKeyOk returns a tuple with the AccessKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamUserAwsCredentials) GetAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessKey.Get(), o.AccessKey.IsSet()
}

// SetAccessKey sets field value
func (o *IamUserAwsCredentials) SetAccessKey(v string) {
	o.AccessKey.Set(&v)
}

// GetArn returns the Arn field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IamUserAwsCredentials) GetArn() string {
	if o == nil || o.Arn.Get() == nil {
		var ret string
		return ret
	}

	return *o.Arn.Get()
}

// GetArnOk returns a tuple with the Arn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamUserAwsCredentials) GetArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Arn.Get(), o.Arn.IsSet()
}

// SetArn sets field value
func (o *IamUserAwsCredentials) SetArn(v string) {
	o.Arn.Set(&v)
}

// GetSecretAccessKey returns the SecretAccessKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IamUserAwsCredentials) GetSecretAccessKey() string {
	if o == nil || o.SecretAccessKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.SecretAccessKey.Get()
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IamUserAwsCredentials) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecretAccessKey.Get(), o.SecretAccessKey.IsSet()
}

// SetSecretAccessKey sets field value
func (o *IamUserAwsCredentials) SetSecretAccessKey(v string) {
	o.SecretAccessKey.Set(&v)
}

func (o IamUserAwsCredentials) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IamUserAwsCredentials) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessKey"] = o.AccessKey.Get()
	toSerialize["arn"] = o.Arn.Get()
	toSerialize["secretAccessKey"] = o.SecretAccessKey.Get()
	return toSerialize, nil
}

func (o *IamUserAwsCredentials) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accessKey",
		"arn",
		"secretAccessKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIamUserAwsCredentials := _IamUserAwsCredentials{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIamUserAwsCredentials)

	if err != nil {
		return err
	}

	*o = IamUserAwsCredentials(varIamUserAwsCredentials)

	return err
}

type NullableIamUserAwsCredentials struct {
	value *IamUserAwsCredentials
	isSet bool
}

func (v NullableIamUserAwsCredentials) Get() *IamUserAwsCredentials {
	return v.value
}

func (v *NullableIamUserAwsCredentials) Set(val *IamUserAwsCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableIamUserAwsCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableIamUserAwsCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIamUserAwsCredentials(val *IamUserAwsCredentials) *NullableIamUserAwsCredentials {
	return &NullableIamUserAwsCredentials{value: val, isSet: true}
}

func (v NullableIamUserAwsCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIamUserAwsCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


