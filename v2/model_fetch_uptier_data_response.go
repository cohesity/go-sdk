/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FetchUptierDataResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FetchUptierDataResponse{}

// FetchUptierDataResponse Specifies the amount of data in bytes estimated to be uptiered as part of the current restore job.
type FetchUptierDataResponse struct {
	// Specifies the amount of data in bytes estimated to be uptiered as part of the current restore job.
	DataSize NullableInt64 `json:"dataSize,omitempty"`
}

// NewFetchUptierDataResponse instantiates a new FetchUptierDataResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFetchUptierDataResponse() *FetchUptierDataResponse {
	this := FetchUptierDataResponse{}
	return &this
}

// NewFetchUptierDataResponseWithDefaults instantiates a new FetchUptierDataResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFetchUptierDataResponseWithDefaults() *FetchUptierDataResponse {
	this := FetchUptierDataResponse{}
	return &this
}

// GetDataSize returns the DataSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FetchUptierDataResponse) GetDataSize() int64 {
	if o == nil || IsNil(o.DataSize.Get()) {
		var ret int64
		return ret
	}
	return *o.DataSize.Get()
}

// GetDataSizeOk returns a tuple with the DataSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FetchUptierDataResponse) GetDataSizeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataSize.Get(), o.DataSize.IsSet()
}

// HasDataSize returns a boolean if a field has been set.
func (o *FetchUptierDataResponse) HasDataSize() bool {
	if o != nil && o.DataSize.IsSet() {
		return true
	}

	return false
}

// SetDataSize gets a reference to the given NullableInt64 and assigns it to the DataSize field.
func (o *FetchUptierDataResponse) SetDataSize(v int64) {
	o.DataSize.Set(&v)
}
// SetDataSizeNil sets the value for DataSize to be an explicit nil
func (o *FetchUptierDataResponse) SetDataSizeNil() {
	o.DataSize.Set(nil)
}

// UnsetDataSize ensures that no value is present for DataSize, not even an explicit nil
func (o *FetchUptierDataResponse) UnsetDataSize() {
	o.DataSize.Unset()
}

func (o FetchUptierDataResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FetchUptierDataResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DataSize.IsSet() {
		toSerialize["dataSize"] = o.DataSize.Get()
	}
	return toSerialize, nil
}

type NullableFetchUptierDataResponse struct {
	value *FetchUptierDataResponse
	isSet bool
}

func (v NullableFetchUptierDataResponse) Get() *FetchUptierDataResponse {
	return v.value
}

func (v *NullableFetchUptierDataResponse) Set(val *FetchUptierDataResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFetchUptierDataResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFetchUptierDataResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFetchUptierDataResponse(val *FetchUptierDataResponse) *NullableFetchUptierDataResponse {
	return &NullableFetchUptierDataResponse{value: val, isSet: true}
}

func (v NullableFetchUptierDataResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFetchUptierDataResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


