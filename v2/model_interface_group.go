/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the InterfaceGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &InterfaceGroup{}

// InterfaceGroup Interface group paramters.
type InterfaceGroup struct {
	// Name of the interface group.
	Name string `json:"name"`
	NetworkParams *InterfaceGroupNetworkParams `json:"networkParams,omitempty"`
	// Node and interface parameters.
	NodeInterfaceParams []NodeInterfaceParams `json:"nodeInterfaceParams"`
	// Type of the interface group.
	Type string `json:"type"`
	// Id of the interface group.
	Id *int32 `json:"id,omitempty"`
}

type _InterfaceGroup InterfaceGroup

// NewInterfaceGroup instantiates a new InterfaceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterfaceGroup(name string, nodeInterfaceParams []NodeInterfaceParams, type_ string) *InterfaceGroup {
	this := InterfaceGroup{}
	this.Name = name
	this.NodeInterfaceParams = nodeInterfaceParams
	this.Type = type_
	return &this
}

// NewInterfaceGroupWithDefaults instantiates a new InterfaceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterfaceGroupWithDefaults() *InterfaceGroup {
	this := InterfaceGroup{}
	return &this
}

// GetName returns the Name field value
func (o *InterfaceGroup) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InterfaceGroup) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InterfaceGroup) SetName(v string) {
	o.Name = v
}

// GetNetworkParams returns the NetworkParams field value if set, zero value otherwise.
func (o *InterfaceGroup) GetNetworkParams() InterfaceGroupNetworkParams {
	if o == nil || IsNil(o.NetworkParams) {
		var ret InterfaceGroupNetworkParams
		return ret
	}
	return *o.NetworkParams
}

// GetNetworkParamsOk returns a tuple with the NetworkParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceGroup) GetNetworkParamsOk() (*InterfaceGroupNetworkParams, bool) {
	if o == nil || IsNil(o.NetworkParams) {
		return nil, false
	}
	return o.NetworkParams, true
}

// HasNetworkParams returns a boolean if a field has been set.
func (o *InterfaceGroup) HasNetworkParams() bool {
	if o != nil && !IsNil(o.NetworkParams) {
		return true
	}

	return false
}

// SetNetworkParams gets a reference to the given InterfaceGroupNetworkParams and assigns it to the NetworkParams field.
func (o *InterfaceGroup) SetNetworkParams(v InterfaceGroupNetworkParams) {
	o.NetworkParams = &v
}

// GetNodeInterfaceParams returns the NodeInterfaceParams field value
func (o *InterfaceGroup) GetNodeInterfaceParams() []NodeInterfaceParams {
	if o == nil {
		var ret []NodeInterfaceParams
		return ret
	}

	return o.NodeInterfaceParams
}

// GetNodeInterfaceParamsOk returns a tuple with the NodeInterfaceParams field value
// and a boolean to check if the value has been set.
func (o *InterfaceGroup) GetNodeInterfaceParamsOk() ([]NodeInterfaceParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeInterfaceParams, true
}

// SetNodeInterfaceParams sets field value
func (o *InterfaceGroup) SetNodeInterfaceParams(v []NodeInterfaceParams) {
	o.NodeInterfaceParams = v
}

// GetType returns the Type field value
func (o *InterfaceGroup) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InterfaceGroup) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InterfaceGroup) SetType(v string) {
	o.Type = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *InterfaceGroup) GetId() int32 {
	if o == nil || IsNil(o.Id) {
		var ret int32
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterfaceGroup) GetIdOk() (*int32, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *InterfaceGroup) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int32 and assigns it to the Id field.
func (o *InterfaceGroup) SetId(v int32) {
	o.Id = &v
}

func (o InterfaceGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o InterfaceGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.NetworkParams) {
		toSerialize["networkParams"] = o.NetworkParams
	}
	toSerialize["nodeInterfaceParams"] = o.NodeInterfaceParams
	toSerialize["type"] = o.Type
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	return toSerialize, nil
}

func (o *InterfaceGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
		"nodeInterfaceParams",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varInterfaceGroup := _InterfaceGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varInterfaceGroup)

	if err != nil {
		return err
	}

	*o = InterfaceGroup(varInterfaceGroup)

	return err
}

type NullableInterfaceGroup struct {
	value *InterfaceGroup
	isSet bool
}

func (v NullableInterfaceGroup) Get() *InterfaceGroup {
	return v.value
}

func (v *NullableInterfaceGroup) Set(val *InterfaceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableInterfaceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableInterfaceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterfaceGroup(val *InterfaceGroup) *NullableInterfaceGroup {
	return &NullableInterfaceGroup{value: val, isSet: true}
}

func (v NullableInterfaceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterfaceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


