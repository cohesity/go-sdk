/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UserSessionsCount type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserSessionsCount{}

// UserSessionsCount Specifies the sessions count for a user.
type UserSessionsCount struct {
	// Specifies the number of sessions for the user.
	SessionsCount *int64 `json:"sessionsCount,omitempty"`
	// Specifies the user sid.
	Sid *string `json:"sid,omitempty"`
}

// NewUserSessionsCount instantiates a new UserSessionsCount object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSessionsCount() *UserSessionsCount {
	this := UserSessionsCount{}
	return &this
}

// NewUserSessionsCountWithDefaults instantiates a new UserSessionsCount object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionsCountWithDefaults() *UserSessionsCount {
	this := UserSessionsCount{}
	return &this
}

// GetSessionsCount returns the SessionsCount field value if set, zero value otherwise.
func (o *UserSessionsCount) GetSessionsCount() int64 {
	if o == nil || IsNil(o.SessionsCount) {
		var ret int64
		return ret
	}
	return *o.SessionsCount
}

// GetSessionsCountOk returns a tuple with the SessionsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsCount) GetSessionsCountOk() (*int64, bool) {
	if o == nil || IsNil(o.SessionsCount) {
		return nil, false
	}
	return o.SessionsCount, true
}

// HasSessionsCount returns a boolean if a field has been set.
func (o *UserSessionsCount) HasSessionsCount() bool {
	if o != nil && !IsNil(o.SessionsCount) {
		return true
	}

	return false
}

// SetSessionsCount gets a reference to the given int64 and assigns it to the SessionsCount field.
func (o *UserSessionsCount) SetSessionsCount(v int64) {
	o.SessionsCount = &v
}

// GetSid returns the Sid field value if set, zero value otherwise.
func (o *UserSessionsCount) GetSid() string {
	if o == nil || IsNil(o.Sid) {
		var ret string
		return ret
	}
	return *o.Sid
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSessionsCount) GetSidOk() (*string, bool) {
	if o == nil || IsNil(o.Sid) {
		return nil, false
	}
	return o.Sid, true
}

// HasSid returns a boolean if a field has been set.
func (o *UserSessionsCount) HasSid() bool {
	if o != nil && !IsNil(o.Sid) {
		return true
	}

	return false
}

// SetSid gets a reference to the given string and assigns it to the Sid field.
func (o *UserSessionsCount) SetSid(v string) {
	o.Sid = &v
}

func (o UserSessionsCount) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserSessionsCount) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SessionsCount) {
		toSerialize["sessionsCount"] = o.SessionsCount
	}
	if !IsNil(o.Sid) {
		toSerialize["sid"] = o.Sid
	}
	return toSerialize, nil
}

type NullableUserSessionsCount struct {
	value *UserSessionsCount
	isSet bool
}

func (v NullableUserSessionsCount) Get() *UserSessionsCount {
	return v.value
}

func (v *NullableUserSessionsCount) Set(val *UserSessionsCount) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSessionsCount) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSessionsCount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSessionsCount(val *UserSessionsCount) *NullableUserSessionsCount {
	return &NullableUserSessionsCount{value: val, isSet: true}
}

func (v NullableUserSessionsCount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSessionsCount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


