/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddDmaasTenantCertRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddDmaasTenantCertRequest{}

// AddDmaasTenantCertRequest Specifies the parameters to add an Orion tenant certificate.
type AddDmaasTenantCertRequest struct {
	// Specifies the tenant certificate.
	Certificate NullableString `json:"certificate"`
	// Specifies the CA chain that is used to sign the connector certificate.
	ConnectorCaChain NullableString `json:"connectorCaChain"`
	// Specifies the passphrase used to encode the private key.
	Passphrase NullableString `json:"passphrase,omitempty"`
	// Specifies the tenant private key.
	PrivateKey NullableString `json:"privateKey"`
	// The id of the tenant.
	TenantId NullableString `json:"tenantId"`
}

type _AddDmaasTenantCertRequest AddDmaasTenantCertRequest

// NewAddDmaasTenantCertRequest instantiates a new AddDmaasTenantCertRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddDmaasTenantCertRequest(certificate NullableString, connectorCaChain NullableString, privateKey NullableString, tenantId NullableString) *AddDmaasTenantCertRequest {
	this := AddDmaasTenantCertRequest{}
	this.Certificate = certificate
	this.ConnectorCaChain = connectorCaChain
	this.PrivateKey = privateKey
	this.TenantId = tenantId
	return &this
}

// NewAddDmaasTenantCertRequestWithDefaults instantiates a new AddDmaasTenantCertRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddDmaasTenantCertRequestWithDefaults() *AddDmaasTenantCertRequest {
	this := AddDmaasTenantCertRequest{}
	return &this
}

// GetCertificate returns the Certificate field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddDmaasTenantCertRequest) GetCertificate() string {
	if o == nil || o.Certificate.Get() == nil {
		var ret string
		return ret
	}

	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddDmaasTenantCertRequest) GetCertificateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// SetCertificate sets field value
func (o *AddDmaasTenantCertRequest) SetCertificate(v string) {
	o.Certificate.Set(&v)
}

// GetConnectorCaChain returns the ConnectorCaChain field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddDmaasTenantCertRequest) GetConnectorCaChain() string {
	if o == nil || o.ConnectorCaChain.Get() == nil {
		var ret string
		return ret
	}

	return *o.ConnectorCaChain.Get()
}

// GetConnectorCaChainOk returns a tuple with the ConnectorCaChain field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddDmaasTenantCertRequest) GetConnectorCaChainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectorCaChain.Get(), o.ConnectorCaChain.IsSet()
}

// SetConnectorCaChain sets field value
func (o *AddDmaasTenantCertRequest) SetConnectorCaChain(v string) {
	o.ConnectorCaChain.Set(&v)
}

// GetPassphrase returns the Passphrase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddDmaasTenantCertRequest) GetPassphrase() string {
	if o == nil || IsNil(o.Passphrase.Get()) {
		var ret string
		return ret
	}
	return *o.Passphrase.Get()
}

// GetPassphraseOk returns a tuple with the Passphrase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddDmaasTenantCertRequest) GetPassphraseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Passphrase.Get(), o.Passphrase.IsSet()
}

// HasPassphrase returns a boolean if a field has been set.
func (o *AddDmaasTenantCertRequest) HasPassphrase() bool {
	if o != nil && o.Passphrase.IsSet() {
		return true
	}

	return false
}

// SetPassphrase gets a reference to the given NullableString and assigns it to the Passphrase field.
func (o *AddDmaasTenantCertRequest) SetPassphrase(v string) {
	o.Passphrase.Set(&v)
}
// SetPassphraseNil sets the value for Passphrase to be an explicit nil
func (o *AddDmaasTenantCertRequest) SetPassphraseNil() {
	o.Passphrase.Set(nil)
}

// UnsetPassphrase ensures that no value is present for Passphrase, not even an explicit nil
func (o *AddDmaasTenantCertRequest) UnsetPassphrase() {
	o.Passphrase.Unset()
}

// GetPrivateKey returns the PrivateKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddDmaasTenantCertRequest) GetPrivateKey() string {
	if o == nil || o.PrivateKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddDmaasTenantCertRequest) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// SetPrivateKey sets field value
func (o *AddDmaasTenantCertRequest) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddDmaasTenantCertRequest) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddDmaasTenantCertRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *AddDmaasTenantCertRequest) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

func (o AddDmaasTenantCertRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddDmaasTenantCertRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["certificate"] = o.Certificate.Get()
	toSerialize["connectorCaChain"] = o.ConnectorCaChain.Get()
	if o.Passphrase.IsSet() {
		toSerialize["passphrase"] = o.Passphrase.Get()
	}
	toSerialize["privateKey"] = o.PrivateKey.Get()
	toSerialize["tenantId"] = o.TenantId.Get()
	return toSerialize, nil
}

func (o *AddDmaasTenantCertRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"certificate",
		"connectorCaChain",
		"privateKey",
		"tenantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddDmaasTenantCertRequest := _AddDmaasTenantCertRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddDmaasTenantCertRequest)

	if err != nil {
		return err
	}

	*o = AddDmaasTenantCertRequest(varAddDmaasTenantCertRequest)

	return err
}

type NullableAddDmaasTenantCertRequest struct {
	value *AddDmaasTenantCertRequest
	isSet bool
}

func (v NullableAddDmaasTenantCertRequest) Get() *AddDmaasTenantCertRequest {
	return v.value
}

func (v *NullableAddDmaasTenantCertRequest) Set(val *AddDmaasTenantCertRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableAddDmaasTenantCertRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableAddDmaasTenantCertRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddDmaasTenantCertRequest(val *AddDmaasTenantCertRequest) *NullableAddDmaasTenantCertRequest {
	return &NullableAddDmaasTenantCertRequest{value: val, isSet: true}
}

func (v NullableAddDmaasTenantCertRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddDmaasTenantCertRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


