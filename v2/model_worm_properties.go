/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the WormProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WormProperties{}

// WormProperties Specifies the WORM related properties for this archive.
type WormProperties struct {
	// Specifies whether this archive run is WORM compliant
	IsArchiveWormCompliant NullableBool `json:"isArchiveWormCompliant,omitempty"`
	// Specifies the time at which the WORM protection expires.
	WormExpiryTimeUsecs NullableInt64 `json:"wormExpiryTimeUsecs,omitempty"`
	// Specifies reason of archive not being worm compliant.
	WormNonComplianceReason NullableString `json:"wormNonComplianceReason,omitempty"`
}

// NewWormProperties instantiates a new WormProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWormProperties() *WormProperties {
	this := WormProperties{}
	return &this
}

// NewWormPropertiesWithDefaults instantiates a new WormProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWormPropertiesWithDefaults() *WormProperties {
	this := WormProperties{}
	return &this
}

// GetIsArchiveWormCompliant returns the IsArchiveWormCompliant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WormProperties) GetIsArchiveWormCompliant() bool {
	if o == nil || IsNil(o.IsArchiveWormCompliant.Get()) {
		var ret bool
		return ret
	}
	return *o.IsArchiveWormCompliant.Get()
}

// GetIsArchiveWormCompliantOk returns a tuple with the IsArchiveWormCompliant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WormProperties) GetIsArchiveWormCompliantOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsArchiveWormCompliant.Get(), o.IsArchiveWormCompliant.IsSet()
}

// HasIsArchiveWormCompliant returns a boolean if a field has been set.
func (o *WormProperties) HasIsArchiveWormCompliant() bool {
	if o != nil && o.IsArchiveWormCompliant.IsSet() {
		return true
	}

	return false
}

// SetIsArchiveWormCompliant gets a reference to the given NullableBool and assigns it to the IsArchiveWormCompliant field.
func (o *WormProperties) SetIsArchiveWormCompliant(v bool) {
	o.IsArchiveWormCompliant.Set(&v)
}
// SetIsArchiveWormCompliantNil sets the value for IsArchiveWormCompliant to be an explicit nil
func (o *WormProperties) SetIsArchiveWormCompliantNil() {
	o.IsArchiveWormCompliant.Set(nil)
}

// UnsetIsArchiveWormCompliant ensures that no value is present for IsArchiveWormCompliant, not even an explicit nil
func (o *WormProperties) UnsetIsArchiveWormCompliant() {
	o.IsArchiveWormCompliant.Unset()
}

// GetWormExpiryTimeUsecs returns the WormExpiryTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WormProperties) GetWormExpiryTimeUsecs() int64 {
	if o == nil || IsNil(o.WormExpiryTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.WormExpiryTimeUsecs.Get()
}

// GetWormExpiryTimeUsecsOk returns a tuple with the WormExpiryTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WormProperties) GetWormExpiryTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.WormExpiryTimeUsecs.Get(), o.WormExpiryTimeUsecs.IsSet()
}

// HasWormExpiryTimeUsecs returns a boolean if a field has been set.
func (o *WormProperties) HasWormExpiryTimeUsecs() bool {
	if o != nil && o.WormExpiryTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetWormExpiryTimeUsecs gets a reference to the given NullableInt64 and assigns it to the WormExpiryTimeUsecs field.
func (o *WormProperties) SetWormExpiryTimeUsecs(v int64) {
	o.WormExpiryTimeUsecs.Set(&v)
}
// SetWormExpiryTimeUsecsNil sets the value for WormExpiryTimeUsecs to be an explicit nil
func (o *WormProperties) SetWormExpiryTimeUsecsNil() {
	o.WormExpiryTimeUsecs.Set(nil)
}

// UnsetWormExpiryTimeUsecs ensures that no value is present for WormExpiryTimeUsecs, not even an explicit nil
func (o *WormProperties) UnsetWormExpiryTimeUsecs() {
	o.WormExpiryTimeUsecs.Unset()
}

// GetWormNonComplianceReason returns the WormNonComplianceReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WormProperties) GetWormNonComplianceReason() string {
	if o == nil || IsNil(o.WormNonComplianceReason.Get()) {
		var ret string
		return ret
	}
	return *o.WormNonComplianceReason.Get()
}

// GetWormNonComplianceReasonOk returns a tuple with the WormNonComplianceReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WormProperties) GetWormNonComplianceReasonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.WormNonComplianceReason.Get(), o.WormNonComplianceReason.IsSet()
}

// HasWormNonComplianceReason returns a boolean if a field has been set.
func (o *WormProperties) HasWormNonComplianceReason() bool {
	if o != nil && o.WormNonComplianceReason.IsSet() {
		return true
	}

	return false
}

// SetWormNonComplianceReason gets a reference to the given NullableString and assigns it to the WormNonComplianceReason field.
func (o *WormProperties) SetWormNonComplianceReason(v string) {
	o.WormNonComplianceReason.Set(&v)
}
// SetWormNonComplianceReasonNil sets the value for WormNonComplianceReason to be an explicit nil
func (o *WormProperties) SetWormNonComplianceReasonNil() {
	o.WormNonComplianceReason.Set(nil)
}

// UnsetWormNonComplianceReason ensures that no value is present for WormNonComplianceReason, not even an explicit nil
func (o *WormProperties) UnsetWormNonComplianceReason() {
	o.WormNonComplianceReason.Unset()
}

func (o WormProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WormProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IsArchiveWormCompliant.IsSet() {
		toSerialize["isArchiveWormCompliant"] = o.IsArchiveWormCompliant.Get()
	}
	if o.WormExpiryTimeUsecs.IsSet() {
		toSerialize["wormExpiryTimeUsecs"] = o.WormExpiryTimeUsecs.Get()
	}
	if o.WormNonComplianceReason.IsSet() {
		toSerialize["wormNonComplianceReason"] = o.WormNonComplianceReason.Get()
	}
	return toSerialize, nil
}

type NullableWormProperties struct {
	value *WormProperties
	isSet bool
}

func (v NullableWormProperties) Get() *WormProperties {
	return v.value
}

func (v *NullableWormProperties) Set(val *WormProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableWormProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableWormProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWormProperties(val *WormProperties) *NullableWormProperties {
	return &NullableWormProperties{value: val, isSet: true}
}

func (v NullableWormProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWormProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


