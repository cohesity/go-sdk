/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeliosHourSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosHourSchedule{}

// HeliosHourSchedule Specifies settings that define a schedule for a Protection Group runs to start after certain number of hours. Hourly schedule must be greater than 5 hours in case of DMaaS policy.
type HeliosHourSchedule struct {
	// Specifies a factor to multiply the unit by, to determine the backup schedule. <br> Example: If 'frequency' set to 2 and the unit is 'Hours', then Snapshots are backed up every 2 hours. If selected unit is 'Weeks' or 'Months' then frequency will only be applied if policy type is DMaas.
	Frequency NullableInt64 `json:"frequency"`
}

type _HeliosHourSchedule HeliosHourSchedule

// NewHeliosHourSchedule instantiates a new HeliosHourSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosHourSchedule(frequency NullableInt64) *HeliosHourSchedule {
	this := HeliosHourSchedule{}
	this.Frequency = frequency
	return &this
}

// NewHeliosHourScheduleWithDefaults instantiates a new HeliosHourSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosHourScheduleWithDefaults() *HeliosHourSchedule {
	this := HeliosHourSchedule{}
	return &this
}

// GetFrequency returns the Frequency field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *HeliosHourSchedule) GetFrequency() int64 {
	if o == nil || o.Frequency.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Frequency.Get()
}

// GetFrequencyOk returns a tuple with the Frequency field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosHourSchedule) GetFrequencyOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Frequency.Get(), o.Frequency.IsSet()
}

// SetFrequency sets field value
func (o *HeliosHourSchedule) SetFrequency(v int64) {
	o.Frequency.Set(&v)
}

func (o HeliosHourSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosHourSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["frequency"] = o.Frequency.Get()
	return toSerialize, nil
}

func (o *HeliosHourSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"frequency",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeliosHourSchedule := _HeliosHourSchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeliosHourSchedule)

	if err != nil {
		return err
	}

	*o = HeliosHourSchedule(varHeliosHourSchedule)

	return err
}

type NullableHeliosHourSchedule struct {
	value *HeliosHourSchedule
	isSet bool
}

func (v NullableHeliosHourSchedule) Get() *HeliosHourSchedule {
	return v.value
}

func (v *NullableHeliosHourSchedule) Set(val *HeliosHourSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosHourSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosHourSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosHourSchedule(val *HeliosHourSchedule) *NullableHeliosHourSchedule {
	return &NullableHeliosHourSchedule{value: val, isSet: true}
}

func (v NullableHeliosHourSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosHourSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


