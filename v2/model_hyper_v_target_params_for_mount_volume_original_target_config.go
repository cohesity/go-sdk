/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HyperVTargetParamsForMountVolumeOriginalTargetConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperVTargetParamsForMountVolumeOriginalTargetConfig{}

// HyperVTargetParamsForMountVolumeOriginalTargetConfig Specifies the configuration for mounting to the original target.
type HyperVTargetParamsForMountVolumeOriginalTargetConfig struct {
	// Specifies whether the volumes need to be online within the target environment after attaching the disks. For linux VMs, this should always be set to false because bring disks online is only supported for Windows VM. For Windows, this is optional. If this is set to true, HyperV Integration Services must be installed on the VM.
	BringDisksOnline NullableBool `json:"bringDisksOnline"`
	TargetVmCredentials NullableHyperVMountVolumesOriginalTargetConfigTargetVmCredentials `json:"targetVmCredentials,omitempty"`
}

type _HyperVTargetParamsForMountVolumeOriginalTargetConfig HyperVTargetParamsForMountVolumeOriginalTargetConfig

// NewHyperVTargetParamsForMountVolumeOriginalTargetConfig instantiates a new HyperVTargetParamsForMountVolumeOriginalTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperVTargetParamsForMountVolumeOriginalTargetConfig(bringDisksOnline NullableBool) *HyperVTargetParamsForMountVolumeOriginalTargetConfig {
	this := HyperVTargetParamsForMountVolumeOriginalTargetConfig{}
	this.BringDisksOnline = bringDisksOnline
	return &this
}

// NewHyperVTargetParamsForMountVolumeOriginalTargetConfigWithDefaults instantiates a new HyperVTargetParamsForMountVolumeOriginalTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperVTargetParamsForMountVolumeOriginalTargetConfigWithDefaults() *HyperVTargetParamsForMountVolumeOriginalTargetConfig {
	this := HyperVTargetParamsForMountVolumeOriginalTargetConfig{}
	return &this
}

// GetBringDisksOnline returns the BringDisksOnline field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *HyperVTargetParamsForMountVolumeOriginalTargetConfig) GetBringDisksOnline() bool {
	if o == nil || o.BringDisksOnline.Get() == nil {
		var ret bool
		return ret
	}

	return *o.BringDisksOnline.Get()
}

// GetBringDisksOnlineOk returns a tuple with the BringDisksOnline field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVTargetParamsForMountVolumeOriginalTargetConfig) GetBringDisksOnlineOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BringDisksOnline.Get(), o.BringDisksOnline.IsSet()
}

// SetBringDisksOnline sets field value
func (o *HyperVTargetParamsForMountVolumeOriginalTargetConfig) SetBringDisksOnline(v bool) {
	o.BringDisksOnline.Set(&v)
}

// GetTargetVmCredentials returns the TargetVmCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HyperVTargetParamsForMountVolumeOriginalTargetConfig) GetTargetVmCredentials() HyperVMountVolumesOriginalTargetConfigTargetVmCredentials {
	if o == nil || IsNil(o.TargetVmCredentials.Get()) {
		var ret HyperVMountVolumesOriginalTargetConfigTargetVmCredentials
		return ret
	}
	return *o.TargetVmCredentials.Get()
}

// GetTargetVmCredentialsOk returns a tuple with the TargetVmCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVTargetParamsForMountVolumeOriginalTargetConfig) GetTargetVmCredentialsOk() (*HyperVMountVolumesOriginalTargetConfigTargetVmCredentials, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetVmCredentials.Get(), o.TargetVmCredentials.IsSet()
}

// HasTargetVmCredentials returns a boolean if a field has been set.
func (o *HyperVTargetParamsForMountVolumeOriginalTargetConfig) HasTargetVmCredentials() bool {
	if o != nil && o.TargetVmCredentials.IsSet() {
		return true
	}

	return false
}

// SetTargetVmCredentials gets a reference to the given NullableHyperVMountVolumesOriginalTargetConfigTargetVmCredentials and assigns it to the TargetVmCredentials field.
func (o *HyperVTargetParamsForMountVolumeOriginalTargetConfig) SetTargetVmCredentials(v HyperVMountVolumesOriginalTargetConfigTargetVmCredentials) {
	o.TargetVmCredentials.Set(&v)
}
// SetTargetVmCredentialsNil sets the value for TargetVmCredentials to be an explicit nil
func (o *HyperVTargetParamsForMountVolumeOriginalTargetConfig) SetTargetVmCredentialsNil() {
	o.TargetVmCredentials.Set(nil)
}

// UnsetTargetVmCredentials ensures that no value is present for TargetVmCredentials, not even an explicit nil
func (o *HyperVTargetParamsForMountVolumeOriginalTargetConfig) UnsetTargetVmCredentials() {
	o.TargetVmCredentials.Unset()
}

func (o HyperVTargetParamsForMountVolumeOriginalTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperVTargetParamsForMountVolumeOriginalTargetConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bringDisksOnline"] = o.BringDisksOnline.Get()
	if o.TargetVmCredentials.IsSet() {
		toSerialize["targetVmCredentials"] = o.TargetVmCredentials.Get()
	}
	return toSerialize, nil
}

func (o *HyperVTargetParamsForMountVolumeOriginalTargetConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bringDisksOnline",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHyperVTargetParamsForMountVolumeOriginalTargetConfig := _HyperVTargetParamsForMountVolumeOriginalTargetConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHyperVTargetParamsForMountVolumeOriginalTargetConfig)

	if err != nil {
		return err
	}

	*o = HyperVTargetParamsForMountVolumeOriginalTargetConfig(varHyperVTargetParamsForMountVolumeOriginalTargetConfig)

	return err
}

type NullableHyperVTargetParamsForMountVolumeOriginalTargetConfig struct {
	value *HyperVTargetParamsForMountVolumeOriginalTargetConfig
	isSet bool
}

func (v NullableHyperVTargetParamsForMountVolumeOriginalTargetConfig) Get() *HyperVTargetParamsForMountVolumeOriginalTargetConfig {
	return v.value
}

func (v *NullableHyperVTargetParamsForMountVolumeOriginalTargetConfig) Set(val *HyperVTargetParamsForMountVolumeOriginalTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperVTargetParamsForMountVolumeOriginalTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperVTargetParamsForMountVolumeOriginalTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperVTargetParamsForMountVolumeOriginalTargetConfig(val *HyperVTargetParamsForMountVolumeOriginalTargetConfig) *NullableHyperVTargetParamsForMountVolumeOriginalTargetConfig {
	return &NullableHyperVTargetParamsForMountVolumeOriginalTargetConfig{value: val, isSet: true}
}

func (v NullableHyperVTargetParamsForMountVolumeOriginalTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperVTargetParamsForMountVolumeOriginalTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


