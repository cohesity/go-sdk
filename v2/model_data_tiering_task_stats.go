/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DataTieringTaskStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTieringTaskStats{}

// DataTieringTaskStats Specifies the stats of data tiering task.
type DataTieringTaskStats struct {
	// Specifies total logical bytes read for creating the snapshot.
	BytesRead NullableInt64 `json:"bytesRead,omitempty"`
	// Specifies total size of data in bytes written after taking backup.
	BytesWritten NullableInt64 `json:"bytesWritten,omitempty"`
	// Specifies total logical size of object(s) in bytes.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
	// Specifies changed entity count.
	ChangedEntityCount NullableInt64 `json:"changedEntityCount,omitempty"`
	// Specifies total entity count.
	EntityCount NullableInt64 `json:"entityCount,omitempty"`
	// Specifies whether tiering goal has been met.
	IsTieringGoalMet NullableBool `json:"isTieringGoalMet,omitempty"`
	// Specifies total amount of data successfully tiered from the NAS source.
	TotalTieredBytes NullableInt64 `json:"totalTieredBytes,omitempty"`
}

// NewDataTieringTaskStats instantiates a new DataTieringTaskStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTieringTaskStats() *DataTieringTaskStats {
	this := DataTieringTaskStats{}
	var isTieringGoalMet bool = false
	this.IsTieringGoalMet = *NewNullableBool(&isTieringGoalMet)
	return &this
}

// NewDataTieringTaskStatsWithDefaults instantiates a new DataTieringTaskStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTieringTaskStatsWithDefaults() *DataTieringTaskStats {
	this := DataTieringTaskStats{}
	var isTieringGoalMet bool = false
	this.IsTieringGoalMet = *NewNullableBool(&isTieringGoalMet)
	return &this
}

// GetBytesRead returns the BytesRead field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTaskStats) GetBytesRead() int64 {
	if o == nil || IsNil(o.BytesRead.Get()) {
		var ret int64
		return ret
	}
	return *o.BytesRead.Get()
}

// GetBytesReadOk returns a tuple with the BytesRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTaskStats) GetBytesReadOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BytesRead.Get(), o.BytesRead.IsSet()
}

// HasBytesRead returns a boolean if a field has been set.
func (o *DataTieringTaskStats) HasBytesRead() bool {
	if o != nil && o.BytesRead.IsSet() {
		return true
	}

	return false
}

// SetBytesRead gets a reference to the given NullableInt64 and assigns it to the BytesRead field.
func (o *DataTieringTaskStats) SetBytesRead(v int64) {
	o.BytesRead.Set(&v)
}
// SetBytesReadNil sets the value for BytesRead to be an explicit nil
func (o *DataTieringTaskStats) SetBytesReadNil() {
	o.BytesRead.Set(nil)
}

// UnsetBytesRead ensures that no value is present for BytesRead, not even an explicit nil
func (o *DataTieringTaskStats) UnsetBytesRead() {
	o.BytesRead.Unset()
}

// GetBytesWritten returns the BytesWritten field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTaskStats) GetBytesWritten() int64 {
	if o == nil || IsNil(o.BytesWritten.Get()) {
		var ret int64
		return ret
	}
	return *o.BytesWritten.Get()
}

// GetBytesWrittenOk returns a tuple with the BytesWritten field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTaskStats) GetBytesWrittenOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.BytesWritten.Get(), o.BytesWritten.IsSet()
}

// HasBytesWritten returns a boolean if a field has been set.
func (o *DataTieringTaskStats) HasBytesWritten() bool {
	if o != nil && o.BytesWritten.IsSet() {
		return true
	}

	return false
}

// SetBytesWritten gets a reference to the given NullableInt64 and assigns it to the BytesWritten field.
func (o *DataTieringTaskStats) SetBytesWritten(v int64) {
	o.BytesWritten.Set(&v)
}
// SetBytesWrittenNil sets the value for BytesWritten to be an explicit nil
func (o *DataTieringTaskStats) SetBytesWrittenNil() {
	o.BytesWritten.Set(nil)
}

// UnsetBytesWritten ensures that no value is present for BytesWritten, not even an explicit nil
func (o *DataTieringTaskStats) UnsetBytesWritten() {
	o.BytesWritten.Unset()
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTaskStats) GetLogicalSizeBytes() int64 {
	if o == nil || IsNil(o.LogicalSizeBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTaskStats) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *DataTieringTaskStats) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *DataTieringTaskStats) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *DataTieringTaskStats) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *DataTieringTaskStats) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetChangedEntityCount returns the ChangedEntityCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTaskStats) GetChangedEntityCount() int64 {
	if o == nil || IsNil(o.ChangedEntityCount.Get()) {
		var ret int64
		return ret
	}
	return *o.ChangedEntityCount.Get()
}

// GetChangedEntityCountOk returns a tuple with the ChangedEntityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTaskStats) GetChangedEntityCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChangedEntityCount.Get(), o.ChangedEntityCount.IsSet()
}

// HasChangedEntityCount returns a boolean if a field has been set.
func (o *DataTieringTaskStats) HasChangedEntityCount() bool {
	if o != nil && o.ChangedEntityCount.IsSet() {
		return true
	}

	return false
}

// SetChangedEntityCount gets a reference to the given NullableInt64 and assigns it to the ChangedEntityCount field.
func (o *DataTieringTaskStats) SetChangedEntityCount(v int64) {
	o.ChangedEntityCount.Set(&v)
}
// SetChangedEntityCountNil sets the value for ChangedEntityCount to be an explicit nil
func (o *DataTieringTaskStats) SetChangedEntityCountNil() {
	o.ChangedEntityCount.Set(nil)
}

// UnsetChangedEntityCount ensures that no value is present for ChangedEntityCount, not even an explicit nil
func (o *DataTieringTaskStats) UnsetChangedEntityCount() {
	o.ChangedEntityCount.Unset()
}

// GetEntityCount returns the EntityCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTaskStats) GetEntityCount() int64 {
	if o == nil || IsNil(o.EntityCount.Get()) {
		var ret int64
		return ret
	}
	return *o.EntityCount.Get()
}

// GetEntityCountOk returns a tuple with the EntityCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTaskStats) GetEntityCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityCount.Get(), o.EntityCount.IsSet()
}

// HasEntityCount returns a boolean if a field has been set.
func (o *DataTieringTaskStats) HasEntityCount() bool {
	if o != nil && o.EntityCount.IsSet() {
		return true
	}

	return false
}

// SetEntityCount gets a reference to the given NullableInt64 and assigns it to the EntityCount field.
func (o *DataTieringTaskStats) SetEntityCount(v int64) {
	o.EntityCount.Set(&v)
}
// SetEntityCountNil sets the value for EntityCount to be an explicit nil
func (o *DataTieringTaskStats) SetEntityCountNil() {
	o.EntityCount.Set(nil)
}

// UnsetEntityCount ensures that no value is present for EntityCount, not even an explicit nil
func (o *DataTieringTaskStats) UnsetEntityCount() {
	o.EntityCount.Unset()
}

// GetIsTieringGoalMet returns the IsTieringGoalMet field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTaskStats) GetIsTieringGoalMet() bool {
	if o == nil || IsNil(o.IsTieringGoalMet.Get()) {
		var ret bool
		return ret
	}
	return *o.IsTieringGoalMet.Get()
}

// GetIsTieringGoalMetOk returns a tuple with the IsTieringGoalMet field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTaskStats) GetIsTieringGoalMetOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsTieringGoalMet.Get(), o.IsTieringGoalMet.IsSet()
}

// HasIsTieringGoalMet returns a boolean if a field has been set.
func (o *DataTieringTaskStats) HasIsTieringGoalMet() bool {
	if o != nil && o.IsTieringGoalMet.IsSet() {
		return true
	}

	return false
}

// SetIsTieringGoalMet gets a reference to the given NullableBool and assigns it to the IsTieringGoalMet field.
func (o *DataTieringTaskStats) SetIsTieringGoalMet(v bool) {
	o.IsTieringGoalMet.Set(&v)
}
// SetIsTieringGoalMetNil sets the value for IsTieringGoalMet to be an explicit nil
func (o *DataTieringTaskStats) SetIsTieringGoalMetNil() {
	o.IsTieringGoalMet.Set(nil)
}

// UnsetIsTieringGoalMet ensures that no value is present for IsTieringGoalMet, not even an explicit nil
func (o *DataTieringTaskStats) UnsetIsTieringGoalMet() {
	o.IsTieringGoalMet.Unset()
}

// GetTotalTieredBytes returns the TotalTieredBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTaskStats) GetTotalTieredBytes() int64 {
	if o == nil || IsNil(o.TotalTieredBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.TotalTieredBytes.Get()
}

// GetTotalTieredBytesOk returns a tuple with the TotalTieredBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTaskStats) GetTotalTieredBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TotalTieredBytes.Get(), o.TotalTieredBytes.IsSet()
}

// HasTotalTieredBytes returns a boolean if a field has been set.
func (o *DataTieringTaskStats) HasTotalTieredBytes() bool {
	if o != nil && o.TotalTieredBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalTieredBytes gets a reference to the given NullableInt64 and assigns it to the TotalTieredBytes field.
func (o *DataTieringTaskStats) SetTotalTieredBytes(v int64) {
	o.TotalTieredBytes.Set(&v)
}
// SetTotalTieredBytesNil sets the value for TotalTieredBytes to be an explicit nil
func (o *DataTieringTaskStats) SetTotalTieredBytesNil() {
	o.TotalTieredBytes.Set(nil)
}

// UnsetTotalTieredBytes ensures that no value is present for TotalTieredBytes, not even an explicit nil
func (o *DataTieringTaskStats) UnsetTotalTieredBytes() {
	o.TotalTieredBytes.Unset()
}

func (o DataTieringTaskStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTieringTaskStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BytesRead.IsSet() {
		toSerialize["bytesRead"] = o.BytesRead.Get()
	}
	if o.BytesWritten.IsSet() {
		toSerialize["bytesWritten"] = o.BytesWritten.Get()
	}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.ChangedEntityCount.IsSet() {
		toSerialize["changedEntityCount"] = o.ChangedEntityCount.Get()
	}
	if o.EntityCount.IsSet() {
		toSerialize["entityCount"] = o.EntityCount.Get()
	}
	if o.IsTieringGoalMet.IsSet() {
		toSerialize["isTieringGoalMet"] = o.IsTieringGoalMet.Get()
	}
	if o.TotalTieredBytes.IsSet() {
		toSerialize["totalTieredBytes"] = o.TotalTieredBytes.Get()
	}
	return toSerialize, nil
}

type NullableDataTieringTaskStats struct {
	value *DataTieringTaskStats
	isSet bool
}

func (v NullableDataTieringTaskStats) Get() *DataTieringTaskStats {
	return v.value
}

func (v *NullableDataTieringTaskStats) Set(val *DataTieringTaskStats) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTieringTaskStats) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTieringTaskStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTieringTaskStats(val *DataTieringTaskStats) *NullableDataTieringTaskStats {
	return &NullableDataTieringTaskStats{value: val, isSet: true}
}

func (v NullableDataTieringTaskStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTieringTaskStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


