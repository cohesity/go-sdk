/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureTargetParamsForRecoverVmRecoveryTargetConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureTargetParamsForRecoverVmRecoveryTargetConfig{}

// AzureTargetParamsForRecoverVmRecoveryTargetConfig Specifies the recovery target configuration if recovery has to be done to a different location which is different from original source or to original Source with different configuration. If not specified, then the recovery of the vms will be performed to original location with all configuration parameters retained.
type AzureTargetParamsForRecoverVmRecoveryTargetConfig struct {
	NewSourceConfig NullableAzureVmRecoveryTargetConfigNewSourceConfig `json:"newSourceConfig,omitempty"`
	OriginalSourceConfig NullableAzureVmRecoveryTargetConfigOriginalSourceConfig `json:"originalSourceConfig,omitempty"`
	// Specifies the parameter whether the recovery should be performed to a new or an existing Source Target.
	RecoverToNewSource bool `json:"recoverToNewSource"`
}

type _AzureTargetParamsForRecoverVmRecoveryTargetConfig AzureTargetParamsForRecoverVmRecoveryTargetConfig

// NewAzureTargetParamsForRecoverVmRecoveryTargetConfig instantiates a new AzureTargetParamsForRecoverVmRecoveryTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureTargetParamsForRecoverVmRecoveryTargetConfig(recoverToNewSource bool) *AzureTargetParamsForRecoverVmRecoveryTargetConfig {
	this := AzureTargetParamsForRecoverVmRecoveryTargetConfig{}
	this.RecoverToNewSource = recoverToNewSource
	return &this
}

// NewAzureTargetParamsForRecoverVmRecoveryTargetConfigWithDefaults instantiates a new AzureTargetParamsForRecoverVmRecoveryTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureTargetParamsForRecoverVmRecoveryTargetConfigWithDefaults() *AzureTargetParamsForRecoverVmRecoveryTargetConfig {
	this := AzureTargetParamsForRecoverVmRecoveryTargetConfig{}
	return &this
}

// GetNewSourceConfig returns the NewSourceConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) GetNewSourceConfig() AzureVmRecoveryTargetConfigNewSourceConfig {
	if o == nil || IsNil(o.NewSourceConfig.Get()) {
		var ret AzureVmRecoveryTargetConfigNewSourceConfig
		return ret
	}
	return *o.NewSourceConfig.Get()
}

// GetNewSourceConfigOk returns a tuple with the NewSourceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) GetNewSourceConfigOk() (*AzureVmRecoveryTargetConfigNewSourceConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewSourceConfig.Get(), o.NewSourceConfig.IsSet()
}

// HasNewSourceConfig returns a boolean if a field has been set.
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) HasNewSourceConfig() bool {
	if o != nil && o.NewSourceConfig.IsSet() {
		return true
	}

	return false
}

// SetNewSourceConfig gets a reference to the given NullableAzureVmRecoveryTargetConfigNewSourceConfig and assigns it to the NewSourceConfig field.
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) SetNewSourceConfig(v AzureVmRecoveryTargetConfigNewSourceConfig) {
	o.NewSourceConfig.Set(&v)
}
// SetNewSourceConfigNil sets the value for NewSourceConfig to be an explicit nil
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) SetNewSourceConfigNil() {
	o.NewSourceConfig.Set(nil)
}

// UnsetNewSourceConfig ensures that no value is present for NewSourceConfig, not even an explicit nil
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) UnsetNewSourceConfig() {
	o.NewSourceConfig.Unset()
}

// GetOriginalSourceConfig returns the OriginalSourceConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) GetOriginalSourceConfig() AzureVmRecoveryTargetConfigOriginalSourceConfig {
	if o == nil || IsNil(o.OriginalSourceConfig.Get()) {
		var ret AzureVmRecoveryTargetConfigOriginalSourceConfig
		return ret
	}
	return *o.OriginalSourceConfig.Get()
}

// GetOriginalSourceConfigOk returns a tuple with the OriginalSourceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) GetOriginalSourceConfigOk() (*AzureVmRecoveryTargetConfigOriginalSourceConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalSourceConfig.Get(), o.OriginalSourceConfig.IsSet()
}

// HasOriginalSourceConfig returns a boolean if a field has been set.
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) HasOriginalSourceConfig() bool {
	if o != nil && o.OriginalSourceConfig.IsSet() {
		return true
	}

	return false
}

// SetOriginalSourceConfig gets a reference to the given NullableAzureVmRecoveryTargetConfigOriginalSourceConfig and assigns it to the OriginalSourceConfig field.
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) SetOriginalSourceConfig(v AzureVmRecoveryTargetConfigOriginalSourceConfig) {
	o.OriginalSourceConfig.Set(&v)
}
// SetOriginalSourceConfigNil sets the value for OriginalSourceConfig to be an explicit nil
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) SetOriginalSourceConfigNil() {
	o.OriginalSourceConfig.Set(nil)
}

// UnsetOriginalSourceConfig ensures that no value is present for OriginalSourceConfig, not even an explicit nil
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) UnsetOriginalSourceConfig() {
	o.OriginalSourceConfig.Unset()
}

// GetRecoverToNewSource returns the RecoverToNewSource field value
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) GetRecoverToNewSource() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RecoverToNewSource
}

// GetRecoverToNewSourceOk returns a tuple with the RecoverToNewSource field value
// and a boolean to check if the value has been set.
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) GetRecoverToNewSourceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoverToNewSource, true
}

// SetRecoverToNewSource sets field value
func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) SetRecoverToNewSource(v bool) {
	o.RecoverToNewSource = v
}

func (o AzureTargetParamsForRecoverVmRecoveryTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureTargetParamsForRecoverVmRecoveryTargetConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NewSourceConfig.IsSet() {
		toSerialize["newSourceConfig"] = o.NewSourceConfig.Get()
	}
	if o.OriginalSourceConfig.IsSet() {
		toSerialize["originalSourceConfig"] = o.OriginalSourceConfig.Get()
	}
	toSerialize["recoverToNewSource"] = o.RecoverToNewSource
	return toSerialize, nil
}

func (o *AzureTargetParamsForRecoverVmRecoveryTargetConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoverToNewSource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureTargetParamsForRecoverVmRecoveryTargetConfig := _AzureTargetParamsForRecoverVmRecoveryTargetConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureTargetParamsForRecoverVmRecoveryTargetConfig)

	if err != nil {
		return err
	}

	*o = AzureTargetParamsForRecoverVmRecoveryTargetConfig(varAzureTargetParamsForRecoverVmRecoveryTargetConfig)

	return err
}

type NullableAzureTargetParamsForRecoverVmRecoveryTargetConfig struct {
	value *AzureTargetParamsForRecoverVmRecoveryTargetConfig
	isSet bool
}

func (v NullableAzureTargetParamsForRecoverVmRecoveryTargetConfig) Get() *AzureTargetParamsForRecoverVmRecoveryTargetConfig {
	return v.value
}

func (v *NullableAzureTargetParamsForRecoverVmRecoveryTargetConfig) Set(val *AzureTargetParamsForRecoverVmRecoveryTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureTargetParamsForRecoverVmRecoveryTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureTargetParamsForRecoverVmRecoveryTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureTargetParamsForRecoverVmRecoveryTargetConfig(val *AzureTargetParamsForRecoverVmRecoveryTargetConfig) *NullableAzureTargetParamsForRecoverVmRecoveryTargetConfig {
	return &NullableAzureTargetParamsForRecoverVmRecoveryTargetConfig{value: val, isSet: true}
}

func (v NullableAzureTargetParamsForRecoverVmRecoveryTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureTargetParamsForRecoverVmRecoveryTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


