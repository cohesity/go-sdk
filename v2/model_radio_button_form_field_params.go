/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RadioButtonFormFieldParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RadioButtonFormFieldParams{}

// RadioButtonFormFieldParams Parameters to specify a radio button component.
type RadioButtonFormFieldParams struct {
	// Id to identify the radio button. This is also be used for assigning component html ids which can be leveraged for writing automation against the button.
	Id NullableString `json:"id,omitempty"`
	// Label to be shown for the radio button on the UI.
	Label NullableString `json:"label,omitempty"`
	Panel NullableFormPanelParams `json:"panel,omitempty"`
	// Value associated with the radio button.
	Value NullableString `json:"value,omitempty"`
}

// NewRadioButtonFormFieldParams instantiates a new RadioButtonFormFieldParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRadioButtonFormFieldParams() *RadioButtonFormFieldParams {
	this := RadioButtonFormFieldParams{}
	return &this
}

// NewRadioButtonFormFieldParamsWithDefaults instantiates a new RadioButtonFormFieldParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRadioButtonFormFieldParamsWithDefaults() *RadioButtonFormFieldParams {
	this := RadioButtonFormFieldParams{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RadioButtonFormFieldParams) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RadioButtonFormFieldParams) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *RadioButtonFormFieldParams) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *RadioButtonFormFieldParams) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *RadioButtonFormFieldParams) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *RadioButtonFormFieldParams) UnsetId() {
	o.Id.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RadioButtonFormFieldParams) GetLabel() string {
	if o == nil || IsNil(o.Label.Get()) {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RadioButtonFormFieldParams) GetLabelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *RadioButtonFormFieldParams) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *RadioButtonFormFieldParams) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *RadioButtonFormFieldParams) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *RadioButtonFormFieldParams) UnsetLabel() {
	o.Label.Unset()
}

// GetPanel returns the Panel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RadioButtonFormFieldParams) GetPanel() FormPanelParams {
	if o == nil || IsNil(o.Panel.Get()) {
		var ret FormPanelParams
		return ret
	}
	return *o.Panel.Get()
}

// GetPanelOk returns a tuple with the Panel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RadioButtonFormFieldParams) GetPanelOk() (*FormPanelParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Panel.Get(), o.Panel.IsSet()
}

// HasPanel returns a boolean if a field has been set.
func (o *RadioButtonFormFieldParams) HasPanel() bool {
	if o != nil && o.Panel.IsSet() {
		return true
	}

	return false
}

// SetPanel gets a reference to the given NullableFormPanelParams and assigns it to the Panel field.
func (o *RadioButtonFormFieldParams) SetPanel(v FormPanelParams) {
	o.Panel.Set(&v)
}
// SetPanelNil sets the value for Panel to be an explicit nil
func (o *RadioButtonFormFieldParams) SetPanelNil() {
	o.Panel.Set(nil)
}

// UnsetPanel ensures that no value is present for Panel, not even an explicit nil
func (o *RadioButtonFormFieldParams) UnsetPanel() {
	o.Panel.Unset()
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RadioButtonFormFieldParams) GetValue() string {
	if o == nil || IsNil(o.Value.Get()) {
		var ret string
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RadioButtonFormFieldParams) GetValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *RadioButtonFormFieldParams) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableString and assigns it to the Value field.
func (o *RadioButtonFormFieldParams) SetValue(v string) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *RadioButtonFormFieldParams) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *RadioButtonFormFieldParams) UnsetValue() {
	o.Value.Unset()
}

func (o RadioButtonFormFieldParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RadioButtonFormFieldParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.Panel.IsSet() {
		toSerialize["panel"] = o.Panel.Get()
	}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	return toSerialize, nil
}

type NullableRadioButtonFormFieldParams struct {
	value *RadioButtonFormFieldParams
	isSet bool
}

func (v NullableRadioButtonFormFieldParams) Get() *RadioButtonFormFieldParams {
	return v.value
}

func (v *NullableRadioButtonFormFieldParams) Set(val *RadioButtonFormFieldParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRadioButtonFormFieldParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRadioButtonFormFieldParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRadioButtonFormFieldParams(val *RadioButtonFormFieldParams) *NullableRadioButtonFormFieldParams {
	return &NullableRadioButtonFormFieldParams{value: val, isSet: true}
}

func (v NullableRadioButtonFormFieldParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRadioButtonFormFieldParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


