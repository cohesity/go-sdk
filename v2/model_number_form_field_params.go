/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NumberFormFieldParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NumberFormFieldParams{}

// NumberFormFieldParams Parameters to specify a numeric form field
type NumberFormFieldParams struct {
	// Default value for the field
	DefaultValue NullableString `json:"defaultValue,omitempty"`
	// Description for the field to be shown on UI screen
	Description NullableString `json:"description,omitempty"`
	// Maximum allowable value for the field
	MaximumValue NullableString `json:"maximumValue,omitempty"`
	// Minimum allowable value for the field
	MinimumValue NullableString `json:"minimumValue,omitempty"`
	// Placeholder for the form field
	Placeholder NullableString `json:"placeholder,omitempty"`
	// Specifies whether the field is mandatory
	Required NullableBool `json:"required,omitempty"`
}

// NewNumberFormFieldParams instantiates a new NumberFormFieldParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNumberFormFieldParams() *NumberFormFieldParams {
	this := NumberFormFieldParams{}
	return &this
}

// NewNumberFormFieldParamsWithDefaults instantiates a new NumberFormFieldParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNumberFormFieldParamsWithDefaults() *NumberFormFieldParams {
	this := NumberFormFieldParams{}
	return &this
}

// GetDefaultValue returns the DefaultValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NumberFormFieldParams) GetDefaultValue() string {
	if o == nil || IsNil(o.DefaultValue.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultValue.Get()
}

// GetDefaultValueOk returns a tuple with the DefaultValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NumberFormFieldParams) GetDefaultValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultValue.Get(), o.DefaultValue.IsSet()
}

// HasDefaultValue returns a boolean if a field has been set.
func (o *NumberFormFieldParams) HasDefaultValue() bool {
	if o != nil && o.DefaultValue.IsSet() {
		return true
	}

	return false
}

// SetDefaultValue gets a reference to the given NullableString and assigns it to the DefaultValue field.
func (o *NumberFormFieldParams) SetDefaultValue(v string) {
	o.DefaultValue.Set(&v)
}
// SetDefaultValueNil sets the value for DefaultValue to be an explicit nil
func (o *NumberFormFieldParams) SetDefaultValueNil() {
	o.DefaultValue.Set(nil)
}

// UnsetDefaultValue ensures that no value is present for DefaultValue, not even an explicit nil
func (o *NumberFormFieldParams) UnsetDefaultValue() {
	o.DefaultValue.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NumberFormFieldParams) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NumberFormFieldParams) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *NumberFormFieldParams) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *NumberFormFieldParams) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *NumberFormFieldParams) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *NumberFormFieldParams) UnsetDescription() {
	o.Description.Unset()
}

// GetMaximumValue returns the MaximumValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NumberFormFieldParams) GetMaximumValue() string {
	if o == nil || IsNil(o.MaximumValue.Get()) {
		var ret string
		return ret
	}
	return *o.MaximumValue.Get()
}

// GetMaximumValueOk returns a tuple with the MaximumValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NumberFormFieldParams) GetMaximumValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaximumValue.Get(), o.MaximumValue.IsSet()
}

// HasMaximumValue returns a boolean if a field has been set.
func (o *NumberFormFieldParams) HasMaximumValue() bool {
	if o != nil && o.MaximumValue.IsSet() {
		return true
	}

	return false
}

// SetMaximumValue gets a reference to the given NullableString and assigns it to the MaximumValue field.
func (o *NumberFormFieldParams) SetMaximumValue(v string) {
	o.MaximumValue.Set(&v)
}
// SetMaximumValueNil sets the value for MaximumValue to be an explicit nil
func (o *NumberFormFieldParams) SetMaximumValueNil() {
	o.MaximumValue.Set(nil)
}

// UnsetMaximumValue ensures that no value is present for MaximumValue, not even an explicit nil
func (o *NumberFormFieldParams) UnsetMaximumValue() {
	o.MaximumValue.Unset()
}

// GetMinimumValue returns the MinimumValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NumberFormFieldParams) GetMinimumValue() string {
	if o == nil || IsNil(o.MinimumValue.Get()) {
		var ret string
		return ret
	}
	return *o.MinimumValue.Get()
}

// GetMinimumValueOk returns a tuple with the MinimumValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NumberFormFieldParams) GetMinimumValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MinimumValue.Get(), o.MinimumValue.IsSet()
}

// HasMinimumValue returns a boolean if a field has been set.
func (o *NumberFormFieldParams) HasMinimumValue() bool {
	if o != nil && o.MinimumValue.IsSet() {
		return true
	}

	return false
}

// SetMinimumValue gets a reference to the given NullableString and assigns it to the MinimumValue field.
func (o *NumberFormFieldParams) SetMinimumValue(v string) {
	o.MinimumValue.Set(&v)
}
// SetMinimumValueNil sets the value for MinimumValue to be an explicit nil
func (o *NumberFormFieldParams) SetMinimumValueNil() {
	o.MinimumValue.Set(nil)
}

// UnsetMinimumValue ensures that no value is present for MinimumValue, not even an explicit nil
func (o *NumberFormFieldParams) UnsetMinimumValue() {
	o.MinimumValue.Unset()
}

// GetPlaceholder returns the Placeholder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NumberFormFieldParams) GetPlaceholder() string {
	if o == nil || IsNil(o.Placeholder.Get()) {
		var ret string
		return ret
	}
	return *o.Placeholder.Get()
}

// GetPlaceholderOk returns a tuple with the Placeholder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NumberFormFieldParams) GetPlaceholderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Placeholder.Get(), o.Placeholder.IsSet()
}

// HasPlaceholder returns a boolean if a field has been set.
func (o *NumberFormFieldParams) HasPlaceholder() bool {
	if o != nil && o.Placeholder.IsSet() {
		return true
	}

	return false
}

// SetPlaceholder gets a reference to the given NullableString and assigns it to the Placeholder field.
func (o *NumberFormFieldParams) SetPlaceholder(v string) {
	o.Placeholder.Set(&v)
}
// SetPlaceholderNil sets the value for Placeholder to be an explicit nil
func (o *NumberFormFieldParams) SetPlaceholderNil() {
	o.Placeholder.Set(nil)
}

// UnsetPlaceholder ensures that no value is present for Placeholder, not even an explicit nil
func (o *NumberFormFieldParams) UnsetPlaceholder() {
	o.Placeholder.Unset()
}

// GetRequired returns the Required field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NumberFormFieldParams) GetRequired() bool {
	if o == nil || IsNil(o.Required.Get()) {
		var ret bool
		return ret
	}
	return *o.Required.Get()
}

// GetRequiredOk returns a tuple with the Required field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NumberFormFieldParams) GetRequiredOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Required.Get(), o.Required.IsSet()
}

// HasRequired returns a boolean if a field has been set.
func (o *NumberFormFieldParams) HasRequired() bool {
	if o != nil && o.Required.IsSet() {
		return true
	}

	return false
}

// SetRequired gets a reference to the given NullableBool and assigns it to the Required field.
func (o *NumberFormFieldParams) SetRequired(v bool) {
	o.Required.Set(&v)
}
// SetRequiredNil sets the value for Required to be an explicit nil
func (o *NumberFormFieldParams) SetRequiredNil() {
	o.Required.Set(nil)
}

// UnsetRequired ensures that no value is present for Required, not even an explicit nil
func (o *NumberFormFieldParams) UnsetRequired() {
	o.Required.Unset()
}

func (o NumberFormFieldParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NumberFormFieldParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultValue.IsSet() {
		toSerialize["defaultValue"] = o.DefaultValue.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.MaximumValue.IsSet() {
		toSerialize["maximumValue"] = o.MaximumValue.Get()
	}
	if o.MinimumValue.IsSet() {
		toSerialize["minimumValue"] = o.MinimumValue.Get()
	}
	if o.Placeholder.IsSet() {
		toSerialize["placeholder"] = o.Placeholder.Get()
	}
	if o.Required.IsSet() {
		toSerialize["required"] = o.Required.Get()
	}
	return toSerialize, nil
}

type NullableNumberFormFieldParams struct {
	value *NumberFormFieldParams
	isSet bool
}

func (v NullableNumberFormFieldParams) Get() *NumberFormFieldParams {
	return v.value
}

func (v *NullableNumberFormFieldParams) Set(val *NumberFormFieldParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNumberFormFieldParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNumberFormFieldParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNumberFormFieldParams(val *NumberFormFieldParams) *NullableNumberFormFieldParams {
	return &NullableNumberFormFieldParams{value: val, isSet: true}
}

func (v NullableNumberFormFieldParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNumberFormFieldParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


