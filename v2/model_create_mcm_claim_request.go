/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateMcmClaimRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateMcmClaimRequest{}

// CreateMcmClaimRequest Specifies the request params to claim an entity to Helios.
type CreateMcmClaimRequest struct {
	ClusterParams *McmClusterClaimRequestParams `json:"clusterParams,omitempty"`
	CohesionParams *McmCohesionClaimRequestParams `json:"cohesionParams,omitempty"`
	// Specifies the type of entity.
	EntityType string `json:"entityType"`
	IbmStorageProtectParams *McmIBMStorageProtectClaimRequestParams `json:"ibmStorageProtectParams,omitempty"`
	RigelParams *McmRigelClaimRequestParams `json:"rigelParams,omitempty"`
}

type _CreateMcmClaimRequest CreateMcmClaimRequest

// NewCreateMcmClaimRequest instantiates a new CreateMcmClaimRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMcmClaimRequest(entityType string) *CreateMcmClaimRequest {
	this := CreateMcmClaimRequest{}
	this.EntityType = entityType
	return &this
}

// NewCreateMcmClaimRequestWithDefaults instantiates a new CreateMcmClaimRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMcmClaimRequestWithDefaults() *CreateMcmClaimRequest {
	this := CreateMcmClaimRequest{}
	return &this
}

// GetClusterParams returns the ClusterParams field value if set, zero value otherwise.
func (o *CreateMcmClaimRequest) GetClusterParams() McmClusterClaimRequestParams {
	if o == nil || IsNil(o.ClusterParams) {
		var ret McmClusterClaimRequestParams
		return ret
	}
	return *o.ClusterParams
}

// GetClusterParamsOk returns a tuple with the ClusterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMcmClaimRequest) GetClusterParamsOk() (*McmClusterClaimRequestParams, bool) {
	if o == nil || IsNil(o.ClusterParams) {
		return nil, false
	}
	return o.ClusterParams, true
}

// HasClusterParams returns a boolean if a field has been set.
func (o *CreateMcmClaimRequest) HasClusterParams() bool {
	if o != nil && !IsNil(o.ClusterParams) {
		return true
	}

	return false
}

// SetClusterParams gets a reference to the given McmClusterClaimRequestParams and assigns it to the ClusterParams field.
func (o *CreateMcmClaimRequest) SetClusterParams(v McmClusterClaimRequestParams) {
	o.ClusterParams = &v
}

// GetCohesionParams returns the CohesionParams field value if set, zero value otherwise.
func (o *CreateMcmClaimRequest) GetCohesionParams() McmCohesionClaimRequestParams {
	if o == nil || IsNil(o.CohesionParams) {
		var ret McmCohesionClaimRequestParams
		return ret
	}
	return *o.CohesionParams
}

// GetCohesionParamsOk returns a tuple with the CohesionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMcmClaimRequest) GetCohesionParamsOk() (*McmCohesionClaimRequestParams, bool) {
	if o == nil || IsNil(o.CohesionParams) {
		return nil, false
	}
	return o.CohesionParams, true
}

// HasCohesionParams returns a boolean if a field has been set.
func (o *CreateMcmClaimRequest) HasCohesionParams() bool {
	if o != nil && !IsNil(o.CohesionParams) {
		return true
	}

	return false
}

// SetCohesionParams gets a reference to the given McmCohesionClaimRequestParams and assigns it to the CohesionParams field.
func (o *CreateMcmClaimRequest) SetCohesionParams(v McmCohesionClaimRequestParams) {
	o.CohesionParams = &v
}

// GetEntityType returns the EntityType field value
func (o *CreateMcmClaimRequest) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *CreateMcmClaimRequest) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *CreateMcmClaimRequest) SetEntityType(v string) {
	o.EntityType = v
}

// GetIbmStorageProtectParams returns the IbmStorageProtectParams field value if set, zero value otherwise.
func (o *CreateMcmClaimRequest) GetIbmStorageProtectParams() McmIBMStorageProtectClaimRequestParams {
	if o == nil || IsNil(o.IbmStorageProtectParams) {
		var ret McmIBMStorageProtectClaimRequestParams
		return ret
	}
	return *o.IbmStorageProtectParams
}

// GetIbmStorageProtectParamsOk returns a tuple with the IbmStorageProtectParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMcmClaimRequest) GetIbmStorageProtectParamsOk() (*McmIBMStorageProtectClaimRequestParams, bool) {
	if o == nil || IsNil(o.IbmStorageProtectParams) {
		return nil, false
	}
	return o.IbmStorageProtectParams, true
}

// HasIbmStorageProtectParams returns a boolean if a field has been set.
func (o *CreateMcmClaimRequest) HasIbmStorageProtectParams() bool {
	if o != nil && !IsNil(o.IbmStorageProtectParams) {
		return true
	}

	return false
}

// SetIbmStorageProtectParams gets a reference to the given McmIBMStorageProtectClaimRequestParams and assigns it to the IbmStorageProtectParams field.
func (o *CreateMcmClaimRequest) SetIbmStorageProtectParams(v McmIBMStorageProtectClaimRequestParams) {
	o.IbmStorageProtectParams = &v
}

// GetRigelParams returns the RigelParams field value if set, zero value otherwise.
func (o *CreateMcmClaimRequest) GetRigelParams() McmRigelClaimRequestParams {
	if o == nil || IsNil(o.RigelParams) {
		var ret McmRigelClaimRequestParams
		return ret
	}
	return *o.RigelParams
}

// GetRigelParamsOk returns a tuple with the RigelParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMcmClaimRequest) GetRigelParamsOk() (*McmRigelClaimRequestParams, bool) {
	if o == nil || IsNil(o.RigelParams) {
		return nil, false
	}
	return o.RigelParams, true
}

// HasRigelParams returns a boolean if a field has been set.
func (o *CreateMcmClaimRequest) HasRigelParams() bool {
	if o != nil && !IsNil(o.RigelParams) {
		return true
	}

	return false
}

// SetRigelParams gets a reference to the given McmRigelClaimRequestParams and assigns it to the RigelParams field.
func (o *CreateMcmClaimRequest) SetRigelParams(v McmRigelClaimRequestParams) {
	o.RigelParams = &v
}

func (o CreateMcmClaimRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateMcmClaimRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClusterParams) {
		toSerialize["clusterParams"] = o.ClusterParams
	}
	if !IsNil(o.CohesionParams) {
		toSerialize["cohesionParams"] = o.CohesionParams
	}
	toSerialize["entityType"] = o.EntityType
	if !IsNil(o.IbmStorageProtectParams) {
		toSerialize["ibmStorageProtectParams"] = o.IbmStorageProtectParams
	}
	if !IsNil(o.RigelParams) {
		toSerialize["rigelParams"] = o.RigelParams
	}
	return toSerialize, nil
}

func (o *CreateMcmClaimRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"entityType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateMcmClaimRequest := _CreateMcmClaimRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateMcmClaimRequest)

	if err != nil {
		return err
	}

	*o = CreateMcmClaimRequest(varCreateMcmClaimRequest)

	return err
}

type NullableCreateMcmClaimRequest struct {
	value *CreateMcmClaimRequest
	isSet bool
}

func (v NullableCreateMcmClaimRequest) Get() *CreateMcmClaimRequest {
	return v.value
}

func (v *NullableCreateMcmClaimRequest) Set(val *CreateMcmClaimRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMcmClaimRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMcmClaimRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMcmClaimRequest(val *CreateMcmClaimRequest) *NullableCreateMcmClaimRequest {
	return &NullableCreateMcmClaimRequest{value: val, isSet: true}
}

func (v NullableCreateMcmClaimRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMcmClaimRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


