/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NetworkInterfaceParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkInterfaceParams{}

// NetworkInterfaceParams Network interfaces.
type NetworkInterfaceParams struct {
	// List of interfaces on each node.
	NodeNetworkInterfaces []NodeNetworkInterfaces `json:"nodeNetworkInterfaces,omitempty"`
}

// NewNetworkInterfaceParams instantiates a new NetworkInterfaceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInterfaceParams() *NetworkInterfaceParams {
	this := NetworkInterfaceParams{}
	return &this
}

// NewNetworkInterfaceParamsWithDefaults instantiates a new NetworkInterfaceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInterfaceParamsWithDefaults() *NetworkInterfaceParams {
	this := NetworkInterfaceParams{}
	return &this
}

// GetNodeNetworkInterfaces returns the NodeNetworkInterfaces field value if set, zero value otherwise.
func (o *NetworkInterfaceParams) GetNodeNetworkInterfaces() []NodeNetworkInterfaces {
	if o == nil || IsNil(o.NodeNetworkInterfaces) {
		var ret []NodeNetworkInterfaces
		return ret
	}
	return o.NodeNetworkInterfaces
}

// GetNodeNetworkInterfacesOk returns a tuple with the NodeNetworkInterfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceParams) GetNodeNetworkInterfacesOk() ([]NodeNetworkInterfaces, bool) {
	if o == nil || IsNil(o.NodeNetworkInterfaces) {
		return nil, false
	}
	return o.NodeNetworkInterfaces, true
}

// HasNodeNetworkInterfaces returns a boolean if a field has been set.
func (o *NetworkInterfaceParams) HasNodeNetworkInterfaces() bool {
	if o != nil && !IsNil(o.NodeNetworkInterfaces) {
		return true
	}

	return false
}

// SetNodeNetworkInterfaces gets a reference to the given []NodeNetworkInterfaces and assigns it to the NodeNetworkInterfaces field.
func (o *NetworkInterfaceParams) SetNodeNetworkInterfaces(v []NodeNetworkInterfaces) {
	o.NodeNetworkInterfaces = v
}

func (o NetworkInterfaceParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkInterfaceParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.NodeNetworkInterfaces) {
		toSerialize["nodeNetworkInterfaces"] = o.NodeNetworkInterfaces
	}
	return toSerialize, nil
}

type NullableNetworkInterfaceParams struct {
	value *NetworkInterfaceParams
	isSet bool
}

func (v NullableNetworkInterfaceParams) Get() *NetworkInterfaceParams {
	return v.value
}

func (v *NullableNetworkInterfaceParams) Set(val *NetworkInterfaceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceParams(val *NetworkInterfaceParams) *NullableNetworkInterfaceParams {
	return &NullableNetworkInterfaceParams{value: val, isSet: true}
}

func (v NullableNetworkInterfaceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


