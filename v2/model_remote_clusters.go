/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RemoteClusters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoteClusters{}

// RemoteClusters Specifies a list of Remote Cluster registered with the cluster.
type RemoteClusters struct {
	// Specifies the list of Remote Clusters.
	RemoteClusters []RemoteCluster `json:"remoteClusters,omitempty"`
}

// NewRemoteClusters instantiates a new RemoteClusters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteClusters() *RemoteClusters {
	this := RemoteClusters{}
	return &this
}

// NewRemoteClustersWithDefaults instantiates a new RemoteClusters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteClustersWithDefaults() *RemoteClusters {
	this := RemoteClusters{}
	return &this
}

// GetRemoteClusters returns the RemoteClusters field value if set, zero value otherwise.
func (o *RemoteClusters) GetRemoteClusters() []RemoteCluster {
	if o == nil || IsNil(o.RemoteClusters) {
		var ret []RemoteCluster
		return ret
	}
	return o.RemoteClusters
}

// GetRemoteClustersOk returns a tuple with the RemoteClusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RemoteClusters) GetRemoteClustersOk() ([]RemoteCluster, bool) {
	if o == nil || IsNil(o.RemoteClusters) {
		return nil, false
	}
	return o.RemoteClusters, true
}

// HasRemoteClusters returns a boolean if a field has been set.
func (o *RemoteClusters) HasRemoteClusters() bool {
	if o != nil && !IsNil(o.RemoteClusters) {
		return true
	}

	return false
}

// SetRemoteClusters gets a reference to the given []RemoteCluster and assigns it to the RemoteClusters field.
func (o *RemoteClusters) SetRemoteClusters(v []RemoteCluster) {
	o.RemoteClusters = v
}

func (o RemoteClusters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoteClusters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.RemoteClusters) {
		toSerialize["remoteClusters"] = o.RemoteClusters
	}
	return toSerialize, nil
}

type NullableRemoteClusters struct {
	value *RemoteClusters
	isSet bool
}

func (v NullableRemoteClusters) Get() *RemoteClusters {
	return v.value
}

func (v *NullableRemoteClusters) Set(val *RemoteClusters) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteClusters) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteClusters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteClusters(val *RemoteClusters) *NullableRemoteClusters {
	return &NullableRemoteClusters{value: val, isSet: true}
}

func (v NullableRemoteClusters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteClusters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


