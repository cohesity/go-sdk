/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ServiceHealth type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ServiceHealth{}

// ServiceHealth Health Status of a Service.
type ServiceHealth struct {
	// \"The health status of the service (e.g., Healthy, Degraded,\" \" Unhealthy).\" 
	HealthStatus *string `json:"healthStatus,omitempty"`
	// The name of the service.
	ServiceName *string `json:"serviceName,omitempty"`
}

// NewServiceHealth instantiates a new ServiceHealth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewServiceHealth() *ServiceHealth {
	this := ServiceHealth{}
	return &this
}

// NewServiceHealthWithDefaults instantiates a new ServiceHealth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewServiceHealthWithDefaults() *ServiceHealth {
	this := ServiceHealth{}
	return &this
}

// GetHealthStatus returns the HealthStatus field value if set, zero value otherwise.
func (o *ServiceHealth) GetHealthStatus() string {
	if o == nil || IsNil(o.HealthStatus) {
		var ret string
		return ret
	}
	return *o.HealthStatus
}

// GetHealthStatusOk returns a tuple with the HealthStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHealth) GetHealthStatusOk() (*string, bool) {
	if o == nil || IsNil(o.HealthStatus) {
		return nil, false
	}
	return o.HealthStatus, true
}

// HasHealthStatus returns a boolean if a field has been set.
func (o *ServiceHealth) HasHealthStatus() bool {
	if o != nil && !IsNil(o.HealthStatus) {
		return true
	}

	return false
}

// SetHealthStatus gets a reference to the given string and assigns it to the HealthStatus field.
func (o *ServiceHealth) SetHealthStatus(v string) {
	o.HealthStatus = &v
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise.
func (o *ServiceHealth) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName) {
		var ret string
		return ret
	}
	return *o.ServiceName
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ServiceHealth) GetServiceNameOk() (*string, bool) {
	if o == nil || IsNil(o.ServiceName) {
		return nil, false
	}
	return o.ServiceName, true
}

// HasServiceName returns a boolean if a field has been set.
func (o *ServiceHealth) HasServiceName() bool {
	if o != nil && !IsNil(o.ServiceName) {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given string and assigns it to the ServiceName field.
func (o *ServiceHealth) SetServiceName(v string) {
	o.ServiceName = &v
}

func (o ServiceHealth) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ServiceHealth) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HealthStatus) {
		toSerialize["healthStatus"] = o.HealthStatus
	}
	if !IsNil(o.ServiceName) {
		toSerialize["serviceName"] = o.ServiceName
	}
	return toSerialize, nil
}

type NullableServiceHealth struct {
	value *ServiceHealth
	isSet bool
}

func (v NullableServiceHealth) Get() *ServiceHealth {
	return v.value
}

func (v *NullableServiceHealth) Set(val *ServiceHealth) {
	v.value = val
	v.isSet = true
}

func (v NullableServiceHealth) IsSet() bool {
	return v.isSet
}

func (v *NullableServiceHealth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableServiceHealth(val *ServiceHealth) *NullableServiceHealth {
	return &NullableServiceHealth{value: val, isSet: true}
}

func (v NullableServiceHealth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableServiceHealth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


