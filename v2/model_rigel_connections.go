/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RigelConnections type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RigelConnections{}

// RigelConnections Specify a list of connection of Rigel.
type RigelConnections struct {
	// Specifies a list of connection of Rigel.
	RigelConnections []RigelConnection `json:"RigelConnections,omitempty"`
}

// NewRigelConnections instantiates a new RigelConnections object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRigelConnections() *RigelConnections {
	this := RigelConnections{}
	return &this
}

// NewRigelConnectionsWithDefaults instantiates a new RigelConnections object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRigelConnectionsWithDefaults() *RigelConnections {
	this := RigelConnections{}
	return &this
}

// GetRigelConnections returns the RigelConnections field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelConnections) GetRigelConnections() []RigelConnection {
	if o == nil {
		var ret []RigelConnection
		return ret
	}
	return o.RigelConnections
}

// GetRigelConnectionsOk returns a tuple with the RigelConnections field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelConnections) GetRigelConnectionsOk() ([]RigelConnection, bool) {
	if o == nil || IsNil(o.RigelConnections) {
		return nil, false
	}
	return o.RigelConnections, true
}

// HasRigelConnections returns a boolean if a field has been set.
func (o *RigelConnections) HasRigelConnections() bool {
	if o != nil && !IsNil(o.RigelConnections) {
		return true
	}

	return false
}

// SetRigelConnections gets a reference to the given []RigelConnection and assigns it to the RigelConnections field.
func (o *RigelConnections) SetRigelConnections(v []RigelConnection) {
	o.RigelConnections = v
}

func (o RigelConnections) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RigelConnections) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RigelConnections != nil {
		toSerialize["RigelConnections"] = o.RigelConnections
	}
	return toSerialize, nil
}

type NullableRigelConnections struct {
	value *RigelConnections
	isSet bool
}

func (v NullableRigelConnections) Get() *RigelConnections {
	return v.value
}

func (v *NullableRigelConnections) Set(val *RigelConnections) {
	v.value = val
	v.isSet = true
}

func (v NullableRigelConnections) IsSet() bool {
	return v.isSet
}

func (v *NullableRigelConnections) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRigelConnections(val *RigelConnections) *NullableRigelConnections {
	return &NullableRigelConnections{value: val, isSet: true}
}

func (v NullableRigelConnections) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRigelConnections) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


