/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ImportMetadataRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportMetadataRequest{}

// ImportMetadataRequest Request parameters for Import Metadata.
type ImportMetadataRequest struct {
	ImportLocation *DataLocator `json:"importLocation,omitempty"`
}

// NewImportMetadataRequest instantiates a new ImportMetadataRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportMetadataRequest() *ImportMetadataRequest {
	this := ImportMetadataRequest{}
	return &this
}

// NewImportMetadataRequestWithDefaults instantiates a new ImportMetadataRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportMetadataRequestWithDefaults() *ImportMetadataRequest {
	this := ImportMetadataRequest{}
	return &this
}

// GetImportLocation returns the ImportLocation field value if set, zero value otherwise.
func (o *ImportMetadataRequest) GetImportLocation() DataLocator {
	if o == nil || IsNil(o.ImportLocation) {
		var ret DataLocator
		return ret
	}
	return *o.ImportLocation
}

// GetImportLocationOk returns a tuple with the ImportLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ImportMetadataRequest) GetImportLocationOk() (*DataLocator, bool) {
	if o == nil || IsNil(o.ImportLocation) {
		return nil, false
	}
	return o.ImportLocation, true
}

// HasImportLocation returns a boolean if a field has been set.
func (o *ImportMetadataRequest) HasImportLocation() bool {
	if o != nil && !IsNil(o.ImportLocation) {
		return true
	}

	return false
}

// SetImportLocation gets a reference to the given DataLocator and assigns it to the ImportLocation field.
func (o *ImportMetadataRequest) SetImportLocation(v DataLocator) {
	o.ImportLocation = &v
}

func (o ImportMetadataRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportMetadataRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ImportLocation) {
		toSerialize["importLocation"] = o.ImportLocation
	}
	return toSerialize, nil
}

type NullableImportMetadataRequest struct {
	value *ImportMetadataRequest
	isSet bool
}

func (v NullableImportMetadataRequest) Get() *ImportMetadataRequest {
	return v.value
}

func (v *NullableImportMetadataRequest) Set(val *ImportMetadataRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportMetadataRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportMetadataRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportMetadataRequest(val *ImportMetadataRequest) *NullableImportMetadataRequest {
	return &NullableImportMetadataRequest{value: val, isSet: true}
}

func (v NullableImportMetadataRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportMetadataRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


