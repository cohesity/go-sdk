/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpgradecheckResultStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradecheckResultStatus{}

// UpgradecheckResultStatus Specifies the overall  status of running upgrade health checks. The healthchecks execution status can have following possible values Running - The health checks are still running on cluster. Passed - The health checks have passed on the cluster. Failed - The health checks failed on the cluster node.
type UpgradecheckResultStatus struct {
	// Specifies status of running upgrade checks on cluster.
	Value *string `json:"value,omitempty"`
}

// NewUpgradecheckResultStatus instantiates a new UpgradecheckResultStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradecheckResultStatus() *UpgradecheckResultStatus {
	this := UpgradecheckResultStatus{}
	return &this
}

// NewUpgradecheckResultStatusWithDefaults instantiates a new UpgradecheckResultStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradecheckResultStatusWithDefaults() *UpgradecheckResultStatus {
	this := UpgradecheckResultStatus{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *UpgradecheckResultStatus) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradecheckResultStatus) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *UpgradecheckResultStatus) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *UpgradecheckResultStatus) SetValue(v string) {
	o.Value = &v
}

func (o UpgradecheckResultStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradecheckResultStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullableUpgradecheckResultStatus struct {
	value *UpgradecheckResultStatus
	isSet bool
}

func (v NullableUpgradecheckResultStatus) Get() *UpgradecheckResultStatus {
	return v.value
}

func (v *NullableUpgradecheckResultStatus) Set(val *UpgradecheckResultStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradecheckResultStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradecheckResultStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradecheckResultStatus(val *UpgradecheckResultStatus) *NullableUpgradecheckResultStatus {
	return &NullableUpgradecheckResultStatus{value: val, isSet: true}
}

func (v NullableUpgradecheckResultStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradecheckResultStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


