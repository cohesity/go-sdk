/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MigrateS3Views type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MigrateS3Views{}

// MigrateS3Views Specifies the parameters required to perform the S3 Migration.
type MigrateS3Views struct {
	// Specifies the target S3 migration state for the Views specified in the viewIds parameter. Supported Migration States are: [Enable, Cancel, Pause, Resume].
	S3MigrationAction string `json:"s3MigrationAction"`
	// Specifies the list Views IDs on which the migration action will be performed.
	ViewIds []int32 `json:"viewIds"`
}

type _MigrateS3Views MigrateS3Views

// NewMigrateS3Views instantiates a new MigrateS3Views object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMigrateS3Views(s3MigrationAction string, viewIds []int32) *MigrateS3Views {
	this := MigrateS3Views{}
	this.S3MigrationAction = s3MigrationAction
	this.ViewIds = viewIds
	return &this
}

// NewMigrateS3ViewsWithDefaults instantiates a new MigrateS3Views object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMigrateS3ViewsWithDefaults() *MigrateS3Views {
	this := MigrateS3Views{}
	return &this
}

// GetS3MigrationAction returns the S3MigrationAction field value
func (o *MigrateS3Views) GetS3MigrationAction() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.S3MigrationAction
}

// GetS3MigrationActionOk returns a tuple with the S3MigrationAction field value
// and a boolean to check if the value has been set.
func (o *MigrateS3Views) GetS3MigrationActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.S3MigrationAction, true
}

// SetS3MigrationAction sets field value
func (o *MigrateS3Views) SetS3MigrationAction(v string) {
	o.S3MigrationAction = v
}

// GetViewIds returns the ViewIds field value
// If the value is explicit nil, the zero value for []int32 will be returned
func (o *MigrateS3Views) GetViewIds() []int32 {
	if o == nil {
		var ret []int32
		return ret
	}

	return o.ViewIds
}

// GetViewIdsOk returns a tuple with the ViewIds field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MigrateS3Views) GetViewIdsOk() ([]int32, bool) {
	if o == nil || IsNil(o.ViewIds) {
		return nil, false
	}
	return o.ViewIds, true
}

// SetViewIds sets field value
func (o *MigrateS3Views) SetViewIds(v []int32) {
	o.ViewIds = v
}

func (o MigrateS3Views) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MigrateS3Views) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["s3MigrationAction"] = o.S3MigrationAction
	if o.ViewIds != nil {
		toSerialize["viewIds"] = o.ViewIds
	}
	return toSerialize, nil
}

func (o *MigrateS3Views) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"s3MigrationAction",
		"viewIds",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMigrateS3Views := _MigrateS3Views{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMigrateS3Views)

	if err != nil {
		return err
	}

	*o = MigrateS3Views(varMigrateS3Views)

	return err
}

type NullableMigrateS3Views struct {
	value *MigrateS3Views
	isSet bool
}

func (v NullableMigrateS3Views) Get() *MigrateS3Views {
	return v.value
}

func (v *NullableMigrateS3Views) Set(val *MigrateS3Views) {
	v.value = val
	v.isSet = true
}

func (v NullableMigrateS3Views) IsSet() bool {
	return v.isSet
}

func (v *NullableMigrateS3Views) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMigrateS3Views(val *MigrateS3Views) *NullableMigrateS3Views {
	return &NullableMigrateS3Views{value: val, isSet: true}
}

func (v NullableMigrateS3Views) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMigrateS3Views) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


