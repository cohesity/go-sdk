/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the QuiesceGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuiesceGroup{}

// QuiesceGroup Specifies the quiesce group for kubernetes.
type QuiesceGroup struct {
	// Specifies quiesce mode for applying quiesce rules.
	QuiesceMode NullableString `json:"quiesceMode"`
	// Specifies a list of quiesce rules.
	QuiesceRules []QuiesceRule `json:"quiesceRules"`
}

type _QuiesceGroup QuiesceGroup

// NewQuiesceGroup instantiates a new QuiesceGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuiesceGroup(quiesceMode NullableString, quiesceRules []QuiesceRule) *QuiesceGroup {
	this := QuiesceGroup{}
	this.QuiesceMode = quiesceMode
	this.QuiesceRules = quiesceRules
	return &this
}

// NewQuiesceGroupWithDefaults instantiates a new QuiesceGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuiesceGroupWithDefaults() *QuiesceGroup {
	this := QuiesceGroup{}
	return &this
}

// GetQuiesceMode returns the QuiesceMode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *QuiesceGroup) GetQuiesceMode() string {
	if o == nil || o.QuiesceMode.Get() == nil {
		var ret string
		return ret
	}

	return *o.QuiesceMode.Get()
}

// GetQuiesceModeOk returns a tuple with the QuiesceMode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuiesceGroup) GetQuiesceModeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.QuiesceMode.Get(), o.QuiesceMode.IsSet()
}

// SetQuiesceMode sets field value
func (o *QuiesceGroup) SetQuiesceMode(v string) {
	o.QuiesceMode.Set(&v)
}

// GetQuiesceRules returns the QuiesceRules field value
// If the value is explicit nil, the zero value for []QuiesceRule will be returned
func (o *QuiesceGroup) GetQuiesceRules() []QuiesceRule {
	if o == nil {
		var ret []QuiesceRule
		return ret
	}

	return o.QuiesceRules
}

// GetQuiesceRulesOk returns a tuple with the QuiesceRules field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuiesceGroup) GetQuiesceRulesOk() ([]QuiesceRule, bool) {
	if o == nil || IsNil(o.QuiesceRules) {
		return nil, false
	}
	return o.QuiesceRules, true
}

// SetQuiesceRules sets field value
func (o *QuiesceGroup) SetQuiesceRules(v []QuiesceRule) {
	o.QuiesceRules = v
}

func (o QuiesceGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuiesceGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["quiesceMode"] = o.QuiesceMode.Get()
	if o.QuiesceRules != nil {
		toSerialize["quiesceRules"] = o.QuiesceRules
	}
	return toSerialize, nil
}

func (o *QuiesceGroup) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"quiesceMode",
		"quiesceRules",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varQuiesceGroup := _QuiesceGroup{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varQuiesceGroup)

	if err != nil {
		return err
	}

	*o = QuiesceGroup(varQuiesceGroup)

	return err
}

type NullableQuiesceGroup struct {
	value *QuiesceGroup
	isSet bool
}

func (v NullableQuiesceGroup) Get() *QuiesceGroup {
	return v.value
}

func (v *NullableQuiesceGroup) Set(val *QuiesceGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableQuiesceGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableQuiesceGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuiesceGroup(val *QuiesceGroup) *NullableQuiesceGroup {
	return &NullableQuiesceGroup{value: val, isSet: true}
}

func (v NullableQuiesceGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuiesceGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


