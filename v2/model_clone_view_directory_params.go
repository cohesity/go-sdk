/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CloneViewDirectoryParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloneViewDirectoryParams{}

// CloneViewDirectoryParams Specifies the parameters to clone View directory.
type CloneViewDirectoryParams struct {
	// Specifies the path of source directory. This is the full path including the Storage Domain name and View name.
	SourceDirectoryPath NullableString `json:"sourceDirectoryPath"`
	// Specifies the name of the target directory.
	TargetDirectoryName NullableString `json:"targetDirectoryName"`
	// Specifies the path of parent directory of the target directory. This is the full path including the Storage Domain name and View Name.
	TargetParentDirectoryPath NullableString `json:"targetParentDirectoryPath"`
}

type _CloneViewDirectoryParams CloneViewDirectoryParams

// NewCloneViewDirectoryParams instantiates a new CloneViewDirectoryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloneViewDirectoryParams(sourceDirectoryPath NullableString, targetDirectoryName NullableString, targetParentDirectoryPath NullableString) *CloneViewDirectoryParams {
	this := CloneViewDirectoryParams{}
	this.SourceDirectoryPath = sourceDirectoryPath
	this.TargetDirectoryName = targetDirectoryName
	this.TargetParentDirectoryPath = targetParentDirectoryPath
	return &this
}

// NewCloneViewDirectoryParamsWithDefaults instantiates a new CloneViewDirectoryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloneViewDirectoryParamsWithDefaults() *CloneViewDirectoryParams {
	this := CloneViewDirectoryParams{}
	return &this
}

// GetSourceDirectoryPath returns the SourceDirectoryPath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CloneViewDirectoryParams) GetSourceDirectoryPath() string {
	if o == nil || o.SourceDirectoryPath.Get() == nil {
		var ret string
		return ret
	}

	return *o.SourceDirectoryPath.Get()
}

// GetSourceDirectoryPathOk returns a tuple with the SourceDirectoryPath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneViewDirectoryParams) GetSourceDirectoryPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceDirectoryPath.Get(), o.SourceDirectoryPath.IsSet()
}

// SetSourceDirectoryPath sets field value
func (o *CloneViewDirectoryParams) SetSourceDirectoryPath(v string) {
	o.SourceDirectoryPath.Set(&v)
}

// GetTargetDirectoryName returns the TargetDirectoryName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CloneViewDirectoryParams) GetTargetDirectoryName() string {
	if o == nil || o.TargetDirectoryName.Get() == nil {
		var ret string
		return ret
	}

	return *o.TargetDirectoryName.Get()
}

// GetTargetDirectoryNameOk returns a tuple with the TargetDirectoryName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneViewDirectoryParams) GetTargetDirectoryNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetDirectoryName.Get(), o.TargetDirectoryName.IsSet()
}

// SetTargetDirectoryName sets field value
func (o *CloneViewDirectoryParams) SetTargetDirectoryName(v string) {
	o.TargetDirectoryName.Set(&v)
}

// GetTargetParentDirectoryPath returns the TargetParentDirectoryPath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CloneViewDirectoryParams) GetTargetParentDirectoryPath() string {
	if o == nil || o.TargetParentDirectoryPath.Get() == nil {
		var ret string
		return ret
	}

	return *o.TargetParentDirectoryPath.Get()
}

// GetTargetParentDirectoryPathOk returns a tuple with the TargetParentDirectoryPath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneViewDirectoryParams) GetTargetParentDirectoryPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetParentDirectoryPath.Get(), o.TargetParentDirectoryPath.IsSet()
}

// SetTargetParentDirectoryPath sets field value
func (o *CloneViewDirectoryParams) SetTargetParentDirectoryPath(v string) {
	o.TargetParentDirectoryPath.Set(&v)
}

func (o CloneViewDirectoryParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloneViewDirectoryParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["sourceDirectoryPath"] = o.SourceDirectoryPath.Get()
	toSerialize["targetDirectoryName"] = o.TargetDirectoryName.Get()
	toSerialize["targetParentDirectoryPath"] = o.TargetParentDirectoryPath.Get()
	return toSerialize, nil
}

func (o *CloneViewDirectoryParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sourceDirectoryPath",
		"targetDirectoryName",
		"targetParentDirectoryPath",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloneViewDirectoryParams := _CloneViewDirectoryParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCloneViewDirectoryParams)

	if err != nil {
		return err
	}

	*o = CloneViewDirectoryParams(varCloneViewDirectoryParams)

	return err
}

type NullableCloneViewDirectoryParams struct {
	value *CloneViewDirectoryParams
	isSet bool
}

func (v NullableCloneViewDirectoryParams) Get() *CloneViewDirectoryParams {
	return v.value
}

func (v *NullableCloneViewDirectoryParams) Set(val *CloneViewDirectoryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneViewDirectoryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneViewDirectoryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneViewDirectoryParams(val *CloneViewDirectoryParams) *NullableCloneViewDirectoryParams {
	return &NullableCloneViewDirectoryParams{value: val, isSet: true}
}

func (v NullableCloneViewDirectoryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneViewDirectoryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


