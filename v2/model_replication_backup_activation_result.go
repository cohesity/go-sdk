/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ReplicationBackupActivationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ReplicationBackupActivationResult{}

// ReplicationBackupActivationResult Specifies the result returned after creating a protection group for backing up failover objects on replication cluster.
type ReplicationBackupActivationResult struct {
	// Specifies the protection errors, if any, pertaining to each object specified in 'objects'.
	ObjectErrors []Error `json:"objectErrors,omitempty"`
	// Specifies the list of failover object that are going to be protected on replication cluster.
	Objects []FailoverObject `json:"objects,omitempty"`
	// Specifies the protection group id that will be returned upon creation of new group or existing group for backing up failover entities.
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
	ReverseReplicationResult *ReverseReplicationResult `json:"reverseReplicationResult,omitempty"`
}

// NewReplicationBackupActivationResult instantiates a new ReplicationBackupActivationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationBackupActivationResult() *ReplicationBackupActivationResult {
	this := ReplicationBackupActivationResult{}
	return &this
}

// NewReplicationBackupActivationResultWithDefaults instantiates a new ReplicationBackupActivationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationBackupActivationResultWithDefaults() *ReplicationBackupActivationResult {
	this := ReplicationBackupActivationResult{}
	return &this
}

// GetObjectErrors returns the ObjectErrors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationBackupActivationResult) GetObjectErrors() []Error {
	if o == nil {
		var ret []Error
		return ret
	}
	return o.ObjectErrors
}

// GetObjectErrorsOk returns a tuple with the ObjectErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationBackupActivationResult) GetObjectErrorsOk() ([]Error, bool) {
	if o == nil || IsNil(o.ObjectErrors) {
		return nil, false
	}
	return o.ObjectErrors, true
}

// HasObjectErrors returns a boolean if a field has been set.
func (o *ReplicationBackupActivationResult) HasObjectErrors() bool {
	if o != nil && !IsNil(o.ObjectErrors) {
		return true
	}

	return false
}

// SetObjectErrors gets a reference to the given []Error and assigns it to the ObjectErrors field.
func (o *ReplicationBackupActivationResult) SetObjectErrors(v []Error) {
	o.ObjectErrors = v
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationBackupActivationResult) GetObjects() []FailoverObject {
	if o == nil {
		var ret []FailoverObject
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationBackupActivationResult) GetObjectsOk() ([]FailoverObject, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *ReplicationBackupActivationResult) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []FailoverObject and assigns it to the Objects field.
func (o *ReplicationBackupActivationResult) SetObjects(v []FailoverObject) {
	o.Objects = v
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationBackupActivationResult) GetProtectionGroupId() string {
	if o == nil || IsNil(o.ProtectionGroupId.Get()) {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationBackupActivationResult) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *ReplicationBackupActivationResult) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *ReplicationBackupActivationResult) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *ReplicationBackupActivationResult) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *ReplicationBackupActivationResult) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

// GetReverseReplicationResult returns the ReverseReplicationResult field value if set, zero value otherwise.
func (o *ReplicationBackupActivationResult) GetReverseReplicationResult() ReverseReplicationResult {
	if o == nil || IsNil(o.ReverseReplicationResult) {
		var ret ReverseReplicationResult
		return ret
	}
	return *o.ReverseReplicationResult
}

// GetReverseReplicationResultOk returns a tuple with the ReverseReplicationResult field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReplicationBackupActivationResult) GetReverseReplicationResultOk() (*ReverseReplicationResult, bool) {
	if o == nil || IsNil(o.ReverseReplicationResult) {
		return nil, false
	}
	return o.ReverseReplicationResult, true
}

// HasReverseReplicationResult returns a boolean if a field has been set.
func (o *ReplicationBackupActivationResult) HasReverseReplicationResult() bool {
	if o != nil && !IsNil(o.ReverseReplicationResult) {
		return true
	}

	return false
}

// SetReverseReplicationResult gets a reference to the given ReverseReplicationResult and assigns it to the ReverseReplicationResult field.
func (o *ReplicationBackupActivationResult) SetReverseReplicationResult(v ReverseReplicationResult) {
	o.ReverseReplicationResult = &v
}

func (o ReplicationBackupActivationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ReplicationBackupActivationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectErrors != nil {
		toSerialize["objectErrors"] = o.ObjectErrors
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	if !IsNil(o.ReverseReplicationResult) {
		toSerialize["reverseReplicationResult"] = o.ReverseReplicationResult
	}
	return toSerialize, nil
}

type NullableReplicationBackupActivationResult struct {
	value *ReplicationBackupActivationResult
	isSet bool
}

func (v NullableReplicationBackupActivationResult) Get() *ReplicationBackupActivationResult {
	return v.value
}

func (v *NullableReplicationBackupActivationResult) Set(val *ReplicationBackupActivationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationBackupActivationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationBackupActivationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationBackupActivationResult(val *ReplicationBackupActivationResult) *NullableReplicationBackupActivationResult {
	return &NullableReplicationBackupActivationResult{value: val, isSet: true}
}

func (v NullableReplicationBackupActivationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationBackupActivationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


