/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AddedActiveDirectoryPrincipal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AddedActiveDirectoryPrincipal{}

// AddedActiveDirectoryPrincipal Specifies a group or user added to the Cohesity Cluster for an Active Directory principal.
type AddedActiveDirectoryPrincipal struct {
	// Specifies a description about the user or group.
	Description NullableString `json:"description,omitempty"`
	// Specifies the domain of the Active Directory where the referenced principal is stored.
	DomainName NullableString `json:"domainName" validate:"regexp=^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9])(\\\\.([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9_\\\\-]{0,61}[a-zA-Z0-9]))*$"`
	// Specifies the name of the Active Directory principal, that will be referenced by the group or user. The name of the Active Directory principal is used for naming the new group or user on the Cohesity Cluster.
	Name NullableString `json:"name"`
	// Specifies the type of Active Directory principal.<br> 'User' specifies a user object class.<br> 'Group' specifies a group object class.<br> 'ServiceAccount' specifies a service account object class.
	ObjectClass NullableString `json:"objectClass"`
	// Whether the principal is a restricted principal. A restricted principal can only view the objects he has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Specifies the Cohesity roles to associate with this user or group such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for this group or user. For example if the 'joe' user is added form the Active Directory and is associated with the Cohesity 'View' role,'joe' can log in to the Cohesity Dashboard and has a read-only view of the data on the Cohesity Cluster.
	Roles []string `json:"roles,omitempty"`
	// Specifies the epoch time in milliseconds when the group or user was added to the Cohesity Cluster.
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies the epoch time in milliseconds when the group or user was last modified on the Cohesity Cluster.
	LastUpdatedTimeMsecs NullableInt64 `json:"lastUpdatedTimeMsecs,omitempty"`
	// Specifies the unique Security ID (SID) of the Active Directory principal associated with this group or user.
	Sid NullableString `json:"sid,omitempty"`
}

type _AddedActiveDirectoryPrincipal AddedActiveDirectoryPrincipal

// NewAddedActiveDirectoryPrincipal instantiates a new AddedActiveDirectoryPrincipal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAddedActiveDirectoryPrincipal(domainName NullableString, name NullableString, objectClass NullableString) *AddedActiveDirectoryPrincipal {
	this := AddedActiveDirectoryPrincipal{}
	this.DomainName = domainName
	this.Name = name
	this.ObjectClass = objectClass
	return &this
}

// NewAddedActiveDirectoryPrincipalWithDefaults instantiates a new AddedActiveDirectoryPrincipal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAddedActiveDirectoryPrincipalWithDefaults() *AddedActiveDirectoryPrincipal {
	this := AddedActiveDirectoryPrincipal{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddedActiveDirectoryPrincipal) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddedActiveDirectoryPrincipal) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *AddedActiveDirectoryPrincipal) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *AddedActiveDirectoryPrincipal) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *AddedActiveDirectoryPrincipal) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *AddedActiveDirectoryPrincipal) UnsetDescription() {
	o.Description.Unset()
}

// GetDomainName returns the DomainName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddedActiveDirectoryPrincipal) GetDomainName() string {
	if o == nil || o.DomainName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DomainName.Get()
}

// GetDomainNameOk returns a tuple with the DomainName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddedActiveDirectoryPrincipal) GetDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomainName.Get(), o.DomainName.IsSet()
}

// SetDomainName sets field value
func (o *AddedActiveDirectoryPrincipal) SetDomainName(v string) {
	o.DomainName.Set(&v)
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddedActiveDirectoryPrincipal) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddedActiveDirectoryPrincipal) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *AddedActiveDirectoryPrincipal) SetName(v string) {
	o.Name.Set(&v)
}

// GetObjectClass returns the ObjectClass field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AddedActiveDirectoryPrincipal) GetObjectClass() string {
	if o == nil || o.ObjectClass.Get() == nil {
		var ret string
		return ret
	}

	return *o.ObjectClass.Get()
}

// GetObjectClassOk returns a tuple with the ObjectClass field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddedActiveDirectoryPrincipal) GetObjectClassOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectClass.Get(), o.ObjectClass.IsSet()
}

// SetObjectClass sets field value
func (o *AddedActiveDirectoryPrincipal) SetObjectClass(v string) {
	o.ObjectClass.Set(&v)
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddedActiveDirectoryPrincipal) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted.Get()) {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddedActiveDirectoryPrincipal) GetRestrictedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *AddedActiveDirectoryPrincipal) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *AddedActiveDirectoryPrincipal) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *AddedActiveDirectoryPrincipal) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *AddedActiveDirectoryPrincipal) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddedActiveDirectoryPrincipal) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddedActiveDirectoryPrincipal) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *AddedActiveDirectoryPrincipal) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *AddedActiveDirectoryPrincipal) SetRoles(v []string) {
	o.Roles = v
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddedActiveDirectoryPrincipal) GetCreatedTimeMsecs() int64 {
	if o == nil || IsNil(o.CreatedTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddedActiveDirectoryPrincipal) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *AddedActiveDirectoryPrincipal) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *AddedActiveDirectoryPrincipal) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *AddedActiveDirectoryPrincipal) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *AddedActiveDirectoryPrincipal) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetLastUpdatedTimeMsecs returns the LastUpdatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddedActiveDirectoryPrincipal) GetLastUpdatedTimeMsecs() int64 {
	if o == nil || IsNil(o.LastUpdatedTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimeMsecs.Get()
}

// GetLastUpdatedTimeMsecsOk returns a tuple with the LastUpdatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddedActiveDirectoryPrincipal) GetLastUpdatedTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastUpdatedTimeMsecs.Get(), o.LastUpdatedTimeMsecs.IsSet()
}

// HasLastUpdatedTimeMsecs returns a boolean if a field has been set.
func (o *AddedActiveDirectoryPrincipal) HasLastUpdatedTimeMsecs() bool {
	if o != nil && o.LastUpdatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the LastUpdatedTimeMsecs field.
func (o *AddedActiveDirectoryPrincipal) SetLastUpdatedTimeMsecs(v int64) {
	o.LastUpdatedTimeMsecs.Set(&v)
}
// SetLastUpdatedTimeMsecsNil sets the value for LastUpdatedTimeMsecs to be an explicit nil
func (o *AddedActiveDirectoryPrincipal) SetLastUpdatedTimeMsecsNil() {
	o.LastUpdatedTimeMsecs.Set(nil)
}

// UnsetLastUpdatedTimeMsecs ensures that no value is present for LastUpdatedTimeMsecs, not even an explicit nil
func (o *AddedActiveDirectoryPrincipal) UnsetLastUpdatedTimeMsecs() {
	o.LastUpdatedTimeMsecs.Unset()
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AddedActiveDirectoryPrincipal) GetSid() string {
	if o == nil || IsNil(o.Sid.Get()) {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AddedActiveDirectoryPrincipal) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *AddedActiveDirectoryPrincipal) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *AddedActiveDirectoryPrincipal) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *AddedActiveDirectoryPrincipal) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *AddedActiveDirectoryPrincipal) UnsetSid() {
	o.Sid.Unset()
}

func (o AddedActiveDirectoryPrincipal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AddedActiveDirectoryPrincipal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["domainName"] = o.DomainName.Get()
	toSerialize["name"] = o.Name.Get()
	toSerialize["objectClass"] = o.ObjectClass.Get()
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if o.LastUpdatedTimeMsecs.IsSet() {
		toSerialize["lastUpdatedTimeMsecs"] = o.LastUpdatedTimeMsecs.Get()
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	return toSerialize, nil
}

func (o *AddedActiveDirectoryPrincipal) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domainName",
		"name",
		"objectClass",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAddedActiveDirectoryPrincipal := _AddedActiveDirectoryPrincipal{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAddedActiveDirectoryPrincipal)

	if err != nil {
		return err
	}

	*o = AddedActiveDirectoryPrincipal(varAddedActiveDirectoryPrincipal)

	return err
}

type NullableAddedActiveDirectoryPrincipal struct {
	value *AddedActiveDirectoryPrincipal
	isSet bool
}

func (v NullableAddedActiveDirectoryPrincipal) Get() *AddedActiveDirectoryPrincipal {
	return v.value
}

func (v *NullableAddedActiveDirectoryPrincipal) Set(val *AddedActiveDirectoryPrincipal) {
	v.value = val
	v.isSet = true
}

func (v NullableAddedActiveDirectoryPrincipal) IsSet() bool {
	return v.isSet
}

func (v *NullableAddedActiveDirectoryPrincipal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAddedActiveDirectoryPrincipal(val *AddedActiveDirectoryPrincipal) *NullableAddedActiveDirectoryPrincipal {
	return &NullableAddedActiveDirectoryPrincipal{value: val, isSet: true}
}

func (v NullableAddedActiveDirectoryPrincipal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAddedActiveDirectoryPrincipal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


