/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObjectRunList type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectRunList{}

// ObjectRunList The response object containing the object summary, a run start time and an error message (if any) pertaining to the edit op of the run
type ObjectRunList struct {
	// Specifies an error (if any) corresponding to this objectId and run.
	ErrorMessage *string `json:"errorMessage,omitempty"`
	// Specifies the id of the object.
	ObjectId int64 `json:"objectId"`
	// Specifies the start time of the run that was updated.
	RunStartTimeUsecs int64 `json:"runStartTimeUsecs"`
}

type _ObjectRunList ObjectRunList

// NewObjectRunList instantiates a new ObjectRunList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectRunList(objectId int64, runStartTimeUsecs int64) *ObjectRunList {
	this := ObjectRunList{}
	this.ObjectId = objectId
	this.RunStartTimeUsecs = runStartTimeUsecs
	return &this
}

// NewObjectRunListWithDefaults instantiates a new ObjectRunList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectRunListWithDefaults() *ObjectRunList {
	this := ObjectRunList{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise.
func (o *ObjectRunList) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage) {
		var ret string
		return ret
	}
	return *o.ErrorMessage
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectRunList) GetErrorMessageOk() (*string, bool) {
	if o == nil || IsNil(o.ErrorMessage) {
		return nil, false
	}
	return o.ErrorMessage, true
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ObjectRunList) HasErrorMessage() bool {
	if o != nil && !IsNil(o.ErrorMessage) {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given string and assigns it to the ErrorMessage field.
func (o *ObjectRunList) SetErrorMessage(v string) {
	o.ErrorMessage = &v
}

// GetObjectId returns the ObjectId field value
func (o *ObjectRunList) GetObjectId() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
func (o *ObjectRunList) GetObjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ObjectId, true
}

// SetObjectId sets field value
func (o *ObjectRunList) SetObjectId(v int64) {
	o.ObjectId = v
}

// GetRunStartTimeUsecs returns the RunStartTimeUsecs field value
func (o *ObjectRunList) GetRunStartTimeUsecs() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.RunStartTimeUsecs
}

// GetRunStartTimeUsecsOk returns a tuple with the RunStartTimeUsecs field value
// and a boolean to check if the value has been set.
func (o *ObjectRunList) GetRunStartTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunStartTimeUsecs, true
}

// SetRunStartTimeUsecs sets field value
func (o *ObjectRunList) SetRunStartTimeUsecs(v int64) {
	o.RunStartTimeUsecs = v
}

func (o ObjectRunList) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectRunList) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ErrorMessage) {
		toSerialize["errorMessage"] = o.ErrorMessage
	}
	toSerialize["objectId"] = o.ObjectId
	toSerialize["runStartTimeUsecs"] = o.RunStartTimeUsecs
	return toSerialize, nil
}

func (o *ObjectRunList) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objectId",
		"runStartTimeUsecs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObjectRunList := _ObjectRunList{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObjectRunList)

	if err != nil {
		return err
	}

	*o = ObjectRunList(varObjectRunList)

	return err
}

type NullableObjectRunList struct {
	value *ObjectRunList
	isSet bool
}

func (v NullableObjectRunList) Get() *ObjectRunList {
	return v.value
}

func (v *NullableObjectRunList) Set(val *ObjectRunList) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectRunList) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectRunList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectRunList(val *ObjectRunList) *NullableObjectRunList {
	return &NullableObjectRunList{value: val, isSet: true}
}

func (v NullableObjectRunList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectRunList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


