/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GetGaiaIndexingStatusResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetGaiaIndexingStatusResult{}

// GetGaiaIndexingStatusResult Specifies the get indexing status response.
type GetGaiaIndexingStatusResult struct {
	// Whether cancellation has been scheduled on the job.
	CancellationScheduled NullableBool `json:"cancellationScheduled,omitempty"`
	// Whether the indexing is finished.
	Finished NullableBool `json:"finished,omitempty"`
	Stats NullableGaiaIndexingStats `json:"stats,omitempty"`
}

// NewGetGaiaIndexingStatusResult instantiates a new GetGaiaIndexingStatusResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetGaiaIndexingStatusResult() *GetGaiaIndexingStatusResult {
	this := GetGaiaIndexingStatusResult{}
	return &this
}

// NewGetGaiaIndexingStatusResultWithDefaults instantiates a new GetGaiaIndexingStatusResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetGaiaIndexingStatusResultWithDefaults() *GetGaiaIndexingStatusResult {
	this := GetGaiaIndexingStatusResult{}
	return &this
}

// GetCancellationScheduled returns the CancellationScheduled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGaiaIndexingStatusResult) GetCancellationScheduled() bool {
	if o == nil || IsNil(o.CancellationScheduled.Get()) {
		var ret bool
		return ret
	}
	return *o.CancellationScheduled.Get()
}

// GetCancellationScheduledOk returns a tuple with the CancellationScheduled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGaiaIndexingStatusResult) GetCancellationScheduledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancellationScheduled.Get(), o.CancellationScheduled.IsSet()
}

// HasCancellationScheduled returns a boolean if a field has been set.
func (o *GetGaiaIndexingStatusResult) HasCancellationScheduled() bool {
	if o != nil && o.CancellationScheduled.IsSet() {
		return true
	}

	return false
}

// SetCancellationScheduled gets a reference to the given NullableBool and assigns it to the CancellationScheduled field.
func (o *GetGaiaIndexingStatusResult) SetCancellationScheduled(v bool) {
	o.CancellationScheduled.Set(&v)
}
// SetCancellationScheduledNil sets the value for CancellationScheduled to be an explicit nil
func (o *GetGaiaIndexingStatusResult) SetCancellationScheduledNil() {
	o.CancellationScheduled.Set(nil)
}

// UnsetCancellationScheduled ensures that no value is present for CancellationScheduled, not even an explicit nil
func (o *GetGaiaIndexingStatusResult) UnsetCancellationScheduled() {
	o.CancellationScheduled.Unset()
}

// GetFinished returns the Finished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGaiaIndexingStatusResult) GetFinished() bool {
	if o == nil || IsNil(o.Finished.Get()) {
		var ret bool
		return ret
	}
	return *o.Finished.Get()
}

// GetFinishedOk returns a tuple with the Finished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGaiaIndexingStatusResult) GetFinishedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Finished.Get(), o.Finished.IsSet()
}

// HasFinished returns a boolean if a field has been set.
func (o *GetGaiaIndexingStatusResult) HasFinished() bool {
	if o != nil && o.Finished.IsSet() {
		return true
	}

	return false
}

// SetFinished gets a reference to the given NullableBool and assigns it to the Finished field.
func (o *GetGaiaIndexingStatusResult) SetFinished(v bool) {
	o.Finished.Set(&v)
}
// SetFinishedNil sets the value for Finished to be an explicit nil
func (o *GetGaiaIndexingStatusResult) SetFinishedNil() {
	o.Finished.Set(nil)
}

// UnsetFinished ensures that no value is present for Finished, not even an explicit nil
func (o *GetGaiaIndexingStatusResult) UnsetFinished() {
	o.Finished.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GetGaiaIndexingStatusResult) GetStats() GaiaIndexingStats {
	if o == nil || IsNil(o.Stats.Get()) {
		var ret GaiaIndexingStats
		return ret
	}
	return *o.Stats.Get()
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GetGaiaIndexingStatusResult) GetStatsOk() (*GaiaIndexingStats, bool) {
	if o == nil {
		return nil, false
	}
	return o.Stats.Get(), o.Stats.IsSet()
}

// HasStats returns a boolean if a field has been set.
func (o *GetGaiaIndexingStatusResult) HasStats() bool {
	if o != nil && o.Stats.IsSet() {
		return true
	}

	return false
}

// SetStats gets a reference to the given NullableGaiaIndexingStats and assigns it to the Stats field.
func (o *GetGaiaIndexingStatusResult) SetStats(v GaiaIndexingStats) {
	o.Stats.Set(&v)
}
// SetStatsNil sets the value for Stats to be an explicit nil
func (o *GetGaiaIndexingStatusResult) SetStatsNil() {
	o.Stats.Set(nil)
}

// UnsetStats ensures that no value is present for Stats, not even an explicit nil
func (o *GetGaiaIndexingStatusResult) UnsetStats() {
	o.Stats.Unset()
}

func (o GetGaiaIndexingStatusResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetGaiaIndexingStatusResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CancellationScheduled.IsSet() {
		toSerialize["cancellationScheduled"] = o.CancellationScheduled.Get()
	}
	if o.Finished.IsSet() {
		toSerialize["finished"] = o.Finished.Get()
	}
	if o.Stats.IsSet() {
		toSerialize["stats"] = o.Stats.Get()
	}
	return toSerialize, nil
}

type NullableGetGaiaIndexingStatusResult struct {
	value *GetGaiaIndexingStatusResult
	isSet bool
}

func (v NullableGetGaiaIndexingStatusResult) Get() *GetGaiaIndexingStatusResult {
	return v.value
}

func (v *NullableGetGaiaIndexingStatusResult) Set(val *GetGaiaIndexingStatusResult) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGaiaIndexingStatusResult) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGaiaIndexingStatusResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGaiaIndexingStatusResult(val *GetGaiaIndexingStatusResult) *NullableGetGaiaIndexingStatusResult {
	return &NullableGetGaiaIndexingStatusResult{value: val, isSet: true}
}

func (v NullableGetGaiaIndexingStatusResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGaiaIndexingStatusResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


