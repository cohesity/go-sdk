/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UpdateArchivalSnapshotConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateArchivalSnapshotConfig{}

// UpdateArchivalSnapshotConfig Specifies the params to perform actions on archival snapshots taken by a Protection Group Run.
type UpdateArchivalSnapshotConfig struct {
	// Specifies the new configuration about adding Archival Snapshot to existing Protection Group Run.
	NewSnapshotConfig []RunArchivalConfig `json:"newSnapshotConfig,omitempty"`
	// Specifies the configuration about updating an existing Archival Snapshot Run.
	UpdateExistingSnapshotConfig []UpdateExistingArchivalSnapshotConfig `json:"updateExistingSnapshotConfig,omitempty"`
}

// NewUpdateArchivalSnapshotConfig instantiates a new UpdateArchivalSnapshotConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateArchivalSnapshotConfig() *UpdateArchivalSnapshotConfig {
	this := UpdateArchivalSnapshotConfig{}
	return &this
}

// NewUpdateArchivalSnapshotConfigWithDefaults instantiates a new UpdateArchivalSnapshotConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateArchivalSnapshotConfigWithDefaults() *UpdateArchivalSnapshotConfig {
	this := UpdateArchivalSnapshotConfig{}
	return &this
}

// GetNewSnapshotConfig returns the NewSnapshotConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateArchivalSnapshotConfig) GetNewSnapshotConfig() []RunArchivalConfig {
	if o == nil {
		var ret []RunArchivalConfig
		return ret
	}
	return o.NewSnapshotConfig
}

// GetNewSnapshotConfigOk returns a tuple with the NewSnapshotConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateArchivalSnapshotConfig) GetNewSnapshotConfigOk() ([]RunArchivalConfig, bool) {
	if o == nil || IsNil(o.NewSnapshotConfig) {
		return nil, false
	}
	return o.NewSnapshotConfig, true
}

// HasNewSnapshotConfig returns a boolean if a field has been set.
func (o *UpdateArchivalSnapshotConfig) HasNewSnapshotConfig() bool {
	if o != nil && !IsNil(o.NewSnapshotConfig) {
		return true
	}

	return false
}

// SetNewSnapshotConfig gets a reference to the given []RunArchivalConfig and assigns it to the NewSnapshotConfig field.
func (o *UpdateArchivalSnapshotConfig) SetNewSnapshotConfig(v []RunArchivalConfig) {
	o.NewSnapshotConfig = v
}

// GetUpdateExistingSnapshotConfig returns the UpdateExistingSnapshotConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateArchivalSnapshotConfig) GetUpdateExistingSnapshotConfig() []UpdateExistingArchivalSnapshotConfig {
	if o == nil {
		var ret []UpdateExistingArchivalSnapshotConfig
		return ret
	}
	return o.UpdateExistingSnapshotConfig
}

// GetUpdateExistingSnapshotConfigOk returns a tuple with the UpdateExistingSnapshotConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateArchivalSnapshotConfig) GetUpdateExistingSnapshotConfigOk() ([]UpdateExistingArchivalSnapshotConfig, bool) {
	if o == nil || IsNil(o.UpdateExistingSnapshotConfig) {
		return nil, false
	}
	return o.UpdateExistingSnapshotConfig, true
}

// HasUpdateExistingSnapshotConfig returns a boolean if a field has been set.
func (o *UpdateArchivalSnapshotConfig) HasUpdateExistingSnapshotConfig() bool {
	if o != nil && !IsNil(o.UpdateExistingSnapshotConfig) {
		return true
	}

	return false
}

// SetUpdateExistingSnapshotConfig gets a reference to the given []UpdateExistingArchivalSnapshotConfig and assigns it to the UpdateExistingSnapshotConfig field.
func (o *UpdateArchivalSnapshotConfig) SetUpdateExistingSnapshotConfig(v []UpdateExistingArchivalSnapshotConfig) {
	o.UpdateExistingSnapshotConfig = v
}

func (o UpdateArchivalSnapshotConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateArchivalSnapshotConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NewSnapshotConfig != nil {
		toSerialize["newSnapshotConfig"] = o.NewSnapshotConfig
	}
	if o.UpdateExistingSnapshotConfig != nil {
		toSerialize["updateExistingSnapshotConfig"] = o.UpdateExistingSnapshotConfig
	}
	return toSerialize, nil
}

type NullableUpdateArchivalSnapshotConfig struct {
	value *UpdateArchivalSnapshotConfig
	isSet bool
}

func (v NullableUpdateArchivalSnapshotConfig) Get() *UpdateArchivalSnapshotConfig {
	return v.value
}

func (v *NullableUpdateArchivalSnapshotConfig) Set(val *UpdateArchivalSnapshotConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateArchivalSnapshotConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateArchivalSnapshotConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateArchivalSnapshotConfig(val *UpdateArchivalSnapshotConfig) *NullableUpdateArchivalSnapshotConfig {
	return &NullableUpdateArchivalSnapshotConfig{value: val, isSet: true}
}

func (v NullableUpdateArchivalSnapshotConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateArchivalSnapshotConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


