/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the CreateUserParametersLocalUserParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserParametersLocalUserParams{}

// CreateUserParametersLocalUserParams Specifies the LOCAL user properties. This field is required when adding a new LOCAL Cohesity User.
type CreateUserParametersLocalUserParams struct {
	// Specifies the email address of the User.
	Email NullableString `json:"email,omitempty"`
	// Specifies additional groups the User may belong to.
	Groups []string `json:"groups,omitempty"`
	// Specifies the password of the User.
	Password NullableString `json:"password,omitempty"`
	// Specifies the primary group of the User. Primary group is used for file access.
	PrimaryGroup NullableString `json:"primaryGroup,omitempty"`
}

// NewCreateUserParametersLocalUserParams instantiates a new CreateUserParametersLocalUserParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserParametersLocalUserParams() *CreateUserParametersLocalUserParams {
	this := CreateUserParametersLocalUserParams{}
	return &this
}

// NewCreateUserParametersLocalUserParamsWithDefaults instantiates a new CreateUserParametersLocalUserParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserParametersLocalUserParamsWithDefaults() *CreateUserParametersLocalUserParams {
	this := CreateUserParametersLocalUserParams{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParametersLocalUserParams) GetEmail() string {
	if o == nil || IsNil(o.Email.Get()) {
		var ret string
		return ret
	}
	return *o.Email.Get()
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParametersLocalUserParams) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Email.Get(), o.Email.IsSet()
}

// HasEmail returns a boolean if a field has been set.
func (o *CreateUserParametersLocalUserParams) HasEmail() bool {
	if o != nil && o.Email.IsSet() {
		return true
	}

	return false
}

// SetEmail gets a reference to the given NullableString and assigns it to the Email field.
func (o *CreateUserParametersLocalUserParams) SetEmail(v string) {
	o.Email.Set(&v)
}
// SetEmailNil sets the value for Email to be an explicit nil
func (o *CreateUserParametersLocalUserParams) SetEmailNil() {
	o.Email.Set(nil)
}

// UnsetEmail ensures that no value is present for Email, not even an explicit nil
func (o *CreateUserParametersLocalUserParams) UnsetEmail() {
	o.Email.Unset()
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *CreateUserParametersLocalUserParams) GetGroups() []string {
	if o == nil || IsNil(o.Groups) {
		var ret []string
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserParametersLocalUserParams) GetGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *CreateUserParametersLocalUserParams) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []string and assigns it to the Groups field.
func (o *CreateUserParametersLocalUserParams) SetGroups(v []string) {
	o.Groups = v
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParametersLocalUserParams) GetPassword() string {
	if o == nil || IsNil(o.Password.Get()) {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParametersLocalUserParams) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateUserParametersLocalUserParams) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *CreateUserParametersLocalUserParams) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *CreateUserParametersLocalUserParams) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *CreateUserParametersLocalUserParams) UnsetPassword() {
	o.Password.Unset()
}

// GetPrimaryGroup returns the PrimaryGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParametersLocalUserParams) GetPrimaryGroup() string {
	if o == nil || IsNil(o.PrimaryGroup.Get()) {
		var ret string
		return ret
	}
	return *o.PrimaryGroup.Get()
}

// GetPrimaryGroupOk returns a tuple with the PrimaryGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParametersLocalUserParams) GetPrimaryGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryGroup.Get(), o.PrimaryGroup.IsSet()
}

// HasPrimaryGroup returns a boolean if a field has been set.
func (o *CreateUserParametersLocalUserParams) HasPrimaryGroup() bool {
	if o != nil && o.PrimaryGroup.IsSet() {
		return true
	}

	return false
}

// SetPrimaryGroup gets a reference to the given NullableString and assigns it to the PrimaryGroup field.
func (o *CreateUserParametersLocalUserParams) SetPrimaryGroup(v string) {
	o.PrimaryGroup.Set(&v)
}
// SetPrimaryGroupNil sets the value for PrimaryGroup to be an explicit nil
func (o *CreateUserParametersLocalUserParams) SetPrimaryGroupNil() {
	o.PrimaryGroup.Set(nil)
}

// UnsetPrimaryGroup ensures that no value is present for PrimaryGroup, not even an explicit nil
func (o *CreateUserParametersLocalUserParams) UnsetPrimaryGroup() {
	o.PrimaryGroup.Unset()
}

func (o CreateUserParametersLocalUserParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserParametersLocalUserParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Email.IsSet() {
		toSerialize["email"] = o.Email.Get()
	}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.PrimaryGroup.IsSet() {
		toSerialize["primaryGroup"] = o.PrimaryGroup.Get()
	}
	return toSerialize, nil
}

type NullableCreateUserParametersLocalUserParams struct {
	value *CreateUserParametersLocalUserParams
	isSet bool
}

func (v NullableCreateUserParametersLocalUserParams) Get() *CreateUserParametersLocalUserParams {
	return v.value
}

func (v *NullableCreateUserParametersLocalUserParams) Set(val *CreateUserParametersLocalUserParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserParametersLocalUserParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserParametersLocalUserParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserParametersLocalUserParams(val *CreateUserParametersLocalUserParams) *NullableCreateUserParametersLocalUserParams {
	return &NullableCreateUserParametersLocalUserParams{value: val, isSet: true}
}

func (v NullableCreateUserParametersLocalUserParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserParametersLocalUserParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


