/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the S3LifecycleManagement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3LifecycleManagement{}

// S3LifecycleManagement Specifies the S3 Lifecycle policy of the bucket. If not specified no Lifecycle management is performed for objects in this bucket.
type S3LifecycleManagement struct {
	// Specifies Lifecycle configuration rules for an Amazon S3 bucket. A maximum of 1000 rules can be specified.
	Rules []LifecycleRule `json:"rules,omitempty"`
	// Specifies a unique monotonically increasing version for the lifecycle configuration.
	VersionId NullableInt64 `json:"versionId,omitempty"`
}

// NewS3LifecycleManagement instantiates a new S3LifecycleManagement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3LifecycleManagement() *S3LifecycleManagement {
	this := S3LifecycleManagement{}
	return &this
}

// NewS3LifecycleManagementWithDefaults instantiates a new S3LifecycleManagement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3LifecycleManagementWithDefaults() *S3LifecycleManagement {
	this := S3LifecycleManagement{}
	return &this
}

// GetRules returns the Rules field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3LifecycleManagement) GetRules() []LifecycleRule {
	if o == nil {
		var ret []LifecycleRule
		return ret
	}
	return o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3LifecycleManagement) GetRulesOk() ([]LifecycleRule, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *S3LifecycleManagement) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given []LifecycleRule and assigns it to the Rules field.
func (o *S3LifecycleManagement) SetRules(v []LifecycleRule) {
	o.Rules = v
}

// GetVersionId returns the VersionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3LifecycleManagement) GetVersionId() int64 {
	if o == nil || IsNil(o.VersionId.Get()) {
		var ret int64
		return ret
	}
	return *o.VersionId.Get()
}

// GetVersionIdOk returns a tuple with the VersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3LifecycleManagement) GetVersionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionId.Get(), o.VersionId.IsSet()
}

// HasVersionId returns a boolean if a field has been set.
func (o *S3LifecycleManagement) HasVersionId() bool {
	if o != nil && o.VersionId.IsSet() {
		return true
	}

	return false
}

// SetVersionId gets a reference to the given NullableInt64 and assigns it to the VersionId field.
func (o *S3LifecycleManagement) SetVersionId(v int64) {
	o.VersionId.Set(&v)
}
// SetVersionIdNil sets the value for VersionId to be an explicit nil
func (o *S3LifecycleManagement) SetVersionIdNil() {
	o.VersionId.Set(nil)
}

// UnsetVersionId ensures that no value is present for VersionId, not even an explicit nil
func (o *S3LifecycleManagement) UnsetVersionId() {
	o.VersionId.Unset()
}

func (o S3LifecycleManagement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3LifecycleManagement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Rules != nil {
		toSerialize["rules"] = o.Rules
	}
	if o.VersionId.IsSet() {
		toSerialize["versionId"] = o.VersionId.Get()
	}
	return toSerialize, nil
}

type NullableS3LifecycleManagement struct {
	value *S3LifecycleManagement
	isSet bool
}

func (v NullableS3LifecycleManagement) Get() *S3LifecycleManagement {
	return v.value
}

func (v *NullableS3LifecycleManagement) Set(val *S3LifecycleManagement) {
	v.value = val
	v.isSet = true
}

func (v NullableS3LifecycleManagement) IsSet() bool {
	return v.isSet
}

func (v *NullableS3LifecycleManagement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3LifecycleManagement(val *S3LifecycleManagement) *NullableS3LifecycleManagement {
	return &NullableS3LifecycleManagement{value: val, isSet: true}
}

func (v NullableS3LifecycleManagement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3LifecycleManagement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


