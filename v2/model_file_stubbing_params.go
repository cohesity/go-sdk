/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FileStubbingParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileStubbingParams{}

// FileStubbingParams File stubbing params
type FileStubbingParams struct {
	// Specifies whether to remove the orphan data from the target if the symlink is removed from the source.
	AutoOrphanDataCleanup NullableBool `json:"autoOrphanDataCleanup,omitempty"`
	DowntieringFileAge *DowntieringFileAgePolicy `json:"downtieringFileAge,omitempty"`
	// Specifies whether to create a symlink for the migrated data from source to target.
	SkipBackSymlink NullableBool `json:"skipBackSymlink,omitempty"`
}

// NewFileStubbingParams instantiates a new FileStubbingParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileStubbingParams() *FileStubbingParams {
	this := FileStubbingParams{}
	var autoOrphanDataCleanup bool = true
	this.AutoOrphanDataCleanup = *NewNullableBool(&autoOrphanDataCleanup)
	var skipBackSymlink bool = true
	this.SkipBackSymlink = *NewNullableBool(&skipBackSymlink)
	return &this
}

// NewFileStubbingParamsWithDefaults instantiates a new FileStubbingParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileStubbingParamsWithDefaults() *FileStubbingParams {
	this := FileStubbingParams{}
	var autoOrphanDataCleanup bool = true
	this.AutoOrphanDataCleanup = *NewNullableBool(&autoOrphanDataCleanup)
	var skipBackSymlink bool = true
	this.SkipBackSymlink = *NewNullableBool(&skipBackSymlink)
	return &this
}

// GetAutoOrphanDataCleanup returns the AutoOrphanDataCleanup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStubbingParams) GetAutoOrphanDataCleanup() bool {
	if o == nil || IsNil(o.AutoOrphanDataCleanup.Get()) {
		var ret bool
		return ret
	}
	return *o.AutoOrphanDataCleanup.Get()
}

// GetAutoOrphanDataCleanupOk returns a tuple with the AutoOrphanDataCleanup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStubbingParams) GetAutoOrphanDataCleanupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AutoOrphanDataCleanup.Get(), o.AutoOrphanDataCleanup.IsSet()
}

// HasAutoOrphanDataCleanup returns a boolean if a field has been set.
func (o *FileStubbingParams) HasAutoOrphanDataCleanup() bool {
	if o != nil && o.AutoOrphanDataCleanup.IsSet() {
		return true
	}

	return false
}

// SetAutoOrphanDataCleanup gets a reference to the given NullableBool and assigns it to the AutoOrphanDataCleanup field.
func (o *FileStubbingParams) SetAutoOrphanDataCleanup(v bool) {
	o.AutoOrphanDataCleanup.Set(&v)
}
// SetAutoOrphanDataCleanupNil sets the value for AutoOrphanDataCleanup to be an explicit nil
func (o *FileStubbingParams) SetAutoOrphanDataCleanupNil() {
	o.AutoOrphanDataCleanup.Set(nil)
}

// UnsetAutoOrphanDataCleanup ensures that no value is present for AutoOrphanDataCleanup, not even an explicit nil
func (o *FileStubbingParams) UnsetAutoOrphanDataCleanup() {
	o.AutoOrphanDataCleanup.Unset()
}

// GetDowntieringFileAge returns the DowntieringFileAge field value if set, zero value otherwise.
func (o *FileStubbingParams) GetDowntieringFileAge() DowntieringFileAgePolicy {
	if o == nil || IsNil(o.DowntieringFileAge) {
		var ret DowntieringFileAgePolicy
		return ret
	}
	return *o.DowntieringFileAge
}

// GetDowntieringFileAgeOk returns a tuple with the DowntieringFileAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileStubbingParams) GetDowntieringFileAgeOk() (*DowntieringFileAgePolicy, bool) {
	if o == nil || IsNil(o.DowntieringFileAge) {
		return nil, false
	}
	return o.DowntieringFileAge, true
}

// HasDowntieringFileAge returns a boolean if a field has been set.
func (o *FileStubbingParams) HasDowntieringFileAge() bool {
	if o != nil && !IsNil(o.DowntieringFileAge) {
		return true
	}

	return false
}

// SetDowntieringFileAge gets a reference to the given DowntieringFileAgePolicy and assigns it to the DowntieringFileAge field.
func (o *FileStubbingParams) SetDowntieringFileAge(v DowntieringFileAgePolicy) {
	o.DowntieringFileAge = &v
}

// GetSkipBackSymlink returns the SkipBackSymlink field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStubbingParams) GetSkipBackSymlink() bool {
	if o == nil || IsNil(o.SkipBackSymlink.Get()) {
		var ret bool
		return ret
	}
	return *o.SkipBackSymlink.Get()
}

// GetSkipBackSymlinkOk returns a tuple with the SkipBackSymlink field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStubbingParams) GetSkipBackSymlinkOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipBackSymlink.Get(), o.SkipBackSymlink.IsSet()
}

// HasSkipBackSymlink returns a boolean if a field has been set.
func (o *FileStubbingParams) HasSkipBackSymlink() bool {
	if o != nil && o.SkipBackSymlink.IsSet() {
		return true
	}

	return false
}

// SetSkipBackSymlink gets a reference to the given NullableBool and assigns it to the SkipBackSymlink field.
func (o *FileStubbingParams) SetSkipBackSymlink(v bool) {
	o.SkipBackSymlink.Set(&v)
}
// SetSkipBackSymlinkNil sets the value for SkipBackSymlink to be an explicit nil
func (o *FileStubbingParams) SetSkipBackSymlinkNil() {
	o.SkipBackSymlink.Set(nil)
}

// UnsetSkipBackSymlink ensures that no value is present for SkipBackSymlink, not even an explicit nil
func (o *FileStubbingParams) UnsetSkipBackSymlink() {
	o.SkipBackSymlink.Unset()
}

func (o FileStubbingParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileStubbingParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AutoOrphanDataCleanup.IsSet() {
		toSerialize["autoOrphanDataCleanup"] = o.AutoOrphanDataCleanup.Get()
	}
	if !IsNil(o.DowntieringFileAge) {
		toSerialize["downtieringFileAge"] = o.DowntieringFileAge
	}
	if o.SkipBackSymlink.IsSet() {
		toSerialize["skipBackSymlink"] = o.SkipBackSymlink.Get()
	}
	return toSerialize, nil
}

type NullableFileStubbingParams struct {
	value *FileStubbingParams
	isSet bool
}

func (v NullableFileStubbingParams) Get() *FileStubbingParams {
	return v.value
}

func (v *NullableFileStubbingParams) Set(val *FileStubbingParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStubbingParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStubbingParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStubbingParams(val *FileStubbingParams) *NullableFileStubbingParams {
	return &NullableFileStubbingParams{value: val, isSet: true}
}

func (v NullableFileStubbingParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStubbingParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


