/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BifrostConnector type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BifrostConnector{}

// BifrostConnector Specify a Bifrost connector.
type BifrostConnector struct {
	// Specifies the cohesity side ip of the connector
	CohesitySideIp NullableString `json:"cohesitySideIp,omitempty"`
	// Specifies the Id of the connection which this connector belongs to.
	ConnectionId NullableInt64 `json:"connectionId"`
	ConnectionStatus *ConnectorConnectionInfo `json:"connectionStatus,omitempty"`
	// Specifies the connector's software Version
	HyxVersion NullableString `json:"hyxVersion,omitempty"`
	// Specifies the id of the connector.
	Id NullableString `json:"id"`
	// Specifies the name of the connector.
	Name NullableString `json:"name,omitempty"`
	// Specifies the tenant source side ip of the connector
	TenantSourceSideIp NullableString `json:"tenantSourceSideIp,omitempty"`
}

type _BifrostConnector BifrostConnector

// NewBifrostConnector instantiates a new BifrostConnector object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBifrostConnector(connectionId NullableInt64, id NullableString) *BifrostConnector {
	this := BifrostConnector{}
	this.ConnectionId = connectionId
	this.Id = id
	return &this
}

// NewBifrostConnectorWithDefaults instantiates a new BifrostConnector object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBifrostConnectorWithDefaults() *BifrostConnector {
	this := BifrostConnector{}
	return &this
}

// GetCohesitySideIp returns the CohesitySideIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BifrostConnector) GetCohesitySideIp() string {
	if o == nil || IsNil(o.CohesitySideIp.Get()) {
		var ret string
		return ret
	}
	return *o.CohesitySideIp.Get()
}

// GetCohesitySideIpOk returns a tuple with the CohesitySideIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnector) GetCohesitySideIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CohesitySideIp.Get(), o.CohesitySideIp.IsSet()
}

// HasCohesitySideIp returns a boolean if a field has been set.
func (o *BifrostConnector) HasCohesitySideIp() bool {
	if o != nil && o.CohesitySideIp.IsSet() {
		return true
	}

	return false
}

// SetCohesitySideIp gets a reference to the given NullableString and assigns it to the CohesitySideIp field.
func (o *BifrostConnector) SetCohesitySideIp(v string) {
	o.CohesitySideIp.Set(&v)
}
// SetCohesitySideIpNil sets the value for CohesitySideIp to be an explicit nil
func (o *BifrostConnector) SetCohesitySideIpNil() {
	o.CohesitySideIp.Set(nil)
}

// UnsetCohesitySideIp ensures that no value is present for CohesitySideIp, not even an explicit nil
func (o *BifrostConnector) UnsetCohesitySideIp() {
	o.CohesitySideIp.Unset()
}

// GetConnectionId returns the ConnectionId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *BifrostConnector) GetConnectionId() int64 {
	if o == nil || o.ConnectionId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnector) GetConnectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// SetConnectionId sets field value
func (o *BifrostConnector) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise.
func (o *BifrostConnector) GetConnectionStatus() ConnectorConnectionInfo {
	if o == nil || IsNil(o.ConnectionStatus) {
		var ret ConnectorConnectionInfo
		return ret
	}
	return *o.ConnectionStatus
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BifrostConnector) GetConnectionStatusOk() (*ConnectorConnectionInfo, bool) {
	if o == nil || IsNil(o.ConnectionStatus) {
		return nil, false
	}
	return o.ConnectionStatus, true
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *BifrostConnector) HasConnectionStatus() bool {
	if o != nil && !IsNil(o.ConnectionStatus) {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given ConnectorConnectionInfo and assigns it to the ConnectionStatus field.
func (o *BifrostConnector) SetConnectionStatus(v ConnectorConnectionInfo) {
	o.ConnectionStatus = &v
}

// GetHyxVersion returns the HyxVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BifrostConnector) GetHyxVersion() string {
	if o == nil || IsNil(o.HyxVersion.Get()) {
		var ret string
		return ret
	}
	return *o.HyxVersion.Get()
}

// GetHyxVersionOk returns a tuple with the HyxVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnector) GetHyxVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HyxVersion.Get(), o.HyxVersion.IsSet()
}

// HasHyxVersion returns a boolean if a field has been set.
func (o *BifrostConnector) HasHyxVersion() bool {
	if o != nil && o.HyxVersion.IsSet() {
		return true
	}

	return false
}

// SetHyxVersion gets a reference to the given NullableString and assigns it to the HyxVersion field.
func (o *BifrostConnector) SetHyxVersion(v string) {
	o.HyxVersion.Set(&v)
}
// SetHyxVersionNil sets the value for HyxVersion to be an explicit nil
func (o *BifrostConnector) SetHyxVersionNil() {
	o.HyxVersion.Set(nil)
}

// UnsetHyxVersion ensures that no value is present for HyxVersion, not even an explicit nil
func (o *BifrostConnector) UnsetHyxVersion() {
	o.HyxVersion.Unset()
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *BifrostConnector) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnector) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *BifrostConnector) SetId(v string) {
	o.Id.Set(&v)
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BifrostConnector) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnector) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BifrostConnector) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BifrostConnector) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *BifrostConnector) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BifrostConnector) UnsetName() {
	o.Name.Unset()
}

// GetTenantSourceSideIp returns the TenantSourceSideIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BifrostConnector) GetTenantSourceSideIp() string {
	if o == nil || IsNil(o.TenantSourceSideIp.Get()) {
		var ret string
		return ret
	}
	return *o.TenantSourceSideIp.Get()
}

// GetTenantSourceSideIpOk returns a tuple with the TenantSourceSideIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnector) GetTenantSourceSideIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantSourceSideIp.Get(), o.TenantSourceSideIp.IsSet()
}

// HasTenantSourceSideIp returns a boolean if a field has been set.
func (o *BifrostConnector) HasTenantSourceSideIp() bool {
	if o != nil && o.TenantSourceSideIp.IsSet() {
		return true
	}

	return false
}

// SetTenantSourceSideIp gets a reference to the given NullableString and assigns it to the TenantSourceSideIp field.
func (o *BifrostConnector) SetTenantSourceSideIp(v string) {
	o.TenantSourceSideIp.Set(&v)
}
// SetTenantSourceSideIpNil sets the value for TenantSourceSideIp to be an explicit nil
func (o *BifrostConnector) SetTenantSourceSideIpNil() {
	o.TenantSourceSideIp.Set(nil)
}

// UnsetTenantSourceSideIp ensures that no value is present for TenantSourceSideIp, not even an explicit nil
func (o *BifrostConnector) UnsetTenantSourceSideIp() {
	o.TenantSourceSideIp.Unset()
}

func (o BifrostConnector) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BifrostConnector) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CohesitySideIp.IsSet() {
		toSerialize["cohesitySideIp"] = o.CohesitySideIp.Get()
	}
	toSerialize["connectionId"] = o.ConnectionId.Get()
	if !IsNil(o.ConnectionStatus) {
		toSerialize["connectionStatus"] = o.ConnectionStatus
	}
	if o.HyxVersion.IsSet() {
		toSerialize["hyxVersion"] = o.HyxVersion.Get()
	}
	toSerialize["id"] = o.Id.Get()
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.TenantSourceSideIp.IsSet() {
		toSerialize["tenantSourceSideIp"] = o.TenantSourceSideIp.Get()
	}
	return toSerialize, nil
}

func (o *BifrostConnector) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectionId",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBifrostConnector := _BifrostConnector{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBifrostConnector)

	if err != nil {
		return err
	}

	*o = BifrostConnector(varBifrostConnector)

	return err
}

type NullableBifrostConnector struct {
	value *BifrostConnector
	isSet bool
}

func (v NullableBifrostConnector) Get() *BifrostConnector {
	return v.value
}

func (v *NullableBifrostConnector) Set(val *BifrostConnector) {
	v.value = val
	v.isSet = true
}

func (v NullableBifrostConnector) IsSet() bool {
	return v.isSet
}

func (v *NullableBifrostConnector) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBifrostConnector(val *BifrostConnector) *NullableBifrostConnector {
	return &NullableBifrostConnector{value: val, isSet: true}
}

func (v NullableBifrostConnector) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBifrostConnector) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


