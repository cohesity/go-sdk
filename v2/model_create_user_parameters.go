/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CreateUserParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateUserParameters{}

// CreateUserParameters Specifies the parameters to create a new Cohesity User.
type CreateUserParameters struct {
	S3AccessKeys *CreateUserParametersS3AccessKeys `json:"S3AccessKeys,omitempty"`
	// Specifies whether the SMB access token is to be set for the user.
	AllowSmbAccessToken NullableBool `json:"allowSmbAccessToken,omitempty"`
	// Specifies the description of the User.
	Description NullableString `json:"description,omitempty"`
	// Specifies the domain of the user. For active directories, this is the fully qualified domain name (FQDN). It is 'LOCAL' for local users on the Cohesity Cluster. A user is uniquely identified by combination of the username and the domain.
	Domain string `json:"domain"`
	// Specifies the epoch time in milliseconds since when the user can login.
	EffectiveTimeMsecs NullableInt64 `json:"effectiveTimeMsecs,omitempty"`
	// Specifies the epoch time in milliseconds when the user expires. Post expiry the user cannot access Cohesity cluster.
	ExpiryTimeMsecs NullableInt64 `json:"expiryTimeMsecs,omitempty"`
	LocalUserParams *CreateUserParametersLocalUserParams `json:"localUserParams,omitempty"`
	// Specifies whether the User is locked.
	Locked NullableBool `json:"locked,omitempty"`
	// Specifies additional groups the User may belong to.
	OtherGroups []string `json:"otherGroups,omitempty"`
	// Specifies the primary group of the User. Primary group is used for file access.
	PrimaryGroup NullableString `json:"primaryGroup,omitempty"`
	// Specifies whether the User is restricted. A restricted user can only view & manage the objects it has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Specifies the Cohesity roles to associate with the user. The Cohesity roles determine privileges on the Cohesity Cluster for this user.
	Roles []string `json:"roles,omitempty"`
	// Specifies the username.
	Username string `json:"username"`
}

type _CreateUserParameters CreateUserParameters

// NewCreateUserParameters instantiates a new CreateUserParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserParameters(domain string, username string) *CreateUserParameters {
	this := CreateUserParameters{}
	this.Domain = domain
	this.Username = username
	return &this
}

// NewCreateUserParametersWithDefaults instantiates a new CreateUserParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserParametersWithDefaults() *CreateUserParameters {
	this := CreateUserParameters{}
	return &this
}

// GetS3AccessKeys returns the S3AccessKeys field value if set, zero value otherwise.
func (o *CreateUserParameters) GetS3AccessKeys() CreateUserParametersS3AccessKeys {
	if o == nil || IsNil(o.S3AccessKeys) {
		var ret CreateUserParametersS3AccessKeys
		return ret
	}
	return *o.S3AccessKeys
}

// GetS3AccessKeysOk returns a tuple with the S3AccessKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserParameters) GetS3AccessKeysOk() (*CreateUserParametersS3AccessKeys, bool) {
	if o == nil || IsNil(o.S3AccessKeys) {
		return nil, false
	}
	return o.S3AccessKeys, true
}

// HasS3AccessKeys returns a boolean if a field has been set.
func (o *CreateUserParameters) HasS3AccessKeys() bool {
	if o != nil && !IsNil(o.S3AccessKeys) {
		return true
	}

	return false
}

// SetS3AccessKeys gets a reference to the given CreateUserParametersS3AccessKeys and assigns it to the S3AccessKeys field.
func (o *CreateUserParameters) SetS3AccessKeys(v CreateUserParametersS3AccessKeys) {
	o.S3AccessKeys = &v
}

// GetAllowSmbAccessToken returns the AllowSmbAccessToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParameters) GetAllowSmbAccessToken() bool {
	if o == nil || IsNil(o.AllowSmbAccessToken.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowSmbAccessToken.Get()
}

// GetAllowSmbAccessTokenOk returns a tuple with the AllowSmbAccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParameters) GetAllowSmbAccessTokenOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowSmbAccessToken.Get(), o.AllowSmbAccessToken.IsSet()
}

// HasAllowSmbAccessToken returns a boolean if a field has been set.
func (o *CreateUserParameters) HasAllowSmbAccessToken() bool {
	if o != nil && o.AllowSmbAccessToken.IsSet() {
		return true
	}

	return false
}

// SetAllowSmbAccessToken gets a reference to the given NullableBool and assigns it to the AllowSmbAccessToken field.
func (o *CreateUserParameters) SetAllowSmbAccessToken(v bool) {
	o.AllowSmbAccessToken.Set(&v)
}
// SetAllowSmbAccessTokenNil sets the value for AllowSmbAccessToken to be an explicit nil
func (o *CreateUserParameters) SetAllowSmbAccessTokenNil() {
	o.AllowSmbAccessToken.Set(nil)
}

// UnsetAllowSmbAccessToken ensures that no value is present for AllowSmbAccessToken, not even an explicit nil
func (o *CreateUserParameters) UnsetAllowSmbAccessToken() {
	o.AllowSmbAccessToken.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParameters) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParameters) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CreateUserParameters) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CreateUserParameters) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CreateUserParameters) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CreateUserParameters) UnsetDescription() {
	o.Description.Unset()
}

// GetDomain returns the Domain field value
func (o *CreateUserParameters) GetDomain() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Domain
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
func (o *CreateUserParameters) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Domain, true
}

// SetDomain sets field value
func (o *CreateUserParameters) SetDomain(v string) {
	o.Domain = v
}

// GetEffectiveTimeMsecs returns the EffectiveTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParameters) GetEffectiveTimeMsecs() int64 {
	if o == nil || IsNil(o.EffectiveTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.EffectiveTimeMsecs.Get()
}

// GetEffectiveTimeMsecsOk returns a tuple with the EffectiveTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParameters) GetEffectiveTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EffectiveTimeMsecs.Get(), o.EffectiveTimeMsecs.IsSet()
}

// HasEffectiveTimeMsecs returns a boolean if a field has been set.
func (o *CreateUserParameters) HasEffectiveTimeMsecs() bool {
	if o != nil && o.EffectiveTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetEffectiveTimeMsecs gets a reference to the given NullableInt64 and assigns it to the EffectiveTimeMsecs field.
func (o *CreateUserParameters) SetEffectiveTimeMsecs(v int64) {
	o.EffectiveTimeMsecs.Set(&v)
}
// SetEffectiveTimeMsecsNil sets the value for EffectiveTimeMsecs to be an explicit nil
func (o *CreateUserParameters) SetEffectiveTimeMsecsNil() {
	o.EffectiveTimeMsecs.Set(nil)
}

// UnsetEffectiveTimeMsecs ensures that no value is present for EffectiveTimeMsecs, not even an explicit nil
func (o *CreateUserParameters) UnsetEffectiveTimeMsecs() {
	o.EffectiveTimeMsecs.Unset()
}

// GetExpiryTimeMsecs returns the ExpiryTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParameters) GetExpiryTimeMsecs() int64 {
	if o == nil || IsNil(o.ExpiryTimeMsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.ExpiryTimeMsecs.Get()
}

// GetExpiryTimeMsecsOk returns a tuple with the ExpiryTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParameters) GetExpiryTimeMsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExpiryTimeMsecs.Get(), o.ExpiryTimeMsecs.IsSet()
}

// HasExpiryTimeMsecs returns a boolean if a field has been set.
func (o *CreateUserParameters) HasExpiryTimeMsecs() bool {
	if o != nil && o.ExpiryTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ExpiryTimeMsecs field.
func (o *CreateUserParameters) SetExpiryTimeMsecs(v int64) {
	o.ExpiryTimeMsecs.Set(&v)
}
// SetExpiryTimeMsecsNil sets the value for ExpiryTimeMsecs to be an explicit nil
func (o *CreateUserParameters) SetExpiryTimeMsecsNil() {
	o.ExpiryTimeMsecs.Set(nil)
}

// UnsetExpiryTimeMsecs ensures that no value is present for ExpiryTimeMsecs, not even an explicit nil
func (o *CreateUserParameters) UnsetExpiryTimeMsecs() {
	o.ExpiryTimeMsecs.Unset()
}

// GetLocalUserParams returns the LocalUserParams field value if set, zero value otherwise.
func (o *CreateUserParameters) GetLocalUserParams() CreateUserParametersLocalUserParams {
	if o == nil || IsNil(o.LocalUserParams) {
		var ret CreateUserParametersLocalUserParams
		return ret
	}
	return *o.LocalUserParams
}

// GetLocalUserParamsOk returns a tuple with the LocalUserParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserParameters) GetLocalUserParamsOk() (*CreateUserParametersLocalUserParams, bool) {
	if o == nil || IsNil(o.LocalUserParams) {
		return nil, false
	}
	return o.LocalUserParams, true
}

// HasLocalUserParams returns a boolean if a field has been set.
func (o *CreateUserParameters) HasLocalUserParams() bool {
	if o != nil && !IsNil(o.LocalUserParams) {
		return true
	}

	return false
}

// SetLocalUserParams gets a reference to the given CreateUserParametersLocalUserParams and assigns it to the LocalUserParams field.
func (o *CreateUserParameters) SetLocalUserParams(v CreateUserParametersLocalUserParams) {
	o.LocalUserParams = &v
}

// GetLocked returns the Locked field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParameters) GetLocked() bool {
	if o == nil || IsNil(o.Locked.Get()) {
		var ret bool
		return ret
	}
	return *o.Locked.Get()
}

// GetLockedOk returns a tuple with the Locked field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParameters) GetLockedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locked.Get(), o.Locked.IsSet()
}

// HasLocked returns a boolean if a field has been set.
func (o *CreateUserParameters) HasLocked() bool {
	if o != nil && o.Locked.IsSet() {
		return true
	}

	return false
}

// SetLocked gets a reference to the given NullableBool and assigns it to the Locked field.
func (o *CreateUserParameters) SetLocked(v bool) {
	o.Locked.Set(&v)
}
// SetLockedNil sets the value for Locked to be an explicit nil
func (o *CreateUserParameters) SetLockedNil() {
	o.Locked.Set(nil)
}

// UnsetLocked ensures that no value is present for Locked, not even an explicit nil
func (o *CreateUserParameters) UnsetLocked() {
	o.Locked.Unset()
}

// GetOtherGroups returns the OtherGroups field value if set, zero value otherwise.
func (o *CreateUserParameters) GetOtherGroups() []string {
	if o == nil || IsNil(o.OtherGroups) {
		var ret []string
		return ret
	}
	return o.OtherGroups
}

// GetOtherGroupsOk returns a tuple with the OtherGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateUserParameters) GetOtherGroupsOk() ([]string, bool) {
	if o == nil || IsNil(o.OtherGroups) {
		return nil, false
	}
	return o.OtherGroups, true
}

// HasOtherGroups returns a boolean if a field has been set.
func (o *CreateUserParameters) HasOtherGroups() bool {
	if o != nil && !IsNil(o.OtherGroups) {
		return true
	}

	return false
}

// SetOtherGroups gets a reference to the given []string and assigns it to the OtherGroups field.
func (o *CreateUserParameters) SetOtherGroups(v []string) {
	o.OtherGroups = v
}

// GetPrimaryGroup returns the PrimaryGroup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParameters) GetPrimaryGroup() string {
	if o == nil || IsNil(o.PrimaryGroup.Get()) {
		var ret string
		return ret
	}
	return *o.PrimaryGroup.Get()
}

// GetPrimaryGroupOk returns a tuple with the PrimaryGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParameters) GetPrimaryGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryGroup.Get(), o.PrimaryGroup.IsSet()
}

// HasPrimaryGroup returns a boolean if a field has been set.
func (o *CreateUserParameters) HasPrimaryGroup() bool {
	if o != nil && o.PrimaryGroup.IsSet() {
		return true
	}

	return false
}

// SetPrimaryGroup gets a reference to the given NullableString and assigns it to the PrimaryGroup field.
func (o *CreateUserParameters) SetPrimaryGroup(v string) {
	o.PrimaryGroup.Set(&v)
}
// SetPrimaryGroupNil sets the value for PrimaryGroup to be an explicit nil
func (o *CreateUserParameters) SetPrimaryGroupNil() {
	o.PrimaryGroup.Set(nil)
}

// UnsetPrimaryGroup ensures that no value is present for PrimaryGroup, not even an explicit nil
func (o *CreateUserParameters) UnsetPrimaryGroup() {
	o.PrimaryGroup.Unset()
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParameters) GetRestricted() bool {
	if o == nil || IsNil(o.Restricted.Get()) {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParameters) GetRestrictedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *CreateUserParameters) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *CreateUserParameters) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *CreateUserParameters) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *CreateUserParameters) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserParameters) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserParameters) GetRolesOk() ([]string, bool) {
	if o == nil || IsNil(o.Roles) {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *CreateUserParameters) HasRoles() bool {
	if o != nil && !IsNil(o.Roles) {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *CreateUserParameters) SetRoles(v []string) {
	o.Roles = v
}

// GetUsername returns the Username field value
func (o *CreateUserParameters) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *CreateUserParameters) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *CreateUserParameters) SetUsername(v string) {
	o.Username = v
}

func (o CreateUserParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateUserParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.S3AccessKeys) {
		toSerialize["S3AccessKeys"] = o.S3AccessKeys
	}
	if o.AllowSmbAccessToken.IsSet() {
		toSerialize["allowSmbAccessToken"] = o.AllowSmbAccessToken.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["domain"] = o.Domain
	if o.EffectiveTimeMsecs.IsSet() {
		toSerialize["effectiveTimeMsecs"] = o.EffectiveTimeMsecs.Get()
	}
	if o.ExpiryTimeMsecs.IsSet() {
		toSerialize["expiryTimeMsecs"] = o.ExpiryTimeMsecs.Get()
	}
	if !IsNil(o.LocalUserParams) {
		toSerialize["localUserParams"] = o.LocalUserParams
	}
	if o.Locked.IsSet() {
		toSerialize["locked"] = o.Locked.Get()
	}
	if !IsNil(o.OtherGroups) {
		toSerialize["otherGroups"] = o.OtherGroups
	}
	if o.PrimaryGroup.IsSet() {
		toSerialize["primaryGroup"] = o.PrimaryGroup.Get()
	}
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	toSerialize["username"] = o.Username
	return toSerialize, nil
}

func (o *CreateUserParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"username",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCreateUserParameters := _CreateUserParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCreateUserParameters)

	if err != nil {
		return err
	}

	*o = CreateUserParameters(varCreateUserParameters)

	return err
}

type NullableCreateUserParameters struct {
	value *CreateUserParameters
	isSet bool
}

func (v NullableCreateUserParameters) Get() *CreateUserParameters {
	return v.value
}

func (v *NullableCreateUserParameters) Set(val *CreateUserParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserParameters(val *CreateUserParameters) *NullableCreateUserParameters {
	return &NullableCreateUserParameters{value: val, isSet: true}
}

func (v NullableCreateUserParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


