/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BandwidthThrottling type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BandwidthThrottling{}

// BandwidthThrottling Specifies settings for limiting the data transfer rate between the local and remote Clusters.
type BandwidthThrottling struct {
	// Specifies the maximum allowed data transfer rate between the local Cluster and remote Clusters.
	RateLimitBytesPerSec NullableInt64 `json:"RateLimitBytesPerSec,omitempty"`
	// Specifies the max rate limit at which we upload the data.
	BandwidthLimitOverrides []BandwidthThrottlingOverride `json:"bandwidthLimitOverrides,omitempty"`
	// Specifies a time zone for the specified time period.
	Timezone NullableString `json:"timezone,omitempty"`
}

// NewBandwidthThrottling instantiates a new BandwidthThrottling object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBandwidthThrottling() *BandwidthThrottling {
	this := BandwidthThrottling{}
	return &this
}

// NewBandwidthThrottlingWithDefaults instantiates a new BandwidthThrottling object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBandwidthThrottlingWithDefaults() *BandwidthThrottling {
	this := BandwidthThrottling{}
	return &this
}

// GetRateLimitBytesPerSec returns the RateLimitBytesPerSec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BandwidthThrottling) GetRateLimitBytesPerSec() int64 {
	if o == nil || IsNil(o.RateLimitBytesPerSec.Get()) {
		var ret int64
		return ret
	}
	return *o.RateLimitBytesPerSec.Get()
}

// GetRateLimitBytesPerSecOk returns a tuple with the RateLimitBytesPerSec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BandwidthThrottling) GetRateLimitBytesPerSecOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RateLimitBytesPerSec.Get(), o.RateLimitBytesPerSec.IsSet()
}

// HasRateLimitBytesPerSec returns a boolean if a field has been set.
func (o *BandwidthThrottling) HasRateLimitBytesPerSec() bool {
	if o != nil && o.RateLimitBytesPerSec.IsSet() {
		return true
	}

	return false
}

// SetRateLimitBytesPerSec gets a reference to the given NullableInt64 and assigns it to the RateLimitBytesPerSec field.
func (o *BandwidthThrottling) SetRateLimitBytesPerSec(v int64) {
	o.RateLimitBytesPerSec.Set(&v)
}
// SetRateLimitBytesPerSecNil sets the value for RateLimitBytesPerSec to be an explicit nil
func (o *BandwidthThrottling) SetRateLimitBytesPerSecNil() {
	o.RateLimitBytesPerSec.Set(nil)
}

// UnsetRateLimitBytesPerSec ensures that no value is present for RateLimitBytesPerSec, not even an explicit nil
func (o *BandwidthThrottling) UnsetRateLimitBytesPerSec() {
	o.RateLimitBytesPerSec.Unset()
}

// GetBandwidthLimitOverrides returns the BandwidthLimitOverrides field value if set, zero value otherwise.
func (o *BandwidthThrottling) GetBandwidthLimitOverrides() []BandwidthThrottlingOverride {
	if o == nil || IsNil(o.BandwidthLimitOverrides) {
		var ret []BandwidthThrottlingOverride
		return ret
	}
	return o.BandwidthLimitOverrides
}

// GetBandwidthLimitOverridesOk returns a tuple with the BandwidthLimitOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BandwidthThrottling) GetBandwidthLimitOverridesOk() ([]BandwidthThrottlingOverride, bool) {
	if o == nil || IsNil(o.BandwidthLimitOverrides) {
		return nil, false
	}
	return o.BandwidthLimitOverrides, true
}

// HasBandwidthLimitOverrides returns a boolean if a field has been set.
func (o *BandwidthThrottling) HasBandwidthLimitOverrides() bool {
	if o != nil && !IsNil(o.BandwidthLimitOverrides) {
		return true
	}

	return false
}

// SetBandwidthLimitOverrides gets a reference to the given []BandwidthThrottlingOverride and assigns it to the BandwidthLimitOverrides field.
func (o *BandwidthThrottling) SetBandwidthLimitOverrides(v []BandwidthThrottlingOverride) {
	o.BandwidthLimitOverrides = v
}

// GetTimezone returns the Timezone field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BandwidthThrottling) GetTimezone() string {
	if o == nil || IsNil(o.Timezone.Get()) {
		var ret string
		return ret
	}
	return *o.Timezone.Get()
}

// GetTimezoneOk returns a tuple with the Timezone field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BandwidthThrottling) GetTimezoneOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Timezone.Get(), o.Timezone.IsSet()
}

// HasTimezone returns a boolean if a field has been set.
func (o *BandwidthThrottling) HasTimezone() bool {
	if o != nil && o.Timezone.IsSet() {
		return true
	}

	return false
}

// SetTimezone gets a reference to the given NullableString and assigns it to the Timezone field.
func (o *BandwidthThrottling) SetTimezone(v string) {
	o.Timezone.Set(&v)
}
// SetTimezoneNil sets the value for Timezone to be an explicit nil
func (o *BandwidthThrottling) SetTimezoneNil() {
	o.Timezone.Set(nil)
}

// UnsetTimezone ensures that no value is present for Timezone, not even an explicit nil
func (o *BandwidthThrottling) UnsetTimezone() {
	o.Timezone.Unset()
}

func (o BandwidthThrottling) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BandwidthThrottling) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RateLimitBytesPerSec.IsSet() {
		toSerialize["RateLimitBytesPerSec"] = o.RateLimitBytesPerSec.Get()
	}
	if !IsNil(o.BandwidthLimitOverrides) {
		toSerialize["bandwidthLimitOverrides"] = o.BandwidthLimitOverrides
	}
	if o.Timezone.IsSet() {
		toSerialize["timezone"] = o.Timezone.Get()
	}
	return toSerialize, nil
}

type NullableBandwidthThrottling struct {
	value *BandwidthThrottling
	isSet bool
}

func (v NullableBandwidthThrottling) Get() *BandwidthThrottling {
	return v.value
}

func (v *NullableBandwidthThrottling) Set(val *BandwidthThrottling) {
	v.value = val
	v.isSet = true
}

func (v NullableBandwidthThrottling) IsSet() bool {
	return v.isSet
}

func (v *NullableBandwidthThrottling) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBandwidthThrottling(val *BandwidthThrottling) *NullableBandwidthThrottling {
	return &NullableBandwidthThrottling{value: val, isSet: true}
}

func (v NullableBandwidthThrottling) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBandwidthThrottling) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


