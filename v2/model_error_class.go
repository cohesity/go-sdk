/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ErrorClass type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorClass{}

// ErrorClass Specifies a class of error with name and count of that class.
type ErrorClass struct {
	ClassName *string `json:"className,omitempty"`
	Count NullableInt64 `json:"count,omitempty"`
}

// NewErrorClass instantiates a new ErrorClass object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorClass() *ErrorClass {
	this := ErrorClass{}
	return &this
}

// NewErrorClassWithDefaults instantiates a new ErrorClass object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorClassWithDefaults() *ErrorClass {
	this := ErrorClass{}
	return &this
}

// GetClassName returns the ClassName field value if set, zero value otherwise.
func (o *ErrorClass) GetClassName() string {
	if o == nil || IsNil(o.ClassName) {
		var ret string
		return ret
	}
	return *o.ClassName
}

// GetClassNameOk returns a tuple with the ClassName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ErrorClass) GetClassNameOk() (*string, bool) {
	if o == nil || IsNil(o.ClassName) {
		return nil, false
	}
	return o.ClassName, true
}

// HasClassName returns a boolean if a field has been set.
func (o *ErrorClass) HasClassName() bool {
	if o != nil && !IsNil(o.ClassName) {
		return true
	}

	return false
}

// SetClassName gets a reference to the given string and assigns it to the ClassName field.
func (o *ErrorClass) SetClassName(v string) {
	o.ClassName = &v
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ErrorClass) GetCount() int64 {
	if o == nil || IsNil(o.Count.Get()) {
		var ret int64
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ErrorClass) GetCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *ErrorClass) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt64 and assigns it to the Count field.
func (o *ErrorClass) SetCount(v int64) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *ErrorClass) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *ErrorClass) UnsetCount() {
	o.Count.Unset()
}

func (o ErrorClass) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorClass) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ClassName) {
		toSerialize["className"] = o.ClassName
	}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	return toSerialize, nil
}

type NullableErrorClass struct {
	value *ErrorClass
	isSet bool
}

func (v NullableErrorClass) Get() *ErrorClass {
	return v.value
}

func (v *NullableErrorClass) Set(val *ErrorClass) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorClass) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorClass) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorClass(val *ErrorClass) *NullableErrorClass {
	return &NullableErrorClass{value: val, isSet: true}
}

func (v NullableErrorClass) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorClass) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


