/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UnRegisterApplicationServersParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UnRegisterApplicationServersParams{}

// UnRegisterApplicationServersParams struct for UnRegisterApplicationServersParams
type UnRegisterApplicationServersParams struct {
	// Specifies the types of applications such as 'kSQL', 'kExchange', 'kAD' etc. running on the Protection Source.
	ApplicationEnvironments []string `json:"applicationEnvironments,omitempty"`
}

// NewUnRegisterApplicationServersParams instantiates a new UnRegisterApplicationServersParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnRegisterApplicationServersParams() *UnRegisterApplicationServersParams {
	this := UnRegisterApplicationServersParams{}
	return &this
}

// NewUnRegisterApplicationServersParamsWithDefaults instantiates a new UnRegisterApplicationServersParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnRegisterApplicationServersParamsWithDefaults() *UnRegisterApplicationServersParams {
	this := UnRegisterApplicationServersParams{}
	return &this
}

// GetApplicationEnvironments returns the ApplicationEnvironments field value if set, zero value otherwise.
func (o *UnRegisterApplicationServersParams) GetApplicationEnvironments() []string {
	if o == nil || IsNil(o.ApplicationEnvironments) {
		var ret []string
		return ret
	}
	return o.ApplicationEnvironments
}

// GetApplicationEnvironmentsOk returns a tuple with the ApplicationEnvironments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnRegisterApplicationServersParams) GetApplicationEnvironmentsOk() ([]string, bool) {
	if o == nil || IsNil(o.ApplicationEnvironments) {
		return nil, false
	}
	return o.ApplicationEnvironments, true
}

// HasApplicationEnvironments returns a boolean if a field has been set.
func (o *UnRegisterApplicationServersParams) HasApplicationEnvironments() bool {
	if o != nil && !IsNil(o.ApplicationEnvironments) {
		return true
	}

	return false
}

// SetApplicationEnvironments gets a reference to the given []string and assigns it to the ApplicationEnvironments field.
func (o *UnRegisterApplicationServersParams) SetApplicationEnvironments(v []string) {
	o.ApplicationEnvironments = v
}

func (o UnRegisterApplicationServersParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UnRegisterApplicationServersParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApplicationEnvironments) {
		toSerialize["applicationEnvironments"] = o.ApplicationEnvironments
	}
	return toSerialize, nil
}

type NullableUnRegisterApplicationServersParams struct {
	value *UnRegisterApplicationServersParams
	isSet bool
}

func (v NullableUnRegisterApplicationServersParams) Get() *UnRegisterApplicationServersParams {
	return v.value
}

func (v *NullableUnRegisterApplicationServersParams) Set(val *UnRegisterApplicationServersParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUnRegisterApplicationServersParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUnRegisterApplicationServersParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnRegisterApplicationServersParams(val *UnRegisterApplicationServersParams) *NullableUnRegisterApplicationServersParams {
	return &NullableUnRegisterApplicationServersParams{value: val, isSet: true}
}

func (v NullableUnRegisterApplicationServersParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnRegisterApplicationServersParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


