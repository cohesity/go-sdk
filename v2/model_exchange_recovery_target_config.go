/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ExchangeRecoveryTargetConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExchangeRecoveryTargetConfig{}

// ExchangeRecoveryTargetConfig Specifies the target object parameters to recover an Exchange database.
type ExchangeRecoveryTargetConfig struct {
	// Specifies the directory where to put the database data files. Missing directory will be automatically created.
	DatabaseDirectoryLocation NullableString `json:"databaseDirectoryLocation,omitempty"`
	// Specifies a new name for the restored database.
	DatabaseName NullableString `json:"databaseName,omitempty"`
	// Specifies the directory where to put the database log files. Missing directory will be automatically created.
	LogDirectoryLocation NullableString `json:"logDirectoryLocation,omitempty"`
	// Specifies whether to mount the database after successful recovery.
	MountDatabase NullableBool `json:"mountDatabase,omitempty"`
	// Specifies whether to restore the Database as Recovery database.
	RestoreAsRecoveryDB NullableBool `json:"restoreAsRecoveryDB,omitempty"`
	// Specifies whether to use the latest logs on Exchange Server to perform roll-forward recovery.
	RollForwardRecovery NullableBool `json:"rollForwardRecovery,omitempty"`
	Source NullableExchangeRecoveryTargetConfigSource `json:"source,omitempty"`
}

// NewExchangeRecoveryTargetConfig instantiates a new ExchangeRecoveryTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeRecoveryTargetConfig() *ExchangeRecoveryTargetConfig {
	this := ExchangeRecoveryTargetConfig{}
	return &this
}

// NewExchangeRecoveryTargetConfigWithDefaults instantiates a new ExchangeRecoveryTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeRecoveryTargetConfigWithDefaults() *ExchangeRecoveryTargetConfig {
	this := ExchangeRecoveryTargetConfig{}
	return &this
}

// GetDatabaseDirectoryLocation returns the DatabaseDirectoryLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeRecoveryTargetConfig) GetDatabaseDirectoryLocation() string {
	if o == nil || IsNil(o.DatabaseDirectoryLocation.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseDirectoryLocation.Get()
}

// GetDatabaseDirectoryLocationOk returns a tuple with the DatabaseDirectoryLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRecoveryTargetConfig) GetDatabaseDirectoryLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseDirectoryLocation.Get(), o.DatabaseDirectoryLocation.IsSet()
}

// HasDatabaseDirectoryLocation returns a boolean if a field has been set.
func (o *ExchangeRecoveryTargetConfig) HasDatabaseDirectoryLocation() bool {
	if o != nil && o.DatabaseDirectoryLocation.IsSet() {
		return true
	}

	return false
}

// SetDatabaseDirectoryLocation gets a reference to the given NullableString and assigns it to the DatabaseDirectoryLocation field.
func (o *ExchangeRecoveryTargetConfig) SetDatabaseDirectoryLocation(v string) {
	o.DatabaseDirectoryLocation.Set(&v)
}
// SetDatabaseDirectoryLocationNil sets the value for DatabaseDirectoryLocation to be an explicit nil
func (o *ExchangeRecoveryTargetConfig) SetDatabaseDirectoryLocationNil() {
	o.DatabaseDirectoryLocation.Set(nil)
}

// UnsetDatabaseDirectoryLocation ensures that no value is present for DatabaseDirectoryLocation, not even an explicit nil
func (o *ExchangeRecoveryTargetConfig) UnsetDatabaseDirectoryLocation() {
	o.DatabaseDirectoryLocation.Unset()
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeRecoveryTargetConfig) GetDatabaseName() string {
	if o == nil || IsNil(o.DatabaseName.Get()) {
		var ret string
		return ret
	}
	return *o.DatabaseName.Get()
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRecoveryTargetConfig) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DatabaseName.Get(), o.DatabaseName.IsSet()
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *ExchangeRecoveryTargetConfig) HasDatabaseName() bool {
	if o != nil && o.DatabaseName.IsSet() {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given NullableString and assigns it to the DatabaseName field.
func (o *ExchangeRecoveryTargetConfig) SetDatabaseName(v string) {
	o.DatabaseName.Set(&v)
}
// SetDatabaseNameNil sets the value for DatabaseName to be an explicit nil
func (o *ExchangeRecoveryTargetConfig) SetDatabaseNameNil() {
	o.DatabaseName.Set(nil)
}

// UnsetDatabaseName ensures that no value is present for DatabaseName, not even an explicit nil
func (o *ExchangeRecoveryTargetConfig) UnsetDatabaseName() {
	o.DatabaseName.Unset()
}

// GetLogDirectoryLocation returns the LogDirectoryLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeRecoveryTargetConfig) GetLogDirectoryLocation() string {
	if o == nil || IsNil(o.LogDirectoryLocation.Get()) {
		var ret string
		return ret
	}
	return *o.LogDirectoryLocation.Get()
}

// GetLogDirectoryLocationOk returns a tuple with the LogDirectoryLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRecoveryTargetConfig) GetLogDirectoryLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogDirectoryLocation.Get(), o.LogDirectoryLocation.IsSet()
}

// HasLogDirectoryLocation returns a boolean if a field has been set.
func (o *ExchangeRecoveryTargetConfig) HasLogDirectoryLocation() bool {
	if o != nil && o.LogDirectoryLocation.IsSet() {
		return true
	}

	return false
}

// SetLogDirectoryLocation gets a reference to the given NullableString and assigns it to the LogDirectoryLocation field.
func (o *ExchangeRecoveryTargetConfig) SetLogDirectoryLocation(v string) {
	o.LogDirectoryLocation.Set(&v)
}
// SetLogDirectoryLocationNil sets the value for LogDirectoryLocation to be an explicit nil
func (o *ExchangeRecoveryTargetConfig) SetLogDirectoryLocationNil() {
	o.LogDirectoryLocation.Set(nil)
}

// UnsetLogDirectoryLocation ensures that no value is present for LogDirectoryLocation, not even an explicit nil
func (o *ExchangeRecoveryTargetConfig) UnsetLogDirectoryLocation() {
	o.LogDirectoryLocation.Unset()
}

// GetMountDatabase returns the MountDatabase field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeRecoveryTargetConfig) GetMountDatabase() bool {
	if o == nil || IsNil(o.MountDatabase.Get()) {
		var ret bool
		return ret
	}
	return *o.MountDatabase.Get()
}

// GetMountDatabaseOk returns a tuple with the MountDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRecoveryTargetConfig) GetMountDatabaseOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountDatabase.Get(), o.MountDatabase.IsSet()
}

// HasMountDatabase returns a boolean if a field has been set.
func (o *ExchangeRecoveryTargetConfig) HasMountDatabase() bool {
	if o != nil && o.MountDatabase.IsSet() {
		return true
	}

	return false
}

// SetMountDatabase gets a reference to the given NullableBool and assigns it to the MountDatabase field.
func (o *ExchangeRecoveryTargetConfig) SetMountDatabase(v bool) {
	o.MountDatabase.Set(&v)
}
// SetMountDatabaseNil sets the value for MountDatabase to be an explicit nil
func (o *ExchangeRecoveryTargetConfig) SetMountDatabaseNil() {
	o.MountDatabase.Set(nil)
}

// UnsetMountDatabase ensures that no value is present for MountDatabase, not even an explicit nil
func (o *ExchangeRecoveryTargetConfig) UnsetMountDatabase() {
	o.MountDatabase.Unset()
}

// GetRestoreAsRecoveryDB returns the RestoreAsRecoveryDB field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeRecoveryTargetConfig) GetRestoreAsRecoveryDB() bool {
	if o == nil || IsNil(o.RestoreAsRecoveryDB.Get()) {
		var ret bool
		return ret
	}
	return *o.RestoreAsRecoveryDB.Get()
}

// GetRestoreAsRecoveryDBOk returns a tuple with the RestoreAsRecoveryDB field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRecoveryTargetConfig) GetRestoreAsRecoveryDBOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreAsRecoveryDB.Get(), o.RestoreAsRecoveryDB.IsSet()
}

// HasRestoreAsRecoveryDB returns a boolean if a field has been set.
func (o *ExchangeRecoveryTargetConfig) HasRestoreAsRecoveryDB() bool {
	if o != nil && o.RestoreAsRecoveryDB.IsSet() {
		return true
	}

	return false
}

// SetRestoreAsRecoveryDB gets a reference to the given NullableBool and assigns it to the RestoreAsRecoveryDB field.
func (o *ExchangeRecoveryTargetConfig) SetRestoreAsRecoveryDB(v bool) {
	o.RestoreAsRecoveryDB.Set(&v)
}
// SetRestoreAsRecoveryDBNil sets the value for RestoreAsRecoveryDB to be an explicit nil
func (o *ExchangeRecoveryTargetConfig) SetRestoreAsRecoveryDBNil() {
	o.RestoreAsRecoveryDB.Set(nil)
}

// UnsetRestoreAsRecoveryDB ensures that no value is present for RestoreAsRecoveryDB, not even an explicit nil
func (o *ExchangeRecoveryTargetConfig) UnsetRestoreAsRecoveryDB() {
	o.RestoreAsRecoveryDB.Unset()
}

// GetRollForwardRecovery returns the RollForwardRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeRecoveryTargetConfig) GetRollForwardRecovery() bool {
	if o == nil || IsNil(o.RollForwardRecovery.Get()) {
		var ret bool
		return ret
	}
	return *o.RollForwardRecovery.Get()
}

// GetRollForwardRecoveryOk returns a tuple with the RollForwardRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRecoveryTargetConfig) GetRollForwardRecoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RollForwardRecovery.Get(), o.RollForwardRecovery.IsSet()
}

// HasRollForwardRecovery returns a boolean if a field has been set.
func (o *ExchangeRecoveryTargetConfig) HasRollForwardRecovery() bool {
	if o != nil && o.RollForwardRecovery.IsSet() {
		return true
	}

	return false
}

// SetRollForwardRecovery gets a reference to the given NullableBool and assigns it to the RollForwardRecovery field.
func (o *ExchangeRecoveryTargetConfig) SetRollForwardRecovery(v bool) {
	o.RollForwardRecovery.Set(&v)
}
// SetRollForwardRecoveryNil sets the value for RollForwardRecovery to be an explicit nil
func (o *ExchangeRecoveryTargetConfig) SetRollForwardRecoveryNil() {
	o.RollForwardRecovery.Set(nil)
}

// UnsetRollForwardRecovery ensures that no value is present for RollForwardRecovery, not even an explicit nil
func (o *ExchangeRecoveryTargetConfig) UnsetRollForwardRecovery() {
	o.RollForwardRecovery.Unset()
}

// GetSource returns the Source field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeRecoveryTargetConfig) GetSource() ExchangeRecoveryTargetConfigSource {
	if o == nil || IsNil(o.Source.Get()) {
		var ret ExchangeRecoveryTargetConfigSource
		return ret
	}
	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeRecoveryTargetConfig) GetSourceOk() (*ExchangeRecoveryTargetConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// HasSource returns a boolean if a field has been set.
func (o *ExchangeRecoveryTargetConfig) HasSource() bool {
	if o != nil && o.Source.IsSet() {
		return true
	}

	return false
}

// SetSource gets a reference to the given NullableExchangeRecoveryTargetConfigSource and assigns it to the Source field.
func (o *ExchangeRecoveryTargetConfig) SetSource(v ExchangeRecoveryTargetConfigSource) {
	o.Source.Set(&v)
}
// SetSourceNil sets the value for Source to be an explicit nil
func (o *ExchangeRecoveryTargetConfig) SetSourceNil() {
	o.Source.Set(nil)
}

// UnsetSource ensures that no value is present for Source, not even an explicit nil
func (o *ExchangeRecoveryTargetConfig) UnsetSource() {
	o.Source.Unset()
}

func (o ExchangeRecoveryTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExchangeRecoveryTargetConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DatabaseDirectoryLocation.IsSet() {
		toSerialize["databaseDirectoryLocation"] = o.DatabaseDirectoryLocation.Get()
	}
	if o.DatabaseName.IsSet() {
		toSerialize["databaseName"] = o.DatabaseName.Get()
	}
	if o.LogDirectoryLocation.IsSet() {
		toSerialize["logDirectoryLocation"] = o.LogDirectoryLocation.Get()
	}
	if o.MountDatabase.IsSet() {
		toSerialize["mountDatabase"] = o.MountDatabase.Get()
	}
	if o.RestoreAsRecoveryDB.IsSet() {
		toSerialize["restoreAsRecoveryDB"] = o.RestoreAsRecoveryDB.Get()
	}
	if o.RollForwardRecovery.IsSet() {
		toSerialize["rollForwardRecovery"] = o.RollForwardRecovery.Get()
	}
	if o.Source.IsSet() {
		toSerialize["source"] = o.Source.Get()
	}
	return toSerialize, nil
}

type NullableExchangeRecoveryTargetConfig struct {
	value *ExchangeRecoveryTargetConfig
	isSet bool
}

func (v NullableExchangeRecoveryTargetConfig) Get() *ExchangeRecoveryTargetConfig {
	return v.value
}

func (v *NullableExchangeRecoveryTargetConfig) Set(val *ExchangeRecoveryTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeRecoveryTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeRecoveryTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeRecoveryTargetConfig(val *ExchangeRecoveryTargetConfig) *NullableExchangeRecoveryTargetConfig {
	return &NullableExchangeRecoveryTargetConfig{value: val, isSet: true}
}

func (v NullableExchangeRecoveryTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeRecoveryTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


