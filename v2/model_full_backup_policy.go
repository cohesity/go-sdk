/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FullBackupPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FullBackupPolicy{}

// FullBackupPolicy Specifies full backup settings for a Protection Group. Currently, full backup settings can be specified by using either of 'schedule' or 'schdulesAndRetentions' field. Using 'schdulesAndRetentions' is recommended when multiple full backups need to be configured. If full and incremental backup has common retention then only setting 'schedule' is recommended.
type FullBackupPolicy struct {
	Schedule *FullSchedule `json:"schedule,omitempty"`
}

// NewFullBackupPolicy instantiates a new FullBackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFullBackupPolicy() *FullBackupPolicy {
	this := FullBackupPolicy{}
	return &this
}

// NewFullBackupPolicyWithDefaults instantiates a new FullBackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFullBackupPolicyWithDefaults() *FullBackupPolicy {
	this := FullBackupPolicy{}
	return &this
}

// GetSchedule returns the Schedule field value if set, zero value otherwise.
func (o *FullBackupPolicy) GetSchedule() FullSchedule {
	if o == nil || IsNil(o.Schedule) {
		var ret FullSchedule
		return ret
	}
	return *o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullBackupPolicy) GetScheduleOk() (*FullSchedule, bool) {
	if o == nil || IsNil(o.Schedule) {
		return nil, false
	}
	return o.Schedule, true
}

// HasSchedule returns a boolean if a field has been set.
func (o *FullBackupPolicy) HasSchedule() bool {
	if o != nil && !IsNil(o.Schedule) {
		return true
	}

	return false
}

// SetSchedule gets a reference to the given FullSchedule and assigns it to the Schedule field.
func (o *FullBackupPolicy) SetSchedule(v FullSchedule) {
	o.Schedule = &v
}

func (o FullBackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FullBackupPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Schedule) {
		toSerialize["schedule"] = o.Schedule
	}
	return toSerialize, nil
}

type NullableFullBackupPolicy struct {
	value *FullBackupPolicy
	isSet bool
}

func (v NullableFullBackupPolicy) Get() *FullBackupPolicy {
	return v.value
}

func (v *NullableFullBackupPolicy) Set(val *FullBackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableFullBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableFullBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFullBackupPolicy(val *FullBackupPolicy) *NullableFullBackupPolicy {
	return &NullableFullBackupPolicy{value: val, isSet: true}
}

func (v NullableFullBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFullBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


