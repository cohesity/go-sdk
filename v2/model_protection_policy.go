/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ProtectionPolicy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProtectionPolicy{}

// ProtectionPolicy Specifies common fields required to define Protection Policy.
type ProtectionPolicy struct {
	BackupPolicy BackupPolicy `json:"backupPolicy"`
	// List of Blackout Windows. If specified, this field defines blackout periods when new Group Runs are not started. If a Group Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy field AbortInBlackoutPeriod.
	BlackoutWindow []BlackoutWindow `json:"blackoutWindow,omitempty"`
	// Specifies the configuration for cascaded replications. Using cascaded replication, replication cluster(Rx) can further replicate and archive the snapshot copies to further targets. Its recommended to create cascaded configuration where protection group will be created.
	CascadedTargetsConfig []CascadedTargetConfiguration `json:"cascadedTargetsConfig,omitempty"`
	// This field is now deprecated. Please use the DataLockConfig in the backup retention.
	DataLock NullableString `json:"dataLock,omitempty"`
	// Specifies the description of the Protection Policy.
	Description NullableString `json:"description,omitempty"`
	// Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be retained up to a time that is the maximum of all retention policies that are applicable to it.
	ExtendedRetention []ExtendedRetentionPolicy `json:"extendedRetention,omitempty"`
	// Specifies true if Calender Based Schedule is supported by client. Default value is assumed as false for this feature.
	IsCBSEnabled NullableBool `json:"isCBSEnabled,omitempty"`
	// Specifies the last time this Policy was updated. If this is passed into a PUT request, then the backend will validate that the timestamp passed in matches the time that the policy was actually last modified. If the two timestamps do not match, then the request will be rejected with a stale error.
	LastModificationTimeUsecs NullableInt64 `json:"lastModificationTimeUsecs,omitempty"`
	// Specifies the name of the Protection Policy.
	Name NullableString `json:"name"`
	RemoteTargetPolicy *TargetsConfiguration `json:"remoteTargetPolicy,omitempty"`
	RetryOptions *RetryOptions `json:"retryOptions,omitempty"`
	RpoPolicySettings *RpoPolicySettings `json:"rpoPolicySettings,omitempty"`
	// Specifies the period of time before skipping the execution of new group Runs if an existing queued group Run of the same Protection group has not started. For example if this field is set to 30 minutes and a group Run is scheduled to start at 5:00 AM every day but does not start due to conflicts (such as too many groups are running). If the new group Run does not start by 5:30AM, the Cohesity Cluster will skip the new group Run. If the original group Run completes before 5:30AM the next day, a new group Run is created and starts executing. This field is optional.
	SkipIntervalMins NullableInt32 `json:"skipIntervalMins,omitempty"`
	// Specifies the current policy verison. Policy version is incremented for optionally supporting new features and differentialting across releases.
	Version NullableInt32 `json:"version,omitempty"`
}

type _ProtectionPolicy ProtectionPolicy

// NewProtectionPolicy instantiates a new ProtectionPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionPolicy(backupPolicy BackupPolicy, name NullableString) *ProtectionPolicy {
	this := ProtectionPolicy{}
	this.BackupPolicy = backupPolicy
	this.Name = name
	return &this
}

// NewProtectionPolicyWithDefaults instantiates a new ProtectionPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionPolicyWithDefaults() *ProtectionPolicy {
	this := ProtectionPolicy{}
	return &this
}

// GetBackupPolicy returns the BackupPolicy field value
func (o *ProtectionPolicy) GetBackupPolicy() BackupPolicy {
	if o == nil {
		var ret BackupPolicy
		return ret
	}

	return o.BackupPolicy
}

// GetBackupPolicyOk returns a tuple with the BackupPolicy field value
// and a boolean to check if the value has been set.
func (o *ProtectionPolicy) GetBackupPolicyOk() (*BackupPolicy, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BackupPolicy, true
}

// SetBackupPolicy sets field value
func (o *ProtectionPolicy) SetBackupPolicy(v BackupPolicy) {
	o.BackupPolicy = v
}

// GetBlackoutWindow returns the BlackoutWindow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetBlackoutWindow() []BlackoutWindow {
	if o == nil {
		var ret []BlackoutWindow
		return ret
	}
	return o.BlackoutWindow
}

// GetBlackoutWindowOk returns a tuple with the BlackoutWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetBlackoutWindowOk() ([]BlackoutWindow, bool) {
	if o == nil || IsNil(o.BlackoutWindow) {
		return nil, false
	}
	return o.BlackoutWindow, true
}

// HasBlackoutWindow returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasBlackoutWindow() bool {
	if o != nil && !IsNil(o.BlackoutWindow) {
		return true
	}

	return false
}

// SetBlackoutWindow gets a reference to the given []BlackoutWindow and assigns it to the BlackoutWindow field.
func (o *ProtectionPolicy) SetBlackoutWindow(v []BlackoutWindow) {
	o.BlackoutWindow = v
}

// GetCascadedTargetsConfig returns the CascadedTargetsConfig field value if set, zero value otherwise.
func (o *ProtectionPolicy) GetCascadedTargetsConfig() []CascadedTargetConfiguration {
	if o == nil || IsNil(o.CascadedTargetsConfig) {
		var ret []CascadedTargetConfiguration
		return ret
	}
	return o.CascadedTargetsConfig
}

// GetCascadedTargetsConfigOk returns a tuple with the CascadedTargetsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicy) GetCascadedTargetsConfigOk() ([]CascadedTargetConfiguration, bool) {
	if o == nil || IsNil(o.CascadedTargetsConfig) {
		return nil, false
	}
	return o.CascadedTargetsConfig, true
}

// HasCascadedTargetsConfig returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasCascadedTargetsConfig() bool {
	if o != nil && !IsNil(o.CascadedTargetsConfig) {
		return true
	}

	return false
}

// SetCascadedTargetsConfig gets a reference to the given []CascadedTargetConfiguration and assigns it to the CascadedTargetsConfig field.
func (o *ProtectionPolicy) SetCascadedTargetsConfig(v []CascadedTargetConfiguration) {
	o.CascadedTargetsConfig = v
}

// GetDataLock returns the DataLock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetDataLock() string {
	if o == nil || IsNil(o.DataLock.Get()) {
		var ret string
		return ret
	}
	return *o.DataLock.Get()
}

// GetDataLockOk returns a tuple with the DataLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetDataLockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataLock.Get(), o.DataLock.IsSet()
}

// HasDataLock returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasDataLock() bool {
	if o != nil && o.DataLock.IsSet() {
		return true
	}

	return false
}

// SetDataLock gets a reference to the given NullableString and assigns it to the DataLock field.
func (o *ProtectionPolicy) SetDataLock(v string) {
	o.DataLock.Set(&v)
}
// SetDataLockNil sets the value for DataLock to be an explicit nil
func (o *ProtectionPolicy) SetDataLockNil() {
	o.DataLock.Set(nil)
}

// UnsetDataLock ensures that no value is present for DataLock, not even an explicit nil
func (o *ProtectionPolicy) UnsetDataLock() {
	o.DataLock.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ProtectionPolicy) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ProtectionPolicy) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ProtectionPolicy) UnsetDescription() {
	o.Description.Unset()
}

// GetExtendedRetention returns the ExtendedRetention field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetExtendedRetention() []ExtendedRetentionPolicy {
	if o == nil {
		var ret []ExtendedRetentionPolicy
		return ret
	}
	return o.ExtendedRetention
}

// GetExtendedRetentionOk returns a tuple with the ExtendedRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetExtendedRetentionOk() ([]ExtendedRetentionPolicy, bool) {
	if o == nil || IsNil(o.ExtendedRetention) {
		return nil, false
	}
	return o.ExtendedRetention, true
}

// HasExtendedRetention returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasExtendedRetention() bool {
	if o != nil && !IsNil(o.ExtendedRetention) {
		return true
	}

	return false
}

// SetExtendedRetention gets a reference to the given []ExtendedRetentionPolicy and assigns it to the ExtendedRetention field.
func (o *ProtectionPolicy) SetExtendedRetention(v []ExtendedRetentionPolicy) {
	o.ExtendedRetention = v
}

// GetIsCBSEnabled returns the IsCBSEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetIsCBSEnabled() bool {
	if o == nil || IsNil(o.IsCBSEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsCBSEnabled.Get()
}

// GetIsCBSEnabledOk returns a tuple with the IsCBSEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetIsCBSEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsCBSEnabled.Get(), o.IsCBSEnabled.IsSet()
}

// HasIsCBSEnabled returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasIsCBSEnabled() bool {
	if o != nil && o.IsCBSEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsCBSEnabled gets a reference to the given NullableBool and assigns it to the IsCBSEnabled field.
func (o *ProtectionPolicy) SetIsCBSEnabled(v bool) {
	o.IsCBSEnabled.Set(&v)
}
// SetIsCBSEnabledNil sets the value for IsCBSEnabled to be an explicit nil
func (o *ProtectionPolicy) SetIsCBSEnabledNil() {
	o.IsCBSEnabled.Set(nil)
}

// UnsetIsCBSEnabled ensures that no value is present for IsCBSEnabled, not even an explicit nil
func (o *ProtectionPolicy) UnsetIsCBSEnabled() {
	o.IsCBSEnabled.Unset()
}

// GetLastModificationTimeUsecs returns the LastModificationTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetLastModificationTimeUsecs() int64 {
	if o == nil || IsNil(o.LastModificationTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.LastModificationTimeUsecs.Get()
}

// GetLastModificationTimeUsecsOk returns a tuple with the LastModificationTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetLastModificationTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastModificationTimeUsecs.Get(), o.LastModificationTimeUsecs.IsSet()
}

// HasLastModificationTimeUsecs returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasLastModificationTimeUsecs() bool {
	if o != nil && o.LastModificationTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetLastModificationTimeUsecs gets a reference to the given NullableInt64 and assigns it to the LastModificationTimeUsecs field.
func (o *ProtectionPolicy) SetLastModificationTimeUsecs(v int64) {
	o.LastModificationTimeUsecs.Set(&v)
}
// SetLastModificationTimeUsecsNil sets the value for LastModificationTimeUsecs to be an explicit nil
func (o *ProtectionPolicy) SetLastModificationTimeUsecsNil() {
	o.LastModificationTimeUsecs.Set(nil)
}

// UnsetLastModificationTimeUsecs ensures that no value is present for LastModificationTimeUsecs, not even an explicit nil
func (o *ProtectionPolicy) UnsetLastModificationTimeUsecs() {
	o.LastModificationTimeUsecs.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProtectionPolicy) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *ProtectionPolicy) SetName(v string) {
	o.Name.Set(&v)
}

// GetRemoteTargetPolicy returns the RemoteTargetPolicy field value if set, zero value otherwise.
func (o *ProtectionPolicy) GetRemoteTargetPolicy() TargetsConfiguration {
	if o == nil || IsNil(o.RemoteTargetPolicy) {
		var ret TargetsConfiguration
		return ret
	}
	return *o.RemoteTargetPolicy
}

// GetRemoteTargetPolicyOk returns a tuple with the RemoteTargetPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicy) GetRemoteTargetPolicyOk() (*TargetsConfiguration, bool) {
	if o == nil || IsNil(o.RemoteTargetPolicy) {
		return nil, false
	}
	return o.RemoteTargetPolicy, true
}

// HasRemoteTargetPolicy returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasRemoteTargetPolicy() bool {
	if o != nil && !IsNil(o.RemoteTargetPolicy) {
		return true
	}

	return false
}

// SetRemoteTargetPolicy gets a reference to the given TargetsConfiguration and assigns it to the RemoteTargetPolicy field.
func (o *ProtectionPolicy) SetRemoteTargetPolicy(v TargetsConfiguration) {
	o.RemoteTargetPolicy = &v
}

// GetRetryOptions returns the RetryOptions field value if set, zero value otherwise.
func (o *ProtectionPolicy) GetRetryOptions() RetryOptions {
	if o == nil || IsNil(o.RetryOptions) {
		var ret RetryOptions
		return ret
	}
	return *o.RetryOptions
}

// GetRetryOptionsOk returns a tuple with the RetryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicy) GetRetryOptionsOk() (*RetryOptions, bool) {
	if o == nil || IsNil(o.RetryOptions) {
		return nil, false
	}
	return o.RetryOptions, true
}

// HasRetryOptions returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasRetryOptions() bool {
	if o != nil && !IsNil(o.RetryOptions) {
		return true
	}

	return false
}

// SetRetryOptions gets a reference to the given RetryOptions and assigns it to the RetryOptions field.
func (o *ProtectionPolicy) SetRetryOptions(v RetryOptions) {
	o.RetryOptions = &v
}

// GetRpoPolicySettings returns the RpoPolicySettings field value if set, zero value otherwise.
func (o *ProtectionPolicy) GetRpoPolicySettings() RpoPolicySettings {
	if o == nil || IsNil(o.RpoPolicySettings) {
		var ret RpoPolicySettings
		return ret
	}
	return *o.RpoPolicySettings
}

// GetRpoPolicySettingsOk returns a tuple with the RpoPolicySettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicy) GetRpoPolicySettingsOk() (*RpoPolicySettings, bool) {
	if o == nil || IsNil(o.RpoPolicySettings) {
		return nil, false
	}
	return o.RpoPolicySettings, true
}

// HasRpoPolicySettings returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasRpoPolicySettings() bool {
	if o != nil && !IsNil(o.RpoPolicySettings) {
		return true
	}

	return false
}

// SetRpoPolicySettings gets a reference to the given RpoPolicySettings and assigns it to the RpoPolicySettings field.
func (o *ProtectionPolicy) SetRpoPolicySettings(v RpoPolicySettings) {
	o.RpoPolicySettings = &v
}

// GetSkipIntervalMins returns the SkipIntervalMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetSkipIntervalMins() int32 {
	if o == nil || IsNil(o.SkipIntervalMins.Get()) {
		var ret int32
		return ret
	}
	return *o.SkipIntervalMins.Get()
}

// GetSkipIntervalMinsOk returns a tuple with the SkipIntervalMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetSkipIntervalMinsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkipIntervalMins.Get(), o.SkipIntervalMins.IsSet()
}

// HasSkipIntervalMins returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasSkipIntervalMins() bool {
	if o != nil && o.SkipIntervalMins.IsSet() {
		return true
	}

	return false
}

// SetSkipIntervalMins gets a reference to the given NullableInt32 and assigns it to the SkipIntervalMins field.
func (o *ProtectionPolicy) SetSkipIntervalMins(v int32) {
	o.SkipIntervalMins.Set(&v)
}
// SetSkipIntervalMinsNil sets the value for SkipIntervalMins to be an explicit nil
func (o *ProtectionPolicy) SetSkipIntervalMinsNil() {
	o.SkipIntervalMins.Set(nil)
}

// UnsetSkipIntervalMins ensures that no value is present for SkipIntervalMins, not even an explicit nil
func (o *ProtectionPolicy) UnsetSkipIntervalMins() {
	o.SkipIntervalMins.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetVersion() int32 {
	if o == nil || IsNil(o.Version.Get()) {
		var ret int32
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt32 and assigns it to the Version field.
func (o *ProtectionPolicy) SetVersion(v int32) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *ProtectionPolicy) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *ProtectionPolicy) UnsetVersion() {
	o.Version.Unset()
}

func (o ProtectionPolicy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProtectionPolicy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["backupPolicy"] = o.BackupPolicy
	if o.BlackoutWindow != nil {
		toSerialize["blackoutWindow"] = o.BlackoutWindow
	}
	if !IsNil(o.CascadedTargetsConfig) {
		toSerialize["cascadedTargetsConfig"] = o.CascadedTargetsConfig
	}
	if o.DataLock.IsSet() {
		toSerialize["dataLock"] = o.DataLock.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ExtendedRetention != nil {
		toSerialize["extendedRetention"] = o.ExtendedRetention
	}
	if o.IsCBSEnabled.IsSet() {
		toSerialize["isCBSEnabled"] = o.IsCBSEnabled.Get()
	}
	if o.LastModificationTimeUsecs.IsSet() {
		toSerialize["lastModificationTimeUsecs"] = o.LastModificationTimeUsecs.Get()
	}
	toSerialize["name"] = o.Name.Get()
	if !IsNil(o.RemoteTargetPolicy) {
		toSerialize["remoteTargetPolicy"] = o.RemoteTargetPolicy
	}
	if !IsNil(o.RetryOptions) {
		toSerialize["retryOptions"] = o.RetryOptions
	}
	if !IsNil(o.RpoPolicySettings) {
		toSerialize["rpoPolicySettings"] = o.RpoPolicySettings
	}
	if o.SkipIntervalMins.IsSet() {
		toSerialize["skipIntervalMins"] = o.SkipIntervalMins.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return toSerialize, nil
}

func (o *ProtectionPolicy) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"backupPolicy",
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProtectionPolicy := _ProtectionPolicy{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varProtectionPolicy)

	if err != nil {
		return err
	}

	*o = ProtectionPolicy(varProtectionPolicy)

	return err
}

type NullableProtectionPolicy struct {
	value *ProtectionPolicy
	isSet bool
}

func (v NullableProtectionPolicy) Get() *ProtectionPolicy {
	return v.value
}

func (v *NullableProtectionPolicy) Set(val *ProtectionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionPolicy(val *ProtectionPolicy) *NullableProtectionPolicy {
	return &NullableProtectionPolicy{value: val, isSet: true}
}

func (v NullableProtectionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


