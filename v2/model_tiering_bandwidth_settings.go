/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TieringBandwidthSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TieringBandwidthSettings{}

// TieringBandwidthSettings Specifies the global bandwidth setting of the Tiering External Target.
type TieringBandwidthSettings struct {
	Download *BandwidthThrottling `json:"download,omitempty"`
	Upload *BandwidthThrottling `json:"upload,omitempty"`
}

// NewTieringBandwidthSettings instantiates a new TieringBandwidthSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTieringBandwidthSettings() *TieringBandwidthSettings {
	this := TieringBandwidthSettings{}
	return &this
}

// NewTieringBandwidthSettingsWithDefaults instantiates a new TieringBandwidthSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTieringBandwidthSettingsWithDefaults() *TieringBandwidthSettings {
	this := TieringBandwidthSettings{}
	return &this
}

// GetDownload returns the Download field value if set, zero value otherwise.
func (o *TieringBandwidthSettings) GetDownload() BandwidthThrottling {
	if o == nil || IsNil(o.Download) {
		var ret BandwidthThrottling
		return ret
	}
	return *o.Download
}

// GetDownloadOk returns a tuple with the Download field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TieringBandwidthSettings) GetDownloadOk() (*BandwidthThrottling, bool) {
	if o == nil || IsNil(o.Download) {
		return nil, false
	}
	return o.Download, true
}

// HasDownload returns a boolean if a field has been set.
func (o *TieringBandwidthSettings) HasDownload() bool {
	if o != nil && !IsNil(o.Download) {
		return true
	}

	return false
}

// SetDownload gets a reference to the given BandwidthThrottling and assigns it to the Download field.
func (o *TieringBandwidthSettings) SetDownload(v BandwidthThrottling) {
	o.Download = &v
}

// GetUpload returns the Upload field value if set, zero value otherwise.
func (o *TieringBandwidthSettings) GetUpload() BandwidthThrottling {
	if o == nil || IsNil(o.Upload) {
		var ret BandwidthThrottling
		return ret
	}
	return *o.Upload
}

// GetUploadOk returns a tuple with the Upload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TieringBandwidthSettings) GetUploadOk() (*BandwidthThrottling, bool) {
	if o == nil || IsNil(o.Upload) {
		return nil, false
	}
	return o.Upload, true
}

// HasUpload returns a boolean if a field has been set.
func (o *TieringBandwidthSettings) HasUpload() bool {
	if o != nil && !IsNil(o.Upload) {
		return true
	}

	return false
}

// SetUpload gets a reference to the given BandwidthThrottling and assigns it to the Upload field.
func (o *TieringBandwidthSettings) SetUpload(v BandwidthThrottling) {
	o.Upload = &v
}

func (o TieringBandwidthSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TieringBandwidthSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Download) {
		toSerialize["download"] = o.Download
	}
	if !IsNil(o.Upload) {
		toSerialize["upload"] = o.Upload
	}
	return toSerialize, nil
}

type NullableTieringBandwidthSettings struct {
	value *TieringBandwidthSettings
	isSet bool
}

func (v NullableTieringBandwidthSettings) Get() *TieringBandwidthSettings {
	return v.value
}

func (v *NullableTieringBandwidthSettings) Set(val *TieringBandwidthSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableTieringBandwidthSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableTieringBandwidthSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTieringBandwidthSettings(val *TieringBandwidthSettings) *NullableTieringBandwidthSettings {
	return &NullableTieringBandwidthSettings{value: val, isSet: true}
}

func (v NullableTieringBandwidthSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTieringBandwidthSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


