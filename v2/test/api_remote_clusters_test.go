/*
Cohesity REST API

Testing RemoteClustersAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/cohesity/go-sdk"
)

func Test_v2_RemoteClustersAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RemoteClustersAPIService DeleteRemoteCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId int64

		httpRes, err := apiClient.RemoteClustersAPI.DeleteRemoteCluster(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemoteClustersAPIService GetRemoteClusterById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId int64

		resp, httpRes, err := apiClient.RemoteClustersAPI.GetRemoteClusterById(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemoteClustersAPIService GetRemoteClusters", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemoteClustersAPI.GetRemoteClusters(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemoteClustersAPIService RegisterRemoteCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemoteClustersAPI.RegisterRemoteCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemoteClustersAPIService UpdateRemoteCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var clusterId int64

		resp, httpRes, err := apiClient.RemoteClustersAPI.UpdateRemoteCluster(context.Background(), clusterId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RemoteClustersAPIService ValidateRemoteCluster", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RemoteClustersAPI.ValidateRemoteCluster(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
