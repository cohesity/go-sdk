/*
Cohesity REST API

Testing UserAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/cohesity/go-sdk"
)

func Test_v2_UserAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test UserAPIService CreateGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.CreateGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService CreateSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.CreateSession(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService CreateUserAPIKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userSid string

		resp, httpRes, err := apiClient.UserAPI.CreateUserAPIKey(context.Background(), userSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService CreateUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.CreateUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService DeleteGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sid string

		httpRes, err := apiClient.UserAPI.DeleteGroup(context.Background(), sid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService DeleteGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.UserAPI.DeleteGroups(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService DeleteSession", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.UserAPI.DeleteSession(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService DeleteUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sid string

		httpRes, err := apiClient.UserAPI.DeleteUser(context.Background(), sid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService DeleteUserAPIKeyById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userSid string
		var id string

		httpRes, err := apiClient.UserAPI.DeleteUserAPIKeyById(context.Background(), userSid, id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService DeleteUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.UserAPI.DeleteUsers(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetActiveSessionsCount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.GetActiveSessionsCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetAllAPIKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.GetAllAPIKeys(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetGroupBySID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sid string

		resp, httpRes, err := apiClient.UserAPI.GetGroupBySID(context.Background(), sid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.GetGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetPrincipalSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sid string

		resp, httpRes, err := apiClient.UserAPI.GetPrincipalSources(context.Background(), sid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetSecurityPrincipals", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.GetSecurityPrincipals(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetUserAPIKeyById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userSid string

		resp, httpRes, err := apiClient.UserAPI.GetUserAPIKeyById(context.Background(), id, userSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetUserAPIKeys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userSid string

		resp, httpRes, err := apiClient.UserAPI.GetUserAPIKeys(context.Background(), userSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetUserBySID", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sid string

		resp, httpRes, err := apiClient.UserAPI.GetUserBySID(context.Background(), sid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService GetUsers", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.GetUsers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService RegenerateS3Key", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sid string

		resp, httpRes, err := apiClient.UserAPI.RegenerateS3Key(context.Background(), sid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService RotateUserAPIKey", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var userSid string
		var id string

		resp, httpRes, err := apiClient.UserAPI.RotateUserAPIKey(context.Background(), userSid, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UpdateGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sid string

		resp, httpRes, err := apiClient.UserAPI.UpdateGroup(context.Background(), sid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UpdateLinuxCredentialsV2", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.UserAPI.UpdateLinuxCredentialsV2(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UpdatePrincipalSources", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sid string

		resp, httpRes, err := apiClient.UserAPI.UpdatePrincipalSources(context.Background(), sid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UpdateUser", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sid string

		resp, httpRes, err := apiClient.UserAPI.UpdateUser(context.Background(), sid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UpdateUserAPIKeyById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var userSid string

		resp, httpRes, err := apiClient.UserAPI.UpdateUserAPIKeyById(context.Background(), id, userSid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test UserAPIService UpdateUserS3Keys", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sid string

		httpRes, err := apiClient.UserAPI.UpdateUserS3Keys(context.Background(), sid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
