/*
Cohesity REST API

Testing ObjectAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/cohesity/go-sdk"
)

func Test_v2_ObjectAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ObjectAPIService AssociateEntityMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ObjectAPI.AssociateEntityMetadata(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService BrowseObjectContents", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ObjectAPI.BrowseObjectContents(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService CancelObjectRuns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ObjectAPI.CancelObjectRuns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService ConstructMetaInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		resp, httpRes, err := apiClient.ObjectAPI.ConstructMetaInfo(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService DeleteEntityMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		httpRes, err := apiClient.ObjectAPI.DeleteEntityMetadata(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService FilterObjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ObjectAPI.FilterObjects(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetAllIndexedObjectSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var objectId int64

		resp, httpRes, err := apiClient.ObjectAPI.GetAllIndexedObjectSnapshots(context.Background(), objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetEntityMetadata", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceId int64

		resp, httpRes, err := apiClient.ObjectAPI.GetEntityMetadata(context.Background(), sourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetIndexedObjectSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var protectionGroupId string
		var objectId int64

		resp, httpRes, err := apiClient.ObjectAPI.GetIndexedObjectSnapshots(context.Background(), protectionGroupId, objectId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetObjectRunByRunId", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64
		var runId string

		resp, httpRes, err := apiClient.ObjectAPI.GetObjectRunByRunId(context.Background(), id, runId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetObjectRuns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ObjectAPI.GetObjectRuns(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetObjectSnapshotInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		resp, httpRes, err := apiClient.ObjectAPI.GetObjectSnapshotInfo(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetObjectSnapshotVolumeInfo", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var snapshotId string

		resp, httpRes, err := apiClient.ObjectAPI.GetObjectSnapshotVolumeInfo(context.Background(), snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetObjectSnapshots", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ObjectAPI.GetObjectSnapshots(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetObjectStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ObjectAPI.GetObjectStats(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetObjectTree", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ObjectAPI.GetObjectTree(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetObjectsLastRun", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ObjectAPI.GetObjectsLastRun(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetPITRangesForProtectedObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ObjectAPI.GetPITRangesForProtectedObject(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetProtectedObjectOfAnyTypeById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ObjectAPI.GetProtectedObjectOfAnyTypeById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetProtectedObjectsOfAnyType", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ObjectAPI.GetProtectedObjectsOfAnyType(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetSnapshotDiff", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		resp, httpRes, err := apiClient.ObjectAPI.GetSnapshotDiff(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService GetSourceHierarchyObjects", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceId int64

		resp, httpRes, err := apiClient.ObjectAPI.GetSourceHierarchyObjects(context.Background(), sourceId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService ObjectsActions", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.ObjectAPI.ObjectsActions(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService PerformActionOnObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64

		httpRes, err := apiClient.ObjectAPI.PerformActionOnObject(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ObjectAPIService UpdateObjectSnapshot", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int64
		var snapshotId string

		resp, httpRes, err := apiClient.ObjectAPI.UpdateObjectSnapshot(context.Background(), id, snapshotId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
