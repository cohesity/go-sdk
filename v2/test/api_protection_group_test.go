/*
Cohesity REST API

Testing ProtectionGroupAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package v2

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/cohesity/go-sdk"
)

func Test_v2_ProtectionGroupAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ProtectionGroupAPIService CreateProtectionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProtectionGroupAPI.CreateProtectionGroup(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService CreateProtectionGroupRun", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProtectionGroupAPI.CreateProtectionGroupRun(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService DeleteProtectionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		httpRes, err := apiClient.ProtectionGroupAPI.DeleteProtectionGroup(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetProtectionGroupById", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProtectionGroupAPI.GetProtectionGroupById(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetProtectionGroupRun", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var runId string

		resp, httpRes, err := apiClient.ProtectionGroupAPI.GetProtectionGroupRun(context.Background(), id, runId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetProtectionGroupRuns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProtectionGroupAPI.GetProtectionGroupRuns(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetProtectionGroups", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProtectionGroupAPI.GetProtectionGroups(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetProtectionRunProgress", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var runId string

		resp, httpRes, err := apiClient.ProtectionGroupAPI.GetProtectionRunProgress(context.Background(), runId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetProtectionRunStats", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var runId string

		resp, httpRes, err := apiClient.ProtectionGroupAPI.GetProtectionRunStats(context.Background(), runId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetProtectionRuns", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProtectionGroupAPI.GetProtectionRuns(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetRunDebugLogs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var runId string

		httpRes, err := apiClient.ProtectionGroupAPI.GetRunDebugLogs(context.Background(), id, runId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetRunDebugLogsForObject", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var runId string
		var objectId string

		httpRes, err := apiClient.ProtectionGroupAPI.GetRunDebugLogsForObject(context.Background(), id, runId, objectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetRunMessagesReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var runId string
		var objectId string

		httpRes, err := apiClient.ProtectionGroupAPI.GetRunMessagesReport(context.Background(), id, runId, objectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService GetRunsReport", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string
		var runId string
		var objectId string

		httpRes, err := apiClient.ProtectionGroupAPI.GetRunsReport(context.Background(), id, runId, objectId).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService PerformActionOnProtectionGroupRun", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProtectionGroupAPI.PerformActionOnProtectionGroupRun(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService UpdateProtectionGroup", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProtectionGroupAPI.UpdateProtectionGroup(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService UpdateProtectionGroupRun", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id string

		resp, httpRes, err := apiClient.ProtectionGroupAPI.UpdateProtectionGroupRun(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ProtectionGroupAPIService UpdateProtectionGroupsState", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ProtectionGroupAPI.UpdateProtectionGroupsState(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
