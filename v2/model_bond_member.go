/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BondMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BondMember{}

// BondMember Bond member details.
type BondMember struct {
	// Specifies whether or not this is a active secondary. This is only valid in ActiveBackup bonding mode.
	ActiveSecondary NullableBool `json:"activeSecondary,omitempty"`
	// Bond secondary link state.
	LinkState NullableString `json:"linkState,omitempty"`
	// MAC address of the bond secondary.
	MacAddress NullableString `json:"macAddress,omitempty"`
	// Name of the bond secondary.
	Name NullableString `json:"name,omitempty"`
	// Slot information of the bond secondary.
	Slot NullableString `json:"slot,omitempty"`
	// Speed of the bond secondary.
	Speed NullableString `json:"speed,omitempty"`
	Stats *InterfaceStats `json:"stats,omitempty"`
	UplinkSwitch *UplinkSwitch `json:"uplinkSwitch,omitempty"`
}

// NewBondMember instantiates a new BondMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBondMember() *BondMember {
	this := BondMember{}
	return &this
}

// NewBondMemberWithDefaults instantiates a new BondMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBondMemberWithDefaults() *BondMember {
	this := BondMember{}
	return &this
}

// GetActiveSecondary returns the ActiveSecondary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondMember) GetActiveSecondary() bool {
	if o == nil || IsNil(o.ActiveSecondary.Get()) {
		var ret bool
		return ret
	}
	return *o.ActiveSecondary.Get()
}

// GetActiveSecondaryOk returns a tuple with the ActiveSecondary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondMember) GetActiveSecondaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ActiveSecondary.Get(), o.ActiveSecondary.IsSet()
}

// HasActiveSecondary returns a boolean if a field has been set.
func (o *BondMember) HasActiveSecondary() bool {
	if o != nil && o.ActiveSecondary.IsSet() {
		return true
	}

	return false
}

// SetActiveSecondary gets a reference to the given NullableBool and assigns it to the ActiveSecondary field.
func (o *BondMember) SetActiveSecondary(v bool) {
	o.ActiveSecondary.Set(&v)
}
// SetActiveSecondaryNil sets the value for ActiveSecondary to be an explicit nil
func (o *BondMember) SetActiveSecondaryNil() {
	o.ActiveSecondary.Set(nil)
}

// UnsetActiveSecondary ensures that no value is present for ActiveSecondary, not even an explicit nil
func (o *BondMember) UnsetActiveSecondary() {
	o.ActiveSecondary.Unset()
}

// GetLinkState returns the LinkState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondMember) GetLinkState() string {
	if o == nil || IsNil(o.LinkState.Get()) {
		var ret string
		return ret
	}
	return *o.LinkState.Get()
}

// GetLinkStateOk returns a tuple with the LinkState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondMember) GetLinkStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LinkState.Get(), o.LinkState.IsSet()
}

// HasLinkState returns a boolean if a field has been set.
func (o *BondMember) HasLinkState() bool {
	if o != nil && o.LinkState.IsSet() {
		return true
	}

	return false
}

// SetLinkState gets a reference to the given NullableString and assigns it to the LinkState field.
func (o *BondMember) SetLinkState(v string) {
	o.LinkState.Set(&v)
}
// SetLinkStateNil sets the value for LinkState to be an explicit nil
func (o *BondMember) SetLinkStateNil() {
	o.LinkState.Set(nil)
}

// UnsetLinkState ensures that no value is present for LinkState, not even an explicit nil
func (o *BondMember) UnsetLinkState() {
	o.LinkState.Unset()
}

// GetMacAddress returns the MacAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondMember) GetMacAddress() string {
	if o == nil || IsNil(o.MacAddress.Get()) {
		var ret string
		return ret
	}
	return *o.MacAddress.Get()
}

// GetMacAddressOk returns a tuple with the MacAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondMember) GetMacAddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MacAddress.Get(), o.MacAddress.IsSet()
}

// HasMacAddress returns a boolean if a field has been set.
func (o *BondMember) HasMacAddress() bool {
	if o != nil && o.MacAddress.IsSet() {
		return true
	}

	return false
}

// SetMacAddress gets a reference to the given NullableString and assigns it to the MacAddress field.
func (o *BondMember) SetMacAddress(v string) {
	o.MacAddress.Set(&v)
}
// SetMacAddressNil sets the value for MacAddress to be an explicit nil
func (o *BondMember) SetMacAddressNil() {
	o.MacAddress.Set(nil)
}

// UnsetMacAddress ensures that no value is present for MacAddress, not even an explicit nil
func (o *BondMember) UnsetMacAddress() {
	o.MacAddress.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondMember) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondMember) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BondMember) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BondMember) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *BondMember) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BondMember) UnsetName() {
	o.Name.Unset()
}

// GetSlot returns the Slot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondMember) GetSlot() string {
	if o == nil || IsNil(o.Slot.Get()) {
		var ret string
		return ret
	}
	return *o.Slot.Get()
}

// GetSlotOk returns a tuple with the Slot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondMember) GetSlotOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slot.Get(), o.Slot.IsSet()
}

// HasSlot returns a boolean if a field has been set.
func (o *BondMember) HasSlot() bool {
	if o != nil && o.Slot.IsSet() {
		return true
	}

	return false
}

// SetSlot gets a reference to the given NullableString and assigns it to the Slot field.
func (o *BondMember) SetSlot(v string) {
	o.Slot.Set(&v)
}
// SetSlotNil sets the value for Slot to be an explicit nil
func (o *BondMember) SetSlotNil() {
	o.Slot.Set(nil)
}

// UnsetSlot ensures that no value is present for Slot, not even an explicit nil
func (o *BondMember) UnsetSlot() {
	o.Slot.Unset()
}

// GetSpeed returns the Speed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BondMember) GetSpeed() string {
	if o == nil || IsNil(o.Speed.Get()) {
		var ret string
		return ret
	}
	return *o.Speed.Get()
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BondMember) GetSpeedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Speed.Get(), o.Speed.IsSet()
}

// HasSpeed returns a boolean if a field has been set.
func (o *BondMember) HasSpeed() bool {
	if o != nil && o.Speed.IsSet() {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given NullableString and assigns it to the Speed field.
func (o *BondMember) SetSpeed(v string) {
	o.Speed.Set(&v)
}
// SetSpeedNil sets the value for Speed to be an explicit nil
func (o *BondMember) SetSpeedNil() {
	o.Speed.Set(nil)
}

// UnsetSpeed ensures that no value is present for Speed, not even an explicit nil
func (o *BondMember) UnsetSpeed() {
	o.Speed.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *BondMember) GetStats() InterfaceStats {
	if o == nil || IsNil(o.Stats) {
		var ret InterfaceStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondMember) GetStatsOk() (*InterfaceStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *BondMember) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given InterfaceStats and assigns it to the Stats field.
func (o *BondMember) SetStats(v InterfaceStats) {
	o.Stats = &v
}

// GetUplinkSwitch returns the UplinkSwitch field value if set, zero value otherwise.
func (o *BondMember) GetUplinkSwitch() UplinkSwitch {
	if o == nil || IsNil(o.UplinkSwitch) {
		var ret UplinkSwitch
		return ret
	}
	return *o.UplinkSwitch
}

// GetUplinkSwitchOk returns a tuple with the UplinkSwitch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BondMember) GetUplinkSwitchOk() (*UplinkSwitch, bool) {
	if o == nil || IsNil(o.UplinkSwitch) {
		return nil, false
	}
	return o.UplinkSwitch, true
}

// HasUplinkSwitch returns a boolean if a field has been set.
func (o *BondMember) HasUplinkSwitch() bool {
	if o != nil && !IsNil(o.UplinkSwitch) {
		return true
	}

	return false
}

// SetUplinkSwitch gets a reference to the given UplinkSwitch and assigns it to the UplinkSwitch field.
func (o *BondMember) SetUplinkSwitch(v UplinkSwitch) {
	o.UplinkSwitch = &v
}

func (o BondMember) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BondMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveSecondary.IsSet() {
		toSerialize["activeSecondary"] = o.ActiveSecondary.Get()
	}
	if o.LinkState.IsSet() {
		toSerialize["linkState"] = o.LinkState.Get()
	}
	if o.MacAddress.IsSet() {
		toSerialize["macAddress"] = o.MacAddress.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Slot.IsSet() {
		toSerialize["slot"] = o.Slot.Get()
	}
	if o.Speed.IsSet() {
		toSerialize["speed"] = o.Speed.Get()
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	if !IsNil(o.UplinkSwitch) {
		toSerialize["uplinkSwitch"] = o.UplinkSwitch
	}
	return toSerialize, nil
}

type NullableBondMember struct {
	value *BondMember
	isSet bool
}

func (v NullableBondMember) Get() *BondMember {
	return v.value
}

func (v *NullableBondMember) Set(val *BondMember) {
	v.value = val
	v.isSet = true
}

func (v NullableBondMember) IsSet() bool {
	return v.isSet
}

func (v *NullableBondMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBondMember(val *BondMember) *NullableBondMember {
	return &NullableBondMember{value: val, isSet: true}
}

func (v NullableBondMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBondMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


