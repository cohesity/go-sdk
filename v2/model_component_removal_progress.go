/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ComponentRemovalProgress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ComponentRemovalProgress{}

// ComponentRemovalProgress Specifies the removal progress details for services that are not acked yet.
type ComponentRemovalProgress struct {
	// Specifies if the removal is stuck.
	IsRemovalStuck NullableBool `json:"isRemovalStuck,omitempty"`
	// Specifies the overall progress percentage for the service.
	ProgressPercentage NullableInt32 `json:"progressPercentage,omitempty"`
	// Specifies removal progress details.
	RemovalProgress NullableString `json:"removalProgress,omitempty"`
	// Specifies service name.
	ServiceName NullableString `json:"serviceName,omitempty"`
	// Specifies the total duration in seconds left to Ack the service.
	TimeRemaining NullableInt64 `json:"timeRemaining,omitempty"`
}

// NewComponentRemovalProgress instantiates a new ComponentRemovalProgress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewComponentRemovalProgress() *ComponentRemovalProgress {
	this := ComponentRemovalProgress{}
	return &this
}

// NewComponentRemovalProgressWithDefaults instantiates a new ComponentRemovalProgress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewComponentRemovalProgressWithDefaults() *ComponentRemovalProgress {
	this := ComponentRemovalProgress{}
	return &this
}

// GetIsRemovalStuck returns the IsRemovalStuck field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentRemovalProgress) GetIsRemovalStuck() bool {
	if o == nil || IsNil(o.IsRemovalStuck.Get()) {
		var ret bool
		return ret
	}
	return *o.IsRemovalStuck.Get()
}

// GetIsRemovalStuckOk returns a tuple with the IsRemovalStuck field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentRemovalProgress) GetIsRemovalStuckOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsRemovalStuck.Get(), o.IsRemovalStuck.IsSet()
}

// HasIsRemovalStuck returns a boolean if a field has been set.
func (o *ComponentRemovalProgress) HasIsRemovalStuck() bool {
	if o != nil && o.IsRemovalStuck.IsSet() {
		return true
	}

	return false
}

// SetIsRemovalStuck gets a reference to the given NullableBool and assigns it to the IsRemovalStuck field.
func (o *ComponentRemovalProgress) SetIsRemovalStuck(v bool) {
	o.IsRemovalStuck.Set(&v)
}
// SetIsRemovalStuckNil sets the value for IsRemovalStuck to be an explicit nil
func (o *ComponentRemovalProgress) SetIsRemovalStuckNil() {
	o.IsRemovalStuck.Set(nil)
}

// UnsetIsRemovalStuck ensures that no value is present for IsRemovalStuck, not even an explicit nil
func (o *ComponentRemovalProgress) UnsetIsRemovalStuck() {
	o.IsRemovalStuck.Unset()
}

// GetProgressPercentage returns the ProgressPercentage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentRemovalProgress) GetProgressPercentage() int32 {
	if o == nil || IsNil(o.ProgressPercentage.Get()) {
		var ret int32
		return ret
	}
	return *o.ProgressPercentage.Get()
}

// GetProgressPercentageOk returns a tuple with the ProgressPercentage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentRemovalProgress) GetProgressPercentageOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProgressPercentage.Get(), o.ProgressPercentage.IsSet()
}

// HasProgressPercentage returns a boolean if a field has been set.
func (o *ComponentRemovalProgress) HasProgressPercentage() bool {
	if o != nil && o.ProgressPercentage.IsSet() {
		return true
	}

	return false
}

// SetProgressPercentage gets a reference to the given NullableInt32 and assigns it to the ProgressPercentage field.
func (o *ComponentRemovalProgress) SetProgressPercentage(v int32) {
	o.ProgressPercentage.Set(&v)
}
// SetProgressPercentageNil sets the value for ProgressPercentage to be an explicit nil
func (o *ComponentRemovalProgress) SetProgressPercentageNil() {
	o.ProgressPercentage.Set(nil)
}

// UnsetProgressPercentage ensures that no value is present for ProgressPercentage, not even an explicit nil
func (o *ComponentRemovalProgress) UnsetProgressPercentage() {
	o.ProgressPercentage.Unset()
}

// GetRemovalProgress returns the RemovalProgress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentRemovalProgress) GetRemovalProgress() string {
	if o == nil || IsNil(o.RemovalProgress.Get()) {
		var ret string
		return ret
	}
	return *o.RemovalProgress.Get()
}

// GetRemovalProgressOk returns a tuple with the RemovalProgress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentRemovalProgress) GetRemovalProgressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemovalProgress.Get(), o.RemovalProgress.IsSet()
}

// HasRemovalProgress returns a boolean if a field has been set.
func (o *ComponentRemovalProgress) HasRemovalProgress() bool {
	if o != nil && o.RemovalProgress.IsSet() {
		return true
	}

	return false
}

// SetRemovalProgress gets a reference to the given NullableString and assigns it to the RemovalProgress field.
func (o *ComponentRemovalProgress) SetRemovalProgress(v string) {
	o.RemovalProgress.Set(&v)
}
// SetRemovalProgressNil sets the value for RemovalProgress to be an explicit nil
func (o *ComponentRemovalProgress) SetRemovalProgressNil() {
	o.RemovalProgress.Set(nil)
}

// UnsetRemovalProgress ensures that no value is present for RemovalProgress, not even an explicit nil
func (o *ComponentRemovalProgress) UnsetRemovalProgress() {
	o.RemovalProgress.Unset()
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentRemovalProgress) GetServiceName() string {
	if o == nil || IsNil(o.ServiceName.Get()) {
		var ret string
		return ret
	}
	return *o.ServiceName.Get()
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentRemovalProgress) GetServiceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceName.Get(), o.ServiceName.IsSet()
}

// HasServiceName returns a boolean if a field has been set.
func (o *ComponentRemovalProgress) HasServiceName() bool {
	if o != nil && o.ServiceName.IsSet() {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given NullableString and assigns it to the ServiceName field.
func (o *ComponentRemovalProgress) SetServiceName(v string) {
	o.ServiceName.Set(&v)
}
// SetServiceNameNil sets the value for ServiceName to be an explicit nil
func (o *ComponentRemovalProgress) SetServiceNameNil() {
	o.ServiceName.Set(nil)
}

// UnsetServiceName ensures that no value is present for ServiceName, not even an explicit nil
func (o *ComponentRemovalProgress) UnsetServiceName() {
	o.ServiceName.Unset()
}

// GetTimeRemaining returns the TimeRemaining field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ComponentRemovalProgress) GetTimeRemaining() int64 {
	if o == nil || IsNil(o.TimeRemaining.Get()) {
		var ret int64
		return ret
	}
	return *o.TimeRemaining.Get()
}

// GetTimeRemainingOk returns a tuple with the TimeRemaining field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ComponentRemovalProgress) GetTimeRemainingOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TimeRemaining.Get(), o.TimeRemaining.IsSet()
}

// HasTimeRemaining returns a boolean if a field has been set.
func (o *ComponentRemovalProgress) HasTimeRemaining() bool {
	if o != nil && o.TimeRemaining.IsSet() {
		return true
	}

	return false
}

// SetTimeRemaining gets a reference to the given NullableInt64 and assigns it to the TimeRemaining field.
func (o *ComponentRemovalProgress) SetTimeRemaining(v int64) {
	o.TimeRemaining.Set(&v)
}
// SetTimeRemainingNil sets the value for TimeRemaining to be an explicit nil
func (o *ComponentRemovalProgress) SetTimeRemainingNil() {
	o.TimeRemaining.Set(nil)
}

// UnsetTimeRemaining ensures that no value is present for TimeRemaining, not even an explicit nil
func (o *ComponentRemovalProgress) UnsetTimeRemaining() {
	o.TimeRemaining.Unset()
}

func (o ComponentRemovalProgress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ComponentRemovalProgress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IsRemovalStuck.IsSet() {
		toSerialize["isRemovalStuck"] = o.IsRemovalStuck.Get()
	}
	if o.ProgressPercentage.IsSet() {
		toSerialize["progressPercentage"] = o.ProgressPercentage.Get()
	}
	if o.RemovalProgress.IsSet() {
		toSerialize["removalProgress"] = o.RemovalProgress.Get()
	}
	if o.ServiceName.IsSet() {
		toSerialize["serviceName"] = o.ServiceName.Get()
	}
	if o.TimeRemaining.IsSet() {
		toSerialize["timeRemaining"] = o.TimeRemaining.Get()
	}
	return toSerialize, nil
}

type NullableComponentRemovalProgress struct {
	value *ComponentRemovalProgress
	isSet bool
}

func (v NullableComponentRemovalProgress) Get() *ComponentRemovalProgress {
	return v.value
}

func (v *NullableComponentRemovalProgress) Set(val *ComponentRemovalProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableComponentRemovalProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableComponentRemovalProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableComponentRemovalProgress(val *ComponentRemovalProgress) *NullableComponentRemovalProgress {
	return &NullableComponentRemovalProgress{value: val, isSet: true}
}

func (v NullableComponentRemovalProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableComponentRemovalProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


