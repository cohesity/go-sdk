/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SnmpConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnmpConfig{}

// SnmpConfig SNMP configuration for this cluster.
type SnmpConfig struct {
	// AgentPort is the TCP port SNMP agent is using.
	AgentPort NullableInt32 `json:"agentPort,omitempty"`
	// Operation is the operation of configuring SNMP services.
	Operation NullableString `json:"operation,omitempty"`
	ReadUser *SnmpUser `json:"readUser,omitempty"`
	// Server is the IP address of Network Management System.
	Server NullableString `json:"server,omitempty"`
	SystemInfo *SnmpSysInfo `json:"systemInfo,omitempty"`
	// TrapPort is the TCP port SNMP agent is using.
	TrapPort NullableInt32 `json:"trapPort,omitempty"`
	TrapUser *SnmpUser `json:"trapUser,omitempty"`
	// SnmpVersion is the SNMP version to talk with SNMP agent. It is SNMP V2 or SNMP V3.
	Version NullableString `json:"version,omitempty"`
	// Vip is the IP address SNMP agent and SNMP Trap Daemon will use. It should be one of the VIPs assigned to the cluster.
	Vip NullableString `json:"vip,omitempty"`
	WriteUser *SnmpUser `json:"writeUser,omitempty"`
}

// NewSnmpConfig instantiates a new SnmpConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnmpConfig() *SnmpConfig {
	this := SnmpConfig{}
	return &this
}

// NewSnmpConfigWithDefaults instantiates a new SnmpConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnmpConfigWithDefaults() *SnmpConfig {
	this := SnmpConfig{}
	return &this
}

// GetAgentPort returns the AgentPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpConfig) GetAgentPort() int32 {
	if o == nil || IsNil(o.AgentPort.Get()) {
		var ret int32
		return ret
	}
	return *o.AgentPort.Get()
}

// GetAgentPortOk returns a tuple with the AgentPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpConfig) GetAgentPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AgentPort.Get(), o.AgentPort.IsSet()
}

// HasAgentPort returns a boolean if a field has been set.
func (o *SnmpConfig) HasAgentPort() bool {
	if o != nil && o.AgentPort.IsSet() {
		return true
	}

	return false
}

// SetAgentPort gets a reference to the given NullableInt32 and assigns it to the AgentPort field.
func (o *SnmpConfig) SetAgentPort(v int32) {
	o.AgentPort.Set(&v)
}
// SetAgentPortNil sets the value for AgentPort to be an explicit nil
func (o *SnmpConfig) SetAgentPortNil() {
	o.AgentPort.Set(nil)
}

// UnsetAgentPort ensures that no value is present for AgentPort, not even an explicit nil
func (o *SnmpConfig) UnsetAgentPort() {
	o.AgentPort.Unset()
}

// GetOperation returns the Operation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpConfig) GetOperation() string {
	if o == nil || IsNil(o.Operation.Get()) {
		var ret string
		return ret
	}
	return *o.Operation.Get()
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpConfig) GetOperationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Operation.Get(), o.Operation.IsSet()
}

// HasOperation returns a boolean if a field has been set.
func (o *SnmpConfig) HasOperation() bool {
	if o != nil && o.Operation.IsSet() {
		return true
	}

	return false
}

// SetOperation gets a reference to the given NullableString and assigns it to the Operation field.
func (o *SnmpConfig) SetOperation(v string) {
	o.Operation.Set(&v)
}
// SetOperationNil sets the value for Operation to be an explicit nil
func (o *SnmpConfig) SetOperationNil() {
	o.Operation.Set(nil)
}

// UnsetOperation ensures that no value is present for Operation, not even an explicit nil
func (o *SnmpConfig) UnsetOperation() {
	o.Operation.Unset()
}

// GetReadUser returns the ReadUser field value if set, zero value otherwise.
func (o *SnmpConfig) GetReadUser() SnmpUser {
	if o == nil || IsNil(o.ReadUser) {
		var ret SnmpUser
		return ret
	}
	return *o.ReadUser
}

// GetReadUserOk returns a tuple with the ReadUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetReadUserOk() (*SnmpUser, bool) {
	if o == nil || IsNil(o.ReadUser) {
		return nil, false
	}
	return o.ReadUser, true
}

// HasReadUser returns a boolean if a field has been set.
func (o *SnmpConfig) HasReadUser() bool {
	if o != nil && !IsNil(o.ReadUser) {
		return true
	}

	return false
}

// SetReadUser gets a reference to the given SnmpUser and assigns it to the ReadUser field.
func (o *SnmpConfig) SetReadUser(v SnmpUser) {
	o.ReadUser = &v
}

// GetServer returns the Server field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpConfig) GetServer() string {
	if o == nil || IsNil(o.Server.Get()) {
		var ret string
		return ret
	}
	return *o.Server.Get()
}

// GetServerOk returns a tuple with the Server field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpConfig) GetServerOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Server.Get(), o.Server.IsSet()
}

// HasServer returns a boolean if a field has been set.
func (o *SnmpConfig) HasServer() bool {
	if o != nil && o.Server.IsSet() {
		return true
	}

	return false
}

// SetServer gets a reference to the given NullableString and assigns it to the Server field.
func (o *SnmpConfig) SetServer(v string) {
	o.Server.Set(&v)
}
// SetServerNil sets the value for Server to be an explicit nil
func (o *SnmpConfig) SetServerNil() {
	o.Server.Set(nil)
}

// UnsetServer ensures that no value is present for Server, not even an explicit nil
func (o *SnmpConfig) UnsetServer() {
	o.Server.Unset()
}

// GetSystemInfo returns the SystemInfo field value if set, zero value otherwise.
func (o *SnmpConfig) GetSystemInfo() SnmpSysInfo {
	if o == nil || IsNil(o.SystemInfo) {
		var ret SnmpSysInfo
		return ret
	}
	return *o.SystemInfo
}

// GetSystemInfoOk returns a tuple with the SystemInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetSystemInfoOk() (*SnmpSysInfo, bool) {
	if o == nil || IsNil(o.SystemInfo) {
		return nil, false
	}
	return o.SystemInfo, true
}

// HasSystemInfo returns a boolean if a field has been set.
func (o *SnmpConfig) HasSystemInfo() bool {
	if o != nil && !IsNil(o.SystemInfo) {
		return true
	}

	return false
}

// SetSystemInfo gets a reference to the given SnmpSysInfo and assigns it to the SystemInfo field.
func (o *SnmpConfig) SetSystemInfo(v SnmpSysInfo) {
	o.SystemInfo = &v
}

// GetTrapPort returns the TrapPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpConfig) GetTrapPort() int32 {
	if o == nil || IsNil(o.TrapPort.Get()) {
		var ret int32
		return ret
	}
	return *o.TrapPort.Get()
}

// GetTrapPortOk returns a tuple with the TrapPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpConfig) GetTrapPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.TrapPort.Get(), o.TrapPort.IsSet()
}

// HasTrapPort returns a boolean if a field has been set.
func (o *SnmpConfig) HasTrapPort() bool {
	if o != nil && o.TrapPort.IsSet() {
		return true
	}

	return false
}

// SetTrapPort gets a reference to the given NullableInt32 and assigns it to the TrapPort field.
func (o *SnmpConfig) SetTrapPort(v int32) {
	o.TrapPort.Set(&v)
}
// SetTrapPortNil sets the value for TrapPort to be an explicit nil
func (o *SnmpConfig) SetTrapPortNil() {
	o.TrapPort.Set(nil)
}

// UnsetTrapPort ensures that no value is present for TrapPort, not even an explicit nil
func (o *SnmpConfig) UnsetTrapPort() {
	o.TrapPort.Unset()
}

// GetTrapUser returns the TrapUser field value if set, zero value otherwise.
func (o *SnmpConfig) GetTrapUser() SnmpUser {
	if o == nil || IsNil(o.TrapUser) {
		var ret SnmpUser
		return ret
	}
	return *o.TrapUser
}

// GetTrapUserOk returns a tuple with the TrapUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetTrapUserOk() (*SnmpUser, bool) {
	if o == nil || IsNil(o.TrapUser) {
		return nil, false
	}
	return o.TrapUser, true
}

// HasTrapUser returns a boolean if a field has been set.
func (o *SnmpConfig) HasTrapUser() bool {
	if o != nil && !IsNil(o.TrapUser) {
		return true
	}

	return false
}

// SetTrapUser gets a reference to the given SnmpUser and assigns it to the TrapUser field.
func (o *SnmpConfig) SetTrapUser(v SnmpUser) {
	o.TrapUser = &v
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpConfig) GetVersion() string {
	if o == nil || IsNil(o.Version.Get()) {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpConfig) GetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *SnmpConfig) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *SnmpConfig) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *SnmpConfig) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *SnmpConfig) UnsetVersion() {
	o.Version.Unset()
}

// GetVip returns the Vip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnmpConfig) GetVip() string {
	if o == nil || IsNil(o.Vip.Get()) {
		var ret string
		return ret
	}
	return *o.Vip.Get()
}

// GetVipOk returns a tuple with the Vip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnmpConfig) GetVipOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vip.Get(), o.Vip.IsSet()
}

// HasVip returns a boolean if a field has been set.
func (o *SnmpConfig) HasVip() bool {
	if o != nil && o.Vip.IsSet() {
		return true
	}

	return false
}

// SetVip gets a reference to the given NullableString and assigns it to the Vip field.
func (o *SnmpConfig) SetVip(v string) {
	o.Vip.Set(&v)
}
// SetVipNil sets the value for Vip to be an explicit nil
func (o *SnmpConfig) SetVipNil() {
	o.Vip.Set(nil)
}

// UnsetVip ensures that no value is present for Vip, not even an explicit nil
func (o *SnmpConfig) UnsetVip() {
	o.Vip.Unset()
}

// GetWriteUser returns the WriteUser field value if set, zero value otherwise.
func (o *SnmpConfig) GetWriteUser() SnmpUser {
	if o == nil || IsNil(o.WriteUser) {
		var ret SnmpUser
		return ret
	}
	return *o.WriteUser
}

// GetWriteUserOk returns a tuple with the WriteUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnmpConfig) GetWriteUserOk() (*SnmpUser, bool) {
	if o == nil || IsNil(o.WriteUser) {
		return nil, false
	}
	return o.WriteUser, true
}

// HasWriteUser returns a boolean if a field has been set.
func (o *SnmpConfig) HasWriteUser() bool {
	if o != nil && !IsNil(o.WriteUser) {
		return true
	}

	return false
}

// SetWriteUser gets a reference to the given SnmpUser and assigns it to the WriteUser field.
func (o *SnmpConfig) SetWriteUser(v SnmpUser) {
	o.WriteUser = &v
}

func (o SnmpConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnmpConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AgentPort.IsSet() {
		toSerialize["agentPort"] = o.AgentPort.Get()
	}
	if o.Operation.IsSet() {
		toSerialize["operation"] = o.Operation.Get()
	}
	if !IsNil(o.ReadUser) {
		toSerialize["readUser"] = o.ReadUser
	}
	if o.Server.IsSet() {
		toSerialize["server"] = o.Server.Get()
	}
	if !IsNil(o.SystemInfo) {
		toSerialize["systemInfo"] = o.SystemInfo
	}
	if o.TrapPort.IsSet() {
		toSerialize["trapPort"] = o.TrapPort.Get()
	}
	if !IsNil(o.TrapUser) {
		toSerialize["trapUser"] = o.TrapUser
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.Vip.IsSet() {
		toSerialize["vip"] = o.Vip.Get()
	}
	if !IsNil(o.WriteUser) {
		toSerialize["writeUser"] = o.WriteUser
	}
	return toSerialize, nil
}

type NullableSnmpConfig struct {
	value *SnmpConfig
	isSet bool
}

func (v NullableSnmpConfig) Get() *SnmpConfig {
	return v.value
}

func (v *NullableSnmpConfig) Set(val *SnmpConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSnmpConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSnmpConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnmpConfig(val *SnmpConfig) *NullableSnmpConfig {
	return &NullableSnmpConfig{value: val, isSet: true}
}

func (v NullableSnmpConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnmpConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


