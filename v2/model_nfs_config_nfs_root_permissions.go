/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NfsConfigNfsRootPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NfsConfigNfsRootPermissions{}

// NfsConfigNfsRootPermissions Specifies the NFS root permission config of the view file system.
type NfsConfigNfsRootPermissions struct {
	// Unix GID for the root of the file system.
	Gid NullableInt32 `json:"gid,omitempty"`
	// Unix mode bits for the root of the file system.
	Mode NullableInt32 `json:"mode,omitempty"`
	// Unix UID for the root of the file system.
	Uid NullableInt32 `json:"uid,omitempty"`
}

// NewNfsConfigNfsRootPermissions instantiates a new NfsConfigNfsRootPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfsConfigNfsRootPermissions() *NfsConfigNfsRootPermissions {
	this := NfsConfigNfsRootPermissions{}
	return &this
}

// NewNfsConfigNfsRootPermissionsWithDefaults instantiates a new NfsConfigNfsRootPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfsConfigNfsRootPermissionsWithDefaults() *NfsConfigNfsRootPermissions {
	this := NfsConfigNfsRootPermissions{}
	return &this
}

// GetGid returns the Gid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NfsConfigNfsRootPermissions) GetGid() int32 {
	if o == nil || IsNil(o.Gid.Get()) {
		var ret int32
		return ret
	}
	return *o.Gid.Get()
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsConfigNfsRootPermissions) GetGidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gid.Get(), o.Gid.IsSet()
}

// HasGid returns a boolean if a field has been set.
func (o *NfsConfigNfsRootPermissions) HasGid() bool {
	if o != nil && o.Gid.IsSet() {
		return true
	}

	return false
}

// SetGid gets a reference to the given NullableInt32 and assigns it to the Gid field.
func (o *NfsConfigNfsRootPermissions) SetGid(v int32) {
	o.Gid.Set(&v)
}
// SetGidNil sets the value for Gid to be an explicit nil
func (o *NfsConfigNfsRootPermissions) SetGidNil() {
	o.Gid.Set(nil)
}

// UnsetGid ensures that no value is present for Gid, not even an explicit nil
func (o *NfsConfigNfsRootPermissions) UnsetGid() {
	o.Gid.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NfsConfigNfsRootPermissions) GetMode() int32 {
	if o == nil || IsNil(o.Mode.Get()) {
		var ret int32
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsConfigNfsRootPermissions) GetModeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *NfsConfigNfsRootPermissions) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableInt32 and assigns it to the Mode field.
func (o *NfsConfigNfsRootPermissions) SetMode(v int32) {
	o.Mode.Set(&v)
}
// SetModeNil sets the value for Mode to be an explicit nil
func (o *NfsConfigNfsRootPermissions) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *NfsConfigNfsRootPermissions) UnsetMode() {
	o.Mode.Unset()
}

// GetUid returns the Uid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NfsConfigNfsRootPermissions) GetUid() int32 {
	if o == nil || IsNil(o.Uid.Get()) {
		var ret int32
		return ret
	}
	return *o.Uid.Get()
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsConfigNfsRootPermissions) GetUidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uid.Get(), o.Uid.IsSet()
}

// HasUid returns a boolean if a field has been set.
func (o *NfsConfigNfsRootPermissions) HasUid() bool {
	if o != nil && o.Uid.IsSet() {
		return true
	}

	return false
}

// SetUid gets a reference to the given NullableInt32 and assigns it to the Uid field.
func (o *NfsConfigNfsRootPermissions) SetUid(v int32) {
	o.Uid.Set(&v)
}
// SetUidNil sets the value for Uid to be an explicit nil
func (o *NfsConfigNfsRootPermissions) SetUidNil() {
	o.Uid.Set(nil)
}

// UnsetUid ensures that no value is present for Uid, not even an explicit nil
func (o *NfsConfigNfsRootPermissions) UnsetUid() {
	o.Uid.Unset()
}

func (o NfsConfigNfsRootPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NfsConfigNfsRootPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Gid.IsSet() {
		toSerialize["gid"] = o.Gid.Get()
	}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	if o.Uid.IsSet() {
		toSerialize["uid"] = o.Uid.Get()
	}
	return toSerialize, nil
}

type NullableNfsConfigNfsRootPermissions struct {
	value *NfsConfigNfsRootPermissions
	isSet bool
}

func (v NullableNfsConfigNfsRootPermissions) Get() *NfsConfigNfsRootPermissions {
	return v.value
}

func (v *NullableNfsConfigNfsRootPermissions) Set(val *NfsConfigNfsRootPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableNfsConfigNfsRootPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableNfsConfigNfsRootPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfsConfigNfsRootPermissions(val *NfsConfigNfsRootPermissions) *NullableNfsConfigNfsRootPermissions {
	return &NullableNfsConfigNfsRootPermissions{value: val, isSet: true}
}

func (v NullableNfsConfigNfsRootPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfsConfigNfsRootPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


