/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonAwsExternalTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonAwsExternalTargetParams{}

// CommonAwsExternalTargetParams Specifies the common parameters which are specific to AWS related External Targets.
type CommonAwsExternalTargetParams struct {
	// Specifies bucket name of the External Target.
	BucketName NullableString `json:"bucketName"`
	// Specifies region of the External Target.
	Region NullableString `json:"region"`
}

type _CommonAwsExternalTargetParams CommonAwsExternalTargetParams

// NewCommonAwsExternalTargetParams instantiates a new CommonAwsExternalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonAwsExternalTargetParams(bucketName NullableString, region NullableString) *CommonAwsExternalTargetParams {
	this := CommonAwsExternalTargetParams{}
	this.BucketName = bucketName
	this.Region = region
	return &this
}

// NewCommonAwsExternalTargetParamsWithDefaults instantiates a new CommonAwsExternalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonAwsExternalTargetParamsWithDefaults() *CommonAwsExternalTargetParams {
	this := CommonAwsExternalTargetParams{}
	return &this
}

// GetBucketName returns the BucketName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonAwsExternalTargetParams) GetBucketName() string {
	if o == nil || o.BucketName.Get() == nil {
		var ret string
		return ret
	}

	return *o.BucketName.Get()
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonAwsExternalTargetParams) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BucketName.Get(), o.BucketName.IsSet()
}

// SetBucketName sets field value
func (o *CommonAwsExternalTargetParams) SetBucketName(v string) {
	o.BucketName.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonAwsExternalTargetParams) GetRegion() string {
	if o == nil || o.Region.Get() == nil {
		var ret string
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonAwsExternalTargetParams) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *CommonAwsExternalTargetParams) SetRegion(v string) {
	o.Region.Set(&v)
}

func (o CommonAwsExternalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonAwsExternalTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucketName"] = o.BucketName.Get()
	toSerialize["region"] = o.Region.Get()
	return toSerialize, nil
}

func (o *CommonAwsExternalTargetParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucketName",
		"region",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonAwsExternalTargetParams := _CommonAwsExternalTargetParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonAwsExternalTargetParams)

	if err != nil {
		return err
	}

	*o = CommonAwsExternalTargetParams(varCommonAwsExternalTargetParams)

	return err
}

type NullableCommonAwsExternalTargetParams struct {
	value *CommonAwsExternalTargetParams
	isSet bool
}

func (v NullableCommonAwsExternalTargetParams) Get() *CommonAwsExternalTargetParams {
	return v.value
}

func (v *NullableCommonAwsExternalTargetParams) Set(val *CommonAwsExternalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonAwsExternalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonAwsExternalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonAwsExternalTargetParams(val *CommonAwsExternalTargetParams) *NullableCommonAwsExternalTargetParams {
	return &NullableCommonAwsExternalTargetParams{value: val, isSet: true}
}

func (v NullableCommonAwsExternalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonAwsExternalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


