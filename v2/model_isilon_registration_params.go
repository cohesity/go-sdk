/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IsilonRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IsilonRegistrationParams{}

// IsilonRegistrationParams Specifies parameters to register an Isilon Source.
type IsilonRegistrationParams struct {
	// Specifies whether or not to back up SMB Volumes.
	BackUpSMBVolumes NullableBool `json:"backUpSMBVolumes,omitempty"`
	Credentials Credentials `json:"credentials"`
	// Specifies the IP Address Endpoint for the Isilon Source.
	Endpoint NullableString `json:"endpoint"`
	FilterIpConfig *FilterIpConfig `json:"filterIpConfig,omitempty"`
	SmbCredentials *SmbMountCredentials `json:"smbCredentials,omitempty"`
	ThrottlingConfig *NasThrottlingConfig `json:"throttlingConfig,omitempty"`
}

type _IsilonRegistrationParams IsilonRegistrationParams

// NewIsilonRegistrationParams instantiates a new IsilonRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIsilonRegistrationParams(credentials Credentials, endpoint NullableString) *IsilonRegistrationParams {
	this := IsilonRegistrationParams{}
	this.Credentials = credentials
	this.Endpoint = endpoint
	return &this
}

// NewIsilonRegistrationParamsWithDefaults instantiates a new IsilonRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIsilonRegistrationParamsWithDefaults() *IsilonRegistrationParams {
	this := IsilonRegistrationParams{}
	return &this
}

// GetBackUpSMBVolumes returns the BackUpSMBVolumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IsilonRegistrationParams) GetBackUpSMBVolumes() bool {
	if o == nil || IsNil(o.BackUpSMBVolumes.Get()) {
		var ret bool
		return ret
	}
	return *o.BackUpSMBVolumes.Get()
}

// GetBackUpSMBVolumesOk returns a tuple with the BackUpSMBVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IsilonRegistrationParams) GetBackUpSMBVolumesOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.BackUpSMBVolumes.Get(), o.BackUpSMBVolumes.IsSet()
}

// HasBackUpSMBVolumes returns a boolean if a field has been set.
func (o *IsilonRegistrationParams) HasBackUpSMBVolumes() bool {
	if o != nil && o.BackUpSMBVolumes.IsSet() {
		return true
	}

	return false
}

// SetBackUpSMBVolumes gets a reference to the given NullableBool and assigns it to the BackUpSMBVolumes field.
func (o *IsilonRegistrationParams) SetBackUpSMBVolumes(v bool) {
	o.BackUpSMBVolumes.Set(&v)
}
// SetBackUpSMBVolumesNil sets the value for BackUpSMBVolumes to be an explicit nil
func (o *IsilonRegistrationParams) SetBackUpSMBVolumesNil() {
	o.BackUpSMBVolumes.Set(nil)
}

// UnsetBackUpSMBVolumes ensures that no value is present for BackUpSMBVolumes, not even an explicit nil
func (o *IsilonRegistrationParams) UnsetBackUpSMBVolumes() {
	o.BackUpSMBVolumes.Unset()
}

// GetCredentials returns the Credentials field value
func (o *IsilonRegistrationParams) GetCredentials() Credentials {
	if o == nil {
		var ret Credentials
		return ret
	}

	return o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value
// and a boolean to check if the value has been set.
func (o *IsilonRegistrationParams) GetCredentialsOk() (*Credentials, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Credentials, true
}

// SetCredentials sets field value
func (o *IsilonRegistrationParams) SetCredentials(v Credentials) {
	o.Credentials = v
}

// GetEndpoint returns the Endpoint field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IsilonRegistrationParams) GetEndpoint() string {
	if o == nil || o.Endpoint.Get() == nil {
		var ret string
		return ret
	}

	return *o.Endpoint.Get()
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IsilonRegistrationParams) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Endpoint.Get(), o.Endpoint.IsSet()
}

// SetEndpoint sets field value
func (o *IsilonRegistrationParams) SetEndpoint(v string) {
	o.Endpoint.Set(&v)
}

// GetFilterIpConfig returns the FilterIpConfig field value if set, zero value otherwise.
func (o *IsilonRegistrationParams) GetFilterIpConfig() FilterIpConfig {
	if o == nil || IsNil(o.FilterIpConfig) {
		var ret FilterIpConfig
		return ret
	}
	return *o.FilterIpConfig
}

// GetFilterIpConfigOk returns a tuple with the FilterIpConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsilonRegistrationParams) GetFilterIpConfigOk() (*FilterIpConfig, bool) {
	if o == nil || IsNil(o.FilterIpConfig) {
		return nil, false
	}
	return o.FilterIpConfig, true
}

// HasFilterIpConfig returns a boolean if a field has been set.
func (o *IsilonRegistrationParams) HasFilterIpConfig() bool {
	if o != nil && !IsNil(o.FilterIpConfig) {
		return true
	}

	return false
}

// SetFilterIpConfig gets a reference to the given FilterIpConfig and assigns it to the FilterIpConfig field.
func (o *IsilonRegistrationParams) SetFilterIpConfig(v FilterIpConfig) {
	o.FilterIpConfig = &v
}

// GetSmbCredentials returns the SmbCredentials field value if set, zero value otherwise.
func (o *IsilonRegistrationParams) GetSmbCredentials() SmbMountCredentials {
	if o == nil || IsNil(o.SmbCredentials) {
		var ret SmbMountCredentials
		return ret
	}
	return *o.SmbCredentials
}

// GetSmbCredentialsOk returns a tuple with the SmbCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsilonRegistrationParams) GetSmbCredentialsOk() (*SmbMountCredentials, bool) {
	if o == nil || IsNil(o.SmbCredentials) {
		return nil, false
	}
	return o.SmbCredentials, true
}

// HasSmbCredentials returns a boolean if a field has been set.
func (o *IsilonRegistrationParams) HasSmbCredentials() bool {
	if o != nil && !IsNil(o.SmbCredentials) {
		return true
	}

	return false
}

// SetSmbCredentials gets a reference to the given SmbMountCredentials and assigns it to the SmbCredentials field.
func (o *IsilonRegistrationParams) SetSmbCredentials(v SmbMountCredentials) {
	o.SmbCredentials = &v
}

// GetThrottlingConfig returns the ThrottlingConfig field value if set, zero value otherwise.
func (o *IsilonRegistrationParams) GetThrottlingConfig() NasThrottlingConfig {
	if o == nil || IsNil(o.ThrottlingConfig) {
		var ret NasThrottlingConfig
		return ret
	}
	return *o.ThrottlingConfig
}

// GetThrottlingConfigOk returns a tuple with the ThrottlingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IsilonRegistrationParams) GetThrottlingConfigOk() (*NasThrottlingConfig, bool) {
	if o == nil || IsNil(o.ThrottlingConfig) {
		return nil, false
	}
	return o.ThrottlingConfig, true
}

// HasThrottlingConfig returns a boolean if a field has been set.
func (o *IsilonRegistrationParams) HasThrottlingConfig() bool {
	if o != nil && !IsNil(o.ThrottlingConfig) {
		return true
	}

	return false
}

// SetThrottlingConfig gets a reference to the given NasThrottlingConfig and assigns it to the ThrottlingConfig field.
func (o *IsilonRegistrationParams) SetThrottlingConfig(v NasThrottlingConfig) {
	o.ThrottlingConfig = &v
}

func (o IsilonRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IsilonRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.BackUpSMBVolumes.IsSet() {
		toSerialize["backUpSMBVolumes"] = o.BackUpSMBVolumes.Get()
	}
	toSerialize["credentials"] = o.Credentials
	toSerialize["endpoint"] = o.Endpoint.Get()
	if !IsNil(o.FilterIpConfig) {
		toSerialize["filterIpConfig"] = o.FilterIpConfig
	}
	if !IsNil(o.SmbCredentials) {
		toSerialize["smbCredentials"] = o.SmbCredentials
	}
	if !IsNil(o.ThrottlingConfig) {
		toSerialize["throttlingConfig"] = o.ThrottlingConfig
	}
	return toSerialize, nil
}

func (o *IsilonRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"credentials",
		"endpoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIsilonRegistrationParams := _IsilonRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIsilonRegistrationParams)

	if err != nil {
		return err
	}

	*o = IsilonRegistrationParams(varIsilonRegistrationParams)

	return err
}

type NullableIsilonRegistrationParams struct {
	value *IsilonRegistrationParams
	isSet bool
}

func (v NullableIsilonRegistrationParams) Get() *IsilonRegistrationParams {
	return v.value
}

func (v *NullableIsilonRegistrationParams) Set(val *IsilonRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableIsilonRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableIsilonRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsilonRegistrationParams(val *IsilonRegistrationParams) *NullableIsilonRegistrationParams {
	return &NullableIsilonRegistrationParams{value: val, isSet: true}
}

func (v NullableIsilonRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsilonRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


