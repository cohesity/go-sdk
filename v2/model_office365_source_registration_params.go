/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Office365SourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Office365SourceRegistrationParams{}

// Office365SourceRegistrationParams Specifies the paramaters to register an office-365 source.
type Office365SourceRegistrationParams struct {
	// Specifies the password to access target entity.
	Password string `json:"password"`
	// Specifies the username to access target entity.
	Username string `json:"username"`
	// Specifies the description of the source being registered.
	Description NullableString `json:"description,omitempty"`
	// Specifies the endpoint IPaddress, URL or hostname of the host.
	Endpoint string `json:"endpoint"`
	// Specifies whether to enable M365 Storage Service API based(CSM) Backup for this M365 source.
	EnableM365CSMBackup NullableBool `json:"enableM365CSMBackup,omitempty"`
	O365ObjectsDiscoveryParams *ObjectsDiscoveryParams `json:"o365ObjectsDiscoveryParams,omitempty"`
	// Specifies a list of office365 azure application credentials needed to authenticate & authorize users for Office 365.
	Office365AppCredentialsList []Office365AppCredentials `json:"office365AppCredentialsList,omitempty"`
	// Specifies the region where Office 365 Exchange environment is.
	Office365Region NullableString `json:"office365Region,omitempty"`
	// Specifies the list of Office365 service account credentials which can be used for Mailbox Backups.
	Office365ServiceAccountCredentialsList []Credentials `json:"office365ServiceAccountCredentialsList,omitempty"`
	// Specifies the list of the protection source id of the windows physical host which will be used during the protection and recovery of the sites that belong to a office365 domain.
	ProxyHostSourceIdList []int64 `json:"proxyHostSourceIdList,omitempty"`
	// Specifies whether to use existing Office365 credentials like password and client secret for app id's. This parameter is only valid in the case of updating the registered source.
	UseExistingCredentials NullableBool `json:"useExistingCredentials,omitempty"`
	// Specifies whether OAuth should be used for authentication in case of Exchange Online.
	UseOAuthForExchangeOnline NullableBool `json:"useOAuthForExchangeOnline,omitempty"`
}

type _Office365SourceRegistrationParams Office365SourceRegistrationParams

// NewOffice365SourceRegistrationParams instantiates a new Office365SourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffice365SourceRegistrationParams(password string, username string, endpoint string) *Office365SourceRegistrationParams {
	this := Office365SourceRegistrationParams{}
	this.Password = password
	this.Username = username
	this.Endpoint = endpoint
	return &this
}

// NewOffice365SourceRegistrationParamsWithDefaults instantiates a new Office365SourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffice365SourceRegistrationParamsWithDefaults() *Office365SourceRegistrationParams {
	this := Office365SourceRegistrationParams{}
	return &this
}

// GetPassword returns the Password field value
func (o *Office365SourceRegistrationParams) GetPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Password
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
func (o *Office365SourceRegistrationParams) GetPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Password, true
}

// SetPassword sets field value
func (o *Office365SourceRegistrationParams) SetPassword(v string) {
	o.Password = v
}

// GetUsername returns the Username field value
func (o *Office365SourceRegistrationParams) GetUsername() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Username
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
func (o *Office365SourceRegistrationParams) GetUsernameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Username, true
}

// SetUsername sets field value
func (o *Office365SourceRegistrationParams) SetUsername(v string) {
	o.Username = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365SourceRegistrationParams) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365SourceRegistrationParams) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Office365SourceRegistrationParams) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Office365SourceRegistrationParams) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Office365SourceRegistrationParams) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Office365SourceRegistrationParams) UnsetDescription() {
	o.Description.Unset()
}

// GetEndpoint returns the Endpoint field value
func (o *Office365SourceRegistrationParams) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *Office365SourceRegistrationParams) GetEndpointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *Office365SourceRegistrationParams) SetEndpoint(v string) {
	o.Endpoint = v
}

// GetEnableM365CSMBackup returns the EnableM365CSMBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365SourceRegistrationParams) GetEnableM365CSMBackup() bool {
	if o == nil || IsNil(o.EnableM365CSMBackup.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableM365CSMBackup.Get()
}

// GetEnableM365CSMBackupOk returns a tuple with the EnableM365CSMBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365SourceRegistrationParams) GetEnableM365CSMBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableM365CSMBackup.Get(), o.EnableM365CSMBackup.IsSet()
}

// HasEnableM365CSMBackup returns a boolean if a field has been set.
func (o *Office365SourceRegistrationParams) HasEnableM365CSMBackup() bool {
	if o != nil && o.EnableM365CSMBackup.IsSet() {
		return true
	}

	return false
}

// SetEnableM365CSMBackup gets a reference to the given NullableBool and assigns it to the EnableM365CSMBackup field.
func (o *Office365SourceRegistrationParams) SetEnableM365CSMBackup(v bool) {
	o.EnableM365CSMBackup.Set(&v)
}
// SetEnableM365CSMBackupNil sets the value for EnableM365CSMBackup to be an explicit nil
func (o *Office365SourceRegistrationParams) SetEnableM365CSMBackupNil() {
	o.EnableM365CSMBackup.Set(nil)
}

// UnsetEnableM365CSMBackup ensures that no value is present for EnableM365CSMBackup, not even an explicit nil
func (o *Office365SourceRegistrationParams) UnsetEnableM365CSMBackup() {
	o.EnableM365CSMBackup.Unset()
}

// GetO365ObjectsDiscoveryParams returns the O365ObjectsDiscoveryParams field value if set, zero value otherwise.
func (o *Office365SourceRegistrationParams) GetO365ObjectsDiscoveryParams() ObjectsDiscoveryParams {
	if o == nil || IsNil(o.O365ObjectsDiscoveryParams) {
		var ret ObjectsDiscoveryParams
		return ret
	}
	return *o.O365ObjectsDiscoveryParams
}

// GetO365ObjectsDiscoveryParamsOk returns a tuple with the O365ObjectsDiscoveryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365SourceRegistrationParams) GetO365ObjectsDiscoveryParamsOk() (*ObjectsDiscoveryParams, bool) {
	if o == nil || IsNil(o.O365ObjectsDiscoveryParams) {
		return nil, false
	}
	return o.O365ObjectsDiscoveryParams, true
}

// HasO365ObjectsDiscoveryParams returns a boolean if a field has been set.
func (o *Office365SourceRegistrationParams) HasO365ObjectsDiscoveryParams() bool {
	if o != nil && !IsNil(o.O365ObjectsDiscoveryParams) {
		return true
	}

	return false
}

// SetO365ObjectsDiscoveryParams gets a reference to the given ObjectsDiscoveryParams and assigns it to the O365ObjectsDiscoveryParams field.
func (o *Office365SourceRegistrationParams) SetO365ObjectsDiscoveryParams(v ObjectsDiscoveryParams) {
	o.O365ObjectsDiscoveryParams = &v
}

// GetOffice365AppCredentialsList returns the Office365AppCredentialsList field value if set, zero value otherwise.
func (o *Office365SourceRegistrationParams) GetOffice365AppCredentialsList() []Office365AppCredentials {
	if o == nil || IsNil(o.Office365AppCredentialsList) {
		var ret []Office365AppCredentials
		return ret
	}
	return o.Office365AppCredentialsList
}

// GetOffice365AppCredentialsListOk returns a tuple with the Office365AppCredentialsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365SourceRegistrationParams) GetOffice365AppCredentialsListOk() ([]Office365AppCredentials, bool) {
	if o == nil || IsNil(o.Office365AppCredentialsList) {
		return nil, false
	}
	return o.Office365AppCredentialsList, true
}

// HasOffice365AppCredentialsList returns a boolean if a field has been set.
func (o *Office365SourceRegistrationParams) HasOffice365AppCredentialsList() bool {
	if o != nil && !IsNil(o.Office365AppCredentialsList) {
		return true
	}

	return false
}

// SetOffice365AppCredentialsList gets a reference to the given []Office365AppCredentials and assigns it to the Office365AppCredentialsList field.
func (o *Office365SourceRegistrationParams) SetOffice365AppCredentialsList(v []Office365AppCredentials) {
	o.Office365AppCredentialsList = v
}

// GetOffice365Region returns the Office365Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365SourceRegistrationParams) GetOffice365Region() string {
	if o == nil || IsNil(o.Office365Region.Get()) {
		var ret string
		return ret
	}
	return *o.Office365Region.Get()
}

// GetOffice365RegionOk returns a tuple with the Office365Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365SourceRegistrationParams) GetOffice365RegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Office365Region.Get(), o.Office365Region.IsSet()
}

// HasOffice365Region returns a boolean if a field has been set.
func (o *Office365SourceRegistrationParams) HasOffice365Region() bool {
	if o != nil && o.Office365Region.IsSet() {
		return true
	}

	return false
}

// SetOffice365Region gets a reference to the given NullableString and assigns it to the Office365Region field.
func (o *Office365SourceRegistrationParams) SetOffice365Region(v string) {
	o.Office365Region.Set(&v)
}
// SetOffice365RegionNil sets the value for Office365Region to be an explicit nil
func (o *Office365SourceRegistrationParams) SetOffice365RegionNil() {
	o.Office365Region.Set(nil)
}

// UnsetOffice365Region ensures that no value is present for Office365Region, not even an explicit nil
func (o *Office365SourceRegistrationParams) UnsetOffice365Region() {
	o.Office365Region.Unset()
}

// GetOffice365ServiceAccountCredentialsList returns the Office365ServiceAccountCredentialsList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365SourceRegistrationParams) GetOffice365ServiceAccountCredentialsList() []Credentials {
	if o == nil {
		var ret []Credentials
		return ret
	}
	return o.Office365ServiceAccountCredentialsList
}

// GetOffice365ServiceAccountCredentialsListOk returns a tuple with the Office365ServiceAccountCredentialsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365SourceRegistrationParams) GetOffice365ServiceAccountCredentialsListOk() ([]Credentials, bool) {
	if o == nil || IsNil(o.Office365ServiceAccountCredentialsList) {
		return nil, false
	}
	return o.Office365ServiceAccountCredentialsList, true
}

// HasOffice365ServiceAccountCredentialsList returns a boolean if a field has been set.
func (o *Office365SourceRegistrationParams) HasOffice365ServiceAccountCredentialsList() bool {
	if o != nil && !IsNil(o.Office365ServiceAccountCredentialsList) {
		return true
	}

	return false
}

// SetOffice365ServiceAccountCredentialsList gets a reference to the given []Credentials and assigns it to the Office365ServiceAccountCredentialsList field.
func (o *Office365SourceRegistrationParams) SetOffice365ServiceAccountCredentialsList(v []Credentials) {
	o.Office365ServiceAccountCredentialsList = v
}

// GetProxyHostSourceIdList returns the ProxyHostSourceIdList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365SourceRegistrationParams) GetProxyHostSourceIdList() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.ProxyHostSourceIdList
}

// GetProxyHostSourceIdListOk returns a tuple with the ProxyHostSourceIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365SourceRegistrationParams) GetProxyHostSourceIdListOk() ([]int64, bool) {
	if o == nil || IsNil(o.ProxyHostSourceIdList) {
		return nil, false
	}
	return o.ProxyHostSourceIdList, true
}

// HasProxyHostSourceIdList returns a boolean if a field has been set.
func (o *Office365SourceRegistrationParams) HasProxyHostSourceIdList() bool {
	if o != nil && !IsNil(o.ProxyHostSourceIdList) {
		return true
	}

	return false
}

// SetProxyHostSourceIdList gets a reference to the given []int64 and assigns it to the ProxyHostSourceIdList field.
func (o *Office365SourceRegistrationParams) SetProxyHostSourceIdList(v []int64) {
	o.ProxyHostSourceIdList = v
}

// GetUseExistingCredentials returns the UseExistingCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365SourceRegistrationParams) GetUseExistingCredentials() bool {
	if o == nil || IsNil(o.UseExistingCredentials.Get()) {
		var ret bool
		return ret
	}
	return *o.UseExistingCredentials.Get()
}

// GetUseExistingCredentialsOk returns a tuple with the UseExistingCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365SourceRegistrationParams) GetUseExistingCredentialsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseExistingCredentials.Get(), o.UseExistingCredentials.IsSet()
}

// HasUseExistingCredentials returns a boolean if a field has been set.
func (o *Office365SourceRegistrationParams) HasUseExistingCredentials() bool {
	if o != nil && o.UseExistingCredentials.IsSet() {
		return true
	}

	return false
}

// SetUseExistingCredentials gets a reference to the given NullableBool and assigns it to the UseExistingCredentials field.
func (o *Office365SourceRegistrationParams) SetUseExistingCredentials(v bool) {
	o.UseExistingCredentials.Set(&v)
}
// SetUseExistingCredentialsNil sets the value for UseExistingCredentials to be an explicit nil
func (o *Office365SourceRegistrationParams) SetUseExistingCredentialsNil() {
	o.UseExistingCredentials.Set(nil)
}

// UnsetUseExistingCredentials ensures that no value is present for UseExistingCredentials, not even an explicit nil
func (o *Office365SourceRegistrationParams) UnsetUseExistingCredentials() {
	o.UseExistingCredentials.Unset()
}

// GetUseOAuthForExchangeOnline returns the UseOAuthForExchangeOnline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365SourceRegistrationParams) GetUseOAuthForExchangeOnline() bool {
	if o == nil || IsNil(o.UseOAuthForExchangeOnline.Get()) {
		var ret bool
		return ret
	}
	return *o.UseOAuthForExchangeOnline.Get()
}

// GetUseOAuthForExchangeOnlineOk returns a tuple with the UseOAuthForExchangeOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365SourceRegistrationParams) GetUseOAuthForExchangeOnlineOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.UseOAuthForExchangeOnline.Get(), o.UseOAuthForExchangeOnline.IsSet()
}

// HasUseOAuthForExchangeOnline returns a boolean if a field has been set.
func (o *Office365SourceRegistrationParams) HasUseOAuthForExchangeOnline() bool {
	if o != nil && o.UseOAuthForExchangeOnline.IsSet() {
		return true
	}

	return false
}

// SetUseOAuthForExchangeOnline gets a reference to the given NullableBool and assigns it to the UseOAuthForExchangeOnline field.
func (o *Office365SourceRegistrationParams) SetUseOAuthForExchangeOnline(v bool) {
	o.UseOAuthForExchangeOnline.Set(&v)
}
// SetUseOAuthForExchangeOnlineNil sets the value for UseOAuthForExchangeOnline to be an explicit nil
func (o *Office365SourceRegistrationParams) SetUseOAuthForExchangeOnlineNil() {
	o.UseOAuthForExchangeOnline.Set(nil)
}

// UnsetUseOAuthForExchangeOnline ensures that no value is present for UseOAuthForExchangeOnline, not even an explicit nil
func (o *Office365SourceRegistrationParams) UnsetUseOAuthForExchangeOnline() {
	o.UseOAuthForExchangeOnline.Unset()
}

func (o Office365SourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Office365SourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["password"] = o.Password
	toSerialize["username"] = o.Username
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	toSerialize["endpoint"] = o.Endpoint
	if o.EnableM365CSMBackup.IsSet() {
		toSerialize["enableM365CSMBackup"] = o.EnableM365CSMBackup.Get()
	}
	if !IsNil(o.O365ObjectsDiscoveryParams) {
		toSerialize["o365ObjectsDiscoveryParams"] = o.O365ObjectsDiscoveryParams
	}
	if !IsNil(o.Office365AppCredentialsList) {
		toSerialize["office365AppCredentialsList"] = o.Office365AppCredentialsList
	}
	if o.Office365Region.IsSet() {
		toSerialize["office365Region"] = o.Office365Region.Get()
	}
	if o.Office365ServiceAccountCredentialsList != nil {
		toSerialize["office365ServiceAccountCredentialsList"] = o.Office365ServiceAccountCredentialsList
	}
	if o.ProxyHostSourceIdList != nil {
		toSerialize["proxyHostSourceIdList"] = o.ProxyHostSourceIdList
	}
	if o.UseExistingCredentials.IsSet() {
		toSerialize["useExistingCredentials"] = o.UseExistingCredentials.Get()
	}
	if o.UseOAuthForExchangeOnline.IsSet() {
		toSerialize["useOAuthForExchangeOnline"] = o.UseOAuthForExchangeOnline.Get()
	}
	return toSerialize, nil
}

func (o *Office365SourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"password",
		"username",
		"endpoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOffice365SourceRegistrationParams := _Office365SourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOffice365SourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = Office365SourceRegistrationParams(varOffice365SourceRegistrationParams)

	return err
}

type NullableOffice365SourceRegistrationParams struct {
	value *Office365SourceRegistrationParams
	isSet bool
}

func (v NullableOffice365SourceRegistrationParams) Get() *Office365SourceRegistrationParams {
	return v.value
}

func (v *NullableOffice365SourceRegistrationParams) Set(val *Office365SourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOffice365SourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOffice365SourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffice365SourceRegistrationParams(val *Office365SourceRegistrationParams) *NullableOffice365SourceRegistrationParams {
	return &NullableOffice365SourceRegistrationParams{value: val, isSet: true}
}

func (v NullableOffice365SourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffice365SourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


