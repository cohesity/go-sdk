/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HyperVDiskInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperVDiskInfo{}

// HyperVDiskInfo Specifies information about a disk to be filtered.
type HyperVDiskInfo struct {
	// Specifies the disk controller number.
	ControllerNumber NullableInt64 `json:"controllerNumber"`
	// Specifies the disk controller type.
	ControllerType NullableString `json:"controllerType"`
	// Specifies the disk index number.
	UnitNumber NullableInt64 `json:"unitNumber"`
}

type _HyperVDiskInfo HyperVDiskInfo

// NewHyperVDiskInfo instantiates a new HyperVDiskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperVDiskInfo(controllerNumber NullableInt64, controllerType NullableString, unitNumber NullableInt64) *HyperVDiskInfo {
	this := HyperVDiskInfo{}
	this.ControllerNumber = controllerNumber
	this.ControllerType = controllerType
	this.UnitNumber = unitNumber
	return &this
}

// NewHyperVDiskInfoWithDefaults instantiates a new HyperVDiskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperVDiskInfoWithDefaults() *HyperVDiskInfo {
	this := HyperVDiskInfo{}
	return &this
}

// GetControllerNumber returns the ControllerNumber field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *HyperVDiskInfo) GetControllerNumber() int64 {
	if o == nil || o.ControllerNumber.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ControllerNumber.Get()
}

// GetControllerNumberOk returns a tuple with the ControllerNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVDiskInfo) GetControllerNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControllerNumber.Get(), o.ControllerNumber.IsSet()
}

// SetControllerNumber sets field value
func (o *HyperVDiskInfo) SetControllerNumber(v int64) {
	o.ControllerNumber.Set(&v)
}

// GetControllerType returns the ControllerType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HyperVDiskInfo) GetControllerType() string {
	if o == nil || o.ControllerType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ControllerType.Get()
}

// GetControllerTypeOk returns a tuple with the ControllerType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVDiskInfo) GetControllerTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ControllerType.Get(), o.ControllerType.IsSet()
}

// SetControllerType sets field value
func (o *HyperVDiskInfo) SetControllerType(v string) {
	o.ControllerType.Set(&v)
}

// GetUnitNumber returns the UnitNumber field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *HyperVDiskInfo) GetUnitNumber() int64 {
	if o == nil || o.UnitNumber.Get() == nil {
		var ret int64
		return ret
	}

	return *o.UnitNumber.Get()
}

// GetUnitNumberOk returns a tuple with the UnitNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVDiskInfo) GetUnitNumberOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.UnitNumber.Get(), o.UnitNumber.IsSet()
}

// SetUnitNumber sets field value
func (o *HyperVDiskInfo) SetUnitNumber(v int64) {
	o.UnitNumber.Set(&v)
}

func (o HyperVDiskInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperVDiskInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["controllerNumber"] = o.ControllerNumber.Get()
	toSerialize["controllerType"] = o.ControllerType.Get()
	toSerialize["unitNumber"] = o.UnitNumber.Get()
	return toSerialize, nil
}

func (o *HyperVDiskInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"controllerNumber",
		"controllerType",
		"unitNumber",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHyperVDiskInfo := _HyperVDiskInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHyperVDiskInfo)

	if err != nil {
		return err
	}

	*o = HyperVDiskInfo(varHyperVDiskInfo)

	return err
}

type NullableHyperVDiskInfo struct {
	value *HyperVDiskInfo
	isSet bool
}

func (v NullableHyperVDiskInfo) Get() *HyperVDiskInfo {
	return v.value
}

func (v *NullableHyperVDiskInfo) Set(val *HyperVDiskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperVDiskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperVDiskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperVDiskInfo(val *HyperVDiskInfo) *NullableHyperVDiskInfo {
	return &NullableHyperVDiskInfo{value: val, isSet: true}
}

func (v NullableHyperVDiskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperVDiskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


