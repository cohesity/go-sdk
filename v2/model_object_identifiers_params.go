/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ObjectIdentifiersParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectIdentifiersParams{}

// ObjectIdentifiersParams Extra parameters that can be specified to fetch entity identifiers.
type ObjectIdentifiersParams struct {
	// List of unique identifiers/metadata to fetch entity identifier
	ObjectUniqueIdentifiersList []ObjectUniqueIdentifier `json:"objectUniqueIdentifiersList,omitempty"`
}

// NewObjectIdentifiersParams instantiates a new ObjectIdentifiersParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectIdentifiersParams() *ObjectIdentifiersParams {
	this := ObjectIdentifiersParams{}
	return &this
}

// NewObjectIdentifiersParamsWithDefaults instantiates a new ObjectIdentifiersParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectIdentifiersParamsWithDefaults() *ObjectIdentifiersParams {
	this := ObjectIdentifiersParams{}
	return &this
}

// GetObjectUniqueIdentifiersList returns the ObjectUniqueIdentifiersList field value if set, zero value otherwise.
func (o *ObjectIdentifiersParams) GetObjectUniqueIdentifiersList() []ObjectUniqueIdentifier {
	if o == nil || IsNil(o.ObjectUniqueIdentifiersList) {
		var ret []ObjectUniqueIdentifier
		return ret
	}
	return o.ObjectUniqueIdentifiersList
}

// GetObjectUniqueIdentifiersListOk returns a tuple with the ObjectUniqueIdentifiersList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectIdentifiersParams) GetObjectUniqueIdentifiersListOk() ([]ObjectUniqueIdentifier, bool) {
	if o == nil || IsNil(o.ObjectUniqueIdentifiersList) {
		return nil, false
	}
	return o.ObjectUniqueIdentifiersList, true
}

// HasObjectUniqueIdentifiersList returns a boolean if a field has been set.
func (o *ObjectIdentifiersParams) HasObjectUniqueIdentifiersList() bool {
	if o != nil && !IsNil(o.ObjectUniqueIdentifiersList) {
		return true
	}

	return false
}

// SetObjectUniqueIdentifiersList gets a reference to the given []ObjectUniqueIdentifier and assigns it to the ObjectUniqueIdentifiersList field.
func (o *ObjectIdentifiersParams) SetObjectUniqueIdentifiersList(v []ObjectUniqueIdentifier) {
	o.ObjectUniqueIdentifiersList = v
}

func (o ObjectIdentifiersParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectIdentifiersParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ObjectUniqueIdentifiersList) {
		toSerialize["objectUniqueIdentifiersList"] = o.ObjectUniqueIdentifiersList
	}
	return toSerialize, nil
}

type NullableObjectIdentifiersParams struct {
	value *ObjectIdentifiersParams
	isSet bool
}

func (v NullableObjectIdentifiersParams) Get() *ObjectIdentifiersParams {
	return v.value
}

func (v *NullableObjectIdentifiersParams) Set(val *ObjectIdentifiersParams) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectIdentifiersParams) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectIdentifiersParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectIdentifiersParams(val *ObjectIdentifiersParams) *NullableObjectIdentifiersParams {
	return &NullableObjectIdentifiersParams{value: val, isSet: true}
}

func (v NullableObjectIdentifiersParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectIdentifiersParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


