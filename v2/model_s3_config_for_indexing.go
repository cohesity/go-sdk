/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the S3ConfigForIndexing type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &S3ConfigForIndexing{}

// S3ConfigForIndexing S3 config for indexing in DMaaS (AWS CE).
type S3ConfigForIndexing struct {
	// Name of S3 bucket to store indexed data.
	S3BucketName NullableString `json:"s3BucketName"`
	// IAM role ARN which has access to S3 instance.
	S3IamRoleArn NullableString `json:"s3IamRoleArn"`
	// Prefix under S3 bucket where data will be stored.
	S3Prefix NullableString `json:"s3Prefix"`
}

type _S3ConfigForIndexing S3ConfigForIndexing

// NewS3ConfigForIndexing instantiates a new S3ConfigForIndexing object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3ConfigForIndexing(s3BucketName NullableString, s3IamRoleArn NullableString, s3Prefix NullableString) *S3ConfigForIndexing {
	this := S3ConfigForIndexing{}
	this.S3BucketName = s3BucketName
	this.S3IamRoleArn = s3IamRoleArn
	this.S3Prefix = s3Prefix
	return &this
}

// NewS3ConfigForIndexingWithDefaults instantiates a new S3ConfigForIndexing object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3ConfigForIndexingWithDefaults() *S3ConfigForIndexing {
	this := S3ConfigForIndexing{}
	return &this
}

// GetS3BucketName returns the S3BucketName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3ConfigForIndexing) GetS3BucketName() string {
	if o == nil || o.S3BucketName.Get() == nil {
		var ret string
		return ret
	}

	return *o.S3BucketName.Get()
}

// GetS3BucketNameOk returns a tuple with the S3BucketName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3ConfigForIndexing) GetS3BucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3BucketName.Get(), o.S3BucketName.IsSet()
}

// SetS3BucketName sets field value
func (o *S3ConfigForIndexing) SetS3BucketName(v string) {
	o.S3BucketName.Set(&v)
}

// GetS3IamRoleArn returns the S3IamRoleArn field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3ConfigForIndexing) GetS3IamRoleArn() string {
	if o == nil || o.S3IamRoleArn.Get() == nil {
		var ret string
		return ret
	}

	return *o.S3IamRoleArn.Get()
}

// GetS3IamRoleArnOk returns a tuple with the S3IamRoleArn field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3ConfigForIndexing) GetS3IamRoleArnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3IamRoleArn.Get(), o.S3IamRoleArn.IsSet()
}

// SetS3IamRoleArn sets field value
func (o *S3ConfigForIndexing) SetS3IamRoleArn(v string) {
	o.S3IamRoleArn.Set(&v)
}

// GetS3Prefix returns the S3Prefix field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3ConfigForIndexing) GetS3Prefix() string {
	if o == nil || o.S3Prefix.Get() == nil {
		var ret string
		return ret
	}

	return *o.S3Prefix.Get()
}

// GetS3PrefixOk returns a tuple with the S3Prefix field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3ConfigForIndexing) GetS3PrefixOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3Prefix.Get(), o.S3Prefix.IsSet()
}

// SetS3Prefix sets field value
func (o *S3ConfigForIndexing) SetS3Prefix(v string) {
	o.S3Prefix.Set(&v)
}

func (o S3ConfigForIndexing) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o S3ConfigForIndexing) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["s3BucketName"] = o.S3BucketName.Get()
	toSerialize["s3IamRoleArn"] = o.S3IamRoleArn.Get()
	toSerialize["s3Prefix"] = o.S3Prefix.Get()
	return toSerialize, nil
}

func (o *S3ConfigForIndexing) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"s3BucketName",
		"s3IamRoleArn",
		"s3Prefix",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varS3ConfigForIndexing := _S3ConfigForIndexing{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varS3ConfigForIndexing)

	if err != nil {
		return err
	}

	*o = S3ConfigForIndexing(varS3ConfigForIndexing)

	return err
}

type NullableS3ConfigForIndexing struct {
	value *S3ConfigForIndexing
	isSet bool
}

func (v NullableS3ConfigForIndexing) Get() *S3ConfigForIndexing {
	return v.value
}

func (v *NullableS3ConfigForIndexing) Set(val *S3ConfigForIndexing) {
	v.value = val
	v.isSet = true
}

func (v NullableS3ConfigForIndexing) IsSet() bool {
	return v.isSet
}

func (v *NullableS3ConfigForIndexing) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3ConfigForIndexing(val *S3ConfigForIndexing) *NullableS3ConfigForIndexing {
	return &NullableS3ConfigForIndexing{value: val, isSet: true}
}

func (v NullableS3ConfigForIndexing) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3ConfigForIndexing) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


