/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NfsConfigNfsRootSquash type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NfsConfigNfsRootSquash{}

// NfsConfigNfsRootSquash Specifies the NFS root squash config.
type NfsConfigNfsRootSquash struct {
	// GID mapped for all clients.
	Gid NullableInt32 `json:"gid,omitempty"`
	// UID mapped for all clients.
	Uid NullableInt32 `json:"uid,omitempty"`
}

// NewNfsConfigNfsRootSquash instantiates a new NfsConfigNfsRootSquash object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfsConfigNfsRootSquash() *NfsConfigNfsRootSquash {
	this := NfsConfigNfsRootSquash{}
	return &this
}

// NewNfsConfigNfsRootSquashWithDefaults instantiates a new NfsConfigNfsRootSquash object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfsConfigNfsRootSquashWithDefaults() *NfsConfigNfsRootSquash {
	this := NfsConfigNfsRootSquash{}
	return &this
}

// GetGid returns the Gid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NfsConfigNfsRootSquash) GetGid() int32 {
	if o == nil || IsNil(o.Gid.Get()) {
		var ret int32
		return ret
	}
	return *o.Gid.Get()
}

// GetGidOk returns a tuple with the Gid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsConfigNfsRootSquash) GetGidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Gid.Get(), o.Gid.IsSet()
}

// HasGid returns a boolean if a field has been set.
func (o *NfsConfigNfsRootSquash) HasGid() bool {
	if o != nil && o.Gid.IsSet() {
		return true
	}

	return false
}

// SetGid gets a reference to the given NullableInt32 and assigns it to the Gid field.
func (o *NfsConfigNfsRootSquash) SetGid(v int32) {
	o.Gid.Set(&v)
}
// SetGidNil sets the value for Gid to be an explicit nil
func (o *NfsConfigNfsRootSquash) SetGidNil() {
	o.Gid.Set(nil)
}

// UnsetGid ensures that no value is present for Gid, not even an explicit nil
func (o *NfsConfigNfsRootSquash) UnsetGid() {
	o.Gid.Unset()
}

// GetUid returns the Uid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NfsConfigNfsRootSquash) GetUid() int32 {
	if o == nil || IsNil(o.Uid.Get()) {
		var ret int32
		return ret
	}
	return *o.Uid.Get()
}

// GetUidOk returns a tuple with the Uid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsConfigNfsRootSquash) GetUidOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uid.Get(), o.Uid.IsSet()
}

// HasUid returns a boolean if a field has been set.
func (o *NfsConfigNfsRootSquash) HasUid() bool {
	if o != nil && o.Uid.IsSet() {
		return true
	}

	return false
}

// SetUid gets a reference to the given NullableInt32 and assigns it to the Uid field.
func (o *NfsConfigNfsRootSquash) SetUid(v int32) {
	o.Uid.Set(&v)
}
// SetUidNil sets the value for Uid to be an explicit nil
func (o *NfsConfigNfsRootSquash) SetUidNil() {
	o.Uid.Set(nil)
}

// UnsetUid ensures that no value is present for Uid, not even an explicit nil
func (o *NfsConfigNfsRootSquash) UnsetUid() {
	o.Uid.Unset()
}

func (o NfsConfigNfsRootSquash) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NfsConfigNfsRootSquash) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Gid.IsSet() {
		toSerialize["gid"] = o.Gid.Get()
	}
	if o.Uid.IsSet() {
		toSerialize["uid"] = o.Uid.Get()
	}
	return toSerialize, nil
}

type NullableNfsConfigNfsRootSquash struct {
	value *NfsConfigNfsRootSquash
	isSet bool
}

func (v NullableNfsConfigNfsRootSquash) Get() *NfsConfigNfsRootSquash {
	return v.value
}

func (v *NullableNfsConfigNfsRootSquash) Set(val *NfsConfigNfsRootSquash) {
	v.value = val
	v.isSet = true
}

func (v NullableNfsConfigNfsRootSquash) IsSet() bool {
	return v.isSet
}

func (v *NullableNfsConfigNfsRootSquash) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfsConfigNfsRootSquash(val *NfsConfigNfsRootSquash) *NullableNfsConfigNfsRootSquash {
	return &NullableNfsConfigNfsRootSquash{value: val, isSet: true}
}

func (v NullableNfsConfigNfsRootSquash) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfsConfigNfsRootSquash) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


