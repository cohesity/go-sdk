/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the MfaParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MfaParams{}

// MfaParams Specifies the multi-factor authentication params.
type MfaParams struct {
	// Specifies OTP code for MFA verification.
	OtpCode NullableString `json:"otpCode,omitempty"`
	// Specifies the list of mechanism to receive the OTP code. Supported types are: TOTP (Helios OnPrem Only) -> Time based OTP. Email OTP (Helios OnPrem Only) -> OTP via Email.
	OtpType NullableString `json:"otpType,omitempty"`
}

// NewMfaParams instantiates a new MfaParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMfaParams() *MfaParams {
	this := MfaParams{}
	return &this
}

// NewMfaParamsWithDefaults instantiates a new MfaParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMfaParamsWithDefaults() *MfaParams {
	this := MfaParams{}
	return &this
}

// GetOtpCode returns the OtpCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MfaParams) GetOtpCode() string {
	if o == nil || IsNil(o.OtpCode.Get()) {
		var ret string
		return ret
	}
	return *o.OtpCode.Get()
}

// GetOtpCodeOk returns a tuple with the OtpCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MfaParams) GetOtpCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtpCode.Get(), o.OtpCode.IsSet()
}

// HasOtpCode returns a boolean if a field has been set.
func (o *MfaParams) HasOtpCode() bool {
	if o != nil && o.OtpCode.IsSet() {
		return true
	}

	return false
}

// SetOtpCode gets a reference to the given NullableString and assigns it to the OtpCode field.
func (o *MfaParams) SetOtpCode(v string) {
	o.OtpCode.Set(&v)
}
// SetOtpCodeNil sets the value for OtpCode to be an explicit nil
func (o *MfaParams) SetOtpCodeNil() {
	o.OtpCode.Set(nil)
}

// UnsetOtpCode ensures that no value is present for OtpCode, not even an explicit nil
func (o *MfaParams) UnsetOtpCode() {
	o.OtpCode.Unset()
}

// GetOtpType returns the OtpType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MfaParams) GetOtpType() string {
	if o == nil || IsNil(o.OtpType.Get()) {
		var ret string
		return ret
	}
	return *o.OtpType.Get()
}

// GetOtpTypeOk returns a tuple with the OtpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MfaParams) GetOtpTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OtpType.Get(), o.OtpType.IsSet()
}

// HasOtpType returns a boolean if a field has been set.
func (o *MfaParams) HasOtpType() bool {
	if o != nil && o.OtpType.IsSet() {
		return true
	}

	return false
}

// SetOtpType gets a reference to the given NullableString and assigns it to the OtpType field.
func (o *MfaParams) SetOtpType(v string) {
	o.OtpType.Set(&v)
}
// SetOtpTypeNil sets the value for OtpType to be an explicit nil
func (o *MfaParams) SetOtpTypeNil() {
	o.OtpType.Set(nil)
}

// UnsetOtpType ensures that no value is present for OtpType, not even an explicit nil
func (o *MfaParams) UnsetOtpType() {
	o.OtpType.Unset()
}

func (o MfaParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MfaParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.OtpCode.IsSet() {
		toSerialize["otpCode"] = o.OtpCode.Get()
	}
	if o.OtpType.IsSet() {
		toSerialize["otpType"] = o.OtpType.Get()
	}
	return toSerialize, nil
}

type NullableMfaParams struct {
	value *MfaParams
	isSet bool
}

func (v NullableMfaParams) Get() *MfaParams {
	return v.value
}

func (v *NullableMfaParams) Set(val *MfaParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMfaParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMfaParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMfaParams(val *MfaParams) *NullableMfaParams {
	return &NullableMfaParams{value: val, isSet: true}
}

func (v NullableMfaParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMfaParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


