/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FreeNodeInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FreeNodeInformation{}

// FreeNodeInformation Specifies the Metadata of a free Node on the network
type FreeNodeInformation struct {
	// Deprecated - This field is deprecated, use connectedTo field.
	CanConnect NullableBool `json:"canConnect,omitempty"`
	// Specifies the model number of the Chassis the Node is installed in.
	ChassisModel NullableString `json:"chassisModel,omitempty"`
	// Specifies the serial number of the Chassis the Node is installed in.
	ChassisSerial NullableString `json:"chassisSerial,omitempty"`
	// Specifies if this is the node from where this API response was received.
	ConnectedTo NullableBool `json:"connectedTo,omitempty"`
	// Specifies the host name of the node.
	Hostname NullableString `json:"hostname,omitempty"`
	// Specifies the ID of the node.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the IPMI IP of the Node.
	IpmiIp NullableString `json:"ipmiIp,omitempty"`
	// List of discovered ipv4/ipv6 addresses of the node. Ip field returns ips as comma separated single string which is incorrect.
	Ips []string `json:"ips,omitempty"`
	// Specifies the node model.
	NodeModel NullableString `json:"nodeModel,omitempty"`
	// Specifies the serial number of the Node.
	NodeSerial NullableString `json:"nodeSerial,omitempty"`
	// Specifies the position for the UI to display the Node in the Cluster creation page.
	NodeUiSlot NullableString `json:"nodeUiSlot,omitempty"`
	// Specifies the number of Node slots present in the Chassis where this Node is installed.
	NumSlotsInChassis NullableInt32 `json:"numSlotsInChassis,omitempty"`
	// IPv4 addresses in primary interface's LAN.
	PrimaryIPv4Address NullableString `json:"primaryIPv4Address,omitempty"`
	// IPv6 addresses in primary interface's LAN.
	PrimaryIPv6Address NullableString `json:"primaryIPv6Address,omitempty"`
	// Specifies the product model of the node.
	ProductModel NullableString `json:"productModel,omitempty"`
	// Specifies the number of the slot the Node is installed in.
	SlotNumber NullableString `json:"slotNumber,omitempty"`
	// Specifies the version of the software installed on the Node.
	SoftwareVersion NullableString `json:"softwareVersion,omitempty"`
}

// NewFreeNodeInformation instantiates a new FreeNodeInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFreeNodeInformation() *FreeNodeInformation {
	this := FreeNodeInformation{}
	return &this
}

// NewFreeNodeInformationWithDefaults instantiates a new FreeNodeInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFreeNodeInformationWithDefaults() *FreeNodeInformation {
	this := FreeNodeInformation{}
	return &this
}

// GetCanConnect returns the CanConnect field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetCanConnect() bool {
	if o == nil || IsNil(o.CanConnect.Get()) {
		var ret bool
		return ret
	}
	return *o.CanConnect.Get()
}

// GetCanConnectOk returns a tuple with the CanConnect field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetCanConnectOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CanConnect.Get(), o.CanConnect.IsSet()
}

// HasCanConnect returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasCanConnect() bool {
	if o != nil && o.CanConnect.IsSet() {
		return true
	}

	return false
}

// SetCanConnect gets a reference to the given NullableBool and assigns it to the CanConnect field.
func (o *FreeNodeInformation) SetCanConnect(v bool) {
	o.CanConnect.Set(&v)
}
// SetCanConnectNil sets the value for CanConnect to be an explicit nil
func (o *FreeNodeInformation) SetCanConnectNil() {
	o.CanConnect.Set(nil)
}

// UnsetCanConnect ensures that no value is present for CanConnect, not even an explicit nil
func (o *FreeNodeInformation) UnsetCanConnect() {
	o.CanConnect.Unset()
}

// GetChassisModel returns the ChassisModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetChassisModel() string {
	if o == nil || IsNil(o.ChassisModel.Get()) {
		var ret string
		return ret
	}
	return *o.ChassisModel.Get()
}

// GetChassisModelOk returns a tuple with the ChassisModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetChassisModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChassisModel.Get(), o.ChassisModel.IsSet()
}

// HasChassisModel returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasChassisModel() bool {
	if o != nil && o.ChassisModel.IsSet() {
		return true
	}

	return false
}

// SetChassisModel gets a reference to the given NullableString and assigns it to the ChassisModel field.
func (o *FreeNodeInformation) SetChassisModel(v string) {
	o.ChassisModel.Set(&v)
}
// SetChassisModelNil sets the value for ChassisModel to be an explicit nil
func (o *FreeNodeInformation) SetChassisModelNil() {
	o.ChassisModel.Set(nil)
}

// UnsetChassisModel ensures that no value is present for ChassisModel, not even an explicit nil
func (o *FreeNodeInformation) UnsetChassisModel() {
	o.ChassisModel.Unset()
}

// GetChassisSerial returns the ChassisSerial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetChassisSerial() string {
	if o == nil || IsNil(o.ChassisSerial.Get()) {
		var ret string
		return ret
	}
	return *o.ChassisSerial.Get()
}

// GetChassisSerialOk returns a tuple with the ChassisSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetChassisSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChassisSerial.Get(), o.ChassisSerial.IsSet()
}

// HasChassisSerial returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasChassisSerial() bool {
	if o != nil && o.ChassisSerial.IsSet() {
		return true
	}

	return false
}

// SetChassisSerial gets a reference to the given NullableString and assigns it to the ChassisSerial field.
func (o *FreeNodeInformation) SetChassisSerial(v string) {
	o.ChassisSerial.Set(&v)
}
// SetChassisSerialNil sets the value for ChassisSerial to be an explicit nil
func (o *FreeNodeInformation) SetChassisSerialNil() {
	o.ChassisSerial.Set(nil)
}

// UnsetChassisSerial ensures that no value is present for ChassisSerial, not even an explicit nil
func (o *FreeNodeInformation) UnsetChassisSerial() {
	o.ChassisSerial.Unset()
}

// GetConnectedTo returns the ConnectedTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetConnectedTo() bool {
	if o == nil || IsNil(o.ConnectedTo.Get()) {
		var ret bool
		return ret
	}
	return *o.ConnectedTo.Get()
}

// GetConnectedToOk returns a tuple with the ConnectedTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetConnectedToOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectedTo.Get(), o.ConnectedTo.IsSet()
}

// HasConnectedTo returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasConnectedTo() bool {
	if o != nil && o.ConnectedTo.IsSet() {
		return true
	}

	return false
}

// SetConnectedTo gets a reference to the given NullableBool and assigns it to the ConnectedTo field.
func (o *FreeNodeInformation) SetConnectedTo(v bool) {
	o.ConnectedTo.Set(&v)
}
// SetConnectedToNil sets the value for ConnectedTo to be an explicit nil
func (o *FreeNodeInformation) SetConnectedToNil() {
	o.ConnectedTo.Set(nil)
}

// UnsetConnectedTo ensures that no value is present for ConnectedTo, not even an explicit nil
func (o *FreeNodeInformation) UnsetConnectedTo() {
	o.ConnectedTo.Unset()
}

// GetHostname returns the Hostname field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetHostname() string {
	if o == nil || IsNil(o.Hostname.Get()) {
		var ret string
		return ret
	}
	return *o.Hostname.Get()
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetHostnameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hostname.Get(), o.Hostname.IsSet()
}

// HasHostname returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasHostname() bool {
	if o != nil && o.Hostname.IsSet() {
		return true
	}

	return false
}

// SetHostname gets a reference to the given NullableString and assigns it to the Hostname field.
func (o *FreeNodeInformation) SetHostname(v string) {
	o.Hostname.Set(&v)
}
// SetHostnameNil sets the value for Hostname to be an explicit nil
func (o *FreeNodeInformation) SetHostnameNil() {
	o.Hostname.Set(nil)
}

// UnsetHostname ensures that no value is present for Hostname, not even an explicit nil
func (o *FreeNodeInformation) UnsetHostname() {
	o.Hostname.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *FreeNodeInformation) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *FreeNodeInformation) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *FreeNodeInformation) UnsetId() {
	o.Id.Unset()
}

// GetIpmiIp returns the IpmiIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetIpmiIp() string {
	if o == nil || IsNil(o.IpmiIp.Get()) {
		var ret string
		return ret
	}
	return *o.IpmiIp.Get()
}

// GetIpmiIpOk returns a tuple with the IpmiIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetIpmiIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpmiIp.Get(), o.IpmiIp.IsSet()
}

// HasIpmiIp returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasIpmiIp() bool {
	if o != nil && o.IpmiIp.IsSet() {
		return true
	}

	return false
}

// SetIpmiIp gets a reference to the given NullableString and assigns it to the IpmiIp field.
func (o *FreeNodeInformation) SetIpmiIp(v string) {
	o.IpmiIp.Set(&v)
}
// SetIpmiIpNil sets the value for IpmiIp to be an explicit nil
func (o *FreeNodeInformation) SetIpmiIpNil() {
	o.IpmiIp.Set(nil)
}

// UnsetIpmiIp ensures that no value is present for IpmiIp, not even an explicit nil
func (o *FreeNodeInformation) UnsetIpmiIp() {
	o.IpmiIp.Unset()
}

// GetIps returns the Ips field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetIps() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Ips
}

// GetIpsOk returns a tuple with the Ips field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetIpsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ips) {
		return nil, false
	}
	return o.Ips, true
}

// HasIps returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasIps() bool {
	if o != nil && !IsNil(o.Ips) {
		return true
	}

	return false
}

// SetIps gets a reference to the given []string and assigns it to the Ips field.
func (o *FreeNodeInformation) SetIps(v []string) {
	o.Ips = v
}

// GetNodeModel returns the NodeModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetNodeModel() string {
	if o == nil || IsNil(o.NodeModel.Get()) {
		var ret string
		return ret
	}
	return *o.NodeModel.Get()
}

// GetNodeModelOk returns a tuple with the NodeModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetNodeModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeModel.Get(), o.NodeModel.IsSet()
}

// HasNodeModel returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasNodeModel() bool {
	if o != nil && o.NodeModel.IsSet() {
		return true
	}

	return false
}

// SetNodeModel gets a reference to the given NullableString and assigns it to the NodeModel field.
func (o *FreeNodeInformation) SetNodeModel(v string) {
	o.NodeModel.Set(&v)
}
// SetNodeModelNil sets the value for NodeModel to be an explicit nil
func (o *FreeNodeInformation) SetNodeModelNil() {
	o.NodeModel.Set(nil)
}

// UnsetNodeModel ensures that no value is present for NodeModel, not even an explicit nil
func (o *FreeNodeInformation) UnsetNodeModel() {
	o.NodeModel.Unset()
}

// GetNodeSerial returns the NodeSerial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetNodeSerial() string {
	if o == nil || IsNil(o.NodeSerial.Get()) {
		var ret string
		return ret
	}
	return *o.NodeSerial.Get()
}

// GetNodeSerialOk returns a tuple with the NodeSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetNodeSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeSerial.Get(), o.NodeSerial.IsSet()
}

// HasNodeSerial returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasNodeSerial() bool {
	if o != nil && o.NodeSerial.IsSet() {
		return true
	}

	return false
}

// SetNodeSerial gets a reference to the given NullableString and assigns it to the NodeSerial field.
func (o *FreeNodeInformation) SetNodeSerial(v string) {
	o.NodeSerial.Set(&v)
}
// SetNodeSerialNil sets the value for NodeSerial to be an explicit nil
func (o *FreeNodeInformation) SetNodeSerialNil() {
	o.NodeSerial.Set(nil)
}

// UnsetNodeSerial ensures that no value is present for NodeSerial, not even an explicit nil
func (o *FreeNodeInformation) UnsetNodeSerial() {
	o.NodeSerial.Unset()
}

// GetNodeUiSlot returns the NodeUiSlot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetNodeUiSlot() string {
	if o == nil || IsNil(o.NodeUiSlot.Get()) {
		var ret string
		return ret
	}
	return *o.NodeUiSlot.Get()
}

// GetNodeUiSlotOk returns a tuple with the NodeUiSlot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetNodeUiSlotOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeUiSlot.Get(), o.NodeUiSlot.IsSet()
}

// HasNodeUiSlot returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasNodeUiSlot() bool {
	if o != nil && o.NodeUiSlot.IsSet() {
		return true
	}

	return false
}

// SetNodeUiSlot gets a reference to the given NullableString and assigns it to the NodeUiSlot field.
func (o *FreeNodeInformation) SetNodeUiSlot(v string) {
	o.NodeUiSlot.Set(&v)
}
// SetNodeUiSlotNil sets the value for NodeUiSlot to be an explicit nil
func (o *FreeNodeInformation) SetNodeUiSlotNil() {
	o.NodeUiSlot.Set(nil)
}

// UnsetNodeUiSlot ensures that no value is present for NodeUiSlot, not even an explicit nil
func (o *FreeNodeInformation) UnsetNodeUiSlot() {
	o.NodeUiSlot.Unset()
}

// GetNumSlotsInChassis returns the NumSlotsInChassis field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetNumSlotsInChassis() int32 {
	if o == nil || IsNil(o.NumSlotsInChassis.Get()) {
		var ret int32
		return ret
	}
	return *o.NumSlotsInChassis.Get()
}

// GetNumSlotsInChassisOk returns a tuple with the NumSlotsInChassis field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetNumSlotsInChassisOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumSlotsInChassis.Get(), o.NumSlotsInChassis.IsSet()
}

// HasNumSlotsInChassis returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasNumSlotsInChassis() bool {
	if o != nil && o.NumSlotsInChassis.IsSet() {
		return true
	}

	return false
}

// SetNumSlotsInChassis gets a reference to the given NullableInt32 and assigns it to the NumSlotsInChassis field.
func (o *FreeNodeInformation) SetNumSlotsInChassis(v int32) {
	o.NumSlotsInChassis.Set(&v)
}
// SetNumSlotsInChassisNil sets the value for NumSlotsInChassis to be an explicit nil
func (o *FreeNodeInformation) SetNumSlotsInChassisNil() {
	o.NumSlotsInChassis.Set(nil)
}

// UnsetNumSlotsInChassis ensures that no value is present for NumSlotsInChassis, not even an explicit nil
func (o *FreeNodeInformation) UnsetNumSlotsInChassis() {
	o.NumSlotsInChassis.Unset()
}

// GetPrimaryIPv4Address returns the PrimaryIPv4Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetPrimaryIPv4Address() string {
	if o == nil || IsNil(o.PrimaryIPv4Address.Get()) {
		var ret string
		return ret
	}
	return *o.PrimaryIPv4Address.Get()
}

// GetPrimaryIPv4AddressOk returns a tuple with the PrimaryIPv4Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetPrimaryIPv4AddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryIPv4Address.Get(), o.PrimaryIPv4Address.IsSet()
}

// HasPrimaryIPv4Address returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasPrimaryIPv4Address() bool {
	if o != nil && o.PrimaryIPv4Address.IsSet() {
		return true
	}

	return false
}

// SetPrimaryIPv4Address gets a reference to the given NullableString and assigns it to the PrimaryIPv4Address field.
func (o *FreeNodeInformation) SetPrimaryIPv4Address(v string) {
	o.PrimaryIPv4Address.Set(&v)
}
// SetPrimaryIPv4AddressNil sets the value for PrimaryIPv4Address to be an explicit nil
func (o *FreeNodeInformation) SetPrimaryIPv4AddressNil() {
	o.PrimaryIPv4Address.Set(nil)
}

// UnsetPrimaryIPv4Address ensures that no value is present for PrimaryIPv4Address, not even an explicit nil
func (o *FreeNodeInformation) UnsetPrimaryIPv4Address() {
	o.PrimaryIPv4Address.Unset()
}

// GetPrimaryIPv6Address returns the PrimaryIPv6Address field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetPrimaryIPv6Address() string {
	if o == nil || IsNil(o.PrimaryIPv6Address.Get()) {
		var ret string
		return ret
	}
	return *o.PrimaryIPv6Address.Get()
}

// GetPrimaryIPv6AddressOk returns a tuple with the PrimaryIPv6Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetPrimaryIPv6AddressOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PrimaryIPv6Address.Get(), o.PrimaryIPv6Address.IsSet()
}

// HasPrimaryIPv6Address returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasPrimaryIPv6Address() bool {
	if o != nil && o.PrimaryIPv6Address.IsSet() {
		return true
	}

	return false
}

// SetPrimaryIPv6Address gets a reference to the given NullableString and assigns it to the PrimaryIPv6Address field.
func (o *FreeNodeInformation) SetPrimaryIPv6Address(v string) {
	o.PrimaryIPv6Address.Set(&v)
}
// SetPrimaryIPv6AddressNil sets the value for PrimaryIPv6Address to be an explicit nil
func (o *FreeNodeInformation) SetPrimaryIPv6AddressNil() {
	o.PrimaryIPv6Address.Set(nil)
}

// UnsetPrimaryIPv6Address ensures that no value is present for PrimaryIPv6Address, not even an explicit nil
func (o *FreeNodeInformation) UnsetPrimaryIPv6Address() {
	o.PrimaryIPv6Address.Unset()
}

// GetProductModel returns the ProductModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetProductModel() string {
	if o == nil || IsNil(o.ProductModel.Get()) {
		var ret string
		return ret
	}
	return *o.ProductModel.Get()
}

// GetProductModelOk returns a tuple with the ProductModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetProductModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductModel.Get(), o.ProductModel.IsSet()
}

// HasProductModel returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasProductModel() bool {
	if o != nil && o.ProductModel.IsSet() {
		return true
	}

	return false
}

// SetProductModel gets a reference to the given NullableString and assigns it to the ProductModel field.
func (o *FreeNodeInformation) SetProductModel(v string) {
	o.ProductModel.Set(&v)
}
// SetProductModelNil sets the value for ProductModel to be an explicit nil
func (o *FreeNodeInformation) SetProductModelNil() {
	o.ProductModel.Set(nil)
}

// UnsetProductModel ensures that no value is present for ProductModel, not even an explicit nil
func (o *FreeNodeInformation) UnsetProductModel() {
	o.ProductModel.Unset()
}

// GetSlotNumber returns the SlotNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetSlotNumber() string {
	if o == nil || IsNil(o.SlotNumber.Get()) {
		var ret string
		return ret
	}
	return *o.SlotNumber.Get()
}

// GetSlotNumberOk returns a tuple with the SlotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetSlotNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SlotNumber.Get(), o.SlotNumber.IsSet()
}

// HasSlotNumber returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasSlotNumber() bool {
	if o != nil && o.SlotNumber.IsSet() {
		return true
	}

	return false
}

// SetSlotNumber gets a reference to the given NullableString and assigns it to the SlotNumber field.
func (o *FreeNodeInformation) SetSlotNumber(v string) {
	o.SlotNumber.Set(&v)
}
// SetSlotNumberNil sets the value for SlotNumber to be an explicit nil
func (o *FreeNodeInformation) SetSlotNumberNil() {
	o.SlotNumber.Set(nil)
}

// UnsetSlotNumber ensures that no value is present for SlotNumber, not even an explicit nil
func (o *FreeNodeInformation) UnsetSlotNumber() {
	o.SlotNumber.Unset()
}

// GetSoftwareVersion returns the SoftwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FreeNodeInformation) GetSoftwareVersion() string {
	if o == nil || IsNil(o.SoftwareVersion.Get()) {
		var ret string
		return ret
	}
	return *o.SoftwareVersion.Get()
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FreeNodeInformation) GetSoftwareVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SoftwareVersion.Get(), o.SoftwareVersion.IsSet()
}

// HasSoftwareVersion returns a boolean if a field has been set.
func (o *FreeNodeInformation) HasSoftwareVersion() bool {
	if o != nil && o.SoftwareVersion.IsSet() {
		return true
	}

	return false
}

// SetSoftwareVersion gets a reference to the given NullableString and assigns it to the SoftwareVersion field.
func (o *FreeNodeInformation) SetSoftwareVersion(v string) {
	o.SoftwareVersion.Set(&v)
}
// SetSoftwareVersionNil sets the value for SoftwareVersion to be an explicit nil
func (o *FreeNodeInformation) SetSoftwareVersionNil() {
	o.SoftwareVersion.Set(nil)
}

// UnsetSoftwareVersion ensures that no value is present for SoftwareVersion, not even an explicit nil
func (o *FreeNodeInformation) UnsetSoftwareVersion() {
	o.SoftwareVersion.Unset()
}

func (o FreeNodeInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FreeNodeInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CanConnect.IsSet() {
		toSerialize["canConnect"] = o.CanConnect.Get()
	}
	if o.ChassisModel.IsSet() {
		toSerialize["chassisModel"] = o.ChassisModel.Get()
	}
	if o.ChassisSerial.IsSet() {
		toSerialize["chassisSerial"] = o.ChassisSerial.Get()
	}
	if o.ConnectedTo.IsSet() {
		toSerialize["connectedTo"] = o.ConnectedTo.Get()
	}
	if o.Hostname.IsSet() {
		toSerialize["hostname"] = o.Hostname.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IpmiIp.IsSet() {
		toSerialize["ipmiIp"] = o.IpmiIp.Get()
	}
	if o.Ips != nil {
		toSerialize["ips"] = o.Ips
	}
	if o.NodeModel.IsSet() {
		toSerialize["nodeModel"] = o.NodeModel.Get()
	}
	if o.NodeSerial.IsSet() {
		toSerialize["nodeSerial"] = o.NodeSerial.Get()
	}
	if o.NodeUiSlot.IsSet() {
		toSerialize["nodeUiSlot"] = o.NodeUiSlot.Get()
	}
	if o.NumSlotsInChassis.IsSet() {
		toSerialize["numSlotsInChassis"] = o.NumSlotsInChassis.Get()
	}
	if o.PrimaryIPv4Address.IsSet() {
		toSerialize["primaryIPv4Address"] = o.PrimaryIPv4Address.Get()
	}
	if o.PrimaryIPv6Address.IsSet() {
		toSerialize["primaryIPv6Address"] = o.PrimaryIPv6Address.Get()
	}
	if o.ProductModel.IsSet() {
		toSerialize["productModel"] = o.ProductModel.Get()
	}
	if o.SlotNumber.IsSet() {
		toSerialize["slotNumber"] = o.SlotNumber.Get()
	}
	if o.SoftwareVersion.IsSet() {
		toSerialize["softwareVersion"] = o.SoftwareVersion.Get()
	}
	return toSerialize, nil
}

type NullableFreeNodeInformation struct {
	value *FreeNodeInformation
	isSet bool
}

func (v NullableFreeNodeInformation) Get() *FreeNodeInformation {
	return v.value
}

func (v *NullableFreeNodeInformation) Set(val *FreeNodeInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableFreeNodeInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableFreeNodeInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFreeNodeInformation(val *FreeNodeInformation) *NullableFreeNodeInformation {
	return &NullableFreeNodeInformation{value: val, isSet: true}
}

func (v NullableFreeNodeInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFreeNodeInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


