/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ResetIpmiBmcParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResetIpmiBmcParams{}

// ResetIpmiBmcParams Specifies the params to reset ipmi bmc.
type ResetIpmiBmcParams struct {
	// Specifies the node id of the node for which ipmi bmc needs to be reset. This parameter is incompatible with 'nodeIp'.
	NodeId NullableString `json:"nodeId,omitempty"`
	// Specifies the node id of the node for which ipmi bmc needs to be reset. This parameter is incompatible with 'nodeId'.
	NodeIp NullableString `json:"nodeIp,omitempty"`
}

// NewResetIpmiBmcParams instantiates a new ResetIpmiBmcParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResetIpmiBmcParams() *ResetIpmiBmcParams {
	this := ResetIpmiBmcParams{}
	return &this
}

// NewResetIpmiBmcParamsWithDefaults instantiates a new ResetIpmiBmcParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResetIpmiBmcParamsWithDefaults() *ResetIpmiBmcParams {
	this := ResetIpmiBmcParams{}
	return &this
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResetIpmiBmcParams) GetNodeId() string {
	if o == nil || IsNil(o.NodeId.Get()) {
		var ret string
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResetIpmiBmcParams) GetNodeIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *ResetIpmiBmcParams) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableString and assigns it to the NodeId field.
func (o *ResetIpmiBmcParams) SetNodeId(v string) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *ResetIpmiBmcParams) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *ResetIpmiBmcParams) UnsetNodeId() {
	o.NodeId.Unset()
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ResetIpmiBmcParams) GetNodeIp() string {
	if o == nil || IsNil(o.NodeIp.Get()) {
		var ret string
		return ret
	}
	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ResetIpmiBmcParams) GetNodeIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// HasNodeIp returns a boolean if a field has been set.
func (o *ResetIpmiBmcParams) HasNodeIp() bool {
	if o != nil && o.NodeIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given NullableString and assigns it to the NodeIp field.
func (o *ResetIpmiBmcParams) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}
// SetNodeIpNil sets the value for NodeIp to be an explicit nil
func (o *ResetIpmiBmcParams) SetNodeIpNil() {
	o.NodeIp.Set(nil)
}

// UnsetNodeIp ensures that no value is present for NodeIp, not even an explicit nil
func (o *ResetIpmiBmcParams) UnsetNodeIp() {
	o.NodeIp.Unset()
}

func (o ResetIpmiBmcParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResetIpmiBmcParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	if o.NodeIp.IsSet() {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	return toSerialize, nil
}

type NullableResetIpmiBmcParams struct {
	value *ResetIpmiBmcParams
	isSet bool
}

func (v NullableResetIpmiBmcParams) Get() *ResetIpmiBmcParams {
	return v.value
}

func (v *NullableResetIpmiBmcParams) Set(val *ResetIpmiBmcParams) {
	v.value = val
	v.isSet = true
}

func (v NullableResetIpmiBmcParams) IsSet() bool {
	return v.isSet
}

func (v *NullableResetIpmiBmcParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResetIpmiBmcParams(val *ResetIpmiBmcParams) *NullableResetIpmiBmcParams {
	return &NullableResetIpmiBmcParams{value: val, isSet: true}
}

func (v NullableResetIpmiBmcParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResetIpmiBmcParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


