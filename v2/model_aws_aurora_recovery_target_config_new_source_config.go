/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsAuroraRecoveryTargetConfigNewSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsAuroraRecoveryTargetConfigNewSourceConfig{}

// AwsAuroraRecoveryTargetConfigNewSourceConfig Specifies the new destination Source configuration parameters where the Aurora instances will be recovered. This is mandatory if recoverToNewSource is set to true.
type AwsAuroraRecoveryTargetConfigNewSourceConfig struct {
	NetworkConfig NullableRecoverAwsAuroraNewSourceConfigNetworkConfig `json:"networkConfig"`
	Region NullableRecoverAwsAuroraNewSourceConfigRegion `json:"region"`
	Source NullableRecoverAwsAuroraNewSourceConfigSource `json:"source"`
}

type _AwsAuroraRecoveryTargetConfigNewSourceConfig AwsAuroraRecoveryTargetConfigNewSourceConfig

// NewAwsAuroraRecoveryTargetConfigNewSourceConfig instantiates a new AwsAuroraRecoveryTargetConfigNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsAuroraRecoveryTargetConfigNewSourceConfig(networkConfig NullableRecoverAwsAuroraNewSourceConfigNetworkConfig, region NullableRecoverAwsAuroraNewSourceConfigRegion, source NullableRecoverAwsAuroraNewSourceConfigSource) *AwsAuroraRecoveryTargetConfigNewSourceConfig {
	this := AwsAuroraRecoveryTargetConfigNewSourceConfig{}
	this.NetworkConfig = networkConfig
	this.Region = region
	this.Source = source
	return &this
}

// NewAwsAuroraRecoveryTargetConfigNewSourceConfigWithDefaults instantiates a new AwsAuroraRecoveryTargetConfigNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsAuroraRecoveryTargetConfigNewSourceConfigWithDefaults() *AwsAuroraRecoveryTargetConfigNewSourceConfig {
	this := AwsAuroraRecoveryTargetConfigNewSourceConfig{}
	return &this
}

// GetNetworkConfig returns the NetworkConfig field value
// If the value is explicit nil, the zero value for RecoverAwsAuroraNewSourceConfigNetworkConfig will be returned
func (o *AwsAuroraRecoveryTargetConfigNewSourceConfig) GetNetworkConfig() RecoverAwsAuroraNewSourceConfigNetworkConfig {
	if o == nil || o.NetworkConfig.Get() == nil {
		var ret RecoverAwsAuroraNewSourceConfigNetworkConfig
		return ret
	}

	return *o.NetworkConfig.Get()
}

// GetNetworkConfigOk returns a tuple with the NetworkConfig field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsAuroraRecoveryTargetConfigNewSourceConfig) GetNetworkConfigOk() (*RecoverAwsAuroraNewSourceConfigNetworkConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NetworkConfig.Get(), o.NetworkConfig.IsSet()
}

// SetNetworkConfig sets field value
func (o *AwsAuroraRecoveryTargetConfigNewSourceConfig) SetNetworkConfig(v RecoverAwsAuroraNewSourceConfigNetworkConfig) {
	o.NetworkConfig.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for RecoverAwsAuroraNewSourceConfigRegion will be returned
func (o *AwsAuroraRecoveryTargetConfigNewSourceConfig) GetRegion() RecoverAwsAuroraNewSourceConfigRegion {
	if o == nil || o.Region.Get() == nil {
		var ret RecoverAwsAuroraNewSourceConfigRegion
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsAuroraRecoveryTargetConfigNewSourceConfig) GetRegionOk() (*RecoverAwsAuroraNewSourceConfigRegion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *AwsAuroraRecoveryTargetConfigNewSourceConfig) SetRegion(v RecoverAwsAuroraNewSourceConfigRegion) {
	o.Region.Set(&v)
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoverAwsAuroraNewSourceConfigSource will be returned
func (o *AwsAuroraRecoveryTargetConfigNewSourceConfig) GetSource() RecoverAwsAuroraNewSourceConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret RecoverAwsAuroraNewSourceConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsAuroraRecoveryTargetConfigNewSourceConfig) GetSourceOk() (*RecoverAwsAuroraNewSourceConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *AwsAuroraRecoveryTargetConfigNewSourceConfig) SetSource(v RecoverAwsAuroraNewSourceConfigSource) {
	o.Source.Set(&v)
}

func (o AwsAuroraRecoveryTargetConfigNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsAuroraRecoveryTargetConfigNewSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["networkConfig"] = o.NetworkConfig.Get()
	toSerialize["region"] = o.Region.Get()
	toSerialize["source"] = o.Source.Get()
	return toSerialize, nil
}

func (o *AwsAuroraRecoveryTargetConfigNewSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"networkConfig",
		"region",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsAuroraRecoveryTargetConfigNewSourceConfig := _AwsAuroraRecoveryTargetConfigNewSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsAuroraRecoveryTargetConfigNewSourceConfig)

	if err != nil {
		return err
	}

	*o = AwsAuroraRecoveryTargetConfigNewSourceConfig(varAwsAuroraRecoveryTargetConfigNewSourceConfig)

	return err
}

type NullableAwsAuroraRecoveryTargetConfigNewSourceConfig struct {
	value *AwsAuroraRecoveryTargetConfigNewSourceConfig
	isSet bool
}

func (v NullableAwsAuroraRecoveryTargetConfigNewSourceConfig) Get() *AwsAuroraRecoveryTargetConfigNewSourceConfig {
	return v.value
}

func (v *NullableAwsAuroraRecoveryTargetConfigNewSourceConfig) Set(val *AwsAuroraRecoveryTargetConfigNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsAuroraRecoveryTargetConfigNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsAuroraRecoveryTargetConfigNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsAuroraRecoveryTargetConfigNewSourceConfig(val *AwsAuroraRecoveryTargetConfigNewSourceConfig) *NullableAwsAuroraRecoveryTargetConfigNewSourceConfig {
	return &NullableAwsAuroraRecoveryTargetConfigNewSourceConfig{value: val, isSet: true}
}

func (v NullableAwsAuroraRecoveryTargetConfigNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsAuroraRecoveryTargetConfigNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


