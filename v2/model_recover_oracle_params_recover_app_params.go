/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverOracleParamsRecoverAppParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverOracleParamsRecoverAppParams{}

// RecoverOracleParamsRecoverAppParams Specifies the parameters to recover Oracle databases.
type RecoverOracleParamsRecoverAppParams struct {
	// Specifies the params for recovering to a oracle host. Provided oracle backup should be recovered to same type of target host. For Example: If you have oracle backup taken from a physical host then that should be recovered to physical host only.
	OracleTargetParams NullableOracleTargetParamsForRecoverOracleApp `json:"oracleTargetParams,omitempty"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	VlanConfig NullableRecoverKubernetesNamespaceParamsVlanConfig `json:"vlanConfig,omitempty"`
}

type _RecoverOracleParamsRecoverAppParams RecoverOracleParamsRecoverAppParams

// NewRecoverOracleParamsRecoverAppParams instantiates a new RecoverOracleParamsRecoverAppParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverOracleParamsRecoverAppParams(targetEnvironment string) *RecoverOracleParamsRecoverAppParams {
	this := RecoverOracleParamsRecoverAppParams{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverOracleParamsRecoverAppParamsWithDefaults instantiates a new RecoverOracleParamsRecoverAppParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverOracleParamsRecoverAppParamsWithDefaults() *RecoverOracleParamsRecoverAppParams {
	this := RecoverOracleParamsRecoverAppParams{}
	return &this
}

// GetOracleTargetParams returns the OracleTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleParamsRecoverAppParams) GetOracleTargetParams() OracleTargetParamsForRecoverOracleApp {
	if o == nil || IsNil(o.OracleTargetParams.Get()) {
		var ret OracleTargetParamsForRecoverOracleApp
		return ret
	}
	return *o.OracleTargetParams.Get()
}

// GetOracleTargetParamsOk returns a tuple with the OracleTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleParamsRecoverAppParams) GetOracleTargetParamsOk() (*OracleTargetParamsForRecoverOracleApp, bool) {
	if o == nil {
		return nil, false
	}
	return o.OracleTargetParams.Get(), o.OracleTargetParams.IsSet()
}

// HasOracleTargetParams returns a boolean if a field has been set.
func (o *RecoverOracleParamsRecoverAppParams) HasOracleTargetParams() bool {
	if o != nil && o.OracleTargetParams.IsSet() {
		return true
	}

	return false
}

// SetOracleTargetParams gets a reference to the given NullableOracleTargetParamsForRecoverOracleApp and assigns it to the OracleTargetParams field.
func (o *RecoverOracleParamsRecoverAppParams) SetOracleTargetParams(v OracleTargetParamsForRecoverOracleApp) {
	o.OracleTargetParams.Set(&v)
}
// SetOracleTargetParamsNil sets the value for OracleTargetParams to be an explicit nil
func (o *RecoverOracleParamsRecoverAppParams) SetOracleTargetParamsNil() {
	o.OracleTargetParams.Set(nil)
}

// UnsetOracleTargetParams ensures that no value is present for OracleTargetParams, not even an explicit nil
func (o *RecoverOracleParamsRecoverAppParams) UnsetOracleTargetParams() {
	o.OracleTargetParams.Unset()
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverOracleParamsRecoverAppParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverOracleParamsRecoverAppParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverOracleParamsRecoverAppParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetVlanConfig returns the VlanConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverOracleParamsRecoverAppParams) GetVlanConfig() RecoverKubernetesNamespaceParamsVlanConfig {
	if o == nil || IsNil(o.VlanConfig.Get()) {
		var ret RecoverKubernetesNamespaceParamsVlanConfig
		return ret
	}
	return *o.VlanConfig.Get()
}

// GetVlanConfigOk returns a tuple with the VlanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverOracleParamsRecoverAppParams) GetVlanConfigOk() (*RecoverKubernetesNamespaceParamsVlanConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.VlanConfig.Get(), o.VlanConfig.IsSet()
}

// HasVlanConfig returns a boolean if a field has been set.
func (o *RecoverOracleParamsRecoverAppParams) HasVlanConfig() bool {
	if o != nil && o.VlanConfig.IsSet() {
		return true
	}

	return false
}

// SetVlanConfig gets a reference to the given NullableRecoverKubernetesNamespaceParamsVlanConfig and assigns it to the VlanConfig field.
func (o *RecoverOracleParamsRecoverAppParams) SetVlanConfig(v RecoverKubernetesNamespaceParamsVlanConfig) {
	o.VlanConfig.Set(&v)
}
// SetVlanConfigNil sets the value for VlanConfig to be an explicit nil
func (o *RecoverOracleParamsRecoverAppParams) SetVlanConfigNil() {
	o.VlanConfig.Set(nil)
}

// UnsetVlanConfig ensures that no value is present for VlanConfig, not even an explicit nil
func (o *RecoverOracleParamsRecoverAppParams) UnsetVlanConfig() {
	o.VlanConfig.Unset()
}

func (o RecoverOracleParamsRecoverAppParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverOracleParamsRecoverAppParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.OracleTargetParams.IsSet() {
		toSerialize["oracleTargetParams"] = o.OracleTargetParams.Get()
	}
	toSerialize["targetEnvironment"] = o.TargetEnvironment
	if o.VlanConfig.IsSet() {
		toSerialize["vlanConfig"] = o.VlanConfig.Get()
	}
	return toSerialize, nil
}

func (o *RecoverOracleParamsRecoverAppParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetEnvironment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverOracleParamsRecoverAppParams := _RecoverOracleParamsRecoverAppParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverOracleParamsRecoverAppParams)

	if err != nil {
		return err
	}

	*o = RecoverOracleParamsRecoverAppParams(varRecoverOracleParamsRecoverAppParams)

	return err
}

type NullableRecoverOracleParamsRecoverAppParams struct {
	value *RecoverOracleParamsRecoverAppParams
	isSet bool
}

func (v NullableRecoverOracleParamsRecoverAppParams) Get() *RecoverOracleParamsRecoverAppParams {
	return v.value
}

func (v *NullableRecoverOracleParamsRecoverAppParams) Set(val *RecoverOracleParamsRecoverAppParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverOracleParamsRecoverAppParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverOracleParamsRecoverAppParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverOracleParamsRecoverAppParams(val *RecoverOracleParamsRecoverAppParams) *NullableRecoverOracleParamsRecoverAppParams {
	return &NullableRecoverOracleParamsRecoverAppParams{value: val, isSet: true}
}

func (v NullableRecoverOracleParamsRecoverAppParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverOracleParamsRecoverAppParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


