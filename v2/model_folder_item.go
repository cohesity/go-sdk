/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FolderItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderItem{}

// FolderItem Specifies an email folder to recover.
type FolderItem struct {
	// Specifies the email folder id.
	FolderId NullableString `json:"folderId,omitempty"`
	// Specifies a list of item ids to recover. This field is applicable only if 'recoverEntireFolder' is false.
	ItemIds []string `json:"itemIds,omitempty"`
	// Specifies the email folder key.
	Key NullableInt64 `json:"key,omitempty"`
	// Specifies whether to recover the whole email folder.
	RecoverEntireFolder NullableBool `json:"recoverEntireFolder,omitempty"`
}

// NewFolderItem instantiates a new FolderItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderItem() *FolderItem {
	this := FolderItem{}
	return &this
}

// NewFolderItemWithDefaults instantiates a new FolderItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderItemWithDefaults() *FolderItem {
	this := FolderItem{}
	return &this
}

// GetFolderId returns the FolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FolderItem) GetFolderId() string {
	if o == nil || IsNil(o.FolderId.Get()) {
		var ret string
		return ret
	}
	return *o.FolderId.Get()
}

// GetFolderIdOk returns a tuple with the FolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FolderItem) GetFolderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FolderId.Get(), o.FolderId.IsSet()
}

// HasFolderId returns a boolean if a field has been set.
func (o *FolderItem) HasFolderId() bool {
	if o != nil && o.FolderId.IsSet() {
		return true
	}

	return false
}

// SetFolderId gets a reference to the given NullableString and assigns it to the FolderId field.
func (o *FolderItem) SetFolderId(v string) {
	o.FolderId.Set(&v)
}
// SetFolderIdNil sets the value for FolderId to be an explicit nil
func (o *FolderItem) SetFolderIdNil() {
	o.FolderId.Set(nil)
}

// UnsetFolderId ensures that no value is present for FolderId, not even an explicit nil
func (o *FolderItem) UnsetFolderId() {
	o.FolderId.Unset()
}

// GetItemIds returns the ItemIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FolderItem) GetItemIds() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ItemIds
}

// GetItemIdsOk returns a tuple with the ItemIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FolderItem) GetItemIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.ItemIds) {
		return nil, false
	}
	return o.ItemIds, true
}

// HasItemIds returns a boolean if a field has been set.
func (o *FolderItem) HasItemIds() bool {
	if o != nil && !IsNil(o.ItemIds) {
		return true
	}

	return false
}

// SetItemIds gets a reference to the given []string and assigns it to the ItemIds field.
func (o *FolderItem) SetItemIds(v []string) {
	o.ItemIds = v
}

// GetKey returns the Key field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FolderItem) GetKey() int64 {
	if o == nil || IsNil(o.Key.Get()) {
		var ret int64
		return ret
	}
	return *o.Key.Get()
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FolderItem) GetKeyOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Key.Get(), o.Key.IsSet()
}

// HasKey returns a boolean if a field has been set.
func (o *FolderItem) HasKey() bool {
	if o != nil && o.Key.IsSet() {
		return true
	}

	return false
}

// SetKey gets a reference to the given NullableInt64 and assigns it to the Key field.
func (o *FolderItem) SetKey(v int64) {
	o.Key.Set(&v)
}
// SetKeyNil sets the value for Key to be an explicit nil
func (o *FolderItem) SetKeyNil() {
	o.Key.Set(nil)
}

// UnsetKey ensures that no value is present for Key, not even an explicit nil
func (o *FolderItem) UnsetKey() {
	o.Key.Unset()
}

// GetRecoverEntireFolder returns the RecoverEntireFolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FolderItem) GetRecoverEntireFolder() bool {
	if o == nil || IsNil(o.RecoverEntireFolder.Get()) {
		var ret bool
		return ret
	}
	return *o.RecoverEntireFolder.Get()
}

// GetRecoverEntireFolderOk returns a tuple with the RecoverEntireFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FolderItem) GetRecoverEntireFolderOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverEntireFolder.Get(), o.RecoverEntireFolder.IsSet()
}

// HasRecoverEntireFolder returns a boolean if a field has been set.
func (o *FolderItem) HasRecoverEntireFolder() bool {
	if o != nil && o.RecoverEntireFolder.IsSet() {
		return true
	}

	return false
}

// SetRecoverEntireFolder gets a reference to the given NullableBool and assigns it to the RecoverEntireFolder field.
func (o *FolderItem) SetRecoverEntireFolder(v bool) {
	o.RecoverEntireFolder.Set(&v)
}
// SetRecoverEntireFolderNil sets the value for RecoverEntireFolder to be an explicit nil
func (o *FolderItem) SetRecoverEntireFolderNil() {
	o.RecoverEntireFolder.Set(nil)
}

// UnsetRecoverEntireFolder ensures that no value is present for RecoverEntireFolder, not even an explicit nil
func (o *FolderItem) UnsetRecoverEntireFolder() {
	o.RecoverEntireFolder.Unset()
}

func (o FolderItem) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FolderId.IsSet() {
		toSerialize["folderId"] = o.FolderId.Get()
	}
	if o.ItemIds != nil {
		toSerialize["itemIds"] = o.ItemIds
	}
	if o.Key.IsSet() {
		toSerialize["key"] = o.Key.Get()
	}
	if o.RecoverEntireFolder.IsSet() {
		toSerialize["recoverEntireFolder"] = o.RecoverEntireFolder.Get()
	}
	return toSerialize, nil
}

type NullableFolderItem struct {
	value *FolderItem
	isSet bool
}

func (v NullableFolderItem) Get() *FolderItem {
	return v.value
}

func (v *NullableFolderItem) Set(val *FolderItem) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderItem) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderItem(val *FolderItem) *NullableFolderItem {
	return &NullableFolderItem{value: val, isSet: true}
}

func (v NullableFolderItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


