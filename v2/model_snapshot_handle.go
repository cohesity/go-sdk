/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SnapshotHandle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotHandle{}

// SnapshotHandle Information about the snapshots that exist on the system.
type SnapshotHandle struct {
	// Specifies a distinct value that's unique to a source.
	JobUid NullableInt64 `json:"jobUid,omitempty"`
	// Run start time of the Magneto job run which has taken this snapshot.
	RunStartTimeUsecs NullableInt64 `json:"runStartTimeUsecs,omitempty"`
}

// NewSnapshotHandle instantiates a new SnapshotHandle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotHandle() *SnapshotHandle {
	this := SnapshotHandle{}
	return &this
}

// NewSnapshotHandleWithDefaults instantiates a new SnapshotHandle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotHandleWithDefaults() *SnapshotHandle {
	this := SnapshotHandle{}
	return &this
}

// GetJobUid returns the JobUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotHandle) GetJobUid() int64 {
	if o == nil || IsNil(o.JobUid.Get()) {
		var ret int64
		return ret
	}
	return *o.JobUid.Get()
}

// GetJobUidOk returns a tuple with the JobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotHandle) GetJobUidOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.JobUid.Get(), o.JobUid.IsSet()
}

// HasJobUid returns a boolean if a field has been set.
func (o *SnapshotHandle) HasJobUid() bool {
	if o != nil && o.JobUid.IsSet() {
		return true
	}

	return false
}

// SetJobUid gets a reference to the given NullableInt64 and assigns it to the JobUid field.
func (o *SnapshotHandle) SetJobUid(v int64) {
	o.JobUid.Set(&v)
}
// SetJobUidNil sets the value for JobUid to be an explicit nil
func (o *SnapshotHandle) SetJobUidNil() {
	o.JobUid.Set(nil)
}

// UnsetJobUid ensures that no value is present for JobUid, not even an explicit nil
func (o *SnapshotHandle) UnsetJobUid() {
	o.JobUid.Unset()
}

// GetRunStartTimeUsecs returns the RunStartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotHandle) GetRunStartTimeUsecs() int64 {
	if o == nil || IsNil(o.RunStartTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.RunStartTimeUsecs.Get()
}

// GetRunStartTimeUsecsOk returns a tuple with the RunStartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotHandle) GetRunStartTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunStartTimeUsecs.Get(), o.RunStartTimeUsecs.IsSet()
}

// HasRunStartTimeUsecs returns a boolean if a field has been set.
func (o *SnapshotHandle) HasRunStartTimeUsecs() bool {
	if o != nil && o.RunStartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRunStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RunStartTimeUsecs field.
func (o *SnapshotHandle) SetRunStartTimeUsecs(v int64) {
	o.RunStartTimeUsecs.Set(&v)
}
// SetRunStartTimeUsecsNil sets the value for RunStartTimeUsecs to be an explicit nil
func (o *SnapshotHandle) SetRunStartTimeUsecsNil() {
	o.RunStartTimeUsecs.Set(nil)
}

// UnsetRunStartTimeUsecs ensures that no value is present for RunStartTimeUsecs, not even an explicit nil
func (o *SnapshotHandle) UnsetRunStartTimeUsecs() {
	o.RunStartTimeUsecs.Unset()
}

func (o SnapshotHandle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotHandle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.JobUid.IsSet() {
		toSerialize["jobUid"] = o.JobUid.Get()
	}
	if o.RunStartTimeUsecs.IsSet() {
		toSerialize["runStartTimeUsecs"] = o.RunStartTimeUsecs.Get()
	}
	return toSerialize, nil
}

type NullableSnapshotHandle struct {
	value *SnapshotHandle
	isSet bool
}

func (v NullableSnapshotHandle) Get() *SnapshotHandle {
	return v.value
}

func (v *NullableSnapshotHandle) Set(val *SnapshotHandle) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotHandle) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotHandle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotHandle(val *SnapshotHandle) *NullableSnapshotHandle {
	return &NullableSnapshotHandle{value: val, isSet: true}
}

func (v NullableSnapshotHandle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotHandle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


