/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TeamsAdditionalParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamsAdditionalParams{}

// TeamsAdditionalParams Specifies additional params for Teams entities. It should only be populated if the 'DiscoveryParams.discoverableObjectTypeList' includes 'kTeams' otherwise this will be ignored.
type TeamsAdditionalParams struct {
	// Specifies whether the Teams posts/conversations will be backed up or not. If this is false or not specified teams' posts backup will not be done.
	AllowPostsBackup NullableBool `json:"allowPostsBackup,omitempty"`
}

// NewTeamsAdditionalParams instantiates a new TeamsAdditionalParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamsAdditionalParams() *TeamsAdditionalParams {
	this := TeamsAdditionalParams{}
	return &this
}

// NewTeamsAdditionalParamsWithDefaults instantiates a new TeamsAdditionalParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamsAdditionalParamsWithDefaults() *TeamsAdditionalParams {
	this := TeamsAdditionalParams{}
	return &this
}

// GetAllowPostsBackup returns the AllowPostsBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TeamsAdditionalParams) GetAllowPostsBackup() bool {
	if o == nil || IsNil(o.AllowPostsBackup.Get()) {
		var ret bool
		return ret
	}
	return *o.AllowPostsBackup.Get()
}

// GetAllowPostsBackupOk returns a tuple with the AllowPostsBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TeamsAdditionalParams) GetAllowPostsBackupOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AllowPostsBackup.Get(), o.AllowPostsBackup.IsSet()
}

// HasAllowPostsBackup returns a boolean if a field has been set.
func (o *TeamsAdditionalParams) HasAllowPostsBackup() bool {
	if o != nil && o.AllowPostsBackup.IsSet() {
		return true
	}

	return false
}

// SetAllowPostsBackup gets a reference to the given NullableBool and assigns it to the AllowPostsBackup field.
func (o *TeamsAdditionalParams) SetAllowPostsBackup(v bool) {
	o.AllowPostsBackup.Set(&v)
}
// SetAllowPostsBackupNil sets the value for AllowPostsBackup to be an explicit nil
func (o *TeamsAdditionalParams) SetAllowPostsBackupNil() {
	o.AllowPostsBackup.Set(nil)
}

// UnsetAllowPostsBackup ensures that no value is present for AllowPostsBackup, not even an explicit nil
func (o *TeamsAdditionalParams) UnsetAllowPostsBackup() {
	o.AllowPostsBackup.Unset()
}

func (o TeamsAdditionalParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamsAdditionalParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowPostsBackup.IsSet() {
		toSerialize["allowPostsBackup"] = o.AllowPostsBackup.Get()
	}
	return toSerialize, nil
}

type NullableTeamsAdditionalParams struct {
	value *TeamsAdditionalParams
	isSet bool
}

func (v NullableTeamsAdditionalParams) Get() *TeamsAdditionalParams {
	return v.value
}

func (v *NullableTeamsAdditionalParams) Set(val *TeamsAdditionalParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamsAdditionalParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamsAdditionalParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamsAdditionalParams(val *TeamsAdditionalParams) *NullableTeamsAdditionalParams {
	return &NullableTeamsAdditionalParams{value: val, isSet: true}
}

func (v NullableTeamsAdditionalParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamsAdditionalParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


