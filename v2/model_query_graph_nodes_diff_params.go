/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the QueryGraphNodesDiffParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QueryGraphNodesDiffParams{}

// QueryGraphNodesDiffParams Specify the query params to determine difference of graph nodes between two snapshots for a given session id.
type QueryGraphNodesDiffParams struct {
	// Specifies the number of objects to be fetched for the specified pagination cookie.
	Count *int32 `json:"count,omitempty"`
	// Specifies an optional mask to filter only certain kinds of diffs. Supported diff types - Added/Modified/Deleted/Unmodified
	DiffTypes []string `json:"diffTypes,omitempty"`
	// Specifies the filter params for the node to be fetched.
	NodeFilter *GraphNodeFilterParams `json:"nodeFilter,omitempty"`
	// Specifies a cookie which can be passed in by the user in order to retrieve the next page of results.
	PaginationCookie NullableString `json:"paginationCookie,omitempty"`
	// Specifies the id of the session for which diff of nodes has to be fetched.
	SessionId NullableString `json:"sessionId,omitempty"`
}

// NewQueryGraphNodesDiffParams instantiates a new QueryGraphNodesDiffParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQueryGraphNodesDiffParams() *QueryGraphNodesDiffParams {
	this := QueryGraphNodesDiffParams{}
	return &this
}

// NewQueryGraphNodesDiffParamsWithDefaults instantiates a new QueryGraphNodesDiffParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQueryGraphNodesDiffParamsWithDefaults() *QueryGraphNodesDiffParams {
	this := QueryGraphNodesDiffParams{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *QueryGraphNodesDiffParams) GetCount() int32 {
	if o == nil || IsNil(o.Count) {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryGraphNodesDiffParams) GetCountOk() (*int32, bool) {
	if o == nil || IsNil(o.Count) {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *QueryGraphNodesDiffParams) HasCount() bool {
	if o != nil && !IsNil(o.Count) {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *QueryGraphNodesDiffParams) SetCount(v int32) {
	o.Count = &v
}

// GetDiffTypes returns the DiffTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryGraphNodesDiffParams) GetDiffTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.DiffTypes
}

// GetDiffTypesOk returns a tuple with the DiffTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryGraphNodesDiffParams) GetDiffTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.DiffTypes) {
		return nil, false
	}
	return o.DiffTypes, true
}

// HasDiffTypes returns a boolean if a field has been set.
func (o *QueryGraphNodesDiffParams) HasDiffTypes() bool {
	if o != nil && !IsNil(o.DiffTypes) {
		return true
	}

	return false
}

// SetDiffTypes gets a reference to the given []string and assigns it to the DiffTypes field.
func (o *QueryGraphNodesDiffParams) SetDiffTypes(v []string) {
	o.DiffTypes = v
}

// GetNodeFilter returns the NodeFilter field value if set, zero value otherwise.
func (o *QueryGraphNodesDiffParams) GetNodeFilter() GraphNodeFilterParams {
	if o == nil || IsNil(o.NodeFilter) {
		var ret GraphNodeFilterParams
		return ret
	}
	return *o.NodeFilter
}

// GetNodeFilterOk returns a tuple with the NodeFilter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QueryGraphNodesDiffParams) GetNodeFilterOk() (*GraphNodeFilterParams, bool) {
	if o == nil || IsNil(o.NodeFilter) {
		return nil, false
	}
	return o.NodeFilter, true
}

// HasNodeFilter returns a boolean if a field has been set.
func (o *QueryGraphNodesDiffParams) HasNodeFilter() bool {
	if o != nil && !IsNil(o.NodeFilter) {
		return true
	}

	return false
}

// SetNodeFilter gets a reference to the given GraphNodeFilterParams and assigns it to the NodeFilter field.
func (o *QueryGraphNodesDiffParams) SetNodeFilter(v GraphNodeFilterParams) {
	o.NodeFilter = &v
}

// GetPaginationCookie returns the PaginationCookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryGraphNodesDiffParams) GetPaginationCookie() string {
	if o == nil || IsNil(o.PaginationCookie.Get()) {
		var ret string
		return ret
	}
	return *o.PaginationCookie.Get()
}

// GetPaginationCookieOk returns a tuple with the PaginationCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryGraphNodesDiffParams) GetPaginationCookieOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PaginationCookie.Get(), o.PaginationCookie.IsSet()
}

// HasPaginationCookie returns a boolean if a field has been set.
func (o *QueryGraphNodesDiffParams) HasPaginationCookie() bool {
	if o != nil && o.PaginationCookie.IsSet() {
		return true
	}

	return false
}

// SetPaginationCookie gets a reference to the given NullableString and assigns it to the PaginationCookie field.
func (o *QueryGraphNodesDiffParams) SetPaginationCookie(v string) {
	o.PaginationCookie.Set(&v)
}
// SetPaginationCookieNil sets the value for PaginationCookie to be an explicit nil
func (o *QueryGraphNodesDiffParams) SetPaginationCookieNil() {
	o.PaginationCookie.Set(nil)
}

// UnsetPaginationCookie ensures that no value is present for PaginationCookie, not even an explicit nil
func (o *QueryGraphNodesDiffParams) UnsetPaginationCookie() {
	o.PaginationCookie.Unset()
}

// GetSessionId returns the SessionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QueryGraphNodesDiffParams) GetSessionId() string {
	if o == nil || IsNil(o.SessionId.Get()) {
		var ret string
		return ret
	}
	return *o.SessionId.Get()
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QueryGraphNodesDiffParams) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SessionId.Get(), o.SessionId.IsSet()
}

// HasSessionId returns a boolean if a field has been set.
func (o *QueryGraphNodesDiffParams) HasSessionId() bool {
	if o != nil && o.SessionId.IsSet() {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given NullableString and assigns it to the SessionId field.
func (o *QueryGraphNodesDiffParams) SetSessionId(v string) {
	o.SessionId.Set(&v)
}
// SetSessionIdNil sets the value for SessionId to be an explicit nil
func (o *QueryGraphNodesDiffParams) SetSessionIdNil() {
	o.SessionId.Set(nil)
}

// UnsetSessionId ensures that no value is present for SessionId, not even an explicit nil
func (o *QueryGraphNodesDiffParams) UnsetSessionId() {
	o.SessionId.Unset()
}

func (o QueryGraphNodesDiffParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QueryGraphNodesDiffParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Count) {
		toSerialize["count"] = o.Count
	}
	if o.DiffTypes != nil {
		toSerialize["diffTypes"] = o.DiffTypes
	}
	if !IsNil(o.NodeFilter) {
		toSerialize["nodeFilter"] = o.NodeFilter
	}
	if o.PaginationCookie.IsSet() {
		toSerialize["paginationCookie"] = o.PaginationCookie.Get()
	}
	if o.SessionId.IsSet() {
		toSerialize["sessionId"] = o.SessionId.Get()
	}
	return toSerialize, nil
}

type NullableQueryGraphNodesDiffParams struct {
	value *QueryGraphNodesDiffParams
	isSet bool
}

func (v NullableQueryGraphNodesDiffParams) Get() *QueryGraphNodesDiffParams {
	return v.value
}

func (v *NullableQueryGraphNodesDiffParams) Set(val *QueryGraphNodesDiffParams) {
	v.value = val
	v.isSet = true
}

func (v NullableQueryGraphNodesDiffParams) IsSet() bool {
	return v.isSet
}

func (v *NullableQueryGraphNodesDiffParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQueryGraphNodesDiffParams(val *QueryGraphNodesDiffParams) *NullableQueryGraphNodesDiffParams {
	return &NullableQueryGraphNodesDiffParams{value: val, isSet: true}
}

func (v NullableQueryGraphNodesDiffParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQueryGraphNodesDiffParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


