/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IndexingCloudConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IndexingCloudConfig{}

// IndexingCloudConfig Config required for indexing in DMaaS.
type IndexingCloudConfig struct {
	AzureEsConfig *AzureESConfigForIndexing `json:"azureEsConfig,omitempty"`
	AzureStorageConfig *AzureStorageConfigForIndexing `json:"azureStorageConfig,omitempty"`
	EsConfig *ESConfigForIndexing `json:"esConfig,omitempty"`
	// Whether this tenant is being migrated to this cluster or freshly onboarded.
	IsMigratedTenant NullableBool `json:"isMigratedTenant,omitempty"`
	// Name of the cloud region.
	Region NullableString `json:"region"`
	S3Config *S3ConfigForIndexing `json:"s3Config,omitempty"`
	// Tenant ID to which this config belongs.
	TenantId NullableString `json:"tenantId"`
}

type _IndexingCloudConfig IndexingCloudConfig

// NewIndexingCloudConfig instantiates a new IndexingCloudConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexingCloudConfig(region NullableString, tenantId NullableString) *IndexingCloudConfig {
	this := IndexingCloudConfig{}
	this.Region = region
	this.TenantId = tenantId
	return &this
}

// NewIndexingCloudConfigWithDefaults instantiates a new IndexingCloudConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexingCloudConfigWithDefaults() *IndexingCloudConfig {
	this := IndexingCloudConfig{}
	return &this
}

// GetAzureEsConfig returns the AzureEsConfig field value if set, zero value otherwise.
func (o *IndexingCloudConfig) GetAzureEsConfig() AzureESConfigForIndexing {
	if o == nil || IsNil(o.AzureEsConfig) {
		var ret AzureESConfigForIndexing
		return ret
	}
	return *o.AzureEsConfig
}

// GetAzureEsConfigOk returns a tuple with the AzureEsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexingCloudConfig) GetAzureEsConfigOk() (*AzureESConfigForIndexing, bool) {
	if o == nil || IsNil(o.AzureEsConfig) {
		return nil, false
	}
	return o.AzureEsConfig, true
}

// HasAzureEsConfig returns a boolean if a field has been set.
func (o *IndexingCloudConfig) HasAzureEsConfig() bool {
	if o != nil && !IsNil(o.AzureEsConfig) {
		return true
	}

	return false
}

// SetAzureEsConfig gets a reference to the given AzureESConfigForIndexing and assigns it to the AzureEsConfig field.
func (o *IndexingCloudConfig) SetAzureEsConfig(v AzureESConfigForIndexing) {
	o.AzureEsConfig = &v
}

// GetAzureStorageConfig returns the AzureStorageConfig field value if set, zero value otherwise.
func (o *IndexingCloudConfig) GetAzureStorageConfig() AzureStorageConfigForIndexing {
	if o == nil || IsNil(o.AzureStorageConfig) {
		var ret AzureStorageConfigForIndexing
		return ret
	}
	return *o.AzureStorageConfig
}

// GetAzureStorageConfigOk returns a tuple with the AzureStorageConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexingCloudConfig) GetAzureStorageConfigOk() (*AzureStorageConfigForIndexing, bool) {
	if o == nil || IsNil(o.AzureStorageConfig) {
		return nil, false
	}
	return o.AzureStorageConfig, true
}

// HasAzureStorageConfig returns a boolean if a field has been set.
func (o *IndexingCloudConfig) HasAzureStorageConfig() bool {
	if o != nil && !IsNil(o.AzureStorageConfig) {
		return true
	}

	return false
}

// SetAzureStorageConfig gets a reference to the given AzureStorageConfigForIndexing and assigns it to the AzureStorageConfig field.
func (o *IndexingCloudConfig) SetAzureStorageConfig(v AzureStorageConfigForIndexing) {
	o.AzureStorageConfig = &v
}

// GetEsConfig returns the EsConfig field value if set, zero value otherwise.
func (o *IndexingCloudConfig) GetEsConfig() ESConfigForIndexing {
	if o == nil || IsNil(o.EsConfig) {
		var ret ESConfigForIndexing
		return ret
	}
	return *o.EsConfig
}

// GetEsConfigOk returns a tuple with the EsConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexingCloudConfig) GetEsConfigOk() (*ESConfigForIndexing, bool) {
	if o == nil || IsNil(o.EsConfig) {
		return nil, false
	}
	return o.EsConfig, true
}

// HasEsConfig returns a boolean if a field has been set.
func (o *IndexingCloudConfig) HasEsConfig() bool {
	if o != nil && !IsNil(o.EsConfig) {
		return true
	}

	return false
}

// SetEsConfig gets a reference to the given ESConfigForIndexing and assigns it to the EsConfig field.
func (o *IndexingCloudConfig) SetEsConfig(v ESConfigForIndexing) {
	o.EsConfig = &v
}

// GetIsMigratedTenant returns the IsMigratedTenant field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexingCloudConfig) GetIsMigratedTenant() bool {
	if o == nil || IsNil(o.IsMigratedTenant.Get()) {
		var ret bool
		return ret
	}
	return *o.IsMigratedTenant.Get()
}

// GetIsMigratedTenantOk returns a tuple with the IsMigratedTenant field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexingCloudConfig) GetIsMigratedTenantOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsMigratedTenant.Get(), o.IsMigratedTenant.IsSet()
}

// HasIsMigratedTenant returns a boolean if a field has been set.
func (o *IndexingCloudConfig) HasIsMigratedTenant() bool {
	if o != nil && o.IsMigratedTenant.IsSet() {
		return true
	}

	return false
}

// SetIsMigratedTenant gets a reference to the given NullableBool and assigns it to the IsMigratedTenant field.
func (o *IndexingCloudConfig) SetIsMigratedTenant(v bool) {
	o.IsMigratedTenant.Set(&v)
}
// SetIsMigratedTenantNil sets the value for IsMigratedTenant to be an explicit nil
func (o *IndexingCloudConfig) SetIsMigratedTenantNil() {
	o.IsMigratedTenant.Set(nil)
}

// UnsetIsMigratedTenant ensures that no value is present for IsMigratedTenant, not even an explicit nil
func (o *IndexingCloudConfig) UnsetIsMigratedTenant() {
	o.IsMigratedTenant.Unset()
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IndexingCloudConfig) GetRegion() string {
	if o == nil || o.Region.Get() == nil {
		var ret string
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexingCloudConfig) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *IndexingCloudConfig) SetRegion(v string) {
	o.Region.Set(&v)
}

// GetS3Config returns the S3Config field value if set, zero value otherwise.
func (o *IndexingCloudConfig) GetS3Config() S3ConfigForIndexing {
	if o == nil || IsNil(o.S3Config) {
		var ret S3ConfigForIndexing
		return ret
	}
	return *o.S3Config
}

// GetS3ConfigOk returns a tuple with the S3Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IndexingCloudConfig) GetS3ConfigOk() (*S3ConfigForIndexing, bool) {
	if o == nil || IsNil(o.S3Config) {
		return nil, false
	}
	return o.S3Config, true
}

// HasS3Config returns a boolean if a field has been set.
func (o *IndexingCloudConfig) HasS3Config() bool {
	if o != nil && !IsNil(o.S3Config) {
		return true
	}

	return false
}

// SetS3Config gets a reference to the given S3ConfigForIndexing and assigns it to the S3Config field.
func (o *IndexingCloudConfig) SetS3Config(v S3ConfigForIndexing) {
	o.S3Config = &v
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IndexingCloudConfig) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexingCloudConfig) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *IndexingCloudConfig) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

func (o IndexingCloudConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IndexingCloudConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AzureEsConfig) {
		toSerialize["azureEsConfig"] = o.AzureEsConfig
	}
	if !IsNil(o.AzureStorageConfig) {
		toSerialize["azureStorageConfig"] = o.AzureStorageConfig
	}
	if !IsNil(o.EsConfig) {
		toSerialize["esConfig"] = o.EsConfig
	}
	if o.IsMigratedTenant.IsSet() {
		toSerialize["isMigratedTenant"] = o.IsMigratedTenant.Get()
	}
	toSerialize["region"] = o.Region.Get()
	if !IsNil(o.S3Config) {
		toSerialize["s3Config"] = o.S3Config
	}
	toSerialize["tenantId"] = o.TenantId.Get()
	return toSerialize, nil
}

func (o *IndexingCloudConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"region",
		"tenantId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIndexingCloudConfig := _IndexingCloudConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIndexingCloudConfig)

	if err != nil {
		return err
	}

	*o = IndexingCloudConfig(varIndexingCloudConfig)

	return err
}

type NullableIndexingCloudConfig struct {
	value *IndexingCloudConfig
	isSet bool
}

func (v NullableIndexingCloudConfig) Get() *IndexingCloudConfig {
	return v.value
}

func (v *NullableIndexingCloudConfig) Set(val *IndexingCloudConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexingCloudConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexingCloudConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexingCloudConfig(val *IndexingCloudConfig) *NullableIndexingCloudConfig {
	return &NullableIndexingCloudConfig{value: val, isSet: true}
}

func (v NullableIndexingCloudConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexingCloudConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


