/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the StatsTask type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StatsTask{}

// StatsTask This specifies the details about the Stats Task.
type StatsTask struct {
	BackupGenericStats *BackupGenericStats `json:"backupGenericStats,omitempty"`
	NasStats *BackupNasStats `json:"nasStats,omitempty"`
	// Specifies the task id of the Stats task.
	Id NullableString `json:"id,omitempty"`
}

// NewStatsTask instantiates a new StatsTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsTask() *StatsTask {
	this := StatsTask{}
	return &this
}

// NewStatsTaskWithDefaults instantiates a new StatsTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsTaskWithDefaults() *StatsTask {
	this := StatsTask{}
	return &this
}

// GetBackupGenericStats returns the BackupGenericStats field value if set, zero value otherwise.
func (o *StatsTask) GetBackupGenericStats() BackupGenericStats {
	if o == nil || IsNil(o.BackupGenericStats) {
		var ret BackupGenericStats
		return ret
	}
	return *o.BackupGenericStats
}

// GetBackupGenericStatsOk returns a tuple with the BackupGenericStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsTask) GetBackupGenericStatsOk() (*BackupGenericStats, bool) {
	if o == nil || IsNil(o.BackupGenericStats) {
		return nil, false
	}
	return o.BackupGenericStats, true
}

// HasBackupGenericStats returns a boolean if a field has been set.
func (o *StatsTask) HasBackupGenericStats() bool {
	if o != nil && !IsNil(o.BackupGenericStats) {
		return true
	}

	return false
}

// SetBackupGenericStats gets a reference to the given BackupGenericStats and assigns it to the BackupGenericStats field.
func (o *StatsTask) SetBackupGenericStats(v BackupGenericStats) {
	o.BackupGenericStats = &v
}

// GetNasStats returns the NasStats field value if set, zero value otherwise.
func (o *StatsTask) GetNasStats() BackupNasStats {
	if o == nil || IsNil(o.NasStats) {
		var ret BackupNasStats
		return ret
	}
	return *o.NasStats
}

// GetNasStatsOk returns a tuple with the NasStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsTask) GetNasStatsOk() (*BackupNasStats, bool) {
	if o == nil || IsNil(o.NasStats) {
		return nil, false
	}
	return o.NasStats, true
}

// HasNasStats returns a boolean if a field has been set.
func (o *StatsTask) HasNasStats() bool {
	if o != nil && !IsNil(o.NasStats) {
		return true
	}

	return false
}

// SetNasStats gets a reference to the given BackupNasStats and assigns it to the NasStats field.
func (o *StatsTask) SetNasStats(v BackupNasStats) {
	o.NasStats = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatsTask) GetId() string {
	if o == nil || IsNil(o.Id.Get()) {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatsTask) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *StatsTask) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *StatsTask) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *StatsTask) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *StatsTask) UnsetId() {
	o.Id.Unset()
}

func (o StatsTask) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StatsTask) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.BackupGenericStats) {
		toSerialize["backupGenericStats"] = o.BackupGenericStats
	}
	if !IsNil(o.NasStats) {
		toSerialize["nasStats"] = o.NasStats
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	return toSerialize, nil
}

type NullableStatsTask struct {
	value *StatsTask
	isSet bool
}

func (v NullableStatsTask) Get() *StatsTask {
	return v.value
}

func (v *NullableStatsTask) Set(val *StatsTask) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsTask) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsTask(val *StatsTask) *NullableStatsTask {
	return &NullableStatsTask{value: val, isSet: true}
}

func (v NullableStatsTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


