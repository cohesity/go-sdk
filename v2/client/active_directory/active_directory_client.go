// Code generated by go-swagger; DO NOT EDIT.

package active_directory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new active directory API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new active directory API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new active directory API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for active directory API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateActiveDirectory(params *CreateActiveDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateActiveDirectoryCreated, error)

	DeleteActiveDirectory(params *DeleteActiveDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteActiveDirectoryNoContent, error)

	GetActiveDirectory(params *GetActiveDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActiveDirectoryOK, error)

	GetActiveDirectoryByID(params *GetActiveDirectoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActiveDirectoryByIDOK, error)

	GetCentrifyZones(params *GetCentrifyZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCentrifyZonesOK, error)

	GetDomainControllers(params *GetDomainControllersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainControllersOK, error)

	GetTrustedDomains(params *GetTrustedDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTrustedDomainsOK, error)

	TriggerTrustedDomainsDiscovery(params *TriggerTrustedDomainsDiscoveryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerTrustedDomainsDiscoveryAccepted, error)

	UpdateActiveDirectory(params *UpdateActiveDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveDirectoryOK, error)

	UpdateTrustedDomains(params *UpdateTrustedDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTrustedDomainsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateActiveDirectory creates an active directory

Create an Active Directory.
*/
func (a *Client) CreateActiveDirectory(params *CreateActiveDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateActiveDirectoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateActiveDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateActiveDirectory",
		Method:             "POST",
		PathPattern:        "/active-directories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateActiveDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateActiveDirectoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateActiveDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteActiveDirectory deletes an active directory

Delete an Active Directory.
*/
func (a *Client) DeleteActiveDirectory(params *DeleteActiveDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteActiveDirectoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteActiveDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteActiveDirectory",
		Method:             "DELETE",
		PathPattern:        "/active-directories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteActiveDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteActiveDirectoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteActiveDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetActiveDirectory gets the list of active directories

Get the list of Active Directories.
*/
func (a *Client) GetActiveDirectory(params *GetActiveDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActiveDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActiveDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetActiveDirectory",
		Method:             "GET",
		PathPattern:        "/active-directories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActiveDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActiveDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetActiveDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetActiveDirectoryByID gets an active directory by id

Get an Active Directory by id.
*/
func (a *Client) GetActiveDirectoryByID(params *GetActiveDirectoryByIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetActiveDirectoryByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetActiveDirectoryByIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetActiveDirectoryById",
		Method:             "GET",
		PathPattern:        "/active-directories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetActiveDirectoryByIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetActiveDirectoryByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetActiveDirectoryByIDDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCentrifyZones gets centrify zones

Get Centrify zones for a specified domain.
*/
func (a *Client) GetCentrifyZones(params *GetCentrifyZonesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCentrifyZonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCentrifyZonesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetCentrifyZones",
		Method:             "GET",
		PathPattern:        "/centrify-zones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCentrifyZonesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCentrifyZonesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCentrifyZonesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetDomainControllers gets domain controllers of specified domains

Get Domain Controllers of specified domains.
*/
func (a *Client) GetDomainControllers(params *GetDomainControllersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetDomainControllersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDomainControllersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetDomainControllers",
		Method:             "GET",
		PathPattern:        "/domain-controllers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetDomainControllersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetDomainControllersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetDomainControllersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTrustedDomains gets trusted domains

Get Trusted Domains for a specified domain.
*/
func (a *Client) GetTrustedDomains(params *GetTrustedDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTrustedDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTrustedDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetTrustedDomains",
		Method:             "GET",
		PathPattern:        "/trusted-domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTrustedDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTrustedDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTrustedDomainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TriggerTrustedDomainsDiscovery rediscovers trusted domains

Re-trigger the trusted domains of an Active Directory.
*/
func (a *Client) TriggerTrustedDomainsDiscovery(params *TriggerTrustedDomainsDiscoveryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TriggerTrustedDomainsDiscoveryAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTriggerTrustedDomainsDiscoveryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "TriggerTrustedDomainsDiscovery",
		Method:             "PUT",
		PathPattern:        "/trusted-domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TriggerTrustedDomainsDiscoveryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TriggerTrustedDomainsDiscoveryAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TriggerTrustedDomainsDiscoveryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateActiveDirectory updates an active directory

Update an Active Directory.
*/
func (a *Client) UpdateActiveDirectory(params *UpdateActiveDirectoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateActiveDirectoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateActiveDirectoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateActiveDirectory",
		Method:             "PUT",
		PathPattern:        "/active-directories/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateActiveDirectoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateActiveDirectoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateActiveDirectoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateTrustedDomains updates trusted domains

To update trusted domains of an Active Directory.
*/
func (a *Client) UpdateTrustedDomains(params *UpdateTrustedDomainsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateTrustedDomainsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateTrustedDomainsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "UpdateTrustedDomains",
		Method:             "POST",
		PathPattern:        "/trusted-domains",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateTrustedDomainsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateTrustedDomainsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateTrustedDomainsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
