/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeInterfaces type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeInterfaces{}

// NodeInterfaces Specifies the interfaces present on a Node.
type NodeInterfaces struct {
	// Specifies the ip of the node.
	ChassisSerial NullableString `json:"chassisSerial,omitempty"`
	// Specifies the id of the node.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the list of network interfaces present on this Node.
	Interfaces []NetworkInterface `json:"interfaces,omitempty"`
	// Specifies the ip of the node.
	Ip NullableString `json:"ip,omitempty"`
	// Specifies the slot number.
	SlotNumber NullableInt32 `json:"slotNumber,omitempty"`
}

// NewNodeInterfaces instantiates a new NodeInterfaces object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInterfaces() *NodeInterfaces {
	this := NodeInterfaces{}
	return &this
}

// NewNodeInterfacesWithDefaults instantiates a new NodeInterfaces object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInterfacesWithDefaults() *NodeInterfaces {
	this := NodeInterfaces{}
	return &this
}

// GetChassisSerial returns the ChassisSerial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeInterfaces) GetChassisSerial() string {
	if o == nil || IsNil(o.ChassisSerial.Get()) {
		var ret string
		return ret
	}
	return *o.ChassisSerial.Get()
}

// GetChassisSerialOk returns a tuple with the ChassisSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeInterfaces) GetChassisSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChassisSerial.Get(), o.ChassisSerial.IsSet()
}

// HasChassisSerial returns a boolean if a field has been set.
func (o *NodeInterfaces) HasChassisSerial() bool {
	if o != nil && o.ChassisSerial.IsSet() {
		return true
	}

	return false
}

// SetChassisSerial gets a reference to the given NullableString and assigns it to the ChassisSerial field.
func (o *NodeInterfaces) SetChassisSerial(v string) {
	o.ChassisSerial.Set(&v)
}
// SetChassisSerialNil sets the value for ChassisSerial to be an explicit nil
func (o *NodeInterfaces) SetChassisSerialNil() {
	o.ChassisSerial.Set(nil)
}

// UnsetChassisSerial ensures that no value is present for ChassisSerial, not even an explicit nil
func (o *NodeInterfaces) UnsetChassisSerial() {
	o.ChassisSerial.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeInterfaces) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeInterfaces) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NodeInterfaces) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *NodeInterfaces) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NodeInterfaces) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NodeInterfaces) UnsetId() {
	o.Id.Unset()
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *NodeInterfaces) GetInterfaces() []NetworkInterface {
	if o == nil || IsNil(o.Interfaces) {
		var ret []NetworkInterface
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInterfaces) GetInterfacesOk() ([]NetworkInterface, bool) {
	if o == nil || IsNil(o.Interfaces) {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *NodeInterfaces) HasInterfaces() bool {
	if o != nil && !IsNil(o.Interfaces) {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []NetworkInterface and assigns it to the Interfaces field.
func (o *NodeInterfaces) SetInterfaces(v []NetworkInterface) {
	o.Interfaces = v
}

// GetIp returns the Ip field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeInterfaces) GetIp() string {
	if o == nil || IsNil(o.Ip.Get()) {
		var ret string
		return ret
	}
	return *o.Ip.Get()
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeInterfaces) GetIpOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ip.Get(), o.Ip.IsSet()
}

// HasIp returns a boolean if a field has been set.
func (o *NodeInterfaces) HasIp() bool {
	if o != nil && o.Ip.IsSet() {
		return true
	}

	return false
}

// SetIp gets a reference to the given NullableString and assigns it to the Ip field.
func (o *NodeInterfaces) SetIp(v string) {
	o.Ip.Set(&v)
}
// SetIpNil sets the value for Ip to be an explicit nil
func (o *NodeInterfaces) SetIpNil() {
	o.Ip.Set(nil)
}

// UnsetIp ensures that no value is present for Ip, not even an explicit nil
func (o *NodeInterfaces) UnsetIp() {
	o.Ip.Unset()
}

// GetSlotNumber returns the SlotNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeInterfaces) GetSlotNumber() int32 {
	if o == nil || IsNil(o.SlotNumber.Get()) {
		var ret int32
		return ret
	}
	return *o.SlotNumber.Get()
}

// GetSlotNumberOk returns a tuple with the SlotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeInterfaces) GetSlotNumberOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SlotNumber.Get(), o.SlotNumber.IsSet()
}

// HasSlotNumber returns a boolean if a field has been set.
func (o *NodeInterfaces) HasSlotNumber() bool {
	if o != nil && o.SlotNumber.IsSet() {
		return true
	}

	return false
}

// SetSlotNumber gets a reference to the given NullableInt32 and assigns it to the SlotNumber field.
func (o *NodeInterfaces) SetSlotNumber(v int32) {
	o.SlotNumber.Set(&v)
}
// SetSlotNumberNil sets the value for SlotNumber to be an explicit nil
func (o *NodeInterfaces) SetSlotNumberNil() {
	o.SlotNumber.Set(nil)
}

// UnsetSlotNumber ensures that no value is present for SlotNumber, not even an explicit nil
func (o *NodeInterfaces) UnsetSlotNumber() {
	o.SlotNumber.Unset()
}

func (o NodeInterfaces) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeInterfaces) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChassisSerial.IsSet() {
		toSerialize["chassisSerial"] = o.ChassisSerial.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.Interfaces) {
		toSerialize["interfaces"] = o.Interfaces
	}
	if o.Ip.IsSet() {
		toSerialize["ip"] = o.Ip.Get()
	}
	if o.SlotNumber.IsSet() {
		toSerialize["slotNumber"] = o.SlotNumber.Get()
	}
	return toSerialize, nil
}

type NullableNodeInterfaces struct {
	value *NodeInterfaces
	isSet bool
}

func (v NullableNodeInterfaces) Get() *NodeInterfaces {
	return v.value
}

func (v *NullableNodeInterfaces) Set(val *NodeInterfaces) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInterfaces) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInterfaces) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInterfaces(val *NodeInterfaces) *NullableNodeInterfaces {
	return &NullableNodeInterfaces{value: val, isSet: true}
}

func (v NullableNodeInterfaces) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInterfaces) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


