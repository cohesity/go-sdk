/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DataAccessSession type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataAccessSession{}

// DataAccessSession Determines information about a specific data access session.
type DataAccessSession struct {
	// Specifies the time at which the session was created.
	CreationTimeUsecs *int64 `json:"creationTimeUsecs,omitempty"`
	// Specifies the list of data worker endpoints. For load balancing client can make rpc call to different data worker for different nodes. Client should make the rpc call to same worker for data for a given node.
	DataWorkerEndpoints []WorkerEndpoint `json:"dataWorkerEndpoints,omitempty"`
	// Specifies the time at which the session was last modified.
	LastModificationTimeUsecs *int64 `json:"lastModificationTimeUsecs,omitempty"`
	// Specifies the list of metadata worker endpoints. In case of more than one metadata point client can contact any metadata worker.
	MetadataWorkerEndpoints []WorkerEndpoint `json:"metadataWorkerEndpoints,omitempty"`
	// The name of the data access session.
	Name NullableString `json:"name,omitempty"`
	// Specifies the id of the data access session.
	SessionId NullableString `json:"sessionId,omitempty"`
	// Specifies the status of the Data Access Session. Machine status such as Admitted/WaitingForArchiveDownload/ WaitingForResource/SetupInProgress/Ready/Finished
	Status *string `json:"status,omitempty"`
	// Specifies information about the base snapshot of an object.
	BaseSnapshotInfo map[string]interface{} `json:"baseSnapshotInfo,omitempty"`
	// Specifies information about the backup snapshot and object whose data/metadata needs to be accessed.
	CurrentSnapshotInfo map[string]interface{} `json:"currentSnapshotInfo,omitempty"`
	// Specifies registered source id.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
}

// NewDataAccessSession instantiates a new DataAccessSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataAccessSession() *DataAccessSession {
	this := DataAccessSession{}
	return &this
}

// NewDataAccessSessionWithDefaults instantiates a new DataAccessSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataAccessSessionWithDefaults() *DataAccessSession {
	this := DataAccessSession{}
	return &this
}

// GetCreationTimeUsecs returns the CreationTimeUsecs field value if set, zero value otherwise.
func (o *DataAccessSession) GetCreationTimeUsecs() int64 {
	if o == nil || IsNil(o.CreationTimeUsecs) {
		var ret int64
		return ret
	}
	return *o.CreationTimeUsecs
}

// GetCreationTimeUsecsOk returns a tuple with the CreationTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAccessSession) GetCreationTimeUsecsOk() (*int64, bool) {
	if o == nil || IsNil(o.CreationTimeUsecs) {
		return nil, false
	}
	return o.CreationTimeUsecs, true
}

// HasCreationTimeUsecs returns a boolean if a field has been set.
func (o *DataAccessSession) HasCreationTimeUsecs() bool {
	if o != nil && !IsNil(o.CreationTimeUsecs) {
		return true
	}

	return false
}

// SetCreationTimeUsecs gets a reference to the given int64 and assigns it to the CreationTimeUsecs field.
func (o *DataAccessSession) SetCreationTimeUsecs(v int64) {
	o.CreationTimeUsecs = &v
}

// GetDataWorkerEndpoints returns the DataWorkerEndpoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataAccessSession) GetDataWorkerEndpoints() []WorkerEndpoint {
	if o == nil {
		var ret []WorkerEndpoint
		return ret
	}
	return o.DataWorkerEndpoints
}

// GetDataWorkerEndpointsOk returns a tuple with the DataWorkerEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataAccessSession) GetDataWorkerEndpointsOk() ([]WorkerEndpoint, bool) {
	if o == nil || IsNil(o.DataWorkerEndpoints) {
		return nil, false
	}
	return o.DataWorkerEndpoints, true
}

// HasDataWorkerEndpoints returns a boolean if a field has been set.
func (o *DataAccessSession) HasDataWorkerEndpoints() bool {
	if o != nil && !IsNil(o.DataWorkerEndpoints) {
		return true
	}

	return false
}

// SetDataWorkerEndpoints gets a reference to the given []WorkerEndpoint and assigns it to the DataWorkerEndpoints field.
func (o *DataAccessSession) SetDataWorkerEndpoints(v []WorkerEndpoint) {
	o.DataWorkerEndpoints = v
}

// GetLastModificationTimeUsecs returns the LastModificationTimeUsecs field value if set, zero value otherwise.
func (o *DataAccessSession) GetLastModificationTimeUsecs() int64 {
	if o == nil || IsNil(o.LastModificationTimeUsecs) {
		var ret int64
		return ret
	}
	return *o.LastModificationTimeUsecs
}

// GetLastModificationTimeUsecsOk returns a tuple with the LastModificationTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAccessSession) GetLastModificationTimeUsecsOk() (*int64, bool) {
	if o == nil || IsNil(o.LastModificationTimeUsecs) {
		return nil, false
	}
	return o.LastModificationTimeUsecs, true
}

// HasLastModificationTimeUsecs returns a boolean if a field has been set.
func (o *DataAccessSession) HasLastModificationTimeUsecs() bool {
	if o != nil && !IsNil(o.LastModificationTimeUsecs) {
		return true
	}

	return false
}

// SetLastModificationTimeUsecs gets a reference to the given int64 and assigns it to the LastModificationTimeUsecs field.
func (o *DataAccessSession) SetLastModificationTimeUsecs(v int64) {
	o.LastModificationTimeUsecs = &v
}

// GetMetadataWorkerEndpoints returns the MetadataWorkerEndpoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataAccessSession) GetMetadataWorkerEndpoints() []WorkerEndpoint {
	if o == nil {
		var ret []WorkerEndpoint
		return ret
	}
	return o.MetadataWorkerEndpoints
}

// GetMetadataWorkerEndpointsOk returns a tuple with the MetadataWorkerEndpoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataAccessSession) GetMetadataWorkerEndpointsOk() ([]WorkerEndpoint, bool) {
	if o == nil || IsNil(o.MetadataWorkerEndpoints) {
		return nil, false
	}
	return o.MetadataWorkerEndpoints, true
}

// HasMetadataWorkerEndpoints returns a boolean if a field has been set.
func (o *DataAccessSession) HasMetadataWorkerEndpoints() bool {
	if o != nil && !IsNil(o.MetadataWorkerEndpoints) {
		return true
	}

	return false
}

// SetMetadataWorkerEndpoints gets a reference to the given []WorkerEndpoint and assigns it to the MetadataWorkerEndpoints field.
func (o *DataAccessSession) SetMetadataWorkerEndpoints(v []WorkerEndpoint) {
	o.MetadataWorkerEndpoints = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataAccessSession) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataAccessSession) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *DataAccessSession) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *DataAccessSession) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *DataAccessSession) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *DataAccessSession) UnsetName() {
	o.Name.Unset()
}

// GetSessionId returns the SessionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataAccessSession) GetSessionId() string {
	if o == nil || IsNil(o.SessionId.Get()) {
		var ret string
		return ret
	}
	return *o.SessionId.Get()
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataAccessSession) GetSessionIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SessionId.Get(), o.SessionId.IsSet()
}

// HasSessionId returns a boolean if a field has been set.
func (o *DataAccessSession) HasSessionId() bool {
	if o != nil && o.SessionId.IsSet() {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given NullableString and assigns it to the SessionId field.
func (o *DataAccessSession) SetSessionId(v string) {
	o.SessionId.Set(&v)
}
// SetSessionIdNil sets the value for SessionId to be an explicit nil
func (o *DataAccessSession) SetSessionIdNil() {
	o.SessionId.Set(nil)
}

// UnsetSessionId ensures that no value is present for SessionId, not even an explicit nil
func (o *DataAccessSession) UnsetSessionId() {
	o.SessionId.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DataAccessSession) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataAccessSession) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DataAccessSession) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DataAccessSession) SetStatus(v string) {
	o.Status = &v
}

// GetBaseSnapshotInfo returns the BaseSnapshotInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataAccessSession) GetBaseSnapshotInfo() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.BaseSnapshotInfo
}

// GetBaseSnapshotInfoOk returns a tuple with the BaseSnapshotInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataAccessSession) GetBaseSnapshotInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.BaseSnapshotInfo) {
		return map[string]interface{}{}, false
	}
	return o.BaseSnapshotInfo, true
}

// HasBaseSnapshotInfo returns a boolean if a field has been set.
func (o *DataAccessSession) HasBaseSnapshotInfo() bool {
	if o != nil && !IsNil(o.BaseSnapshotInfo) {
		return true
	}

	return false
}

// SetBaseSnapshotInfo gets a reference to the given map[string]interface{} and assigns it to the BaseSnapshotInfo field.
func (o *DataAccessSession) SetBaseSnapshotInfo(v map[string]interface{}) {
	o.BaseSnapshotInfo = v
}

// GetCurrentSnapshotInfo returns the CurrentSnapshotInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataAccessSession) GetCurrentSnapshotInfo() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.CurrentSnapshotInfo
}

// GetCurrentSnapshotInfoOk returns a tuple with the CurrentSnapshotInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataAccessSession) GetCurrentSnapshotInfoOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.CurrentSnapshotInfo) {
		return map[string]interface{}{}, false
	}
	return o.CurrentSnapshotInfo, true
}

// HasCurrentSnapshotInfo returns a boolean if a field has been set.
func (o *DataAccessSession) HasCurrentSnapshotInfo() bool {
	if o != nil && !IsNil(o.CurrentSnapshotInfo) {
		return true
	}

	return false
}

// SetCurrentSnapshotInfo gets a reference to the given map[string]interface{} and assigns it to the CurrentSnapshotInfo field.
func (o *DataAccessSession) SetCurrentSnapshotInfo(v map[string]interface{}) {
	o.CurrentSnapshotInfo = v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataAccessSession) GetSourceId() int64 {
	if o == nil || IsNil(o.SourceId.Get()) {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataAccessSession) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *DataAccessSession) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *DataAccessSession) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *DataAccessSession) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *DataAccessSession) UnsetSourceId() {
	o.SourceId.Unset()
}

func (o DataAccessSession) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataAccessSession) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreationTimeUsecs) {
		toSerialize["creationTimeUsecs"] = o.CreationTimeUsecs
	}
	if o.DataWorkerEndpoints != nil {
		toSerialize["dataWorkerEndpoints"] = o.DataWorkerEndpoints
	}
	if !IsNil(o.LastModificationTimeUsecs) {
		toSerialize["lastModificationTimeUsecs"] = o.LastModificationTimeUsecs
	}
	if o.MetadataWorkerEndpoints != nil {
		toSerialize["metadataWorkerEndpoints"] = o.MetadataWorkerEndpoints
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.SessionId.IsSet() {
		toSerialize["sessionId"] = o.SessionId.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if o.BaseSnapshotInfo != nil {
		toSerialize["baseSnapshotInfo"] = o.BaseSnapshotInfo
	}
	if o.CurrentSnapshotInfo != nil {
		toSerialize["currentSnapshotInfo"] = o.CurrentSnapshotInfo
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	return toSerialize, nil
}

type NullableDataAccessSession struct {
	value *DataAccessSession
	isSet bool
}

func (v NullableDataAccessSession) Get() *DataAccessSession {
	return v.value
}

func (v *NullableDataAccessSession) Set(val *DataAccessSession) {
	v.value = val
	v.isSet = true
}

func (v NullableDataAccessSession) IsSet() bool {
	return v.isSet
}

func (v *NullableDataAccessSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataAccessSession(val *DataAccessSession) *NullableDataAccessSession {
	return &NullableDataAccessSession{value: val, isSet: true}
}

func (v NullableDataAccessSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataAccessSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


