/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AclGrantGrantee type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AclGrantGrantee{}

// AclGrantGrantee Specifies the grantee.
type AclGrantGrantee struct {
	// Specifies the group to which permissions are granted if the `type` is Group.
	Group NullableString `json:"group,omitempty"`
	// Specifies the grantee type.
	Type NullableString `json:"type"`
	// Specifies the user id of the grantee if the `type` is Registered User.
	UserId NullableString `json:"userId,omitempty"`
}

type _AclGrantGrantee AclGrantGrantee

// NewAclGrantGrantee instantiates a new AclGrantGrantee object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAclGrantGrantee(type_ NullableString) *AclGrantGrantee {
	this := AclGrantGrantee{}
	this.Type = type_
	return &this
}

// NewAclGrantGranteeWithDefaults instantiates a new AclGrantGrantee object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAclGrantGranteeWithDefaults() *AclGrantGrantee {
	this := AclGrantGrantee{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AclGrantGrantee) GetGroup() string {
	if o == nil || IsNil(o.Group.Get()) {
		var ret string
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AclGrantGrantee) GetGroupOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *AclGrantGrantee) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableString and assigns it to the Group field.
func (o *AclGrantGrantee) SetGroup(v string) {
	o.Group.Set(&v)
}
// SetGroupNil sets the value for Group to be an explicit nil
func (o *AclGrantGrantee) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *AclGrantGrantee) UnsetGroup() {
	o.Group.Unset()
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AclGrantGrantee) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AclGrantGrantee) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *AclGrantGrantee) SetType(v string) {
	o.Type.Set(&v)
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AclGrantGrantee) GetUserId() string {
	if o == nil || IsNil(o.UserId.Get()) {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AclGrantGrantee) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *AclGrantGrantee) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *AclGrantGrantee) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *AclGrantGrantee) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *AclGrantGrantee) UnsetUserId() {
	o.UserId.Unset()
}

func (o AclGrantGrantee) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AclGrantGrantee) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	toSerialize["type"] = o.Type.Get()
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	return toSerialize, nil
}

func (o *AclGrantGrantee) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAclGrantGrantee := _AclGrantGrantee{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAclGrantGrantee)

	if err != nil {
		return err
	}

	*o = AclGrantGrantee(varAclGrantGrantee)

	return err
}

type NullableAclGrantGrantee struct {
	value *AclGrantGrantee
	isSet bool
}

func (v NullableAclGrantGrantee) Get() *AclGrantGrantee {
	return v.value
}

func (v *NullableAclGrantGrantee) Set(val *AclGrantGrantee) {
	v.value = val
	v.isSet = true
}

func (v NullableAclGrantGrantee) IsSet() bool {
	return v.isSet
}

func (v *NullableAclGrantGrantee) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAclGrantGrantee(val *AclGrantGrantee) *NullableAclGrantGrantee {
	return &NullableAclGrantGrantee{value: val, isSet: true}
}

func (v NullableAclGrantGrantee) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAclGrantGrantee) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


