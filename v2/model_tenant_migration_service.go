/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TenantMigrationService type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TenantMigrationService{}

// TenantMigrationService Describes a cluser service participating in tenant migration.
type TenantMigrationService struct {
	// List of Actions.
	Actions []TenantMigrationServiceAction `json:"actions,omitempty"`
	// Specifies the cluster service on which this action needs to be performed.
	Service NullableString `json:"service,omitempty"`
}

// NewTenantMigrationService instantiates a new TenantMigrationService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantMigrationService() *TenantMigrationService {
	this := TenantMigrationService{}
	return &this
}

// NewTenantMigrationServiceWithDefaults instantiates a new TenantMigrationService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantMigrationServiceWithDefaults() *TenantMigrationService {
	this := TenantMigrationService{}
	return &this
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *TenantMigrationService) GetActions() []TenantMigrationServiceAction {
	if o == nil || IsNil(o.Actions) {
		var ret []TenantMigrationServiceAction
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantMigrationService) GetActionsOk() ([]TenantMigrationServiceAction, bool) {
	if o == nil || IsNil(o.Actions) {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *TenantMigrationService) HasActions() bool {
	if o != nil && !IsNil(o.Actions) {
		return true
	}

	return false
}

// SetActions gets a reference to the given []TenantMigrationServiceAction and assigns it to the Actions field.
func (o *TenantMigrationService) SetActions(v []TenantMigrationServiceAction) {
	o.Actions = v
}

// GetService returns the Service field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantMigrationService) GetService() string {
	if o == nil || IsNil(o.Service.Get()) {
		var ret string
		return ret
	}
	return *o.Service.Get()
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantMigrationService) GetServiceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Service.Get(), o.Service.IsSet()
}

// HasService returns a boolean if a field has been set.
func (o *TenantMigrationService) HasService() bool {
	if o != nil && o.Service.IsSet() {
		return true
	}

	return false
}

// SetService gets a reference to the given NullableString and assigns it to the Service field.
func (o *TenantMigrationService) SetService(v string) {
	o.Service.Set(&v)
}
// SetServiceNil sets the value for Service to be an explicit nil
func (o *TenantMigrationService) SetServiceNil() {
	o.Service.Set(nil)
}

// UnsetService ensures that no value is present for Service, not even an explicit nil
func (o *TenantMigrationService) UnsetService() {
	o.Service.Unset()
}

func (o TenantMigrationService) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TenantMigrationService) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Actions) {
		toSerialize["actions"] = o.Actions
	}
	if o.Service.IsSet() {
		toSerialize["service"] = o.Service.Get()
	}
	return toSerialize, nil
}

type NullableTenantMigrationService struct {
	value *TenantMigrationService
	isSet bool
}

func (v NullableTenantMigrationService) Get() *TenantMigrationService {
	return v.value
}

func (v *NullableTenantMigrationService) Set(val *TenantMigrationService) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantMigrationService) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantMigrationService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantMigrationService(val *TenantMigrationService) *NullableTenantMigrationService {
	return &NullableTenantMigrationService{value: val, isSet: true}
}

func (v NullableTenantMigrationService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantMigrationService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


