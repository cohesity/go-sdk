/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Office365UserMailboxObjectProtectionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Office365UserMailboxObjectProtectionParams{}

// Office365UserMailboxObjectProtectionParams Specifies the params to create a User Mailbox Object Protection.
type Office365UserMailboxObjectProtectionParams struct {
	IndexingPolicy *IndexingPolicy `json:"indexingPolicy,omitempty"`
	// Specifies the objects to be included in the Object Protection.
	Objects []Office365ObjectProtectionObjectParams `json:"objects"`
	// Specifies the id of the parent of the objects.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Specifies the name of the parent of the objects.
	SourceName NullableString `json:"sourceName,omitempty"`
	// Array of prefixes used to exclude folders which are by default included. Two kinds of filters are supported. a) prefix which always starts with '/'. b) posix which always starts with empty quotes(''). Regular expressions are not supported. If not specified, all folders which are included by default will be included. These prefixes have no effect on folders that are excluded by default. The only folders excluded by default are documented with includeFolders.
	ExcludeFolders []string `json:"excludeFolders,omitempty"`
	// Array of prefixes used to include folders which are by default excluded. Two kinds of filters are supported. a) prefix which always starts with '/'. b) posix which always starts with empty quotes(''). Regular expressions are not supported. If not specified, all folders which are excluded by default will be excluded. These prefixes have no effect on folders that are included by default. All folders are included by default except for the Recoverable Items folder.
	IncludeFolders []string `json:"includeFolders,omitempty"`
}

type _Office365UserMailboxObjectProtectionParams Office365UserMailboxObjectProtectionParams

// NewOffice365UserMailboxObjectProtectionParams instantiates a new Office365UserMailboxObjectProtectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffice365UserMailboxObjectProtectionParams(objects []Office365ObjectProtectionObjectParams) *Office365UserMailboxObjectProtectionParams {
	this := Office365UserMailboxObjectProtectionParams{}
	this.Objects = objects
	return &this
}

// NewOffice365UserMailboxObjectProtectionParamsWithDefaults instantiates a new Office365UserMailboxObjectProtectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffice365UserMailboxObjectProtectionParamsWithDefaults() *Office365UserMailboxObjectProtectionParams {
	this := Office365UserMailboxObjectProtectionParams{}
	return &this
}

// GetIndexingPolicy returns the IndexingPolicy field value if set, zero value otherwise.
func (o *Office365UserMailboxObjectProtectionParams) GetIndexingPolicy() IndexingPolicy {
	if o == nil || IsNil(o.IndexingPolicy) {
		var ret IndexingPolicy
		return ret
	}
	return *o.IndexingPolicy
}

// GetIndexingPolicyOk returns a tuple with the IndexingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365UserMailboxObjectProtectionParams) GetIndexingPolicyOk() (*IndexingPolicy, bool) {
	if o == nil || IsNil(o.IndexingPolicy) {
		return nil, false
	}
	return o.IndexingPolicy, true
}

// HasIndexingPolicy returns a boolean if a field has been set.
func (o *Office365UserMailboxObjectProtectionParams) HasIndexingPolicy() bool {
	if o != nil && !IsNil(o.IndexingPolicy) {
		return true
	}

	return false
}

// SetIndexingPolicy gets a reference to the given IndexingPolicy and assigns it to the IndexingPolicy field.
func (o *Office365UserMailboxObjectProtectionParams) SetIndexingPolicy(v IndexingPolicy) {
	o.IndexingPolicy = &v
}

// GetObjects returns the Objects field value
func (o *Office365UserMailboxObjectProtectionParams) GetObjects() []Office365ObjectProtectionObjectParams {
	if o == nil {
		var ret []Office365ObjectProtectionObjectParams
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
func (o *Office365UserMailboxObjectProtectionParams) GetObjectsOk() ([]Office365ObjectProtectionObjectParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Objects, true
}

// SetObjects sets field value
func (o *Office365UserMailboxObjectProtectionParams) SetObjects(v []Office365ObjectProtectionObjectParams) {
	o.Objects = v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserMailboxObjectProtectionParams) GetSourceId() int64 {
	if o == nil || IsNil(o.SourceId.Get()) {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserMailboxObjectProtectionParams) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *Office365UserMailboxObjectProtectionParams) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *Office365UserMailboxObjectProtectionParams) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *Office365UserMailboxObjectProtectionParams) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *Office365UserMailboxObjectProtectionParams) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserMailboxObjectProtectionParams) GetSourceName() string {
	if o == nil || IsNil(o.SourceName.Get()) {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserMailboxObjectProtectionParams) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *Office365UserMailboxObjectProtectionParams) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *Office365UserMailboxObjectProtectionParams) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *Office365UserMailboxObjectProtectionParams) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *Office365UserMailboxObjectProtectionParams) UnsetSourceName() {
	o.SourceName.Unset()
}

// GetExcludeFolders returns the ExcludeFolders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserMailboxObjectProtectionParams) GetExcludeFolders() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.ExcludeFolders
}

// GetExcludeFoldersOk returns a tuple with the ExcludeFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserMailboxObjectProtectionParams) GetExcludeFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeFolders) {
		return nil, false
	}
	return o.ExcludeFolders, true
}

// HasExcludeFolders returns a boolean if a field has been set.
func (o *Office365UserMailboxObjectProtectionParams) HasExcludeFolders() bool {
	if o != nil && !IsNil(o.ExcludeFolders) {
		return true
	}

	return false
}

// SetExcludeFolders gets a reference to the given []string and assigns it to the ExcludeFolders field.
func (o *Office365UserMailboxObjectProtectionParams) SetExcludeFolders(v []string) {
	o.ExcludeFolders = v
}

// GetIncludeFolders returns the IncludeFolders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365UserMailboxObjectProtectionParams) GetIncludeFolders() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.IncludeFolders
}

// GetIncludeFoldersOk returns a tuple with the IncludeFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365UserMailboxObjectProtectionParams) GetIncludeFoldersOk() ([]string, bool) {
	if o == nil || IsNil(o.IncludeFolders) {
		return nil, false
	}
	return o.IncludeFolders, true
}

// HasIncludeFolders returns a boolean if a field has been set.
func (o *Office365UserMailboxObjectProtectionParams) HasIncludeFolders() bool {
	if o != nil && !IsNil(o.IncludeFolders) {
		return true
	}

	return false
}

// SetIncludeFolders gets a reference to the given []string and assigns it to the IncludeFolders field.
func (o *Office365UserMailboxObjectProtectionParams) SetIncludeFolders(v []string) {
	o.IncludeFolders = v
}

func (o Office365UserMailboxObjectProtectionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Office365UserMailboxObjectProtectionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.IndexingPolicy) {
		toSerialize["indexingPolicy"] = o.IndexingPolicy
	}
	toSerialize["objects"] = o.Objects
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	if o.ExcludeFolders != nil {
		toSerialize["excludeFolders"] = o.ExcludeFolders
	}
	if o.IncludeFolders != nil {
		toSerialize["includeFolders"] = o.IncludeFolders
	}
	return toSerialize, nil
}

func (o *Office365UserMailboxObjectProtectionParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"objects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOffice365UserMailboxObjectProtectionParams := _Office365UserMailboxObjectProtectionParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOffice365UserMailboxObjectProtectionParams)

	if err != nil {
		return err
	}

	*o = Office365UserMailboxObjectProtectionParams(varOffice365UserMailboxObjectProtectionParams)

	return err
}

type NullableOffice365UserMailboxObjectProtectionParams struct {
	value *Office365UserMailboxObjectProtectionParams
	isSet bool
}

func (v NullableOffice365UserMailboxObjectProtectionParams) Get() *Office365UserMailboxObjectProtectionParams {
	return v.value
}

func (v *NullableOffice365UserMailboxObjectProtectionParams) Set(val *Office365UserMailboxObjectProtectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOffice365UserMailboxObjectProtectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOffice365UserMailboxObjectProtectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffice365UserMailboxObjectProtectionParams(val *Office365UserMailboxObjectProtectionParams) *NullableOffice365UserMailboxObjectProtectionParams {
	return &NullableOffice365UserMailboxObjectProtectionParams{value: val, isSet: true}
}

func (v NullableOffice365UserMailboxObjectProtectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffice365UserMailboxObjectProtectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


