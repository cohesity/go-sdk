/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TotpKeyInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TotpKeyInfo{}

// TotpKeyInfo Specifies the Time based OTP key info
type TotpKeyInfo struct {
	// Specifies the Time based OTP key ID.
	TotpKeyId *string `json:"totpKeyId,omitempty"`
	// Specifies the Time based OTP key name.
	TotpKeyName *string `json:"totpKeyName,omitempty"`
	// Specifies the Time based OTP secret key.
	TotpSecretKey *string `json:"totpSecretKey,omitempty"`
	// Specifies the Time based OTP key URI for generating MFA QR code.
	TotpUri *string `json:"totpUri,omitempty"`
}

// NewTotpKeyInfo instantiates a new TotpKeyInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotpKeyInfo() *TotpKeyInfo {
	this := TotpKeyInfo{}
	return &this
}

// NewTotpKeyInfoWithDefaults instantiates a new TotpKeyInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotpKeyInfoWithDefaults() *TotpKeyInfo {
	this := TotpKeyInfo{}
	return &this
}

// GetTotpKeyId returns the TotpKeyId field value if set, zero value otherwise.
func (o *TotpKeyInfo) GetTotpKeyId() string {
	if o == nil || IsNil(o.TotpKeyId) {
		var ret string
		return ret
	}
	return *o.TotpKeyId
}

// GetTotpKeyIdOk returns a tuple with the TotpKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotpKeyInfo) GetTotpKeyIdOk() (*string, bool) {
	if o == nil || IsNil(o.TotpKeyId) {
		return nil, false
	}
	return o.TotpKeyId, true
}

// HasTotpKeyId returns a boolean if a field has been set.
func (o *TotpKeyInfo) HasTotpKeyId() bool {
	if o != nil && !IsNil(o.TotpKeyId) {
		return true
	}

	return false
}

// SetTotpKeyId gets a reference to the given string and assigns it to the TotpKeyId field.
func (o *TotpKeyInfo) SetTotpKeyId(v string) {
	o.TotpKeyId = &v
}

// GetTotpKeyName returns the TotpKeyName field value if set, zero value otherwise.
func (o *TotpKeyInfo) GetTotpKeyName() string {
	if o == nil || IsNil(o.TotpKeyName) {
		var ret string
		return ret
	}
	return *o.TotpKeyName
}

// GetTotpKeyNameOk returns a tuple with the TotpKeyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotpKeyInfo) GetTotpKeyNameOk() (*string, bool) {
	if o == nil || IsNil(o.TotpKeyName) {
		return nil, false
	}
	return o.TotpKeyName, true
}

// HasTotpKeyName returns a boolean if a field has been set.
func (o *TotpKeyInfo) HasTotpKeyName() bool {
	if o != nil && !IsNil(o.TotpKeyName) {
		return true
	}

	return false
}

// SetTotpKeyName gets a reference to the given string and assigns it to the TotpKeyName field.
func (o *TotpKeyInfo) SetTotpKeyName(v string) {
	o.TotpKeyName = &v
}

// GetTotpSecretKey returns the TotpSecretKey field value if set, zero value otherwise.
func (o *TotpKeyInfo) GetTotpSecretKey() string {
	if o == nil || IsNil(o.TotpSecretKey) {
		var ret string
		return ret
	}
	return *o.TotpSecretKey
}

// GetTotpSecretKeyOk returns a tuple with the TotpSecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotpKeyInfo) GetTotpSecretKeyOk() (*string, bool) {
	if o == nil || IsNil(o.TotpSecretKey) {
		return nil, false
	}
	return o.TotpSecretKey, true
}

// HasTotpSecretKey returns a boolean if a field has been set.
func (o *TotpKeyInfo) HasTotpSecretKey() bool {
	if o != nil && !IsNil(o.TotpSecretKey) {
		return true
	}

	return false
}

// SetTotpSecretKey gets a reference to the given string and assigns it to the TotpSecretKey field.
func (o *TotpKeyInfo) SetTotpSecretKey(v string) {
	o.TotpSecretKey = &v
}

// GetTotpUri returns the TotpUri field value if set, zero value otherwise.
func (o *TotpKeyInfo) GetTotpUri() string {
	if o == nil || IsNil(o.TotpUri) {
		var ret string
		return ret
	}
	return *o.TotpUri
}

// GetTotpUriOk returns a tuple with the TotpUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotpKeyInfo) GetTotpUriOk() (*string, bool) {
	if o == nil || IsNil(o.TotpUri) {
		return nil, false
	}
	return o.TotpUri, true
}

// HasTotpUri returns a boolean if a field has been set.
func (o *TotpKeyInfo) HasTotpUri() bool {
	if o != nil && !IsNil(o.TotpUri) {
		return true
	}

	return false
}

// SetTotpUri gets a reference to the given string and assigns it to the TotpUri field.
func (o *TotpKeyInfo) SetTotpUri(v string) {
	o.TotpUri = &v
}

func (o TotpKeyInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TotpKeyInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TotpKeyId) {
		toSerialize["totpKeyId"] = o.TotpKeyId
	}
	if !IsNil(o.TotpKeyName) {
		toSerialize["totpKeyName"] = o.TotpKeyName
	}
	if !IsNil(o.TotpSecretKey) {
		toSerialize["totpSecretKey"] = o.TotpSecretKey
	}
	if !IsNil(o.TotpUri) {
		toSerialize["totpUri"] = o.TotpUri
	}
	return toSerialize, nil
}

type NullableTotpKeyInfo struct {
	value *TotpKeyInfo
	isSet bool
}

func (v NullableTotpKeyInfo) Get() *TotpKeyInfo {
	return v.value
}

func (v *NullableTotpKeyInfo) Set(val *TotpKeyInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTotpKeyInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTotpKeyInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotpKeyInfo(val *TotpKeyInfo) *NullableTotpKeyInfo {
	return &NullableTotpKeyInfo{value: val, isSet: true}
}

func (v NullableTotpKeyInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotpKeyInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


