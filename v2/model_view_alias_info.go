/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewAliasInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewAliasInfo{}

// ViewAliasInfo View Alias Info is returned as part of list views.
type ViewAliasInfo struct {
	// Alias name.
	AliasName NullableString `json:"aliasName,omitempty"`
	// List of external client subnet IPs that are allowed to access the share.
	ClientSubnetWhitelist []Subnet `json:"clientSubnetWhitelist,omitempty"`
	// This field is currently deprecated. Specifies whether to enable filer audit log on this view alias. This is only used if filer audit logging is enabled in cluster config.
	EnableFilerAuditLog NullableBool `json:"enableFilerAuditLog,omitempty"`
	// Specifies the state of File Audit logging for this Share. Supported types: [Inherited, Enabled, Disabled]. Inherited: Audit log setting is inherited from the  View. Enabled: Audit log is enabled for this Share. Disabled: Audit log is disabled for this Share.
	FileAuditLoggingState NullableString `json:"fileAuditLoggingState,omitempty"`
	SmbConfig *UpdateShareParamSmbConfig `json:"smbConfig,omitempty"`
	// View path for the alias.
	ViewPath NullableString `json:"viewPath,omitempty"`
}

// NewViewAliasInfo instantiates a new ViewAliasInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewAliasInfo() *ViewAliasInfo {
	this := ViewAliasInfo{}
	return &this
}

// NewViewAliasInfoWithDefaults instantiates a new ViewAliasInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewAliasInfoWithDefaults() *ViewAliasInfo {
	this := ViewAliasInfo{}
	return &this
}

// GetAliasName returns the AliasName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewAliasInfo) GetAliasName() string {
	if o == nil || IsNil(o.AliasName.Get()) {
		var ret string
		return ret
	}
	return *o.AliasName.Get()
}

// GetAliasNameOk returns a tuple with the AliasName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewAliasInfo) GetAliasNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AliasName.Get(), o.AliasName.IsSet()
}

// HasAliasName returns a boolean if a field has been set.
func (o *ViewAliasInfo) HasAliasName() bool {
	if o != nil && o.AliasName.IsSet() {
		return true
	}

	return false
}

// SetAliasName gets a reference to the given NullableString and assigns it to the AliasName field.
func (o *ViewAliasInfo) SetAliasName(v string) {
	o.AliasName.Set(&v)
}
// SetAliasNameNil sets the value for AliasName to be an explicit nil
func (o *ViewAliasInfo) SetAliasNameNil() {
	o.AliasName.Set(nil)
}

// UnsetAliasName ensures that no value is present for AliasName, not even an explicit nil
func (o *ViewAliasInfo) UnsetAliasName() {
	o.AliasName.Unset()
}

// GetClientSubnetWhitelist returns the ClientSubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewAliasInfo) GetClientSubnetWhitelist() []Subnet {
	if o == nil {
		var ret []Subnet
		return ret
	}
	return o.ClientSubnetWhitelist
}

// GetClientSubnetWhitelistOk returns a tuple with the ClientSubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewAliasInfo) GetClientSubnetWhitelistOk() ([]Subnet, bool) {
	if o == nil || IsNil(o.ClientSubnetWhitelist) {
		return nil, false
	}
	return o.ClientSubnetWhitelist, true
}

// HasClientSubnetWhitelist returns a boolean if a field has been set.
func (o *ViewAliasInfo) HasClientSubnetWhitelist() bool {
	if o != nil && !IsNil(o.ClientSubnetWhitelist) {
		return true
	}

	return false
}

// SetClientSubnetWhitelist gets a reference to the given []Subnet and assigns it to the ClientSubnetWhitelist field.
func (o *ViewAliasInfo) SetClientSubnetWhitelist(v []Subnet) {
	o.ClientSubnetWhitelist = v
}

// GetEnableFilerAuditLog returns the EnableFilerAuditLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewAliasInfo) GetEnableFilerAuditLog() bool {
	if o == nil || IsNil(o.EnableFilerAuditLog.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableFilerAuditLog.Get()
}

// GetEnableFilerAuditLogOk returns a tuple with the EnableFilerAuditLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewAliasInfo) GetEnableFilerAuditLogOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableFilerAuditLog.Get(), o.EnableFilerAuditLog.IsSet()
}

// HasEnableFilerAuditLog returns a boolean if a field has been set.
func (o *ViewAliasInfo) HasEnableFilerAuditLog() bool {
	if o != nil && o.EnableFilerAuditLog.IsSet() {
		return true
	}

	return false
}

// SetEnableFilerAuditLog gets a reference to the given NullableBool and assigns it to the EnableFilerAuditLog field.
func (o *ViewAliasInfo) SetEnableFilerAuditLog(v bool) {
	o.EnableFilerAuditLog.Set(&v)
}
// SetEnableFilerAuditLogNil sets the value for EnableFilerAuditLog to be an explicit nil
func (o *ViewAliasInfo) SetEnableFilerAuditLogNil() {
	o.EnableFilerAuditLog.Set(nil)
}

// UnsetEnableFilerAuditLog ensures that no value is present for EnableFilerAuditLog, not even an explicit nil
func (o *ViewAliasInfo) UnsetEnableFilerAuditLog() {
	o.EnableFilerAuditLog.Unset()
}

// GetFileAuditLoggingState returns the FileAuditLoggingState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewAliasInfo) GetFileAuditLoggingState() string {
	if o == nil || IsNil(o.FileAuditLoggingState.Get()) {
		var ret string
		return ret
	}
	return *o.FileAuditLoggingState.Get()
}

// GetFileAuditLoggingStateOk returns a tuple with the FileAuditLoggingState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewAliasInfo) GetFileAuditLoggingStateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FileAuditLoggingState.Get(), o.FileAuditLoggingState.IsSet()
}

// HasFileAuditLoggingState returns a boolean if a field has been set.
func (o *ViewAliasInfo) HasFileAuditLoggingState() bool {
	if o != nil && o.FileAuditLoggingState.IsSet() {
		return true
	}

	return false
}

// SetFileAuditLoggingState gets a reference to the given NullableString and assigns it to the FileAuditLoggingState field.
func (o *ViewAliasInfo) SetFileAuditLoggingState(v string) {
	o.FileAuditLoggingState.Set(&v)
}
// SetFileAuditLoggingStateNil sets the value for FileAuditLoggingState to be an explicit nil
func (o *ViewAliasInfo) SetFileAuditLoggingStateNil() {
	o.FileAuditLoggingState.Set(nil)
}

// UnsetFileAuditLoggingState ensures that no value is present for FileAuditLoggingState, not even an explicit nil
func (o *ViewAliasInfo) UnsetFileAuditLoggingState() {
	o.FileAuditLoggingState.Unset()
}

// GetSmbConfig returns the SmbConfig field value if set, zero value otherwise.
func (o *ViewAliasInfo) GetSmbConfig() UpdateShareParamSmbConfig {
	if o == nil || IsNil(o.SmbConfig) {
		var ret UpdateShareParamSmbConfig
		return ret
	}
	return *o.SmbConfig
}

// GetSmbConfigOk returns a tuple with the SmbConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewAliasInfo) GetSmbConfigOk() (*UpdateShareParamSmbConfig, bool) {
	if o == nil || IsNil(o.SmbConfig) {
		return nil, false
	}
	return o.SmbConfig, true
}

// HasSmbConfig returns a boolean if a field has been set.
func (o *ViewAliasInfo) HasSmbConfig() bool {
	if o != nil && !IsNil(o.SmbConfig) {
		return true
	}

	return false
}

// SetSmbConfig gets a reference to the given UpdateShareParamSmbConfig and assigns it to the SmbConfig field.
func (o *ViewAliasInfo) SetSmbConfig(v UpdateShareParamSmbConfig) {
	o.SmbConfig = &v
}

// GetViewPath returns the ViewPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewAliasInfo) GetViewPath() string {
	if o == nil || IsNil(o.ViewPath.Get()) {
		var ret string
		return ret
	}
	return *o.ViewPath.Get()
}

// GetViewPathOk returns a tuple with the ViewPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewAliasInfo) GetViewPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewPath.Get(), o.ViewPath.IsSet()
}

// HasViewPath returns a boolean if a field has been set.
func (o *ViewAliasInfo) HasViewPath() bool {
	if o != nil && o.ViewPath.IsSet() {
		return true
	}

	return false
}

// SetViewPath gets a reference to the given NullableString and assigns it to the ViewPath field.
func (o *ViewAliasInfo) SetViewPath(v string) {
	o.ViewPath.Set(&v)
}
// SetViewPathNil sets the value for ViewPath to be an explicit nil
func (o *ViewAliasInfo) SetViewPathNil() {
	o.ViewPath.Set(nil)
}

// UnsetViewPath ensures that no value is present for ViewPath, not even an explicit nil
func (o *ViewAliasInfo) UnsetViewPath() {
	o.ViewPath.Unset()
}

func (o ViewAliasInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewAliasInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AliasName.IsSet() {
		toSerialize["aliasName"] = o.AliasName.Get()
	}
	if o.ClientSubnetWhitelist != nil {
		toSerialize["clientSubnetWhitelist"] = o.ClientSubnetWhitelist
	}
	if o.EnableFilerAuditLog.IsSet() {
		toSerialize["enableFilerAuditLog"] = o.EnableFilerAuditLog.Get()
	}
	if o.FileAuditLoggingState.IsSet() {
		toSerialize["fileAuditLoggingState"] = o.FileAuditLoggingState.Get()
	}
	if !IsNil(o.SmbConfig) {
		toSerialize["smbConfig"] = o.SmbConfig
	}
	if o.ViewPath.IsSet() {
		toSerialize["viewPath"] = o.ViewPath.Get()
	}
	return toSerialize, nil
}

type NullableViewAliasInfo struct {
	value *ViewAliasInfo
	isSet bool
}

func (v NullableViewAliasInfo) Get() *ViewAliasInfo {
	return v.value
}

func (v *NullableViewAliasInfo) Set(val *ViewAliasInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableViewAliasInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableViewAliasInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewAliasInfo(val *ViewAliasInfo) *NullableViewAliasInfo {
	return &NullableViewAliasInfo{value: val, isSet: true}
}

func (v NullableViewAliasInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewAliasInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


