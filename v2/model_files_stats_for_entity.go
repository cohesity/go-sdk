/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FilesStatsForEntity type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FilesStatsForEntity{}

// FilesStatsForEntity Specifies the files stats for an entity.
type FilesStatsForEntity struct {
	// Specifies the cluster id of the entity.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the cluster incarnation id of the entity.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId,omitempty"`
	// Specifies the entity id.
	EntityId NullableInt64 `json:"entityId,omitempty"`
	// Specifies the entity name.
	EntityName NullableString `json:"entityName,omitempty"`
	// Specifies the entity type.
	EntityType NullableString `json:"entityType,omitempty"`
	// Specifies a list of files stats for the entity.
	FilesStats []FileStats `json:"filesStats,omitempty"`
}

// NewFilesStatsForEntity instantiates a new FilesStatsForEntity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesStatsForEntity() *FilesStatsForEntity {
	this := FilesStatsForEntity{}
	return &this
}

// NewFilesStatsForEntityWithDefaults instantiates a new FilesStatsForEntity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesStatsForEntityWithDefaults() *FilesStatsForEntity {
	this := FilesStatsForEntity{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesStatsForEntity) GetClusterId() int64 {
	if o == nil || IsNil(o.ClusterId.Get()) {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesStatsForEntity) GetClusterIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *FilesStatsForEntity) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *FilesStatsForEntity) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *FilesStatsForEntity) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *FilesStatsForEntity) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesStatsForEntity) GetClusterIncarnationId() int64 {
	if o == nil || IsNil(o.ClusterIncarnationId.Get()) {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesStatsForEntity) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *FilesStatsForEntity) HasClusterIncarnationId() bool {
	if o != nil && o.ClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the ClusterIncarnationId field.
func (o *FilesStatsForEntity) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}
// SetClusterIncarnationIdNil sets the value for ClusterIncarnationId to be an explicit nil
func (o *FilesStatsForEntity) SetClusterIncarnationIdNil() {
	o.ClusterIncarnationId.Set(nil)
}

// UnsetClusterIncarnationId ensures that no value is present for ClusterIncarnationId, not even an explicit nil
func (o *FilesStatsForEntity) UnsetClusterIncarnationId() {
	o.ClusterIncarnationId.Unset()
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesStatsForEntity) GetEntityId() int64 {
	if o == nil || IsNil(o.EntityId.Get()) {
		var ret int64
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesStatsForEntity) GetEntityIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *FilesStatsForEntity) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableInt64 and assigns it to the EntityId field.
func (o *FilesStatsForEntity) SetEntityId(v int64) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *FilesStatsForEntity) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *FilesStatsForEntity) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetEntityName returns the EntityName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesStatsForEntity) GetEntityName() string {
	if o == nil || IsNil(o.EntityName.Get()) {
		var ret string
		return ret
	}
	return *o.EntityName.Get()
}

// GetEntityNameOk returns a tuple with the EntityName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesStatsForEntity) GetEntityNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityName.Get(), o.EntityName.IsSet()
}

// HasEntityName returns a boolean if a field has been set.
func (o *FilesStatsForEntity) HasEntityName() bool {
	if o != nil && o.EntityName.IsSet() {
		return true
	}

	return false
}

// SetEntityName gets a reference to the given NullableString and assigns it to the EntityName field.
func (o *FilesStatsForEntity) SetEntityName(v string) {
	o.EntityName.Set(&v)
}
// SetEntityNameNil sets the value for EntityName to be an explicit nil
func (o *FilesStatsForEntity) SetEntityNameNil() {
	o.EntityName.Set(nil)
}

// UnsetEntityName ensures that no value is present for EntityName, not even an explicit nil
func (o *FilesStatsForEntity) UnsetEntityName() {
	o.EntityName.Unset()
}

// GetEntityType returns the EntityType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesStatsForEntity) GetEntityType() string {
	if o == nil || IsNil(o.EntityType.Get()) {
		var ret string
		return ret
	}
	return *o.EntityType.Get()
}

// GetEntityTypeOk returns a tuple with the EntityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesStatsForEntity) GetEntityTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityType.Get(), o.EntityType.IsSet()
}

// HasEntityType returns a boolean if a field has been set.
func (o *FilesStatsForEntity) HasEntityType() bool {
	if o != nil && o.EntityType.IsSet() {
		return true
	}

	return false
}

// SetEntityType gets a reference to the given NullableString and assigns it to the EntityType field.
func (o *FilesStatsForEntity) SetEntityType(v string) {
	o.EntityType.Set(&v)
}
// SetEntityTypeNil sets the value for EntityType to be an explicit nil
func (o *FilesStatsForEntity) SetEntityTypeNil() {
	o.EntityType.Set(nil)
}

// UnsetEntityType ensures that no value is present for EntityType, not even an explicit nil
func (o *FilesStatsForEntity) UnsetEntityType() {
	o.EntityType.Unset()
}

// GetFilesStats returns the FilesStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesStatsForEntity) GetFilesStats() []FileStats {
	if o == nil {
		var ret []FileStats
		return ret
	}
	return o.FilesStats
}

// GetFilesStatsOk returns a tuple with the FilesStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesStatsForEntity) GetFilesStatsOk() ([]FileStats, bool) {
	if o == nil || IsNil(o.FilesStats) {
		return nil, false
	}
	return o.FilesStats, true
}

// HasFilesStats returns a boolean if a field has been set.
func (o *FilesStatsForEntity) HasFilesStats() bool {
	if o != nil && !IsNil(o.FilesStats) {
		return true
	}

	return false
}

// SetFilesStats gets a reference to the given []FileStats and assigns it to the FilesStats field.
func (o *FilesStatsForEntity) SetFilesStats(v []FileStats) {
	o.FilesStats = v
}

func (o FilesStatsForEntity) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FilesStatsForEntity) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterIncarnationId.IsSet() {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.EntityName.IsSet() {
		toSerialize["entityName"] = o.EntityName.Get()
	}
	if o.EntityType.IsSet() {
		toSerialize["entityType"] = o.EntityType.Get()
	}
	if o.FilesStats != nil {
		toSerialize["filesStats"] = o.FilesStats
	}
	return toSerialize, nil
}

type NullableFilesStatsForEntity struct {
	value *FilesStatsForEntity
	isSet bool
}

func (v NullableFilesStatsForEntity) Get() *FilesStatsForEntity {
	return v.value
}

func (v *NullableFilesStatsForEntity) Set(val *FilesStatsForEntity) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesStatsForEntity) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesStatsForEntity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesStatsForEntity(val *FilesStatsForEntity) *NullableFilesStatsForEntity {
	return &NullableFilesStatsForEntity{value: val, isSet: true}
}

func (v NullableFilesStatsForEntity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesStatsForEntity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


