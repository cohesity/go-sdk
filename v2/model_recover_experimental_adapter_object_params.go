/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RecoverExperimentalAdapterObjectParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverExperimentalAdapterObjectParams{}

// RecoverExperimentalAdapterObjectParams Specifies details of objects to be recovered.
type RecoverExperimentalAdapterObjectParams struct {
	// Specifies the ID of the object.
	ObjectId NullableInt64 `json:"objectId,omitempty"`
	// Set to true to overwrite an existing object at the destination. If set to false, and the same object exists at the destination, then recovery will fail for that object.
	Overwrite NullableBool `json:"overwrite,omitempty"`
	// Specifies the new name to which the object should be renamed to after the recovery.
	RenameTo NullableString `json:"renameTo,omitempty"`
}

// NewRecoverExperimentalAdapterObjectParams instantiates a new RecoverExperimentalAdapterObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverExperimentalAdapterObjectParams() *RecoverExperimentalAdapterObjectParams {
	this := RecoverExperimentalAdapterObjectParams{}
	return &this
}

// NewRecoverExperimentalAdapterObjectParamsWithDefaults instantiates a new RecoverExperimentalAdapterObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverExperimentalAdapterObjectParamsWithDefaults() *RecoverExperimentalAdapterObjectParams {
	this := RecoverExperimentalAdapterObjectParams{}
	return &this
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverExperimentalAdapterObjectParams) GetObjectId() int64 {
	if o == nil || IsNil(o.ObjectId.Get()) {
		var ret int64
		return ret
	}
	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverExperimentalAdapterObjectParams) GetObjectIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// HasObjectId returns a boolean if a field has been set.
func (o *RecoverExperimentalAdapterObjectParams) HasObjectId() bool {
	if o != nil && o.ObjectId.IsSet() {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given NullableInt64 and assigns it to the ObjectId field.
func (o *RecoverExperimentalAdapterObjectParams) SetObjectId(v int64) {
	o.ObjectId.Set(&v)
}
// SetObjectIdNil sets the value for ObjectId to be an explicit nil
func (o *RecoverExperimentalAdapterObjectParams) SetObjectIdNil() {
	o.ObjectId.Set(nil)
}

// UnsetObjectId ensures that no value is present for ObjectId, not even an explicit nil
func (o *RecoverExperimentalAdapterObjectParams) UnsetObjectId() {
	o.ObjectId.Unset()
}

// GetOverwrite returns the Overwrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverExperimentalAdapterObjectParams) GetOverwrite() bool {
	if o == nil || IsNil(o.Overwrite.Get()) {
		var ret bool
		return ret
	}
	return *o.Overwrite.Get()
}

// GetOverwriteOk returns a tuple with the Overwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverExperimentalAdapterObjectParams) GetOverwriteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Overwrite.Get(), o.Overwrite.IsSet()
}

// HasOverwrite returns a boolean if a field has been set.
func (o *RecoverExperimentalAdapterObjectParams) HasOverwrite() bool {
	if o != nil && o.Overwrite.IsSet() {
		return true
	}

	return false
}

// SetOverwrite gets a reference to the given NullableBool and assigns it to the Overwrite field.
func (o *RecoverExperimentalAdapterObjectParams) SetOverwrite(v bool) {
	o.Overwrite.Set(&v)
}
// SetOverwriteNil sets the value for Overwrite to be an explicit nil
func (o *RecoverExperimentalAdapterObjectParams) SetOverwriteNil() {
	o.Overwrite.Set(nil)
}

// UnsetOverwrite ensures that no value is present for Overwrite, not even an explicit nil
func (o *RecoverExperimentalAdapterObjectParams) UnsetOverwrite() {
	o.Overwrite.Unset()
}

// GetRenameTo returns the RenameTo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverExperimentalAdapterObjectParams) GetRenameTo() string {
	if o == nil || IsNil(o.RenameTo.Get()) {
		var ret string
		return ret
	}
	return *o.RenameTo.Get()
}

// GetRenameToOk returns a tuple with the RenameTo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverExperimentalAdapterObjectParams) GetRenameToOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenameTo.Get(), o.RenameTo.IsSet()
}

// HasRenameTo returns a boolean if a field has been set.
func (o *RecoverExperimentalAdapterObjectParams) HasRenameTo() bool {
	if o != nil && o.RenameTo.IsSet() {
		return true
	}

	return false
}

// SetRenameTo gets a reference to the given NullableString and assigns it to the RenameTo field.
func (o *RecoverExperimentalAdapterObjectParams) SetRenameTo(v string) {
	o.RenameTo.Set(&v)
}
// SetRenameToNil sets the value for RenameTo to be an explicit nil
func (o *RecoverExperimentalAdapterObjectParams) SetRenameToNil() {
	o.RenameTo.Set(nil)
}

// UnsetRenameTo ensures that no value is present for RenameTo, not even an explicit nil
func (o *RecoverExperimentalAdapterObjectParams) UnsetRenameTo() {
	o.RenameTo.Unset()
}

func (o RecoverExperimentalAdapterObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverExperimentalAdapterObjectParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectId.IsSet() {
		toSerialize["objectId"] = o.ObjectId.Get()
	}
	if o.Overwrite.IsSet() {
		toSerialize["overwrite"] = o.Overwrite.Get()
	}
	if o.RenameTo.IsSet() {
		toSerialize["renameTo"] = o.RenameTo.Get()
	}
	return toSerialize, nil
}

type NullableRecoverExperimentalAdapterObjectParams struct {
	value *RecoverExperimentalAdapterObjectParams
	isSet bool
}

func (v NullableRecoverExperimentalAdapterObjectParams) Get() *RecoverExperimentalAdapterObjectParams {
	return v.value
}

func (v *NullableRecoverExperimentalAdapterObjectParams) Set(val *RecoverExperimentalAdapterObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverExperimentalAdapterObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverExperimentalAdapterObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverExperimentalAdapterObjectParams(val *RecoverExperimentalAdapterObjectParams) *NullableRecoverExperimentalAdapterObjectParams {
	return &NullableRecoverExperimentalAdapterObjectParams{value: val, isSet: true}
}

func (v NullableRecoverExperimentalAdapterObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverExperimentalAdapterObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


