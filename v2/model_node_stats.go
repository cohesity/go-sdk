/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeStats{}

// NodeStats NodeStats provides various statistics for the node.
type NodeStats struct {
	// Id is the Id of the Node.
	Id NullableInt64 `json:"id,omitempty"`
	UsagePerfStats *UsageAndPerformanceStats `json:"usagePerfStats,omitempty"`
}

// NewNodeStats instantiates a new NodeStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeStats() *NodeStats {
	this := NodeStats{}
	return &this
}

// NewNodeStatsWithDefaults instantiates a new NodeStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeStatsWithDefaults() *NodeStats {
	this := NodeStats{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStats) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStats) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *NodeStats) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *NodeStats) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *NodeStats) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *NodeStats) UnsetId() {
	o.Id.Unset()
}

// GetUsagePerfStats returns the UsagePerfStats field value if set, zero value otherwise.
func (o *NodeStats) GetUsagePerfStats() UsageAndPerformanceStats {
	if o == nil || IsNil(o.UsagePerfStats) {
		var ret UsageAndPerformanceStats
		return ret
	}
	return *o.UsagePerfStats
}

// GetUsagePerfStatsOk returns a tuple with the UsagePerfStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeStats) GetUsagePerfStatsOk() (*UsageAndPerformanceStats, bool) {
	if o == nil || IsNil(o.UsagePerfStats) {
		return nil, false
	}
	return o.UsagePerfStats, true
}

// HasUsagePerfStats returns a boolean if a field has been set.
func (o *NodeStats) HasUsagePerfStats() bool {
	if o != nil && !IsNil(o.UsagePerfStats) {
		return true
	}

	return false
}

// SetUsagePerfStats gets a reference to the given UsageAndPerformanceStats and assigns it to the UsagePerfStats field.
func (o *NodeStats) SetUsagePerfStats(v UsageAndPerformanceStats) {
	o.UsagePerfStats = &v
}

func (o NodeStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if !IsNil(o.UsagePerfStats) {
		toSerialize["usagePerfStats"] = o.UsagePerfStats
	}
	return toSerialize, nil
}

type NullableNodeStats struct {
	value *NodeStats
	isSet bool
}

func (v NullableNodeStats) Get() *NodeStats {
	return v.value
}

func (v *NullableNodeStats) Set(val *NodeStats) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeStats) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeStats(val *NodeStats) *NullableNodeStats {
	return &NullableNodeStats{value: val, isSet: true}
}

func (v NullableNodeStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


