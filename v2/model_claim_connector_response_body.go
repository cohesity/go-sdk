/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ClaimConnectorResponseBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClaimConnectorResponseBody{}

// ClaimConnectorResponseBody Response for claiming a connector.
type ClaimConnectorResponseBody struct {
	// Connection ID.
	ConnectionId *int64 `json:"connectionId,omitempty"`
	ConnectorCertBundle CertificateBundle `json:"connectorCertBundle"`
	// Unique id of the connector.
	ConnectorGuid *int64 `json:"connectorGuid,omitempty"`
	// Tenant's CA chain.
	TenantCaChain []string `json:"tenantCaChain"`
	// Tenant id associated with the claimed connector.
	TenantId *string `json:"tenantId,omitempty"`
}

type _ClaimConnectorResponseBody ClaimConnectorResponseBody

// NewClaimConnectorResponseBody instantiates a new ClaimConnectorResponseBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClaimConnectorResponseBody(connectorCertBundle CertificateBundle, tenantCaChain []string) *ClaimConnectorResponseBody {
	this := ClaimConnectorResponseBody{}
	this.ConnectorCertBundle = connectorCertBundle
	this.TenantCaChain = tenantCaChain
	return &this
}

// NewClaimConnectorResponseBodyWithDefaults instantiates a new ClaimConnectorResponseBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClaimConnectorResponseBodyWithDefaults() *ClaimConnectorResponseBody {
	this := ClaimConnectorResponseBody{}
	return &this
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise.
func (o *ClaimConnectorResponseBody) GetConnectionId() int64 {
	if o == nil || IsNil(o.ConnectionId) {
		var ret int64
		return ret
	}
	return *o.ConnectionId
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimConnectorResponseBody) GetConnectionIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ConnectionId) {
		return nil, false
	}
	return o.ConnectionId, true
}

// HasConnectionId returns a boolean if a field has been set.
func (o *ClaimConnectorResponseBody) HasConnectionId() bool {
	if o != nil && !IsNil(o.ConnectionId) {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given int64 and assigns it to the ConnectionId field.
func (o *ClaimConnectorResponseBody) SetConnectionId(v int64) {
	o.ConnectionId = &v
}

// GetConnectorCertBundle returns the ConnectorCertBundle field value
func (o *ClaimConnectorResponseBody) GetConnectorCertBundle() CertificateBundle {
	if o == nil {
		var ret CertificateBundle
		return ret
	}

	return o.ConnectorCertBundle
}

// GetConnectorCertBundleOk returns a tuple with the ConnectorCertBundle field value
// and a boolean to check if the value has been set.
func (o *ClaimConnectorResponseBody) GetConnectorCertBundleOk() (*CertificateBundle, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectorCertBundle, true
}

// SetConnectorCertBundle sets field value
func (o *ClaimConnectorResponseBody) SetConnectorCertBundle(v CertificateBundle) {
	o.ConnectorCertBundle = v
}

// GetConnectorGuid returns the ConnectorGuid field value if set, zero value otherwise.
func (o *ClaimConnectorResponseBody) GetConnectorGuid() int64 {
	if o == nil || IsNil(o.ConnectorGuid) {
		var ret int64
		return ret
	}
	return *o.ConnectorGuid
}

// GetConnectorGuidOk returns a tuple with the ConnectorGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimConnectorResponseBody) GetConnectorGuidOk() (*int64, bool) {
	if o == nil || IsNil(o.ConnectorGuid) {
		return nil, false
	}
	return o.ConnectorGuid, true
}

// HasConnectorGuid returns a boolean if a field has been set.
func (o *ClaimConnectorResponseBody) HasConnectorGuid() bool {
	if o != nil && !IsNil(o.ConnectorGuid) {
		return true
	}

	return false
}

// SetConnectorGuid gets a reference to the given int64 and assigns it to the ConnectorGuid field.
func (o *ClaimConnectorResponseBody) SetConnectorGuid(v int64) {
	o.ConnectorGuid = &v
}

// GetTenantCaChain returns the TenantCaChain field value
func (o *ClaimConnectorResponseBody) GetTenantCaChain() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TenantCaChain
}

// GetTenantCaChainOk returns a tuple with the TenantCaChain field value
// and a boolean to check if the value has been set.
func (o *ClaimConnectorResponseBody) GetTenantCaChainOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantCaChain, true
}

// SetTenantCaChain sets field value
func (o *ClaimConnectorResponseBody) SetTenantCaChain(v []string) {
	o.TenantCaChain = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise.
func (o *ClaimConnectorResponseBody) GetTenantId() string {
	if o == nil || IsNil(o.TenantId) {
		var ret string
		return ret
	}
	return *o.TenantId
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClaimConnectorResponseBody) GetTenantIdOk() (*string, bool) {
	if o == nil || IsNil(o.TenantId) {
		return nil, false
	}
	return o.TenantId, true
}

// HasTenantId returns a boolean if a field has been set.
func (o *ClaimConnectorResponseBody) HasTenantId() bool {
	if o != nil && !IsNil(o.TenantId) {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given string and assigns it to the TenantId field.
func (o *ClaimConnectorResponseBody) SetTenantId(v string) {
	o.TenantId = &v
}

func (o ClaimConnectorResponseBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClaimConnectorResponseBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ConnectionId) {
		toSerialize["connectionId"] = o.ConnectionId
	}
	toSerialize["connectorCertBundle"] = o.ConnectorCertBundle
	if !IsNil(o.ConnectorGuid) {
		toSerialize["connectorGuid"] = o.ConnectorGuid
	}
	toSerialize["tenantCaChain"] = o.TenantCaChain
	if !IsNil(o.TenantId) {
		toSerialize["tenantId"] = o.TenantId
	}
	return toSerialize, nil
}

func (o *ClaimConnectorResponseBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"connectorCertBundle",
		"tenantCaChain",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varClaimConnectorResponseBody := _ClaimConnectorResponseBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varClaimConnectorResponseBody)

	if err != nil {
		return err
	}

	*o = ClaimConnectorResponseBody(varClaimConnectorResponseBody)

	return err
}

type NullableClaimConnectorResponseBody struct {
	value *ClaimConnectorResponseBody
	isSet bool
}

func (v NullableClaimConnectorResponseBody) Get() *ClaimConnectorResponseBody {
	return v.value
}

func (v *NullableClaimConnectorResponseBody) Set(val *ClaimConnectorResponseBody) {
	v.value = val
	v.isSet = true
}

func (v NullableClaimConnectorResponseBody) IsSet() bool {
	return v.isSet
}

func (v *NullableClaimConnectorResponseBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClaimConnectorResponseBody(val *ClaimConnectorResponseBody) *NullableClaimConnectorResponseBody {
	return &NullableClaimConnectorResponseBody{value: val, isSet: true}
}

func (v NullableClaimConnectorResponseBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClaimConnectorResponseBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


