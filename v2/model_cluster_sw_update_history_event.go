/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"time"
)

// checks if the ClusterSWUpdateHistoryEvent type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ClusterSWUpdateHistoryEvent{}

// ClusterSWUpdateHistoryEvent Represents an event of cluster upgrade/patch
type ClusterSWUpdateHistoryEvent struct {
	// Latest Unix epoch timestamp (in seconds) when the upgrade/patch was done - will contain the value from the node that got updated last. 
	EventTimestampSecs NullableInt64 `json:"eventTimestampSecs,omitempty"`
	NodeHistory []ClusterSWUpdateNodeHistoryEvent `json:"nodeHistory,omitempty"`
	// Type of operation. 
	OperationType *string `json:"operationType,omitempty"`
	// Sub-type of package - Security Patch or Product Patch
	PackageSubType NullableString `json:"packageSubType,omitempty"`
	// Type of the package
	PackageType *string `json:"packageType,omitempty"`
	// Release date of the package.
	ReleaseDate NullableTime `json:"releaseDate,omitempty"`
	// Release version of the package. Examples: For upgrade package: '6.6.0d_u6', '7.0.' For patch package - '6.8.1-p1s1' 
	ReleaseVersion *string `json:"releaseVersion,omitempty"`
	// Name of the package version. Example: '6.6.0d_u6_release-20210714_0fad884e',   '7.0.1_release-20230623_ddbb8c79' for upgrade packages, '6.8.1-p1s1-2023Jun26-221b8a5c' for patch packages 
	VersionName NullableString `json:"versionName,omitempty"`
}

// NewClusterSWUpdateHistoryEvent instantiates a new ClusterSWUpdateHistoryEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterSWUpdateHistoryEvent() *ClusterSWUpdateHistoryEvent {
	this := ClusterSWUpdateHistoryEvent{}
	return &this
}

// NewClusterSWUpdateHistoryEventWithDefaults instantiates a new ClusterSWUpdateHistoryEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterSWUpdateHistoryEventWithDefaults() *ClusterSWUpdateHistoryEvent {
	this := ClusterSWUpdateHistoryEvent{}
	return &this
}

// GetEventTimestampSecs returns the EventTimestampSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterSWUpdateHistoryEvent) GetEventTimestampSecs() int64 {
	if o == nil || IsNil(o.EventTimestampSecs.Get()) {
		var ret int64
		return ret
	}
	return *o.EventTimestampSecs.Get()
}

// GetEventTimestampSecsOk returns a tuple with the EventTimestampSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterSWUpdateHistoryEvent) GetEventTimestampSecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventTimestampSecs.Get(), o.EventTimestampSecs.IsSet()
}

// HasEventTimestampSecs returns a boolean if a field has been set.
func (o *ClusterSWUpdateHistoryEvent) HasEventTimestampSecs() bool {
	if o != nil && o.EventTimestampSecs.IsSet() {
		return true
	}

	return false
}

// SetEventTimestampSecs gets a reference to the given NullableInt64 and assigns it to the EventTimestampSecs field.
func (o *ClusterSWUpdateHistoryEvent) SetEventTimestampSecs(v int64) {
	o.EventTimestampSecs.Set(&v)
}
// SetEventTimestampSecsNil sets the value for EventTimestampSecs to be an explicit nil
func (o *ClusterSWUpdateHistoryEvent) SetEventTimestampSecsNil() {
	o.EventTimestampSecs.Set(nil)
}

// UnsetEventTimestampSecs ensures that no value is present for EventTimestampSecs, not even an explicit nil
func (o *ClusterSWUpdateHistoryEvent) UnsetEventTimestampSecs() {
	o.EventTimestampSecs.Unset()
}

// GetNodeHistory returns the NodeHistory field value if set, zero value otherwise.
func (o *ClusterSWUpdateHistoryEvent) GetNodeHistory() []ClusterSWUpdateNodeHistoryEvent {
	if o == nil || IsNil(o.NodeHistory) {
		var ret []ClusterSWUpdateNodeHistoryEvent
		return ret
	}
	return o.NodeHistory
}

// GetNodeHistoryOk returns a tuple with the NodeHistory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSWUpdateHistoryEvent) GetNodeHistoryOk() ([]ClusterSWUpdateNodeHistoryEvent, bool) {
	if o == nil || IsNil(o.NodeHistory) {
		return nil, false
	}
	return o.NodeHistory, true
}

// HasNodeHistory returns a boolean if a field has been set.
func (o *ClusterSWUpdateHistoryEvent) HasNodeHistory() bool {
	if o != nil && !IsNil(o.NodeHistory) {
		return true
	}

	return false
}

// SetNodeHistory gets a reference to the given []ClusterSWUpdateNodeHistoryEvent and assigns it to the NodeHistory field.
func (o *ClusterSWUpdateHistoryEvent) SetNodeHistory(v []ClusterSWUpdateNodeHistoryEvent) {
	o.NodeHistory = v
}

// GetOperationType returns the OperationType field value if set, zero value otherwise.
func (o *ClusterSWUpdateHistoryEvent) GetOperationType() string {
	if o == nil || IsNil(o.OperationType) {
		var ret string
		return ret
	}
	return *o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSWUpdateHistoryEvent) GetOperationTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OperationType) {
		return nil, false
	}
	return o.OperationType, true
}

// HasOperationType returns a boolean if a field has been set.
func (o *ClusterSWUpdateHistoryEvent) HasOperationType() bool {
	if o != nil && !IsNil(o.OperationType) {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given string and assigns it to the OperationType field.
func (o *ClusterSWUpdateHistoryEvent) SetOperationType(v string) {
	o.OperationType = &v
}

// GetPackageSubType returns the PackageSubType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterSWUpdateHistoryEvent) GetPackageSubType() string {
	if o == nil || IsNil(o.PackageSubType.Get()) {
		var ret string
		return ret
	}
	return *o.PackageSubType.Get()
}

// GetPackageSubTypeOk returns a tuple with the PackageSubType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterSWUpdateHistoryEvent) GetPackageSubTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PackageSubType.Get(), o.PackageSubType.IsSet()
}

// HasPackageSubType returns a boolean if a field has been set.
func (o *ClusterSWUpdateHistoryEvent) HasPackageSubType() bool {
	if o != nil && o.PackageSubType.IsSet() {
		return true
	}

	return false
}

// SetPackageSubType gets a reference to the given NullableString and assigns it to the PackageSubType field.
func (o *ClusterSWUpdateHistoryEvent) SetPackageSubType(v string) {
	o.PackageSubType.Set(&v)
}
// SetPackageSubTypeNil sets the value for PackageSubType to be an explicit nil
func (o *ClusterSWUpdateHistoryEvent) SetPackageSubTypeNil() {
	o.PackageSubType.Set(nil)
}

// UnsetPackageSubType ensures that no value is present for PackageSubType, not even an explicit nil
func (o *ClusterSWUpdateHistoryEvent) UnsetPackageSubType() {
	o.PackageSubType.Unset()
}

// GetPackageType returns the PackageType field value if set, zero value otherwise.
func (o *ClusterSWUpdateHistoryEvent) GetPackageType() string {
	if o == nil || IsNil(o.PackageType) {
		var ret string
		return ret
	}
	return *o.PackageType
}

// GetPackageTypeOk returns a tuple with the PackageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSWUpdateHistoryEvent) GetPackageTypeOk() (*string, bool) {
	if o == nil || IsNil(o.PackageType) {
		return nil, false
	}
	return o.PackageType, true
}

// HasPackageType returns a boolean if a field has been set.
func (o *ClusterSWUpdateHistoryEvent) HasPackageType() bool {
	if o != nil && !IsNil(o.PackageType) {
		return true
	}

	return false
}

// SetPackageType gets a reference to the given string and assigns it to the PackageType field.
func (o *ClusterSWUpdateHistoryEvent) SetPackageType(v string) {
	o.PackageType = &v
}

// GetReleaseDate returns the ReleaseDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterSWUpdateHistoryEvent) GetReleaseDate() time.Time {
	if o == nil || IsNil(o.ReleaseDate.Get()) {
		var ret time.Time
		return ret
	}
	return *o.ReleaseDate.Get()
}

// GetReleaseDateOk returns a tuple with the ReleaseDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterSWUpdateHistoryEvent) GetReleaseDateOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReleaseDate.Get(), o.ReleaseDate.IsSet()
}

// HasReleaseDate returns a boolean if a field has been set.
func (o *ClusterSWUpdateHistoryEvent) HasReleaseDate() bool {
	if o != nil && o.ReleaseDate.IsSet() {
		return true
	}

	return false
}

// SetReleaseDate gets a reference to the given NullableTime and assigns it to the ReleaseDate field.
func (o *ClusterSWUpdateHistoryEvent) SetReleaseDate(v time.Time) {
	o.ReleaseDate.Set(&v)
}
// SetReleaseDateNil sets the value for ReleaseDate to be an explicit nil
func (o *ClusterSWUpdateHistoryEvent) SetReleaseDateNil() {
	o.ReleaseDate.Set(nil)
}

// UnsetReleaseDate ensures that no value is present for ReleaseDate, not even an explicit nil
func (o *ClusterSWUpdateHistoryEvent) UnsetReleaseDate() {
	o.ReleaseDate.Unset()
}

// GetReleaseVersion returns the ReleaseVersion field value if set, zero value otherwise.
func (o *ClusterSWUpdateHistoryEvent) GetReleaseVersion() string {
	if o == nil || IsNil(o.ReleaseVersion) {
		var ret string
		return ret
	}
	return *o.ReleaseVersion
}

// GetReleaseVersionOk returns a tuple with the ReleaseVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterSWUpdateHistoryEvent) GetReleaseVersionOk() (*string, bool) {
	if o == nil || IsNil(o.ReleaseVersion) {
		return nil, false
	}
	return o.ReleaseVersion, true
}

// HasReleaseVersion returns a boolean if a field has been set.
func (o *ClusterSWUpdateHistoryEvent) HasReleaseVersion() bool {
	if o != nil && !IsNil(o.ReleaseVersion) {
		return true
	}

	return false
}

// SetReleaseVersion gets a reference to the given string and assigns it to the ReleaseVersion field.
func (o *ClusterSWUpdateHistoryEvent) SetReleaseVersion(v string) {
	o.ReleaseVersion = &v
}

// GetVersionName returns the VersionName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterSWUpdateHistoryEvent) GetVersionName() string {
	if o == nil || IsNil(o.VersionName.Get()) {
		var ret string
		return ret
	}
	return *o.VersionName.Get()
}

// GetVersionNameOk returns a tuple with the VersionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterSWUpdateHistoryEvent) GetVersionNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.VersionName.Get(), o.VersionName.IsSet()
}

// HasVersionName returns a boolean if a field has been set.
func (o *ClusterSWUpdateHistoryEvent) HasVersionName() bool {
	if o != nil && o.VersionName.IsSet() {
		return true
	}

	return false
}

// SetVersionName gets a reference to the given NullableString and assigns it to the VersionName field.
func (o *ClusterSWUpdateHistoryEvent) SetVersionName(v string) {
	o.VersionName.Set(&v)
}
// SetVersionNameNil sets the value for VersionName to be an explicit nil
func (o *ClusterSWUpdateHistoryEvent) SetVersionNameNil() {
	o.VersionName.Set(nil)
}

// UnsetVersionName ensures that no value is present for VersionName, not even an explicit nil
func (o *ClusterSWUpdateHistoryEvent) UnsetVersionName() {
	o.VersionName.Unset()
}

func (o ClusterSWUpdateHistoryEvent) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ClusterSWUpdateHistoryEvent) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EventTimestampSecs.IsSet() {
		toSerialize["eventTimestampSecs"] = o.EventTimestampSecs.Get()
	}
	if !IsNil(o.NodeHistory) {
		toSerialize["nodeHistory"] = o.NodeHistory
	}
	if !IsNil(o.OperationType) {
		toSerialize["operationType"] = o.OperationType
	}
	if o.PackageSubType.IsSet() {
		toSerialize["packageSubType"] = o.PackageSubType.Get()
	}
	if !IsNil(o.PackageType) {
		toSerialize["packageType"] = o.PackageType
	}
	if o.ReleaseDate.IsSet() {
		toSerialize["releaseDate"] = o.ReleaseDate.Get()
	}
	if !IsNil(o.ReleaseVersion) {
		toSerialize["releaseVersion"] = o.ReleaseVersion
	}
	if o.VersionName.IsSet() {
		toSerialize["versionName"] = o.VersionName.Get()
	}
	return toSerialize, nil
}

type NullableClusterSWUpdateHistoryEvent struct {
	value *ClusterSWUpdateHistoryEvent
	isSet bool
}

func (v NullableClusterSWUpdateHistoryEvent) Get() *ClusterSWUpdateHistoryEvent {
	return v.value
}

func (v *NullableClusterSWUpdateHistoryEvent) Set(val *ClusterSWUpdateHistoryEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterSWUpdateHistoryEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterSWUpdateHistoryEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterSWUpdateHistoryEvent(val *ClusterSWUpdateHistoryEvent) *NullableClusterSWUpdateHistoryEvent {
	return &NullableClusterSWUpdateHistoryEvent{value: val, isSet: true}
}

func (v NullableClusterSWUpdateHistoryEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterSWUpdateHistoryEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


