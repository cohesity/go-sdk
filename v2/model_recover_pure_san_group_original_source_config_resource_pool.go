/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverPureSanGroupOriginalSourceConfigResourcePool type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverPureSanGroupOriginalSourceConfigResourcePool{}

// RecoverPureSanGroupOriginalSourceConfigResourcePool Specifies the id of the resource pool to recover the SAN Volume to. This field can be specified for cases where the resource pool can be altered on the original source.
type RecoverPureSanGroupOriginalSourceConfigResourcePool struct {
	// Specifies the id of the object.
	Id NullableInt64 `json:"id"`
	// Specifies the name of the object.
	Name NullableString `json:"name,omitempty"`
}

type _RecoverPureSanGroupOriginalSourceConfigResourcePool RecoverPureSanGroupOriginalSourceConfigResourcePool

// NewRecoverPureSanGroupOriginalSourceConfigResourcePool instantiates a new RecoverPureSanGroupOriginalSourceConfigResourcePool object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverPureSanGroupOriginalSourceConfigResourcePool(id NullableInt64) *RecoverPureSanGroupOriginalSourceConfigResourcePool {
	this := RecoverPureSanGroupOriginalSourceConfigResourcePool{}
	this.Id = id
	return &this
}

// NewRecoverPureSanGroupOriginalSourceConfigResourcePoolWithDefaults instantiates a new RecoverPureSanGroupOriginalSourceConfigResourcePool object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverPureSanGroupOriginalSourceConfigResourcePoolWithDefaults() *RecoverPureSanGroupOriginalSourceConfigResourcePool {
	this := RecoverPureSanGroupOriginalSourceConfigResourcePool{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RecoverPureSanGroupOriginalSourceConfigResourcePool) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPureSanGroupOriginalSourceConfigResourcePool) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *RecoverPureSanGroupOriginalSourceConfigResourcePool) SetId(v int64) {
	o.Id.Set(&v)
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPureSanGroupOriginalSourceConfigResourcePool) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPureSanGroupOriginalSourceConfigResourcePool) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RecoverPureSanGroupOriginalSourceConfigResourcePool) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RecoverPureSanGroupOriginalSourceConfigResourcePool) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RecoverPureSanGroupOriginalSourceConfigResourcePool) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RecoverPureSanGroupOriginalSourceConfigResourcePool) UnsetName() {
	o.Name.Unset()
}

func (o RecoverPureSanGroupOriginalSourceConfigResourcePool) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverPureSanGroupOriginalSourceConfigResourcePool) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id.Get()
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return toSerialize, nil
}

func (o *RecoverPureSanGroupOriginalSourceConfigResourcePool) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverPureSanGroupOriginalSourceConfigResourcePool := _RecoverPureSanGroupOriginalSourceConfigResourcePool{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverPureSanGroupOriginalSourceConfigResourcePool)

	if err != nil {
		return err
	}

	*o = RecoverPureSanGroupOriginalSourceConfigResourcePool(varRecoverPureSanGroupOriginalSourceConfigResourcePool)

	return err
}

type NullableRecoverPureSanGroupOriginalSourceConfigResourcePool struct {
	value *RecoverPureSanGroupOriginalSourceConfigResourcePool
	isSet bool
}

func (v NullableRecoverPureSanGroupOriginalSourceConfigResourcePool) Get() *RecoverPureSanGroupOriginalSourceConfigResourcePool {
	return v.value
}

func (v *NullableRecoverPureSanGroupOriginalSourceConfigResourcePool) Set(val *RecoverPureSanGroupOriginalSourceConfigResourcePool) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverPureSanGroupOriginalSourceConfigResourcePool) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverPureSanGroupOriginalSourceConfigResourcePool) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverPureSanGroupOriginalSourceConfigResourcePool(val *RecoverPureSanGroupOriginalSourceConfigResourcePool) *NullableRecoverPureSanGroupOriginalSourceConfigResourcePool {
	return &NullableRecoverPureSanGroupOriginalSourceConfigResourcePool{value: val, isSet: true}
}

func (v NullableRecoverPureSanGroupOriginalSourceConfigResourcePool) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverPureSanGroupOriginalSourceConfigResourcePool) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


