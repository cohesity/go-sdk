/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DeleteInfectedObjectsParameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeleteInfectedObjectsParameters{}

// DeleteInfectedObjectsParameters Specifies the parameters to delete infected objects permanently.
type DeleteInfectedObjectsParameters struct {
	// Specifies a list of infected objects to be deleted.
	InfectedObjects []InfectedObject `json:"infectedObjects"`
}

type _DeleteInfectedObjectsParameters DeleteInfectedObjectsParameters

// NewDeleteInfectedObjectsParameters instantiates a new DeleteInfectedObjectsParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteInfectedObjectsParameters(infectedObjects []InfectedObject) *DeleteInfectedObjectsParameters {
	this := DeleteInfectedObjectsParameters{}
	this.InfectedObjects = infectedObjects
	return &this
}

// NewDeleteInfectedObjectsParametersWithDefaults instantiates a new DeleteInfectedObjectsParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteInfectedObjectsParametersWithDefaults() *DeleteInfectedObjectsParameters {
	this := DeleteInfectedObjectsParameters{}
	return &this
}

// GetInfectedObjects returns the InfectedObjects field value
// If the value is explicit nil, the zero value for []InfectedObject will be returned
func (o *DeleteInfectedObjectsParameters) GetInfectedObjects() []InfectedObject {
	if o == nil {
		var ret []InfectedObject
		return ret
	}

	return o.InfectedObjects
}

// GetInfectedObjectsOk returns a tuple with the InfectedObjects field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteInfectedObjectsParameters) GetInfectedObjectsOk() ([]InfectedObject, bool) {
	if o == nil || IsNil(o.InfectedObjects) {
		return nil, false
	}
	return o.InfectedObjects, true
}

// SetInfectedObjects sets field value
func (o *DeleteInfectedObjectsParameters) SetInfectedObjects(v []InfectedObject) {
	o.InfectedObjects = v
}

func (o DeleteInfectedObjectsParameters) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeleteInfectedObjectsParameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.InfectedObjects != nil {
		toSerialize["infectedObjects"] = o.InfectedObjects
	}
	return toSerialize, nil
}

func (o *DeleteInfectedObjectsParameters) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"infectedObjects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDeleteInfectedObjectsParameters := _DeleteInfectedObjectsParameters{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDeleteInfectedObjectsParameters)

	if err != nil {
		return err
	}

	*o = DeleteInfectedObjectsParameters(varDeleteInfectedObjectsParameters)

	return err
}

type NullableDeleteInfectedObjectsParameters struct {
	value *DeleteInfectedObjectsParameters
	isSet bool
}

func (v NullableDeleteInfectedObjectsParameters) Get() *DeleteInfectedObjectsParameters {
	return v.value
}

func (v *NullableDeleteInfectedObjectsParameters) Set(val *DeleteInfectedObjectsParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteInfectedObjectsParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteInfectedObjectsParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteInfectedObjectsParameters(val *DeleteInfectedObjectsParameters) *NullableDeleteInfectedObjectsParameters {
	return &NullableDeleteInfectedObjectsParameters{value: val, isSet: true}
}

func (v NullableDeleteInfectedObjectsParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteInfectedObjectsParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


