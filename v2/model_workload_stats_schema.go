/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the WorkloadStatsSchema type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkloadStatsSchema{}

// WorkloadStatsSchema Specifies the workload types.
type WorkloadStatsSchema struct {
	// Specifies the Id of an Entity.
	EntityId NullableString `json:"entityId,omitempty"`
	// Specifies the name of an Entity.
	Name NullableString `json:"name,omitempty"`
	// Specifies the entities part of Workload schema.
	Entities []EntityIdentifier `json:"entities,omitempty"`
	// Specifies the Schema Name of Workload.
	Schema NullableString `json:"schema,omitempty"`
	// Specifies the Workload Sub-Types.
	SubTypes []WorkloadSubType `json:"subTypes,omitempty"`
}

// NewWorkloadStatsSchema instantiates a new WorkloadStatsSchema object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkloadStatsSchema() *WorkloadStatsSchema {
	this := WorkloadStatsSchema{}
	return &this
}

// NewWorkloadStatsSchemaWithDefaults instantiates a new WorkloadStatsSchema object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkloadStatsSchemaWithDefaults() *WorkloadStatsSchema {
	this := WorkloadStatsSchema{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadStatsSchema) GetEntityId() string {
	if o == nil || IsNil(o.EntityId.Get()) {
		var ret string
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadStatsSchema) GetEntityIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *WorkloadStatsSchema) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableString and assigns it to the EntityId field.
func (o *WorkloadStatsSchema) SetEntityId(v string) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *WorkloadStatsSchema) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *WorkloadStatsSchema) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadStatsSchema) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadStatsSchema) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *WorkloadStatsSchema) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *WorkloadStatsSchema) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *WorkloadStatsSchema) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *WorkloadStatsSchema) UnsetName() {
	o.Name.Unset()
}

// GetEntities returns the Entities field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadStatsSchema) GetEntities() []EntityIdentifier {
	if o == nil {
		var ret []EntityIdentifier
		return ret
	}
	return o.Entities
}

// GetEntitiesOk returns a tuple with the Entities field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadStatsSchema) GetEntitiesOk() ([]EntityIdentifier, bool) {
	if o == nil || IsNil(o.Entities) {
		return nil, false
	}
	return o.Entities, true
}

// HasEntities returns a boolean if a field has been set.
func (o *WorkloadStatsSchema) HasEntities() bool {
	if o != nil && !IsNil(o.Entities) {
		return true
	}

	return false
}

// SetEntities gets a reference to the given []EntityIdentifier and assigns it to the Entities field.
func (o *WorkloadStatsSchema) SetEntities(v []EntityIdentifier) {
	o.Entities = v
}

// GetSchema returns the Schema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadStatsSchema) GetSchema() string {
	if o == nil || IsNil(o.Schema.Get()) {
		var ret string
		return ret
	}
	return *o.Schema.Get()
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadStatsSchema) GetSchemaOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Schema.Get(), o.Schema.IsSet()
}

// HasSchema returns a boolean if a field has been set.
func (o *WorkloadStatsSchema) HasSchema() bool {
	if o != nil && o.Schema.IsSet() {
		return true
	}

	return false
}

// SetSchema gets a reference to the given NullableString and assigns it to the Schema field.
func (o *WorkloadStatsSchema) SetSchema(v string) {
	o.Schema.Set(&v)
}
// SetSchemaNil sets the value for Schema to be an explicit nil
func (o *WorkloadStatsSchema) SetSchemaNil() {
	o.Schema.Set(nil)
}

// UnsetSchema ensures that no value is present for Schema, not even an explicit nil
func (o *WorkloadStatsSchema) UnsetSchema() {
	o.Schema.Unset()
}

// GetSubTypes returns the SubTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkloadStatsSchema) GetSubTypes() []WorkloadSubType {
	if o == nil {
		var ret []WorkloadSubType
		return ret
	}
	return o.SubTypes
}

// GetSubTypesOk returns a tuple with the SubTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkloadStatsSchema) GetSubTypesOk() ([]WorkloadSubType, bool) {
	if o == nil || IsNil(o.SubTypes) {
		return nil, false
	}
	return o.SubTypes, true
}

// HasSubTypes returns a boolean if a field has been set.
func (o *WorkloadStatsSchema) HasSubTypes() bool {
	if o != nil && !IsNil(o.SubTypes) {
		return true
	}

	return false
}

// SetSubTypes gets a reference to the given []WorkloadSubType and assigns it to the SubTypes field.
func (o *WorkloadStatsSchema) SetSubTypes(v []WorkloadSubType) {
	o.SubTypes = v
}

func (o WorkloadStatsSchema) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkloadStatsSchema) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Entities != nil {
		toSerialize["entities"] = o.Entities
	}
	if o.Schema.IsSet() {
		toSerialize["schema"] = o.Schema.Get()
	}
	if o.SubTypes != nil {
		toSerialize["subTypes"] = o.SubTypes
	}
	return toSerialize, nil
}

type NullableWorkloadStatsSchema struct {
	value *WorkloadStatsSchema
	isSet bool
}

func (v NullableWorkloadStatsSchema) Get() *WorkloadStatsSchema {
	return v.value
}

func (v *NullableWorkloadStatsSchema) Set(val *WorkloadStatsSchema) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkloadStatsSchema) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkloadStatsSchema) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkloadStatsSchema(val *WorkloadStatsSchema) *NullableWorkloadStatsSchema {
	return &NullableWorkloadStatsSchema{value: val, isSet: true}
}

func (v NullableWorkloadStatsSchema) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkloadStatsSchema) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


