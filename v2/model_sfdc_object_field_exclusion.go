/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SfdcObjectFieldExclusion type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SfdcObjectFieldExclusion{}

// SfdcObjectFieldExclusion Specifies the field names to be excluded for the object.
type SfdcObjectFieldExclusion struct {
	// Specifies the list of Sfdc API names of the fields to be excluded in this object.
	ExcludeFieldNames []string `json:"excludeFieldNames,omitempty"`
	// Specifies the id of the object in which some fields are to be excluded. This should be a leaf level object.
	ObjectId *int64 `json:"objectId,omitempty"`
}

// NewSfdcObjectFieldExclusion instantiates a new SfdcObjectFieldExclusion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSfdcObjectFieldExclusion() *SfdcObjectFieldExclusion {
	this := SfdcObjectFieldExclusion{}
	return &this
}

// NewSfdcObjectFieldExclusionWithDefaults instantiates a new SfdcObjectFieldExclusion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSfdcObjectFieldExclusionWithDefaults() *SfdcObjectFieldExclusion {
	this := SfdcObjectFieldExclusion{}
	return &this
}

// GetExcludeFieldNames returns the ExcludeFieldNames field value if set, zero value otherwise.
func (o *SfdcObjectFieldExclusion) GetExcludeFieldNames() []string {
	if o == nil || IsNil(o.ExcludeFieldNames) {
		var ret []string
		return ret
	}
	return o.ExcludeFieldNames
}

// GetExcludeFieldNamesOk returns a tuple with the ExcludeFieldNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfdcObjectFieldExclusion) GetExcludeFieldNamesOk() ([]string, bool) {
	if o == nil || IsNil(o.ExcludeFieldNames) {
		return nil, false
	}
	return o.ExcludeFieldNames, true
}

// HasExcludeFieldNames returns a boolean if a field has been set.
func (o *SfdcObjectFieldExclusion) HasExcludeFieldNames() bool {
	if o != nil && !IsNil(o.ExcludeFieldNames) {
		return true
	}

	return false
}

// SetExcludeFieldNames gets a reference to the given []string and assigns it to the ExcludeFieldNames field.
func (o *SfdcObjectFieldExclusion) SetExcludeFieldNames(v []string) {
	o.ExcludeFieldNames = v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *SfdcObjectFieldExclusion) GetObjectId() int64 {
	if o == nil || IsNil(o.ObjectId) {
		var ret int64
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SfdcObjectFieldExclusion) GetObjectIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ObjectId) {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *SfdcObjectFieldExclusion) HasObjectId() bool {
	if o != nil && !IsNil(o.ObjectId) {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given int64 and assigns it to the ObjectId field.
func (o *SfdcObjectFieldExclusion) SetObjectId(v int64) {
	o.ObjectId = &v
}

func (o SfdcObjectFieldExclusion) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SfdcObjectFieldExclusion) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExcludeFieldNames) {
		toSerialize["excludeFieldNames"] = o.ExcludeFieldNames
	}
	if !IsNil(o.ObjectId) {
		toSerialize["objectId"] = o.ObjectId
	}
	return toSerialize, nil
}

type NullableSfdcObjectFieldExclusion struct {
	value *SfdcObjectFieldExclusion
	isSet bool
}

func (v NullableSfdcObjectFieldExclusion) Get() *SfdcObjectFieldExclusion {
	return v.value
}

func (v *NullableSfdcObjectFieldExclusion) Set(val *SfdcObjectFieldExclusion) {
	v.value = val
	v.isSet = true
}

func (v NullableSfdcObjectFieldExclusion) IsSet() bool {
	return v.isSet
}

func (v *NullableSfdcObjectFieldExclusion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSfdcObjectFieldExclusion(val *SfdcObjectFieldExclusion) *NullableSfdcObjectFieldExclusion {
	return &NullableSfdcObjectFieldExclusion{value: val, isSet: true}
}

func (v NullableSfdcObjectFieldExclusion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSfdcObjectFieldExclusion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


