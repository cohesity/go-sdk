/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DeviceTreeNonLeafNode type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DeviceTreeNonLeafNode{}

// DeviceTreeNonLeafNode Specifies the parameters of a non leaf node in device tree.
type DeviceTreeNonLeafNode struct {
	// Specifies a list of children nodes.
	ChildrenNodes []DeviceTreeNode `json:"childrenNodes,omitempty"`
	// Specifies the id of device.
	DeviceId NullableInt64 `json:"deviceId,omitempty"`
	// Specifies the length of device.
	DeviceLength NullableInt64 `json:"deviceLength,omitempty"`
	// Specifies the children nodes combine type.
	Type NullableString `json:"type,omitempty"`
}

// NewDeviceTreeNonLeafNode instantiates a new DeviceTreeNonLeafNode object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceTreeNonLeafNode() *DeviceTreeNonLeafNode {
	this := DeviceTreeNonLeafNode{}
	return &this
}

// NewDeviceTreeNonLeafNodeWithDefaults instantiates a new DeviceTreeNonLeafNode object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceTreeNonLeafNodeWithDefaults() *DeviceTreeNonLeafNode {
	this := DeviceTreeNonLeafNode{}
	return &this
}

// GetChildrenNodes returns the ChildrenNodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreeNonLeafNode) GetChildrenNodes() []DeviceTreeNode {
	if o == nil {
		var ret []DeviceTreeNode
		return ret
	}
	return o.ChildrenNodes
}

// GetChildrenNodesOk returns a tuple with the ChildrenNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreeNonLeafNode) GetChildrenNodesOk() ([]DeviceTreeNode, bool) {
	if o == nil || IsNil(o.ChildrenNodes) {
		return nil, false
	}
	return o.ChildrenNodes, true
}

// HasChildrenNodes returns a boolean if a field has been set.
func (o *DeviceTreeNonLeafNode) HasChildrenNodes() bool {
	if o != nil && !IsNil(o.ChildrenNodes) {
		return true
	}

	return false
}

// SetChildrenNodes gets a reference to the given []DeviceTreeNode and assigns it to the ChildrenNodes field.
func (o *DeviceTreeNonLeafNode) SetChildrenNodes(v []DeviceTreeNode) {
	o.ChildrenNodes = v
}

// GetDeviceId returns the DeviceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreeNonLeafNode) GetDeviceId() int64 {
	if o == nil || IsNil(o.DeviceId.Get()) {
		var ret int64
		return ret
	}
	return *o.DeviceId.Get()
}

// GetDeviceIdOk returns a tuple with the DeviceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreeNonLeafNode) GetDeviceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceId.Get(), o.DeviceId.IsSet()
}

// HasDeviceId returns a boolean if a field has been set.
func (o *DeviceTreeNonLeafNode) HasDeviceId() bool {
	if o != nil && o.DeviceId.IsSet() {
		return true
	}

	return false
}

// SetDeviceId gets a reference to the given NullableInt64 and assigns it to the DeviceId field.
func (o *DeviceTreeNonLeafNode) SetDeviceId(v int64) {
	o.DeviceId.Set(&v)
}
// SetDeviceIdNil sets the value for DeviceId to be an explicit nil
func (o *DeviceTreeNonLeafNode) SetDeviceIdNil() {
	o.DeviceId.Set(nil)
}

// UnsetDeviceId ensures that no value is present for DeviceId, not even an explicit nil
func (o *DeviceTreeNonLeafNode) UnsetDeviceId() {
	o.DeviceId.Unset()
}

// GetDeviceLength returns the DeviceLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreeNonLeafNode) GetDeviceLength() int64 {
	if o == nil || IsNil(o.DeviceLength.Get()) {
		var ret int64
		return ret
	}
	return *o.DeviceLength.Get()
}

// GetDeviceLengthOk returns a tuple with the DeviceLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreeNonLeafNode) GetDeviceLengthOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DeviceLength.Get(), o.DeviceLength.IsSet()
}

// HasDeviceLength returns a boolean if a field has been set.
func (o *DeviceTreeNonLeafNode) HasDeviceLength() bool {
	if o != nil && o.DeviceLength.IsSet() {
		return true
	}

	return false
}

// SetDeviceLength gets a reference to the given NullableInt64 and assigns it to the DeviceLength field.
func (o *DeviceTreeNonLeafNode) SetDeviceLength(v int64) {
	o.DeviceLength.Set(&v)
}
// SetDeviceLengthNil sets the value for DeviceLength to be an explicit nil
func (o *DeviceTreeNonLeafNode) SetDeviceLengthNil() {
	o.DeviceLength.Set(nil)
}

// UnsetDeviceLength ensures that no value is present for DeviceLength, not even an explicit nil
func (o *DeviceTreeNonLeafNode) UnsetDeviceLength() {
	o.DeviceLength.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeviceTreeNonLeafNode) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceTreeNonLeafNode) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *DeviceTreeNonLeafNode) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *DeviceTreeNonLeafNode) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *DeviceTreeNonLeafNode) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *DeviceTreeNonLeafNode) UnsetType() {
	o.Type.Unset()
}

func (o DeviceTreeNonLeafNode) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DeviceTreeNonLeafNode) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChildrenNodes != nil {
		toSerialize["childrenNodes"] = o.ChildrenNodes
	}
	if o.DeviceId.IsSet() {
		toSerialize["deviceId"] = o.DeviceId.Get()
	}
	if o.DeviceLength.IsSet() {
		toSerialize["deviceLength"] = o.DeviceLength.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableDeviceTreeNonLeafNode struct {
	value *DeviceTreeNonLeafNode
	isSet bool
}

func (v NullableDeviceTreeNonLeafNode) Get() *DeviceTreeNonLeafNode {
	return v.value
}

func (v *NullableDeviceTreeNonLeafNode) Set(val *DeviceTreeNonLeafNode) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceTreeNonLeafNode) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceTreeNonLeafNode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceTreeNonLeafNode(val *DeviceTreeNonLeafNode) *NullableDeviceTreeNonLeafNode {
	return &NullableDeviceTreeNonLeafNode{value: val, isSet: true}
}

func (v NullableDeviceTreeNonLeafNode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceTreeNonLeafNode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


