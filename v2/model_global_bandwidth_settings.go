/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the GlobalBandwidthSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GlobalBandwidthSettings{}

// GlobalBandwidthSettings Specifies the bandwidth setting of the External Target.
type GlobalBandwidthSettings struct {
	ArchivalParams *ArchivalBandwidthSettings `json:"archivalParams,omitempty"`
	TieringParams *TieringBandwidthSettings `json:"tieringParams,omitempty"`
}

// NewGlobalBandwidthSettings instantiates a new GlobalBandwidthSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlobalBandwidthSettings() *GlobalBandwidthSettings {
	this := GlobalBandwidthSettings{}
	return &this
}

// NewGlobalBandwidthSettingsWithDefaults instantiates a new GlobalBandwidthSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlobalBandwidthSettingsWithDefaults() *GlobalBandwidthSettings {
	this := GlobalBandwidthSettings{}
	return &this
}

// GetArchivalParams returns the ArchivalParams field value if set, zero value otherwise.
func (o *GlobalBandwidthSettings) GetArchivalParams() ArchivalBandwidthSettings {
	if o == nil || IsNil(o.ArchivalParams) {
		var ret ArchivalBandwidthSettings
		return ret
	}
	return *o.ArchivalParams
}

// GetArchivalParamsOk returns a tuple with the ArchivalParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalBandwidthSettings) GetArchivalParamsOk() (*ArchivalBandwidthSettings, bool) {
	if o == nil || IsNil(o.ArchivalParams) {
		return nil, false
	}
	return o.ArchivalParams, true
}

// HasArchivalParams returns a boolean if a field has been set.
func (o *GlobalBandwidthSettings) HasArchivalParams() bool {
	if o != nil && !IsNil(o.ArchivalParams) {
		return true
	}

	return false
}

// SetArchivalParams gets a reference to the given ArchivalBandwidthSettings and assigns it to the ArchivalParams field.
func (o *GlobalBandwidthSettings) SetArchivalParams(v ArchivalBandwidthSettings) {
	o.ArchivalParams = &v
}

// GetTieringParams returns the TieringParams field value if set, zero value otherwise.
func (o *GlobalBandwidthSettings) GetTieringParams() TieringBandwidthSettings {
	if o == nil || IsNil(o.TieringParams) {
		var ret TieringBandwidthSettings
		return ret
	}
	return *o.TieringParams
}

// GetTieringParamsOk returns a tuple with the TieringParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GlobalBandwidthSettings) GetTieringParamsOk() (*TieringBandwidthSettings, bool) {
	if o == nil || IsNil(o.TieringParams) {
		return nil, false
	}
	return o.TieringParams, true
}

// HasTieringParams returns a boolean if a field has been set.
func (o *GlobalBandwidthSettings) HasTieringParams() bool {
	if o != nil && !IsNil(o.TieringParams) {
		return true
	}

	return false
}

// SetTieringParams gets a reference to the given TieringBandwidthSettings and assigns it to the TieringParams field.
func (o *GlobalBandwidthSettings) SetTieringParams(v TieringBandwidthSettings) {
	o.TieringParams = &v
}

func (o GlobalBandwidthSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GlobalBandwidthSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ArchivalParams) {
		toSerialize["archivalParams"] = o.ArchivalParams
	}
	if !IsNil(o.TieringParams) {
		toSerialize["tieringParams"] = o.TieringParams
	}
	return toSerialize, nil
}

type NullableGlobalBandwidthSettings struct {
	value *GlobalBandwidthSettings
	isSet bool
}

func (v NullableGlobalBandwidthSettings) Get() *GlobalBandwidthSettings {
	return v.value
}

func (v *NullableGlobalBandwidthSettings) Set(val *GlobalBandwidthSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableGlobalBandwidthSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableGlobalBandwidthSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlobalBandwidthSettings(val *GlobalBandwidthSettings) *NullableGlobalBandwidthSettings {
	return &NullableGlobalBandwidthSettings{value: val, isSet: true}
}

func (v NullableGlobalBandwidthSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlobalBandwidthSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


