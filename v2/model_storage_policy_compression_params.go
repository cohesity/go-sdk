/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the StoragePolicyCompressionParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePolicyCompressionParams{}

// StoragePolicyCompressionParams Specifies compression settings for a Storage Domain.
type StoragePolicyCompressionParams struct {
	// Specifies whether inline compression is enabled. This field is appliciable only if inlineDeduplicationEnabled is set to true and compression is enabled.
	InlineEnabled NullableBool `json:"inlineEnabled,omitempty"`
	// Specifies copmpression type for a Storage Domain.
	Type NullableString `json:"type,omitempty"`
}

// NewStoragePolicyCompressionParams instantiates a new StoragePolicyCompressionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePolicyCompressionParams() *StoragePolicyCompressionParams {
	this := StoragePolicyCompressionParams{}
	return &this
}

// NewStoragePolicyCompressionParamsWithDefaults instantiates a new StoragePolicyCompressionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePolicyCompressionParamsWithDefaults() *StoragePolicyCompressionParams {
	this := StoragePolicyCompressionParams{}
	return &this
}

// GetInlineEnabled returns the InlineEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicyCompressionParams) GetInlineEnabled() bool {
	if o == nil || IsNil(o.InlineEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.InlineEnabled.Get()
}

// GetInlineEnabledOk returns a tuple with the InlineEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicyCompressionParams) GetInlineEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InlineEnabled.Get(), o.InlineEnabled.IsSet()
}

// HasInlineEnabled returns a boolean if a field has been set.
func (o *StoragePolicyCompressionParams) HasInlineEnabled() bool {
	if o != nil && o.InlineEnabled.IsSet() {
		return true
	}

	return false
}

// SetInlineEnabled gets a reference to the given NullableBool and assigns it to the InlineEnabled field.
func (o *StoragePolicyCompressionParams) SetInlineEnabled(v bool) {
	o.InlineEnabled.Set(&v)
}
// SetInlineEnabledNil sets the value for InlineEnabled to be an explicit nil
func (o *StoragePolicyCompressionParams) SetInlineEnabledNil() {
	o.InlineEnabled.Set(nil)
}

// UnsetInlineEnabled ensures that no value is present for InlineEnabled, not even an explicit nil
func (o *StoragePolicyCompressionParams) UnsetInlineEnabled() {
	o.InlineEnabled.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicyCompressionParams) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicyCompressionParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *StoragePolicyCompressionParams) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *StoragePolicyCompressionParams) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *StoragePolicyCompressionParams) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *StoragePolicyCompressionParams) UnsetType() {
	o.Type.Unset()
}

func (o StoragePolicyCompressionParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePolicyCompressionParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.InlineEnabled.IsSet() {
		toSerialize["inlineEnabled"] = o.InlineEnabled.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableStoragePolicyCompressionParams struct {
	value *StoragePolicyCompressionParams
	isSet bool
}

func (v NullableStoragePolicyCompressionParams) Get() *StoragePolicyCompressionParams {
	return v.value
}

func (v *NullableStoragePolicyCompressionParams) Set(val *StoragePolicyCompressionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePolicyCompressionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePolicyCompressionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePolicyCompressionParams(val *StoragePolicyCompressionParams) *NullableStoragePolicyCompressionParams {
	return &NullableStoragePolicyCompressionParams{value: val, isSet: true}
}

func (v NullableStoragePolicyCompressionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePolicyCompressionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


