/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the TimeWindow type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimeWindow{}

// TimeWindow Specifies a a time range within a day.
type TimeWindow struct {
	// Specifies the week day.
	DayOfTheWeek NullableString `json:"dayOfTheWeek,omitempty"`
	EndTime *Time `json:"endTime,omitempty"`
	StartTime *Time `json:"startTime,omitempty"`
}

// NewTimeWindow instantiates a new TimeWindow object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeWindow() *TimeWindow {
	this := TimeWindow{}
	return &this
}

// NewTimeWindowWithDefaults instantiates a new TimeWindow object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeWindowWithDefaults() *TimeWindow {
	this := TimeWindow{}
	return &this
}

// GetDayOfTheWeek returns the DayOfTheWeek field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeWindow) GetDayOfTheWeek() string {
	if o == nil || IsNil(o.DayOfTheWeek.Get()) {
		var ret string
		return ret
	}
	return *o.DayOfTheWeek.Get()
}

// GetDayOfTheWeekOk returns a tuple with the DayOfTheWeek field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeWindow) GetDayOfTheWeekOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DayOfTheWeek.Get(), o.DayOfTheWeek.IsSet()
}

// HasDayOfTheWeek returns a boolean if a field has been set.
func (o *TimeWindow) HasDayOfTheWeek() bool {
	if o != nil && o.DayOfTheWeek.IsSet() {
		return true
	}

	return false
}

// SetDayOfTheWeek gets a reference to the given NullableString and assigns it to the DayOfTheWeek field.
func (o *TimeWindow) SetDayOfTheWeek(v string) {
	o.DayOfTheWeek.Set(&v)
}
// SetDayOfTheWeekNil sets the value for DayOfTheWeek to be an explicit nil
func (o *TimeWindow) SetDayOfTheWeekNil() {
	o.DayOfTheWeek.Set(nil)
}

// UnsetDayOfTheWeek ensures that no value is present for DayOfTheWeek, not even an explicit nil
func (o *TimeWindow) UnsetDayOfTheWeek() {
	o.DayOfTheWeek.Unset()
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *TimeWindow) GetEndTime() Time {
	if o == nil || IsNil(o.EndTime) {
		var ret Time
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeWindow) GetEndTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *TimeWindow) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given Time and assigns it to the EndTime field.
func (o *TimeWindow) SetEndTime(v Time) {
	o.EndTime = &v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *TimeWindow) GetStartTime() Time {
	if o == nil || IsNil(o.StartTime) {
		var ret Time
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimeWindow) GetStartTimeOk() (*Time, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *TimeWindow) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given Time and assigns it to the StartTime field.
func (o *TimeWindow) SetStartTime(v Time) {
	o.StartTime = &v
}

func (o TimeWindow) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimeWindow) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DayOfTheWeek.IsSet() {
		toSerialize["dayOfTheWeek"] = o.DayOfTheWeek.Get()
	}
	if !IsNil(o.EndTime) {
		toSerialize["endTime"] = o.EndTime
	}
	if !IsNil(o.StartTime) {
		toSerialize["startTime"] = o.StartTime
	}
	return toSerialize, nil
}

type NullableTimeWindow struct {
	value *TimeWindow
	isSet bool
}

func (v NullableTimeWindow) Get() *TimeWindow {
	return v.value
}

func (v *NullableTimeWindow) Set(val *TimeWindow) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeWindow) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeWindow) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeWindow(val *TimeWindow) *NullableTimeWindow {
	return &NullableTimeWindow{value: val, isSet: true}
}

func (v NullableTimeWindow) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeWindow) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


