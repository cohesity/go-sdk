/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KeystoneCredentialsScope type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KeystoneCredentialsScope{}

// KeystoneCredentialsScope Specifies parameters related to Keystone scope.
type KeystoneCredentialsScope struct {
	DomainScopeParams *KeystoneScopeParamsDomainScopeParams `json:"domainScopeParams,omitempty"`
	ProjectScopeParams *KeystoneScopeParamsProjectScopeParams `json:"projectScopeParams,omitempty"`
	// Specifies the scope type.
	Type NullableString `json:"type"`
}

type _KeystoneCredentialsScope KeystoneCredentialsScope

// NewKeystoneCredentialsScope instantiates a new KeystoneCredentialsScope object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoneCredentialsScope(type_ NullableString) *KeystoneCredentialsScope {
	this := KeystoneCredentialsScope{}
	this.Type = type_
	return &this
}

// NewKeystoneCredentialsScopeWithDefaults instantiates a new KeystoneCredentialsScope object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoneCredentialsScopeWithDefaults() *KeystoneCredentialsScope {
	this := KeystoneCredentialsScope{}
	return &this
}

// GetDomainScopeParams returns the DomainScopeParams field value if set, zero value otherwise.
func (o *KeystoneCredentialsScope) GetDomainScopeParams() KeystoneScopeParamsDomainScopeParams {
	if o == nil || IsNil(o.DomainScopeParams) {
		var ret KeystoneScopeParamsDomainScopeParams
		return ret
	}
	return *o.DomainScopeParams
}

// GetDomainScopeParamsOk returns a tuple with the DomainScopeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoneCredentialsScope) GetDomainScopeParamsOk() (*KeystoneScopeParamsDomainScopeParams, bool) {
	if o == nil || IsNil(o.DomainScopeParams) {
		return nil, false
	}
	return o.DomainScopeParams, true
}

// HasDomainScopeParams returns a boolean if a field has been set.
func (o *KeystoneCredentialsScope) HasDomainScopeParams() bool {
	if o != nil && !IsNil(o.DomainScopeParams) {
		return true
	}

	return false
}

// SetDomainScopeParams gets a reference to the given KeystoneScopeParamsDomainScopeParams and assigns it to the DomainScopeParams field.
func (o *KeystoneCredentialsScope) SetDomainScopeParams(v KeystoneScopeParamsDomainScopeParams) {
	o.DomainScopeParams = &v
}

// GetProjectScopeParams returns the ProjectScopeParams field value if set, zero value otherwise.
func (o *KeystoneCredentialsScope) GetProjectScopeParams() KeystoneScopeParamsProjectScopeParams {
	if o == nil || IsNil(o.ProjectScopeParams) {
		var ret KeystoneScopeParamsProjectScopeParams
		return ret
	}
	return *o.ProjectScopeParams
}

// GetProjectScopeParamsOk returns a tuple with the ProjectScopeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KeystoneCredentialsScope) GetProjectScopeParamsOk() (*KeystoneScopeParamsProjectScopeParams, bool) {
	if o == nil || IsNil(o.ProjectScopeParams) {
		return nil, false
	}
	return o.ProjectScopeParams, true
}

// HasProjectScopeParams returns a boolean if a field has been set.
func (o *KeystoneCredentialsScope) HasProjectScopeParams() bool {
	if o != nil && !IsNil(o.ProjectScopeParams) {
		return true
	}

	return false
}

// SetProjectScopeParams gets a reference to the given KeystoneScopeParamsProjectScopeParams and assigns it to the ProjectScopeParams field.
func (o *KeystoneCredentialsScope) SetProjectScopeParams(v KeystoneScopeParamsProjectScopeParams) {
	o.ProjectScopeParams = &v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *KeystoneCredentialsScope) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneCredentialsScope) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *KeystoneCredentialsScope) SetType(v string) {
	o.Type.Set(&v)
}

func (o KeystoneCredentialsScope) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KeystoneCredentialsScope) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DomainScopeParams) {
		toSerialize["domainScopeParams"] = o.DomainScopeParams
	}
	if !IsNil(o.ProjectScopeParams) {
		toSerialize["projectScopeParams"] = o.ProjectScopeParams
	}
	toSerialize["type"] = o.Type.Get()
	return toSerialize, nil
}

func (o *KeystoneCredentialsScope) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKeystoneCredentialsScope := _KeystoneCredentialsScope{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKeystoneCredentialsScope)

	if err != nil {
		return err
	}

	*o = KeystoneCredentialsScope(varKeystoneCredentialsScope)

	return err
}

type NullableKeystoneCredentialsScope struct {
	value *KeystoneCredentialsScope
	isSet bool
}

func (v NullableKeystoneCredentialsScope) Get() *KeystoneCredentialsScope {
	return v.value
}

func (v *NullableKeystoneCredentialsScope) Set(val *KeystoneCredentialsScope) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoneCredentialsScope) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoneCredentialsScope) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoneCredentialsScope(val *KeystoneCredentialsScope) *NullableKeystoneCredentialsScope {
	return &NullableKeystoneCredentialsScope{value: val, isSet: true}
}

func (v NullableKeystoneCredentialsScope) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoneCredentialsScope) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


