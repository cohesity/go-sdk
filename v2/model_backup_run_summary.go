/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BackupRunSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupRunSummary{}

// BackupRunSummary Specifies summary information about local snapshot run across all objects.
type BackupRunSummary struct {
	// Specifies the count of app objects for which backup was cancelled.
	CancelledAppObjectsCount NullableInt32 `json:"cancelledAppObjectsCount,omitempty"`
	// Specifies the count of objects for which backup was cancelled.
	CancelledObjectsCount NullableInt64 `json:"cancelledObjectsCount,omitempty"`
	// This field is deprecated. Use DataLockConstraints field instead.
	DataLock NullableString `json:"dataLock,omitempty"`
	DataLockConstraints *DataLockConstraints `json:"dataLockConstraints,omitempty"`
	// Specifies the end time of backup run in Unix epoch Timestamp(in microseconds).
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// Specifies the count of app objects for which backup failed.
	FailedAppObjectsCount NullableInt32 `json:"failedAppObjectsCount,omitempty"`
	// Specifies the count of objects for which backup failed.
	FailedObjectsCount NullableInt64 `json:"failedObjectsCount,omitempty"`
	// Progress monitor task for indexing.
	IndexingTaskId NullableString `json:"indexingTaskId,omitempty"`
	// Indicated if SLA has been violated for this run.
	IsSlaViolated NullableBool `json:"isSlaViolated,omitempty"`
	LocalSnapshotStats *BackupDataStats `json:"localSnapshotStats,omitempty"`
	// Task ID for a local protection run.
	LocalTaskId NullableString `json:"localTaskId,omitempty"`
	// Message about the backup run.
	Messages []string `json:"messages,omitempty"`
	// Progress monitor task id for local backup run.
	ProgressTaskId NullableString `json:"progressTaskId,omitempty"`
	// Type of Protection Group run. 'kRegular' indicates an incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates system volume backup. It produces an image for bare metal recovery. 'kStorageArraySnapshot' indicates storage array snapshot backup.
	RunType NullableString `json:"runType,omitempty"`
	// Specifies the count of objects for which backup was skipped.
	SkippedObjectsCount NullableInt64 `json:"skippedObjectsCount,omitempty"`
	// Specifies the start time of backup run in Unix epoch Timestamp(in microseconds).
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// Stats task id for local backup run.
	StatsTaskId NullableString `json:"statsTaskId,omitempty"`
	// Status of the backup run. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.
	Status NullableString `json:"status,omitempty"`
	// Specifies the count of app objects for which backup was successful.
	SuccessfulAppObjectsCount NullableInt32 `json:"successfulAppObjectsCount,omitempty"`
	// Specifies the count of objects for which backup was successful.
	SuccessfulObjectsCount NullableInt64 `json:"successfulObjectsCount,omitempty"`
}

// NewBackupRunSummary instantiates a new BackupRunSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupRunSummary() *BackupRunSummary {
	this := BackupRunSummary{}
	return &this
}

// NewBackupRunSummaryWithDefaults instantiates a new BackupRunSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupRunSummaryWithDefaults() *BackupRunSummary {
	this := BackupRunSummary{}
	return &this
}

// GetCancelledAppObjectsCount returns the CancelledAppObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetCancelledAppObjectsCount() int32 {
	if o == nil || IsNil(o.CancelledAppObjectsCount.Get()) {
		var ret int32
		return ret
	}
	return *o.CancelledAppObjectsCount.Get()
}

// GetCancelledAppObjectsCountOk returns a tuple with the CancelledAppObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetCancelledAppObjectsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelledAppObjectsCount.Get(), o.CancelledAppObjectsCount.IsSet()
}

// HasCancelledAppObjectsCount returns a boolean if a field has been set.
func (o *BackupRunSummary) HasCancelledAppObjectsCount() bool {
	if o != nil && o.CancelledAppObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetCancelledAppObjectsCount gets a reference to the given NullableInt32 and assigns it to the CancelledAppObjectsCount field.
func (o *BackupRunSummary) SetCancelledAppObjectsCount(v int32) {
	o.CancelledAppObjectsCount.Set(&v)
}
// SetCancelledAppObjectsCountNil sets the value for CancelledAppObjectsCount to be an explicit nil
func (o *BackupRunSummary) SetCancelledAppObjectsCountNil() {
	o.CancelledAppObjectsCount.Set(nil)
}

// UnsetCancelledAppObjectsCount ensures that no value is present for CancelledAppObjectsCount, not even an explicit nil
func (o *BackupRunSummary) UnsetCancelledAppObjectsCount() {
	o.CancelledAppObjectsCount.Unset()
}

// GetCancelledObjectsCount returns the CancelledObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetCancelledObjectsCount() int64 {
	if o == nil || IsNil(o.CancelledObjectsCount.Get()) {
		var ret int64
		return ret
	}
	return *o.CancelledObjectsCount.Get()
}

// GetCancelledObjectsCountOk returns a tuple with the CancelledObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetCancelledObjectsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.CancelledObjectsCount.Get(), o.CancelledObjectsCount.IsSet()
}

// HasCancelledObjectsCount returns a boolean if a field has been set.
func (o *BackupRunSummary) HasCancelledObjectsCount() bool {
	if o != nil && o.CancelledObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetCancelledObjectsCount gets a reference to the given NullableInt64 and assigns it to the CancelledObjectsCount field.
func (o *BackupRunSummary) SetCancelledObjectsCount(v int64) {
	o.CancelledObjectsCount.Set(&v)
}
// SetCancelledObjectsCountNil sets the value for CancelledObjectsCount to be an explicit nil
func (o *BackupRunSummary) SetCancelledObjectsCountNil() {
	o.CancelledObjectsCount.Set(nil)
}

// UnsetCancelledObjectsCount ensures that no value is present for CancelledObjectsCount, not even an explicit nil
func (o *BackupRunSummary) UnsetCancelledObjectsCount() {
	o.CancelledObjectsCount.Unset()
}

// GetDataLock returns the DataLock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetDataLock() string {
	if o == nil || IsNil(o.DataLock.Get()) {
		var ret string
		return ret
	}
	return *o.DataLock.Get()
}

// GetDataLockOk returns a tuple with the DataLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetDataLockOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataLock.Get(), o.DataLock.IsSet()
}

// HasDataLock returns a boolean if a field has been set.
func (o *BackupRunSummary) HasDataLock() bool {
	if o != nil && o.DataLock.IsSet() {
		return true
	}

	return false
}

// SetDataLock gets a reference to the given NullableString and assigns it to the DataLock field.
func (o *BackupRunSummary) SetDataLock(v string) {
	o.DataLock.Set(&v)
}
// SetDataLockNil sets the value for DataLock to be an explicit nil
func (o *BackupRunSummary) SetDataLockNil() {
	o.DataLock.Set(nil)
}

// UnsetDataLock ensures that no value is present for DataLock, not even an explicit nil
func (o *BackupRunSummary) UnsetDataLock() {
	o.DataLock.Unset()
}

// GetDataLockConstraints returns the DataLockConstraints field value if set, zero value otherwise.
func (o *BackupRunSummary) GetDataLockConstraints() DataLockConstraints {
	if o == nil || IsNil(o.DataLockConstraints) {
		var ret DataLockConstraints
		return ret
	}
	return *o.DataLockConstraints
}

// GetDataLockConstraintsOk returns a tuple with the DataLockConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRunSummary) GetDataLockConstraintsOk() (*DataLockConstraints, bool) {
	if o == nil || IsNil(o.DataLockConstraints) {
		return nil, false
	}
	return o.DataLockConstraints, true
}

// HasDataLockConstraints returns a boolean if a field has been set.
func (o *BackupRunSummary) HasDataLockConstraints() bool {
	if o != nil && !IsNil(o.DataLockConstraints) {
		return true
	}

	return false
}

// SetDataLockConstraints gets a reference to the given DataLockConstraints and assigns it to the DataLockConstraints field.
func (o *BackupRunSummary) SetDataLockConstraints(v DataLockConstraints) {
	o.DataLockConstraints = &v
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetEndTimeUsecs() int64 {
	if o == nil || IsNil(o.EndTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *BackupRunSummary) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *BackupRunSummary) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *BackupRunSummary) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *BackupRunSummary) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetFailedAppObjectsCount returns the FailedAppObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetFailedAppObjectsCount() int32 {
	if o == nil || IsNil(o.FailedAppObjectsCount.Get()) {
		var ret int32
		return ret
	}
	return *o.FailedAppObjectsCount.Get()
}

// GetFailedAppObjectsCountOk returns a tuple with the FailedAppObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetFailedAppObjectsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailedAppObjectsCount.Get(), o.FailedAppObjectsCount.IsSet()
}

// HasFailedAppObjectsCount returns a boolean if a field has been set.
func (o *BackupRunSummary) HasFailedAppObjectsCount() bool {
	if o != nil && o.FailedAppObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetFailedAppObjectsCount gets a reference to the given NullableInt32 and assigns it to the FailedAppObjectsCount field.
func (o *BackupRunSummary) SetFailedAppObjectsCount(v int32) {
	o.FailedAppObjectsCount.Set(&v)
}
// SetFailedAppObjectsCountNil sets the value for FailedAppObjectsCount to be an explicit nil
func (o *BackupRunSummary) SetFailedAppObjectsCountNil() {
	o.FailedAppObjectsCount.Set(nil)
}

// UnsetFailedAppObjectsCount ensures that no value is present for FailedAppObjectsCount, not even an explicit nil
func (o *BackupRunSummary) UnsetFailedAppObjectsCount() {
	o.FailedAppObjectsCount.Unset()
}

// GetFailedObjectsCount returns the FailedObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetFailedObjectsCount() int64 {
	if o == nil || IsNil(o.FailedObjectsCount.Get()) {
		var ret int64
		return ret
	}
	return *o.FailedObjectsCount.Get()
}

// GetFailedObjectsCountOk returns a tuple with the FailedObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetFailedObjectsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FailedObjectsCount.Get(), o.FailedObjectsCount.IsSet()
}

// HasFailedObjectsCount returns a boolean if a field has been set.
func (o *BackupRunSummary) HasFailedObjectsCount() bool {
	if o != nil && o.FailedObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetFailedObjectsCount gets a reference to the given NullableInt64 and assigns it to the FailedObjectsCount field.
func (o *BackupRunSummary) SetFailedObjectsCount(v int64) {
	o.FailedObjectsCount.Set(&v)
}
// SetFailedObjectsCountNil sets the value for FailedObjectsCount to be an explicit nil
func (o *BackupRunSummary) SetFailedObjectsCountNil() {
	o.FailedObjectsCount.Set(nil)
}

// UnsetFailedObjectsCount ensures that no value is present for FailedObjectsCount, not even an explicit nil
func (o *BackupRunSummary) UnsetFailedObjectsCount() {
	o.FailedObjectsCount.Unset()
}

// GetIndexingTaskId returns the IndexingTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetIndexingTaskId() string {
	if o == nil || IsNil(o.IndexingTaskId.Get()) {
		var ret string
		return ret
	}
	return *o.IndexingTaskId.Get()
}

// GetIndexingTaskIdOk returns a tuple with the IndexingTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetIndexingTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IndexingTaskId.Get(), o.IndexingTaskId.IsSet()
}

// HasIndexingTaskId returns a boolean if a field has been set.
func (o *BackupRunSummary) HasIndexingTaskId() bool {
	if o != nil && o.IndexingTaskId.IsSet() {
		return true
	}

	return false
}

// SetIndexingTaskId gets a reference to the given NullableString and assigns it to the IndexingTaskId field.
func (o *BackupRunSummary) SetIndexingTaskId(v string) {
	o.IndexingTaskId.Set(&v)
}
// SetIndexingTaskIdNil sets the value for IndexingTaskId to be an explicit nil
func (o *BackupRunSummary) SetIndexingTaskIdNil() {
	o.IndexingTaskId.Set(nil)
}

// UnsetIndexingTaskId ensures that no value is present for IndexingTaskId, not even an explicit nil
func (o *BackupRunSummary) UnsetIndexingTaskId() {
	o.IndexingTaskId.Unset()
}

// GetIsSlaViolated returns the IsSlaViolated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetIsSlaViolated() bool {
	if o == nil || IsNil(o.IsSlaViolated.Get()) {
		var ret bool
		return ret
	}
	return *o.IsSlaViolated.Get()
}

// GetIsSlaViolatedOk returns a tuple with the IsSlaViolated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetIsSlaViolatedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsSlaViolated.Get(), o.IsSlaViolated.IsSet()
}

// HasIsSlaViolated returns a boolean if a field has been set.
func (o *BackupRunSummary) HasIsSlaViolated() bool {
	if o != nil && o.IsSlaViolated.IsSet() {
		return true
	}

	return false
}

// SetIsSlaViolated gets a reference to the given NullableBool and assigns it to the IsSlaViolated field.
func (o *BackupRunSummary) SetIsSlaViolated(v bool) {
	o.IsSlaViolated.Set(&v)
}
// SetIsSlaViolatedNil sets the value for IsSlaViolated to be an explicit nil
func (o *BackupRunSummary) SetIsSlaViolatedNil() {
	o.IsSlaViolated.Set(nil)
}

// UnsetIsSlaViolated ensures that no value is present for IsSlaViolated, not even an explicit nil
func (o *BackupRunSummary) UnsetIsSlaViolated() {
	o.IsSlaViolated.Unset()
}

// GetLocalSnapshotStats returns the LocalSnapshotStats field value if set, zero value otherwise.
func (o *BackupRunSummary) GetLocalSnapshotStats() BackupDataStats {
	if o == nil || IsNil(o.LocalSnapshotStats) {
		var ret BackupDataStats
		return ret
	}
	return *o.LocalSnapshotStats
}

// GetLocalSnapshotStatsOk returns a tuple with the LocalSnapshotStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupRunSummary) GetLocalSnapshotStatsOk() (*BackupDataStats, bool) {
	if o == nil || IsNil(o.LocalSnapshotStats) {
		return nil, false
	}
	return o.LocalSnapshotStats, true
}

// HasLocalSnapshotStats returns a boolean if a field has been set.
func (o *BackupRunSummary) HasLocalSnapshotStats() bool {
	if o != nil && !IsNil(o.LocalSnapshotStats) {
		return true
	}

	return false
}

// SetLocalSnapshotStats gets a reference to the given BackupDataStats and assigns it to the LocalSnapshotStats field.
func (o *BackupRunSummary) SetLocalSnapshotStats(v BackupDataStats) {
	o.LocalSnapshotStats = &v
}

// GetLocalTaskId returns the LocalTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetLocalTaskId() string {
	if o == nil || IsNil(o.LocalTaskId.Get()) {
		var ret string
		return ret
	}
	return *o.LocalTaskId.Get()
}

// GetLocalTaskIdOk returns a tuple with the LocalTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetLocalTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LocalTaskId.Get(), o.LocalTaskId.IsSet()
}

// HasLocalTaskId returns a boolean if a field has been set.
func (o *BackupRunSummary) HasLocalTaskId() bool {
	if o != nil && o.LocalTaskId.IsSet() {
		return true
	}

	return false
}

// SetLocalTaskId gets a reference to the given NullableString and assigns it to the LocalTaskId field.
func (o *BackupRunSummary) SetLocalTaskId(v string) {
	o.LocalTaskId.Set(&v)
}
// SetLocalTaskIdNil sets the value for LocalTaskId to be an explicit nil
func (o *BackupRunSummary) SetLocalTaskIdNil() {
	o.LocalTaskId.Set(nil)
}

// UnsetLocalTaskId ensures that no value is present for LocalTaskId, not even an explicit nil
func (o *BackupRunSummary) UnsetLocalTaskId() {
	o.LocalTaskId.Unset()
}

// GetMessages returns the Messages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetMessages() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetMessagesOk() ([]string, bool) {
	if o == nil || IsNil(o.Messages) {
		return nil, false
	}
	return o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *BackupRunSummary) HasMessages() bool {
	if o != nil && !IsNil(o.Messages) {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []string and assigns it to the Messages field.
func (o *BackupRunSummary) SetMessages(v []string) {
	o.Messages = v
}

// GetProgressTaskId returns the ProgressTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetProgressTaskId() string {
	if o == nil || IsNil(o.ProgressTaskId.Get()) {
		var ret string
		return ret
	}
	return *o.ProgressTaskId.Get()
}

// GetProgressTaskIdOk returns a tuple with the ProgressTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetProgressTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProgressTaskId.Get(), o.ProgressTaskId.IsSet()
}

// HasProgressTaskId returns a boolean if a field has been set.
func (o *BackupRunSummary) HasProgressTaskId() bool {
	if o != nil && o.ProgressTaskId.IsSet() {
		return true
	}

	return false
}

// SetProgressTaskId gets a reference to the given NullableString and assigns it to the ProgressTaskId field.
func (o *BackupRunSummary) SetProgressTaskId(v string) {
	o.ProgressTaskId.Set(&v)
}
// SetProgressTaskIdNil sets the value for ProgressTaskId to be an explicit nil
func (o *BackupRunSummary) SetProgressTaskIdNil() {
	o.ProgressTaskId.Set(nil)
}

// UnsetProgressTaskId ensures that no value is present for ProgressTaskId, not even an explicit nil
func (o *BackupRunSummary) UnsetProgressTaskId() {
	o.ProgressTaskId.Unset()
}

// GetRunType returns the RunType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetRunType() string {
	if o == nil || IsNil(o.RunType.Get()) {
		var ret string
		return ret
	}
	return *o.RunType.Get()
}

// GetRunTypeOk returns a tuple with the RunType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetRunTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RunType.Get(), o.RunType.IsSet()
}

// HasRunType returns a boolean if a field has been set.
func (o *BackupRunSummary) HasRunType() bool {
	if o != nil && o.RunType.IsSet() {
		return true
	}

	return false
}

// SetRunType gets a reference to the given NullableString and assigns it to the RunType field.
func (o *BackupRunSummary) SetRunType(v string) {
	o.RunType.Set(&v)
}
// SetRunTypeNil sets the value for RunType to be an explicit nil
func (o *BackupRunSummary) SetRunTypeNil() {
	o.RunType.Set(nil)
}

// UnsetRunType ensures that no value is present for RunType, not even an explicit nil
func (o *BackupRunSummary) UnsetRunType() {
	o.RunType.Unset()
}

// GetSkippedObjectsCount returns the SkippedObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetSkippedObjectsCount() int64 {
	if o == nil || IsNil(o.SkippedObjectsCount.Get()) {
		var ret int64
		return ret
	}
	return *o.SkippedObjectsCount.Get()
}

// GetSkippedObjectsCountOk returns a tuple with the SkippedObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetSkippedObjectsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SkippedObjectsCount.Get(), o.SkippedObjectsCount.IsSet()
}

// HasSkippedObjectsCount returns a boolean if a field has been set.
func (o *BackupRunSummary) HasSkippedObjectsCount() bool {
	if o != nil && o.SkippedObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetSkippedObjectsCount gets a reference to the given NullableInt64 and assigns it to the SkippedObjectsCount field.
func (o *BackupRunSummary) SetSkippedObjectsCount(v int64) {
	o.SkippedObjectsCount.Set(&v)
}
// SetSkippedObjectsCountNil sets the value for SkippedObjectsCount to be an explicit nil
func (o *BackupRunSummary) SetSkippedObjectsCountNil() {
	o.SkippedObjectsCount.Set(nil)
}

// UnsetSkippedObjectsCount ensures that no value is present for SkippedObjectsCount, not even an explicit nil
func (o *BackupRunSummary) UnsetSkippedObjectsCount() {
	o.SkippedObjectsCount.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetStartTimeUsecs() int64 {
	if o == nil || IsNil(o.StartTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *BackupRunSummary) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *BackupRunSummary) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *BackupRunSummary) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *BackupRunSummary) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetStatsTaskId returns the StatsTaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetStatsTaskId() string {
	if o == nil || IsNil(o.StatsTaskId.Get()) {
		var ret string
		return ret
	}
	return *o.StatsTaskId.Get()
}

// GetStatsTaskIdOk returns a tuple with the StatsTaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetStatsTaskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatsTaskId.Get(), o.StatsTaskId.IsSet()
}

// HasStatsTaskId returns a boolean if a field has been set.
func (o *BackupRunSummary) HasStatsTaskId() bool {
	if o != nil && o.StatsTaskId.IsSet() {
		return true
	}

	return false
}

// SetStatsTaskId gets a reference to the given NullableString and assigns it to the StatsTaskId field.
func (o *BackupRunSummary) SetStatsTaskId(v string) {
	o.StatsTaskId.Set(&v)
}
// SetStatsTaskIdNil sets the value for StatsTaskId to be an explicit nil
func (o *BackupRunSummary) SetStatsTaskIdNil() {
	o.StatsTaskId.Set(nil)
}

// UnsetStatsTaskId ensures that no value is present for StatsTaskId, not even an explicit nil
func (o *BackupRunSummary) UnsetStatsTaskId() {
	o.StatsTaskId.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *BackupRunSummary) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *BackupRunSummary) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *BackupRunSummary) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *BackupRunSummary) UnsetStatus() {
	o.Status.Unset()
}

// GetSuccessfulAppObjectsCount returns the SuccessfulAppObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetSuccessfulAppObjectsCount() int32 {
	if o == nil || IsNil(o.SuccessfulAppObjectsCount.Get()) {
		var ret int32
		return ret
	}
	return *o.SuccessfulAppObjectsCount.Get()
}

// GetSuccessfulAppObjectsCountOk returns a tuple with the SuccessfulAppObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetSuccessfulAppObjectsCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuccessfulAppObjectsCount.Get(), o.SuccessfulAppObjectsCount.IsSet()
}

// HasSuccessfulAppObjectsCount returns a boolean if a field has been set.
func (o *BackupRunSummary) HasSuccessfulAppObjectsCount() bool {
	if o != nil && o.SuccessfulAppObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetSuccessfulAppObjectsCount gets a reference to the given NullableInt32 and assigns it to the SuccessfulAppObjectsCount field.
func (o *BackupRunSummary) SetSuccessfulAppObjectsCount(v int32) {
	o.SuccessfulAppObjectsCount.Set(&v)
}
// SetSuccessfulAppObjectsCountNil sets the value for SuccessfulAppObjectsCount to be an explicit nil
func (o *BackupRunSummary) SetSuccessfulAppObjectsCountNil() {
	o.SuccessfulAppObjectsCount.Set(nil)
}

// UnsetSuccessfulAppObjectsCount ensures that no value is present for SuccessfulAppObjectsCount, not even an explicit nil
func (o *BackupRunSummary) UnsetSuccessfulAppObjectsCount() {
	o.SuccessfulAppObjectsCount.Unset()
}

// GetSuccessfulObjectsCount returns the SuccessfulObjectsCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupRunSummary) GetSuccessfulObjectsCount() int64 {
	if o == nil || IsNil(o.SuccessfulObjectsCount.Get()) {
		var ret int64
		return ret
	}
	return *o.SuccessfulObjectsCount.Get()
}

// GetSuccessfulObjectsCountOk returns a tuple with the SuccessfulObjectsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupRunSummary) GetSuccessfulObjectsCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SuccessfulObjectsCount.Get(), o.SuccessfulObjectsCount.IsSet()
}

// HasSuccessfulObjectsCount returns a boolean if a field has been set.
func (o *BackupRunSummary) HasSuccessfulObjectsCount() bool {
	if o != nil && o.SuccessfulObjectsCount.IsSet() {
		return true
	}

	return false
}

// SetSuccessfulObjectsCount gets a reference to the given NullableInt64 and assigns it to the SuccessfulObjectsCount field.
func (o *BackupRunSummary) SetSuccessfulObjectsCount(v int64) {
	o.SuccessfulObjectsCount.Set(&v)
}
// SetSuccessfulObjectsCountNil sets the value for SuccessfulObjectsCount to be an explicit nil
func (o *BackupRunSummary) SetSuccessfulObjectsCountNil() {
	o.SuccessfulObjectsCount.Set(nil)
}

// UnsetSuccessfulObjectsCount ensures that no value is present for SuccessfulObjectsCount, not even an explicit nil
func (o *BackupRunSummary) UnsetSuccessfulObjectsCount() {
	o.SuccessfulObjectsCount.Unset()
}

func (o BackupRunSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupRunSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CancelledAppObjectsCount.IsSet() {
		toSerialize["cancelledAppObjectsCount"] = o.CancelledAppObjectsCount.Get()
	}
	if o.CancelledObjectsCount.IsSet() {
		toSerialize["cancelledObjectsCount"] = o.CancelledObjectsCount.Get()
	}
	if o.DataLock.IsSet() {
		toSerialize["dataLock"] = o.DataLock.Get()
	}
	if !IsNil(o.DataLockConstraints) {
		toSerialize["dataLockConstraints"] = o.DataLockConstraints
	}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.FailedAppObjectsCount.IsSet() {
		toSerialize["failedAppObjectsCount"] = o.FailedAppObjectsCount.Get()
	}
	if o.FailedObjectsCount.IsSet() {
		toSerialize["failedObjectsCount"] = o.FailedObjectsCount.Get()
	}
	if o.IndexingTaskId.IsSet() {
		toSerialize["indexingTaskId"] = o.IndexingTaskId.Get()
	}
	if o.IsSlaViolated.IsSet() {
		toSerialize["isSlaViolated"] = o.IsSlaViolated.Get()
	}
	if !IsNil(o.LocalSnapshotStats) {
		toSerialize["localSnapshotStats"] = o.LocalSnapshotStats
	}
	if o.LocalTaskId.IsSet() {
		toSerialize["localTaskId"] = o.LocalTaskId.Get()
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	if o.ProgressTaskId.IsSet() {
		toSerialize["progressTaskId"] = o.ProgressTaskId.Get()
	}
	if o.RunType.IsSet() {
		toSerialize["runType"] = o.RunType.Get()
	}
	if o.SkippedObjectsCount.IsSet() {
		toSerialize["skippedObjectsCount"] = o.SkippedObjectsCount.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.StatsTaskId.IsSet() {
		toSerialize["statsTaskId"] = o.StatsTaskId.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.SuccessfulAppObjectsCount.IsSet() {
		toSerialize["successfulAppObjectsCount"] = o.SuccessfulAppObjectsCount.Get()
	}
	if o.SuccessfulObjectsCount.IsSet() {
		toSerialize["successfulObjectsCount"] = o.SuccessfulObjectsCount.Get()
	}
	return toSerialize, nil
}

type NullableBackupRunSummary struct {
	value *BackupRunSummary
	isSet bool
}

func (v NullableBackupRunSummary) Get() *BackupRunSummary {
	return v.value
}

func (v *NullableBackupRunSummary) Set(val *BackupRunSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupRunSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupRunSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupRunSummary(val *BackupRunSummary) *NullableBackupRunSummary {
	return &NullableBackupRunSummary{value: val, isSet: true}
}

func (v NullableBackupRunSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupRunSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


