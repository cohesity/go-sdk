/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CommonS3CompExternalTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CommonS3CompExternalTargetParams{}

// CommonS3CompExternalTargetParams Specifies the common parameters which are specific to S3 Compatible related External Targets.
type CommonS3CompExternalTargetParams struct {
	// Specifies the access key id of the external target.
	AccessKeyId NullableString `json:"accessKeyId"`
	// Specifies the bucket name of the external target.
	BucketName NullableString `json:"bucketName"`
	// Specifies the endpoint of the external target.
	EndPoint NullableString `json:"endPoint"`
	// Specifies whether the external target is AWS Snowball.
	IsAwsSnowball NullableBool `json:"isAwsSnowball,omitempty"`
	// Specifies the region of the external target.
	Region NullableString `json:"region,omitempty"`
	// Specifies the secret access key of the external target.
	SecretAccessKey NullableString `json:"secretAccessKey,omitempty"`
	// Specifies the secure connection(https) is enabled or not.
	SecureConnection NullableBool `json:"secureConnection,omitempty"`
	// Specifies the aws signature version of the external target.
	SignatureVersion NullableInt32 `json:"signatureVersion,omitempty"`
}

type _CommonS3CompExternalTargetParams CommonS3CompExternalTargetParams

// NewCommonS3CompExternalTargetParams instantiates a new CommonS3CompExternalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonS3CompExternalTargetParams(accessKeyId NullableString, bucketName NullableString, endPoint NullableString) *CommonS3CompExternalTargetParams {
	this := CommonS3CompExternalTargetParams{}
	this.AccessKeyId = accessKeyId
	this.BucketName = bucketName
	this.EndPoint = endPoint
	return &this
}

// NewCommonS3CompExternalTargetParamsWithDefaults instantiates a new CommonS3CompExternalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonS3CompExternalTargetParamsWithDefaults() *CommonS3CompExternalTargetParams {
	this := CommonS3CompExternalTargetParams{}
	return &this
}

// GetAccessKeyId returns the AccessKeyId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonS3CompExternalTargetParams) GetAccessKeyId() string {
	if o == nil || o.AccessKeyId.Get() == nil {
		var ret string
		return ret
	}

	return *o.AccessKeyId.Get()
}

// GetAccessKeyIdOk returns a tuple with the AccessKeyId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonS3CompExternalTargetParams) GetAccessKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccessKeyId.Get(), o.AccessKeyId.IsSet()
}

// SetAccessKeyId sets field value
func (o *CommonS3CompExternalTargetParams) SetAccessKeyId(v string) {
	o.AccessKeyId.Set(&v)
}

// GetBucketName returns the BucketName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonS3CompExternalTargetParams) GetBucketName() string {
	if o == nil || o.BucketName.Get() == nil {
		var ret string
		return ret
	}

	return *o.BucketName.Get()
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonS3CompExternalTargetParams) GetBucketNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BucketName.Get(), o.BucketName.IsSet()
}

// SetBucketName sets field value
func (o *CommonS3CompExternalTargetParams) SetBucketName(v string) {
	o.BucketName.Set(&v)
}

// GetEndPoint returns the EndPoint field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonS3CompExternalTargetParams) GetEndPoint() string {
	if o == nil || o.EndPoint.Get() == nil {
		var ret string
		return ret
	}

	return *o.EndPoint.Get()
}

// GetEndPointOk returns a tuple with the EndPoint field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonS3CompExternalTargetParams) GetEndPointOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndPoint.Get(), o.EndPoint.IsSet()
}

// SetEndPoint sets field value
func (o *CommonS3CompExternalTargetParams) SetEndPoint(v string) {
	o.EndPoint.Set(&v)
}

// GetIsAwsSnowball returns the IsAwsSnowball field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonS3CompExternalTargetParams) GetIsAwsSnowball() bool {
	if o == nil || IsNil(o.IsAwsSnowball.Get()) {
		var ret bool
		return ret
	}
	return *o.IsAwsSnowball.Get()
}

// GetIsAwsSnowballOk returns a tuple with the IsAwsSnowball field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonS3CompExternalTargetParams) GetIsAwsSnowballOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsAwsSnowball.Get(), o.IsAwsSnowball.IsSet()
}

// HasIsAwsSnowball returns a boolean if a field has been set.
func (o *CommonS3CompExternalTargetParams) HasIsAwsSnowball() bool {
	if o != nil && o.IsAwsSnowball.IsSet() {
		return true
	}

	return false
}

// SetIsAwsSnowball gets a reference to the given NullableBool and assigns it to the IsAwsSnowball field.
func (o *CommonS3CompExternalTargetParams) SetIsAwsSnowball(v bool) {
	o.IsAwsSnowball.Set(&v)
}
// SetIsAwsSnowballNil sets the value for IsAwsSnowball to be an explicit nil
func (o *CommonS3CompExternalTargetParams) SetIsAwsSnowballNil() {
	o.IsAwsSnowball.Set(nil)
}

// UnsetIsAwsSnowball ensures that no value is present for IsAwsSnowball, not even an explicit nil
func (o *CommonS3CompExternalTargetParams) UnsetIsAwsSnowball() {
	o.IsAwsSnowball.Unset()
}

// GetRegion returns the Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonS3CompExternalTargetParams) GetRegion() string {
	if o == nil || IsNil(o.Region.Get()) {
		var ret string
		return ret
	}
	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonS3CompExternalTargetParams) GetRegionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// HasRegion returns a boolean if a field has been set.
func (o *CommonS3CompExternalTargetParams) HasRegion() bool {
	if o != nil && o.Region.IsSet() {
		return true
	}

	return false
}

// SetRegion gets a reference to the given NullableString and assigns it to the Region field.
func (o *CommonS3CompExternalTargetParams) SetRegion(v string) {
	o.Region.Set(&v)
}
// SetRegionNil sets the value for Region to be an explicit nil
func (o *CommonS3CompExternalTargetParams) SetRegionNil() {
	o.Region.Set(nil)
}

// UnsetRegion ensures that no value is present for Region, not even an explicit nil
func (o *CommonS3CompExternalTargetParams) UnsetRegion() {
	o.Region.Unset()
}

// GetSecretAccessKey returns the SecretAccessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonS3CompExternalTargetParams) GetSecretAccessKey() string {
	if o == nil || IsNil(o.SecretAccessKey.Get()) {
		var ret string
		return ret
	}
	return *o.SecretAccessKey.Get()
}

// GetSecretAccessKeyOk returns a tuple with the SecretAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonS3CompExternalTargetParams) GetSecretAccessKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecretAccessKey.Get(), o.SecretAccessKey.IsSet()
}

// HasSecretAccessKey returns a boolean if a field has been set.
func (o *CommonS3CompExternalTargetParams) HasSecretAccessKey() bool {
	if o != nil && o.SecretAccessKey.IsSet() {
		return true
	}

	return false
}

// SetSecretAccessKey gets a reference to the given NullableString and assigns it to the SecretAccessKey field.
func (o *CommonS3CompExternalTargetParams) SetSecretAccessKey(v string) {
	o.SecretAccessKey.Set(&v)
}
// SetSecretAccessKeyNil sets the value for SecretAccessKey to be an explicit nil
func (o *CommonS3CompExternalTargetParams) SetSecretAccessKeyNil() {
	o.SecretAccessKey.Set(nil)
}

// UnsetSecretAccessKey ensures that no value is present for SecretAccessKey, not even an explicit nil
func (o *CommonS3CompExternalTargetParams) UnsetSecretAccessKey() {
	o.SecretAccessKey.Unset()
}

// GetSecureConnection returns the SecureConnection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonS3CompExternalTargetParams) GetSecureConnection() bool {
	if o == nil || IsNil(o.SecureConnection.Get()) {
		var ret bool
		return ret
	}
	return *o.SecureConnection.Get()
}

// GetSecureConnectionOk returns a tuple with the SecureConnection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonS3CompExternalTargetParams) GetSecureConnectionOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.SecureConnection.Get(), o.SecureConnection.IsSet()
}

// HasSecureConnection returns a boolean if a field has been set.
func (o *CommonS3CompExternalTargetParams) HasSecureConnection() bool {
	if o != nil && o.SecureConnection.IsSet() {
		return true
	}

	return false
}

// SetSecureConnection gets a reference to the given NullableBool and assigns it to the SecureConnection field.
func (o *CommonS3CompExternalTargetParams) SetSecureConnection(v bool) {
	o.SecureConnection.Set(&v)
}
// SetSecureConnectionNil sets the value for SecureConnection to be an explicit nil
func (o *CommonS3CompExternalTargetParams) SetSecureConnectionNil() {
	o.SecureConnection.Set(nil)
}

// UnsetSecureConnection ensures that no value is present for SecureConnection, not even an explicit nil
func (o *CommonS3CompExternalTargetParams) UnsetSecureConnection() {
	o.SecureConnection.Unset()
}

// GetSignatureVersion returns the SignatureVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonS3CompExternalTargetParams) GetSignatureVersion() int32 {
	if o == nil || IsNil(o.SignatureVersion.Get()) {
		var ret int32
		return ret
	}
	return *o.SignatureVersion.Get()
}

// GetSignatureVersionOk returns a tuple with the SignatureVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonS3CompExternalTargetParams) GetSignatureVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SignatureVersion.Get(), o.SignatureVersion.IsSet()
}

// HasSignatureVersion returns a boolean if a field has been set.
func (o *CommonS3CompExternalTargetParams) HasSignatureVersion() bool {
	if o != nil && o.SignatureVersion.IsSet() {
		return true
	}

	return false
}

// SetSignatureVersion gets a reference to the given NullableInt32 and assigns it to the SignatureVersion field.
func (o *CommonS3CompExternalTargetParams) SetSignatureVersion(v int32) {
	o.SignatureVersion.Set(&v)
}
// SetSignatureVersionNil sets the value for SignatureVersion to be an explicit nil
func (o *CommonS3CompExternalTargetParams) SetSignatureVersionNil() {
	o.SignatureVersion.Set(nil)
}

// UnsetSignatureVersion ensures that no value is present for SignatureVersion, not even an explicit nil
func (o *CommonS3CompExternalTargetParams) UnsetSignatureVersion() {
	o.SignatureVersion.Unset()
}

func (o CommonS3CompExternalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CommonS3CompExternalTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["accessKeyId"] = o.AccessKeyId.Get()
	toSerialize["bucketName"] = o.BucketName.Get()
	toSerialize["endPoint"] = o.EndPoint.Get()
	if o.IsAwsSnowball.IsSet() {
		toSerialize["isAwsSnowball"] = o.IsAwsSnowball.Get()
	}
	if o.Region.IsSet() {
		toSerialize["region"] = o.Region.Get()
	}
	if o.SecretAccessKey.IsSet() {
		toSerialize["secretAccessKey"] = o.SecretAccessKey.Get()
	}
	if o.SecureConnection.IsSet() {
		toSerialize["secureConnection"] = o.SecureConnection.Get()
	}
	if o.SignatureVersion.IsSet() {
		toSerialize["signatureVersion"] = o.SignatureVersion.Get()
	}
	return toSerialize, nil
}

func (o *CommonS3CompExternalTargetParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"accessKeyId",
		"bucketName",
		"endPoint",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCommonS3CompExternalTargetParams := _CommonS3CompExternalTargetParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCommonS3CompExternalTargetParams)

	if err != nil {
		return err
	}

	*o = CommonS3CompExternalTargetParams(varCommonS3CompExternalTargetParams)

	return err
}

type NullableCommonS3CompExternalTargetParams struct {
	value *CommonS3CompExternalTargetParams
	isSet bool
}

func (v NullableCommonS3CompExternalTargetParams) Get() *CommonS3CompExternalTargetParams {
	return v.value
}

func (v *NullableCommonS3CompExternalTargetParams) Set(val *CommonS3CompExternalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonS3CompExternalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonS3CompExternalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonS3CompExternalTargetParams(val *CommonS3CompExternalTargetParams) *NullableCommonS3CompExternalTargetParams {
	return &NullableCommonS3CompExternalTargetParams{value: val, isSet: true}
}

func (v NullableCommonS3CompExternalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonS3CompExternalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


