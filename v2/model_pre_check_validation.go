/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PreCheckValidation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PreCheckValidation{}

// PreCheckValidation Specifies details of pre-check validations.
type PreCheckValidation struct {
	// Specifies validation passed or failed
	IsPassed NullableBool `json:"isPassed,omitempty"`
	// Specifies the validation failure message
	Message NullableString `json:"message,omitempty"`
	// Specifies validation type
	Validation NullableString `json:"validation,omitempty"`
}

// NewPreCheckValidation instantiates a new PreCheckValidation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPreCheckValidation() *PreCheckValidation {
	this := PreCheckValidation{}
	return &this
}

// NewPreCheckValidationWithDefaults instantiates a new PreCheckValidation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPreCheckValidationWithDefaults() *PreCheckValidation {
	this := PreCheckValidation{}
	return &this
}

// GetIsPassed returns the IsPassed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PreCheckValidation) GetIsPassed() bool {
	if o == nil || IsNil(o.IsPassed.Get()) {
		var ret bool
		return ret
	}
	return *o.IsPassed.Get()
}

// GetIsPassedOk returns a tuple with the IsPassed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PreCheckValidation) GetIsPassedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsPassed.Get(), o.IsPassed.IsSet()
}

// HasIsPassed returns a boolean if a field has been set.
func (o *PreCheckValidation) HasIsPassed() bool {
	if o != nil && o.IsPassed.IsSet() {
		return true
	}

	return false
}

// SetIsPassed gets a reference to the given NullableBool and assigns it to the IsPassed field.
func (o *PreCheckValidation) SetIsPassed(v bool) {
	o.IsPassed.Set(&v)
}
// SetIsPassedNil sets the value for IsPassed to be an explicit nil
func (o *PreCheckValidation) SetIsPassedNil() {
	o.IsPassed.Set(nil)
}

// UnsetIsPassed ensures that no value is present for IsPassed, not even an explicit nil
func (o *PreCheckValidation) UnsetIsPassed() {
	o.IsPassed.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PreCheckValidation) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PreCheckValidation) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *PreCheckValidation) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *PreCheckValidation) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *PreCheckValidation) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *PreCheckValidation) UnsetMessage() {
	o.Message.Unset()
}

// GetValidation returns the Validation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PreCheckValidation) GetValidation() string {
	if o == nil || IsNil(o.Validation.Get()) {
		var ret string
		return ret
	}
	return *o.Validation.Get()
}

// GetValidationOk returns a tuple with the Validation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PreCheckValidation) GetValidationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Validation.Get(), o.Validation.IsSet()
}

// HasValidation returns a boolean if a field has been set.
func (o *PreCheckValidation) HasValidation() bool {
	if o != nil && o.Validation.IsSet() {
		return true
	}

	return false
}

// SetValidation gets a reference to the given NullableString and assigns it to the Validation field.
func (o *PreCheckValidation) SetValidation(v string) {
	o.Validation.Set(&v)
}
// SetValidationNil sets the value for Validation to be an explicit nil
func (o *PreCheckValidation) SetValidationNil() {
	o.Validation.Set(nil)
}

// UnsetValidation ensures that no value is present for Validation, not even an explicit nil
func (o *PreCheckValidation) UnsetValidation() {
	o.Validation.Unset()
}

func (o PreCheckValidation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PreCheckValidation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IsPassed.IsSet() {
		toSerialize["isPassed"] = o.IsPassed.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.Validation.IsSet() {
		toSerialize["validation"] = o.Validation.Get()
	}
	return toSerialize, nil
}

type NullablePreCheckValidation struct {
	value *PreCheckValidation
	isSet bool
}

func (v NullablePreCheckValidation) Get() *PreCheckValidation {
	return v.value
}

func (v *NullablePreCheckValidation) Set(val *PreCheckValidation) {
	v.value = val
	v.isSet = true
}

func (v NullablePreCheckValidation) IsSet() bool {
	return v.isSet
}

func (v *NullablePreCheckValidation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePreCheckValidation(val *PreCheckValidation) *NullablePreCheckValidation {
	return &NullablePreCheckValidation{value: val, isSet: true}
}

func (v NullablePreCheckValidation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePreCheckValidation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


