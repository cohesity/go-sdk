/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the IdentityProviderConfigurations type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityProviderConfigurations{}

// IdentityProviderConfigurations Identity provider configurations
type IdentityProviderConfigurations struct {
	// Specifies a list of identity provider configurations
	Idps []IdentityProviderConfiguration `json:"idps,omitempty"`
}

// NewIdentityProviderConfigurations instantiates a new IdentityProviderConfigurations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityProviderConfigurations() *IdentityProviderConfigurations {
	this := IdentityProviderConfigurations{}
	return &this
}

// NewIdentityProviderConfigurationsWithDefaults instantiates a new IdentityProviderConfigurations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityProviderConfigurationsWithDefaults() *IdentityProviderConfigurations {
	this := IdentityProviderConfigurations{}
	return &this
}

// GetIdps returns the Idps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityProviderConfigurations) GetIdps() []IdentityProviderConfiguration {
	if o == nil {
		var ret []IdentityProviderConfiguration
		return ret
	}
	return o.Idps
}

// GetIdpsOk returns a tuple with the Idps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityProviderConfigurations) GetIdpsOk() ([]IdentityProviderConfiguration, bool) {
	if o == nil || IsNil(o.Idps) {
		return nil, false
	}
	return o.Idps, true
}

// HasIdps returns a boolean if a field has been set.
func (o *IdentityProviderConfigurations) HasIdps() bool {
	if o != nil && !IsNil(o.Idps) {
		return true
	}

	return false
}

// SetIdps gets a reference to the given []IdentityProviderConfiguration and assigns it to the Idps field.
func (o *IdentityProviderConfigurations) SetIdps(v []IdentityProviderConfiguration) {
	o.Idps = v
}

func (o IdentityProviderConfigurations) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityProviderConfigurations) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Idps != nil {
		toSerialize["idps"] = o.Idps
	}
	return toSerialize, nil
}

type NullableIdentityProviderConfigurations struct {
	value *IdentityProviderConfigurations
	isSet bool
}

func (v NullableIdentityProviderConfigurations) Get() *IdentityProviderConfigurations {
	return v.value
}

func (v *NullableIdentityProviderConfigurations) Set(val *IdentityProviderConfigurations) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityProviderConfigurations) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityProviderConfigurations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityProviderConfigurations(val *IdentityProviderConfigurations) *NullableIdentityProviderConfigurations {
	return &NullableIdentityProviderConfigurations{value: val, isSet: true}
}

func (v NullableIdentityProviderConfigurations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityProviderConfigurations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


