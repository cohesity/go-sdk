/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UpdateDataTieringStateRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateDataTieringStateRequest{}

// UpdateDataTieringStateRequest Specifies the parameters to perform an action on the data tiering groups for the specified Sources.
type UpdateDataTieringStateRequest struct {
	// Specifies the action to be performed on all the specified data tiering groups. 'Pause'  specifies to pause. 'Resume' specifies to resume.
	Action NullableString `json:"action"`
	// Specifies a list of data tiering groups ids for which the state should change.
	Ids []string `json:"ids"`
}

type _UpdateDataTieringStateRequest UpdateDataTieringStateRequest

// NewUpdateDataTieringStateRequest instantiates a new UpdateDataTieringStateRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDataTieringStateRequest(action NullableString, ids []string) *UpdateDataTieringStateRequest {
	this := UpdateDataTieringStateRequest{}
	this.Action = action
	this.Ids = ids
	return &this
}

// NewUpdateDataTieringStateRequestWithDefaults instantiates a new UpdateDataTieringStateRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDataTieringStateRequestWithDefaults() *UpdateDataTieringStateRequest {
	this := UpdateDataTieringStateRequest{}
	return &this
}

// GetAction returns the Action field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateDataTieringStateRequest) GetAction() string {
	if o == nil || o.Action.Get() == nil {
		var ret string
		return ret
	}

	return *o.Action.Get()
}

// GetActionOk returns a tuple with the Action field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDataTieringStateRequest) GetActionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Action.Get(), o.Action.IsSet()
}

// SetAction sets field value
func (o *UpdateDataTieringStateRequest) SetAction(v string) {
	o.Action.Set(&v)
}

// GetIds returns the Ids field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *UpdateDataTieringStateRequest) GetIds() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ids
}

// GetIdsOk returns a tuple with the Ids field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDataTieringStateRequest) GetIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.Ids) {
		return nil, false
	}
	return o.Ids, true
}

// SetIds sets field value
func (o *UpdateDataTieringStateRequest) SetIds(v []string) {
	o.Ids = v
}

func (o UpdateDataTieringStateRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateDataTieringStateRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["action"] = o.Action.Get()
	if o.Ids != nil {
		toSerialize["ids"] = o.Ids
	}
	return toSerialize, nil
}

func (o *UpdateDataTieringStateRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"action",
		"ids",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUpdateDataTieringStateRequest := _UpdateDataTieringStateRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUpdateDataTieringStateRequest)

	if err != nil {
		return err
	}

	*o = UpdateDataTieringStateRequest(varUpdateDataTieringStateRequest)

	return err
}

type NullableUpdateDataTieringStateRequest struct {
	value *UpdateDataTieringStateRequest
	isSet bool
}

func (v NullableUpdateDataTieringStateRequest) Get() *UpdateDataTieringStateRequest {
	return v.value
}

func (v *NullableUpdateDataTieringStateRequest) Set(val *UpdateDataTieringStateRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDataTieringStateRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDataTieringStateRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDataTieringStateRequest(val *UpdateDataTieringStateRequest) *NullableUpdateDataTieringStateRequest {
	return &NullableUpdateDataTieringStateRequest{value: val, isSet: true}
}

func (v NullableUpdateDataTieringStateRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDataTieringStateRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


