/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RemoveBaseosPatchRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RemoveBaseosPatchRequest{}

// RemoveBaseosPatchRequest Specifies the name and force option for baseos patch removal.
type RemoveBaseosPatchRequest struct {
	// If patch files should be removed even for inprogress patch
	ForceRemove NullableBool `json:"forceRemove,omitempty"`
	// Name of the hotfix with security patch
	PatchName string `json:"patchName"`
}

type _RemoveBaseosPatchRequest RemoveBaseosPatchRequest

// NewRemoveBaseosPatchRequest instantiates a new RemoveBaseosPatchRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoveBaseosPatchRequest(patchName string) *RemoveBaseosPatchRequest {
	this := RemoveBaseosPatchRequest{}
	this.PatchName = patchName
	return &this
}

// NewRemoveBaseosPatchRequestWithDefaults instantiates a new RemoveBaseosPatchRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoveBaseosPatchRequestWithDefaults() *RemoveBaseosPatchRequest {
	this := RemoveBaseosPatchRequest{}
	return &this
}

// GetForceRemove returns the ForceRemove field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoveBaseosPatchRequest) GetForceRemove() bool {
	if o == nil || IsNil(o.ForceRemove.Get()) {
		var ret bool
		return ret
	}
	return *o.ForceRemove.Get()
}

// GetForceRemoveOk returns a tuple with the ForceRemove field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoveBaseosPatchRequest) GetForceRemoveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ForceRemove.Get(), o.ForceRemove.IsSet()
}

// HasForceRemove returns a boolean if a field has been set.
func (o *RemoveBaseosPatchRequest) HasForceRemove() bool {
	if o != nil && o.ForceRemove.IsSet() {
		return true
	}

	return false
}

// SetForceRemove gets a reference to the given NullableBool and assigns it to the ForceRemove field.
func (o *RemoveBaseosPatchRequest) SetForceRemove(v bool) {
	o.ForceRemove.Set(&v)
}
// SetForceRemoveNil sets the value for ForceRemove to be an explicit nil
func (o *RemoveBaseosPatchRequest) SetForceRemoveNil() {
	o.ForceRemove.Set(nil)
}

// UnsetForceRemove ensures that no value is present for ForceRemove, not even an explicit nil
func (o *RemoveBaseosPatchRequest) UnsetForceRemove() {
	o.ForceRemove.Unset()
}

// GetPatchName returns the PatchName field value
func (o *RemoveBaseosPatchRequest) GetPatchName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PatchName
}

// GetPatchNameOk returns a tuple with the PatchName field value
// and a boolean to check if the value has been set.
func (o *RemoveBaseosPatchRequest) GetPatchNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PatchName, true
}

// SetPatchName sets field value
func (o *RemoveBaseosPatchRequest) SetPatchName(v string) {
	o.PatchName = v
}

func (o RemoveBaseosPatchRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RemoveBaseosPatchRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ForceRemove.IsSet() {
		toSerialize["forceRemove"] = o.ForceRemove.Get()
	}
	toSerialize["patchName"] = o.PatchName
	return toSerialize, nil
}

func (o *RemoveBaseosPatchRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"patchName",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRemoveBaseosPatchRequest := _RemoveBaseosPatchRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRemoveBaseosPatchRequest)

	if err != nil {
		return err
	}

	*o = RemoveBaseosPatchRequest(varRemoveBaseosPatchRequest)

	return err
}

type NullableRemoveBaseosPatchRequest struct {
	value *RemoveBaseosPatchRequest
	isSet bool
}

func (v NullableRemoveBaseosPatchRequest) Get() *RemoveBaseosPatchRequest {
	return v.value
}

func (v *NullableRemoveBaseosPatchRequest) Set(val *RemoveBaseosPatchRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoveBaseosPatchRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoveBaseosPatchRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoveBaseosPatchRequest(val *RemoveBaseosPatchRequest) *NullableRemoveBaseosPatchRequest {
	return &NullableRemoveBaseosPatchRequest{value: val, isSet: true}
}

func (v NullableRemoveBaseosPatchRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoveBaseosPatchRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


