/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UdaSourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaSourceRegistrationParams{}

// UdaSourceRegistrationParams Specifies parameters to register a Universal Data Adapter source.
type UdaSourceRegistrationParams struct {
	Credentials *UdaSourceRegistrationParamsCredentials `json:"credentials,omitempty"`
	// Specifies the IPs/hostnames for the nodes forming the Universal Data Adapter source cluster.
	Hosts []string `json:"hosts"`
	// Specifies if SMB/NFS view mounting should be enabled on source. Default value is false.
	MountView NullableBool `json:"mountView,omitempty"`
	// Specifies the OS type for Universal Data Adapter source.
	OsType NullableString `json:"osType,omitempty"`
	// Specifies the absolute path of scripts used to interact with the Universal Data Adapter source.
	ScriptDir string `json:"scriptDir"`
	// Specifies custom arguments to be supplied to the source registration scripts. This field is deprecated. Use sourceRegistrationArguments instead.
	SourceRegistrationArgs NullableString `json:"sourceRegistrationArgs,omitempty"`
	// Specifies the map of custom arguments to be supplied to the source registration scripts.
	SourceRegistrationArguments []KeyValuePair `json:"sourceRegistrationArguments,omitempty"`
	// Specifies the source type for Universal Data Adapter source.
	SourceType string `json:"sourceType"`
	ViewParams NullableUdaSourceRegistrationParamsViewParams `json:"viewParams,omitempty"`
}

type _UdaSourceRegistrationParams UdaSourceRegistrationParams

// NewUdaSourceRegistrationParams instantiates a new UdaSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaSourceRegistrationParams(hosts []string, scriptDir string, sourceType string) *UdaSourceRegistrationParams {
	this := UdaSourceRegistrationParams{}
	this.Hosts = hosts
	this.ScriptDir = scriptDir
	this.SourceType = sourceType
	return &this
}

// NewUdaSourceRegistrationParamsWithDefaults instantiates a new UdaSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaSourceRegistrationParamsWithDefaults() *UdaSourceRegistrationParams {
	this := UdaSourceRegistrationParams{}
	return &this
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *UdaSourceRegistrationParams) GetCredentials() UdaSourceRegistrationParamsCredentials {
	if o == nil || IsNil(o.Credentials) {
		var ret UdaSourceRegistrationParamsCredentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdaSourceRegistrationParams) GetCredentialsOk() (*UdaSourceRegistrationParamsCredentials, bool) {
	if o == nil || IsNil(o.Credentials) {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParams) HasCredentials() bool {
	if o != nil && !IsNil(o.Credentials) {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given UdaSourceRegistrationParamsCredentials and assigns it to the Credentials field.
func (o *UdaSourceRegistrationParams) SetCredentials(v UdaSourceRegistrationParamsCredentials) {
	o.Credentials = &v
}

// GetHosts returns the Hosts field value
func (o *UdaSourceRegistrationParams) GetHosts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value
// and a boolean to check if the value has been set.
func (o *UdaSourceRegistrationParams) GetHostsOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Hosts, true
}

// SetHosts sets field value
func (o *UdaSourceRegistrationParams) SetHosts(v []string) {
	o.Hosts = v
}

// GetMountView returns the MountView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaSourceRegistrationParams) GetMountView() bool {
	if o == nil || IsNil(o.MountView.Get()) {
		var ret bool
		return ret
	}
	return *o.MountView.Get()
}

// GetMountViewOk returns a tuple with the MountView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaSourceRegistrationParams) GetMountViewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.MountView.Get(), o.MountView.IsSet()
}

// HasMountView returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParams) HasMountView() bool {
	if o != nil && o.MountView.IsSet() {
		return true
	}

	return false
}

// SetMountView gets a reference to the given NullableBool and assigns it to the MountView field.
func (o *UdaSourceRegistrationParams) SetMountView(v bool) {
	o.MountView.Set(&v)
}
// SetMountViewNil sets the value for MountView to be an explicit nil
func (o *UdaSourceRegistrationParams) SetMountViewNil() {
	o.MountView.Set(nil)
}

// UnsetMountView ensures that no value is present for MountView, not even an explicit nil
func (o *UdaSourceRegistrationParams) UnsetMountView() {
	o.MountView.Unset()
}

// GetOsType returns the OsType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaSourceRegistrationParams) GetOsType() string {
	if o == nil || IsNil(o.OsType.Get()) {
		var ret string
		return ret
	}
	return *o.OsType.Get()
}

// GetOsTypeOk returns a tuple with the OsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaSourceRegistrationParams) GetOsTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OsType.Get(), o.OsType.IsSet()
}

// HasOsType returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParams) HasOsType() bool {
	if o != nil && o.OsType.IsSet() {
		return true
	}

	return false
}

// SetOsType gets a reference to the given NullableString and assigns it to the OsType field.
func (o *UdaSourceRegistrationParams) SetOsType(v string) {
	o.OsType.Set(&v)
}
// SetOsTypeNil sets the value for OsType to be an explicit nil
func (o *UdaSourceRegistrationParams) SetOsTypeNil() {
	o.OsType.Set(nil)
}

// UnsetOsType ensures that no value is present for OsType, not even an explicit nil
func (o *UdaSourceRegistrationParams) UnsetOsType() {
	o.OsType.Unset()
}

// GetScriptDir returns the ScriptDir field value
func (o *UdaSourceRegistrationParams) GetScriptDir() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScriptDir
}

// GetScriptDirOk returns a tuple with the ScriptDir field value
// and a boolean to check if the value has been set.
func (o *UdaSourceRegistrationParams) GetScriptDirOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ScriptDir, true
}

// SetScriptDir sets field value
func (o *UdaSourceRegistrationParams) SetScriptDir(v string) {
	o.ScriptDir = v
}

// GetSourceRegistrationArgs returns the SourceRegistrationArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaSourceRegistrationParams) GetSourceRegistrationArgs() string {
	if o == nil || IsNil(o.SourceRegistrationArgs.Get()) {
		var ret string
		return ret
	}
	return *o.SourceRegistrationArgs.Get()
}

// GetSourceRegistrationArgsOk returns a tuple with the SourceRegistrationArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaSourceRegistrationParams) GetSourceRegistrationArgsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceRegistrationArgs.Get(), o.SourceRegistrationArgs.IsSet()
}

// HasSourceRegistrationArgs returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParams) HasSourceRegistrationArgs() bool {
	if o != nil && o.SourceRegistrationArgs.IsSet() {
		return true
	}

	return false
}

// SetSourceRegistrationArgs gets a reference to the given NullableString and assigns it to the SourceRegistrationArgs field.
func (o *UdaSourceRegistrationParams) SetSourceRegistrationArgs(v string) {
	o.SourceRegistrationArgs.Set(&v)
}
// SetSourceRegistrationArgsNil sets the value for SourceRegistrationArgs to be an explicit nil
func (o *UdaSourceRegistrationParams) SetSourceRegistrationArgsNil() {
	o.SourceRegistrationArgs.Set(nil)
}

// UnsetSourceRegistrationArgs ensures that no value is present for SourceRegistrationArgs, not even an explicit nil
func (o *UdaSourceRegistrationParams) UnsetSourceRegistrationArgs() {
	o.SourceRegistrationArgs.Unset()
}

// GetSourceRegistrationArguments returns the SourceRegistrationArguments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaSourceRegistrationParams) GetSourceRegistrationArguments() []KeyValuePair {
	if o == nil {
		var ret []KeyValuePair
		return ret
	}
	return o.SourceRegistrationArguments
}

// GetSourceRegistrationArgumentsOk returns a tuple with the SourceRegistrationArguments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaSourceRegistrationParams) GetSourceRegistrationArgumentsOk() ([]KeyValuePair, bool) {
	if o == nil || IsNil(o.SourceRegistrationArguments) {
		return nil, false
	}
	return o.SourceRegistrationArguments, true
}

// HasSourceRegistrationArguments returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParams) HasSourceRegistrationArguments() bool {
	if o != nil && !IsNil(o.SourceRegistrationArguments) {
		return true
	}

	return false
}

// SetSourceRegistrationArguments gets a reference to the given []KeyValuePair and assigns it to the SourceRegistrationArguments field.
func (o *UdaSourceRegistrationParams) SetSourceRegistrationArguments(v []KeyValuePair) {
	o.SourceRegistrationArguments = v
}

// GetSourceType returns the SourceType field value
func (o *UdaSourceRegistrationParams) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *UdaSourceRegistrationParams) GetSourceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *UdaSourceRegistrationParams) SetSourceType(v string) {
	o.SourceType = v
}

// GetViewParams returns the ViewParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaSourceRegistrationParams) GetViewParams() UdaSourceRegistrationParamsViewParams {
	if o == nil || IsNil(o.ViewParams.Get()) {
		var ret UdaSourceRegistrationParamsViewParams
		return ret
	}
	return *o.ViewParams.Get()
}

// GetViewParamsOk returns a tuple with the ViewParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaSourceRegistrationParams) GetViewParamsOk() (*UdaSourceRegistrationParamsViewParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewParams.Get(), o.ViewParams.IsSet()
}

// HasViewParams returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParams) HasViewParams() bool {
	if o != nil && o.ViewParams.IsSet() {
		return true
	}

	return false
}

// SetViewParams gets a reference to the given NullableUdaSourceRegistrationParamsViewParams and assigns it to the ViewParams field.
func (o *UdaSourceRegistrationParams) SetViewParams(v UdaSourceRegistrationParamsViewParams) {
	o.ViewParams.Set(&v)
}
// SetViewParamsNil sets the value for ViewParams to be an explicit nil
func (o *UdaSourceRegistrationParams) SetViewParamsNil() {
	o.ViewParams.Set(nil)
}

// UnsetViewParams ensures that no value is present for ViewParams, not even an explicit nil
func (o *UdaSourceRegistrationParams) UnsetViewParams() {
	o.ViewParams.Unset()
}

func (o UdaSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaSourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Credentials) {
		toSerialize["credentials"] = o.Credentials
	}
	toSerialize["hosts"] = o.Hosts
	if o.MountView.IsSet() {
		toSerialize["mountView"] = o.MountView.Get()
	}
	if o.OsType.IsSet() {
		toSerialize["osType"] = o.OsType.Get()
	}
	toSerialize["scriptDir"] = o.ScriptDir
	if o.SourceRegistrationArgs.IsSet() {
		toSerialize["sourceRegistrationArgs"] = o.SourceRegistrationArgs.Get()
	}
	if o.SourceRegistrationArguments != nil {
		toSerialize["sourceRegistrationArguments"] = o.SourceRegistrationArguments
	}
	toSerialize["sourceType"] = o.SourceType
	if o.ViewParams.IsSet() {
		toSerialize["viewParams"] = o.ViewParams.Get()
	}
	return toSerialize, nil
}

func (o *UdaSourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"hosts",
		"scriptDir",
		"sourceType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUdaSourceRegistrationParams := _UdaSourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUdaSourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = UdaSourceRegistrationParams(varUdaSourceRegistrationParams)

	return err
}

type NullableUdaSourceRegistrationParams struct {
	value *UdaSourceRegistrationParams
	isSet bool
}

func (v NullableUdaSourceRegistrationParams) Get() *UdaSourceRegistrationParams {
	return v.value
}

func (v *NullableUdaSourceRegistrationParams) Set(val *UdaSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaSourceRegistrationParams(val *UdaSourceRegistrationParams) *NullableUdaSourceRegistrationParams {
	return &NullableUdaSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableUdaSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


