/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModifyCiphersRequestBody type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModifyCiphersRequestBody{}

// ModifyCiphersRequestBody Specifies ciphers to enable/disable on the cluster.
type ModifyCiphersRequestBody struct {
	// Specifies a list of ciphers to enable/disable on the cluster.
	Ciphers []string `json:"ciphers"`
	// If true, the ciphers passed in will be enabled on the cluster and all other ciphers will be disabled. If false, the ciphers specified will be disabled and all other ciphers on the cluster will be enabled.
	Enable bool `json:"enable"`
}

type _ModifyCiphersRequestBody ModifyCiphersRequestBody

// NewModifyCiphersRequestBody instantiates a new ModifyCiphersRequestBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModifyCiphersRequestBody(ciphers []string, enable bool) *ModifyCiphersRequestBody {
	this := ModifyCiphersRequestBody{}
	this.Ciphers = ciphers
	this.Enable = enable
	return &this
}

// NewModifyCiphersRequestBodyWithDefaults instantiates a new ModifyCiphersRequestBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModifyCiphersRequestBodyWithDefaults() *ModifyCiphersRequestBody {
	this := ModifyCiphersRequestBody{}
	return &this
}

// GetCiphers returns the Ciphers field value
func (o *ModifyCiphersRequestBody) GetCiphers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Ciphers
}

// GetCiphersOk returns a tuple with the Ciphers field value
// and a boolean to check if the value has been set.
func (o *ModifyCiphersRequestBody) GetCiphersOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ciphers, true
}

// SetCiphers sets field value
func (o *ModifyCiphersRequestBody) SetCiphers(v []string) {
	o.Ciphers = v
}

// GetEnable returns the Enable field value
func (o *ModifyCiphersRequestBody) GetEnable() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Enable
}

// GetEnableOk returns a tuple with the Enable field value
// and a boolean to check if the value has been set.
func (o *ModifyCiphersRequestBody) GetEnableOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Enable, true
}

// SetEnable sets field value
func (o *ModifyCiphersRequestBody) SetEnable(v bool) {
	o.Enable = v
}

func (o ModifyCiphersRequestBody) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModifyCiphersRequestBody) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["ciphers"] = o.Ciphers
	toSerialize["enable"] = o.Enable
	return toSerialize, nil
}

func (o *ModifyCiphersRequestBody) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"ciphers",
		"enable",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModifyCiphersRequestBody := _ModifyCiphersRequestBody{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModifyCiphersRequestBody)

	if err != nil {
		return err
	}

	*o = ModifyCiphersRequestBody(varModifyCiphersRequestBody)

	return err
}

type NullableModifyCiphersRequestBody struct {
	value *ModifyCiphersRequestBody
	isSet bool
}

func (v NullableModifyCiphersRequestBody) Get() *ModifyCiphersRequestBody {
	return v.value
}

func (v *NullableModifyCiphersRequestBody) Set(val *ModifyCiphersRequestBody) {
	v.value = val
	v.isSet = true
}

func (v NullableModifyCiphersRequestBody) IsSet() bool {
	return v.isSet
}

func (v *NullableModifyCiphersRequestBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModifyCiphersRequestBody(val *ModifyCiphersRequestBody) *NullableModifyCiphersRequestBody {
	return &NullableModifyCiphersRequestBody{value: val, isSet: true}
}

func (v NullableModifyCiphersRequestBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModifyCiphersRequestBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


