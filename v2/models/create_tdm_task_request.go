// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CreateTdmTaskRequest Specifies the request parameters to create a TDM task.
//
// swagger:model CreateTdmTaskRequest
type CreateTdmTaskRequest struct {
	CommonTdmTaskRequestParams

	// clone params
	CloneParams *TdmCloneTaskRequestParams `json:"cloneParams,omitempty"`

	// snapshot params
	SnapshotParams *TdmSnapshotTaskParams `json:"snapshotParams,omitempty"`

	// refresh params
	RefreshParams *TdmRefreshTaskRequestParams `json:"refreshParams,omitempty"`

	// teardown params
	TeardownParams *TdmTeardownTaskRequestParams `json:"teardownParams,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CreateTdmTaskRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonTdmTaskRequestParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonTdmTaskRequestParams = aO0

	// AO1
	var dataAO1 struct {
		CloneParams *TdmCloneTaskRequestParams `json:"cloneParams,omitempty"`

		SnapshotParams *TdmSnapshotTaskParams `json:"snapshotParams,omitempty"`

		RefreshParams *TdmRefreshTaskRequestParams `json:"refreshParams,omitempty"`

		TeardownParams *TdmTeardownTaskRequestParams `json:"teardownParams,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.CloneParams = dataAO1.CloneParams

	m.SnapshotParams = dataAO1.SnapshotParams

	m.RefreshParams = dataAO1.RefreshParams

	m.TeardownParams = dataAO1.TeardownParams

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CreateTdmTaskRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonTdmTaskRequestParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		CloneParams *TdmCloneTaskRequestParams `json:"cloneParams,omitempty"`

		SnapshotParams *TdmSnapshotTaskParams `json:"snapshotParams,omitempty"`

		RefreshParams *TdmRefreshTaskRequestParams `json:"refreshParams,omitempty"`

		TeardownParams *TdmTeardownTaskRequestParams `json:"teardownParams,omitempty"`
	}

	dataAO1.CloneParams = m.CloneParams

	dataAO1.SnapshotParams = m.SnapshotParams

	dataAO1.RefreshParams = m.RefreshParams

	dataAO1.TeardownParams = m.TeardownParams

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create tdm task request
func (m *CreateTdmTaskRequest) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTdmTaskRequestParams
	if err := m.CommonTdmTaskRequestParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloneParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeardownParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTdmTaskRequest) validateCloneParams(formats strfmt.Registry) error {

	if swag.IsZero(m.CloneParams) { // not required
		return nil
	}

	if m.CloneParams != nil {
		if err := m.CloneParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloneParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTdmTaskRequest) validateSnapshotParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SnapshotParams) { // not required
		return nil
	}

	if m.SnapshotParams != nil {
		if err := m.SnapshotParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTdmTaskRequest) validateRefreshParams(formats strfmt.Registry) error {

	if swag.IsZero(m.RefreshParams) { // not required
		return nil
	}

	if m.RefreshParams != nil {
		if err := m.RefreshParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTdmTaskRequest) validateTeardownParams(formats strfmt.Registry) error {

	if swag.IsZero(m.TeardownParams) { // not required
		return nil
	}

	if m.TeardownParams != nil {
		if err := m.TeardownParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teardownParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("teardownParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create tdm task request based on the context it is used
func (m *CreateTdmTaskRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTdmTaskRequestParams
	if err := m.CommonTdmTaskRequestParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloneParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshotParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRefreshParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeardownParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateTdmTaskRequest) contextValidateCloneParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CloneParams != nil {

		if swag.IsZero(m.CloneParams) { // not required
			return nil
		}

		if err := m.CloneParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloneParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloneParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTdmTaskRequest) contextValidateSnapshotParams(ctx context.Context, formats strfmt.Registry) error {

	if m.SnapshotParams != nil {

		if swag.IsZero(m.SnapshotParams) { // not required
			return nil
		}

		if err := m.SnapshotParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshotParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("snapshotParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTdmTaskRequest) contextValidateRefreshParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RefreshParams != nil {

		if swag.IsZero(m.RefreshParams) { // not required
			return nil
		}

		if err := m.RefreshParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("refreshParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateTdmTaskRequest) contextValidateTeardownParams(ctx context.Context, formats strfmt.Registry) error {

	if m.TeardownParams != nil {

		if swag.IsZero(m.TeardownParams) { // not required
			return nil
		}

		if err := m.TeardownParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("teardownParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("teardownParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateTdmTaskRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateTdmTaskRequest) UnmarshalBinary(b []byte) error {
	var res CreateTdmTaskRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
