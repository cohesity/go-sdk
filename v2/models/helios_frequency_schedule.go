// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosFrequencySchedule Specifies settings that define a daily schedule for a Protection Policy.
//
// swagger:model HeliosFrequencySchedule
type HeliosFrequencySchedule struct {

	// Specifies a factor to multiply the unit by, to determine the backup schedule. <br> Example: If 'frequency' set to 2 and the unit is 'Hours', then Snapshots are backed up every 2 hours. If selected unit is 'Weeks' or 'Months' then frequency will only be applied if policy type is DMaas.
	// Required: true
	// Minimum: 1
	Frequency *int64 `json:"frequency"`
}

// Validate validates this helios frequency schedule
func (m *HeliosFrequencySchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFrequency(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosFrequencySchedule) validateFrequency(formats strfmt.Registry) error {

	if err := validate.Required("frequency", "body", m.Frequency); err != nil {
		return err
	}

	if err := validate.MinimumInt("frequency", "body", *m.Frequency, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this helios frequency schedule based on context it is used
func (m *HeliosFrequencySchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HeliosFrequencySchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosFrequencySchedule) UnmarshalBinary(b []byte) error {
	var res HeliosFrequencySchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
