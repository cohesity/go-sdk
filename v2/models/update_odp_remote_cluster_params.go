// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateOdpRemoteClusterParams Specifies the parameters to create an ODP Remote Cluster config.
//
// swagger:model UpdateOdpRemoteClusterParams
type UpdateOdpRemoteClusterParams struct {

	// Specifies the ODP Remote Cluster name.
	// Required: true
	ClusterName *string `json:"clusterName"`

	// Specifies if the cluster id is stale and needs to be refreshed.
	ClusterIDStale *bool `json:"clusterIdStale,omitempty"`

	// Specifies if all endpoints on ODP Remote Cluster are reachable.
	AllEndpointsReachable *bool `json:"allEndpointsReachable,omitempty"`

	// Specifies a list of Storage Domain pairs.
	StorageDomainPairs []*StorageDomainPair `json:"storageDomainPairs"`

	// Specifies whether to compress the data transferred to ODP Remote Cluster.
	CompressionEnabled *bool `json:"compressionEnabled,omitempty"`

	// Specifies the key used for encrypting the data transferred to ODP Remote Cluster.
	KeyEncryptionKey *string `json:"keyEncryptionKey,omitempty"`

	// Specifies if the ODP Remote Cluster is used for replication.
	UsedForReplication *bool `json:"usedForReplication,omitempty"`

	// Specifies the tenant id.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies the tenant id for ODP Remote Cluster.
	RemoteTenantID *string `json:"remoteTenantId,omitempty"`

	// Specifies the interface group name of the ODP Remote Cluster.
	InterfaceGroupName *string `json:"interfaceGroupName,omitempty"`

	// Specifies whether to use Bifrost Broker channel for remote connection.
	UseBifrostBrokerChannel *bool `json:"useBifrostBrokerChannel,omitempty"`
}

// Validate validates this update odp remote cluster params
func (m *UpdateOdpRemoteClusterParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageDomainPairs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateOdpRemoteClusterParams) validateClusterName(formats strfmt.Registry) error {

	if err := validate.Required("clusterName", "body", m.ClusterName); err != nil {
		return err
	}

	return nil
}

func (m *UpdateOdpRemoteClusterParams) validateStorageDomainPairs(formats strfmt.Registry) error {
	if swag.IsZero(m.StorageDomainPairs) { // not required
		return nil
	}

	for i := 0; i < len(m.StorageDomainPairs); i++ {
		if swag.IsZero(m.StorageDomainPairs[i]) { // not required
			continue
		}

		if m.StorageDomainPairs[i] != nil {
			if err := m.StorageDomainPairs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageDomainPairs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageDomainPairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update odp remote cluster params based on the context it is used
func (m *UpdateOdpRemoteClusterParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStorageDomainPairs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateOdpRemoteClusterParams) contextValidateStorageDomainPairs(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.StorageDomainPairs); i++ {

		if m.StorageDomainPairs[i] != nil {

			if swag.IsZero(m.StorageDomainPairs[i]) { // not required
				return nil
			}

			if err := m.StorageDomainPairs[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("storageDomainPairs" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("storageDomainPairs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateOdpRemoteClusterParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateOdpRemoteClusterParams) UnmarshalBinary(b []byte) error {
	var res UpdateOdpRemoteClusterParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
