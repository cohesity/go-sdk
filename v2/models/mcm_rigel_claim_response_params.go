// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// McmRigelClaimResponseParams Response of claiming a Rigel to Helios.
//
// Specifies the response of claiming a Rigel to Helios.
//
// swagger:model McmRigelClaimResponseParams
type McmRigelClaimResponseParams struct {

	// Unique id for rigel instance.
	RigelGUID *int64 `json:"rigelGuid,omitempty"`

	// Connection id for rigel instance.
	ConnectionID *int64 `json:"connectionId,omitempty"`

	// Tenant id associated with the claimed rigel.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies the Rigel type that is being claimed.
	// Enum: ["OnPrem","Cloud"]
	RigelType *string `json:"rigelType,omitempty"`

	// Specifies the Rigel certificate.
	RigelCertificate *string `json:"rigelCertificate,omitempty"`

	// Specifies the Rigel private key.
	RigelPrivateKey *string `json:"rigelPrivateKey,omitempty"`

	// Specifies the CA chain that is used to sign the Rigel certificate.
	RigelCaChain *string `json:"rigelCaChain,omitempty"`

	// Specifies the Tenant CA chain.
	TenantCaChain []*string `json:"tenantCaChain"`

	// Specifies the Helios certificate that can be used to authenticate api calls made from Helios to Rigel.
	HeliosCertificate *string `json:"heliosCertificate,omitempty"`

	// Endpoint for associated data plane.
	DataplaneEndpoint *string `json:"dataplaneEndpoint,omitempty"`

	// Specifies the Rigel use case.
	// Enum: ["Baas","DRaasFailover"]
	RigelUseCase *string `json:"rigelUseCase,omitempty"`

	// Specifies the region id of the Rigel cluster.
	RegionID *string `json:"regionId,omitempty"`
}

// Validate validates this mcm rigel claim response params
func (m *McmRigelClaimResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRigelType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRigelUseCase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mcmRigelClaimResponseParamsTypeRigelTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnPrem","Cloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mcmRigelClaimResponseParamsTypeRigelTypePropEnum = append(mcmRigelClaimResponseParamsTypeRigelTypePropEnum, v)
	}
}

const (

	// McmRigelClaimResponseParamsRigelTypeOnPrem captures enum value "OnPrem"
	McmRigelClaimResponseParamsRigelTypeOnPrem string = "OnPrem"

	// McmRigelClaimResponseParamsRigelTypeCloud captures enum value "Cloud"
	McmRigelClaimResponseParamsRigelTypeCloud string = "Cloud"
)

// prop value enum
func (m *McmRigelClaimResponseParams) validateRigelTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mcmRigelClaimResponseParamsTypeRigelTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *McmRigelClaimResponseParams) validateRigelType(formats strfmt.Registry) error {
	if swag.IsZero(m.RigelType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRigelTypeEnum("rigelType", "body", *m.RigelType); err != nil {
		return err
	}

	return nil
}

var mcmRigelClaimResponseParamsTypeRigelUseCasePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Baas","DRaasFailover"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mcmRigelClaimResponseParamsTypeRigelUseCasePropEnum = append(mcmRigelClaimResponseParamsTypeRigelUseCasePropEnum, v)
	}
}

const (

	// McmRigelClaimResponseParamsRigelUseCaseBaas captures enum value "Baas"
	McmRigelClaimResponseParamsRigelUseCaseBaas string = "Baas"

	// McmRigelClaimResponseParamsRigelUseCaseDRaasFailover captures enum value "DRaasFailover"
	McmRigelClaimResponseParamsRigelUseCaseDRaasFailover string = "DRaasFailover"
)

// prop value enum
func (m *McmRigelClaimResponseParams) validateRigelUseCaseEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mcmRigelClaimResponseParamsTypeRigelUseCasePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *McmRigelClaimResponseParams) validateRigelUseCase(formats strfmt.Registry) error {
	if swag.IsZero(m.RigelUseCase) { // not required
		return nil
	}

	// value enum
	if err := m.validateRigelUseCaseEnum("rigelUseCase", "body", *m.RigelUseCase); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mcm rigel claim response params based on context it is used
func (m *McmRigelClaimResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *McmRigelClaimResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *McmRigelClaimResponseParams) UnmarshalBinary(b []byte) error {
	var res McmRigelClaimResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
