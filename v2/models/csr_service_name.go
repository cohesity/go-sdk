// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CsrServiceName CsrServiceName
//
// # Csr Service Name
//
// swagger:model CsrServiceName
type CsrServiceName struct {

	// Specifies the csr service name.
	// Enum: ["iris"]
	CsrServiceName string `json:"csrServiceName,omitempty"`
}

// Validate validates this csr service name
func (m *CsrServiceName) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCsrServiceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var csrServiceNameTypeCsrServiceNamePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["iris"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		csrServiceNameTypeCsrServiceNamePropEnum = append(csrServiceNameTypeCsrServiceNamePropEnum, v)
	}
}

const (

	// CsrServiceNameCsrServiceNameIris captures enum value "iris"
	CsrServiceNameCsrServiceNameIris string = "iris"
)

// prop value enum
func (m *CsrServiceName) validateCsrServiceNameEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, csrServiceNameTypeCsrServiceNamePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CsrServiceName) validateCsrServiceName(formats strfmt.Registry) error {
	if swag.IsZero(m.CsrServiceName) { // not required
		return nil
	}

	// value enum
	if err := m.validateCsrServiceNameEnum("csrServiceName", "body", m.CsrServiceName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this csr service name based on context it is used
func (m *CsrServiceName) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CsrServiceName) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CsrServiceName) UnmarshalBinary(b []byte) error {
	var res CsrServiceName
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
