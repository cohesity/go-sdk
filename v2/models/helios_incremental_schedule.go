// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosIncrementalSchedule Run Schedule
//
// Specifies settings that defines how frequent backup will be performed for a Protection Group.
//
// swagger:model HeliosIncrementalSchedule
type HeliosIncrementalSchedule struct {

	// Specifies how often to start new runs of a Protection Group. <br>'Minutes' specifies that Protection Group run starts periodically after certain number of minutes specified in 'frequency' field. <br>'Hours' specifies that Protection Group run starts periodically after certain number of hours specified in 'frequency' field. <br>'Days' specifies that Protection Group run starts periodically after certain number of days specified in 'frequency' field. <br>'Week' specifies that new Protection Group runs start weekly on certain days specified using 'dayOfWeek' field. <br>'Month' specifies that new Protection Group runs start monthly on certain day of specific week. This schedule needs 'weekOfMonth' and 'dayOfWeek' fields to be set. <br> Example: To run the Protection Group on Second Sunday of Every Month, following schedule need to be set: <br> unit: 'Month' <br> dayOfWeek: 'Sunday' <br> weekOfMonth: 'Second'
	// Required: true
	// Enum: ["Minutes","Hours","Days","Weeks","Months","Years"]
	Unit *string `json:"unit"`

	// Specifies the days Schedule for Protection Group to start runs after certain number of minutes.
	MinuteSchedule *HeliosMinuteSchedule `json:"minuteSchedule,omitempty"`

	// Specifies the days Schedule for Protection Group to start runs after certain number of hours.
	HourSchedule *HeliosHourSchedule `json:"hourSchedule,omitempty"`

	// Specifies the days Schedule for Protection Group to start runs after certain number of days.
	DaySchedule *HeliosDaySchedule `json:"daySchedule,omitempty"`

	// Specifies the week Schedule for Protection Group to start runs on certain number of days in a week.
	WeekSchedule *HeliosWeekSchedule `json:"weekSchedule,omitempty"`

	// Specifies the week Schedule for Protection Group to start runs on specific week in a month and specific days of that week.
	MonthSchedule *HeliosMonthSchedule `json:"monthSchedule,omitempty"`
}

// Validate validates this helios incremental schedule
func (m *HeliosIncrementalSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinuteSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHourSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDaySchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekSchedule(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMonthSchedule(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var heliosIncrementalScheduleTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minutes","Hours","Days","Weeks","Months","Years"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heliosIncrementalScheduleTypeUnitPropEnum = append(heliosIncrementalScheduleTypeUnitPropEnum, v)
	}
}

const (

	// HeliosIncrementalScheduleUnitMinutes captures enum value "Minutes"
	HeliosIncrementalScheduleUnitMinutes string = "Minutes"

	// HeliosIncrementalScheduleUnitHours captures enum value "Hours"
	HeliosIncrementalScheduleUnitHours string = "Hours"

	// HeliosIncrementalScheduleUnitDays captures enum value "Days"
	HeliosIncrementalScheduleUnitDays string = "Days"

	// HeliosIncrementalScheduleUnitWeeks captures enum value "Weeks"
	HeliosIncrementalScheduleUnitWeeks string = "Weeks"

	// HeliosIncrementalScheduleUnitMonths captures enum value "Months"
	HeliosIncrementalScheduleUnitMonths string = "Months"

	// HeliosIncrementalScheduleUnitYears captures enum value "Years"
	HeliosIncrementalScheduleUnitYears string = "Years"
)

// prop value enum
func (m *HeliosIncrementalSchedule) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, heliosIncrementalScheduleTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HeliosIncrementalSchedule) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", *m.Unit); err != nil {
		return err
	}

	return nil
}

func (m *HeliosIncrementalSchedule) validateMinuteSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.MinuteSchedule) { // not required
		return nil
	}

	if m.MinuteSchedule != nil {
		if err := m.MinuteSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minuteSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minuteSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosIncrementalSchedule) validateHourSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.HourSchedule) { // not required
		return nil
	}

	if m.HourSchedule != nil {
		if err := m.HourSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hourSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hourSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosIncrementalSchedule) validateDaySchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.DaySchedule) { // not required
		return nil
	}

	if m.DaySchedule != nil {
		if err := m.DaySchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("daySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosIncrementalSchedule) validateWeekSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.WeekSchedule) { // not required
		return nil
	}

	if m.WeekSchedule != nil {
		if err := m.WeekSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weekSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosIncrementalSchedule) validateMonthSchedule(formats strfmt.Registry) error {
	if swag.IsZero(m.MonthSchedule) { // not required
		return nil
	}

	if m.MonthSchedule != nil {
		if err := m.MonthSchedule.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthSchedule")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helios incremental schedule based on the context it is used
func (m *HeliosIncrementalSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateMinuteSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHourSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDaySchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWeekSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMonthSchedule(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosIncrementalSchedule) contextValidateMinuteSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.MinuteSchedule != nil {

		if swag.IsZero(m.MinuteSchedule) { // not required
			return nil
		}

		if err := m.MinuteSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("minuteSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("minuteSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosIncrementalSchedule) contextValidateHourSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.HourSchedule != nil {

		if swag.IsZero(m.HourSchedule) { // not required
			return nil
		}

		if err := m.HourSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hourSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("hourSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosIncrementalSchedule) contextValidateDaySchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.DaySchedule != nil {

		if swag.IsZero(m.DaySchedule) { // not required
			return nil
		}

		if err := m.DaySchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("daySchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("daySchedule")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosIncrementalSchedule) contextValidateWeekSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.WeekSchedule != nil {

		if swag.IsZero(m.WeekSchedule) { // not required
			return nil
		}

		if err := m.WeekSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("weekSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("weekSchedule")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosIncrementalSchedule) contextValidateMonthSchedule(ctx context.Context, formats strfmt.Registry) error {

	if m.MonthSchedule != nil {

		if swag.IsZero(m.MonthSchedule) { // not required
			return nil
		}

		if err := m.MonthSchedule.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("monthSchedule")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("monthSchedule")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosIncrementalSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosIncrementalSchedule) UnmarshalBinary(b []byte) error {
	var res HeliosIncrementalSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
