// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureStorageConfigForIndexing AzureStorageConfigForIndexing
//
// Storage config for indexing in Azure CE.
//
// swagger:model AzureStorageConfigForIndexing
type AzureStorageConfigForIndexing struct {

	// The container to be used for the tenant.
	// Required: true
	ContainerName *string `json:"containerName"`

	// The storage account to be used for the tenant.
	// Required: true
	StorageAccountName *string `json:"storageAccountName"`
}

// Validate validates this azure storage config for indexing
func (m *AzureStorageConfigForIndexing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainerName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorageAccountName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureStorageConfigForIndexing) validateContainerName(formats strfmt.Registry) error {

	if err := validate.Required("containerName", "body", m.ContainerName); err != nil {
		return err
	}

	return nil
}

func (m *AzureStorageConfigForIndexing) validateStorageAccountName(formats strfmt.Registry) error {

	if err := validate.Required("storageAccountName", "body", m.StorageAccountName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure storage config for indexing based on context it is used
func (m *AzureStorageConfigForIndexing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureStorageConfigForIndexing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureStorageConfigForIndexing) UnmarshalBinary(b []byte) error {
	var res AzureStorageConfigForIndexing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
