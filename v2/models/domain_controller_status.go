// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DomainControllerStatus Domain Controller Status
//
// Connection status of domain controller.
//
// swagger:model DomainControllerStatus
type DomainControllerStatus struct {

	// Specifies the connection status of a domain controller.
	// Enum: ["Reachable","Flapping","Incompatible","ClockSkew"]
	DomainControllerStatus string `json:"domainControllerStatus,omitempty"`
}

// Validate validates this domain controller status
func (m *DomainControllerStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomainControllerStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var domainControllerStatusTypeDomainControllerStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Reachable","Flapping","Incompatible","ClockSkew"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		domainControllerStatusTypeDomainControllerStatusPropEnum = append(domainControllerStatusTypeDomainControllerStatusPropEnum, v)
	}
}

const (

	// DomainControllerStatusDomainControllerStatusReachable captures enum value "Reachable"
	DomainControllerStatusDomainControllerStatusReachable string = "Reachable"

	// DomainControllerStatusDomainControllerStatusFlapping captures enum value "Flapping"
	DomainControllerStatusDomainControllerStatusFlapping string = "Flapping"

	// DomainControllerStatusDomainControllerStatusIncompatible captures enum value "Incompatible"
	DomainControllerStatusDomainControllerStatusIncompatible string = "Incompatible"

	// DomainControllerStatusDomainControllerStatusClockSkew captures enum value "ClockSkew"
	DomainControllerStatusDomainControllerStatusClockSkew string = "ClockSkew"
)

// prop value enum
func (m *DomainControllerStatus) validateDomainControllerStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, domainControllerStatusTypeDomainControllerStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DomainControllerStatus) validateDomainControllerStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.DomainControllerStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDomainControllerStatusEnum("domainControllerStatus", "body", m.DomainControllerStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this domain controller status based on context it is used
func (m *DomainControllerStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DomainControllerStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DomainControllerStatus) UnmarshalBinary(b []byte) error {
	var res DomainControllerStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
