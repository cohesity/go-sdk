// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ErrorType Error Type.
//
// Specifies type of error for faulty dbs.
//
// swagger:model ErrorType
type ErrorType struct {

	// Specifies type of error for faulty dbs.
	// Enum: ["kError","kWarn","kIgnore"]
	ErrorType string `json:"errorType,omitempty"`
}

// Validate validates this error type
func (m *ErrorType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateErrorType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var errorTypeTypeErrorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kError","kWarn","kIgnore"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		errorTypeTypeErrorTypePropEnum = append(errorTypeTypeErrorTypePropEnum, v)
	}
}

const (

	// ErrorTypeErrorTypeKError captures enum value "kError"
	ErrorTypeErrorTypeKError string = "kError"

	// ErrorTypeErrorTypeKWarn captures enum value "kWarn"
	ErrorTypeErrorTypeKWarn string = "kWarn"

	// ErrorTypeErrorTypeKIgnore captures enum value "kIgnore"
	ErrorTypeErrorTypeKIgnore string = "kIgnore"
)

// prop value enum
func (m *ErrorType) validateErrorTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, errorTypeTypeErrorTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ErrorType) validateErrorType(formats strfmt.Registry) error {
	if swag.IsZero(m.ErrorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateErrorTypeEnum("errorType", "body", m.ErrorType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this error type based on context it is used
func (m *ErrorType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ErrorType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ErrorType) UnmarshalBinary(b []byte) error {
	var res ErrorType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
