// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WormRetention Worm Retention type.
//
// Worm Retention type.
//
// swagger:model WormRetention
type WormRetention struct {

	// Specifies Worm Retention type.
	// Enum: ["Compliance","Administrative"]
	WormRetention string `json:"wormRetention,omitempty"`
}

// Validate validates this worm retention
func (m *WormRetention) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateWormRetention(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var wormRetentionTypeWormRetentionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Compliance","Administrative"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		wormRetentionTypeWormRetentionPropEnum = append(wormRetentionTypeWormRetentionPropEnum, v)
	}
}

const (

	// WormRetentionWormRetentionCompliance captures enum value "Compliance"
	WormRetentionWormRetentionCompliance string = "Compliance"

	// WormRetentionWormRetentionAdministrative captures enum value "Administrative"
	WormRetentionWormRetentionAdministrative string = "Administrative"
)

// prop value enum
func (m *WormRetention) validateWormRetentionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, wormRetentionTypeWormRetentionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WormRetention) validateWormRetention(formats strfmt.Registry) error {
	if swag.IsZero(m.WormRetention) { // not required
		return nil
	}

	// value enum
	if err := m.validateWormRetentionEnum("wormRetention", "body", m.WormRetention); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this worm retention based on context it is used
func (m *WormRetention) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WormRetention) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WormRetention) UnmarshalBinary(b []byte) error {
	var res WormRetention
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
