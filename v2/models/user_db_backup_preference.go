// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserDbBackupPreference User Database Backup Preference Type.
//
// Specifies User Database Backup Preference Type.
//
// swagger:model UserDbBackupPreference
type UserDbBackupPreference struct {

	// Specifies User Database Backup Preference Type.
	// Enum: ["kBackupAllDatabases","kBackupAllExceptAAGDatabases","kBackupOnlyAAGDatabases"]
	UserDbBackupPreference string `json:"userDbBackupPreference,omitempty"`
}

// Validate validates this user db backup preference
func (m *UserDbBackupPreference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUserDbBackupPreference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var userDbBackupPreferenceTypeUserDbBackupPreferencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kBackupAllDatabases","kBackupAllExceptAAGDatabases","kBackupOnlyAAGDatabases"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		userDbBackupPreferenceTypeUserDbBackupPreferencePropEnum = append(userDbBackupPreferenceTypeUserDbBackupPreferencePropEnum, v)
	}
}

const (

	// UserDbBackupPreferenceUserDbBackupPreferenceKBackupAllDatabases captures enum value "kBackupAllDatabases"
	UserDbBackupPreferenceUserDbBackupPreferenceKBackupAllDatabases string = "kBackupAllDatabases"

	// UserDbBackupPreferenceUserDbBackupPreferenceKBackupAllExceptAAGDatabases captures enum value "kBackupAllExceptAAGDatabases"
	UserDbBackupPreferenceUserDbBackupPreferenceKBackupAllExceptAAGDatabases string = "kBackupAllExceptAAGDatabases"

	// UserDbBackupPreferenceUserDbBackupPreferenceKBackupOnlyAAGDatabases captures enum value "kBackupOnlyAAGDatabases"
	UserDbBackupPreferenceUserDbBackupPreferenceKBackupOnlyAAGDatabases string = "kBackupOnlyAAGDatabases"
)

// prop value enum
func (m *UserDbBackupPreference) validateUserDbBackupPreferenceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, userDbBackupPreferenceTypeUserDbBackupPreferencePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UserDbBackupPreference) validateUserDbBackupPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.UserDbBackupPreference) { // not required
		return nil
	}

	// value enum
	if err := m.validateUserDbBackupPreferenceEnum("userDbBackupPreference", "body", m.UserDbBackupPreference); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user db backup preference based on context it is used
func (m *UserDbBackupPreference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserDbBackupPreference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserDbBackupPreference) UnmarshalBinary(b []byte) error {
	var res UserDbBackupPreference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
