// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfectedFile Specifies an infected file.
//
// swagger:model InfectedFile
type InfectedFile struct {

	// Specifies the infected file path.
	Path *string `json:"path,omitempty"`

	// Specifies the entity id of the infected file.
	// Required: true
	EntityID *int64 `json:"entityId"`

	// Specifies the root inode id of the file system which the infected file belongs to.
	// Required: true
	RootInodeID *int64 `json:"rootInodeId"`

	// Specifies the view id which the infected file belongs to.
	// Required: true
	ViewID *int64 `json:"viewId"`

	// Specifies the View name to which the infected file belongs to.
	ViewName *string `json:"viewName,omitempty"`

	// Specifies the state of the infected file.
	// Enum: ["Quarantined","Unquarantined"]
	State *string `json:"state,omitempty"`

	// Specifies a list of virus threat descriptions found in the file.
	ThreatDescriptions []string `json:"threatDescriptions"`

	// Specifies the timestamp in microseconds when inode was scanned for viruses.
	ScannedTimeUsecs *int64 `json:"scannedTimeUsecs,omitempty"`

	// Specifies the timestamp in microseconds when the threats were detected.
	DetectedTimeUsecs *int64 `json:"detectedTimeUsecs,omitempty"`

	// Specifies the timestamp in microseconds when this file was last modified.
	LastModifiedTimeUsecs *int64 `json:"lastModifiedTimeUsecs,omitempty"`

	// Specifies the ICAP Uri of the Antivirus Service which detected the threats.
	AntivirusServiceIcapURI *string `json:"antivirusServiceIcapUri,omitempty"`

	// Specifies the Antivirus Service group which detected the threats.
	AntivirusServiceGroupName *string `json:"antivirusServiceGroupName,omitempty"`
}

// Validate validates this infected file
func (m *InfectedFile) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootInodeID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateViewID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfectedFile) validateEntityID(formats strfmt.Registry) error {

	if err := validate.Required("entityId", "body", m.EntityID); err != nil {
		return err
	}

	return nil
}

func (m *InfectedFile) validateRootInodeID(formats strfmt.Registry) error {

	if err := validate.Required("rootInodeId", "body", m.RootInodeID); err != nil {
		return err
	}

	return nil
}

func (m *InfectedFile) validateViewID(formats strfmt.Registry) error {

	if err := validate.Required("viewId", "body", m.ViewID); err != nil {
		return err
	}

	return nil
}

var infectedFileTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Quarantined","Unquarantined"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infectedFileTypeStatePropEnum = append(infectedFileTypeStatePropEnum, v)
	}
}

const (

	// InfectedFileStateQuarantined captures enum value "Quarantined"
	InfectedFileStateQuarantined string = "Quarantined"

	// InfectedFileStateUnquarantined captures enum value "Unquarantined"
	InfectedFileStateUnquarantined string = "Unquarantined"
)

// prop value enum
func (m *InfectedFile) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, infectedFileTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InfectedFile) validateState(formats strfmt.Registry) error {
	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", *m.State); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this infected file based on context it is used
func (m *InfectedFile) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InfectedFile) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfectedFile) UnmarshalBinary(b []byte) error {
	var res InfectedFile
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
