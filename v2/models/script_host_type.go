// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScriptHostType ScriptHostType
//
// # Script Host Type
//
// swagger:model ScriptHostType
type ScriptHostType struct {

	// Specifies the host type of the pre/post script.
	// Enum: ["kLinux","kWindows","kAix","kSolaris","kSapHana","kOther","kHPUX","kVOS"]
	ScriptHostType string `json:"scriptHostType,omitempty"`
}

// Validate validates this script host type
func (m *ScriptHostType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScriptHostType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scriptHostTypeTypeScriptHostTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kLinux","kWindows","kAix","kSolaris","kSapHana","kOther","kHPUX","kVOS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scriptHostTypeTypeScriptHostTypePropEnum = append(scriptHostTypeTypeScriptHostTypePropEnum, v)
	}
}

const (

	// ScriptHostTypeScriptHostTypeKLinux captures enum value "kLinux"
	ScriptHostTypeScriptHostTypeKLinux string = "kLinux"

	// ScriptHostTypeScriptHostTypeKWindows captures enum value "kWindows"
	ScriptHostTypeScriptHostTypeKWindows string = "kWindows"

	// ScriptHostTypeScriptHostTypeKAix captures enum value "kAix"
	ScriptHostTypeScriptHostTypeKAix string = "kAix"

	// ScriptHostTypeScriptHostTypeKSolaris captures enum value "kSolaris"
	ScriptHostTypeScriptHostTypeKSolaris string = "kSolaris"

	// ScriptHostTypeScriptHostTypeKSapHana captures enum value "kSapHana"
	ScriptHostTypeScriptHostTypeKSapHana string = "kSapHana"

	// ScriptHostTypeScriptHostTypeKOther captures enum value "kOther"
	ScriptHostTypeScriptHostTypeKOther string = "kOther"

	// ScriptHostTypeScriptHostTypeKHPUX captures enum value "kHPUX"
	ScriptHostTypeScriptHostTypeKHPUX string = "kHPUX"

	// ScriptHostTypeScriptHostTypeKVOS captures enum value "kVOS"
	ScriptHostTypeScriptHostTypeKVOS string = "kVOS"
)

// prop value enum
func (m *ScriptHostType) validateScriptHostTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scriptHostTypeTypeScriptHostTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScriptHostType) validateScriptHostType(formats strfmt.Registry) error {
	if swag.IsZero(m.ScriptHostType) { // not required
		return nil
	}

	// value enum
	if err := m.validateScriptHostTypeEnum("scriptHostType", "body", m.ScriptHostType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this script host type based on context it is used
func (m *ScriptHostType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScriptHostType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScriptHostType) UnmarshalBinary(b []byte) error {
	var res ScriptHostType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
