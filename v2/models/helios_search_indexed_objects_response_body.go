// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HeliosSearchIndexedObjectsResponseBody Helios Search Indexed objects response body.
//
// Specifies the search indexed objects response body.
//
// swagger:model HeliosSearchIndexedObjectsResponseBody
type HeliosSearchIndexedObjectsResponseBody struct {
	HeliosCommonSearchIndexedObjectsResponseParams

	// emails
	Emails HeliosEmails `json:"emails,omitempty"`

	// files
	Files HeliosFiles `json:"files,omitempty"`

	// cassandra objects
	CassandraObjects HeliosCassandraObjects `json:"cassandraObjects,omitempty"`

	// couchbase objects
	CouchbaseObjects HeliosCouchbaseObjects `json:"couchbaseObjects,omitempty"`

	// hbase objects
	HbaseObjects HeliosHbaseObjects `json:"hbaseObjects,omitempty"`

	// hive objects
	HiveObjects HeliosHiveObjects `json:"hiveObjects,omitempty"`

	// mongo objects
	MongoObjects HeliosMongoObjects `json:"mongoObjects,omitempty"`

	// hdfs objects
	HdfsObjects HeliosHdfsObjects `json:"hdfsObjects,omitempty"`

	// exchange objects
	ExchangeObjects HeliosExchangeObjects `json:"exchangeObjects,omitempty"`

	// public folder items
	PublicFolderItems HeliosPublicFolderItems `json:"publicFolderItems,omitempty"`

	// sfdc records
	SfdcRecords *SfdcRecords `json:"sfdcRecords,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HeliosSearchIndexedObjectsResponseBody) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 HeliosCommonSearchIndexedObjectsResponseParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.HeliosCommonSearchIndexedObjectsResponseParams = aO0

	// AO1
	var dataAO1 struct {
		Emails HeliosEmails `json:"emails,omitempty"`

		Files HeliosFiles `json:"files,omitempty"`

		CassandraObjects HeliosCassandraObjects `json:"cassandraObjects,omitempty"`

		CouchbaseObjects HeliosCouchbaseObjects `json:"couchbaseObjects,omitempty"`

		HbaseObjects HeliosHbaseObjects `json:"hbaseObjects,omitempty"`

		HiveObjects HeliosHiveObjects `json:"hiveObjects,omitempty"`

		MongoObjects HeliosMongoObjects `json:"mongoObjects,omitempty"`

		HdfsObjects HeliosHdfsObjects `json:"hdfsObjects,omitempty"`

		ExchangeObjects HeliosExchangeObjects `json:"exchangeObjects,omitempty"`

		PublicFolderItems HeliosPublicFolderItems `json:"publicFolderItems,omitempty"`

		SfdcRecords *SfdcRecords `json:"sfdcRecords,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Emails = dataAO1.Emails

	m.Files = dataAO1.Files

	m.CassandraObjects = dataAO1.CassandraObjects

	m.CouchbaseObjects = dataAO1.CouchbaseObjects

	m.HbaseObjects = dataAO1.HbaseObjects

	m.HiveObjects = dataAO1.HiveObjects

	m.MongoObjects = dataAO1.MongoObjects

	m.HdfsObjects = dataAO1.HdfsObjects

	m.ExchangeObjects = dataAO1.ExchangeObjects

	m.PublicFolderItems = dataAO1.PublicFolderItems

	m.SfdcRecords = dataAO1.SfdcRecords

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HeliosSearchIndexedObjectsResponseBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.HeliosCommonSearchIndexedObjectsResponseParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Emails HeliosEmails `json:"emails,omitempty"`

		Files HeliosFiles `json:"files,omitempty"`

		CassandraObjects HeliosCassandraObjects `json:"cassandraObjects,omitempty"`

		CouchbaseObjects HeliosCouchbaseObjects `json:"couchbaseObjects,omitempty"`

		HbaseObjects HeliosHbaseObjects `json:"hbaseObjects,omitempty"`

		HiveObjects HeliosHiveObjects `json:"hiveObjects,omitempty"`

		MongoObjects HeliosMongoObjects `json:"mongoObjects,omitempty"`

		HdfsObjects HeliosHdfsObjects `json:"hdfsObjects,omitempty"`

		ExchangeObjects HeliosExchangeObjects `json:"exchangeObjects,omitempty"`

		PublicFolderItems HeliosPublicFolderItems `json:"publicFolderItems,omitempty"`

		SfdcRecords *SfdcRecords `json:"sfdcRecords,omitempty"`
	}

	dataAO1.Emails = m.Emails

	dataAO1.Files = m.Files

	dataAO1.CassandraObjects = m.CassandraObjects

	dataAO1.CouchbaseObjects = m.CouchbaseObjects

	dataAO1.HbaseObjects = m.HbaseObjects

	dataAO1.HiveObjects = m.HiveObjects

	dataAO1.MongoObjects = m.MongoObjects

	dataAO1.HdfsObjects = m.HdfsObjects

	dataAO1.ExchangeObjects = m.ExchangeObjects

	dataAO1.PublicFolderItems = m.PublicFolderItems

	dataAO1.SfdcRecords = m.SfdcRecords

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this helios search indexed objects response body
func (m *HeliosSearchIndexedObjectsResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HeliosCommonSearchIndexedObjectsResponseParams
	if err := m.HeliosCommonSearchIndexedObjectsResponseParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFiles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCassandraObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCouchbaseObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHbaseObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHiveObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMongoObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHdfsObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExchangeObjects(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicFolderItems(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSfdcRecords(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validateEmails(formats strfmt.Registry) error {

	if swag.IsZero(m.Emails) { // not required
		return nil
	}

	if err := m.Emails.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("emails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("emails")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validateFiles(formats strfmt.Registry) error {

	if swag.IsZero(m.Files) { // not required
		return nil
	}

	if err := m.Files.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("files")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("files")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validateCassandraObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.CassandraObjects) { // not required
		return nil
	}

	if err := m.CassandraObjects.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cassandraObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cassandraObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validateCouchbaseObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.CouchbaseObjects) { // not required
		return nil
	}

	if err := m.CouchbaseObjects.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("couchbaseObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("couchbaseObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validateHbaseObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.HbaseObjects) { // not required
		return nil
	}

	if err := m.HbaseObjects.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hbaseObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("hbaseObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validateHiveObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.HiveObjects) { // not required
		return nil
	}

	if err := m.HiveObjects.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hiveObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("hiveObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validateMongoObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.MongoObjects) { // not required
		return nil
	}

	if err := m.MongoObjects.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mongoObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mongoObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validateHdfsObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.HdfsObjects) { // not required
		return nil
	}

	if err := m.HdfsObjects.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hdfsObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("hdfsObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validateExchangeObjects(formats strfmt.Registry) error {

	if swag.IsZero(m.ExchangeObjects) { // not required
		return nil
	}

	if err := m.ExchangeObjects.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("exchangeObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("exchangeObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validatePublicFolderItems(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicFolderItems) { // not required
		return nil
	}

	if err := m.PublicFolderItems.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("publicFolderItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("publicFolderItems")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) validateSfdcRecords(formats strfmt.Registry) error {

	if swag.IsZero(m.SfdcRecords) { // not required
		return nil
	}

	if m.SfdcRecords != nil {
		if err := m.SfdcRecords.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcRecords")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcRecords")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helios search indexed objects response body based on the context it is used
func (m *HeliosSearchIndexedObjectsResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HeliosCommonSearchIndexedObjectsResponseParams
	if err := m.HeliosCommonSearchIndexedObjectsResponseParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEmails(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFiles(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCassandraObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCouchbaseObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHbaseObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHiveObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMongoObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHdfsObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExchangeObjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePublicFolderItems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSfdcRecords(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidateEmails(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Emails.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("emails")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("emails")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidateFiles(ctx context.Context, formats strfmt.Registry) error {

	if err := m.Files.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("files")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("files")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidateCassandraObjects(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CassandraObjects.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cassandraObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("cassandraObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidateCouchbaseObjects(ctx context.Context, formats strfmt.Registry) error {

	if err := m.CouchbaseObjects.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("couchbaseObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("couchbaseObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidateHbaseObjects(ctx context.Context, formats strfmt.Registry) error {

	if err := m.HbaseObjects.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hbaseObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("hbaseObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidateHiveObjects(ctx context.Context, formats strfmt.Registry) error {

	if err := m.HiveObjects.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hiveObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("hiveObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidateMongoObjects(ctx context.Context, formats strfmt.Registry) error {

	if err := m.MongoObjects.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("mongoObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("mongoObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidateHdfsObjects(ctx context.Context, formats strfmt.Registry) error {

	if err := m.HdfsObjects.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("hdfsObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("hdfsObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidateExchangeObjects(ctx context.Context, formats strfmt.Registry) error {

	if err := m.ExchangeObjects.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("exchangeObjects")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("exchangeObjects")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidatePublicFolderItems(ctx context.Context, formats strfmt.Registry) error {

	if err := m.PublicFolderItems.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("publicFolderItems")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("publicFolderItems")
		}
		return err
	}

	return nil
}

func (m *HeliosSearchIndexedObjectsResponseBody) contextValidateSfdcRecords(ctx context.Context, formats strfmt.Registry) error {

	if m.SfdcRecords != nil {

		if swag.IsZero(m.SfdcRecords) { // not required
			return nil
		}

		if err := m.SfdcRecords.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sfdcRecords")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sfdcRecords")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosSearchIndexedObjectsResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosSearchIndexedObjectsResponseBody) UnmarshalBinary(b []byte) error {
	var res HeliosSearchIndexedObjectsResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
