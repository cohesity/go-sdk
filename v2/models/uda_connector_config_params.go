// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UdaConnectorConfigParams UDA connector config params
//
// Specifies the request parameters to create/update a new UDA connector config.
//
// swagger:model UdaConnectorConfigParams
type UdaConnectorConfigParams struct {

	// Specifies the index config as json string.
	IndexConfig *string `json:"indexConfig,omitempty"`

	// Specifies the translation messages for various locales. It maps locale name to their respective translation json strings.
	UITranslationConfig []*UdaLocaleSpecificTranslations `json:"uiTranslationConfig"`

	// Specifies operating system specific configuration.
	OsSpecificConfig []*UdaOSSpecificConfigParams `json:"osSpecificConfig"`

	// If true, any existing connector config with the the same ID is replaced if it exists.
	Replace *bool `json:"replace,omitempty"`
}

// Validate validates this uda connector config params
func (m *UdaConnectorConfigParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUITranslationConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOsSpecificConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaConnectorConfigParams) validateUITranslationConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.UITranslationConfig) { // not required
		return nil
	}

	for i := 0; i < len(m.UITranslationConfig); i++ {
		if swag.IsZero(m.UITranslationConfig[i]) { // not required
			continue
		}

		if m.UITranslationConfig[i] != nil {
			if err := m.UITranslationConfig[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uiTranslationConfig" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uiTranslationConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaConnectorConfigParams) validateOsSpecificConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.OsSpecificConfig) { // not required
		return nil
	}

	for i := 0; i < len(m.OsSpecificConfig); i++ {
		if swag.IsZero(m.OsSpecificConfig[i]) { // not required
			continue
		}

		if m.OsSpecificConfig[i] != nil {
			if err := m.OsSpecificConfig[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("osSpecificConfig" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("osSpecificConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this uda connector config params based on the context it is used
func (m *UdaConnectorConfigParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUITranslationConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOsSpecificConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaConnectorConfigParams) contextValidateUITranslationConfig(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.UITranslationConfig); i++ {

		if m.UITranslationConfig[i] != nil {

			if swag.IsZero(m.UITranslationConfig[i]) { // not required
				return nil
			}

			if err := m.UITranslationConfig[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("uiTranslationConfig" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("uiTranslationConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UdaConnectorConfigParams) contextValidateOsSpecificConfig(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.OsSpecificConfig); i++ {

		if m.OsSpecificConfig[i] != nil {

			if swag.IsZero(m.OsSpecificConfig[i]) { // not required
				return nil
			}

			if err := m.OsSpecificConfig[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("osSpecificConfig" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("osSpecificConfig" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UdaConnectorConfigParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaConnectorConfigParams) UnmarshalBinary(b []byte) error {
	var res UdaConnectorConfigParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
