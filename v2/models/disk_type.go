// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiskType Disk type.
//
// Type of disk.
//
// swagger:model DiskType
type DiskType struct {

	// Specifies type of the disk.
	// Enum: ["SystemDisk","BootDisk","DataDisk","NvmeSsdDisk","SataSsdDisk","HddDisk","Unknown"]
	Status string `json:"status,omitempty"`
}

// Validate validates this disk type
func (m *DiskType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var diskTypeTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SystemDisk","BootDisk","DataDisk","NvmeSsdDisk","SataSsdDisk","HddDisk","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskTypeTypeStatusPropEnum = append(diskTypeTypeStatusPropEnum, v)
	}
}

const (

	// DiskTypeStatusSystemDisk captures enum value "SystemDisk"
	DiskTypeStatusSystemDisk string = "SystemDisk"

	// DiskTypeStatusBootDisk captures enum value "BootDisk"
	DiskTypeStatusBootDisk string = "BootDisk"

	// DiskTypeStatusDataDisk captures enum value "DataDisk"
	DiskTypeStatusDataDisk string = "DataDisk"

	// DiskTypeStatusNvmeSsdDisk captures enum value "NvmeSsdDisk"
	DiskTypeStatusNvmeSsdDisk string = "NvmeSsdDisk"

	// DiskTypeStatusSataSsdDisk captures enum value "SataSsdDisk"
	DiskTypeStatusSataSsdDisk string = "SataSsdDisk"

	// DiskTypeStatusHddDisk captures enum value "HddDisk"
	DiskTypeStatusHddDisk string = "HddDisk"

	// DiskTypeStatusUnknown captures enum value "Unknown"
	DiskTypeStatusUnknown string = "Unknown"
)

// prop value enum
func (m *DiskType) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, diskTypeTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DiskType) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this disk type based on context it is used
func (m *DiskType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DiskType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskType) UnmarshalBinary(b []byte) error {
	var res DiskType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
