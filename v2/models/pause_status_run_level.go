// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PauseStatusRunLevel PauseStatusRunLevel
//
// Specifies the various statuses assciated with pause and resume operation on protection run.
//
// swagger:model PauseStatusRunLevel
type PauseStatusRunLevel struct {

	// Specifies the pause status at run level.
	// Enum: ["Paused"]
	PauseStatusRunLevel string `json:"pauseStatusRunLevel,omitempty"`
}

// Validate validates this pause status run level
func (m *PauseStatusRunLevel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePauseStatusRunLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var pauseStatusRunLevelTypePauseStatusRunLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Paused"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pauseStatusRunLevelTypePauseStatusRunLevelPropEnum = append(pauseStatusRunLevelTypePauseStatusRunLevelPropEnum, v)
	}
}

const (

	// PauseStatusRunLevelPauseStatusRunLevelPaused captures enum value "Paused"
	PauseStatusRunLevelPauseStatusRunLevelPaused string = "Paused"
)

// prop value enum
func (m *PauseStatusRunLevel) validatePauseStatusRunLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, pauseStatusRunLevelTypePauseStatusRunLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PauseStatusRunLevel) validatePauseStatusRunLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.PauseStatusRunLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validatePauseStatusRunLevelEnum("pauseStatusRunLevel", "body", m.PauseStatusRunLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this pause status run level based on context it is used
func (m *PauseStatusRunLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PauseStatusRunLevel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PauseStatusRunLevel) UnmarshalBinary(b []byte) error {
	var res PauseStatusRunLevel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
