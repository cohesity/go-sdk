// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterExpandParams The parameters to expand the cluster.
//
// swagger:model ClusterExpandParams
type ClusterExpandParams struct {

	// Type of the cluster. 'Cloud' indicates cloud edition cluster. 'Physical' indicates physical edition cluster. 'Virtual' indicates virtual edition cluster.
	// Required: true
	// Enum: ["Physical","Cloud","Virtual"]
	Type *string `json:"type"`

	// Parameters to expand cloud edition cluster.
	CloudClusterParams *CloudClusterExpandParams `json:"cloudClusterParams,omitempty"`

	// Parameters to expand physical edition cluster.
	PhysicalClusterParams *PhysicalClusterExpandParams `json:"physicalClusterParams,omitempty"`
}

// Validate validates this cluster expand params
func (m *ClusterExpandParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudClusterParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhysicalClusterParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterExpandParamsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Physical","Cloud","Virtual"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterExpandParamsTypeTypePropEnum = append(clusterExpandParamsTypeTypePropEnum, v)
	}
}

const (

	// ClusterExpandParamsTypePhysical captures enum value "Physical"
	ClusterExpandParamsTypePhysical string = "Physical"

	// ClusterExpandParamsTypeCloud captures enum value "Cloud"
	ClusterExpandParamsTypeCloud string = "Cloud"

	// ClusterExpandParamsTypeVirtual captures enum value "Virtual"
	ClusterExpandParamsTypeVirtual string = "Virtual"
)

// prop value enum
func (m *ClusterExpandParams) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterExpandParamsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterExpandParams) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ClusterExpandParams) validateCloudClusterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudClusterParams) { // not required
		return nil
	}

	if m.CloudClusterParams != nil {
		if err := m.CloudClusterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudClusterParams")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterExpandParams) validatePhysicalClusterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PhysicalClusterParams) { // not required
		return nil
	}

	if m.PhysicalClusterParams != nil {
		if err := m.PhysicalClusterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalClusterParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cluster expand params based on the context it is used
func (m *ClusterExpandParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCloudClusterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePhysicalClusterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterExpandParams) contextValidateCloudClusterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudClusterParams != nil {

		if swag.IsZero(m.CloudClusterParams) { // not required
			return nil
		}

		if err := m.CloudClusterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudClusterParams")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterExpandParams) contextValidatePhysicalClusterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PhysicalClusterParams != nil {

		if swag.IsZero(m.PhysicalClusterParams) { // not required
			return nil
		}

		if err := m.PhysicalClusterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("physicalClusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("physicalClusterParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterExpandParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterExpandParams) UnmarshalBinary(b []byte) error {
	var res ClusterExpandParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
