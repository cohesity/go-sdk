// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantBackfillTaskType Tenant Backfill Task Type
//
// Specifies the Tenant Backfill Task Type.
//
// swagger:model TenantBackfillTaskType
type TenantBackfillTaskType struct {

	// Specifies Tenant Backfill Task Type.
	// Enum: ["SourceRegistration","ObjectProtection"]
	Enum string `json:"enum,omitempty"`
}

// Validate validates this tenant backfill task type
func (m *TenantBackfillTaskType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tenantBackfillTaskTypeTypeEnumPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SourceRegistration","ObjectProtection"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantBackfillTaskTypeTypeEnumPropEnum = append(tenantBackfillTaskTypeTypeEnumPropEnum, v)
	}
}

const (

	// TenantBackfillTaskTypeEnumSourceRegistration captures enum value "SourceRegistration"
	TenantBackfillTaskTypeEnumSourceRegistration string = "SourceRegistration"

	// TenantBackfillTaskTypeEnumObjectProtection captures enum value "ObjectProtection"
	TenantBackfillTaskTypeEnumObjectProtection string = "ObjectProtection"
)

// prop value enum
func (m *TenantBackfillTaskType) validateEnumEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantBackfillTaskTypeTypeEnumPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantBackfillTaskType) validateEnum(formats strfmt.Registry) error {
	if swag.IsZero(m.Enum) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnumEnum("enum", "body", m.Enum); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tenant backfill task type based on context it is used
func (m *TenantBackfillTaskType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TenantBackfillTaskType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantBackfillTaskType) UnmarshalBinary(b []byte) error {
	var res TenantBackfillTaskType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
