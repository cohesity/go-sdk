// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateRigelConnectorRequest Create Rigel connector Request.
//
// Specify the params to create a Rigel connector.
//
// swagger:model CreateRigelConnectorRequest
type CreateRigelConnectorRequest struct {
	CommonCreateOrUpdateRigelConnectorRequest

	// Specifies the Id of the connector.
	// Required: true
	ConnectorID *int64 `json:"connectorId"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CreateRigelConnectorRequest) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonCreateOrUpdateRigelConnectorRequest
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonCreateOrUpdateRigelConnectorRequest = aO0

	// AO1
	var dataAO1 struct {
		ConnectorID *int64 `json:"connectorId"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.ConnectorID = dataAO1.ConnectorID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CreateRigelConnectorRequest) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonCreateOrUpdateRigelConnectorRequest)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		ConnectorID *int64 `json:"connectorId"`
	}

	dataAO1.ConnectorID = m.ConnectorID

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this create rigel connector request
func (m *CreateRigelConnectorRequest) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonCreateOrUpdateRigelConnectorRequest
	if err := m.CommonCreateOrUpdateRigelConnectorRequest.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateRigelConnectorRequest) validateConnectorID(formats strfmt.Registry) error {

	if err := validate.Required("connectorId", "body", m.ConnectorID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this create rigel connector request based on the context it is used
func (m *CreateRigelConnectorRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonCreateOrUpdateRigelConnectorRequest
	if err := m.CommonCreateOrUpdateRigelConnectorRequest.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CreateRigelConnectorRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateRigelConnectorRequest) UnmarshalBinary(b []byte) error {
	var res CreateRigelConnectorRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
