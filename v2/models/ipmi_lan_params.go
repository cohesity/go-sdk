// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// IpmiLanParams Cluster and node level IPMI LAN parameters.
//
// swagger:model IpmiLanParams
type IpmiLanParams struct {

	// Cluster IPMI LAN parameters.
	ClusterIpmiLanParams *IpmiLanConfig `json:"clusterIpmiLanParams,omitempty"`

	// Nodes IPMI LAN parameters.
	NodesIpmiLanParams []*NodeIpmiLanParams `json:"nodesIpmiLanParams"`
}

// Validate validates this ipmi lan params
func (m *IpmiLanParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterIpmiLanParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodesIpmiLanParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpmiLanParams) validateClusterIpmiLanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterIpmiLanParams) { // not required
		return nil
	}

	if m.ClusterIpmiLanParams != nil {
		if err := m.ClusterIpmiLanParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterIpmiLanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterIpmiLanParams")
			}
			return err
		}
	}

	return nil
}

func (m *IpmiLanParams) validateNodesIpmiLanParams(formats strfmt.Registry) error {
	if swag.IsZero(m.NodesIpmiLanParams) { // not required
		return nil
	}

	for i := 0; i < len(m.NodesIpmiLanParams); i++ {
		if swag.IsZero(m.NodesIpmiLanParams[i]) { // not required
			continue
		}

		if m.NodesIpmiLanParams[i] != nil {
			if err := m.NodesIpmiLanParams[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodesIpmiLanParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodesIpmiLanParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this ipmi lan params based on the context it is used
func (m *IpmiLanParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterIpmiLanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodesIpmiLanParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IpmiLanParams) contextValidateClusterIpmiLanParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterIpmiLanParams != nil {

		if swag.IsZero(m.ClusterIpmiLanParams) { // not required
			return nil
		}

		if err := m.ClusterIpmiLanParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterIpmiLanParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterIpmiLanParams")
			}
			return err
		}
	}

	return nil
}

func (m *IpmiLanParams) contextValidateNodesIpmiLanParams(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodesIpmiLanParams); i++ {

		if m.NodesIpmiLanParams[i] != nil {

			if swag.IsZero(m.NodesIpmiLanParams[i]) { // not required
				return nil
			}

			if err := m.NodesIpmiLanParams[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodesIpmiLanParams" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodesIpmiLanParams" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *IpmiLanParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IpmiLanParams) UnmarshalBinary(b []byte) error {
	var res IpmiLanParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
