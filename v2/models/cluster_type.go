// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterType Cluster Type
//
// # Cluster Type
//
// swagger:model ClusterType
type ClusterType struct {

	// Specifies the cluster types.
	// Enum: ["Physical","Virtual","Cloud","Rigel","Unknown","HeliosOnPremVM"]
	ClusterType string `json:"clusterType,omitempty"`
}

// Validate validates this cluster type
func (m *ClusterType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterTypeTypeClusterTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Physical","Virtual","Cloud","Rigel","Unknown","HeliosOnPremVM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterTypeTypeClusterTypePropEnum = append(clusterTypeTypeClusterTypePropEnum, v)
	}
}

const (

	// ClusterTypeClusterTypePhysical captures enum value "Physical"
	ClusterTypeClusterTypePhysical string = "Physical"

	// ClusterTypeClusterTypeVirtual captures enum value "Virtual"
	ClusterTypeClusterTypeVirtual string = "Virtual"

	// ClusterTypeClusterTypeCloud captures enum value "Cloud"
	ClusterTypeClusterTypeCloud string = "Cloud"

	// ClusterTypeClusterTypeRigel captures enum value "Rigel"
	ClusterTypeClusterTypeRigel string = "Rigel"

	// ClusterTypeClusterTypeUnknown captures enum value "Unknown"
	ClusterTypeClusterTypeUnknown string = "Unknown"

	// ClusterTypeClusterTypeHeliosOnPremVM captures enum value "HeliosOnPremVM"
	ClusterTypeClusterTypeHeliosOnPremVM string = "HeliosOnPremVM"
)

// prop value enum
func (m *ClusterType) validateClusterTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterTypeTypeClusterTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterType) validateClusterType(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterTypeEnum("clusterType", "body", m.ClusterType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster type based on context it is used
func (m *ClusterType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterType) UnmarshalBinary(b []byte) error {
	var res ClusterType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
