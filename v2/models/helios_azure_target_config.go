// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosAzureTargetConfig Azure Target Configuration
//
// # Specifies the configuration for adding Azure as replication target
//
// swagger:model HeliosAzureTargetConfig
type HeliosAzureTargetConfig struct {

	// Specifies the source id of the Azure protection source registered on Cohesity cluster.
	// Required: true
	SourceID *int64 `json:"sourceId"`

	// Specifies the name of the Azure Replication target.
	// Read Only: true
	Name *string `json:"name,omitempty"`

	// Specifies id of the Azure resource group used to filter regions in UI.
	ResourceGroup *int64 `json:"resourceGroup,omitempty"`

	// Specifies name of the Azure resource group used to filter regions in UI.
	// Read Only: true
	ResourceGroupName *string `json:"resourceGroupName,omitempty"`

	// Specifies id of the storage account of Azure replication target which will contain storage container.
	// Read Only: true
	StorageAccount *int64 `json:"storageAccount,omitempty"`

	// Specifies name of the storage account of Azure replication target which will contain storage container.
	// Read Only: true
	StorageAccountName *string `json:"storageAccountName,omitempty"`

	// Specifies id of the storage container of Azure Replication target.
	// Read Only: true
	StorageContainer *int64 `json:"storageContainer,omitempty"`

	// Specifies name of the storage container of Azure Replication target.
	// Read Only: true
	StorageContainerName *string `json:"storageContainerName,omitempty"`

	// Specifies id of the storage resource group of Azure Replication target.
	// Read Only: true
	StorageResourceGroup *int64 `json:"storageResourceGroup,omitempty"`

	// Specifies name of the storage resource group of Azure Replication target.
	// Read Only: true
	StorageResourceGroupName *string `json:"storageResourceGroupName,omitempty"`
}

// Validate validates this helios azure target config
func (m *HeliosAzureTargetConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSourceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosAzureTargetConfig) validateSourceID(formats strfmt.Registry) error {

	if err := validate.Required("sourceId", "body", m.SourceID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this helios azure target config based on the context it is used
func (m *HeliosAzureTargetConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateResourceGroupName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageAccount(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageAccountName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageContainer(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageContainerName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageResourceGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateStorageResourceGroupName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosAzureTargetConfig) contextValidateName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *HeliosAzureTargetConfig) contextValidateResourceGroupName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "resourceGroupName", "body", m.ResourceGroupName); err != nil {
		return err
	}

	return nil
}

func (m *HeliosAzureTargetConfig) contextValidateStorageAccount(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageAccount", "body", m.StorageAccount); err != nil {
		return err
	}

	return nil
}

func (m *HeliosAzureTargetConfig) contextValidateStorageAccountName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageAccountName", "body", m.StorageAccountName); err != nil {
		return err
	}

	return nil
}

func (m *HeliosAzureTargetConfig) contextValidateStorageContainer(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageContainer", "body", m.StorageContainer); err != nil {
		return err
	}

	return nil
}

func (m *HeliosAzureTargetConfig) contextValidateStorageContainerName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageContainerName", "body", m.StorageContainerName); err != nil {
		return err
	}

	return nil
}

func (m *HeliosAzureTargetConfig) contextValidateStorageResourceGroup(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageResourceGroup", "body", m.StorageResourceGroup); err != nil {
		return err
	}

	return nil
}

func (m *HeliosAzureTargetConfig) contextValidateStorageResourceGroupName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "storageResourceGroupName", "body", m.StorageResourceGroupName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosAzureTargetConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosAzureTargetConfig) UnmarshalBinary(b []byte) error {
	var res HeliosAzureTargetConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
