// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RecoverVmwareVMNewNetworkConfig Recover VMware VMs New Network configuration.
//
// Specifies the new network config parameters to be applied to VMware VMs.
//
// swagger:model RecoverVmwareVmNewNetworkConfig
type RecoverVmwareVMNewNetworkConfig struct {

	// Specifies whether the attached network should be left in disabled state. Default is false
	DisableNetwork *bool `json:"disableNetwork,omitempty"`

	// If this is true and we are attaching to a new network entity, then the VM's MAC address will be preserved on the new network. Default value is false.
	PreserveMacAddress *bool `json:"preserveMacAddress,omitempty"`

	// Specifies the network port group (i.e, either a standard switch port group or a distributed port group) that will attached to the recovered Object. This parameter is mandatory if detach network is specified as false.
	NetworkPortGroup *RecoveryObjectIdentifier `json:"networkPortGroup,omitempty"`
}

// Validate validates this recover vmware Vm new network config
func (m *RecoverVmwareVMNewNetworkConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkPortGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVmwareVMNewNetworkConfig) validateNetworkPortGroup(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkPortGroup) { // not required
		return nil
	}

	if m.NetworkPortGroup != nil {
		if err := m.NetworkPortGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkPortGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkPortGroup")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this recover vmware Vm new network config based on the context it is used
func (m *RecoverVmwareVMNewNetworkConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkPortGroup(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RecoverVmwareVMNewNetworkConfig) contextValidateNetworkPortGroup(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkPortGroup != nil {

		if swag.IsZero(m.NetworkPortGroup) { // not required
			return nil
		}

		if err := m.NetworkPortGroup.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkPortGroup")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkPortGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RecoverVmwareVMNewNetworkConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RecoverVmwareVMNewNetworkConfig) UnmarshalBinary(b []byte) error {
	var res RecoverVmwareVMNewNetworkConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
