// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloneActionCleanupParams Specifies the params for the cleanup action.
//
// swagger:model CloneActionCleanupParams
type CloneActionCleanupParams struct {

	// Specifies the type of cleanup to be done.
	// Required: true
	// Enum: ["PowerOffVM","CloudResourcesCleanup"]
	CleanupType *string `json:"cleanupType"`

	// power off Vm params
	PowerOffVMParams *CloneActionCleanupPowerOffVMParams `json:"powerOffVmParams,omitempty"`

	// cloud resources cleanup params
	CloudResourcesCleanupParams *CloneActionCleanupCloudResourcesCleanupParams `json:"cloudResourcesCleanupParams,omitempty"`
}

// Validate validates this clone action cleanup params
func (m *CloneActionCleanupParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCleanupType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePowerOffVMParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudResourcesCleanupParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cloneActionCleanupParamsTypeCleanupTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PowerOffVM","CloudResourcesCleanup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloneActionCleanupParamsTypeCleanupTypePropEnum = append(cloneActionCleanupParamsTypeCleanupTypePropEnum, v)
	}
}

const (

	// CloneActionCleanupParamsCleanupTypePowerOffVM captures enum value "PowerOffVM"
	CloneActionCleanupParamsCleanupTypePowerOffVM string = "PowerOffVM"

	// CloneActionCleanupParamsCleanupTypeCloudResourcesCleanup captures enum value "CloudResourcesCleanup"
	CloneActionCleanupParamsCleanupTypeCloudResourcesCleanup string = "CloudResourcesCleanup"
)

// prop value enum
func (m *CloneActionCleanupParams) validateCleanupTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cloneActionCleanupParamsTypeCleanupTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CloneActionCleanupParams) validateCleanupType(formats strfmt.Registry) error {

	if err := validate.Required("cleanupType", "body", m.CleanupType); err != nil {
		return err
	}

	// value enum
	if err := m.validateCleanupTypeEnum("cleanupType", "body", *m.CleanupType); err != nil {
		return err
	}

	return nil
}

func (m *CloneActionCleanupParams) validatePowerOffVMParams(formats strfmt.Registry) error {
	if swag.IsZero(m.PowerOffVMParams) { // not required
		return nil
	}

	if m.PowerOffVMParams != nil {
		if err := m.PowerOffVMParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerOffVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerOffVmParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneActionCleanupParams) validateCloudResourcesCleanupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudResourcesCleanupParams) { // not required
		return nil
	}

	if m.CloudResourcesCleanupParams != nil {
		if err := m.CloudResourcesCleanupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudResourcesCleanupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudResourcesCleanupParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this clone action cleanup params based on the context it is used
func (m *CloneActionCleanupParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePowerOffVMParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCloudResourcesCleanupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloneActionCleanupParams) contextValidatePowerOffVMParams(ctx context.Context, formats strfmt.Registry) error {

	if m.PowerOffVMParams != nil {

		if swag.IsZero(m.PowerOffVMParams) { // not required
			return nil
		}

		if err := m.PowerOffVMParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("powerOffVmParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("powerOffVmParams")
			}
			return err
		}
	}

	return nil
}

func (m *CloneActionCleanupParams) contextValidateCloudResourcesCleanupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CloudResourcesCleanupParams != nil {

		if swag.IsZero(m.CloudResourcesCleanupParams) { // not required
			return nil
		}

		if err := m.CloudResourcesCleanupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudResourcesCleanupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cloudResourcesCleanupParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloneActionCleanupParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloneActionCleanupParams) UnmarshalBinary(b []byte) error {
	var res CloneActionCleanupParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
