// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LegalHold LegalHoldActionType
//
// Legal hold action type for protection runs.
//
// swagger:model legalHold
type LegalHold struct {

	// The action type for legal hold on a protection run i.e. enable or release
	// Enum: ["Enable","Release"]
	ActionType string `json:"actionType,omitempty"`
}

// Validate validates this legal hold
func (m *LegalHold) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActionType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var legalHoldTypeActionTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enable","Release"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		legalHoldTypeActionTypePropEnum = append(legalHoldTypeActionTypePropEnum, v)
	}
}

const (

	// LegalHoldActionTypeEnable captures enum value "Enable"
	LegalHoldActionTypeEnable string = "Enable"

	// LegalHoldActionTypeRelease captures enum value "Release"
	LegalHoldActionTypeRelease string = "Release"
)

// prop value enum
func (m *LegalHold) validateActionTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, legalHoldTypeActionTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LegalHold) validateActionType(formats strfmt.Registry) error {
	if swag.IsZero(m.ActionType) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionTypeEnum("actionType", "body", m.ActionType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this legal hold based on context it is used
func (m *LegalHold) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LegalHold) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LegalHold) UnmarshalBinary(b []byte) error {
	var res LegalHold
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
