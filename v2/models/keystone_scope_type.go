// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KeystoneScopeType Keystone Scope Type
//
// Scope type of a Keystone configuration.
//
// swagger:model KeystoneScopeType
type KeystoneScopeType struct {

	// Specifies the scope type of a Keystone configuration.
	// Enum: ["Project","Domain"]
	KeystoneScopeType string `json:"keystoneScopeType,omitempty"`
}

// Validate validates this keystone scope type
func (m *KeystoneScopeType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeystoneScopeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var keystoneScopeTypeTypeKeystoneScopeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Project","Domain"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		keystoneScopeTypeTypeKeystoneScopeTypePropEnum = append(keystoneScopeTypeTypeKeystoneScopeTypePropEnum, v)
	}
}

const (

	// KeystoneScopeTypeKeystoneScopeTypeProject captures enum value "Project"
	KeystoneScopeTypeKeystoneScopeTypeProject string = "Project"

	// KeystoneScopeTypeKeystoneScopeTypeDomain captures enum value "Domain"
	KeystoneScopeTypeKeystoneScopeTypeDomain string = "Domain"
)

// prop value enum
func (m *KeystoneScopeType) validateKeystoneScopeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, keystoneScopeTypeTypeKeystoneScopeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KeystoneScopeType) validateKeystoneScopeType(formats strfmt.Registry) error {
	if swag.IsZero(m.KeystoneScopeType) { // not required
		return nil
	}

	// value enum
	if err := m.validateKeystoneScopeTypeEnum("keystoneScopeType", "body", m.KeystoneScopeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this keystone scope type based on context it is used
func (m *KeystoneScopeType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KeystoneScopeType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KeystoneScopeType) UnmarshalBinary(b []byte) error {
	var res KeystoneScopeType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
