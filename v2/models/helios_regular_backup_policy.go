// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HeliosRegularBackupPolicy Incremental, Full and Retention Policy.
//
// Specifies the Incremental and Full policy settings and also the common Retention policy settings."
//
// swagger:model HeliosRegularBackupPolicy
type HeliosRegularBackupPolicy struct {

	// Specifies the Incremental backup schedule and retention of a Protection Policy.
	Incremental *HeliosIncrementalBackupPolicy `json:"incremental,omitempty"`

	// Specifies the Full backup schedule of a Protection Policy.
	Full *HeliosFullBackupPolicy `json:"full,omitempty"`

	// Specifies the Retention period for incremental and full backup in days, months or years.
	Retention *HeliosRetention `json:"retention,omitempty"`

	// Specifies the primary backup target settings for regular backups. Specifying this field shows that instead of local backups on Cohesity cluster, primary backup location is different such as Cloud Archives like s3 or azure.
	PrimaryBackupTarget *HeliosPrimaryBackupTarget `json:"primaryBackupTarget,omitempty"`
}

// Validate validates this helios regular backup policy
func (m *HeliosRegularBackupPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncremental(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFull(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryBackupTarget(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosRegularBackupPolicy) validateIncremental(formats strfmt.Registry) error {
	if swag.IsZero(m.Incremental) { // not required
		return nil
	}

	if m.Incremental != nil {
		if err := m.Incremental.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosRegularBackupPolicy) validateFull(formats strfmt.Registry) error {
	if swag.IsZero(m.Full) { // not required
		return nil
	}

	if m.Full != nil {
		if err := m.Full.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosRegularBackupPolicy) validateRetention(formats strfmt.Registry) error {
	if swag.IsZero(m.Retention) { // not required
		return nil
	}

	if m.Retention != nil {
		if err := m.Retention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosRegularBackupPolicy) validatePrimaryBackupTarget(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimaryBackupTarget) { // not required
		return nil
	}

	if m.PrimaryBackupTarget != nil {
		if err := m.PrimaryBackupTarget.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryBackupTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryBackupTarget")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helios regular backup policy based on the context it is used
func (m *HeliosRegularBackupPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateIncremental(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateFull(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrimaryBackupTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosRegularBackupPolicy) contextValidateIncremental(ctx context.Context, formats strfmt.Registry) error {

	if m.Incremental != nil {

		if swag.IsZero(m.Incremental) { // not required
			return nil
		}

		if err := m.Incremental.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("incremental")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("incremental")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosRegularBackupPolicy) contextValidateFull(ctx context.Context, formats strfmt.Registry) error {

	if m.Full != nil {

		if swag.IsZero(m.Full) { // not required
			return nil
		}

		if err := m.Full.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("full")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("full")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosRegularBackupPolicy) contextValidateRetention(ctx context.Context, formats strfmt.Registry) error {

	if m.Retention != nil {

		if swag.IsZero(m.Retention) { // not required
			return nil
		}

		if err := m.Retention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosRegularBackupPolicy) contextValidatePrimaryBackupTarget(ctx context.Context, formats strfmt.Registry) error {

	if m.PrimaryBackupTarget != nil {

		if swag.IsZero(m.PrimaryBackupTarget) { // not required
			return nil
		}

		if err := m.PrimaryBackupTarget.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryBackupTarget")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryBackupTarget")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosRegularBackupPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosRegularBackupPolicy) UnmarshalBinary(b []byte) error {
	var res HeliosRegularBackupPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
