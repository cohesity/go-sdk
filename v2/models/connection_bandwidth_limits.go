// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ConnectionBandwidthLimits Connection Bandwidth Limits
//
// ConnectionBandwidthLimits represents the network bandwidth limits while uploading/downloading data to/from the SaaS Connection.
//
// swagger:model ConnectionBandwidthLimits
type ConnectionBandwidthLimits struct {

	// Specifies the max rate limit at which we download the data.
	Download []*BandwidthLimit `json:"download"`

	// Specifies the max rate limit at which we upload the data.
	Upload []*BandwidthLimit `json:"upload"`

	// The tenant Id corresponding to this request.
	// Required: true
	TenantID *string `json:"tenantId"`

	// Specifies a time zone for the specified time period. The time zone is defined in the following format: 'Area/Location', for example: 'America/New_York'.
	Timezone *string `json:"timezone,omitempty"`

	// Specifies the connector group id of connector groups.
	ConnectorGroupID *int64 `json:"connectorGroupId,omitempty"`
}

// Validate validates this connection bandwidth limits
func (m *ConnectionBandwidthLimits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDownload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpload(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionBandwidthLimits) validateDownload(formats strfmt.Registry) error {
	if swag.IsZero(m.Download) { // not required
		return nil
	}

	for i := 0; i < len(m.Download); i++ {
		if swag.IsZero(m.Download[i]) { // not required
			continue
		}

		if m.Download[i] != nil {
			if err := m.Download[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("download" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("download" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConnectionBandwidthLimits) validateUpload(formats strfmt.Registry) error {
	if swag.IsZero(m.Upload) { // not required
		return nil
	}

	for i := 0; i < len(m.Upload); i++ {
		if swag.IsZero(m.Upload[i]) { // not required
			continue
		}

		if m.Upload[i] != nil {
			if err := m.Upload[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upload" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("upload" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConnectionBandwidthLimits) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this connection bandwidth limits based on the context it is used
func (m *ConnectionBandwidthLimits) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDownload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateUpload(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ConnectionBandwidthLimits) contextValidateDownload(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Download); i++ {

		if m.Download[i] != nil {

			if swag.IsZero(m.Download[i]) { // not required
				return nil
			}

			if err := m.Download[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("download" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("download" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ConnectionBandwidthLimits) contextValidateUpload(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Upload); i++ {

		if m.Upload[i] != nil {

			if swag.IsZero(m.Upload[i]) { // not required
				return nil
			}

			if err := m.Upload[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("upload" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("upload" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ConnectionBandwidthLimits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ConnectionBandwidthLimits) UnmarshalBinary(b []byte) error {
	var res ConnectionBandwidthLimits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
