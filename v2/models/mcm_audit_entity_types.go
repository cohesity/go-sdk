// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// McmAuditEntityTypes Mcm Audit Entity Types
//
// # Mcm Audit Entity Types
//
// swagger:model McmAuditEntityTypes
type McmAuditEntityTypes struct {

	// Mcm Audit Entity Types
	// Enum: ["WhitelabelingSetting","AuditLogSetting","GflagRecipe","Gflag","RPaasRegion","RPaaSOnboarding","ClusterUpgrade"]
	EntityTypes string `json:"entityTypes,omitempty"`
}

// Validate validates this mcm audit entity types
func (m *McmAuditEntityTypes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityTypes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var mcmAuditEntityTypesTypeEntityTypesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WhitelabelingSetting","AuditLogSetting","GflagRecipe","Gflag","RPaasRegion","RPaaSOnboarding","ClusterUpgrade"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mcmAuditEntityTypesTypeEntityTypesPropEnum = append(mcmAuditEntityTypesTypeEntityTypesPropEnum, v)
	}
}

const (

	// McmAuditEntityTypesEntityTypesWhitelabelingSetting captures enum value "WhitelabelingSetting"
	McmAuditEntityTypesEntityTypesWhitelabelingSetting string = "WhitelabelingSetting"

	// McmAuditEntityTypesEntityTypesAuditLogSetting captures enum value "AuditLogSetting"
	McmAuditEntityTypesEntityTypesAuditLogSetting string = "AuditLogSetting"

	// McmAuditEntityTypesEntityTypesGflagRecipe captures enum value "GflagRecipe"
	McmAuditEntityTypesEntityTypesGflagRecipe string = "GflagRecipe"

	// McmAuditEntityTypesEntityTypesGflag captures enum value "Gflag"
	McmAuditEntityTypesEntityTypesGflag string = "Gflag"

	// McmAuditEntityTypesEntityTypesRPaasRegion captures enum value "RPaasRegion"
	McmAuditEntityTypesEntityTypesRPaasRegion string = "RPaasRegion"

	// McmAuditEntityTypesEntityTypesRPaaSOnboarding captures enum value "RPaaSOnboarding"
	McmAuditEntityTypesEntityTypesRPaaSOnboarding string = "RPaaSOnboarding"

	// McmAuditEntityTypesEntityTypesClusterUpgrade captures enum value "ClusterUpgrade"
	McmAuditEntityTypesEntityTypesClusterUpgrade string = "ClusterUpgrade"
)

// prop value enum
func (m *McmAuditEntityTypes) validateEntityTypesEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mcmAuditEntityTypesTypeEntityTypesPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *McmAuditEntityTypes) validateEntityTypes(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityTypes) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypesEnum("entityTypes", "body", m.EntityTypes); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mcm audit entity types based on context it is used
func (m *McmAuditEntityTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *McmAuditEntityTypes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *McmAuditEntityTypes) UnmarshalBinary(b []byte) error {
	var res McmAuditEntityTypes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
