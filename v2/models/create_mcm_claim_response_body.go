// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateMcmClaimResponseBody Response of claiming an entity to Helios.
//
// Specifies the response of claiming an entity to Helios.
//
// swagger:model CreateMcmClaimResponseBody
type CreateMcmClaimResponseBody struct {

	// Specfies the type of entity.
	// Enum: ["Rigel","Cluster","Cohesion","IBMStorageProtect"]
	EntityType *string `json:"entityType,omitempty"`

	// Specifies the response of Rigel claim to Helios.
	RigelParams *McmRigelClaimResponseParams `json:"rigelParams,omitempty"`

	// Specifies the response of Cohesity cluster claim to Helios.
	ClusterParams *McmClusterClaimResponseParams `json:"clusterParams,omitempty"`

	// Specifies the response of Cohesion Appliance claim to Helios.
	CohesionParams *McmCohesionClaimResponseParams `json:"cohesionParams,omitempty"`

	// Specifies the response of IBM storage protect claim to Helios.
	IbmStorageProtectParams *McmIBMStorageProtectClaimResponseParams `json:"ibmStorageProtectParams,omitempty"`
}

// Validate validates this create mcm claim response body
func (m *CreateMcmClaimResponseBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntityType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRigelParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCohesionParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIbmStorageProtectParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var createMcmClaimResponseBodyTypeEntityTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Rigel","Cluster","Cohesion","IBMStorageProtect"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createMcmClaimResponseBodyTypeEntityTypePropEnum = append(createMcmClaimResponseBodyTypeEntityTypePropEnum, v)
	}
}

const (

	// CreateMcmClaimResponseBodyEntityTypeRigel captures enum value "Rigel"
	CreateMcmClaimResponseBodyEntityTypeRigel string = "Rigel"

	// CreateMcmClaimResponseBodyEntityTypeCluster captures enum value "Cluster"
	CreateMcmClaimResponseBodyEntityTypeCluster string = "Cluster"

	// CreateMcmClaimResponseBodyEntityTypeCohesion captures enum value "Cohesion"
	CreateMcmClaimResponseBodyEntityTypeCohesion string = "Cohesion"

	// CreateMcmClaimResponseBodyEntityTypeIBMStorageProtect captures enum value "IBMStorageProtect"
	CreateMcmClaimResponseBodyEntityTypeIBMStorageProtect string = "IBMStorageProtect"
)

// prop value enum
func (m *CreateMcmClaimResponseBody) validateEntityTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, createMcmClaimResponseBodyTypeEntityTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CreateMcmClaimResponseBody) validateEntityType(formats strfmt.Registry) error {
	if swag.IsZero(m.EntityType) { // not required
		return nil
	}

	// value enum
	if err := m.validateEntityTypeEnum("entityType", "body", *m.EntityType); err != nil {
		return err
	}

	return nil
}

func (m *CreateMcmClaimResponseBody) validateRigelParams(formats strfmt.Registry) error {
	if swag.IsZero(m.RigelParams) { // not required
		return nil
	}

	if m.RigelParams != nil {
		if err := m.RigelParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rigelParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rigelParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMcmClaimResponseBody) validateClusterParams(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterParams) { // not required
		return nil
	}

	if m.ClusterParams != nil {
		if err := m.ClusterParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMcmClaimResponseBody) validateCohesionParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CohesionParams) { // not required
		return nil
	}

	if m.CohesionParams != nil {
		if err := m.CohesionParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cohesionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cohesionParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMcmClaimResponseBody) validateIbmStorageProtectParams(formats strfmt.Registry) error {
	if swag.IsZero(m.IbmStorageProtectParams) { // not required
		return nil
	}

	if m.IbmStorageProtectParams != nil {
		if err := m.IbmStorageProtectParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibmStorageProtectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibmStorageProtectParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create mcm claim response body based on the context it is used
func (m *CreateMcmClaimResponseBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRigelParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateClusterParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCohesionParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateIbmStorageProtectParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateMcmClaimResponseBody) contextValidateRigelParams(ctx context.Context, formats strfmt.Registry) error {

	if m.RigelParams != nil {

		if swag.IsZero(m.RigelParams) { // not required
			return nil
		}

		if err := m.RigelParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rigelParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rigelParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMcmClaimResponseBody) contextValidateClusterParams(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterParams != nil {

		if swag.IsZero(m.ClusterParams) { // not required
			return nil
		}

		if err := m.ClusterParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMcmClaimResponseBody) contextValidateCohesionParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CohesionParams != nil {

		if swag.IsZero(m.CohesionParams) { // not required
			return nil
		}

		if err := m.CohesionParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cohesionParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cohesionParams")
			}
			return err
		}
	}

	return nil
}

func (m *CreateMcmClaimResponseBody) contextValidateIbmStorageProtectParams(ctx context.Context, formats strfmt.Registry) error {

	if m.IbmStorageProtectParams != nil {

		if swag.IsZero(m.IbmStorageProtectParams) { // not required
			return nil
		}

		if err := m.IbmStorageProtectParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ibmStorageProtectParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ibmStorageProtectParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateMcmClaimResponseBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateMcmClaimResponseBody) UnmarshalBinary(b []byte) error {
	var res CreateMcmClaimResponseBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
