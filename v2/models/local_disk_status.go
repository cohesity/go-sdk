// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LocalDiskStatus Disk status.
//
// Status of local disk.
//
// swagger:model LocalDiskStatus
type LocalDiskStatus struct {

	// Specifies status of the local disk.
	// Enum: ["Online","Offline","Removing","OkToRemove","Blacklist","New","Empty","Unknown","Activating"]
	Status string `json:"status,omitempty"`
}

// Validate validates this local disk status
func (m *LocalDiskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var localDiskStatusTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Online","Offline","Removing","OkToRemove","Blacklist","New","Empty","Unknown","Activating"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		localDiskStatusTypeStatusPropEnum = append(localDiskStatusTypeStatusPropEnum, v)
	}
}

const (

	// LocalDiskStatusStatusOnline captures enum value "Online"
	LocalDiskStatusStatusOnline string = "Online"

	// LocalDiskStatusStatusOffline captures enum value "Offline"
	LocalDiskStatusStatusOffline string = "Offline"

	// LocalDiskStatusStatusRemoving captures enum value "Removing"
	LocalDiskStatusStatusRemoving string = "Removing"

	// LocalDiskStatusStatusOkToRemove captures enum value "OkToRemove"
	LocalDiskStatusStatusOkToRemove string = "OkToRemove"

	// LocalDiskStatusStatusBlacklist captures enum value "Blacklist"
	LocalDiskStatusStatusBlacklist string = "Blacklist"

	// LocalDiskStatusStatusNew captures enum value "New"
	LocalDiskStatusStatusNew string = "New"

	// LocalDiskStatusStatusEmpty captures enum value "Empty"
	LocalDiskStatusStatusEmpty string = "Empty"

	// LocalDiskStatusStatusUnknown captures enum value "Unknown"
	LocalDiskStatusStatusUnknown string = "Unknown"

	// LocalDiskStatusStatusActivating captures enum value "Activating"
	LocalDiskStatusStatusActivating string = "Activating"
)

// prop value enum
func (m *LocalDiskStatus) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, localDiskStatusTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *LocalDiskStatus) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this local disk status based on context it is used
func (m *LocalDiskStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *LocalDiskStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LocalDiskStatus) UnmarshalBinary(b []byte) error {
	var res LocalDiskStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
