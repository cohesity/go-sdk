// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HiveSourceRegistrationUpdateParams Update Registeration of Hive source .
//
// Specifies parameters to update registration of Hive source.
//
// swagger:model HiveSourceRegistrationUpdateParams
type HiveSourceRegistrationUpdateParams struct {

	// IP or hostname of any host from which the Hive configuration file hive-site.xml can be read.
	Host *string `json:"host,omitempty"`

	// The directory containing the hive-site.xml.
	ConfigurationDirectory *string `json:"configurationDirectory,omitempty"`

	// The kerberos principal to be used to connect to this Hive source.
	KerberosPrincipal *string `json:"kerberosPrincipal,omitempty"`

	// ssh password credentials
	SSHPasswordCredentials *HiveSourceRegistrationUpdateParamsSSHPasswordCredentials `json:"sshPasswordCredentials,omitempty"`

	// ssh private key credentials
	SSHPrivateKeyCredentials *HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
}

// Validate validates this hive source registration update params
func (m *HiveSourceRegistrationUpdateParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSSHPasswordCredentials(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSSHPrivateKeyCredentials(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HiveSourceRegistrationUpdateParams) validateSSHPasswordCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHPasswordCredentials) { // not required
		return nil
	}

	if m.SSHPasswordCredentials != nil {
		if err := m.SSHPasswordCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPasswordCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPasswordCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *HiveSourceRegistrationUpdateParams) validateSSHPrivateKeyCredentials(formats strfmt.Registry) error {
	if swag.IsZero(m.SSHPrivateKeyCredentials) { // not required
		return nil
	}

	if m.SSHPrivateKeyCredentials != nil {
		if err := m.SSHPrivateKeyCredentials.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPrivateKeyCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPrivateKeyCredentials")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this hive source registration update params based on the context it is used
func (m *HiveSourceRegistrationUpdateParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSSHPasswordCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSSHPrivateKeyCredentials(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HiveSourceRegistrationUpdateParams) contextValidateSSHPasswordCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHPasswordCredentials != nil {

		if swag.IsZero(m.SSHPasswordCredentials) { // not required
			return nil
		}

		if err := m.SSHPasswordCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPasswordCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPasswordCredentials")
			}
			return err
		}
	}

	return nil
}

func (m *HiveSourceRegistrationUpdateParams) contextValidateSSHPrivateKeyCredentials(ctx context.Context, formats strfmt.Registry) error {

	if m.SSHPrivateKeyCredentials != nil {

		if swag.IsZero(m.SSHPrivateKeyCredentials) { // not required
			return nil
		}

		if err := m.SSHPrivateKeyCredentials.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sshPrivateKeyCredentials")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sshPrivateKeyCredentials")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HiveSourceRegistrationUpdateParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HiveSourceRegistrationUpdateParams) UnmarshalBinary(b []byte) error {
	var res HiveSourceRegistrationUpdateParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HiveSourceRegistrationUpdateParamsSSHPasswordCredentials SSH username + password required for reading configuration file. Either 'sshPasswordCredentials' or 'sshPrivateKeyCredentials' are required.
//
// swagger:model HiveSourceRegistrationUpdateParamsSSHPasswordCredentials
type HiveSourceRegistrationUpdateParamsSSHPasswordCredentials struct {

	// SSH password.
	// Required: true
	Password *string `json:"password"`

	// SSH username.
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this hive source registration update params SSH password credentials
func (m *HiveSourceRegistrationUpdateParamsSSHPasswordCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HiveSourceRegistrationUpdateParamsSSHPasswordCredentials) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("sshPasswordCredentials"+"."+"password", "body", m.Password); err != nil {
		return err
	}

	return nil
}

func (m *HiveSourceRegistrationUpdateParamsSSHPasswordCredentials) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("sshPasswordCredentials"+"."+"username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hive source registration update params SSH password credentials based on context it is used
func (m *HiveSourceRegistrationUpdateParamsSSHPasswordCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HiveSourceRegistrationUpdateParamsSSHPasswordCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HiveSourceRegistrationUpdateParamsSSHPasswordCredentials) UnmarshalBinary(b []byte) error {
	var res HiveSourceRegistrationUpdateParamsSSHPasswordCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials SSH  userID + privateKey required for reading configuration file.
//
// swagger:model HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials
type HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials struct {

	// Passphrase for the private key.
	Passphrase string `json:"passphrase,omitempty"`

	// The private key.
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// userId for PrivateKey credentials.
	// Required: true
	UserID *string `json:"userId"`
}

// Validate validates this hive source registration update params SSH private key credentials
func (m *HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("sshPrivateKeyCredentials"+"."+"privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials) validateUserID(formats strfmt.Registry) error {

	if err := validate.Required("sshPrivateKeyCredentials"+"."+"userId", "body", m.UserID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this hive source registration update params SSH private key credentials based on context it is used
func (m *HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials) UnmarshalBinary(b []byte) error {
	var res HiveSourceRegistrationUpdateParamsSSHPrivateKeyCredentials
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
