// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GatewayParams Specifies the port & direction settings.
//
// swagger:model GatewayParams
type GatewayParams struct {

	// Specifies the port along with the protocol settings. For example 22/tcp, 68/udp.
	Port *string `json:"port,omitempty"`

	// Specifies the packet direction settings.
	// Enum: ["INPUT","OUTPUT","NAT_INPUT"]
	Direction *string `json:"direction,omitempty"`
}

// Validate validates this gateway params
func (m *GatewayParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gatewayParamsTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["INPUT","OUTPUT","NAT_INPUT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayParamsTypeDirectionPropEnum = append(gatewayParamsTypeDirectionPropEnum, v)
	}
}

const (

	// GatewayParamsDirectionINPUT captures enum value "INPUT"
	GatewayParamsDirectionINPUT string = "INPUT"

	// GatewayParamsDirectionOUTPUT captures enum value "OUTPUT"
	GatewayParamsDirectionOUTPUT string = "OUTPUT"

	// GatewayParamsDirectionNATINPUT captures enum value "NAT_INPUT"
	GatewayParamsDirectionNATINPUT string = "NAT_INPUT"
)

// prop value enum
func (m *GatewayParams) validateDirectionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, gatewayParamsTypeDirectionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GatewayParams) validateDirection(formats strfmt.Registry) error {
	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", *m.Direction); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this gateway params based on context it is used
func (m *GatewayParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GatewayParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayParams) UnmarshalBinary(b []byte) error {
	var res GatewayParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
