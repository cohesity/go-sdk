// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradecheckTestResult Upgrade Check execution result.
//
// Specifies an upgrade check result. Upgrade checks perform health checks on cluster before upgrade and report failures that are useful for cluster health diagnosis. When a health check executes it has one of many possible outcomes that are enumerated here. The healthcheck result can have following possible outcomes Passed - Health check has passed. Failed - Health check failed. Corrective action as described by knowledge base article for the failure must be taken to resolve failure. Skipped - Health check was skipped as it does not apply for the platform / model. Warning - Health check found issues in cluster with warning severity. diagnose the check as per knowledge base article for the check. Error - Health check execution failure. This could be due to failure for the check to be launched or unexepcted termination of the check. Timeout - Health check execution timed out.
//
// swagger:model UpgradecheckTestResult
type UpgradecheckTestResult struct {

	// Specifies the list of upgrade check test results.
	// Enum: ["Passed","Failed","Warning","Skipped","Error","Timeout","Unknown"]
	Value string `json:"value,omitempty"`
}

// Validate validates this upgradecheck test result
func (m *UpgradecheckTestResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradecheckTestResultTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Passed","Failed","Warning","Skipped","Error","Timeout","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradecheckTestResultTypeValuePropEnum = append(upgradecheckTestResultTypeValuePropEnum, v)
	}
}

const (

	// UpgradecheckTestResultValuePassed captures enum value "Passed"
	UpgradecheckTestResultValuePassed string = "Passed"

	// UpgradecheckTestResultValueFailed captures enum value "Failed"
	UpgradecheckTestResultValueFailed string = "Failed"

	// UpgradecheckTestResultValueWarning captures enum value "Warning"
	UpgradecheckTestResultValueWarning string = "Warning"

	// UpgradecheckTestResultValueSkipped captures enum value "Skipped"
	UpgradecheckTestResultValueSkipped string = "Skipped"

	// UpgradecheckTestResultValueError captures enum value "Error"
	UpgradecheckTestResultValueError string = "Error"

	// UpgradecheckTestResultValueTimeout captures enum value "Timeout"
	UpgradecheckTestResultValueTimeout string = "Timeout"

	// UpgradecheckTestResultValueUnknown captures enum value "Unknown"
	UpgradecheckTestResultValueUnknown string = "Unknown"
)

// prop value enum
func (m *UpgradecheckTestResult) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradecheckTestResultTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradecheckTestResult) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upgradecheck test result based on context it is used
func (m *UpgradecheckTestResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpgradecheckTestResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradecheckTestResult) UnmarshalBinary(b []byte) error {
	var res UpgradecheckTestResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
