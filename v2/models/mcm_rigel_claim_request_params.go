// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// McmRigelClaimRequestParams Request params to claim Rigel to Helios.
//
// Specifies the request params to claim Rigel to Helios.
//
// swagger:model McmRigelClaimRequestParams
type McmRigelClaimRequestParams struct {

	// Unique id for rigel instance.
	// Required: true
	RigelGUID *int64 `json:"rigelGuid"`

	// Claim token used for authentication.
	// Required: true
	ClaimToken *string `json:"claimToken"`

	// Specifies the Rigel type that is being claimed.
	// Enum: ["OnPrem","Cloud"]
	RigelType *string `json:"rigelType,omitempty"`

	// Specifies the cluster id.
	ClusterID *int64 `json:"clusterId,omitempty"`

	// Specifies the cluster incarnation id.
	ClusterIncarnationID *int64 `json:"clusterIncarnationId,omitempty"`

	// Specifies the Rigel name.
	RigelName *string `json:"rigelName,omitempty"`

	// Specifies the Rigel IP.
	RigelIP *string `json:"rigelIp,omitempty"`

	// Specifies the Rigel Software version.
	SoftwareVersion *string `json:"softwareVersion,omitempty"`
}

// Validate validates this mcm rigel claim request params
func (m *McmRigelClaimRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRigelGUID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClaimToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRigelType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *McmRigelClaimRequestParams) validateRigelGUID(formats strfmt.Registry) error {

	if err := validate.Required("rigelGuid", "body", m.RigelGUID); err != nil {
		return err
	}

	return nil
}

func (m *McmRigelClaimRequestParams) validateClaimToken(formats strfmt.Registry) error {

	if err := validate.Required("claimToken", "body", m.ClaimToken); err != nil {
		return err
	}

	return nil
}

var mcmRigelClaimRequestParamsTypeRigelTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OnPrem","Cloud"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		mcmRigelClaimRequestParamsTypeRigelTypePropEnum = append(mcmRigelClaimRequestParamsTypeRigelTypePropEnum, v)
	}
}

const (

	// McmRigelClaimRequestParamsRigelTypeOnPrem captures enum value "OnPrem"
	McmRigelClaimRequestParamsRigelTypeOnPrem string = "OnPrem"

	// McmRigelClaimRequestParamsRigelTypeCloud captures enum value "Cloud"
	McmRigelClaimRequestParamsRigelTypeCloud string = "Cloud"
)

// prop value enum
func (m *McmRigelClaimRequestParams) validateRigelTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, mcmRigelClaimRequestParamsTypeRigelTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *McmRigelClaimRequestParams) validateRigelType(formats strfmt.Registry) error {
	if swag.IsZero(m.RigelType) { // not required
		return nil
	}

	// value enum
	if err := m.validateRigelTypeEnum("rigelType", "body", *m.RigelType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this mcm rigel claim request params based on context it is used
func (m *McmRigelClaimRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *McmRigelClaimRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *McmRigelClaimRequestParams) UnmarshalBinary(b []byte) error {
	var res McmRigelClaimRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
