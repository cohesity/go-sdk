// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SfdcAuroraClusterInfo Sfdc Aurora Cluster Information.
//
// Specifies the Aurora cluster information required to protect an Sfdc Org. This parameter is filled internally by cohesity. It should not be filled by end user.
//
// swagger:model SfdcAuroraClusterInfo
type SfdcAuroraClusterInfo struct {

	// Contains the Id of the tenant.
	// Required: true
	TenantID *string `json:"tenantId"`

	// Specifies the region id of the Aurora cluster.
	// Required: true
	RegionID *string `json:"regionId"`

	// Arn of the Aurora cluster.
	// Required: true
	AuroraClusterArn *string `json:"auroraClusterArn"`

	// Writer endpoint of the Aurora cluster.
	// Required: true
	WriterEndpoint *string `json:"writerEndpoint"`

	// Reader endpoint of the Aurora cluster.
	ReaderEndpoint *string `json:"readerEndpoint,omitempty"`

	// Database user to access the dbs on the Aurora cluster.
	// Required: true
	DatabaseUser *string `json:"databaseUser"`

	// Contains the Arn of the IAM role of the which has access to the db user allocated to the tenant.
	// Required: true
	DatabaseAccessIAMRoleArn *string `json:"databaseAccessIAMRoleArn"`

	// Database port to access the dbs on the Aurora cluster.
	// Required: true
	DatabasePort *string `json:"databasePort"`

	// Database schema to access the dbs on the Aurora cluster.
	DatabaseSchema *string `json:"databaseSchema,omitempty"`

	// Contains the tenant's S3 bucket.
	// Required: true
	S3BucketName *string `json:"s3BucketName"`

	// S3Bucket prefix for the intermediate.
	// Required: true
	S3BucketPrefix *string `json:"s3BucketPrefix"`

	// Contains the Arn of the IAM role which has read and write access to the tenant's s3 bucket.
	// Required: true
	S3AccessIAMRoleArn *string `json:"s3AccessIAMRoleArn"`
}

// Validate validates this sfdc aurora cluster info
func (m *SfdcAuroraClusterInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAuroraClusterArn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWriterEndpoint(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseAccessIAMRoleArn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabasePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3BucketName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3BucketPrefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3AccessIAMRoleArn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SfdcAuroraClusterInfo) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *SfdcAuroraClusterInfo) validateRegionID(formats strfmt.Registry) error {

	if err := validate.Required("regionId", "body", m.RegionID); err != nil {
		return err
	}

	return nil
}

func (m *SfdcAuroraClusterInfo) validateAuroraClusterArn(formats strfmt.Registry) error {

	if err := validate.Required("auroraClusterArn", "body", m.AuroraClusterArn); err != nil {
		return err
	}

	return nil
}

func (m *SfdcAuroraClusterInfo) validateWriterEndpoint(formats strfmt.Registry) error {

	if err := validate.Required("writerEndpoint", "body", m.WriterEndpoint); err != nil {
		return err
	}

	return nil
}

func (m *SfdcAuroraClusterInfo) validateDatabaseUser(formats strfmt.Registry) error {

	if err := validate.Required("databaseUser", "body", m.DatabaseUser); err != nil {
		return err
	}

	return nil
}

func (m *SfdcAuroraClusterInfo) validateDatabaseAccessIAMRoleArn(formats strfmt.Registry) error {

	if err := validate.Required("databaseAccessIAMRoleArn", "body", m.DatabaseAccessIAMRoleArn); err != nil {
		return err
	}

	return nil
}

func (m *SfdcAuroraClusterInfo) validateDatabasePort(formats strfmt.Registry) error {

	if err := validate.Required("databasePort", "body", m.DatabasePort); err != nil {
		return err
	}

	return nil
}

func (m *SfdcAuroraClusterInfo) validateS3BucketName(formats strfmt.Registry) error {

	if err := validate.Required("s3BucketName", "body", m.S3BucketName); err != nil {
		return err
	}

	return nil
}

func (m *SfdcAuroraClusterInfo) validateS3BucketPrefix(formats strfmt.Registry) error {

	if err := validate.Required("s3BucketPrefix", "body", m.S3BucketPrefix); err != nil {
		return err
	}

	return nil
}

func (m *SfdcAuroraClusterInfo) validateS3AccessIAMRoleArn(formats strfmt.Registry) error {

	if err := validate.Required("s3AccessIAMRoleArn", "body", m.S3AccessIAMRoleArn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this sfdc aurora cluster info based on context it is used
func (m *SfdcAuroraClusterInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SfdcAuroraClusterInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SfdcAuroraClusterInfo) UnmarshalBinary(b []byte) error {
	var res SfdcAuroraClusterInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
