// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureESConfigForIndexing AzureESConfigForIndexing
//
// Elasticsearch config for indexing in Azure CE.
//
// swagger:model AzureESConfigForIndexing
type AzureESConfigForIndexing struct {

	// Fully qualified ES domain name.
	// Required: true
	EsDomain *string `json:"esDomain"`

	// URL of the KeyVault where ES creds will be stored.
	// Required: true
	VaultURL *string `json:"vaultURL"`

	// Client Id for the KeyVault.
	// Required: true
	ClientID *string `json:"clientId"`

	// Name of the secret corresponding to tenant's ES creds.
	// Required: true
	SecretName *string `json:"secretName"`
}

// Validate validates this azure e s config for indexing
func (m *AzureESConfigForIndexing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEsDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVaultURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecretName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureESConfigForIndexing) validateEsDomain(formats strfmt.Registry) error {

	if err := validate.Required("esDomain", "body", m.EsDomain); err != nil {
		return err
	}

	return nil
}

func (m *AzureESConfigForIndexing) validateVaultURL(formats strfmt.Registry) error {

	if err := validate.Required("vaultURL", "body", m.VaultURL); err != nil {
		return err
	}

	return nil
}

func (m *AzureESConfigForIndexing) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("clientId", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *AzureESConfigForIndexing) validateSecretName(formats strfmt.Registry) error {

	if err := validate.Required("secretName", "body", m.SecretName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure e s config for indexing based on context it is used
func (m *AzureESConfigForIndexing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureESConfigForIndexing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureESConfigForIndexing) UnmarshalBinary(b []byte) error {
	var res AzureESConfigForIndexing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
