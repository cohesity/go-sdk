// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OracleRmanBackup Oracle RMAN backup requested type.
//
// Specifies Oracle RMAN backup requested type.
//
// swagger:model OracleRmanBackup
type OracleRmanBackup struct {

	// Specifies Oracle RMAN backup requested type.
	// Enum: ["kImageCopy","kBackupSets","kSbt"]
	OracleRmanBackup string `json:"oracleRmanBackup,omitempty"`
}

// Validate validates this oracle rman backup
func (m *OracleRmanBackup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOracleRmanBackup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var oracleRmanBackupTypeOracleRmanBackupPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kImageCopy","kBackupSets","kSbt"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		oracleRmanBackupTypeOracleRmanBackupPropEnum = append(oracleRmanBackupTypeOracleRmanBackupPropEnum, v)
	}
}

const (

	// OracleRmanBackupOracleRmanBackupKImageCopy captures enum value "kImageCopy"
	OracleRmanBackupOracleRmanBackupKImageCopy string = "kImageCopy"

	// OracleRmanBackupOracleRmanBackupKBackupSets captures enum value "kBackupSets"
	OracleRmanBackupOracleRmanBackupKBackupSets string = "kBackupSets"

	// OracleRmanBackupOracleRmanBackupKSbt captures enum value "kSbt"
	OracleRmanBackupOracleRmanBackupKSbt string = "kSbt"
)

// prop value enum
func (m *OracleRmanBackup) validateOracleRmanBackupEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, oracleRmanBackupTypeOracleRmanBackupPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OracleRmanBackup) validateOracleRmanBackup(formats strfmt.Registry) error {
	if swag.IsZero(m.OracleRmanBackup) { // not required
		return nil
	}

	// value enum
	if err := m.validateOracleRmanBackupEnum("oracleRmanBackup", "body", m.OracleRmanBackup); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this oracle rman backup based on context it is used
func (m *OracleRmanBackup) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OracleRmanBackup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OracleRmanBackup) UnmarshalBinary(b []byte) error {
	var res OracleRmanBackup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
