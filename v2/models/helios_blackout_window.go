// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosBlackoutWindow Blackout Window
//
// List of Blackout Windows. If specified, this field defines blackout periods when backups are not triggered..
//
// swagger:model HeliosBlackoutWindow
type HeliosBlackoutWindow struct {

	// Specifies a day in the week when no new Protection Group Runs should be started such as 'Sunday'. Specifies a day in a week such as 'Sunday', 'Monday', etc.
	// Required: true
	// Enum: ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]
	Day *string `json:"day"`

	// Blackout Start Time.
	//
	// Specifies the start time of the blackout time range.
	// Required: true
	StartTime *TimeOfDay `json:"startTime"`

	// Blackout End Time.
	//
	// Specifies the end time of the blackout time range.
	// Required: true
	EndTime *TimeOfDay `json:"endTime"`

	// Specifies the unique identifier for the blackout getting added. This field should only be set if policy is getting updated.
	ConfigID *string `json:"configId,omitempty"`
}

// Validate validates this helios blackout window
func (m *HeliosBlackoutWindow) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var heliosBlackoutWindowTypeDayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heliosBlackoutWindowTypeDayPropEnum = append(heliosBlackoutWindowTypeDayPropEnum, v)
	}
}

const (

	// HeliosBlackoutWindowDaySunday captures enum value "Sunday"
	HeliosBlackoutWindowDaySunday string = "Sunday"

	// HeliosBlackoutWindowDayMonday captures enum value "Monday"
	HeliosBlackoutWindowDayMonday string = "Monday"

	// HeliosBlackoutWindowDayTuesday captures enum value "Tuesday"
	HeliosBlackoutWindowDayTuesday string = "Tuesday"

	// HeliosBlackoutWindowDayWednesday captures enum value "Wednesday"
	HeliosBlackoutWindowDayWednesday string = "Wednesday"

	// HeliosBlackoutWindowDayThursday captures enum value "Thursday"
	HeliosBlackoutWindowDayThursday string = "Thursday"

	// HeliosBlackoutWindowDayFriday captures enum value "Friday"
	HeliosBlackoutWindowDayFriday string = "Friday"

	// HeliosBlackoutWindowDaySaturday captures enum value "Saturday"
	HeliosBlackoutWindowDaySaturday string = "Saturday"
)

// prop value enum
func (m *HeliosBlackoutWindow) validateDayEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, heliosBlackoutWindowTypeDayPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HeliosBlackoutWindow) validateDay(formats strfmt.Registry) error {

	if err := validate.Required("day", "body", m.Day); err != nil {
		return err
	}

	// value enum
	if err := m.validateDayEnum("day", "body", *m.Day); err != nil {
		return err
	}

	return nil
}

func (m *HeliosBlackoutWindow) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("startTime", "body", m.StartTime); err != nil {
		return err
	}

	if m.StartTime != nil {
		if err := m.StartTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosBlackoutWindow) validateEndTime(formats strfmt.Registry) error {

	if err := validate.Required("endTime", "body", m.EndTime); err != nil {
		return err
	}

	if m.EndTime != nil {
		if err := m.EndTime.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endTime")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helios blackout window based on the context it is used
func (m *HeliosBlackoutWindow) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStartTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateEndTime(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosBlackoutWindow) contextValidateStartTime(ctx context.Context, formats strfmt.Registry) error {

	if m.StartTime != nil {

		if err := m.StartTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("startTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("startTime")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosBlackoutWindow) contextValidateEndTime(ctx context.Context, formats strfmt.Registry) error {

	if m.EndTime != nil {

		if err := m.EndTime.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("endTime")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("endTime")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosBlackoutWindow) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosBlackoutWindow) UnmarshalBinary(b []byte) error {
	var res HeliosBlackoutWindow
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
