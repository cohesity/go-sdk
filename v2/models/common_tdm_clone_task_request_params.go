// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonTdmCloneTaskRequestParams Specifies the common request params for a TDM clone task.
//
// swagger:model CommonTdmCloneTaskRequestParams
type CommonTdmCloneTaskRequestParams struct {
	CommonTdmCloneTaskParams

	// Specifies the snapshot ID, from which the clone is to be created.
	// Required: true
	SnapshotID *string `json:"snapshotId"`

	// Specifies the ID of the host, where the clone needs to be created.
	// Required: true
	TargetHostID *int64 `json:"targetHostId"`

	// Specifies the timestamp (in usecs from epoch) for creating the clone at a point in time in the past.
	PointInTimeUsecs *int64 `json:"pointInTimeUsecs,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CommonTdmCloneTaskRequestParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonTdmCloneTaskParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonTdmCloneTaskParams = aO0

	// AO1
	var dataAO1 struct {
		SnapshotID *string `json:"snapshotId"`

		TargetHostID *int64 `json:"targetHostId"`

		PointInTimeUsecs *int64 `json:"pointInTimeUsecs,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.SnapshotID = dataAO1.SnapshotID

	m.TargetHostID = dataAO1.TargetHostID

	m.PointInTimeUsecs = dataAO1.PointInTimeUsecs

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CommonTdmCloneTaskRequestParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonTdmCloneTaskParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		SnapshotID *string `json:"snapshotId"`

		TargetHostID *int64 `json:"targetHostId"`

		PointInTimeUsecs *int64 `json:"pointInTimeUsecs,omitempty"`
	}

	dataAO1.SnapshotID = m.SnapshotID

	dataAO1.TargetHostID = m.TargetHostID

	dataAO1.PointInTimeUsecs = m.PointInTimeUsecs

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this common tdm clone task request params
func (m *CommonTdmCloneTaskRequestParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTdmCloneTaskParams
	if err := m.CommonTdmCloneTaskParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshotID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetHostID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonTdmCloneTaskRequestParams) validateSnapshotID(formats strfmt.Registry) error {

	if err := validate.Required("snapshotId", "body", m.SnapshotID); err != nil {
		return err
	}

	return nil
}

func (m *CommonTdmCloneTaskRequestParams) validateTargetHostID(formats strfmt.Registry) error {

	if err := validate.Required("targetHostId", "body", m.TargetHostID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this common tdm clone task request params based on the context it is used
func (m *CommonTdmCloneTaskRequestParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTdmCloneTaskParams
	if err := m.CommonTdmCloneTaskParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CommonTdmCloneTaskRequestParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonTdmCloneTaskRequestParams) UnmarshalBinary(b []byte) error {
	var res CommonTdmCloneTaskRequestParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
