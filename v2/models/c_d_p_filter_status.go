// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CDPFilterStatus CDP Filter Status
//
// # CDP Filter Status
//
// swagger:model CDPFilterStatus
type CDPFilterStatus struct {

	// Specifies the CDP filter status.
	// Enum: ["NotInstalled","InstallFilterInProgress","FilterInstalledIOInactive","FilterInstalled","IOInactive","IOActivationInProgress","IOActive","IODeactivationInProgress","UninstallFilterInProgress","UpgradeFilterInProgress","UpgradeFilterFailed","WaitingForCDPPolicyAttach"]
	CdpFilterStatus string `json:"cdpFilterStatus,omitempty"`
}

// Validate validates this c d p filter status
func (m *CDPFilterStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCdpFilterStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cDPFilterStatusTypeCdpFilterStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NotInstalled","InstallFilterInProgress","FilterInstalledIOInactive","FilterInstalled","IOInactive","IOActivationInProgress","IOActive","IODeactivationInProgress","UninstallFilterInProgress","UpgradeFilterInProgress","UpgradeFilterFailed","WaitingForCDPPolicyAttach"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cDPFilterStatusTypeCdpFilterStatusPropEnum = append(cDPFilterStatusTypeCdpFilterStatusPropEnum, v)
	}
}

const (

	// CDPFilterStatusCdpFilterStatusNotInstalled captures enum value "NotInstalled"
	CDPFilterStatusCdpFilterStatusNotInstalled string = "NotInstalled"

	// CDPFilterStatusCdpFilterStatusInstallFilterInProgress captures enum value "InstallFilterInProgress"
	CDPFilterStatusCdpFilterStatusInstallFilterInProgress string = "InstallFilterInProgress"

	// CDPFilterStatusCdpFilterStatusFilterInstalledIOInactive captures enum value "FilterInstalledIOInactive"
	CDPFilterStatusCdpFilterStatusFilterInstalledIOInactive string = "FilterInstalledIOInactive"

	// CDPFilterStatusCdpFilterStatusFilterInstalled captures enum value "FilterInstalled"
	CDPFilterStatusCdpFilterStatusFilterInstalled string = "FilterInstalled"

	// CDPFilterStatusCdpFilterStatusIOInactive captures enum value "IOInactive"
	CDPFilterStatusCdpFilterStatusIOInactive string = "IOInactive"

	// CDPFilterStatusCdpFilterStatusIOActivationInProgress captures enum value "IOActivationInProgress"
	CDPFilterStatusCdpFilterStatusIOActivationInProgress string = "IOActivationInProgress"

	// CDPFilterStatusCdpFilterStatusIOActive captures enum value "IOActive"
	CDPFilterStatusCdpFilterStatusIOActive string = "IOActive"

	// CDPFilterStatusCdpFilterStatusIODeactivationInProgress captures enum value "IODeactivationInProgress"
	CDPFilterStatusCdpFilterStatusIODeactivationInProgress string = "IODeactivationInProgress"

	// CDPFilterStatusCdpFilterStatusUninstallFilterInProgress captures enum value "UninstallFilterInProgress"
	CDPFilterStatusCdpFilterStatusUninstallFilterInProgress string = "UninstallFilterInProgress"

	// CDPFilterStatusCdpFilterStatusUpgradeFilterInProgress captures enum value "UpgradeFilterInProgress"
	CDPFilterStatusCdpFilterStatusUpgradeFilterInProgress string = "UpgradeFilterInProgress"

	// CDPFilterStatusCdpFilterStatusUpgradeFilterFailed captures enum value "UpgradeFilterFailed"
	CDPFilterStatusCdpFilterStatusUpgradeFilterFailed string = "UpgradeFilterFailed"

	// CDPFilterStatusCdpFilterStatusWaitingForCDPPolicyAttach captures enum value "WaitingForCDPPolicyAttach"
	CDPFilterStatusCdpFilterStatusWaitingForCDPPolicyAttach string = "WaitingForCDPPolicyAttach"
)

// prop value enum
func (m *CDPFilterStatus) validateCdpFilterStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cDPFilterStatusTypeCdpFilterStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CDPFilterStatus) validateCdpFilterStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.CdpFilterStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateCdpFilterStatusEnum("cdpFilterStatus", "body", m.CdpFilterStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this c d p filter status based on context it is used
func (m *CDPFilterStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CDPFilterStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CDPFilterStatus) UnmarshalBinary(b []byte) error {
	var res CDPFilterStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
