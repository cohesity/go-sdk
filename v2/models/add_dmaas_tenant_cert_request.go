// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AddDmaasTenantCertRequest Add Tenant Cert Request.
//
// Specifies the parameters to add an Orion tenant certificate.
//
// swagger:model AddDmaasTenantCertRequest
type AddDmaasTenantCertRequest struct {

	// The id of the tenant.
	// Required: true
	TenantID *string `json:"tenantId"`

	// Specifies the tenant certificate.
	// Required: true
	Certificate *string `json:"certificate"`

	// Specifies the tenant private key.
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// Specifies the CA chain that is used to sign the connector certificate.
	// Required: true
	ConnectorCaChain *string `json:"connectorCaChain"`

	// Specifies the passphrase used to encode the private key.
	Passphrase *string `json:"passphrase,omitempty"`
}

// Validate validates this add dmaas tenant cert request
func (m *AddDmaasTenantCertRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorCaChain(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AddDmaasTenantCertRequest) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *AddDmaasTenantCertRequest) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	return nil
}

func (m *AddDmaasTenantCertRequest) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *AddDmaasTenantCertRequest) validateConnectorCaChain(formats strfmt.Registry) error {

	if err := validate.Required("connectorCaChain", "body", m.ConnectorCaChain); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this add dmaas tenant cert request based on context it is used
func (m *AddDmaasTenantCertRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AddDmaasTenantCertRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AddDmaasTenantCertRequest) UnmarshalBinary(b []byte) error {
	var res AddDmaasTenantCertRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
