// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// S3SpecificParams AWS S3 source register parameters
//
// # Specifies the s3 specific parameters for source registration
//
// swagger:model S3SpecificParams
type S3SpecificParams struct {

	// Specifies the ARN for S3 bucket where inventory reports are to be stored.
	// Required: true
	InventoryReportBucket *string `json:"inventoryReportBucket"`

	// The inventory bucket prefix where inventory reports are to be stored.
	// Required: true
	InventoryReportPrefix *string `json:"inventoryReportPrefix"`
}

// Validate validates this s3 specific params
func (m *S3SpecificParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInventoryReportBucket(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInventoryReportPrefix(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *S3SpecificParams) validateInventoryReportBucket(formats strfmt.Registry) error {

	if err := validate.Required("inventoryReportBucket", "body", m.InventoryReportBucket); err != nil {
		return err
	}

	return nil
}

func (m *S3SpecificParams) validateInventoryReportPrefix(formats strfmt.Registry) error {

	if err := validate.Required("inventoryReportPrefix", "body", m.InventoryReportPrefix); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this s3 specific params based on context it is used
func (m *S3SpecificParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *S3SpecificParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3SpecificParams) UnmarshalBinary(b []byte) error {
	var res S3SpecificParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
