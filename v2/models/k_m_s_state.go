// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KMSState KMS State
//
// Specifies the state of key management system.
//
// swagger:model KMSState
type KMSState struct {

	// Specifies the state of KMS.
	// Enum: ["Active","InActive","MarkedForRemoval"]
	Value string `json:"value,omitempty"`
}

// Validate validates this k m s state
func (m *KMSState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var kMSStateTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","InActive","MarkedForRemoval"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kMSStateTypeValuePropEnum = append(kMSStateTypeValuePropEnum, v)
	}
}

const (

	// KMSStateValueActive captures enum value "Active"
	KMSStateValueActive string = "Active"

	// KMSStateValueInActive captures enum value "InActive"
	KMSStateValueInActive string = "InActive"

	// KMSStateValueMarkedForRemoval captures enum value "MarkedForRemoval"
	KMSStateValueMarkedForRemoval string = "MarkedForRemoval"
)

// prop value enum
func (m *KMSState) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, kMSStateTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *KMSState) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this k m s state based on context it is used
func (m *KMSState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *KMSState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KMSState) UnmarshalBinary(b []byte) error {
	var res KMSState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
