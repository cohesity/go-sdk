// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiskTiers Disk Tiers
//
// # Disk Tiers
//
// swagger:model DiskTiers
type DiskTiers struct {

	// Disk Tiers
	// Enum: ["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]
	DiskTiers string `json:"diskTiers,omitempty"`
}

// Validate validates this disk tiers
func (m *DiskTiers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskTiers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var diskTiersTypeDiskTiersPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PCIeSSD","SATA-SSD","SATA-HDD","CLOUD"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskTiersTypeDiskTiersPropEnum = append(diskTiersTypeDiskTiersPropEnum, v)
	}
}

const (

	// DiskTiersDiskTiersPCIeSSD captures enum value "PCIeSSD"
	DiskTiersDiskTiersPCIeSSD string = "PCIeSSD"

	// DiskTiersDiskTiersSATADashSSD captures enum value "SATA-SSD"
	DiskTiersDiskTiersSATADashSSD string = "SATA-SSD"

	// DiskTiersDiskTiersSATADashHDD captures enum value "SATA-HDD"
	DiskTiersDiskTiersSATADashHDD string = "SATA-HDD"

	// DiskTiersDiskTiersCLOUD captures enum value "CLOUD"
	DiskTiersDiskTiersCLOUD string = "CLOUD"
)

// prop value enum
func (m *DiskTiers) validateDiskTiersEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, diskTiersTypeDiskTiersPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DiskTiers) validateDiskTiers(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskTiers) { // not required
		return nil
	}

	// value enum
	if err := m.validateDiskTiersEnum("diskTiers", "body", m.DiskTiers); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this disk tiers based on context it is used
func (m *DiskTiers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DiskTiers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskTiers) UnmarshalBinary(b []byte) error {
	var res DiskTiers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
