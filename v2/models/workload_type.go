// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkloadType Workload Types.
//
// Specifies the workload types on the cohesity cluster.
//
// swagger:model WorkloadType
type WorkloadType struct {

	// Specifies the workload types
	// Enum: ["Backup","Archive","Restore","Replication","Indexing","SmartFiles","Apps","Background","Other","Unknown"]
	Value string `json:"value,omitempty"`
}

// Validate validates this workload type
func (m *WorkloadType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var workloadTypeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Backup","Archive","Restore","Replication","Indexing","SmartFiles","Apps","Background","Other","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workloadTypeTypeValuePropEnum = append(workloadTypeTypeValuePropEnum, v)
	}
}

const (

	// WorkloadTypeValueBackup captures enum value "Backup"
	WorkloadTypeValueBackup string = "Backup"

	// WorkloadTypeValueArchive captures enum value "Archive"
	WorkloadTypeValueArchive string = "Archive"

	// WorkloadTypeValueRestore captures enum value "Restore"
	WorkloadTypeValueRestore string = "Restore"

	// WorkloadTypeValueReplication captures enum value "Replication"
	WorkloadTypeValueReplication string = "Replication"

	// WorkloadTypeValueIndexing captures enum value "Indexing"
	WorkloadTypeValueIndexing string = "Indexing"

	// WorkloadTypeValueSmartFiles captures enum value "SmartFiles"
	WorkloadTypeValueSmartFiles string = "SmartFiles"

	// WorkloadTypeValueApps captures enum value "Apps"
	WorkloadTypeValueApps string = "Apps"

	// WorkloadTypeValueBackground captures enum value "Background"
	WorkloadTypeValueBackground string = "Background"

	// WorkloadTypeValueOther captures enum value "Other"
	WorkloadTypeValueOther string = "Other"

	// WorkloadTypeValueUnknown captures enum value "Unknown"
	WorkloadTypeValueUnknown string = "Unknown"
)

// prop value enum
func (m *WorkloadType) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, workloadTypeTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *WorkloadType) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this workload type based on context it is used
func (m *WorkloadType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WorkloadType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkloadType) UnmarshalBinary(b []byte) error {
	var res WorkloadType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
