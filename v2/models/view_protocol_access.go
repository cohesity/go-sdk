// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ViewProtocolAccess View Protocol Access.
//
// Specifies protocol access for view.
//
// swagger:model ViewProtocolAccess
type ViewProtocolAccess struct {

	// Specifies protocol access for view.
	// Enum: ["NFS","NFS4","SMB","S3","Swift"]
	Type string `json:"type,omitempty"`
}

// Validate validates this view protocol access
func (m *ViewProtocolAccess) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var viewProtocolAccessTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NFS","NFS4","SMB","S3","Swift"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		viewProtocolAccessTypeTypePropEnum = append(viewProtocolAccessTypeTypePropEnum, v)
	}
}

const (

	// ViewProtocolAccessTypeNFS captures enum value "NFS"
	ViewProtocolAccessTypeNFS string = "NFS"

	// ViewProtocolAccessTypeNFS4 captures enum value "NFS4"
	ViewProtocolAccessTypeNFS4 string = "NFS4"

	// ViewProtocolAccessTypeSMB captures enum value "SMB"
	ViewProtocolAccessTypeSMB string = "SMB"

	// ViewProtocolAccessTypeS3 captures enum value "S3"
	ViewProtocolAccessTypeS3 string = "S3"

	// ViewProtocolAccessTypeSwift captures enum value "Swift"
	ViewProtocolAccessTypeSwift string = "Swift"
)

// prop value enum
func (m *ViewProtocolAccess) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, viewProtocolAccessTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ViewProtocolAccess) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this view protocol access based on context it is used
func (m *ViewProtocolAccess) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ViewProtocolAccess) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ViewProtocolAccess) UnmarshalBinary(b []byte) error {
	var res ViewProtocolAccess
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
