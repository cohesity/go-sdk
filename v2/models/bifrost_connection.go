// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BifrostConnection Bifrost connection.
//
// Specify a connection of Bifrost.
//
// swagger:model BifrostConnection
type BifrostConnection struct {

	// Specifies the id of the connection.
	// Required: true
	ID *int64 `json:"id"`

	// Specifies the name of the connection.
	// Required: true
	Name *string `json:"name"`

	// Specifies the version of the connection's certificate. The version is used to revoke/renew connection's certificates.
	CertificateVersion *int64 `json:"certificateVersion,omitempty"`

	// Specifies the network connection information.
	NetworkConnectionInfo *NetworkConnectionInfo `json:"networkConnectionInfo,omitempty"`

	// Specifies the ids of the connectors in this connection
	Connectors []string `json:"connectors"`
}

// Validate validates this bifrost connection
func (m *BifrostConnection) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkConnectionInfo(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BifrostConnection) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BifrostConnection) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *BifrostConnection) validateNetworkConnectionInfo(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkConnectionInfo) { // not required
		return nil
	}

	if m.NetworkConnectionInfo != nil {
		if err := m.NetworkConnectionInfo.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConnectionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConnectionInfo")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bifrost connection based on the context it is used
func (m *BifrostConnection) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateNetworkConnectionInfo(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BifrostConnection) contextValidateNetworkConnectionInfo(ctx context.Context, formats strfmt.Registry) error {

	if m.NetworkConnectionInfo != nil {

		if swag.IsZero(m.NetworkConnectionInfo) { // not required
			return nil
		}

		if err := m.NetworkConnectionInfo.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("networkConnectionInfo")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("networkConnectionInfo")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BifrostConnection) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BifrostConnection) UnmarshalBinary(b []byte) error {
	var res BifrostConnection
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
