// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Interface Network interface parameters.
//
// swagger:model Interface
type Interface struct {

	// Id of the interface.
	ID *int64 `json:"id,omitempty"`

	// The name of the interface.
	Name *string `json:"name,omitempty"`

	// The type of the interface.
	// Enum: ["Physical","Bond","Bridge","Group","Vlan","VlanPhysical","VlanBond","VlanGroup","VlanBridge","Invalid"]
	Type *string `json:"type,omitempty"`

	// Role of the interface.
	// Enum: ["Primary","Secondary"]
	Role *string `json:"role,omitempty"`

	// Group to which this interface belongs.
	Group *string `json:"group,omitempty"`

	// MAC address of the interface.
	MacAddress *string `json:"macAddress,omitempty"`

	// Specifies whether or not this interface is connected.
	IsConnected *bool `json:"isConnected,omitempty"`

	// Specifies whether or not the interface is up.
	IsUp *bool `json:"isUp,omitempty"`

	// Specifies whether or not this interface is the default route.
	DefaultRoute *bool `json:"defaultRoute,omitempty"`

	// Static IP of the interface.
	StaticIP *string `json:"staticIp,omitempty"`

	// Virtual IP of the interface.
	VirtualIP *string `json:"virtualIp,omitempty"`

	// Gateway of the interface.
	Gateway *string `json:"gateway,omitempty"`

	// Subnet of the interface.
	Subnet *string `json:"subnet,omitempty"`

	// Static IPv6 of the interface.
	IPV6Static *string `json:"ipv6Static,omitempty"`

	// The IPv6 gateway of the interface.
	IPV6Gateway *string `json:"ipv6Gateway,omitempty"`

	// The IPv6 subnet of the interface.
	IPV6Subnet *string `json:"ipv6Subnet,omitempty"`

	// MTU of the interface.
	Mtu *int32 `json:"mtu,omitempty"`

	// Speed of the interface.
	// Enum: ["1Gbit/s","10Gbit/s","25Gbit/s","40Gbit/s","100Gbit/s","Unknown"]
	Speed *string `json:"speed,omitempty"`

	// Types of services this interface is used for.
	Services []string `json:"services"`

	// Interface stats.
	Stats *InterfaceStats `json:"stats,omitempty"`

	// Bonding mode if this interface is a bond.
	// Enum: ["ActiveBackup","802_3ad"]
	BondingMode *string `json:"bondingMode,omitempty"`

	// Bond member details for bond interface.
	BondMembers []*BondMember `json:"bondMembers"`
}

// Validate validates this interface
func (m *Interface) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSpeed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBondingMode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBondMembers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var interfaceTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Physical","Bond","Bridge","Group","Vlan","VlanPhysical","VlanBond","VlanGroup","VlanBridge","Invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceTypeTypePropEnum = append(interfaceTypeTypePropEnum, v)
	}
}

const (

	// InterfaceTypePhysical captures enum value "Physical"
	InterfaceTypePhysical string = "Physical"

	// InterfaceTypeBond captures enum value "Bond"
	InterfaceTypeBond string = "Bond"

	// InterfaceTypeBridge captures enum value "Bridge"
	InterfaceTypeBridge string = "Bridge"

	// InterfaceTypeGroup captures enum value "Group"
	InterfaceTypeGroup string = "Group"

	// InterfaceTypeVlan captures enum value "Vlan"
	InterfaceTypeVlan string = "Vlan"

	// InterfaceTypeVlanPhysical captures enum value "VlanPhysical"
	InterfaceTypeVlanPhysical string = "VlanPhysical"

	// InterfaceTypeVlanBond captures enum value "VlanBond"
	InterfaceTypeVlanBond string = "VlanBond"

	// InterfaceTypeVlanGroup captures enum value "VlanGroup"
	InterfaceTypeVlanGroup string = "VlanGroup"

	// InterfaceTypeVlanBridge captures enum value "VlanBridge"
	InterfaceTypeVlanBridge string = "VlanBridge"

	// InterfaceTypeInvalid captures enum value "Invalid"
	InterfaceTypeInvalid string = "Invalid"
)

// prop value enum
func (m *Interface) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Interface) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

var interfaceTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Primary","Secondary"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceTypeRolePropEnum = append(interfaceTypeRolePropEnum, v)
	}
}

const (

	// InterfaceRolePrimary captures enum value "Primary"
	InterfaceRolePrimary string = "Primary"

	// InterfaceRoleSecondary captures enum value "Secondary"
	InterfaceRoleSecondary string = "Secondary"
)

// prop value enum
func (m *Interface) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Interface) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(m.Role) { // not required
		return nil
	}

	// value enum
	if err := m.validateRoleEnum("role", "body", *m.Role); err != nil {
		return err
	}

	return nil
}

var interfaceTypeSpeedPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["1Gbit/s","10Gbit/s","25Gbit/s","40Gbit/s","100Gbit/s","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceTypeSpeedPropEnum = append(interfaceTypeSpeedPropEnum, v)
	}
}

const (

	// InterfaceSpeedNr1Gbits captures enum value "1Gbit/s"
	InterfaceSpeedNr1Gbits string = "1Gbit/s"

	// InterfaceSpeedNr10Gbits captures enum value "10Gbit/s"
	InterfaceSpeedNr10Gbits string = "10Gbit/s"

	// InterfaceSpeedNr25Gbits captures enum value "25Gbit/s"
	InterfaceSpeedNr25Gbits string = "25Gbit/s"

	// InterfaceSpeedNr40Gbits captures enum value "40Gbit/s"
	InterfaceSpeedNr40Gbits string = "40Gbit/s"

	// InterfaceSpeedNr100Gbits captures enum value "100Gbit/s"
	InterfaceSpeedNr100Gbits string = "100Gbit/s"

	// InterfaceSpeedUnknown captures enum value "Unknown"
	InterfaceSpeedUnknown string = "Unknown"
)

// prop value enum
func (m *Interface) validateSpeedEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceTypeSpeedPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Interface) validateSpeed(formats strfmt.Registry) error {
	if swag.IsZero(m.Speed) { // not required
		return nil
	}

	// value enum
	if err := m.validateSpeedEnum("speed", "body", *m.Speed); err != nil {
		return err
	}

	return nil
}

var interfaceServicesItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ReplicationService","RemoteTunnelService","ClusterDataService","AvahiDiscoverService"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceServicesItemsEnum = append(interfaceServicesItemsEnum, v)
	}
}

func (m *Interface) validateServicesItemsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceServicesItemsEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Interface) validateServices(formats strfmt.Registry) error {
	if swag.IsZero(m.Services) { // not required
		return nil
	}

	for i := 0; i < len(m.Services); i++ {

		// value enum
		if err := m.validateServicesItemsEnum("services"+"."+strconv.Itoa(i), "body", m.Services[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *Interface) validateStats(formats strfmt.Registry) error {
	if swag.IsZero(m.Stats) { // not required
		return nil
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

var interfaceTypeBondingModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ActiveBackup","802_3ad"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interfaceTypeBondingModePropEnum = append(interfaceTypeBondingModePropEnum, v)
	}
}

const (

	// InterfaceBondingModeActiveBackup captures enum value "ActiveBackup"
	InterfaceBondingModeActiveBackup string = "ActiveBackup"

	// InterfaceBondingModeNr8023ad captures enum value "802_3ad"
	InterfaceBondingModeNr8023ad string = "802_3ad"
)

// prop value enum
func (m *Interface) validateBondingModeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interfaceTypeBondingModePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Interface) validateBondingMode(formats strfmt.Registry) error {
	if swag.IsZero(m.BondingMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateBondingModeEnum("bondingMode", "body", *m.BondingMode); err != nil {
		return err
	}

	return nil
}

func (m *Interface) validateBondMembers(formats strfmt.Registry) error {
	if swag.IsZero(m.BondMembers) { // not required
		return nil
	}

	for i := 0; i < len(m.BondMembers); i++ {
		if swag.IsZero(m.BondMembers[i]) { // not required
			continue
		}

		if m.BondMembers[i] != nil {
			if err := m.BondMembers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bondMembers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bondMembers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this interface based on the context it is used
func (m *Interface) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBondMembers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Interface) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {

		if swag.IsZero(m.Stats) { // not required
			return nil
		}

		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *Interface) contextValidateBondMembers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.BondMembers); i++ {

		if m.BondMembers[i] != nil {

			if swag.IsZero(m.BondMembers[i]) { // not required
				return nil
			}

			if err := m.BondMembers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("bondMembers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("bondMembers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *Interface) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Interface) UnmarshalBinary(b []byte) error {
	var res Interface
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
