// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// QosPolicy QOS Policy type.
//
// QOS Policy type.
//
// swagger:model QosPolicy
type QosPolicy struct {

	// Specifies QOS Policy type.
	// Enum: ["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]
	QosPolicy string `json:"qosPolicy,omitempty"`
}

// Validate validates this qos policy
func (m *QosPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateQosPolicy(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var qosPolicyTypeQosPolicyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kBackupHDD","kBackupSSD","kTestAndDevHigh","kBackupAll"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		qosPolicyTypeQosPolicyPropEnum = append(qosPolicyTypeQosPolicyPropEnum, v)
	}
}

const (

	// QosPolicyQosPolicyKBackupHDD captures enum value "kBackupHDD"
	QosPolicyQosPolicyKBackupHDD string = "kBackupHDD"

	// QosPolicyQosPolicyKBackupSSD captures enum value "kBackupSSD"
	QosPolicyQosPolicyKBackupSSD string = "kBackupSSD"

	// QosPolicyQosPolicyKTestAndDevHigh captures enum value "kTestAndDevHigh"
	QosPolicyQosPolicyKTestAndDevHigh string = "kTestAndDevHigh"

	// QosPolicyQosPolicyKBackupAll captures enum value "kBackupAll"
	QosPolicyQosPolicyKBackupAll string = "kBackupAll"
)

// prop value enum
func (m *QosPolicy) validateQosPolicyEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, qosPolicyTypeQosPolicyPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *QosPolicy) validateQosPolicy(formats strfmt.Registry) error {
	if swag.IsZero(m.QosPolicy) { // not required
		return nil
	}

	// value enum
	if err := m.validateQosPolicyEnum("qosPolicy", "body", m.QosPolicy); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this qos policy based on context it is used
func (m *QosPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *QosPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QosPolicy) UnmarshalBinary(b []byte) error {
	var res QosPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
