// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OtpVerificationState OTP verification State
//
// # OTP verification State
//
// swagger:model OtpVerificationState
type OtpVerificationState struct {

	// OTP verification State
	// Enum: ["kNotStarted","kSuccess","kFailure","kPending"]
	Value string `json:"value,omitempty"`
}

// Validate validates this otp verification state
func (m *OtpVerificationState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var otpVerificationStateTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNotStarted","kSuccess","kFailure","kPending"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		otpVerificationStateTypeValuePropEnum = append(otpVerificationStateTypeValuePropEnum, v)
	}
}

const (

	// OtpVerificationStateValueKNotStarted captures enum value "kNotStarted"
	OtpVerificationStateValueKNotStarted string = "kNotStarted"

	// OtpVerificationStateValueKSuccess captures enum value "kSuccess"
	OtpVerificationStateValueKSuccess string = "kSuccess"

	// OtpVerificationStateValueKFailure captures enum value "kFailure"
	OtpVerificationStateValueKFailure string = "kFailure"

	// OtpVerificationStateValueKPending captures enum value "kPending"
	OtpVerificationStateValueKPending string = "kPending"
)

// prop value enum
func (m *OtpVerificationState) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, otpVerificationStateTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *OtpVerificationState) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this otp verification state based on context it is used
func (m *OtpVerificationState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *OtpVerificationState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OtpVerificationState) UnmarshalBinary(b []byte) error {
	var res OtpVerificationState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
