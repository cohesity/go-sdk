// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantStatus Tenant Status
//
// Describes the status of a Tenant on a Cluster or Helios.
//
// swagger:model TenantStatus
type TenantStatus struct {

	// Specifies the Tenant status
	// Enum: ["Active","Inactive","MarkedForDeletion","Deleted"]
	Enum string `json:"enum,omitempty"`
}

// Validate validates this tenant status
func (m *TenantStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tenantStatusTypeEnumPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive","MarkedForDeletion","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantStatusTypeEnumPropEnum = append(tenantStatusTypeEnumPropEnum, v)
	}
}

const (

	// TenantStatusEnumActive captures enum value "Active"
	TenantStatusEnumActive string = "Active"

	// TenantStatusEnumInactive captures enum value "Inactive"
	TenantStatusEnumInactive string = "Inactive"

	// TenantStatusEnumMarkedForDeletion captures enum value "MarkedForDeletion"
	TenantStatusEnumMarkedForDeletion string = "MarkedForDeletion"

	// TenantStatusEnumDeleted captures enum value "Deleted"
	TenantStatusEnumDeleted string = "Deleted"
)

// prop value enum
func (m *TenantStatus) validateEnumEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantStatusTypeEnumPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantStatus) validateEnum(formats strfmt.Registry) error {
	if swag.IsZero(m.Enum) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnumEnum("enum", "body", m.Enum); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tenant status based on context it is used
func (m *TenantStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TenantStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantStatus) UnmarshalBinary(b []byte) error {
	var res TenantStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
