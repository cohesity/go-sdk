// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TargetNfsVersionNumber Target NFS Version Number
//
// Specifies the NFS version number of the target.
//
// swagger:model TargetNfsVersionNumber
type TargetNfsVersionNumber struct {

	// Specifies the NFS version number of the target.
	// Enum: ["NFSv3","NFSv4","NFSv4_0","NFSv4_1","NFSv4_2"]
	Enum string `json:"enum,omitempty"`
}

// Validate validates this target nfs version number
func (m *TargetNfsVersionNumber) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var targetNfsVersionNumberTypeEnumPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NFSv3","NFSv4","NFSv4_0","NFSv4_1","NFSv4_2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		targetNfsVersionNumberTypeEnumPropEnum = append(targetNfsVersionNumberTypeEnumPropEnum, v)
	}
}

const (

	// TargetNfsVersionNumberEnumNFSv3 captures enum value "NFSv3"
	TargetNfsVersionNumberEnumNFSv3 string = "NFSv3"

	// TargetNfsVersionNumberEnumNFSv4 captures enum value "NFSv4"
	TargetNfsVersionNumberEnumNFSv4 string = "NFSv4"

	// TargetNfsVersionNumberEnumNFSv40 captures enum value "NFSv4_0"
	TargetNfsVersionNumberEnumNFSv40 string = "NFSv4_0"

	// TargetNfsVersionNumberEnumNFSv41 captures enum value "NFSv4_1"
	TargetNfsVersionNumberEnumNFSv41 string = "NFSv4_1"

	// TargetNfsVersionNumberEnumNFSv42 captures enum value "NFSv4_2"
	TargetNfsVersionNumberEnumNFSv42 string = "NFSv4_2"
)

// prop value enum
func (m *TargetNfsVersionNumber) validateEnumEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, targetNfsVersionNumberTypeEnumPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TargetNfsVersionNumber) validateEnum(formats strfmt.Registry) error {
	if swag.IsZero(m.Enum) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnumEnum("enum", "body", m.Enum); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this target nfs version number based on context it is used
func (m *TargetNfsVersionNumber) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TargetNfsVersionNumber) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetNfsVersionNumber) UnmarshalBinary(b []byte) error {
	var res TargetNfsVersionNumber
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
