// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoteClusterPurpose Remote Cluster Purpose
//
// Specifies the purpose of Remote Cluster.
//
// swagger:model RemoteClusterPurpose
type RemoteClusterPurpose struct {

	// Specifies the purpose of Remote Cluster.
	// Enum: ["Replication","RemoteAccess"]
	Value string `json:"value,omitempty"`
}

// Validate validates this remote cluster purpose
func (m *RemoteClusterPurpose) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var remoteClusterPurposeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Replication","RemoteAccess"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		remoteClusterPurposeTypeValuePropEnum = append(remoteClusterPurposeTypeValuePropEnum, v)
	}
}

const (

	// RemoteClusterPurposeValueReplication captures enum value "Replication"
	RemoteClusterPurposeValueReplication string = "Replication"

	// RemoteClusterPurposeValueRemoteAccess captures enum value "RemoteAccess"
	RemoteClusterPurposeValueRemoteAccess string = "RemoteAccess"
)

// prop value enum
func (m *RemoteClusterPurpose) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, remoteClusterPurposeTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RemoteClusterPurpose) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this remote cluster purpose based on context it is used
func (m *RemoteClusterPurpose) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RemoteClusterPurpose) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteClusterPurpose) UnmarshalBinary(b []byte) error {
	var res RemoteClusterPurpose
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
