// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NodeEndpointState Node Endpoint State.
//
// Specify the results after checking connectivity on endpoints on each node.
//
// swagger:model NodeEndpointState
type NodeEndpointState struct {

	// Specifies the Id of the node.
	ID *int64 `json:"id,omitempty"`

	// Specifies the results of the endpoints.
	Endpoints []*EndpointConnectionState `json:"endpoints"`

	// Specifies the state on gateway.
	GatewayReachability *EndpointConnectionState `json:"gatewayReachability,omitempty"`

	// Specifies the state on gateway.
	DNSServerReachability *EndpointConnectionState `json:"dnsServerReachability,omitempty"`

	// Specifies the state on gateway.
	NtpServerReachability *EndpointConnectionState `json:"ntpServerReachability,omitempty"`

	// Specifies the time in Epoch in micro seconds when the check is performed.
	CheckTimestampUsecs *int64 `json:"checkTimestampUsecs,omitempty"`
}

// Validate validates this node endpoint state
func (m *NodeEndpointState) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEndpoints(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayReachability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDNSServerReachability(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNtpServerReachability(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeEndpointState) validateEndpoints(formats strfmt.Registry) error {
	if swag.IsZero(m.Endpoints) { // not required
		return nil
	}

	for i := 0; i < len(m.Endpoints); i++ {
		if swag.IsZero(m.Endpoints[i]) { // not required
			continue
		}

		if m.Endpoints[i] != nil {
			if err := m.Endpoints[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeEndpointState) validateGatewayReachability(formats strfmt.Registry) error {
	if swag.IsZero(m.GatewayReachability) { // not required
		return nil
	}

	if m.GatewayReachability != nil {
		if err := m.GatewayReachability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gatewayReachability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gatewayReachability")
			}
			return err
		}
	}

	return nil
}

func (m *NodeEndpointState) validateDNSServerReachability(formats strfmt.Registry) error {
	if swag.IsZero(m.DNSServerReachability) { // not required
		return nil
	}

	if m.DNSServerReachability != nil {
		if err := m.DNSServerReachability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsServerReachability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsServerReachability")
			}
			return err
		}
	}

	return nil
}

func (m *NodeEndpointState) validateNtpServerReachability(formats strfmt.Registry) error {
	if swag.IsZero(m.NtpServerReachability) { // not required
		return nil
	}

	if m.NtpServerReachability != nil {
		if err := m.NtpServerReachability.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntpServerReachability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ntpServerReachability")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this node endpoint state based on the context it is used
func (m *NodeEndpointState) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateEndpoints(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateGatewayReachability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDNSServerReachability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNtpServerReachability(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeEndpointState) contextValidateEndpoints(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Endpoints); i++ {

		if m.Endpoints[i] != nil {

			if swag.IsZero(m.Endpoints[i]) { // not required
				return nil
			}

			if err := m.Endpoints[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("endpoints" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("endpoints" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NodeEndpointState) contextValidateGatewayReachability(ctx context.Context, formats strfmt.Registry) error {

	if m.GatewayReachability != nil {

		if swag.IsZero(m.GatewayReachability) { // not required
			return nil
		}

		if err := m.GatewayReachability.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gatewayReachability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("gatewayReachability")
			}
			return err
		}
	}

	return nil
}

func (m *NodeEndpointState) contextValidateDNSServerReachability(ctx context.Context, formats strfmt.Registry) error {

	if m.DNSServerReachability != nil {

		if swag.IsZero(m.DNSServerReachability) { // not required
			return nil
		}

		if err := m.DNSServerReachability.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dnsServerReachability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dnsServerReachability")
			}
			return err
		}
	}

	return nil
}

func (m *NodeEndpointState) contextValidateNtpServerReachability(ctx context.Context, formats strfmt.Registry) error {

	if m.NtpServerReachability != nil {

		if swag.IsZero(m.NtpServerReachability) { // not required
			return nil
		}

		if err := m.NtpServerReachability.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ntpServerReachability")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("ntpServerReachability")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeEndpointState) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeEndpointState) UnmarshalBinary(b []byte) error {
	var res NodeEndpointState
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
