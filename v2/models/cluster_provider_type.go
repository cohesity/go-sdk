// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterProviderType ClusterProviderType
//
// # Cluster Provider Type
//
// swagger:model ClusterProviderType
type ClusterProviderType struct {

	// Specifies the cluster provider type.
	// Enum: ["kMCMCohesity","kIBMStorageProtect"]
	ClusterProviderType string `json:"clusterProviderType,omitempty"`
}

// Validate validates this cluster provider type
func (m *ClusterProviderType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterProviderType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var clusterProviderTypeTypeClusterProviderTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kMCMCohesity","kIBMStorageProtect"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterProviderTypeTypeClusterProviderTypePropEnum = append(clusterProviderTypeTypeClusterProviderTypePropEnum, v)
	}
}

const (

	// ClusterProviderTypeClusterProviderTypeKMCMCohesity captures enum value "kMCMCohesity"
	ClusterProviderTypeClusterProviderTypeKMCMCohesity string = "kMCMCohesity"

	// ClusterProviderTypeClusterProviderTypeKIBMStorageProtect captures enum value "kIBMStorageProtect"
	ClusterProviderTypeClusterProviderTypeKIBMStorageProtect string = "kIBMStorageProtect"
)

// prop value enum
func (m *ClusterProviderType) validateClusterProviderTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, clusterProviderTypeTypeClusterProviderTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ClusterProviderType) validateClusterProviderType(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterProviderType) { // not required
		return nil
	}

	// value enum
	if err := m.validateClusterProviderTypeEnum("clusterProviderType", "body", m.ClusterProviderType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cluster provider type based on context it is used
func (m *ClusterProviderType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ClusterProviderType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterProviderType) UnmarshalBinary(b []byte) error {
	var res ClusterProviderType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
