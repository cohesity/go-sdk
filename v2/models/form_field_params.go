// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// FormFieldParams Parameters to specify a form field
//
// swagger:model FormFieldParams
type FormFieldParams struct {

	// Id to identify the form field. This is also be used for assigning component html ids which can be leveraged for writing automation against the form field.
	ID *string `json:"id,omitempty"`

	// Label to be shown on the UI screen
	Label *string `json:"label,omitempty"`

	// Key against which the form field value will be returned
	Key *string `json:"key,omitempty"`

	// Type of the form field. Available types are 'string', 'password', 'number', 'boolean', 'radioGroup'
	Type *string `json:"type,omitempty"`

	// string config
	StringConfig *StringFormFieldParams `json:"stringConfig,omitempty"`

	// password config
	PasswordConfig *PasswordFormFieldParams `json:"passwordConfig,omitempty"`

	// number config
	NumberConfig *NumberFormFieldParams `json:"numberConfig,omitempty"`

	// boolean config
	BooleanConfig *BooleanFormFieldParams `json:"booleanConfig,omitempty"`

	// radio group config
	RadioGroupConfig *RadioGroupFormFieldParams `json:"radioGroupConfig,omitempty"`
}

// Validate validates this form field params
func (m *FormFieldParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStringConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNumberConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBooleanConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRadioGroupConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormFieldParams) validateStringConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.StringConfig) { // not required
		return nil
	}

	if m.StringConfig != nil {
		if err := m.StringConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stringConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stringConfig")
			}
			return err
		}
	}

	return nil
}

func (m *FormFieldParams) validatePasswordConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.PasswordConfig) { // not required
		return nil
	}

	if m.PasswordConfig != nil {
		if err := m.PasswordConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passwordConfig")
			}
			return err
		}
	}

	return nil
}

func (m *FormFieldParams) validateNumberConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.NumberConfig) { // not required
		return nil
	}

	if m.NumberConfig != nil {
		if err := m.NumberConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("numberConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("numberConfig")
			}
			return err
		}
	}

	return nil
}

func (m *FormFieldParams) validateBooleanConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.BooleanConfig) { // not required
		return nil
	}

	if m.BooleanConfig != nil {
		if err := m.BooleanConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("booleanConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("booleanConfig")
			}
			return err
		}
	}

	return nil
}

func (m *FormFieldParams) validateRadioGroupConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.RadioGroupConfig) { // not required
		return nil
	}

	if m.RadioGroupConfig != nil {
		if err := m.RadioGroupConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("radioGroupConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("radioGroupConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this form field params based on the context it is used
func (m *FormFieldParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStringConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePasswordConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNumberConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBooleanConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRadioGroupConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormFieldParams) contextValidateStringConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.StringConfig != nil {

		if swag.IsZero(m.StringConfig) { // not required
			return nil
		}

		if err := m.StringConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stringConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stringConfig")
			}
			return err
		}
	}

	return nil
}

func (m *FormFieldParams) contextValidatePasswordConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.PasswordConfig != nil {

		if swag.IsZero(m.PasswordConfig) { // not required
			return nil
		}

		if err := m.PasswordConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("passwordConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("passwordConfig")
			}
			return err
		}
	}

	return nil
}

func (m *FormFieldParams) contextValidateNumberConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.NumberConfig != nil {

		if swag.IsZero(m.NumberConfig) { // not required
			return nil
		}

		if err := m.NumberConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("numberConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("numberConfig")
			}
			return err
		}
	}

	return nil
}

func (m *FormFieldParams) contextValidateBooleanConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.BooleanConfig != nil {

		if swag.IsZero(m.BooleanConfig) { // not required
			return nil
		}

		if err := m.BooleanConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("booleanConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("booleanConfig")
			}
			return err
		}
	}

	return nil
}

func (m *FormFieldParams) contextValidateRadioGroupConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.RadioGroupConfig != nil {

		if swag.IsZero(m.RadioGroupConfig) { // not required
			return nil
		}

		if err := m.RadioGroupConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("radioGroupConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("radioGroupConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FormFieldParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FormFieldParams) UnmarshalBinary(b []byte) error {
	var res FormFieldParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
