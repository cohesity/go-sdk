// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileAccessTypes File Access types.
//
// Specifies the Read/Write/Delete Access types for SMB files.
//
// swagger:model FileAccessTypes
type FileAccessTypes struct {

	// Specifies the access types.
	// Enum: ["Read","Write","Delete"]
	Value string `json:"value,omitempty"`
}

// Validate validates this file access types
func (m *FileAccessTypes) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var fileAccessTypesTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Read","Write","Delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileAccessTypesTypeValuePropEnum = append(fileAccessTypesTypeValuePropEnum, v)
	}
}

const (

	// FileAccessTypesValueRead captures enum value "Read"
	FileAccessTypesValueRead string = "Read"

	// FileAccessTypesValueWrite captures enum value "Write"
	FileAccessTypesValueWrite string = "Write"

	// FileAccessTypesValueDelete captures enum value "Delete"
	FileAccessTypesValueDelete string = "Delete"
)

// prop value enum
func (m *FileAccessTypes) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, fileAccessTypesTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FileAccessTypes) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this file access types based on context it is used
func (m *FileAccessTypes) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FileAccessTypes) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileAccessTypes) UnmarshalBinary(b []byte) error {
	var res FileAccessTypes
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
