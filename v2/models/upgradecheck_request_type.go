// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradecheckRequestType Upgrade check request type (preupgrade/postupgrade)
//
// Specifies the type of upgrade checks to perform. Based on selected upgrade checks category, the relevant checks are performed on the cluster. Following types of upgrade healthchecks can be requested Preupgrade - Checks relevant before performing an upgrade. Postupgrade - Checks relevant after performing an upgrade.
//
// swagger:model UpgradecheckRequestType
type UpgradecheckRequestType struct {

	// value
	// Enum: ["PreUpgrade","PostUpgrade"]
	Value string `json:"value,omitempty"`
}

// Validate validates this upgradecheck request type
func (m *UpgradecheckRequestType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradecheckRequestTypeTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PreUpgrade","PostUpgrade"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradecheckRequestTypeTypeValuePropEnum = append(upgradecheckRequestTypeTypeValuePropEnum, v)
	}
}

const (

	// UpgradecheckRequestTypeValuePreUpgrade captures enum value "PreUpgrade"
	UpgradecheckRequestTypeValuePreUpgrade string = "PreUpgrade"

	// UpgradecheckRequestTypeValuePostUpgrade captures enum value "PostUpgrade"
	UpgradecheckRequestTypeValuePostUpgrade string = "PostUpgrade"
)

// prop value enum
func (m *UpgradecheckRequestType) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradecheckRequestTypeTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradecheckRequestType) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upgradecheck request type based on context it is used
func (m *UpgradecheckRequestType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpgradecheckRequestType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradecheckRequestType) UnmarshalBinary(b []byte) error {
	var res UpgradecheckRequestType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
