// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosArchivalConfig Archival Target Configuration
//
// Specifies settings for copying Snapshots External Targets (such as AWS or Tape). This also specifies the retention policy that should be applied to Snapshots after they have been copied to the specified target.
//
// swagger:model HeliosArchivalConfig
type HeliosArchivalConfig struct {
	HeliosCommonTargetConfiguration

	// Specifies the Archival target to copy the Snapshots to.
	// Required: true
	TargetID *int64 `json:"targetId"`

	// Specifies the Archival target name where Snapshots are copied.
	// Read Only: true
	TargetName *string `json:"targetName,omitempty"`

	// Specifies the Archival target type where Snapshots are copied.
	// Read Only: true
	// Enum: ["Tape","Cloud","Nas"]
	TargetType *string `json:"targetType,omitempty"`

	// Specifies the tier settings that will be applied to given target. If provided target is of type 'cloud', then only tiering can be applied. The respective cloud platform details need to be provided here.
	TierSettings *HeliosTierLevelSettings `json:"tierSettings,omitempty"`

	// Specifies additional retention policies that should be applied to the archived backup. Archived backup snapshot will be retained up to a time that is the maximum of all retention policies that are applicable to it.
	ExtendedRetention []*HeliosExtendedRetentionPolicy `json:"extendedRetention"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HeliosArchivalConfig) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 HeliosCommonTargetConfiguration
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.HeliosCommonTargetConfiguration = aO0

	// AO1
	var dataAO1 struct {
		TargetID *int64 `json:"targetId"`

		TargetName *string `json:"targetName,omitempty"`

		TargetType *string `json:"targetType,omitempty"`

		TierSettings *HeliosTierLevelSettings `json:"tierSettings,omitempty"`

		ExtendedRetention []*HeliosExtendedRetentionPolicy `json:"extendedRetention"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.TargetID = dataAO1.TargetID

	m.TargetName = dataAO1.TargetName

	m.TargetType = dataAO1.TargetType

	m.TierSettings = dataAO1.TierSettings

	m.ExtendedRetention = dataAO1.ExtendedRetention

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HeliosArchivalConfig) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.HeliosCommonTargetConfiguration)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		TargetID *int64 `json:"targetId"`

		TargetName *string `json:"targetName,omitempty"`

		TargetType *string `json:"targetType,omitempty"`

		TierSettings *HeliosTierLevelSettings `json:"tierSettings,omitempty"`

		ExtendedRetention []*HeliosExtendedRetentionPolicy `json:"extendedRetention"`
	}

	dataAO1.TargetID = m.TargetID

	dataAO1.TargetName = m.TargetName

	dataAO1.TargetType = m.TargetType

	dataAO1.TierSettings = m.TierSettings

	dataAO1.ExtendedRetention = m.ExtendedRetention

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this helios archival config
func (m *HeliosArchivalConfig) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HeliosCommonTargetConfiguration
	if err := m.HeliosCommonTargetConfiguration.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTierSettings(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExtendedRetention(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosArchivalConfig) validateTargetID(formats strfmt.Registry) error {

	if err := validate.Required("targetId", "body", m.TargetID); err != nil {
		return err
	}

	return nil
}

var heliosArchivalConfigTypeTargetTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tape","Cloud","Nas"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heliosArchivalConfigTypeTargetTypePropEnum = append(heliosArchivalConfigTypeTargetTypePropEnum, v)
	}
}

// property enum
func (m *HeliosArchivalConfig) validateTargetTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, heliosArchivalConfigTypeTargetTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HeliosArchivalConfig) validateTargetType(formats strfmt.Registry) error {

	if swag.IsZero(m.TargetType) { // not required
		return nil
	}

	// value enum
	if err := m.validateTargetTypeEnum("targetType", "body", *m.TargetType); err != nil {
		return err
	}

	return nil
}

func (m *HeliosArchivalConfig) validateTierSettings(formats strfmt.Registry) error {

	if swag.IsZero(m.TierSettings) { // not required
		return nil
	}

	if m.TierSettings != nil {
		if err := m.TierSettings.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tierSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tierSettings")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosArchivalConfig) validateExtendedRetention(formats strfmt.Registry) error {

	if swag.IsZero(m.ExtendedRetention) { // not required
		return nil
	}

	for i := 0; i < len(m.ExtendedRetention); i++ {
		if swag.IsZero(m.ExtendedRetention[i]) { // not required
			continue
		}

		if m.ExtendedRetention[i] != nil {
			if err := m.ExtendedRetention[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extendedRetention" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extendedRetention" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this helios archival config based on the context it is used
func (m *HeliosArchivalConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HeliosCommonTargetConfiguration
	if err := m.HeliosCommonTargetConfiguration.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTargetType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTierSettings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateExtendedRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosArchivalConfig) contextValidateTargetName(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetName", "body", m.TargetName); err != nil {
		return err
	}

	return nil
}

func (m *HeliosArchivalConfig) contextValidateTargetType(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "targetType", "body", m.TargetType); err != nil {
		return err
	}

	return nil
}

func (m *HeliosArchivalConfig) contextValidateTierSettings(ctx context.Context, formats strfmt.Registry) error {

	if m.TierSettings != nil {

		if swag.IsZero(m.TierSettings) { // not required
			return nil
		}

		if err := m.TierSettings.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tierSettings")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tierSettings")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosArchivalConfig) contextValidateExtendedRetention(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.ExtendedRetention); i++ {

		if m.ExtendedRetention[i] != nil {

			if swag.IsZero(m.ExtendedRetention[i]) { // not required
				return nil
			}

			if err := m.ExtendedRetention[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("extendedRetention" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("extendedRetention" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosArchivalConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosArchivalConfig) UnmarshalBinary(b []byte) error {
	var res HeliosArchivalConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
