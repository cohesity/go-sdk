// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IsilonProtocol Isilon Protocol type.
//
// Isilon Protocol type.
//
// swagger:model IsilonProtocol
type IsilonProtocol struct {

	// Specifies Isilon Protocol type.
	// Enum: ["kNfs","kSmb"]
	IsilonProtocol string `json:"isilonProtocol,omitempty"`
}

// Validate validates this isilon protocol
func (m *IsilonProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsilonProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var isilonProtocolTypeIsilonProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kSmb"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		isilonProtocolTypeIsilonProtocolPropEnum = append(isilonProtocolTypeIsilonProtocolPropEnum, v)
	}
}

const (

	// IsilonProtocolIsilonProtocolKNfs captures enum value "kNfs"
	IsilonProtocolIsilonProtocolKNfs string = "kNfs"

	// IsilonProtocolIsilonProtocolKSmb captures enum value "kSmb"
	IsilonProtocolIsilonProtocolKSmb string = "kSmb"
)

// prop value enum
func (m *IsilonProtocol) validateIsilonProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, isilonProtocolTypeIsilonProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IsilonProtocol) validateIsilonProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.IsilonProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateIsilonProtocolEnum("isilonProtocol", "body", m.IsilonProtocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this isilon protocol based on context it is used
func (m *IsilonProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IsilonProtocol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IsilonProtocol) UnmarshalBinary(b []byte) error {
	var res IsilonProtocol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
