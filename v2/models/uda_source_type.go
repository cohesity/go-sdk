// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UdaSourceType Enumeration of all the supported source types for the Universal Data Adapter.
//
// Enumeration of all the supported source types for the Universal Data Adapter.
//
// swagger:model UdaSourceType
type UdaSourceType struct {

	// Enumeration of all the supported source types for the Universal Data Adapter.
	// Enum: ["kCockroachDB","kDB2","kMySQL","kOther","kSapHana","kSapMaxDB","kSapOracle","kSapSybase","kSapSybaseIQ","kSapASE","kPostgreSQL","kCouchbaseV2"]
	Type string `json:"type,omitempty"`
}

// Validate validates this uda source type
func (m *UdaSourceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var udaSourceTypeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kCockroachDB","kDB2","kMySQL","kOther","kSapHana","kSapMaxDB","kSapOracle","kSapSybase","kSapSybaseIQ","kSapASE","kPostgreSQL","kCouchbaseV2"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		udaSourceTypeTypeTypePropEnum = append(udaSourceTypeTypeTypePropEnum, v)
	}
}

const (

	// UdaSourceTypeTypeKCockroachDB captures enum value "kCockroachDB"
	UdaSourceTypeTypeKCockroachDB string = "kCockroachDB"

	// UdaSourceTypeTypeKDB2 captures enum value "kDB2"
	UdaSourceTypeTypeKDB2 string = "kDB2"

	// UdaSourceTypeTypeKMySQL captures enum value "kMySQL"
	UdaSourceTypeTypeKMySQL string = "kMySQL"

	// UdaSourceTypeTypeKOther captures enum value "kOther"
	UdaSourceTypeTypeKOther string = "kOther"

	// UdaSourceTypeTypeKSapHana captures enum value "kSapHana"
	UdaSourceTypeTypeKSapHana string = "kSapHana"

	// UdaSourceTypeTypeKSapMaxDB captures enum value "kSapMaxDB"
	UdaSourceTypeTypeKSapMaxDB string = "kSapMaxDB"

	// UdaSourceTypeTypeKSapOracle captures enum value "kSapOracle"
	UdaSourceTypeTypeKSapOracle string = "kSapOracle"

	// UdaSourceTypeTypeKSapSybase captures enum value "kSapSybase"
	UdaSourceTypeTypeKSapSybase string = "kSapSybase"

	// UdaSourceTypeTypeKSapSybaseIQ captures enum value "kSapSybaseIQ"
	UdaSourceTypeTypeKSapSybaseIQ string = "kSapSybaseIQ"

	// UdaSourceTypeTypeKSapASE captures enum value "kSapASE"
	UdaSourceTypeTypeKSapASE string = "kSapASE"

	// UdaSourceTypeTypeKPostgreSQL captures enum value "kPostgreSQL"
	UdaSourceTypeTypeKPostgreSQL string = "kPostgreSQL"

	// UdaSourceTypeTypeKCouchbaseV2 captures enum value "kCouchbaseV2"
	UdaSourceTypeTypeKCouchbaseV2 string = "kCouchbaseV2"
)

// prop value enum
func (m *UdaSourceType) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, udaSourceTypeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UdaSourceType) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this uda source type based on context it is used
func (m *UdaSourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UdaSourceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaSourceType) UnmarshalBinary(b []byte) error {
	var res UdaSourceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
