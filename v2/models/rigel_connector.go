// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RigelConnector Rigel Connector.
//
// Specify a Rigel connector.
//
// swagger:model RigelConnector
type RigelConnector struct {

	// Specifies the id of the connector.
	ID *int64 `json:"id,omitempty"`

	// Specifies the name of the connector.
	Name *string `json:"name,omitempty"`

	// Specifies the Id of the connection which this connector belongs to.
	ConnectionID *int64 `json:"connectionId,omitempty"`

	// Specifies the version of the connector's certificate. The version is used to revoke/renew connector's certificates.
	CertificateVersion *int64 `json:"certificateVersion,omitempty"`

	// Specifies the list of accepted version of the connector's certificate. The version is used to revoke/renew connector's certificates.
	CertificateVersionList []int64 `json:"certificateVersionList"`

	// Specifies the connection status.
	ConnectionStatus *ConnectorConnectionInfo `json:"connectionStatus,omitempty"`
}

// Validate validates this rigel connector
func (m *RigelConnector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RigelConnector) validateConnectionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	if m.ConnectionStatus != nil {
		if err := m.ConnectionStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectionStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rigel connector based on the context it is used
func (m *RigelConnector) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectionStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RigelConnector) contextValidateConnectionStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectionStatus != nil {

		if swag.IsZero(m.ConnectionStatus) { // not required
			return nil
		}

		if err := m.ConnectionStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectionStatus")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RigelConnector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RigelConnector) UnmarshalBinary(b []byte) error {
	var res RigelConnector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
