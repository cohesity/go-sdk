// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsFleetInfo Update AWS Fleet Env Info Request.
//
// Specifies the params to add AWS specific fleet env info.
//
// swagger:model AwsFleetInfo
type AwsFleetInfo struct {

	// Specifies the IAM role used to create instances.
	// Required: true
	IamRole *string `json:"iamRole"`

	// Specifies the Region of the CE cluster.
	// Required: true
	Region *string `json:"region"`

	// Specifies the VPC of the CE cluster.
	// Required: true
	VpcID *string `json:"vpcId"`

	// Specifies the Subnet of the CE cluster.
	// Required: true
	SubnetID *string `json:"subnetId"`

	// Specifies the security group Id.
	// Required: true
	SecurityGroupID *string `json:"securityGroupId"`
}

// Validate validates this aws fleet info
func (m *AwsFleetInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIamRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroupID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AwsFleetInfo) validateIamRole(formats strfmt.Registry) error {

	if err := validate.Required("iamRole", "body", m.IamRole); err != nil {
		return err
	}

	return nil
}

func (m *AwsFleetInfo) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *AwsFleetInfo) validateVpcID(formats strfmt.Registry) error {

	if err := validate.Required("vpcId", "body", m.VpcID); err != nil {
		return err
	}

	return nil
}

func (m *AwsFleetInfo) validateSubnetID(formats strfmt.Registry) error {

	if err := validate.Required("subnetId", "body", m.SubnetID); err != nil {
		return err
	}

	return nil
}

func (m *AwsFleetInfo) validateSecurityGroupID(formats strfmt.Registry) error {

	if err := validate.Required("securityGroupId", "body", m.SecurityGroupID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aws fleet info based on context it is used
func (m *AwsFleetInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AwsFleetInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsFleetInfo) UnmarshalBinary(b []byte) error {
	var res AwsFleetInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
