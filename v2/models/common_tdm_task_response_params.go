// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonTdmTaskResponseParams Specifies the common parameters for a TDM task response.
//
// swagger:model CommonTdmTaskResponseParams
type CommonTdmTaskResponseParams struct {

	// Specifies the unique ID of the task.
	// Required: true
	ID *string `json:"id"`

	// Specifies the name of the task.
	Name *string `json:"name,omitempty"`

	// Specifies the time (in usecs from epoch) when the task was started.
	StartTimeUsecs *int64 `json:"startTimeUsecs,omitempty"`

	// Specifies the time (in usecs from epoch) when the task was completed.
	EndTimeUsecs *int64 `json:"endTimeUsecs,omitempty"`

	// Specifies the current status of the task.
	// Enum: ["scheduled","inProgress","succeeded","failed","canceled"]
	Status *string `json:"status,omitempty"`

	// Specifies the TDM Task action.
	// Required: true
	// Enum: ["clone","teardown","refresh","snapshot","rewind"]
	Action *string `json:"action"`

	// Specifies the user, who created this task.
	CreatedByUser struct {
		User
	} `json:"createdByUser,omitempty"`

	// Specifies the ID for tracking progress of this task.
	ProgressTaskID *string `json:"progressTaskId,omitempty"`
}

// Validate validates this common tdm task response params
func (m *CommonTdmTaskResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedByUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonTdmTaskResponseParams) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

var commonTdmTaskResponseParamsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["scheduled","inProgress","succeeded","failed","canceled"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonTdmTaskResponseParamsTypeStatusPropEnum = append(commonTdmTaskResponseParamsTypeStatusPropEnum, v)
	}
}

const (

	// CommonTdmTaskResponseParamsStatusScheduled captures enum value "scheduled"
	CommonTdmTaskResponseParamsStatusScheduled string = "scheduled"

	// CommonTdmTaskResponseParamsStatusInProgress captures enum value "inProgress"
	CommonTdmTaskResponseParamsStatusInProgress string = "inProgress"

	// CommonTdmTaskResponseParamsStatusSucceeded captures enum value "succeeded"
	CommonTdmTaskResponseParamsStatusSucceeded string = "succeeded"

	// CommonTdmTaskResponseParamsStatusFailed captures enum value "failed"
	CommonTdmTaskResponseParamsStatusFailed string = "failed"

	// CommonTdmTaskResponseParamsStatusCanceled captures enum value "canceled"
	CommonTdmTaskResponseParamsStatusCanceled string = "canceled"
)

// prop value enum
func (m *CommonTdmTaskResponseParams) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonTdmTaskResponseParamsTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonTdmTaskResponseParams) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

var commonTdmTaskResponseParamsTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["clone","teardown","refresh","snapshot","rewind"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		commonTdmTaskResponseParamsTypeActionPropEnum = append(commonTdmTaskResponseParamsTypeActionPropEnum, v)
	}
}

const (

	// CommonTdmTaskResponseParamsActionClone captures enum value "clone"
	CommonTdmTaskResponseParamsActionClone string = "clone"

	// CommonTdmTaskResponseParamsActionTeardown captures enum value "teardown"
	CommonTdmTaskResponseParamsActionTeardown string = "teardown"

	// CommonTdmTaskResponseParamsActionRefresh captures enum value "refresh"
	CommonTdmTaskResponseParamsActionRefresh string = "refresh"

	// CommonTdmTaskResponseParamsActionSnapshot captures enum value "snapshot"
	CommonTdmTaskResponseParamsActionSnapshot string = "snapshot"

	// CommonTdmTaskResponseParamsActionRewind captures enum value "rewind"
	CommonTdmTaskResponseParamsActionRewind string = "rewind"
)

// prop value enum
func (m *CommonTdmTaskResponseParams) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, commonTdmTaskResponseParamsTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CommonTdmTaskResponseParams) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *CommonTdmTaskResponseParams) validateCreatedByUser(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedByUser) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this common tdm task response params based on the context it is used
func (m *CommonTdmTaskResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCreatedByUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonTdmTaskResponseParams) contextValidateCreatedByUser(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *CommonTdmTaskResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonTdmTaskResponseParams) UnmarshalBinary(b []byte) error {
	var res CommonTdmTaskResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
