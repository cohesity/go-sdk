// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UpdateIpmiUsers Parameters to update cluster and node level IPMI users.
//
// swagger:model UpdateIpmiUsers
type UpdateIpmiUsers struct {

	// Cluster IPMI user parameters.
	ClusterIpmiUser *UpdateClusterIpmiUser `json:"clusterIpmiUser,omitempty"`

	// Nodes IPMI user parameters.
	NodesImpiUser []*UpdateNodeIpmiUser `json:"nodesImpiUser"`
}

// Validate validates this update ipmi users
func (m *UpdateIpmiUsers) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterIpmiUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodesImpiUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateIpmiUsers) validateClusterIpmiUser(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterIpmiUser) { // not required
		return nil
	}

	if m.ClusterIpmiUser != nil {
		if err := m.ClusterIpmiUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterIpmiUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterIpmiUser")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateIpmiUsers) validateNodesImpiUser(formats strfmt.Registry) error {
	if swag.IsZero(m.NodesImpiUser) { // not required
		return nil
	}

	for i := 0; i < len(m.NodesImpiUser); i++ {
		if swag.IsZero(m.NodesImpiUser[i]) { // not required
			continue
		}

		if m.NodesImpiUser[i] != nil {
			if err := m.NodesImpiUser[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodesImpiUser" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodesImpiUser" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this update ipmi users based on the context it is used
func (m *UpdateIpmiUsers) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateClusterIpmiUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateNodesImpiUser(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateIpmiUsers) contextValidateClusterIpmiUser(ctx context.Context, formats strfmt.Registry) error {

	if m.ClusterIpmiUser != nil {

		if swag.IsZero(m.ClusterIpmiUser) { // not required
			return nil
		}

		if err := m.ClusterIpmiUser.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterIpmiUser")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("clusterIpmiUser")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateIpmiUsers) contextValidateNodesImpiUser(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.NodesImpiUser); i++ {

		if m.NodesImpiUser[i] != nil {

			if swag.IsZero(m.NodesImpiUser[i]) { // not required
				return nil
			}

			if err := m.NodesImpiUser[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("nodesImpiUser" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("nodesImpiUser" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateIpmiUsers) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateIpmiUsers) UnmarshalBinary(b []byte) error {
	var res UpdateIpmiUsers
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
