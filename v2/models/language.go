// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Language Language
//
// # Language
//
// swagger:model Language
type Language struct {

	// Specifies the language.
	// Enum: ["en-us","ja-jp","zh-cn"]
	Language string `json:"language,omitempty"`
}

// Validate validates this language
func (m *Language) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLanguage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var languageTypeLanguagePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en-us","ja-jp","zh-cn"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		languageTypeLanguagePropEnum = append(languageTypeLanguagePropEnum, v)
	}
}

const (

	// LanguageLanguageEnDashUs captures enum value "en-us"
	LanguageLanguageEnDashUs string = "en-us"

	// LanguageLanguageJaDashJp captures enum value "ja-jp"
	LanguageLanguageJaDashJp string = "ja-jp"

	// LanguageLanguageZhDashCn captures enum value "zh-cn"
	LanguageLanguageZhDashCn string = "zh-cn"
)

// prop value enum
func (m *Language) validateLanguageEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, languageTypeLanguagePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Language) validateLanguage(formats strfmt.Registry) error {
	if swag.IsZero(m.Language) { // not required
		return nil
	}

	// value enum
	if err := m.validateLanguageEnum("language", "body", m.Language); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this language based on context it is used
func (m *Language) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Language) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Language) UnmarshalBinary(b []byte) error {
	var res Language
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
