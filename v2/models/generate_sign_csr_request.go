// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GenerateSignCsrRequest Specifies the parameters required to sign a certificate.
//
// swagger:model GenerateSignCsrRequest
type GenerateSignCsrRequest struct {

	// Certificate signing request (csr) in pem format
	// Required: true
	CsrPem *string `json:"csrPem"`

	// Duration(e.g. 100h) of the certificate
	Expiry string `json:"expiry,omitempty"`

	// Specifies the tenant id
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies an alternative subject name component to be included in the certificate. It is used to identify the ways the Cluster will be accessed. It is given as a comma separated list of FQDNs. The default value is the Cluster's VIP hostname.
	// Min Items: 1
	SanList []string `json:"sanList"`
}

// Validate validates this generate sign csr request
func (m *GenerateSignCsrRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCsrPem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSanList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenerateSignCsrRequest) validateCsrPem(formats strfmt.Registry) error {

	if err := validate.Required("csrPem", "body", m.CsrPem); err != nil {
		return err
	}

	return nil
}

func (m *GenerateSignCsrRequest) validateSanList(formats strfmt.Registry) error {
	if swag.IsZero(m.SanList) { // not required
		return nil
	}

	iSanListSize := int64(len(m.SanList))

	if err := validate.MinItems("sanList", "body", iSanListSize, 1); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this generate sign csr request based on context it is used
func (m *GenerateSignCsrRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GenerateSignCsrRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GenerateSignCsrRequest) UnmarshalBinary(b []byte) error {
	var res GenerateSignCsrRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
