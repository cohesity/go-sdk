// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosRetention Specifies the retention of a backup.
//
// swagger:model HeliosRetention
type HeliosRetention struct {

	// Specificies the Retention Unit of a backup measured in days, months or years. <br> If unit is 'Months', then number specified in duration is multiplied to 30. <br> Example: If duration is 4 and unit is 'Months' then number of retention days will be 30 * 4 = 120 days. <br> If unit is 'Years', then number specified in duration is multiplied to 365. <br> If duration is 2 and unit is 'Months' then number of retention days will be 365 * 2 = 730 days.
	// Enum: ["Days","Weeks","Months","Years"]
	Unit *string `json:"unit,omitempty"`

	// Specifies the duration for a backup retention. <br> Example. If duration is 7 and unit is Months, the retention of a backup is 7 * 30 = 210 days.
	// Minimum: 1
	Duration *int64 `json:"duration,omitempty"`

	// Specifies the list of tiers where backup will be moved. This will be populated only if poilcy type is DMaaS.
	Tiers []*HeliosTier `json:"tiers"`

	// Specifies WORM retention type for the snapshots. When a WORM retention type is specified, the snapshots of the Protection Groups using this policy will be kept for the last N days as specified in the duration of the datalock. During that time, the snapshots cannot be deleted.
	DataLockConfig *DataLockConfig `json:"dataLockConfig,omitempty"`
}

// Validate validates this helios retention
func (m *HeliosRetention) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDuration(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTiers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataLockConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var heliosRetentionTypeUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Days","Weeks","Months","Years"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heliosRetentionTypeUnitPropEnum = append(heliosRetentionTypeUnitPropEnum, v)
	}
}

const (

	// HeliosRetentionUnitDays captures enum value "Days"
	HeliosRetentionUnitDays string = "Days"

	// HeliosRetentionUnitWeeks captures enum value "Weeks"
	HeliosRetentionUnitWeeks string = "Weeks"

	// HeliosRetentionUnitMonths captures enum value "Months"
	HeliosRetentionUnitMonths string = "Months"

	// HeliosRetentionUnitYears captures enum value "Years"
	HeliosRetentionUnitYears string = "Years"
)

// prop value enum
func (m *HeliosRetention) validateUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, heliosRetentionTypeUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HeliosRetention) validateUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.Unit) { // not required
		return nil
	}

	// value enum
	if err := m.validateUnitEnum("unit", "body", *m.Unit); err != nil {
		return err
	}

	return nil
}

func (m *HeliosRetention) validateDuration(formats strfmt.Registry) error {
	if swag.IsZero(m.Duration) { // not required
		return nil
	}

	if err := validate.MinimumInt("duration", "body", *m.Duration, 1, false); err != nil {
		return err
	}

	return nil
}

func (m *HeliosRetention) validateTiers(formats strfmt.Registry) error {
	if swag.IsZero(m.Tiers) { // not required
		return nil
	}

	for i := 0; i < len(m.Tiers); i++ {
		if swag.IsZero(m.Tiers[i]) { // not required
			continue
		}

		if m.Tiers[i] != nil {
			if err := m.Tiers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HeliosRetention) validateDataLockConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.DataLockConfig) { // not required
		return nil
	}

	if m.DataLockConfig != nil {
		if err := m.DataLockConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataLockConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataLockConfig")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helios retention based on the context it is used
func (m *HeliosRetention) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTiers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDataLockConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosRetention) contextValidateTiers(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Tiers); i++ {

		if m.Tiers[i] != nil {

			if swag.IsZero(m.Tiers[i]) { // not required
				return nil
			}

			if err := m.Tiers[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("tiers" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("tiers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HeliosRetention) contextValidateDataLockConfig(ctx context.Context, formats strfmt.Registry) error {

	if m.DataLockConfig != nil {

		if swag.IsZero(m.DataLockConfig) { // not required
			return nil
		}

		if err := m.DataLockConfig.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dataLockConfig")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dataLockConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosRetention) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosRetention) UnmarshalBinary(b []byte) error {
	var res HeliosRetention
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
