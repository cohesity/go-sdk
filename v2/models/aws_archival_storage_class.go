// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AwsArchivalStorageClass Aws Archival Storage Class
//
// Specifies the storage class of Aws External Target of archival purpose type.
//
// swagger:model AwsArchivalStorageClass
type AwsArchivalStorageClass struct {

	// Specifies the storage class of Aws External Target of archival purpose type.
	// Enum: ["AmazonS3Standard","AmazonS3StandardIA","AmazonS3OneZoneIA","AmazonS3IntelligentTiering","AmazonS3Glacier","AmazonS3GlacierDeepArchive","AmazonGlacier","AmazonS3GlacierIR"]
	Enum string `json:"enum,omitempty"`
}

// Validate validates this aws archival storage class
func (m *AwsArchivalStorageClass) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var awsArchivalStorageClassTypeEnumPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AmazonS3Standard","AmazonS3StandardIA","AmazonS3OneZoneIA","AmazonS3IntelligentTiering","AmazonS3Glacier","AmazonS3GlacierDeepArchive","AmazonGlacier","AmazonS3GlacierIR"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		awsArchivalStorageClassTypeEnumPropEnum = append(awsArchivalStorageClassTypeEnumPropEnum, v)
	}
}

const (

	// AwsArchivalStorageClassEnumAmazonS3Standard captures enum value "AmazonS3Standard"
	AwsArchivalStorageClassEnumAmazonS3Standard string = "AmazonS3Standard"

	// AwsArchivalStorageClassEnumAmazonS3StandardIA captures enum value "AmazonS3StandardIA"
	AwsArchivalStorageClassEnumAmazonS3StandardIA string = "AmazonS3StandardIA"

	// AwsArchivalStorageClassEnumAmazonS3OneZoneIA captures enum value "AmazonS3OneZoneIA"
	AwsArchivalStorageClassEnumAmazonS3OneZoneIA string = "AmazonS3OneZoneIA"

	// AwsArchivalStorageClassEnumAmazonS3IntelligentTiering captures enum value "AmazonS3IntelligentTiering"
	AwsArchivalStorageClassEnumAmazonS3IntelligentTiering string = "AmazonS3IntelligentTiering"

	// AwsArchivalStorageClassEnumAmazonS3Glacier captures enum value "AmazonS3Glacier"
	AwsArchivalStorageClassEnumAmazonS3Glacier string = "AmazonS3Glacier"

	// AwsArchivalStorageClassEnumAmazonS3GlacierDeepArchive captures enum value "AmazonS3GlacierDeepArchive"
	AwsArchivalStorageClassEnumAmazonS3GlacierDeepArchive string = "AmazonS3GlacierDeepArchive"

	// AwsArchivalStorageClassEnumAmazonGlacier captures enum value "AmazonGlacier"
	AwsArchivalStorageClassEnumAmazonGlacier string = "AmazonGlacier"

	// AwsArchivalStorageClassEnumAmazonS3GlacierIR captures enum value "AmazonS3GlacierIR"
	AwsArchivalStorageClassEnumAmazonS3GlacierIR string = "AmazonS3GlacierIR"
)

// prop value enum
func (m *AwsArchivalStorageClass) validateEnumEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, awsArchivalStorageClassTypeEnumPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AwsArchivalStorageClass) validateEnum(formats strfmt.Registry) error {
	if swag.IsZero(m.Enum) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnumEnum("enum", "body", m.Enum); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this aws archival storage class based on context it is used
func (m *AwsArchivalStorageClass) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AwsArchivalStorageClass) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AwsArchivalStorageClass) UnmarshalBinary(b []byte) error {
	var res AwsArchivalStorageClass
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
