// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GlobalClusterIdentifier MCM OnPrem Cluster Identifier.
//
// Specifies the MCM cluster identifier.
//
// swagger:model GlobalClusterIdentifier
type GlobalClusterIdentifier struct {

	// List of Clusters Identifiers to filter from. The format is clusterId:clusterIncarnationId.
	// Pattern: ^([0-9]+:[0-9]+)$
	ClusterIdentifier *string `json:"clusterIdentifier,omitempty"`

	// Specifies the region id of the cluster. Only valid for DMaaS clusters.
	RegionID *string `json:"regionId,omitempty"`
}

// Validate validates this global cluster identifier
func (m *GlobalClusterIdentifier) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterIdentifier(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GlobalClusterIdentifier) validateClusterIdentifier(formats strfmt.Registry) error {
	if swag.IsZero(m.ClusterIdentifier) { // not required
		return nil
	}

	if err := validate.Pattern("clusterIdentifier", "body", *m.ClusterIdentifier, `^([0-9]+:[0-9]+)$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this global cluster identifier based on context it is used
func (m *GlobalClusterIdentifier) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GlobalClusterIdentifier) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GlobalClusterIdentifier) UnmarshalBinary(b []byte) error {
	var res GlobalClusterIdentifier
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
