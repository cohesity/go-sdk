// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpgradecheckNodeTestStatus Upgrade Check execution status on node.
//
// Specifies  status of running upgrade health checks on the node. The healthchecks execution on node can have following possible outcomes Running - The health check is still running on the node. Passed - The health check has passed on this node. Failed - The health check failed on node. Corrective action as described by knowledge base article for the failure must be taken to resolve failure. Skipped - The health check was skipped on this node. Error - Health check execution failure on node.
//
// swagger:model UpgradecheckNodeTestStatus
type UpgradecheckNodeTestStatus struct {

	// Specifies the node status of running upgrade checks.
	// Enum: ["Running","Passed","Failed","Skipped","Error"]
	Value string `json:"value,omitempty"`
}

// Validate validates this upgradecheck node test status
func (m *UpgradecheckNodeTestStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var upgradecheckNodeTestStatusTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Running","Passed","Failed","Skipped","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		upgradecheckNodeTestStatusTypeValuePropEnum = append(upgradecheckNodeTestStatusTypeValuePropEnum, v)
	}
}

const (

	// UpgradecheckNodeTestStatusValueRunning captures enum value "Running"
	UpgradecheckNodeTestStatusValueRunning string = "Running"

	// UpgradecheckNodeTestStatusValuePassed captures enum value "Passed"
	UpgradecheckNodeTestStatusValuePassed string = "Passed"

	// UpgradecheckNodeTestStatusValueFailed captures enum value "Failed"
	UpgradecheckNodeTestStatusValueFailed string = "Failed"

	// UpgradecheckNodeTestStatusValueSkipped captures enum value "Skipped"
	UpgradecheckNodeTestStatusValueSkipped string = "Skipped"

	// UpgradecheckNodeTestStatusValueError captures enum value "Error"
	UpgradecheckNodeTestStatusValueError string = "Error"
)

// prop value enum
func (m *UpgradecheckNodeTestStatus) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, upgradecheckNodeTestStatusTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpgradecheckNodeTestStatus) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this upgradecheck node test status based on context it is used
func (m *UpgradecheckNodeTestStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpgradecheckNodeTestStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpgradecheckNodeTestStatus) UnmarshalBinary(b []byte) error {
	var res UpgradecheckNodeTestStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
