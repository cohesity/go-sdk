// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InterventionType InterventionType
//
// Specifies the type for the intervention for ongoing tasks in maintenance mode config.
//
// swagger:model InterventionType
type InterventionType struct {

	// Specifies the types of interventions associated to maintenance mode.
	// Enum: ["NoIntervention","Cancel"]
	Type string `json:"type,omitempty"`
}

// Validate validates this intervention type
func (m *InterventionType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var interventionTypeTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NoIntervention","Cancel"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		interventionTypeTypeTypePropEnum = append(interventionTypeTypeTypePropEnum, v)
	}
}

const (

	// InterventionTypeTypeNoIntervention captures enum value "NoIntervention"
	InterventionTypeTypeNoIntervention string = "NoIntervention"

	// InterventionTypeTypeCancel captures enum value "Cancel"
	InterventionTypeTypeCancel string = "Cancel"
)

// prop value enum
func (m *InterventionType) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, interventionTypeTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *InterventionType) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this intervention type based on context it is used
func (m *InterventionType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *InterventionType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InterventionType) UnmarshalBinary(b []byte) error {
	var res InterventionType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
