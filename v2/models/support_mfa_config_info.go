// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SupportMfaConfigInfo Holds the MFA configuration to be returned or stored.
//
// swagger:model SupportMfaConfigInfo
type SupportMfaConfigInfo struct {

	// Specifies whether MFA is enabled for support user.
	Enabled *bool `json:"enabled,omitempty"`

	// Specifies the mechanism to receive the OTP code.
	// Enum: ["email","totp","salesforce"]
	Environment *string `json:"mfaType,omitempty"`

	// Specifies email address of the support user. Used when MFA mode is email.
	Email *string `json:"email,omitempty"`

	// MFA code that needs to be passed when disabling MFA or changing email address when email based MFA is configured.
	MfaCode *string `json:"mfaCode,omitempty"`
}

// Validate validates this support mfa config info
func (m *SupportMfaConfigInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var supportMfaConfigInfoTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["email","totp","salesforce"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		supportMfaConfigInfoTypeEnvironmentPropEnum = append(supportMfaConfigInfoTypeEnvironmentPropEnum, v)
	}
}

const (

	// SupportMfaConfigInfoEnvironmentEmail captures enum value "email"
	SupportMfaConfigInfoEnvironmentEmail string = "email"

	// SupportMfaConfigInfoEnvironmentTotp captures enum value "totp"
	SupportMfaConfigInfoEnvironmentTotp string = "totp"

	// SupportMfaConfigInfoEnvironmentSalesforce captures enum value "salesforce"
	SupportMfaConfigInfoEnvironmentSalesforce string = "salesforce"
)

// prop value enum
func (m *SupportMfaConfigInfo) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, supportMfaConfigInfoTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *SupportMfaConfigInfo) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("mfaType", "body", *m.Environment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this support mfa config info based on context it is used
func (m *SupportMfaConfigInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *SupportMfaConfigInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SupportMfaConfigInfo) UnmarshalBinary(b []byte) error {
	var res SupportMfaConfigInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
