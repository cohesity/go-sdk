// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AWSTieringLevels AWS Tiering Levels.
//
// # AWS Tiering Levels
//
// swagger:model AWSTieringLevels
type AWSTieringLevels struct {

	// AWS Tiering Levels
	// Enum: ["kAmazonS3Standard","kAmazonS3StandardIA","kAmazonS3OneZoneIA","kAmazonS3IntelligentTiering","kAmazonS3Glacier","kAmazonS3GlacierDeepArchive"]
	Type string `json:"type,omitempty"`
}

// Validate validates this a w s tiering levels
func (m *AWSTieringLevels) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var aWSTieringLevelsTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAmazonS3Standard","kAmazonS3StandardIA","kAmazonS3OneZoneIA","kAmazonS3IntelligentTiering","kAmazonS3Glacier","kAmazonS3GlacierDeepArchive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		aWSTieringLevelsTypeTypePropEnum = append(aWSTieringLevelsTypeTypePropEnum, v)
	}
}

const (

	// AWSTieringLevelsTypeKAmazonS3Standard captures enum value "kAmazonS3Standard"
	AWSTieringLevelsTypeKAmazonS3Standard string = "kAmazonS3Standard"

	// AWSTieringLevelsTypeKAmazonS3StandardIA captures enum value "kAmazonS3StandardIA"
	AWSTieringLevelsTypeKAmazonS3StandardIA string = "kAmazonS3StandardIA"

	// AWSTieringLevelsTypeKAmazonS3OneZoneIA captures enum value "kAmazonS3OneZoneIA"
	AWSTieringLevelsTypeKAmazonS3OneZoneIA string = "kAmazonS3OneZoneIA"

	// AWSTieringLevelsTypeKAmazonS3IntelligentTiering captures enum value "kAmazonS3IntelligentTiering"
	AWSTieringLevelsTypeKAmazonS3IntelligentTiering string = "kAmazonS3IntelligentTiering"

	// AWSTieringLevelsTypeKAmazonS3Glacier captures enum value "kAmazonS3Glacier"
	AWSTieringLevelsTypeKAmazonS3Glacier string = "kAmazonS3Glacier"

	// AWSTieringLevelsTypeKAmazonS3GlacierDeepArchive captures enum value "kAmazonS3GlacierDeepArchive"
	AWSTieringLevelsTypeKAmazonS3GlacierDeepArchive string = "kAmazonS3GlacierDeepArchive"
)

// prop value enum
func (m *AWSTieringLevels) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, aWSTieringLevelsTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AWSTieringLevels) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this a w s tiering levels based on context it is used
func (m *AWSTieringLevels) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AWSTieringLevels) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AWSTieringLevels) UnmarshalBinary(b []byte) error {
	var res AWSTieringLevels
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
