// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectEnvironment Object Environment
//
// Specifies object environment.
//
// swagger:model ObjectEnvironment
type ObjectEnvironment struct {

	// Specifies type of object environment.
	// Enum: ["kVMware","kHyperV","kAzure","kKVM","kAWS","kAzureSQL","kAcropolis","kGCP","kPhysical","kPhysicalFiles","kIsilon","kNetapp","kGenericNas","kFlashBlade","kElastifile","kGPFS","kPure","kIbmFlashSystem","kNimble","kSQL","kOracle","kExchange","kAD","kView","kO365","kHyperFlex","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kUDA","kSfdc"]
	Type string `json:"type,omitempty"`
}

// Validate validates this object environment
func (m *ObjectEnvironment) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var objectEnvironmentTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kAzure","kKVM","kAWS","kAzureSQL","kAcropolis","kGCP","kPhysical","kPhysicalFiles","kIsilon","kNetapp","kGenericNas","kFlashBlade","kElastifile","kGPFS","kPure","kIbmFlashSystem","kNimble","kSQL","kOracle","kExchange","kAD","kView","kO365","kHyperFlex","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kUDA","kSfdc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectEnvironmentTypeTypePropEnum = append(objectEnvironmentTypeTypePropEnum, v)
	}
}

const (

	// ObjectEnvironmentTypeKVMware captures enum value "kVMware"
	ObjectEnvironmentTypeKVMware string = "kVMware"

	// ObjectEnvironmentTypeKHyperV captures enum value "kHyperV"
	ObjectEnvironmentTypeKHyperV string = "kHyperV"

	// ObjectEnvironmentTypeKAzure captures enum value "kAzure"
	ObjectEnvironmentTypeKAzure string = "kAzure"

	// ObjectEnvironmentTypeKKVM captures enum value "kKVM"
	ObjectEnvironmentTypeKKVM string = "kKVM"

	// ObjectEnvironmentTypeKAWS captures enum value "kAWS"
	ObjectEnvironmentTypeKAWS string = "kAWS"

	// ObjectEnvironmentTypeKAzureSQL captures enum value "kAzureSQL"
	ObjectEnvironmentTypeKAzureSQL string = "kAzureSQL"

	// ObjectEnvironmentTypeKAcropolis captures enum value "kAcropolis"
	ObjectEnvironmentTypeKAcropolis string = "kAcropolis"

	// ObjectEnvironmentTypeKGCP captures enum value "kGCP"
	ObjectEnvironmentTypeKGCP string = "kGCP"

	// ObjectEnvironmentTypeKPhysical captures enum value "kPhysical"
	ObjectEnvironmentTypeKPhysical string = "kPhysical"

	// ObjectEnvironmentTypeKPhysicalFiles captures enum value "kPhysicalFiles"
	ObjectEnvironmentTypeKPhysicalFiles string = "kPhysicalFiles"

	// ObjectEnvironmentTypeKIsilon captures enum value "kIsilon"
	ObjectEnvironmentTypeKIsilon string = "kIsilon"

	// ObjectEnvironmentTypeKNetapp captures enum value "kNetapp"
	ObjectEnvironmentTypeKNetapp string = "kNetapp"

	// ObjectEnvironmentTypeKGenericNas captures enum value "kGenericNas"
	ObjectEnvironmentTypeKGenericNas string = "kGenericNas"

	// ObjectEnvironmentTypeKFlashBlade captures enum value "kFlashBlade"
	ObjectEnvironmentTypeKFlashBlade string = "kFlashBlade"

	// ObjectEnvironmentTypeKElastifile captures enum value "kElastifile"
	ObjectEnvironmentTypeKElastifile string = "kElastifile"

	// ObjectEnvironmentTypeKGPFS captures enum value "kGPFS"
	ObjectEnvironmentTypeKGPFS string = "kGPFS"

	// ObjectEnvironmentTypeKPure captures enum value "kPure"
	ObjectEnvironmentTypeKPure string = "kPure"

	// ObjectEnvironmentTypeKIbmFlashSystem captures enum value "kIbmFlashSystem"
	ObjectEnvironmentTypeKIbmFlashSystem string = "kIbmFlashSystem"

	// ObjectEnvironmentTypeKNimble captures enum value "kNimble"
	ObjectEnvironmentTypeKNimble string = "kNimble"

	// ObjectEnvironmentTypeKSQL captures enum value "kSQL"
	ObjectEnvironmentTypeKSQL string = "kSQL"

	// ObjectEnvironmentTypeKOracle captures enum value "kOracle"
	ObjectEnvironmentTypeKOracle string = "kOracle"

	// ObjectEnvironmentTypeKExchange captures enum value "kExchange"
	ObjectEnvironmentTypeKExchange string = "kExchange"

	// ObjectEnvironmentTypeKAD captures enum value "kAD"
	ObjectEnvironmentTypeKAD string = "kAD"

	// ObjectEnvironmentTypeKView captures enum value "kView"
	ObjectEnvironmentTypeKView string = "kView"

	// ObjectEnvironmentTypeKO365 captures enum value "kO365"
	ObjectEnvironmentTypeKO365 string = "kO365"

	// ObjectEnvironmentTypeKHyperFlex captures enum value "kHyperFlex"
	ObjectEnvironmentTypeKHyperFlex string = "kHyperFlex"

	// ObjectEnvironmentTypeKKubernetes captures enum value "kKubernetes"
	ObjectEnvironmentTypeKKubernetes string = "kKubernetes"

	// ObjectEnvironmentTypeKCassandra captures enum value "kCassandra"
	ObjectEnvironmentTypeKCassandra string = "kCassandra"

	// ObjectEnvironmentTypeKMongoDB captures enum value "kMongoDB"
	ObjectEnvironmentTypeKMongoDB string = "kMongoDB"

	// ObjectEnvironmentTypeKCouchbase captures enum value "kCouchbase"
	ObjectEnvironmentTypeKCouchbase string = "kCouchbase"

	// ObjectEnvironmentTypeKHdfs captures enum value "kHdfs"
	ObjectEnvironmentTypeKHdfs string = "kHdfs"

	// ObjectEnvironmentTypeKHive captures enum value "kHive"
	ObjectEnvironmentTypeKHive string = "kHive"

	// ObjectEnvironmentTypeKHBase captures enum value "kHBase"
	ObjectEnvironmentTypeKHBase string = "kHBase"

	// ObjectEnvironmentTypeKUDA captures enum value "kUDA"
	ObjectEnvironmentTypeKUDA string = "kUDA"

	// ObjectEnvironmentTypeKSfdc captures enum value "kSfdc"
	ObjectEnvironmentTypeKSfdc string = "kSfdc"
)

// prop value enum
func (m *ObjectEnvironment) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectEnvironmentTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectEnvironment) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this object environment based on context it is used
func (m *ObjectEnvironment) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ObjectEnvironment) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectEnvironment) UnmarshalBinary(b []byte) error {
	var res ObjectEnvironment
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
