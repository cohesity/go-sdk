// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// S3ConfigForIndexing S3ConfigForIndexing
//
// S3 config for indexing in DMaaS (AWS CE).
//
// swagger:model S3ConfigForIndexing
type S3ConfigForIndexing struct {

	// Name of S3 bucket to store indexed data.
	// Required: true
	S3BucketName *string `json:"s3BucketName"`

	// Prefix under S3 bucket where data will be stored.
	// Required: true
	S3Prefix *string `json:"s3Prefix"`

	// IAM role ARN which has access to S3 instance.
	// Required: true
	S3IamRoleArn *string `json:"s3IamRoleArn"`
}

// Validate validates this s3 config for indexing
func (m *S3ConfigForIndexing) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateS3BucketName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3Prefix(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3IamRoleArn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *S3ConfigForIndexing) validateS3BucketName(formats strfmt.Registry) error {

	if err := validate.Required("s3BucketName", "body", m.S3BucketName); err != nil {
		return err
	}

	return nil
}

func (m *S3ConfigForIndexing) validateS3Prefix(formats strfmt.Registry) error {

	if err := validate.Required("s3Prefix", "body", m.S3Prefix); err != nil {
		return err
	}

	return nil
}

func (m *S3ConfigForIndexing) validateS3IamRoleArn(formats strfmt.Registry) error {

	if err := validate.Required("s3IamRoleArn", "body", m.S3IamRoleArn); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this s3 config for indexing based on context it is used
func (m *S3ConfigForIndexing) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *S3ConfigForIndexing) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3ConfigForIndexing) UnmarshalBinary(b []byte) error {
	var res S3ConfigForIndexing
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
