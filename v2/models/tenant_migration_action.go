// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantMigrationAction Specifies a tenant action.
//
// swagger:model TenantMigrationAction
type TenantMigrationAction struct {

	// Specifies the tenant ID of the user on which the action is being performed.
	// Required: true
	TenantID *string `json:"tenantId"`

	// Specifies the tenant migration ID. This ID should be unique across clusters and should be generated by clients
	TenantMigrationUUID *string `json:"tenantMigrationUuid,omitempty"`

	// Specifies the action which will be performed on the tenant.
	// Required: true
	// Enum: ["StartMigration","StopMigration","GetTenantMigrationServices","PreCheck","Import","Export","Quiesce","Unquiesce","MigrateMetadata","MigrateData","PurgeTenantData","ExportMetadataForValidation","ImportMetadataForValidation","ValidateMetadata","DisableInlineChanges","EnableInlineChanges"]
	Action *string `json:"action"`

	// Retry count for the action. If an action needs to be retried, then clients will increment action_incarnation_id and can send the same request again
	ActionIncarnationID *int32 `json:"actionIncarnationId,omitempty"`

	// Specifies the cluster service on which this action needs to be performed.
	// Enum: ["kMagneto","kYoda","kIcebox"]
	Service *string `json:"service,omitempty"`

	// API version
	Version *int32 `json:"version,omitempty"`
}

// Validate validates this tenant migration action
func (m *TenantMigrationAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateService(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantMigrationAction) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

var tenantMigrationActionTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["StartMigration","StopMigration","GetTenantMigrationServices","PreCheck","Import","Export","Quiesce","Unquiesce","MigrateMetadata","MigrateData","PurgeTenantData","ExportMetadataForValidation","ImportMetadataForValidation","ValidateMetadata","DisableInlineChanges","EnableInlineChanges"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantMigrationActionTypeActionPropEnum = append(tenantMigrationActionTypeActionPropEnum, v)
	}
}

const (

	// TenantMigrationActionActionStartMigration captures enum value "StartMigration"
	TenantMigrationActionActionStartMigration string = "StartMigration"

	// TenantMigrationActionActionStopMigration captures enum value "StopMigration"
	TenantMigrationActionActionStopMigration string = "StopMigration"

	// TenantMigrationActionActionGetTenantMigrationServices captures enum value "GetTenantMigrationServices"
	TenantMigrationActionActionGetTenantMigrationServices string = "GetTenantMigrationServices"

	// TenantMigrationActionActionPreCheck captures enum value "PreCheck"
	TenantMigrationActionActionPreCheck string = "PreCheck"

	// TenantMigrationActionActionImport captures enum value "Import"
	TenantMigrationActionActionImport string = "Import"

	// TenantMigrationActionActionExport captures enum value "Export"
	TenantMigrationActionActionExport string = "Export"

	// TenantMigrationActionActionQuiesce captures enum value "Quiesce"
	TenantMigrationActionActionQuiesce string = "Quiesce"

	// TenantMigrationActionActionUnquiesce captures enum value "Unquiesce"
	TenantMigrationActionActionUnquiesce string = "Unquiesce"

	// TenantMigrationActionActionMigrateMetadata captures enum value "MigrateMetadata"
	TenantMigrationActionActionMigrateMetadata string = "MigrateMetadata"

	// TenantMigrationActionActionMigrateData captures enum value "MigrateData"
	TenantMigrationActionActionMigrateData string = "MigrateData"

	// TenantMigrationActionActionPurgeTenantData captures enum value "PurgeTenantData"
	TenantMigrationActionActionPurgeTenantData string = "PurgeTenantData"

	// TenantMigrationActionActionExportMetadataForValidation captures enum value "ExportMetadataForValidation"
	TenantMigrationActionActionExportMetadataForValidation string = "ExportMetadataForValidation"

	// TenantMigrationActionActionImportMetadataForValidation captures enum value "ImportMetadataForValidation"
	TenantMigrationActionActionImportMetadataForValidation string = "ImportMetadataForValidation"

	// TenantMigrationActionActionValidateMetadata captures enum value "ValidateMetadata"
	TenantMigrationActionActionValidateMetadata string = "ValidateMetadata"

	// TenantMigrationActionActionDisableInlineChanges captures enum value "DisableInlineChanges"
	TenantMigrationActionActionDisableInlineChanges string = "DisableInlineChanges"

	// TenantMigrationActionActionEnableInlineChanges captures enum value "EnableInlineChanges"
	TenantMigrationActionActionEnableInlineChanges string = "EnableInlineChanges"
)

// prop value enum
func (m *TenantMigrationAction) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantMigrationActionTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantMigrationAction) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

var tenantMigrationActionTypeServicePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kMagneto","kYoda","kIcebox"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantMigrationActionTypeServicePropEnum = append(tenantMigrationActionTypeServicePropEnum, v)
	}
}

const (

	// TenantMigrationActionServiceKMagneto captures enum value "kMagneto"
	TenantMigrationActionServiceKMagneto string = "kMagneto"

	// TenantMigrationActionServiceKYoda captures enum value "kYoda"
	TenantMigrationActionServiceKYoda string = "kYoda"

	// TenantMigrationActionServiceKIcebox captures enum value "kIcebox"
	TenantMigrationActionServiceKIcebox string = "kIcebox"
)

// prop value enum
func (m *TenantMigrationAction) validateServiceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantMigrationActionTypeServicePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantMigrationAction) validateService(formats strfmt.Registry) error {
	if swag.IsZero(m.Service) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceEnum("service", "body", *m.Service); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tenant migration action based on context it is used
func (m *TenantMigrationAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TenantMigrationAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantMigrationAction) UnmarshalBinary(b []byte) error {
	var res TenantMigrationAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
