// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantMigrationServiceAction Tenant
//
// Describes a tenant migration action status.
//
// swagger:model TenantMigrationServiceAction
type TenantMigrationServiceAction struct {

	// Specifies the action which will be performed on the tenant.
	// Enum: ["StartMigration","StopMigration","GetTenantMigrationServices","PreCheck","Import","Export","Quiesce","Unquiesce","MigrateMetadata","MigrateData","PurgeTenantData","ExportMetadataForValidation","ImportMetadataForValidation","ValidateMetadata","DisableInlineChanges","EnableInlineChanges"]
	Action *string `json:"action,omitempty"`

	// Action status
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped"]
	Status *string `json:"status,omitempty"`

	// Retry count for the action. If an action needs to be retried, then clients will increment action_incarnation_id and can send the same request again
	ActionIncarnationID *int32 `json:"actionIncarnationId,omitempty"`
}

// Validate validates this tenant migration service action
func (m *TenantMigrationServiceAction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var tenantMigrationServiceActionTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["StartMigration","StopMigration","GetTenantMigrationServices","PreCheck","Import","Export","Quiesce","Unquiesce","MigrateMetadata","MigrateData","PurgeTenantData","ExportMetadataForValidation","ImportMetadataForValidation","ValidateMetadata","DisableInlineChanges","EnableInlineChanges"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantMigrationServiceActionTypeActionPropEnum = append(tenantMigrationServiceActionTypeActionPropEnum, v)
	}
}

const (

	// TenantMigrationServiceActionActionStartMigration captures enum value "StartMigration"
	TenantMigrationServiceActionActionStartMigration string = "StartMigration"

	// TenantMigrationServiceActionActionStopMigration captures enum value "StopMigration"
	TenantMigrationServiceActionActionStopMigration string = "StopMigration"

	// TenantMigrationServiceActionActionGetTenantMigrationServices captures enum value "GetTenantMigrationServices"
	TenantMigrationServiceActionActionGetTenantMigrationServices string = "GetTenantMigrationServices"

	// TenantMigrationServiceActionActionPreCheck captures enum value "PreCheck"
	TenantMigrationServiceActionActionPreCheck string = "PreCheck"

	// TenantMigrationServiceActionActionImport captures enum value "Import"
	TenantMigrationServiceActionActionImport string = "Import"

	// TenantMigrationServiceActionActionExport captures enum value "Export"
	TenantMigrationServiceActionActionExport string = "Export"

	// TenantMigrationServiceActionActionQuiesce captures enum value "Quiesce"
	TenantMigrationServiceActionActionQuiesce string = "Quiesce"

	// TenantMigrationServiceActionActionUnquiesce captures enum value "Unquiesce"
	TenantMigrationServiceActionActionUnquiesce string = "Unquiesce"

	// TenantMigrationServiceActionActionMigrateMetadata captures enum value "MigrateMetadata"
	TenantMigrationServiceActionActionMigrateMetadata string = "MigrateMetadata"

	// TenantMigrationServiceActionActionMigrateData captures enum value "MigrateData"
	TenantMigrationServiceActionActionMigrateData string = "MigrateData"

	// TenantMigrationServiceActionActionPurgeTenantData captures enum value "PurgeTenantData"
	TenantMigrationServiceActionActionPurgeTenantData string = "PurgeTenantData"

	// TenantMigrationServiceActionActionExportMetadataForValidation captures enum value "ExportMetadataForValidation"
	TenantMigrationServiceActionActionExportMetadataForValidation string = "ExportMetadataForValidation"

	// TenantMigrationServiceActionActionImportMetadataForValidation captures enum value "ImportMetadataForValidation"
	TenantMigrationServiceActionActionImportMetadataForValidation string = "ImportMetadataForValidation"

	// TenantMigrationServiceActionActionValidateMetadata captures enum value "ValidateMetadata"
	TenantMigrationServiceActionActionValidateMetadata string = "ValidateMetadata"

	// TenantMigrationServiceActionActionDisableInlineChanges captures enum value "DisableInlineChanges"
	TenantMigrationServiceActionActionDisableInlineChanges string = "DisableInlineChanges"

	// TenantMigrationServiceActionActionEnableInlineChanges captures enum value "EnableInlineChanges"
	TenantMigrationServiceActionActionEnableInlineChanges string = "EnableInlineChanges"
)

// prop value enum
func (m *TenantMigrationServiceAction) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantMigrationServiceActionTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantMigrationServiceAction) validateAction(formats strfmt.Registry) error {
	if swag.IsZero(m.Action) { // not required
		return nil
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

var tenantMigrationServiceActionTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tenantMigrationServiceActionTypeStatusPropEnum = append(tenantMigrationServiceActionTypeStatusPropEnum, v)
	}
}

const (

	// TenantMigrationServiceActionStatusAccepted captures enum value "Accepted"
	TenantMigrationServiceActionStatusAccepted string = "Accepted"

	// TenantMigrationServiceActionStatusRunning captures enum value "Running"
	TenantMigrationServiceActionStatusRunning string = "Running"

	// TenantMigrationServiceActionStatusCanceled captures enum value "Canceled"
	TenantMigrationServiceActionStatusCanceled string = "Canceled"

	// TenantMigrationServiceActionStatusCanceling captures enum value "Canceling"
	TenantMigrationServiceActionStatusCanceling string = "Canceling"

	// TenantMigrationServiceActionStatusFailed captures enum value "Failed"
	TenantMigrationServiceActionStatusFailed string = "Failed"

	// TenantMigrationServiceActionStatusMissed captures enum value "Missed"
	TenantMigrationServiceActionStatusMissed string = "Missed"

	// TenantMigrationServiceActionStatusSucceeded captures enum value "Succeeded"
	TenantMigrationServiceActionStatusSucceeded string = "Succeeded"

	// TenantMigrationServiceActionStatusSucceededWithWarning captures enum value "SucceededWithWarning"
	TenantMigrationServiceActionStatusSucceededWithWarning string = "SucceededWithWarning"

	// TenantMigrationServiceActionStatusOnHold captures enum value "OnHold"
	TenantMigrationServiceActionStatusOnHold string = "OnHold"

	// TenantMigrationServiceActionStatusFinalizing captures enum value "Finalizing"
	TenantMigrationServiceActionStatusFinalizing string = "Finalizing"

	// TenantMigrationServiceActionStatusSkipped captures enum value "Skipped"
	TenantMigrationServiceActionStatusSkipped string = "Skipped"
)

// prop value enum
func (m *TenantMigrationServiceAction) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, tenantMigrationServiceActionTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TenantMigrationServiceAction) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this tenant migration service action based on context it is used
func (m *TenantMigrationServiceAction) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TenantMigrationServiceAction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantMigrationServiceAction) UnmarshalBinary(b []byte) error {
	var res TenantMigrationServiceAction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
