// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateNodeBondInterfaceParams Parameters to update bond interface.
//
// swagger:model UpdateNodeBondInterfaceParams
type UpdateNodeBondInterfaceParams struct {

	// Names of the secondary interfaces.
	// Required: true
	// Min Items: 1
	Members []string `json:"members"`

	// Type of the node where the interface has to be created. 'ClusterNode' indicates a node that is part of a cluster. 'FreeNode' indicates a node that is not part of cluster.
	// Required: true
	// Enum: ["ClusterNode","FreeNode"]
	NodeType *string `json:"nodeType"`

	// Id of the node, this is required when node is part of a cluster i.e when nodeType is 'ClusterNode'.
	NodeID *int64 `json:"nodeId,omitempty"`
}

// Validate validates this update node bond interface params
func (m *UpdateNodeBondInterfaceParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodeType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateNodeBondInterfaceParams) validateMembers(formats strfmt.Registry) error {

	if err := validate.Required("members", "body", m.Members); err != nil {
		return err
	}

	iMembersSize := int64(len(m.Members))

	if err := validate.MinItems("members", "body", iMembersSize, 1); err != nil {
		return err
	}

	return nil
}

var updateNodeBondInterfaceParamsTypeNodeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ClusterNode","FreeNode"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateNodeBondInterfaceParamsTypeNodeTypePropEnum = append(updateNodeBondInterfaceParamsTypeNodeTypePropEnum, v)
	}
}

const (

	// UpdateNodeBondInterfaceParamsNodeTypeClusterNode captures enum value "ClusterNode"
	UpdateNodeBondInterfaceParamsNodeTypeClusterNode string = "ClusterNode"

	// UpdateNodeBondInterfaceParamsNodeTypeFreeNode captures enum value "FreeNode"
	UpdateNodeBondInterfaceParamsNodeTypeFreeNode string = "FreeNode"
)

// prop value enum
func (m *UpdateNodeBondInterfaceParams) validateNodeTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateNodeBondInterfaceParamsTypeNodeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateNodeBondInterfaceParams) validateNodeType(formats strfmt.Registry) error {

	if err := validate.Required("nodeType", "body", m.NodeType); err != nil {
		return err
	}

	// value enum
	if err := m.validateNodeTypeEnum("nodeType", "body", *m.NodeType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update node bond interface params based on context it is used
func (m *UpdateNodeBondInterfaceParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateNodeBondInterfaceParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateNodeBondInterfaceParams) UnmarshalBinary(b []byte) error {
	var res UpdateNodeBondInterfaceParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
