// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RpaasProvisionStatus Rpaas Provision Status
//
// Specifies the provision statuses for rpaas region provisioning.
//
// swagger:model RpaasProvisionStatus
type RpaasProvisionStatus struct {

	// Specifies the provision statuses for rpaas region provisioning.
	// Enum: ["Waiting","InProgress","Completed","Failed","MarkedForDeletion"]
	RpaasProvisionStatus string `json:"rpaasProvisionStatus,omitempty"`
}

// Validate validates this rpaas provision status
func (m *RpaasProvisionStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRpaasProvisionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rpaasProvisionStatusTypeRpaasProvisionStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Waiting","InProgress","Completed","Failed","MarkedForDeletion"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rpaasProvisionStatusTypeRpaasProvisionStatusPropEnum = append(rpaasProvisionStatusTypeRpaasProvisionStatusPropEnum, v)
	}
}

const (

	// RpaasProvisionStatusRpaasProvisionStatusWaiting captures enum value "Waiting"
	RpaasProvisionStatusRpaasProvisionStatusWaiting string = "Waiting"

	// RpaasProvisionStatusRpaasProvisionStatusInProgress captures enum value "InProgress"
	RpaasProvisionStatusRpaasProvisionStatusInProgress string = "InProgress"

	// RpaasProvisionStatusRpaasProvisionStatusCompleted captures enum value "Completed"
	RpaasProvisionStatusRpaasProvisionStatusCompleted string = "Completed"

	// RpaasProvisionStatusRpaasProvisionStatusFailed captures enum value "Failed"
	RpaasProvisionStatusRpaasProvisionStatusFailed string = "Failed"

	// RpaasProvisionStatusRpaasProvisionStatusMarkedForDeletion captures enum value "MarkedForDeletion"
	RpaasProvisionStatusRpaasProvisionStatusMarkedForDeletion string = "MarkedForDeletion"
)

// prop value enum
func (m *RpaasProvisionStatus) validateRpaasProvisionStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, rpaasProvisionStatusTypeRpaasProvisionStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *RpaasProvisionStatus) validateRpaasProvisionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.RpaasProvisionStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateRpaasProvisionStatusEnum("rpaasProvisionStatus", "body", m.RpaasProvisionStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this rpaas provision status based on context it is used
func (m *RpaasProvisionStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RpaasProvisionStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RpaasProvisionStatus) UnmarshalBinary(b []byte) error {
	var res RpaasProvisionStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
