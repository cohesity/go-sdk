// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// ObjectInfo Specifies the object info.
//
// swagger:model ObjectInfo
type ObjectInfo struct {

	// global Id
	GlobalID *GlobalID `json:"globalId,omitempty"`

	// object name
	ObjectName *ObjectName `json:"objectName,omitempty"`

	// object type
	ObjectType *ObjectType `json:"objectType,omitempty"`

	// Snapshots of the object.
	Snapshots []*GaiaSnapshotInfo `json:"snapshots"`

	// base snapshot handle
	BaseSnapshotHandle *SnapshotHandle `json:"baseSnapshotHandle,omitempty"`
}

// Validate validates this object info
func (m *ObjectInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGlobalID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateObjectType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseSnapshotHandle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectInfo) validateGlobalID(formats strfmt.Registry) error {
	if swag.IsZero(m.GlobalID) { // not required
		return nil
	}

	if m.GlobalID != nil {
		if err := m.GlobalID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("globalId")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectInfo) validateObjectName(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectName) { // not required
		return nil
	}

	if m.ObjectName != nil {
		if err := m.ObjectName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectName")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectInfo) validateObjectType(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectType) { // not required
		return nil
	}

	if m.ObjectType != nil {
		if err := m.ObjectType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectType")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectInfo) validateSnapshots(formats strfmt.Registry) error {
	if swag.IsZero(m.Snapshots) { // not required
		return nil
	}

	for i := 0; i < len(m.Snapshots); i++ {
		if swag.IsZero(m.Snapshots[i]) { // not required
			continue
		}

		if m.Snapshots[i] != nil {
			if err := m.Snapshots[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectInfo) validateBaseSnapshotHandle(formats strfmt.Registry) error {
	if swag.IsZero(m.BaseSnapshotHandle) { // not required
		return nil
	}

	if m.BaseSnapshotHandle != nil {
		if err := m.BaseSnapshotHandle.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseSnapshotHandle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseSnapshotHandle")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this object info based on the context it is used
func (m *ObjectInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateGlobalID(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectName(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateObjectType(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshots(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBaseSnapshotHandle(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ObjectInfo) contextValidateGlobalID(ctx context.Context, formats strfmt.Registry) error {

	if m.GlobalID != nil {

		if swag.IsZero(m.GlobalID) { // not required
			return nil
		}

		if err := m.GlobalID.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("globalId")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("globalId")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectInfo) contextValidateObjectName(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectName != nil {

		if swag.IsZero(m.ObjectName) { // not required
			return nil
		}

		if err := m.ObjectName.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectName")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectName")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectInfo) contextValidateObjectType(ctx context.Context, formats strfmt.Registry) error {

	if m.ObjectType != nil {

		if swag.IsZero(m.ObjectType) { // not required
			return nil
		}

		if err := m.ObjectType.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("objectType")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("objectType")
			}
			return err
		}
	}

	return nil
}

func (m *ObjectInfo) contextValidateSnapshots(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Snapshots); i++ {

		if m.Snapshots[i] != nil {

			if swag.IsZero(m.Snapshots[i]) { // not required
				return nil
			}

			if err := m.Snapshots[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("snapshots" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("snapshots" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ObjectInfo) contextValidateBaseSnapshotHandle(ctx context.Context, formats strfmt.Registry) error {

	if m.BaseSnapshotHandle != nil {

		if swag.IsZero(m.BaseSnapshotHandle) { // not required
			return nil
		}

		if err := m.BaseSnapshotHandle.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("baseSnapshotHandle")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("baseSnapshotHandle")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectInfo) UnmarshalBinary(b []byte) error {
	var res ObjectInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
