// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BifrostConnector Bifrost Connector.
//
// Specify a Bifrost connector.
//
// swagger:model BifrostConnector
type BifrostConnector struct {

	// Specifies the id of the connector.
	// Required: true
	ID *string `json:"id"`

	// Specifies the name of the connector.
	Name *string `json:"name,omitempty"`

	// Specifies the Id of the connection which this connector belongs to.
	// Required: true
	ConnectionID *int64 `json:"connectionId"`

	// Specifies the connection status.
	ConnectionStatus *ConnectorConnectionInfo `json:"connectionStatus,omitempty"`

	// Specifies the cohesity side ip of the connector
	// Read Only: true
	CohesitySideIP *string `json:"cohesitySideIp,omitempty"`

	// Specifies the tenant source side ip of the connector
	// Read Only: true
	TenantSourceSideIP *string `json:"tenantSourceSideIp,omitempty"`

	// Specifies the connector's software Version
	// Read Only: true
	HyxVersion *string `json:"hyxVersion,omitempty"`
}

// Validate validates this bifrost connector
func (m *BifrostConnector) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BifrostConnector) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *BifrostConnector) validateConnectionID(formats strfmt.Registry) error {

	if err := validate.Required("connectionId", "body", m.ConnectionID); err != nil {
		return err
	}

	return nil
}

func (m *BifrostConnector) validateConnectionStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectionStatus) { // not required
		return nil
	}

	if m.ConnectionStatus != nil {
		if err := m.ConnectionStatus.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectionStatus")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bifrost connector based on the context it is used
func (m *BifrostConnector) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectionStatus(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCohesitySideIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTenantSourceSideIP(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateHyxVersion(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BifrostConnector) contextValidateConnectionStatus(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectionStatus != nil {

		if swag.IsZero(m.ConnectionStatus) { // not required
			return nil
		}

		if err := m.ConnectionStatus.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionStatus")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectionStatus")
			}
			return err
		}
	}

	return nil
}

func (m *BifrostConnector) contextValidateCohesitySideIP(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "cohesitySideIp", "body", m.CohesitySideIP); err != nil {
		return err
	}

	return nil
}

func (m *BifrostConnector) contextValidateTenantSourceSideIP(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "tenantSourceSideIp", "body", m.TenantSourceSideIP); err != nil {
		return err
	}

	return nil
}

func (m *BifrostConnector) contextValidateHyxVersion(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "hyxVersion", "body", m.HyxVersion); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BifrostConnector) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BifrostConnector) UnmarshalBinary(b []byte) error {
	var res BifrostConnector
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
