// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CommonCreateOrUpdateRigelConnectorRequest Common Create Or Update Rigel connector Request.
//
// Specify the common params to create or update a Rigel connector.
//
// swagger:model CommonCreateOrUpdateRigelConnectorRequest
type CommonCreateOrUpdateRigelConnectorRequest struct {

	// Specifies the Id of the connection which this connector belongs to.
	// Required: true
	ConnectionID *int64 `json:"connectionId"`

	// Specifies the id of the tenant which the connector belongs to.
	// Required: true
	TenantID *string `json:"tenantId"`

	// Specifies the name of the connector.
	// Required: true
	Name *string `json:"name"`

	// Specifies the version of the connector's certificate. The version is used to revoke/renew connector's certificates.
	CertificateVersion *int64 `json:"certificateVersion,omitempty"`

	// Specifies the list of accepted version of the connector's certificate. The version is used to revoke/renew connector's certificates.
	CertificateVersionList []int64 `json:"certificateVersionList"`

	// Specifies any cloud specific metadata for the saas connector like EC2 instance_id in case of AWS, or Azure VM name in case of Azure.
	ConnectorCloudMetadata *ConnectorCloudMetadata `json:"connectorCloudMetadata,omitempty"`
}

// Validate validates this common create or update rigel connector request
func (m *CommonCreateOrUpdateRigelConnectorRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorCloudMetadata(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonCreateOrUpdateRigelConnectorRequest) validateConnectionID(formats strfmt.Registry) error {

	if err := validate.Required("connectionId", "body", m.ConnectionID); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateOrUpdateRigelConnectorRequest) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenantId", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateOrUpdateRigelConnectorRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CommonCreateOrUpdateRigelConnectorRequest) validateConnectorCloudMetadata(formats strfmt.Registry) error {
	if swag.IsZero(m.ConnectorCloudMetadata) { // not required
		return nil
	}

	if m.ConnectorCloudMetadata != nil {
		if err := m.ConnectorCloudMetadata.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectorCloudMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectorCloudMetadata")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this common create or update rigel connector request based on the context it is used
func (m *CommonCreateOrUpdateRigelConnectorRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConnectorCloudMetadata(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonCreateOrUpdateRigelConnectorRequest) contextValidateConnectorCloudMetadata(ctx context.Context, formats strfmt.Registry) error {

	if m.ConnectorCloudMetadata != nil {

		if swag.IsZero(m.ConnectorCloudMetadata) { // not required
			return nil
		}

		if err := m.ConnectorCloudMetadata.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectorCloudMetadata")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("connectorCloudMetadata")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CommonCreateOrUpdateRigelConnectorRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonCreateOrUpdateRigelConnectorRequest) UnmarshalBinary(b []byte) error {
	var res CommonCreateOrUpdateRigelConnectorRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
