// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FlashbladeProtocol Flashblade Protocol type.
//
// Flashblade Protocol type.
//
// swagger:model FlashbladeProtocol
type FlashbladeProtocol struct {

	// Specifies Flashblade Protocol type.
	// Enum: ["kNfs","kCifs2","kHttp"]
	FlashbladeProtocol string `json:"flashbladeProtocol,omitempty"`
}

// Validate validates this flashblade protocol
func (m *FlashbladeProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFlashbladeProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var flashbladeProtocolTypeFlashbladeProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kCifs2","kHttp"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		flashbladeProtocolTypeFlashbladeProtocolPropEnum = append(flashbladeProtocolTypeFlashbladeProtocolPropEnum, v)
	}
}

const (

	// FlashbladeProtocolFlashbladeProtocolKNfs captures enum value "kNfs"
	FlashbladeProtocolFlashbladeProtocolKNfs string = "kNfs"

	// FlashbladeProtocolFlashbladeProtocolKCifs2 captures enum value "kCifs2"
	FlashbladeProtocolFlashbladeProtocolKCifs2 string = "kCifs2"

	// FlashbladeProtocolFlashbladeProtocolKHTTP captures enum value "kHttp"
	FlashbladeProtocolFlashbladeProtocolKHTTP string = "kHttp"
)

// prop value enum
func (m *FlashbladeProtocol) validateFlashbladeProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, flashbladeProtocolTypeFlashbladeProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *FlashbladeProtocol) validateFlashbladeProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.FlashbladeProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateFlashbladeProtocolEnum("flashbladeProtocol", "body", m.FlashbladeProtocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this flashblade protocol based on context it is used
func (m *FlashbladeProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *FlashbladeProtocol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FlashbladeProtocol) UnmarshalBinary(b []byte) error {
	var res FlashbladeProtocol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
