// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProtocolAccessLevel Protocol access level
//
// # Protocol access level
//
// swagger:model ProtocolAccessLevel
type ProtocolAccessLevel struct {

	// Specifies the level of access for any protocol.
	// Enum: ["kDisabled","kReadOnly","kReadWrite"]
	ProtocolAccessLevel string `json:"protocolAccessLevel,omitempty"`
}

// Validate validates this protocol access level
func (m *ProtocolAccessLevel) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProtocolAccessLevel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var protocolAccessLevelTypeProtocolAccessLevelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kDisabled","kReadOnly","kReadWrite"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		protocolAccessLevelTypeProtocolAccessLevelPropEnum = append(protocolAccessLevelTypeProtocolAccessLevelPropEnum, v)
	}
}

const (

	// ProtocolAccessLevelProtocolAccessLevelKDisabled captures enum value "kDisabled"
	ProtocolAccessLevelProtocolAccessLevelKDisabled string = "kDisabled"

	// ProtocolAccessLevelProtocolAccessLevelKReadOnly captures enum value "kReadOnly"
	ProtocolAccessLevelProtocolAccessLevelKReadOnly string = "kReadOnly"

	// ProtocolAccessLevelProtocolAccessLevelKReadWrite captures enum value "kReadWrite"
	ProtocolAccessLevelProtocolAccessLevelKReadWrite string = "kReadWrite"
)

// prop value enum
func (m *ProtocolAccessLevel) validateProtocolAccessLevelEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, protocolAccessLevelTypeProtocolAccessLevelPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ProtocolAccessLevel) validateProtocolAccessLevel(formats strfmt.Registry) error {
	if swag.IsZero(m.ProtocolAccessLevel) { // not required
		return nil
	}

	// value enum
	if err := m.validateProtocolAccessLevelEnum("protocolAccessLevel", "body", m.ProtocolAccessLevel); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this protocol access level based on context it is used
func (m *ProtocolAccessLevel) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProtocolAccessLevel) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProtocolAccessLevel) UnmarshalBinary(b []byte) error {
	var res ProtocolAccessLevel
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
