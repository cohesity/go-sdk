// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// CommonTdmCloneTaskResponseParams Specifies the common response params for a TDM clone task.
//
// swagger:model CommonTdmCloneTaskResponseParams
type CommonTdmCloneTaskResponseParams struct {
	CommonTdmCloneTaskParams

	// Specifies the details of the snapshot used for cloning.
	Snapshot struct {
		ObjectSnapshot
	} `json:"snapshot,omitempty"`

	// Specifies the details of the parent object of the clone.
	Parent struct {
		ObjectSummary
	} `json:"parent,omitempty"`

	// Specifies the details of the target, where the clone is created.
	Target struct {
		ObjectSummary
	} `json:"target,omitempty"`

	// Specifies the details of the view, which is used for the clone.
	View struct {
		ViewParams
	} `json:"view,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *CommonTdmCloneTaskResponseParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 CommonTdmCloneTaskParams
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.CommonTdmCloneTaskParams = aO0

	// AO1
	var dataAO1 struct {
		Snapshot struct {
			ObjectSnapshot
		} `json:"snapshot,omitempty"`

		Parent struct {
			ObjectSummary
		} `json:"parent,omitempty"`

		Target struct {
			ObjectSummary
		} `json:"target,omitempty"`

		View struct {
			ViewParams
		} `json:"view,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Snapshot = dataAO1.Snapshot

	m.Parent = dataAO1.Parent

	m.Target = dataAO1.Target

	m.View = dataAO1.View

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m CommonTdmCloneTaskResponseParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.CommonTdmCloneTaskParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Snapshot struct {
			ObjectSnapshot
		} `json:"snapshot,omitempty"`

		Parent struct {
			ObjectSummary
		} `json:"parent,omitempty"`

		Target struct {
			ObjectSummary
		} `json:"target,omitempty"`

		View struct {
			ViewParams
		} `json:"view,omitempty"`
	}

	dataAO1.Snapshot = m.Snapshot

	dataAO1.Parent = m.Parent

	dataAO1.Target = m.Target

	dataAO1.View = m.View

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this common tdm clone task response params
func (m *CommonTdmCloneTaskResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTdmCloneTaskParams
	if err := m.CommonTdmCloneTaskParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateParent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTarget(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateView(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonTdmCloneTaskResponseParams) validateSnapshot(formats strfmt.Registry) error {

	if swag.IsZero(m.Snapshot) { // not required
		return nil
	}

	return nil
}

func (m *CommonTdmCloneTaskResponseParams) validateParent(formats strfmt.Registry) error {

	if swag.IsZero(m.Parent) { // not required
		return nil
	}

	return nil
}

func (m *CommonTdmCloneTaskResponseParams) validateTarget(formats strfmt.Registry) error {

	if swag.IsZero(m.Target) { // not required
		return nil
	}

	return nil
}

func (m *CommonTdmCloneTaskResponseParams) validateView(formats strfmt.Registry) error {

	if swag.IsZero(m.View) { // not required
		return nil
	}

	return nil
}

// ContextValidate validate this common tdm clone task response params based on the context it is used
func (m *CommonTdmCloneTaskResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTdmCloneTaskParams
	if err := m.CommonTdmCloneTaskParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSnapshot(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateParent(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTarget(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CommonTdmCloneTaskResponseParams) contextValidateSnapshot(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CommonTdmCloneTaskResponseParams) contextValidateParent(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CommonTdmCloneTaskResponseParams) contextValidateTarget(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

func (m *CommonTdmCloneTaskResponseParams) contextValidateView(ctx context.Context, formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *CommonTdmCloneTaskResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CommonTdmCloneTaskResponseParams) UnmarshalBinary(b []byte) error {
	var res CommonTdmCloneTaskResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
