// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetM365SourceRegionEndpointResponseParams Microsoft365 OpenId Connect metadata parameter
//
// Specifies the response parameters containing region and various endpoint for Microsoft365 source.
//
// swagger:model GetM365SourceRegionEndpointResponseParams
type GetM365SourceRegionEndpointResponseParams struct {

	// Specifies the scope of the region. For eg NA for North America or AS for Australia. For Azure Gov cloud it can be USG or USGov.
	Region *string `json:"region,omitempty"`

	// Specifies the scope of the sub region.
	SubRegion *string `json:"subRegion,omitempty"`

	// Specifies the token endpoint of the Microsoft365 source.
	TokenEndpoint *string `json:"tokenEndpoint,omitempty"`

	// Specifies the Microsoft graph host url to be used for graph calls.
	GraphEndpoint *string `json:"graphEndpoint,omitempty"`

	// Specifies the device authorization endpoint to be used for Microsoft graph calls.
	DeviceAuthEndpoint *string `json:"deviceAuthEndpoint,omitempty"`

	// Specifies the tenant region for the given domain. This can be either Default(Commercial), GCC, GCC High or DoD. This is different from the Geo location which is represented by the region parameter.
	// Enum: ["Default","China","Germany","UsDoD","UsGccHigh"]
	TenantRegion *string `json:"tenantRegion,omitempty"`
}

// Validate validates this get m365 source region endpoint response params
func (m *GetM365SourceRegionEndpointResponseParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTenantRegion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var getM365SourceRegionEndpointResponseParamsTypeTenantRegionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Default","China","Germany","UsDoD","UsGccHigh"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		getM365SourceRegionEndpointResponseParamsTypeTenantRegionPropEnum = append(getM365SourceRegionEndpointResponseParamsTypeTenantRegionPropEnum, v)
	}
}

const (

	// GetM365SourceRegionEndpointResponseParamsTenantRegionDefault captures enum value "Default"
	GetM365SourceRegionEndpointResponseParamsTenantRegionDefault string = "Default"

	// GetM365SourceRegionEndpointResponseParamsTenantRegionChina captures enum value "China"
	GetM365SourceRegionEndpointResponseParamsTenantRegionChina string = "China"

	// GetM365SourceRegionEndpointResponseParamsTenantRegionGermany captures enum value "Germany"
	GetM365SourceRegionEndpointResponseParamsTenantRegionGermany string = "Germany"

	// GetM365SourceRegionEndpointResponseParamsTenantRegionUsDoD captures enum value "UsDoD"
	GetM365SourceRegionEndpointResponseParamsTenantRegionUsDoD string = "UsDoD"

	// GetM365SourceRegionEndpointResponseParamsTenantRegionUsGccHigh captures enum value "UsGccHigh"
	GetM365SourceRegionEndpointResponseParamsTenantRegionUsGccHigh string = "UsGccHigh"
)

// prop value enum
func (m *GetM365SourceRegionEndpointResponseParams) validateTenantRegionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, getM365SourceRegionEndpointResponseParamsTypeTenantRegionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *GetM365SourceRegionEndpointResponseParams) validateTenantRegion(formats strfmt.Registry) error {
	if swag.IsZero(m.TenantRegion) { // not required
		return nil
	}

	// value enum
	if err := m.validateTenantRegionEnum("tenantRegion", "body", *m.TenantRegion); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get m365 source region endpoint response params based on context it is used
func (m *GetM365SourceRegionEndpointResponseParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GetM365SourceRegionEndpointResponseParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetM365SourceRegionEndpointResponseParams) UnmarshalBinary(b []byte) error {
	var res GetM365SourceRegionEndpointResponseParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
