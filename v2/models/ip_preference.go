// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IPPreference IP Address Preference
//
// # Preferred IP address mode of the cluster
//
// swagger:model IpPreference
type IPPreference struct {

	// Specifies the ip preference of cluster.
	// Enum: ["Ipv4","Ipv6"]
	IPPreference string `json:"ipPreference,omitempty"`
}

// Validate validates this Ip preference
func (m *IPPreference) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIPPreference(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ipPreferenceTypeIPPreferencePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Ipv4","Ipv6"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ipPreferenceTypeIPPreferencePropEnum = append(ipPreferenceTypeIPPreferencePropEnum, v)
	}
}

const (

	// IPPreferenceIPPreferenceIPV4 captures enum value "Ipv4"
	IPPreferenceIPPreferenceIPV4 string = "Ipv4"

	// IPPreferenceIPPreferenceIPV6 captures enum value "Ipv6"
	IPPreferenceIPPreferenceIPV6 string = "Ipv6"
)

// prop value enum
func (m *IPPreference) validateIPPreferenceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, ipPreferenceTypeIPPreferencePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IPPreference) validateIPPreference(formats strfmt.Registry) error {
	if swag.IsZero(m.IPPreference) { // not required
		return nil
	}

	// value enum
	if err := m.validateIPPreferenceEnum("ipPreference", "body", m.IPPreference); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this Ip preference based on context it is used
func (m *IPPreference) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IPPreference) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IPPreference) UnmarshalBinary(b []byte) error {
	var res IPPreference
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
