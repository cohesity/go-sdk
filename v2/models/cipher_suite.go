// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CipherSuite CipherSuite
//
// # Cipher Suite
//
// swagger:model CipherSuite
type CipherSuite struct {

	// Specifies the cipher suite used for TLS handshake.
	// Enum: ["TLS_AES_256_GCM_SHA384","TLS_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","TLS_RSA_WITH_AES_256_GCM_SHA384","TLS_RSA_WITH_AES_128_GCM_SHA256","TLS_RSA_WITH_AES_256_CBC_SHA","TLS_RSA_WITH_AES_128_CBC_SHA"]
	Cipher string `json:"cipher,omitempty"`
}

// Validate validates this cipher suite
func (m *CipherSuite) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCipher(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cipherSuiteTypeCipherPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TLS_AES_256_GCM_SHA384","TLS_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384","TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256","TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA","TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA","TLS_RSA_WITH_AES_256_GCM_SHA384","TLS_RSA_WITH_AES_128_GCM_SHA256","TLS_RSA_WITH_AES_256_CBC_SHA","TLS_RSA_WITH_AES_128_CBC_SHA"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cipherSuiteTypeCipherPropEnum = append(cipherSuiteTypeCipherPropEnum, v)
	}
}

const (

	// CipherSuiteCipherTLSAES256GCMSHA384 captures enum value "TLS_AES_256_GCM_SHA384"
	CipherSuiteCipherTLSAES256GCMSHA384 string = "TLS_AES_256_GCM_SHA384"

	// CipherSuiteCipherTLSAES128GCMSHA256 captures enum value "TLS_AES_128_GCM_SHA256"
	CipherSuiteCipherTLSAES128GCMSHA256 string = "TLS_AES_128_GCM_SHA256"

	// CipherSuiteCipherTLSECDHEECDSAWITHAES256GCMSHA384 captures enum value "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"
	CipherSuiteCipherTLSECDHEECDSAWITHAES256GCMSHA384 string = "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384"

	// CipherSuiteCipherTLSECDHEECDSAWITHAES128GCMSHA256 captures enum value "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"
	CipherSuiteCipherTLSECDHEECDSAWITHAES128GCMSHA256 string = "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256"

	// CipherSuiteCipherTLSECDHERSAWITHAES256GCMSHA384 captures enum value "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"
	CipherSuiteCipherTLSECDHERSAWITHAES256GCMSHA384 string = "TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384"

	// CipherSuiteCipherTLSECDHERSAWITHAES128GCMSHA256 captures enum value "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"
	CipherSuiteCipherTLSECDHERSAWITHAES128GCMSHA256 string = "TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256"

	// CipherSuiteCipherTLSECDHEECDSAWITHAES256CBCSHA captures enum value "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"
	CipherSuiteCipherTLSECDHEECDSAWITHAES256CBCSHA string = "TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA"

	// CipherSuiteCipherTLSECDHEECDSAWITHAES128CBCSHA captures enum value "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"
	CipherSuiteCipherTLSECDHEECDSAWITHAES128CBCSHA string = "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA"

	// CipherSuiteCipherTLSRSAWITHAES256GCMSHA384 captures enum value "TLS_RSA_WITH_AES_256_GCM_SHA384"
	CipherSuiteCipherTLSRSAWITHAES256GCMSHA384 string = "TLS_RSA_WITH_AES_256_GCM_SHA384"

	// CipherSuiteCipherTLSRSAWITHAES128GCMSHA256 captures enum value "TLS_RSA_WITH_AES_128_GCM_SHA256"
	CipherSuiteCipherTLSRSAWITHAES128GCMSHA256 string = "TLS_RSA_WITH_AES_128_GCM_SHA256"

	// CipherSuiteCipherTLSRSAWITHAES256CBCSHA captures enum value "TLS_RSA_WITH_AES_256_CBC_SHA"
	CipherSuiteCipherTLSRSAWITHAES256CBCSHA string = "TLS_RSA_WITH_AES_256_CBC_SHA"

	// CipherSuiteCipherTLSRSAWITHAES128CBCSHA captures enum value "TLS_RSA_WITH_AES_128_CBC_SHA"
	CipherSuiteCipherTLSRSAWITHAES128CBCSHA string = "TLS_RSA_WITH_AES_128_CBC_SHA"
)

// prop value enum
func (m *CipherSuite) validateCipherEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, cipherSuiteTypeCipherPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CipherSuite) validateCipher(formats strfmt.Registry) error {
	if swag.IsZero(m.Cipher) { // not required
		return nil
	}

	// value enum
	if err := m.validateCipherEnum("cipher", "body", m.Cipher); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this cipher suite based on context it is used
func (m *CipherSuite) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CipherSuite) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CipherSuite) UnmarshalBinary(b []byte) error {
	var res CipherSuite
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
