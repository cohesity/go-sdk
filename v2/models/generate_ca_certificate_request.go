// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GenerateCaCertificateRequest Specifies the parameters required to generate CA certificate/key material
//
// swagger:model GenerateCaCertificateRequest
type GenerateCaCertificateRequest struct {

	// Common Name
	// Required: true
	CommonName *string `json:"commonName"`

	// Organization
	// Required: true
	Organization *string `json:"organization"`

	// Organizational Unit
	OrganizationalUnit string `json:"organizationalUnit,omitempty"`

	// Country
	// Required: true
	Country *string `json:"country"`

	// Locality
	// Required: true
	Locality *string `json:"locality"`

	// Duration (in hours) of the CA certificate.
	Expiry string `json:"expiry,omitempty"`
}

// Validate validates this generate ca certificate request
func (m *GenerateCaCertificateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCommonName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganization(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocality(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GenerateCaCertificateRequest) validateCommonName(formats strfmt.Registry) error {

	if err := validate.Required("commonName", "body", m.CommonName); err != nil {
		return err
	}

	return nil
}

func (m *GenerateCaCertificateRequest) validateOrganization(formats strfmt.Registry) error {

	if err := validate.Required("organization", "body", m.Organization); err != nil {
		return err
	}

	return nil
}

func (m *GenerateCaCertificateRequest) validateCountry(formats strfmt.Registry) error {

	if err := validate.Required("country", "body", m.Country); err != nil {
		return err
	}

	return nil
}

func (m *GenerateCaCertificateRequest) validateLocality(formats strfmt.Registry) error {

	if err := validate.Required("locality", "body", m.Locality); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this generate ca certificate request based on context it is used
func (m *GenerateCaCertificateRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *GenerateCaCertificateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GenerateCaCertificateRequest) UnmarshalBinary(b []byte) error {
	var res GenerateCaCertificateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
