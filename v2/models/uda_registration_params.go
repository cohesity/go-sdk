// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// UdaRegistrationParams Parameters to customize registration workflow.
//
// swagger:model UdaRegistrationParams
type UdaRegistrationParams struct {

	// dynamic form
	DynamicForm *UdaDynamicFormParams `json:"dynamicForm,omitempty"`

	// primary fields
	PrimaryFields *UdaRegistrationParamsPrimaryFields `json:"primaryFields,omitempty"`
}

// Validate validates this uda registration params
func (m *UdaRegistrationParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDynamicForm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrimaryFields(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaRegistrationParams) validateDynamicForm(formats strfmt.Registry) error {
	if swag.IsZero(m.DynamicForm) { // not required
		return nil
	}

	if m.DynamicForm != nil {
		if err := m.DynamicForm.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamicForm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dynamicForm")
			}
			return err
		}
	}

	return nil
}

func (m *UdaRegistrationParams) validatePrimaryFields(formats strfmt.Registry) error {
	if swag.IsZero(m.PrimaryFields) { // not required
		return nil
	}

	if m.PrimaryFields != nil {
		if err := m.PrimaryFields.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryFields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryFields")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this uda registration params based on the context it is used
func (m *UdaRegistrationParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateDynamicForm(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidatePrimaryFields(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaRegistrationParams) contextValidateDynamicForm(ctx context.Context, formats strfmt.Registry) error {

	if m.DynamicForm != nil {

		if swag.IsZero(m.DynamicForm) { // not required
			return nil
		}

		if err := m.DynamicForm.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("dynamicForm")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("dynamicForm")
			}
			return err
		}
	}

	return nil
}

func (m *UdaRegistrationParams) contextValidatePrimaryFields(ctx context.Context, formats strfmt.Registry) error {

	if m.PrimaryFields != nil {

		if swag.IsZero(m.PrimaryFields) { // not required
			return nil
		}

		if err := m.PrimaryFields.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryFields")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryFields")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UdaRegistrationParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaRegistrationParams) UnmarshalBinary(b []byte) error {
	var res UdaRegistrationParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UdaRegistrationParamsPrimaryFields Parameters to customize existing/ default form fields.
//
// swagger:model UdaRegistrationParamsPrimaryFields
type UdaRegistrationParamsPrimaryFields struct {

	// app authentication
	AppAuthentication *UdaRegistrationParamsPrimaryFieldsAppAuthentication `json:"appAuthentication,omitempty"`

	// mount view
	MountView *UdaRegistrationParamsPrimaryFieldsMountView `json:"mountView,omitempty"`

	// script dir
	ScriptDir *UdaRegistrationParamsPrimaryFieldsScriptDir `json:"scriptDir,omitempty"`

	// source registration args
	SourceRegistrationArgs *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs `json:"sourceRegistrationArgs,omitempty"`
}

// Validate validates this uda registration params primary fields
func (m *UdaRegistrationParamsPrimaryFields) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAppAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMountView(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScriptDir(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceRegistrationArgs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaRegistrationParamsPrimaryFields) validateAppAuthentication(formats strfmt.Registry) error {
	if swag.IsZero(m.AppAuthentication) { // not required
		return nil
	}

	if m.AppAuthentication != nil {
		if err := m.AppAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryFields" + "." + "appAuthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryFields" + "." + "appAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *UdaRegistrationParamsPrimaryFields) validateMountView(formats strfmt.Registry) error {
	if swag.IsZero(m.MountView) { // not required
		return nil
	}

	if m.MountView != nil {
		if err := m.MountView.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryFields" + "." + "mountView")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryFields" + "." + "mountView")
			}
			return err
		}
	}

	return nil
}

func (m *UdaRegistrationParamsPrimaryFields) validateScriptDir(formats strfmt.Registry) error {
	if swag.IsZero(m.ScriptDir) { // not required
		return nil
	}

	if m.ScriptDir != nil {
		if err := m.ScriptDir.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryFields" + "." + "scriptDir")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryFields" + "." + "scriptDir")
			}
			return err
		}
	}

	return nil
}

func (m *UdaRegistrationParamsPrimaryFields) validateSourceRegistrationArgs(formats strfmt.Registry) error {
	if swag.IsZero(m.SourceRegistrationArgs) { // not required
		return nil
	}

	if m.SourceRegistrationArgs != nil {
		if err := m.SourceRegistrationArgs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryFields" + "." + "sourceRegistrationArgs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryFields" + "." + "sourceRegistrationArgs")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this uda registration params primary fields based on the context it is used
func (m *UdaRegistrationParamsPrimaryFields) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAppAuthentication(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateMountView(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateScriptDir(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSourceRegistrationArgs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UdaRegistrationParamsPrimaryFields) contextValidateAppAuthentication(ctx context.Context, formats strfmt.Registry) error {

	if m.AppAuthentication != nil {

		if swag.IsZero(m.AppAuthentication) { // not required
			return nil
		}

		if err := m.AppAuthentication.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryFields" + "." + "appAuthentication")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryFields" + "." + "appAuthentication")
			}
			return err
		}
	}

	return nil
}

func (m *UdaRegistrationParamsPrimaryFields) contextValidateMountView(ctx context.Context, formats strfmt.Registry) error {

	if m.MountView != nil {

		if swag.IsZero(m.MountView) { // not required
			return nil
		}

		if err := m.MountView.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryFields" + "." + "mountView")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryFields" + "." + "mountView")
			}
			return err
		}
	}

	return nil
}

func (m *UdaRegistrationParamsPrimaryFields) contextValidateScriptDir(ctx context.Context, formats strfmt.Registry) error {

	if m.ScriptDir != nil {

		if swag.IsZero(m.ScriptDir) { // not required
			return nil
		}

		if err := m.ScriptDir.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryFields" + "." + "scriptDir")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryFields" + "." + "scriptDir")
			}
			return err
		}
	}

	return nil
}

func (m *UdaRegistrationParamsPrimaryFields) contextValidateSourceRegistrationArgs(ctx context.Context, formats strfmt.Registry) error {

	if m.SourceRegistrationArgs != nil {

		if swag.IsZero(m.SourceRegistrationArgs) { // not required
			return nil
		}

		if err := m.SourceRegistrationArgs.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("primaryFields" + "." + "sourceRegistrationArgs")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("primaryFields" + "." + "sourceRegistrationArgs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UdaRegistrationParamsPrimaryFields) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaRegistrationParamsPrimaryFields) UnmarshalBinary(b []byte) error {
	var res UdaRegistrationParamsPrimaryFields
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UdaRegistrationParamsPrimaryFieldsAppAuthentication Specifies config for the app authentication
//
// swagger:model UdaRegistrationParamsPrimaryFieldsAppAuthentication
type UdaRegistrationParamsPrimaryFieldsAppAuthentication struct {

	// Specifies if the field will be hidden on the UI screen or not.
	Hidden *bool `json:"hidden,omitempty"`
}

// Validate validates this uda registration params primary fields app authentication
func (m *UdaRegistrationParamsPrimaryFieldsAppAuthentication) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this uda registration params primary fields app authentication based on context it is used
func (m *UdaRegistrationParamsPrimaryFieldsAppAuthentication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UdaRegistrationParamsPrimaryFieldsAppAuthentication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaRegistrationParamsPrimaryFieldsAppAuthentication) UnmarshalBinary(b []byte) error {
	var res UdaRegistrationParamsPrimaryFieldsAppAuthentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UdaRegistrationParamsPrimaryFieldsMountView Specifies if SMB/NFS view mounting should be enabled on source.
//
// swagger:model UdaRegistrationParamsPrimaryFieldsMountView
type UdaRegistrationParamsPrimaryFieldsMountView struct {

	// Default value for the field.
	DefaultValue *bool `json:"defaultValue,omitempty"`

	// Specifies if the field will be hidden on the UI screen or not.
	Hidden *bool `json:"hidden,omitempty"`
}

// Validate validates this uda registration params primary fields mount view
func (m *UdaRegistrationParamsPrimaryFieldsMountView) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this uda registration params primary fields mount view based on context it is used
func (m *UdaRegistrationParamsPrimaryFieldsMountView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UdaRegistrationParamsPrimaryFieldsMountView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaRegistrationParamsPrimaryFieldsMountView) UnmarshalBinary(b []byte) error {
	var res UdaRegistrationParamsPrimaryFieldsMountView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UdaRegistrationParamsPrimaryFieldsScriptDir Specifies the absolute path of scripts used to interact with the Universal Data Adapter source.
//
// swagger:model UdaRegistrationParamsPrimaryFieldsScriptDir
type UdaRegistrationParamsPrimaryFieldsScriptDir struct {

	// Default value for the field.
	DefaultValue *string `json:"defaultValue,omitempty"`
}

// Validate validates this uda registration params primary fields script dir
func (m *UdaRegistrationParamsPrimaryFieldsScriptDir) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this uda registration params primary fields script dir based on context it is used
func (m *UdaRegistrationParamsPrimaryFieldsScriptDir) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UdaRegistrationParamsPrimaryFieldsScriptDir) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaRegistrationParamsPrimaryFieldsScriptDir) UnmarshalBinary(b []byte) error {
	var res UdaRegistrationParamsPrimaryFieldsScriptDir
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs Specifies custom arguments to be supplied to the source registration.
//
// swagger:model UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs
type UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs struct {

	// Default value for the field.
	DefaultValue *string `json:"defaultValue,omitempty"`

	// Whether the field will be only a readonly field on the UI.
	Readonly *bool `json:"readonly,omitempty"`

	// Whether the field is mandatory.
	Required *bool `json:"required,omitempty"`

	// Specifies if the field will be hidden on the UI screen or not.
	Hidden *bool `json:"hidden,omitempty"`
}

// Validate validates this uda registration params primary fields source registration args
func (m *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this uda registration params primary fields source registration args based on context it is used
func (m *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs) UnmarshalBinary(b []byte) error {
	var res UdaRegistrationParamsPrimaryFieldsSourceRegistrationArgs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
