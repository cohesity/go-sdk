// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImportCertRequest Specifies the paramaters required to import external ca signed certificate
//
// swagger:model ImportCertRequest
type ImportCertRequest struct {

	// Certificate (pem) to be imported
	// Required: true
	CertPem *string `json:"certPem"`

	// Private key
	// Required: true
	PrivateKey *string `json:"privateKey"`

	// Full ca certificate chain in pem format.
	// Required: true
	CaChainPem []string `json:"caChainPem"`

	// Specifies the service that this certificate/key material is used.
	// Enum: ["kAll","kMagneto","kClusterUI"]
	ServiceType *string `json:"serviceType,omitempty"`

	// Specifies the tenant id
	TenantID *string `json:"tenantId,omitempty"`
}

// Validate validates this import cert request
func (m *ImportCertRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCertPem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaChainPem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImportCertRequest) validateCertPem(formats strfmt.Registry) error {

	if err := validate.Required("certPem", "body", m.CertPem); err != nil {
		return err
	}

	return nil
}

func (m *ImportCertRequest) validatePrivateKey(formats strfmt.Registry) error {

	if err := validate.Required("privateKey", "body", m.PrivateKey); err != nil {
		return err
	}

	return nil
}

func (m *ImportCertRequest) validateCaChainPem(formats strfmt.Registry) error {

	if err := validate.Required("caChainPem", "body", m.CaChainPem); err != nil {
		return err
	}

	return nil
}

var importCertRequestTypeServiceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kAll","kMagneto","kClusterUI"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		importCertRequestTypeServiceTypePropEnum = append(importCertRequestTypeServiceTypePropEnum, v)
	}
}

const (

	// ImportCertRequestServiceTypeKAll captures enum value "kAll"
	ImportCertRequestServiceTypeKAll string = "kAll"

	// ImportCertRequestServiceTypeKMagneto captures enum value "kMagneto"
	ImportCertRequestServiceTypeKMagneto string = "kMagneto"

	// ImportCertRequestServiceTypeKClusterUI captures enum value "kClusterUI"
	ImportCertRequestServiceTypeKClusterUI string = "kClusterUI"
)

// prop value enum
func (m *ImportCertRequest) validateServiceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, importCertRequestTypeServiceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ImportCertRequest) validateServiceType(formats strfmt.Registry) error {
	if swag.IsZero(m.ServiceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceTypeEnum("serviceType", "body", *m.ServiceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this import cert request based on context it is used
func (m *ImportCertRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ImportCertRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImportCertRequest) UnmarshalBinary(b []byte) error {
	var res ImportCertRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
