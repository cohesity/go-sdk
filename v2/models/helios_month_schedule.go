// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosMonthSchedule Month Schedule
//
// Specifies settings that define a schedule for a Protection Group runs to on specific week and specific days of that week.
//
// swagger:model HeliosMonthSchedule
type HeliosMonthSchedule struct {
	HeliosWeekSchedule

	// Specifies the week of the month (such as 'Third') in a Monthly Schedule specified by unit field as 'Months'. <br>This field is used in combination with 'dayOfWeek' to define the day in the month to start the Protection Group Run. <br> Example: if 'weekOfMonth' is set to 'Third' and day is set to 'Monday', a backup is performed on the third Monday of every month.
	// Enum: ["First","Second","Third","Fourth","Last"]
	WeekOfMonth *string `json:"weekOfMonth,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HeliosMonthSchedule) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 HeliosWeekSchedule
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.HeliosWeekSchedule = aO0

	// AO1
	var dataAO1 struct {
		WeekOfMonth *string `json:"weekOfMonth,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.WeekOfMonth = dataAO1.WeekOfMonth

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HeliosMonthSchedule) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.HeliosWeekSchedule)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		WeekOfMonth *string `json:"weekOfMonth,omitempty"`
	}

	dataAO1.WeekOfMonth = m.WeekOfMonth

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this helios month schedule
func (m *HeliosMonthSchedule) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HeliosWeekSchedule
	if err := m.HeliosWeekSchedule.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWeekOfMonth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var heliosMonthScheduleTypeWeekOfMonthPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["First","Second","Third","Fourth","Last"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heliosMonthScheduleTypeWeekOfMonthPropEnum = append(heliosMonthScheduleTypeWeekOfMonthPropEnum, v)
	}
}

// property enum
func (m *HeliosMonthSchedule) validateWeekOfMonthEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, heliosMonthScheduleTypeWeekOfMonthPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HeliosMonthSchedule) validateWeekOfMonth(formats strfmt.Registry) error {

	if swag.IsZero(m.WeekOfMonth) { // not required
		return nil
	}

	// value enum
	if err := m.validateWeekOfMonthEnum("weekOfMonth", "body", *m.WeekOfMonth); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this helios month schedule based on the context it is used
func (m *HeliosMonthSchedule) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with HeliosWeekSchedule
	if err := m.HeliosWeekSchedule.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HeliosMonthSchedule) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosMonthSchedule) UnmarshalBinary(b []byte) error {
	var res HeliosMonthSchedule
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
