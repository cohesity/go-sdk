// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VmwareSourceType VMware Source Type
//
// # VMware Source Type
//
// swagger:model VmwareSourceType
type VmwareSourceType struct {

	// Specifies the VMware Source types.
	// Enum: ["kVCenter","kStandaloneHost","kvCloudDirector"]
	VmwareSourceType string `json:"vmwareSourceType,omitempty"`
}

// Validate validates this vmware source type
func (m *VmwareSourceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateVmwareSourceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var vmwareSourceTypeTypeVmwareSourceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVCenter","kStandaloneHost","kvCloudDirector"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		vmwareSourceTypeTypeVmwareSourceTypePropEnum = append(vmwareSourceTypeTypeVmwareSourceTypePropEnum, v)
	}
}

const (

	// VmwareSourceTypeVmwareSourceTypeKVCenter captures enum value "kVCenter"
	VmwareSourceTypeVmwareSourceTypeKVCenter string = "kVCenter"

	// VmwareSourceTypeVmwareSourceTypeKStandaloneHost captures enum value "kStandaloneHost"
	VmwareSourceTypeVmwareSourceTypeKStandaloneHost string = "kStandaloneHost"

	// VmwareSourceTypeVmwareSourceTypeKvCloudDirector captures enum value "kvCloudDirector"
	VmwareSourceTypeVmwareSourceTypeKvCloudDirector string = "kvCloudDirector"
)

// prop value enum
func (m *VmwareSourceType) validateVmwareSourceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, vmwareSourceTypeTypeVmwareSourceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *VmwareSourceType) validateVmwareSourceType(formats strfmt.Registry) error {
	if swag.IsZero(m.VmwareSourceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateVmwareSourceTypeEnum("vmwareSourceType", "body", m.VmwareSourceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this vmware source type based on context it is used
func (m *VmwareSourceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *VmwareSourceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VmwareSourceType) UnmarshalBinary(b []byte) error {
	var res VmwareSourceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
