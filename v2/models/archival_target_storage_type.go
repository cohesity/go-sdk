// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArchivalTargetStorageType Archival Target Storage Type
//
// Specifies the storage type of External Target of archival purpose type.
//
// swagger:model ArchivalTargetStorageType
type ArchivalTargetStorageType struct {

	// Specifies the storage type of External Target of archival purpose type. Nas option in archival_target_storage_type will soon be deprecated. Please use NAS instead.
	// Enum: ["Azure","Google","AWS","Oracle","Nas","NAS","QStarTape","S3Compatible"]
	Enum string `json:"enum,omitempty"`
}

// Validate validates this archival target storage type
func (m *ArchivalTargetStorageType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnum(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var archivalTargetStorageTypeTypeEnumPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Azure","Google","AWS","Oracle","Nas","NAS","QStarTape","S3Compatible"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		archivalTargetStorageTypeTypeEnumPropEnum = append(archivalTargetStorageTypeTypeEnumPropEnum, v)
	}
}

const (

	// ArchivalTargetStorageTypeEnumAzure captures enum value "Azure"
	ArchivalTargetStorageTypeEnumAzure string = "Azure"

	// ArchivalTargetStorageTypeEnumGoogle captures enum value "Google"
	ArchivalTargetStorageTypeEnumGoogle string = "Google"

	// ArchivalTargetStorageTypeEnumAWS captures enum value "AWS"
	ArchivalTargetStorageTypeEnumAWS string = "AWS"

	// ArchivalTargetStorageTypeEnumOracle captures enum value "Oracle"
	ArchivalTargetStorageTypeEnumOracle string = "Oracle"

	// ArchivalTargetStorageTypeEnumNas captures enum value "Nas"
	ArchivalTargetStorageTypeEnumNas string = "Nas"

	// ArchivalTargetStorageTypeEnumNAS captures enum value "NAS"
	ArchivalTargetStorageTypeEnumNAS string = "NAS"

	// ArchivalTargetStorageTypeEnumQStarTape captures enum value "QStarTape"
	ArchivalTargetStorageTypeEnumQStarTape string = "QStarTape"

	// ArchivalTargetStorageTypeEnumS3Compatible captures enum value "S3Compatible"
	ArchivalTargetStorageTypeEnumS3Compatible string = "S3Compatible"
)

// prop value enum
func (m *ArchivalTargetStorageType) validateEnumEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, archivalTargetStorageTypeTypeEnumPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArchivalTargetStorageType) validateEnum(formats strfmt.Registry) error {
	if swag.IsZero(m.Enum) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnumEnum("enum", "body", m.Enum); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this archival target storage type based on context it is used
func (m *ArchivalTargetStorageType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ArchivalTargetStorageType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchivalTargetStorageType) UnmarshalBinary(b []byte) error {
	var res ArchivalTargetStorageType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
