// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// S3AbacServerResponse Specifies S3 ABAC server Response.
//
// swagger:model S3AbacServerResponse
type S3AbacServerResponse struct {

	// Specifies the ID of S3 ABAC server.
	// Required: true
	ID *int64 `json:"id"`

	// Specifies the hostname of S3 ABAC server.
	// Required: true
	Hostname *string `json:"hostname"`

	// Specifies the port of S3 ABAC server.
	// Required: true
	Port *int64 `json:"port"`

	// Specifies the path of URI for user requests.
	// Required: true
	BasePath *string `json:"basePath"`

	// Specifies the tenant Id for S3 ABAC server.
	TenantID *string `json:"tenantId,omitempty"`

	// Specifies the client certificate.
	// Required: true
	Certificate *string `json:"certificate"`

	// Specifies the intermediate certificates.
	// Required: true
	CaBundle *string `json:"caBundle"`
}

// Validate validates this s3 abac server response
func (m *S3AbacServerResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostname(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBasePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCertificate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCaBundle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *S3AbacServerResponse) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *S3AbacServerResponse) validateHostname(formats strfmt.Registry) error {

	if err := validate.Required("hostname", "body", m.Hostname); err != nil {
		return err
	}

	return nil
}

func (m *S3AbacServerResponse) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *S3AbacServerResponse) validateBasePath(formats strfmt.Registry) error {

	if err := validate.Required("basePath", "body", m.BasePath); err != nil {
		return err
	}

	return nil
}

func (m *S3AbacServerResponse) validateCertificate(formats strfmt.Registry) error {

	if err := validate.Required("certificate", "body", m.Certificate); err != nil {
		return err
	}

	return nil
}

func (m *S3AbacServerResponse) validateCaBundle(formats strfmt.Registry) error {

	if err := validate.Required("caBundle", "body", m.CaBundle); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this s3 abac server response based on context it is used
func (m *S3AbacServerResponse) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *S3AbacServerResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *S3AbacServerResponse) UnmarshalBinary(b []byte) error {
	var res S3AbacServerResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
