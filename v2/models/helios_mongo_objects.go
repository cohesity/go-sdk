// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HeliosMongoObjects Specifies the indexed Mongo objects.
//
// swagger:model HeliosMongoObjects
type HeliosMongoObjects []*HeliosMongoObjectsItems0

// Validate validates this helios mongo objects
func (m HeliosMongoObjects) Validate(formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {
		if swag.IsZero(m[i]) { // not required
			continue
		}

		if m[i] != nil {
			if err := m[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this helios mongo objects based on the context it is used
func (m HeliosMongoObjects) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	for i := 0; i < len(m); i++ {

		if m[i] != nil {

			if swag.IsZero(m[i]) { // not required
				return nil
			}

			if err := m[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName(strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName(strconv.Itoa(i))
				}
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// HeliosMongoObjectsItems0 helios mongo objects items0
//
// swagger:model HeliosMongoObjectsItems0
type HeliosMongoObjectsItems0 struct {
	GlobalClusterIdentifier

	MongoIndexedObject
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *HeliosMongoObjectsItems0) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 GlobalClusterIdentifier
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.GlobalClusterIdentifier = aO0

	// AO1
	var aO1 MongoIndexedObject
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.MongoIndexedObject = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m HeliosMongoObjectsItems0) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.GlobalClusterIdentifier)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)

	aO1, err := swag.WriteJSON(m.MongoIndexedObject)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this helios mongo objects items0
func (m *HeliosMongoObjectsItems0) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GlobalClusterIdentifier
	if err := m.GlobalClusterIdentifier.Validate(formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with MongoIndexedObject
	if err := m.MongoIndexedObject.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validate this helios mongo objects items0 based on the context it is used
func (m *HeliosMongoObjectsItems0) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with GlobalClusterIdentifier
	if err := m.GlobalClusterIdentifier.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}
	// validation for a type composition with MongoIndexedObject
	if err := m.MongoIndexedObject.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *HeliosMongoObjectsItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosMongoObjectsItems0) UnmarshalBinary(b []byte) error {
	var res HeliosMongoObjectsItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
