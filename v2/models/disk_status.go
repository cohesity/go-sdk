// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DiskStatus Disk Status
//
// # Disk Status
//
// swagger:model DiskStatus
type DiskStatus struct {

	// Disk Status
	// Enum: ["Active","Offline","Deleting","Deleted","DataVipNotReachable","FileSystemNotAccessible","FileSystemDeleted","Mounting","Migrating","Unknown"]
	DiskStatus string `json:"diskStatus,omitempty"`
}

// Validate validates this disk status
func (m *DiskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiskStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var diskStatusTypeDiskStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Offline","Deleting","Deleted","DataVipNotReachable","FileSystemNotAccessible","FileSystemDeleted","Mounting","Migrating","Unknown"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		diskStatusTypeDiskStatusPropEnum = append(diskStatusTypeDiskStatusPropEnum, v)
	}
}

const (

	// DiskStatusDiskStatusActive captures enum value "Active"
	DiskStatusDiskStatusActive string = "Active"

	// DiskStatusDiskStatusOffline captures enum value "Offline"
	DiskStatusDiskStatusOffline string = "Offline"

	// DiskStatusDiskStatusDeleting captures enum value "Deleting"
	DiskStatusDiskStatusDeleting string = "Deleting"

	// DiskStatusDiskStatusDeleted captures enum value "Deleted"
	DiskStatusDiskStatusDeleted string = "Deleted"

	// DiskStatusDiskStatusDataVipNotReachable captures enum value "DataVipNotReachable"
	DiskStatusDiskStatusDataVipNotReachable string = "DataVipNotReachable"

	// DiskStatusDiskStatusFileSystemNotAccessible captures enum value "FileSystemNotAccessible"
	DiskStatusDiskStatusFileSystemNotAccessible string = "FileSystemNotAccessible"

	// DiskStatusDiskStatusFileSystemDeleted captures enum value "FileSystemDeleted"
	DiskStatusDiskStatusFileSystemDeleted string = "FileSystemDeleted"

	// DiskStatusDiskStatusMounting captures enum value "Mounting"
	DiskStatusDiskStatusMounting string = "Mounting"

	// DiskStatusDiskStatusMigrating captures enum value "Migrating"
	DiskStatusDiskStatusMigrating string = "Migrating"

	// DiskStatusDiskStatusUnknown captures enum value "Unknown"
	DiskStatusDiskStatusUnknown string = "Unknown"
)

// prop value enum
func (m *DiskStatus) validateDiskStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, diskStatusTypeDiskStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *DiskStatus) validateDiskStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.DiskStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateDiskStatusEnum("diskStatus", "body", m.DiskStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this disk status based on context it is used
func (m *DiskStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *DiskStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DiskStatus) UnmarshalBinary(b []byte) error {
	var res DiskStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
