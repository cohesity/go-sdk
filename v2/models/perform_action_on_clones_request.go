// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PerformActionOnClonesRequest Perform action on clones request.
//
// Specifies the request parameters to perform an action on multiple clones.
//
// swagger:model PerformActionOnClonesRequest
type PerformActionOnClonesRequest struct {

	// Specifies the action to be performed.
	// Required: true
	// Enum: ["Cleanup"]
	Action *string `json:"action"`

	// cleanup params
	CleanupParams *CloneActionCleanupParams `json:"cleanupParams,omitempty"`
}

// Validate validates this perform action on clones request
func (m *PerformActionOnClonesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAction(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCleanupParams(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var performActionOnClonesRequestTypeActionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Cleanup"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		performActionOnClonesRequestTypeActionPropEnum = append(performActionOnClonesRequestTypeActionPropEnum, v)
	}
}

const (

	// PerformActionOnClonesRequestActionCleanup captures enum value "Cleanup"
	PerformActionOnClonesRequestActionCleanup string = "Cleanup"
)

// prop value enum
func (m *PerformActionOnClonesRequest) validateActionEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, performActionOnClonesRequestTypeActionPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PerformActionOnClonesRequest) validateAction(formats strfmt.Registry) error {

	if err := validate.Required("action", "body", m.Action); err != nil {
		return err
	}

	// value enum
	if err := m.validateActionEnum("action", "body", *m.Action); err != nil {
		return err
	}

	return nil
}

func (m *PerformActionOnClonesRequest) validateCleanupParams(formats strfmt.Registry) error {
	if swag.IsZero(m.CleanupParams) { // not required
		return nil
	}

	if m.CleanupParams != nil {
		if err := m.CleanupParams.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cleanupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cleanupParams")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this perform action on clones request based on the context it is used
func (m *PerformActionOnClonesRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateCleanupParams(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PerformActionOnClonesRequest) contextValidateCleanupParams(ctx context.Context, formats strfmt.Registry) error {

	if m.CleanupParams != nil {

		if swag.IsZero(m.CleanupParams) { // not required
			return nil
		}

		if err := m.CleanupParams.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cleanupParams")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cleanupParams")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PerformActionOnClonesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PerformActionOnClonesRequest) UnmarshalBinary(b []byte) error {
	var res PerformActionOnClonesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
