// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// HeliosBackupPolicy Backup Schedule and Retention.
//
// Specifies the backup schedule and retentions of a Protection Policy.
//
// swagger:model HeliosBackupPolicy
type HeliosBackupPolicy struct {

	// Specifies the Incremental and Full policy settings and also the common Retention policy settings.
	Regular *HeliosRegularBackupPolicy `json:"regular,omitempty"`

	// Specifies the Log backup schedule of a Protection Policy.
	Log *HeliosLogBackupPolicy `json:"log,omitempty"`

	// Specifies the BMR backup schedule of a Protection Policy.
	Bmr *HeliosBmrBackupPolicy `json:"bmr,omitempty"`

	// Specifies the settings for CDP (Continious Data Protection) Protection policy.
	Cdp *HeliosCdpBackupPolicy `json:"cdp,omitempty"`
}

// Validate validates this helios backup policy
func (m *HeliosBackupPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRegular(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLog(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBmr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCdp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosBackupPolicy) validateRegular(formats strfmt.Registry) error {
	if swag.IsZero(m.Regular) { // not required
		return nil
	}

	if m.Regular != nil {
		if err := m.Regular.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regular")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("regular")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosBackupPolicy) validateLog(formats strfmt.Registry) error {
	if swag.IsZero(m.Log) { // not required
		return nil
	}

	if m.Log != nil {
		if err := m.Log.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("log")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("log")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosBackupPolicy) validateBmr(formats strfmt.Registry) error {
	if swag.IsZero(m.Bmr) { // not required
		return nil
	}

	if m.Bmr != nil {
		if err := m.Bmr.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bmr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bmr")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosBackupPolicy) validateCdp(formats strfmt.Registry) error {
	if swag.IsZero(m.Cdp) { // not required
		return nil
	}

	if m.Cdp != nil {
		if err := m.Cdp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdp")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this helios backup policy based on the context it is used
func (m *HeliosBackupPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRegular(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLog(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateBmr(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCdp(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosBackupPolicy) contextValidateRegular(ctx context.Context, formats strfmt.Registry) error {

	if m.Regular != nil {

		if swag.IsZero(m.Regular) { // not required
			return nil
		}

		if err := m.Regular.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regular")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("regular")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosBackupPolicy) contextValidateLog(ctx context.Context, formats strfmt.Registry) error {

	if m.Log != nil {

		if swag.IsZero(m.Log) { // not required
			return nil
		}

		if err := m.Log.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("log")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("log")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosBackupPolicy) contextValidateBmr(ctx context.Context, formats strfmt.Registry) error {

	if m.Bmr != nil {

		if swag.IsZero(m.Bmr) { // not required
			return nil
		}

		if err := m.Bmr.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("bmr")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("bmr")
			}
			return err
		}
	}

	return nil
}

func (m *HeliosBackupPolicy) contextValidateCdp(ctx context.Context, formats strfmt.Registry) error {

	if m.Cdp != nil {

		if swag.IsZero(m.Cdp) { // not required
			return nil
		}

		if err := m.Cdp.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cdp")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("cdp")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosBackupPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosBackupPolicy) UnmarshalBinary(b []byte) error {
	var res HeliosBackupPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
