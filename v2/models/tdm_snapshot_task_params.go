// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TdmSnapshotTaskParams Specifies the parameters to create a snapshot of an existing clone.
//
// swagger:model TdmSnapshotTaskParams
type TdmSnapshotTaskParams struct {

	// Specifies the ID of the clone.
	// Required: true
	CloneID *string `json:"cloneId"`

	CommonTdmCloneSnapshotParams
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *TdmSnapshotTaskParams) UnmarshalJSON(raw []byte) error {
	// AO0
	var dataAO0 struct {
		CloneID *string `json:"cloneId"`
	}
	if err := swag.ReadJSON(raw, &dataAO0); err != nil {
		return err
	}

	m.CloneID = dataAO0.CloneID

	// AO1
	var aO1 CommonTdmCloneSnapshotParams
	if err := swag.ReadJSON(raw, &aO1); err != nil {
		return err
	}
	m.CommonTdmCloneSnapshotParams = aO1

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m TdmSnapshotTaskParams) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	var dataAO0 struct {
		CloneID *string `json:"cloneId"`
	}

	dataAO0.CloneID = m.CloneID

	jsonDataAO0, errAO0 := swag.WriteJSON(dataAO0)
	if errAO0 != nil {
		return nil, errAO0
	}
	_parts = append(_parts, jsonDataAO0)

	aO1, err := swag.WriteJSON(m.CommonTdmCloneSnapshotParams)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this tdm snapshot task params
func (m *TdmSnapshotTaskParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloneID(formats); err != nil {
		res = append(res, err)
	}

	// validation for a type composition with CommonTdmCloneSnapshotParams
	if err := m.CommonTdmCloneSnapshotParams.Validate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TdmSnapshotTaskParams) validateCloneID(formats strfmt.Registry) error {

	if err := validate.Required("cloneId", "body", m.CloneID); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this tdm snapshot task params based on the context it is used
func (m *TdmSnapshotTaskParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with CommonTdmCloneSnapshotParams
	if err := m.CommonTdmCloneSnapshotParams.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *TdmSnapshotTaskParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TdmSnapshotTaskParams) UnmarshalBinary(b []byte) error {
	var res TdmSnapshotTaskParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
