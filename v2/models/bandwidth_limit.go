// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BandwidthLimit Bandwidth Limit
//
// Specifies bandwidth limit for limiting the data transfer rate between the SaaS Connection and Helios to be enforced during the specified daily time period for the specified days of the week.
//
// swagger:model BandwidthLimit
type BandwidthLimit struct {

	// Specifies the value for the specified time period. The value is specified in bytes per second.
	BytesPerSecond *int64 `json:"bytesPerSecond,omitempty"`

	// Specifies a daily time period and days of the week when the bandwidth rate should be set.
	TimePeriods *TimeOfAWeek `json:"timePeriods,omitempty"`
}

// Validate validates this bandwidth limit
func (m *BandwidthLimit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimePeriods(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthLimit) validateTimePeriods(formats strfmt.Registry) error {
	if swag.IsZero(m.TimePeriods) { // not required
		return nil
	}

	if m.TimePeriods != nil {
		if err := m.TimePeriods.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timePeriods")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timePeriods")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this bandwidth limit based on the context it is used
func (m *BandwidthLimit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTimePeriods(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BandwidthLimit) contextValidateTimePeriods(ctx context.Context, formats strfmt.Registry) error {

	if m.TimePeriods != nil {

		if swag.IsZero(m.TimePeriods) { // not required
			return nil
		}

		if err := m.TimePeriods.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timePeriods")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timePeriods")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BandwidthLimit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BandwidthLimit) UnmarshalBinary(b []byte) error {
	var res BandwidthLimit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
