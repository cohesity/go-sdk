// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CurrentClusterOperations Current Cluster Operations.
//
// Specifies the current operations in a cluster.
//
// swagger:model CurrentClusterOperations
type CurrentClusterOperations struct {

	// Specifies the list of cluster operations.
	// Enum: ["None","Destroy","Upgrade","Clean","NodeRemoval","DiskRemoval","DiskAddition","NodeAddition","UploadPackageByUrl","UploadPackageAndUpgrade","BaseOSUpgrade","ServiceRestart","SystemServiceRestart"]
	Value string `json:"value,omitempty"`
}

// Validate validates this current cluster operations
func (m *CurrentClusterOperations) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var currentClusterOperationsTypeValuePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["None","Destroy","Upgrade","Clean","NodeRemoval","DiskRemoval","DiskAddition","NodeAddition","UploadPackageByUrl","UploadPackageAndUpgrade","BaseOSUpgrade","ServiceRestart","SystemServiceRestart"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		currentClusterOperationsTypeValuePropEnum = append(currentClusterOperationsTypeValuePropEnum, v)
	}
}

const (

	// CurrentClusterOperationsValueNone captures enum value "None"
	CurrentClusterOperationsValueNone string = "None"

	// CurrentClusterOperationsValueDestroy captures enum value "Destroy"
	CurrentClusterOperationsValueDestroy string = "Destroy"

	// CurrentClusterOperationsValueUpgrade captures enum value "Upgrade"
	CurrentClusterOperationsValueUpgrade string = "Upgrade"

	// CurrentClusterOperationsValueClean captures enum value "Clean"
	CurrentClusterOperationsValueClean string = "Clean"

	// CurrentClusterOperationsValueNodeRemoval captures enum value "NodeRemoval"
	CurrentClusterOperationsValueNodeRemoval string = "NodeRemoval"

	// CurrentClusterOperationsValueDiskRemoval captures enum value "DiskRemoval"
	CurrentClusterOperationsValueDiskRemoval string = "DiskRemoval"

	// CurrentClusterOperationsValueDiskAddition captures enum value "DiskAddition"
	CurrentClusterOperationsValueDiskAddition string = "DiskAddition"

	// CurrentClusterOperationsValueNodeAddition captures enum value "NodeAddition"
	CurrentClusterOperationsValueNodeAddition string = "NodeAddition"

	// CurrentClusterOperationsValueUploadPackageByURL captures enum value "UploadPackageByUrl"
	CurrentClusterOperationsValueUploadPackageByURL string = "UploadPackageByUrl"

	// CurrentClusterOperationsValueUploadPackageAndUpgrade captures enum value "UploadPackageAndUpgrade"
	CurrentClusterOperationsValueUploadPackageAndUpgrade string = "UploadPackageAndUpgrade"

	// CurrentClusterOperationsValueBaseOSUpgrade captures enum value "BaseOSUpgrade"
	CurrentClusterOperationsValueBaseOSUpgrade string = "BaseOSUpgrade"

	// CurrentClusterOperationsValueServiceRestart captures enum value "ServiceRestart"
	CurrentClusterOperationsValueServiceRestart string = "ServiceRestart"

	// CurrentClusterOperationsValueSystemServiceRestart captures enum value "SystemServiceRestart"
	CurrentClusterOperationsValueSystemServiceRestart string = "SystemServiceRestart"
)

// prop value enum
func (m *CurrentClusterOperations) validateValueEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, currentClusterOperationsTypeValuePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CurrentClusterOperations) validateValue(formats strfmt.Registry) error {
	if swag.IsZero(m.Value) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueEnum("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this current cluster operations based on context it is used
func (m *CurrentClusterOperations) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CurrentClusterOperations) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CurrentClusterOperations) UnmarshalBinary(b []byte) error {
	var res CurrentClusterOperations
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
