// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkInterfaceType Network Interface Type
//
// Type of a network interface.
//
// swagger:model NetworkInterfaceType
type NetworkInterfaceType struct {

	// Specifies the network interface type.
	// Enum: ["Physical","Bond","Bridge","Group","Vlan","VlanPhysical","VlanBond","VlanGroup","VlanBridge","Invalid"]
	NetworkInterfaceType string `json:"networkInterfaceType,omitempty"`
}

// Validate validates this network interface type
func (m *NetworkInterfaceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetworkInterfaceType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var networkInterfaceTypeTypeNetworkInterfaceTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Physical","Bond","Bridge","Group","Vlan","VlanPhysical","VlanBond","VlanGroup","VlanBridge","Invalid"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkInterfaceTypeTypeNetworkInterfaceTypePropEnum = append(networkInterfaceTypeTypeNetworkInterfaceTypePropEnum, v)
	}
}

const (

	// NetworkInterfaceTypeNetworkInterfaceTypePhysical captures enum value "Physical"
	NetworkInterfaceTypeNetworkInterfaceTypePhysical string = "Physical"

	// NetworkInterfaceTypeNetworkInterfaceTypeBond captures enum value "Bond"
	NetworkInterfaceTypeNetworkInterfaceTypeBond string = "Bond"

	// NetworkInterfaceTypeNetworkInterfaceTypeBridge captures enum value "Bridge"
	NetworkInterfaceTypeNetworkInterfaceTypeBridge string = "Bridge"

	// NetworkInterfaceTypeNetworkInterfaceTypeGroup captures enum value "Group"
	NetworkInterfaceTypeNetworkInterfaceTypeGroup string = "Group"

	// NetworkInterfaceTypeNetworkInterfaceTypeVlan captures enum value "Vlan"
	NetworkInterfaceTypeNetworkInterfaceTypeVlan string = "Vlan"

	// NetworkInterfaceTypeNetworkInterfaceTypeVlanPhysical captures enum value "VlanPhysical"
	NetworkInterfaceTypeNetworkInterfaceTypeVlanPhysical string = "VlanPhysical"

	// NetworkInterfaceTypeNetworkInterfaceTypeVlanBond captures enum value "VlanBond"
	NetworkInterfaceTypeNetworkInterfaceTypeVlanBond string = "VlanBond"

	// NetworkInterfaceTypeNetworkInterfaceTypeVlanGroup captures enum value "VlanGroup"
	NetworkInterfaceTypeNetworkInterfaceTypeVlanGroup string = "VlanGroup"

	// NetworkInterfaceTypeNetworkInterfaceTypeVlanBridge captures enum value "VlanBridge"
	NetworkInterfaceTypeNetworkInterfaceTypeVlanBridge string = "VlanBridge"

	// NetworkInterfaceTypeNetworkInterfaceTypeInvalid captures enum value "Invalid"
	NetworkInterfaceTypeNetworkInterfaceTypeInvalid string = "Invalid"
)

// prop value enum
func (m *NetworkInterfaceType) validateNetworkInterfaceTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, networkInterfaceTypeTypeNetworkInterfaceTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetworkInterfaceType) validateNetworkInterfaceType(formats strfmt.Registry) error {
	if swag.IsZero(m.NetworkInterfaceType) { // not required
		return nil
	}

	// value enum
	if err := m.validateNetworkInterfaceTypeEnum("networkInterfaceType", "body", m.NetworkInterfaceType); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this network interface type based on context it is used
func (m *NetworkInterfaceType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetworkInterfaceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkInterfaceType) UnmarshalBinary(b []byte) error {
	var res NetworkInterfaceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
