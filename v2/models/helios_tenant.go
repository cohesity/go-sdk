// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HeliosTenant HeliosTenant
//
// Description of a Tenant and it's properties on various clusters.
//
// swagger:model HeliosTenant
type HeliosTenant struct {

	// The tenant id.
	ID *string `json:"id,omitempty"`

	// Name of the Tenant
	Name *string `json:"name,omitempty"`

	// Description about the tenant.
	Description *string `json:"description,omitempty"`

	// Wether managed on helios or not.
	ManagedOnHelios *bool `json:"managedOnHelios,omitempty"`

	// Current Status of the Tenant.
	// Enum: ["Active","Inactive","MarkedForDeletion","Deleted"]
	Status *string `json:"status,omitempty"`

	// Details of tenant on each system that it is living.
	Systems []*HeliosClusterTenant `json:"systems"`

	// Epoch time when tenant was created.
	// Read Only: true
	CreatedAtTimeMsecs *int64 `json:"createdAtTimeMsecs,omitempty"`

	// Epoch time when tenant was last updated.
	// Read Only: true
	LastUpdatedAtTimeMsecs *int64 `json:"lastUpdatedAtTimeMsecs,omitempty"`

	// Epoch time when tenant was last updated.
	// Read Only: true
	DeletedAtTimeMsecs *int64 `json:"deletedAtTimeMsecs,omitempty"`
}

// Validate validates this helios tenant
func (m *HeliosTenant) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystems(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var heliosTenantTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Active","Inactive","MarkedForDeletion","Deleted"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		heliosTenantTypeStatusPropEnum = append(heliosTenantTypeStatusPropEnum, v)
	}
}

const (

	// HeliosTenantStatusActive captures enum value "Active"
	HeliosTenantStatusActive string = "Active"

	// HeliosTenantStatusInactive captures enum value "Inactive"
	HeliosTenantStatusInactive string = "Inactive"

	// HeliosTenantStatusMarkedForDeletion captures enum value "MarkedForDeletion"
	HeliosTenantStatusMarkedForDeletion string = "MarkedForDeletion"

	// HeliosTenantStatusDeleted captures enum value "Deleted"
	HeliosTenantStatusDeleted string = "Deleted"
)

// prop value enum
func (m *HeliosTenant) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, heliosTenantTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *HeliosTenant) validateStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *HeliosTenant) validateSystems(formats strfmt.Registry) error {
	if swag.IsZero(m.Systems) { // not required
		return nil
	}

	for i := 0; i < len(m.Systems); i++ {
		if swag.IsZero(m.Systems[i]) { // not required
			continue
		}

		if m.Systems[i] != nil {
			if err := m.Systems[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("systems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this helios tenant based on the context it is used
func (m *HeliosTenant) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateSystems(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCreatedAtTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateLastUpdatedAtTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateDeletedAtTimeMsecs(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HeliosTenant) contextValidateSystems(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Systems); i++ {

		if m.Systems[i] != nil {

			if swag.IsZero(m.Systems[i]) { // not required
				return nil
			}

			if err := m.Systems[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("systems" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("systems" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *HeliosTenant) contextValidateCreatedAtTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "createdAtTimeMsecs", "body", m.CreatedAtTimeMsecs); err != nil {
		return err
	}

	return nil
}

func (m *HeliosTenant) contextValidateLastUpdatedAtTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "lastUpdatedAtTimeMsecs", "body", m.LastUpdatedAtTimeMsecs); err != nil {
		return err
	}

	return nil
}

func (m *HeliosTenant) contextValidateDeletedAtTimeMsecs(ctx context.Context, formats strfmt.Registry) error {

	if err := validate.ReadOnly(ctx, "deletedAtTimeMsecs", "body", m.DeletedAtTimeMsecs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HeliosTenant) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HeliosTenant) UnmarshalBinary(b []byte) error {
	var res HeliosTenant
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
