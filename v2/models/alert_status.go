// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AlertStatus Alert Status type.
//
// Alert Status type.
//
// swagger:model AlertStatus
type AlertStatus struct {

	// Specifies Alert Status type.
	// Enum: ["kSuccess","kFailure","kSlaViolation","kWarning"]
	AlertStatus string `json:"alertStatus,omitempty"`
}

// Validate validates this alert status
func (m *AlertStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAlertStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var alertStatusTypeAlertStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kSuccess","kFailure","kSlaViolation","kWarning"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		alertStatusTypeAlertStatusPropEnum = append(alertStatusTypeAlertStatusPropEnum, v)
	}
}

const (

	// AlertStatusAlertStatusKSuccess captures enum value "kSuccess"
	AlertStatusAlertStatusKSuccess string = "kSuccess"

	// AlertStatusAlertStatusKFailure captures enum value "kFailure"
	AlertStatusAlertStatusKFailure string = "kFailure"

	// AlertStatusAlertStatusKSLAViolation captures enum value "kSlaViolation"
	AlertStatusAlertStatusKSLAViolation string = "kSlaViolation"

	// AlertStatusAlertStatusKWarning captures enum value "kWarning"
	AlertStatusAlertStatusKWarning string = "kWarning"
)

// prop value enum
func (m *AlertStatus) validateAlertStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, alertStatusTypeAlertStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *AlertStatus) validateAlertStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.AlertStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlertStatusEnum("alertStatus", "body", m.AlertStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this alert status based on context it is used
func (m *AlertStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AlertStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AlertStatus) UnmarshalBinary(b []byte) error {
	var res AlertStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
