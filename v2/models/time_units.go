// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TimeUnits Time Units type.
//
// Time Units type.
//
// swagger:model TimeUnits
type TimeUnits struct {

	// Specifies Time Units type.
	// Enum: ["Minutes","Hours","Days","Weeks","Months","Years"]
	TimeUnits string `json:"timeUnits,omitempty"`
}

// Validate validates this time units
func (m *TimeUnits) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTimeUnits(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var timeUnitsTypeTimeUnitsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Minutes","Hours","Days","Weeks","Months","Years"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		timeUnitsTypeTimeUnitsPropEnum = append(timeUnitsTypeTimeUnitsPropEnum, v)
	}
}

const (

	// TimeUnitsTimeUnitsMinutes captures enum value "Minutes"
	TimeUnitsTimeUnitsMinutes string = "Minutes"

	// TimeUnitsTimeUnitsHours captures enum value "Hours"
	TimeUnitsTimeUnitsHours string = "Hours"

	// TimeUnitsTimeUnitsDays captures enum value "Days"
	TimeUnitsTimeUnitsDays string = "Days"

	// TimeUnitsTimeUnitsWeeks captures enum value "Weeks"
	TimeUnitsTimeUnitsWeeks string = "Weeks"

	// TimeUnitsTimeUnitsMonths captures enum value "Months"
	TimeUnitsTimeUnitsMonths string = "Months"

	// TimeUnitsTimeUnitsYears captures enum value "Years"
	TimeUnitsTimeUnitsYears string = "Years"
)

// prop value enum
func (m *TimeUnits) validateTimeUnitsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, timeUnitsTypeTimeUnitsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *TimeUnits) validateTimeUnits(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeUnits) { // not required
		return nil
	}

	// value enum
	if err := m.validateTimeUnitsEnum("timeUnits", "body", m.TimeUnits); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this time units based on context it is used
func (m *TimeUnits) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *TimeUnits) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TimeUnits) UnmarshalBinary(b []byte) error {
	var res TimeUnits
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
