// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureFleetInfo Update Azure Fleet Env Info Request.
//
// Specifies the params to add Azure specific fleet env info.
//
// swagger:model AzureFleetInfo
type AzureFleetInfo struct {

	// Specifies the client Id.
	// Required: true
	ClientID *string `json:"clientId"`

	// Specifies the region of Azure dataplane cluster.
	// Required: true
	Region *string `json:"region"`

	// Specifies the virtual network of Azure dataplane cluster.
	// Required: true
	VnetName *string `json:"vnetName"`

	// Specifies the subnet of Azure dataplane cluster.
	// Required: true
	SubnetName *string `json:"subnetName"`

	// Specifies the appplication security group of Azure dataplane cluster.
	// Required: true
	AppSecurityGroupName *string `json:"appSecurityGroupName"`

	// Specifies the proximity placement group of Azure dataplane cluster.
	// Required: true
	ProximityPlacementGroupName *string `json:"proximityPlacementGroupName"`

	// Specifies the availabilty set of Azure dataplane cluster.
	// Required: true
	AvailabilitySetName *string `json:"availabilitySetName"`

	// Specifies the resource group of Azure dataplane cluster.
	// Required: true
	ResourceGroupName *string `json:"resourceGroupName"`
}

// Validate validates this azure fleet info
func (m *AzureFleetInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegion(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVnetName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppSecurityGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProximityPlacementGroupName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAvailabilitySetName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroupName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureFleetInfo) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("clientId", "body", m.ClientID); err != nil {
		return err
	}

	return nil
}

func (m *AzureFleetInfo) validateRegion(formats strfmt.Registry) error {

	if err := validate.Required("region", "body", m.Region); err != nil {
		return err
	}

	return nil
}

func (m *AzureFleetInfo) validateVnetName(formats strfmt.Registry) error {

	if err := validate.Required("vnetName", "body", m.VnetName); err != nil {
		return err
	}

	return nil
}

func (m *AzureFleetInfo) validateSubnetName(formats strfmt.Registry) error {

	if err := validate.Required("subnetName", "body", m.SubnetName); err != nil {
		return err
	}

	return nil
}

func (m *AzureFleetInfo) validateAppSecurityGroupName(formats strfmt.Registry) error {

	if err := validate.Required("appSecurityGroupName", "body", m.AppSecurityGroupName); err != nil {
		return err
	}

	return nil
}

func (m *AzureFleetInfo) validateProximityPlacementGroupName(formats strfmt.Registry) error {

	if err := validate.Required("proximityPlacementGroupName", "body", m.ProximityPlacementGroupName); err != nil {
		return err
	}

	return nil
}

func (m *AzureFleetInfo) validateAvailabilitySetName(formats strfmt.Registry) error {

	if err := validate.Required("availabilitySetName", "body", m.AvailabilitySetName); err != nil {
		return err
	}

	return nil
}

func (m *AzureFleetInfo) validateResourceGroupName(formats strfmt.Registry) error {

	if err := validate.Required("resourceGroupName", "body", m.ResourceGroupName); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this azure fleet info based on context it is used
func (m *AzureFleetInfo) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *AzureFleetInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureFleetInfo) UnmarshalBinary(b []byte) error {
	var res AzureFleetInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
