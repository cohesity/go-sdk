// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectBackupSnapshotStatus Object Backup Snapshot Status type.
//
// Object Backup Snapshot Status type.
//
// swagger:model ObjectBackupSnapshotStatus
type ObjectBackupSnapshotStatus struct {

	// Specifies Object Backup Snapshot Status type.
	// Enum: ["kInProgress","kSuccessful","kFailed","kWaitingForNextAttempt","kWarning","kCurrentAttemptPaused","kCurrentAttemptResuming","kCurrentAttemptPausing","kWaitingForOlderBackupRun","kSkipped"]
	ObjectBackupSnapshotStatus string `json:"objectBackupSnapshotStatus,omitempty"`
}

// Validate validates this object backup snapshot status
func (m *ObjectBackupSnapshotStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateObjectBackupSnapshotStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var objectBackupSnapshotStatusTypeObjectBackupSnapshotStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kInProgress","kSuccessful","kFailed","kWaitingForNextAttempt","kWarning","kCurrentAttemptPaused","kCurrentAttemptResuming","kCurrentAttemptPausing","kWaitingForOlderBackupRun","kSkipped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectBackupSnapshotStatusTypeObjectBackupSnapshotStatusPropEnum = append(objectBackupSnapshotStatusTypeObjectBackupSnapshotStatusPropEnum, v)
	}
}

const (

	// ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKInProgress captures enum value "kInProgress"
	ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKInProgress string = "kInProgress"

	// ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKSuccessful captures enum value "kSuccessful"
	ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKSuccessful string = "kSuccessful"

	// ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKFailed captures enum value "kFailed"
	ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKFailed string = "kFailed"

	// ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKWaitingForNextAttempt captures enum value "kWaitingForNextAttempt"
	ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKWaitingForNextAttempt string = "kWaitingForNextAttempt"

	// ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKWarning captures enum value "kWarning"
	ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKWarning string = "kWarning"

	// ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKCurrentAttemptPaused captures enum value "kCurrentAttemptPaused"
	ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKCurrentAttemptPaused string = "kCurrentAttemptPaused"

	// ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKCurrentAttemptResuming captures enum value "kCurrentAttemptResuming"
	ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKCurrentAttemptResuming string = "kCurrentAttemptResuming"

	// ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKCurrentAttemptPausing captures enum value "kCurrentAttemptPausing"
	ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKCurrentAttemptPausing string = "kCurrentAttemptPausing"

	// ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKWaitingForOlderBackupRun captures enum value "kWaitingForOlderBackupRun"
	ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKWaitingForOlderBackupRun string = "kWaitingForOlderBackupRun"

	// ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKSkipped captures enum value "kSkipped"
	ObjectBackupSnapshotStatusObjectBackupSnapshotStatusKSkipped string = "kSkipped"
)

// prop value enum
func (m *ObjectBackupSnapshotStatus) validateObjectBackupSnapshotStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, objectBackupSnapshotStatusTypeObjectBackupSnapshotStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ObjectBackupSnapshotStatus) validateObjectBackupSnapshotStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.ObjectBackupSnapshotStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateObjectBackupSnapshotStatusEnum("objectBackupSnapshotStatus", "body", m.ObjectBackupSnapshotStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this object backup snapshot status based on context it is used
func (m *ObjectBackupSnapshotStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ObjectBackupSnapshotStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectBackupSnapshotStatus) UnmarshalBinary(b []byte) error {
	var res ObjectBackupSnapshotStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
