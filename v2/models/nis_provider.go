// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NisProvider Specifies an NIS Provider.
//
// swagger:model NisProvider
type NisProvider struct {

	// Specifies the Domain Name of NIS Provider.
	// Required: true
	Domain *string `json:"domain"`

	// Specifies the hostname of Master Server.
	// Required: true
	MasterServerHostname *string `json:"masterServerHostname"`

	// Specifies a list of slave servers in the NIS Domain.
	SlaveServers []string `json:"slaveServers"`

	// Specifies the list of tenant Ids for NIS Provider.
	TenantIds []string `json:"tenantIds"`
}

// Validate validates this nis provider
func (m *NisProvider) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDomain(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterServerHostname(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NisProvider) validateDomain(formats strfmt.Registry) error {

	if err := validate.Required("domain", "body", m.Domain); err != nil {
		return err
	}

	return nil
}

func (m *NisProvider) validateMasterServerHostname(formats strfmt.Registry) error {

	if err := validate.Required("masterServerHostname", "body", m.MasterServerHostname); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this nis provider based on context it is used
func (m *NisProvider) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NisProvider) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NisProvider) UnmarshalBinary(b []byte) error {
	var res NisProvider
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
