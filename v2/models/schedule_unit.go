// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScheduleUnit ScheduleUnit
//
// # Schedule Units
//
// swagger:model ScheduleUnit
type ScheduleUnit struct {

	// Specifies the schedule unit.
	// Enum: ["Runs","Hours","Days","Weeks","Months","Years"]
	ScheduleUnit string `json:"scheduleUnit,omitempty"`
}

// Validate validates this schedule unit
func (m *ScheduleUnit) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateScheduleUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scheduleUnitTypeScheduleUnitPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Runs","Hours","Days","Weeks","Months","Years"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		scheduleUnitTypeScheduleUnitPropEnum = append(scheduleUnitTypeScheduleUnitPropEnum, v)
	}
}

const (

	// ScheduleUnitScheduleUnitRuns captures enum value "Runs"
	ScheduleUnitScheduleUnitRuns string = "Runs"

	// ScheduleUnitScheduleUnitHours captures enum value "Hours"
	ScheduleUnitScheduleUnitHours string = "Hours"

	// ScheduleUnitScheduleUnitDays captures enum value "Days"
	ScheduleUnitScheduleUnitDays string = "Days"

	// ScheduleUnitScheduleUnitWeeks captures enum value "Weeks"
	ScheduleUnitScheduleUnitWeeks string = "Weeks"

	// ScheduleUnitScheduleUnitMonths captures enum value "Months"
	ScheduleUnitScheduleUnitMonths string = "Months"

	// ScheduleUnitScheduleUnitYears captures enum value "Years"
	ScheduleUnitScheduleUnitYears string = "Years"
)

// prop value enum
func (m *ScheduleUnit) validateScheduleUnitEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, scheduleUnitTypeScheduleUnitPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ScheduleUnit) validateScheduleUnit(formats strfmt.Registry) error {
	if swag.IsZero(m.ScheduleUnit) { // not required
		return nil
	}

	// value enum
	if err := m.validateScheduleUnitEnum("scheduleUnit", "body", m.ScheduleUnit); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this schedule unit based on context it is used
func (m *ScheduleUnit) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ScheduleUnit) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScheduleUnit) UnmarshalBinary(b []byte) error {
	var res ScheduleUnit
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
