// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicTaskStatus PublicTaskStatus
//
// # Public Task Status
//
// swagger:model PublicTaskStatus
type PublicTaskStatus struct {

	// Specifies the public task status.
	// Enum: ["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped"]
	PublicTaskStatus string `json:"publicTaskStatus,omitempty"`
}

// Validate validates this public task status
func (m *PublicTaskStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicTaskStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var publicTaskStatusTypePublicTaskStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Accepted","Running","Canceled","Canceling","Failed","Missed","Succeeded","SucceededWithWarning","OnHold","Finalizing","Skipped"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicTaskStatusTypePublicTaskStatusPropEnum = append(publicTaskStatusTypePublicTaskStatusPropEnum, v)
	}
}

const (

	// PublicTaskStatusPublicTaskStatusAccepted captures enum value "Accepted"
	PublicTaskStatusPublicTaskStatusAccepted string = "Accepted"

	// PublicTaskStatusPublicTaskStatusRunning captures enum value "Running"
	PublicTaskStatusPublicTaskStatusRunning string = "Running"

	// PublicTaskStatusPublicTaskStatusCanceled captures enum value "Canceled"
	PublicTaskStatusPublicTaskStatusCanceled string = "Canceled"

	// PublicTaskStatusPublicTaskStatusCanceling captures enum value "Canceling"
	PublicTaskStatusPublicTaskStatusCanceling string = "Canceling"

	// PublicTaskStatusPublicTaskStatusFailed captures enum value "Failed"
	PublicTaskStatusPublicTaskStatusFailed string = "Failed"

	// PublicTaskStatusPublicTaskStatusMissed captures enum value "Missed"
	PublicTaskStatusPublicTaskStatusMissed string = "Missed"

	// PublicTaskStatusPublicTaskStatusSucceeded captures enum value "Succeeded"
	PublicTaskStatusPublicTaskStatusSucceeded string = "Succeeded"

	// PublicTaskStatusPublicTaskStatusSucceededWithWarning captures enum value "SucceededWithWarning"
	PublicTaskStatusPublicTaskStatusSucceededWithWarning string = "SucceededWithWarning"

	// PublicTaskStatusPublicTaskStatusOnHold captures enum value "OnHold"
	PublicTaskStatusPublicTaskStatusOnHold string = "OnHold"

	// PublicTaskStatusPublicTaskStatusFinalizing captures enum value "Finalizing"
	PublicTaskStatusPublicTaskStatusFinalizing string = "Finalizing"

	// PublicTaskStatusPublicTaskStatusSkipped captures enum value "Skipped"
	PublicTaskStatusPublicTaskStatusSkipped string = "Skipped"
)

// prop value enum
func (m *PublicTaskStatus) validatePublicTaskStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicTaskStatusTypePublicTaskStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicTaskStatus) validatePublicTaskStatus(formats strfmt.Registry) error {
	if swag.IsZero(m.PublicTaskStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublicTaskStatusEnum("publicTaskStatus", "body", m.PublicTaskStatus); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this public task status based on context it is used
func (m *PublicTaskStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *PublicTaskStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicTaskStatus) UnmarshalBinary(b []byte) error {
	var res PublicTaskStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
