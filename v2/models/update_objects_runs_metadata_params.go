// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateObjectsRunsMetadataParams Specifies the params for updating one or more runs of one or more objects.
//
// swagger:model UpdateObjectsRunsMetadataParams
type UpdateObjectsRunsMetadataParams struct {

	// An array of objects. Each containing object id and the run start time that we want to target.
	TargetObjectRuns []*TargetObjectRun `json:"targetObjectRuns"`

	// Specifies the time ranges in usecs. The start time in microseconds of the range between which the runs must be updated. The end time in microseconds of the range between which the runs must be updated. End time cannot be a future date i.e. since legal hold can be executed on a run that is already completed, we cannot enforce a rule that says to put a run that will be completed in the future in legal hold.
	TimeRange *TimeRangeUsecs `json:"timeRange,omitempty"`

	// Specifies whether to retain the snapshot for legal purpose. If set to 'enable', the snapshots cannot be deleted until the retention period. Note that using this option may cause the Cluster to run out of space. This field can be set only by a User having Data Security Role.  If set to 'release', the snapshots under legal hold will be released.
	// Enum: ["Enable","Release"]
	LegalHold *string `json:"legalHold,omitempty"`

	// Specifies the Retention period of snapshot in days, months or years to retain copied Snapshots on the target.
	Retention *Retention `json:"retention,omitempty"`

	// Specifies the environment.
	// Enum: ["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kUDA","kSfdc"]
	Environment string `json:"environment,omitempty"`
}

// Validate validates this update objects runs metadata params
func (m *UpdateObjectsRunsMetadataParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTargetObjectRuns(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimeRange(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLegalHold(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRetention(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateObjectsRunsMetadataParams) validateTargetObjectRuns(formats strfmt.Registry) error {
	if swag.IsZero(m.TargetObjectRuns) { // not required
		return nil
	}

	for i := 0; i < len(m.TargetObjectRuns); i++ {
		if swag.IsZero(m.TargetObjectRuns[i]) { // not required
			continue
		}

		if m.TargetObjectRuns[i] != nil {
			if err := m.TargetObjectRuns[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetObjectRuns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetObjectRuns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateObjectsRunsMetadataParams) validateTimeRange(formats strfmt.Registry) error {
	if swag.IsZero(m.TimeRange) { // not required
		return nil
	}

	if m.TimeRange != nil {
		if err := m.TimeRange.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeRange")
			}
			return err
		}
	}

	return nil
}

var updateObjectsRunsMetadataParamsTypeLegalHoldPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Enable","Release"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateObjectsRunsMetadataParamsTypeLegalHoldPropEnum = append(updateObjectsRunsMetadataParamsTypeLegalHoldPropEnum, v)
	}
}

const (

	// UpdateObjectsRunsMetadataParamsLegalHoldEnable captures enum value "Enable"
	UpdateObjectsRunsMetadataParamsLegalHoldEnable string = "Enable"

	// UpdateObjectsRunsMetadataParamsLegalHoldRelease captures enum value "Release"
	UpdateObjectsRunsMetadataParamsLegalHoldRelease string = "Release"
)

// prop value enum
func (m *UpdateObjectsRunsMetadataParams) validateLegalHoldEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateObjectsRunsMetadataParamsTypeLegalHoldPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateObjectsRunsMetadataParams) validateLegalHold(formats strfmt.Registry) error {
	if swag.IsZero(m.LegalHold) { // not required
		return nil
	}

	// value enum
	if err := m.validateLegalHoldEnum("legalHold", "body", *m.LegalHold); err != nil {
		return err
	}

	return nil
}

func (m *UpdateObjectsRunsMetadataParams) validateRetention(formats strfmt.Registry) error {
	if swag.IsZero(m.Retention) { // not required
		return nil
	}

	if m.Retention != nil {
		if err := m.Retention.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

var updateObjectsRunsMetadataParamsTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kVMware","kHyperV","kVCD","kAzure","kGCP","kKVM","kAcropolis","kAWS","kAWSNative","kAwsS3","kAWSSnapshotManager","kRDSSnapshotManager","kAuroraSnapshotManager","kAwsRDSPostgresBackup","kAzureNative","kAzureSQL","kAzureSnapshotManager","kPhysical","kPhysicalFiles","kGPFS","kElastifile","kNetapp","kGenericNas","kIsilon","kFlashBlade","kPure","kIbmFlashSystem","kSQL","kExchange","kAD","kOracle","kView","kRemoteAdapter","kO365","kO365PublicFolders","kO365Teams","kO365Group","kO365Exchange","kO365OneDrive","kO365Sharepoint","kKubernetes","kCassandra","kMongoDB","kCouchbase","kHdfs","kHive","kHBase","kUDA","kSfdc"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateObjectsRunsMetadataParamsTypeEnvironmentPropEnum = append(updateObjectsRunsMetadataParamsTypeEnvironmentPropEnum, v)
	}
}

const (

	// UpdateObjectsRunsMetadataParamsEnvironmentKVMware captures enum value "kVMware"
	UpdateObjectsRunsMetadataParamsEnvironmentKVMware string = "kVMware"

	// UpdateObjectsRunsMetadataParamsEnvironmentKHyperV captures enum value "kHyperV"
	UpdateObjectsRunsMetadataParamsEnvironmentKHyperV string = "kHyperV"

	// UpdateObjectsRunsMetadataParamsEnvironmentKVCD captures enum value "kVCD"
	UpdateObjectsRunsMetadataParamsEnvironmentKVCD string = "kVCD"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAzure captures enum value "kAzure"
	UpdateObjectsRunsMetadataParamsEnvironmentKAzure string = "kAzure"

	// UpdateObjectsRunsMetadataParamsEnvironmentKGCP captures enum value "kGCP"
	UpdateObjectsRunsMetadataParamsEnvironmentKGCP string = "kGCP"

	// UpdateObjectsRunsMetadataParamsEnvironmentKKVM captures enum value "kKVM"
	UpdateObjectsRunsMetadataParamsEnvironmentKKVM string = "kKVM"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAcropolis captures enum value "kAcropolis"
	UpdateObjectsRunsMetadataParamsEnvironmentKAcropolis string = "kAcropolis"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAWS captures enum value "kAWS"
	UpdateObjectsRunsMetadataParamsEnvironmentKAWS string = "kAWS"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAWSNative captures enum value "kAWSNative"
	UpdateObjectsRunsMetadataParamsEnvironmentKAWSNative string = "kAWSNative"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAwsS3 captures enum value "kAwsS3"
	UpdateObjectsRunsMetadataParamsEnvironmentKAwsS3 string = "kAwsS3"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAWSSnapshotManager captures enum value "kAWSSnapshotManager"
	UpdateObjectsRunsMetadataParamsEnvironmentKAWSSnapshotManager string = "kAWSSnapshotManager"

	// UpdateObjectsRunsMetadataParamsEnvironmentKRDSSnapshotManager captures enum value "kRDSSnapshotManager"
	UpdateObjectsRunsMetadataParamsEnvironmentKRDSSnapshotManager string = "kRDSSnapshotManager"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAuroraSnapshotManager captures enum value "kAuroraSnapshotManager"
	UpdateObjectsRunsMetadataParamsEnvironmentKAuroraSnapshotManager string = "kAuroraSnapshotManager"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAwsRDSPostgresBackup captures enum value "kAwsRDSPostgresBackup"
	UpdateObjectsRunsMetadataParamsEnvironmentKAwsRDSPostgresBackup string = "kAwsRDSPostgresBackup"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAzureNative captures enum value "kAzureNative"
	UpdateObjectsRunsMetadataParamsEnvironmentKAzureNative string = "kAzureNative"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAzureSQL captures enum value "kAzureSQL"
	UpdateObjectsRunsMetadataParamsEnvironmentKAzureSQL string = "kAzureSQL"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAzureSnapshotManager captures enum value "kAzureSnapshotManager"
	UpdateObjectsRunsMetadataParamsEnvironmentKAzureSnapshotManager string = "kAzureSnapshotManager"

	// UpdateObjectsRunsMetadataParamsEnvironmentKPhysical captures enum value "kPhysical"
	UpdateObjectsRunsMetadataParamsEnvironmentKPhysical string = "kPhysical"

	// UpdateObjectsRunsMetadataParamsEnvironmentKPhysicalFiles captures enum value "kPhysicalFiles"
	UpdateObjectsRunsMetadataParamsEnvironmentKPhysicalFiles string = "kPhysicalFiles"

	// UpdateObjectsRunsMetadataParamsEnvironmentKGPFS captures enum value "kGPFS"
	UpdateObjectsRunsMetadataParamsEnvironmentKGPFS string = "kGPFS"

	// UpdateObjectsRunsMetadataParamsEnvironmentKElastifile captures enum value "kElastifile"
	UpdateObjectsRunsMetadataParamsEnvironmentKElastifile string = "kElastifile"

	// UpdateObjectsRunsMetadataParamsEnvironmentKNetapp captures enum value "kNetapp"
	UpdateObjectsRunsMetadataParamsEnvironmentKNetapp string = "kNetapp"

	// UpdateObjectsRunsMetadataParamsEnvironmentKGenericNas captures enum value "kGenericNas"
	UpdateObjectsRunsMetadataParamsEnvironmentKGenericNas string = "kGenericNas"

	// UpdateObjectsRunsMetadataParamsEnvironmentKIsilon captures enum value "kIsilon"
	UpdateObjectsRunsMetadataParamsEnvironmentKIsilon string = "kIsilon"

	// UpdateObjectsRunsMetadataParamsEnvironmentKFlashBlade captures enum value "kFlashBlade"
	UpdateObjectsRunsMetadataParamsEnvironmentKFlashBlade string = "kFlashBlade"

	// UpdateObjectsRunsMetadataParamsEnvironmentKPure captures enum value "kPure"
	UpdateObjectsRunsMetadataParamsEnvironmentKPure string = "kPure"

	// UpdateObjectsRunsMetadataParamsEnvironmentKIbmFlashSystem captures enum value "kIbmFlashSystem"
	UpdateObjectsRunsMetadataParamsEnvironmentKIbmFlashSystem string = "kIbmFlashSystem"

	// UpdateObjectsRunsMetadataParamsEnvironmentKSQL captures enum value "kSQL"
	UpdateObjectsRunsMetadataParamsEnvironmentKSQL string = "kSQL"

	// UpdateObjectsRunsMetadataParamsEnvironmentKExchange captures enum value "kExchange"
	UpdateObjectsRunsMetadataParamsEnvironmentKExchange string = "kExchange"

	// UpdateObjectsRunsMetadataParamsEnvironmentKAD captures enum value "kAD"
	UpdateObjectsRunsMetadataParamsEnvironmentKAD string = "kAD"

	// UpdateObjectsRunsMetadataParamsEnvironmentKOracle captures enum value "kOracle"
	UpdateObjectsRunsMetadataParamsEnvironmentKOracle string = "kOracle"

	// UpdateObjectsRunsMetadataParamsEnvironmentKView captures enum value "kView"
	UpdateObjectsRunsMetadataParamsEnvironmentKView string = "kView"

	// UpdateObjectsRunsMetadataParamsEnvironmentKRemoteAdapter captures enum value "kRemoteAdapter"
	UpdateObjectsRunsMetadataParamsEnvironmentKRemoteAdapter string = "kRemoteAdapter"

	// UpdateObjectsRunsMetadataParamsEnvironmentKO365 captures enum value "kO365"
	UpdateObjectsRunsMetadataParamsEnvironmentKO365 string = "kO365"

	// UpdateObjectsRunsMetadataParamsEnvironmentKO365PublicFolders captures enum value "kO365PublicFolders"
	UpdateObjectsRunsMetadataParamsEnvironmentKO365PublicFolders string = "kO365PublicFolders"

	// UpdateObjectsRunsMetadataParamsEnvironmentKO365Teams captures enum value "kO365Teams"
	UpdateObjectsRunsMetadataParamsEnvironmentKO365Teams string = "kO365Teams"

	// UpdateObjectsRunsMetadataParamsEnvironmentKO365Group captures enum value "kO365Group"
	UpdateObjectsRunsMetadataParamsEnvironmentKO365Group string = "kO365Group"

	// UpdateObjectsRunsMetadataParamsEnvironmentKO365Exchange captures enum value "kO365Exchange"
	UpdateObjectsRunsMetadataParamsEnvironmentKO365Exchange string = "kO365Exchange"

	// UpdateObjectsRunsMetadataParamsEnvironmentKO365OneDrive captures enum value "kO365OneDrive"
	UpdateObjectsRunsMetadataParamsEnvironmentKO365OneDrive string = "kO365OneDrive"

	// UpdateObjectsRunsMetadataParamsEnvironmentKO365Sharepoint captures enum value "kO365Sharepoint"
	UpdateObjectsRunsMetadataParamsEnvironmentKO365Sharepoint string = "kO365Sharepoint"

	// UpdateObjectsRunsMetadataParamsEnvironmentKKubernetes captures enum value "kKubernetes"
	UpdateObjectsRunsMetadataParamsEnvironmentKKubernetes string = "kKubernetes"

	// UpdateObjectsRunsMetadataParamsEnvironmentKCassandra captures enum value "kCassandra"
	UpdateObjectsRunsMetadataParamsEnvironmentKCassandra string = "kCassandra"

	// UpdateObjectsRunsMetadataParamsEnvironmentKMongoDB captures enum value "kMongoDB"
	UpdateObjectsRunsMetadataParamsEnvironmentKMongoDB string = "kMongoDB"

	// UpdateObjectsRunsMetadataParamsEnvironmentKCouchbase captures enum value "kCouchbase"
	UpdateObjectsRunsMetadataParamsEnvironmentKCouchbase string = "kCouchbase"

	// UpdateObjectsRunsMetadataParamsEnvironmentKHdfs captures enum value "kHdfs"
	UpdateObjectsRunsMetadataParamsEnvironmentKHdfs string = "kHdfs"

	// UpdateObjectsRunsMetadataParamsEnvironmentKHive captures enum value "kHive"
	UpdateObjectsRunsMetadataParamsEnvironmentKHive string = "kHive"

	// UpdateObjectsRunsMetadataParamsEnvironmentKHBase captures enum value "kHBase"
	UpdateObjectsRunsMetadataParamsEnvironmentKHBase string = "kHBase"

	// UpdateObjectsRunsMetadataParamsEnvironmentKUDA captures enum value "kUDA"
	UpdateObjectsRunsMetadataParamsEnvironmentKUDA string = "kUDA"

	// UpdateObjectsRunsMetadataParamsEnvironmentKSfdc captures enum value "kSfdc"
	UpdateObjectsRunsMetadataParamsEnvironmentKSfdc string = "kSfdc"
)

// prop value enum
func (m *UpdateObjectsRunsMetadataParams) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateObjectsRunsMetadataParamsTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateObjectsRunsMetadataParams) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this update objects runs metadata params based on the context it is used
func (m *UpdateObjectsRunsMetadataParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateTargetObjectRuns(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTimeRange(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRetention(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateObjectsRunsMetadataParams) contextValidateTargetObjectRuns(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.TargetObjectRuns); i++ {

		if m.TargetObjectRuns[i] != nil {

			if swag.IsZero(m.TargetObjectRuns[i]) { // not required
				return nil
			}

			if err := m.TargetObjectRuns[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetObjectRuns" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("targetObjectRuns" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateObjectsRunsMetadataParams) contextValidateTimeRange(ctx context.Context, formats strfmt.Registry) error {

	if m.TimeRange != nil {

		if swag.IsZero(m.TimeRange) { // not required
			return nil
		}

		if err := m.TimeRange.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("timeRange")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("timeRange")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateObjectsRunsMetadataParams) contextValidateRetention(ctx context.Context, formats strfmt.Registry) error {

	if m.Retention != nil {

		if swag.IsZero(m.Retention) { // not required
			return nil
		}

		if err := m.Retention.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("retention")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("retention")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateObjectsRunsMetadataParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateObjectsRunsMetadataParams) UnmarshalBinary(b []byte) error {
	var res UpdateObjectsRunsMetadataParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
