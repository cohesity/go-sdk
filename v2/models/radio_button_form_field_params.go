// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RadioButtonFormFieldParams Parameters to specify a radio button component.
//
// swagger:model RadioButtonFormFieldParams
type RadioButtonFormFieldParams struct {

	// Id to identify the radio button. This is also be used for assigning component html ids which can be leveraged for writing automation against the button.
	ID *string `json:"id,omitempty"`

	// Label to be shown for the radio button on the UI.
	Label *string `json:"label,omitempty"`

	// Value associated with the radio button.
	Value *string `json:"value,omitempty"`

	// Optional form panel to be rendered if this radio button is selected.
	Panel *FormPanelParams `json:"panel,omitempty"`
}

// Validate validates this radio button form field params
func (m *RadioButtonFormFieldParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePanel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RadioButtonFormFieldParams) validatePanel(formats strfmt.Registry) error {
	if swag.IsZero(m.Panel) { // not required
		return nil
	}

	if m.Panel != nil {
		if err := m.Panel.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("panel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("panel")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this radio button form field params based on the context it is used
func (m *RadioButtonFormFieldParams) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidatePanel(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RadioButtonFormFieldParams) contextValidatePanel(ctx context.Context, formats strfmt.Registry) error {

	if m.Panel != nil {

		if swag.IsZero(m.Panel) { // not required
			return nil
		}

		if err := m.Panel.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("panel")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("panel")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RadioButtonFormFieldParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RadioButtonFormFieldParams) UnmarshalBinary(b []byte) error {
	var res RadioButtonFormFieldParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
