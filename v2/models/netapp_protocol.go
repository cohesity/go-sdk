// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetappProtocol Netapp Protocol type.
//
// Netapp Protocol type.
//
// swagger:model NetappProtocol
type NetappProtocol struct {

	// Specifies Netapp Protocol type.
	// Enum: ["kNfs","kCifs","kIscsi","kFc","kFcache","kHttp","kNdmp","kManagement","kNvme"]
	NetappProtocol string `json:"netappProtocol,omitempty"`
}

// Validate validates this netapp protocol
func (m *NetappProtocol) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateNetappProtocol(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var netappProtocolTypeNetappProtocolPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["kNfs","kCifs","kIscsi","kFc","kFcache","kHttp","kNdmp","kManagement","kNvme"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		netappProtocolTypeNetappProtocolPropEnum = append(netappProtocolTypeNetappProtocolPropEnum, v)
	}
}

const (

	// NetappProtocolNetappProtocolKNfs captures enum value "kNfs"
	NetappProtocolNetappProtocolKNfs string = "kNfs"

	// NetappProtocolNetappProtocolKCifs captures enum value "kCifs"
	NetappProtocolNetappProtocolKCifs string = "kCifs"

	// NetappProtocolNetappProtocolKIscsi captures enum value "kIscsi"
	NetappProtocolNetappProtocolKIscsi string = "kIscsi"

	// NetappProtocolNetappProtocolKFc captures enum value "kFc"
	NetappProtocolNetappProtocolKFc string = "kFc"

	// NetappProtocolNetappProtocolKFcache captures enum value "kFcache"
	NetappProtocolNetappProtocolKFcache string = "kFcache"

	// NetappProtocolNetappProtocolKHTTP captures enum value "kHttp"
	NetappProtocolNetappProtocolKHTTP string = "kHttp"

	// NetappProtocolNetappProtocolKNdmp captures enum value "kNdmp"
	NetappProtocolNetappProtocolKNdmp string = "kNdmp"

	// NetappProtocolNetappProtocolKManagement captures enum value "kManagement"
	NetappProtocolNetappProtocolKManagement string = "kManagement"

	// NetappProtocolNetappProtocolKNvme captures enum value "kNvme"
	NetappProtocolNetappProtocolKNvme string = "kNvme"
)

// prop value enum
func (m *NetappProtocol) validateNetappProtocolEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, netappProtocolTypeNetappProtocolPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NetappProtocol) validateNetappProtocol(formats strfmt.Registry) error {
	if swag.IsZero(m.NetappProtocol) { // not required
		return nil
	}

	// value enum
	if err := m.validateNetappProtocolEnum("netappProtocol", "body", m.NetappProtocol); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this netapp protocol based on context it is used
func (m *NetappProtocol) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NetappProtocol) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetappProtocol) UnmarshalBinary(b []byte) error {
	var res NetappProtocol
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
