// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ArchivalTargets ArchivalTargets
//
// # Archival Targets
//
// swagger:model ArchivalTargets
type ArchivalTargets struct {

	// Specifies the archival target.
	// Enum: ["Tape","Cloud","Nas"]
	ArchivalTargets string `json:"archivalTargets,omitempty"`
}

// Validate validates this archival targets
func (m *ArchivalTargets) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateArchivalTargets(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var archivalTargetsTypeArchivalTargetsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Tape","Cloud","Nas"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		archivalTargetsTypeArchivalTargetsPropEnum = append(archivalTargetsTypeArchivalTargetsPropEnum, v)
	}
}

const (

	// ArchivalTargetsArchivalTargetsTape captures enum value "Tape"
	ArchivalTargetsArchivalTargetsTape string = "Tape"

	// ArchivalTargetsArchivalTargetsCloud captures enum value "Cloud"
	ArchivalTargetsArchivalTargetsCloud string = "Cloud"

	// ArchivalTargetsArchivalTargetsNas captures enum value "Nas"
	ArchivalTargetsArchivalTargetsNas string = "Nas"
)

// prop value enum
func (m *ArchivalTargets) validateArchivalTargetsEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, archivalTargetsTypeArchivalTargetsPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ArchivalTargets) validateArchivalTargets(formats strfmt.Registry) error {
	if swag.IsZero(m.ArchivalTargets) { // not required
		return nil
	}

	// value enum
	if err := m.validateArchivalTargetsEnum("archivalTargets", "body", m.ArchivalTargets); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this archival targets based on context it is used
func (m *ArchivalTargets) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ArchivalTargets) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ArchivalTargets) UnmarshalBinary(b []byte) error {
	var res ArchivalTargets
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
