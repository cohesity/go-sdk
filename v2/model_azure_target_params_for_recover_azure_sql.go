/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AzureTargetParamsForRecoverAzureSql type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureTargetParamsForRecoverAzureSql{}

// AzureTargetParamsForRecoverAzureSql Specifies the recovery target params for Azure SQL target config.
type AzureTargetParamsForRecoverAzureSql struct {
	NewSourceConfig NullableAzureTargetParamsForRecoverAzureSqlNewSourceConfig `json:"newSourceConfig,omitempty"`
	// Specifies the parameter whether the recovery should be performed to a new or an existing target.
	RecoverToNewSource NullableBool `json:"recoverToNewSource"`
}

type _AzureTargetParamsForRecoverAzureSql AzureTargetParamsForRecoverAzureSql

// NewAzureTargetParamsForRecoverAzureSql instantiates a new AzureTargetParamsForRecoverAzureSql object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureTargetParamsForRecoverAzureSql(recoverToNewSource NullableBool) *AzureTargetParamsForRecoverAzureSql {
	this := AzureTargetParamsForRecoverAzureSql{}
	this.RecoverToNewSource = recoverToNewSource
	return &this
}

// NewAzureTargetParamsForRecoverAzureSqlWithDefaults instantiates a new AzureTargetParamsForRecoverAzureSql object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureTargetParamsForRecoverAzureSqlWithDefaults() *AzureTargetParamsForRecoverAzureSql {
	this := AzureTargetParamsForRecoverAzureSql{}
	return &this
}

// GetNewSourceConfig returns the NewSourceConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureTargetParamsForRecoverAzureSql) GetNewSourceConfig() AzureTargetParamsForRecoverAzureSqlNewSourceConfig {
	if o == nil || IsNil(o.NewSourceConfig.Get()) {
		var ret AzureTargetParamsForRecoverAzureSqlNewSourceConfig
		return ret
	}
	return *o.NewSourceConfig.Get()
}

// GetNewSourceConfigOk returns a tuple with the NewSourceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetParamsForRecoverAzureSql) GetNewSourceConfigOk() (*AzureTargetParamsForRecoverAzureSqlNewSourceConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewSourceConfig.Get(), o.NewSourceConfig.IsSet()
}

// HasNewSourceConfig returns a boolean if a field has been set.
func (o *AzureTargetParamsForRecoverAzureSql) HasNewSourceConfig() bool {
	if o != nil && o.NewSourceConfig.IsSet() {
		return true
	}

	return false
}

// SetNewSourceConfig gets a reference to the given NullableAzureTargetParamsForRecoverAzureSqlNewSourceConfig and assigns it to the NewSourceConfig field.
func (o *AzureTargetParamsForRecoverAzureSql) SetNewSourceConfig(v AzureTargetParamsForRecoverAzureSqlNewSourceConfig) {
	o.NewSourceConfig.Set(&v)
}
// SetNewSourceConfigNil sets the value for NewSourceConfig to be an explicit nil
func (o *AzureTargetParamsForRecoverAzureSql) SetNewSourceConfigNil() {
	o.NewSourceConfig.Set(nil)
}

// UnsetNewSourceConfig ensures that no value is present for NewSourceConfig, not even an explicit nil
func (o *AzureTargetParamsForRecoverAzureSql) UnsetNewSourceConfig() {
	o.NewSourceConfig.Unset()
}

// GetRecoverToNewSource returns the RecoverToNewSource field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *AzureTargetParamsForRecoverAzureSql) GetRecoverToNewSource() bool {
	if o == nil || o.RecoverToNewSource.Get() == nil {
		var ret bool
		return ret
	}

	return *o.RecoverToNewSource.Get()
}

// GetRecoverToNewSourceOk returns a tuple with the RecoverToNewSource field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureTargetParamsForRecoverAzureSql) GetRecoverToNewSourceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverToNewSource.Get(), o.RecoverToNewSource.IsSet()
}

// SetRecoverToNewSource sets field value
func (o *AzureTargetParamsForRecoverAzureSql) SetRecoverToNewSource(v bool) {
	o.RecoverToNewSource.Set(&v)
}

func (o AzureTargetParamsForRecoverAzureSql) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureTargetParamsForRecoverAzureSql) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NewSourceConfig.IsSet() {
		toSerialize["newSourceConfig"] = o.NewSourceConfig.Get()
	}
	toSerialize["recoverToNewSource"] = o.RecoverToNewSource.Get()
	return toSerialize, nil
}

func (o *AzureTargetParamsForRecoverAzureSql) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoverToNewSource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAzureTargetParamsForRecoverAzureSql := _AzureTargetParamsForRecoverAzureSql{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAzureTargetParamsForRecoverAzureSql)

	if err != nil {
		return err
	}

	*o = AzureTargetParamsForRecoverAzureSql(varAzureTargetParamsForRecoverAzureSql)

	return err
}

type NullableAzureTargetParamsForRecoverAzureSql struct {
	value *AzureTargetParamsForRecoverAzureSql
	isSet bool
}

func (v NullableAzureTargetParamsForRecoverAzureSql) Get() *AzureTargetParamsForRecoverAzureSql {
	return v.value
}

func (v *NullableAzureTargetParamsForRecoverAzureSql) Set(val *AzureTargetParamsForRecoverAzureSql) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureTargetParamsForRecoverAzureSql) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureTargetParamsForRecoverAzureSql) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureTargetParamsForRecoverAzureSql(val *AzureTargetParamsForRecoverAzureSql) *NullableAzureTargetParamsForRecoverAzureSql {
	return &NullableAzureTargetParamsForRecoverAzureSql{value: val, isSet: true}
}

func (v NullableAzureTargetParamsForRecoverAzureSql) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureTargetParamsForRecoverAzureSql) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


