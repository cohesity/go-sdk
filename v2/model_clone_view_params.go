/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CloneViewParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CloneViewParams{}

// CloneViewParams Specifies the parameters to clone a View.
type CloneViewParams struct {
	// DataLock (Write Once Read Many) lock expiry epoch time in microseconds. If a view is marked as a DataLock view, only a Data Security Officer (a user having Data Security Privilege) can delete the view until the lock expiry time.
	DataLockExpiryUsecs NullableInt64 `json:"dataLockExpiryUsecs,omitempty"`
	// Specifies the description of the cloned View.
	Description NullableString `json:"description,omitempty"`
	// Specifies if the view is a read only view. User will no longer be able to write to this view if this is set to true.
	IsReadOnly NullableBool `json:"isReadOnly,omitempty"`
	// Specifies the name of the cloned View.
	Name NullableString `json:"name"`
	NetgroupWhitelist *CloneViewParamsNetgroupWhitelist `json:"netgroupWhitelist,omitempty"`
	// Specifies the supported Protocols for the View.
	ProtocolAccess []ViewProtocol `json:"protocolAccess,omitempty"`
	Qos *CloneViewParamsQos `json:"qos,omitempty"`
	StoragePolicyOverride *CloneViewParamsStoragePolicyOverride `json:"storagePolicyOverride,omitempty"`
	// Array of Subnets. Specifies a list of Subnets with IP addresses that have permissions to access the View. (Overrides or extends the Subnets specified at the global Cohesity Cluster level.)
	SubnetWhitelist []Subnet `json:"subnetWhitelist,omitempty"`
}

type _CloneViewParams CloneViewParams

// NewCloneViewParams instantiates a new CloneViewParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloneViewParams(name NullableString) *CloneViewParams {
	this := CloneViewParams{}
	this.Name = name
	return &this
}

// NewCloneViewParamsWithDefaults instantiates a new CloneViewParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloneViewParamsWithDefaults() *CloneViewParams {
	this := CloneViewParams{}
	return &this
}

// GetDataLockExpiryUsecs returns the DataLockExpiryUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneViewParams) GetDataLockExpiryUsecs() int64 {
	if o == nil || IsNil(o.DataLockExpiryUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.DataLockExpiryUsecs.Get()
}

// GetDataLockExpiryUsecsOk returns a tuple with the DataLockExpiryUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneViewParams) GetDataLockExpiryUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataLockExpiryUsecs.Get(), o.DataLockExpiryUsecs.IsSet()
}

// HasDataLockExpiryUsecs returns a boolean if a field has been set.
func (o *CloneViewParams) HasDataLockExpiryUsecs() bool {
	if o != nil && o.DataLockExpiryUsecs.IsSet() {
		return true
	}

	return false
}

// SetDataLockExpiryUsecs gets a reference to the given NullableInt64 and assigns it to the DataLockExpiryUsecs field.
func (o *CloneViewParams) SetDataLockExpiryUsecs(v int64) {
	o.DataLockExpiryUsecs.Set(&v)
}
// SetDataLockExpiryUsecsNil sets the value for DataLockExpiryUsecs to be an explicit nil
func (o *CloneViewParams) SetDataLockExpiryUsecsNil() {
	o.DataLockExpiryUsecs.Set(nil)
}

// UnsetDataLockExpiryUsecs ensures that no value is present for DataLockExpiryUsecs, not even an explicit nil
func (o *CloneViewParams) UnsetDataLockExpiryUsecs() {
	o.DataLockExpiryUsecs.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneViewParams) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneViewParams) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *CloneViewParams) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *CloneViewParams) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *CloneViewParams) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *CloneViewParams) UnsetDescription() {
	o.Description.Unset()
}

// GetIsReadOnly returns the IsReadOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneViewParams) GetIsReadOnly() bool {
	if o == nil || IsNil(o.IsReadOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.IsReadOnly.Get()
}

// GetIsReadOnlyOk returns a tuple with the IsReadOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneViewParams) GetIsReadOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsReadOnly.Get(), o.IsReadOnly.IsSet()
}

// HasIsReadOnly returns a boolean if a field has been set.
func (o *CloneViewParams) HasIsReadOnly() bool {
	if o != nil && o.IsReadOnly.IsSet() {
		return true
	}

	return false
}

// SetIsReadOnly gets a reference to the given NullableBool and assigns it to the IsReadOnly field.
func (o *CloneViewParams) SetIsReadOnly(v bool) {
	o.IsReadOnly.Set(&v)
}
// SetIsReadOnlyNil sets the value for IsReadOnly to be an explicit nil
func (o *CloneViewParams) SetIsReadOnlyNil() {
	o.IsReadOnly.Set(nil)
}

// UnsetIsReadOnly ensures that no value is present for IsReadOnly, not even an explicit nil
func (o *CloneViewParams) UnsetIsReadOnly() {
	o.IsReadOnly.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CloneViewParams) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneViewParams) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CloneViewParams) SetName(v string) {
	o.Name.Set(&v)
}

// GetNetgroupWhitelist returns the NetgroupWhitelist field value if set, zero value otherwise.
func (o *CloneViewParams) GetNetgroupWhitelist() CloneViewParamsNetgroupWhitelist {
	if o == nil || IsNil(o.NetgroupWhitelist) {
		var ret CloneViewParamsNetgroupWhitelist
		return ret
	}
	return *o.NetgroupWhitelist
}

// GetNetgroupWhitelistOk returns a tuple with the NetgroupWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneViewParams) GetNetgroupWhitelistOk() (*CloneViewParamsNetgroupWhitelist, bool) {
	if o == nil || IsNil(o.NetgroupWhitelist) {
		return nil, false
	}
	return o.NetgroupWhitelist, true
}

// HasNetgroupWhitelist returns a boolean if a field has been set.
func (o *CloneViewParams) HasNetgroupWhitelist() bool {
	if o != nil && !IsNil(o.NetgroupWhitelist) {
		return true
	}

	return false
}

// SetNetgroupWhitelist gets a reference to the given CloneViewParamsNetgroupWhitelist and assigns it to the NetgroupWhitelist field.
func (o *CloneViewParams) SetNetgroupWhitelist(v CloneViewParamsNetgroupWhitelist) {
	o.NetgroupWhitelist = &v
}

// GetProtocolAccess returns the ProtocolAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneViewParams) GetProtocolAccess() []ViewProtocol {
	if o == nil {
		var ret []ViewProtocol
		return ret
	}
	return o.ProtocolAccess
}

// GetProtocolAccessOk returns a tuple with the ProtocolAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneViewParams) GetProtocolAccessOk() ([]ViewProtocol, bool) {
	if o == nil || IsNil(o.ProtocolAccess) {
		return nil, false
	}
	return o.ProtocolAccess, true
}

// HasProtocolAccess returns a boolean if a field has been set.
func (o *CloneViewParams) HasProtocolAccess() bool {
	if o != nil && !IsNil(o.ProtocolAccess) {
		return true
	}

	return false
}

// SetProtocolAccess gets a reference to the given []ViewProtocol and assigns it to the ProtocolAccess field.
func (o *CloneViewParams) SetProtocolAccess(v []ViewProtocol) {
	o.ProtocolAccess = v
}

// GetQos returns the Qos field value if set, zero value otherwise.
func (o *CloneViewParams) GetQos() CloneViewParamsQos {
	if o == nil || IsNil(o.Qos) {
		var ret CloneViewParamsQos
		return ret
	}
	return *o.Qos
}

// GetQosOk returns a tuple with the Qos field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneViewParams) GetQosOk() (*CloneViewParamsQos, bool) {
	if o == nil || IsNil(o.Qos) {
		return nil, false
	}
	return o.Qos, true
}

// HasQos returns a boolean if a field has been set.
func (o *CloneViewParams) HasQos() bool {
	if o != nil && !IsNil(o.Qos) {
		return true
	}

	return false
}

// SetQos gets a reference to the given CloneViewParamsQos and assigns it to the Qos field.
func (o *CloneViewParams) SetQos(v CloneViewParamsQos) {
	o.Qos = &v
}

// GetStoragePolicyOverride returns the StoragePolicyOverride field value if set, zero value otherwise.
func (o *CloneViewParams) GetStoragePolicyOverride() CloneViewParamsStoragePolicyOverride {
	if o == nil || IsNil(o.StoragePolicyOverride) {
		var ret CloneViewParamsStoragePolicyOverride
		return ret
	}
	return *o.StoragePolicyOverride
}

// GetStoragePolicyOverrideOk returns a tuple with the StoragePolicyOverride field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneViewParams) GetStoragePolicyOverrideOk() (*CloneViewParamsStoragePolicyOverride, bool) {
	if o == nil || IsNil(o.StoragePolicyOverride) {
		return nil, false
	}
	return o.StoragePolicyOverride, true
}

// HasStoragePolicyOverride returns a boolean if a field has been set.
func (o *CloneViewParams) HasStoragePolicyOverride() bool {
	if o != nil && !IsNil(o.StoragePolicyOverride) {
		return true
	}

	return false
}

// SetStoragePolicyOverride gets a reference to the given CloneViewParamsStoragePolicyOverride and assigns it to the StoragePolicyOverride field.
func (o *CloneViewParams) SetStoragePolicyOverride(v CloneViewParamsStoragePolicyOverride) {
	o.StoragePolicyOverride = &v
}

// GetSubnetWhitelist returns the SubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneViewParams) GetSubnetWhitelist() []Subnet {
	if o == nil {
		var ret []Subnet
		return ret
	}
	return o.SubnetWhitelist
}

// GetSubnetWhitelistOk returns a tuple with the SubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneViewParams) GetSubnetWhitelistOk() ([]Subnet, bool) {
	if o == nil || IsNil(o.SubnetWhitelist) {
		return nil, false
	}
	return o.SubnetWhitelist, true
}

// HasSubnetWhitelist returns a boolean if a field has been set.
func (o *CloneViewParams) HasSubnetWhitelist() bool {
	if o != nil && !IsNil(o.SubnetWhitelist) {
		return true
	}

	return false
}

// SetSubnetWhitelist gets a reference to the given []Subnet and assigns it to the SubnetWhitelist field.
func (o *CloneViewParams) SetSubnetWhitelist(v []Subnet) {
	o.SubnetWhitelist = v
}

func (o CloneViewParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CloneViewParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DataLockExpiryUsecs.IsSet() {
		toSerialize["dataLockExpiryUsecs"] = o.DataLockExpiryUsecs.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.IsReadOnly.IsSet() {
		toSerialize["isReadOnly"] = o.IsReadOnly.Get()
	}
	toSerialize["name"] = o.Name.Get()
	if !IsNil(o.NetgroupWhitelist) {
		toSerialize["netgroupWhitelist"] = o.NetgroupWhitelist
	}
	if o.ProtocolAccess != nil {
		toSerialize["protocolAccess"] = o.ProtocolAccess
	}
	if !IsNil(o.Qos) {
		toSerialize["qos"] = o.Qos
	}
	if !IsNil(o.StoragePolicyOverride) {
		toSerialize["storagePolicyOverride"] = o.StoragePolicyOverride
	}
	if o.SubnetWhitelist != nil {
		toSerialize["subnetWhitelist"] = o.SubnetWhitelist
	}
	return toSerialize, nil
}

func (o *CloneViewParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCloneViewParams := _CloneViewParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCloneViewParams)

	if err != nil {
		return err
	}

	*o = CloneViewParams(varCloneViewParams)

	return err
}

type NullableCloneViewParams struct {
	value *CloneViewParams
	isSet bool
}

func (v NullableCloneViewParams) Get() *CloneViewParams {
	return v.value
}

func (v *NullableCloneViewParams) Set(val *CloneViewParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneViewParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneViewParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneViewParams(val *CloneViewParams) *NullableCloneViewParams {
	return &NullableCloneViewParams{value: val, isSet: true}
}

func (v NullableCloneViewParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneViewParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


