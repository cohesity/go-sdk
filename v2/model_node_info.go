/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the NodeInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NodeInfo{}

// NodeInfo Specifies general information of a node.
type NodeInfo struct {
	// Chassis model.
	ChassisModel *string `json:"chassisModel,omitempty"`
	// Chassis serial number programmed by manufacturer.
	ChassisSerial *string `json:"chassisSerial,omitempty"`
	// Specifies the Id of the cluster to which the node belongs.
	ClusterId *int64 `json:"clusterId,omitempty"`
	// Chassis serial number programmed by cohesity software.
	CohesityChassisSerial *string `json:"cohesityChassisSerial,omitempty"`
	// Node serial number programmed by cohesity software.
	CohesityNodeSerial *string `json:"cohesityNodeSerial,omitempty"`
	// Number of CPUs
	Cpu *int32 `json:"cpu,omitempty"`
	// Host name of the node reported by the kernel.
	Hostname *string `json:"hostname,omitempty"`
	// Specifies the cluster incarnation Id.
	IncarnationId *int64 `json:"incarnationId,omitempty"`
	// List of interfaces in node.
	InterfaceList []EndPoint `json:"interfaceList,omitempty"`
	// Ipmi IpAddress
	IpmiIp *string `json:"ipmiIp,omitempty"`
	// Specifies whether the node is reachable or not
	IsNodeReachable *bool `json:"isNodeReachable,omitempty"`
	// Specifies the Id of the node.
	NodeId *int64 `json:"nodeId,omitempty"`
	// Node model.
	NodeModel *string `json:"nodeModel,omitempty"`
	// Node serial number programmed by manufacturer.
	NodeSerial *string `json:"nodeSerial,omitempty"`
	// Product Model
	ProductModel *string `json:"productModel,omitempty"`
	// Specifies the version information of the cohesity services.
	ServicesVersionInfo []ServiceVersionInfo `json:"servicesVersionInfo,omitempty"`
	// Slot number of the node in the chassis.
	SlotNumber *string `json:"slotNumber,omitempty"`
	// Version of the Cohesity software running on the node.
	SoftwareVersion *string `json:"softwareVersion,omitempty"`
	// System Memory in bytes
	SystemMemoryBytes *int64 `json:"systemMemoryBytes,omitempty"`
}

// NewNodeInfo instantiates a new NodeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeInfo() *NodeInfo {
	this := NodeInfo{}
	return &this
}

// NewNodeInfoWithDefaults instantiates a new NodeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeInfoWithDefaults() *NodeInfo {
	this := NodeInfo{}
	return &this
}

// GetChassisModel returns the ChassisModel field value if set, zero value otherwise.
func (o *NodeInfo) GetChassisModel() string {
	if o == nil || IsNil(o.ChassisModel) {
		var ret string
		return ret
	}
	return *o.ChassisModel
}

// GetChassisModelOk returns a tuple with the ChassisModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetChassisModelOk() (*string, bool) {
	if o == nil || IsNil(o.ChassisModel) {
		return nil, false
	}
	return o.ChassisModel, true
}

// HasChassisModel returns a boolean if a field has been set.
func (o *NodeInfo) HasChassisModel() bool {
	if o != nil && !IsNil(o.ChassisModel) {
		return true
	}

	return false
}

// SetChassisModel gets a reference to the given string and assigns it to the ChassisModel field.
func (o *NodeInfo) SetChassisModel(v string) {
	o.ChassisModel = &v
}

// GetChassisSerial returns the ChassisSerial field value if set, zero value otherwise.
func (o *NodeInfo) GetChassisSerial() string {
	if o == nil || IsNil(o.ChassisSerial) {
		var ret string
		return ret
	}
	return *o.ChassisSerial
}

// GetChassisSerialOk returns a tuple with the ChassisSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetChassisSerialOk() (*string, bool) {
	if o == nil || IsNil(o.ChassisSerial) {
		return nil, false
	}
	return o.ChassisSerial, true
}

// HasChassisSerial returns a boolean if a field has been set.
func (o *NodeInfo) HasChassisSerial() bool {
	if o != nil && !IsNil(o.ChassisSerial) {
		return true
	}

	return false
}

// SetChassisSerial gets a reference to the given string and assigns it to the ChassisSerial field.
func (o *NodeInfo) SetChassisSerial(v string) {
	o.ChassisSerial = &v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise.
func (o *NodeInfo) GetClusterId() int64 {
	if o == nil || IsNil(o.ClusterId) {
		var ret int64
		return ret
	}
	return *o.ClusterId
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetClusterIdOk() (*int64, bool) {
	if o == nil || IsNil(o.ClusterId) {
		return nil, false
	}
	return o.ClusterId, true
}

// HasClusterId returns a boolean if a field has been set.
func (o *NodeInfo) HasClusterId() bool {
	if o != nil && !IsNil(o.ClusterId) {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given int64 and assigns it to the ClusterId field.
func (o *NodeInfo) SetClusterId(v int64) {
	o.ClusterId = &v
}

// GetCohesityChassisSerial returns the CohesityChassisSerial field value if set, zero value otherwise.
func (o *NodeInfo) GetCohesityChassisSerial() string {
	if o == nil || IsNil(o.CohesityChassisSerial) {
		var ret string
		return ret
	}
	return *o.CohesityChassisSerial
}

// GetCohesityChassisSerialOk returns a tuple with the CohesityChassisSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetCohesityChassisSerialOk() (*string, bool) {
	if o == nil || IsNil(o.CohesityChassisSerial) {
		return nil, false
	}
	return o.CohesityChassisSerial, true
}

// HasCohesityChassisSerial returns a boolean if a field has been set.
func (o *NodeInfo) HasCohesityChassisSerial() bool {
	if o != nil && !IsNil(o.CohesityChassisSerial) {
		return true
	}

	return false
}

// SetCohesityChassisSerial gets a reference to the given string and assigns it to the CohesityChassisSerial field.
func (o *NodeInfo) SetCohesityChassisSerial(v string) {
	o.CohesityChassisSerial = &v
}

// GetCohesityNodeSerial returns the CohesityNodeSerial field value if set, zero value otherwise.
func (o *NodeInfo) GetCohesityNodeSerial() string {
	if o == nil || IsNil(o.CohesityNodeSerial) {
		var ret string
		return ret
	}
	return *o.CohesityNodeSerial
}

// GetCohesityNodeSerialOk returns a tuple with the CohesityNodeSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetCohesityNodeSerialOk() (*string, bool) {
	if o == nil || IsNil(o.CohesityNodeSerial) {
		return nil, false
	}
	return o.CohesityNodeSerial, true
}

// HasCohesityNodeSerial returns a boolean if a field has been set.
func (o *NodeInfo) HasCohesityNodeSerial() bool {
	if o != nil && !IsNil(o.CohesityNodeSerial) {
		return true
	}

	return false
}

// SetCohesityNodeSerial gets a reference to the given string and assigns it to the CohesityNodeSerial field.
func (o *NodeInfo) SetCohesityNodeSerial(v string) {
	o.CohesityNodeSerial = &v
}

// GetCpu returns the Cpu field value if set, zero value otherwise.
func (o *NodeInfo) GetCpu() int32 {
	if o == nil || IsNil(o.Cpu) {
		var ret int32
		return ret
	}
	return *o.Cpu
}

// GetCpuOk returns a tuple with the Cpu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetCpuOk() (*int32, bool) {
	if o == nil || IsNil(o.Cpu) {
		return nil, false
	}
	return o.Cpu, true
}

// HasCpu returns a boolean if a field has been set.
func (o *NodeInfo) HasCpu() bool {
	if o != nil && !IsNil(o.Cpu) {
		return true
	}

	return false
}

// SetCpu gets a reference to the given int32 and assigns it to the Cpu field.
func (o *NodeInfo) SetCpu(v int32) {
	o.Cpu = &v
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *NodeInfo) GetHostname() string {
	if o == nil || IsNil(o.Hostname) {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetHostnameOk() (*string, bool) {
	if o == nil || IsNil(o.Hostname) {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *NodeInfo) HasHostname() bool {
	if o != nil && !IsNil(o.Hostname) {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *NodeInfo) SetHostname(v string) {
	o.Hostname = &v
}

// GetIncarnationId returns the IncarnationId field value if set, zero value otherwise.
func (o *NodeInfo) GetIncarnationId() int64 {
	if o == nil || IsNil(o.IncarnationId) {
		var ret int64
		return ret
	}
	return *o.IncarnationId
}

// GetIncarnationIdOk returns a tuple with the IncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetIncarnationIdOk() (*int64, bool) {
	if o == nil || IsNil(o.IncarnationId) {
		return nil, false
	}
	return o.IncarnationId, true
}

// HasIncarnationId returns a boolean if a field has been set.
func (o *NodeInfo) HasIncarnationId() bool {
	if o != nil && !IsNil(o.IncarnationId) {
		return true
	}

	return false
}

// SetIncarnationId gets a reference to the given int64 and assigns it to the IncarnationId field.
func (o *NodeInfo) SetIncarnationId(v int64) {
	o.IncarnationId = &v
}

// GetInterfaceList returns the InterfaceList field value if set, zero value otherwise.
func (o *NodeInfo) GetInterfaceList() []EndPoint {
	if o == nil || IsNil(o.InterfaceList) {
		var ret []EndPoint
		return ret
	}
	return o.InterfaceList
}

// GetInterfaceListOk returns a tuple with the InterfaceList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetInterfaceListOk() ([]EndPoint, bool) {
	if o == nil || IsNil(o.InterfaceList) {
		return nil, false
	}
	return o.InterfaceList, true
}

// HasInterfaceList returns a boolean if a field has been set.
func (o *NodeInfo) HasInterfaceList() bool {
	if o != nil && !IsNil(o.InterfaceList) {
		return true
	}

	return false
}

// SetInterfaceList gets a reference to the given []EndPoint and assigns it to the InterfaceList field.
func (o *NodeInfo) SetInterfaceList(v []EndPoint) {
	o.InterfaceList = v
}

// GetIpmiIp returns the IpmiIp field value if set, zero value otherwise.
func (o *NodeInfo) GetIpmiIp() string {
	if o == nil || IsNil(o.IpmiIp) {
		var ret string
		return ret
	}
	return *o.IpmiIp
}

// GetIpmiIpOk returns a tuple with the IpmiIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetIpmiIpOk() (*string, bool) {
	if o == nil || IsNil(o.IpmiIp) {
		return nil, false
	}
	return o.IpmiIp, true
}

// HasIpmiIp returns a boolean if a field has been set.
func (o *NodeInfo) HasIpmiIp() bool {
	if o != nil && !IsNil(o.IpmiIp) {
		return true
	}

	return false
}

// SetIpmiIp gets a reference to the given string and assigns it to the IpmiIp field.
func (o *NodeInfo) SetIpmiIp(v string) {
	o.IpmiIp = &v
}

// GetIsNodeReachable returns the IsNodeReachable field value if set, zero value otherwise.
func (o *NodeInfo) GetIsNodeReachable() bool {
	if o == nil || IsNil(o.IsNodeReachable) {
		var ret bool
		return ret
	}
	return *o.IsNodeReachable
}

// GetIsNodeReachableOk returns a tuple with the IsNodeReachable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetIsNodeReachableOk() (*bool, bool) {
	if o == nil || IsNil(o.IsNodeReachable) {
		return nil, false
	}
	return o.IsNodeReachable, true
}

// HasIsNodeReachable returns a boolean if a field has been set.
func (o *NodeInfo) HasIsNodeReachable() bool {
	if o != nil && !IsNil(o.IsNodeReachable) {
		return true
	}

	return false
}

// SetIsNodeReachable gets a reference to the given bool and assigns it to the IsNodeReachable field.
func (o *NodeInfo) SetIsNodeReachable(v bool) {
	o.IsNodeReachable = &v
}

// GetNodeId returns the NodeId field value if set, zero value otherwise.
func (o *NodeInfo) GetNodeId() int64 {
	if o == nil || IsNil(o.NodeId) {
		var ret int64
		return ret
	}
	return *o.NodeId
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetNodeIdOk() (*int64, bool) {
	if o == nil || IsNil(o.NodeId) {
		return nil, false
	}
	return o.NodeId, true
}

// HasNodeId returns a boolean if a field has been set.
func (o *NodeInfo) HasNodeId() bool {
	if o != nil && !IsNil(o.NodeId) {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given int64 and assigns it to the NodeId field.
func (o *NodeInfo) SetNodeId(v int64) {
	o.NodeId = &v
}

// GetNodeModel returns the NodeModel field value if set, zero value otherwise.
func (o *NodeInfo) GetNodeModel() string {
	if o == nil || IsNil(o.NodeModel) {
		var ret string
		return ret
	}
	return *o.NodeModel
}

// GetNodeModelOk returns a tuple with the NodeModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetNodeModelOk() (*string, bool) {
	if o == nil || IsNil(o.NodeModel) {
		return nil, false
	}
	return o.NodeModel, true
}

// HasNodeModel returns a boolean if a field has been set.
func (o *NodeInfo) HasNodeModel() bool {
	if o != nil && !IsNil(o.NodeModel) {
		return true
	}

	return false
}

// SetNodeModel gets a reference to the given string and assigns it to the NodeModel field.
func (o *NodeInfo) SetNodeModel(v string) {
	o.NodeModel = &v
}

// GetNodeSerial returns the NodeSerial field value if set, zero value otherwise.
func (o *NodeInfo) GetNodeSerial() string {
	if o == nil || IsNil(o.NodeSerial) {
		var ret string
		return ret
	}
	return *o.NodeSerial
}

// GetNodeSerialOk returns a tuple with the NodeSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetNodeSerialOk() (*string, bool) {
	if o == nil || IsNil(o.NodeSerial) {
		return nil, false
	}
	return o.NodeSerial, true
}

// HasNodeSerial returns a boolean if a field has been set.
func (o *NodeInfo) HasNodeSerial() bool {
	if o != nil && !IsNil(o.NodeSerial) {
		return true
	}

	return false
}

// SetNodeSerial gets a reference to the given string and assigns it to the NodeSerial field.
func (o *NodeInfo) SetNodeSerial(v string) {
	o.NodeSerial = &v
}

// GetProductModel returns the ProductModel field value if set, zero value otherwise.
func (o *NodeInfo) GetProductModel() string {
	if o == nil || IsNil(o.ProductModel) {
		var ret string
		return ret
	}
	return *o.ProductModel
}

// GetProductModelOk returns a tuple with the ProductModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetProductModelOk() (*string, bool) {
	if o == nil || IsNil(o.ProductModel) {
		return nil, false
	}
	return o.ProductModel, true
}

// HasProductModel returns a boolean if a field has been set.
func (o *NodeInfo) HasProductModel() bool {
	if o != nil && !IsNil(o.ProductModel) {
		return true
	}

	return false
}

// SetProductModel gets a reference to the given string and assigns it to the ProductModel field.
func (o *NodeInfo) SetProductModel(v string) {
	o.ProductModel = &v
}

// GetServicesVersionInfo returns the ServicesVersionInfo field value if set, zero value otherwise.
func (o *NodeInfo) GetServicesVersionInfo() []ServiceVersionInfo {
	if o == nil || IsNil(o.ServicesVersionInfo) {
		var ret []ServiceVersionInfo
		return ret
	}
	return o.ServicesVersionInfo
}

// GetServicesVersionInfoOk returns a tuple with the ServicesVersionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetServicesVersionInfoOk() ([]ServiceVersionInfo, bool) {
	if o == nil || IsNil(o.ServicesVersionInfo) {
		return nil, false
	}
	return o.ServicesVersionInfo, true
}

// HasServicesVersionInfo returns a boolean if a field has been set.
func (o *NodeInfo) HasServicesVersionInfo() bool {
	if o != nil && !IsNil(o.ServicesVersionInfo) {
		return true
	}

	return false
}

// SetServicesVersionInfo gets a reference to the given []ServiceVersionInfo and assigns it to the ServicesVersionInfo field.
func (o *NodeInfo) SetServicesVersionInfo(v []ServiceVersionInfo) {
	o.ServicesVersionInfo = v
}

// GetSlotNumber returns the SlotNumber field value if set, zero value otherwise.
func (o *NodeInfo) GetSlotNumber() string {
	if o == nil || IsNil(o.SlotNumber) {
		var ret string
		return ret
	}
	return *o.SlotNumber
}

// GetSlotNumberOk returns a tuple with the SlotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetSlotNumberOk() (*string, bool) {
	if o == nil || IsNil(o.SlotNumber) {
		return nil, false
	}
	return o.SlotNumber, true
}

// HasSlotNumber returns a boolean if a field has been set.
func (o *NodeInfo) HasSlotNumber() bool {
	if o != nil && !IsNil(o.SlotNumber) {
		return true
	}

	return false
}

// SetSlotNumber gets a reference to the given string and assigns it to the SlotNumber field.
func (o *NodeInfo) SetSlotNumber(v string) {
	o.SlotNumber = &v
}

// GetSoftwareVersion returns the SoftwareVersion field value if set, zero value otherwise.
func (o *NodeInfo) GetSoftwareVersion() string {
	if o == nil || IsNil(o.SoftwareVersion) {
		var ret string
		return ret
	}
	return *o.SoftwareVersion
}

// GetSoftwareVersionOk returns a tuple with the SoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetSoftwareVersionOk() (*string, bool) {
	if o == nil || IsNil(o.SoftwareVersion) {
		return nil, false
	}
	return o.SoftwareVersion, true
}

// HasSoftwareVersion returns a boolean if a field has been set.
func (o *NodeInfo) HasSoftwareVersion() bool {
	if o != nil && !IsNil(o.SoftwareVersion) {
		return true
	}

	return false
}

// SetSoftwareVersion gets a reference to the given string and assigns it to the SoftwareVersion field.
func (o *NodeInfo) SetSoftwareVersion(v string) {
	o.SoftwareVersion = &v
}

// GetSystemMemoryBytes returns the SystemMemoryBytes field value if set, zero value otherwise.
func (o *NodeInfo) GetSystemMemoryBytes() int64 {
	if o == nil || IsNil(o.SystemMemoryBytes) {
		var ret int64
		return ret
	}
	return *o.SystemMemoryBytes
}

// GetSystemMemoryBytesOk returns a tuple with the SystemMemoryBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NodeInfo) GetSystemMemoryBytesOk() (*int64, bool) {
	if o == nil || IsNil(o.SystemMemoryBytes) {
		return nil, false
	}
	return o.SystemMemoryBytes, true
}

// HasSystemMemoryBytes returns a boolean if a field has been set.
func (o *NodeInfo) HasSystemMemoryBytes() bool {
	if o != nil && !IsNil(o.SystemMemoryBytes) {
		return true
	}

	return false
}

// SetSystemMemoryBytes gets a reference to the given int64 and assigns it to the SystemMemoryBytes field.
func (o *NodeInfo) SetSystemMemoryBytes(v int64) {
	o.SystemMemoryBytes = &v
}

func (o NodeInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NodeInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ChassisModel) {
		toSerialize["chassisModel"] = o.ChassisModel
	}
	if !IsNil(o.ChassisSerial) {
		toSerialize["chassisSerial"] = o.ChassisSerial
	}
	if !IsNil(o.ClusterId) {
		toSerialize["clusterId"] = o.ClusterId
	}
	if !IsNil(o.CohesityChassisSerial) {
		toSerialize["cohesityChassisSerial"] = o.CohesityChassisSerial
	}
	if !IsNil(o.CohesityNodeSerial) {
		toSerialize["cohesityNodeSerial"] = o.CohesityNodeSerial
	}
	if !IsNil(o.Cpu) {
		toSerialize["cpu"] = o.Cpu
	}
	if !IsNil(o.Hostname) {
		toSerialize["hostname"] = o.Hostname
	}
	if !IsNil(o.IncarnationId) {
		toSerialize["incarnationId"] = o.IncarnationId
	}
	if !IsNil(o.InterfaceList) {
		toSerialize["interfaceList"] = o.InterfaceList
	}
	if !IsNil(o.IpmiIp) {
		toSerialize["ipmiIp"] = o.IpmiIp
	}
	if !IsNil(o.IsNodeReachable) {
		toSerialize["isNodeReachable"] = o.IsNodeReachable
	}
	if !IsNil(o.NodeId) {
		toSerialize["nodeId"] = o.NodeId
	}
	if !IsNil(o.NodeModel) {
		toSerialize["nodeModel"] = o.NodeModel
	}
	if !IsNil(o.NodeSerial) {
		toSerialize["nodeSerial"] = o.NodeSerial
	}
	if !IsNil(o.ProductModel) {
		toSerialize["productModel"] = o.ProductModel
	}
	if !IsNil(o.ServicesVersionInfo) {
		toSerialize["servicesVersionInfo"] = o.ServicesVersionInfo
	}
	if !IsNil(o.SlotNumber) {
		toSerialize["slotNumber"] = o.SlotNumber
	}
	if !IsNil(o.SoftwareVersion) {
		toSerialize["softwareVersion"] = o.SoftwareVersion
	}
	if !IsNil(o.SystemMemoryBytes) {
		toSerialize["systemMemoryBytes"] = o.SystemMemoryBytes
	}
	return toSerialize, nil
}

type NullableNodeInfo struct {
	value *NodeInfo
	isSet bool
}

func (v NullableNodeInfo) Get() *NodeInfo {
	return v.value
}

func (v *NullableNodeInfo) Set(val *NodeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeInfo(val *NodeInfo) *NullableNodeInfo {
	return &NullableNodeInfo{value: val, isSet: true}
}

func (v NullableNodeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


