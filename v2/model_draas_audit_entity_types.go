/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DraasAuditEntityTypes type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DraasAuditEntityTypes{}

// DraasAuditEntityTypes Draas Audit Entity Types
type DraasAuditEntityTypes struct {
	// Draas Audit Entity Types
	EntityTypes *string `json:"entityTypes,omitempty"`
}

// NewDraasAuditEntityTypes instantiates a new DraasAuditEntityTypes object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDraasAuditEntityTypes() *DraasAuditEntityTypes {
	this := DraasAuditEntityTypes{}
	return &this
}

// NewDraasAuditEntityTypesWithDefaults instantiates a new DraasAuditEntityTypes object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDraasAuditEntityTypesWithDefaults() *DraasAuditEntityTypes {
	this := DraasAuditEntityTypes{}
	return &this
}

// GetEntityTypes returns the EntityTypes field value if set, zero value otherwise.
func (o *DraasAuditEntityTypes) GetEntityTypes() string {
	if o == nil || IsNil(o.EntityTypes) {
		var ret string
		return ret
	}
	return *o.EntityTypes
}

// GetEntityTypesOk returns a tuple with the EntityTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DraasAuditEntityTypes) GetEntityTypesOk() (*string, bool) {
	if o == nil || IsNil(o.EntityTypes) {
		return nil, false
	}
	return o.EntityTypes, true
}

// HasEntityTypes returns a boolean if a field has been set.
func (o *DraasAuditEntityTypes) HasEntityTypes() bool {
	if o != nil && !IsNil(o.EntityTypes) {
		return true
	}

	return false
}

// SetEntityTypes gets a reference to the given string and assigns it to the EntityTypes field.
func (o *DraasAuditEntityTypes) SetEntityTypes(v string) {
	o.EntityTypes = &v
}

func (o DraasAuditEntityTypes) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DraasAuditEntityTypes) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.EntityTypes) {
		toSerialize["entityTypes"] = o.EntityTypes
	}
	return toSerialize, nil
}

type NullableDraasAuditEntityTypes struct {
	value *DraasAuditEntityTypes
	isSet bool
}

func (v NullableDraasAuditEntityTypes) Get() *DraasAuditEntityTypes {
	return v.value
}

func (v *NullableDraasAuditEntityTypes) Set(val *DraasAuditEntityTypes) {
	v.value = val
	v.isSet = true
}

func (v NullableDraasAuditEntityTypes) IsSet() bool {
	return v.isSet
}

func (v *NullableDraasAuditEntityTypes) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDraasAuditEntityTypes(val *DraasAuditEntityTypes) *NullableDraasAuditEntityTypes {
	return &NullableDraasAuditEntityTypes{value: val, isSet: true}
}

func (v NullableDraasAuditEntityTypes) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDraasAuditEntityTypes) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


