/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsPostgresMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsPostgresMetadata{}

// AwsPostgresMetadata Specifies the metadata types and values of aws postgres.
type AwsPostgresMetadata struct {
	// Specifies the type of metadata being sent in the request.
	MetadataType NullableString `json:"metadataType"`
	StandardCredentials *AwsCredentials `json:"standardCredentials,omitempty"`
}

type _AwsPostgresMetadata AwsPostgresMetadata

// NewAwsPostgresMetadata instantiates a new AwsPostgresMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsPostgresMetadata(metadataType NullableString) *AwsPostgresMetadata {
	this := AwsPostgresMetadata{}
	this.MetadataType = metadataType
	return &this
}

// NewAwsPostgresMetadataWithDefaults instantiates a new AwsPostgresMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsPostgresMetadataWithDefaults() *AwsPostgresMetadata {
	this := AwsPostgresMetadata{}
	return &this
}

// GetMetadataType returns the MetadataType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AwsPostgresMetadata) GetMetadataType() string {
	if o == nil || o.MetadataType.Get() == nil {
		var ret string
		return ret
	}

	return *o.MetadataType.Get()
}

// GetMetadataTypeOk returns a tuple with the MetadataType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsPostgresMetadata) GetMetadataTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MetadataType.Get(), o.MetadataType.IsSet()
}

// SetMetadataType sets field value
func (o *AwsPostgresMetadata) SetMetadataType(v string) {
	o.MetadataType.Set(&v)
}

// GetStandardCredentials returns the StandardCredentials field value if set, zero value otherwise.
func (o *AwsPostgresMetadata) GetStandardCredentials() AwsCredentials {
	if o == nil || IsNil(o.StandardCredentials) {
		var ret AwsCredentials
		return ret
	}
	return *o.StandardCredentials
}

// GetStandardCredentialsOk returns a tuple with the StandardCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsPostgresMetadata) GetStandardCredentialsOk() (*AwsCredentials, bool) {
	if o == nil || IsNil(o.StandardCredentials) {
		return nil, false
	}
	return o.StandardCredentials, true
}

// HasStandardCredentials returns a boolean if a field has been set.
func (o *AwsPostgresMetadata) HasStandardCredentials() bool {
	if o != nil && !IsNil(o.StandardCredentials) {
		return true
	}

	return false
}

// SetStandardCredentials gets a reference to the given AwsCredentials and assigns it to the StandardCredentials field.
func (o *AwsPostgresMetadata) SetStandardCredentials(v AwsCredentials) {
	o.StandardCredentials = &v
}

func (o AwsPostgresMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsPostgresMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["metadataType"] = o.MetadataType.Get()
	if !IsNil(o.StandardCredentials) {
		toSerialize["standardCredentials"] = o.StandardCredentials
	}
	return toSerialize, nil
}

func (o *AwsPostgresMetadata) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"metadataType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsPostgresMetadata := _AwsPostgresMetadata{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsPostgresMetadata)

	if err != nil {
		return err
	}

	*o = AwsPostgresMetadata(varAwsPostgresMetadata)

	return err
}

type NullableAwsPostgresMetadata struct {
	value *AwsPostgresMetadata
	isSet bool
}

func (v NullableAwsPostgresMetadata) Get() *AwsPostgresMetadata {
	return v.value
}

func (v *NullableAwsPostgresMetadata) Set(val *AwsPostgresMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsPostgresMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsPostgresMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsPostgresMetadata(val *AwsPostgresMetadata) *NullableAwsPostgresMetadata {
	return &NullableAwsPostgresMetadata{value: val, isSet: true}
}

func (v NullableAwsPostgresMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsPostgresMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


