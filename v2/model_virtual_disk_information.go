/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the VirtualDiskInformation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VirtualDiskInformation{}

// VirtualDiskInformation Specifies the details about a Virtual Disk within a VM, containing basic info about it and its corresponding controller.
type VirtualDiskInformation struct {
	// Specifies original disk id. This is sufficient to identify the disk information.
	DiskId NullableString `json:"diskId,omitempty"`
	DiskInfo *DiskInfo `json:"diskInfo,omitempty"`
	DiskLocation *Object `json:"diskLocation,omitempty"`
	// Specifies size of the virtual disk in bytes.
	DiskSizeInBytes NullableInt64 `json:"diskSizeInBytes,omitempty"`
	// Specifies the original file path if applicable.
	FilePath NullableString `json:"filePath,omitempty"`
	// Specifies the list of mount points.
	MountPoints []string `json:"mountPoints,omitempty"`
}

// NewVirtualDiskInformation instantiates a new VirtualDiskInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDiskInformation() *VirtualDiskInformation {
	this := VirtualDiskInformation{}
	return &this
}

// NewVirtualDiskInformationWithDefaults instantiates a new VirtualDiskInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDiskInformationWithDefaults() *VirtualDiskInformation {
	this := VirtualDiskInformation{}
	return &this
}

// GetDiskId returns the DiskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskInformation) GetDiskId() string {
	if o == nil || IsNil(o.DiskId.Get()) {
		var ret string
		return ret
	}
	return *o.DiskId.Get()
}

// GetDiskIdOk returns a tuple with the DiskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskInformation) GetDiskIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskId.Get(), o.DiskId.IsSet()
}

// HasDiskId returns a boolean if a field has been set.
func (o *VirtualDiskInformation) HasDiskId() bool {
	if o != nil && o.DiskId.IsSet() {
		return true
	}

	return false
}

// SetDiskId gets a reference to the given NullableString and assigns it to the DiskId field.
func (o *VirtualDiskInformation) SetDiskId(v string) {
	o.DiskId.Set(&v)
}
// SetDiskIdNil sets the value for DiskId to be an explicit nil
func (o *VirtualDiskInformation) SetDiskIdNil() {
	o.DiskId.Set(nil)
}

// UnsetDiskId ensures that no value is present for DiskId, not even an explicit nil
func (o *VirtualDiskInformation) UnsetDiskId() {
	o.DiskId.Unset()
}

// GetDiskInfo returns the DiskInfo field value if set, zero value otherwise.
func (o *VirtualDiskInformation) GetDiskInfo() DiskInfo {
	if o == nil || IsNil(o.DiskInfo) {
		var ret DiskInfo
		return ret
	}
	return *o.DiskInfo
}

// GetDiskInfoOk returns a tuple with the DiskInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDiskInformation) GetDiskInfoOk() (*DiskInfo, bool) {
	if o == nil || IsNil(o.DiskInfo) {
		return nil, false
	}
	return o.DiskInfo, true
}

// HasDiskInfo returns a boolean if a field has been set.
func (o *VirtualDiskInformation) HasDiskInfo() bool {
	if o != nil && !IsNil(o.DiskInfo) {
		return true
	}

	return false
}

// SetDiskInfo gets a reference to the given DiskInfo and assigns it to the DiskInfo field.
func (o *VirtualDiskInformation) SetDiskInfo(v DiskInfo) {
	o.DiskInfo = &v
}

// GetDiskLocation returns the DiskLocation field value if set, zero value otherwise.
func (o *VirtualDiskInformation) GetDiskLocation() Object {
	if o == nil || IsNil(o.DiskLocation) {
		var ret Object
		return ret
	}
	return *o.DiskLocation
}

// GetDiskLocationOk returns a tuple with the DiskLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VirtualDiskInformation) GetDiskLocationOk() (*Object, bool) {
	if o == nil || IsNil(o.DiskLocation) {
		return nil, false
	}
	return o.DiskLocation, true
}

// HasDiskLocation returns a boolean if a field has been set.
func (o *VirtualDiskInformation) HasDiskLocation() bool {
	if o != nil && !IsNil(o.DiskLocation) {
		return true
	}

	return false
}

// SetDiskLocation gets a reference to the given Object and assigns it to the DiskLocation field.
func (o *VirtualDiskInformation) SetDiskLocation(v Object) {
	o.DiskLocation = &v
}

// GetDiskSizeInBytes returns the DiskSizeInBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskInformation) GetDiskSizeInBytes() int64 {
	if o == nil || IsNil(o.DiskSizeInBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.DiskSizeInBytes.Get()
}

// GetDiskSizeInBytesOk returns a tuple with the DiskSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskInformation) GetDiskSizeInBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DiskSizeInBytes.Get(), o.DiskSizeInBytes.IsSet()
}

// HasDiskSizeInBytes returns a boolean if a field has been set.
func (o *VirtualDiskInformation) HasDiskSizeInBytes() bool {
	if o != nil && o.DiskSizeInBytes.IsSet() {
		return true
	}

	return false
}

// SetDiskSizeInBytes gets a reference to the given NullableInt64 and assigns it to the DiskSizeInBytes field.
func (o *VirtualDiskInformation) SetDiskSizeInBytes(v int64) {
	o.DiskSizeInBytes.Set(&v)
}
// SetDiskSizeInBytesNil sets the value for DiskSizeInBytes to be an explicit nil
func (o *VirtualDiskInformation) SetDiskSizeInBytesNil() {
	o.DiskSizeInBytes.Set(nil)
}

// UnsetDiskSizeInBytes ensures that no value is present for DiskSizeInBytes, not even an explicit nil
func (o *VirtualDiskInformation) UnsetDiskSizeInBytes() {
	o.DiskSizeInBytes.Unset()
}

// GetFilePath returns the FilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskInformation) GetFilePath() string {
	if o == nil || IsNil(o.FilePath.Get()) {
		var ret string
		return ret
	}
	return *o.FilePath.Get()
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskInformation) GetFilePathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilePath.Get(), o.FilePath.IsSet()
}

// HasFilePath returns a boolean if a field has been set.
func (o *VirtualDiskInformation) HasFilePath() bool {
	if o != nil && o.FilePath.IsSet() {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given NullableString and assigns it to the FilePath field.
func (o *VirtualDiskInformation) SetFilePath(v string) {
	o.FilePath.Set(&v)
}
// SetFilePathNil sets the value for FilePath to be an explicit nil
func (o *VirtualDiskInformation) SetFilePathNil() {
	o.FilePath.Set(nil)
}

// UnsetFilePath ensures that no value is present for FilePath, not even an explicit nil
func (o *VirtualDiskInformation) UnsetFilePath() {
	o.FilePath.Unset()
}

// GetMountPoints returns the MountPoints field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskInformation) GetMountPoints() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.MountPoints
}

// GetMountPointsOk returns a tuple with the MountPoints field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskInformation) GetMountPointsOk() ([]string, bool) {
	if o == nil || IsNil(o.MountPoints) {
		return nil, false
	}
	return o.MountPoints, true
}

// HasMountPoints returns a boolean if a field has been set.
func (o *VirtualDiskInformation) HasMountPoints() bool {
	if o != nil && !IsNil(o.MountPoints) {
		return true
	}

	return false
}

// SetMountPoints gets a reference to the given []string and assigns it to the MountPoints field.
func (o *VirtualDiskInformation) SetMountPoints(v []string) {
	o.MountPoints = v
}

func (o VirtualDiskInformation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VirtualDiskInformation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskId.IsSet() {
		toSerialize["diskId"] = o.DiskId.Get()
	}
	if !IsNil(o.DiskInfo) {
		toSerialize["diskInfo"] = o.DiskInfo
	}
	if !IsNil(o.DiskLocation) {
		toSerialize["diskLocation"] = o.DiskLocation
	}
	if o.DiskSizeInBytes.IsSet() {
		toSerialize["diskSizeInBytes"] = o.DiskSizeInBytes.Get()
	}
	if o.FilePath.IsSet() {
		toSerialize["filePath"] = o.FilePath.Get()
	}
	if o.MountPoints != nil {
		toSerialize["mountPoints"] = o.MountPoints
	}
	return toSerialize, nil
}

type NullableVirtualDiskInformation struct {
	value *VirtualDiskInformation
	isSet bool
}

func (v NullableVirtualDiskInformation) Get() *VirtualDiskInformation {
	return v.value
}

func (v *NullableVirtualDiskInformation) Set(val *VirtualDiskInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDiskInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDiskInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDiskInformation(val *VirtualDiskInformation) *NullableVirtualDiskInformation {
	return &NullableVirtualDiskInformation{value: val, isSet: true}
}

func (v NullableVirtualDiskInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDiskInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


