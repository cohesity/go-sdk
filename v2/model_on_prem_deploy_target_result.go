/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the OnPremDeployTargetResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OnPremDeployTargetResult{}

// OnPremDeployTargetResult OnPrem Deploy result for a target.
type OnPremDeployTargetResult struct {
	// Target environment of the onprem deploy task.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies the error message for onprem task failure.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Message about the onprem deploy run.
	Message NullableString `json:"message,omitempty"`
	// Status of the OnPrem deploy for a target. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being canceled. 'Paused' indicates that the ongoing run has been paused. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished successfully, but there were some warning messages. 'Skipped' indicates that the run was skipped.
	Status NullableString `json:"status,omitempty"`
	VmwareParams *OnPremDeployTargetResultVmwareParams `json:"vmwareParams,omitempty"`
}

// NewOnPremDeployTargetResult instantiates a new OnPremDeployTargetResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnPremDeployTargetResult() *OnPremDeployTargetResult {
	this := OnPremDeployTargetResult{}
	return &this
}

// NewOnPremDeployTargetResultWithDefaults instantiates a new OnPremDeployTargetResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnPremDeployTargetResultWithDefaults() *OnPremDeployTargetResult {
	this := OnPremDeployTargetResult{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnPremDeployTargetResult) GetEnvironment() string {
	if o == nil || IsNil(o.Environment.Get()) {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnPremDeployTargetResult) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *OnPremDeployTargetResult) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *OnPremDeployTargetResult) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *OnPremDeployTargetResult) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *OnPremDeployTargetResult) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnPremDeployTargetResult) GetErrorMessage() string {
	if o == nil || IsNil(o.ErrorMessage.Get()) {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnPremDeployTargetResult) GetErrorMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *OnPremDeployTargetResult) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *OnPremDeployTargetResult) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *OnPremDeployTargetResult) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *OnPremDeployTargetResult) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnPremDeployTargetResult) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnPremDeployTargetResult) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *OnPremDeployTargetResult) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *OnPremDeployTargetResult) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *OnPremDeployTargetResult) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *OnPremDeployTargetResult) UnsetMessage() {
	o.Message.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnPremDeployTargetResult) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnPremDeployTargetResult) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *OnPremDeployTargetResult) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *OnPremDeployTargetResult) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *OnPremDeployTargetResult) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *OnPremDeployTargetResult) UnsetStatus() {
	o.Status.Unset()
}

// GetVmwareParams returns the VmwareParams field value if set, zero value otherwise.
func (o *OnPremDeployTargetResult) GetVmwareParams() OnPremDeployTargetResultVmwareParams {
	if o == nil || IsNil(o.VmwareParams) {
		var ret OnPremDeployTargetResultVmwareParams
		return ret
	}
	return *o.VmwareParams
}

// GetVmwareParamsOk returns a tuple with the VmwareParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OnPremDeployTargetResult) GetVmwareParamsOk() (*OnPremDeployTargetResultVmwareParams, bool) {
	if o == nil || IsNil(o.VmwareParams) {
		return nil, false
	}
	return o.VmwareParams, true
}

// HasVmwareParams returns a boolean if a field has been set.
func (o *OnPremDeployTargetResult) HasVmwareParams() bool {
	if o != nil && !IsNil(o.VmwareParams) {
		return true
	}

	return false
}

// SetVmwareParams gets a reference to the given OnPremDeployTargetResultVmwareParams and assigns it to the VmwareParams field.
func (o *OnPremDeployTargetResult) SetVmwareParams(v OnPremDeployTargetResultVmwareParams) {
	o.VmwareParams = &v
}

func (o OnPremDeployTargetResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OnPremDeployTargetResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if !IsNil(o.VmwareParams) {
		toSerialize["vmwareParams"] = o.VmwareParams
	}
	return toSerialize, nil
}

type NullableOnPremDeployTargetResult struct {
	value *OnPremDeployTargetResult
	isSet bool
}

func (v NullableOnPremDeployTargetResult) Get() *OnPremDeployTargetResult {
	return v.value
}

func (v *NullableOnPremDeployTargetResult) Set(val *OnPremDeployTargetResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOnPremDeployTargetResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOnPremDeployTargetResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnPremDeployTargetResult(val *OnPremDeployTargetResult) *NullableOnPremDeployTargetResult {
	return &NullableOnPremDeployTargetResult{value: val, isSet: true}
}

func (v NullableOnPremDeployTargetResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnPremDeployTargetResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


