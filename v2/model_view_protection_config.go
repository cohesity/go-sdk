/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ViewProtectionConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewProtectionConfig{}

// ViewProtectionConfig Specifies the View protection config.
type ViewProtectionConfig struct {
	ExistingGroupParam *ViewProtectionConfigExistingGroupParam `json:"existingGroupParam,omitempty"`
	NewGroupParam *ViewProtectionConfigNewGroupParam `json:"newGroupParam,omitempty"`
	// Specifies the View protection group type.
	ProtectionGroupType NullableString `json:"protectionGroupType"`
}

type _ViewProtectionConfig ViewProtectionConfig

// NewViewProtectionConfig instantiates a new ViewProtectionConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewProtectionConfig(protectionGroupType NullableString) *ViewProtectionConfig {
	this := ViewProtectionConfig{}
	this.ProtectionGroupType = protectionGroupType
	return &this
}

// NewViewProtectionConfigWithDefaults instantiates a new ViewProtectionConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewProtectionConfigWithDefaults() *ViewProtectionConfig {
	this := ViewProtectionConfig{}
	return &this
}

// GetExistingGroupParam returns the ExistingGroupParam field value if set, zero value otherwise.
func (o *ViewProtectionConfig) GetExistingGroupParam() ViewProtectionConfigExistingGroupParam {
	if o == nil || IsNil(o.ExistingGroupParam) {
		var ret ViewProtectionConfigExistingGroupParam
		return ret
	}
	return *o.ExistingGroupParam
}

// GetExistingGroupParamOk returns a tuple with the ExistingGroupParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProtectionConfig) GetExistingGroupParamOk() (*ViewProtectionConfigExistingGroupParam, bool) {
	if o == nil || IsNil(o.ExistingGroupParam) {
		return nil, false
	}
	return o.ExistingGroupParam, true
}

// HasExistingGroupParam returns a boolean if a field has been set.
func (o *ViewProtectionConfig) HasExistingGroupParam() bool {
	if o != nil && !IsNil(o.ExistingGroupParam) {
		return true
	}

	return false
}

// SetExistingGroupParam gets a reference to the given ViewProtectionConfigExistingGroupParam and assigns it to the ExistingGroupParam field.
func (o *ViewProtectionConfig) SetExistingGroupParam(v ViewProtectionConfigExistingGroupParam) {
	o.ExistingGroupParam = &v
}

// GetNewGroupParam returns the NewGroupParam field value if set, zero value otherwise.
func (o *ViewProtectionConfig) GetNewGroupParam() ViewProtectionConfigNewGroupParam {
	if o == nil || IsNil(o.NewGroupParam) {
		var ret ViewProtectionConfigNewGroupParam
		return ret
	}
	return *o.NewGroupParam
}

// GetNewGroupParamOk returns a tuple with the NewGroupParam field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewProtectionConfig) GetNewGroupParamOk() (*ViewProtectionConfigNewGroupParam, bool) {
	if o == nil || IsNil(o.NewGroupParam) {
		return nil, false
	}
	return o.NewGroupParam, true
}

// HasNewGroupParam returns a boolean if a field has been set.
func (o *ViewProtectionConfig) HasNewGroupParam() bool {
	if o != nil && !IsNil(o.NewGroupParam) {
		return true
	}

	return false
}

// SetNewGroupParam gets a reference to the given ViewProtectionConfigNewGroupParam and assigns it to the NewGroupParam field.
func (o *ViewProtectionConfig) SetNewGroupParam(v ViewProtectionConfigNewGroupParam) {
	o.NewGroupParam = &v
}

// GetProtectionGroupType returns the ProtectionGroupType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ViewProtectionConfig) GetProtectionGroupType() string {
	if o == nil || o.ProtectionGroupType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ProtectionGroupType.Get()
}

// GetProtectionGroupTypeOk returns a tuple with the ProtectionGroupType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewProtectionConfig) GetProtectionGroupTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProtectionGroupType.Get(), o.ProtectionGroupType.IsSet()
}

// SetProtectionGroupType sets field value
func (o *ViewProtectionConfig) SetProtectionGroupType(v string) {
	o.ProtectionGroupType.Set(&v)
}

func (o ViewProtectionConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewProtectionConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExistingGroupParam) {
		toSerialize["existingGroupParam"] = o.ExistingGroupParam
	}
	if !IsNil(o.NewGroupParam) {
		toSerialize["newGroupParam"] = o.NewGroupParam
	}
	toSerialize["protectionGroupType"] = o.ProtectionGroupType.Get()
	return toSerialize, nil
}

func (o *ViewProtectionConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"protectionGroupType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViewProtectionConfig := _ViewProtectionConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViewProtectionConfig)

	if err != nil {
		return err
	}

	*o = ViewProtectionConfig(varViewProtectionConfig)

	return err
}

type NullableViewProtectionConfig struct {
	value *ViewProtectionConfig
	isSet bool
}

func (v NullableViewProtectionConfig) Get() *ViewProtectionConfig {
	return v.value
}

func (v *NullableViewProtectionConfig) Set(val *ViewProtectionConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableViewProtectionConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableViewProtectionConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewProtectionConfig(val *ViewProtectionConfig) *NullableViewProtectionConfig {
	return &NullableViewProtectionConfig{value: val, isSet: true}
}

func (v NullableViewProtectionConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewProtectionConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


