/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RecoverPureSanVolumeOriginalSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverPureSanVolumeOriginalSourceConfig{}

// RecoverPureSanVolumeOriginalSourceConfig Specifies the network config parameters to be applied for Pure volumes if recovering to original Source.
type RecoverPureSanVolumeOriginalSourceConfig struct {
	RenameRecoveredVolumeParams NullableRecoverPureSanVolumeOriginalSourceConfigRenameRecoveredVolumeParams `json:"renameRecoveredVolumeParams,omitempty"`
	ResourcePool NullableRecoverPureSanGroupOriginalSourceConfigResourcePool `json:"resourcePool,omitempty"`
}

// NewRecoverPureSanVolumeOriginalSourceConfig instantiates a new RecoverPureSanVolumeOriginalSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverPureSanVolumeOriginalSourceConfig() *RecoverPureSanVolumeOriginalSourceConfig {
	this := RecoverPureSanVolumeOriginalSourceConfig{}
	return &this
}

// NewRecoverPureSanVolumeOriginalSourceConfigWithDefaults instantiates a new RecoverPureSanVolumeOriginalSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverPureSanVolumeOriginalSourceConfigWithDefaults() *RecoverPureSanVolumeOriginalSourceConfig {
	this := RecoverPureSanVolumeOriginalSourceConfig{}
	return &this
}

// GetRenameRecoveredVolumeParams returns the RenameRecoveredVolumeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPureSanVolumeOriginalSourceConfig) GetRenameRecoveredVolumeParams() RecoverPureSanVolumeOriginalSourceConfigRenameRecoveredVolumeParams {
	if o == nil || IsNil(o.RenameRecoveredVolumeParams.Get()) {
		var ret RecoverPureSanVolumeOriginalSourceConfigRenameRecoveredVolumeParams
		return ret
	}
	return *o.RenameRecoveredVolumeParams.Get()
}

// GetRenameRecoveredVolumeParamsOk returns a tuple with the RenameRecoveredVolumeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPureSanVolumeOriginalSourceConfig) GetRenameRecoveredVolumeParamsOk() (*RecoverPureSanVolumeOriginalSourceConfigRenameRecoveredVolumeParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenameRecoveredVolumeParams.Get(), o.RenameRecoveredVolumeParams.IsSet()
}

// HasRenameRecoveredVolumeParams returns a boolean if a field has been set.
func (o *RecoverPureSanVolumeOriginalSourceConfig) HasRenameRecoveredVolumeParams() bool {
	if o != nil && o.RenameRecoveredVolumeParams.IsSet() {
		return true
	}

	return false
}

// SetRenameRecoveredVolumeParams gets a reference to the given NullableRecoverPureSanVolumeOriginalSourceConfigRenameRecoveredVolumeParams and assigns it to the RenameRecoveredVolumeParams field.
func (o *RecoverPureSanVolumeOriginalSourceConfig) SetRenameRecoveredVolumeParams(v RecoverPureSanVolumeOriginalSourceConfigRenameRecoveredVolumeParams) {
	o.RenameRecoveredVolumeParams.Set(&v)
}
// SetRenameRecoveredVolumeParamsNil sets the value for RenameRecoveredVolumeParams to be an explicit nil
func (o *RecoverPureSanVolumeOriginalSourceConfig) SetRenameRecoveredVolumeParamsNil() {
	o.RenameRecoveredVolumeParams.Set(nil)
}

// UnsetRenameRecoveredVolumeParams ensures that no value is present for RenameRecoveredVolumeParams, not even an explicit nil
func (o *RecoverPureSanVolumeOriginalSourceConfig) UnsetRenameRecoveredVolumeParams() {
	o.RenameRecoveredVolumeParams.Unset()
}

// GetResourcePool returns the ResourcePool field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverPureSanVolumeOriginalSourceConfig) GetResourcePool() RecoverPureSanGroupOriginalSourceConfigResourcePool {
	if o == nil || IsNil(o.ResourcePool.Get()) {
		var ret RecoverPureSanGroupOriginalSourceConfigResourcePool
		return ret
	}
	return *o.ResourcePool.Get()
}

// GetResourcePoolOk returns a tuple with the ResourcePool field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverPureSanVolumeOriginalSourceConfig) GetResourcePoolOk() (*RecoverPureSanGroupOriginalSourceConfigResourcePool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourcePool.Get(), o.ResourcePool.IsSet()
}

// HasResourcePool returns a boolean if a field has been set.
func (o *RecoverPureSanVolumeOriginalSourceConfig) HasResourcePool() bool {
	if o != nil && o.ResourcePool.IsSet() {
		return true
	}

	return false
}

// SetResourcePool gets a reference to the given NullableRecoverPureSanGroupOriginalSourceConfigResourcePool and assigns it to the ResourcePool field.
func (o *RecoverPureSanVolumeOriginalSourceConfig) SetResourcePool(v RecoverPureSanGroupOriginalSourceConfigResourcePool) {
	o.ResourcePool.Set(&v)
}
// SetResourcePoolNil sets the value for ResourcePool to be an explicit nil
func (o *RecoverPureSanVolumeOriginalSourceConfig) SetResourcePoolNil() {
	o.ResourcePool.Set(nil)
}

// UnsetResourcePool ensures that no value is present for ResourcePool, not even an explicit nil
func (o *RecoverPureSanVolumeOriginalSourceConfig) UnsetResourcePool() {
	o.ResourcePool.Unset()
}

func (o RecoverPureSanVolumeOriginalSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverPureSanVolumeOriginalSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.RenameRecoveredVolumeParams.IsSet() {
		toSerialize["renameRecoveredVolumeParams"] = o.RenameRecoveredVolumeParams.Get()
	}
	if o.ResourcePool.IsSet() {
		toSerialize["resourcePool"] = o.ResourcePool.Get()
	}
	return toSerialize, nil
}

type NullableRecoverPureSanVolumeOriginalSourceConfig struct {
	value *RecoverPureSanVolumeOriginalSourceConfig
	isSet bool
}

func (v NullableRecoverPureSanVolumeOriginalSourceConfig) Get() *RecoverPureSanVolumeOriginalSourceConfig {
	return v.value
}

func (v *NullableRecoverPureSanVolumeOriginalSourceConfig) Set(val *RecoverPureSanVolumeOriginalSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverPureSanVolumeOriginalSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverPureSanVolumeOriginalSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverPureSanVolumeOriginalSourceConfig(val *RecoverPureSanVolumeOriginalSourceConfig) *NullableRecoverPureSanVolumeOriginalSourceConfig {
	return &NullableRecoverPureSanVolumeOriginalSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverPureSanVolumeOriginalSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverPureSanVolumeOriginalSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


