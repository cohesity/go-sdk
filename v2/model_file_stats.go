/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the FileStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FileStats{}

// FileStats Specifies the file stats.
type FileStats struct {
	// Specifies the number of files.
	FilesCount NullableInt64 `json:"filesCount,omitempty"`
	// Specifies the size of all the files in bytes.
	FilesSizeBytes NullableInt64 `json:"filesSizeBytes,omitempty"`
	// Specifies the file type.
	Type NullableString `json:"type,omitempty"`
}

// NewFileStats instantiates a new FileStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileStats() *FileStats {
	this := FileStats{}
	return &this
}

// NewFileStatsWithDefaults instantiates a new FileStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileStatsWithDefaults() *FileStats {
	this := FileStats{}
	return &this
}

// GetFilesCount returns the FilesCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStats) GetFilesCount() int64 {
	if o == nil || IsNil(o.FilesCount.Get()) {
		var ret int64
		return ret
	}
	return *o.FilesCount.Get()
}

// GetFilesCountOk returns a tuple with the FilesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStats) GetFilesCountOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilesCount.Get(), o.FilesCount.IsSet()
}

// HasFilesCount returns a boolean if a field has been set.
func (o *FileStats) HasFilesCount() bool {
	if o != nil && o.FilesCount.IsSet() {
		return true
	}

	return false
}

// SetFilesCount gets a reference to the given NullableInt64 and assigns it to the FilesCount field.
func (o *FileStats) SetFilesCount(v int64) {
	o.FilesCount.Set(&v)
}
// SetFilesCountNil sets the value for FilesCount to be an explicit nil
func (o *FileStats) SetFilesCountNil() {
	o.FilesCount.Set(nil)
}

// UnsetFilesCount ensures that no value is present for FilesCount, not even an explicit nil
func (o *FileStats) UnsetFilesCount() {
	o.FilesCount.Unset()
}

// GetFilesSizeBytes returns the FilesSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStats) GetFilesSizeBytes() int64 {
	if o == nil || IsNil(o.FilesSizeBytes.Get()) {
		var ret int64
		return ret
	}
	return *o.FilesSizeBytes.Get()
}

// GetFilesSizeBytesOk returns a tuple with the FilesSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStats) GetFilesSizeBytesOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.FilesSizeBytes.Get(), o.FilesSizeBytes.IsSet()
}

// HasFilesSizeBytes returns a boolean if a field has been set.
func (o *FileStats) HasFilesSizeBytes() bool {
	if o != nil && o.FilesSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetFilesSizeBytes gets a reference to the given NullableInt64 and assigns it to the FilesSizeBytes field.
func (o *FileStats) SetFilesSizeBytes(v int64) {
	o.FilesSizeBytes.Set(&v)
}
// SetFilesSizeBytesNil sets the value for FilesSizeBytes to be an explicit nil
func (o *FileStats) SetFilesSizeBytesNil() {
	o.FilesSizeBytes.Set(nil)
}

// UnsetFilesSizeBytes ensures that no value is present for FilesSizeBytes, not even an explicit nil
func (o *FileStats) UnsetFilesSizeBytes() {
	o.FilesSizeBytes.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStats) GetType() string {
	if o == nil || IsNil(o.Type.Get()) {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStats) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *FileStats) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *FileStats) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *FileStats) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *FileStats) UnsetType() {
	o.Type.Unset()
}

func (o FileStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FileStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesCount.IsSet() {
		toSerialize["filesCount"] = o.FilesCount.Get()
	}
	if o.FilesSizeBytes.IsSet() {
		toSerialize["filesSizeBytes"] = o.FilesSizeBytes.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return toSerialize, nil
}

type NullableFileStats struct {
	value *FileStats
	isSet bool
}

func (v NullableFileStats) Get() *FileStats {
	return v.value
}

func (v *NullableFileStats) Set(val *FileStats) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStats) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStats(val *FileStats) *NullableFileStats {
	return &NullableFileStats{value: val, isSet: true}
}

func (v NullableFileStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


