/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the DataTieringAnalysisInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DataTieringAnalysisInfo{}

// DataTieringAnalysisInfo Specifies the data tiering analysis details.
type DataTieringAnalysisInfo struct {
	// message from the last analysis run stating the error message in case of error in analysis run or warning message if the run finished successfully, but there were some warning messages.
	Message NullableString `json:"message,omitempty"`
	Progress *ProgressSummary `json:"progress,omitempty"`
	// Status of the analysis run. 'Running' indicates that the run is still running. 'Canceled' indicates that the run has been canceled. 'Canceling' indicates that the run is in the process of being  canceled. 'Failed' indicates that the run has failed. 'Missed' indicates that the run was unable to take place at the  scheduled time because the previous run was still happening. 'Succeeded' indicates that the run has finished successfully. 'SucceededWithWarning' indicates that the run finished  successfully, but there were some warning messages. 'OnHold' indicates that the run has On hold. 'Skipped' indicates that the run was skipped.
	Status NullableString `json:"status,omitempty"`
	// Array of Tag objects.
	TagsInfo []DataTieringTagObject `json:"tagsInfo,omitempty"`
}

// NewDataTieringAnalysisInfo instantiates a new DataTieringAnalysisInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTieringAnalysisInfo() *DataTieringAnalysisInfo {
	this := DataTieringAnalysisInfo{}
	return &this
}

// NewDataTieringAnalysisInfoWithDefaults instantiates a new DataTieringAnalysisInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTieringAnalysisInfoWithDefaults() *DataTieringAnalysisInfo {
	this := DataTieringAnalysisInfo{}
	return &this
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringAnalysisInfo) GetMessage() string {
	if o == nil || IsNil(o.Message.Get()) {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringAnalysisInfo) GetMessageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *DataTieringAnalysisInfo) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *DataTieringAnalysisInfo) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *DataTieringAnalysisInfo) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *DataTieringAnalysisInfo) UnsetMessage() {
	o.Message.Unset()
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *DataTieringAnalysisInfo) GetProgress() ProgressSummary {
	if o == nil || IsNil(o.Progress) {
		var ret ProgressSummary
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringAnalysisInfo) GetProgressOk() (*ProgressSummary, bool) {
	if o == nil || IsNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *DataTieringAnalysisInfo) HasProgress() bool {
	if o != nil && !IsNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given ProgressSummary and assigns it to the Progress field.
func (o *DataTieringAnalysisInfo) SetProgress(v ProgressSummary) {
	o.Progress = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringAnalysisInfo) GetStatus() string {
	if o == nil || IsNil(o.Status.Get()) {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringAnalysisInfo) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *DataTieringAnalysisInfo) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *DataTieringAnalysisInfo) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *DataTieringAnalysisInfo) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *DataTieringAnalysisInfo) UnsetStatus() {
	o.Status.Unset()
}

// GetTagsInfo returns the TagsInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringAnalysisInfo) GetTagsInfo() []DataTieringTagObject {
	if o == nil {
		var ret []DataTieringTagObject
		return ret
	}
	return o.TagsInfo
}

// GetTagsInfoOk returns a tuple with the TagsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringAnalysisInfo) GetTagsInfoOk() ([]DataTieringTagObject, bool) {
	if o == nil || IsNil(o.TagsInfo) {
		return nil, false
	}
	return o.TagsInfo, true
}

// HasTagsInfo returns a boolean if a field has been set.
func (o *DataTieringAnalysisInfo) HasTagsInfo() bool {
	if o != nil && !IsNil(o.TagsInfo) {
		return true
	}

	return false
}

// SetTagsInfo gets a reference to the given []DataTieringTagObject and assigns it to the TagsInfo field.
func (o *DataTieringAnalysisInfo) SetTagsInfo(v []DataTieringTagObject) {
	o.TagsInfo = v
}

func (o DataTieringAnalysisInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DataTieringAnalysisInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if !IsNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.TagsInfo != nil {
		toSerialize["tagsInfo"] = o.TagsInfo
	}
	return toSerialize, nil
}

type NullableDataTieringAnalysisInfo struct {
	value *DataTieringAnalysisInfo
	isSet bool
}

func (v NullableDataTieringAnalysisInfo) Get() *DataTieringAnalysisInfo {
	return v.value
}

func (v *NullableDataTieringAnalysisInfo) Set(val *DataTieringAnalysisInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTieringAnalysisInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTieringAnalysisInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTieringAnalysisInfo(val *DataTieringAnalysisInfo) *NullableDataTieringAnalysisInfo {
	return &NullableDataTieringAnalysisInfo{value: val, isSet: true}
}

func (v NullableDataTieringAnalysisInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTieringAnalysisInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


