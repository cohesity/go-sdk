/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the SmbFileOpens type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SmbFileOpens{}

// SmbFileOpens Specifies the response to SMB active file opens.
type SmbFileOpens struct {
	// Specifies the active opens for an SMB file in a view.
	ActiveFilePaths []SmbActiveFilePath `json:"activeFilePaths,omitempty"`
	// Specifies the pagination cookie
	Cookie NullableString `json:"cookie,omitempty"`
}

// NewSmbFileOpens instantiates a new SmbFileOpens object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSmbFileOpens() *SmbFileOpens {
	this := SmbFileOpens{}
	return &this
}

// NewSmbFileOpensWithDefaults instantiates a new SmbFileOpens object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSmbFileOpensWithDefaults() *SmbFileOpens {
	this := SmbFileOpens{}
	return &this
}

// GetActiveFilePaths returns the ActiveFilePaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbFileOpens) GetActiveFilePaths() []SmbActiveFilePath {
	if o == nil {
		var ret []SmbActiveFilePath
		return ret
	}
	return o.ActiveFilePaths
}

// GetActiveFilePathsOk returns a tuple with the ActiveFilePaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbFileOpens) GetActiveFilePathsOk() ([]SmbActiveFilePath, bool) {
	if o == nil || IsNil(o.ActiveFilePaths) {
		return nil, false
	}
	return o.ActiveFilePaths, true
}

// HasActiveFilePaths returns a boolean if a field has been set.
func (o *SmbFileOpens) HasActiveFilePaths() bool {
	if o != nil && !IsNil(o.ActiveFilePaths) {
		return true
	}

	return false
}

// SetActiveFilePaths gets a reference to the given []SmbActiveFilePath and assigns it to the ActiveFilePaths field.
func (o *SmbFileOpens) SetActiveFilePaths(v []SmbActiveFilePath) {
	o.ActiveFilePaths = v
}

// GetCookie returns the Cookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SmbFileOpens) GetCookie() string {
	if o == nil || IsNil(o.Cookie.Get()) {
		var ret string
		return ret
	}
	return *o.Cookie.Get()
}

// GetCookieOk returns a tuple with the Cookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SmbFileOpens) GetCookieOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Cookie.Get(), o.Cookie.IsSet()
}

// HasCookie returns a boolean if a field has been set.
func (o *SmbFileOpens) HasCookie() bool {
	if o != nil && o.Cookie.IsSet() {
		return true
	}

	return false
}

// SetCookie gets a reference to the given NullableString and assigns it to the Cookie field.
func (o *SmbFileOpens) SetCookie(v string) {
	o.Cookie.Set(&v)
}
// SetCookieNil sets the value for Cookie to be an explicit nil
func (o *SmbFileOpens) SetCookieNil() {
	o.Cookie.Set(nil)
}

// UnsetCookie ensures that no value is present for Cookie, not even an explicit nil
func (o *SmbFileOpens) UnsetCookie() {
	o.Cookie.Unset()
}

func (o SmbFileOpens) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SmbFileOpens) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveFilePaths != nil {
		toSerialize["activeFilePaths"] = o.ActiveFilePaths
	}
	if o.Cookie.IsSet() {
		toSerialize["cookie"] = o.Cookie.Get()
	}
	return toSerialize, nil
}

type NullableSmbFileOpens struct {
	value *SmbFileOpens
	isSet bool
}

func (v NullableSmbFileOpens) Get() *SmbFileOpens {
	return v.value
}

func (v *NullableSmbFileOpens) Set(val *SmbFileOpens) {
	v.value = val
	v.isSet = true
}

func (v NullableSmbFileOpens) IsSet() bool {
	return v.isSet
}

func (v *NullableSmbFileOpens) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSmbFileOpens(val *SmbFileOpens) *NullableSmbFileOpens {
	return &NullableSmbFileOpens{value: val, isSet: true}
}

func (v NullableSmbFileOpens) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSmbFileOpens) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


