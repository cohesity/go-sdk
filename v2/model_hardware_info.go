/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the HardwareInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HardwareInfo{}

// HardwareInfo Specifies general information about node hardware.
type HardwareInfo struct {
	// Chassis model.
	ChassisModel NullableString `json:"chassisModel,omitempty"`
	// Chassis serial number programmed by manufacturer.
	ChassisSerial NullableString `json:"chassisSerial,omitempty"`
	// Chassis serial number programmed by manufacturer.
	ChassisType NullableString `json:"chassisType,omitempty"`
	// Chassis serial number programmed by cohesity software.
	CohesityChassisSerial NullableString `json:"cohesityChassisSerial,omitempty"`
	// Node serial number programmed by cohesity software.
	CohesityNodeSerial NullableString `json:"cohesityNodeSerial,omitempty"`
	// Specifies the HBA model type for the given node.
	HbaModel NullableString `json:"hbaModel,omitempty"`
	// Specifies the channel through which the IPMI interface communicates on the network.
	IpmiLanChannel NullableString `json:"ipmiLanChannel,omitempty"`
	// Maximum number of slots.
	MaxSlots NullableString `json:"maxSlots,omitempty"`
	// Node model.
	NodeModel NullableString `json:"nodeModel,omitempty"`
	// Node serial number programmed by manufacturer.
	NodeSerial NullableString `json:"nodeSerial,omitempty"`
	// Specifies the product model for the given node.
	ProductModel NullableString `json:"productModel,omitempty"`
	// Specifies the type of the product model for the given node.
	ProductModelType NullableString `json:"productModelType,omitempty"`
	// Slot number of the node in the chassis.
	SlotNumber NullableString `json:"slotNumber,omitempty"`
}

// NewHardwareInfo instantiates a new HardwareInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHardwareInfo() *HardwareInfo {
	this := HardwareInfo{}
	return &this
}

// NewHardwareInfoWithDefaults instantiates a new HardwareInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHardwareInfoWithDefaults() *HardwareInfo {
	this := HardwareInfo{}
	return &this
}

// GetChassisModel returns the ChassisModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetChassisModel() string {
	if o == nil || IsNil(o.ChassisModel.Get()) {
		var ret string
		return ret
	}
	return *o.ChassisModel.Get()
}

// GetChassisModelOk returns a tuple with the ChassisModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetChassisModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChassisModel.Get(), o.ChassisModel.IsSet()
}

// HasChassisModel returns a boolean if a field has been set.
func (o *HardwareInfo) HasChassisModel() bool {
	if o != nil && o.ChassisModel.IsSet() {
		return true
	}

	return false
}

// SetChassisModel gets a reference to the given NullableString and assigns it to the ChassisModel field.
func (o *HardwareInfo) SetChassisModel(v string) {
	o.ChassisModel.Set(&v)
}
// SetChassisModelNil sets the value for ChassisModel to be an explicit nil
func (o *HardwareInfo) SetChassisModelNil() {
	o.ChassisModel.Set(nil)
}

// UnsetChassisModel ensures that no value is present for ChassisModel, not even an explicit nil
func (o *HardwareInfo) UnsetChassisModel() {
	o.ChassisModel.Unset()
}

// GetChassisSerial returns the ChassisSerial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetChassisSerial() string {
	if o == nil || IsNil(o.ChassisSerial.Get()) {
		var ret string
		return ret
	}
	return *o.ChassisSerial.Get()
}

// GetChassisSerialOk returns a tuple with the ChassisSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetChassisSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChassisSerial.Get(), o.ChassisSerial.IsSet()
}

// HasChassisSerial returns a boolean if a field has been set.
func (o *HardwareInfo) HasChassisSerial() bool {
	if o != nil && o.ChassisSerial.IsSet() {
		return true
	}

	return false
}

// SetChassisSerial gets a reference to the given NullableString and assigns it to the ChassisSerial field.
func (o *HardwareInfo) SetChassisSerial(v string) {
	o.ChassisSerial.Set(&v)
}
// SetChassisSerialNil sets the value for ChassisSerial to be an explicit nil
func (o *HardwareInfo) SetChassisSerialNil() {
	o.ChassisSerial.Set(nil)
}

// UnsetChassisSerial ensures that no value is present for ChassisSerial, not even an explicit nil
func (o *HardwareInfo) UnsetChassisSerial() {
	o.ChassisSerial.Unset()
}

// GetChassisType returns the ChassisType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetChassisType() string {
	if o == nil || IsNil(o.ChassisType.Get()) {
		var ret string
		return ret
	}
	return *o.ChassisType.Get()
}

// GetChassisTypeOk returns a tuple with the ChassisType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetChassisTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChassisType.Get(), o.ChassisType.IsSet()
}

// HasChassisType returns a boolean if a field has been set.
func (o *HardwareInfo) HasChassisType() bool {
	if o != nil && o.ChassisType.IsSet() {
		return true
	}

	return false
}

// SetChassisType gets a reference to the given NullableString and assigns it to the ChassisType field.
func (o *HardwareInfo) SetChassisType(v string) {
	o.ChassisType.Set(&v)
}
// SetChassisTypeNil sets the value for ChassisType to be an explicit nil
func (o *HardwareInfo) SetChassisTypeNil() {
	o.ChassisType.Set(nil)
}

// UnsetChassisType ensures that no value is present for ChassisType, not even an explicit nil
func (o *HardwareInfo) UnsetChassisType() {
	o.ChassisType.Unset()
}

// GetCohesityChassisSerial returns the CohesityChassisSerial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetCohesityChassisSerial() string {
	if o == nil || IsNil(o.CohesityChassisSerial.Get()) {
		var ret string
		return ret
	}
	return *o.CohesityChassisSerial.Get()
}

// GetCohesityChassisSerialOk returns a tuple with the CohesityChassisSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetCohesityChassisSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CohesityChassisSerial.Get(), o.CohesityChassisSerial.IsSet()
}

// HasCohesityChassisSerial returns a boolean if a field has been set.
func (o *HardwareInfo) HasCohesityChassisSerial() bool {
	if o != nil && o.CohesityChassisSerial.IsSet() {
		return true
	}

	return false
}

// SetCohesityChassisSerial gets a reference to the given NullableString and assigns it to the CohesityChassisSerial field.
func (o *HardwareInfo) SetCohesityChassisSerial(v string) {
	o.CohesityChassisSerial.Set(&v)
}
// SetCohesityChassisSerialNil sets the value for CohesityChassisSerial to be an explicit nil
func (o *HardwareInfo) SetCohesityChassisSerialNil() {
	o.CohesityChassisSerial.Set(nil)
}

// UnsetCohesityChassisSerial ensures that no value is present for CohesityChassisSerial, not even an explicit nil
func (o *HardwareInfo) UnsetCohesityChassisSerial() {
	o.CohesityChassisSerial.Unset()
}

// GetCohesityNodeSerial returns the CohesityNodeSerial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetCohesityNodeSerial() string {
	if o == nil || IsNil(o.CohesityNodeSerial.Get()) {
		var ret string
		return ret
	}
	return *o.CohesityNodeSerial.Get()
}

// GetCohesityNodeSerialOk returns a tuple with the CohesityNodeSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetCohesityNodeSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CohesityNodeSerial.Get(), o.CohesityNodeSerial.IsSet()
}

// HasCohesityNodeSerial returns a boolean if a field has been set.
func (o *HardwareInfo) HasCohesityNodeSerial() bool {
	if o != nil && o.CohesityNodeSerial.IsSet() {
		return true
	}

	return false
}

// SetCohesityNodeSerial gets a reference to the given NullableString and assigns it to the CohesityNodeSerial field.
func (o *HardwareInfo) SetCohesityNodeSerial(v string) {
	o.CohesityNodeSerial.Set(&v)
}
// SetCohesityNodeSerialNil sets the value for CohesityNodeSerial to be an explicit nil
func (o *HardwareInfo) SetCohesityNodeSerialNil() {
	o.CohesityNodeSerial.Set(nil)
}

// UnsetCohesityNodeSerial ensures that no value is present for CohesityNodeSerial, not even an explicit nil
func (o *HardwareInfo) UnsetCohesityNodeSerial() {
	o.CohesityNodeSerial.Unset()
}

// GetHbaModel returns the HbaModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetHbaModel() string {
	if o == nil || IsNil(o.HbaModel.Get()) {
		var ret string
		return ret
	}
	return *o.HbaModel.Get()
}

// GetHbaModelOk returns a tuple with the HbaModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetHbaModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.HbaModel.Get(), o.HbaModel.IsSet()
}

// HasHbaModel returns a boolean if a field has been set.
func (o *HardwareInfo) HasHbaModel() bool {
	if o != nil && o.HbaModel.IsSet() {
		return true
	}

	return false
}

// SetHbaModel gets a reference to the given NullableString and assigns it to the HbaModel field.
func (o *HardwareInfo) SetHbaModel(v string) {
	o.HbaModel.Set(&v)
}
// SetHbaModelNil sets the value for HbaModel to be an explicit nil
func (o *HardwareInfo) SetHbaModelNil() {
	o.HbaModel.Set(nil)
}

// UnsetHbaModel ensures that no value is present for HbaModel, not even an explicit nil
func (o *HardwareInfo) UnsetHbaModel() {
	o.HbaModel.Unset()
}

// GetIpmiLanChannel returns the IpmiLanChannel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetIpmiLanChannel() string {
	if o == nil || IsNil(o.IpmiLanChannel.Get()) {
		var ret string
		return ret
	}
	return *o.IpmiLanChannel.Get()
}

// GetIpmiLanChannelOk returns a tuple with the IpmiLanChannel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetIpmiLanChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IpmiLanChannel.Get(), o.IpmiLanChannel.IsSet()
}

// HasIpmiLanChannel returns a boolean if a field has been set.
func (o *HardwareInfo) HasIpmiLanChannel() bool {
	if o != nil && o.IpmiLanChannel.IsSet() {
		return true
	}

	return false
}

// SetIpmiLanChannel gets a reference to the given NullableString and assigns it to the IpmiLanChannel field.
func (o *HardwareInfo) SetIpmiLanChannel(v string) {
	o.IpmiLanChannel.Set(&v)
}
// SetIpmiLanChannelNil sets the value for IpmiLanChannel to be an explicit nil
func (o *HardwareInfo) SetIpmiLanChannelNil() {
	o.IpmiLanChannel.Set(nil)
}

// UnsetIpmiLanChannel ensures that no value is present for IpmiLanChannel, not even an explicit nil
func (o *HardwareInfo) UnsetIpmiLanChannel() {
	o.IpmiLanChannel.Unset()
}

// GetMaxSlots returns the MaxSlots field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetMaxSlots() string {
	if o == nil || IsNil(o.MaxSlots.Get()) {
		var ret string
		return ret
	}
	return *o.MaxSlots.Get()
}

// GetMaxSlotsOk returns a tuple with the MaxSlots field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetMaxSlotsOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaxSlots.Get(), o.MaxSlots.IsSet()
}

// HasMaxSlots returns a boolean if a field has been set.
func (o *HardwareInfo) HasMaxSlots() bool {
	if o != nil && o.MaxSlots.IsSet() {
		return true
	}

	return false
}

// SetMaxSlots gets a reference to the given NullableString and assigns it to the MaxSlots field.
func (o *HardwareInfo) SetMaxSlots(v string) {
	o.MaxSlots.Set(&v)
}
// SetMaxSlotsNil sets the value for MaxSlots to be an explicit nil
func (o *HardwareInfo) SetMaxSlotsNil() {
	o.MaxSlots.Set(nil)
}

// UnsetMaxSlots ensures that no value is present for MaxSlots, not even an explicit nil
func (o *HardwareInfo) UnsetMaxSlots() {
	o.MaxSlots.Unset()
}

// GetNodeModel returns the NodeModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetNodeModel() string {
	if o == nil || IsNil(o.NodeModel.Get()) {
		var ret string
		return ret
	}
	return *o.NodeModel.Get()
}

// GetNodeModelOk returns a tuple with the NodeModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetNodeModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeModel.Get(), o.NodeModel.IsSet()
}

// HasNodeModel returns a boolean if a field has been set.
func (o *HardwareInfo) HasNodeModel() bool {
	if o != nil && o.NodeModel.IsSet() {
		return true
	}

	return false
}

// SetNodeModel gets a reference to the given NullableString and assigns it to the NodeModel field.
func (o *HardwareInfo) SetNodeModel(v string) {
	o.NodeModel.Set(&v)
}
// SetNodeModelNil sets the value for NodeModel to be an explicit nil
func (o *HardwareInfo) SetNodeModelNil() {
	o.NodeModel.Set(nil)
}

// UnsetNodeModel ensures that no value is present for NodeModel, not even an explicit nil
func (o *HardwareInfo) UnsetNodeModel() {
	o.NodeModel.Unset()
}

// GetNodeSerial returns the NodeSerial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetNodeSerial() string {
	if o == nil || IsNil(o.NodeSerial.Get()) {
		var ret string
		return ret
	}
	return *o.NodeSerial.Get()
}

// GetNodeSerialOk returns a tuple with the NodeSerial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetNodeSerialOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NodeSerial.Get(), o.NodeSerial.IsSet()
}

// HasNodeSerial returns a boolean if a field has been set.
func (o *HardwareInfo) HasNodeSerial() bool {
	if o != nil && o.NodeSerial.IsSet() {
		return true
	}

	return false
}

// SetNodeSerial gets a reference to the given NullableString and assigns it to the NodeSerial field.
func (o *HardwareInfo) SetNodeSerial(v string) {
	o.NodeSerial.Set(&v)
}
// SetNodeSerialNil sets the value for NodeSerial to be an explicit nil
func (o *HardwareInfo) SetNodeSerialNil() {
	o.NodeSerial.Set(nil)
}

// UnsetNodeSerial ensures that no value is present for NodeSerial, not even an explicit nil
func (o *HardwareInfo) UnsetNodeSerial() {
	o.NodeSerial.Unset()
}

// GetProductModel returns the ProductModel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetProductModel() string {
	if o == nil || IsNil(o.ProductModel.Get()) {
		var ret string
		return ret
	}
	return *o.ProductModel.Get()
}

// GetProductModelOk returns a tuple with the ProductModel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetProductModelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductModel.Get(), o.ProductModel.IsSet()
}

// HasProductModel returns a boolean if a field has been set.
func (o *HardwareInfo) HasProductModel() bool {
	if o != nil && o.ProductModel.IsSet() {
		return true
	}

	return false
}

// SetProductModel gets a reference to the given NullableString and assigns it to the ProductModel field.
func (o *HardwareInfo) SetProductModel(v string) {
	o.ProductModel.Set(&v)
}
// SetProductModelNil sets the value for ProductModel to be an explicit nil
func (o *HardwareInfo) SetProductModelNil() {
	o.ProductModel.Set(nil)
}

// UnsetProductModel ensures that no value is present for ProductModel, not even an explicit nil
func (o *HardwareInfo) UnsetProductModel() {
	o.ProductModel.Unset()
}

// GetProductModelType returns the ProductModelType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetProductModelType() string {
	if o == nil || IsNil(o.ProductModelType.Get()) {
		var ret string
		return ret
	}
	return *o.ProductModelType.Get()
}

// GetProductModelTypeOk returns a tuple with the ProductModelType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetProductModelTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProductModelType.Get(), o.ProductModelType.IsSet()
}

// HasProductModelType returns a boolean if a field has been set.
func (o *HardwareInfo) HasProductModelType() bool {
	if o != nil && o.ProductModelType.IsSet() {
		return true
	}

	return false
}

// SetProductModelType gets a reference to the given NullableString and assigns it to the ProductModelType field.
func (o *HardwareInfo) SetProductModelType(v string) {
	o.ProductModelType.Set(&v)
}
// SetProductModelTypeNil sets the value for ProductModelType to be an explicit nil
func (o *HardwareInfo) SetProductModelTypeNil() {
	o.ProductModelType.Set(nil)
}

// UnsetProductModelType ensures that no value is present for ProductModelType, not even an explicit nil
func (o *HardwareInfo) UnsetProductModelType() {
	o.ProductModelType.Unset()
}

// GetSlotNumber returns the SlotNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HardwareInfo) GetSlotNumber() string {
	if o == nil || IsNil(o.SlotNumber.Get()) {
		var ret string
		return ret
	}
	return *o.SlotNumber.Get()
}

// GetSlotNumberOk returns a tuple with the SlotNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HardwareInfo) GetSlotNumberOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SlotNumber.Get(), o.SlotNumber.IsSet()
}

// HasSlotNumber returns a boolean if a field has been set.
func (o *HardwareInfo) HasSlotNumber() bool {
	if o != nil && o.SlotNumber.IsSet() {
		return true
	}

	return false
}

// SetSlotNumber gets a reference to the given NullableString and assigns it to the SlotNumber field.
func (o *HardwareInfo) SetSlotNumber(v string) {
	o.SlotNumber.Set(&v)
}
// SetSlotNumberNil sets the value for SlotNumber to be an explicit nil
func (o *HardwareInfo) SetSlotNumberNil() {
	o.SlotNumber.Set(nil)
}

// UnsetSlotNumber ensures that no value is present for SlotNumber, not even an explicit nil
func (o *HardwareInfo) UnsetSlotNumber() {
	o.SlotNumber.Unset()
}

func (o HardwareInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HardwareInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChassisModel.IsSet() {
		toSerialize["chassisModel"] = o.ChassisModel.Get()
	}
	if o.ChassisSerial.IsSet() {
		toSerialize["chassisSerial"] = o.ChassisSerial.Get()
	}
	if o.ChassisType.IsSet() {
		toSerialize["chassisType"] = o.ChassisType.Get()
	}
	if o.CohesityChassisSerial.IsSet() {
		toSerialize["cohesityChassisSerial"] = o.CohesityChassisSerial.Get()
	}
	if o.CohesityNodeSerial.IsSet() {
		toSerialize["cohesityNodeSerial"] = o.CohesityNodeSerial.Get()
	}
	if o.HbaModel.IsSet() {
		toSerialize["hbaModel"] = o.HbaModel.Get()
	}
	if o.IpmiLanChannel.IsSet() {
		toSerialize["ipmiLanChannel"] = o.IpmiLanChannel.Get()
	}
	if o.MaxSlots.IsSet() {
		toSerialize["maxSlots"] = o.MaxSlots.Get()
	}
	if o.NodeModel.IsSet() {
		toSerialize["nodeModel"] = o.NodeModel.Get()
	}
	if o.NodeSerial.IsSet() {
		toSerialize["nodeSerial"] = o.NodeSerial.Get()
	}
	if o.ProductModel.IsSet() {
		toSerialize["productModel"] = o.ProductModel.Get()
	}
	if o.ProductModelType.IsSet() {
		toSerialize["productModelType"] = o.ProductModelType.Get()
	}
	if o.SlotNumber.IsSet() {
		toSerialize["slotNumber"] = o.SlotNumber.Get()
	}
	return toSerialize, nil
}

type NullableHardwareInfo struct {
	value *HardwareInfo
	isSet bool
}

func (v NullableHardwareInfo) Get() *HardwareInfo {
	return v.value
}

func (v *NullableHardwareInfo) Set(val *HardwareInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableHardwareInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableHardwareInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHardwareInfo(val *HardwareInfo) *NullableHardwareInfo {
	return &NullableHardwareInfo{value: val, isSet: true}
}

func (v NullableHardwareInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHardwareInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


