/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverViewToViewFilesTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverViewToViewFilesTargetParams{}

// RecoverViewToViewFilesTargetParams Specifies the params of the View recovery target.
type RecoverViewToViewFilesTargetParams struct {
	NewViewConfig NullableRecoverViewToViewFilesTargetParamsNewViewConfig `json:"newViewConfig,omitempty"`
	OriginalViewConfig NullableRecoverViewToViewFilesTargetParamsOriginalViewConfig `json:"originalViewConfig,omitempty"`
	// Specifies the parameter whether the recovery should be performed to a new or the original View target.
	RecoverToNewView bool `json:"recoverToNewView"`
	// Specifies the ID of the view.
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// Specifies the name of the new view that's the target for recovery.
	ViewName NullableString `json:"viewName,omitempty"`
}

type _RecoverViewToViewFilesTargetParams RecoverViewToViewFilesTargetParams

// NewRecoverViewToViewFilesTargetParams instantiates a new RecoverViewToViewFilesTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverViewToViewFilesTargetParams(recoverToNewView bool) *RecoverViewToViewFilesTargetParams {
	this := RecoverViewToViewFilesTargetParams{}
	this.RecoverToNewView = recoverToNewView
	return &this
}

// NewRecoverViewToViewFilesTargetParamsWithDefaults instantiates a new RecoverViewToViewFilesTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverViewToViewFilesTargetParamsWithDefaults() *RecoverViewToViewFilesTargetParams {
	this := RecoverViewToViewFilesTargetParams{}
	return &this
}

// GetNewViewConfig returns the NewViewConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverViewToViewFilesTargetParams) GetNewViewConfig() RecoverViewToViewFilesTargetParamsNewViewConfig {
	if o == nil || IsNil(o.NewViewConfig.Get()) {
		var ret RecoverViewToViewFilesTargetParamsNewViewConfig
		return ret
	}
	return *o.NewViewConfig.Get()
}

// GetNewViewConfigOk returns a tuple with the NewViewConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverViewToViewFilesTargetParams) GetNewViewConfigOk() (*RecoverViewToViewFilesTargetParamsNewViewConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewViewConfig.Get(), o.NewViewConfig.IsSet()
}

// HasNewViewConfig returns a boolean if a field has been set.
func (o *RecoverViewToViewFilesTargetParams) HasNewViewConfig() bool {
	if o != nil && o.NewViewConfig.IsSet() {
		return true
	}

	return false
}

// SetNewViewConfig gets a reference to the given NullableRecoverViewToViewFilesTargetParamsNewViewConfig and assigns it to the NewViewConfig field.
func (o *RecoverViewToViewFilesTargetParams) SetNewViewConfig(v RecoverViewToViewFilesTargetParamsNewViewConfig) {
	o.NewViewConfig.Set(&v)
}
// SetNewViewConfigNil sets the value for NewViewConfig to be an explicit nil
func (o *RecoverViewToViewFilesTargetParams) SetNewViewConfigNil() {
	o.NewViewConfig.Set(nil)
}

// UnsetNewViewConfig ensures that no value is present for NewViewConfig, not even an explicit nil
func (o *RecoverViewToViewFilesTargetParams) UnsetNewViewConfig() {
	o.NewViewConfig.Unset()
}

// GetOriginalViewConfig returns the OriginalViewConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverViewToViewFilesTargetParams) GetOriginalViewConfig() RecoverViewToViewFilesTargetParamsOriginalViewConfig {
	if o == nil || IsNil(o.OriginalViewConfig.Get()) {
		var ret RecoverViewToViewFilesTargetParamsOriginalViewConfig
		return ret
	}
	return *o.OriginalViewConfig.Get()
}

// GetOriginalViewConfigOk returns a tuple with the OriginalViewConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverViewToViewFilesTargetParams) GetOriginalViewConfigOk() (*RecoverViewToViewFilesTargetParamsOriginalViewConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.OriginalViewConfig.Get(), o.OriginalViewConfig.IsSet()
}

// HasOriginalViewConfig returns a boolean if a field has been set.
func (o *RecoverViewToViewFilesTargetParams) HasOriginalViewConfig() bool {
	if o != nil && o.OriginalViewConfig.IsSet() {
		return true
	}

	return false
}

// SetOriginalViewConfig gets a reference to the given NullableRecoverViewToViewFilesTargetParamsOriginalViewConfig and assigns it to the OriginalViewConfig field.
func (o *RecoverViewToViewFilesTargetParams) SetOriginalViewConfig(v RecoverViewToViewFilesTargetParamsOriginalViewConfig) {
	o.OriginalViewConfig.Set(&v)
}
// SetOriginalViewConfigNil sets the value for OriginalViewConfig to be an explicit nil
func (o *RecoverViewToViewFilesTargetParams) SetOriginalViewConfigNil() {
	o.OriginalViewConfig.Set(nil)
}

// UnsetOriginalViewConfig ensures that no value is present for OriginalViewConfig, not even an explicit nil
func (o *RecoverViewToViewFilesTargetParams) UnsetOriginalViewConfig() {
	o.OriginalViewConfig.Unset()
}

// GetRecoverToNewView returns the RecoverToNewView field value
func (o *RecoverViewToViewFilesTargetParams) GetRecoverToNewView() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RecoverToNewView
}

// GetRecoverToNewViewOk returns a tuple with the RecoverToNewView field value
// and a boolean to check if the value has been set.
func (o *RecoverViewToViewFilesTargetParams) GetRecoverToNewViewOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoverToNewView, true
}

// SetRecoverToNewView sets field value
func (o *RecoverViewToViewFilesTargetParams) SetRecoverToNewView(v bool) {
	o.RecoverToNewView = v
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverViewToViewFilesTargetParams) GetViewId() int64 {
	if o == nil || IsNil(o.ViewId.Get()) {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverViewToViewFilesTargetParams) GetViewIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *RecoverViewToViewFilesTargetParams) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *RecoverViewToViewFilesTargetParams) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *RecoverViewToViewFilesTargetParams) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *RecoverViewToViewFilesTargetParams) UnsetViewId() {
	o.ViewId.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverViewToViewFilesTargetParams) GetViewName() string {
	if o == nil || IsNil(o.ViewName.Get()) {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverViewToViewFilesTargetParams) GetViewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *RecoverViewToViewFilesTargetParams) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *RecoverViewToViewFilesTargetParams) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *RecoverViewToViewFilesTargetParams) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *RecoverViewToViewFilesTargetParams) UnsetViewName() {
	o.ViewName.Unset()
}

func (o RecoverViewToViewFilesTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverViewToViewFilesTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.NewViewConfig.IsSet() {
		toSerialize["newViewConfig"] = o.NewViewConfig.Get()
	}
	if o.OriginalViewConfig.IsSet() {
		toSerialize["originalViewConfig"] = o.OriginalViewConfig.Get()
	}
	toSerialize["recoverToNewView"] = o.RecoverToNewView
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return toSerialize, nil
}

func (o *RecoverViewToViewFilesTargetParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoverToNewView",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverViewToViewFilesTargetParams := _RecoverViewToViewFilesTargetParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverViewToViewFilesTargetParams)

	if err != nil {
		return err
	}

	*o = RecoverViewToViewFilesTargetParams(varRecoverViewToViewFilesTargetParams)

	return err
}

type NullableRecoverViewToViewFilesTargetParams struct {
	value *RecoverViewToViewFilesTargetParams
	isSet bool
}

func (v NullableRecoverViewToViewFilesTargetParams) Get() *RecoverViewToViewFilesTargetParams {
	return v.value
}

func (v *NullableRecoverViewToViewFilesTargetParams) Set(val *RecoverViewToViewFilesTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverViewToViewFilesTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverViewToViewFilesTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverViewToViewFilesTargetParams(val *RecoverViewToViewFilesTargetParams) *NullableRecoverViewToViewFilesTargetParams {
	return &NullableRecoverViewToViewFilesTargetParams{value: val, isSet: true}
}

func (v NullableRecoverViewToViewFilesTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverViewToViewFilesTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


