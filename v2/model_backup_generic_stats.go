/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the BackupGenericStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BackupGenericStats{}

// BackupGenericStats Specifies the stats which are generic for all adapters.
type BackupGenericStats struct {
	// Specifies the amount of data which has been ingested in bytes.
	DataIngested NullableInt64 `json:"dataIngested,omitempty"`
	// Specifies the rate at which data is being ingested in bytes per minute.
	DataIngestionRate NullableInt64 `json:"dataIngestionRate,omitempty"`
	// Divides the errors into classes for better understanding for the user.
	ErrorClasses []ErrorClass `json:"errorClasses,omitempty"`
	// Specifies the time in which backup should finish in minutes.
	EstimatedBackupTime NullableInt64 `json:"estimatedBackupTime,omitempty"`
	// Specifies the number of errors for this run.
	NumErrors NullableInt64 `json:"numErrors,omitempty"`
	// Specifies the amount of data which has to be ingested in bytes.
	RemainingDataIngested NullableInt64 `json:"remainingDataIngested,omitempty"`
}

// NewBackupGenericStats instantiates a new BackupGenericStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupGenericStats() *BackupGenericStats {
	this := BackupGenericStats{}
	return &this
}

// NewBackupGenericStatsWithDefaults instantiates a new BackupGenericStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupGenericStatsWithDefaults() *BackupGenericStats {
	this := BackupGenericStats{}
	return &this
}

// GetDataIngested returns the DataIngested field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupGenericStats) GetDataIngested() int64 {
	if o == nil || IsNil(o.DataIngested.Get()) {
		var ret int64
		return ret
	}
	return *o.DataIngested.Get()
}

// GetDataIngestedOk returns a tuple with the DataIngested field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupGenericStats) GetDataIngestedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataIngested.Get(), o.DataIngested.IsSet()
}

// HasDataIngested returns a boolean if a field has been set.
func (o *BackupGenericStats) HasDataIngested() bool {
	if o != nil && o.DataIngested.IsSet() {
		return true
	}

	return false
}

// SetDataIngested gets a reference to the given NullableInt64 and assigns it to the DataIngested field.
func (o *BackupGenericStats) SetDataIngested(v int64) {
	o.DataIngested.Set(&v)
}
// SetDataIngestedNil sets the value for DataIngested to be an explicit nil
func (o *BackupGenericStats) SetDataIngestedNil() {
	o.DataIngested.Set(nil)
}

// UnsetDataIngested ensures that no value is present for DataIngested, not even an explicit nil
func (o *BackupGenericStats) UnsetDataIngested() {
	o.DataIngested.Unset()
}

// GetDataIngestionRate returns the DataIngestionRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupGenericStats) GetDataIngestionRate() int64 {
	if o == nil || IsNil(o.DataIngestionRate.Get()) {
		var ret int64
		return ret
	}
	return *o.DataIngestionRate.Get()
}

// GetDataIngestionRateOk returns a tuple with the DataIngestionRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupGenericStats) GetDataIngestionRateOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataIngestionRate.Get(), o.DataIngestionRate.IsSet()
}

// HasDataIngestionRate returns a boolean if a field has been set.
func (o *BackupGenericStats) HasDataIngestionRate() bool {
	if o != nil && o.DataIngestionRate.IsSet() {
		return true
	}

	return false
}

// SetDataIngestionRate gets a reference to the given NullableInt64 and assigns it to the DataIngestionRate field.
func (o *BackupGenericStats) SetDataIngestionRate(v int64) {
	o.DataIngestionRate.Set(&v)
}
// SetDataIngestionRateNil sets the value for DataIngestionRate to be an explicit nil
func (o *BackupGenericStats) SetDataIngestionRateNil() {
	o.DataIngestionRate.Set(nil)
}

// UnsetDataIngestionRate ensures that no value is present for DataIngestionRate, not even an explicit nil
func (o *BackupGenericStats) UnsetDataIngestionRate() {
	o.DataIngestionRate.Unset()
}

// GetErrorClasses returns the ErrorClasses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupGenericStats) GetErrorClasses() []ErrorClass {
	if o == nil {
		var ret []ErrorClass
		return ret
	}
	return o.ErrorClasses
}

// GetErrorClassesOk returns a tuple with the ErrorClasses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupGenericStats) GetErrorClassesOk() ([]ErrorClass, bool) {
	if o == nil || IsNil(o.ErrorClasses) {
		return nil, false
	}
	return o.ErrorClasses, true
}

// HasErrorClasses returns a boolean if a field has been set.
func (o *BackupGenericStats) HasErrorClasses() bool {
	if o != nil && !IsNil(o.ErrorClasses) {
		return true
	}

	return false
}

// SetErrorClasses gets a reference to the given []ErrorClass and assigns it to the ErrorClasses field.
func (o *BackupGenericStats) SetErrorClasses(v []ErrorClass) {
	o.ErrorClasses = v
}

// GetEstimatedBackupTime returns the EstimatedBackupTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupGenericStats) GetEstimatedBackupTime() int64 {
	if o == nil || IsNil(o.EstimatedBackupTime.Get()) {
		var ret int64
		return ret
	}
	return *o.EstimatedBackupTime.Get()
}

// GetEstimatedBackupTimeOk returns a tuple with the EstimatedBackupTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupGenericStats) GetEstimatedBackupTimeOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.EstimatedBackupTime.Get(), o.EstimatedBackupTime.IsSet()
}

// HasEstimatedBackupTime returns a boolean if a field has been set.
func (o *BackupGenericStats) HasEstimatedBackupTime() bool {
	if o != nil && o.EstimatedBackupTime.IsSet() {
		return true
	}

	return false
}

// SetEstimatedBackupTime gets a reference to the given NullableInt64 and assigns it to the EstimatedBackupTime field.
func (o *BackupGenericStats) SetEstimatedBackupTime(v int64) {
	o.EstimatedBackupTime.Set(&v)
}
// SetEstimatedBackupTimeNil sets the value for EstimatedBackupTime to be an explicit nil
func (o *BackupGenericStats) SetEstimatedBackupTimeNil() {
	o.EstimatedBackupTime.Set(nil)
}

// UnsetEstimatedBackupTime ensures that no value is present for EstimatedBackupTime, not even an explicit nil
func (o *BackupGenericStats) UnsetEstimatedBackupTime() {
	o.EstimatedBackupTime.Unset()
}

// GetNumErrors returns the NumErrors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupGenericStats) GetNumErrors() int64 {
	if o == nil || IsNil(o.NumErrors.Get()) {
		var ret int64
		return ret
	}
	return *o.NumErrors.Get()
}

// GetNumErrorsOk returns a tuple with the NumErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupGenericStats) GetNumErrorsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.NumErrors.Get(), o.NumErrors.IsSet()
}

// HasNumErrors returns a boolean if a field has been set.
func (o *BackupGenericStats) HasNumErrors() bool {
	if o != nil && o.NumErrors.IsSet() {
		return true
	}

	return false
}

// SetNumErrors gets a reference to the given NullableInt64 and assigns it to the NumErrors field.
func (o *BackupGenericStats) SetNumErrors(v int64) {
	o.NumErrors.Set(&v)
}
// SetNumErrorsNil sets the value for NumErrors to be an explicit nil
func (o *BackupGenericStats) SetNumErrorsNil() {
	o.NumErrors.Set(nil)
}

// UnsetNumErrors ensures that no value is present for NumErrors, not even an explicit nil
func (o *BackupGenericStats) UnsetNumErrors() {
	o.NumErrors.Unset()
}

// GetRemainingDataIngested returns the RemainingDataIngested field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupGenericStats) GetRemainingDataIngested() int64 {
	if o == nil || IsNil(o.RemainingDataIngested.Get()) {
		var ret int64
		return ret
	}
	return *o.RemainingDataIngested.Get()
}

// GetRemainingDataIngestedOk returns a tuple with the RemainingDataIngested field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupGenericStats) GetRemainingDataIngestedOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RemainingDataIngested.Get(), o.RemainingDataIngested.IsSet()
}

// HasRemainingDataIngested returns a boolean if a field has been set.
func (o *BackupGenericStats) HasRemainingDataIngested() bool {
	if o != nil && o.RemainingDataIngested.IsSet() {
		return true
	}

	return false
}

// SetRemainingDataIngested gets a reference to the given NullableInt64 and assigns it to the RemainingDataIngested field.
func (o *BackupGenericStats) SetRemainingDataIngested(v int64) {
	o.RemainingDataIngested.Set(&v)
}
// SetRemainingDataIngestedNil sets the value for RemainingDataIngested to be an explicit nil
func (o *BackupGenericStats) SetRemainingDataIngestedNil() {
	o.RemainingDataIngested.Set(nil)
}

// UnsetRemainingDataIngested ensures that no value is present for RemainingDataIngested, not even an explicit nil
func (o *BackupGenericStats) UnsetRemainingDataIngested() {
	o.RemainingDataIngested.Unset()
}

func (o BackupGenericStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BackupGenericStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DataIngested.IsSet() {
		toSerialize["dataIngested"] = o.DataIngested.Get()
	}
	if o.DataIngestionRate.IsSet() {
		toSerialize["dataIngestionRate"] = o.DataIngestionRate.Get()
	}
	if o.ErrorClasses != nil {
		toSerialize["errorClasses"] = o.ErrorClasses
	}
	if o.EstimatedBackupTime.IsSet() {
		toSerialize["estimatedBackupTime"] = o.EstimatedBackupTime.Get()
	}
	if o.NumErrors.IsSet() {
		toSerialize["numErrors"] = o.NumErrors.Get()
	}
	if o.RemainingDataIngested.IsSet() {
		toSerialize["remainingDataIngested"] = o.RemainingDataIngested.Get()
	}
	return toSerialize, nil
}

type NullableBackupGenericStats struct {
	value *BackupGenericStats
	isSet bool
}

func (v NullableBackupGenericStats) Get() *BackupGenericStats {
	return v.value
}

func (v *NullableBackupGenericStats) Set(val *BackupGenericStats) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupGenericStats) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupGenericStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupGenericStats(val *BackupGenericStats) *NullableBackupGenericStats {
	return &NullableBackupGenericStats{value: val, isSet: true}
}

func (v NullableBackupGenericStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupGenericStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


