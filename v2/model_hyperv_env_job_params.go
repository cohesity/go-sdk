/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the HypervEnvJobParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HypervEnvJobParams{}

// HypervEnvJobParams Specifies job parameters applicable for all 'kHyperV' Environment type Protection Sources in a Protection Job.
type HypervEnvJobParams struct {
	// Specifies a list of disks to exclude from being protected for the object/vm.
	ExcludeDisks []HyperVDiskInfo `json:"excludeDisks,omitempty"`
	// If true, takes a crash-consistent snapshot when app-consistent snapshot fails. Otherwise, the snapshot attempt is marked failed.
	FallbackToCrashConsistent NullableBool `json:"fallbackToCrashConsistent,omitempty"`
	// Specifies a list of disks to included in the protection for the object/vm.
	IncludeDisks []HyperVDiskInfo `json:"includeDisks,omitempty"`
	// Specifies the Protection Group type. If not specified, then backup method is auto determined. Specifying RCT will forcibly use RCT backup for all VMs in this Protection Group. Available only for VMs with hardware version 8.0 and above, but is more efficient. Specifying VSS will forcibly use VSS backup for all VMs in this Protection Group. Available for VMs with hardware version 5.0 and above, but is slower than RCT backup.
	ProtectionType NullableString `json:"protectionType,omitempty"`
}

// NewHypervEnvJobParams instantiates a new HypervEnvJobParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHypervEnvJobParams() *HypervEnvJobParams {
	this := HypervEnvJobParams{}
	return &this
}

// NewHypervEnvJobParamsWithDefaults instantiates a new HypervEnvJobParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHypervEnvJobParamsWithDefaults() *HypervEnvJobParams {
	this := HypervEnvJobParams{}
	return &this
}

// GetExcludeDisks returns the ExcludeDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervEnvJobParams) GetExcludeDisks() []HyperVDiskInfo {
	if o == nil {
		var ret []HyperVDiskInfo
		return ret
	}
	return o.ExcludeDisks
}

// GetExcludeDisksOk returns a tuple with the ExcludeDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervEnvJobParams) GetExcludeDisksOk() ([]HyperVDiskInfo, bool) {
	if o == nil || IsNil(o.ExcludeDisks) {
		return nil, false
	}
	return o.ExcludeDisks, true
}

// HasExcludeDisks returns a boolean if a field has been set.
func (o *HypervEnvJobParams) HasExcludeDisks() bool {
	if o != nil && !IsNil(o.ExcludeDisks) {
		return true
	}

	return false
}

// SetExcludeDisks gets a reference to the given []HyperVDiskInfo and assigns it to the ExcludeDisks field.
func (o *HypervEnvJobParams) SetExcludeDisks(v []HyperVDiskInfo) {
	o.ExcludeDisks = v
}

// GetFallbackToCrashConsistent returns the FallbackToCrashConsistent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervEnvJobParams) GetFallbackToCrashConsistent() bool {
	if o == nil || IsNil(o.FallbackToCrashConsistent.Get()) {
		var ret bool
		return ret
	}
	return *o.FallbackToCrashConsistent.Get()
}

// GetFallbackToCrashConsistentOk returns a tuple with the FallbackToCrashConsistent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervEnvJobParams) GetFallbackToCrashConsistentOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.FallbackToCrashConsistent.Get(), o.FallbackToCrashConsistent.IsSet()
}

// HasFallbackToCrashConsistent returns a boolean if a field has been set.
func (o *HypervEnvJobParams) HasFallbackToCrashConsistent() bool {
	if o != nil && o.FallbackToCrashConsistent.IsSet() {
		return true
	}

	return false
}

// SetFallbackToCrashConsistent gets a reference to the given NullableBool and assigns it to the FallbackToCrashConsistent field.
func (o *HypervEnvJobParams) SetFallbackToCrashConsistent(v bool) {
	o.FallbackToCrashConsistent.Set(&v)
}
// SetFallbackToCrashConsistentNil sets the value for FallbackToCrashConsistent to be an explicit nil
func (o *HypervEnvJobParams) SetFallbackToCrashConsistentNil() {
	o.FallbackToCrashConsistent.Set(nil)
}

// UnsetFallbackToCrashConsistent ensures that no value is present for FallbackToCrashConsistent, not even an explicit nil
func (o *HypervEnvJobParams) UnsetFallbackToCrashConsistent() {
	o.FallbackToCrashConsistent.Unset()
}

// GetIncludeDisks returns the IncludeDisks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervEnvJobParams) GetIncludeDisks() []HyperVDiskInfo {
	if o == nil {
		var ret []HyperVDiskInfo
		return ret
	}
	return o.IncludeDisks
}

// GetIncludeDisksOk returns a tuple with the IncludeDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervEnvJobParams) GetIncludeDisksOk() ([]HyperVDiskInfo, bool) {
	if o == nil || IsNil(o.IncludeDisks) {
		return nil, false
	}
	return o.IncludeDisks, true
}

// HasIncludeDisks returns a boolean if a field has been set.
func (o *HypervEnvJobParams) HasIncludeDisks() bool {
	if o != nil && !IsNil(o.IncludeDisks) {
		return true
	}

	return false
}

// SetIncludeDisks gets a reference to the given []HyperVDiskInfo and assigns it to the IncludeDisks field.
func (o *HypervEnvJobParams) SetIncludeDisks(v []HyperVDiskInfo) {
	o.IncludeDisks = v
}

// GetProtectionType returns the ProtectionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervEnvJobParams) GetProtectionType() string {
	if o == nil || IsNil(o.ProtectionType.Get()) {
		var ret string
		return ret
	}
	return *o.ProtectionType.Get()
}

// GetProtectionTypeOk returns a tuple with the ProtectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervEnvJobParams) GetProtectionTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProtectionType.Get(), o.ProtectionType.IsSet()
}

// HasProtectionType returns a boolean if a field has been set.
func (o *HypervEnvJobParams) HasProtectionType() bool {
	if o != nil && o.ProtectionType.IsSet() {
		return true
	}

	return false
}

// SetProtectionType gets a reference to the given NullableString and assigns it to the ProtectionType field.
func (o *HypervEnvJobParams) SetProtectionType(v string) {
	o.ProtectionType.Set(&v)
}
// SetProtectionTypeNil sets the value for ProtectionType to be an explicit nil
func (o *HypervEnvJobParams) SetProtectionTypeNil() {
	o.ProtectionType.Set(nil)
}

// UnsetProtectionType ensures that no value is present for ProtectionType, not even an explicit nil
func (o *HypervEnvJobParams) UnsetProtectionType() {
	o.ProtectionType.Unset()
}

func (o HypervEnvJobParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HypervEnvJobParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludeDisks != nil {
		toSerialize["excludeDisks"] = o.ExcludeDisks
	}
	if o.FallbackToCrashConsistent.IsSet() {
		toSerialize["fallbackToCrashConsistent"] = o.FallbackToCrashConsistent.Get()
	}
	if o.IncludeDisks != nil {
		toSerialize["includeDisks"] = o.IncludeDisks
	}
	if o.ProtectionType.IsSet() {
		toSerialize["protectionType"] = o.ProtectionType.Get()
	}
	return toSerialize, nil
}

type NullableHypervEnvJobParams struct {
	value *HypervEnvJobParams
	isSet bool
}

func (v NullableHypervEnvJobParams) Get() *HypervEnvJobParams {
	return v.value
}

func (v *NullableHypervEnvJobParams) Set(val *HypervEnvJobParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHypervEnvJobParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHypervEnvJobParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHypervEnvJobParams(val *HypervEnvJobParams) *NullableHypervEnvJobParams {
	return &NullableHypervEnvJobParams{value: val, isSet: true}
}

func (v NullableHypervEnvJobParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHypervEnvJobParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


