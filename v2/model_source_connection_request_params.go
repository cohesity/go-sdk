/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the SourceConnectionRequestParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SourceConnectionRequestParams{}

// SourceConnectionRequestParams Specifies the parameters to test connectivity with a source.
type SourceConnectionRequestParams struct {
	// Specifies the id of the connection from where this source is reachable. This should only be set for a source being registered by a tenant user.
	ConnectionId NullableInt64 `json:"connectionId,omitempty"`
	// Specifies the environment type of the Protection Source.
	Environment NullableString `json:"environment"`
	CassandraConnectionParams *CassandraConnectionParams `json:"cassandraConnectionParams,omitempty"`
	HbaseConnectionParams *HadoopConnectionParams `json:"hbaseConnectionParams,omitempty"`
	HdfsConnectionParams *HadoopConnectionParams `json:"hdfsConnectionParams,omitempty"`
	HiveConnectionParams *HadoopConnectionParams `json:"hiveConnectionParams,omitempty"`
	MssqlConnectionParams *MssqlConnectionParams `json:"mssqlConnectionParams,omitempty"`
	OracleConnectionParams *OracleConnectionParams `json:"oracleConnectionParams,omitempty"`
	VmwareConnectionParams *VmwareConnectionParams `json:"vmwareConnectionParams,omitempty"`
}

type _SourceConnectionRequestParams SourceConnectionRequestParams

// NewSourceConnectionRequestParams instantiates a new SourceConnectionRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceConnectionRequestParams(environment NullableString) *SourceConnectionRequestParams {
	this := SourceConnectionRequestParams{}
	this.Environment = environment
	return &this
}

// NewSourceConnectionRequestParamsWithDefaults instantiates a new SourceConnectionRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceConnectionRequestParamsWithDefaults() *SourceConnectionRequestParams {
	this := SourceConnectionRequestParams{}
	return &this
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceConnectionRequestParams) GetConnectionId() int64 {
	if o == nil || IsNil(o.ConnectionId.Get()) {
		var ret int64
		return ret
	}
	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceConnectionRequestParams) GetConnectionIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// HasConnectionId returns a boolean if a field has been set.
func (o *SourceConnectionRequestParams) HasConnectionId() bool {
	if o != nil && o.ConnectionId.IsSet() {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given NullableInt64 and assigns it to the ConnectionId field.
func (o *SourceConnectionRequestParams) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}
// SetConnectionIdNil sets the value for ConnectionId to be an explicit nil
func (o *SourceConnectionRequestParams) SetConnectionIdNil() {
	o.ConnectionId.Set(nil)
}

// UnsetConnectionId ensures that no value is present for ConnectionId, not even an explicit nil
func (o *SourceConnectionRequestParams) UnsetConnectionId() {
	o.ConnectionId.Unset()
}

// GetEnvironment returns the Environment field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SourceConnectionRequestParams) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}

	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceConnectionRequestParams) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// SetEnvironment sets field value
func (o *SourceConnectionRequestParams) SetEnvironment(v string) {
	o.Environment.Set(&v)
}

// GetCassandraConnectionParams returns the CassandraConnectionParams field value if set, zero value otherwise.
func (o *SourceConnectionRequestParams) GetCassandraConnectionParams() CassandraConnectionParams {
	if o == nil || IsNil(o.CassandraConnectionParams) {
		var ret CassandraConnectionParams
		return ret
	}
	return *o.CassandraConnectionParams
}

// GetCassandraConnectionParamsOk returns a tuple with the CassandraConnectionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionRequestParams) GetCassandraConnectionParamsOk() (*CassandraConnectionParams, bool) {
	if o == nil || IsNil(o.CassandraConnectionParams) {
		return nil, false
	}
	return o.CassandraConnectionParams, true
}

// HasCassandraConnectionParams returns a boolean if a field has been set.
func (o *SourceConnectionRequestParams) HasCassandraConnectionParams() bool {
	if o != nil && !IsNil(o.CassandraConnectionParams) {
		return true
	}

	return false
}

// SetCassandraConnectionParams gets a reference to the given CassandraConnectionParams and assigns it to the CassandraConnectionParams field.
func (o *SourceConnectionRequestParams) SetCassandraConnectionParams(v CassandraConnectionParams) {
	o.CassandraConnectionParams = &v
}

// GetHbaseConnectionParams returns the HbaseConnectionParams field value if set, zero value otherwise.
func (o *SourceConnectionRequestParams) GetHbaseConnectionParams() HadoopConnectionParams {
	if o == nil || IsNil(o.HbaseConnectionParams) {
		var ret HadoopConnectionParams
		return ret
	}
	return *o.HbaseConnectionParams
}

// GetHbaseConnectionParamsOk returns a tuple with the HbaseConnectionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionRequestParams) GetHbaseConnectionParamsOk() (*HadoopConnectionParams, bool) {
	if o == nil || IsNil(o.HbaseConnectionParams) {
		return nil, false
	}
	return o.HbaseConnectionParams, true
}

// HasHbaseConnectionParams returns a boolean if a field has been set.
func (o *SourceConnectionRequestParams) HasHbaseConnectionParams() bool {
	if o != nil && !IsNil(o.HbaseConnectionParams) {
		return true
	}

	return false
}

// SetHbaseConnectionParams gets a reference to the given HadoopConnectionParams and assigns it to the HbaseConnectionParams field.
func (o *SourceConnectionRequestParams) SetHbaseConnectionParams(v HadoopConnectionParams) {
	o.HbaseConnectionParams = &v
}

// GetHdfsConnectionParams returns the HdfsConnectionParams field value if set, zero value otherwise.
func (o *SourceConnectionRequestParams) GetHdfsConnectionParams() HadoopConnectionParams {
	if o == nil || IsNil(o.HdfsConnectionParams) {
		var ret HadoopConnectionParams
		return ret
	}
	return *o.HdfsConnectionParams
}

// GetHdfsConnectionParamsOk returns a tuple with the HdfsConnectionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionRequestParams) GetHdfsConnectionParamsOk() (*HadoopConnectionParams, bool) {
	if o == nil || IsNil(o.HdfsConnectionParams) {
		return nil, false
	}
	return o.HdfsConnectionParams, true
}

// HasHdfsConnectionParams returns a boolean if a field has been set.
func (o *SourceConnectionRequestParams) HasHdfsConnectionParams() bool {
	if o != nil && !IsNil(o.HdfsConnectionParams) {
		return true
	}

	return false
}

// SetHdfsConnectionParams gets a reference to the given HadoopConnectionParams and assigns it to the HdfsConnectionParams field.
func (o *SourceConnectionRequestParams) SetHdfsConnectionParams(v HadoopConnectionParams) {
	o.HdfsConnectionParams = &v
}

// GetHiveConnectionParams returns the HiveConnectionParams field value if set, zero value otherwise.
func (o *SourceConnectionRequestParams) GetHiveConnectionParams() HadoopConnectionParams {
	if o == nil || IsNil(o.HiveConnectionParams) {
		var ret HadoopConnectionParams
		return ret
	}
	return *o.HiveConnectionParams
}

// GetHiveConnectionParamsOk returns a tuple with the HiveConnectionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionRequestParams) GetHiveConnectionParamsOk() (*HadoopConnectionParams, bool) {
	if o == nil || IsNil(o.HiveConnectionParams) {
		return nil, false
	}
	return o.HiveConnectionParams, true
}

// HasHiveConnectionParams returns a boolean if a field has been set.
func (o *SourceConnectionRequestParams) HasHiveConnectionParams() bool {
	if o != nil && !IsNil(o.HiveConnectionParams) {
		return true
	}

	return false
}

// SetHiveConnectionParams gets a reference to the given HadoopConnectionParams and assigns it to the HiveConnectionParams field.
func (o *SourceConnectionRequestParams) SetHiveConnectionParams(v HadoopConnectionParams) {
	o.HiveConnectionParams = &v
}

// GetMssqlConnectionParams returns the MssqlConnectionParams field value if set, zero value otherwise.
func (o *SourceConnectionRequestParams) GetMssqlConnectionParams() MssqlConnectionParams {
	if o == nil || IsNil(o.MssqlConnectionParams) {
		var ret MssqlConnectionParams
		return ret
	}
	return *o.MssqlConnectionParams
}

// GetMssqlConnectionParamsOk returns a tuple with the MssqlConnectionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionRequestParams) GetMssqlConnectionParamsOk() (*MssqlConnectionParams, bool) {
	if o == nil || IsNil(o.MssqlConnectionParams) {
		return nil, false
	}
	return o.MssqlConnectionParams, true
}

// HasMssqlConnectionParams returns a boolean if a field has been set.
func (o *SourceConnectionRequestParams) HasMssqlConnectionParams() bool {
	if o != nil && !IsNil(o.MssqlConnectionParams) {
		return true
	}

	return false
}

// SetMssqlConnectionParams gets a reference to the given MssqlConnectionParams and assigns it to the MssqlConnectionParams field.
func (o *SourceConnectionRequestParams) SetMssqlConnectionParams(v MssqlConnectionParams) {
	o.MssqlConnectionParams = &v
}

// GetOracleConnectionParams returns the OracleConnectionParams field value if set, zero value otherwise.
func (o *SourceConnectionRequestParams) GetOracleConnectionParams() OracleConnectionParams {
	if o == nil || IsNil(o.OracleConnectionParams) {
		var ret OracleConnectionParams
		return ret
	}
	return *o.OracleConnectionParams
}

// GetOracleConnectionParamsOk returns a tuple with the OracleConnectionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionRequestParams) GetOracleConnectionParamsOk() (*OracleConnectionParams, bool) {
	if o == nil || IsNil(o.OracleConnectionParams) {
		return nil, false
	}
	return o.OracleConnectionParams, true
}

// HasOracleConnectionParams returns a boolean if a field has been set.
func (o *SourceConnectionRequestParams) HasOracleConnectionParams() bool {
	if o != nil && !IsNil(o.OracleConnectionParams) {
		return true
	}

	return false
}

// SetOracleConnectionParams gets a reference to the given OracleConnectionParams and assigns it to the OracleConnectionParams field.
func (o *SourceConnectionRequestParams) SetOracleConnectionParams(v OracleConnectionParams) {
	o.OracleConnectionParams = &v
}

// GetVmwareConnectionParams returns the VmwareConnectionParams field value if set, zero value otherwise.
func (o *SourceConnectionRequestParams) GetVmwareConnectionParams() VmwareConnectionParams {
	if o == nil || IsNil(o.VmwareConnectionParams) {
		var ret VmwareConnectionParams
		return ret
	}
	return *o.VmwareConnectionParams
}

// GetVmwareConnectionParamsOk returns a tuple with the VmwareConnectionParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionRequestParams) GetVmwareConnectionParamsOk() (*VmwareConnectionParams, bool) {
	if o == nil || IsNil(o.VmwareConnectionParams) {
		return nil, false
	}
	return o.VmwareConnectionParams, true
}

// HasVmwareConnectionParams returns a boolean if a field has been set.
func (o *SourceConnectionRequestParams) HasVmwareConnectionParams() bool {
	if o != nil && !IsNil(o.VmwareConnectionParams) {
		return true
	}

	return false
}

// SetVmwareConnectionParams gets a reference to the given VmwareConnectionParams and assigns it to the VmwareConnectionParams field.
func (o *SourceConnectionRequestParams) SetVmwareConnectionParams(v VmwareConnectionParams) {
	o.VmwareConnectionParams = &v
}

func (o SourceConnectionRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SourceConnectionRequestParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionId.IsSet() {
		toSerialize["connectionId"] = o.ConnectionId.Get()
	}
	toSerialize["environment"] = o.Environment.Get()
	if !IsNil(o.CassandraConnectionParams) {
		toSerialize["cassandraConnectionParams"] = o.CassandraConnectionParams
	}
	if !IsNil(o.HbaseConnectionParams) {
		toSerialize["hbaseConnectionParams"] = o.HbaseConnectionParams
	}
	if !IsNil(o.HdfsConnectionParams) {
		toSerialize["hdfsConnectionParams"] = o.HdfsConnectionParams
	}
	if !IsNil(o.HiveConnectionParams) {
		toSerialize["hiveConnectionParams"] = o.HiveConnectionParams
	}
	if !IsNil(o.MssqlConnectionParams) {
		toSerialize["mssqlConnectionParams"] = o.MssqlConnectionParams
	}
	if !IsNil(o.OracleConnectionParams) {
		toSerialize["oracleConnectionParams"] = o.OracleConnectionParams
	}
	if !IsNil(o.VmwareConnectionParams) {
		toSerialize["vmwareConnectionParams"] = o.VmwareConnectionParams
	}
	return toSerialize, nil
}

func (o *SourceConnectionRequestParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"environment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varSourceConnectionRequestParams := _SourceConnectionRequestParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varSourceConnectionRequestParams)

	if err != nil {
		return err
	}

	*o = SourceConnectionRequestParams(varSourceConnectionRequestParams)

	return err
}

type NullableSourceConnectionRequestParams struct {
	value *SourceConnectionRequestParams
	isSet bool
}

func (v NullableSourceConnectionRequestParams) Get() *SourceConnectionRequestParams {
	return v.value
}

func (v *NullableSourceConnectionRequestParams) Set(val *SourceConnectionRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceConnectionRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceConnectionRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceConnectionRequestParams(val *SourceConnectionRequestParams) *NullableSourceConnectionRequestParams {
	return &NullableSourceConnectionRequestParams{value: val, isSet: true}
}

func (v NullableSourceConnectionRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceConnectionRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


