/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsTargetParamsForRecoverRDSPostgres type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsTargetParamsForRecoverRDSPostgres{}

// AwsTargetParamsForRecoverRDSPostgres Specifies the recovery target params for RDS Postgres target config.
type AwsTargetParamsForRecoverRDSPostgres struct {
	CustomServerConfig NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig `json:"customServerConfig,omitempty"`
	KnownSourceConfig NullableAwsTargetParamsForRecoverRDSPostgresKnownSourceConfig `json:"knownSourceConfig,omitempty"`
	// Specifies whether the recovery should be performed to a known or a custom target.
	RecoverToKnownSource NullableBool `json:"recoverToKnownSource"`
}

type _AwsTargetParamsForRecoverRDSPostgres AwsTargetParamsForRecoverRDSPostgres

// NewAwsTargetParamsForRecoverRDSPostgres instantiates a new AwsTargetParamsForRecoverRDSPostgres object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsTargetParamsForRecoverRDSPostgres(recoverToKnownSource NullableBool) *AwsTargetParamsForRecoverRDSPostgres {
	this := AwsTargetParamsForRecoverRDSPostgres{}
	this.RecoverToKnownSource = recoverToKnownSource
	return &this
}

// NewAwsTargetParamsForRecoverRDSPostgresWithDefaults instantiates a new AwsTargetParamsForRecoverRDSPostgres object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsTargetParamsForRecoverRDSPostgresWithDefaults() *AwsTargetParamsForRecoverRDSPostgres {
	this := AwsTargetParamsForRecoverRDSPostgres{}
	return &this
}

// GetCustomServerConfig returns the CustomServerConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsTargetParamsForRecoverRDSPostgres) GetCustomServerConfig() AwsTargetParamsForRecoverRDSPostgresCustomServerConfig {
	if o == nil || IsNil(o.CustomServerConfig.Get()) {
		var ret AwsTargetParamsForRecoverRDSPostgresCustomServerConfig
		return ret
	}
	return *o.CustomServerConfig.Get()
}

// GetCustomServerConfigOk returns a tuple with the CustomServerConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsTargetParamsForRecoverRDSPostgres) GetCustomServerConfigOk() (*AwsTargetParamsForRecoverRDSPostgresCustomServerConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.CustomServerConfig.Get(), o.CustomServerConfig.IsSet()
}

// HasCustomServerConfig returns a boolean if a field has been set.
func (o *AwsTargetParamsForRecoverRDSPostgres) HasCustomServerConfig() bool {
	if o != nil && o.CustomServerConfig.IsSet() {
		return true
	}

	return false
}

// SetCustomServerConfig gets a reference to the given NullableAwsTargetParamsForRecoverRDSPostgresCustomServerConfig and assigns it to the CustomServerConfig field.
func (o *AwsTargetParamsForRecoverRDSPostgres) SetCustomServerConfig(v AwsTargetParamsForRecoverRDSPostgresCustomServerConfig) {
	o.CustomServerConfig.Set(&v)
}
// SetCustomServerConfigNil sets the value for CustomServerConfig to be an explicit nil
func (o *AwsTargetParamsForRecoverRDSPostgres) SetCustomServerConfigNil() {
	o.CustomServerConfig.Set(nil)
}

// UnsetCustomServerConfig ensures that no value is present for CustomServerConfig, not even an explicit nil
func (o *AwsTargetParamsForRecoverRDSPostgres) UnsetCustomServerConfig() {
	o.CustomServerConfig.Unset()
}

// GetKnownSourceConfig returns the KnownSourceConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsTargetParamsForRecoverRDSPostgres) GetKnownSourceConfig() AwsTargetParamsForRecoverRDSPostgresKnownSourceConfig {
	if o == nil || IsNil(o.KnownSourceConfig.Get()) {
		var ret AwsTargetParamsForRecoverRDSPostgresKnownSourceConfig
		return ret
	}
	return *o.KnownSourceConfig.Get()
}

// GetKnownSourceConfigOk returns a tuple with the KnownSourceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsTargetParamsForRecoverRDSPostgres) GetKnownSourceConfigOk() (*AwsTargetParamsForRecoverRDSPostgresKnownSourceConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.KnownSourceConfig.Get(), o.KnownSourceConfig.IsSet()
}

// HasKnownSourceConfig returns a boolean if a field has been set.
func (o *AwsTargetParamsForRecoverRDSPostgres) HasKnownSourceConfig() bool {
	if o != nil && o.KnownSourceConfig.IsSet() {
		return true
	}

	return false
}

// SetKnownSourceConfig gets a reference to the given NullableAwsTargetParamsForRecoverRDSPostgresKnownSourceConfig and assigns it to the KnownSourceConfig field.
func (o *AwsTargetParamsForRecoverRDSPostgres) SetKnownSourceConfig(v AwsTargetParamsForRecoverRDSPostgresKnownSourceConfig) {
	o.KnownSourceConfig.Set(&v)
}
// SetKnownSourceConfigNil sets the value for KnownSourceConfig to be an explicit nil
func (o *AwsTargetParamsForRecoverRDSPostgres) SetKnownSourceConfigNil() {
	o.KnownSourceConfig.Set(nil)
}

// UnsetKnownSourceConfig ensures that no value is present for KnownSourceConfig, not even an explicit nil
func (o *AwsTargetParamsForRecoverRDSPostgres) UnsetKnownSourceConfig() {
	o.KnownSourceConfig.Unset()
}

// GetRecoverToKnownSource returns the RecoverToKnownSource field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *AwsTargetParamsForRecoverRDSPostgres) GetRecoverToKnownSource() bool {
	if o == nil || o.RecoverToKnownSource.Get() == nil {
		var ret bool
		return ret
	}

	return *o.RecoverToKnownSource.Get()
}

// GetRecoverToKnownSourceOk returns a tuple with the RecoverToKnownSource field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsTargetParamsForRecoverRDSPostgres) GetRecoverToKnownSourceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverToKnownSource.Get(), o.RecoverToKnownSource.IsSet()
}

// SetRecoverToKnownSource sets field value
func (o *AwsTargetParamsForRecoverRDSPostgres) SetRecoverToKnownSource(v bool) {
	o.RecoverToKnownSource.Set(&v)
}

func (o AwsTargetParamsForRecoverRDSPostgres) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsTargetParamsForRecoverRDSPostgres) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CustomServerConfig.IsSet() {
		toSerialize["customServerConfig"] = o.CustomServerConfig.Get()
	}
	if o.KnownSourceConfig.IsSet() {
		toSerialize["knownSourceConfig"] = o.KnownSourceConfig.Get()
	}
	toSerialize["recoverToKnownSource"] = o.RecoverToKnownSource.Get()
	return toSerialize, nil
}

func (o *AwsTargetParamsForRecoverRDSPostgres) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoverToKnownSource",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsTargetParamsForRecoverRDSPostgres := _AwsTargetParamsForRecoverRDSPostgres{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsTargetParamsForRecoverRDSPostgres)

	if err != nil {
		return err
	}

	*o = AwsTargetParamsForRecoverRDSPostgres(varAwsTargetParamsForRecoverRDSPostgres)

	return err
}

type NullableAwsTargetParamsForRecoverRDSPostgres struct {
	value *AwsTargetParamsForRecoverRDSPostgres
	isSet bool
}

func (v NullableAwsTargetParamsForRecoverRDSPostgres) Get() *AwsTargetParamsForRecoverRDSPostgres {
	return v.value
}

func (v *NullableAwsTargetParamsForRecoverRDSPostgres) Set(val *AwsTargetParamsForRecoverRDSPostgres) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsTargetParamsForRecoverRDSPostgres) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsTargetParamsForRecoverRDSPostgres) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsTargetParamsForRecoverRDSPostgres(val *AwsTargetParamsForRecoverRDSPostgres) *NullableAwsTargetParamsForRecoverRDSPostgres {
	return &NullableAwsTargetParamsForRecoverRDSPostgres{value: val, isSet: true}
}

func (v NullableAwsTargetParamsForRecoverRDSPostgres) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsTargetParamsForRecoverRDSPostgres) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


