/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RunArchivalConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RunArchivalConfig{}

// RunArchivalConfig Specifies settings for copying Snapshots External Targets (such as AWS or Tape). This also specifies the retention policy that should be applied to Snapshots after they have been copied to the specified target.
type RunArchivalConfig struct {
	// Specifies the snapshot's archival target type from which recovery has been performed.
	ArchivalTargetType NullableString `json:"archivalTargetType"`
	// Specifies if Snapshots are copied from a fully successful Protection Group Run or a partially successful Protection Group Run. If false, Snapshots are copied the Protection Group Run, even if the Run was not fully successful i.e. Snapshots were not captured for all Objects in the Protection Group. If true, Snapshots are copied only when the run is fully successful.
	CopyOnlyFullySuccessful NullableBool `json:"copyOnlyFullySuccessful,omitempty"`
	// Specifies the Archival target to copy the Snapshots to.
	Id NullableInt64 `json:"id"`
	// Specifies if the Run is on legal hold.
	OnLegalHold NullableBool `json:"onLegalHold,omitempty"`
	Retention *Retention `json:"retention,omitempty"`
}

type _RunArchivalConfig RunArchivalConfig

// NewRunArchivalConfig instantiates a new RunArchivalConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunArchivalConfig(archivalTargetType NullableString, id NullableInt64) *RunArchivalConfig {
	this := RunArchivalConfig{}
	this.ArchivalTargetType = archivalTargetType
	this.Id = id
	return &this
}

// NewRunArchivalConfigWithDefaults instantiates a new RunArchivalConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunArchivalConfigWithDefaults() *RunArchivalConfig {
	this := RunArchivalConfig{}
	return &this
}

// GetArchivalTargetType returns the ArchivalTargetType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RunArchivalConfig) GetArchivalTargetType() string {
	if o == nil || o.ArchivalTargetType.Get() == nil {
		var ret string
		return ret
	}

	return *o.ArchivalTargetType.Get()
}

// GetArchivalTargetTypeOk returns a tuple with the ArchivalTargetType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunArchivalConfig) GetArchivalTargetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ArchivalTargetType.Get(), o.ArchivalTargetType.IsSet()
}

// SetArchivalTargetType sets field value
func (o *RunArchivalConfig) SetArchivalTargetType(v string) {
	o.ArchivalTargetType.Set(&v)
}

// GetCopyOnlyFullySuccessful returns the CopyOnlyFullySuccessful field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunArchivalConfig) GetCopyOnlyFullySuccessful() bool {
	if o == nil || IsNil(o.CopyOnlyFullySuccessful.Get()) {
		var ret bool
		return ret
	}
	return *o.CopyOnlyFullySuccessful.Get()
}

// GetCopyOnlyFullySuccessfulOk returns a tuple with the CopyOnlyFullySuccessful field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunArchivalConfig) GetCopyOnlyFullySuccessfulOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CopyOnlyFullySuccessful.Get(), o.CopyOnlyFullySuccessful.IsSet()
}

// HasCopyOnlyFullySuccessful returns a boolean if a field has been set.
func (o *RunArchivalConfig) HasCopyOnlyFullySuccessful() bool {
	if o != nil && o.CopyOnlyFullySuccessful.IsSet() {
		return true
	}

	return false
}

// SetCopyOnlyFullySuccessful gets a reference to the given NullableBool and assigns it to the CopyOnlyFullySuccessful field.
func (o *RunArchivalConfig) SetCopyOnlyFullySuccessful(v bool) {
	o.CopyOnlyFullySuccessful.Set(&v)
}
// SetCopyOnlyFullySuccessfulNil sets the value for CopyOnlyFullySuccessful to be an explicit nil
func (o *RunArchivalConfig) SetCopyOnlyFullySuccessfulNil() {
	o.CopyOnlyFullySuccessful.Set(nil)
}

// UnsetCopyOnlyFullySuccessful ensures that no value is present for CopyOnlyFullySuccessful, not even an explicit nil
func (o *RunArchivalConfig) UnsetCopyOnlyFullySuccessful() {
	o.CopyOnlyFullySuccessful.Unset()
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RunArchivalConfig) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunArchivalConfig) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *RunArchivalConfig) SetId(v int64) {
	o.Id.Set(&v)
}

// GetOnLegalHold returns the OnLegalHold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunArchivalConfig) GetOnLegalHold() bool {
	if o == nil || IsNil(o.OnLegalHold.Get()) {
		var ret bool
		return ret
	}
	return *o.OnLegalHold.Get()
}

// GetOnLegalHoldOk returns a tuple with the OnLegalHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunArchivalConfig) GetOnLegalHoldOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OnLegalHold.Get(), o.OnLegalHold.IsSet()
}

// HasOnLegalHold returns a boolean if a field has been set.
func (o *RunArchivalConfig) HasOnLegalHold() bool {
	if o != nil && o.OnLegalHold.IsSet() {
		return true
	}

	return false
}

// SetOnLegalHold gets a reference to the given NullableBool and assigns it to the OnLegalHold field.
func (o *RunArchivalConfig) SetOnLegalHold(v bool) {
	o.OnLegalHold.Set(&v)
}
// SetOnLegalHoldNil sets the value for OnLegalHold to be an explicit nil
func (o *RunArchivalConfig) SetOnLegalHoldNil() {
	o.OnLegalHold.Set(nil)
}

// UnsetOnLegalHold ensures that no value is present for OnLegalHold, not even an explicit nil
func (o *RunArchivalConfig) UnsetOnLegalHold() {
	o.OnLegalHold.Unset()
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *RunArchivalConfig) GetRetention() Retention {
	if o == nil || IsNil(o.Retention) {
		var ret Retention
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunArchivalConfig) GetRetentionOk() (*Retention, bool) {
	if o == nil || IsNil(o.Retention) {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *RunArchivalConfig) HasRetention() bool {
	if o != nil && !IsNil(o.Retention) {
		return true
	}

	return false
}

// SetRetention gets a reference to the given Retention and assigns it to the Retention field.
func (o *RunArchivalConfig) SetRetention(v Retention) {
	o.Retention = &v
}

func (o RunArchivalConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RunArchivalConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["archivalTargetType"] = o.ArchivalTargetType.Get()
	if o.CopyOnlyFullySuccessful.IsSet() {
		toSerialize["copyOnlyFullySuccessful"] = o.CopyOnlyFullySuccessful.Get()
	}
	toSerialize["id"] = o.Id.Get()
	if o.OnLegalHold.IsSet() {
		toSerialize["onLegalHold"] = o.OnLegalHold.Get()
	}
	if !IsNil(o.Retention) {
		toSerialize["retention"] = o.Retention
	}
	return toSerialize, nil
}

func (o *RunArchivalConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"archivalTargetType",
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRunArchivalConfig := _RunArchivalConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRunArchivalConfig)

	if err != nil {
		return err
	}

	*o = RunArchivalConfig(varRunArchivalConfig)

	return err
}

type NullableRunArchivalConfig struct {
	value *RunArchivalConfig
	isSet bool
}

func (v NullableRunArchivalConfig) Get() *RunArchivalConfig {
	return v.value
}

func (v *NullableRunArchivalConfig) Set(val *RunArchivalConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRunArchivalConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRunArchivalConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunArchivalConfig(val *RunArchivalConfig) *NullableRunArchivalConfig {
	return &NullableRunArchivalConfig{value: val, isSet: true}
}

func (v NullableRunArchivalConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunArchivalConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


