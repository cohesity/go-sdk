/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the AzureEntityMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureEntityMetadata{}

// AzureEntityMetadata Specifies the entity metadata of azure entities.
type AzureEntityMetadata struct {
	AzureSqlParams *AzureSqlEntityMetadata `json:"azureSqlParams,omitempty"`
}

// NewAzureEntityMetadata instantiates a new AzureEntityMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureEntityMetadata() *AzureEntityMetadata {
	this := AzureEntityMetadata{}
	return &this
}

// NewAzureEntityMetadataWithDefaults instantiates a new AzureEntityMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureEntityMetadataWithDefaults() *AzureEntityMetadata {
	this := AzureEntityMetadata{}
	return &this
}

// GetAzureSqlParams returns the AzureSqlParams field value if set, zero value otherwise.
func (o *AzureEntityMetadata) GetAzureSqlParams() AzureSqlEntityMetadata {
	if o == nil || IsNil(o.AzureSqlParams) {
		var ret AzureSqlEntityMetadata
		return ret
	}
	return *o.AzureSqlParams
}

// GetAzureSqlParamsOk returns a tuple with the AzureSqlParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureEntityMetadata) GetAzureSqlParamsOk() (*AzureSqlEntityMetadata, bool) {
	if o == nil || IsNil(o.AzureSqlParams) {
		return nil, false
	}
	return o.AzureSqlParams, true
}

// HasAzureSqlParams returns a boolean if a field has been set.
func (o *AzureEntityMetadata) HasAzureSqlParams() bool {
	if o != nil && !IsNil(o.AzureSqlParams) {
		return true
	}

	return false
}

// SetAzureSqlParams gets a reference to the given AzureSqlEntityMetadata and assigns it to the AzureSqlParams field.
func (o *AzureEntityMetadata) SetAzureSqlParams(v AzureSqlEntityMetadata) {
	o.AzureSqlParams = &v
}

func (o AzureEntityMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureEntityMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AzureSqlParams) {
		toSerialize["azureSqlParams"] = o.AzureSqlParams
	}
	return toSerialize, nil
}

type NullableAzureEntityMetadata struct {
	value *AzureEntityMetadata
	isSet bool
}

func (v NullableAzureEntityMetadata) Get() *AzureEntityMetadata {
	return v.value
}

func (v *NullableAzureEntityMetadata) Set(val *AzureEntityMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureEntityMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureEntityMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureEntityMetadata(val *AzureEntityMetadata) *NullableAzureEntityMetadata {
	return &NullableAzureEntityMetadata{value: val, isSet: true}
}

func (v NullableAzureEntityMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureEntityMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


