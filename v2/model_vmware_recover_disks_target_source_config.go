/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VmwareRecoverDisksTargetSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VmwareRecoverDisksTargetSourceConfig{}

// VmwareRecoverDisksTargetSourceConfig Specifies the configuration for restoring disks to a different VM than the one from which the snapshot was taken.
type VmwareRecoverDisksTargetSourceConfig struct {
	// Specifies the disks to be recovered and the location to which they will be recovered.
	Disks []VmwareRecoverTargetSourceDiskParams `json:"disks"`
	// Specifies the source ID of the VM to which the disks will be restored.
	SourceId NullableInt64 `json:"sourceId"`
	// Specifies the source name of the VM to which the disks will be restored.
	SourceName NullableString `json:"sourceName,omitempty"`
	// Specifies the name of the vm to which the disks will be restored.
	Target NullableString `json:"target,omitempty"`
}

type _VmwareRecoverDisksTargetSourceConfig VmwareRecoverDisksTargetSourceConfig

// NewVmwareRecoverDisksTargetSourceConfig instantiates a new VmwareRecoverDisksTargetSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareRecoverDisksTargetSourceConfig(disks []VmwareRecoverTargetSourceDiskParams, sourceId NullableInt64) *VmwareRecoverDisksTargetSourceConfig {
	this := VmwareRecoverDisksTargetSourceConfig{}
	this.Disks = disks
	this.SourceId = sourceId
	return &this
}

// NewVmwareRecoverDisksTargetSourceConfigWithDefaults instantiates a new VmwareRecoverDisksTargetSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareRecoverDisksTargetSourceConfigWithDefaults() *VmwareRecoverDisksTargetSourceConfig {
	this := VmwareRecoverDisksTargetSourceConfig{}
	return &this
}

// GetDisks returns the Disks field value
func (o *VmwareRecoverDisksTargetSourceConfig) GetDisks() []VmwareRecoverTargetSourceDiskParams {
	if o == nil {
		var ret []VmwareRecoverTargetSourceDiskParams
		return ret
	}

	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value
// and a boolean to check if the value has been set.
func (o *VmwareRecoverDisksTargetSourceConfig) GetDisksOk() ([]VmwareRecoverTargetSourceDiskParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.Disks, true
}

// SetDisks sets field value
func (o *VmwareRecoverDisksTargetSourceConfig) SetDisks(v []VmwareRecoverTargetSourceDiskParams) {
	o.Disks = v
}

// GetSourceId returns the SourceId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *VmwareRecoverDisksTargetSourceConfig) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRecoverDisksTargetSourceConfig) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// SetSourceId sets field value
func (o *VmwareRecoverDisksTargetSourceConfig) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRecoverDisksTargetSourceConfig) GetSourceName() string {
	if o == nil || IsNil(o.SourceName.Get()) {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRecoverDisksTargetSourceConfig) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *VmwareRecoverDisksTargetSourceConfig) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *VmwareRecoverDisksTargetSourceConfig) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *VmwareRecoverDisksTargetSourceConfig) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *VmwareRecoverDisksTargetSourceConfig) UnsetSourceName() {
	o.SourceName.Unset()
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareRecoverDisksTargetSourceConfig) GetTarget() string {
	if o == nil || IsNil(o.Target.Get()) {
		var ret string
		return ret
	}
	return *o.Target.Get()
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareRecoverDisksTargetSourceConfig) GetTargetOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Target.Get(), o.Target.IsSet()
}

// HasTarget returns a boolean if a field has been set.
func (o *VmwareRecoverDisksTargetSourceConfig) HasTarget() bool {
	if o != nil && o.Target.IsSet() {
		return true
	}

	return false
}

// SetTarget gets a reference to the given NullableString and assigns it to the Target field.
func (o *VmwareRecoverDisksTargetSourceConfig) SetTarget(v string) {
	o.Target.Set(&v)
}
// SetTargetNil sets the value for Target to be an explicit nil
func (o *VmwareRecoverDisksTargetSourceConfig) SetTargetNil() {
	o.Target.Set(nil)
}

// UnsetTarget ensures that no value is present for Target, not even an explicit nil
func (o *VmwareRecoverDisksTargetSourceConfig) UnsetTarget() {
	o.Target.Unset()
}

func (o VmwareRecoverDisksTargetSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VmwareRecoverDisksTargetSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["disks"] = o.Disks
	toSerialize["sourceId"] = o.SourceId.Get()
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	if o.Target.IsSet() {
		toSerialize["target"] = o.Target.Get()
	}
	return toSerialize, nil
}

func (o *VmwareRecoverDisksTargetSourceConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"disks",
		"sourceId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVmwareRecoverDisksTargetSourceConfig := _VmwareRecoverDisksTargetSourceConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVmwareRecoverDisksTargetSourceConfig)

	if err != nil {
		return err
	}

	*o = VmwareRecoverDisksTargetSourceConfig(varVmwareRecoverDisksTargetSourceConfig)

	return err
}

type NullableVmwareRecoverDisksTargetSourceConfig struct {
	value *VmwareRecoverDisksTargetSourceConfig
	isSet bool
}

func (v NullableVmwareRecoverDisksTargetSourceConfig) Get() *VmwareRecoverDisksTargetSourceConfig {
	return v.value
}

func (v *NullableVmwareRecoverDisksTargetSourceConfig) Set(val *VmwareRecoverDisksTargetSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareRecoverDisksTargetSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareRecoverDisksTargetSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareRecoverDisksTargetSourceConfig(val *VmwareRecoverDisksTargetSourceConfig) *NullableVmwareRecoverDisksTargetSourceConfig {
	return &NullableVmwareRecoverDisksTargetSourceConfig{value: val, isSet: true}
}

func (v NullableVmwareRecoverDisksTargetSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareRecoverDisksTargetSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


