/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HeliosStorageArraySnapshotSchedule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HeliosStorageArraySnapshotSchedule{}

// HeliosStorageArraySnapshotSchedule Specifies settings that defines how frequent Storage Snapshot Management backup will be performed for a Protection Group.
type HeliosStorageArraySnapshotSchedule struct {
	DaySchedule *DaySchedule `json:"daySchedule,omitempty"`
	HourSchedule *HourSchedule `json:"hourSchedule,omitempty"`
	MinuteSchedule *MinuteSchedule `json:"minuteSchedule,omitempty"`
	MonthSchedule *MonthSchedule `json:"monthSchedule,omitempty"`
	// Specifies how often to start new Protection Group Runs of a Protection Group. <br>'Minutes' specifies that Protection Group run starts periodically after certain number of minutes specified in 'frequency' field. <br>'Hours' specifies that Protection Group run starts periodically after certain number of hours specified in 'frequency' field.
	Unit NullableString `json:"unit"`
	WeekSchedule *WeekSchedule `json:"weekSchedule,omitempty"`
	YearSchedule *YearSchedule `json:"yearSchedule,omitempty"`
}

type _HeliosStorageArraySnapshotSchedule HeliosStorageArraySnapshotSchedule

// NewHeliosStorageArraySnapshotSchedule instantiates a new HeliosStorageArraySnapshotSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosStorageArraySnapshotSchedule(unit NullableString) *HeliosStorageArraySnapshotSchedule {
	this := HeliosStorageArraySnapshotSchedule{}
	this.Unit = unit
	return &this
}

// NewHeliosStorageArraySnapshotScheduleWithDefaults instantiates a new HeliosStorageArraySnapshotSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosStorageArraySnapshotScheduleWithDefaults() *HeliosStorageArraySnapshotSchedule {
	this := HeliosStorageArraySnapshotSchedule{}
	return &this
}

// GetDaySchedule returns the DaySchedule field value if set, zero value otherwise.
func (o *HeliosStorageArraySnapshotSchedule) GetDaySchedule() DaySchedule {
	if o == nil || IsNil(o.DaySchedule) {
		var ret DaySchedule
		return ret
	}
	return *o.DaySchedule
}

// GetDayScheduleOk returns a tuple with the DaySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosStorageArraySnapshotSchedule) GetDayScheduleOk() (*DaySchedule, bool) {
	if o == nil || IsNil(o.DaySchedule) {
		return nil, false
	}
	return o.DaySchedule, true
}

// HasDaySchedule returns a boolean if a field has been set.
func (o *HeliosStorageArraySnapshotSchedule) HasDaySchedule() bool {
	if o != nil && !IsNil(o.DaySchedule) {
		return true
	}

	return false
}

// SetDaySchedule gets a reference to the given DaySchedule and assigns it to the DaySchedule field.
func (o *HeliosStorageArraySnapshotSchedule) SetDaySchedule(v DaySchedule) {
	o.DaySchedule = &v
}

// GetHourSchedule returns the HourSchedule field value if set, zero value otherwise.
func (o *HeliosStorageArraySnapshotSchedule) GetHourSchedule() HourSchedule {
	if o == nil || IsNil(o.HourSchedule) {
		var ret HourSchedule
		return ret
	}
	return *o.HourSchedule
}

// GetHourScheduleOk returns a tuple with the HourSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosStorageArraySnapshotSchedule) GetHourScheduleOk() (*HourSchedule, bool) {
	if o == nil || IsNil(o.HourSchedule) {
		return nil, false
	}
	return o.HourSchedule, true
}

// HasHourSchedule returns a boolean if a field has been set.
func (o *HeliosStorageArraySnapshotSchedule) HasHourSchedule() bool {
	if o != nil && !IsNil(o.HourSchedule) {
		return true
	}

	return false
}

// SetHourSchedule gets a reference to the given HourSchedule and assigns it to the HourSchedule field.
func (o *HeliosStorageArraySnapshotSchedule) SetHourSchedule(v HourSchedule) {
	o.HourSchedule = &v
}

// GetMinuteSchedule returns the MinuteSchedule field value if set, zero value otherwise.
func (o *HeliosStorageArraySnapshotSchedule) GetMinuteSchedule() MinuteSchedule {
	if o == nil || IsNil(o.MinuteSchedule) {
		var ret MinuteSchedule
		return ret
	}
	return *o.MinuteSchedule
}

// GetMinuteScheduleOk returns a tuple with the MinuteSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosStorageArraySnapshotSchedule) GetMinuteScheduleOk() (*MinuteSchedule, bool) {
	if o == nil || IsNil(o.MinuteSchedule) {
		return nil, false
	}
	return o.MinuteSchedule, true
}

// HasMinuteSchedule returns a boolean if a field has been set.
func (o *HeliosStorageArraySnapshotSchedule) HasMinuteSchedule() bool {
	if o != nil && !IsNil(o.MinuteSchedule) {
		return true
	}

	return false
}

// SetMinuteSchedule gets a reference to the given MinuteSchedule and assigns it to the MinuteSchedule field.
func (o *HeliosStorageArraySnapshotSchedule) SetMinuteSchedule(v MinuteSchedule) {
	o.MinuteSchedule = &v
}

// GetMonthSchedule returns the MonthSchedule field value if set, zero value otherwise.
func (o *HeliosStorageArraySnapshotSchedule) GetMonthSchedule() MonthSchedule {
	if o == nil || IsNil(o.MonthSchedule) {
		var ret MonthSchedule
		return ret
	}
	return *o.MonthSchedule
}

// GetMonthScheduleOk returns a tuple with the MonthSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosStorageArraySnapshotSchedule) GetMonthScheduleOk() (*MonthSchedule, bool) {
	if o == nil || IsNil(o.MonthSchedule) {
		return nil, false
	}
	return o.MonthSchedule, true
}

// HasMonthSchedule returns a boolean if a field has been set.
func (o *HeliosStorageArraySnapshotSchedule) HasMonthSchedule() bool {
	if o != nil && !IsNil(o.MonthSchedule) {
		return true
	}

	return false
}

// SetMonthSchedule gets a reference to the given MonthSchedule and assigns it to the MonthSchedule field.
func (o *HeliosStorageArraySnapshotSchedule) SetMonthSchedule(v MonthSchedule) {
	o.MonthSchedule = &v
}

// GetUnit returns the Unit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HeliosStorageArraySnapshotSchedule) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}

	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosStorageArraySnapshotSchedule) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// SetUnit sets field value
func (o *HeliosStorageArraySnapshotSchedule) SetUnit(v string) {
	o.Unit.Set(&v)
}

// GetWeekSchedule returns the WeekSchedule field value if set, zero value otherwise.
func (o *HeliosStorageArraySnapshotSchedule) GetWeekSchedule() WeekSchedule {
	if o == nil || IsNil(o.WeekSchedule) {
		var ret WeekSchedule
		return ret
	}
	return *o.WeekSchedule
}

// GetWeekScheduleOk returns a tuple with the WeekSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosStorageArraySnapshotSchedule) GetWeekScheduleOk() (*WeekSchedule, bool) {
	if o == nil || IsNil(o.WeekSchedule) {
		return nil, false
	}
	return o.WeekSchedule, true
}

// HasWeekSchedule returns a boolean if a field has been set.
func (o *HeliosStorageArraySnapshotSchedule) HasWeekSchedule() bool {
	if o != nil && !IsNil(o.WeekSchedule) {
		return true
	}

	return false
}

// SetWeekSchedule gets a reference to the given WeekSchedule and assigns it to the WeekSchedule field.
func (o *HeliosStorageArraySnapshotSchedule) SetWeekSchedule(v WeekSchedule) {
	o.WeekSchedule = &v
}

// GetYearSchedule returns the YearSchedule field value if set, zero value otherwise.
func (o *HeliosStorageArraySnapshotSchedule) GetYearSchedule() YearSchedule {
	if o == nil || IsNil(o.YearSchedule) {
		var ret YearSchedule
		return ret
	}
	return *o.YearSchedule
}

// GetYearScheduleOk returns a tuple with the YearSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosStorageArraySnapshotSchedule) GetYearScheduleOk() (*YearSchedule, bool) {
	if o == nil || IsNil(o.YearSchedule) {
		return nil, false
	}
	return o.YearSchedule, true
}

// HasYearSchedule returns a boolean if a field has been set.
func (o *HeliosStorageArraySnapshotSchedule) HasYearSchedule() bool {
	if o != nil && !IsNil(o.YearSchedule) {
		return true
	}

	return false
}

// SetYearSchedule gets a reference to the given YearSchedule and assigns it to the YearSchedule field.
func (o *HeliosStorageArraySnapshotSchedule) SetYearSchedule(v YearSchedule) {
	o.YearSchedule = &v
}

func (o HeliosStorageArraySnapshotSchedule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HeliosStorageArraySnapshotSchedule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DaySchedule) {
		toSerialize["daySchedule"] = o.DaySchedule
	}
	if !IsNil(o.HourSchedule) {
		toSerialize["hourSchedule"] = o.HourSchedule
	}
	if !IsNil(o.MinuteSchedule) {
		toSerialize["minuteSchedule"] = o.MinuteSchedule
	}
	if !IsNil(o.MonthSchedule) {
		toSerialize["monthSchedule"] = o.MonthSchedule
	}
	toSerialize["unit"] = o.Unit.Get()
	if !IsNil(o.WeekSchedule) {
		toSerialize["weekSchedule"] = o.WeekSchedule
	}
	if !IsNil(o.YearSchedule) {
		toSerialize["yearSchedule"] = o.YearSchedule
	}
	return toSerialize, nil
}

func (o *HeliosStorageArraySnapshotSchedule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"unit",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHeliosStorageArraySnapshotSchedule := _HeliosStorageArraySnapshotSchedule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHeliosStorageArraySnapshotSchedule)

	if err != nil {
		return err
	}

	*o = HeliosStorageArraySnapshotSchedule(varHeliosStorageArraySnapshotSchedule)

	return err
}

type NullableHeliosStorageArraySnapshotSchedule struct {
	value *HeliosStorageArraySnapshotSchedule
	isSet bool
}

func (v NullableHeliosStorageArraySnapshotSchedule) Get() *HeliosStorageArraySnapshotSchedule {
	return v.value
}

func (v *NullableHeliosStorageArraySnapshotSchedule) Set(val *HeliosStorageArraySnapshotSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosStorageArraySnapshotSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosStorageArraySnapshotSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosStorageArraySnapshotSchedule(val *HeliosStorageArraySnapshotSchedule) *NullableHeliosStorageArraySnapshotSchedule {
	return &NullableHeliosStorageArraySnapshotSchedule{value: val, isSet: true}
}

func (v NullableHeliosStorageArraySnapshotSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosStorageArraySnapshotSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


