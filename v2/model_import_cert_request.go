/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ImportCertRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ImportCertRequest{}

// ImportCertRequest Specifies the paramaters required to import external ca signed certificate
type ImportCertRequest struct {
	// Full ca certificate chain in pem format.
	CaChainPem []string `json:"caChainPem"`
	// Certificate (pem) to be imported
	CertPem string `json:"certPem"`
	// Private key
	PrivateKey string `json:"privateKey"`
	// Specifies the service that this certificate/key material is used.
	ServiceType NullableString `json:"serviceType,omitempty"`
	// Specifies the tenant id
	TenantId NullableString `json:"tenantId,omitempty"`
}

type _ImportCertRequest ImportCertRequest

// NewImportCertRequest instantiates a new ImportCertRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportCertRequest(caChainPem []string, certPem string, privateKey string) *ImportCertRequest {
	this := ImportCertRequest{}
	this.CaChainPem = caChainPem
	this.CertPem = certPem
	this.PrivateKey = privateKey
	var serviceType SERVICE_TYPE = "kAll"
	this.ServiceType = *NewNullableString(&serviceType)
	return &this
}

// NewImportCertRequestWithDefaults instantiates a new ImportCertRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportCertRequestWithDefaults() *ImportCertRequest {
	this := ImportCertRequest{}
	var serviceType SERVICE_TYPE = "kAll"
	this.ServiceType = *NewNullableString(&serviceType)
	return &this
}

// GetCaChainPem returns the CaChainPem field value
func (o *ImportCertRequest) GetCaChainPem() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.CaChainPem
}

// GetCaChainPemOk returns a tuple with the CaChainPem field value
// and a boolean to check if the value has been set.
func (o *ImportCertRequest) GetCaChainPemOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaChainPem, true
}

// SetCaChainPem sets field value
func (o *ImportCertRequest) SetCaChainPem(v []string) {
	o.CaChainPem = v
}

// GetCertPem returns the CertPem field value
func (o *ImportCertRequest) GetCertPem() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CertPem
}

// GetCertPemOk returns a tuple with the CertPem field value
// and a boolean to check if the value has been set.
func (o *ImportCertRequest) GetCertPemOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CertPem, true
}

// SetCertPem sets field value
func (o *ImportCertRequest) SetCertPem(v string) {
	o.CertPem = v
}

// GetPrivateKey returns the PrivateKey field value
func (o *ImportCertRequest) GetPrivateKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PrivateKey
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value
// and a boolean to check if the value has been set.
func (o *ImportCertRequest) GetPrivateKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PrivateKey, true
}

// SetPrivateKey sets field value
func (o *ImportCertRequest) SetPrivateKey(v string) {
	o.PrivateKey = v
}

// GetServiceType returns the ServiceType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportCertRequest) GetServiceType() string {
	if o == nil || IsNil(o.ServiceType.Get()) {
		var ret string
		return ret
	}
	return *o.ServiceType.Get()
}

// GetServiceTypeOk returns a tuple with the ServiceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportCertRequest) GetServiceTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ServiceType.Get(), o.ServiceType.IsSet()
}

// HasServiceType returns a boolean if a field has been set.
func (o *ImportCertRequest) HasServiceType() bool {
	if o != nil && o.ServiceType.IsSet() {
		return true
	}

	return false
}

// SetServiceType gets a reference to the given NullableString and assigns it to the ServiceType field.
func (o *ImportCertRequest) SetServiceType(v string) {
	o.ServiceType.Set(&v)
}
// SetServiceTypeNil sets the value for ServiceType to be an explicit nil
func (o *ImportCertRequest) SetServiceTypeNil() {
	o.ServiceType.Set(nil)
}

// UnsetServiceType ensures that no value is present for ServiceType, not even an explicit nil
func (o *ImportCertRequest) UnsetServiceType() {
	o.ServiceType.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportCertRequest) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportCertRequest) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *ImportCertRequest) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *ImportCertRequest) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *ImportCertRequest) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *ImportCertRequest) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o ImportCertRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ImportCertRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["caChainPem"] = o.CaChainPem
	toSerialize["certPem"] = o.CertPem
	toSerialize["privateKey"] = o.PrivateKey
	if o.ServiceType.IsSet() {
		toSerialize["serviceType"] = o.ServiceType.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

func (o *ImportCertRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"caChainPem",
		"certPem",
		"privateKey",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varImportCertRequest := _ImportCertRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varImportCertRequest)

	if err != nil {
		return err
	}

	*o = ImportCertRequest(varImportCertRequest)

	return err
}

type NullableImportCertRequest struct {
	value *ImportCertRequest
	isSet bool
}

func (v NullableImportCertRequest) Get() *ImportCertRequest {
	return v.value
}

func (v *NullableImportCertRequest) Set(val *ImportCertRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableImportCertRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableImportCertRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportCertRequest(val *ImportCertRequest) *NullableImportCertRequest {
	return &NullableImportCertRequest{value: val, isSet: true}
}

func (v NullableImportCertRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportCertRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


