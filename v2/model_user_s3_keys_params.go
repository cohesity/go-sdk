/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserS3KeysParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserS3KeysParams{}

// UserS3KeysParams Specifies the params to update S3 Access Keys for a User.
type UserS3KeysParams struct {
	// Specifies the S3 Account Access Key ID. Allowed characters are: AlphaNumeric(a-zA-z0-9), underscore(_) and hyphen(-). Key should contain exactly 43 characters.
	S3AccessKeyId NullableString `json:"s3AccessKeyId,omitempty"`
	// Specifies the S3 Account Secret Key. Allowed characters are: AlphaNumeric(a-zA-z0-9), underscore(_) and hyphen(-). Key should contain exactly 43 characters.
	S3SecretKey NullableString `json:"s3SecretKey,omitempty"`
	// Specifies the SID of the User.
	Sid NullableString `json:"sid"`
}

type _UserS3KeysParams UserS3KeysParams

// NewUserS3KeysParams instantiates a new UserS3KeysParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserS3KeysParams(sid NullableString) *UserS3KeysParams {
	this := UserS3KeysParams{}
	this.Sid = sid
	return &this
}

// NewUserS3KeysParamsWithDefaults instantiates a new UserS3KeysParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserS3KeysParamsWithDefaults() *UserS3KeysParams {
	this := UserS3KeysParams{}
	return &this
}

// GetS3AccessKeyId returns the S3AccessKeyId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserS3KeysParams) GetS3AccessKeyId() string {
	if o == nil || IsNil(o.S3AccessKeyId.Get()) {
		var ret string
		return ret
	}
	return *o.S3AccessKeyId.Get()
}

// GetS3AccessKeyIdOk returns a tuple with the S3AccessKeyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserS3KeysParams) GetS3AccessKeyIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3AccessKeyId.Get(), o.S3AccessKeyId.IsSet()
}

// HasS3AccessKeyId returns a boolean if a field has been set.
func (o *UserS3KeysParams) HasS3AccessKeyId() bool {
	if o != nil && o.S3AccessKeyId.IsSet() {
		return true
	}

	return false
}

// SetS3AccessKeyId gets a reference to the given NullableString and assigns it to the S3AccessKeyId field.
func (o *UserS3KeysParams) SetS3AccessKeyId(v string) {
	o.S3AccessKeyId.Set(&v)
}
// SetS3AccessKeyIdNil sets the value for S3AccessKeyId to be an explicit nil
func (o *UserS3KeysParams) SetS3AccessKeyIdNil() {
	o.S3AccessKeyId.Set(nil)
}

// UnsetS3AccessKeyId ensures that no value is present for S3AccessKeyId, not even an explicit nil
func (o *UserS3KeysParams) UnsetS3AccessKeyId() {
	o.S3AccessKeyId.Unset()
}

// GetS3SecretKey returns the S3SecretKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserS3KeysParams) GetS3SecretKey() string {
	if o == nil || IsNil(o.S3SecretKey.Get()) {
		var ret string
		return ret
	}
	return *o.S3SecretKey.Get()
}

// GetS3SecretKeyOk returns a tuple with the S3SecretKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserS3KeysParams) GetS3SecretKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.S3SecretKey.Get(), o.S3SecretKey.IsSet()
}

// HasS3SecretKey returns a boolean if a field has been set.
func (o *UserS3KeysParams) HasS3SecretKey() bool {
	if o != nil && o.S3SecretKey.IsSet() {
		return true
	}

	return false
}

// SetS3SecretKey gets a reference to the given NullableString and assigns it to the S3SecretKey field.
func (o *UserS3KeysParams) SetS3SecretKey(v string) {
	o.S3SecretKey.Set(&v)
}
// SetS3SecretKeyNil sets the value for S3SecretKey to be an explicit nil
func (o *UserS3KeysParams) SetS3SecretKeyNil() {
	o.S3SecretKey.Set(nil)
}

// UnsetS3SecretKey ensures that no value is present for S3SecretKey, not even an explicit nil
func (o *UserS3KeysParams) UnsetS3SecretKey() {
	o.S3SecretKey.Unset()
}

// GetSid returns the Sid field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UserS3KeysParams) GetSid() string {
	if o == nil || o.Sid.Get() == nil {
		var ret string
		return ret
	}

	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserS3KeysParams) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// SetSid sets field value
func (o *UserS3KeysParams) SetSid(v string) {
	o.Sid.Set(&v)
}

func (o UserS3KeysParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserS3KeysParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.S3AccessKeyId.IsSet() {
		toSerialize["s3AccessKeyId"] = o.S3AccessKeyId.Get()
	}
	if o.S3SecretKey.IsSet() {
		toSerialize["s3SecretKey"] = o.S3SecretKey.Get()
	}
	toSerialize["sid"] = o.Sid.Get()
	return toSerialize, nil
}

func (o *UserS3KeysParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"sid",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserS3KeysParams := _UserS3KeysParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserS3KeysParams)

	if err != nil {
		return err
	}

	*o = UserS3KeysParams(varUserS3KeysParams)

	return err
}

type NullableUserS3KeysParams struct {
	value *UserS3KeysParams
	isSet bool
}

func (v NullableUserS3KeysParams) Get() *UserS3KeysParams {
	return v.value
}

func (v *NullableUserS3KeysParams) Set(val *UserS3KeysParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUserS3KeysParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUserS3KeysParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserS3KeysParams(val *UserS3KeysParams) *NullableUserS3KeysParams {
	return &NullableUserS3KeysParams{value: val, isSet: true}
}

func (v NullableUserS3KeysParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserS3KeysParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


