/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the KubernetesTargetParamsForRecoverKubernetesNamespace type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &KubernetesTargetParamsForRecoverKubernetesNamespace{}

// KubernetesTargetParamsForRecoverKubernetesNamespace Specifies the parameters for recovering a Kubernetes namespace to a Kubernetes source.
type KubernetesTargetParamsForRecoverKubernetesNamespace struct {
	ExcludeParams NullableKubernetesFilterParams `json:"excludeParams,omitempty"`
	// Specifies the list of pvc to be excluded from recovery.
	ExcludedPvcs []KubernetesPvcInfo `json:"excludedPvcs,omitempty"`
	IncludeParams NullableKubernetesFilterParams `json:"includeParams,omitempty"`
	// Specifies the objects to be recovered.
	Objects []CommonRecoverObjectSnapshotParams `json:"objects,omitempty"`
	// Specifies the Protection Group Runs params to recover. All the VM's that are successfully backed up by specified Runs will be recovered. This can be specified along with individual snapshots of VMs. User has to make sure that specified Object snapshots and Protection Group Runs should not have any intersection. For example, user cannot specify multiple Runs which has same Object or an Object snapshot and a Run which has same Object's snapshot.
	RecoverProtectionGroupRunsParams []RecoverProtectionGroupRunParams `json:"recoverProtectionGroupRunsParams,omitempty"`
	// Specifies whether to recover PVCs only during recovery.
	RecoverPvcsOnly NullableBool `json:"recoverPvcsOnly,omitempty"`
	RecoveryTargetConfig NullableKubernetesTargetParamsForRecoverKubernetesNamespaceRecoveryTargetConfig `json:"recoveryTargetConfig"`
	RenameRecoveredNamespacesParams NullableKubernetesTargetParamsForRecoverKubernetesNamespaceRenameRecoveredNamespacesParams `json:"renameRecoveredNamespacesParams,omitempty"`
	StorageClass *KubernetesStorageClassParams `json:"storageClass,omitempty"`
}

type _KubernetesTargetParamsForRecoverKubernetesNamespace KubernetesTargetParamsForRecoverKubernetesNamespace

// NewKubernetesTargetParamsForRecoverKubernetesNamespace instantiates a new KubernetesTargetParamsForRecoverKubernetesNamespace object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKubernetesTargetParamsForRecoverKubernetesNamespace(recoveryTargetConfig NullableKubernetesTargetParamsForRecoverKubernetesNamespaceRecoveryTargetConfig) *KubernetesTargetParamsForRecoverKubernetesNamespace {
	this := KubernetesTargetParamsForRecoverKubernetesNamespace{}
	this.RecoveryTargetConfig = recoveryTargetConfig
	return &this
}

// NewKubernetesTargetParamsForRecoverKubernetesNamespaceWithDefaults instantiates a new KubernetesTargetParamsForRecoverKubernetesNamespace object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKubernetesTargetParamsForRecoverKubernetesNamespaceWithDefaults() *KubernetesTargetParamsForRecoverKubernetesNamespace {
	this := KubernetesTargetParamsForRecoverKubernetesNamespace{}
	return &this
}

// GetExcludeParams returns the ExcludeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetExcludeParams() KubernetesFilterParams {
	if o == nil || IsNil(o.ExcludeParams.Get()) {
		var ret KubernetesFilterParams
		return ret
	}
	return *o.ExcludeParams.Get()
}

// GetExcludeParamsOk returns a tuple with the ExcludeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetExcludeParamsOk() (*KubernetesFilterParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.ExcludeParams.Get(), o.ExcludeParams.IsSet()
}

// HasExcludeParams returns a boolean if a field has been set.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) HasExcludeParams() bool {
	if o != nil && o.ExcludeParams.IsSet() {
		return true
	}

	return false
}

// SetExcludeParams gets a reference to the given NullableKubernetesFilterParams and assigns it to the ExcludeParams field.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetExcludeParams(v KubernetesFilterParams) {
	o.ExcludeParams.Set(&v)
}
// SetExcludeParamsNil sets the value for ExcludeParams to be an explicit nil
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetExcludeParamsNil() {
	o.ExcludeParams.Set(nil)
}

// UnsetExcludeParams ensures that no value is present for ExcludeParams, not even an explicit nil
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) UnsetExcludeParams() {
	o.ExcludeParams.Unset()
}

// GetExcludedPvcs returns the ExcludedPvcs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetExcludedPvcs() []KubernetesPvcInfo {
	if o == nil {
		var ret []KubernetesPvcInfo
		return ret
	}
	return o.ExcludedPvcs
}

// GetExcludedPvcsOk returns a tuple with the ExcludedPvcs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetExcludedPvcsOk() ([]KubernetesPvcInfo, bool) {
	if o == nil || IsNil(o.ExcludedPvcs) {
		return nil, false
	}
	return o.ExcludedPvcs, true
}

// HasExcludedPvcs returns a boolean if a field has been set.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) HasExcludedPvcs() bool {
	if o != nil && !IsNil(o.ExcludedPvcs) {
		return true
	}

	return false
}

// SetExcludedPvcs gets a reference to the given []KubernetesPvcInfo and assigns it to the ExcludedPvcs field.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetExcludedPvcs(v []KubernetesPvcInfo) {
	o.ExcludedPvcs = v
}

// GetIncludeParams returns the IncludeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetIncludeParams() KubernetesFilterParams {
	if o == nil || IsNil(o.IncludeParams.Get()) {
		var ret KubernetesFilterParams
		return ret
	}
	return *o.IncludeParams.Get()
}

// GetIncludeParamsOk returns a tuple with the IncludeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetIncludeParamsOk() (*KubernetesFilterParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.IncludeParams.Get(), o.IncludeParams.IsSet()
}

// HasIncludeParams returns a boolean if a field has been set.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) HasIncludeParams() bool {
	if o != nil && o.IncludeParams.IsSet() {
		return true
	}

	return false
}

// SetIncludeParams gets a reference to the given NullableKubernetesFilterParams and assigns it to the IncludeParams field.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetIncludeParams(v KubernetesFilterParams) {
	o.IncludeParams.Set(&v)
}
// SetIncludeParamsNil sets the value for IncludeParams to be an explicit nil
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetIncludeParamsNil() {
	o.IncludeParams.Set(nil)
}

// UnsetIncludeParams ensures that no value is present for IncludeParams, not even an explicit nil
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) UnsetIncludeParams() {
	o.IncludeParams.Unset()
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetObjects() []CommonRecoverObjectSnapshotParams {
	if o == nil {
		var ret []CommonRecoverObjectSnapshotParams
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetObjectsOk() ([]CommonRecoverObjectSnapshotParams, bool) {
	if o == nil || IsNil(o.Objects) {
		return nil, false
	}
	return o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) HasObjects() bool {
	if o != nil && !IsNil(o.Objects) {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []CommonRecoverObjectSnapshotParams and assigns it to the Objects field.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetObjects(v []CommonRecoverObjectSnapshotParams) {
	o.Objects = v
}

// GetRecoverProtectionGroupRunsParams returns the RecoverProtectionGroupRunsParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetRecoverProtectionGroupRunsParams() []RecoverProtectionGroupRunParams {
	if o == nil {
		var ret []RecoverProtectionGroupRunParams
		return ret
	}
	return o.RecoverProtectionGroupRunsParams
}

// GetRecoverProtectionGroupRunsParamsOk returns a tuple with the RecoverProtectionGroupRunsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetRecoverProtectionGroupRunsParamsOk() ([]RecoverProtectionGroupRunParams, bool) {
	if o == nil || IsNil(o.RecoverProtectionGroupRunsParams) {
		return nil, false
	}
	return o.RecoverProtectionGroupRunsParams, true
}

// HasRecoverProtectionGroupRunsParams returns a boolean if a field has been set.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) HasRecoverProtectionGroupRunsParams() bool {
	if o != nil && !IsNil(o.RecoverProtectionGroupRunsParams) {
		return true
	}

	return false
}

// SetRecoverProtectionGroupRunsParams gets a reference to the given []RecoverProtectionGroupRunParams and assigns it to the RecoverProtectionGroupRunsParams field.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetRecoverProtectionGroupRunsParams(v []RecoverProtectionGroupRunParams) {
	o.RecoverProtectionGroupRunsParams = v
}

// GetRecoverPvcsOnly returns the RecoverPvcsOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetRecoverPvcsOnly() bool {
	if o == nil || IsNil(o.RecoverPvcsOnly.Get()) {
		var ret bool
		return ret
	}
	return *o.RecoverPvcsOnly.Get()
}

// GetRecoverPvcsOnlyOk returns a tuple with the RecoverPvcsOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetRecoverPvcsOnlyOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoverPvcsOnly.Get(), o.RecoverPvcsOnly.IsSet()
}

// HasRecoverPvcsOnly returns a boolean if a field has been set.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) HasRecoverPvcsOnly() bool {
	if o != nil && o.RecoverPvcsOnly.IsSet() {
		return true
	}

	return false
}

// SetRecoverPvcsOnly gets a reference to the given NullableBool and assigns it to the RecoverPvcsOnly field.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetRecoverPvcsOnly(v bool) {
	o.RecoverPvcsOnly.Set(&v)
}
// SetRecoverPvcsOnlyNil sets the value for RecoverPvcsOnly to be an explicit nil
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetRecoverPvcsOnlyNil() {
	o.RecoverPvcsOnly.Set(nil)
}

// UnsetRecoverPvcsOnly ensures that no value is present for RecoverPvcsOnly, not even an explicit nil
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) UnsetRecoverPvcsOnly() {
	o.RecoverPvcsOnly.Unset()
}

// GetRecoveryTargetConfig returns the RecoveryTargetConfig field value
// If the value is explicit nil, the zero value for KubernetesTargetParamsForRecoverKubernetesNamespaceRecoveryTargetConfig will be returned
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetRecoveryTargetConfig() KubernetesTargetParamsForRecoverKubernetesNamespaceRecoveryTargetConfig {
	if o == nil || o.RecoveryTargetConfig.Get() == nil {
		var ret KubernetesTargetParamsForRecoverKubernetesNamespaceRecoveryTargetConfig
		return ret
	}

	return *o.RecoveryTargetConfig.Get()
}

// GetRecoveryTargetConfigOk returns a tuple with the RecoveryTargetConfig field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetRecoveryTargetConfigOk() (*KubernetesTargetParamsForRecoverKubernetesNamespaceRecoveryTargetConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.RecoveryTargetConfig.Get(), o.RecoveryTargetConfig.IsSet()
}

// SetRecoveryTargetConfig sets field value
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetRecoveryTargetConfig(v KubernetesTargetParamsForRecoverKubernetesNamespaceRecoveryTargetConfig) {
	o.RecoveryTargetConfig.Set(&v)
}

// GetRenameRecoveredNamespacesParams returns the RenameRecoveredNamespacesParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetRenameRecoveredNamespacesParams() KubernetesTargetParamsForRecoverKubernetesNamespaceRenameRecoveredNamespacesParams {
	if o == nil || IsNil(o.RenameRecoveredNamespacesParams.Get()) {
		var ret KubernetesTargetParamsForRecoverKubernetesNamespaceRenameRecoveredNamespacesParams
		return ret
	}
	return *o.RenameRecoveredNamespacesParams.Get()
}

// GetRenameRecoveredNamespacesParamsOk returns a tuple with the RenameRecoveredNamespacesParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetRenameRecoveredNamespacesParamsOk() (*KubernetesTargetParamsForRecoverKubernetesNamespaceRenameRecoveredNamespacesParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.RenameRecoveredNamespacesParams.Get(), o.RenameRecoveredNamespacesParams.IsSet()
}

// HasRenameRecoveredNamespacesParams returns a boolean if a field has been set.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) HasRenameRecoveredNamespacesParams() bool {
	if o != nil && o.RenameRecoveredNamespacesParams.IsSet() {
		return true
	}

	return false
}

// SetRenameRecoveredNamespacesParams gets a reference to the given NullableKubernetesTargetParamsForRecoverKubernetesNamespaceRenameRecoveredNamespacesParams and assigns it to the RenameRecoveredNamespacesParams field.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetRenameRecoveredNamespacesParams(v KubernetesTargetParamsForRecoverKubernetesNamespaceRenameRecoveredNamespacesParams) {
	o.RenameRecoveredNamespacesParams.Set(&v)
}
// SetRenameRecoveredNamespacesParamsNil sets the value for RenameRecoveredNamespacesParams to be an explicit nil
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetRenameRecoveredNamespacesParamsNil() {
	o.RenameRecoveredNamespacesParams.Set(nil)
}

// UnsetRenameRecoveredNamespacesParams ensures that no value is present for RenameRecoveredNamespacesParams, not even an explicit nil
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) UnsetRenameRecoveredNamespacesParams() {
	o.RenameRecoveredNamespacesParams.Unset()
}

// GetStorageClass returns the StorageClass field value if set, zero value otherwise.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetStorageClass() KubernetesStorageClassParams {
	if o == nil || IsNil(o.StorageClass) {
		var ret KubernetesStorageClassParams
		return ret
	}
	return *o.StorageClass
}

// GetStorageClassOk returns a tuple with the StorageClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) GetStorageClassOk() (*KubernetesStorageClassParams, bool) {
	if o == nil || IsNil(o.StorageClass) {
		return nil, false
	}
	return o.StorageClass, true
}

// HasStorageClass returns a boolean if a field has been set.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) HasStorageClass() bool {
	if o != nil && !IsNil(o.StorageClass) {
		return true
	}

	return false
}

// SetStorageClass gets a reference to the given KubernetesStorageClassParams and assigns it to the StorageClass field.
func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) SetStorageClass(v KubernetesStorageClassParams) {
	o.StorageClass = &v
}

func (o KubernetesTargetParamsForRecoverKubernetesNamespace) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o KubernetesTargetParamsForRecoverKubernetesNamespace) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludeParams.IsSet() {
		toSerialize["excludeParams"] = o.ExcludeParams.Get()
	}
	if o.ExcludedPvcs != nil {
		toSerialize["excludedPvcs"] = o.ExcludedPvcs
	}
	if o.IncludeParams.IsSet() {
		toSerialize["includeParams"] = o.IncludeParams.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.RecoverProtectionGroupRunsParams != nil {
		toSerialize["recoverProtectionGroupRunsParams"] = o.RecoverProtectionGroupRunsParams
	}
	if o.RecoverPvcsOnly.IsSet() {
		toSerialize["recoverPvcsOnly"] = o.RecoverPvcsOnly.Get()
	}
	toSerialize["recoveryTargetConfig"] = o.RecoveryTargetConfig.Get()
	if o.RenameRecoveredNamespacesParams.IsSet() {
		toSerialize["renameRecoveredNamespacesParams"] = o.RenameRecoveredNamespacesParams.Get()
	}
	if !IsNil(o.StorageClass) {
		toSerialize["storageClass"] = o.StorageClass
	}
	return toSerialize, nil
}

func (o *KubernetesTargetParamsForRecoverKubernetesNamespace) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoveryTargetConfig",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varKubernetesTargetParamsForRecoverKubernetesNamespace := _KubernetesTargetParamsForRecoverKubernetesNamespace{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varKubernetesTargetParamsForRecoverKubernetesNamespace)

	if err != nil {
		return err
	}

	*o = KubernetesTargetParamsForRecoverKubernetesNamespace(varKubernetesTargetParamsForRecoverKubernetesNamespace)

	return err
}

type NullableKubernetesTargetParamsForRecoverKubernetesNamespace struct {
	value *KubernetesTargetParamsForRecoverKubernetesNamespace
	isSet bool
}

func (v NullableKubernetesTargetParamsForRecoverKubernetesNamespace) Get() *KubernetesTargetParamsForRecoverKubernetesNamespace {
	return v.value
}

func (v *NullableKubernetesTargetParamsForRecoverKubernetesNamespace) Set(val *KubernetesTargetParamsForRecoverKubernetesNamespace) {
	v.value = val
	v.isSet = true
}

func (v NullableKubernetesTargetParamsForRecoverKubernetesNamespace) IsSet() bool {
	return v.isSet
}

func (v *NullableKubernetesTargetParamsForRecoverKubernetesNamespace) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKubernetesTargetParamsForRecoverKubernetesNamespace(val *KubernetesTargetParamsForRecoverKubernetesNamespace) *NullableKubernetesTargetParamsForRecoverKubernetesNamespace {
	return &NullableKubernetesTargetParamsForRecoverKubernetesNamespace{value: val, isSet: true}
}

func (v NullableKubernetesTargetParamsForRecoverKubernetesNamespace) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKubernetesTargetParamsForRecoverKubernetesNamespace) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


