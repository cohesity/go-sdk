/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RecoverSqlAppOriginalSourceConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverSqlAppOriginalSourceConfig{}

// RecoverSqlAppOriginalSourceConfig Specifies the additional Source configuration parameters when databases will be recovered to original location.
type RecoverSqlAppOriginalSourceConfig struct {
	// Set this to true if tail logs are to be captured before the recovery operation. This is only applicable if database is not being renamed.
	CaptureTailLogs NullableBool `json:"captureTailLogs,omitempty"`
	// Specifies the directory where to put the database data files. Missing directory will be automatically created. If you are overwriting the existing database then this field will be ignored.
	DataFileDirectoryLocation NullableString `json:"dataFileDirectoryLocation,omitempty"`
	// Specifies the directory where to put the database log files. Missing directory will be automatically created. If you are overwriting the existing database then this field will be ignored.
	LogFileDirectoryLocation NullableString `json:"logFileDirectoryLocation,omitempty"`
	// Specifies a new name for the restored database. If this field is not specified, then the original database will be overwritten after recovery.
	NewDatabaseName NullableString `json:"newDatabaseName,omitempty"`
	// Specifies whether to keep CDC (Change Data Capture) on recovered databases or not. If not passed, this is assumed to be true. If withNoRecovery is passed as true, then this field must not be set to true. Passing this field as true in this scenario will be a invalid request.
	KeepCdc NullableBool `json:"keepCdc,omitempty"`
	MultiStageRestoreOptions *MultiStageRestoreOptions `json:"multiStageRestoreOptions,omitempty"`
	// Specifies the WITH clause to be used in native sql log restore command. This is only applicable for native log restore.
	NativeLogRecoveryWithClause NullableString `json:"nativeLogRecoveryWithClause,omitempty"`
	// 'with_clause' contains 'with clause' to be used in native sql restore command. This is only applicable for database restore of native sql backup. Here user can specify multiple restore options. Example: 'WITH BUFFERCOUNT = 575, MAXTRANSFERSIZE = 2097152'.
	NativeRecoveryWithClause NullableString `json:"nativeRecoveryWithClause,omitempty"`
	// Specifies a policy to be used while recovering existing databases.
	OverwritingPolicy NullableString `json:"overwritingPolicy,omitempty"`
	// Specifies the option to set replay last log bit while creating the sql restore task and doing restore to latest point-in-time. If this is set to true, we will replay the entire last log without STOPAT.
	ReplayEntireLastLog NullableBool `json:"replayEntireLastLog,omitempty"`
	// Specifies the time in the past to which the Sql database needs to be restored. This allows for granular recovery of Sql databases. If this is not set, the Sql database will be restored from the full/incremental snapshot.
	RestoreTimeUsecs NullableInt64 `json:"restoreTimeUsecs,omitempty"`
	// Specifies the secondary data filename pattern and corresponding direcories of the DB. Secondary data files are optional and are user defined. The recommended file extention for secondary files is \".ndf\". If this option is specified and the destination folders do not exist they will be automatically created.
	SecondaryDataFilesDirList []FilenamePatternToDirectory `json:"secondaryDataFilesDirList,omitempty"`
	// Specifies the flag to bring DBs online or not after successful recovery. If this is passed as true, then it means DBs won't be brought online.
	WithNoRecovery NullableBool `json:"withNoRecovery,omitempty"`
}

// NewRecoverSqlAppOriginalSourceConfig instantiates a new RecoverSqlAppOriginalSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverSqlAppOriginalSourceConfig() *RecoverSqlAppOriginalSourceConfig {
	this := RecoverSqlAppOriginalSourceConfig{}
	return &this
}

// NewRecoverSqlAppOriginalSourceConfigWithDefaults instantiates a new RecoverSqlAppOriginalSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverSqlAppOriginalSourceConfigWithDefaults() *RecoverSqlAppOriginalSourceConfig {
	this := RecoverSqlAppOriginalSourceConfig{}
	return &this
}

// GetCaptureTailLogs returns the CaptureTailLogs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetCaptureTailLogs() bool {
	if o == nil || IsNil(o.CaptureTailLogs.Get()) {
		var ret bool
		return ret
	}
	return *o.CaptureTailLogs.Get()
}

// GetCaptureTailLogsOk returns a tuple with the CaptureTailLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetCaptureTailLogsOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.CaptureTailLogs.Get(), o.CaptureTailLogs.IsSet()
}

// HasCaptureTailLogs returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasCaptureTailLogs() bool {
	if o != nil && o.CaptureTailLogs.IsSet() {
		return true
	}

	return false
}

// SetCaptureTailLogs gets a reference to the given NullableBool and assigns it to the CaptureTailLogs field.
func (o *RecoverSqlAppOriginalSourceConfig) SetCaptureTailLogs(v bool) {
	o.CaptureTailLogs.Set(&v)
}
// SetCaptureTailLogsNil sets the value for CaptureTailLogs to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetCaptureTailLogsNil() {
	o.CaptureTailLogs.Set(nil)
}

// UnsetCaptureTailLogs ensures that no value is present for CaptureTailLogs, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetCaptureTailLogs() {
	o.CaptureTailLogs.Unset()
}

// GetDataFileDirectoryLocation returns the DataFileDirectoryLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetDataFileDirectoryLocation() string {
	if o == nil || IsNil(o.DataFileDirectoryLocation.Get()) {
		var ret string
		return ret
	}
	return *o.DataFileDirectoryLocation.Get()
}

// GetDataFileDirectoryLocationOk returns a tuple with the DataFileDirectoryLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetDataFileDirectoryLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DataFileDirectoryLocation.Get(), o.DataFileDirectoryLocation.IsSet()
}

// HasDataFileDirectoryLocation returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasDataFileDirectoryLocation() bool {
	if o != nil && o.DataFileDirectoryLocation.IsSet() {
		return true
	}

	return false
}

// SetDataFileDirectoryLocation gets a reference to the given NullableString and assigns it to the DataFileDirectoryLocation field.
func (o *RecoverSqlAppOriginalSourceConfig) SetDataFileDirectoryLocation(v string) {
	o.DataFileDirectoryLocation.Set(&v)
}
// SetDataFileDirectoryLocationNil sets the value for DataFileDirectoryLocation to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetDataFileDirectoryLocationNil() {
	o.DataFileDirectoryLocation.Set(nil)
}

// UnsetDataFileDirectoryLocation ensures that no value is present for DataFileDirectoryLocation, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetDataFileDirectoryLocation() {
	o.DataFileDirectoryLocation.Unset()
}

// GetLogFileDirectoryLocation returns the LogFileDirectoryLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetLogFileDirectoryLocation() string {
	if o == nil || IsNil(o.LogFileDirectoryLocation.Get()) {
		var ret string
		return ret
	}
	return *o.LogFileDirectoryLocation.Get()
}

// GetLogFileDirectoryLocationOk returns a tuple with the LogFileDirectoryLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetLogFileDirectoryLocationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.LogFileDirectoryLocation.Get(), o.LogFileDirectoryLocation.IsSet()
}

// HasLogFileDirectoryLocation returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasLogFileDirectoryLocation() bool {
	if o != nil && o.LogFileDirectoryLocation.IsSet() {
		return true
	}

	return false
}

// SetLogFileDirectoryLocation gets a reference to the given NullableString and assigns it to the LogFileDirectoryLocation field.
func (o *RecoverSqlAppOriginalSourceConfig) SetLogFileDirectoryLocation(v string) {
	o.LogFileDirectoryLocation.Set(&v)
}
// SetLogFileDirectoryLocationNil sets the value for LogFileDirectoryLocation to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetLogFileDirectoryLocationNil() {
	o.LogFileDirectoryLocation.Set(nil)
}

// UnsetLogFileDirectoryLocation ensures that no value is present for LogFileDirectoryLocation, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetLogFileDirectoryLocation() {
	o.LogFileDirectoryLocation.Unset()
}

// GetNewDatabaseName returns the NewDatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetNewDatabaseName() string {
	if o == nil || IsNil(o.NewDatabaseName.Get()) {
		var ret string
		return ret
	}
	return *o.NewDatabaseName.Get()
}

// GetNewDatabaseNameOk returns a tuple with the NewDatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetNewDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NewDatabaseName.Get(), o.NewDatabaseName.IsSet()
}

// HasNewDatabaseName returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasNewDatabaseName() bool {
	if o != nil && o.NewDatabaseName.IsSet() {
		return true
	}

	return false
}

// SetNewDatabaseName gets a reference to the given NullableString and assigns it to the NewDatabaseName field.
func (o *RecoverSqlAppOriginalSourceConfig) SetNewDatabaseName(v string) {
	o.NewDatabaseName.Set(&v)
}
// SetNewDatabaseNameNil sets the value for NewDatabaseName to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetNewDatabaseNameNil() {
	o.NewDatabaseName.Set(nil)
}

// UnsetNewDatabaseName ensures that no value is present for NewDatabaseName, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetNewDatabaseName() {
	o.NewDatabaseName.Unset()
}

// GetKeepCdc returns the KeepCdc field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetKeepCdc() bool {
	if o == nil || IsNil(o.KeepCdc.Get()) {
		var ret bool
		return ret
	}
	return *o.KeepCdc.Get()
}

// GetKeepCdcOk returns a tuple with the KeepCdc field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetKeepCdcOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.KeepCdc.Get(), o.KeepCdc.IsSet()
}

// HasKeepCdc returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasKeepCdc() bool {
	if o != nil && o.KeepCdc.IsSet() {
		return true
	}

	return false
}

// SetKeepCdc gets a reference to the given NullableBool and assigns it to the KeepCdc field.
func (o *RecoverSqlAppOriginalSourceConfig) SetKeepCdc(v bool) {
	o.KeepCdc.Set(&v)
}
// SetKeepCdcNil sets the value for KeepCdc to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetKeepCdcNil() {
	o.KeepCdc.Set(nil)
}

// UnsetKeepCdc ensures that no value is present for KeepCdc, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetKeepCdc() {
	o.KeepCdc.Unset()
}

// GetMultiStageRestoreOptions returns the MultiStageRestoreOptions field value if set, zero value otherwise.
func (o *RecoverSqlAppOriginalSourceConfig) GetMultiStageRestoreOptions() MultiStageRestoreOptions {
	if o == nil || IsNil(o.MultiStageRestoreOptions) {
		var ret MultiStageRestoreOptions
		return ret
	}
	return *o.MultiStageRestoreOptions
}

// GetMultiStageRestoreOptionsOk returns a tuple with the MultiStageRestoreOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverSqlAppOriginalSourceConfig) GetMultiStageRestoreOptionsOk() (*MultiStageRestoreOptions, bool) {
	if o == nil || IsNil(o.MultiStageRestoreOptions) {
		return nil, false
	}
	return o.MultiStageRestoreOptions, true
}

// HasMultiStageRestoreOptions returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasMultiStageRestoreOptions() bool {
	if o != nil && !IsNil(o.MultiStageRestoreOptions) {
		return true
	}

	return false
}

// SetMultiStageRestoreOptions gets a reference to the given MultiStageRestoreOptions and assigns it to the MultiStageRestoreOptions field.
func (o *RecoverSqlAppOriginalSourceConfig) SetMultiStageRestoreOptions(v MultiStageRestoreOptions) {
	o.MultiStageRestoreOptions = &v
}

// GetNativeLogRecoveryWithClause returns the NativeLogRecoveryWithClause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetNativeLogRecoveryWithClause() string {
	if o == nil || IsNil(o.NativeLogRecoveryWithClause.Get()) {
		var ret string
		return ret
	}
	return *o.NativeLogRecoveryWithClause.Get()
}

// GetNativeLogRecoveryWithClauseOk returns a tuple with the NativeLogRecoveryWithClause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetNativeLogRecoveryWithClauseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NativeLogRecoveryWithClause.Get(), o.NativeLogRecoveryWithClause.IsSet()
}

// HasNativeLogRecoveryWithClause returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasNativeLogRecoveryWithClause() bool {
	if o != nil && o.NativeLogRecoveryWithClause.IsSet() {
		return true
	}

	return false
}

// SetNativeLogRecoveryWithClause gets a reference to the given NullableString and assigns it to the NativeLogRecoveryWithClause field.
func (o *RecoverSqlAppOriginalSourceConfig) SetNativeLogRecoveryWithClause(v string) {
	o.NativeLogRecoveryWithClause.Set(&v)
}
// SetNativeLogRecoveryWithClauseNil sets the value for NativeLogRecoveryWithClause to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetNativeLogRecoveryWithClauseNil() {
	o.NativeLogRecoveryWithClause.Set(nil)
}

// UnsetNativeLogRecoveryWithClause ensures that no value is present for NativeLogRecoveryWithClause, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetNativeLogRecoveryWithClause() {
	o.NativeLogRecoveryWithClause.Unset()
}

// GetNativeRecoveryWithClause returns the NativeRecoveryWithClause field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetNativeRecoveryWithClause() string {
	if o == nil || IsNil(o.NativeRecoveryWithClause.Get()) {
		var ret string
		return ret
	}
	return *o.NativeRecoveryWithClause.Get()
}

// GetNativeRecoveryWithClauseOk returns a tuple with the NativeRecoveryWithClause field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetNativeRecoveryWithClauseOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.NativeRecoveryWithClause.Get(), o.NativeRecoveryWithClause.IsSet()
}

// HasNativeRecoveryWithClause returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasNativeRecoveryWithClause() bool {
	if o != nil && o.NativeRecoveryWithClause.IsSet() {
		return true
	}

	return false
}

// SetNativeRecoveryWithClause gets a reference to the given NullableString and assigns it to the NativeRecoveryWithClause field.
func (o *RecoverSqlAppOriginalSourceConfig) SetNativeRecoveryWithClause(v string) {
	o.NativeRecoveryWithClause.Set(&v)
}
// SetNativeRecoveryWithClauseNil sets the value for NativeRecoveryWithClause to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetNativeRecoveryWithClauseNil() {
	o.NativeRecoveryWithClause.Set(nil)
}

// UnsetNativeRecoveryWithClause ensures that no value is present for NativeRecoveryWithClause, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetNativeRecoveryWithClause() {
	o.NativeRecoveryWithClause.Unset()
}

// GetOverwritingPolicy returns the OverwritingPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetOverwritingPolicy() string {
	if o == nil || IsNil(o.OverwritingPolicy.Get()) {
		var ret string
		return ret
	}
	return *o.OverwritingPolicy.Get()
}

// GetOverwritingPolicyOk returns a tuple with the OverwritingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetOverwritingPolicyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverwritingPolicy.Get(), o.OverwritingPolicy.IsSet()
}

// HasOverwritingPolicy returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasOverwritingPolicy() bool {
	if o != nil && o.OverwritingPolicy.IsSet() {
		return true
	}

	return false
}

// SetOverwritingPolicy gets a reference to the given NullableString and assigns it to the OverwritingPolicy field.
func (o *RecoverSqlAppOriginalSourceConfig) SetOverwritingPolicy(v string) {
	o.OverwritingPolicy.Set(&v)
}
// SetOverwritingPolicyNil sets the value for OverwritingPolicy to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetOverwritingPolicyNil() {
	o.OverwritingPolicy.Set(nil)
}

// UnsetOverwritingPolicy ensures that no value is present for OverwritingPolicy, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetOverwritingPolicy() {
	o.OverwritingPolicy.Unset()
}

// GetReplayEntireLastLog returns the ReplayEntireLastLog field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetReplayEntireLastLog() bool {
	if o == nil || IsNil(o.ReplayEntireLastLog.Get()) {
		var ret bool
		return ret
	}
	return *o.ReplayEntireLastLog.Get()
}

// GetReplayEntireLastLogOk returns a tuple with the ReplayEntireLastLog field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetReplayEntireLastLogOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ReplayEntireLastLog.Get(), o.ReplayEntireLastLog.IsSet()
}

// HasReplayEntireLastLog returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasReplayEntireLastLog() bool {
	if o != nil && o.ReplayEntireLastLog.IsSet() {
		return true
	}

	return false
}

// SetReplayEntireLastLog gets a reference to the given NullableBool and assigns it to the ReplayEntireLastLog field.
func (o *RecoverSqlAppOriginalSourceConfig) SetReplayEntireLastLog(v bool) {
	o.ReplayEntireLastLog.Set(&v)
}
// SetReplayEntireLastLogNil sets the value for ReplayEntireLastLog to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetReplayEntireLastLogNil() {
	o.ReplayEntireLastLog.Set(nil)
}

// UnsetReplayEntireLastLog ensures that no value is present for ReplayEntireLastLog, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetReplayEntireLastLog() {
	o.ReplayEntireLastLog.Unset()
}

// GetRestoreTimeUsecs returns the RestoreTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetRestoreTimeUsecs() int64 {
	if o == nil || IsNil(o.RestoreTimeUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.RestoreTimeUsecs.Get()
}

// GetRestoreTimeUsecsOk returns a tuple with the RestoreTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetRestoreTimeUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.RestoreTimeUsecs.Get(), o.RestoreTimeUsecs.IsSet()
}

// HasRestoreTimeUsecs returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasRestoreTimeUsecs() bool {
	if o != nil && o.RestoreTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRestoreTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RestoreTimeUsecs field.
func (o *RecoverSqlAppOriginalSourceConfig) SetRestoreTimeUsecs(v int64) {
	o.RestoreTimeUsecs.Set(&v)
}
// SetRestoreTimeUsecsNil sets the value for RestoreTimeUsecs to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetRestoreTimeUsecsNil() {
	o.RestoreTimeUsecs.Set(nil)
}

// UnsetRestoreTimeUsecs ensures that no value is present for RestoreTimeUsecs, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetRestoreTimeUsecs() {
	o.RestoreTimeUsecs.Unset()
}

// GetSecondaryDataFilesDirList returns the SecondaryDataFilesDirList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetSecondaryDataFilesDirList() []FilenamePatternToDirectory {
	if o == nil {
		var ret []FilenamePatternToDirectory
		return ret
	}
	return o.SecondaryDataFilesDirList
}

// GetSecondaryDataFilesDirListOk returns a tuple with the SecondaryDataFilesDirList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetSecondaryDataFilesDirListOk() ([]FilenamePatternToDirectory, bool) {
	if o == nil || IsNil(o.SecondaryDataFilesDirList) {
		return nil, false
	}
	return o.SecondaryDataFilesDirList, true
}

// HasSecondaryDataFilesDirList returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasSecondaryDataFilesDirList() bool {
	if o != nil && !IsNil(o.SecondaryDataFilesDirList) {
		return true
	}

	return false
}

// SetSecondaryDataFilesDirList gets a reference to the given []FilenamePatternToDirectory and assigns it to the SecondaryDataFilesDirList field.
func (o *RecoverSqlAppOriginalSourceConfig) SetSecondaryDataFilesDirList(v []FilenamePatternToDirectory) {
	o.SecondaryDataFilesDirList = v
}

// GetWithNoRecovery returns the WithNoRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverSqlAppOriginalSourceConfig) GetWithNoRecovery() bool {
	if o == nil || IsNil(o.WithNoRecovery.Get()) {
		var ret bool
		return ret
	}
	return *o.WithNoRecovery.Get()
}

// GetWithNoRecoveryOk returns a tuple with the WithNoRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverSqlAppOriginalSourceConfig) GetWithNoRecoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.WithNoRecovery.Get(), o.WithNoRecovery.IsSet()
}

// HasWithNoRecovery returns a boolean if a field has been set.
func (o *RecoverSqlAppOriginalSourceConfig) HasWithNoRecovery() bool {
	if o != nil && o.WithNoRecovery.IsSet() {
		return true
	}

	return false
}

// SetWithNoRecovery gets a reference to the given NullableBool and assigns it to the WithNoRecovery field.
func (o *RecoverSqlAppOriginalSourceConfig) SetWithNoRecovery(v bool) {
	o.WithNoRecovery.Set(&v)
}
// SetWithNoRecoveryNil sets the value for WithNoRecovery to be an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) SetWithNoRecoveryNil() {
	o.WithNoRecovery.Set(nil)
}

// UnsetWithNoRecovery ensures that no value is present for WithNoRecovery, not even an explicit nil
func (o *RecoverSqlAppOriginalSourceConfig) UnsetWithNoRecovery() {
	o.WithNoRecovery.Unset()
}

func (o RecoverSqlAppOriginalSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverSqlAppOriginalSourceConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.CaptureTailLogs.IsSet() {
		toSerialize["captureTailLogs"] = o.CaptureTailLogs.Get()
	}
	if o.DataFileDirectoryLocation.IsSet() {
		toSerialize["dataFileDirectoryLocation"] = o.DataFileDirectoryLocation.Get()
	}
	if o.LogFileDirectoryLocation.IsSet() {
		toSerialize["logFileDirectoryLocation"] = o.LogFileDirectoryLocation.Get()
	}
	if o.NewDatabaseName.IsSet() {
		toSerialize["newDatabaseName"] = o.NewDatabaseName.Get()
	}
	if o.KeepCdc.IsSet() {
		toSerialize["keepCdc"] = o.KeepCdc.Get()
	}
	if !IsNil(o.MultiStageRestoreOptions) {
		toSerialize["multiStageRestoreOptions"] = o.MultiStageRestoreOptions
	}
	if o.NativeLogRecoveryWithClause.IsSet() {
		toSerialize["nativeLogRecoveryWithClause"] = o.NativeLogRecoveryWithClause.Get()
	}
	if o.NativeRecoveryWithClause.IsSet() {
		toSerialize["nativeRecoveryWithClause"] = o.NativeRecoveryWithClause.Get()
	}
	if o.OverwritingPolicy.IsSet() {
		toSerialize["overwritingPolicy"] = o.OverwritingPolicy.Get()
	}
	if o.ReplayEntireLastLog.IsSet() {
		toSerialize["replayEntireLastLog"] = o.ReplayEntireLastLog.Get()
	}
	if o.RestoreTimeUsecs.IsSet() {
		toSerialize["restoreTimeUsecs"] = o.RestoreTimeUsecs.Get()
	}
	if o.SecondaryDataFilesDirList != nil {
		toSerialize["secondaryDataFilesDirList"] = o.SecondaryDataFilesDirList
	}
	if o.WithNoRecovery.IsSet() {
		toSerialize["withNoRecovery"] = o.WithNoRecovery.Get()
	}
	return toSerialize, nil
}

type NullableRecoverSqlAppOriginalSourceConfig struct {
	value *RecoverSqlAppOriginalSourceConfig
	isSet bool
}

func (v NullableRecoverSqlAppOriginalSourceConfig) Get() *RecoverSqlAppOriginalSourceConfig {
	return v.value
}

func (v *NullableRecoverSqlAppOriginalSourceConfig) Set(val *RecoverSqlAppOriginalSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverSqlAppOriginalSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverSqlAppOriginalSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverSqlAppOriginalSourceConfig(val *RecoverSqlAppOriginalSourceConfig) *NullableRecoverSqlAppOriginalSourceConfig {
	return &NullableRecoverSqlAppOriginalSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverSqlAppOriginalSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverSqlAppOriginalSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


