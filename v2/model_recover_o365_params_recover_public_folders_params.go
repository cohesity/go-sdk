/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverO365ParamsRecoverPublicFoldersParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverO365ParamsRecoverPublicFoldersParams{}

// RecoverO365ParamsRecoverPublicFoldersParams Specifies the parameters to recover Office 365 Public Folders.
type RecoverO365ParamsRecoverPublicFoldersParams struct {
	// Specifies whether to continue recovering other Public Folders if one of Public Folder failed to recover. Default value is false.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies a list of RootPublicFolder params associated with the objects to recover.
	RootPublicFolders []RootPublicFolderParam `json:"rootPublicFolders"`
	// Specifies the path to the target folder.
	TargetFolderPath NullableString `json:"targetFolderPath,omitempty"`
	TargetRootPublicFolder NullableRecoverPublicFoldersParamsTargetRootPublicFolder `json:"targetRootPublicFolder,omitempty"`
}

type _RecoverO365ParamsRecoverPublicFoldersParams RecoverO365ParamsRecoverPublicFoldersParams

// NewRecoverO365ParamsRecoverPublicFoldersParams instantiates a new RecoverO365ParamsRecoverPublicFoldersParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverO365ParamsRecoverPublicFoldersParams(rootPublicFolders []RootPublicFolderParam) *RecoverO365ParamsRecoverPublicFoldersParams {
	this := RecoverO365ParamsRecoverPublicFoldersParams{}
	this.RootPublicFolders = rootPublicFolders
	return &this
}

// NewRecoverO365ParamsRecoverPublicFoldersParamsWithDefaults instantiates a new RecoverO365ParamsRecoverPublicFoldersParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverO365ParamsRecoverPublicFoldersParamsWithDefaults() *RecoverO365ParamsRecoverPublicFoldersParams {
	this := RecoverO365ParamsRecoverPublicFoldersParams{}
	return &this
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverPublicFoldersParams) GetContinueOnError() bool {
	if o == nil || IsNil(o.ContinueOnError.Get()) {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverPublicFoldersParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverPublicFoldersParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *RecoverO365ParamsRecoverPublicFoldersParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *RecoverO365ParamsRecoverPublicFoldersParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *RecoverO365ParamsRecoverPublicFoldersParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetRootPublicFolders returns the RootPublicFolders field value
// If the value is explicit nil, the zero value for []RootPublicFolderParam will be returned
func (o *RecoverO365ParamsRecoverPublicFoldersParams) GetRootPublicFolders() []RootPublicFolderParam {
	if o == nil {
		var ret []RootPublicFolderParam
		return ret
	}

	return o.RootPublicFolders
}

// GetRootPublicFoldersOk returns a tuple with the RootPublicFolders field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverPublicFoldersParams) GetRootPublicFoldersOk() ([]RootPublicFolderParam, bool) {
	if o == nil || IsNil(o.RootPublicFolders) {
		return nil, false
	}
	return o.RootPublicFolders, true
}

// SetRootPublicFolders sets field value
func (o *RecoverO365ParamsRecoverPublicFoldersParams) SetRootPublicFolders(v []RootPublicFolderParam) {
	o.RootPublicFolders = v
}

// GetTargetFolderPath returns the TargetFolderPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverPublicFoldersParams) GetTargetFolderPath() string {
	if o == nil || IsNil(o.TargetFolderPath.Get()) {
		var ret string
		return ret
	}
	return *o.TargetFolderPath.Get()
}

// GetTargetFolderPathOk returns a tuple with the TargetFolderPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverPublicFoldersParams) GetTargetFolderPathOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetFolderPath.Get(), o.TargetFolderPath.IsSet()
}

// HasTargetFolderPath returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverPublicFoldersParams) HasTargetFolderPath() bool {
	if o != nil && o.TargetFolderPath.IsSet() {
		return true
	}

	return false
}

// SetTargetFolderPath gets a reference to the given NullableString and assigns it to the TargetFolderPath field.
func (o *RecoverO365ParamsRecoverPublicFoldersParams) SetTargetFolderPath(v string) {
	o.TargetFolderPath.Set(&v)
}
// SetTargetFolderPathNil sets the value for TargetFolderPath to be an explicit nil
func (o *RecoverO365ParamsRecoverPublicFoldersParams) SetTargetFolderPathNil() {
	o.TargetFolderPath.Set(nil)
}

// UnsetTargetFolderPath ensures that no value is present for TargetFolderPath, not even an explicit nil
func (o *RecoverO365ParamsRecoverPublicFoldersParams) UnsetTargetFolderPath() {
	o.TargetFolderPath.Unset()
}

// GetTargetRootPublicFolder returns the TargetRootPublicFolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverO365ParamsRecoverPublicFoldersParams) GetTargetRootPublicFolder() RecoverPublicFoldersParamsTargetRootPublicFolder {
	if o == nil || IsNil(o.TargetRootPublicFolder.Get()) {
		var ret RecoverPublicFoldersParamsTargetRootPublicFolder
		return ret
	}
	return *o.TargetRootPublicFolder.Get()
}

// GetTargetRootPublicFolderOk returns a tuple with the TargetRootPublicFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverO365ParamsRecoverPublicFoldersParams) GetTargetRootPublicFolderOk() (*RecoverPublicFoldersParamsTargetRootPublicFolder, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetRootPublicFolder.Get(), o.TargetRootPublicFolder.IsSet()
}

// HasTargetRootPublicFolder returns a boolean if a field has been set.
func (o *RecoverO365ParamsRecoverPublicFoldersParams) HasTargetRootPublicFolder() bool {
	if o != nil && o.TargetRootPublicFolder.IsSet() {
		return true
	}

	return false
}

// SetTargetRootPublicFolder gets a reference to the given NullableRecoverPublicFoldersParamsTargetRootPublicFolder and assigns it to the TargetRootPublicFolder field.
func (o *RecoverO365ParamsRecoverPublicFoldersParams) SetTargetRootPublicFolder(v RecoverPublicFoldersParamsTargetRootPublicFolder) {
	o.TargetRootPublicFolder.Set(&v)
}
// SetTargetRootPublicFolderNil sets the value for TargetRootPublicFolder to be an explicit nil
func (o *RecoverO365ParamsRecoverPublicFoldersParams) SetTargetRootPublicFolderNil() {
	o.TargetRootPublicFolder.Set(nil)
}

// UnsetTargetRootPublicFolder ensures that no value is present for TargetRootPublicFolder, not even an explicit nil
func (o *RecoverO365ParamsRecoverPublicFoldersParams) UnsetTargetRootPublicFolder() {
	o.TargetRootPublicFolder.Unset()
}

func (o RecoverO365ParamsRecoverPublicFoldersParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverO365ParamsRecoverPublicFoldersParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.RootPublicFolders != nil {
		toSerialize["rootPublicFolders"] = o.RootPublicFolders
	}
	if o.TargetFolderPath.IsSet() {
		toSerialize["targetFolderPath"] = o.TargetFolderPath.Get()
	}
	if o.TargetRootPublicFolder.IsSet() {
		toSerialize["targetRootPublicFolder"] = o.TargetRootPublicFolder.Get()
	}
	return toSerialize, nil
}

func (o *RecoverO365ParamsRecoverPublicFoldersParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"rootPublicFolders",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverO365ParamsRecoverPublicFoldersParams := _RecoverO365ParamsRecoverPublicFoldersParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverO365ParamsRecoverPublicFoldersParams)

	if err != nil {
		return err
	}

	*o = RecoverO365ParamsRecoverPublicFoldersParams(varRecoverO365ParamsRecoverPublicFoldersParams)

	return err
}

type NullableRecoverO365ParamsRecoverPublicFoldersParams struct {
	value *RecoverO365ParamsRecoverPublicFoldersParams
	isSet bool
}

func (v NullableRecoverO365ParamsRecoverPublicFoldersParams) Get() *RecoverO365ParamsRecoverPublicFoldersParams {
	return v.value
}

func (v *NullableRecoverO365ParamsRecoverPublicFoldersParams) Set(val *RecoverO365ParamsRecoverPublicFoldersParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverO365ParamsRecoverPublicFoldersParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverO365ParamsRecoverPublicFoldersParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverO365ParamsRecoverPublicFoldersParams(val *RecoverO365ParamsRecoverPublicFoldersParams) *NullableRecoverO365ParamsRecoverPublicFoldersParams {
	return &NullableRecoverO365ParamsRecoverPublicFoldersParams{value: val, isSet: true}
}

func (v NullableRecoverO365ParamsRecoverPublicFoldersParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverO365ParamsRecoverPublicFoldersParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


