/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ViewStatsInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ViewStatsInfo{}

// ViewStatsInfo Specifies the View stats.
type ViewStatsInfo struct {
	// Specifies the protocols of this view.
	Protocols []string `json:"protocols,omitempty"`
	// Specifies the list of View stats.
	Stats []ViewStatsInfoDetails `json:"stats,omitempty"`
	// Specifies the view Id.
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// Specifies the view name.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewViewStatsInfo instantiates a new ViewStatsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewStatsInfo() *ViewStatsInfo {
	this := ViewStatsInfo{}
	return &this
}

// NewViewStatsInfoWithDefaults instantiates a new ViewStatsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewStatsInfoWithDefaults() *ViewStatsInfo {
	this := ViewStatsInfo{}
	return &this
}

// GetProtocols returns the Protocols field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsInfo) GetProtocols() []string {
	if o == nil {
		var ret []string
		return ret
	}
	return o.Protocols
}

// GetProtocolsOk returns a tuple with the Protocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsInfo) GetProtocolsOk() ([]string, bool) {
	if o == nil || IsNil(o.Protocols) {
		return nil, false
	}
	return o.Protocols, true
}

// HasProtocols returns a boolean if a field has been set.
func (o *ViewStatsInfo) HasProtocols() bool {
	if o != nil && !IsNil(o.Protocols) {
		return true
	}

	return false
}

// SetProtocols gets a reference to the given []string and assigns it to the Protocols field.
func (o *ViewStatsInfo) SetProtocols(v []string) {
	o.Protocols = v
}

// GetStats returns the Stats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsInfo) GetStats() []ViewStatsInfoDetails {
	if o == nil {
		var ret []ViewStatsInfoDetails
		return ret
	}
	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsInfo) GetStatsOk() ([]ViewStatsInfoDetails, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ViewStatsInfo) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given []ViewStatsInfoDetails and assigns it to the Stats field.
func (o *ViewStatsInfo) SetStats(v []ViewStatsInfoDetails) {
	o.Stats = v
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsInfo) GetViewId() int64 {
	if o == nil || IsNil(o.ViewId.Get()) {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsInfo) GetViewIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *ViewStatsInfo) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *ViewStatsInfo) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *ViewStatsInfo) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *ViewStatsInfo) UnsetViewId() {
	o.ViewId.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsInfo) GetViewName() string {
	if o == nil || IsNil(o.ViewName.Get()) {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsInfo) GetViewNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *ViewStatsInfo) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *ViewStatsInfo) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *ViewStatsInfo) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *ViewStatsInfo) UnsetViewName() {
	o.ViewName.Unset()
}

func (o ViewStatsInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ViewStatsInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Protocols != nil {
		toSerialize["protocols"] = o.Protocols
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return toSerialize, nil
}

type NullableViewStatsInfo struct {
	value *ViewStatsInfo
	isSet bool
}

func (v NullableViewStatsInfo) Get() *ViewStatsInfo {
	return v.value
}

func (v *NullableViewStatsInfo) Set(val *ViewStatsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableViewStatsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableViewStatsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewStatsInfo(val *ViewStatsInfo) *NullableViewStatsInfo {
	return &NullableViewStatsInfo{value: val, isSet: true}
}

func (v NullableViewStatsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewStatsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


