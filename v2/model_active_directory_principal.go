/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ActiveDirectoryPrincipal type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectoryPrincipal{}

// ActiveDirectoryPrincipal Specifies an active directory principal fields.
type ActiveDirectoryPrincipal struct {
	// Specifies the domain name to which the principal belongs to
	DomainName NullableString `json:"domainName,omitempty"`
	// Specifies the full name of the principal.
	FullName NullableString `json:"fullName,omitempty"`
	// Specifies the name of the principal which is being added.
	Name *string `json:"name,omitempty"`
	// Specifies the type of principal, a user or a group
	ObjectClass *string `json:"objectClass,omitempty"`
	// Specifies the unique SID of the principal.
	Sid NullableString `json:"sid,omitempty"`
}

// NewActiveDirectoryPrincipal instantiates a new ActiveDirectoryPrincipal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryPrincipal() *ActiveDirectoryPrincipal {
	this := ActiveDirectoryPrincipal{}
	return &this
}

// NewActiveDirectoryPrincipalWithDefaults instantiates a new ActiveDirectoryPrincipal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryPrincipalWithDefaults() *ActiveDirectoryPrincipal {
	this := ActiveDirectoryPrincipal{}
	return &this
}

// GetDomainName returns the DomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipal) GetDomainName() string {
	if o == nil || IsNil(o.DomainName.Get()) {
		var ret string
		return ret
	}
	return *o.DomainName.Get()
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipal) GetDomainNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DomainName.Get(), o.DomainName.IsSet()
}

// HasDomainName returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipal) HasDomainName() bool {
	if o != nil && o.DomainName.IsSet() {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given NullableString and assigns it to the DomainName field.
func (o *ActiveDirectoryPrincipal) SetDomainName(v string) {
	o.DomainName.Set(&v)
}
// SetDomainNameNil sets the value for DomainName to be an explicit nil
func (o *ActiveDirectoryPrincipal) SetDomainNameNil() {
	o.DomainName.Set(nil)
}

// UnsetDomainName ensures that no value is present for DomainName, not even an explicit nil
func (o *ActiveDirectoryPrincipal) UnsetDomainName() {
	o.DomainName.Unset()
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipal) GetFullName() string {
	if o == nil || IsNil(o.FullName.Get()) {
		var ret string
		return ret
	}
	return *o.FullName.Get()
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipal) GetFullNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FullName.Get(), o.FullName.IsSet()
}

// HasFullName returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipal) HasFullName() bool {
	if o != nil && o.FullName.IsSet() {
		return true
	}

	return false
}

// SetFullName gets a reference to the given NullableString and assigns it to the FullName field.
func (o *ActiveDirectoryPrincipal) SetFullName(v string) {
	o.FullName.Set(&v)
}
// SetFullNameNil sets the value for FullName to be an explicit nil
func (o *ActiveDirectoryPrincipal) SetFullNameNil() {
	o.FullName.Set(nil)
}

// UnsetFullName ensures that no value is present for FullName, not even an explicit nil
func (o *ActiveDirectoryPrincipal) UnsetFullName() {
	o.FullName.Unset()
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ActiveDirectoryPrincipal) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPrincipal) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipal) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ActiveDirectoryPrincipal) SetName(v string) {
	o.Name = &v
}

// GetObjectClass returns the ObjectClass field value if set, zero value otherwise.
func (o *ActiveDirectoryPrincipal) GetObjectClass() string {
	if o == nil || IsNil(o.ObjectClass) {
		var ret string
		return ret
	}
	return *o.ObjectClass
}

// GetObjectClassOk returns a tuple with the ObjectClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ActiveDirectoryPrincipal) GetObjectClassOk() (*string, bool) {
	if o == nil || IsNil(o.ObjectClass) {
		return nil, false
	}
	return o.ObjectClass, true
}

// HasObjectClass returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipal) HasObjectClass() bool {
	if o != nil && !IsNil(o.ObjectClass) {
		return true
	}

	return false
}

// SetObjectClass gets a reference to the given string and assigns it to the ObjectClass field.
func (o *ActiveDirectoryPrincipal) SetObjectClass(v string) {
	o.ObjectClass = &v
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipal) GetSid() string {
	if o == nil || IsNil(o.Sid.Get()) {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipal) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipal) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *ActiveDirectoryPrincipal) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *ActiveDirectoryPrincipal) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *ActiveDirectoryPrincipal) UnsetSid() {
	o.Sid.Unset()
}

func (o ActiveDirectoryPrincipal) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectoryPrincipal) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.DomainName.IsSet() {
		toSerialize["domainName"] = o.DomainName.Get()
	}
	if o.FullName.IsSet() {
		toSerialize["fullName"] = o.FullName.Get()
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ObjectClass) {
		toSerialize["objectClass"] = o.ObjectClass
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	return toSerialize, nil
}

type NullableActiveDirectoryPrincipal struct {
	value *ActiveDirectoryPrincipal
	isSet bool
}

func (v NullableActiveDirectoryPrincipal) Get() *ActiveDirectoryPrincipal {
	return v.value
}

func (v *NullableActiveDirectoryPrincipal) Set(val *ActiveDirectoryPrincipal) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryPrincipal) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryPrincipal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryPrincipal(val *ActiveDirectoryPrincipal) *NullableActiveDirectoryPrincipal {
	return &NullableActiveDirectoryPrincipal{value: val, isSet: true}
}

func (v NullableActiveDirectoryPrincipal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryPrincipal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


