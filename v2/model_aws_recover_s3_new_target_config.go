/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AwsRecoverS3NewTargetConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsRecoverS3NewTargetConfig{}

// AwsRecoverS3NewTargetConfig Specifies the configuration for recovering S3 objects and buckets to a new target.
type AwsRecoverS3NewTargetConfig struct {
	Bucket NullableAwsRecoverS3NewTargetConfigBucket `json:"bucket"`
	Region NullableAwsRecoverS3NewTargetConfigRegion `json:"region"`
	Source NullableAwsRecoverS3NewTargetConfigSource `json:"source"`
}

type _AwsRecoverS3NewTargetConfig AwsRecoverS3NewTargetConfig

// NewAwsRecoverS3NewTargetConfig instantiates a new AwsRecoverS3NewTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsRecoverS3NewTargetConfig(bucket NullableAwsRecoverS3NewTargetConfigBucket, region NullableAwsRecoverS3NewTargetConfigRegion, source NullableAwsRecoverS3NewTargetConfigSource) *AwsRecoverS3NewTargetConfig {
	this := AwsRecoverS3NewTargetConfig{}
	this.Bucket = bucket
	this.Region = region
	this.Source = source
	return &this
}

// NewAwsRecoverS3NewTargetConfigWithDefaults instantiates a new AwsRecoverS3NewTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsRecoverS3NewTargetConfigWithDefaults() *AwsRecoverS3NewTargetConfig {
	this := AwsRecoverS3NewTargetConfig{}
	return &this
}

// GetBucket returns the Bucket field value
// If the value is explicit nil, the zero value for AwsRecoverS3NewTargetConfigBucket will be returned
func (o *AwsRecoverS3NewTargetConfig) GetBucket() AwsRecoverS3NewTargetConfigBucket {
	if o == nil || o.Bucket.Get() == nil {
		var ret AwsRecoverS3NewTargetConfigBucket
		return ret
	}

	return *o.Bucket.Get()
}

// GetBucketOk returns a tuple with the Bucket field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsRecoverS3NewTargetConfig) GetBucketOk() (*AwsRecoverS3NewTargetConfigBucket, bool) {
	if o == nil {
		return nil, false
	}
	return o.Bucket.Get(), o.Bucket.IsSet()
}

// SetBucket sets field value
func (o *AwsRecoverS3NewTargetConfig) SetBucket(v AwsRecoverS3NewTargetConfigBucket) {
	o.Bucket.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for AwsRecoverS3NewTargetConfigRegion will be returned
func (o *AwsRecoverS3NewTargetConfig) GetRegion() AwsRecoverS3NewTargetConfigRegion {
	if o == nil || o.Region.Get() == nil {
		var ret AwsRecoverS3NewTargetConfigRegion
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsRecoverS3NewTargetConfig) GetRegionOk() (*AwsRecoverS3NewTargetConfigRegion, bool) {
	if o == nil {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *AwsRecoverS3NewTargetConfig) SetRegion(v AwsRecoverS3NewTargetConfigRegion) {
	o.Region.Set(&v)
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for AwsRecoverS3NewTargetConfigSource will be returned
func (o *AwsRecoverS3NewTargetConfig) GetSource() AwsRecoverS3NewTargetConfigSource {
	if o == nil || o.Source.Get() == nil {
		var ret AwsRecoverS3NewTargetConfigSource
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsRecoverS3NewTargetConfig) GetSourceOk() (*AwsRecoverS3NewTargetConfigSource, bool) {
	if o == nil {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *AwsRecoverS3NewTargetConfig) SetSource(v AwsRecoverS3NewTargetConfigSource) {
	o.Source.Set(&v)
}

func (o AwsRecoverS3NewTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsRecoverS3NewTargetConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["bucket"] = o.Bucket.Get()
	toSerialize["region"] = o.Region.Get()
	toSerialize["source"] = o.Source.Get()
	return toSerialize, nil
}

func (o *AwsRecoverS3NewTargetConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"bucket",
		"region",
		"source",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAwsRecoverS3NewTargetConfig := _AwsRecoverS3NewTargetConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAwsRecoverS3NewTargetConfig)

	if err != nil {
		return err
	}

	*o = AwsRecoverS3NewTargetConfig(varAwsRecoverS3NewTargetConfig)

	return err
}

type NullableAwsRecoverS3NewTargetConfig struct {
	value *AwsRecoverS3NewTargetConfig
	isSet bool
}

func (v NullableAwsRecoverS3NewTargetConfig) Get() *AwsRecoverS3NewTargetConfig {
	return v.value
}

func (v *NullableAwsRecoverS3NewTargetConfig) Set(val *AwsRecoverS3NewTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsRecoverS3NewTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsRecoverS3NewTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsRecoverS3NewTargetConfig(val *AwsRecoverS3NewTargetConfig) *NullableAwsRecoverS3NewTargetConfig {
	return &NullableAwsRecoverS3NewTargetConfig{value: val, isSet: true}
}

func (v NullableAwsRecoverS3NewTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsRecoverS3NewTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


