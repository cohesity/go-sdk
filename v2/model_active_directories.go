/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ActiveDirectories type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ActiveDirectories{}

// ActiveDirectories Response of Active Directories.
type ActiveDirectories struct {
	// A list of Active Directories.
	ActiveDirectories []ActiveDirectory `json:"activeDirectories,omitempty"`
}

// NewActiveDirectories instantiates a new ActiveDirectories object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectories() *ActiveDirectories {
	this := ActiveDirectories{}
	return &this
}

// NewActiveDirectoriesWithDefaults instantiates a new ActiveDirectories object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoriesWithDefaults() *ActiveDirectories {
	this := ActiveDirectories{}
	return &this
}

// GetActiveDirectories returns the ActiveDirectories field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectories) GetActiveDirectories() []ActiveDirectory {
	if o == nil {
		var ret []ActiveDirectory
		return ret
	}
	return o.ActiveDirectories
}

// GetActiveDirectoriesOk returns a tuple with the ActiveDirectories field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectories) GetActiveDirectoriesOk() ([]ActiveDirectory, bool) {
	if o == nil || IsNil(o.ActiveDirectories) {
		return nil, false
	}
	return o.ActiveDirectories, true
}

// HasActiveDirectories returns a boolean if a field has been set.
func (o *ActiveDirectories) HasActiveDirectories() bool {
	if o != nil && !IsNil(o.ActiveDirectories) {
		return true
	}

	return false
}

// SetActiveDirectories gets a reference to the given []ActiveDirectory and assigns it to the ActiveDirectories field.
func (o *ActiveDirectories) SetActiveDirectories(v []ActiveDirectory) {
	o.ActiveDirectories = v
}

func (o ActiveDirectories) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ActiveDirectories) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ActiveDirectories != nil {
		toSerialize["activeDirectories"] = o.ActiveDirectories
	}
	return toSerialize, nil
}

type NullableActiveDirectories struct {
	value *ActiveDirectories
	isSet bool
}

func (v NullableActiveDirectories) Get() *ActiveDirectories {
	return v.value
}

func (v *NullableActiveDirectories) Set(val *ActiveDirectories) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectories) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectories) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectories(val *ActiveDirectories) *NullableActiveDirectories {
	return &NullableActiveDirectories{value: val, isSet: true}
}

func (v NullableActiveDirectories) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectories) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


