/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the RestoreVMwareVMParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RestoreVMwareVMParams{}

// RestoreVMwareVMParams Specifies the parameters for a VMware recovery target.
type RestoreVMwareVMParams struct {
	// Specifies whether to attempt differential restore.
	AttemptDifferentialRestore NullableBool `json:"attemptDifferentialRestore,omitempty"`
	// Specifies Datastore Ids, if the restore is to alternate location.
	DatastoreIds []int64 `json:"datastoreIds,omitempty"`
	// Specifies whether to perform copy recovery or not.
	EnableCopyRecovery NullableBool `json:"enableCopyRecovery,omitempty"`
	// Specifies whether a task in on prem deploy or not.
	IsOnPremDeploy NullableBool `json:"isOnPremDeploy,omitempty"`
	// Specifies whether to overwrite the VM at the target location.
	OverwriteExistingVm NullableBool `json:"overwriteExistingVm,omitempty"`
	// Specifies whether to power off and mark the VM at the target location as deprecated.
	PowerOffAndRenameExistingVm NullableBool `json:"powerOffAndRenameExistingVm,omitempty"`
	// Specifies if the restore is to alternate location.
	ResourcePoolId NullableInt64 `json:"resourcePoolId,omitempty"`
	// Specifies the folder where the restore datastore should be created.
	TargetDataStoreId NullableInt64 `json:"targetDataStoreId,omitempty"`
	// Specifies the folder ID where the VMs should be created.
	TargetVMFolderId NullableInt64 `json:"targetVMFolderId,omitempty"`
}

// NewRestoreVMwareVMParams instantiates a new RestoreVMwareVMParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreVMwareVMParams() *RestoreVMwareVMParams {
	this := RestoreVMwareVMParams{}
	return &this
}

// NewRestoreVMwareVMParamsWithDefaults instantiates a new RestoreVMwareVMParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreVMwareVMParamsWithDefaults() *RestoreVMwareVMParams {
	this := RestoreVMwareVMParams{}
	return &this
}

// GetAttemptDifferentialRestore returns the AttemptDifferentialRestore field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetAttemptDifferentialRestore() bool {
	if o == nil || IsNil(o.AttemptDifferentialRestore.Get()) {
		var ret bool
		return ret
	}
	return *o.AttemptDifferentialRestore.Get()
}

// GetAttemptDifferentialRestoreOk returns a tuple with the AttemptDifferentialRestore field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetAttemptDifferentialRestoreOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.AttemptDifferentialRestore.Get(), o.AttemptDifferentialRestore.IsSet()
}

// HasAttemptDifferentialRestore returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasAttemptDifferentialRestore() bool {
	if o != nil && o.AttemptDifferentialRestore.IsSet() {
		return true
	}

	return false
}

// SetAttemptDifferentialRestore gets a reference to the given NullableBool and assigns it to the AttemptDifferentialRestore field.
func (o *RestoreVMwareVMParams) SetAttemptDifferentialRestore(v bool) {
	o.AttemptDifferentialRestore.Set(&v)
}
// SetAttemptDifferentialRestoreNil sets the value for AttemptDifferentialRestore to be an explicit nil
func (o *RestoreVMwareVMParams) SetAttemptDifferentialRestoreNil() {
	o.AttemptDifferentialRestore.Set(nil)
}

// UnsetAttemptDifferentialRestore ensures that no value is present for AttemptDifferentialRestore, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetAttemptDifferentialRestore() {
	o.AttemptDifferentialRestore.Unset()
}

// GetDatastoreIds returns the DatastoreIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetDatastoreIds() []int64 {
	if o == nil {
		var ret []int64
		return ret
	}
	return o.DatastoreIds
}

// GetDatastoreIdsOk returns a tuple with the DatastoreIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetDatastoreIdsOk() ([]int64, bool) {
	if o == nil || IsNil(o.DatastoreIds) {
		return nil, false
	}
	return o.DatastoreIds, true
}

// HasDatastoreIds returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasDatastoreIds() bool {
	if o != nil && !IsNil(o.DatastoreIds) {
		return true
	}

	return false
}

// SetDatastoreIds gets a reference to the given []int64 and assigns it to the DatastoreIds field.
func (o *RestoreVMwareVMParams) SetDatastoreIds(v []int64) {
	o.DatastoreIds = v
}

// GetEnableCopyRecovery returns the EnableCopyRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetEnableCopyRecovery() bool {
	if o == nil || IsNil(o.EnableCopyRecovery.Get()) {
		var ret bool
		return ret
	}
	return *o.EnableCopyRecovery.Get()
}

// GetEnableCopyRecoveryOk returns a tuple with the EnableCopyRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetEnableCopyRecoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.EnableCopyRecovery.Get(), o.EnableCopyRecovery.IsSet()
}

// HasEnableCopyRecovery returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasEnableCopyRecovery() bool {
	if o != nil && o.EnableCopyRecovery.IsSet() {
		return true
	}

	return false
}

// SetEnableCopyRecovery gets a reference to the given NullableBool and assigns it to the EnableCopyRecovery field.
func (o *RestoreVMwareVMParams) SetEnableCopyRecovery(v bool) {
	o.EnableCopyRecovery.Set(&v)
}
// SetEnableCopyRecoveryNil sets the value for EnableCopyRecovery to be an explicit nil
func (o *RestoreVMwareVMParams) SetEnableCopyRecoveryNil() {
	o.EnableCopyRecovery.Set(nil)
}

// UnsetEnableCopyRecovery ensures that no value is present for EnableCopyRecovery, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetEnableCopyRecovery() {
	o.EnableCopyRecovery.Unset()
}

// GetIsOnPremDeploy returns the IsOnPremDeploy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetIsOnPremDeploy() bool {
	if o == nil || IsNil(o.IsOnPremDeploy.Get()) {
		var ret bool
		return ret
	}
	return *o.IsOnPremDeploy.Get()
}

// GetIsOnPremDeployOk returns a tuple with the IsOnPremDeploy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetIsOnPremDeployOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsOnPremDeploy.Get(), o.IsOnPremDeploy.IsSet()
}

// HasIsOnPremDeploy returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasIsOnPremDeploy() bool {
	if o != nil && o.IsOnPremDeploy.IsSet() {
		return true
	}

	return false
}

// SetIsOnPremDeploy gets a reference to the given NullableBool and assigns it to the IsOnPremDeploy field.
func (o *RestoreVMwareVMParams) SetIsOnPremDeploy(v bool) {
	o.IsOnPremDeploy.Set(&v)
}
// SetIsOnPremDeployNil sets the value for IsOnPremDeploy to be an explicit nil
func (o *RestoreVMwareVMParams) SetIsOnPremDeployNil() {
	o.IsOnPremDeploy.Set(nil)
}

// UnsetIsOnPremDeploy ensures that no value is present for IsOnPremDeploy, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetIsOnPremDeploy() {
	o.IsOnPremDeploy.Unset()
}

// GetOverwriteExistingVm returns the OverwriteExistingVm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetOverwriteExistingVm() bool {
	if o == nil || IsNil(o.OverwriteExistingVm.Get()) {
		var ret bool
		return ret
	}
	return *o.OverwriteExistingVm.Get()
}

// GetOverwriteExistingVmOk returns a tuple with the OverwriteExistingVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetOverwriteExistingVmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.OverwriteExistingVm.Get(), o.OverwriteExistingVm.IsSet()
}

// HasOverwriteExistingVm returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasOverwriteExistingVm() bool {
	if o != nil && o.OverwriteExistingVm.IsSet() {
		return true
	}

	return false
}

// SetOverwriteExistingVm gets a reference to the given NullableBool and assigns it to the OverwriteExistingVm field.
func (o *RestoreVMwareVMParams) SetOverwriteExistingVm(v bool) {
	o.OverwriteExistingVm.Set(&v)
}
// SetOverwriteExistingVmNil sets the value for OverwriteExistingVm to be an explicit nil
func (o *RestoreVMwareVMParams) SetOverwriteExistingVmNil() {
	o.OverwriteExistingVm.Set(nil)
}

// UnsetOverwriteExistingVm ensures that no value is present for OverwriteExistingVm, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetOverwriteExistingVm() {
	o.OverwriteExistingVm.Unset()
}

// GetPowerOffAndRenameExistingVm returns the PowerOffAndRenameExistingVm field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetPowerOffAndRenameExistingVm() bool {
	if o == nil || IsNil(o.PowerOffAndRenameExistingVm.Get()) {
		var ret bool
		return ret
	}
	return *o.PowerOffAndRenameExistingVm.Get()
}

// GetPowerOffAndRenameExistingVmOk returns a tuple with the PowerOffAndRenameExistingVm field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetPowerOffAndRenameExistingVmOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.PowerOffAndRenameExistingVm.Get(), o.PowerOffAndRenameExistingVm.IsSet()
}

// HasPowerOffAndRenameExistingVm returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasPowerOffAndRenameExistingVm() bool {
	if o != nil && o.PowerOffAndRenameExistingVm.IsSet() {
		return true
	}

	return false
}

// SetPowerOffAndRenameExistingVm gets a reference to the given NullableBool and assigns it to the PowerOffAndRenameExistingVm field.
func (o *RestoreVMwareVMParams) SetPowerOffAndRenameExistingVm(v bool) {
	o.PowerOffAndRenameExistingVm.Set(&v)
}
// SetPowerOffAndRenameExistingVmNil sets the value for PowerOffAndRenameExistingVm to be an explicit nil
func (o *RestoreVMwareVMParams) SetPowerOffAndRenameExistingVmNil() {
	o.PowerOffAndRenameExistingVm.Set(nil)
}

// UnsetPowerOffAndRenameExistingVm ensures that no value is present for PowerOffAndRenameExistingVm, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetPowerOffAndRenameExistingVm() {
	o.PowerOffAndRenameExistingVm.Unset()
}

// GetResourcePoolId returns the ResourcePoolId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetResourcePoolId() int64 {
	if o == nil || IsNil(o.ResourcePoolId.Get()) {
		var ret int64
		return ret
	}
	return *o.ResourcePoolId.Get()
}

// GetResourcePoolIdOk returns a tuple with the ResourcePoolId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetResourcePoolIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.ResourcePoolId.Get(), o.ResourcePoolId.IsSet()
}

// HasResourcePoolId returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasResourcePoolId() bool {
	if o != nil && o.ResourcePoolId.IsSet() {
		return true
	}

	return false
}

// SetResourcePoolId gets a reference to the given NullableInt64 and assigns it to the ResourcePoolId field.
func (o *RestoreVMwareVMParams) SetResourcePoolId(v int64) {
	o.ResourcePoolId.Set(&v)
}
// SetResourcePoolIdNil sets the value for ResourcePoolId to be an explicit nil
func (o *RestoreVMwareVMParams) SetResourcePoolIdNil() {
	o.ResourcePoolId.Set(nil)
}

// UnsetResourcePoolId ensures that no value is present for ResourcePoolId, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetResourcePoolId() {
	o.ResourcePoolId.Unset()
}

// GetTargetDataStoreId returns the TargetDataStoreId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetTargetDataStoreId() int64 {
	if o == nil || IsNil(o.TargetDataStoreId.Get()) {
		var ret int64
		return ret
	}
	return *o.TargetDataStoreId.Get()
}

// GetTargetDataStoreIdOk returns a tuple with the TargetDataStoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetTargetDataStoreIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetDataStoreId.Get(), o.TargetDataStoreId.IsSet()
}

// HasTargetDataStoreId returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasTargetDataStoreId() bool {
	if o != nil && o.TargetDataStoreId.IsSet() {
		return true
	}

	return false
}

// SetTargetDataStoreId gets a reference to the given NullableInt64 and assigns it to the TargetDataStoreId field.
func (o *RestoreVMwareVMParams) SetTargetDataStoreId(v int64) {
	o.TargetDataStoreId.Set(&v)
}
// SetTargetDataStoreIdNil sets the value for TargetDataStoreId to be an explicit nil
func (o *RestoreVMwareVMParams) SetTargetDataStoreIdNil() {
	o.TargetDataStoreId.Set(nil)
}

// UnsetTargetDataStoreId ensures that no value is present for TargetDataStoreId, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetTargetDataStoreId() {
	o.TargetDataStoreId.Unset()
}

// GetTargetVMFolderId returns the TargetVMFolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreVMwareVMParams) GetTargetVMFolderId() int64 {
	if o == nil || IsNil(o.TargetVMFolderId.Get()) {
		var ret int64
		return ret
	}
	return *o.TargetVMFolderId.Get()
}

// GetTargetVMFolderIdOk returns a tuple with the TargetVMFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreVMwareVMParams) GetTargetVMFolderIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetVMFolderId.Get(), o.TargetVMFolderId.IsSet()
}

// HasTargetVMFolderId returns a boolean if a field has been set.
func (o *RestoreVMwareVMParams) HasTargetVMFolderId() bool {
	if o != nil && o.TargetVMFolderId.IsSet() {
		return true
	}

	return false
}

// SetTargetVMFolderId gets a reference to the given NullableInt64 and assigns it to the TargetVMFolderId field.
func (o *RestoreVMwareVMParams) SetTargetVMFolderId(v int64) {
	o.TargetVMFolderId.Set(&v)
}
// SetTargetVMFolderIdNil sets the value for TargetVMFolderId to be an explicit nil
func (o *RestoreVMwareVMParams) SetTargetVMFolderIdNil() {
	o.TargetVMFolderId.Set(nil)
}

// UnsetTargetVMFolderId ensures that no value is present for TargetVMFolderId, not even an explicit nil
func (o *RestoreVMwareVMParams) UnsetTargetVMFolderId() {
	o.TargetVMFolderId.Unset()
}

func (o RestoreVMwareVMParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RestoreVMwareVMParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.AttemptDifferentialRestore.IsSet() {
		toSerialize["attemptDifferentialRestore"] = o.AttemptDifferentialRestore.Get()
	}
	if o.DatastoreIds != nil {
		toSerialize["datastoreIds"] = o.DatastoreIds
	}
	if o.EnableCopyRecovery.IsSet() {
		toSerialize["enableCopyRecovery"] = o.EnableCopyRecovery.Get()
	}
	if o.IsOnPremDeploy.IsSet() {
		toSerialize["isOnPremDeploy"] = o.IsOnPremDeploy.Get()
	}
	if o.OverwriteExistingVm.IsSet() {
		toSerialize["overwriteExistingVm"] = o.OverwriteExistingVm.Get()
	}
	if o.PowerOffAndRenameExistingVm.IsSet() {
		toSerialize["powerOffAndRenameExistingVm"] = o.PowerOffAndRenameExistingVm.Get()
	}
	if o.ResourcePoolId.IsSet() {
		toSerialize["resourcePoolId"] = o.ResourcePoolId.Get()
	}
	if o.TargetDataStoreId.IsSet() {
		toSerialize["targetDataStoreId"] = o.TargetDataStoreId.Get()
	}
	if o.TargetVMFolderId.IsSet() {
		toSerialize["targetVMFolderId"] = o.TargetVMFolderId.Get()
	}
	return toSerialize, nil
}

type NullableRestoreVMwareVMParams struct {
	value *RestoreVMwareVMParams
	isSet bool
}

func (v NullableRestoreVMwareVMParams) Get() *RestoreVMwareVMParams {
	return v.value
}

func (v *NullableRestoreVMwareVMParams) Set(val *RestoreVMwareVMParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreVMwareVMParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreVMwareVMParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreVMwareVMParams(val *RestoreVMwareVMParams) *NullableRestoreVMwareVMParams {
	return &NullableRestoreVMwareVMParams{value: val, isSet: true}
}

func (v NullableRestoreVMwareVMParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreVMwareVMParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


