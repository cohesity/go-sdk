/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PatchCompatibilityStatus type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PatchCompatibilityStatus{}

// PatchCompatibilityStatus Specifies if the patch is compatible for apply or revert.
type PatchCompatibilityStatus struct {
	// Specifies patch compatibility check is required for apply or revert patch.
	Action *string `json:"action,omitempty"`
	// Specifies the current version.
	CurrentVersion NullableString `json:"currentVersion,omitempty"`
	// Specifies whether the patch is compatible for the specified action.
	IsCompatible NullableBool `json:"isCompatible,omitempty"`
	// Specifies the target version.
	TargetVersion NullableString `json:"targetVersion,omitempty"`
}

// NewPatchCompatibilityStatus instantiates a new PatchCompatibilityStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchCompatibilityStatus() *PatchCompatibilityStatus {
	this := PatchCompatibilityStatus{}
	return &this
}

// NewPatchCompatibilityStatusWithDefaults instantiates a new PatchCompatibilityStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchCompatibilityStatusWithDefaults() *PatchCompatibilityStatus {
	this := PatchCompatibilityStatus{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise.
func (o *PatchCompatibilityStatus) GetAction() string {
	if o == nil || IsNil(o.Action) {
		var ret string
		return ret
	}
	return *o.Action
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PatchCompatibilityStatus) GetActionOk() (*string, bool) {
	if o == nil || IsNil(o.Action) {
		return nil, false
	}
	return o.Action, true
}

// HasAction returns a boolean if a field has been set.
func (o *PatchCompatibilityStatus) HasAction() bool {
	if o != nil && !IsNil(o.Action) {
		return true
	}

	return false
}

// SetAction gets a reference to the given string and assigns it to the Action field.
func (o *PatchCompatibilityStatus) SetAction(v string) {
	o.Action = &v
}

// GetCurrentVersion returns the CurrentVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchCompatibilityStatus) GetCurrentVersion() string {
	if o == nil || IsNil(o.CurrentVersion.Get()) {
		var ret string
		return ret
	}
	return *o.CurrentVersion.Get()
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchCompatibilityStatus) GetCurrentVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentVersion.Get(), o.CurrentVersion.IsSet()
}

// HasCurrentVersion returns a boolean if a field has been set.
func (o *PatchCompatibilityStatus) HasCurrentVersion() bool {
	if o != nil && o.CurrentVersion.IsSet() {
		return true
	}

	return false
}

// SetCurrentVersion gets a reference to the given NullableString and assigns it to the CurrentVersion field.
func (o *PatchCompatibilityStatus) SetCurrentVersion(v string) {
	o.CurrentVersion.Set(&v)
}
// SetCurrentVersionNil sets the value for CurrentVersion to be an explicit nil
func (o *PatchCompatibilityStatus) SetCurrentVersionNil() {
	o.CurrentVersion.Set(nil)
}

// UnsetCurrentVersion ensures that no value is present for CurrentVersion, not even an explicit nil
func (o *PatchCompatibilityStatus) UnsetCurrentVersion() {
	o.CurrentVersion.Unset()
}

// GetIsCompatible returns the IsCompatible field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchCompatibilityStatus) GetIsCompatible() bool {
	if o == nil || IsNil(o.IsCompatible.Get()) {
		var ret bool
		return ret
	}
	return *o.IsCompatible.Get()
}

// GetIsCompatibleOk returns a tuple with the IsCompatible field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchCompatibilityStatus) GetIsCompatibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsCompatible.Get(), o.IsCompatible.IsSet()
}

// HasIsCompatible returns a boolean if a field has been set.
func (o *PatchCompatibilityStatus) HasIsCompatible() bool {
	if o != nil && o.IsCompatible.IsSet() {
		return true
	}

	return false
}

// SetIsCompatible gets a reference to the given NullableBool and assigns it to the IsCompatible field.
func (o *PatchCompatibilityStatus) SetIsCompatible(v bool) {
	o.IsCompatible.Set(&v)
}
// SetIsCompatibleNil sets the value for IsCompatible to be an explicit nil
func (o *PatchCompatibilityStatus) SetIsCompatibleNil() {
	o.IsCompatible.Set(nil)
}

// UnsetIsCompatible ensures that no value is present for IsCompatible, not even an explicit nil
func (o *PatchCompatibilityStatus) UnsetIsCompatible() {
	o.IsCompatible.Unset()
}

// GetTargetVersion returns the TargetVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchCompatibilityStatus) GetTargetVersion() string {
	if o == nil || IsNil(o.TargetVersion.Get()) {
		var ret string
		return ret
	}
	return *o.TargetVersion.Get()
}

// GetTargetVersionOk returns a tuple with the TargetVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchCompatibilityStatus) GetTargetVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TargetVersion.Get(), o.TargetVersion.IsSet()
}

// HasTargetVersion returns a boolean if a field has been set.
func (o *PatchCompatibilityStatus) HasTargetVersion() bool {
	if o != nil && o.TargetVersion.IsSet() {
		return true
	}

	return false
}

// SetTargetVersion gets a reference to the given NullableString and assigns it to the TargetVersion field.
func (o *PatchCompatibilityStatus) SetTargetVersion(v string) {
	o.TargetVersion.Set(&v)
}
// SetTargetVersionNil sets the value for TargetVersion to be an explicit nil
func (o *PatchCompatibilityStatus) SetTargetVersionNil() {
	o.TargetVersion.Set(nil)
}

// UnsetTargetVersion ensures that no value is present for TargetVersion, not even an explicit nil
func (o *PatchCompatibilityStatus) UnsetTargetVersion() {
	o.TargetVersion.Unset()
}

func (o PatchCompatibilityStatus) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PatchCompatibilityStatus) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Action) {
		toSerialize["action"] = o.Action
	}
	if o.CurrentVersion.IsSet() {
		toSerialize["currentVersion"] = o.CurrentVersion.Get()
	}
	if o.IsCompatible.IsSet() {
		toSerialize["isCompatible"] = o.IsCompatible.Get()
	}
	if o.TargetVersion.IsSet() {
		toSerialize["targetVersion"] = o.TargetVersion.Get()
	}
	return toSerialize, nil
}

type NullablePatchCompatibilityStatus struct {
	value *PatchCompatibilityStatus
	isSet bool
}

func (v NullablePatchCompatibilityStatus) Get() *PatchCompatibilityStatus {
	return v.value
}

func (v *NullablePatchCompatibilityStatus) Set(val *PatchCompatibilityStatus) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchCompatibilityStatus) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchCompatibilityStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchCompatibilityStatus(val *PatchCompatibilityStatus) *NullablePatchCompatibilityStatus {
	return &NullablePatchCompatibilityStatus{value: val, isSet: true}
}

func (v NullablePatchCompatibilityStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchCompatibilityStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


