/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverAzureEntraIdParamsAzureTargetParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverAzureEntraIdParamsAzureTargetParams{}

// RecoverAzureEntraIdParamsAzureTargetParams Specifies the params for recovering to an Azure target.
type RecoverAzureEntraIdParamsAzureTargetParams struct {
	// Specifies Whether to force changing password on next sign in. Applies for only user type
	ChangePasswordOnSignIn NullableBool `json:"changePasswordOnSignIn,omitempty"`
	// Specifies the default password to be set in case users are recovered.
	DefaultPassword NullableString `json:"defaultPassword,omitempty"`
	// Specifies whether recovery should recover all the members of a selected object. Applies for Admin Unit, Group and Dir Roles
	IsContainerMemberRecovery NullableBool `json:"isContainerMemberRecovery,omitempty"`
	// If true, relationships are restored in overwrite mode (i.e. any relationship created *after* restore point is deleted). For example, if user U1 is member of G1 and G2 in restore point (in selected snapshot), but the same user is member of G1 and G3 in live AAD, membership of G2 is restored and membership of G3 is removed in overwrite-mode while restoring U1. If this field is false, relationship is restored in merge-mode. In merge-mode, membership of G2 is restored but membership of G3 is not removed.
	IsRelationOverwrite NullableBool `json:"isRelationOverwrite,omitempty"`
	// Specifies the recovery type for the selected azure entra id recoverable object.
	RecoveryType string `json:"recoveryType"`
}

type _RecoverAzureEntraIdParamsAzureTargetParams RecoverAzureEntraIdParamsAzureTargetParams

// NewRecoverAzureEntraIdParamsAzureTargetParams instantiates a new RecoverAzureEntraIdParamsAzureTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAzureEntraIdParamsAzureTargetParams(recoveryType string) *RecoverAzureEntraIdParamsAzureTargetParams {
	this := RecoverAzureEntraIdParamsAzureTargetParams{}
	this.RecoveryType = recoveryType
	return &this
}

// NewRecoverAzureEntraIdParamsAzureTargetParamsWithDefaults instantiates a new RecoverAzureEntraIdParamsAzureTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAzureEntraIdParamsAzureTargetParamsWithDefaults() *RecoverAzureEntraIdParamsAzureTargetParams {
	this := RecoverAzureEntraIdParamsAzureTargetParams{}
	return &this
}

// GetChangePasswordOnSignIn returns the ChangePasswordOnSignIn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAzureEntraIdParamsAzureTargetParams) GetChangePasswordOnSignIn() bool {
	if o == nil || IsNil(o.ChangePasswordOnSignIn.Get()) {
		var ret bool
		return ret
	}
	return *o.ChangePasswordOnSignIn.Get()
}

// GetChangePasswordOnSignInOk returns a tuple with the ChangePasswordOnSignIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureEntraIdParamsAzureTargetParams) GetChangePasswordOnSignInOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.ChangePasswordOnSignIn.Get(), o.ChangePasswordOnSignIn.IsSet()
}

// HasChangePasswordOnSignIn returns a boolean if a field has been set.
func (o *RecoverAzureEntraIdParamsAzureTargetParams) HasChangePasswordOnSignIn() bool {
	if o != nil && o.ChangePasswordOnSignIn.IsSet() {
		return true
	}

	return false
}

// SetChangePasswordOnSignIn gets a reference to the given NullableBool and assigns it to the ChangePasswordOnSignIn field.
func (o *RecoverAzureEntraIdParamsAzureTargetParams) SetChangePasswordOnSignIn(v bool) {
	o.ChangePasswordOnSignIn.Set(&v)
}
// SetChangePasswordOnSignInNil sets the value for ChangePasswordOnSignIn to be an explicit nil
func (o *RecoverAzureEntraIdParamsAzureTargetParams) SetChangePasswordOnSignInNil() {
	o.ChangePasswordOnSignIn.Set(nil)
}

// UnsetChangePasswordOnSignIn ensures that no value is present for ChangePasswordOnSignIn, not even an explicit nil
func (o *RecoverAzureEntraIdParamsAzureTargetParams) UnsetChangePasswordOnSignIn() {
	o.ChangePasswordOnSignIn.Unset()
}

// GetDefaultPassword returns the DefaultPassword field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAzureEntraIdParamsAzureTargetParams) GetDefaultPassword() string {
	if o == nil || IsNil(o.DefaultPassword.Get()) {
		var ret string
		return ret
	}
	return *o.DefaultPassword.Get()
}

// GetDefaultPasswordOk returns a tuple with the DefaultPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureEntraIdParamsAzureTargetParams) GetDefaultPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DefaultPassword.Get(), o.DefaultPassword.IsSet()
}

// HasDefaultPassword returns a boolean if a field has been set.
func (o *RecoverAzureEntraIdParamsAzureTargetParams) HasDefaultPassword() bool {
	if o != nil && o.DefaultPassword.IsSet() {
		return true
	}

	return false
}

// SetDefaultPassword gets a reference to the given NullableString and assigns it to the DefaultPassword field.
func (o *RecoverAzureEntraIdParamsAzureTargetParams) SetDefaultPassword(v string) {
	o.DefaultPassword.Set(&v)
}
// SetDefaultPasswordNil sets the value for DefaultPassword to be an explicit nil
func (o *RecoverAzureEntraIdParamsAzureTargetParams) SetDefaultPasswordNil() {
	o.DefaultPassword.Set(nil)
}

// UnsetDefaultPassword ensures that no value is present for DefaultPassword, not even an explicit nil
func (o *RecoverAzureEntraIdParamsAzureTargetParams) UnsetDefaultPassword() {
	o.DefaultPassword.Unset()
}

// GetIsContainerMemberRecovery returns the IsContainerMemberRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAzureEntraIdParamsAzureTargetParams) GetIsContainerMemberRecovery() bool {
	if o == nil || IsNil(o.IsContainerMemberRecovery.Get()) {
		var ret bool
		return ret
	}
	return *o.IsContainerMemberRecovery.Get()
}

// GetIsContainerMemberRecoveryOk returns a tuple with the IsContainerMemberRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureEntraIdParamsAzureTargetParams) GetIsContainerMemberRecoveryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsContainerMemberRecovery.Get(), o.IsContainerMemberRecovery.IsSet()
}

// HasIsContainerMemberRecovery returns a boolean if a field has been set.
func (o *RecoverAzureEntraIdParamsAzureTargetParams) HasIsContainerMemberRecovery() bool {
	if o != nil && o.IsContainerMemberRecovery.IsSet() {
		return true
	}

	return false
}

// SetIsContainerMemberRecovery gets a reference to the given NullableBool and assigns it to the IsContainerMemberRecovery field.
func (o *RecoverAzureEntraIdParamsAzureTargetParams) SetIsContainerMemberRecovery(v bool) {
	o.IsContainerMemberRecovery.Set(&v)
}
// SetIsContainerMemberRecoveryNil sets the value for IsContainerMemberRecovery to be an explicit nil
func (o *RecoverAzureEntraIdParamsAzureTargetParams) SetIsContainerMemberRecoveryNil() {
	o.IsContainerMemberRecovery.Set(nil)
}

// UnsetIsContainerMemberRecovery ensures that no value is present for IsContainerMemberRecovery, not even an explicit nil
func (o *RecoverAzureEntraIdParamsAzureTargetParams) UnsetIsContainerMemberRecovery() {
	o.IsContainerMemberRecovery.Unset()
}

// GetIsRelationOverwrite returns the IsRelationOverwrite field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAzureEntraIdParamsAzureTargetParams) GetIsRelationOverwrite() bool {
	if o == nil || IsNil(o.IsRelationOverwrite.Get()) {
		var ret bool
		return ret
	}
	return *o.IsRelationOverwrite.Get()
}

// GetIsRelationOverwriteOk returns a tuple with the IsRelationOverwrite field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAzureEntraIdParamsAzureTargetParams) GetIsRelationOverwriteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsRelationOverwrite.Get(), o.IsRelationOverwrite.IsSet()
}

// HasIsRelationOverwrite returns a boolean if a field has been set.
func (o *RecoverAzureEntraIdParamsAzureTargetParams) HasIsRelationOverwrite() bool {
	if o != nil && o.IsRelationOverwrite.IsSet() {
		return true
	}

	return false
}

// SetIsRelationOverwrite gets a reference to the given NullableBool and assigns it to the IsRelationOverwrite field.
func (o *RecoverAzureEntraIdParamsAzureTargetParams) SetIsRelationOverwrite(v bool) {
	o.IsRelationOverwrite.Set(&v)
}
// SetIsRelationOverwriteNil sets the value for IsRelationOverwrite to be an explicit nil
func (o *RecoverAzureEntraIdParamsAzureTargetParams) SetIsRelationOverwriteNil() {
	o.IsRelationOverwrite.Set(nil)
}

// UnsetIsRelationOverwrite ensures that no value is present for IsRelationOverwrite, not even an explicit nil
func (o *RecoverAzureEntraIdParamsAzureTargetParams) UnsetIsRelationOverwrite() {
	o.IsRelationOverwrite.Unset()
}

// GetRecoveryType returns the RecoveryType field value
func (o *RecoverAzureEntraIdParamsAzureTargetParams) GetRecoveryType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RecoveryType
}

// GetRecoveryTypeOk returns a tuple with the RecoveryType field value
// and a boolean to check if the value has been set.
func (o *RecoverAzureEntraIdParamsAzureTargetParams) GetRecoveryTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RecoveryType, true
}

// SetRecoveryType sets field value
func (o *RecoverAzureEntraIdParamsAzureTargetParams) SetRecoveryType(v string) {
	o.RecoveryType = v
}

func (o RecoverAzureEntraIdParamsAzureTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverAzureEntraIdParamsAzureTargetParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.ChangePasswordOnSignIn.IsSet() {
		toSerialize["changePasswordOnSignIn"] = o.ChangePasswordOnSignIn.Get()
	}
	if o.DefaultPassword.IsSet() {
		toSerialize["defaultPassword"] = o.DefaultPassword.Get()
	}
	if o.IsContainerMemberRecovery.IsSet() {
		toSerialize["isContainerMemberRecovery"] = o.IsContainerMemberRecovery.Get()
	}
	if o.IsRelationOverwrite.IsSet() {
		toSerialize["isRelationOverwrite"] = o.IsRelationOverwrite.Get()
	}
	toSerialize["recoveryType"] = o.RecoveryType
	return toSerialize, nil
}

func (o *RecoverAzureEntraIdParamsAzureTargetParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"recoveryType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverAzureEntraIdParamsAzureTargetParams := _RecoverAzureEntraIdParamsAzureTargetParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverAzureEntraIdParamsAzureTargetParams)

	if err != nil {
		return err
	}

	*o = RecoverAzureEntraIdParamsAzureTargetParams(varRecoverAzureEntraIdParamsAzureTargetParams)

	return err
}

type NullableRecoverAzureEntraIdParamsAzureTargetParams struct {
	value *RecoverAzureEntraIdParamsAzureTargetParams
	isSet bool
}

func (v NullableRecoverAzureEntraIdParamsAzureTargetParams) Get() *RecoverAzureEntraIdParamsAzureTargetParams {
	return v.value
}

func (v *NullableRecoverAzureEntraIdParamsAzureTargetParams) Set(val *RecoverAzureEntraIdParamsAzureTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAzureEntraIdParamsAzureTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAzureEntraIdParamsAzureTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAzureEntraIdParamsAzureTargetParams(val *RecoverAzureEntraIdParamsAzureTargetParams) *NullableRecoverAzureEntraIdParamsAzureTargetParams {
	return &NullableRecoverAzureEntraIdParamsAzureTargetParams{value: val, isSet: true}
}

func (v NullableRecoverAzureEntraIdParamsAzureTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAzureEntraIdParamsAzureTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


