/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the HyperVSourceRegistrationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HyperVSourceRegistrationParams{}

// HyperVSourceRegistrationParams Specifies the paramaters to register a HyperV source.
type HyperVSourceRegistrationParams struct {
	ScvmmParams *ScvmmRegistrationParams `json:"scvmmParams,omitempty"`
	StandaloneClusterParams *StandaloneClusterRegistrationParams `json:"standaloneClusterParams,omitempty"`
	StandaloneHostParams *StandaloneHostRegistrationParams `json:"standaloneHostParams,omitempty"`
	// Specifies the HyperV Source type.
	Type NullableString `json:"type"`
}

type _HyperVSourceRegistrationParams HyperVSourceRegistrationParams

// NewHyperVSourceRegistrationParams instantiates a new HyperVSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHyperVSourceRegistrationParams(type_ NullableString) *HyperVSourceRegistrationParams {
	this := HyperVSourceRegistrationParams{}
	this.Type = type_
	return &this
}

// NewHyperVSourceRegistrationParamsWithDefaults instantiates a new HyperVSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHyperVSourceRegistrationParamsWithDefaults() *HyperVSourceRegistrationParams {
	this := HyperVSourceRegistrationParams{}
	return &this
}

// GetScvmmParams returns the ScvmmParams field value if set, zero value otherwise.
func (o *HyperVSourceRegistrationParams) GetScvmmParams() ScvmmRegistrationParams {
	if o == nil || IsNil(o.ScvmmParams) {
		var ret ScvmmRegistrationParams
		return ret
	}
	return *o.ScvmmParams
}

// GetScvmmParamsOk returns a tuple with the ScvmmParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperVSourceRegistrationParams) GetScvmmParamsOk() (*ScvmmRegistrationParams, bool) {
	if o == nil || IsNil(o.ScvmmParams) {
		return nil, false
	}
	return o.ScvmmParams, true
}

// HasScvmmParams returns a boolean if a field has been set.
func (o *HyperVSourceRegistrationParams) HasScvmmParams() bool {
	if o != nil && !IsNil(o.ScvmmParams) {
		return true
	}

	return false
}

// SetScvmmParams gets a reference to the given ScvmmRegistrationParams and assigns it to the ScvmmParams field.
func (o *HyperVSourceRegistrationParams) SetScvmmParams(v ScvmmRegistrationParams) {
	o.ScvmmParams = &v
}

// GetStandaloneClusterParams returns the StandaloneClusterParams field value if set, zero value otherwise.
func (o *HyperVSourceRegistrationParams) GetStandaloneClusterParams() StandaloneClusterRegistrationParams {
	if o == nil || IsNil(o.StandaloneClusterParams) {
		var ret StandaloneClusterRegistrationParams
		return ret
	}
	return *o.StandaloneClusterParams
}

// GetStandaloneClusterParamsOk returns a tuple with the StandaloneClusterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperVSourceRegistrationParams) GetStandaloneClusterParamsOk() (*StandaloneClusterRegistrationParams, bool) {
	if o == nil || IsNil(o.StandaloneClusterParams) {
		return nil, false
	}
	return o.StandaloneClusterParams, true
}

// HasStandaloneClusterParams returns a boolean if a field has been set.
func (o *HyperVSourceRegistrationParams) HasStandaloneClusterParams() bool {
	if o != nil && !IsNil(o.StandaloneClusterParams) {
		return true
	}

	return false
}

// SetStandaloneClusterParams gets a reference to the given StandaloneClusterRegistrationParams and assigns it to the StandaloneClusterParams field.
func (o *HyperVSourceRegistrationParams) SetStandaloneClusterParams(v StandaloneClusterRegistrationParams) {
	o.StandaloneClusterParams = &v
}

// GetStandaloneHostParams returns the StandaloneHostParams field value if set, zero value otherwise.
func (o *HyperVSourceRegistrationParams) GetStandaloneHostParams() StandaloneHostRegistrationParams {
	if o == nil || IsNil(o.StandaloneHostParams) {
		var ret StandaloneHostRegistrationParams
		return ret
	}
	return *o.StandaloneHostParams
}

// GetStandaloneHostParamsOk returns a tuple with the StandaloneHostParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HyperVSourceRegistrationParams) GetStandaloneHostParamsOk() (*StandaloneHostRegistrationParams, bool) {
	if o == nil || IsNil(o.StandaloneHostParams) {
		return nil, false
	}
	return o.StandaloneHostParams, true
}

// HasStandaloneHostParams returns a boolean if a field has been set.
func (o *HyperVSourceRegistrationParams) HasStandaloneHostParams() bool {
	if o != nil && !IsNil(o.StandaloneHostParams) {
		return true
	}

	return false
}

// SetStandaloneHostParams gets a reference to the given StandaloneHostRegistrationParams and assigns it to the StandaloneHostParams field.
func (o *HyperVSourceRegistrationParams) SetStandaloneHostParams(v StandaloneHostRegistrationParams) {
	o.StandaloneHostParams = &v
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *HyperVSourceRegistrationParams) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HyperVSourceRegistrationParams) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *HyperVSourceRegistrationParams) SetType(v string) {
	o.Type.Set(&v)
}

func (o HyperVSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HyperVSourceRegistrationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ScvmmParams) {
		toSerialize["scvmmParams"] = o.ScvmmParams
	}
	if !IsNil(o.StandaloneClusterParams) {
		toSerialize["standaloneClusterParams"] = o.StandaloneClusterParams
	}
	if !IsNil(o.StandaloneHostParams) {
		toSerialize["standaloneHostParams"] = o.StandaloneHostParams
	}
	toSerialize["type"] = o.Type.Get()
	return toSerialize, nil
}

func (o *HyperVSourceRegistrationParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varHyperVSourceRegistrationParams := _HyperVSourceRegistrationParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varHyperVSourceRegistrationParams)

	if err != nil {
		return err
	}

	*o = HyperVSourceRegistrationParams(varHyperVSourceRegistrationParams)

	return err
}

type NullableHyperVSourceRegistrationParams struct {
	value *HyperVSourceRegistrationParams
	isSet bool
}

func (v NullableHyperVSourceRegistrationParams) Get() *HyperVSourceRegistrationParams {
	return v.value
}

func (v *NullableHyperVSourceRegistrationParams) Set(val *HyperVSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHyperVSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHyperVSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHyperVSourceRegistrationParams(val *HyperVSourceRegistrationParams) *NullableHyperVSourceRegistrationParams {
	return &NullableHyperVSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableHyperVSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHyperVSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


