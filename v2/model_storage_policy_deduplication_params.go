/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the StoragePolicyDeduplicationParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StoragePolicyDeduplicationParams{}

// StoragePolicyDeduplicationParams Specifies deduplication settings for a Storage Domain.
type StoragePolicyDeduplicationParams struct {
	// Specifies whether deduplication is enabled on this Storage Domain. If enabled, cohesity cluster will eliminate duplicate blocks and thus reducing the amount of storage space.
	Enabled NullableBool `json:"enabled,omitempty"`
	// Specifies if inline deduplication is enabled. This field is appliciable only if deduplicationEnabled is set to true.
	InlineEnabled NullableBool `json:"inlineEnabled,omitempty"`
}

// NewStoragePolicyDeduplicationParams instantiates a new StoragePolicyDeduplicationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStoragePolicyDeduplicationParams() *StoragePolicyDeduplicationParams {
	this := StoragePolicyDeduplicationParams{}
	return &this
}

// NewStoragePolicyDeduplicationParamsWithDefaults instantiates a new StoragePolicyDeduplicationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStoragePolicyDeduplicationParamsWithDefaults() *StoragePolicyDeduplicationParams {
	this := StoragePolicyDeduplicationParams{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicyDeduplicationParams) GetEnabled() bool {
	if o == nil || IsNil(o.Enabled.Get()) {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicyDeduplicationParams) GetEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *StoragePolicyDeduplicationParams) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *StoragePolicyDeduplicationParams) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *StoragePolicyDeduplicationParams) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *StoragePolicyDeduplicationParams) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetInlineEnabled returns the InlineEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StoragePolicyDeduplicationParams) GetInlineEnabled() bool {
	if o == nil || IsNil(o.InlineEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.InlineEnabled.Get()
}

// GetInlineEnabledOk returns a tuple with the InlineEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StoragePolicyDeduplicationParams) GetInlineEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.InlineEnabled.Get(), o.InlineEnabled.IsSet()
}

// HasInlineEnabled returns a boolean if a field has been set.
func (o *StoragePolicyDeduplicationParams) HasInlineEnabled() bool {
	if o != nil && o.InlineEnabled.IsSet() {
		return true
	}

	return false
}

// SetInlineEnabled gets a reference to the given NullableBool and assigns it to the InlineEnabled field.
func (o *StoragePolicyDeduplicationParams) SetInlineEnabled(v bool) {
	o.InlineEnabled.Set(&v)
}
// SetInlineEnabledNil sets the value for InlineEnabled to be an explicit nil
func (o *StoragePolicyDeduplicationParams) SetInlineEnabledNil() {
	o.InlineEnabled.Set(nil)
}

// UnsetInlineEnabled ensures that no value is present for InlineEnabled, not even an explicit nil
func (o *StoragePolicyDeduplicationParams) UnsetInlineEnabled() {
	o.InlineEnabled.Unset()
}

func (o StoragePolicyDeduplicationParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StoragePolicyDeduplicationParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if o.InlineEnabled.IsSet() {
		toSerialize["inlineEnabled"] = o.InlineEnabled.Get()
	}
	return toSerialize, nil
}

type NullableStoragePolicyDeduplicationParams struct {
	value *StoragePolicyDeduplicationParams
	isSet bool
}

func (v NullableStoragePolicyDeduplicationParams) Get() *StoragePolicyDeduplicationParams {
	return v.value
}

func (v *NullableStoragePolicyDeduplicationParams) Set(val *StoragePolicyDeduplicationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableStoragePolicyDeduplicationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableStoragePolicyDeduplicationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStoragePolicyDeduplicationParams(val *StoragePolicyDeduplicationParams) *NullableStoragePolicyDeduplicationParams {
	return &NullableStoragePolicyDeduplicationParams{value: val, isSet: true}
}

func (v NullableStoragePolicyDeduplicationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStoragePolicyDeduplicationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


