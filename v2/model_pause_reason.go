/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the PauseReason type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PauseReason{}

// PauseReason Protection Group Pause Reason
type PauseReason struct {
	// Specifies The reason that was used to pause a protection group
	PauseReason *string `json:"PauseReason,omitempty"`
}

// NewPauseReason instantiates a new PauseReason object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPauseReason() *PauseReason {
	this := PauseReason{}
	return &this
}

// NewPauseReasonWithDefaults instantiates a new PauseReason object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPauseReasonWithDefaults() *PauseReason {
	this := PauseReason{}
	return &this
}

// GetPauseReason returns the PauseReason field value if set, zero value otherwise.
func (o *PauseReason) GetPauseReason() string {
	if o == nil || IsNil(o.PauseReason) {
		var ret string
		return ret
	}
	return *o.PauseReason
}

// GetPauseReasonOk returns a tuple with the PauseReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PauseReason) GetPauseReasonOk() (*string, bool) {
	if o == nil || IsNil(o.PauseReason) {
		return nil, false
	}
	return o.PauseReason, true
}

// HasPauseReason returns a boolean if a field has been set.
func (o *PauseReason) HasPauseReason() bool {
	if o != nil && !IsNil(o.PauseReason) {
		return true
	}

	return false
}

// SetPauseReason gets a reference to the given string and assigns it to the PauseReason field.
func (o *PauseReason) SetPauseReason(v string) {
	o.PauseReason = &v
}

func (o PauseReason) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PauseReason) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.PauseReason) {
		toSerialize["PauseReason"] = o.PauseReason
	}
	return toSerialize, nil
}

type NullablePauseReason struct {
	value *PauseReason
	isSet bool
}

func (v NullablePauseReason) Get() *PauseReason {
	return v.value
}

func (v *NullablePauseReason) Set(val *PauseReason) {
	v.value = val
	v.isSet = true
}

func (v NullablePauseReason) IsSet() bool {
	return v.isSet
}

func (v *NullablePauseReason) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePauseReason(val *PauseReason) *NullablePauseReason {
	return &NullablePauseReason{value: val, isSet: true}
}

func (v NullablePauseReason) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePauseReason) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


