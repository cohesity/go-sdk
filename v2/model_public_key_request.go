/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PublicKeyRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PublicKeyRequest{}

// PublicKeyRequest Specifies the parameters required to retrieve SSH public key
type PublicKeyRequest struct {
	// Specifies the workflow initiating the SSH connection.
	WorkflowType string `json:"workflowType"`
}

type _PublicKeyRequest PublicKeyRequest

// NewPublicKeyRequest instantiates a new PublicKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicKeyRequest(workflowType string) *PublicKeyRequest {
	this := PublicKeyRequest{}
	this.WorkflowType = workflowType
	return &this
}

// NewPublicKeyRequestWithDefaults instantiates a new PublicKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicKeyRequestWithDefaults() *PublicKeyRequest {
	this := PublicKeyRequest{}
	return &this
}

// GetWorkflowType returns the WorkflowType field value
func (o *PublicKeyRequest) GetWorkflowType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.WorkflowType
}

// GetWorkflowTypeOk returns a tuple with the WorkflowType field value
// and a boolean to check if the value has been set.
func (o *PublicKeyRequest) GetWorkflowTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WorkflowType, true
}

// SetWorkflowType sets field value
func (o *PublicKeyRequest) SetWorkflowType(v string) {
	o.WorkflowType = v
}

func (o PublicKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PublicKeyRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workflowType"] = o.WorkflowType
	return toSerialize, nil
}

func (o *PublicKeyRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workflowType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPublicKeyRequest := _PublicKeyRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPublicKeyRequest)

	if err != nil {
		return err
	}

	*o = PublicKeyRequest(varPublicKeyRequest)

	return err
}

type NullablePublicKeyRequest struct {
	value *PublicKeyRequest
	isSet bool
}

func (v NullablePublicKeyRequest) Get() *PublicKeyRequest {
	return v.value
}

func (v *NullablePublicKeyRequest) Set(val *PublicKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicKeyRequest(val *PublicKeyRequest) *NullablePublicKeyRequest {
	return &NullablePublicKeyRequest{value: val, isSet: true}
}

func (v NullablePublicKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


