/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the ObjectStatsInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObjectStatsInfo{}

// ObjectStatsInfo Specifies the Stats of an object.
type ObjectStatsInfo struct {
	// Specifies the environment of the object.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies object id.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the name of the object.
	Name NullableString `json:"name,omitempty"`
	// Specifies registered source id to which object belongs.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Specifies registered source name to which object belongs.
	SourceName NullableString `json:"sourceName,omitempty"`
	BackupGenericStats *BackupGenericStats `json:"backupGenericStats,omitempty"`
	NasStats *BackupNasStats `json:"nasStats,omitempty"`
	// Specifies stats for failed attempts of this object.
	FailedAttempts []StatsTaskInfo `json:"failedAttempts,omitempty"`
}

// NewObjectStatsInfo instantiates a new ObjectStatsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectStatsInfo() *ObjectStatsInfo {
	this := ObjectStatsInfo{}
	return &this
}

// NewObjectStatsInfoWithDefaults instantiates a new ObjectStatsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectStatsInfoWithDefaults() *ObjectStatsInfo {
	this := ObjectStatsInfo{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectStatsInfo) GetEnvironment() string {
	if o == nil || IsNil(o.Environment.Get()) {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectStatsInfo) GetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ObjectStatsInfo) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *ObjectStatsInfo) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *ObjectStatsInfo) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *ObjectStatsInfo) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectStatsInfo) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectStatsInfo) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ObjectStatsInfo) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ObjectStatsInfo) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ObjectStatsInfo) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ObjectStatsInfo) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectStatsInfo) GetName() string {
	if o == nil || IsNil(o.Name.Get()) {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectStatsInfo) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ObjectStatsInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ObjectStatsInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ObjectStatsInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ObjectStatsInfo) UnsetName() {
	o.Name.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectStatsInfo) GetSourceId() int64 {
	if o == nil || IsNil(o.SourceId.Get()) {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectStatsInfo) GetSourceIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *ObjectStatsInfo) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *ObjectStatsInfo) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *ObjectStatsInfo) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *ObjectStatsInfo) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetSourceName returns the SourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectStatsInfo) GetSourceName() string {
	if o == nil || IsNil(o.SourceName.Get()) {
		var ret string
		return ret
	}
	return *o.SourceName.Get()
}

// GetSourceNameOk returns a tuple with the SourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectStatsInfo) GetSourceNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SourceName.Get(), o.SourceName.IsSet()
}

// HasSourceName returns a boolean if a field has been set.
func (o *ObjectStatsInfo) HasSourceName() bool {
	if o != nil && o.SourceName.IsSet() {
		return true
	}

	return false
}

// SetSourceName gets a reference to the given NullableString and assigns it to the SourceName field.
func (o *ObjectStatsInfo) SetSourceName(v string) {
	o.SourceName.Set(&v)
}
// SetSourceNameNil sets the value for SourceName to be an explicit nil
func (o *ObjectStatsInfo) SetSourceNameNil() {
	o.SourceName.Set(nil)
}

// UnsetSourceName ensures that no value is present for SourceName, not even an explicit nil
func (o *ObjectStatsInfo) UnsetSourceName() {
	o.SourceName.Unset()
}

// GetBackupGenericStats returns the BackupGenericStats field value if set, zero value otherwise.
func (o *ObjectStatsInfo) GetBackupGenericStats() BackupGenericStats {
	if o == nil || IsNil(o.BackupGenericStats) {
		var ret BackupGenericStats
		return ret
	}
	return *o.BackupGenericStats
}

// GetBackupGenericStatsOk returns a tuple with the BackupGenericStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStatsInfo) GetBackupGenericStatsOk() (*BackupGenericStats, bool) {
	if o == nil || IsNil(o.BackupGenericStats) {
		return nil, false
	}
	return o.BackupGenericStats, true
}

// HasBackupGenericStats returns a boolean if a field has been set.
func (o *ObjectStatsInfo) HasBackupGenericStats() bool {
	if o != nil && !IsNil(o.BackupGenericStats) {
		return true
	}

	return false
}

// SetBackupGenericStats gets a reference to the given BackupGenericStats and assigns it to the BackupGenericStats field.
func (o *ObjectStatsInfo) SetBackupGenericStats(v BackupGenericStats) {
	o.BackupGenericStats = &v
}

// GetNasStats returns the NasStats field value if set, zero value otherwise.
func (o *ObjectStatsInfo) GetNasStats() BackupNasStats {
	if o == nil || IsNil(o.NasStats) {
		var ret BackupNasStats
		return ret
	}
	return *o.NasStats
}

// GetNasStatsOk returns a tuple with the NasStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectStatsInfo) GetNasStatsOk() (*BackupNasStats, bool) {
	if o == nil || IsNil(o.NasStats) {
		return nil, false
	}
	return o.NasStats, true
}

// HasNasStats returns a boolean if a field has been set.
func (o *ObjectStatsInfo) HasNasStats() bool {
	if o != nil && !IsNil(o.NasStats) {
		return true
	}

	return false
}

// SetNasStats gets a reference to the given BackupNasStats and assigns it to the NasStats field.
func (o *ObjectStatsInfo) SetNasStats(v BackupNasStats) {
	o.NasStats = &v
}

// GetFailedAttempts returns the FailedAttempts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectStatsInfo) GetFailedAttempts() []StatsTaskInfo {
	if o == nil {
		var ret []StatsTaskInfo
		return ret
	}
	return o.FailedAttempts
}

// GetFailedAttemptsOk returns a tuple with the FailedAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectStatsInfo) GetFailedAttemptsOk() ([]StatsTaskInfo, bool) {
	if o == nil || IsNil(o.FailedAttempts) {
		return nil, false
	}
	return o.FailedAttempts, true
}

// HasFailedAttempts returns a boolean if a field has been set.
func (o *ObjectStatsInfo) HasFailedAttempts() bool {
	if o != nil && !IsNil(o.FailedAttempts) {
		return true
	}

	return false
}

// SetFailedAttempts gets a reference to the given []StatsTaskInfo and assigns it to the FailedAttempts field.
func (o *ObjectStatsInfo) SetFailedAttempts(v []StatsTaskInfo) {
	o.FailedAttempts = v
}

func (o ObjectStatsInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObjectStatsInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.SourceName.IsSet() {
		toSerialize["sourceName"] = o.SourceName.Get()
	}
	if !IsNil(o.BackupGenericStats) {
		toSerialize["backupGenericStats"] = o.BackupGenericStats
	}
	if !IsNil(o.NasStats) {
		toSerialize["nasStats"] = o.NasStats
	}
	if o.FailedAttempts != nil {
		toSerialize["failedAttempts"] = o.FailedAttempts
	}
	return toSerialize, nil
}

type NullableObjectStatsInfo struct {
	value *ObjectStatsInfo
	isSet bool
}

func (v NullableObjectStatsInfo) Get() *ObjectStatsInfo {
	return v.value
}

func (v *NullableObjectStatsInfo) Set(val *ObjectStatsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectStatsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectStatsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectStatsInfo(val *ObjectStatsInfo) *NullableObjectStatsInfo {
	return &NullableObjectStatsInfo{value: val, isSet: true}
}

func (v NullableObjectStatsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectStatsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


