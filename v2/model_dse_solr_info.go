/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DSESolrInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DSESolrInfo{}

// DSESolrInfo Contains details about DSE Solr.
type DSESolrInfo struct {
	// Solr node IP Addresses
	SolrNodes []string `json:"solrNodes"`
	// Solr node Port.
	SolrPort NullableInt32 `json:"solrPort"`
}

type _DSESolrInfo DSESolrInfo

// NewDSESolrInfo instantiates a new DSESolrInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDSESolrInfo(solrNodes []string, solrPort NullableInt32) *DSESolrInfo {
	this := DSESolrInfo{}
	this.SolrNodes = solrNodes
	this.SolrPort = solrPort
	return &this
}

// NewDSESolrInfoWithDefaults instantiates a new DSESolrInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDSESolrInfoWithDefaults() *DSESolrInfo {
	this := DSESolrInfo{}
	return &this
}

// GetSolrNodes returns the SolrNodes field value
func (o *DSESolrInfo) GetSolrNodes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.SolrNodes
}

// GetSolrNodesOk returns a tuple with the SolrNodes field value
// and a boolean to check if the value has been set.
func (o *DSESolrInfo) GetSolrNodesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.SolrNodes, true
}

// SetSolrNodes sets field value
func (o *DSESolrInfo) SetSolrNodes(v []string) {
	o.SolrNodes = v
}

// GetSolrPort returns the SolrPort field value
// If the value is explicit nil, the zero value for int32 will be returned
func (o *DSESolrInfo) GetSolrPort() int32 {
	if o == nil || o.SolrPort.Get() == nil {
		var ret int32
		return ret
	}

	return *o.SolrPort.Get()
}

// GetSolrPortOk returns a tuple with the SolrPort field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DSESolrInfo) GetSolrPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.SolrPort.Get(), o.SolrPort.IsSet()
}

// SetSolrPort sets field value
func (o *DSESolrInfo) SetSolrPort(v int32) {
	o.SolrPort.Set(&v)
}

func (o DSESolrInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DSESolrInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["solrNodes"] = o.SolrNodes
	toSerialize["solrPort"] = o.SolrPort.Get()
	return toSerialize, nil
}

func (o *DSESolrInfo) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"solrNodes",
		"solrPort",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDSESolrInfo := _DSESolrInfo{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDSESolrInfo)

	if err != nil {
		return err
	}

	*o = DSESolrInfo(varDSESolrInfo)

	return err
}

type NullableDSESolrInfo struct {
	value *DSESolrInfo
	isSet bool
}

func (v NullableDSESolrInfo) Get() *DSESolrInfo {
	return v.value
}

func (v *NullableDSESolrInfo) Set(val *DSESolrInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableDSESolrInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableDSESolrInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDSESolrInfo(val *DSESolrInfo) *NullableDSESolrInfo {
	return &NullableDSESolrInfo{value: val, isSet: true}
}

func (v NullableDSESolrInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDSESolrInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


