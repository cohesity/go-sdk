/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UdaConnectorConfigParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UdaConnectorConfigParams{}

// UdaConnectorConfigParams Specifies the request parameters to create/update a new UDA connector config.
type UdaConnectorConfigParams struct {
	// Specifies the index config as json string.
	IndexConfig NullableString `json:"indexConfig,omitempty"`
	// Specifies operating system specific configuration.
	OsSpecificConfig []UdaOSSpecificConfigParams `json:"osSpecificConfig,omitempty"`
	// If true, any existing connector config with the the same ID is replaced if it exists.
	Replace NullableBool `json:"replace,omitempty"`
	// Specifies the translation messages for various locales. It maps locale name to their respective translation json strings.
	UiTranslationConfig []UdaLocaleSpecificTranslations `json:"uiTranslationConfig,omitempty"`
}

// NewUdaConnectorConfigParams instantiates a new UdaConnectorConfigParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaConnectorConfigParams() *UdaConnectorConfigParams {
	this := UdaConnectorConfigParams{}
	return &this
}

// NewUdaConnectorConfigParamsWithDefaults instantiates a new UdaConnectorConfigParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaConnectorConfigParamsWithDefaults() *UdaConnectorConfigParams {
	this := UdaConnectorConfigParams{}
	return &this
}

// GetIndexConfig returns the IndexConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaConnectorConfigParams) GetIndexConfig() string {
	if o == nil || IsNil(o.IndexConfig.Get()) {
		var ret string
		return ret
	}
	return *o.IndexConfig.Get()
}

// GetIndexConfigOk returns a tuple with the IndexConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaConnectorConfigParams) GetIndexConfigOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IndexConfig.Get(), o.IndexConfig.IsSet()
}

// HasIndexConfig returns a boolean if a field has been set.
func (o *UdaConnectorConfigParams) HasIndexConfig() bool {
	if o != nil && o.IndexConfig.IsSet() {
		return true
	}

	return false
}

// SetIndexConfig gets a reference to the given NullableString and assigns it to the IndexConfig field.
func (o *UdaConnectorConfigParams) SetIndexConfig(v string) {
	o.IndexConfig.Set(&v)
}
// SetIndexConfigNil sets the value for IndexConfig to be an explicit nil
func (o *UdaConnectorConfigParams) SetIndexConfigNil() {
	o.IndexConfig.Set(nil)
}

// UnsetIndexConfig ensures that no value is present for IndexConfig, not even an explicit nil
func (o *UdaConnectorConfigParams) UnsetIndexConfig() {
	o.IndexConfig.Unset()
}

// GetOsSpecificConfig returns the OsSpecificConfig field value if set, zero value otherwise.
func (o *UdaConnectorConfigParams) GetOsSpecificConfig() []UdaOSSpecificConfigParams {
	if o == nil || IsNil(o.OsSpecificConfig) {
		var ret []UdaOSSpecificConfigParams
		return ret
	}
	return o.OsSpecificConfig
}

// GetOsSpecificConfigOk returns a tuple with the OsSpecificConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdaConnectorConfigParams) GetOsSpecificConfigOk() ([]UdaOSSpecificConfigParams, bool) {
	if o == nil || IsNil(o.OsSpecificConfig) {
		return nil, false
	}
	return o.OsSpecificConfig, true
}

// HasOsSpecificConfig returns a boolean if a field has been set.
func (o *UdaConnectorConfigParams) HasOsSpecificConfig() bool {
	if o != nil && !IsNil(o.OsSpecificConfig) {
		return true
	}

	return false
}

// SetOsSpecificConfig gets a reference to the given []UdaOSSpecificConfigParams and assigns it to the OsSpecificConfig field.
func (o *UdaConnectorConfigParams) SetOsSpecificConfig(v []UdaOSSpecificConfigParams) {
	o.OsSpecificConfig = v
}

// GetReplace returns the Replace field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaConnectorConfigParams) GetReplace() bool {
	if o == nil || IsNil(o.Replace.Get()) {
		var ret bool
		return ret
	}
	return *o.Replace.Get()
}

// GetReplaceOk returns a tuple with the Replace field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaConnectorConfigParams) GetReplaceOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.Replace.Get(), o.Replace.IsSet()
}

// HasReplace returns a boolean if a field has been set.
func (o *UdaConnectorConfigParams) HasReplace() bool {
	if o != nil && o.Replace.IsSet() {
		return true
	}

	return false
}

// SetReplace gets a reference to the given NullableBool and assigns it to the Replace field.
func (o *UdaConnectorConfigParams) SetReplace(v bool) {
	o.Replace.Set(&v)
}
// SetReplaceNil sets the value for Replace to be an explicit nil
func (o *UdaConnectorConfigParams) SetReplaceNil() {
	o.Replace.Set(nil)
}

// UnsetReplace ensures that no value is present for Replace, not even an explicit nil
func (o *UdaConnectorConfigParams) UnsetReplace() {
	o.Replace.Unset()
}

// GetUiTranslationConfig returns the UiTranslationConfig field value if set, zero value otherwise.
func (o *UdaConnectorConfigParams) GetUiTranslationConfig() []UdaLocaleSpecificTranslations {
	if o == nil || IsNil(o.UiTranslationConfig) {
		var ret []UdaLocaleSpecificTranslations
		return ret
	}
	return o.UiTranslationConfig
}

// GetUiTranslationConfigOk returns a tuple with the UiTranslationConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdaConnectorConfigParams) GetUiTranslationConfigOk() ([]UdaLocaleSpecificTranslations, bool) {
	if o == nil || IsNil(o.UiTranslationConfig) {
		return nil, false
	}
	return o.UiTranslationConfig, true
}

// HasUiTranslationConfig returns a boolean if a field has been set.
func (o *UdaConnectorConfigParams) HasUiTranslationConfig() bool {
	if o != nil && !IsNil(o.UiTranslationConfig) {
		return true
	}

	return false
}

// SetUiTranslationConfig gets a reference to the given []UdaLocaleSpecificTranslations and assigns it to the UiTranslationConfig field.
func (o *UdaConnectorConfigParams) SetUiTranslationConfig(v []UdaLocaleSpecificTranslations) {
	o.UiTranslationConfig = v
}

func (o UdaConnectorConfigParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UdaConnectorConfigParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.IndexConfig.IsSet() {
		toSerialize["indexConfig"] = o.IndexConfig.Get()
	}
	if !IsNil(o.OsSpecificConfig) {
		toSerialize["osSpecificConfig"] = o.OsSpecificConfig
	}
	if o.Replace.IsSet() {
		toSerialize["replace"] = o.Replace.Get()
	}
	if !IsNil(o.UiTranslationConfig) {
		toSerialize["uiTranslationConfig"] = o.UiTranslationConfig
	}
	return toSerialize, nil
}

type NullableUdaConnectorConfigParams struct {
	value *UdaConnectorConfigParams
	isSet bool
}

func (v NullableUdaConnectorConfigParams) Get() *UdaConnectorConfigParams {
	return v.value
}

func (v *NullableUdaConnectorConfigParams) Set(val *UdaConnectorConfigParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaConnectorConfigParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaConnectorConfigParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaConnectorConfigParams(val *UdaConnectorConfigParams) *NullableUdaConnectorConfigParams {
	return &NullableUdaConnectorConfigParams{value: val, isSet: true}
}

func (v NullableUdaConnectorConfigParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaConnectorConfigParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


