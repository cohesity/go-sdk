/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the IdentityConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IdentityConfig{}

// IdentityConfig Identity Provider Configuration
type IdentityConfig struct {
	// Specifies domain of idp configuration
	Domain NullableString `json:"domain"`
	// Specifies the ID of the IDP.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the type of identity provider.
	IdentityProviderType NullableString `json:"identityProviderType"`
	// Specifies a flag to enable or disable this idp service. When it is set to true, idp service is enabled. When it is set to false, idp service is disabled. By defaut idp is enabled i.e the value is true.
	IsEnabled NullableBool `json:"isEnabled,omitempty"`
	// Specifies the last time this configuration was modified in microseconds since the epoch. This is may be specified for PUT operations to prevent stale requests from being written. If it is specified during a PUT operation then the request will be rejected if the specified time does not match the actual last modified time.
	LastModifiedTimestampUsecs NullableInt64 `json:"lastModifiedTimestampUsecs,omitempty"`
	OAuth2Params *OAuth2Provider `json:"oAuth2Params,omitempty"`
	OpenIdConnectParams *OpenIdProvider `json:"openIdConnectParams,omitempty"`
	// Specifies the tenant id if the idp is configured for a tenant. If this is not set, this idp configuration is used for the cluster level users and for all users of tenants not having an idp configuration.
	TenantId NullableString `json:"tenantId,omitempty"`
}

type _IdentityConfig IdentityConfig

// NewIdentityConfig instantiates a new IdentityConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdentityConfig(domain NullableString, identityProviderType NullableString) *IdentityConfig {
	this := IdentityConfig{}
	this.Domain = domain
	this.IdentityProviderType = identityProviderType
	var isEnabled bool = true
	this.IsEnabled = *NewNullableBool(&isEnabled)
	return &this
}

// NewIdentityConfigWithDefaults instantiates a new IdentityConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdentityConfigWithDefaults() *IdentityConfig {
	this := IdentityConfig{}
	var isEnabled bool = true
	this.IsEnabled = *NewNullableBool(&isEnabled)
	return &this
}

// GetDomain returns the Domain field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IdentityConfig) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}

	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityConfig) GetDomainOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// SetDomain sets field value
func (o *IdentityConfig) SetDomain(v string) {
	o.Domain.Set(&v)
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityConfig) GetId() int64 {
	if o == nil || IsNil(o.Id.Get()) {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityConfig) GetIdOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *IdentityConfig) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *IdentityConfig) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *IdentityConfig) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *IdentityConfig) UnsetId() {
	o.Id.Unset()
}

// GetIdentityProviderType returns the IdentityProviderType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IdentityConfig) GetIdentityProviderType() string {
	if o == nil || o.IdentityProviderType.Get() == nil {
		var ret string
		return ret
	}

	return *o.IdentityProviderType.Get()
}

// GetIdentityProviderTypeOk returns a tuple with the IdentityProviderType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityConfig) GetIdentityProviderTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.IdentityProviderType.Get(), o.IdentityProviderType.IsSet()
}

// SetIdentityProviderType sets field value
func (o *IdentityConfig) SetIdentityProviderType(v string) {
	o.IdentityProviderType.Set(&v)
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityConfig) GetIsEnabled() bool {
	if o == nil || IsNil(o.IsEnabled.Get()) {
		var ret bool
		return ret
	}
	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityConfig) GetIsEnabledOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *IdentityConfig) HasIsEnabled() bool {
	if o != nil && o.IsEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given NullableBool and assigns it to the IsEnabled field.
func (o *IdentityConfig) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}
// SetIsEnabledNil sets the value for IsEnabled to be an explicit nil
func (o *IdentityConfig) SetIsEnabledNil() {
	o.IsEnabled.Set(nil)
}

// UnsetIsEnabled ensures that no value is present for IsEnabled, not even an explicit nil
func (o *IdentityConfig) UnsetIsEnabled() {
	o.IsEnabled.Unset()
}

// GetLastModifiedTimestampUsecs returns the LastModifiedTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityConfig) GetLastModifiedTimestampUsecs() int64 {
	if o == nil || IsNil(o.LastModifiedTimestampUsecs.Get()) {
		var ret int64
		return ret
	}
	return *o.LastModifiedTimestampUsecs.Get()
}

// GetLastModifiedTimestampUsecsOk returns a tuple with the LastModifiedTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityConfig) GetLastModifiedTimestampUsecsOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return o.LastModifiedTimestampUsecs.Get(), o.LastModifiedTimestampUsecs.IsSet()
}

// HasLastModifiedTimestampUsecs returns a boolean if a field has been set.
func (o *IdentityConfig) HasLastModifiedTimestampUsecs() bool {
	if o != nil && o.LastModifiedTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetLastModifiedTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the LastModifiedTimestampUsecs field.
func (o *IdentityConfig) SetLastModifiedTimestampUsecs(v int64) {
	o.LastModifiedTimestampUsecs.Set(&v)
}
// SetLastModifiedTimestampUsecsNil sets the value for LastModifiedTimestampUsecs to be an explicit nil
func (o *IdentityConfig) SetLastModifiedTimestampUsecsNil() {
	o.LastModifiedTimestampUsecs.Set(nil)
}

// UnsetLastModifiedTimestampUsecs ensures that no value is present for LastModifiedTimestampUsecs, not even an explicit nil
func (o *IdentityConfig) UnsetLastModifiedTimestampUsecs() {
	o.LastModifiedTimestampUsecs.Unset()
}

// GetOAuth2Params returns the OAuth2Params field value if set, zero value otherwise.
func (o *IdentityConfig) GetOAuth2Params() OAuth2Provider {
	if o == nil || IsNil(o.OAuth2Params) {
		var ret OAuth2Provider
		return ret
	}
	return *o.OAuth2Params
}

// GetOAuth2ParamsOk returns a tuple with the OAuth2Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityConfig) GetOAuth2ParamsOk() (*OAuth2Provider, bool) {
	if o == nil || IsNil(o.OAuth2Params) {
		return nil, false
	}
	return o.OAuth2Params, true
}

// HasOAuth2Params returns a boolean if a field has been set.
func (o *IdentityConfig) HasOAuth2Params() bool {
	if o != nil && !IsNil(o.OAuth2Params) {
		return true
	}

	return false
}

// SetOAuth2Params gets a reference to the given OAuth2Provider and assigns it to the OAuth2Params field.
func (o *IdentityConfig) SetOAuth2Params(v OAuth2Provider) {
	o.OAuth2Params = &v
}

// GetOpenIdConnectParams returns the OpenIdConnectParams field value if set, zero value otherwise.
func (o *IdentityConfig) GetOpenIdConnectParams() OpenIdProvider {
	if o == nil || IsNil(o.OpenIdConnectParams) {
		var ret OpenIdProvider
		return ret
	}
	return *o.OpenIdConnectParams
}

// GetOpenIdConnectParamsOk returns a tuple with the OpenIdConnectParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdentityConfig) GetOpenIdConnectParamsOk() (*OpenIdProvider, bool) {
	if o == nil || IsNil(o.OpenIdConnectParams) {
		return nil, false
	}
	return o.OpenIdConnectParams, true
}

// HasOpenIdConnectParams returns a boolean if a field has been set.
func (o *IdentityConfig) HasOpenIdConnectParams() bool {
	if o != nil && !IsNil(o.OpenIdConnectParams) {
		return true
	}

	return false
}

// SetOpenIdConnectParams gets a reference to the given OpenIdProvider and assigns it to the OpenIdConnectParams field.
func (o *IdentityConfig) SetOpenIdConnectParams(v OpenIdProvider) {
	o.OpenIdConnectParams = &v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IdentityConfig) GetTenantId() string {
	if o == nil || IsNil(o.TenantId.Get()) {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdentityConfig) GetTenantIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *IdentityConfig) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *IdentityConfig) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *IdentityConfig) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *IdentityConfig) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o IdentityConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IdentityConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["domain"] = o.Domain.Get()
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	toSerialize["identityProviderType"] = o.IdentityProviderType.Get()
	if o.IsEnabled.IsSet() {
		toSerialize["isEnabled"] = o.IsEnabled.Get()
	}
	if o.LastModifiedTimestampUsecs.IsSet() {
		toSerialize["lastModifiedTimestampUsecs"] = o.LastModifiedTimestampUsecs.Get()
	}
	if !IsNil(o.OAuth2Params) {
		toSerialize["oAuth2Params"] = o.OAuth2Params
	}
	if !IsNil(o.OpenIdConnectParams) {
		toSerialize["openIdConnectParams"] = o.OpenIdConnectParams
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return toSerialize, nil
}

func (o *IdentityConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"domain",
		"identityProviderType",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIdentityConfig := _IdentityConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varIdentityConfig)

	if err != nil {
		return err
	}

	*o = IdentityConfig(varIdentityConfig)

	return err
}

type NullableIdentityConfig struct {
	value *IdentityConfig
	isSet bool
}

func (v NullableIdentityConfig) Get() *IdentityConfig {
	return v.value
}

func (v *NullableIdentityConfig) Set(val *IdentityConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableIdentityConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableIdentityConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdentityConfig(val *IdentityConfig) *NullableIdentityConfig {
	return &NullableIdentityConfig{value: val, isSet: true}
}

func (v NullableIdentityConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdentityConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


