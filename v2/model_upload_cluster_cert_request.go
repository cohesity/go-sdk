/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the UploadClusterCertRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UploadClusterCertRequest{}

// UploadClusterCertRequest Specifies the payload for the upload cluster certificates request
type UploadClusterCertRequest struct {
	// Array of certificates
	Certificates []Certificate `json:"certificates,omitempty"`
}

// NewUploadClusterCertRequest instantiates a new UploadClusterCertRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUploadClusterCertRequest() *UploadClusterCertRequest {
	this := UploadClusterCertRequest{}
	return &this
}

// NewUploadClusterCertRequestWithDefaults instantiates a new UploadClusterCertRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUploadClusterCertRequestWithDefaults() *UploadClusterCertRequest {
	this := UploadClusterCertRequest{}
	return &this
}

// GetCertificates returns the Certificates field value if set, zero value otherwise.
func (o *UploadClusterCertRequest) GetCertificates() []Certificate {
	if o == nil || IsNil(o.Certificates) {
		var ret []Certificate
		return ret
	}
	return o.Certificates
}

// GetCertificatesOk returns a tuple with the Certificates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UploadClusterCertRequest) GetCertificatesOk() ([]Certificate, bool) {
	if o == nil || IsNil(o.Certificates) {
		return nil, false
	}
	return o.Certificates, true
}

// HasCertificates returns a boolean if a field has been set.
func (o *UploadClusterCertRequest) HasCertificates() bool {
	if o != nil && !IsNil(o.Certificates) {
		return true
	}

	return false
}

// SetCertificates gets a reference to the given []Certificate and assigns it to the Certificates field.
func (o *UploadClusterCertRequest) SetCertificates(v []Certificate) {
	o.Certificates = v
}

func (o UploadClusterCertRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UploadClusterCertRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Certificates) {
		toSerialize["certificates"] = o.Certificates
	}
	return toSerialize, nil
}

type NullableUploadClusterCertRequest struct {
	value *UploadClusterCertRequest
	isSet bool
}

func (v NullableUploadClusterCertRequest) Get() *UploadClusterCertRequest {
	return v.value
}

func (v *NullableUploadClusterCertRequest) Set(val *UploadClusterCertRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUploadClusterCertRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUploadClusterCertRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUploadClusterCertRequest(val *UploadClusterCertRequest) *NullableUploadClusterCertRequest {
	return &NullableUploadClusterCertRequest{value: val, isSet: true}
}

func (v NullableUploadClusterCertRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUploadClusterCertRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


