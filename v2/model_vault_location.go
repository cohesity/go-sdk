/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the VaultLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VaultLocation{}

// VaultLocation Contains Vault info.
type VaultLocation struct {
	// Denotes the id of the vault.
	VaultId *int64 `json:"vaultId,omitempty"`
}

// NewVaultLocation instantiates a new VaultLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultLocation() *VaultLocation {
	this := VaultLocation{}
	return &this
}

// NewVaultLocationWithDefaults instantiates a new VaultLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultLocationWithDefaults() *VaultLocation {
	this := VaultLocation{}
	return &this
}

// GetVaultId returns the VaultId field value if set, zero value otherwise.
func (o *VaultLocation) GetVaultId() int64 {
	if o == nil || IsNil(o.VaultId) {
		var ret int64
		return ret
	}
	return *o.VaultId
}

// GetVaultIdOk returns a tuple with the VaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultLocation) GetVaultIdOk() (*int64, bool) {
	if o == nil || IsNil(o.VaultId) {
		return nil, false
	}
	return o.VaultId, true
}

// HasVaultId returns a boolean if a field has been set.
func (o *VaultLocation) HasVaultId() bool {
	if o != nil && !IsNil(o.VaultId) {
		return true
	}

	return false
}

// SetVaultId gets a reference to the given int64 and assigns it to the VaultId field.
func (o *VaultLocation) SetVaultId(v int64) {
	o.VaultId = &v
}

func (o VaultLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VaultLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VaultId) {
		toSerialize["vaultId"] = o.VaultId
	}
	return toSerialize, nil
}

type NullableVaultLocation struct {
	value *VaultLocation
	isSet bool
}

func (v NullableVaultLocation) Get() *VaultLocation {
	return v.value
}

func (v *NullableVaultLocation) Set(val *VaultLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultLocation(val *VaultLocation) *NullableVaultLocation {
	return &NullableVaultLocation{value: val, isSet: true}
}

func (v NullableVaultLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


