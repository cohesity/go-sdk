/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
)

// checks if the HdfsConnectionType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HdfsConnectionType{}

// HdfsConnectionType Enumeration of all the HDFS Connection type.
type HdfsConnectionType struct {
	// Enumeration of all the HDFS Connection type.
	HdfsConnectionType *string `json:"HdfsConnectionType,omitempty"`
}

// NewHdfsConnectionType instantiates a new HdfsConnectionType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHdfsConnectionType() *HdfsConnectionType {
	this := HdfsConnectionType{}
	return &this
}

// NewHdfsConnectionTypeWithDefaults instantiates a new HdfsConnectionType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHdfsConnectionTypeWithDefaults() *HdfsConnectionType {
	this := HdfsConnectionType{}
	return &this
}

// GetHdfsConnectionType returns the HdfsConnectionType field value if set, zero value otherwise.
func (o *HdfsConnectionType) GetHdfsConnectionType() string {
	if o == nil || IsNil(o.HdfsConnectionType) {
		var ret string
		return ret
	}
	return *o.HdfsConnectionType
}

// GetHdfsConnectionTypeOk returns a tuple with the HdfsConnectionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HdfsConnectionType) GetHdfsConnectionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.HdfsConnectionType) {
		return nil, false
	}
	return o.HdfsConnectionType, true
}

// HasHdfsConnectionType returns a boolean if a field has been set.
func (o *HdfsConnectionType) HasHdfsConnectionType() bool {
	if o != nil && !IsNil(o.HdfsConnectionType) {
		return true
	}

	return false
}

// SetHdfsConnectionType gets a reference to the given string and assigns it to the HdfsConnectionType field.
func (o *HdfsConnectionType) SetHdfsConnectionType(v string) {
	o.HdfsConnectionType = &v
}

func (o HdfsConnectionType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HdfsConnectionType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.HdfsConnectionType) {
		toSerialize["HdfsConnectionType"] = o.HdfsConnectionType
	}
	return toSerialize, nil
}

type NullableHdfsConnectionType struct {
	value *HdfsConnectionType
	isSet bool
}

func (v NullableHdfsConnectionType) Get() *HdfsConnectionType {
	return v.value
}

func (v *NullableHdfsConnectionType) Set(val *HdfsConnectionType) {
	v.value = val
	v.isSet = true
}

func (v NullableHdfsConnectionType) IsSet() bool {
	return v.isSet
}

func (v *NullableHdfsConnectionType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHdfsConnectionType(val *HdfsConnectionType) *NullableHdfsConnectionType {
	return &NullableHdfsConnectionType{value: val, isSet: true}
}

func (v NullableHdfsConnectionType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHdfsConnectionType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


