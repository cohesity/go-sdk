/*
Cohesity REST API

Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.

API version: 2.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v2

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RecoverKubernetesNamespaceParams type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RecoverKubernetesNamespaceParams{}

// RecoverKubernetesNamespaceParams Specifies the parameters to recover Kubernetes Namespaces.
type RecoverKubernetesNamespaceParams struct {
	KubernetesTargetParams NullableRecoverKubernetesNamespaceParamsKubernetesTargetParams `json:"kubernetesTargetParams,omitempty"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	VlanConfig NullableRecoverKubernetesNamespaceParamsVlanConfig `json:"vlanConfig,omitempty"`
}

type _RecoverKubernetesNamespaceParams RecoverKubernetesNamespaceParams

// NewRecoverKubernetesNamespaceParams instantiates a new RecoverKubernetesNamespaceParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverKubernetesNamespaceParams(targetEnvironment string) *RecoverKubernetesNamespaceParams {
	this := RecoverKubernetesNamespaceParams{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverKubernetesNamespaceParamsWithDefaults instantiates a new RecoverKubernetesNamespaceParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverKubernetesNamespaceParamsWithDefaults() *RecoverKubernetesNamespaceParams {
	this := RecoverKubernetesNamespaceParams{}
	return &this
}

// GetKubernetesTargetParams returns the KubernetesTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverKubernetesNamespaceParams) GetKubernetesTargetParams() RecoverKubernetesNamespaceParamsKubernetesTargetParams {
	if o == nil || IsNil(o.KubernetesTargetParams.Get()) {
		var ret RecoverKubernetesNamespaceParamsKubernetesTargetParams
		return ret
	}
	return *o.KubernetesTargetParams.Get()
}

// GetKubernetesTargetParamsOk returns a tuple with the KubernetesTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverKubernetesNamespaceParams) GetKubernetesTargetParamsOk() (*RecoverKubernetesNamespaceParamsKubernetesTargetParams, bool) {
	if o == nil {
		return nil, false
	}
	return o.KubernetesTargetParams.Get(), o.KubernetesTargetParams.IsSet()
}

// HasKubernetesTargetParams returns a boolean if a field has been set.
func (o *RecoverKubernetesNamespaceParams) HasKubernetesTargetParams() bool {
	if o != nil && o.KubernetesTargetParams.IsSet() {
		return true
	}

	return false
}

// SetKubernetesTargetParams gets a reference to the given NullableRecoverKubernetesNamespaceParamsKubernetesTargetParams and assigns it to the KubernetesTargetParams field.
func (o *RecoverKubernetesNamespaceParams) SetKubernetesTargetParams(v RecoverKubernetesNamespaceParamsKubernetesTargetParams) {
	o.KubernetesTargetParams.Set(&v)
}
// SetKubernetesTargetParamsNil sets the value for KubernetesTargetParams to be an explicit nil
func (o *RecoverKubernetesNamespaceParams) SetKubernetesTargetParamsNil() {
	o.KubernetesTargetParams.Set(nil)
}

// UnsetKubernetesTargetParams ensures that no value is present for KubernetesTargetParams, not even an explicit nil
func (o *RecoverKubernetesNamespaceParams) UnsetKubernetesTargetParams() {
	o.KubernetesTargetParams.Unset()
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverKubernetesNamespaceParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverKubernetesNamespaceParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverKubernetesNamespaceParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetVlanConfig returns the VlanConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverKubernetesNamespaceParams) GetVlanConfig() RecoverKubernetesNamespaceParamsVlanConfig {
	if o == nil || IsNil(o.VlanConfig.Get()) {
		var ret RecoverKubernetesNamespaceParamsVlanConfig
		return ret
	}
	return *o.VlanConfig.Get()
}

// GetVlanConfigOk returns a tuple with the VlanConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverKubernetesNamespaceParams) GetVlanConfigOk() (*RecoverKubernetesNamespaceParamsVlanConfig, bool) {
	if o == nil {
		return nil, false
	}
	return o.VlanConfig.Get(), o.VlanConfig.IsSet()
}

// HasVlanConfig returns a boolean if a field has been set.
func (o *RecoverKubernetesNamespaceParams) HasVlanConfig() bool {
	if o != nil && o.VlanConfig.IsSet() {
		return true
	}

	return false
}

// SetVlanConfig gets a reference to the given NullableRecoverKubernetesNamespaceParamsVlanConfig and assigns it to the VlanConfig field.
func (o *RecoverKubernetesNamespaceParams) SetVlanConfig(v RecoverKubernetesNamespaceParamsVlanConfig) {
	o.VlanConfig.Set(&v)
}
// SetVlanConfigNil sets the value for VlanConfig to be an explicit nil
func (o *RecoverKubernetesNamespaceParams) SetVlanConfigNil() {
	o.VlanConfig.Set(nil)
}

// UnsetVlanConfig ensures that no value is present for VlanConfig, not even an explicit nil
func (o *RecoverKubernetesNamespaceParams) UnsetVlanConfig() {
	o.VlanConfig.Unset()
}

func (o RecoverKubernetesNamespaceParams) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RecoverKubernetesNamespaceParams) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.KubernetesTargetParams.IsSet() {
		toSerialize["kubernetesTargetParams"] = o.KubernetesTargetParams.Get()
	}
	toSerialize["targetEnvironment"] = o.TargetEnvironment
	if o.VlanConfig.IsSet() {
		toSerialize["vlanConfig"] = o.VlanConfig.Get()
	}
	return toSerialize, nil
}

func (o *RecoverKubernetesNamespaceParams) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"targetEnvironment",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRecoverKubernetesNamespaceParams := _RecoverKubernetesNamespaceParams{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRecoverKubernetesNamespaceParams)

	if err != nil {
		return err
	}

	*o = RecoverKubernetesNamespaceParams(varRecoverKubernetesNamespaceParams)

	return err
}

type NullableRecoverKubernetesNamespaceParams struct {
	value *RecoverKubernetesNamespaceParams
	isSet bool
}

func (v NullableRecoverKubernetesNamespaceParams) Get() *RecoverKubernetesNamespaceParams {
	return v.value
}

func (v *NullableRecoverKubernetesNamespaceParams) Set(val *RecoverKubernetesNamespaceParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverKubernetesNamespaceParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverKubernetesNamespaceParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverKubernetesNamespaceParams(val *RecoverKubernetesNamespaceParams) *NullableRecoverKubernetesNamespaceParams {
	return &NullableRecoverKubernetesNamespaceParams{value: val, isSet: true}
}

func (v NullableRecoverKubernetesNamespaceParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverKubernetesNamespaceParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


