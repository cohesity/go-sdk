/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TestIdpReachability Specifies the parameters to test the reachability of an IdP.
type TestIdpReachability struct {
	// Specifies the IdP provided Issuer ID for the app.
	IssuerId NullableString `json:"issuerId,omitempty"`
	// Specifies the SSO URL of the IdP service for the customer. This is the URL given by IdP when the customer created an account. Customers may use this for several clusters that are registered with on IdP site.
	SsoUrl NullableString `json:"ssoUrl,omitempty"`
}

// NewTestIdpReachability instantiates a new TestIdpReachability object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTestIdpReachability() *TestIdpReachability {
	this := TestIdpReachability{}
	return &this
}

// NewTestIdpReachabilityWithDefaults instantiates a new TestIdpReachability object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTestIdpReachabilityWithDefaults() *TestIdpReachability {
	this := TestIdpReachability{}
	return &this
}

// GetIssuerId returns the IssuerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestIdpReachability) GetIssuerId() string {
	if o == nil || o.IssuerId.Get() == nil {
		var ret string
		return ret
	}
	return *o.IssuerId.Get()
}

// GetIssuerIdOk returns a tuple with the IssuerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestIdpReachability) GetIssuerIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IssuerId.Get(), o.IssuerId.IsSet()
}

// HasIssuerId returns a boolean if a field has been set.
func (o *TestIdpReachability) HasIssuerId() bool {
	if o != nil && o.IssuerId.IsSet() {
		return true
	}

	return false
}

// SetIssuerId gets a reference to the given NullableString and assigns it to the IssuerId field.
func (o *TestIdpReachability) SetIssuerId(v string) {
	o.IssuerId.Set(&v)
}
// SetIssuerIdNil sets the value for IssuerId to be an explicit nil
func (o *TestIdpReachability) SetIssuerIdNil() {
	o.IssuerId.Set(nil)
}

// UnsetIssuerId ensures that no value is present for IssuerId, not even an explicit nil
func (o *TestIdpReachability) UnsetIssuerId() {
	o.IssuerId.Unset()
}

// GetSsoUrl returns the SsoUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TestIdpReachability) GetSsoUrl() string {
	if o == nil || o.SsoUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.SsoUrl.Get()
}

// GetSsoUrlOk returns a tuple with the SsoUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TestIdpReachability) GetSsoUrlOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SsoUrl.Get(), o.SsoUrl.IsSet()
}

// HasSsoUrl returns a boolean if a field has been set.
func (o *TestIdpReachability) HasSsoUrl() bool {
	if o != nil && o.SsoUrl.IsSet() {
		return true
	}

	return false
}

// SetSsoUrl gets a reference to the given NullableString and assigns it to the SsoUrl field.
func (o *TestIdpReachability) SetSsoUrl(v string) {
	o.SsoUrl.Set(&v)
}
// SetSsoUrlNil sets the value for SsoUrl to be an explicit nil
func (o *TestIdpReachability) SetSsoUrlNil() {
	o.SsoUrl.Set(nil)
}

// UnsetSsoUrl ensures that no value is present for SsoUrl, not even an explicit nil
func (o *TestIdpReachability) UnsetSsoUrl() {
	o.SsoUrl.Unset()
}

func (o TestIdpReachability) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IssuerId.IsSet() {
		toSerialize["issuerId"] = o.IssuerId.Get()
	}
	if o.SsoUrl.IsSet() {
		toSerialize["ssoUrl"] = o.SsoUrl.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTestIdpReachability struct {
	value *TestIdpReachability
	isSet bool
}

func (v NullableTestIdpReachability) Get() *TestIdpReachability {
	return v.value
}

func (v *NullableTestIdpReachability) Set(val *TestIdpReachability) {
	v.value = val
	v.isSet = true
}

func (v NullableTestIdpReachability) IsSet() bool {
	return v.isSet
}

func (v *NullableTestIdpReachability) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTestIdpReachability(val *TestIdpReachability) *NullableTestIdpReachability {
	return &NullableTestIdpReachability{value: val, isSet: true}
}

func (v NullableTestIdpReachability) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTestIdpReachability) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


