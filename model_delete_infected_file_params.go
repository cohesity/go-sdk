/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DeleteInfectedFileParams struct for DeleteInfectedFileParams
type DeleteInfectedFileParams struct {
	// Specifies the list of infected file path.
	InfectedFileIds []InfectedFileParam `json:"infectedFileIds,omitempty"`
}

// NewDeleteInfectedFileParams instantiates a new DeleteInfectedFileParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteInfectedFileParams() *DeleteInfectedFileParams {
	this := DeleteInfectedFileParams{}
	return &this
}

// NewDeleteInfectedFileParamsWithDefaults instantiates a new DeleteInfectedFileParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteInfectedFileParamsWithDefaults() *DeleteInfectedFileParams {
	this := DeleteInfectedFileParams{}
	return &this
}

// GetInfectedFileIds returns the InfectedFileIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteInfectedFileParams) GetInfectedFileIds() []InfectedFileParam {
	if o == nil  {
		var ret []InfectedFileParam
		return ret
	}
	return o.InfectedFileIds
}

// GetInfectedFileIdsOk returns a tuple with the InfectedFileIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteInfectedFileParams) GetInfectedFileIdsOk() (*[]InfectedFileParam, bool) {
	if o == nil || o.InfectedFileIds == nil {
		return nil, false
	}
	return &o.InfectedFileIds, true
}

// HasInfectedFileIds returns a boolean if a field has been set.
func (o *DeleteInfectedFileParams) HasInfectedFileIds() bool {
	if o != nil && o.InfectedFileIds != nil {
		return true
	}

	return false
}

// SetInfectedFileIds gets a reference to the given []InfectedFileParam and assigns it to the InfectedFileIds field.
func (o *DeleteInfectedFileParams) SetInfectedFileIds(v []InfectedFileParam) {
	o.InfectedFileIds = v
}

func (o DeleteInfectedFileParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InfectedFileIds != nil {
		toSerialize["infectedFileIds"] = o.InfectedFileIds
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteInfectedFileParams struct {
	value *DeleteInfectedFileParams
	isSet bool
}

func (v NullableDeleteInfectedFileParams) Get() *DeleteInfectedFileParams {
	return v.value
}

func (v *NullableDeleteInfectedFileParams) Set(val *DeleteInfectedFileParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteInfectedFileParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteInfectedFileParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteInfectedFileParams(val *DeleteInfectedFileParams) *NullableDeleteInfectedFileParams {
	return &NullableDeleteInfectedFileParams{value: val, isSet: true}
}

func (v NullableDeleteInfectedFileParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteInfectedFileParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


