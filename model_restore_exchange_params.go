/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreExchangeParams struct for RestoreExchangeParams
type RestoreExchangeParams struct {
	DatabaseOptions *RestoreExchangeParamsDatabaseOptions `json:"databaseOptions,omitempty"`
	// Restore type.
	Type NullableInt32 `json:"type,omitempty"`
	ViewOptions *RestoreExchangeParamsViewOptions `json:"viewOptions,omitempty"`
}

// NewRestoreExchangeParams instantiates a new RestoreExchangeParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreExchangeParams() *RestoreExchangeParams {
	this := RestoreExchangeParams{}
	return &this
}

// NewRestoreExchangeParamsWithDefaults instantiates a new RestoreExchangeParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreExchangeParamsWithDefaults() *RestoreExchangeParams {
	this := RestoreExchangeParams{}
	return &this
}

// GetDatabaseOptions returns the DatabaseOptions field value if set, zero value otherwise.
func (o *RestoreExchangeParams) GetDatabaseOptions() RestoreExchangeParamsDatabaseOptions {
	if o == nil || o.DatabaseOptions == nil {
		var ret RestoreExchangeParamsDatabaseOptions
		return ret
	}
	return *o.DatabaseOptions
}

// GetDatabaseOptionsOk returns a tuple with the DatabaseOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreExchangeParams) GetDatabaseOptionsOk() (*RestoreExchangeParamsDatabaseOptions, bool) {
	if o == nil || o.DatabaseOptions == nil {
		return nil, false
	}
	return o.DatabaseOptions, true
}

// HasDatabaseOptions returns a boolean if a field has been set.
func (o *RestoreExchangeParams) HasDatabaseOptions() bool {
	if o != nil && o.DatabaseOptions != nil {
		return true
	}

	return false
}

// SetDatabaseOptions gets a reference to the given RestoreExchangeParamsDatabaseOptions and assigns it to the DatabaseOptions field.
func (o *RestoreExchangeParams) SetDatabaseOptions(v RestoreExchangeParamsDatabaseOptions) {
	o.DatabaseOptions = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreExchangeParams) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreExchangeParams) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *RestoreExchangeParams) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *RestoreExchangeParams) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *RestoreExchangeParams) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *RestoreExchangeParams) UnsetType() {
	o.Type.Unset()
}

// GetViewOptions returns the ViewOptions field value if set, zero value otherwise.
func (o *RestoreExchangeParams) GetViewOptions() RestoreExchangeParamsViewOptions {
	if o == nil || o.ViewOptions == nil {
		var ret RestoreExchangeParamsViewOptions
		return ret
	}
	return *o.ViewOptions
}

// GetViewOptionsOk returns a tuple with the ViewOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreExchangeParams) GetViewOptionsOk() (*RestoreExchangeParamsViewOptions, bool) {
	if o == nil || o.ViewOptions == nil {
		return nil, false
	}
	return o.ViewOptions, true
}

// HasViewOptions returns a boolean if a field has been set.
func (o *RestoreExchangeParams) HasViewOptions() bool {
	if o != nil && o.ViewOptions != nil {
		return true
	}

	return false
}

// SetViewOptions gets a reference to the given RestoreExchangeParamsViewOptions and assigns it to the ViewOptions field.
func (o *RestoreExchangeParams) SetViewOptions(v RestoreExchangeParamsViewOptions) {
	o.ViewOptions = &v
}

func (o RestoreExchangeParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatabaseOptions != nil {
		toSerialize["databaseOptions"] = o.DatabaseOptions
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ViewOptions != nil {
		toSerialize["viewOptions"] = o.ViewOptions
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreExchangeParams struct {
	value *RestoreExchangeParams
	isSet bool
}

func (v NullableRestoreExchangeParams) Get() *RestoreExchangeParams {
	return v.value
}

func (v *NullableRestoreExchangeParams) Set(val *RestoreExchangeParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreExchangeParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreExchangeParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreExchangeParams(val *RestoreExchangeParams) *NullableRestoreExchangeParams {
	return &NullableRestoreExchangeParams{value: val, isSet: true}
}

func (v NullableRestoreExchangeParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreExchangeParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


