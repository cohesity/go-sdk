/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RemoteRestoreSnapshotStatus Specifies the status of a restore Snapshot task.
type RemoteRestoreSnapshotStatus struct {
	// Specifies the globally unique id of the archival task that archived the Snapshots to the remote Vault.
	ArchiveTaskUid NullableUniversalId `json:"archiveTaskUid,omitempty"`
	// Specifies the error message if the indexing task fails.
	Error NullableString `json:"error,omitempty"`
	// Specifies the time when the Snapshot expires on the remote Vault. This field is recorded as a Unix epoch Timestamp (in microseconds).
	ExpiryTimeUsecs NullableInt64 `json:"expiryTimeUsecs,omitempty"`
	// Specifies the id of the Job Run that originally captured the Snapshot.
	JobRunId NullableInt64 `json:"jobRunId,omitempty"`
	// Specifies the path to the progress monitor task that tracks the progress of building the index.
	ProgressMonitorTask NullableString `json:"progressMonitorTask,omitempty"`
	// Specifies the status of the indexing task. 'kJobRunning' indicates that the Job/task is currently running. 'kJobFinished' indicates that the Job/task completed and finished. 'kJobFailed' indicates that the Job/task failed and did not complete. 'kJobCanceled' indicates that the Job/task was canceled. 'kJobPaused' indicates the Job/task is paused.
	SnapshotTaskStatus NullableString `json:"snapshotTaskStatus,omitempty"`
	// Specifies the globally unique id of the task capturing the Snapshot.
	SnapshotTaskUid NullableUniversalId `json:"snapshotTaskUid,omitempty"`
	// Specify the time the Snapshot was captured. This time is recorded as a Unix epoch Timestamp (in microseconds).
	SnapshotTimeUsecs NullableInt64 `json:"snapshotTimeUsecs,omitempty"`
}

// NewRemoteRestoreSnapshotStatus instantiates a new RemoteRestoreSnapshotStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteRestoreSnapshotStatus() *RemoteRestoreSnapshotStatus {
	this := RemoteRestoreSnapshotStatus{}
	return &this
}

// NewRemoteRestoreSnapshotStatusWithDefaults instantiates a new RemoteRestoreSnapshotStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteRestoreSnapshotStatusWithDefaults() *RemoteRestoreSnapshotStatus {
	this := RemoteRestoreSnapshotStatus{}
	return &this
}

// GetArchiveTaskUid returns the ArchiveTaskUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreSnapshotStatus) GetArchiveTaskUid() UniversalId {
	if o == nil || o.ArchiveTaskUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.ArchiveTaskUid.Get()
}

// GetArchiveTaskUidOk returns a tuple with the ArchiveTaskUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreSnapshotStatus) GetArchiveTaskUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchiveTaskUid.Get(), o.ArchiveTaskUid.IsSet()
}

// HasArchiveTaskUid returns a boolean if a field has been set.
func (o *RemoteRestoreSnapshotStatus) HasArchiveTaskUid() bool {
	if o != nil && o.ArchiveTaskUid.IsSet() {
		return true
	}

	return false
}

// SetArchiveTaskUid gets a reference to the given NullableUniversalId and assigns it to the ArchiveTaskUid field.
func (o *RemoteRestoreSnapshotStatus) SetArchiveTaskUid(v UniversalId) {
	o.ArchiveTaskUid.Set(&v)
}
// SetArchiveTaskUidNil sets the value for ArchiveTaskUid to be an explicit nil
func (o *RemoteRestoreSnapshotStatus) SetArchiveTaskUidNil() {
	o.ArchiveTaskUid.Set(nil)
}

// UnsetArchiveTaskUid ensures that no value is present for ArchiveTaskUid, not even an explicit nil
func (o *RemoteRestoreSnapshotStatus) UnsetArchiveTaskUid() {
	o.ArchiveTaskUid.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreSnapshotStatus) GetError() string {
	if o == nil || o.Error.Get() == nil {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreSnapshotStatus) GetErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *RemoteRestoreSnapshotStatus) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *RemoteRestoreSnapshotStatus) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *RemoteRestoreSnapshotStatus) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *RemoteRestoreSnapshotStatus) UnsetError() {
	o.Error.Unset()
}

// GetExpiryTimeUsecs returns the ExpiryTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreSnapshotStatus) GetExpiryTimeUsecs() int64 {
	if o == nil || o.ExpiryTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiryTimeUsecs.Get()
}

// GetExpiryTimeUsecsOk returns a tuple with the ExpiryTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreSnapshotStatus) GetExpiryTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTimeUsecs.Get(), o.ExpiryTimeUsecs.IsSet()
}

// HasExpiryTimeUsecs returns a boolean if a field has been set.
func (o *RemoteRestoreSnapshotStatus) HasExpiryTimeUsecs() bool {
	if o != nil && o.ExpiryTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ExpiryTimeUsecs field.
func (o *RemoteRestoreSnapshotStatus) SetExpiryTimeUsecs(v int64) {
	o.ExpiryTimeUsecs.Set(&v)
}
// SetExpiryTimeUsecsNil sets the value for ExpiryTimeUsecs to be an explicit nil
func (o *RemoteRestoreSnapshotStatus) SetExpiryTimeUsecsNil() {
	o.ExpiryTimeUsecs.Set(nil)
}

// UnsetExpiryTimeUsecs ensures that no value is present for ExpiryTimeUsecs, not even an explicit nil
func (o *RemoteRestoreSnapshotStatus) UnsetExpiryTimeUsecs() {
	o.ExpiryTimeUsecs.Unset()
}

// GetJobRunId returns the JobRunId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreSnapshotStatus) GetJobRunId() int64 {
	if o == nil || o.JobRunId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.JobRunId.Get()
}

// GetJobRunIdOk returns a tuple with the JobRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreSnapshotStatus) GetJobRunIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobRunId.Get(), o.JobRunId.IsSet()
}

// HasJobRunId returns a boolean if a field has been set.
func (o *RemoteRestoreSnapshotStatus) HasJobRunId() bool {
	if o != nil && o.JobRunId.IsSet() {
		return true
	}

	return false
}

// SetJobRunId gets a reference to the given NullableInt64 and assigns it to the JobRunId field.
func (o *RemoteRestoreSnapshotStatus) SetJobRunId(v int64) {
	o.JobRunId.Set(&v)
}
// SetJobRunIdNil sets the value for JobRunId to be an explicit nil
func (o *RemoteRestoreSnapshotStatus) SetJobRunIdNil() {
	o.JobRunId.Set(nil)
}

// UnsetJobRunId ensures that no value is present for JobRunId, not even an explicit nil
func (o *RemoteRestoreSnapshotStatus) UnsetJobRunId() {
	o.JobRunId.Unset()
}

// GetProgressMonitorTask returns the ProgressMonitorTask field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreSnapshotStatus) GetProgressMonitorTask() string {
	if o == nil || o.ProgressMonitorTask.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProgressMonitorTask.Get()
}

// GetProgressMonitorTaskOk returns a tuple with the ProgressMonitorTask field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreSnapshotStatus) GetProgressMonitorTaskOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProgressMonitorTask.Get(), o.ProgressMonitorTask.IsSet()
}

// HasProgressMonitorTask returns a boolean if a field has been set.
func (o *RemoteRestoreSnapshotStatus) HasProgressMonitorTask() bool {
	if o != nil && o.ProgressMonitorTask.IsSet() {
		return true
	}

	return false
}

// SetProgressMonitorTask gets a reference to the given NullableString and assigns it to the ProgressMonitorTask field.
func (o *RemoteRestoreSnapshotStatus) SetProgressMonitorTask(v string) {
	o.ProgressMonitorTask.Set(&v)
}
// SetProgressMonitorTaskNil sets the value for ProgressMonitorTask to be an explicit nil
func (o *RemoteRestoreSnapshotStatus) SetProgressMonitorTaskNil() {
	o.ProgressMonitorTask.Set(nil)
}

// UnsetProgressMonitorTask ensures that no value is present for ProgressMonitorTask, not even an explicit nil
func (o *RemoteRestoreSnapshotStatus) UnsetProgressMonitorTask() {
	o.ProgressMonitorTask.Unset()
}

// GetSnapshotTaskStatus returns the SnapshotTaskStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreSnapshotStatus) GetSnapshotTaskStatus() string {
	if o == nil || o.SnapshotTaskStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.SnapshotTaskStatus.Get()
}

// GetSnapshotTaskStatusOk returns a tuple with the SnapshotTaskStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreSnapshotStatus) GetSnapshotTaskStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotTaskStatus.Get(), o.SnapshotTaskStatus.IsSet()
}

// HasSnapshotTaskStatus returns a boolean if a field has been set.
func (o *RemoteRestoreSnapshotStatus) HasSnapshotTaskStatus() bool {
	if o != nil && o.SnapshotTaskStatus.IsSet() {
		return true
	}

	return false
}

// SetSnapshotTaskStatus gets a reference to the given NullableString and assigns it to the SnapshotTaskStatus field.
func (o *RemoteRestoreSnapshotStatus) SetSnapshotTaskStatus(v string) {
	o.SnapshotTaskStatus.Set(&v)
}
// SetSnapshotTaskStatusNil sets the value for SnapshotTaskStatus to be an explicit nil
func (o *RemoteRestoreSnapshotStatus) SetSnapshotTaskStatusNil() {
	o.SnapshotTaskStatus.Set(nil)
}

// UnsetSnapshotTaskStatus ensures that no value is present for SnapshotTaskStatus, not even an explicit nil
func (o *RemoteRestoreSnapshotStatus) UnsetSnapshotTaskStatus() {
	o.SnapshotTaskStatus.Unset()
}

// GetSnapshotTaskUid returns the SnapshotTaskUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreSnapshotStatus) GetSnapshotTaskUid() UniversalId {
	if o == nil || o.SnapshotTaskUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.SnapshotTaskUid.Get()
}

// GetSnapshotTaskUidOk returns a tuple with the SnapshotTaskUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreSnapshotStatus) GetSnapshotTaskUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotTaskUid.Get(), o.SnapshotTaskUid.IsSet()
}

// HasSnapshotTaskUid returns a boolean if a field has been set.
func (o *RemoteRestoreSnapshotStatus) HasSnapshotTaskUid() bool {
	if o != nil && o.SnapshotTaskUid.IsSet() {
		return true
	}

	return false
}

// SetSnapshotTaskUid gets a reference to the given NullableUniversalId and assigns it to the SnapshotTaskUid field.
func (o *RemoteRestoreSnapshotStatus) SetSnapshotTaskUid(v UniversalId) {
	o.SnapshotTaskUid.Set(&v)
}
// SetSnapshotTaskUidNil sets the value for SnapshotTaskUid to be an explicit nil
func (o *RemoteRestoreSnapshotStatus) SetSnapshotTaskUidNil() {
	o.SnapshotTaskUid.Set(nil)
}

// UnsetSnapshotTaskUid ensures that no value is present for SnapshotTaskUid, not even an explicit nil
func (o *RemoteRestoreSnapshotStatus) UnsetSnapshotTaskUid() {
	o.SnapshotTaskUid.Unset()
}

// GetSnapshotTimeUsecs returns the SnapshotTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteRestoreSnapshotStatus) GetSnapshotTimeUsecs() int64 {
	if o == nil || o.SnapshotTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SnapshotTimeUsecs.Get()
}

// GetSnapshotTimeUsecsOk returns a tuple with the SnapshotTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteRestoreSnapshotStatus) GetSnapshotTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotTimeUsecs.Get(), o.SnapshotTimeUsecs.IsSet()
}

// HasSnapshotTimeUsecs returns a boolean if a field has been set.
func (o *RemoteRestoreSnapshotStatus) HasSnapshotTimeUsecs() bool {
	if o != nil && o.SnapshotTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetSnapshotTimeUsecs gets a reference to the given NullableInt64 and assigns it to the SnapshotTimeUsecs field.
func (o *RemoteRestoreSnapshotStatus) SetSnapshotTimeUsecs(v int64) {
	o.SnapshotTimeUsecs.Set(&v)
}
// SetSnapshotTimeUsecsNil sets the value for SnapshotTimeUsecs to be an explicit nil
func (o *RemoteRestoreSnapshotStatus) SetSnapshotTimeUsecsNil() {
	o.SnapshotTimeUsecs.Set(nil)
}

// UnsetSnapshotTimeUsecs ensures that no value is present for SnapshotTimeUsecs, not even an explicit nil
func (o *RemoteRestoreSnapshotStatus) UnsetSnapshotTimeUsecs() {
	o.SnapshotTimeUsecs.Unset()
}

func (o RemoteRestoreSnapshotStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveTaskUid.IsSet() {
		toSerialize["archiveTaskUid"] = o.ArchiveTaskUid.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.ExpiryTimeUsecs.IsSet() {
		toSerialize["expiryTimeUsecs"] = o.ExpiryTimeUsecs.Get()
	}
	if o.JobRunId.IsSet() {
		toSerialize["jobRunId"] = o.JobRunId.Get()
	}
	if o.ProgressMonitorTask.IsSet() {
		toSerialize["progressMonitorTask"] = o.ProgressMonitorTask.Get()
	}
	if o.SnapshotTaskStatus.IsSet() {
		toSerialize["snapshotTaskStatus"] = o.SnapshotTaskStatus.Get()
	}
	if o.SnapshotTaskUid.IsSet() {
		toSerialize["snapshotTaskUid"] = o.SnapshotTaskUid.Get()
	}
	if o.SnapshotTimeUsecs.IsSet() {
		toSerialize["snapshotTimeUsecs"] = o.SnapshotTimeUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteRestoreSnapshotStatus struct {
	value *RemoteRestoreSnapshotStatus
	isSet bool
}

func (v NullableRemoteRestoreSnapshotStatus) Get() *RemoteRestoreSnapshotStatus {
	return v.value
}

func (v *NullableRemoteRestoreSnapshotStatus) Set(val *RemoteRestoreSnapshotStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteRestoreSnapshotStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteRestoreSnapshotStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteRestoreSnapshotStatus(val *RemoteRestoreSnapshotStatus) *NullableRemoteRestoreSnapshotStatus {
	return &NullableRemoteRestoreSnapshotStatus{value: val, isSet: true}
}

func (v NullableRemoteRestoreSnapshotStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteRestoreSnapshotStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


