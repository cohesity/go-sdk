/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CloneAppViewInfoOracle This message encapsulates backup view Clone operation information of a Oracle DB.
type CloneAppViewInfoOracle struct {
	MountPathInfoVec []string `json:"mountPathInfoVec,omitempty"`
}

// NewCloneAppViewInfoOracle instantiates a new CloneAppViewInfoOracle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloneAppViewInfoOracle() *CloneAppViewInfoOracle {
	this := CloneAppViewInfoOracle{}
	return &this
}

// NewCloneAppViewInfoOracleWithDefaults instantiates a new CloneAppViewInfoOracle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloneAppViewInfoOracleWithDefaults() *CloneAppViewInfoOracle {
	this := CloneAppViewInfoOracle{}
	return &this
}

// GetMountPathInfoVec returns the MountPathInfoVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneAppViewInfoOracle) GetMountPathInfoVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.MountPathInfoVec
}

// GetMountPathInfoVecOk returns a tuple with the MountPathInfoVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneAppViewInfoOracle) GetMountPathInfoVecOk() (*[]string, bool) {
	if o == nil || o.MountPathInfoVec == nil {
		return nil, false
	}
	return &o.MountPathInfoVec, true
}

// HasMountPathInfoVec returns a boolean if a field has been set.
func (o *CloneAppViewInfoOracle) HasMountPathInfoVec() bool {
	if o != nil && o.MountPathInfoVec != nil {
		return true
	}

	return false
}

// SetMountPathInfoVec gets a reference to the given []string and assigns it to the MountPathInfoVec field.
func (o *CloneAppViewInfoOracle) SetMountPathInfoVec(v []string) {
	o.MountPathInfoVec = v
}

func (o CloneAppViewInfoOracle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MountPathInfoVec != nil {
		toSerialize["mountPathInfoVec"] = o.MountPathInfoVec
	}
	return json.Marshal(toSerialize)
}

type NullableCloneAppViewInfoOracle struct {
	value *CloneAppViewInfoOracle
	isSet bool
}

func (v NullableCloneAppViewInfoOracle) Get() *CloneAppViewInfoOracle {
	return v.value
}

func (v *NullableCloneAppViewInfoOracle) Set(val *CloneAppViewInfoOracle) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneAppViewInfoOracle) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneAppViewInfoOracle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneAppViewInfoOracle(val *CloneAppViewInfoOracle) *NullableCloneAppViewInfoOracle {
	return &NullableCloneAppViewInfoOracle{value: val, isSet: true}
}

func (v NullableCloneAppViewInfoOracle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneAppViewInfoOracle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


