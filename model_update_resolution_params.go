/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UpdateResolutionParams Apply an existing Resolution to a new list of Alerts, which are specified by Alert Ids.
type UpdateResolutionParams struct {
	// Specifies the Alerts to resolve, which are specified by Alert Ids.
	AlertIdList []string `json:"alertIdList,omitempty"`
}

// NewUpdateResolutionParams instantiates a new UpdateResolutionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateResolutionParams() *UpdateResolutionParams {
	this := UpdateResolutionParams{}
	return &this
}

// NewUpdateResolutionParamsWithDefaults instantiates a new UpdateResolutionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateResolutionParamsWithDefaults() *UpdateResolutionParams {
	this := UpdateResolutionParams{}
	return &this
}

// GetAlertIdList returns the AlertIdList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateResolutionParams) GetAlertIdList() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AlertIdList
}

// GetAlertIdListOk returns a tuple with the AlertIdList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateResolutionParams) GetAlertIdListOk() (*[]string, bool) {
	if o == nil || o.AlertIdList == nil {
		return nil, false
	}
	return &o.AlertIdList, true
}

// HasAlertIdList returns a boolean if a field has been set.
func (o *UpdateResolutionParams) HasAlertIdList() bool {
	if o != nil && o.AlertIdList != nil {
		return true
	}

	return false
}

// SetAlertIdList gets a reference to the given []string and assigns it to the AlertIdList field.
func (o *UpdateResolutionParams) SetAlertIdList(v []string) {
	o.AlertIdList = v
}

func (o UpdateResolutionParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AlertIdList != nil {
		toSerialize["alertIdList"] = o.AlertIdList
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateResolutionParams struct {
	value *UpdateResolutionParams
	isSet bool
}

func (v NullableUpdateResolutionParams) Get() *UpdateResolutionParams {
	return v.value
}

func (v *NullableUpdateResolutionParams) Set(val *UpdateResolutionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateResolutionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateResolutionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateResolutionParams(val *UpdateResolutionParams) *NullableUpdateResolutionParams {
	return &NullableUpdateResolutionParams{value: val, isSet: true}
}

func (v NullableUpdateResolutionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateResolutionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


