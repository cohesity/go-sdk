/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ConnectorParams Message that encapsulates the various params required to establish a connection with a particular environment.
type ConnectorParams struct {
	AdditionalParams *AdditionalConnectorParams `json:"additionalParams,omitempty"`
	// For some of the environments connection to endpoint is done through an agent. This captures the agent endpoint information.
	AgentEndpoint NullableString `json:"agentEndpoint,omitempty"`
	// Optional agent port to use when connecting to the server. If this is not specified, then environment specific default port will be used.
	AgentPort NullableInt32 `json:"agentPort,omitempty"`
	Credentials *Credentials `json:"credentials,omitempty"`
	// The endpoint URL of the environment (such as the address of the vCenter instance for a VMware environment, etc).
	Endpoint NullableString `json:"endpoint,omitempty"`
	Entity *EntityProto `json:"entity,omitempty"`
	// The host environment type. This is set for kPhysical type environment.
	HostType NullableInt32 `json:"hostType,omitempty"`
	// A unique id associated with this connector params. This is a convenience field and is used to maintain an index to different connection params. This is generated at the time when the source is registered with Magneto.
	Id NullableInt64 `json:"id,omitempty"`
	// If set to true, inter agent communcation will be enabled and for every GetAgentInfo call we will fill subnet information of all the nodes in clustered entity.
	PopulateSubnetForAllClusterNodes NullableBool `json:"populateSubnetForAllClusterNodes,omitempty"`
	// Optional port to use when connecting to the server. If this is not specified, then environment specific default port will be used.
	Port NullableInt32 `json:"port,omitempty"`
	// The tenant_id for the environment. This is used to remotely access connectors and executors via bifrost.
	TenantId NullableString `json:"tenantId,omitempty"`
	// The type of environment to connect to.
	Type NullableInt32 `json:"type,omitempty"`
	// A version that is associated with the params. This is updated anytime any of the params change. This is used to discard older connector params.
	Version NullableInt64 `json:"version,omitempty"`
}

// NewConnectorParams instantiates a new ConnectorParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorParams() *ConnectorParams {
	this := ConnectorParams{}
	return &this
}

// NewConnectorParamsWithDefaults instantiates a new ConnectorParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorParamsWithDefaults() *ConnectorParams {
	this := ConnectorParams{}
	return &this
}

// GetAdditionalParams returns the AdditionalParams field value if set, zero value otherwise.
func (o *ConnectorParams) GetAdditionalParams() AdditionalConnectorParams {
	if o == nil || o.AdditionalParams == nil {
		var ret AdditionalConnectorParams
		return ret
	}
	return *o.AdditionalParams
}

// GetAdditionalParamsOk returns a tuple with the AdditionalParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorParams) GetAdditionalParamsOk() (*AdditionalConnectorParams, bool) {
	if o == nil || o.AdditionalParams == nil {
		return nil, false
	}
	return o.AdditionalParams, true
}

// HasAdditionalParams returns a boolean if a field has been set.
func (o *ConnectorParams) HasAdditionalParams() bool {
	if o != nil && o.AdditionalParams != nil {
		return true
	}

	return false
}

// SetAdditionalParams gets a reference to the given AdditionalConnectorParams and assigns it to the AdditionalParams field.
func (o *ConnectorParams) SetAdditionalParams(v AdditionalConnectorParams) {
	o.AdditionalParams = &v
}

// GetAgentEndpoint returns the AgentEndpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorParams) GetAgentEndpoint() string {
	if o == nil || o.AgentEndpoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.AgentEndpoint.Get()
}

// GetAgentEndpointOk returns a tuple with the AgentEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorParams) GetAgentEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AgentEndpoint.Get(), o.AgentEndpoint.IsSet()
}

// HasAgentEndpoint returns a boolean if a field has been set.
func (o *ConnectorParams) HasAgentEndpoint() bool {
	if o != nil && o.AgentEndpoint.IsSet() {
		return true
	}

	return false
}

// SetAgentEndpoint gets a reference to the given NullableString and assigns it to the AgentEndpoint field.
func (o *ConnectorParams) SetAgentEndpoint(v string) {
	o.AgentEndpoint.Set(&v)
}
// SetAgentEndpointNil sets the value for AgentEndpoint to be an explicit nil
func (o *ConnectorParams) SetAgentEndpointNil() {
	o.AgentEndpoint.Set(nil)
}

// UnsetAgentEndpoint ensures that no value is present for AgentEndpoint, not even an explicit nil
func (o *ConnectorParams) UnsetAgentEndpoint() {
	o.AgentEndpoint.Unset()
}

// GetAgentPort returns the AgentPort field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorParams) GetAgentPort() int32 {
	if o == nil || o.AgentPort.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AgentPort.Get()
}

// GetAgentPortOk returns a tuple with the AgentPort field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorParams) GetAgentPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AgentPort.Get(), o.AgentPort.IsSet()
}

// HasAgentPort returns a boolean if a field has been set.
func (o *ConnectorParams) HasAgentPort() bool {
	if o != nil && o.AgentPort.IsSet() {
		return true
	}

	return false
}

// SetAgentPort gets a reference to the given NullableInt32 and assigns it to the AgentPort field.
func (o *ConnectorParams) SetAgentPort(v int32) {
	o.AgentPort.Set(&v)
}
// SetAgentPortNil sets the value for AgentPort to be an explicit nil
func (o *ConnectorParams) SetAgentPortNil() {
	o.AgentPort.Set(nil)
}

// UnsetAgentPort ensures that no value is present for AgentPort, not even an explicit nil
func (o *ConnectorParams) UnsetAgentPort() {
	o.AgentPort.Unset()
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *ConnectorParams) GetCredentials() Credentials {
	if o == nil || o.Credentials == nil {
		var ret Credentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorParams) GetCredentialsOk() (*Credentials, bool) {
	if o == nil || o.Credentials == nil {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *ConnectorParams) HasCredentials() bool {
	if o != nil && o.Credentials != nil {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given Credentials and assigns it to the Credentials field.
func (o *ConnectorParams) SetCredentials(v Credentials) {
	o.Credentials = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorParams) GetEndpoint() string {
	if o == nil || o.Endpoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.Endpoint.Get()
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorParams) GetEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Endpoint.Get(), o.Endpoint.IsSet()
}

// HasEndpoint returns a boolean if a field has been set.
func (o *ConnectorParams) HasEndpoint() bool {
	if o != nil && o.Endpoint.IsSet() {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given NullableString and assigns it to the Endpoint field.
func (o *ConnectorParams) SetEndpoint(v string) {
	o.Endpoint.Set(&v)
}
// SetEndpointNil sets the value for Endpoint to be an explicit nil
func (o *ConnectorParams) SetEndpointNil() {
	o.Endpoint.Set(nil)
}

// UnsetEndpoint ensures that no value is present for Endpoint, not even an explicit nil
func (o *ConnectorParams) UnsetEndpoint() {
	o.Endpoint.Unset()
}

// GetEntity returns the Entity field value if set, zero value otherwise.
func (o *ConnectorParams) GetEntity() EntityProto {
	if o == nil || o.Entity == nil {
		var ret EntityProto
		return ret
	}
	return *o.Entity
}

// GetEntityOk returns a tuple with the Entity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorParams) GetEntityOk() (*EntityProto, bool) {
	if o == nil || o.Entity == nil {
		return nil, false
	}
	return o.Entity, true
}

// HasEntity returns a boolean if a field has been set.
func (o *ConnectorParams) HasEntity() bool {
	if o != nil && o.Entity != nil {
		return true
	}

	return false
}

// SetEntity gets a reference to the given EntityProto and assigns it to the Entity field.
func (o *ConnectorParams) SetEntity(v EntityProto) {
	o.Entity = &v
}

// GetHostType returns the HostType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorParams) GetHostType() int32 {
	if o == nil || o.HostType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.HostType.Get()
}

// GetHostTypeOk returns a tuple with the HostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorParams) GetHostTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostType.Get(), o.HostType.IsSet()
}

// HasHostType returns a boolean if a field has been set.
func (o *ConnectorParams) HasHostType() bool {
	if o != nil && o.HostType.IsSet() {
		return true
	}

	return false
}

// SetHostType gets a reference to the given NullableInt32 and assigns it to the HostType field.
func (o *ConnectorParams) SetHostType(v int32) {
	o.HostType.Set(&v)
}
// SetHostTypeNil sets the value for HostType to be an explicit nil
func (o *ConnectorParams) SetHostTypeNil() {
	o.HostType.Set(nil)
}

// UnsetHostType ensures that no value is present for HostType, not even an explicit nil
func (o *ConnectorParams) UnsetHostType() {
	o.HostType.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorParams) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorParams) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ConnectorParams) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ConnectorParams) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ConnectorParams) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ConnectorParams) UnsetId() {
	o.Id.Unset()
}

// GetPopulateSubnetForAllClusterNodes returns the PopulateSubnetForAllClusterNodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorParams) GetPopulateSubnetForAllClusterNodes() bool {
	if o == nil || o.PopulateSubnetForAllClusterNodes.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PopulateSubnetForAllClusterNodes.Get()
}

// GetPopulateSubnetForAllClusterNodesOk returns a tuple with the PopulateSubnetForAllClusterNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorParams) GetPopulateSubnetForAllClusterNodesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PopulateSubnetForAllClusterNodes.Get(), o.PopulateSubnetForAllClusterNodes.IsSet()
}

// HasPopulateSubnetForAllClusterNodes returns a boolean if a field has been set.
func (o *ConnectorParams) HasPopulateSubnetForAllClusterNodes() bool {
	if o != nil && o.PopulateSubnetForAllClusterNodes.IsSet() {
		return true
	}

	return false
}

// SetPopulateSubnetForAllClusterNodes gets a reference to the given NullableBool and assigns it to the PopulateSubnetForAllClusterNodes field.
func (o *ConnectorParams) SetPopulateSubnetForAllClusterNodes(v bool) {
	o.PopulateSubnetForAllClusterNodes.Set(&v)
}
// SetPopulateSubnetForAllClusterNodesNil sets the value for PopulateSubnetForAllClusterNodes to be an explicit nil
func (o *ConnectorParams) SetPopulateSubnetForAllClusterNodesNil() {
	o.PopulateSubnetForAllClusterNodes.Set(nil)
}

// UnsetPopulateSubnetForAllClusterNodes ensures that no value is present for PopulateSubnetForAllClusterNodes, not even an explicit nil
func (o *ConnectorParams) UnsetPopulateSubnetForAllClusterNodes() {
	o.PopulateSubnetForAllClusterNodes.Unset()
}

// GetPort returns the Port field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorParams) GetPort() int32 {
	if o == nil || o.Port.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Port.Get()
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorParams) GetPortOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Port.Get(), o.Port.IsSet()
}

// HasPort returns a boolean if a field has been set.
func (o *ConnectorParams) HasPort() bool {
	if o != nil && o.Port.IsSet() {
		return true
	}

	return false
}

// SetPort gets a reference to the given NullableInt32 and assigns it to the Port field.
func (o *ConnectorParams) SetPort(v int32) {
	o.Port.Set(&v)
}
// SetPortNil sets the value for Port to be an explicit nil
func (o *ConnectorParams) SetPortNil() {
	o.Port.Set(nil)
}

// UnsetPort ensures that no value is present for Port, not even an explicit nil
func (o *ConnectorParams) UnsetPort() {
	o.Port.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorParams) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorParams) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *ConnectorParams) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *ConnectorParams) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *ConnectorParams) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *ConnectorParams) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorParams) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorParams) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *ConnectorParams) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *ConnectorParams) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *ConnectorParams) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *ConnectorParams) UnsetType() {
	o.Type.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConnectorParams) GetVersion() int64 {
	if o == nil || o.Version.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConnectorParams) GetVersionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *ConnectorParams) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt64 and assigns it to the Version field.
func (o *ConnectorParams) SetVersion(v int64) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *ConnectorParams) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *ConnectorParams) UnsetVersion() {
	o.Version.Unset()
}

func (o ConnectorParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdditionalParams != nil {
		toSerialize["additionalParams"] = o.AdditionalParams
	}
	if o.AgentEndpoint.IsSet() {
		toSerialize["agentEndpoint"] = o.AgentEndpoint.Get()
	}
	if o.AgentPort.IsSet() {
		toSerialize["agentPort"] = o.AgentPort.Get()
	}
	if o.Credentials != nil {
		toSerialize["credentials"] = o.Credentials
	}
	if o.Endpoint.IsSet() {
		toSerialize["endpoint"] = o.Endpoint.Get()
	}
	if o.Entity != nil {
		toSerialize["entity"] = o.Entity
	}
	if o.HostType.IsSet() {
		toSerialize["hostType"] = o.HostType.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.PopulateSubnetForAllClusterNodes.IsSet() {
		toSerialize["populateSubnetForAllClusterNodes"] = o.PopulateSubnetForAllClusterNodes.Get()
	}
	if o.Port.IsSet() {
		toSerialize["port"] = o.Port.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorParams struct {
	value *ConnectorParams
	isSet bool
}

func (v NullableConnectorParams) Get() *ConnectorParams {
	return v.value
}

func (v *NullableConnectorParams) Set(val *ConnectorParams) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorParams) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorParams(val *ConnectorParams) *NullableConnectorParams {
	return &NullableConnectorParams{value: val, isSet: true}
}

func (v NullableConnectorParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


