/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TagsOperationResult struct for TagsOperationResult
type TagsOperationResult struct {
	// DocErrors are document errors incurred in yoda service while tagging.
	DocErrors []DocError `json:"docErrors,omitempty"`
}

// NewTagsOperationResult instantiates a new TagsOperationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTagsOperationResult() *TagsOperationResult {
	this := TagsOperationResult{}
	return &this
}

// NewTagsOperationResultWithDefaults instantiates a new TagsOperationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTagsOperationResultWithDefaults() *TagsOperationResult {
	this := TagsOperationResult{}
	return &this
}

// GetDocErrors returns the DocErrors field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TagsOperationResult) GetDocErrors() []DocError {
	if o == nil  {
		var ret []DocError
		return ret
	}
	return o.DocErrors
}

// GetDocErrorsOk returns a tuple with the DocErrors field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TagsOperationResult) GetDocErrorsOk() (*[]DocError, bool) {
	if o == nil || o.DocErrors == nil {
		return nil, false
	}
	return &o.DocErrors, true
}

// HasDocErrors returns a boolean if a field has been set.
func (o *TagsOperationResult) HasDocErrors() bool {
	if o != nil && o.DocErrors != nil {
		return true
	}

	return false
}

// SetDocErrors gets a reference to the given []DocError and assigns it to the DocErrors field.
func (o *TagsOperationResult) SetDocErrors(v []DocError) {
	o.DocErrors = v
}

func (o TagsOperationResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocErrors != nil {
		toSerialize["docErrors"] = o.DocErrors
	}
	return json.Marshal(toSerialize)
}

type NullableTagsOperationResult struct {
	value *TagsOperationResult
	isSet bool
}

func (v NullableTagsOperationResult) Get() *TagsOperationResult {
	return v.value
}

func (v *NullableTagsOperationResult) Set(val *TagsOperationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTagsOperationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTagsOperationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTagsOperationResult(val *TagsOperationResult) *NullableTagsOperationResult {
	return &NullableTagsOperationResult{value: val, isSet: true}
}

func (v NullableTagsOperationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTagsOperationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


