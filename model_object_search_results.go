/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ObjectSearchResults Specifies an array of backup objects and a count to indicate if additional requests must be made to get the full result.
type ObjectSearchResults struct {
	// Array of Snapshot Objects.  Specifies the list of backup objects returned by this request that match the specified search and filter criteria. The number of objects returned is limited by the pageCount field.
	ObjectSnapshotInfo []ObjectSnapshotInfo `json:"objectSnapshotInfo,omitempty"`
	// Specifies the total number of backup objects that match the filter and search criteria. Use this value to determine how many additional requests are required to get the full result.
	TotalCount NullableInt64 `json:"totalCount,omitempty"`
}

// NewObjectSearchResults instantiates a new ObjectSearchResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectSearchResults() *ObjectSearchResults {
	this := ObjectSearchResults{}
	return &this
}

// NewObjectSearchResultsWithDefaults instantiates a new ObjectSearchResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectSearchResultsWithDefaults() *ObjectSearchResults {
	this := ObjectSearchResults{}
	return &this
}

// GetObjectSnapshotInfo returns the ObjectSnapshotInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSearchResults) GetObjectSnapshotInfo() []ObjectSnapshotInfo {
	if o == nil  {
		var ret []ObjectSnapshotInfo
		return ret
	}
	return o.ObjectSnapshotInfo
}

// GetObjectSnapshotInfoOk returns a tuple with the ObjectSnapshotInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSearchResults) GetObjectSnapshotInfoOk() (*[]ObjectSnapshotInfo, bool) {
	if o == nil || o.ObjectSnapshotInfo == nil {
		return nil, false
	}
	return &o.ObjectSnapshotInfo, true
}

// HasObjectSnapshotInfo returns a boolean if a field has been set.
func (o *ObjectSearchResults) HasObjectSnapshotInfo() bool {
	if o != nil && o.ObjectSnapshotInfo != nil {
		return true
	}

	return false
}

// SetObjectSnapshotInfo gets a reference to the given []ObjectSnapshotInfo and assigns it to the ObjectSnapshotInfo field.
func (o *ObjectSearchResults) SetObjectSnapshotInfo(v []ObjectSnapshotInfo) {
	o.ObjectSnapshotInfo = v
}

// GetTotalCount returns the TotalCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSearchResults) GetTotalCount() int64 {
	if o == nil || o.TotalCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalCount.Get()
}

// GetTotalCountOk returns a tuple with the TotalCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSearchResults) GetTotalCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalCount.Get(), o.TotalCount.IsSet()
}

// HasTotalCount returns a boolean if a field has been set.
func (o *ObjectSearchResults) HasTotalCount() bool {
	if o != nil && o.TotalCount.IsSet() {
		return true
	}

	return false
}

// SetTotalCount gets a reference to the given NullableInt64 and assigns it to the TotalCount field.
func (o *ObjectSearchResults) SetTotalCount(v int64) {
	o.TotalCount.Set(&v)
}
// SetTotalCountNil sets the value for TotalCount to be an explicit nil
func (o *ObjectSearchResults) SetTotalCountNil() {
	o.TotalCount.Set(nil)
}

// UnsetTotalCount ensures that no value is present for TotalCount, not even an explicit nil
func (o *ObjectSearchResults) UnsetTotalCount() {
	o.TotalCount.Unset()
}

func (o ObjectSearchResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectSnapshotInfo != nil {
		toSerialize["objectSnapshotInfo"] = o.ObjectSnapshotInfo
	}
	if o.TotalCount.IsSet() {
		toSerialize["totalCount"] = o.TotalCount.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableObjectSearchResults struct {
	value *ObjectSearchResults
	isSet bool
}

func (v NullableObjectSearchResults) Get() *ObjectSearchResults {
	return v.value
}

func (v *NullableObjectSearchResults) Set(val *ObjectSearchResults) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectSearchResults) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectSearchResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectSearchResults(val *ObjectSearchResults) *NullableObjectSearchResults {
	return &NullableObjectSearchResults{value: val, isSet: true}
}

func (v NullableObjectSearchResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectSearchResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


