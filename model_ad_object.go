/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ADObject Represents the details about an AD object.
type ADObject struct {
	// Specifies the 'description' of an AD object.
	Description NullableString `json:"description,omitempty"`
	// Specifies the guid of object in the Production AD which is equivalent to the object in the Snapshot AD.
	DestinationGuid NullableString `json:"destinationGuid,omitempty"`
	// Specifies the display name of the AD object.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Specifies the distinguished name of the AD object. Eg: CN=Jone Doe,OU=Users,DC=corp,DC=cohesity,DC=com
	DistinguishedName NullableString `json:"distinguishedName,omitempty"`
	// Specifies the error message while fetching the AD object.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Specifies the class name of an AD Object such as 'user','computer', 'organizationalUnit'.
	ObjectClass NullableString `json:"objectClass,omitempty"`
	// Specifies the SearchResultFlags of the AD object. 'kEqual' indicates the AD Object from Snapshot and Production AD are equal. 'kNotEqual' indicates the AD Object from snapshot and production AD are not equal. 'kRestorePasswordRequired' indicates when restoring this AD Object from Snapshot AD to Production AD, a password is required. 'kMovedOnDestination' indicates the object has moved to another container or OU in Production AD compared to  Snapshot AD. 'kDisableSupported' indicates the enable and disable is supported on the AD Object. AD Objects of type 'User' and 'Computers' support this operation.
	SearchResultFlags []string `json:"searchResultFlags,omitempty"`
	// Specifies the guid of the AD object in Snapshot AD.
	SourceGuid NullableString `json:"sourceGuid,omitempty"`
}

// NewADObject instantiates a new ADObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewADObject() *ADObject {
	this := ADObject{}
	return &this
}

// NewADObjectWithDefaults instantiates a new ADObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewADObjectWithDefaults() *ADObject {
	this := ADObject{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADObject) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADObject) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ADObject) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ADObject) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ADObject) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ADObject) UnsetDescription() {
	o.Description.Unset()
}

// GetDestinationGuid returns the DestinationGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADObject) GetDestinationGuid() string {
	if o == nil || o.DestinationGuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestinationGuid.Get()
}

// GetDestinationGuidOk returns a tuple with the DestinationGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADObject) GetDestinationGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestinationGuid.Get(), o.DestinationGuid.IsSet()
}

// HasDestinationGuid returns a boolean if a field has been set.
func (o *ADObject) HasDestinationGuid() bool {
	if o != nil && o.DestinationGuid.IsSet() {
		return true
	}

	return false
}

// SetDestinationGuid gets a reference to the given NullableString and assigns it to the DestinationGuid field.
func (o *ADObject) SetDestinationGuid(v string) {
	o.DestinationGuid.Set(&v)
}
// SetDestinationGuidNil sets the value for DestinationGuid to be an explicit nil
func (o *ADObject) SetDestinationGuidNil() {
	o.DestinationGuid.Set(nil)
}

// UnsetDestinationGuid ensures that no value is present for DestinationGuid, not even an explicit nil
func (o *ADObject) UnsetDestinationGuid() {
	o.DestinationGuid.Unset()
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADObject) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADObject) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *ADObject) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *ADObject) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *ADObject) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *ADObject) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetDistinguishedName returns the DistinguishedName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADObject) GetDistinguishedName() string {
	if o == nil || o.DistinguishedName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DistinguishedName.Get()
}

// GetDistinguishedNameOk returns a tuple with the DistinguishedName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADObject) GetDistinguishedNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DistinguishedName.Get(), o.DistinguishedName.IsSet()
}

// HasDistinguishedName returns a boolean if a field has been set.
func (o *ADObject) HasDistinguishedName() bool {
	if o != nil && o.DistinguishedName.IsSet() {
		return true
	}

	return false
}

// SetDistinguishedName gets a reference to the given NullableString and assigns it to the DistinguishedName field.
func (o *ADObject) SetDistinguishedName(v string) {
	o.DistinguishedName.Set(&v)
}
// SetDistinguishedNameNil sets the value for DistinguishedName to be an explicit nil
func (o *ADObject) SetDistinguishedNameNil() {
	o.DistinguishedName.Set(nil)
}

// UnsetDistinguishedName ensures that no value is present for DistinguishedName, not even an explicit nil
func (o *ADObject) UnsetDistinguishedName() {
	o.DistinguishedName.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADObject) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADObject) GetErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *ADObject) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *ADObject) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *ADObject) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *ADObject) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetObjectClass returns the ObjectClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADObject) GetObjectClass() string {
	if o == nil || o.ObjectClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectClass.Get()
}

// GetObjectClassOk returns a tuple with the ObjectClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADObject) GetObjectClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectClass.Get(), o.ObjectClass.IsSet()
}

// HasObjectClass returns a boolean if a field has been set.
func (o *ADObject) HasObjectClass() bool {
	if o != nil && o.ObjectClass.IsSet() {
		return true
	}

	return false
}

// SetObjectClass gets a reference to the given NullableString and assigns it to the ObjectClass field.
func (o *ADObject) SetObjectClass(v string) {
	o.ObjectClass.Set(&v)
}
// SetObjectClassNil sets the value for ObjectClass to be an explicit nil
func (o *ADObject) SetObjectClassNil() {
	o.ObjectClass.Set(nil)
}

// UnsetObjectClass ensures that no value is present for ObjectClass, not even an explicit nil
func (o *ADObject) UnsetObjectClass() {
	o.ObjectClass.Unset()
}

// GetSearchResultFlags returns the SearchResultFlags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADObject) GetSearchResultFlags() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SearchResultFlags
}

// GetSearchResultFlagsOk returns a tuple with the SearchResultFlags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADObject) GetSearchResultFlagsOk() (*[]string, bool) {
	if o == nil || o.SearchResultFlags == nil {
		return nil, false
	}
	return &o.SearchResultFlags, true
}

// HasSearchResultFlags returns a boolean if a field has been set.
func (o *ADObject) HasSearchResultFlags() bool {
	if o != nil && o.SearchResultFlags != nil {
		return true
	}

	return false
}

// SetSearchResultFlags gets a reference to the given []string and assigns it to the SearchResultFlags field.
func (o *ADObject) SetSearchResultFlags(v []string) {
	o.SearchResultFlags = v
}

// GetSourceGuid returns the SourceGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ADObject) GetSourceGuid() string {
	if o == nil || o.SourceGuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceGuid.Get()
}

// GetSourceGuidOk returns a tuple with the SourceGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ADObject) GetSourceGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceGuid.Get(), o.SourceGuid.IsSet()
}

// HasSourceGuid returns a boolean if a field has been set.
func (o *ADObject) HasSourceGuid() bool {
	if o != nil && o.SourceGuid.IsSet() {
		return true
	}

	return false
}

// SetSourceGuid gets a reference to the given NullableString and assigns it to the SourceGuid field.
func (o *ADObject) SetSourceGuid(v string) {
	o.SourceGuid.Set(&v)
}
// SetSourceGuidNil sets the value for SourceGuid to be an explicit nil
func (o *ADObject) SetSourceGuidNil() {
	o.SourceGuid.Set(nil)
}

// UnsetSourceGuid ensures that no value is present for SourceGuid, not even an explicit nil
func (o *ADObject) UnsetSourceGuid() {
	o.SourceGuid.Unset()
}

func (o ADObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DestinationGuid.IsSet() {
		toSerialize["destinationGuid"] = o.DestinationGuid.Get()
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.DistinguishedName.IsSet() {
		toSerialize["distinguishedName"] = o.DistinguishedName.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.ObjectClass.IsSet() {
		toSerialize["objectClass"] = o.ObjectClass.Get()
	}
	if o.SearchResultFlags != nil {
		toSerialize["searchResultFlags"] = o.SearchResultFlags
	}
	if o.SourceGuid.IsSet() {
		toSerialize["sourceGuid"] = o.SourceGuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableADObject struct {
	value *ADObject
	isSet bool
}

func (v NullableADObject) Get() *ADObject {
	return v.value
}

func (v *NullableADObject) Set(val *ADObject) {
	v.value = val
	v.isSet = true
}

func (v NullableADObject) IsSet() bool {
	return v.isSet
}

func (v *NullableADObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableADObject(val *ADObject) *NullableADObject {
	return &NullableADObject{value: val, isSet: true}
}

func (v NullableADObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableADObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


