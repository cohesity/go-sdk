/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TenantLdapProviderUpdate Specifies Ldap Provider update details response about a tenant.
type TenantLdapProviderUpdate struct {
	// Specifies the ids of ldap providers for respective tenant.
	LdapProviderIds []int64 `json:"ldapProviderIds,omitempty"`
	// Specifies the unique id of the tenant.
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewTenantLdapProviderUpdate instantiates a new TenantLdapProviderUpdate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantLdapProviderUpdate() *TenantLdapProviderUpdate {
	this := TenantLdapProviderUpdate{}
	return &this
}

// NewTenantLdapProviderUpdateWithDefaults instantiates a new TenantLdapProviderUpdate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantLdapProviderUpdateWithDefaults() *TenantLdapProviderUpdate {
	this := TenantLdapProviderUpdate{}
	return &this
}

// GetLdapProviderIds returns the LdapProviderIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantLdapProviderUpdate) GetLdapProviderIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.LdapProviderIds
}

// GetLdapProviderIdsOk returns a tuple with the LdapProviderIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantLdapProviderUpdate) GetLdapProviderIdsOk() (*[]int64, bool) {
	if o == nil || o.LdapProviderIds == nil {
		return nil, false
	}
	return &o.LdapProviderIds, true
}

// HasLdapProviderIds returns a boolean if a field has been set.
func (o *TenantLdapProviderUpdate) HasLdapProviderIds() bool {
	if o != nil && o.LdapProviderIds != nil {
		return true
	}

	return false
}

// SetLdapProviderIds gets a reference to the given []int64 and assigns it to the LdapProviderIds field.
func (o *TenantLdapProviderUpdate) SetLdapProviderIds(v []int64) {
	o.LdapProviderIds = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantLdapProviderUpdate) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantLdapProviderUpdate) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *TenantLdapProviderUpdate) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *TenantLdapProviderUpdate) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *TenantLdapProviderUpdate) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *TenantLdapProviderUpdate) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o TenantLdapProviderUpdate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LdapProviderIds != nil {
		toSerialize["ldapProviderIds"] = o.LdapProviderIds
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTenantLdapProviderUpdate struct {
	value *TenantLdapProviderUpdate
	isSet bool
}

func (v NullableTenantLdapProviderUpdate) Get() *TenantLdapProviderUpdate {
	return v.value
}

func (v *NullableTenantLdapProviderUpdate) Set(val *TenantLdapProviderUpdate) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantLdapProviderUpdate) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantLdapProviderUpdate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantLdapProviderUpdate(val *TenantLdapProviderUpdate) *NullableTenantLdapProviderUpdate {
	return &NullableTenantLdapProviderUpdate{value: val, isSet: true}
}

func (v NullableTenantLdapProviderUpdate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantLdapProviderUpdate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


