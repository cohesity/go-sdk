/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AccessTokenCredential Specifies the Cohesity credentials required for generating an access token.
type AccessTokenCredential struct {
	// Specifies the domain the user is logging in to. For a Local user model, the domain is always LOCAL. For LDAP/AD user models, the domain will map to an LDAP connection string. A user is uniquely identified by a combination of username and domain. If this is not set, LOCAL is assumed.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the password of the Cohesity user account.
	Password NullableString `json:"password"`
	// Specifies the login name of the Cohesity user.
	Username NullableString `json:"username"`
}

// NewAccessTokenCredential instantiates a new AccessTokenCredential object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessTokenCredential(password NullableString, username NullableString) *AccessTokenCredential {
	this := AccessTokenCredential{}
	this.Password = password
	this.Username = username
	return &this
}

// NewAccessTokenCredentialWithDefaults instantiates a new AccessTokenCredential object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessTokenCredentialWithDefaults() *AccessTokenCredential {
	this := AccessTokenCredential{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessTokenCredential) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessTokenCredential) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *AccessTokenCredential) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *AccessTokenCredential) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *AccessTokenCredential) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *AccessTokenCredential) UnsetDomain() {
	o.Domain.Unset()
}

// GetPassword returns the Password field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AccessTokenCredential) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}

	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessTokenCredential) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// SetPassword sets field value
func (o *AccessTokenCredential) SetPassword(v string) {
	o.Password.Set(&v)
}

// GetUsername returns the Username field value
// If the value is explicit nil, the zero value for string will be returned
func (o *AccessTokenCredential) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}

	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessTokenCredential) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// SetUsername sets field value
func (o *AccessTokenCredential) SetUsername(v string) {
	o.Username.Set(&v)
}

func (o AccessTokenCredential) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if true {
		toSerialize["password"] = o.Password.Get()
	}
	if true {
		toSerialize["username"] = o.Username.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAccessTokenCredential struct {
	value *AccessTokenCredential
	isSet bool
}

func (v NullableAccessTokenCredential) Get() *AccessTokenCredential {
	return v.value
}

func (v *NullableAccessTokenCredential) Set(val *AccessTokenCredential) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessTokenCredential) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessTokenCredential) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessTokenCredential(val *AccessTokenCredential) *NullableAccessTokenCredential {
	return &NullableAccessTokenCredential{value: val, isSet: true}
}

func (v NullableAccessTokenCredential) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessTokenCredential) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


