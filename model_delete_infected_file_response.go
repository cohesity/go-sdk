/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DeleteInfectedFileResponse struct for DeleteInfectedFileResponse
type DeleteInfectedFileResponse struct {
	// Specifies the failed delete infected files.
	DeleteFailedInfectedFiles []InfectedFileId `json:"deleteFailedInfectedFiles,omitempty"`
	// Specifies the successfully deleted infected files.
	DeleteSucceededInfectedFiles []InfectedFileId `json:"deleteSucceededInfectedFiles,omitempty"`
}

// NewDeleteInfectedFileResponse instantiates a new DeleteInfectedFileResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteInfectedFileResponse() *DeleteInfectedFileResponse {
	this := DeleteInfectedFileResponse{}
	return &this
}

// NewDeleteInfectedFileResponseWithDefaults instantiates a new DeleteInfectedFileResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteInfectedFileResponseWithDefaults() *DeleteInfectedFileResponse {
	this := DeleteInfectedFileResponse{}
	return &this
}

// GetDeleteFailedInfectedFiles returns the DeleteFailedInfectedFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteInfectedFileResponse) GetDeleteFailedInfectedFiles() []InfectedFileId {
	if o == nil  {
		var ret []InfectedFileId
		return ret
	}
	return o.DeleteFailedInfectedFiles
}

// GetDeleteFailedInfectedFilesOk returns a tuple with the DeleteFailedInfectedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteInfectedFileResponse) GetDeleteFailedInfectedFilesOk() (*[]InfectedFileId, bool) {
	if o == nil || o.DeleteFailedInfectedFiles == nil {
		return nil, false
	}
	return &o.DeleteFailedInfectedFiles, true
}

// HasDeleteFailedInfectedFiles returns a boolean if a field has been set.
func (o *DeleteInfectedFileResponse) HasDeleteFailedInfectedFiles() bool {
	if o != nil && o.DeleteFailedInfectedFiles != nil {
		return true
	}

	return false
}

// SetDeleteFailedInfectedFiles gets a reference to the given []InfectedFileId and assigns it to the DeleteFailedInfectedFiles field.
func (o *DeleteInfectedFileResponse) SetDeleteFailedInfectedFiles(v []InfectedFileId) {
	o.DeleteFailedInfectedFiles = v
}

// GetDeleteSucceededInfectedFiles returns the DeleteSucceededInfectedFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeleteInfectedFileResponse) GetDeleteSucceededInfectedFiles() []InfectedFileId {
	if o == nil  {
		var ret []InfectedFileId
		return ret
	}
	return o.DeleteSucceededInfectedFiles
}

// GetDeleteSucceededInfectedFilesOk returns a tuple with the DeleteSucceededInfectedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteInfectedFileResponse) GetDeleteSucceededInfectedFilesOk() (*[]InfectedFileId, bool) {
	if o == nil || o.DeleteSucceededInfectedFiles == nil {
		return nil, false
	}
	return &o.DeleteSucceededInfectedFiles, true
}

// HasDeleteSucceededInfectedFiles returns a boolean if a field has been set.
func (o *DeleteInfectedFileResponse) HasDeleteSucceededInfectedFiles() bool {
	if o != nil && o.DeleteSucceededInfectedFiles != nil {
		return true
	}

	return false
}

// SetDeleteSucceededInfectedFiles gets a reference to the given []InfectedFileId and assigns it to the DeleteSucceededInfectedFiles field.
func (o *DeleteInfectedFileResponse) SetDeleteSucceededInfectedFiles(v []InfectedFileId) {
	o.DeleteSucceededInfectedFiles = v
}

func (o DeleteInfectedFileResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DeleteFailedInfectedFiles != nil {
		toSerialize["deleteFailedInfectedFiles"] = o.DeleteFailedInfectedFiles
	}
	if o.DeleteSucceededInfectedFiles != nil {
		toSerialize["deleteSucceededInfectedFiles"] = o.DeleteSucceededInfectedFiles
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteInfectedFileResponse struct {
	value *DeleteInfectedFileResponse
	isSet bool
}

func (v NullableDeleteInfectedFileResponse) Get() *DeleteInfectedFileResponse {
	return v.value
}

func (v *NullableDeleteInfectedFileResponse) Set(val *DeleteInfectedFileResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteInfectedFileResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteInfectedFileResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteInfectedFileResponse(val *DeleteInfectedFileResponse) *NullableDeleteInfectedFileResponse {
	return &NullableDeleteInfectedFileResponse{value: val, isSet: true}
}

func (v NullableDeleteInfectedFileResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteInfectedFileResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


