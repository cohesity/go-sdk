/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SnapshotTarget Message that specifies details about a target (such as a replication or archival target) where a backup snapshot may be copied to.
type SnapshotTarget struct {
	ArchivalTarget *ArchivalTarget `json:"archivalTarget,omitempty"`
	CloudDeployTarget *CloudDeployTarget `json:"cloudDeployTarget,omitempty"`
	ReplicationTarget *ReplicationTarget `json:"replicationTarget,omitempty"`
	// The type of snapshot target this proto represents.
	Type NullableInt32 `json:"type,omitempty"`
}

// NewSnapshotTarget instantiates a new SnapshotTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotTarget() *SnapshotTarget {
	this := SnapshotTarget{}
	return &this
}

// NewSnapshotTargetWithDefaults instantiates a new SnapshotTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotTargetWithDefaults() *SnapshotTarget {
	this := SnapshotTarget{}
	return &this
}

// GetArchivalTarget returns the ArchivalTarget field value if set, zero value otherwise.
func (o *SnapshotTarget) GetArchivalTarget() ArchivalTarget {
	if o == nil || o.ArchivalTarget == nil {
		var ret ArchivalTarget
		return ret
	}
	return *o.ArchivalTarget
}

// GetArchivalTargetOk returns a tuple with the ArchivalTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotTarget) GetArchivalTargetOk() (*ArchivalTarget, bool) {
	if o == nil || o.ArchivalTarget == nil {
		return nil, false
	}
	return o.ArchivalTarget, true
}

// HasArchivalTarget returns a boolean if a field has been set.
func (o *SnapshotTarget) HasArchivalTarget() bool {
	if o != nil && o.ArchivalTarget != nil {
		return true
	}

	return false
}

// SetArchivalTarget gets a reference to the given ArchivalTarget and assigns it to the ArchivalTarget field.
func (o *SnapshotTarget) SetArchivalTarget(v ArchivalTarget) {
	o.ArchivalTarget = &v
}

// GetCloudDeployTarget returns the CloudDeployTarget field value if set, zero value otherwise.
func (o *SnapshotTarget) GetCloudDeployTarget() CloudDeployTarget {
	if o == nil || o.CloudDeployTarget == nil {
		var ret CloudDeployTarget
		return ret
	}
	return *o.CloudDeployTarget
}

// GetCloudDeployTargetOk returns a tuple with the CloudDeployTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotTarget) GetCloudDeployTargetOk() (*CloudDeployTarget, bool) {
	if o == nil || o.CloudDeployTarget == nil {
		return nil, false
	}
	return o.CloudDeployTarget, true
}

// HasCloudDeployTarget returns a boolean if a field has been set.
func (o *SnapshotTarget) HasCloudDeployTarget() bool {
	if o != nil && o.CloudDeployTarget != nil {
		return true
	}

	return false
}

// SetCloudDeployTarget gets a reference to the given CloudDeployTarget and assigns it to the CloudDeployTarget field.
func (o *SnapshotTarget) SetCloudDeployTarget(v CloudDeployTarget) {
	o.CloudDeployTarget = &v
}

// GetReplicationTarget returns the ReplicationTarget field value if set, zero value otherwise.
func (o *SnapshotTarget) GetReplicationTarget() ReplicationTarget {
	if o == nil || o.ReplicationTarget == nil {
		var ret ReplicationTarget
		return ret
	}
	return *o.ReplicationTarget
}

// GetReplicationTargetOk returns a tuple with the ReplicationTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotTarget) GetReplicationTargetOk() (*ReplicationTarget, bool) {
	if o == nil || o.ReplicationTarget == nil {
		return nil, false
	}
	return o.ReplicationTarget, true
}

// HasReplicationTarget returns a boolean if a field has been set.
func (o *SnapshotTarget) HasReplicationTarget() bool {
	if o != nil && o.ReplicationTarget != nil {
		return true
	}

	return false
}

// SetReplicationTarget gets a reference to the given ReplicationTarget and assigns it to the ReplicationTarget field.
func (o *SnapshotTarget) SetReplicationTarget(v ReplicationTarget) {
	o.ReplicationTarget = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotTarget) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotTarget) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *SnapshotTarget) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *SnapshotTarget) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *SnapshotTarget) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *SnapshotTarget) UnsetType() {
	o.Type.Unset()
}

func (o SnapshotTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchivalTarget != nil {
		toSerialize["archivalTarget"] = o.ArchivalTarget
	}
	if o.CloudDeployTarget != nil {
		toSerialize["cloudDeployTarget"] = o.CloudDeployTarget
	}
	if o.ReplicationTarget != nil {
		toSerialize["replicationTarget"] = o.ReplicationTarget
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotTarget struct {
	value *SnapshotTarget
	isSet bool
}

func (v NullableSnapshotTarget) Get() *SnapshotTarget {
	return v.value
}

func (v *NullableSnapshotTarget) Set(val *SnapshotTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotTarget(val *SnapshotTarget) *NullableSnapshotTarget {
	return &NullableSnapshotTarget{value: val, isSet: true}
}

func (v NullableSnapshotTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


