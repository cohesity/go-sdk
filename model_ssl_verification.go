/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SslVerification Specifies information about SSL verification when registering certain sources.
type SslVerification struct {
	// Contains the contents of CA cert/cert chain.
	CaCertificate NullableString `json:"caCertificate,omitempty"`
	// Whether SSL verification should be performed.
	IsEnabled NullableBool `json:"isEnabled,omitempty"`
}

// NewSslVerification instantiates a new SslVerification object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslVerification() *SslVerification {
	this := SslVerification{}
	return &this
}

// NewSslVerificationWithDefaults instantiates a new SslVerification object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslVerificationWithDefaults() *SslVerification {
	this := SslVerification{}
	return &this
}

// GetCaCertificate returns the CaCertificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslVerification) GetCaCertificate() string {
	if o == nil || o.CaCertificate.Get() == nil {
		var ret string
		return ret
	}
	return *o.CaCertificate.Get()
}

// GetCaCertificateOk returns a tuple with the CaCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslVerification) GetCaCertificateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaCertificate.Get(), o.CaCertificate.IsSet()
}

// HasCaCertificate returns a boolean if a field has been set.
func (o *SslVerification) HasCaCertificate() bool {
	if o != nil && o.CaCertificate.IsSet() {
		return true
	}

	return false
}

// SetCaCertificate gets a reference to the given NullableString and assigns it to the CaCertificate field.
func (o *SslVerification) SetCaCertificate(v string) {
	o.CaCertificate.Set(&v)
}
// SetCaCertificateNil sets the value for CaCertificate to be an explicit nil
func (o *SslVerification) SetCaCertificateNil() {
	o.CaCertificate.Set(nil)
}

// UnsetCaCertificate ensures that no value is present for CaCertificate, not even an explicit nil
func (o *SslVerification) UnsetCaCertificate() {
	o.CaCertificate.Unset()
}

// GetIsEnabled returns the IsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslVerification) GetIsEnabled() bool {
	if o == nil || o.IsEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslVerification) GetIsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// HasIsEnabled returns a boolean if a field has been set.
func (o *SslVerification) HasIsEnabled() bool {
	if o != nil && o.IsEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsEnabled gets a reference to the given NullableBool and assigns it to the IsEnabled field.
func (o *SslVerification) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}
// SetIsEnabledNil sets the value for IsEnabled to be an explicit nil
func (o *SslVerification) SetIsEnabledNil() {
	o.IsEnabled.Set(nil)
}

// UnsetIsEnabled ensures that no value is present for IsEnabled, not even an explicit nil
func (o *SslVerification) UnsetIsEnabled() {
	o.IsEnabled.Unset()
}

func (o SslVerification) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CaCertificate.IsSet() {
		toSerialize["caCertificate"] = o.CaCertificate.Get()
	}
	if o.IsEnabled.IsSet() {
		toSerialize["isEnabled"] = o.IsEnabled.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSslVerification struct {
	value *SslVerification
	isSet bool
}

func (v NullableSslVerification) Get() *SslVerification {
	return v.value
}

func (v *NullableSslVerification) Set(val *SslVerification) {
	v.value = val
	v.isSet = true
}

func (v NullableSslVerification) IsSet() bool {
	return v.isSet
}

func (v *NullableSslVerification) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslVerification(val *SslVerification) *NullableSslVerification {
	return &NullableSslVerification{value: val, isSet: true}
}

func (v NullableSslVerification) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslVerification) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


