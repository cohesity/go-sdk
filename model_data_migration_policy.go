/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DataMigrationPolicy Specifies settings for data migration in NAS environment. This also specifies the retention policy that should be applied to files after they have been moved to cohesity cluster.
type DataMigrationPolicy struct {
	// Specifies how many days to retain Snapshots on the Cohesity Cluster.
	DaysToKeep NullableInt64 `json:"daysToKeep,omitempty"`
	SchedulingPolicy *SchedulingPolicy `json:"schedulingPolicy,omitempty"`
	// Specifies WORM retention type for the files. When a WORM retention type is specified, the files will be kept until the maximum of the retention time. During that time, the files cannot be deleted. 'kNone' implies there is no WORM retention set. 'kCompliance' implies WORM retention is set for compliance reason. 'kAdministrative' implies WORM retention is set for administrative purposes.
	WormRetentionType NullableString `json:"wormRetentionType,omitempty"`
}

// NewDataMigrationPolicy instantiates a new DataMigrationPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataMigrationPolicy() *DataMigrationPolicy {
	this := DataMigrationPolicy{}
	return &this
}

// NewDataMigrationPolicyWithDefaults instantiates a new DataMigrationPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataMigrationPolicyWithDefaults() *DataMigrationPolicy {
	this := DataMigrationPolicy{}
	return &this
}

// GetDaysToKeep returns the DaysToKeep field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataMigrationPolicy) GetDaysToKeep() int64 {
	if o == nil || o.DaysToKeep.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DaysToKeep.Get()
}

// GetDaysToKeepOk returns a tuple with the DaysToKeep field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataMigrationPolicy) GetDaysToKeepOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DaysToKeep.Get(), o.DaysToKeep.IsSet()
}

// HasDaysToKeep returns a boolean if a field has been set.
func (o *DataMigrationPolicy) HasDaysToKeep() bool {
	if o != nil && o.DaysToKeep.IsSet() {
		return true
	}

	return false
}

// SetDaysToKeep gets a reference to the given NullableInt64 and assigns it to the DaysToKeep field.
func (o *DataMigrationPolicy) SetDaysToKeep(v int64) {
	o.DaysToKeep.Set(&v)
}
// SetDaysToKeepNil sets the value for DaysToKeep to be an explicit nil
func (o *DataMigrationPolicy) SetDaysToKeepNil() {
	o.DaysToKeep.Set(nil)
}

// UnsetDaysToKeep ensures that no value is present for DaysToKeep, not even an explicit nil
func (o *DataMigrationPolicy) UnsetDaysToKeep() {
	o.DaysToKeep.Unset()
}

// GetSchedulingPolicy returns the SchedulingPolicy field value if set, zero value otherwise.
func (o *DataMigrationPolicy) GetSchedulingPolicy() SchedulingPolicy {
	if o == nil || o.SchedulingPolicy == nil {
		var ret SchedulingPolicy
		return ret
	}
	return *o.SchedulingPolicy
}

// GetSchedulingPolicyOk returns a tuple with the SchedulingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataMigrationPolicy) GetSchedulingPolicyOk() (*SchedulingPolicy, bool) {
	if o == nil || o.SchedulingPolicy == nil {
		return nil, false
	}
	return o.SchedulingPolicy, true
}

// HasSchedulingPolicy returns a boolean if a field has been set.
func (o *DataMigrationPolicy) HasSchedulingPolicy() bool {
	if o != nil && o.SchedulingPolicy != nil {
		return true
	}

	return false
}

// SetSchedulingPolicy gets a reference to the given SchedulingPolicy and assigns it to the SchedulingPolicy field.
func (o *DataMigrationPolicy) SetSchedulingPolicy(v SchedulingPolicy) {
	o.SchedulingPolicy = &v
}

// GetWormRetentionType returns the WormRetentionType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataMigrationPolicy) GetWormRetentionType() string {
	if o == nil || o.WormRetentionType.Get() == nil {
		var ret string
		return ret
	}
	return *o.WormRetentionType.Get()
}

// GetWormRetentionTypeOk returns a tuple with the WormRetentionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataMigrationPolicy) GetWormRetentionTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WormRetentionType.Get(), o.WormRetentionType.IsSet()
}

// HasWormRetentionType returns a boolean if a field has been set.
func (o *DataMigrationPolicy) HasWormRetentionType() bool {
	if o != nil && o.WormRetentionType.IsSet() {
		return true
	}

	return false
}

// SetWormRetentionType gets a reference to the given NullableString and assigns it to the WormRetentionType field.
func (o *DataMigrationPolicy) SetWormRetentionType(v string) {
	o.WormRetentionType.Set(&v)
}
// SetWormRetentionTypeNil sets the value for WormRetentionType to be an explicit nil
func (o *DataMigrationPolicy) SetWormRetentionTypeNil() {
	o.WormRetentionType.Set(nil)
}

// UnsetWormRetentionType ensures that no value is present for WormRetentionType, not even an explicit nil
func (o *DataMigrationPolicy) UnsetWormRetentionType() {
	o.WormRetentionType.Unset()
}

func (o DataMigrationPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DaysToKeep.IsSet() {
		toSerialize["daysToKeep"] = o.DaysToKeep.Get()
	}
	if o.SchedulingPolicy != nil {
		toSerialize["schedulingPolicy"] = o.SchedulingPolicy
	}
	if o.WormRetentionType.IsSet() {
		toSerialize["wormRetentionType"] = o.WormRetentionType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataMigrationPolicy struct {
	value *DataMigrationPolicy
	isSet bool
}

func (v NullableDataMigrationPolicy) Get() *DataMigrationPolicy {
	return v.value
}

func (v *NullableDataMigrationPolicy) Set(val *DataMigrationPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDataMigrationPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDataMigrationPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataMigrationPolicy(val *DataMigrationPolicy) *NullableDataMigrationPolicy {
	return &NullableDataMigrationPolicy{value: val, isSet: true}
}

func (v NullableDataMigrationPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataMigrationPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


