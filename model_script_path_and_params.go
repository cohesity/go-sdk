/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ScriptPathAndParams A message to encapsulate pre or post script associated with a backup job policy.
type ScriptPathAndParams struct {
	// Applicable only for pre backup scripts. If this flag is set to true, then backup job will start even if the pre backup script fails.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Indicates if the script is active. If 'is_active' is set to false, this script will not be executed even if it is part of the backup job.
	IsActive NullableBool `json:"isActive,omitempty"`
	// Custom parameters that users want to pass to the script. For example, if user wants to pass following params: 1. foo=bar 2. v=10. User can construct the param string as \"far=bar v=10\".
	ScriptParams NullableString `json:"scriptParams,omitempty"`
	// For backup jobs of type 'kPuppeteer', 'script_path' is full path of location of the script within the host. For Pre/Post scripts of agent-based backup jobs, 'script_path' is just name of the script, not full path.
	ScriptPath NullableString `json:"scriptPath,omitempty"`
	// Timeout of the script. The script will be killed if it exceeds this value. '-1' indicates that the timeout is not set for the script.
	TimeoutSecs NullableInt32 `json:"timeoutSecs,omitempty"`
}

// NewScriptPathAndParams instantiates a new ScriptPathAndParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewScriptPathAndParams() *ScriptPathAndParams {
	this := ScriptPathAndParams{}
	return &this
}

// NewScriptPathAndParamsWithDefaults instantiates a new ScriptPathAndParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewScriptPathAndParamsWithDefaults() *ScriptPathAndParams {
	this := ScriptPathAndParams{}
	return &this
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScriptPathAndParams) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScriptPathAndParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *ScriptPathAndParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *ScriptPathAndParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *ScriptPathAndParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *ScriptPathAndParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScriptPathAndParams) GetIsActive() bool {
	if o == nil || o.IsActive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScriptPathAndParams) GetIsActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *ScriptPathAndParams) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *ScriptPathAndParams) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *ScriptPathAndParams) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *ScriptPathAndParams) UnsetIsActive() {
	o.IsActive.Unset()
}

// GetScriptParams returns the ScriptParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScriptPathAndParams) GetScriptParams() string {
	if o == nil || o.ScriptParams.Get() == nil {
		var ret string
		return ret
	}
	return *o.ScriptParams.Get()
}

// GetScriptParamsOk returns a tuple with the ScriptParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScriptPathAndParams) GetScriptParamsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ScriptParams.Get(), o.ScriptParams.IsSet()
}

// HasScriptParams returns a boolean if a field has been set.
func (o *ScriptPathAndParams) HasScriptParams() bool {
	if o != nil && o.ScriptParams.IsSet() {
		return true
	}

	return false
}

// SetScriptParams gets a reference to the given NullableString and assigns it to the ScriptParams field.
func (o *ScriptPathAndParams) SetScriptParams(v string) {
	o.ScriptParams.Set(&v)
}
// SetScriptParamsNil sets the value for ScriptParams to be an explicit nil
func (o *ScriptPathAndParams) SetScriptParamsNil() {
	o.ScriptParams.Set(nil)
}

// UnsetScriptParams ensures that no value is present for ScriptParams, not even an explicit nil
func (o *ScriptPathAndParams) UnsetScriptParams() {
	o.ScriptParams.Unset()
}

// GetScriptPath returns the ScriptPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScriptPathAndParams) GetScriptPath() string {
	if o == nil || o.ScriptPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ScriptPath.Get()
}

// GetScriptPathOk returns a tuple with the ScriptPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScriptPathAndParams) GetScriptPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ScriptPath.Get(), o.ScriptPath.IsSet()
}

// HasScriptPath returns a boolean if a field has been set.
func (o *ScriptPathAndParams) HasScriptPath() bool {
	if o != nil && o.ScriptPath.IsSet() {
		return true
	}

	return false
}

// SetScriptPath gets a reference to the given NullableString and assigns it to the ScriptPath field.
func (o *ScriptPathAndParams) SetScriptPath(v string) {
	o.ScriptPath.Set(&v)
}
// SetScriptPathNil sets the value for ScriptPath to be an explicit nil
func (o *ScriptPathAndParams) SetScriptPathNil() {
	o.ScriptPath.Set(nil)
}

// UnsetScriptPath ensures that no value is present for ScriptPath, not even an explicit nil
func (o *ScriptPathAndParams) UnsetScriptPath() {
	o.ScriptPath.Unset()
}

// GetTimeoutSecs returns the TimeoutSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ScriptPathAndParams) GetTimeoutSecs() int32 {
	if o == nil || o.TimeoutSecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TimeoutSecs.Get()
}

// GetTimeoutSecsOk returns a tuple with the TimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ScriptPathAndParams) GetTimeoutSecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimeoutSecs.Get(), o.TimeoutSecs.IsSet()
}

// HasTimeoutSecs returns a boolean if a field has been set.
func (o *ScriptPathAndParams) HasTimeoutSecs() bool {
	if o != nil && o.TimeoutSecs.IsSet() {
		return true
	}

	return false
}

// SetTimeoutSecs gets a reference to the given NullableInt32 and assigns it to the TimeoutSecs field.
func (o *ScriptPathAndParams) SetTimeoutSecs(v int32) {
	o.TimeoutSecs.Set(&v)
}
// SetTimeoutSecsNil sets the value for TimeoutSecs to be an explicit nil
func (o *ScriptPathAndParams) SetTimeoutSecsNil() {
	o.TimeoutSecs.Set(nil)
}

// UnsetTimeoutSecs ensures that no value is present for TimeoutSecs, not even an explicit nil
func (o *ScriptPathAndParams) UnsetTimeoutSecs() {
	o.TimeoutSecs.Unset()
}

func (o ScriptPathAndParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	if o.ScriptParams.IsSet() {
		toSerialize["scriptParams"] = o.ScriptParams.Get()
	}
	if o.ScriptPath.IsSet() {
		toSerialize["scriptPath"] = o.ScriptPath.Get()
	}
	if o.TimeoutSecs.IsSet() {
		toSerialize["timeoutSecs"] = o.TimeoutSecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableScriptPathAndParams struct {
	value *ScriptPathAndParams
	isSet bool
}

func (v NullableScriptPathAndParams) Get() *ScriptPathAndParams {
	return v.value
}

func (v *NullableScriptPathAndParams) Set(val *ScriptPathAndParams) {
	v.value = val
	v.isSet = true
}

func (v NullableScriptPathAndParams) IsSet() bool {
	return v.isSet
}

func (v *NullableScriptPathAndParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableScriptPathAndParams(val *ScriptPathAndParams) *NullableScriptPathAndParams {
	return &NullableScriptPathAndParams{value: val, isSet: true}
}

func (v NullableScriptPathAndParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableScriptPathAndParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


