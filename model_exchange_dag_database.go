/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ExchangeDAGDatabase Specifies the information about all the copies of the database that is part of DAG.
type ExchangeDAGDatabase struct {
	// Specifies about all the copies of this DAG database. This include active and passive copy of the database.
	DatabaseCopyInfoList []ExchangeDatabaseCopyInfo `json:"databaseCopyInfoList,omitempty"`
	// Specifies the guid of the database.
	Guid NullableString `json:"guid,omitempty"`
	// Specifies the name of the database.
	Name NullableString `json:"name,omitempty"`
}

// NewExchangeDAGDatabase instantiates a new ExchangeDAGDatabase object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeDAGDatabase() *ExchangeDAGDatabase {
	this := ExchangeDAGDatabase{}
	return &this
}

// NewExchangeDAGDatabaseWithDefaults instantiates a new ExchangeDAGDatabase object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeDAGDatabaseWithDefaults() *ExchangeDAGDatabase {
	this := ExchangeDAGDatabase{}
	return &this
}

// GetDatabaseCopyInfoList returns the DatabaseCopyInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDAGDatabase) GetDatabaseCopyInfoList() []ExchangeDatabaseCopyInfo {
	if o == nil  {
		var ret []ExchangeDatabaseCopyInfo
		return ret
	}
	return o.DatabaseCopyInfoList
}

// GetDatabaseCopyInfoListOk returns a tuple with the DatabaseCopyInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDAGDatabase) GetDatabaseCopyInfoListOk() (*[]ExchangeDatabaseCopyInfo, bool) {
	if o == nil || o.DatabaseCopyInfoList == nil {
		return nil, false
	}
	return &o.DatabaseCopyInfoList, true
}

// HasDatabaseCopyInfoList returns a boolean if a field has been set.
func (o *ExchangeDAGDatabase) HasDatabaseCopyInfoList() bool {
	if o != nil && o.DatabaseCopyInfoList != nil {
		return true
	}

	return false
}

// SetDatabaseCopyInfoList gets a reference to the given []ExchangeDatabaseCopyInfo and assigns it to the DatabaseCopyInfoList field.
func (o *ExchangeDAGDatabase) SetDatabaseCopyInfoList(v []ExchangeDatabaseCopyInfo) {
	o.DatabaseCopyInfoList = v
}

// GetGuid returns the Guid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDAGDatabase) GetGuid() string {
	if o == nil || o.Guid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Guid.Get()
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDAGDatabase) GetGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Guid.Get(), o.Guid.IsSet()
}

// HasGuid returns a boolean if a field has been set.
func (o *ExchangeDAGDatabase) HasGuid() bool {
	if o != nil && o.Guid.IsSet() {
		return true
	}

	return false
}

// SetGuid gets a reference to the given NullableString and assigns it to the Guid field.
func (o *ExchangeDAGDatabase) SetGuid(v string) {
	o.Guid.Set(&v)
}
// SetGuidNil sets the value for Guid to be an explicit nil
func (o *ExchangeDAGDatabase) SetGuidNil() {
	o.Guid.Set(nil)
}

// UnsetGuid ensures that no value is present for Guid, not even an explicit nil
func (o *ExchangeDAGDatabase) UnsetGuid() {
	o.Guid.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeDAGDatabase) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeDAGDatabase) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ExchangeDAGDatabase) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ExchangeDAGDatabase) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ExchangeDAGDatabase) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ExchangeDAGDatabase) UnsetName() {
	o.Name.Unset()
}

func (o ExchangeDAGDatabase) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatabaseCopyInfoList != nil {
		toSerialize["databaseCopyInfoList"] = o.DatabaseCopyInfoList
	}
	if o.Guid.IsSet() {
		toSerialize["guid"] = o.Guid.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeDAGDatabase struct {
	value *ExchangeDAGDatabase
	isSet bool
}

func (v NullableExchangeDAGDatabase) Get() *ExchangeDAGDatabase {
	return v.value
}

func (v *NullableExchangeDAGDatabase) Set(val *ExchangeDAGDatabase) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeDAGDatabase) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeDAGDatabase) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeDAGDatabase(val *ExchangeDAGDatabase) *NullableExchangeDAGDatabase {
	return &NullableExchangeDAGDatabase{value: val, isSet: true}
}

func (v NullableExchangeDAGDatabase) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeDAGDatabase) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


