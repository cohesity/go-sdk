/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// Vault Specifies an external storage location and is equivalent to an External Target in the Cohesity Dashboard. A Vault can provide an additional Cloud Tier where cold data of the Cohesity Cluster can be stored in the Cloud. A Vault can also provide archive storage for backup data. This archive data is stored on Tapes and in Cloud Vaults.
type Vault struct {
	// Specifies the CA (certificate authority) trusted certificate.
	CaTrustedCertificate NullableString `json:"caTrustedCertificate,omitempty"`
	// Specifies the client CA  certificate. This certificate is in pem format.
	ClientCertificate NullableString `json:"clientCertificate,omitempty"`
	// Specifies the client private key. This certificate is in pem format.
	ClientPrivateKey NullableString `json:"clientPrivateKey,omitempty"`
	// Specifies whether to send data to the Vault in a compressed format. 'kCompressionNone' indicates that data is not compressed. 'kCompressionLow' indicates that data is compressed using LZ4 or Snappy. 'kCompressionHigh' indicates that data is compressed in Gzip.
	CompressionPolicy NullableString `json:"compressionPolicy,omitempty"`
	Config *VaultConfig `json:"config,omitempty"`
	// Specifies whether to manage the encryption key manually or let the Cohesity Cluster manage it. If true, you must get the encryption key store it outside the Cluster, before disaster strikes such as the source local Cohesity Cluster being down. You can get the encryption key by downloading it using the Cohesity Dashboard or by calling the GET /public/vaults/encryptionKey/{id} operation.
	CustomerManagingEncryptionKeys NullableBool `json:"customerManagingEncryptionKeys,omitempty"`
	// Specifies whether to deduplicate data before sending it to the Vault.
	DedupEnabled NullableBool `json:"dedupEnabled,omitempty"`
	// Specifies the error message when deleting a vault.
	DeleteVaultError NullableString `json:"deleteVaultError,omitempty"`
	// Specifies a description about the Vault.
	Description NullableString `json:"description,omitempty"`
	// Desired location for write ahead logs(wal). 'kHomePartition' indicates desired wal location to be the home partition. 'kDisk' indicates desired wal location to be the same disk as chunk repo. 'kScribe' indicates desired wal location to be scribe. 'kScribeTable' indicates chunk repository state is kept as key-value pairs in scribe.
	DesiredWalLocation NullableString `json:"desiredWalLocation,omitempty"`
	// Specifies if the encryption key file has been downloaded using the Cohesity Dashboard (Cohesity UI). If true, the encryption key has been downloaded using the Cohesity Dashboard. An encryption key can only be downloaded once using the Cohesity Dashboard.
	EncryptionKeyFileDownloaded NullableBool `json:"encryptionKeyFileDownloaded,omitempty"`
	// Specifies whether to send and store data in an encrypted format. 'kEncryptionNone' indicates the data is not encrypted. 'kEncryptionStrong' indicates the data is encrypted.
	EncryptionPolicy NullableString `json:"encryptionPolicy,omitempty"`
	// Specifies the type of Vault. 'kNearline' indicates a Google Nearline Vault. 'kGlacier' indicates an AWS Glacier Vault. 'kS3' indicates an AWS S3 Vault. 'kAzureStandard' indicates a Microsoft Azure Standard Vault. 'kS3Compatible' indicates an S3 Compatible Vault. (See the online help for supported types.) 'kQStarTape' indicates a QStar Tape Vault. 'kGoogleStandard' indicates a Google Standard Vault. 'kGoogleDRA' indicates a Google DRA Vault. 'kAmazonS3StandardIA' indicates an Amazon S3 Standard-IA Vault. 'kAWSGovCloud' indicates an AWS Gov Cloud Vault. 'kNAS' indicates a NAS Vault. 'kColdline' indicates a Google Coldline Vault. 'kAzureGovCloud' indicates a Microsoft Azure Gov Cloud Vault. 'kAzureArchive' indicates an Azure Archive Vault. 'kAzure' indicates an Azure Vault. 'kGoogle' indicates a Google Vault. 'kAmazon' indicates an Amazon Vault. 'kOracle' indicates an Oracle Vault. 'kOracleTierStandard' indicates an Oracle Tier Standard Vault. 'kOracleTierArchive' indicates an Oracle Tier Archive Vault. 'kAmazonC2S' indicates an Amazon Commercial Cloud Services Vault.
	ExternalTargetType NullableString `json:"externalTargetType,omitempty"`
	// Specifies the number days between full archives to the Vault. The current default is 90 days. This is only meaningful when incrementalArchivesEnabled is true and the Vault usage type is kArchival.
	FullArchiveIntervalDays NullableInt64 `json:"fullArchiveIntervalDays,omitempty"`
	// Specifies an id that identifies the Vault.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies whether to perform incremental archival when sending data to the Vault. If false, only full backups are performed. If true, incremental backups are performed between the full backups.
	IncrementalArchivesEnabled NullableBool `json:"incrementalArchivesEnabled,omitempty"`
	// Specifies if given password is not encrypted or not in the cluster config.
	IsPasswordEncrypted NullableBool `json:"isPasswordEncrypted,omitempty"`
	// Specifies the time (in microseconds) when the encryption key file was downloaded from the Cohesity Dashboard (Cohesity UI). An encryption key can only be downloaded once using the Cohesity Dashboard.
	KeyFileDownloadTimeUsecs NullableInt64 `json:"keyFileDownloadTimeUsecs,omitempty"`
	// Specifies the user who downloaded the encryption key from the Cohesity Dashboard (Cohesity UI). This field is only populated if encryption is enabled for the Vault and customerManagingEncryptionKeys is true.
	KeyFileDownloadUser NullableString `json:"keyFileDownloadUser,omitempty"`
	// Specifies the name of the Vault.
	Name NullableString `json:"name,omitempty"`
	// Specifies the state of the vault to be removed. 'kDontRemove' means the state of object is functional and it is not being removed. 'kMarkedForRemoval' means the object is being removed. 'kOkToRemove' means the object has been removed on the Cohesity Cluster and if the object is physical, it can be removed from the Cohesity Cluster.
	RemovalState NullableString `json:"removalState,omitempty"`
	// Specifies the type of Vault. This field is deprecated. This field is split into ExternalTargetType in and TierType in respective credentials. Initialize those fields instead. deprecated: true 'kNearline' indicates a Google Nearline Vault. 'kGlacier' indicates an AWS Glacier Vault. 'kS3' indicates an AWS S3 Vault. 'kAzureStandard' indicates a Microsoft Azure Standard Vault. 'kS3Compatible' indicates an S3 Compatible Vault. (See the online help for supported types.) 'kQStarTape' indicates a QStar Tape Vault. 'kGoogleStandard' indicates a Google Standard Vault. 'kGoogleDRA' indicates a Google DRA Vault. 'kAmazonS3StandardIA' indicates an Amazon S3 Standard-IA Vault. 'kAWSGovCloud' indicates an AWS Gov Cloud Vault. 'kNAS' indicates a NAS Vault. 'kColdline' indicates a Google Coldline Vault. 'kAzureGovCloud' indicates a Microsoft Azure Gov Cloud Vault. 'kAzureArchive' indicates an Azure Archive Vault. 'kAzure' indicates an Azure Vault. 'kGoogle' indicates a Google Vault. 'kAmazon' indicates an Amazon Vault. 'kOracle' indicates an Oracle Vault. 'kOracleTierStandard' indicates an Oracle Tier Standard Vault. 'kOracleTierArchive' indicates an Oracle Tier Archive Vault. 'kAmazonC2S' indicates an Amazon Commercial Cloud Services Vault.
	Type NullableString `json:"type,omitempty"`
	// Specifies the usage type of the Vault. 'kArchival' indicates the Vault provides archive storage for backup data. 'kCloudSpill' indicates the Vault provides additional storage for cold data.
	UsageType NullableString `json:"usageType,omitempty"`
	VaultBandwidthLimits *VaultBandwidthLimits `json:"vaultBandwidthLimits,omitempty"`
}

// NewVault instantiates a new Vault object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVault() *Vault {
	this := Vault{}
	return &this
}

// NewVaultWithDefaults instantiates a new Vault object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultWithDefaults() *Vault {
	this := Vault{}
	return &this
}

// GetCaTrustedCertificate returns the CaTrustedCertificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetCaTrustedCertificate() string {
	if o == nil || o.CaTrustedCertificate.Get() == nil {
		var ret string
		return ret
	}
	return *o.CaTrustedCertificate.Get()
}

// GetCaTrustedCertificateOk returns a tuple with the CaTrustedCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetCaTrustedCertificateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaTrustedCertificate.Get(), o.CaTrustedCertificate.IsSet()
}

// HasCaTrustedCertificate returns a boolean if a field has been set.
func (o *Vault) HasCaTrustedCertificate() bool {
	if o != nil && o.CaTrustedCertificate.IsSet() {
		return true
	}

	return false
}

// SetCaTrustedCertificate gets a reference to the given NullableString and assigns it to the CaTrustedCertificate field.
func (o *Vault) SetCaTrustedCertificate(v string) {
	o.CaTrustedCertificate.Set(&v)
}
// SetCaTrustedCertificateNil sets the value for CaTrustedCertificate to be an explicit nil
func (o *Vault) SetCaTrustedCertificateNil() {
	o.CaTrustedCertificate.Set(nil)
}

// UnsetCaTrustedCertificate ensures that no value is present for CaTrustedCertificate, not even an explicit nil
func (o *Vault) UnsetCaTrustedCertificate() {
	o.CaTrustedCertificate.Unset()
}

// GetClientCertificate returns the ClientCertificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetClientCertificate() string {
	if o == nil || o.ClientCertificate.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClientCertificate.Get()
}

// GetClientCertificateOk returns a tuple with the ClientCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetClientCertificateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClientCertificate.Get(), o.ClientCertificate.IsSet()
}

// HasClientCertificate returns a boolean if a field has been set.
func (o *Vault) HasClientCertificate() bool {
	if o != nil && o.ClientCertificate.IsSet() {
		return true
	}

	return false
}

// SetClientCertificate gets a reference to the given NullableString and assigns it to the ClientCertificate field.
func (o *Vault) SetClientCertificate(v string) {
	o.ClientCertificate.Set(&v)
}
// SetClientCertificateNil sets the value for ClientCertificate to be an explicit nil
func (o *Vault) SetClientCertificateNil() {
	o.ClientCertificate.Set(nil)
}

// UnsetClientCertificate ensures that no value is present for ClientCertificate, not even an explicit nil
func (o *Vault) UnsetClientCertificate() {
	o.ClientCertificate.Unset()
}

// GetClientPrivateKey returns the ClientPrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetClientPrivateKey() string {
	if o == nil || o.ClientPrivateKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClientPrivateKey.Get()
}

// GetClientPrivateKeyOk returns a tuple with the ClientPrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetClientPrivateKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClientPrivateKey.Get(), o.ClientPrivateKey.IsSet()
}

// HasClientPrivateKey returns a boolean if a field has been set.
func (o *Vault) HasClientPrivateKey() bool {
	if o != nil && o.ClientPrivateKey.IsSet() {
		return true
	}

	return false
}

// SetClientPrivateKey gets a reference to the given NullableString and assigns it to the ClientPrivateKey field.
func (o *Vault) SetClientPrivateKey(v string) {
	o.ClientPrivateKey.Set(&v)
}
// SetClientPrivateKeyNil sets the value for ClientPrivateKey to be an explicit nil
func (o *Vault) SetClientPrivateKeyNil() {
	o.ClientPrivateKey.Set(nil)
}

// UnsetClientPrivateKey ensures that no value is present for ClientPrivateKey, not even an explicit nil
func (o *Vault) UnsetClientPrivateKey() {
	o.ClientPrivateKey.Unset()
}

// GetCompressionPolicy returns the CompressionPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetCompressionPolicy() string {
	if o == nil || o.CompressionPolicy.Get() == nil {
		var ret string
		return ret
	}
	return *o.CompressionPolicy.Get()
}

// GetCompressionPolicyOk returns a tuple with the CompressionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetCompressionPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CompressionPolicy.Get(), o.CompressionPolicy.IsSet()
}

// HasCompressionPolicy returns a boolean if a field has been set.
func (o *Vault) HasCompressionPolicy() bool {
	if o != nil && o.CompressionPolicy.IsSet() {
		return true
	}

	return false
}

// SetCompressionPolicy gets a reference to the given NullableString and assigns it to the CompressionPolicy field.
func (o *Vault) SetCompressionPolicy(v string) {
	o.CompressionPolicy.Set(&v)
}
// SetCompressionPolicyNil sets the value for CompressionPolicy to be an explicit nil
func (o *Vault) SetCompressionPolicyNil() {
	o.CompressionPolicy.Set(nil)
}

// UnsetCompressionPolicy ensures that no value is present for CompressionPolicy, not even an explicit nil
func (o *Vault) UnsetCompressionPolicy() {
	o.CompressionPolicy.Unset()
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *Vault) GetConfig() VaultConfig {
	if o == nil || o.Config == nil {
		var ret VaultConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vault) GetConfigOk() (*VaultConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *Vault) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given VaultConfig and assigns it to the Config field.
func (o *Vault) SetConfig(v VaultConfig) {
	o.Config = &v
}

// GetCustomerManagingEncryptionKeys returns the CustomerManagingEncryptionKeys field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetCustomerManagingEncryptionKeys() bool {
	if o == nil || o.CustomerManagingEncryptionKeys.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CustomerManagingEncryptionKeys.Get()
}

// GetCustomerManagingEncryptionKeysOk returns a tuple with the CustomerManagingEncryptionKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetCustomerManagingEncryptionKeysOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CustomerManagingEncryptionKeys.Get(), o.CustomerManagingEncryptionKeys.IsSet()
}

// HasCustomerManagingEncryptionKeys returns a boolean if a field has been set.
func (o *Vault) HasCustomerManagingEncryptionKeys() bool {
	if o != nil && o.CustomerManagingEncryptionKeys.IsSet() {
		return true
	}

	return false
}

// SetCustomerManagingEncryptionKeys gets a reference to the given NullableBool and assigns it to the CustomerManagingEncryptionKeys field.
func (o *Vault) SetCustomerManagingEncryptionKeys(v bool) {
	o.CustomerManagingEncryptionKeys.Set(&v)
}
// SetCustomerManagingEncryptionKeysNil sets the value for CustomerManagingEncryptionKeys to be an explicit nil
func (o *Vault) SetCustomerManagingEncryptionKeysNil() {
	o.CustomerManagingEncryptionKeys.Set(nil)
}

// UnsetCustomerManagingEncryptionKeys ensures that no value is present for CustomerManagingEncryptionKeys, not even an explicit nil
func (o *Vault) UnsetCustomerManagingEncryptionKeys() {
	o.CustomerManagingEncryptionKeys.Unset()
}

// GetDedupEnabled returns the DedupEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetDedupEnabled() bool {
	if o == nil || o.DedupEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DedupEnabled.Get()
}

// GetDedupEnabledOk returns a tuple with the DedupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetDedupEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DedupEnabled.Get(), o.DedupEnabled.IsSet()
}

// HasDedupEnabled returns a boolean if a field has been set.
func (o *Vault) HasDedupEnabled() bool {
	if o != nil && o.DedupEnabled.IsSet() {
		return true
	}

	return false
}

// SetDedupEnabled gets a reference to the given NullableBool and assigns it to the DedupEnabled field.
func (o *Vault) SetDedupEnabled(v bool) {
	o.DedupEnabled.Set(&v)
}
// SetDedupEnabledNil sets the value for DedupEnabled to be an explicit nil
func (o *Vault) SetDedupEnabledNil() {
	o.DedupEnabled.Set(nil)
}

// UnsetDedupEnabled ensures that no value is present for DedupEnabled, not even an explicit nil
func (o *Vault) UnsetDedupEnabled() {
	o.DedupEnabled.Unset()
}

// GetDeleteVaultError returns the DeleteVaultError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetDeleteVaultError() string {
	if o == nil || o.DeleteVaultError.Get() == nil {
		var ret string
		return ret
	}
	return *o.DeleteVaultError.Get()
}

// GetDeleteVaultErrorOk returns a tuple with the DeleteVaultError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetDeleteVaultErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeleteVaultError.Get(), o.DeleteVaultError.IsSet()
}

// HasDeleteVaultError returns a boolean if a field has been set.
func (o *Vault) HasDeleteVaultError() bool {
	if o != nil && o.DeleteVaultError.IsSet() {
		return true
	}

	return false
}

// SetDeleteVaultError gets a reference to the given NullableString and assigns it to the DeleteVaultError field.
func (o *Vault) SetDeleteVaultError(v string) {
	o.DeleteVaultError.Set(&v)
}
// SetDeleteVaultErrorNil sets the value for DeleteVaultError to be an explicit nil
func (o *Vault) SetDeleteVaultErrorNil() {
	o.DeleteVaultError.Set(nil)
}

// UnsetDeleteVaultError ensures that no value is present for DeleteVaultError, not even an explicit nil
func (o *Vault) UnsetDeleteVaultError() {
	o.DeleteVaultError.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Vault) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Vault) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Vault) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Vault) UnsetDescription() {
	o.Description.Unset()
}

// GetDesiredWalLocation returns the DesiredWalLocation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetDesiredWalLocation() string {
	if o == nil || o.DesiredWalLocation.Get() == nil {
		var ret string
		return ret
	}
	return *o.DesiredWalLocation.Get()
}

// GetDesiredWalLocationOk returns a tuple with the DesiredWalLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetDesiredWalLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DesiredWalLocation.Get(), o.DesiredWalLocation.IsSet()
}

// HasDesiredWalLocation returns a boolean if a field has been set.
func (o *Vault) HasDesiredWalLocation() bool {
	if o != nil && o.DesiredWalLocation.IsSet() {
		return true
	}

	return false
}

// SetDesiredWalLocation gets a reference to the given NullableString and assigns it to the DesiredWalLocation field.
func (o *Vault) SetDesiredWalLocation(v string) {
	o.DesiredWalLocation.Set(&v)
}
// SetDesiredWalLocationNil sets the value for DesiredWalLocation to be an explicit nil
func (o *Vault) SetDesiredWalLocationNil() {
	o.DesiredWalLocation.Set(nil)
}

// UnsetDesiredWalLocation ensures that no value is present for DesiredWalLocation, not even an explicit nil
func (o *Vault) UnsetDesiredWalLocation() {
	o.DesiredWalLocation.Unset()
}

// GetEncryptionKeyFileDownloaded returns the EncryptionKeyFileDownloaded field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetEncryptionKeyFileDownloaded() bool {
	if o == nil || o.EncryptionKeyFileDownloaded.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EncryptionKeyFileDownloaded.Get()
}

// GetEncryptionKeyFileDownloadedOk returns a tuple with the EncryptionKeyFileDownloaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetEncryptionKeyFileDownloadedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionKeyFileDownloaded.Get(), o.EncryptionKeyFileDownloaded.IsSet()
}

// HasEncryptionKeyFileDownloaded returns a boolean if a field has been set.
func (o *Vault) HasEncryptionKeyFileDownloaded() bool {
	if o != nil && o.EncryptionKeyFileDownloaded.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKeyFileDownloaded gets a reference to the given NullableBool and assigns it to the EncryptionKeyFileDownloaded field.
func (o *Vault) SetEncryptionKeyFileDownloaded(v bool) {
	o.EncryptionKeyFileDownloaded.Set(&v)
}
// SetEncryptionKeyFileDownloadedNil sets the value for EncryptionKeyFileDownloaded to be an explicit nil
func (o *Vault) SetEncryptionKeyFileDownloadedNil() {
	o.EncryptionKeyFileDownloaded.Set(nil)
}

// UnsetEncryptionKeyFileDownloaded ensures that no value is present for EncryptionKeyFileDownloaded, not even an explicit nil
func (o *Vault) UnsetEncryptionKeyFileDownloaded() {
	o.EncryptionKeyFileDownloaded.Unset()
}

// GetEncryptionPolicy returns the EncryptionPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetEncryptionPolicy() string {
	if o == nil || o.EncryptionPolicy.Get() == nil {
		var ret string
		return ret
	}
	return *o.EncryptionPolicy.Get()
}

// GetEncryptionPolicyOk returns a tuple with the EncryptionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetEncryptionPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionPolicy.Get(), o.EncryptionPolicy.IsSet()
}

// HasEncryptionPolicy returns a boolean if a field has been set.
func (o *Vault) HasEncryptionPolicy() bool {
	if o != nil && o.EncryptionPolicy.IsSet() {
		return true
	}

	return false
}

// SetEncryptionPolicy gets a reference to the given NullableString and assigns it to the EncryptionPolicy field.
func (o *Vault) SetEncryptionPolicy(v string) {
	o.EncryptionPolicy.Set(&v)
}
// SetEncryptionPolicyNil sets the value for EncryptionPolicy to be an explicit nil
func (o *Vault) SetEncryptionPolicyNil() {
	o.EncryptionPolicy.Set(nil)
}

// UnsetEncryptionPolicy ensures that no value is present for EncryptionPolicy, not even an explicit nil
func (o *Vault) UnsetEncryptionPolicy() {
	o.EncryptionPolicy.Unset()
}

// GetExternalTargetType returns the ExternalTargetType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetExternalTargetType() string {
	if o == nil || o.ExternalTargetType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ExternalTargetType.Get()
}

// GetExternalTargetTypeOk returns a tuple with the ExternalTargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetExternalTargetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalTargetType.Get(), o.ExternalTargetType.IsSet()
}

// HasExternalTargetType returns a boolean if a field has been set.
func (o *Vault) HasExternalTargetType() bool {
	if o != nil && o.ExternalTargetType.IsSet() {
		return true
	}

	return false
}

// SetExternalTargetType gets a reference to the given NullableString and assigns it to the ExternalTargetType field.
func (o *Vault) SetExternalTargetType(v string) {
	o.ExternalTargetType.Set(&v)
}
// SetExternalTargetTypeNil sets the value for ExternalTargetType to be an explicit nil
func (o *Vault) SetExternalTargetTypeNil() {
	o.ExternalTargetType.Set(nil)
}

// UnsetExternalTargetType ensures that no value is present for ExternalTargetType, not even an explicit nil
func (o *Vault) UnsetExternalTargetType() {
	o.ExternalTargetType.Unset()
}

// GetFullArchiveIntervalDays returns the FullArchiveIntervalDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetFullArchiveIntervalDays() int64 {
	if o == nil || o.FullArchiveIntervalDays.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FullArchiveIntervalDays.Get()
}

// GetFullArchiveIntervalDaysOk returns a tuple with the FullArchiveIntervalDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetFullArchiveIntervalDaysOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullArchiveIntervalDays.Get(), o.FullArchiveIntervalDays.IsSet()
}

// HasFullArchiveIntervalDays returns a boolean if a field has been set.
func (o *Vault) HasFullArchiveIntervalDays() bool {
	if o != nil && o.FullArchiveIntervalDays.IsSet() {
		return true
	}

	return false
}

// SetFullArchiveIntervalDays gets a reference to the given NullableInt64 and assigns it to the FullArchiveIntervalDays field.
func (o *Vault) SetFullArchiveIntervalDays(v int64) {
	o.FullArchiveIntervalDays.Set(&v)
}
// SetFullArchiveIntervalDaysNil sets the value for FullArchiveIntervalDays to be an explicit nil
func (o *Vault) SetFullArchiveIntervalDaysNil() {
	o.FullArchiveIntervalDays.Set(nil)
}

// UnsetFullArchiveIntervalDays ensures that no value is present for FullArchiveIntervalDays, not even an explicit nil
func (o *Vault) UnsetFullArchiveIntervalDays() {
	o.FullArchiveIntervalDays.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Vault) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *Vault) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Vault) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Vault) UnsetId() {
	o.Id.Unset()
}

// GetIncrementalArchivesEnabled returns the IncrementalArchivesEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetIncrementalArchivesEnabled() bool {
	if o == nil || o.IncrementalArchivesEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IncrementalArchivesEnabled.Get()
}

// GetIncrementalArchivesEnabledOk returns a tuple with the IncrementalArchivesEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetIncrementalArchivesEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncrementalArchivesEnabled.Get(), o.IncrementalArchivesEnabled.IsSet()
}

// HasIncrementalArchivesEnabled returns a boolean if a field has been set.
func (o *Vault) HasIncrementalArchivesEnabled() bool {
	if o != nil && o.IncrementalArchivesEnabled.IsSet() {
		return true
	}

	return false
}

// SetIncrementalArchivesEnabled gets a reference to the given NullableBool and assigns it to the IncrementalArchivesEnabled field.
func (o *Vault) SetIncrementalArchivesEnabled(v bool) {
	o.IncrementalArchivesEnabled.Set(&v)
}
// SetIncrementalArchivesEnabledNil sets the value for IncrementalArchivesEnabled to be an explicit nil
func (o *Vault) SetIncrementalArchivesEnabledNil() {
	o.IncrementalArchivesEnabled.Set(nil)
}

// UnsetIncrementalArchivesEnabled ensures that no value is present for IncrementalArchivesEnabled, not even an explicit nil
func (o *Vault) UnsetIncrementalArchivesEnabled() {
	o.IncrementalArchivesEnabled.Unset()
}

// GetIsPasswordEncrypted returns the IsPasswordEncrypted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetIsPasswordEncrypted() bool {
	if o == nil || o.IsPasswordEncrypted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsPasswordEncrypted.Get()
}

// GetIsPasswordEncryptedOk returns a tuple with the IsPasswordEncrypted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetIsPasswordEncryptedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsPasswordEncrypted.Get(), o.IsPasswordEncrypted.IsSet()
}

// HasIsPasswordEncrypted returns a boolean if a field has been set.
func (o *Vault) HasIsPasswordEncrypted() bool {
	if o != nil && o.IsPasswordEncrypted.IsSet() {
		return true
	}

	return false
}

// SetIsPasswordEncrypted gets a reference to the given NullableBool and assigns it to the IsPasswordEncrypted field.
func (o *Vault) SetIsPasswordEncrypted(v bool) {
	o.IsPasswordEncrypted.Set(&v)
}
// SetIsPasswordEncryptedNil sets the value for IsPasswordEncrypted to be an explicit nil
func (o *Vault) SetIsPasswordEncryptedNil() {
	o.IsPasswordEncrypted.Set(nil)
}

// UnsetIsPasswordEncrypted ensures that no value is present for IsPasswordEncrypted, not even an explicit nil
func (o *Vault) UnsetIsPasswordEncrypted() {
	o.IsPasswordEncrypted.Unset()
}

// GetKeyFileDownloadTimeUsecs returns the KeyFileDownloadTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetKeyFileDownloadTimeUsecs() int64 {
	if o == nil || o.KeyFileDownloadTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.KeyFileDownloadTimeUsecs.Get()
}

// GetKeyFileDownloadTimeUsecsOk returns a tuple with the KeyFileDownloadTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetKeyFileDownloadTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeyFileDownloadTimeUsecs.Get(), o.KeyFileDownloadTimeUsecs.IsSet()
}

// HasKeyFileDownloadTimeUsecs returns a boolean if a field has been set.
func (o *Vault) HasKeyFileDownloadTimeUsecs() bool {
	if o != nil && o.KeyFileDownloadTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetKeyFileDownloadTimeUsecs gets a reference to the given NullableInt64 and assigns it to the KeyFileDownloadTimeUsecs field.
func (o *Vault) SetKeyFileDownloadTimeUsecs(v int64) {
	o.KeyFileDownloadTimeUsecs.Set(&v)
}
// SetKeyFileDownloadTimeUsecsNil sets the value for KeyFileDownloadTimeUsecs to be an explicit nil
func (o *Vault) SetKeyFileDownloadTimeUsecsNil() {
	o.KeyFileDownloadTimeUsecs.Set(nil)
}

// UnsetKeyFileDownloadTimeUsecs ensures that no value is present for KeyFileDownloadTimeUsecs, not even an explicit nil
func (o *Vault) UnsetKeyFileDownloadTimeUsecs() {
	o.KeyFileDownloadTimeUsecs.Unset()
}

// GetKeyFileDownloadUser returns the KeyFileDownloadUser field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetKeyFileDownloadUser() string {
	if o == nil || o.KeyFileDownloadUser.Get() == nil {
		var ret string
		return ret
	}
	return *o.KeyFileDownloadUser.Get()
}

// GetKeyFileDownloadUserOk returns a tuple with the KeyFileDownloadUser field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetKeyFileDownloadUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeyFileDownloadUser.Get(), o.KeyFileDownloadUser.IsSet()
}

// HasKeyFileDownloadUser returns a boolean if a field has been set.
func (o *Vault) HasKeyFileDownloadUser() bool {
	if o != nil && o.KeyFileDownloadUser.IsSet() {
		return true
	}

	return false
}

// SetKeyFileDownloadUser gets a reference to the given NullableString and assigns it to the KeyFileDownloadUser field.
func (o *Vault) SetKeyFileDownloadUser(v string) {
	o.KeyFileDownloadUser.Set(&v)
}
// SetKeyFileDownloadUserNil sets the value for KeyFileDownloadUser to be an explicit nil
func (o *Vault) SetKeyFileDownloadUserNil() {
	o.KeyFileDownloadUser.Set(nil)
}

// UnsetKeyFileDownloadUser ensures that no value is present for KeyFileDownloadUser, not even an explicit nil
func (o *Vault) UnsetKeyFileDownloadUser() {
	o.KeyFileDownloadUser.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Vault) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Vault) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Vault) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Vault) UnsetName() {
	o.Name.Unset()
}

// GetRemovalState returns the RemovalState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetRemovalState() string {
	if o == nil || o.RemovalState.Get() == nil {
		var ret string
		return ret
	}
	return *o.RemovalState.Get()
}

// GetRemovalStateOk returns a tuple with the RemovalState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetRemovalStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemovalState.Get(), o.RemovalState.IsSet()
}

// HasRemovalState returns a boolean if a field has been set.
func (o *Vault) HasRemovalState() bool {
	if o != nil && o.RemovalState.IsSet() {
		return true
	}

	return false
}

// SetRemovalState gets a reference to the given NullableString and assigns it to the RemovalState field.
func (o *Vault) SetRemovalState(v string) {
	o.RemovalState.Set(&v)
}
// SetRemovalStateNil sets the value for RemovalState to be an explicit nil
func (o *Vault) SetRemovalStateNil() {
	o.RemovalState.Set(nil)
}

// UnsetRemovalState ensures that no value is present for RemovalState, not even an explicit nil
func (o *Vault) UnsetRemovalState() {
	o.RemovalState.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *Vault) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *Vault) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *Vault) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *Vault) UnsetType() {
	o.Type.Unset()
}

// GetUsageType returns the UsageType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vault) GetUsageType() string {
	if o == nil || o.UsageType.Get() == nil {
		var ret string
		return ret
	}
	return *o.UsageType.Get()
}

// GetUsageTypeOk returns a tuple with the UsageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vault) GetUsageTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageType.Get(), o.UsageType.IsSet()
}

// HasUsageType returns a boolean if a field has been set.
func (o *Vault) HasUsageType() bool {
	if o != nil && o.UsageType.IsSet() {
		return true
	}

	return false
}

// SetUsageType gets a reference to the given NullableString and assigns it to the UsageType field.
func (o *Vault) SetUsageType(v string) {
	o.UsageType.Set(&v)
}
// SetUsageTypeNil sets the value for UsageType to be an explicit nil
func (o *Vault) SetUsageTypeNil() {
	o.UsageType.Set(nil)
}

// UnsetUsageType ensures that no value is present for UsageType, not even an explicit nil
func (o *Vault) UnsetUsageType() {
	o.UsageType.Unset()
}

// GetVaultBandwidthLimits returns the VaultBandwidthLimits field value if set, zero value otherwise.
func (o *Vault) GetVaultBandwidthLimits() VaultBandwidthLimits {
	if o == nil || o.VaultBandwidthLimits == nil {
		var ret VaultBandwidthLimits
		return ret
	}
	return *o.VaultBandwidthLimits
}

// GetVaultBandwidthLimitsOk returns a tuple with the VaultBandwidthLimits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vault) GetVaultBandwidthLimitsOk() (*VaultBandwidthLimits, bool) {
	if o == nil || o.VaultBandwidthLimits == nil {
		return nil, false
	}
	return o.VaultBandwidthLimits, true
}

// HasVaultBandwidthLimits returns a boolean if a field has been set.
func (o *Vault) HasVaultBandwidthLimits() bool {
	if o != nil && o.VaultBandwidthLimits != nil {
		return true
	}

	return false
}

// SetVaultBandwidthLimits gets a reference to the given VaultBandwidthLimits and assigns it to the VaultBandwidthLimits field.
func (o *Vault) SetVaultBandwidthLimits(v VaultBandwidthLimits) {
	o.VaultBandwidthLimits = &v
}

func (o Vault) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CaTrustedCertificate.IsSet() {
		toSerialize["caTrustedCertificate"] = o.CaTrustedCertificate.Get()
	}
	if o.ClientCertificate.IsSet() {
		toSerialize["clientCertificate"] = o.ClientCertificate.Get()
	}
	if o.ClientPrivateKey.IsSet() {
		toSerialize["clientPrivateKey"] = o.ClientPrivateKey.Get()
	}
	if o.CompressionPolicy.IsSet() {
		toSerialize["compressionPolicy"] = o.CompressionPolicy.Get()
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.CustomerManagingEncryptionKeys.IsSet() {
		toSerialize["customerManagingEncryptionKeys"] = o.CustomerManagingEncryptionKeys.Get()
	}
	if o.DedupEnabled.IsSet() {
		toSerialize["dedupEnabled"] = o.DedupEnabled.Get()
	}
	if o.DeleteVaultError.IsSet() {
		toSerialize["deleteVaultError"] = o.DeleteVaultError.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.DesiredWalLocation.IsSet() {
		toSerialize["desiredWalLocation"] = o.DesiredWalLocation.Get()
	}
	if o.EncryptionKeyFileDownloaded.IsSet() {
		toSerialize["encryptionKeyFileDownloaded"] = o.EncryptionKeyFileDownloaded.Get()
	}
	if o.EncryptionPolicy.IsSet() {
		toSerialize["encryptionPolicy"] = o.EncryptionPolicy.Get()
	}
	if o.ExternalTargetType.IsSet() {
		toSerialize["externalTargetType"] = o.ExternalTargetType.Get()
	}
	if o.FullArchiveIntervalDays.IsSet() {
		toSerialize["fullArchiveIntervalDays"] = o.FullArchiveIntervalDays.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IncrementalArchivesEnabled.IsSet() {
		toSerialize["incrementalArchivesEnabled"] = o.IncrementalArchivesEnabled.Get()
	}
	if o.IsPasswordEncrypted.IsSet() {
		toSerialize["isPasswordEncrypted"] = o.IsPasswordEncrypted.Get()
	}
	if o.KeyFileDownloadTimeUsecs.IsSet() {
		toSerialize["keyFileDownloadTimeUsecs"] = o.KeyFileDownloadTimeUsecs.Get()
	}
	if o.KeyFileDownloadUser.IsSet() {
		toSerialize["keyFileDownloadUser"] = o.KeyFileDownloadUser.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.RemovalState.IsSet() {
		toSerialize["removalState"] = o.RemovalState.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.UsageType.IsSet() {
		toSerialize["usageType"] = o.UsageType.Get()
	}
	if o.VaultBandwidthLimits != nil {
		toSerialize["vaultBandwidthLimits"] = o.VaultBandwidthLimits
	}
	return json.Marshal(toSerialize)
}

type NullableVault struct {
	value *Vault
	isSet bool
}

func (v NullableVault) Get() *Vault {
	return v.value
}

func (v *NullableVault) Set(val *Vault) {
	v.value = val
	v.isSet = true
}

func (v NullableVault) IsSet() bool {
	return v.isSet
}

func (v *NullableVault) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVault(val *Vault) *NullableVault {
	return &NullableVault{value: val, isSet: true}
}

func (v NullableVault) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVault) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


