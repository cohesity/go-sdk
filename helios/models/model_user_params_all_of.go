/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// UserParamsAllOf struct for UserParamsAllOf
type UserParamsAllOf struct {
	// Specifies the sid of the User.
	Sid NullableString `json:"sid,omitempty"`
	// Specifies the epoch time in milliseconds when the user account was created.
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies the epoch time in milliseconds when the user account was last modified.
	LastUpdatedTimeMsecs NullableInt64 `json:"lastUpdatedTimeMsecs,omitempty"`
	// Specifies the tenant id of the User.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the S3 Account parameters of the User.
	S3AccountParams *S3AccountParams `json:"s3AccountParams,omitempty"`
	// Specifies the reason for locking the User.
	LockedReason NullableString `json:"lockedReason,omitempty"`
}

// NewUserParamsAllOf instantiates a new UserParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserParamsAllOf() *UserParamsAllOf {
	this := UserParamsAllOf{}
	return &this
}

// NewUserParamsAllOfWithDefaults instantiates a new UserParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserParamsAllOfWithDefaults() *UserParamsAllOf {
	this := UserParamsAllOf{}
	return &this
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParamsAllOf) GetSid() string {
	if o == nil || o.Sid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParamsAllOf) GetSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *UserParamsAllOf) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *UserParamsAllOf) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *UserParamsAllOf) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *UserParamsAllOf) UnsetSid() {
	o.Sid.Unset()
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParamsAllOf) GetCreatedTimeMsecs() int64 {
	if o == nil || o.CreatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParamsAllOf) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *UserParamsAllOf) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *UserParamsAllOf) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *UserParamsAllOf) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *UserParamsAllOf) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetLastUpdatedTimeMsecs returns the LastUpdatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParamsAllOf) GetLastUpdatedTimeMsecs() int64 {
	if o == nil || o.LastUpdatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimeMsecs.Get()
}

// GetLastUpdatedTimeMsecsOk returns a tuple with the LastUpdatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParamsAllOf) GetLastUpdatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastUpdatedTimeMsecs.Get(), o.LastUpdatedTimeMsecs.IsSet()
}

// HasLastUpdatedTimeMsecs returns a boolean if a field has been set.
func (o *UserParamsAllOf) HasLastUpdatedTimeMsecs() bool {
	if o != nil && o.LastUpdatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the LastUpdatedTimeMsecs field.
func (o *UserParamsAllOf) SetLastUpdatedTimeMsecs(v int64) {
	o.LastUpdatedTimeMsecs.Set(&v)
}
// SetLastUpdatedTimeMsecsNil sets the value for LastUpdatedTimeMsecs to be an explicit nil
func (o *UserParamsAllOf) SetLastUpdatedTimeMsecsNil() {
	o.LastUpdatedTimeMsecs.Set(nil)
}

// UnsetLastUpdatedTimeMsecs ensures that no value is present for LastUpdatedTimeMsecs, not even an explicit nil
func (o *UserParamsAllOf) UnsetLastUpdatedTimeMsecs() {
	o.LastUpdatedTimeMsecs.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParamsAllOf) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParamsAllOf) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *UserParamsAllOf) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *UserParamsAllOf) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *UserParamsAllOf) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *UserParamsAllOf) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetS3AccountParams returns the S3AccountParams field value if set, zero value otherwise.
func (o *UserParamsAllOf) GetS3AccountParams() S3AccountParams {
	if o == nil || o.S3AccountParams == nil {
		var ret S3AccountParams
		return ret
	}
	return *o.S3AccountParams
}

// GetS3AccountParamsOk returns a tuple with the S3AccountParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserParamsAllOf) GetS3AccountParamsOk() (*S3AccountParams, bool) {
	if o == nil || o.S3AccountParams == nil {
		return nil, false
	}
	return o.S3AccountParams, true
}

// HasS3AccountParams returns a boolean if a field has been set.
func (o *UserParamsAllOf) HasS3AccountParams() bool {
	if o != nil && o.S3AccountParams != nil {
		return true
	}

	return false
}

// SetS3AccountParams gets a reference to the given S3AccountParams and assigns it to the S3AccountParams field.
func (o *UserParamsAllOf) SetS3AccountParams(v S3AccountParams) {
	o.S3AccountParams = &v
}

// GetLockedReason returns the LockedReason field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserParamsAllOf) GetLockedReason() string {
	if o == nil || o.LockedReason.Get() == nil {
		var ret string
		return ret
	}
	return *o.LockedReason.Get()
}

// GetLockedReasonOk returns a tuple with the LockedReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserParamsAllOf) GetLockedReasonOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LockedReason.Get(), o.LockedReason.IsSet()
}

// HasLockedReason returns a boolean if a field has been set.
func (o *UserParamsAllOf) HasLockedReason() bool {
	if o != nil && o.LockedReason.IsSet() {
		return true
	}

	return false
}

// SetLockedReason gets a reference to the given NullableString and assigns it to the LockedReason field.
func (o *UserParamsAllOf) SetLockedReason(v string) {
	o.LockedReason.Set(&v)
}
// SetLockedReasonNil sets the value for LockedReason to be an explicit nil
func (o *UserParamsAllOf) SetLockedReasonNil() {
	o.LockedReason.Set(nil)
}

// UnsetLockedReason ensures that no value is present for LockedReason, not even an explicit nil
func (o *UserParamsAllOf) UnsetLockedReason() {
	o.LockedReason.Unset()
}

func (o UserParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if o.LastUpdatedTimeMsecs.IsSet() {
		toSerialize["lastUpdatedTimeMsecs"] = o.LastUpdatedTimeMsecs.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.S3AccountParams != nil {
		toSerialize["s3AccountParams"] = o.S3AccountParams
	}
	if o.LockedReason.IsSet() {
		toSerialize["lockedReason"] = o.LockedReason.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUserParamsAllOf struct {
	value *UserParamsAllOf
	isSet bool
}

func (v NullableUserParamsAllOf) Get() *UserParamsAllOf {
	return v.value
}

func (v *NullableUserParamsAllOf) Set(val *UserParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableUserParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableUserParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserParamsAllOf(val *UserParamsAllOf) *NullableUserParamsAllOf {
	return &NullableUserParamsAllOf{value: val, isSet: true}
}

func (v NullableUserParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


