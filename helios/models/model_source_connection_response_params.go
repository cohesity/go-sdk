/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SourceConnectionResponseParams Specifies the response from a test connection request.
type SourceConnectionResponseParams struct {
	// Specifies the environment type of the Protection Source.
	Environment NullableString `json:"environment"`
	// Specifies the id of the connection from where this source is reachable. This should only be set for a source being registered by a tenant user.
	ConnectionId NullableInt64 `json:"connectionId,omitempty"`
	CassandraConnectionResponseParams *CassandraSourceConfigParams `json:"cassandraConnectionResponseParams,omitempty"`
	HiveConnectionResponseParams *HiveAdditionalParams `json:"hiveConnectionResponseParams,omitempty"`
	HbaseConnectionResponseParams *HBaseAdditionalParams `json:"hbaseConnectionResponseParams,omitempty"`
	HdfsConnectionResponseParams *HdfsAdditionalParams `json:"hdfsConnectionResponseParams,omitempty"`
	MssqlConnectionResponseParams *MssqlConnectionResponseParams `json:"mssqlConnectionResponseParams,omitempty"`
	VmwareConnectionResponseParams *VmwareAdditionalParams `json:"vmwareConnectionResponseParams,omitempty"`
}

// NewSourceConnectionResponseParams instantiates a new SourceConnectionResponseParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceConnectionResponseParams(environment NullableString) *SourceConnectionResponseParams {
	this := SourceConnectionResponseParams{}
	this.Environment = environment
	return &this
}

// NewSourceConnectionResponseParamsWithDefaults instantiates a new SourceConnectionResponseParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceConnectionResponseParamsWithDefaults() *SourceConnectionResponseParams {
	this := SourceConnectionResponseParams{}
	return &this
}

// GetEnvironment returns the Environment field value
// If the value is explicit nil, the zero value for string will be returned
func (o *SourceConnectionResponseParams) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}

	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceConnectionResponseParams) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// SetEnvironment sets field value
func (o *SourceConnectionResponseParams) SetEnvironment(v string) {
	o.Environment.Set(&v)
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceConnectionResponseParams) GetConnectionId() int64 {
	if o == nil || o.ConnectionId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceConnectionResponseParams) GetConnectionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// HasConnectionId returns a boolean if a field has been set.
func (o *SourceConnectionResponseParams) HasConnectionId() bool {
	if o != nil && o.ConnectionId.IsSet() {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given NullableInt64 and assigns it to the ConnectionId field.
func (o *SourceConnectionResponseParams) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}
// SetConnectionIdNil sets the value for ConnectionId to be an explicit nil
func (o *SourceConnectionResponseParams) SetConnectionIdNil() {
	o.ConnectionId.Set(nil)
}

// UnsetConnectionId ensures that no value is present for ConnectionId, not even an explicit nil
func (o *SourceConnectionResponseParams) UnsetConnectionId() {
	o.ConnectionId.Unset()
}

// GetCassandraConnectionResponseParams returns the CassandraConnectionResponseParams field value if set, zero value otherwise.
func (o *SourceConnectionResponseParams) GetCassandraConnectionResponseParams() CassandraSourceConfigParams {
	if o == nil || o.CassandraConnectionResponseParams == nil {
		var ret CassandraSourceConfigParams
		return ret
	}
	return *o.CassandraConnectionResponseParams
}

// GetCassandraConnectionResponseParamsOk returns a tuple with the CassandraConnectionResponseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionResponseParams) GetCassandraConnectionResponseParamsOk() (*CassandraSourceConfigParams, bool) {
	if o == nil || o.CassandraConnectionResponseParams == nil {
		return nil, false
	}
	return o.CassandraConnectionResponseParams, true
}

// HasCassandraConnectionResponseParams returns a boolean if a field has been set.
func (o *SourceConnectionResponseParams) HasCassandraConnectionResponseParams() bool {
	if o != nil && o.CassandraConnectionResponseParams != nil {
		return true
	}

	return false
}

// SetCassandraConnectionResponseParams gets a reference to the given CassandraSourceConfigParams and assigns it to the CassandraConnectionResponseParams field.
func (o *SourceConnectionResponseParams) SetCassandraConnectionResponseParams(v CassandraSourceConfigParams) {
	o.CassandraConnectionResponseParams = &v
}

// GetHiveConnectionResponseParams returns the HiveConnectionResponseParams field value if set, zero value otherwise.
func (o *SourceConnectionResponseParams) GetHiveConnectionResponseParams() HiveAdditionalParams {
	if o == nil || o.HiveConnectionResponseParams == nil {
		var ret HiveAdditionalParams
		return ret
	}
	return *o.HiveConnectionResponseParams
}

// GetHiveConnectionResponseParamsOk returns a tuple with the HiveConnectionResponseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionResponseParams) GetHiveConnectionResponseParamsOk() (*HiveAdditionalParams, bool) {
	if o == nil || o.HiveConnectionResponseParams == nil {
		return nil, false
	}
	return o.HiveConnectionResponseParams, true
}

// HasHiveConnectionResponseParams returns a boolean if a field has been set.
func (o *SourceConnectionResponseParams) HasHiveConnectionResponseParams() bool {
	if o != nil && o.HiveConnectionResponseParams != nil {
		return true
	}

	return false
}

// SetHiveConnectionResponseParams gets a reference to the given HiveAdditionalParams and assigns it to the HiveConnectionResponseParams field.
func (o *SourceConnectionResponseParams) SetHiveConnectionResponseParams(v HiveAdditionalParams) {
	o.HiveConnectionResponseParams = &v
}

// GetHbaseConnectionResponseParams returns the HbaseConnectionResponseParams field value if set, zero value otherwise.
func (o *SourceConnectionResponseParams) GetHbaseConnectionResponseParams() HBaseAdditionalParams {
	if o == nil || o.HbaseConnectionResponseParams == nil {
		var ret HBaseAdditionalParams
		return ret
	}
	return *o.HbaseConnectionResponseParams
}

// GetHbaseConnectionResponseParamsOk returns a tuple with the HbaseConnectionResponseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionResponseParams) GetHbaseConnectionResponseParamsOk() (*HBaseAdditionalParams, bool) {
	if o == nil || o.HbaseConnectionResponseParams == nil {
		return nil, false
	}
	return o.HbaseConnectionResponseParams, true
}

// HasHbaseConnectionResponseParams returns a boolean if a field has been set.
func (o *SourceConnectionResponseParams) HasHbaseConnectionResponseParams() bool {
	if o != nil && o.HbaseConnectionResponseParams != nil {
		return true
	}

	return false
}

// SetHbaseConnectionResponseParams gets a reference to the given HBaseAdditionalParams and assigns it to the HbaseConnectionResponseParams field.
func (o *SourceConnectionResponseParams) SetHbaseConnectionResponseParams(v HBaseAdditionalParams) {
	o.HbaseConnectionResponseParams = &v
}

// GetHdfsConnectionResponseParams returns the HdfsConnectionResponseParams field value if set, zero value otherwise.
func (o *SourceConnectionResponseParams) GetHdfsConnectionResponseParams() HdfsAdditionalParams {
	if o == nil || o.HdfsConnectionResponseParams == nil {
		var ret HdfsAdditionalParams
		return ret
	}
	return *o.HdfsConnectionResponseParams
}

// GetHdfsConnectionResponseParamsOk returns a tuple with the HdfsConnectionResponseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionResponseParams) GetHdfsConnectionResponseParamsOk() (*HdfsAdditionalParams, bool) {
	if o == nil || o.HdfsConnectionResponseParams == nil {
		return nil, false
	}
	return o.HdfsConnectionResponseParams, true
}

// HasHdfsConnectionResponseParams returns a boolean if a field has been set.
func (o *SourceConnectionResponseParams) HasHdfsConnectionResponseParams() bool {
	if o != nil && o.HdfsConnectionResponseParams != nil {
		return true
	}

	return false
}

// SetHdfsConnectionResponseParams gets a reference to the given HdfsAdditionalParams and assigns it to the HdfsConnectionResponseParams field.
func (o *SourceConnectionResponseParams) SetHdfsConnectionResponseParams(v HdfsAdditionalParams) {
	o.HdfsConnectionResponseParams = &v
}

// GetMssqlConnectionResponseParams returns the MssqlConnectionResponseParams field value if set, zero value otherwise.
func (o *SourceConnectionResponseParams) GetMssqlConnectionResponseParams() MssqlConnectionResponseParams {
	if o == nil || o.MssqlConnectionResponseParams == nil {
		var ret MssqlConnectionResponseParams
		return ret
	}
	return *o.MssqlConnectionResponseParams
}

// GetMssqlConnectionResponseParamsOk returns a tuple with the MssqlConnectionResponseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionResponseParams) GetMssqlConnectionResponseParamsOk() (*MssqlConnectionResponseParams, bool) {
	if o == nil || o.MssqlConnectionResponseParams == nil {
		return nil, false
	}
	return o.MssqlConnectionResponseParams, true
}

// HasMssqlConnectionResponseParams returns a boolean if a field has been set.
func (o *SourceConnectionResponseParams) HasMssqlConnectionResponseParams() bool {
	if o != nil && o.MssqlConnectionResponseParams != nil {
		return true
	}

	return false
}

// SetMssqlConnectionResponseParams gets a reference to the given MssqlConnectionResponseParams and assigns it to the MssqlConnectionResponseParams field.
func (o *SourceConnectionResponseParams) SetMssqlConnectionResponseParams(v MssqlConnectionResponseParams) {
	o.MssqlConnectionResponseParams = &v
}

// GetVmwareConnectionResponseParams returns the VmwareConnectionResponseParams field value if set, zero value otherwise.
func (o *SourceConnectionResponseParams) GetVmwareConnectionResponseParams() VmwareAdditionalParams {
	if o == nil || o.VmwareConnectionResponseParams == nil {
		var ret VmwareAdditionalParams
		return ret
	}
	return *o.VmwareConnectionResponseParams
}

// GetVmwareConnectionResponseParamsOk returns a tuple with the VmwareConnectionResponseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceConnectionResponseParams) GetVmwareConnectionResponseParamsOk() (*VmwareAdditionalParams, bool) {
	if o == nil || o.VmwareConnectionResponseParams == nil {
		return nil, false
	}
	return o.VmwareConnectionResponseParams, true
}

// HasVmwareConnectionResponseParams returns a boolean if a field has been set.
func (o *SourceConnectionResponseParams) HasVmwareConnectionResponseParams() bool {
	if o != nil && o.VmwareConnectionResponseParams != nil {
		return true
	}

	return false
}

// SetVmwareConnectionResponseParams gets a reference to the given VmwareAdditionalParams and assigns it to the VmwareConnectionResponseParams field.
func (o *SourceConnectionResponseParams) SetVmwareConnectionResponseParams(v VmwareAdditionalParams) {
	o.VmwareConnectionResponseParams = &v
}

func (o SourceConnectionResponseParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.ConnectionId.IsSet() {
		toSerialize["connectionId"] = o.ConnectionId.Get()
	}
	if o.CassandraConnectionResponseParams != nil {
		toSerialize["cassandraConnectionResponseParams"] = o.CassandraConnectionResponseParams
	}
	if o.HiveConnectionResponseParams != nil {
		toSerialize["hiveConnectionResponseParams"] = o.HiveConnectionResponseParams
	}
	if o.HbaseConnectionResponseParams != nil {
		toSerialize["hbaseConnectionResponseParams"] = o.HbaseConnectionResponseParams
	}
	if o.HdfsConnectionResponseParams != nil {
		toSerialize["hdfsConnectionResponseParams"] = o.HdfsConnectionResponseParams
	}
	if o.MssqlConnectionResponseParams != nil {
		toSerialize["mssqlConnectionResponseParams"] = o.MssqlConnectionResponseParams
	}
	if o.VmwareConnectionResponseParams != nil {
		toSerialize["vmwareConnectionResponseParams"] = o.VmwareConnectionResponseParams
	}
	return json.Marshal(toSerialize)
}

type NullableSourceConnectionResponseParams struct {
	value *SourceConnectionResponseParams
	isSet bool
}

func (v NullableSourceConnectionResponseParams) Get() *SourceConnectionResponseParams {
	return v.value
}

func (v *NullableSourceConnectionResponseParams) Set(val *SourceConnectionResponseParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceConnectionResponseParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceConnectionResponseParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceConnectionResponseParams(val *SourceConnectionResponseParams) *NullableSourceConnectionResponseParams {
	return &NullableSourceConnectionResponseParams{value: val, isSet: true}
}

func (v NullableSourceConnectionResponseParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceConnectionResponseParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


