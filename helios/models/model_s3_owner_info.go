/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// S3OwnerInfo Specifies the owner info of an S3 bucket.
type S3OwnerInfo struct {
	// Specifies the user id of the owner.
	UserId NullableString `json:"userId"`
}

// NewS3OwnerInfo instantiates a new S3OwnerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3OwnerInfo(userId NullableString) *S3OwnerInfo {
	this := S3OwnerInfo{}
	this.UserId = userId
	return &this
}

// NewS3OwnerInfoWithDefaults instantiates a new S3OwnerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3OwnerInfoWithDefaults() *S3OwnerInfo {
	this := S3OwnerInfo{}
	return &this
}

// GetUserId returns the UserId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *S3OwnerInfo) GetUserId() string {
	if o == nil || o.UserId.Get() == nil {
		var ret string
		return ret
	}

	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3OwnerInfo) GetUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// SetUserId sets field value
func (o *S3OwnerInfo) SetUserId(v string) {
	o.UserId.Set(&v)
}

func (o S3OwnerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["userId"] = o.UserId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableS3OwnerInfo struct {
	value *S3OwnerInfo
	isSet bool
}

func (v NullableS3OwnerInfo) Get() *S3OwnerInfo {
	return v.value
}

func (v *NullableS3OwnerInfo) Set(val *S3OwnerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableS3OwnerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableS3OwnerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3OwnerInfo(val *S3OwnerInfo) *NullableS3OwnerInfo {
	return &NullableS3OwnerInfo{value: val, isSet: true}
}

func (v NullableS3OwnerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3OwnerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


