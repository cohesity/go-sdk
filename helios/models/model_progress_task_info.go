/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ProgressTaskInfo Specifies the details about a Progress Task.
type ProgressTaskInfo struct {
	// Specifies the current status of the progress task.
	Status NullableString `json:"status,omitempty"`
	// Specifies the current completed percentage of the progress task.
	PercentageCompleted NullableFloat32 `json:"percentageCompleted,omitempty"`
	// Specifies the start time of the progress task in Unix epoch Timestamp(in microseconds).
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// Specifies the end time of the progress task in Unix epoch Timestamp(in microseconds).
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// Specifies the expected remaining time of the progress task in Unix epoch Timestamp(in microseconds).
	ExpectedRemainingTimeUsecs NullableInt64 `json:"expectedRemainingTimeUsecs,omitempty"`
	// Specifies the event log created for progress Task.
	Events *[]ProgressTaskEvent `json:"events,omitempty"`
	Stats *ProgressStats `json:"stats,omitempty"`
}

// NewProgressTaskInfo instantiates a new ProgressTaskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProgressTaskInfo() *ProgressTaskInfo {
	this := ProgressTaskInfo{}
	return &this
}

// NewProgressTaskInfoWithDefaults instantiates a new ProgressTaskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProgressTaskInfoWithDefaults() *ProgressTaskInfo {
	this := ProgressTaskInfo{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProgressTaskInfo) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgressTaskInfo) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *ProgressTaskInfo) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *ProgressTaskInfo) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *ProgressTaskInfo) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *ProgressTaskInfo) UnsetStatus() {
	o.Status.Unset()
}

// GetPercentageCompleted returns the PercentageCompleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProgressTaskInfo) GetPercentageCompleted() float32 {
	if o == nil || o.PercentageCompleted.Get() == nil {
		var ret float32
		return ret
	}
	return *o.PercentageCompleted.Get()
}

// GetPercentageCompletedOk returns a tuple with the PercentageCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgressTaskInfo) GetPercentageCompletedOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PercentageCompleted.Get(), o.PercentageCompleted.IsSet()
}

// HasPercentageCompleted returns a boolean if a field has been set.
func (o *ProgressTaskInfo) HasPercentageCompleted() bool {
	if o != nil && o.PercentageCompleted.IsSet() {
		return true
	}

	return false
}

// SetPercentageCompleted gets a reference to the given NullableFloat32 and assigns it to the PercentageCompleted field.
func (o *ProgressTaskInfo) SetPercentageCompleted(v float32) {
	o.PercentageCompleted.Set(&v)
}
// SetPercentageCompletedNil sets the value for PercentageCompleted to be an explicit nil
func (o *ProgressTaskInfo) SetPercentageCompletedNil() {
	o.PercentageCompleted.Set(nil)
}

// UnsetPercentageCompleted ensures that no value is present for PercentageCompleted, not even an explicit nil
func (o *ProgressTaskInfo) UnsetPercentageCompleted() {
	o.PercentageCompleted.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProgressTaskInfo) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgressTaskInfo) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *ProgressTaskInfo) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *ProgressTaskInfo) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *ProgressTaskInfo) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *ProgressTaskInfo) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProgressTaskInfo) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgressTaskInfo) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *ProgressTaskInfo) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *ProgressTaskInfo) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *ProgressTaskInfo) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *ProgressTaskInfo) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetExpectedRemainingTimeUsecs returns the ExpectedRemainingTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProgressTaskInfo) GetExpectedRemainingTimeUsecs() int64 {
	if o == nil || o.ExpectedRemainingTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpectedRemainingTimeUsecs.Get()
}

// GetExpectedRemainingTimeUsecsOk returns a tuple with the ExpectedRemainingTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProgressTaskInfo) GetExpectedRemainingTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpectedRemainingTimeUsecs.Get(), o.ExpectedRemainingTimeUsecs.IsSet()
}

// HasExpectedRemainingTimeUsecs returns a boolean if a field has been set.
func (o *ProgressTaskInfo) HasExpectedRemainingTimeUsecs() bool {
	if o != nil && o.ExpectedRemainingTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetExpectedRemainingTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ExpectedRemainingTimeUsecs field.
func (o *ProgressTaskInfo) SetExpectedRemainingTimeUsecs(v int64) {
	o.ExpectedRemainingTimeUsecs.Set(&v)
}
// SetExpectedRemainingTimeUsecsNil sets the value for ExpectedRemainingTimeUsecs to be an explicit nil
func (o *ProgressTaskInfo) SetExpectedRemainingTimeUsecsNil() {
	o.ExpectedRemainingTimeUsecs.Set(nil)
}

// UnsetExpectedRemainingTimeUsecs ensures that no value is present for ExpectedRemainingTimeUsecs, not even an explicit nil
func (o *ProgressTaskInfo) UnsetExpectedRemainingTimeUsecs() {
	o.ExpectedRemainingTimeUsecs.Unset()
}

// GetEvents returns the Events field value if set, zero value otherwise.
func (o *ProgressTaskInfo) GetEvents() []ProgressTaskEvent {
	if o == nil || o.Events == nil {
		var ret []ProgressTaskEvent
		return ret
	}
	return *o.Events
}

// GetEventsOk returns a tuple with the Events field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressTaskInfo) GetEventsOk() (*[]ProgressTaskEvent, bool) {
	if o == nil || o.Events == nil {
		return nil, false
	}
	return o.Events, true
}

// HasEvents returns a boolean if a field has been set.
func (o *ProgressTaskInfo) HasEvents() bool {
	if o != nil && o.Events != nil {
		return true
	}

	return false
}

// SetEvents gets a reference to the given []ProgressTaskEvent and assigns it to the Events field.
func (o *ProgressTaskInfo) SetEvents(v []ProgressTaskEvent) {
	o.Events = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *ProgressTaskInfo) GetStats() ProgressStats {
	if o == nil || o.Stats == nil {
		var ret ProgressStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProgressTaskInfo) GetStatsOk() (*ProgressStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *ProgressTaskInfo) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given ProgressStats and assigns it to the Stats field.
func (o *ProgressTaskInfo) SetStats(v ProgressStats) {
	o.Stats = &v
}

func (o ProgressTaskInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.PercentageCompleted.IsSet() {
		toSerialize["percentageCompleted"] = o.PercentageCompleted.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.ExpectedRemainingTimeUsecs.IsSet() {
		toSerialize["expectedRemainingTimeUsecs"] = o.ExpectedRemainingTimeUsecs.Get()
	}
	if o.Events != nil {
		toSerialize["events"] = o.Events
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	return json.Marshal(toSerialize)
}

type NullableProgressTaskInfo struct {
	value *ProgressTaskInfo
	isSet bool
}

func (v NullableProgressTaskInfo) Get() *ProgressTaskInfo {
	return v.value
}

func (v *NullableProgressTaskInfo) Set(val *ProgressTaskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableProgressTaskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableProgressTaskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProgressTaskInfo(val *ProgressTaskInfo) *NullableProgressTaskInfo {
	return &NullableProgressTaskInfo{value: val, isSet: true}
}

func (v NullableProgressTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProgressTaskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


