/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// TargetSiteParamAllOf struct for TargetSiteParamAllOf
type TargetSiteParamAllOf struct {
	// Specifies the name for the target doc lib.
	TargetDocLibName NullableString `json:"targetDocLibName,omitempty"`
	// Specifies the prefix for the target doc lib.
	TargetDocLibPrefix NullableString `json:"targetDocLibPrefix,omitempty"`
}

// NewTargetSiteParamAllOf instantiates a new TargetSiteParamAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTargetSiteParamAllOf() *TargetSiteParamAllOf {
	this := TargetSiteParamAllOf{}
	return &this
}

// NewTargetSiteParamAllOfWithDefaults instantiates a new TargetSiteParamAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTargetSiteParamAllOfWithDefaults() *TargetSiteParamAllOf {
	this := TargetSiteParamAllOf{}
	return &this
}

// GetTargetDocLibName returns the TargetDocLibName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TargetSiteParamAllOf) GetTargetDocLibName() string {
	if o == nil || o.TargetDocLibName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetDocLibName.Get()
}

// GetTargetDocLibNameOk returns a tuple with the TargetDocLibName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TargetSiteParamAllOf) GetTargetDocLibNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetDocLibName.Get(), o.TargetDocLibName.IsSet()
}

// HasTargetDocLibName returns a boolean if a field has been set.
func (o *TargetSiteParamAllOf) HasTargetDocLibName() bool {
	if o != nil && o.TargetDocLibName.IsSet() {
		return true
	}

	return false
}

// SetTargetDocLibName gets a reference to the given NullableString and assigns it to the TargetDocLibName field.
func (o *TargetSiteParamAllOf) SetTargetDocLibName(v string) {
	o.TargetDocLibName.Set(&v)
}
// SetTargetDocLibNameNil sets the value for TargetDocLibName to be an explicit nil
func (o *TargetSiteParamAllOf) SetTargetDocLibNameNil() {
	o.TargetDocLibName.Set(nil)
}

// UnsetTargetDocLibName ensures that no value is present for TargetDocLibName, not even an explicit nil
func (o *TargetSiteParamAllOf) UnsetTargetDocLibName() {
	o.TargetDocLibName.Unset()
}

// GetTargetDocLibPrefix returns the TargetDocLibPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TargetSiteParamAllOf) GetTargetDocLibPrefix() string {
	if o == nil || o.TargetDocLibPrefix.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetDocLibPrefix.Get()
}

// GetTargetDocLibPrefixOk returns a tuple with the TargetDocLibPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TargetSiteParamAllOf) GetTargetDocLibPrefixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetDocLibPrefix.Get(), o.TargetDocLibPrefix.IsSet()
}

// HasTargetDocLibPrefix returns a boolean if a field has been set.
func (o *TargetSiteParamAllOf) HasTargetDocLibPrefix() bool {
	if o != nil && o.TargetDocLibPrefix.IsSet() {
		return true
	}

	return false
}

// SetTargetDocLibPrefix gets a reference to the given NullableString and assigns it to the TargetDocLibPrefix field.
func (o *TargetSiteParamAllOf) SetTargetDocLibPrefix(v string) {
	o.TargetDocLibPrefix.Set(&v)
}
// SetTargetDocLibPrefixNil sets the value for TargetDocLibPrefix to be an explicit nil
func (o *TargetSiteParamAllOf) SetTargetDocLibPrefixNil() {
	o.TargetDocLibPrefix.Set(nil)
}

// UnsetTargetDocLibPrefix ensures that no value is present for TargetDocLibPrefix, not even an explicit nil
func (o *TargetSiteParamAllOf) UnsetTargetDocLibPrefix() {
	o.TargetDocLibPrefix.Unset()
}

func (o TargetSiteParamAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TargetDocLibName.IsSet() {
		toSerialize["targetDocLibName"] = o.TargetDocLibName.Get()
	}
	if o.TargetDocLibPrefix.IsSet() {
		toSerialize["targetDocLibPrefix"] = o.TargetDocLibPrefix.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTargetSiteParamAllOf struct {
	value *TargetSiteParamAllOf
	isSet bool
}

func (v NullableTargetSiteParamAllOf) Get() *TargetSiteParamAllOf {
	return v.value
}

func (v *NullableTargetSiteParamAllOf) Set(val *TargetSiteParamAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableTargetSiteParamAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableTargetSiteParamAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTargetSiteParamAllOf(val *TargetSiteParamAllOf) *NullableTargetSiteParamAllOf {
	return &NullableTargetSiteParamAllOf{value: val, isSet: true}
}

func (v NullableTargetSiteParamAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTargetSiteParamAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


