/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ObjectRunResult Snapshot, replication, archival results for an object.
type ObjectRunResult struct {
	Object *ObjectSummary `json:"object,omitempty"`
	LocalSnapshotInfo *BackupRun `json:"localSnapshotInfo,omitempty"`
	OriginalBackupInfo *BackupRun `json:"originalBackupInfo,omitempty"`
	ReplicationInfo *ReplicationRun `json:"replicationInfo,omitempty"`
	ArchivalInfo *ArchivalRun `json:"archivalInfo,omitempty"`
	CloudSpinInfo *CloudSpinRun `json:"cloudSpinInfo,omitempty"`
	// Specifies if object's snapshot is on legal hold.
	OnLegalHold NullableBool `json:"onLegalHold,omitempty"`
}

// NewObjectRunResult instantiates a new ObjectRunResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectRunResult() *ObjectRunResult {
	this := ObjectRunResult{}
	return &this
}

// NewObjectRunResultWithDefaults instantiates a new ObjectRunResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectRunResultWithDefaults() *ObjectRunResult {
	this := ObjectRunResult{}
	return &this
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *ObjectRunResult) GetObject() ObjectSummary {
	if o == nil || o.Object == nil {
		var ret ObjectSummary
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectRunResult) GetObjectOk() (*ObjectSummary, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *ObjectRunResult) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given ObjectSummary and assigns it to the Object field.
func (o *ObjectRunResult) SetObject(v ObjectSummary) {
	o.Object = &v
}

// GetLocalSnapshotInfo returns the LocalSnapshotInfo field value if set, zero value otherwise.
func (o *ObjectRunResult) GetLocalSnapshotInfo() BackupRun {
	if o == nil || o.LocalSnapshotInfo == nil {
		var ret BackupRun
		return ret
	}
	return *o.LocalSnapshotInfo
}

// GetLocalSnapshotInfoOk returns a tuple with the LocalSnapshotInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectRunResult) GetLocalSnapshotInfoOk() (*BackupRun, bool) {
	if o == nil || o.LocalSnapshotInfo == nil {
		return nil, false
	}
	return o.LocalSnapshotInfo, true
}

// HasLocalSnapshotInfo returns a boolean if a field has been set.
func (o *ObjectRunResult) HasLocalSnapshotInfo() bool {
	if o != nil && o.LocalSnapshotInfo != nil {
		return true
	}

	return false
}

// SetLocalSnapshotInfo gets a reference to the given BackupRun and assigns it to the LocalSnapshotInfo field.
func (o *ObjectRunResult) SetLocalSnapshotInfo(v BackupRun) {
	o.LocalSnapshotInfo = &v
}

// GetOriginalBackupInfo returns the OriginalBackupInfo field value if set, zero value otherwise.
func (o *ObjectRunResult) GetOriginalBackupInfo() BackupRun {
	if o == nil || o.OriginalBackupInfo == nil {
		var ret BackupRun
		return ret
	}
	return *o.OriginalBackupInfo
}

// GetOriginalBackupInfoOk returns a tuple with the OriginalBackupInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectRunResult) GetOriginalBackupInfoOk() (*BackupRun, bool) {
	if o == nil || o.OriginalBackupInfo == nil {
		return nil, false
	}
	return o.OriginalBackupInfo, true
}

// HasOriginalBackupInfo returns a boolean if a field has been set.
func (o *ObjectRunResult) HasOriginalBackupInfo() bool {
	if o != nil && o.OriginalBackupInfo != nil {
		return true
	}

	return false
}

// SetOriginalBackupInfo gets a reference to the given BackupRun and assigns it to the OriginalBackupInfo field.
func (o *ObjectRunResult) SetOriginalBackupInfo(v BackupRun) {
	o.OriginalBackupInfo = &v
}

// GetReplicationInfo returns the ReplicationInfo field value if set, zero value otherwise.
func (o *ObjectRunResult) GetReplicationInfo() ReplicationRun {
	if o == nil || o.ReplicationInfo == nil {
		var ret ReplicationRun
		return ret
	}
	return *o.ReplicationInfo
}

// GetReplicationInfoOk returns a tuple with the ReplicationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectRunResult) GetReplicationInfoOk() (*ReplicationRun, bool) {
	if o == nil || o.ReplicationInfo == nil {
		return nil, false
	}
	return o.ReplicationInfo, true
}

// HasReplicationInfo returns a boolean if a field has been set.
func (o *ObjectRunResult) HasReplicationInfo() bool {
	if o != nil && o.ReplicationInfo != nil {
		return true
	}

	return false
}

// SetReplicationInfo gets a reference to the given ReplicationRun and assigns it to the ReplicationInfo field.
func (o *ObjectRunResult) SetReplicationInfo(v ReplicationRun) {
	o.ReplicationInfo = &v
}

// GetArchivalInfo returns the ArchivalInfo field value if set, zero value otherwise.
func (o *ObjectRunResult) GetArchivalInfo() ArchivalRun {
	if o == nil || o.ArchivalInfo == nil {
		var ret ArchivalRun
		return ret
	}
	return *o.ArchivalInfo
}

// GetArchivalInfoOk returns a tuple with the ArchivalInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectRunResult) GetArchivalInfoOk() (*ArchivalRun, bool) {
	if o == nil || o.ArchivalInfo == nil {
		return nil, false
	}
	return o.ArchivalInfo, true
}

// HasArchivalInfo returns a boolean if a field has been set.
func (o *ObjectRunResult) HasArchivalInfo() bool {
	if o != nil && o.ArchivalInfo != nil {
		return true
	}

	return false
}

// SetArchivalInfo gets a reference to the given ArchivalRun and assigns it to the ArchivalInfo field.
func (o *ObjectRunResult) SetArchivalInfo(v ArchivalRun) {
	o.ArchivalInfo = &v
}

// GetCloudSpinInfo returns the CloudSpinInfo field value if set, zero value otherwise.
func (o *ObjectRunResult) GetCloudSpinInfo() CloudSpinRun {
	if o == nil || o.CloudSpinInfo == nil {
		var ret CloudSpinRun
		return ret
	}
	return *o.CloudSpinInfo
}

// GetCloudSpinInfoOk returns a tuple with the CloudSpinInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectRunResult) GetCloudSpinInfoOk() (*CloudSpinRun, bool) {
	if o == nil || o.CloudSpinInfo == nil {
		return nil, false
	}
	return o.CloudSpinInfo, true
}

// HasCloudSpinInfo returns a boolean if a field has been set.
func (o *ObjectRunResult) HasCloudSpinInfo() bool {
	if o != nil && o.CloudSpinInfo != nil {
		return true
	}

	return false
}

// SetCloudSpinInfo gets a reference to the given CloudSpinRun and assigns it to the CloudSpinInfo field.
func (o *ObjectRunResult) SetCloudSpinInfo(v CloudSpinRun) {
	o.CloudSpinInfo = &v
}

// GetOnLegalHold returns the OnLegalHold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectRunResult) GetOnLegalHold() bool {
	if o == nil || o.OnLegalHold.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OnLegalHold.Get()
}

// GetOnLegalHoldOk returns a tuple with the OnLegalHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectRunResult) GetOnLegalHoldOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnLegalHold.Get(), o.OnLegalHold.IsSet()
}

// HasOnLegalHold returns a boolean if a field has been set.
func (o *ObjectRunResult) HasOnLegalHold() bool {
	if o != nil && o.OnLegalHold.IsSet() {
		return true
	}

	return false
}

// SetOnLegalHold gets a reference to the given NullableBool and assigns it to the OnLegalHold field.
func (o *ObjectRunResult) SetOnLegalHold(v bool) {
	o.OnLegalHold.Set(&v)
}
// SetOnLegalHoldNil sets the value for OnLegalHold to be an explicit nil
func (o *ObjectRunResult) SetOnLegalHoldNil() {
	o.OnLegalHold.Set(nil)
}

// UnsetOnLegalHold ensures that no value is present for OnLegalHold, not even an explicit nil
func (o *ObjectRunResult) UnsetOnLegalHold() {
	o.OnLegalHold.Unset()
}

func (o ObjectRunResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	if o.LocalSnapshotInfo != nil {
		toSerialize["localSnapshotInfo"] = o.LocalSnapshotInfo
	}
	if o.OriginalBackupInfo != nil {
		toSerialize["originalBackupInfo"] = o.OriginalBackupInfo
	}
	if o.ReplicationInfo != nil {
		toSerialize["replicationInfo"] = o.ReplicationInfo
	}
	if o.ArchivalInfo != nil {
		toSerialize["archivalInfo"] = o.ArchivalInfo
	}
	if o.CloudSpinInfo != nil {
		toSerialize["cloudSpinInfo"] = o.CloudSpinInfo
	}
	if o.OnLegalHold.IsSet() {
		toSerialize["onLegalHold"] = o.OnLegalHold.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableObjectRunResult struct {
	value *ObjectRunResult
	isSet bool
}

func (v NullableObjectRunResult) Get() *ObjectRunResult {
	return v.value
}

func (v *NullableObjectRunResult) Set(val *ObjectRunResult) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectRunResult) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectRunResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectRunResult(val *ObjectRunResult) *NullableObjectRunResult {
	return &NullableObjectRunResult{value: val, isSet: true}
}

func (v NullableObjectRunResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectRunResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


