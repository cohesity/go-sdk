/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// FailoverObject Specifies the details about the objects being failed over.
type FailoverObject struct {
	// Specifies the object Id involved in failover operation.
	ObjectId NullableInt64 `json:"objectId"`
}

// NewFailoverObject instantiates a new FailoverObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverObject(objectId NullableInt64) *FailoverObject {
	this := FailoverObject{}
	this.ObjectId = objectId
	return &this
}

// NewFailoverObjectWithDefaults instantiates a new FailoverObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverObjectWithDefaults() *FailoverObject {
	this := FailoverObject{}
	return &this
}

// GetObjectId returns the ObjectId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *FailoverObject) GetObjectId() int64 {
	if o == nil || o.ObjectId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverObject) GetObjectIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// SetObjectId sets field value
func (o *FailoverObject) SetObjectId(v int64) {
	o.ObjectId.Set(&v)
}

func (o FailoverObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["objectId"] = o.ObjectId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFailoverObject struct {
	value *FailoverObject
	isSet bool
}

func (v NullableFailoverObject) Get() *FailoverObject {
	return v.value
}

func (v *NullableFailoverObject) Set(val *FailoverObject) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverObject) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverObject(val *FailoverObject) *NullableFailoverObject {
	return &NullableFailoverObject{value: val, isSet: true}
}

func (v NullableFailoverObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


