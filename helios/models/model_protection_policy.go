/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ProtectionPolicy Specifies common fields required to define Protection Policy.
type ProtectionPolicy struct {
	// Specifies the name of the Protection Policy.
	Name NullableString `json:"name"`
	BackupPolicy BackupPolicy `json:"backupPolicy"`
	// Specifies the description of the Protection Policy.
	Description NullableString `json:"description,omitempty"`
	// List of Blackout Windows. If specified, this field defines blackout periods when new Group Runs are not started. If a Group Run has been scheduled but not yet executed and the blackout period starts, the behavior depends on the policy field AbortInBlackoutPeriod.
	BlackoutWindow []BlackoutWindow `json:"blackoutWindow,omitempty"`
	// Specifies additional retention policies that should be applied to the backup snapshots. A backup snapshot will be retained up to a time that is the maximum of all retention policies that are applicable to it.
	ExtendedRetention []ExtendedRetentionPolicy `json:"extendedRetention,omitempty"`
	RemoteTargetPolicy *TargetsConfiguration `json:"remoteTargetPolicy,omitempty"`
	RetryOptions *RetryOptions `json:"retryOptions,omitempty"`
	// This field is now deprecated. Please use the DataLockConfig in the backup retention.
	DataLock NullableString `json:"dataLock,omitempty"`
}

// NewProtectionPolicy instantiates a new ProtectionPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionPolicy(name NullableString, backupPolicy BackupPolicy) *ProtectionPolicy {
	this := ProtectionPolicy{}
	this.Name = name
	this.BackupPolicy = backupPolicy
	return &this
}

// NewProtectionPolicyWithDefaults instantiates a new ProtectionPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionPolicyWithDefaults() *ProtectionPolicy {
	this := ProtectionPolicy{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ProtectionPolicy) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *ProtectionPolicy) SetName(v string) {
	o.Name.Set(&v)
}

// GetBackupPolicy returns the BackupPolicy field value
func (o *ProtectionPolicy) GetBackupPolicy() BackupPolicy {
	if o == nil {
		var ret BackupPolicy
		return ret
	}

	return o.BackupPolicy
}

// GetBackupPolicyOk returns a tuple with the BackupPolicy field value
// and a boolean to check if the value has been set.
func (o *ProtectionPolicy) GetBackupPolicyOk() (*BackupPolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.BackupPolicy, true
}

// SetBackupPolicy sets field value
func (o *ProtectionPolicy) SetBackupPolicy(v BackupPolicy) {
	o.BackupPolicy = v
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ProtectionPolicy) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ProtectionPolicy) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ProtectionPolicy) UnsetDescription() {
	o.Description.Unset()
}

// GetBlackoutWindow returns the BlackoutWindow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetBlackoutWindow() []BlackoutWindow {
	if o == nil  {
		var ret []BlackoutWindow
		return ret
	}
	return o.BlackoutWindow
}

// GetBlackoutWindowOk returns a tuple with the BlackoutWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetBlackoutWindowOk() (*[]BlackoutWindow, bool) {
	if o == nil || o.BlackoutWindow == nil {
		return nil, false
	}
	return &o.BlackoutWindow, true
}

// HasBlackoutWindow returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasBlackoutWindow() bool {
	if o != nil && o.BlackoutWindow != nil {
		return true
	}

	return false
}

// SetBlackoutWindow gets a reference to the given []BlackoutWindow and assigns it to the BlackoutWindow field.
func (o *ProtectionPolicy) SetBlackoutWindow(v []BlackoutWindow) {
	o.BlackoutWindow = v
}

// GetExtendedRetention returns the ExtendedRetention field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetExtendedRetention() []ExtendedRetentionPolicy {
	if o == nil  {
		var ret []ExtendedRetentionPolicy
		return ret
	}
	return o.ExtendedRetention
}

// GetExtendedRetentionOk returns a tuple with the ExtendedRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetExtendedRetentionOk() (*[]ExtendedRetentionPolicy, bool) {
	if o == nil || o.ExtendedRetention == nil {
		return nil, false
	}
	return &o.ExtendedRetention, true
}

// HasExtendedRetention returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasExtendedRetention() bool {
	if o != nil && o.ExtendedRetention != nil {
		return true
	}

	return false
}

// SetExtendedRetention gets a reference to the given []ExtendedRetentionPolicy and assigns it to the ExtendedRetention field.
func (o *ProtectionPolicy) SetExtendedRetention(v []ExtendedRetentionPolicy) {
	o.ExtendedRetention = v
}

// GetRemoteTargetPolicy returns the RemoteTargetPolicy field value if set, zero value otherwise.
func (o *ProtectionPolicy) GetRemoteTargetPolicy() TargetsConfiguration {
	if o == nil || o.RemoteTargetPolicy == nil {
		var ret TargetsConfiguration
		return ret
	}
	return *o.RemoteTargetPolicy
}

// GetRemoteTargetPolicyOk returns a tuple with the RemoteTargetPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicy) GetRemoteTargetPolicyOk() (*TargetsConfiguration, bool) {
	if o == nil || o.RemoteTargetPolicy == nil {
		return nil, false
	}
	return o.RemoteTargetPolicy, true
}

// HasRemoteTargetPolicy returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasRemoteTargetPolicy() bool {
	if o != nil && o.RemoteTargetPolicy != nil {
		return true
	}

	return false
}

// SetRemoteTargetPolicy gets a reference to the given TargetsConfiguration and assigns it to the RemoteTargetPolicy field.
func (o *ProtectionPolicy) SetRemoteTargetPolicy(v TargetsConfiguration) {
	o.RemoteTargetPolicy = &v
}

// GetRetryOptions returns the RetryOptions field value if set, zero value otherwise.
func (o *ProtectionPolicy) GetRetryOptions() RetryOptions {
	if o == nil || o.RetryOptions == nil {
		var ret RetryOptions
		return ret
	}
	return *o.RetryOptions
}

// GetRetryOptionsOk returns a tuple with the RetryOptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProtectionPolicy) GetRetryOptionsOk() (*RetryOptions, bool) {
	if o == nil || o.RetryOptions == nil {
		return nil, false
	}
	return o.RetryOptions, true
}

// HasRetryOptions returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasRetryOptions() bool {
	if o != nil && o.RetryOptions != nil {
		return true
	}

	return false
}

// SetRetryOptions gets a reference to the given RetryOptions and assigns it to the RetryOptions field.
func (o *ProtectionPolicy) SetRetryOptions(v RetryOptions) {
	o.RetryOptions = &v
}

// GetDataLock returns the DataLock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionPolicy) GetDataLock() string {
	if o == nil || o.DataLock.Get() == nil {
		var ret string
		return ret
	}
	return *o.DataLock.Get()
}

// GetDataLockOk returns a tuple with the DataLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionPolicy) GetDataLockOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataLock.Get(), o.DataLock.IsSet()
}

// HasDataLock returns a boolean if a field has been set.
func (o *ProtectionPolicy) HasDataLock() bool {
	if o != nil && o.DataLock.IsSet() {
		return true
	}

	return false
}

// SetDataLock gets a reference to the given NullableString and assigns it to the DataLock field.
func (o *ProtectionPolicy) SetDataLock(v string) {
	o.DataLock.Set(&v)
}
// SetDataLockNil sets the value for DataLock to be an explicit nil
func (o *ProtectionPolicy) SetDataLockNil() {
	o.DataLock.Set(nil)
}

// UnsetDataLock ensures that no value is present for DataLock, not even an explicit nil
func (o *ProtectionPolicy) UnsetDataLock() {
	o.DataLock.Unset()
}

func (o ProtectionPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["backupPolicy"] = o.BackupPolicy
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.BlackoutWindow != nil {
		toSerialize["blackoutWindow"] = o.BlackoutWindow
	}
	if o.ExtendedRetention != nil {
		toSerialize["extendedRetention"] = o.ExtendedRetention
	}
	if o.RemoteTargetPolicy != nil {
		toSerialize["remoteTargetPolicy"] = o.RemoteTargetPolicy
	}
	if o.RetryOptions != nil {
		toSerialize["retryOptions"] = o.RetryOptions
	}
	if o.DataLock.IsSet() {
		toSerialize["dataLock"] = o.DataLock.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionPolicy struct {
	value *ProtectionPolicy
	isSet bool
}

func (v NullableProtectionPolicy) Get() *ProtectionPolicy {
	return v.value
}

func (v *NullableProtectionPolicy) Set(val *ProtectionPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionPolicy(val *ProtectionPolicy) *NullableProtectionPolicy {
	return &NullableProtectionPolicy{value: val, isSet: true}
}

func (v NullableProtectionPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


