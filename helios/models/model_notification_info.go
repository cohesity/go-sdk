/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// NotificationInfo Specifies the details of an anomaly notification
type NotificationInfo struct {
	// Anomaly strength level beyond which notification has to be sent.
	AnomalyStrengthThreshold NullableInt64 `json:"anomalyStrengthThreshold,omitempty"`
}

// NewNotificationInfo instantiates a new NotificationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotificationInfo() *NotificationInfo {
	this := NotificationInfo{}
	return &this
}

// NewNotificationInfoWithDefaults instantiates a new NotificationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationInfoWithDefaults() *NotificationInfo {
	this := NotificationInfo{}
	return &this
}

// GetAnomalyStrengthThreshold returns the AnomalyStrengthThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NotificationInfo) GetAnomalyStrengthThreshold() int64 {
	if o == nil || o.AnomalyStrengthThreshold.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AnomalyStrengthThreshold.Get()
}

// GetAnomalyStrengthThresholdOk returns a tuple with the AnomalyStrengthThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NotificationInfo) GetAnomalyStrengthThresholdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AnomalyStrengthThreshold.Get(), o.AnomalyStrengthThreshold.IsSet()
}

// HasAnomalyStrengthThreshold returns a boolean if a field has been set.
func (o *NotificationInfo) HasAnomalyStrengthThreshold() bool {
	if o != nil && o.AnomalyStrengthThreshold.IsSet() {
		return true
	}

	return false
}

// SetAnomalyStrengthThreshold gets a reference to the given NullableInt64 and assigns it to the AnomalyStrengthThreshold field.
func (o *NotificationInfo) SetAnomalyStrengthThreshold(v int64) {
	o.AnomalyStrengthThreshold.Set(&v)
}
// SetAnomalyStrengthThresholdNil sets the value for AnomalyStrengthThreshold to be an explicit nil
func (o *NotificationInfo) SetAnomalyStrengthThresholdNil() {
	o.AnomalyStrengthThreshold.Set(nil)
}

// UnsetAnomalyStrengthThreshold ensures that no value is present for AnomalyStrengthThreshold, not even an explicit nil
func (o *NotificationInfo) UnsetAnomalyStrengthThreshold() {
	o.AnomalyStrengthThreshold.Unset()
}

func (o NotificationInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AnomalyStrengthThreshold.IsSet() {
		toSerialize["anomalyStrengthThreshold"] = o.AnomalyStrengthThreshold.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNotificationInfo struct {
	value *NotificationInfo
	isSet bool
}

func (v NullableNotificationInfo) Get() *NotificationInfo {
	return v.value
}

func (v *NullableNotificationInfo) Set(val *NotificationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNotificationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNotificationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotificationInfo(val *NotificationInfo) *NullableNotificationInfo {
	return &NullableNotificationInfo{value: val, isSet: true}
}

func (v NullableNotificationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotificationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


