/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CreateUserSessionRequestParams Specifies user session request parameters
type CreateUserSessionRequestParams struct {
	// Specifies the login name of the Cohesity user
	Username NullableString `json:"username,omitempty"`
	// Specifies the password of the Cohesity user
	Password NullableString `json:"password,omitempty"`
	// Specifies the domain the user is logging in to. For a local user the domain is LOCAL. For LDAP/AD user, the domain will map to a LDAP connection string. A user is uniquely identified by a combination of username and domain. LOCAL is the default domain.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the certificate for cert based authentication.
	Certificate NullableString `json:"certificate,omitempty"`
	// Specifies the private key for cert based authentication.
	PrivateKey NullableString `json:"privateKey,omitempty"`
	// Specifies OTP code for MFA verification.
	OtpCode NullableString `json:"otpCode,omitempty"`
	// Specifies OTP Type for MFA verification.
	OtpType NullableString `json:"otpType,omitempty"`
}

// NewCreateUserSessionRequestParams instantiates a new CreateUserSessionRequestParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateUserSessionRequestParams() *CreateUserSessionRequestParams {
	this := CreateUserSessionRequestParams{}
	return &this
}

// NewCreateUserSessionRequestParamsWithDefaults instantiates a new CreateUserSessionRequestParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateUserSessionRequestParamsWithDefaults() *CreateUserSessionRequestParams {
	this := CreateUserSessionRequestParams{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserSessionRequestParams) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserSessionRequestParams) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *CreateUserSessionRequestParams) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *CreateUserSessionRequestParams) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *CreateUserSessionRequestParams) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *CreateUserSessionRequestParams) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserSessionRequestParams) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserSessionRequestParams) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *CreateUserSessionRequestParams) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *CreateUserSessionRequestParams) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *CreateUserSessionRequestParams) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *CreateUserSessionRequestParams) UnsetPassword() {
	o.Password.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserSessionRequestParams) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserSessionRequestParams) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *CreateUserSessionRequestParams) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *CreateUserSessionRequestParams) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *CreateUserSessionRequestParams) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *CreateUserSessionRequestParams) UnsetDomain() {
	o.Domain.Unset()
}

// GetCertificate returns the Certificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserSessionRequestParams) GetCertificate() string {
	if o == nil || o.Certificate.Get() == nil {
		var ret string
		return ret
	}
	return *o.Certificate.Get()
}

// GetCertificateOk returns a tuple with the Certificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserSessionRequestParams) GetCertificateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Certificate.Get(), o.Certificate.IsSet()
}

// HasCertificate returns a boolean if a field has been set.
func (o *CreateUserSessionRequestParams) HasCertificate() bool {
	if o != nil && o.Certificate.IsSet() {
		return true
	}

	return false
}

// SetCertificate gets a reference to the given NullableString and assigns it to the Certificate field.
func (o *CreateUserSessionRequestParams) SetCertificate(v string) {
	o.Certificate.Set(&v)
}
// SetCertificateNil sets the value for Certificate to be an explicit nil
func (o *CreateUserSessionRequestParams) SetCertificateNil() {
	o.Certificate.Set(nil)
}

// UnsetCertificate ensures that no value is present for Certificate, not even an explicit nil
func (o *CreateUserSessionRequestParams) UnsetCertificate() {
	o.Certificate.Unset()
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserSessionRequestParams) GetPrivateKey() string {
	if o == nil || o.PrivateKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserSessionRequestParams) GetPrivateKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *CreateUserSessionRequestParams) HasPrivateKey() bool {
	if o != nil && o.PrivateKey.IsSet() {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given NullableString and assigns it to the PrivateKey field.
func (o *CreateUserSessionRequestParams) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}
// SetPrivateKeyNil sets the value for PrivateKey to be an explicit nil
func (o *CreateUserSessionRequestParams) SetPrivateKeyNil() {
	o.PrivateKey.Set(nil)
}

// UnsetPrivateKey ensures that no value is present for PrivateKey, not even an explicit nil
func (o *CreateUserSessionRequestParams) UnsetPrivateKey() {
	o.PrivateKey.Unset()
}

// GetOtpCode returns the OtpCode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserSessionRequestParams) GetOtpCode() string {
	if o == nil || o.OtpCode.Get() == nil {
		var ret string
		return ret
	}
	return *o.OtpCode.Get()
}

// GetOtpCodeOk returns a tuple with the OtpCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserSessionRequestParams) GetOtpCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OtpCode.Get(), o.OtpCode.IsSet()
}

// HasOtpCode returns a boolean if a field has been set.
func (o *CreateUserSessionRequestParams) HasOtpCode() bool {
	if o != nil && o.OtpCode.IsSet() {
		return true
	}

	return false
}

// SetOtpCode gets a reference to the given NullableString and assigns it to the OtpCode field.
func (o *CreateUserSessionRequestParams) SetOtpCode(v string) {
	o.OtpCode.Set(&v)
}
// SetOtpCodeNil sets the value for OtpCode to be an explicit nil
func (o *CreateUserSessionRequestParams) SetOtpCodeNil() {
	o.OtpCode.Set(nil)
}

// UnsetOtpCode ensures that no value is present for OtpCode, not even an explicit nil
func (o *CreateUserSessionRequestParams) UnsetOtpCode() {
	o.OtpCode.Unset()
}

// GetOtpType returns the OtpType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateUserSessionRequestParams) GetOtpType() string {
	if o == nil || o.OtpType.Get() == nil {
		var ret string
		return ret
	}
	return *o.OtpType.Get()
}

// GetOtpTypeOk returns a tuple with the OtpType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateUserSessionRequestParams) GetOtpTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OtpType.Get(), o.OtpType.IsSet()
}

// HasOtpType returns a boolean if a field has been set.
func (o *CreateUserSessionRequestParams) HasOtpType() bool {
	if o != nil && o.OtpType.IsSet() {
		return true
	}

	return false
}

// SetOtpType gets a reference to the given NullableString and assigns it to the OtpType field.
func (o *CreateUserSessionRequestParams) SetOtpType(v string) {
	o.OtpType.Set(&v)
}
// SetOtpTypeNil sets the value for OtpType to be an explicit nil
func (o *CreateUserSessionRequestParams) SetOtpTypeNil() {
	o.OtpType.Set(nil)
}

// UnsetOtpType ensures that no value is present for OtpType, not even an explicit nil
func (o *CreateUserSessionRequestParams) UnsetOtpType() {
	o.OtpType.Unset()
}

func (o CreateUserSessionRequestParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.Certificate.IsSet() {
		toSerialize["certificate"] = o.Certificate.Get()
	}
	if o.PrivateKey.IsSet() {
		toSerialize["privateKey"] = o.PrivateKey.Get()
	}
	if o.OtpCode.IsSet() {
		toSerialize["otpCode"] = o.OtpCode.Get()
	}
	if o.OtpType.IsSet() {
		toSerialize["otpType"] = o.OtpType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateUserSessionRequestParams struct {
	value *CreateUserSessionRequestParams
	isSet bool
}

func (v NullableCreateUserSessionRequestParams) Get() *CreateUserSessionRequestParams {
	return v.value
}

func (v *NullableCreateUserSessionRequestParams) Set(val *CreateUserSessionRequestParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateUserSessionRequestParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateUserSessionRequestParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateUserSessionRequestParams(val *CreateUserSessionRequestParams) *NullableCreateUserSessionRequestParams {
	return &NullableCreateUserSessionRequestParams{value: val, isSet: true}
}

func (v NullableCreateUserSessionRequestParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateUserSessionRequestParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


