/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SelfServiceSnapshotConfig Specifies the self service snapshot config of a view.
type SelfServiceSnapshotConfig struct {
	// Specifies if self service snapshot feature is enabled. If this is set to true, the feature will also be enabled for NFS protocol. This field is deprecated.
	Enabled NullableBool `json:"enabled,omitempty"`
	// Specifies if previouse versions feature is enabled with SMB protocol.
	PreviousVersionsEnabled NullableBool `json:"previousVersionsEnabled,omitempty"`
	// Specifies if self service snapshot feature is enabled for NFS protocol.
	NfsAccessEnabled NullableBool `json:"nfsAccessEnabled,omitempty"`
	// Specifies if self service snapshot feature is enabled for SMB protocol.
	SmbAccessEnabled NullableBool `json:"smbAccessEnabled,omitempty"`
	// Specifies the directory name for the snapshots.
	SnapshotDirectoryName NullableString `json:"snapshotDirectoryName,omitempty"`
	// Specifies the alternate directory name for the snapshots. If it is not set, this feature for SMB protocol will not work.
	AlternateSnapshotDirectoryName NullableString `json:"alternateSnapshotDirectoryName,omitempty"`
	// Specifies a list of sids who has access to the snapshots.
	AllowAccessSids *[]string `json:"allowAccessSids,omitempty"`
	// Specifies a list of sids who does not have access to the snapshots. This field overrides 'allowAccessSids'.
	DenyAccessSids *[]string `json:"denyAccessSids,omitempty"`
}

// NewSelfServiceSnapshotConfig instantiates a new SelfServiceSnapshotConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSelfServiceSnapshotConfig() *SelfServiceSnapshotConfig {
	this := SelfServiceSnapshotConfig{}
	return &this
}

// NewSelfServiceSnapshotConfigWithDefaults instantiates a new SelfServiceSnapshotConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSelfServiceSnapshotConfigWithDefaults() *SelfServiceSnapshotConfig {
	this := SelfServiceSnapshotConfig{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelfServiceSnapshotConfig) GetEnabled() bool {
	if o == nil || o.Enabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelfServiceSnapshotConfig) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *SelfServiceSnapshotConfig) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *SelfServiceSnapshotConfig) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *SelfServiceSnapshotConfig) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *SelfServiceSnapshotConfig) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetPreviousVersionsEnabled returns the PreviousVersionsEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelfServiceSnapshotConfig) GetPreviousVersionsEnabled() bool {
	if o == nil || o.PreviousVersionsEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PreviousVersionsEnabled.Get()
}

// GetPreviousVersionsEnabledOk returns a tuple with the PreviousVersionsEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelfServiceSnapshotConfig) GetPreviousVersionsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PreviousVersionsEnabled.Get(), o.PreviousVersionsEnabled.IsSet()
}

// HasPreviousVersionsEnabled returns a boolean if a field has been set.
func (o *SelfServiceSnapshotConfig) HasPreviousVersionsEnabled() bool {
	if o != nil && o.PreviousVersionsEnabled.IsSet() {
		return true
	}

	return false
}

// SetPreviousVersionsEnabled gets a reference to the given NullableBool and assigns it to the PreviousVersionsEnabled field.
func (o *SelfServiceSnapshotConfig) SetPreviousVersionsEnabled(v bool) {
	o.PreviousVersionsEnabled.Set(&v)
}
// SetPreviousVersionsEnabledNil sets the value for PreviousVersionsEnabled to be an explicit nil
func (o *SelfServiceSnapshotConfig) SetPreviousVersionsEnabledNil() {
	o.PreviousVersionsEnabled.Set(nil)
}

// UnsetPreviousVersionsEnabled ensures that no value is present for PreviousVersionsEnabled, not even an explicit nil
func (o *SelfServiceSnapshotConfig) UnsetPreviousVersionsEnabled() {
	o.PreviousVersionsEnabled.Unset()
}

// GetNfsAccessEnabled returns the NfsAccessEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelfServiceSnapshotConfig) GetNfsAccessEnabled() bool {
	if o == nil || o.NfsAccessEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.NfsAccessEnabled.Get()
}

// GetNfsAccessEnabledOk returns a tuple with the NfsAccessEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelfServiceSnapshotConfig) GetNfsAccessEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsAccessEnabled.Get(), o.NfsAccessEnabled.IsSet()
}

// HasNfsAccessEnabled returns a boolean if a field has been set.
func (o *SelfServiceSnapshotConfig) HasNfsAccessEnabled() bool {
	if o != nil && o.NfsAccessEnabled.IsSet() {
		return true
	}

	return false
}

// SetNfsAccessEnabled gets a reference to the given NullableBool and assigns it to the NfsAccessEnabled field.
func (o *SelfServiceSnapshotConfig) SetNfsAccessEnabled(v bool) {
	o.NfsAccessEnabled.Set(&v)
}
// SetNfsAccessEnabledNil sets the value for NfsAccessEnabled to be an explicit nil
func (o *SelfServiceSnapshotConfig) SetNfsAccessEnabledNil() {
	o.NfsAccessEnabled.Set(nil)
}

// UnsetNfsAccessEnabled ensures that no value is present for NfsAccessEnabled, not even an explicit nil
func (o *SelfServiceSnapshotConfig) UnsetNfsAccessEnabled() {
	o.NfsAccessEnabled.Unset()
}

// GetSmbAccessEnabled returns the SmbAccessEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelfServiceSnapshotConfig) GetSmbAccessEnabled() bool {
	if o == nil || o.SmbAccessEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SmbAccessEnabled.Get()
}

// GetSmbAccessEnabledOk returns a tuple with the SmbAccessEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelfServiceSnapshotConfig) GetSmbAccessEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmbAccessEnabled.Get(), o.SmbAccessEnabled.IsSet()
}

// HasSmbAccessEnabled returns a boolean if a field has been set.
func (o *SelfServiceSnapshotConfig) HasSmbAccessEnabled() bool {
	if o != nil && o.SmbAccessEnabled.IsSet() {
		return true
	}

	return false
}

// SetSmbAccessEnabled gets a reference to the given NullableBool and assigns it to the SmbAccessEnabled field.
func (o *SelfServiceSnapshotConfig) SetSmbAccessEnabled(v bool) {
	o.SmbAccessEnabled.Set(&v)
}
// SetSmbAccessEnabledNil sets the value for SmbAccessEnabled to be an explicit nil
func (o *SelfServiceSnapshotConfig) SetSmbAccessEnabledNil() {
	o.SmbAccessEnabled.Set(nil)
}

// UnsetSmbAccessEnabled ensures that no value is present for SmbAccessEnabled, not even an explicit nil
func (o *SelfServiceSnapshotConfig) UnsetSmbAccessEnabled() {
	o.SmbAccessEnabled.Unset()
}

// GetSnapshotDirectoryName returns the SnapshotDirectoryName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelfServiceSnapshotConfig) GetSnapshotDirectoryName() string {
	if o == nil || o.SnapshotDirectoryName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SnapshotDirectoryName.Get()
}

// GetSnapshotDirectoryNameOk returns a tuple with the SnapshotDirectoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelfServiceSnapshotConfig) GetSnapshotDirectoryNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotDirectoryName.Get(), o.SnapshotDirectoryName.IsSet()
}

// HasSnapshotDirectoryName returns a boolean if a field has been set.
func (o *SelfServiceSnapshotConfig) HasSnapshotDirectoryName() bool {
	if o != nil && o.SnapshotDirectoryName.IsSet() {
		return true
	}

	return false
}

// SetSnapshotDirectoryName gets a reference to the given NullableString and assigns it to the SnapshotDirectoryName field.
func (o *SelfServiceSnapshotConfig) SetSnapshotDirectoryName(v string) {
	o.SnapshotDirectoryName.Set(&v)
}
// SetSnapshotDirectoryNameNil sets the value for SnapshotDirectoryName to be an explicit nil
func (o *SelfServiceSnapshotConfig) SetSnapshotDirectoryNameNil() {
	o.SnapshotDirectoryName.Set(nil)
}

// UnsetSnapshotDirectoryName ensures that no value is present for SnapshotDirectoryName, not even an explicit nil
func (o *SelfServiceSnapshotConfig) UnsetSnapshotDirectoryName() {
	o.SnapshotDirectoryName.Unset()
}

// GetAlternateSnapshotDirectoryName returns the AlternateSnapshotDirectoryName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SelfServiceSnapshotConfig) GetAlternateSnapshotDirectoryName() string {
	if o == nil || o.AlternateSnapshotDirectoryName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AlternateSnapshotDirectoryName.Get()
}

// GetAlternateSnapshotDirectoryNameOk returns a tuple with the AlternateSnapshotDirectoryName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SelfServiceSnapshotConfig) GetAlternateSnapshotDirectoryNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AlternateSnapshotDirectoryName.Get(), o.AlternateSnapshotDirectoryName.IsSet()
}

// HasAlternateSnapshotDirectoryName returns a boolean if a field has been set.
func (o *SelfServiceSnapshotConfig) HasAlternateSnapshotDirectoryName() bool {
	if o != nil && o.AlternateSnapshotDirectoryName.IsSet() {
		return true
	}

	return false
}

// SetAlternateSnapshotDirectoryName gets a reference to the given NullableString and assigns it to the AlternateSnapshotDirectoryName field.
func (o *SelfServiceSnapshotConfig) SetAlternateSnapshotDirectoryName(v string) {
	o.AlternateSnapshotDirectoryName.Set(&v)
}
// SetAlternateSnapshotDirectoryNameNil sets the value for AlternateSnapshotDirectoryName to be an explicit nil
func (o *SelfServiceSnapshotConfig) SetAlternateSnapshotDirectoryNameNil() {
	o.AlternateSnapshotDirectoryName.Set(nil)
}

// UnsetAlternateSnapshotDirectoryName ensures that no value is present for AlternateSnapshotDirectoryName, not even an explicit nil
func (o *SelfServiceSnapshotConfig) UnsetAlternateSnapshotDirectoryName() {
	o.AlternateSnapshotDirectoryName.Unset()
}

// GetAllowAccessSids returns the AllowAccessSids field value if set, zero value otherwise.
func (o *SelfServiceSnapshotConfig) GetAllowAccessSids() []string {
	if o == nil || o.AllowAccessSids == nil {
		var ret []string
		return ret
	}
	return *o.AllowAccessSids
}

// GetAllowAccessSidsOk returns a tuple with the AllowAccessSids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfServiceSnapshotConfig) GetAllowAccessSidsOk() (*[]string, bool) {
	if o == nil || o.AllowAccessSids == nil {
		return nil, false
	}
	return o.AllowAccessSids, true
}

// HasAllowAccessSids returns a boolean if a field has been set.
func (o *SelfServiceSnapshotConfig) HasAllowAccessSids() bool {
	if o != nil && o.AllowAccessSids != nil {
		return true
	}

	return false
}

// SetAllowAccessSids gets a reference to the given []string and assigns it to the AllowAccessSids field.
func (o *SelfServiceSnapshotConfig) SetAllowAccessSids(v []string) {
	o.AllowAccessSids = &v
}

// GetDenyAccessSids returns the DenyAccessSids field value if set, zero value otherwise.
func (o *SelfServiceSnapshotConfig) GetDenyAccessSids() []string {
	if o == nil || o.DenyAccessSids == nil {
		var ret []string
		return ret
	}
	return *o.DenyAccessSids
}

// GetDenyAccessSidsOk returns a tuple with the DenyAccessSids field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SelfServiceSnapshotConfig) GetDenyAccessSidsOk() (*[]string, bool) {
	if o == nil || o.DenyAccessSids == nil {
		return nil, false
	}
	return o.DenyAccessSids, true
}

// HasDenyAccessSids returns a boolean if a field has been set.
func (o *SelfServiceSnapshotConfig) HasDenyAccessSids() bool {
	if o != nil && o.DenyAccessSids != nil {
		return true
	}

	return false
}

// SetDenyAccessSids gets a reference to the given []string and assigns it to the DenyAccessSids field.
func (o *SelfServiceSnapshotConfig) SetDenyAccessSids(v []string) {
	o.DenyAccessSids = &v
}

func (o SelfServiceSnapshotConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if o.PreviousVersionsEnabled.IsSet() {
		toSerialize["previousVersionsEnabled"] = o.PreviousVersionsEnabled.Get()
	}
	if o.NfsAccessEnabled.IsSet() {
		toSerialize["nfsAccessEnabled"] = o.NfsAccessEnabled.Get()
	}
	if o.SmbAccessEnabled.IsSet() {
		toSerialize["smbAccessEnabled"] = o.SmbAccessEnabled.Get()
	}
	if o.SnapshotDirectoryName.IsSet() {
		toSerialize["snapshotDirectoryName"] = o.SnapshotDirectoryName.Get()
	}
	if o.AlternateSnapshotDirectoryName.IsSet() {
		toSerialize["alternateSnapshotDirectoryName"] = o.AlternateSnapshotDirectoryName.Get()
	}
	if o.AllowAccessSids != nil {
		toSerialize["allowAccessSids"] = o.AllowAccessSids
	}
	if o.DenyAccessSids != nil {
		toSerialize["denyAccessSids"] = o.DenyAccessSids
	}
	return json.Marshal(toSerialize)
}

type NullableSelfServiceSnapshotConfig struct {
	value *SelfServiceSnapshotConfig
	isSet bool
}

func (v NullableSelfServiceSnapshotConfig) Get() *SelfServiceSnapshotConfig {
	return v.value
}

func (v *NullableSelfServiceSnapshotConfig) Set(val *SelfServiceSnapshotConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSelfServiceSnapshotConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSelfServiceSnapshotConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSelfServiceSnapshotConfig(val *SelfServiceSnapshotConfig) *NullableSelfServiceSnapshotConfig {
	return &NullableSelfServiceSnapshotConfig{value: val, isSet: true}
}

func (v NullableSelfServiceSnapshotConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSelfServiceSnapshotConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


