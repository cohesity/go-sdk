/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ClustersTenantConfigs All configurations related to tenants for all clusters.
type ClustersTenantConfigs struct {
	// The list of clusters.
	Clusters *[]ClusterTenantConfig `json:"clusters,omitempty"`
}

// NewClustersTenantConfigs instantiates a new ClustersTenantConfigs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClustersTenantConfigs() *ClustersTenantConfigs {
	this := ClustersTenantConfigs{}
	return &this
}

// NewClustersTenantConfigsWithDefaults instantiates a new ClustersTenantConfigs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClustersTenantConfigsWithDefaults() *ClustersTenantConfigs {
	this := ClustersTenantConfigs{}
	return &this
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *ClustersTenantConfigs) GetClusters() []ClusterTenantConfig {
	if o == nil || o.Clusters == nil {
		var ret []ClusterTenantConfig
		return ret
	}
	return *o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClustersTenantConfigs) GetClustersOk() (*[]ClusterTenantConfig, bool) {
	if o == nil || o.Clusters == nil {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *ClustersTenantConfigs) HasClusters() bool {
	if o != nil && o.Clusters != nil {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []ClusterTenantConfig and assigns it to the Clusters field.
func (o *ClustersTenantConfigs) SetClusters(v []ClusterTenantConfig) {
	o.Clusters = &v
}

func (o ClustersTenantConfigs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Clusters != nil {
		toSerialize["clusters"] = o.Clusters
	}
	return json.Marshal(toSerialize)
}

type NullableClustersTenantConfigs struct {
	value *ClustersTenantConfigs
	isSet bool
}

func (v NullableClustersTenantConfigs) Get() *ClustersTenantConfigs {
	return v.value
}

func (v *NullableClustersTenantConfigs) Set(val *ClustersTenantConfigs) {
	v.value = val
	v.isSet = true
}

func (v NullableClustersTenantConfigs) IsSet() bool {
	return v.isSet
}

func (v *NullableClustersTenantConfigs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClustersTenantConfigs(val *ClustersTenantConfigs) *NullableClustersTenantConfigs {
	return &NullableClustersTenantConfigs{value: val, isSet: true}
}

func (v NullableClustersTenantConfigs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClustersTenantConfigs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


