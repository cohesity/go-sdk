/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// KerberosProviders Response of Kerberos Providers.
type KerberosProviders struct {
	// A list of registered Kerberos Providers.
	KerberosProviders *[]KerberosProvider `json:"kerberosProviders,omitempty"`
}

// NewKerberosProviders instantiates a new KerberosProviders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKerberosProviders() *KerberosProviders {
	this := KerberosProviders{}
	return &this
}

// NewKerberosProvidersWithDefaults instantiates a new KerberosProviders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKerberosProvidersWithDefaults() *KerberosProviders {
	this := KerberosProviders{}
	return &this
}

// GetKerberosProviders returns the KerberosProviders field value if set, zero value otherwise.
func (o *KerberosProviders) GetKerberosProviders() []KerberosProvider {
	if o == nil || o.KerberosProviders == nil {
		var ret []KerberosProvider
		return ret
	}
	return *o.KerberosProviders
}

// GetKerberosProvidersOk returns a tuple with the KerberosProviders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *KerberosProviders) GetKerberosProvidersOk() (*[]KerberosProvider, bool) {
	if o == nil || o.KerberosProviders == nil {
		return nil, false
	}
	return o.KerberosProviders, true
}

// HasKerberosProviders returns a boolean if a field has been set.
func (o *KerberosProviders) HasKerberosProviders() bool {
	if o != nil && o.KerberosProviders != nil {
		return true
	}

	return false
}

// SetKerberosProviders gets a reference to the given []KerberosProvider and assigns it to the KerberosProviders field.
func (o *KerberosProviders) SetKerberosProviders(v []KerberosProvider) {
	o.KerberosProviders = &v
}

func (o KerberosProviders) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.KerberosProviders != nil {
		toSerialize["kerberosProviders"] = o.KerberosProviders
	}
	return json.Marshal(toSerialize)
}

type NullableKerberosProviders struct {
	value *KerberosProviders
	isSet bool
}

func (v NullableKerberosProviders) Get() *KerberosProviders {
	return v.value
}

func (v *NullableKerberosProviders) Set(val *KerberosProviders) {
	v.value = val
	v.isSet = true
}

func (v NullableKerberosProviders) IsSet() bool {
	return v.isSet
}

func (v *NullableKerberosProviders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKerberosProviders(val *KerberosProviders) *NullableKerberosProviders {
	return &NullableKerberosProviders{value: val, isSet: true}
}

func (v NullableKerberosProviders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKerberosProviders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


