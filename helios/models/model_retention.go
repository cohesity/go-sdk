/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// Retention Specifies the retention of a backup.
type Retention struct {
	// Specificies the Retention Unit of a backup measured in days, months or years. <br> If unit is 'Months', then number specified in duration is multiplied to 30. <br> Example: If duration is 4 and unit is 'Months' then number of retention days will be 30 * 4 = 120 days. <br> If unit is 'Years', then number specified in duration is multiplied to 365. <br> If duration is 2 and unit is 'Months' then number of retention days will be 365 * 2 = 730 days.
	Unit NullableString `json:"unit"`
	// Specifies the duration for a backup retention. <br> Example. If duration is 7 and unit is Months, the retention of a backup is 7 * 30 = 210 days.
	Duration NullableInt64 `json:"duration"`
	DataLockConfig *DataLockConfig `json:"dataLockConfig,omitempty"`
}

// NewRetention instantiates a new Retention object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetention(unit NullableString, duration NullableInt64) *Retention {
	this := Retention{}
	this.Unit = unit
	this.Duration = duration
	return &this
}

// NewRetentionWithDefaults instantiates a new Retention object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetentionWithDefaults() *Retention {
	this := Retention{}
	return &this
}

// GetUnit returns the Unit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *Retention) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}

	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Retention) GetUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// SetUnit sets field value
func (o *Retention) SetUnit(v string) {
	o.Unit.Set(&v)
}

// GetDuration returns the Duration field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *Retention) GetDuration() int64 {
	if o == nil || o.Duration.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Duration.Get()
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Retention) GetDurationOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Duration.Get(), o.Duration.IsSet()
}

// SetDuration sets field value
func (o *Retention) SetDuration(v int64) {
	o.Duration.Set(&v)
}

// GetDataLockConfig returns the DataLockConfig field value if set, zero value otherwise.
func (o *Retention) GetDataLockConfig() DataLockConfig {
	if o == nil || o.DataLockConfig == nil {
		var ret DataLockConfig
		return ret
	}
	return *o.DataLockConfig
}

// GetDataLockConfigOk returns a tuple with the DataLockConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Retention) GetDataLockConfigOk() (*DataLockConfig, bool) {
	if o == nil || o.DataLockConfig == nil {
		return nil, false
	}
	return o.DataLockConfig, true
}

// HasDataLockConfig returns a boolean if a field has been set.
func (o *Retention) HasDataLockConfig() bool {
	if o != nil && o.DataLockConfig != nil {
		return true
	}

	return false
}

// SetDataLockConfig gets a reference to the given DataLockConfig and assigns it to the DataLockConfig field.
func (o *Retention) SetDataLockConfig(v DataLockConfig) {
	o.DataLockConfig = &v
}

func (o Retention) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["unit"] = o.Unit.Get()
	}
	if true {
		toSerialize["duration"] = o.Duration.Get()
	}
	if o.DataLockConfig != nil {
		toSerialize["dataLockConfig"] = o.DataLockConfig
	}
	return json.Marshal(toSerialize)
}

type NullableRetention struct {
	value *Retention
	isSet bool
}

func (v NullableRetention) Get() *Retention {
	return v.value
}

func (v *NullableRetention) Set(val *Retention) {
	v.value = val
	v.isSet = true
}

func (v NullableRetention) IsSet() bool {
	return v.isSet
}

func (v *NullableRetention) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetention(val *Retention) *NullableRetention {
	return &NullableRetention{value: val, isSet: true}
}

func (v NullableRetention) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetention) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


