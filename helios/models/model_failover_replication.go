/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// FailoverReplication Specifies the details of a failover replication.
type FailoverReplication struct {
	// Specifies the replication id.
	Id NullableString `json:"id,omitempty"`
	// Specifies the replication status.
	Status NullableString `json:"status,omitempty"`
	// Specifies the error details if replication status is 'Failed'.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Specifies the replication start time in micro seconds.
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// Specifies the replication complete time in micro seconds.
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// Specifies the percentage completed in the replication.
	PercentageCompleted NullableInt32 `json:"percentageCompleted,omitempty"`
	// Specifies the total amount of logical data to be transferred for this replication.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
	// Specifies the number of logical bytes transferred for this replication so far. This value can never exceed the total logical size of the replicated view.
	LogicalBytesTransferred NullableInt64 `json:"logicalBytesTransferred,omitempty"`
	// Specifies the number of bytes sent over the wire for this replication so far.
	PhysicalBytesTransferred NullableInt64 `json:"physicalBytesTransferred,omitempty"`
	// Specifies the failover target cluster id.
	TargetClusterId NullableInt64 `json:"targetClusterId,omitempty"`
	// Specifies the failover target cluster incarnation id.
	TargetClusterIncarnationId NullableInt64 `json:"targetClusterIncarnationId,omitempty"`
	// Specifies the failover target cluster name.
	TargetClusterName NullableString `json:"targetClusterName,omitempty"`
}

// NewFailoverReplication instantiates a new FailoverReplication object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverReplication() *FailoverReplication {
	this := FailoverReplication{}
	return &this
}

// NewFailoverReplicationWithDefaults instantiates a new FailoverReplication object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverReplicationWithDefaults() *FailoverReplication {
	this := FailoverReplication{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *FailoverReplication) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *FailoverReplication) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *FailoverReplication) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *FailoverReplication) UnsetId() {
	o.Id.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *FailoverReplication) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *FailoverReplication) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *FailoverReplication) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *FailoverReplication) UnsetStatus() {
	o.Status.Unset()
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *FailoverReplication) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *FailoverReplication) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *FailoverReplication) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *FailoverReplication) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *FailoverReplication) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *FailoverReplication) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *FailoverReplication) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *FailoverReplication) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *FailoverReplication) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *FailoverReplication) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *FailoverReplication) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *FailoverReplication) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetPercentageCompleted returns the PercentageCompleted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetPercentageCompleted() int32 {
	if o == nil || o.PercentageCompleted.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PercentageCompleted.Get()
}

// GetPercentageCompletedOk returns a tuple with the PercentageCompleted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetPercentageCompletedOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PercentageCompleted.Get(), o.PercentageCompleted.IsSet()
}

// HasPercentageCompleted returns a boolean if a field has been set.
func (o *FailoverReplication) HasPercentageCompleted() bool {
	if o != nil && o.PercentageCompleted.IsSet() {
		return true
	}

	return false
}

// SetPercentageCompleted gets a reference to the given NullableInt32 and assigns it to the PercentageCompleted field.
func (o *FailoverReplication) SetPercentageCompleted(v int32) {
	o.PercentageCompleted.Set(&v)
}
// SetPercentageCompletedNil sets the value for PercentageCompleted to be an explicit nil
func (o *FailoverReplication) SetPercentageCompletedNil() {
	o.PercentageCompleted.Set(nil)
}

// UnsetPercentageCompleted ensures that no value is present for PercentageCompleted, not even an explicit nil
func (o *FailoverReplication) UnsetPercentageCompleted() {
	o.PercentageCompleted.Unset()
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetLogicalSizeBytes() int64 {
	if o == nil || o.LogicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *FailoverReplication) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *FailoverReplication) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *FailoverReplication) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *FailoverReplication) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetLogicalBytesTransferred returns the LogicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetLogicalBytesTransferred() int64 {
	if o == nil || o.LogicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalBytesTransferred.Get()
}

// GetLogicalBytesTransferredOk returns a tuple with the LogicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetLogicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalBytesTransferred.Get(), o.LogicalBytesTransferred.IsSet()
}

// HasLogicalBytesTransferred returns a boolean if a field has been set.
func (o *FailoverReplication) HasLogicalBytesTransferred() bool {
	if o != nil && o.LogicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetLogicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the LogicalBytesTransferred field.
func (o *FailoverReplication) SetLogicalBytesTransferred(v int64) {
	o.LogicalBytesTransferred.Set(&v)
}
// SetLogicalBytesTransferredNil sets the value for LogicalBytesTransferred to be an explicit nil
func (o *FailoverReplication) SetLogicalBytesTransferredNil() {
	o.LogicalBytesTransferred.Set(nil)
}

// UnsetLogicalBytesTransferred ensures that no value is present for LogicalBytesTransferred, not even an explicit nil
func (o *FailoverReplication) UnsetLogicalBytesTransferred() {
	o.LogicalBytesTransferred.Unset()
}

// GetPhysicalBytesTransferred returns the PhysicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetPhysicalBytesTransferred() int64 {
	if o == nil || o.PhysicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PhysicalBytesTransferred.Get()
}

// GetPhysicalBytesTransferredOk returns a tuple with the PhysicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetPhysicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalBytesTransferred.Get(), o.PhysicalBytesTransferred.IsSet()
}

// HasPhysicalBytesTransferred returns a boolean if a field has been set.
func (o *FailoverReplication) HasPhysicalBytesTransferred() bool {
	if o != nil && o.PhysicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetPhysicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the PhysicalBytesTransferred field.
func (o *FailoverReplication) SetPhysicalBytesTransferred(v int64) {
	o.PhysicalBytesTransferred.Set(&v)
}
// SetPhysicalBytesTransferredNil sets the value for PhysicalBytesTransferred to be an explicit nil
func (o *FailoverReplication) SetPhysicalBytesTransferredNil() {
	o.PhysicalBytesTransferred.Set(nil)
}

// UnsetPhysicalBytesTransferred ensures that no value is present for PhysicalBytesTransferred, not even an explicit nil
func (o *FailoverReplication) UnsetPhysicalBytesTransferred() {
	o.PhysicalBytesTransferred.Unset()
}

// GetTargetClusterId returns the TargetClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetTargetClusterId() int64 {
	if o == nil || o.TargetClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TargetClusterId.Get()
}

// GetTargetClusterIdOk returns a tuple with the TargetClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetTargetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetClusterId.Get(), o.TargetClusterId.IsSet()
}

// HasTargetClusterId returns a boolean if a field has been set.
func (o *FailoverReplication) HasTargetClusterId() bool {
	if o != nil && o.TargetClusterId.IsSet() {
		return true
	}

	return false
}

// SetTargetClusterId gets a reference to the given NullableInt64 and assigns it to the TargetClusterId field.
func (o *FailoverReplication) SetTargetClusterId(v int64) {
	o.TargetClusterId.Set(&v)
}
// SetTargetClusterIdNil sets the value for TargetClusterId to be an explicit nil
func (o *FailoverReplication) SetTargetClusterIdNil() {
	o.TargetClusterId.Set(nil)
}

// UnsetTargetClusterId ensures that no value is present for TargetClusterId, not even an explicit nil
func (o *FailoverReplication) UnsetTargetClusterId() {
	o.TargetClusterId.Unset()
}

// GetTargetClusterIncarnationId returns the TargetClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetTargetClusterIncarnationId() int64 {
	if o == nil || o.TargetClusterIncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TargetClusterIncarnationId.Get()
}

// GetTargetClusterIncarnationIdOk returns a tuple with the TargetClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetTargetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetClusterIncarnationId.Get(), o.TargetClusterIncarnationId.IsSet()
}

// HasTargetClusterIncarnationId returns a boolean if a field has been set.
func (o *FailoverReplication) HasTargetClusterIncarnationId() bool {
	if o != nil && o.TargetClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetTargetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the TargetClusterIncarnationId field.
func (o *FailoverReplication) SetTargetClusterIncarnationId(v int64) {
	o.TargetClusterIncarnationId.Set(&v)
}
// SetTargetClusterIncarnationIdNil sets the value for TargetClusterIncarnationId to be an explicit nil
func (o *FailoverReplication) SetTargetClusterIncarnationIdNil() {
	o.TargetClusterIncarnationId.Set(nil)
}

// UnsetTargetClusterIncarnationId ensures that no value is present for TargetClusterIncarnationId, not even an explicit nil
func (o *FailoverReplication) UnsetTargetClusterIncarnationId() {
	o.TargetClusterIncarnationId.Unset()
}

// GetTargetClusterName returns the TargetClusterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplication) GetTargetClusterName() string {
	if o == nil || o.TargetClusterName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetClusterName.Get()
}

// GetTargetClusterNameOk returns a tuple with the TargetClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplication) GetTargetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetClusterName.Get(), o.TargetClusterName.IsSet()
}

// HasTargetClusterName returns a boolean if a field has been set.
func (o *FailoverReplication) HasTargetClusterName() bool {
	if o != nil && o.TargetClusterName.IsSet() {
		return true
	}

	return false
}

// SetTargetClusterName gets a reference to the given NullableString and assigns it to the TargetClusterName field.
func (o *FailoverReplication) SetTargetClusterName(v string) {
	o.TargetClusterName.Set(&v)
}
// SetTargetClusterNameNil sets the value for TargetClusterName to be an explicit nil
func (o *FailoverReplication) SetTargetClusterNameNil() {
	o.TargetClusterName.Set(nil)
}

// UnsetTargetClusterName ensures that no value is present for TargetClusterName, not even an explicit nil
func (o *FailoverReplication) UnsetTargetClusterName() {
	o.TargetClusterName.Unset()
}

func (o FailoverReplication) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.PercentageCompleted.IsSet() {
		toSerialize["percentageCompleted"] = o.PercentageCompleted.Get()
	}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.LogicalBytesTransferred.IsSet() {
		toSerialize["logicalBytesTransferred"] = o.LogicalBytesTransferred.Get()
	}
	if o.PhysicalBytesTransferred.IsSet() {
		toSerialize["physicalBytesTransferred"] = o.PhysicalBytesTransferred.Get()
	}
	if o.TargetClusterId.IsSet() {
		toSerialize["targetClusterId"] = o.TargetClusterId.Get()
	}
	if o.TargetClusterIncarnationId.IsSet() {
		toSerialize["targetClusterIncarnationId"] = o.TargetClusterIncarnationId.Get()
	}
	if o.TargetClusterName.IsSet() {
		toSerialize["targetClusterName"] = o.TargetClusterName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFailoverReplication struct {
	value *FailoverReplication
	isSet bool
}

func (v NullableFailoverReplication) Get() *FailoverReplication {
	return v.value
}

func (v *NullableFailoverReplication) Set(val *FailoverReplication) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverReplication) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverReplication) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverReplication(val *FailoverReplication) *NullableFailoverReplication {
	return &NullableFailoverReplication{value: val, isSet: true}
}

func (v NullableFailoverReplication) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverReplication) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


