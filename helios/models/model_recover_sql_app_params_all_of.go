/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RecoverSqlAppParamsAllOf struct for RecoverSqlAppParamsAllOf
type RecoverSqlAppParamsAllOf struct {
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	SqlTargetParams *SqlTargetParamsForRecoverSqlApp `json:"sqlTargetParams,omitempty"`
}

// NewRecoverSqlAppParamsAllOf instantiates a new RecoverSqlAppParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverSqlAppParamsAllOf(targetEnvironment string) *RecoverSqlAppParamsAllOf {
	this := RecoverSqlAppParamsAllOf{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverSqlAppParamsAllOfWithDefaults instantiates a new RecoverSqlAppParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverSqlAppParamsAllOfWithDefaults() *RecoverSqlAppParamsAllOf {
	this := RecoverSqlAppParamsAllOf{}
	return &this
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverSqlAppParamsAllOf) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverSqlAppParamsAllOf) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverSqlAppParamsAllOf) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetSqlTargetParams returns the SqlTargetParams field value if set, zero value otherwise.
func (o *RecoverSqlAppParamsAllOf) GetSqlTargetParams() SqlTargetParamsForRecoverSqlApp {
	if o == nil || o.SqlTargetParams == nil {
		var ret SqlTargetParamsForRecoverSqlApp
		return ret
	}
	return *o.SqlTargetParams
}

// GetSqlTargetParamsOk returns a tuple with the SqlTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RecoverSqlAppParamsAllOf) GetSqlTargetParamsOk() (*SqlTargetParamsForRecoverSqlApp, bool) {
	if o == nil || o.SqlTargetParams == nil {
		return nil, false
	}
	return o.SqlTargetParams, true
}

// HasSqlTargetParams returns a boolean if a field has been set.
func (o *RecoverSqlAppParamsAllOf) HasSqlTargetParams() bool {
	if o != nil && o.SqlTargetParams != nil {
		return true
	}

	return false
}

// SetSqlTargetParams gets a reference to the given SqlTargetParamsForRecoverSqlApp and assigns it to the SqlTargetParams field.
func (o *RecoverSqlAppParamsAllOf) SetSqlTargetParams(v SqlTargetParamsForRecoverSqlApp) {
	o.SqlTargetParams = &v
}

func (o RecoverSqlAppParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["targetEnvironment"] = o.TargetEnvironment
	}
	if o.SqlTargetParams != nil {
		toSerialize["sqlTargetParams"] = o.SqlTargetParams
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverSqlAppParamsAllOf struct {
	value *RecoverSqlAppParamsAllOf
	isSet bool
}

func (v NullableRecoverSqlAppParamsAllOf) Get() *RecoverSqlAppParamsAllOf {
	return v.value
}

func (v *NullableRecoverSqlAppParamsAllOf) Set(val *RecoverSqlAppParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverSqlAppParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverSqlAppParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverSqlAppParamsAllOf(val *RecoverSqlAppParamsAllOf) *NullableRecoverSqlAppParamsAllOf {
	return &NullableRecoverSqlAppParamsAllOf{value: val, isSet: true}
}

func (v NullableRecoverSqlAppParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverSqlAppParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


