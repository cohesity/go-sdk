/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ReassociateKeyRequest The request for reassociate key.
type ReassociateKeyRequest struct {
	// Specifies the api key.
	ApiKey NullableString `json:"apiKey"`
}

// NewReassociateKeyRequest instantiates a new ReassociateKeyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReassociateKeyRequest(apiKey NullableString) *ReassociateKeyRequest {
	this := ReassociateKeyRequest{}
	this.ApiKey = apiKey
	return &this
}

// NewReassociateKeyRequestWithDefaults instantiates a new ReassociateKeyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReassociateKeyRequestWithDefaults() *ReassociateKeyRequest {
	this := ReassociateKeyRequest{}
	return &this
}

// GetApiKey returns the ApiKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ReassociateKeyRequest) GetApiKey() string {
	if o == nil || o.ApiKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.ApiKey.Get()
}

// GetApiKeyOk returns a tuple with the ApiKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReassociateKeyRequest) GetApiKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApiKey.Get(), o.ApiKey.IsSet()
}

// SetApiKey sets field value
func (o *ReassociateKeyRequest) SetApiKey(v string) {
	o.ApiKey.Set(&v)
}

func (o ReassociateKeyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["apiKey"] = o.ApiKey.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableReassociateKeyRequest struct {
	value *ReassociateKeyRequest
	isSet bool
}

func (v NullableReassociateKeyRequest) Get() *ReassociateKeyRequest {
	return v.value
}

func (v *NullableReassociateKeyRequest) Set(val *ReassociateKeyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReassociateKeyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReassociateKeyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReassociateKeyRequest(val *ReassociateKeyRequest) *NullableReassociateKeyRequest {
	return &NullableReassociateKeyRequest{value: val, isSet: true}
}

func (v NullableReassociateKeyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReassociateKeyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


