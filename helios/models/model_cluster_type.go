/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ClusterType Cluster Type
type ClusterType struct {
	// Specifies the cluster types.
	ClusterType *string `json:"clusterType,omitempty"`
}

// NewClusterType instantiates a new ClusterType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterType() *ClusterType {
	this := ClusterType{}
	return &this
}

// NewClusterTypeWithDefaults instantiates a new ClusterType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterTypeWithDefaults() *ClusterType {
	this := ClusterType{}
	return &this
}

// GetClusterType returns the ClusterType field value if set, zero value otherwise.
func (o *ClusterType) GetClusterType() string {
	if o == nil || o.ClusterType == nil {
		var ret string
		return ret
	}
	return *o.ClusterType
}

// GetClusterTypeOk returns a tuple with the ClusterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterType) GetClusterTypeOk() (*string, bool) {
	if o == nil || o.ClusterType == nil {
		return nil, false
	}
	return o.ClusterType, true
}

// HasClusterType returns a boolean if a field has been set.
func (o *ClusterType) HasClusterType() bool {
	if o != nil && o.ClusterType != nil {
		return true
	}

	return false
}

// SetClusterType gets a reference to the given string and assigns it to the ClusterType field.
func (o *ClusterType) SetClusterType(v string) {
	o.ClusterType = &v
}

func (o ClusterType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterType != nil {
		toSerialize["clusterType"] = o.ClusterType
	}
	return json.Marshal(toSerialize)
}

type NullableClusterType struct {
	value *ClusterType
	isSet bool
}

func (v NullableClusterType) Get() *ClusterType {
	return v.value
}

func (v *NullableClusterType) Set(val *ClusterType) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterType) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterType(val *ClusterType) *NullableClusterType {
	return &NullableClusterType{value: val, isSet: true}
}

func (v NullableClusterType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


