/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// FileFolderInfo Specifies information of the contents (files and folders).
type FileFolderInfo struct {
	// Specifies the environment of the object.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies the parameters for Hdfs.
	HdfsParams *[]HdfsFileFolderParams `json:"hdfsParams,omitempty"`
	PaginationInfo *PaginationInfo `json:"paginationInfo,omitempty"`
}

// NewFileFolderInfo instantiates a new FileFolderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileFolderInfo() *FileFolderInfo {
	this := FileFolderInfo{}
	return &this
}

// NewFileFolderInfoWithDefaults instantiates a new FileFolderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileFolderInfoWithDefaults() *FileFolderInfo {
	this := FileFolderInfo{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileFolderInfo) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileFolderInfo) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *FileFolderInfo) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *FileFolderInfo) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *FileFolderInfo) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *FileFolderInfo) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetHdfsParams returns the HdfsParams field value if set, zero value otherwise.
func (o *FileFolderInfo) GetHdfsParams() []HdfsFileFolderParams {
	if o == nil || o.HdfsParams == nil {
		var ret []HdfsFileFolderParams
		return ret
	}
	return *o.HdfsParams
}

// GetHdfsParamsOk returns a tuple with the HdfsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFolderInfo) GetHdfsParamsOk() (*[]HdfsFileFolderParams, bool) {
	if o == nil || o.HdfsParams == nil {
		return nil, false
	}
	return o.HdfsParams, true
}

// HasHdfsParams returns a boolean if a field has been set.
func (o *FileFolderInfo) HasHdfsParams() bool {
	if o != nil && o.HdfsParams != nil {
		return true
	}

	return false
}

// SetHdfsParams gets a reference to the given []HdfsFileFolderParams and assigns it to the HdfsParams field.
func (o *FileFolderInfo) SetHdfsParams(v []HdfsFileFolderParams) {
	o.HdfsParams = &v
}

// GetPaginationInfo returns the PaginationInfo field value if set, zero value otherwise.
func (o *FileFolderInfo) GetPaginationInfo() PaginationInfo {
	if o == nil || o.PaginationInfo == nil {
		var ret PaginationInfo
		return ret
	}
	return *o.PaginationInfo
}

// GetPaginationInfoOk returns a tuple with the PaginationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFolderInfo) GetPaginationInfoOk() (*PaginationInfo, bool) {
	if o == nil || o.PaginationInfo == nil {
		return nil, false
	}
	return o.PaginationInfo, true
}

// HasPaginationInfo returns a boolean if a field has been set.
func (o *FileFolderInfo) HasPaginationInfo() bool {
	if o != nil && o.PaginationInfo != nil {
		return true
	}

	return false
}

// SetPaginationInfo gets a reference to the given PaginationInfo and assigns it to the PaginationInfo field.
func (o *FileFolderInfo) SetPaginationInfo(v PaginationInfo) {
	o.PaginationInfo = &v
}

func (o FileFolderInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.HdfsParams != nil {
		toSerialize["hdfsParams"] = o.HdfsParams
	}
	if o.PaginationInfo != nil {
		toSerialize["paginationInfo"] = o.PaginationInfo
	}
	return json.Marshal(toSerialize)
}

type NullableFileFolderInfo struct {
	value *FileFolderInfo
	isSet bool
}

func (v NullableFileFolderInfo) Get() *FileFolderInfo {
	return v.value
}

func (v *NullableFileFolderInfo) Set(val *FileFolderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFileFolderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFileFolderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileFolderInfo(val *FileFolderInfo) *NullableFileFolderInfo {
	return &NullableFileFolderInfo{value: val, isSet: true}
}

func (v NullableFileFolderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileFolderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


