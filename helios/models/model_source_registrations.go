/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SourceRegistrations Protection Source Registrations.
type SourceRegistrations struct {
	// Specifies the list of Protection Source Registrations.
	Registrations []SourceRegistration `json:"registrations,omitempty"`
}

// NewSourceRegistrations instantiates a new SourceRegistrations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceRegistrations() *SourceRegistrations {
	this := SourceRegistrations{}
	return &this
}

// NewSourceRegistrationsWithDefaults instantiates a new SourceRegistrations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceRegistrationsWithDefaults() *SourceRegistrations {
	this := SourceRegistrations{}
	return &this
}

// GetRegistrations returns the Registrations field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceRegistrations) GetRegistrations() []SourceRegistration {
	if o == nil  {
		var ret []SourceRegistration
		return ret
	}
	return o.Registrations
}

// GetRegistrationsOk returns a tuple with the Registrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrations) GetRegistrationsOk() (*[]SourceRegistration, bool) {
	if o == nil || o.Registrations == nil {
		return nil, false
	}
	return &o.Registrations, true
}

// HasRegistrations returns a boolean if a field has been set.
func (o *SourceRegistrations) HasRegistrations() bool {
	if o != nil && o.Registrations != nil {
		return true
	}

	return false
}

// SetRegistrations gets a reference to the given []SourceRegistration and assigns it to the Registrations field.
func (o *SourceRegistrations) SetRegistrations(v []SourceRegistration) {
	o.Registrations = v
}

func (o SourceRegistrations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Registrations != nil {
		toSerialize["registrations"] = o.Registrations
	}
	return json.Marshal(toSerialize)
}

type NullableSourceRegistrations struct {
	value *SourceRegistrations
	isSet bool
}

func (v NullableSourceRegistrations) Get() *SourceRegistrations {
	return v.value
}

func (v *NullableSourceRegistrations) Set(val *SourceRegistrations) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceRegistrations) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceRegistrations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceRegistrations(val *SourceRegistrations) *NullableSourceRegistrations {
	return &NullableSourceRegistrations{value: val, isSet: true}
}

func (v NullableSourceRegistrations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceRegistrations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


