/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CommonVmwareObjectParams Specifies the common object parameters required for VMware protection.
type CommonVmwareObjectParams struct {
	// Specifies a list of disks to exclude from being protected. This is only applicable to VM objects.
	ExcludeDisks *[]DiskInfo `json:"excludeDisks,omitempty"`
	// Specifies whether or not to truncate MS Exchange logs while taking an app consistent snapshot of this object. This is only applicable to objects which have a registered MS Exchange app.
	TruncateExchangeLogs NullableBool `json:"truncateExchangeLogs,omitempty"`
}

// NewCommonVmwareObjectParams instantiates a new CommonVmwareObjectParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonVmwareObjectParams() *CommonVmwareObjectParams {
	this := CommonVmwareObjectParams{}
	return &this
}

// NewCommonVmwareObjectParamsWithDefaults instantiates a new CommonVmwareObjectParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonVmwareObjectParamsWithDefaults() *CommonVmwareObjectParams {
	this := CommonVmwareObjectParams{}
	return &this
}

// GetExcludeDisks returns the ExcludeDisks field value if set, zero value otherwise.
func (o *CommonVmwareObjectParams) GetExcludeDisks() []DiskInfo {
	if o == nil || o.ExcludeDisks == nil {
		var ret []DiskInfo
		return ret
	}
	return *o.ExcludeDisks
}

// GetExcludeDisksOk returns a tuple with the ExcludeDisks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonVmwareObjectParams) GetExcludeDisksOk() (*[]DiskInfo, bool) {
	if o == nil || o.ExcludeDisks == nil {
		return nil, false
	}
	return o.ExcludeDisks, true
}

// HasExcludeDisks returns a boolean if a field has been set.
func (o *CommonVmwareObjectParams) HasExcludeDisks() bool {
	if o != nil && o.ExcludeDisks != nil {
		return true
	}

	return false
}

// SetExcludeDisks gets a reference to the given []DiskInfo and assigns it to the ExcludeDisks field.
func (o *CommonVmwareObjectParams) SetExcludeDisks(v []DiskInfo) {
	o.ExcludeDisks = &v
}

// GetTruncateExchangeLogs returns the TruncateExchangeLogs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonVmwareObjectParams) GetTruncateExchangeLogs() bool {
	if o == nil || o.TruncateExchangeLogs.Get() == nil {
		var ret bool
		return ret
	}
	return *o.TruncateExchangeLogs.Get()
}

// GetTruncateExchangeLogsOk returns a tuple with the TruncateExchangeLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonVmwareObjectParams) GetTruncateExchangeLogsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TruncateExchangeLogs.Get(), o.TruncateExchangeLogs.IsSet()
}

// HasTruncateExchangeLogs returns a boolean if a field has been set.
func (o *CommonVmwareObjectParams) HasTruncateExchangeLogs() bool {
	if o != nil && o.TruncateExchangeLogs.IsSet() {
		return true
	}

	return false
}

// SetTruncateExchangeLogs gets a reference to the given NullableBool and assigns it to the TruncateExchangeLogs field.
func (o *CommonVmwareObjectParams) SetTruncateExchangeLogs(v bool) {
	o.TruncateExchangeLogs.Set(&v)
}
// SetTruncateExchangeLogsNil sets the value for TruncateExchangeLogs to be an explicit nil
func (o *CommonVmwareObjectParams) SetTruncateExchangeLogsNil() {
	o.TruncateExchangeLogs.Set(nil)
}

// UnsetTruncateExchangeLogs ensures that no value is present for TruncateExchangeLogs, not even an explicit nil
func (o *CommonVmwareObjectParams) UnsetTruncateExchangeLogs() {
	o.TruncateExchangeLogs.Unset()
}

func (o CommonVmwareObjectParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExcludeDisks != nil {
		toSerialize["excludeDisks"] = o.ExcludeDisks
	}
	if o.TruncateExchangeLogs.IsSet() {
		toSerialize["truncateExchangeLogs"] = o.TruncateExchangeLogs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCommonVmwareObjectParams struct {
	value *CommonVmwareObjectParams
	isSet bool
}

func (v NullableCommonVmwareObjectParams) Get() *CommonVmwareObjectParams {
	return v.value
}

func (v *NullableCommonVmwareObjectParams) Set(val *CommonVmwareObjectParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonVmwareObjectParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonVmwareObjectParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonVmwareObjectParams(val *CommonVmwareObjectParams) *NullableCommonVmwareObjectParams {
	return &NullableCommonVmwareObjectParams{value: val, isSet: true}
}

func (v NullableCommonVmwareObjectParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonVmwareObjectParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


