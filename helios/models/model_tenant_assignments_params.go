/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// TenantAssignmentsParams Parameters to be specified for assigning properties like storage domain, entities, policies to the tenant.
type TenantAssignmentsParams struct {
	// List of storage domains on the cluster, to be associated to the Tenant.
	StorageDomainIds []int64 `json:"storageDomainIds,omitempty"`
	// List of objects on the cluster, to be associated to the Tenant.
	ObjectIds []int64 `json:"objectIds,omitempty"`
	// List of vlans on the cluster, to be associated to the Tenant.
	VlanIfaceNames []string `json:"vlanIfaceNames,omitempty"`
	// List of views on the cluster, to be associated to the Tenant.
	ViewIds []int64 `json:"viewIds,omitempty"`
	// List of policies on the cluster, to be associated to the Tenant.
	PolicyIds []string `json:"policyIds,omitempty"`
}

// NewTenantAssignmentsParams instantiates a new TenantAssignmentsParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantAssignmentsParams() *TenantAssignmentsParams {
	this := TenantAssignmentsParams{}
	return &this
}

// NewTenantAssignmentsParamsWithDefaults instantiates a new TenantAssignmentsParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantAssignmentsParamsWithDefaults() *TenantAssignmentsParams {
	this := TenantAssignmentsParams{}
	return &this
}

// GetStorageDomainIds returns the StorageDomainIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAssignmentsParams) GetStorageDomainIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.StorageDomainIds
}

// GetStorageDomainIdsOk returns a tuple with the StorageDomainIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAssignmentsParams) GetStorageDomainIdsOk() (*[]int64, bool) {
	if o == nil || o.StorageDomainIds == nil {
		return nil, false
	}
	return &o.StorageDomainIds, true
}

// HasStorageDomainIds returns a boolean if a field has been set.
func (o *TenantAssignmentsParams) HasStorageDomainIds() bool {
	if o != nil && o.StorageDomainIds != nil {
		return true
	}

	return false
}

// SetStorageDomainIds gets a reference to the given []int64 and assigns it to the StorageDomainIds field.
func (o *TenantAssignmentsParams) SetStorageDomainIds(v []int64) {
	o.StorageDomainIds = v
}

// GetObjectIds returns the ObjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAssignmentsParams) GetObjectIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ObjectIds
}

// GetObjectIdsOk returns a tuple with the ObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAssignmentsParams) GetObjectIdsOk() (*[]int64, bool) {
	if o == nil || o.ObjectIds == nil {
		return nil, false
	}
	return &o.ObjectIds, true
}

// HasObjectIds returns a boolean if a field has been set.
func (o *TenantAssignmentsParams) HasObjectIds() bool {
	if o != nil && o.ObjectIds != nil {
		return true
	}

	return false
}

// SetObjectIds gets a reference to the given []int64 and assigns it to the ObjectIds field.
func (o *TenantAssignmentsParams) SetObjectIds(v []int64) {
	o.ObjectIds = v
}

// GetVlanIfaceNames returns the VlanIfaceNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAssignmentsParams) GetVlanIfaceNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.VlanIfaceNames
}

// GetVlanIfaceNamesOk returns a tuple with the VlanIfaceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAssignmentsParams) GetVlanIfaceNamesOk() (*[]string, bool) {
	if o == nil || o.VlanIfaceNames == nil {
		return nil, false
	}
	return &o.VlanIfaceNames, true
}

// HasVlanIfaceNames returns a boolean if a field has been set.
func (o *TenantAssignmentsParams) HasVlanIfaceNames() bool {
	if o != nil && o.VlanIfaceNames != nil {
		return true
	}

	return false
}

// SetVlanIfaceNames gets a reference to the given []string and assigns it to the VlanIfaceNames field.
func (o *TenantAssignmentsParams) SetVlanIfaceNames(v []string) {
	o.VlanIfaceNames = v
}

// GetViewIds returns the ViewIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAssignmentsParams) GetViewIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ViewIds
}

// GetViewIdsOk returns a tuple with the ViewIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAssignmentsParams) GetViewIdsOk() (*[]int64, bool) {
	if o == nil || o.ViewIds == nil {
		return nil, false
	}
	return &o.ViewIds, true
}

// HasViewIds returns a boolean if a field has been set.
func (o *TenantAssignmentsParams) HasViewIds() bool {
	if o != nil && o.ViewIds != nil {
		return true
	}

	return false
}

// SetViewIds gets a reference to the given []int64 and assigns it to the ViewIds field.
func (o *TenantAssignmentsParams) SetViewIds(v []int64) {
	o.ViewIds = v
}

// GetPolicyIds returns the PolicyIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAssignmentsParams) GetPolicyIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.PolicyIds
}

// GetPolicyIdsOk returns a tuple with the PolicyIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAssignmentsParams) GetPolicyIdsOk() (*[]string, bool) {
	if o == nil || o.PolicyIds == nil {
		return nil, false
	}
	return &o.PolicyIds, true
}

// HasPolicyIds returns a boolean if a field has been set.
func (o *TenantAssignmentsParams) HasPolicyIds() bool {
	if o != nil && o.PolicyIds != nil {
		return true
	}

	return false
}

// SetPolicyIds gets a reference to the given []string and assigns it to the PolicyIds field.
func (o *TenantAssignmentsParams) SetPolicyIds(v []string) {
	o.PolicyIds = v
}

func (o TenantAssignmentsParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StorageDomainIds != nil {
		toSerialize["storageDomainIds"] = o.StorageDomainIds
	}
	if o.ObjectIds != nil {
		toSerialize["objectIds"] = o.ObjectIds
	}
	if o.VlanIfaceNames != nil {
		toSerialize["vlanIfaceNames"] = o.VlanIfaceNames
	}
	if o.ViewIds != nil {
		toSerialize["viewIds"] = o.ViewIds
	}
	if o.PolicyIds != nil {
		toSerialize["policyIds"] = o.PolicyIds
	}
	return json.Marshal(toSerialize)
}

type NullableTenantAssignmentsParams struct {
	value *TenantAssignmentsParams
	isSet bool
}

func (v NullableTenantAssignmentsParams) Get() *TenantAssignmentsParams {
	return v.value
}

func (v *NullableTenantAssignmentsParams) Set(val *TenantAssignmentsParams) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantAssignmentsParams) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantAssignmentsParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantAssignmentsParams(val *TenantAssignmentsParams) *NullableTenantAssignmentsParams {
	return &NullableTenantAssignmentsParams{value: val, isSet: true}
}

func (v NullableTenantAssignmentsParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantAssignmentsParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


