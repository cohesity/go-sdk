/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// EncryptionSettings Specifis the encryption setting of the External Target
type EncryptionSettings struct {
	// Specifies the type of encryption for the Setting.
	EncryptionLevel NullableString `json:"encryptionLevel"`
	// Specifies the Key Management Service Server ID for the Encryption Setting.
	KmsServerId NullableInt64 `json:"kmsServerId,omitempty"`
	// Enable Additional security by managing key manually
	EnableAdditionalSecurity NullableBool `json:"enableAdditionalSecurity,omitempty"`
}

// NewEncryptionSettings instantiates a new EncryptionSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEncryptionSettings(encryptionLevel NullableString) *EncryptionSettings {
	this := EncryptionSettings{}
	this.EncryptionLevel = encryptionLevel
	return &this
}

// NewEncryptionSettingsWithDefaults instantiates a new EncryptionSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEncryptionSettingsWithDefaults() *EncryptionSettings {
	this := EncryptionSettings{}
	return &this
}

// GetEncryptionLevel returns the EncryptionLevel field value
// If the value is explicit nil, the zero value for string will be returned
func (o *EncryptionSettings) GetEncryptionLevel() string {
	if o == nil || o.EncryptionLevel.Get() == nil {
		var ret string
		return ret
	}

	return *o.EncryptionLevel.Get()
}

// GetEncryptionLevelOk returns a tuple with the EncryptionLevel field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionSettings) GetEncryptionLevelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionLevel.Get(), o.EncryptionLevel.IsSet()
}

// SetEncryptionLevel sets field value
func (o *EncryptionSettings) SetEncryptionLevel(v string) {
	o.EncryptionLevel.Set(&v)
}

// GetKmsServerId returns the KmsServerId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionSettings) GetKmsServerId() int64 {
	if o == nil || o.KmsServerId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.KmsServerId.Get()
}

// GetKmsServerIdOk returns a tuple with the KmsServerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionSettings) GetKmsServerIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KmsServerId.Get(), o.KmsServerId.IsSet()
}

// HasKmsServerId returns a boolean if a field has been set.
func (o *EncryptionSettings) HasKmsServerId() bool {
	if o != nil && o.KmsServerId.IsSet() {
		return true
	}

	return false
}

// SetKmsServerId gets a reference to the given NullableInt64 and assigns it to the KmsServerId field.
func (o *EncryptionSettings) SetKmsServerId(v int64) {
	o.KmsServerId.Set(&v)
}
// SetKmsServerIdNil sets the value for KmsServerId to be an explicit nil
func (o *EncryptionSettings) SetKmsServerIdNil() {
	o.KmsServerId.Set(nil)
}

// UnsetKmsServerId ensures that no value is present for KmsServerId, not even an explicit nil
func (o *EncryptionSettings) UnsetKmsServerId() {
	o.KmsServerId.Unset()
}

// GetEnableAdditionalSecurity returns the EnableAdditionalSecurity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EncryptionSettings) GetEnableAdditionalSecurity() bool {
	if o == nil || o.EnableAdditionalSecurity.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableAdditionalSecurity.Get()
}

// GetEnableAdditionalSecurityOk returns a tuple with the EnableAdditionalSecurity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EncryptionSettings) GetEnableAdditionalSecurityOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableAdditionalSecurity.Get(), o.EnableAdditionalSecurity.IsSet()
}

// HasEnableAdditionalSecurity returns a boolean if a field has been set.
func (o *EncryptionSettings) HasEnableAdditionalSecurity() bool {
	if o != nil && o.EnableAdditionalSecurity.IsSet() {
		return true
	}

	return false
}

// SetEnableAdditionalSecurity gets a reference to the given NullableBool and assigns it to the EnableAdditionalSecurity field.
func (o *EncryptionSettings) SetEnableAdditionalSecurity(v bool) {
	o.EnableAdditionalSecurity.Set(&v)
}
// SetEnableAdditionalSecurityNil sets the value for EnableAdditionalSecurity to be an explicit nil
func (o *EncryptionSettings) SetEnableAdditionalSecurityNil() {
	o.EnableAdditionalSecurity.Set(nil)
}

// UnsetEnableAdditionalSecurity ensures that no value is present for EnableAdditionalSecurity, not even an explicit nil
func (o *EncryptionSettings) UnsetEnableAdditionalSecurity() {
	o.EnableAdditionalSecurity.Unset()
}

func (o EncryptionSettings) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["encryptionLevel"] = o.EncryptionLevel.Get()
	}
	if o.KmsServerId.IsSet() {
		toSerialize["kmsServerId"] = o.KmsServerId.Get()
	}
	if o.EnableAdditionalSecurity.IsSet() {
		toSerialize["enableAdditionalSecurity"] = o.EnableAdditionalSecurity.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEncryptionSettings struct {
	value *EncryptionSettings
	isSet bool
}

func (v NullableEncryptionSettings) Get() *EncryptionSettings {
	return v.value
}

func (v *NullableEncryptionSettings) Set(val *EncryptionSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableEncryptionSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableEncryptionSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEncryptionSettings(val *EncryptionSettings) *NullableEncryptionSettings {
	return &NullableEncryptionSettings{value: val, isSet: true}
}

func (v NullableEncryptionSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEncryptionSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


