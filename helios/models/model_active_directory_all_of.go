/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ActiveDirectoryAllOf struct for ActiveDirectoryAllOf
type ActiveDirectoryAllOf struct {
	// Specifies the params of the user id mapping info of an Active Directory.
	IdMappingParams NullableIdMappingParams `json:"idMappingParams,omitempty"`
	// Specifies the domain name of the Active Directory.
	DomainName NullableString `json:"domainName,omitempty"`
	// Specifies a list of centrify zones.
	CentrifyZones []CentrifyZones `json:"centrifyZones,omitempty"`
	// A list of domain names with a list of it's domain controllers.
	DomainControllers []DomainControllers `json:"domainControllers,omitempty"`
	// Specifies a list of security principals.
	SecurityPrincipals []SecurityPrincipal `json:"securityPrincipals,omitempty"`
	// Specifies the list of tenants that have permissions for this Active Directory.
	Permissions []Tenant `json:"permissions,omitempty"`
	// Specifies level of transitive Active Directory trust domains to be used.
	TransitiveAdTrustLevelLimit NullableInt32 `json:"transitiveAdTrustLevelLimit,omitempty"`
}

// NewActiveDirectoryAllOf instantiates a new ActiveDirectoryAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryAllOf() *ActiveDirectoryAllOf {
	this := ActiveDirectoryAllOf{}
	return &this
}

// NewActiveDirectoryAllOfWithDefaults instantiates a new ActiveDirectoryAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryAllOfWithDefaults() *ActiveDirectoryAllOf {
	this := ActiveDirectoryAllOf{}
	return &this
}

// GetIdMappingParams returns the IdMappingParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryAllOf) GetIdMappingParams() IdMappingParams {
	if o == nil || o.IdMappingParams.Get() == nil {
		var ret IdMappingParams
		return ret
	}
	return *o.IdMappingParams.Get()
}

// GetIdMappingParamsOk returns a tuple with the IdMappingParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAllOf) GetIdMappingParamsOk() (*IdMappingParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IdMappingParams.Get(), o.IdMappingParams.IsSet()
}

// HasIdMappingParams returns a boolean if a field has been set.
func (o *ActiveDirectoryAllOf) HasIdMappingParams() bool {
	if o != nil && o.IdMappingParams.IsSet() {
		return true
	}

	return false
}

// SetIdMappingParams gets a reference to the given NullableIdMappingParams and assigns it to the IdMappingParams field.
func (o *ActiveDirectoryAllOf) SetIdMappingParams(v IdMappingParams) {
	o.IdMappingParams.Set(&v)
}
// SetIdMappingParamsNil sets the value for IdMappingParams to be an explicit nil
func (o *ActiveDirectoryAllOf) SetIdMappingParamsNil() {
	o.IdMappingParams.Set(nil)
}

// UnsetIdMappingParams ensures that no value is present for IdMappingParams, not even an explicit nil
func (o *ActiveDirectoryAllOf) UnsetIdMappingParams() {
	o.IdMappingParams.Unset()
}

// GetDomainName returns the DomainName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryAllOf) GetDomainName() string {
	if o == nil || o.DomainName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DomainName.Get()
}

// GetDomainNameOk returns a tuple with the DomainName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAllOf) GetDomainNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DomainName.Get(), o.DomainName.IsSet()
}

// HasDomainName returns a boolean if a field has been set.
func (o *ActiveDirectoryAllOf) HasDomainName() bool {
	if o != nil && o.DomainName.IsSet() {
		return true
	}

	return false
}

// SetDomainName gets a reference to the given NullableString and assigns it to the DomainName field.
func (o *ActiveDirectoryAllOf) SetDomainName(v string) {
	o.DomainName.Set(&v)
}
// SetDomainNameNil sets the value for DomainName to be an explicit nil
func (o *ActiveDirectoryAllOf) SetDomainNameNil() {
	o.DomainName.Set(nil)
}

// UnsetDomainName ensures that no value is present for DomainName, not even an explicit nil
func (o *ActiveDirectoryAllOf) UnsetDomainName() {
	o.DomainName.Unset()
}

// GetCentrifyZones returns the CentrifyZones field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryAllOf) GetCentrifyZones() []CentrifyZones {
	if o == nil  {
		var ret []CentrifyZones
		return ret
	}
	return o.CentrifyZones
}

// GetCentrifyZonesOk returns a tuple with the CentrifyZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAllOf) GetCentrifyZonesOk() (*[]CentrifyZones, bool) {
	if o == nil || o.CentrifyZones == nil {
		return nil, false
	}
	return &o.CentrifyZones, true
}

// HasCentrifyZones returns a boolean if a field has been set.
func (o *ActiveDirectoryAllOf) HasCentrifyZones() bool {
	if o != nil && o.CentrifyZones != nil {
		return true
	}

	return false
}

// SetCentrifyZones gets a reference to the given []CentrifyZones and assigns it to the CentrifyZones field.
func (o *ActiveDirectoryAllOf) SetCentrifyZones(v []CentrifyZones) {
	o.CentrifyZones = v
}

// GetDomainControllers returns the DomainControllers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryAllOf) GetDomainControllers() []DomainControllers {
	if o == nil  {
		var ret []DomainControllers
		return ret
	}
	return o.DomainControllers
}

// GetDomainControllersOk returns a tuple with the DomainControllers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAllOf) GetDomainControllersOk() (*[]DomainControllers, bool) {
	if o == nil || o.DomainControllers == nil {
		return nil, false
	}
	return &o.DomainControllers, true
}

// HasDomainControllers returns a boolean if a field has been set.
func (o *ActiveDirectoryAllOf) HasDomainControllers() bool {
	if o != nil && o.DomainControllers != nil {
		return true
	}

	return false
}

// SetDomainControllers gets a reference to the given []DomainControllers and assigns it to the DomainControllers field.
func (o *ActiveDirectoryAllOf) SetDomainControllers(v []DomainControllers) {
	o.DomainControllers = v
}

// GetSecurityPrincipals returns the SecurityPrincipals field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryAllOf) GetSecurityPrincipals() []SecurityPrincipal {
	if o == nil  {
		var ret []SecurityPrincipal
		return ret
	}
	return o.SecurityPrincipals
}

// GetSecurityPrincipalsOk returns a tuple with the SecurityPrincipals field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAllOf) GetSecurityPrincipalsOk() (*[]SecurityPrincipal, bool) {
	if o == nil || o.SecurityPrincipals == nil {
		return nil, false
	}
	return &o.SecurityPrincipals, true
}

// HasSecurityPrincipals returns a boolean if a field has been set.
func (o *ActiveDirectoryAllOf) HasSecurityPrincipals() bool {
	if o != nil && o.SecurityPrincipals != nil {
		return true
	}

	return false
}

// SetSecurityPrincipals gets a reference to the given []SecurityPrincipal and assigns it to the SecurityPrincipals field.
func (o *ActiveDirectoryAllOf) SetSecurityPrincipals(v []SecurityPrincipal) {
	o.SecurityPrincipals = v
}

// GetPermissions returns the Permissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryAllOf) GetPermissions() []Tenant {
	if o == nil  {
		var ret []Tenant
		return ret
	}
	return o.Permissions
}

// GetPermissionsOk returns a tuple with the Permissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAllOf) GetPermissionsOk() (*[]Tenant, bool) {
	if o == nil || o.Permissions == nil {
		return nil, false
	}
	return &o.Permissions, true
}

// HasPermissions returns a boolean if a field has been set.
func (o *ActiveDirectoryAllOf) HasPermissions() bool {
	if o != nil && o.Permissions != nil {
		return true
	}

	return false
}

// SetPermissions gets a reference to the given []Tenant and assigns it to the Permissions field.
func (o *ActiveDirectoryAllOf) SetPermissions(v []Tenant) {
	o.Permissions = v
}

// GetTransitiveAdTrustLevelLimit returns the TransitiveAdTrustLevelLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryAllOf) GetTransitiveAdTrustLevelLimit() int32 {
	if o == nil || o.TransitiveAdTrustLevelLimit.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TransitiveAdTrustLevelLimit.Get()
}

// GetTransitiveAdTrustLevelLimitOk returns a tuple with the TransitiveAdTrustLevelLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryAllOf) GetTransitiveAdTrustLevelLimitOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TransitiveAdTrustLevelLimit.Get(), o.TransitiveAdTrustLevelLimit.IsSet()
}

// HasTransitiveAdTrustLevelLimit returns a boolean if a field has been set.
func (o *ActiveDirectoryAllOf) HasTransitiveAdTrustLevelLimit() bool {
	if o != nil && o.TransitiveAdTrustLevelLimit.IsSet() {
		return true
	}

	return false
}

// SetTransitiveAdTrustLevelLimit gets a reference to the given NullableInt32 and assigns it to the TransitiveAdTrustLevelLimit field.
func (o *ActiveDirectoryAllOf) SetTransitiveAdTrustLevelLimit(v int32) {
	o.TransitiveAdTrustLevelLimit.Set(&v)
}
// SetTransitiveAdTrustLevelLimitNil sets the value for TransitiveAdTrustLevelLimit to be an explicit nil
func (o *ActiveDirectoryAllOf) SetTransitiveAdTrustLevelLimitNil() {
	o.TransitiveAdTrustLevelLimit.Set(nil)
}

// UnsetTransitiveAdTrustLevelLimit ensures that no value is present for TransitiveAdTrustLevelLimit, not even an explicit nil
func (o *ActiveDirectoryAllOf) UnsetTransitiveAdTrustLevelLimit() {
	o.TransitiveAdTrustLevelLimit.Unset()
}

func (o ActiveDirectoryAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IdMappingParams.IsSet() {
		toSerialize["idMappingParams"] = o.IdMappingParams.Get()
	}
	if o.DomainName.IsSet() {
		toSerialize["domainName"] = o.DomainName.Get()
	}
	if o.CentrifyZones != nil {
		toSerialize["centrifyZones"] = o.CentrifyZones
	}
	if o.DomainControllers != nil {
		toSerialize["domainControllers"] = o.DomainControllers
	}
	if o.SecurityPrincipals != nil {
		toSerialize["securityPrincipals"] = o.SecurityPrincipals
	}
	if o.Permissions != nil {
		toSerialize["permissions"] = o.Permissions
	}
	if o.TransitiveAdTrustLevelLimit.IsSet() {
		toSerialize["transitiveAdTrustLevelLimit"] = o.TransitiveAdTrustLevelLimit.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableActiveDirectoryAllOf struct {
	value *ActiveDirectoryAllOf
	isSet bool
}

func (v NullableActiveDirectoryAllOf) Get() *ActiveDirectoryAllOf {
	return v.value
}

func (v *NullableActiveDirectoryAllOf) Set(val *ActiveDirectoryAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryAllOf(val *ActiveDirectoryAllOf) *NullableActiveDirectoryAllOf {
	return &NullableActiveDirectoryAllOf{value: val, isSet: true}
}

func (v NullableActiveDirectoryAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


