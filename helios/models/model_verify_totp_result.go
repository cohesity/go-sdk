/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// VerifyTotpResult Result of verifying totp code for support user.
type VerifyTotpResult struct {
	// Specifies whether or not verification of totp code is success.
	Success *bool `json:"success,omitempty"`
}

// NewVerifyTotpResult instantiates a new VerifyTotpResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVerifyTotpResult() *VerifyTotpResult {
	this := VerifyTotpResult{}
	return &this
}

// NewVerifyTotpResultWithDefaults instantiates a new VerifyTotpResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVerifyTotpResultWithDefaults() *VerifyTotpResult {
	this := VerifyTotpResult{}
	return &this
}

// GetSuccess returns the Success field value if set, zero value otherwise.
func (o *VerifyTotpResult) GetSuccess() bool {
	if o == nil || o.Success == nil {
		var ret bool
		return ret
	}
	return *o.Success
}

// GetSuccessOk returns a tuple with the Success field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VerifyTotpResult) GetSuccessOk() (*bool, bool) {
	if o == nil || o.Success == nil {
		return nil, false
	}
	return o.Success, true
}

// HasSuccess returns a boolean if a field has been set.
func (o *VerifyTotpResult) HasSuccess() bool {
	if o != nil && o.Success != nil {
		return true
	}

	return false
}

// SetSuccess gets a reference to the given bool and assigns it to the Success field.
func (o *VerifyTotpResult) SetSuccess(v bool) {
	o.Success = &v
}

func (o VerifyTotpResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Success != nil {
		toSerialize["success"] = o.Success
	}
	return json.Marshal(toSerialize)
}

type NullableVerifyTotpResult struct {
	value *VerifyTotpResult
	isSet bool
}

func (v NullableVerifyTotpResult) Get() *VerifyTotpResult {
	return v.value
}

func (v *NullableVerifyTotpResult) Set(val *VerifyTotpResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyTotpResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyTotpResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyTotpResult(val *VerifyTotpResult) *NullableVerifyTotpResult {
	return &NullableVerifyTotpResult{value: val, isSet: true}
}

func (v NullableVerifyTotpResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyTotpResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


