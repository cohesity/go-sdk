/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SourceRegistrationCredentials Specifies the credentials of a source registration.
type SourceRegistrationCredentials struct {
	// Specifies the username used to register a source.
	Username NullableString `json:"username,omitempty"`
	// Specifies the password used to register a source.
	Password NullableString `json:"password,omitempty"`
	SmbCredentials *SmbCredentials `json:"smbCredentials,omitempty"`
	// Specifies the list of child vcenter credentials. This will only be populated in the case of VCD.
	Vcenters *[]VcenterCredentialInfo `json:"vcenters,omitempty"`
	// Specifies a list of office365 azure application credentials needed to authenticate & authorize users.
	Office365AppCredentialsList *[]Office365AppCredentials `json:"office365AppCredentialsList,omitempty"`
}

// NewSourceRegistrationCredentials instantiates a new SourceRegistrationCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceRegistrationCredentials() *SourceRegistrationCredentials {
	this := SourceRegistrationCredentials{}
	return &this
}

// NewSourceRegistrationCredentialsWithDefaults instantiates a new SourceRegistrationCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceRegistrationCredentialsWithDefaults() *SourceRegistrationCredentials {
	this := SourceRegistrationCredentials{}
	return &this
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceRegistrationCredentials) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationCredentials) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *SourceRegistrationCredentials) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *SourceRegistrationCredentials) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *SourceRegistrationCredentials) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *SourceRegistrationCredentials) UnsetUsername() {
	o.Username.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceRegistrationCredentials) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceRegistrationCredentials) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *SourceRegistrationCredentials) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *SourceRegistrationCredentials) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *SourceRegistrationCredentials) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *SourceRegistrationCredentials) UnsetPassword() {
	o.Password.Unset()
}

// GetSmbCredentials returns the SmbCredentials field value if set, zero value otherwise.
func (o *SourceRegistrationCredentials) GetSmbCredentials() SmbCredentials {
	if o == nil || o.SmbCredentials == nil {
		var ret SmbCredentials
		return ret
	}
	return *o.SmbCredentials
}

// GetSmbCredentialsOk returns a tuple with the SmbCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationCredentials) GetSmbCredentialsOk() (*SmbCredentials, bool) {
	if o == nil || o.SmbCredentials == nil {
		return nil, false
	}
	return o.SmbCredentials, true
}

// HasSmbCredentials returns a boolean if a field has been set.
func (o *SourceRegistrationCredentials) HasSmbCredentials() bool {
	if o != nil && o.SmbCredentials != nil {
		return true
	}

	return false
}

// SetSmbCredentials gets a reference to the given SmbCredentials and assigns it to the SmbCredentials field.
func (o *SourceRegistrationCredentials) SetSmbCredentials(v SmbCredentials) {
	o.SmbCredentials = &v
}

// GetVcenters returns the Vcenters field value if set, zero value otherwise.
func (o *SourceRegistrationCredentials) GetVcenters() []VcenterCredentialInfo {
	if o == nil || o.Vcenters == nil {
		var ret []VcenterCredentialInfo
		return ret
	}
	return *o.Vcenters
}

// GetVcentersOk returns a tuple with the Vcenters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationCredentials) GetVcentersOk() (*[]VcenterCredentialInfo, bool) {
	if o == nil || o.Vcenters == nil {
		return nil, false
	}
	return o.Vcenters, true
}

// HasVcenters returns a boolean if a field has been set.
func (o *SourceRegistrationCredentials) HasVcenters() bool {
	if o != nil && o.Vcenters != nil {
		return true
	}

	return false
}

// SetVcenters gets a reference to the given []VcenterCredentialInfo and assigns it to the Vcenters field.
func (o *SourceRegistrationCredentials) SetVcenters(v []VcenterCredentialInfo) {
	o.Vcenters = &v
}

// GetOffice365AppCredentialsList returns the Office365AppCredentialsList field value if set, zero value otherwise.
func (o *SourceRegistrationCredentials) GetOffice365AppCredentialsList() []Office365AppCredentials {
	if o == nil || o.Office365AppCredentialsList == nil {
		var ret []Office365AppCredentials
		return ret
	}
	return *o.Office365AppCredentialsList
}

// GetOffice365AppCredentialsListOk returns a tuple with the Office365AppCredentialsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SourceRegistrationCredentials) GetOffice365AppCredentialsListOk() (*[]Office365AppCredentials, bool) {
	if o == nil || o.Office365AppCredentialsList == nil {
		return nil, false
	}
	return o.Office365AppCredentialsList, true
}

// HasOffice365AppCredentialsList returns a boolean if a field has been set.
func (o *SourceRegistrationCredentials) HasOffice365AppCredentialsList() bool {
	if o != nil && o.Office365AppCredentialsList != nil {
		return true
	}

	return false
}

// SetOffice365AppCredentialsList gets a reference to the given []Office365AppCredentials and assigns it to the Office365AppCredentialsList field.
func (o *SourceRegistrationCredentials) SetOffice365AppCredentialsList(v []Office365AppCredentials) {
	o.Office365AppCredentialsList = &v
}

func (o SourceRegistrationCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.SmbCredentials != nil {
		toSerialize["smbCredentials"] = o.SmbCredentials
	}
	if o.Vcenters != nil {
		toSerialize["vcenters"] = o.Vcenters
	}
	if o.Office365AppCredentialsList != nil {
		toSerialize["office365AppCredentialsList"] = o.Office365AppCredentialsList
	}
	return json.Marshal(toSerialize)
}

type NullableSourceRegistrationCredentials struct {
	value *SourceRegistrationCredentials
	isSet bool
}

func (v NullableSourceRegistrationCredentials) Get() *SourceRegistrationCredentials {
	return v.value
}

func (v *NullableSourceRegistrationCredentials) Set(val *SourceRegistrationCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceRegistrationCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceRegistrationCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceRegistrationCredentials(val *SourceRegistrationCredentials) *NullableSourceRegistrationCredentials {
	return &NullableSourceRegistrationCredentials{value: val, isSet: true}
}

func (v NullableSourceRegistrationCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceRegistrationCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


