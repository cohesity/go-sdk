/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CreateCsrResponseBody Specifies the response to create a CSR.
type CreateCsrResponseBody struct {
	// Specifies the organization attribute, which is part of the distinguished name definition. It is used to specify the name of the company.
	Organization NullableString `json:"organization"`
	// Specifies the organization unit attribute, which is part of the distinguished name definition. It is used to identify the specific department or business unit in the company that is owning the Cluster.
	OrganizationUnit NullableString `json:"organizationUnit"`
	// Specifies the country attribute, which is part of the distinguished name definition. It is used to identify the country where the state is located. It is specified as two letter code defined by the ISO standard.
	CountryCode NullableString `json:"countryCode"`
	// Specifies the state attribute, which is part of the distinguished name definition. It is used to identify the state where the city is located.
	State NullableString `json:"state"`
	// Specifies the locality attribute, which is part of the distinguished name definition. It is used to identify the city where the company is located or the Cluster is installed.
	City NullableString `json:"city"`
	// Specifies the algorithm to be used to generate the key pair. RSA is the default value.
	KeyType NullableString `json:"keyType,omitempty"`
	// Specifies the size of the keys in bits. The default is 2048 bits for the RSA keys and 256 bits for ECDSA.
	KeySizeBits NullableInt64 `json:"keySizeBits,omitempty"`
	// Specifies the common name attribute, which is part of the distinguished name definition. Common name is used to specify a context for the certificate, for example, the name of the Cluster to which the certificate is to be assigned. Default value is the name of the Cluster.
	CommonName NullableString `json:"commonName,omitempty"`
	// Specifies an alternative subject name component to be included in the certificate. It is used to identify the ways the Cluster will be accessed. It is given as a comma separated list of FQDNs. The default value is the Cluster's VIP hostname.
	DnsNames []string `json:"dnsNames,omitempty"`
	// Specifies an alternative subject name component to be included in the certificate. It is used to identify the ways the Cluster will be accessed. It is given as a comma separated list of IP addresses. The default value is the Cluster's VIP addresses.
	HostIps []string `json:"hostIps,omitempty"`
	// Specifies an alternative subject name component to be included in the certificate. Format is a standard e-mail address, for example joe@company.com.
	EmailAddress NullableString `json:"emailAddress,omitempty"`
	// Specifies the Cohesity service name for which the CSR is generated. Default service name is iris.
	ServiceName NullableString `json:"serviceName,omitempty"`
	// Specifies the id of the CSR.
	Id NullableString `json:"id,omitempty"`
	// Specifies the public key generated for this CSR.
	PublicKey NullableString `json:"publicKey,omitempty"`
	// Specifies the CSR generated for the service.
	Csr NullableString `json:"csr,omitempty"`
}

// NewCreateCsrResponseBody instantiates a new CreateCsrResponseBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCsrResponseBody(organization NullableString, organizationUnit NullableString, countryCode NullableString, state NullableString, city NullableString) *CreateCsrResponseBody {
	this := CreateCsrResponseBody{}
	this.Organization = organization
	this.OrganizationUnit = organizationUnit
	this.CountryCode = countryCode
	this.State = state
	this.City = city
	var keyType KEY_TYPE = "rsa"
	this.KeyType = *NewNullableString(&keyType)
	var serviceName SERVICE_NAME = "iris"
	this.ServiceName = *NewNullableString(&serviceName)
	return &this
}

// NewCreateCsrResponseBodyWithDefaults instantiates a new CreateCsrResponseBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCsrResponseBodyWithDefaults() *CreateCsrResponseBody {
	this := CreateCsrResponseBody{}
	var keyType KEY_TYPE = "rsa"
	this.KeyType = *NewNullableString(&keyType) // model_simple true
	var serviceName SERVICE_NAME = "iris"
	this.ServiceName = *NewNullableString(&serviceName) // model_simple true
	return &this
}

// GetOrganization returns the Organization field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateCsrResponseBody) GetOrganization() string {
	if o == nil || o.Organization.Get() == nil {
		var ret string
		return ret
	}

	return *o.Organization.Get()
}

// GetOrganizationOk returns a tuple with the Organization field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetOrganizationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Organization.Get(), o.Organization.IsSet()
}

// SetOrganization sets field value
func (o *CreateCsrResponseBody) SetOrganization(v string) {
	o.Organization.Set(&v)
}

// GetOrganizationUnit returns the OrganizationUnit field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateCsrResponseBody) GetOrganizationUnit() string {
	if o == nil || o.OrganizationUnit.Get() == nil {
		var ret string
		return ret
	}

	return *o.OrganizationUnit.Get()
}

// GetOrganizationUnitOk returns a tuple with the OrganizationUnit field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetOrganizationUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OrganizationUnit.Get(), o.OrganizationUnit.IsSet()
}

// SetOrganizationUnit sets field value
func (o *CreateCsrResponseBody) SetOrganizationUnit(v string) {
	o.OrganizationUnit.Set(&v)
}

// GetCountryCode returns the CountryCode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateCsrResponseBody) GetCountryCode() string {
	if o == nil || o.CountryCode.Get() == nil {
		var ret string
		return ret
	}

	return *o.CountryCode.Get()
}

// GetCountryCodeOk returns a tuple with the CountryCode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetCountryCodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CountryCode.Get(), o.CountryCode.IsSet()
}

// SetCountryCode sets field value
func (o *CreateCsrResponseBody) SetCountryCode(v string) {
	o.CountryCode.Set(&v)
}

// GetState returns the State field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateCsrResponseBody) GetState() string {
	if o == nil || o.State.Get() == nil {
		var ret string
		return ret
	}

	return *o.State.Get()
}

// GetStateOk returns a tuple with the State field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetStateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.State.Get(), o.State.IsSet()
}

// SetState sets field value
func (o *CreateCsrResponseBody) SetState(v string) {
	o.State.Set(&v)
}

// GetCity returns the City field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CreateCsrResponseBody) GetCity() string {
	if o == nil || o.City.Get() == nil {
		var ret string
		return ret
	}

	return *o.City.Get()
}

// GetCityOk returns a tuple with the City field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetCityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.City.Get(), o.City.IsSet()
}

// SetCity sets field value
func (o *CreateCsrResponseBody) SetCity(v string) {
	o.City.Set(&v)
}

// GetKeyType returns the KeyType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCsrResponseBody) GetKeyType() string {
	if o == nil || o.KeyType.Get() == nil {
		var ret string
		return ret
	}
	return *o.KeyType.Get()
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetKeyTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeyType.Get(), o.KeyType.IsSet()
}

// HasKeyType returns a boolean if a field has been set.
func (o *CreateCsrResponseBody) HasKeyType() bool {
	if o != nil && o.KeyType.IsSet() {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given NullableString and assigns it to the KeyType field.
func (o *CreateCsrResponseBody) SetKeyType(v string) {
	o.KeyType.Set(&v)
}
// SetKeyTypeNil sets the value for KeyType to be an explicit nil
func (o *CreateCsrResponseBody) SetKeyTypeNil() {
	o.KeyType.Set(nil)
}

// UnsetKeyType ensures that no value is present for KeyType, not even an explicit nil
func (o *CreateCsrResponseBody) UnsetKeyType() {
	o.KeyType.Unset()
}

// GetKeySizeBits returns the KeySizeBits field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCsrResponseBody) GetKeySizeBits() int64 {
	if o == nil || o.KeySizeBits.Get() == nil {
		var ret int64
		return ret
	}
	return *o.KeySizeBits.Get()
}

// GetKeySizeBitsOk returns a tuple with the KeySizeBits field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetKeySizeBitsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeySizeBits.Get(), o.KeySizeBits.IsSet()
}

// HasKeySizeBits returns a boolean if a field has been set.
func (o *CreateCsrResponseBody) HasKeySizeBits() bool {
	if o != nil && o.KeySizeBits.IsSet() {
		return true
	}

	return false
}

// SetKeySizeBits gets a reference to the given NullableInt64 and assigns it to the KeySizeBits field.
func (o *CreateCsrResponseBody) SetKeySizeBits(v int64) {
	o.KeySizeBits.Set(&v)
}
// SetKeySizeBitsNil sets the value for KeySizeBits to be an explicit nil
func (o *CreateCsrResponseBody) SetKeySizeBitsNil() {
	o.KeySizeBits.Set(nil)
}

// UnsetKeySizeBits ensures that no value is present for KeySizeBits, not even an explicit nil
func (o *CreateCsrResponseBody) UnsetKeySizeBits() {
	o.KeySizeBits.Unset()
}

// GetCommonName returns the CommonName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCsrResponseBody) GetCommonName() string {
	if o == nil || o.CommonName.Get() == nil {
		var ret string
		return ret
	}
	return *o.CommonName.Get()
}

// GetCommonNameOk returns a tuple with the CommonName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetCommonNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CommonName.Get(), o.CommonName.IsSet()
}

// HasCommonName returns a boolean if a field has been set.
func (o *CreateCsrResponseBody) HasCommonName() bool {
	if o != nil && o.CommonName.IsSet() {
		return true
	}

	return false
}

// SetCommonName gets a reference to the given NullableString and assigns it to the CommonName field.
func (o *CreateCsrResponseBody) SetCommonName(v string) {
	o.CommonName.Set(&v)
}
// SetCommonNameNil sets the value for CommonName to be an explicit nil
func (o *CreateCsrResponseBody) SetCommonNameNil() {
	o.CommonName.Set(nil)
}

// UnsetCommonName ensures that no value is present for CommonName, not even an explicit nil
func (o *CreateCsrResponseBody) UnsetCommonName() {
	o.CommonName.Unset()
}

// GetDnsNames returns the DnsNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCsrResponseBody) GetDnsNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DnsNames
}

// GetDnsNamesOk returns a tuple with the DnsNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetDnsNamesOk() (*[]string, bool) {
	if o == nil || o.DnsNames == nil {
		return nil, false
	}
	return &o.DnsNames, true
}

// HasDnsNames returns a boolean if a field has been set.
func (o *CreateCsrResponseBody) HasDnsNames() bool {
	if o != nil && o.DnsNames != nil {
		return true
	}

	return false
}

// SetDnsNames gets a reference to the given []string and assigns it to the DnsNames field.
func (o *CreateCsrResponseBody) SetDnsNames(v []string) {
	o.DnsNames = v
}

// GetHostIps returns the HostIps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCsrResponseBody) GetHostIps() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.HostIps
}

// GetHostIpsOk returns a tuple with the HostIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetHostIpsOk() (*[]string, bool) {
	if o == nil || o.HostIps == nil {
		return nil, false
	}
	return &o.HostIps, true
}

// HasHostIps returns a boolean if a field has been set.
func (o *CreateCsrResponseBody) HasHostIps() bool {
	if o != nil && o.HostIps != nil {
		return true
	}

	return false
}

// SetHostIps gets a reference to the given []string and assigns it to the HostIps field.
func (o *CreateCsrResponseBody) SetHostIps(v []string) {
	o.HostIps = v
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCsrResponseBody) GetEmailAddress() string {
	if o == nil || o.EmailAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress.Get()
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmailAddress.Get(), o.EmailAddress.IsSet()
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *CreateCsrResponseBody) HasEmailAddress() bool {
	if o != nil && o.EmailAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given NullableString and assigns it to the EmailAddress field.
func (o *CreateCsrResponseBody) SetEmailAddress(v string) {
	o.EmailAddress.Set(&v)
}
// SetEmailAddressNil sets the value for EmailAddress to be an explicit nil
func (o *CreateCsrResponseBody) SetEmailAddressNil() {
	o.EmailAddress.Set(nil)
}

// UnsetEmailAddress ensures that no value is present for EmailAddress, not even an explicit nil
func (o *CreateCsrResponseBody) UnsetEmailAddress() {
	o.EmailAddress.Unset()
}

// GetServiceName returns the ServiceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCsrResponseBody) GetServiceName() string {
	if o == nil || o.ServiceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ServiceName.Get()
}

// GetServiceNameOk returns a tuple with the ServiceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetServiceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ServiceName.Get(), o.ServiceName.IsSet()
}

// HasServiceName returns a boolean if a field has been set.
func (o *CreateCsrResponseBody) HasServiceName() bool {
	if o != nil && o.ServiceName.IsSet() {
		return true
	}

	return false
}

// SetServiceName gets a reference to the given NullableString and assigns it to the ServiceName field.
func (o *CreateCsrResponseBody) SetServiceName(v string) {
	o.ServiceName.Set(&v)
}
// SetServiceNameNil sets the value for ServiceName to be an explicit nil
func (o *CreateCsrResponseBody) SetServiceNameNil() {
	o.ServiceName.Set(nil)
}

// UnsetServiceName ensures that no value is present for ServiceName, not even an explicit nil
func (o *CreateCsrResponseBody) UnsetServiceName() {
	o.ServiceName.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCsrResponseBody) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *CreateCsrResponseBody) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *CreateCsrResponseBody) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *CreateCsrResponseBody) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *CreateCsrResponseBody) UnsetId() {
	o.Id.Unset()
}

// GetPublicKey returns the PublicKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCsrResponseBody) GetPublicKey() string {
	if o == nil || o.PublicKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.PublicKey.Get()
}

// GetPublicKeyOk returns a tuple with the PublicKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetPublicKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PublicKey.Get(), o.PublicKey.IsSet()
}

// HasPublicKey returns a boolean if a field has been set.
func (o *CreateCsrResponseBody) HasPublicKey() bool {
	if o != nil && o.PublicKey.IsSet() {
		return true
	}

	return false
}

// SetPublicKey gets a reference to the given NullableString and assigns it to the PublicKey field.
func (o *CreateCsrResponseBody) SetPublicKey(v string) {
	o.PublicKey.Set(&v)
}
// SetPublicKeyNil sets the value for PublicKey to be an explicit nil
func (o *CreateCsrResponseBody) SetPublicKeyNil() {
	o.PublicKey.Set(nil)
}

// UnsetPublicKey ensures that no value is present for PublicKey, not even an explicit nil
func (o *CreateCsrResponseBody) UnsetPublicKey() {
	o.PublicKey.Unset()
}

// GetCsr returns the Csr field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateCsrResponseBody) GetCsr() string {
	if o == nil || o.Csr.Get() == nil {
		var ret string
		return ret
	}
	return *o.Csr.Get()
}

// GetCsrOk returns a tuple with the Csr field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateCsrResponseBody) GetCsrOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Csr.Get(), o.Csr.IsSet()
}

// HasCsr returns a boolean if a field has been set.
func (o *CreateCsrResponseBody) HasCsr() bool {
	if o != nil && o.Csr.IsSet() {
		return true
	}

	return false
}

// SetCsr gets a reference to the given NullableString and assigns it to the Csr field.
func (o *CreateCsrResponseBody) SetCsr(v string) {
	o.Csr.Set(&v)
}
// SetCsrNil sets the value for Csr to be an explicit nil
func (o *CreateCsrResponseBody) SetCsrNil() {
	o.Csr.Set(nil)
}

// UnsetCsr ensures that no value is present for Csr, not even an explicit nil
func (o *CreateCsrResponseBody) UnsetCsr() {
	o.Csr.Unset()
}

func (o CreateCsrResponseBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["organization"] = o.Organization.Get()
	}
	if true {
		toSerialize["organizationUnit"] = o.OrganizationUnit.Get()
	}
	if true {
		toSerialize["countryCode"] = o.CountryCode.Get()
	}
	if true {
		toSerialize["state"] = o.State.Get()
	}
	if true {
		toSerialize["city"] = o.City.Get()
	}
	if o.KeyType.IsSet() {
		toSerialize["keyType"] = o.KeyType.Get()
	}
	if o.KeySizeBits.IsSet() {
		toSerialize["keySizeBits"] = o.KeySizeBits.Get()
	}
	if o.CommonName.IsSet() {
		toSerialize["commonName"] = o.CommonName.Get()
	}
	if o.DnsNames != nil {
		toSerialize["dnsNames"] = o.DnsNames
	}
	if o.HostIps != nil {
		toSerialize["hostIps"] = o.HostIps
	}
	if o.EmailAddress.IsSet() {
		toSerialize["emailAddress"] = o.EmailAddress.Get()
	}
	if o.ServiceName.IsSet() {
		toSerialize["serviceName"] = o.ServiceName.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.PublicKey.IsSet() {
		toSerialize["publicKey"] = o.PublicKey.Get()
	}
	if o.Csr.IsSet() {
		toSerialize["csr"] = o.Csr.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCsrResponseBody struct {
	value *CreateCsrResponseBody
	isSet bool
}

func (v NullableCreateCsrResponseBody) Get() *CreateCsrResponseBody {
	return v.value
}

func (v *NullableCreateCsrResponseBody) Set(val *CreateCsrResponseBody) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCsrResponseBody) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCsrResponseBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCsrResponseBody(val *CreateCsrResponseBody) *NullableCreateCsrResponseBody {
	return &NullableCreateCsrResponseBody{value: val, isSet: true}
}

func (v NullableCreateCsrResponseBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCsrResponseBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


