/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// UpdateDataTieringState struct for UpdateDataTieringState
type UpdateDataTieringState struct {
	// Specifies a list of data tiering groups ids for which updation of state failed.
	FailedIds []string `json:"failedIds,omitempty"`
	// Specifies a list of data tiering groups ids for which updation of state was successful.
	SuccessfulIds []string `json:"successfulIds,omitempty"`
}

// NewUpdateDataTieringState instantiates a new UpdateDataTieringState object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateDataTieringState() *UpdateDataTieringState {
	this := UpdateDataTieringState{}
	return &this
}

// NewUpdateDataTieringStateWithDefaults instantiates a new UpdateDataTieringState object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateDataTieringStateWithDefaults() *UpdateDataTieringState {
	this := UpdateDataTieringState{}
	return &this
}

// GetFailedIds returns the FailedIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDataTieringState) GetFailedIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.FailedIds
}

// GetFailedIdsOk returns a tuple with the FailedIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDataTieringState) GetFailedIdsOk() (*[]string, bool) {
	if o == nil || o.FailedIds == nil {
		return nil, false
	}
	return &o.FailedIds, true
}

// HasFailedIds returns a boolean if a field has been set.
func (o *UpdateDataTieringState) HasFailedIds() bool {
	if o != nil && o.FailedIds != nil {
		return true
	}

	return false
}

// SetFailedIds gets a reference to the given []string and assigns it to the FailedIds field.
func (o *UpdateDataTieringState) SetFailedIds(v []string) {
	o.FailedIds = v
}

// GetSuccessfulIds returns the SuccessfulIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateDataTieringState) GetSuccessfulIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SuccessfulIds
}

// GetSuccessfulIdsOk returns a tuple with the SuccessfulIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateDataTieringState) GetSuccessfulIdsOk() (*[]string, bool) {
	if o == nil || o.SuccessfulIds == nil {
		return nil, false
	}
	return &o.SuccessfulIds, true
}

// HasSuccessfulIds returns a boolean if a field has been set.
func (o *UpdateDataTieringState) HasSuccessfulIds() bool {
	if o != nil && o.SuccessfulIds != nil {
		return true
	}

	return false
}

// SetSuccessfulIds gets a reference to the given []string and assigns it to the SuccessfulIds field.
func (o *UpdateDataTieringState) SetSuccessfulIds(v []string) {
	o.SuccessfulIds = v
}

func (o UpdateDataTieringState) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailedIds != nil {
		toSerialize["failedIds"] = o.FailedIds
	}
	if o.SuccessfulIds != nil {
		toSerialize["successfulIds"] = o.SuccessfulIds
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateDataTieringState struct {
	value *UpdateDataTieringState
	isSet bool
}

func (v NullableUpdateDataTieringState) Get() *UpdateDataTieringState {
	return v.value
}

func (v *NullableUpdateDataTieringState) Set(val *UpdateDataTieringState) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateDataTieringState) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateDataTieringState) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateDataTieringState(val *UpdateDataTieringState) *NullableUpdateDataTieringState {
	return &NullableUpdateDataTieringState{value: val, isSet: true}
}

func (v NullableUpdateDataTieringState) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateDataTieringState) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


