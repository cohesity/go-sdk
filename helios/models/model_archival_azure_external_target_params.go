/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ArchivalAzureExternalTargetParams Specifies the common parameters which are specific to Azure related External Targets.
type ArchivalAzureExternalTargetParams struct {
	// Specifies the container name of the external target.
	ContainerName NullableString `json:"containerName"`
	// Specifies the storage account name of the external target.
	StorageAccountName NullableString `json:"storageAccountName"`
	// Specifies the storage access key of the external target.
	StorageAccessKey NullableString `json:"storageAccessKey"`
	// Specifies the Azure External Target storage class.
	StorageClass NullableString `json:"storageClass"`
	// Specifies the Source Side Deduplication setting for the Azure external target
	SourceSideDeduplication NullableBool `json:"sourceSideDeduplication,omitempty"`
	// Specifies if Incremental Archival setting is enabled or not.
	IsIncrementalArchivalEnabled NullableBool `json:"isIncrementalArchivalEnabled,omitempty"`
	// Specifies if Forever Incremental Archival setting is enabled or not.
	IsForeverIncrementalArchivalEnabled NullableBool `json:"isForeverIncrementalArchivalEnabled,omitempty"`
	CoolBlobParams *AzureCoolBlobParams `json:"coolBlobParams,omitempty"`
	HotBlobParams *AzureHotBlobParams `json:"hotBlobParams,omitempty"`
}

// NewArchivalAzureExternalTargetParams instantiates a new ArchivalAzureExternalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalAzureExternalTargetParams(containerName NullableString, storageAccountName NullableString, storageAccessKey NullableString, storageClass NullableString) *ArchivalAzureExternalTargetParams {
	this := ArchivalAzureExternalTargetParams{}
	this.ContainerName = containerName
	this.StorageAccountName = storageAccountName
	this.StorageAccessKey = storageAccessKey
	this.StorageClass = storageClass
	return &this
}

// NewArchivalAzureExternalTargetParamsWithDefaults instantiates a new ArchivalAzureExternalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalAzureExternalTargetParamsWithDefaults() *ArchivalAzureExternalTargetParams {
	this := ArchivalAzureExternalTargetParams{}
	return &this
}

// GetContainerName returns the ContainerName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalAzureExternalTargetParams) GetContainerName() string {
	if o == nil || o.ContainerName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ContainerName.Get()
}

// GetContainerNameOk returns a tuple with the ContainerName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAzureExternalTargetParams) GetContainerNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContainerName.Get(), o.ContainerName.IsSet()
}

// SetContainerName sets field value
func (o *ArchivalAzureExternalTargetParams) SetContainerName(v string) {
	o.ContainerName.Set(&v)
}

// GetStorageAccountName returns the StorageAccountName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalAzureExternalTargetParams) GetStorageAccountName() string {
	if o == nil || o.StorageAccountName.Get() == nil {
		var ret string
		return ret
	}

	return *o.StorageAccountName.Get()
}

// GetStorageAccountNameOk returns a tuple with the StorageAccountName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAzureExternalTargetParams) GetStorageAccountNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageAccountName.Get(), o.StorageAccountName.IsSet()
}

// SetStorageAccountName sets field value
func (o *ArchivalAzureExternalTargetParams) SetStorageAccountName(v string) {
	o.StorageAccountName.Set(&v)
}

// GetStorageAccessKey returns the StorageAccessKey field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalAzureExternalTargetParams) GetStorageAccessKey() string {
	if o == nil || o.StorageAccessKey.Get() == nil {
		var ret string
		return ret
	}

	return *o.StorageAccessKey.Get()
}

// GetStorageAccessKeyOk returns a tuple with the StorageAccessKey field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAzureExternalTargetParams) GetStorageAccessKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageAccessKey.Get(), o.StorageAccessKey.IsSet()
}

// SetStorageAccessKey sets field value
func (o *ArchivalAzureExternalTargetParams) SetStorageAccessKey(v string) {
	o.StorageAccessKey.Set(&v)
}

// GetStorageClass returns the StorageClass field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalAzureExternalTargetParams) GetStorageClass() string {
	if o == nil || o.StorageClass.Get() == nil {
		var ret string
		return ret
	}

	return *o.StorageClass.Get()
}

// GetStorageClassOk returns a tuple with the StorageClass field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAzureExternalTargetParams) GetStorageClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageClass.Get(), o.StorageClass.IsSet()
}

// SetStorageClass sets field value
func (o *ArchivalAzureExternalTargetParams) SetStorageClass(v string) {
	o.StorageClass.Set(&v)
}

// GetSourceSideDeduplication returns the SourceSideDeduplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalAzureExternalTargetParams) GetSourceSideDeduplication() bool {
	if o == nil || o.SourceSideDeduplication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SourceSideDeduplication.Get()
}

// GetSourceSideDeduplicationOk returns a tuple with the SourceSideDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAzureExternalTargetParams) GetSourceSideDeduplicationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceSideDeduplication.Get(), o.SourceSideDeduplication.IsSet()
}

// HasSourceSideDeduplication returns a boolean if a field has been set.
func (o *ArchivalAzureExternalTargetParams) HasSourceSideDeduplication() bool {
	if o != nil && o.SourceSideDeduplication.IsSet() {
		return true
	}

	return false
}

// SetSourceSideDeduplication gets a reference to the given NullableBool and assigns it to the SourceSideDeduplication field.
func (o *ArchivalAzureExternalTargetParams) SetSourceSideDeduplication(v bool) {
	o.SourceSideDeduplication.Set(&v)
}
// SetSourceSideDeduplicationNil sets the value for SourceSideDeduplication to be an explicit nil
func (o *ArchivalAzureExternalTargetParams) SetSourceSideDeduplicationNil() {
	o.SourceSideDeduplication.Set(nil)
}

// UnsetSourceSideDeduplication ensures that no value is present for SourceSideDeduplication, not even an explicit nil
func (o *ArchivalAzureExternalTargetParams) UnsetSourceSideDeduplication() {
	o.SourceSideDeduplication.Unset()
}

// GetIsIncrementalArchivalEnabled returns the IsIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalAzureExternalTargetParams) GetIsIncrementalArchivalEnabled() bool {
	if o == nil || o.IsIncrementalArchivalEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsIncrementalArchivalEnabled.Get()
}

// GetIsIncrementalArchivalEnabledOk returns a tuple with the IsIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAzureExternalTargetParams) GetIsIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsIncrementalArchivalEnabled.Get(), o.IsIncrementalArchivalEnabled.IsSet()
}

// HasIsIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalAzureExternalTargetParams) HasIsIncrementalArchivalEnabled() bool {
	if o != nil && o.IsIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsIncrementalArchivalEnabled field.
func (o *ArchivalAzureExternalTargetParams) SetIsIncrementalArchivalEnabled(v bool) {
	o.IsIncrementalArchivalEnabled.Set(&v)
}
// SetIsIncrementalArchivalEnabledNil sets the value for IsIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalAzureExternalTargetParams) SetIsIncrementalArchivalEnabledNil() {
	o.IsIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsIncrementalArchivalEnabled ensures that no value is present for IsIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalAzureExternalTargetParams) UnsetIsIncrementalArchivalEnabled() {
	o.IsIncrementalArchivalEnabled.Unset()
}

// GetIsForeverIncrementalArchivalEnabled returns the IsForeverIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalAzureExternalTargetParams) GetIsForeverIncrementalArchivalEnabled() bool {
	if o == nil || o.IsForeverIncrementalArchivalEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsForeverIncrementalArchivalEnabled.Get()
}

// GetIsForeverIncrementalArchivalEnabledOk returns a tuple with the IsForeverIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAzureExternalTargetParams) GetIsForeverIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsForeverIncrementalArchivalEnabled.Get(), o.IsForeverIncrementalArchivalEnabled.IsSet()
}

// HasIsForeverIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalAzureExternalTargetParams) HasIsForeverIncrementalArchivalEnabled() bool {
	if o != nil && o.IsForeverIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsForeverIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsForeverIncrementalArchivalEnabled field.
func (o *ArchivalAzureExternalTargetParams) SetIsForeverIncrementalArchivalEnabled(v bool) {
	o.IsForeverIncrementalArchivalEnabled.Set(&v)
}
// SetIsForeverIncrementalArchivalEnabledNil sets the value for IsForeverIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalAzureExternalTargetParams) SetIsForeverIncrementalArchivalEnabledNil() {
	o.IsForeverIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsForeverIncrementalArchivalEnabled ensures that no value is present for IsForeverIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalAzureExternalTargetParams) UnsetIsForeverIncrementalArchivalEnabled() {
	o.IsForeverIncrementalArchivalEnabled.Unset()
}

// GetCoolBlobParams returns the CoolBlobParams field value if set, zero value otherwise.
func (o *ArchivalAzureExternalTargetParams) GetCoolBlobParams() AzureCoolBlobParams {
	if o == nil || o.CoolBlobParams == nil {
		var ret AzureCoolBlobParams
		return ret
	}
	return *o.CoolBlobParams
}

// GetCoolBlobParamsOk returns a tuple with the CoolBlobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalAzureExternalTargetParams) GetCoolBlobParamsOk() (*AzureCoolBlobParams, bool) {
	if o == nil || o.CoolBlobParams == nil {
		return nil, false
	}
	return o.CoolBlobParams, true
}

// HasCoolBlobParams returns a boolean if a field has been set.
func (o *ArchivalAzureExternalTargetParams) HasCoolBlobParams() bool {
	if o != nil && o.CoolBlobParams != nil {
		return true
	}

	return false
}

// SetCoolBlobParams gets a reference to the given AzureCoolBlobParams and assigns it to the CoolBlobParams field.
func (o *ArchivalAzureExternalTargetParams) SetCoolBlobParams(v AzureCoolBlobParams) {
	o.CoolBlobParams = &v
}

// GetHotBlobParams returns the HotBlobParams field value if set, zero value otherwise.
func (o *ArchivalAzureExternalTargetParams) GetHotBlobParams() AzureHotBlobParams {
	if o == nil || o.HotBlobParams == nil {
		var ret AzureHotBlobParams
		return ret
	}
	return *o.HotBlobParams
}

// GetHotBlobParamsOk returns a tuple with the HotBlobParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalAzureExternalTargetParams) GetHotBlobParamsOk() (*AzureHotBlobParams, bool) {
	if o == nil || o.HotBlobParams == nil {
		return nil, false
	}
	return o.HotBlobParams, true
}

// HasHotBlobParams returns a boolean if a field has been set.
func (o *ArchivalAzureExternalTargetParams) HasHotBlobParams() bool {
	if o != nil && o.HotBlobParams != nil {
		return true
	}

	return false
}

// SetHotBlobParams gets a reference to the given AzureHotBlobParams and assigns it to the HotBlobParams field.
func (o *ArchivalAzureExternalTargetParams) SetHotBlobParams(v AzureHotBlobParams) {
	o.HotBlobParams = &v
}

func (o ArchivalAzureExternalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["containerName"] = o.ContainerName.Get()
	}
	if true {
		toSerialize["storageAccountName"] = o.StorageAccountName.Get()
	}
	if true {
		toSerialize["storageAccessKey"] = o.StorageAccessKey.Get()
	}
	if true {
		toSerialize["storageClass"] = o.StorageClass.Get()
	}
	if o.SourceSideDeduplication.IsSet() {
		toSerialize["sourceSideDeduplication"] = o.SourceSideDeduplication.Get()
	}
	if o.IsIncrementalArchivalEnabled.IsSet() {
		toSerialize["isIncrementalArchivalEnabled"] = o.IsIncrementalArchivalEnabled.Get()
	}
	if o.IsForeverIncrementalArchivalEnabled.IsSet() {
		toSerialize["isForeverIncrementalArchivalEnabled"] = o.IsForeverIncrementalArchivalEnabled.Get()
	}
	if o.CoolBlobParams != nil {
		toSerialize["coolBlobParams"] = o.CoolBlobParams
	}
	if o.HotBlobParams != nil {
		toSerialize["hotBlobParams"] = o.HotBlobParams
	}
	return json.Marshal(toSerialize)
}

type NullableArchivalAzureExternalTargetParams struct {
	value *ArchivalAzureExternalTargetParams
	isSet bool
}

func (v NullableArchivalAzureExternalTargetParams) Get() *ArchivalAzureExternalTargetParams {
	return v.value
}

func (v *NullableArchivalAzureExternalTargetParams) Set(val *ArchivalAzureExternalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalAzureExternalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalAzureExternalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalAzureExternalTargetParams(val *ArchivalAzureExternalTargetParams) *NullableArchivalAzureExternalTargetParams {
	return &NullableArchivalAzureExternalTargetParams{value: val, isSet: true}
}

func (v NullableArchivalAzureExternalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalAzureExternalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


