/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// PatchDetail Detail of a patch. It gives the service and version information of the the patch.
type PatchDetail struct {
	// Specifies the name of the service.
	Service NullableString `json:"service,omitempty"`
	// Specifies the user friendly name of the service.
	Component NullableString `json:"component,omitempty"`
	// Specifies the existing version of the service. This is the available service patch version if exists. If there is no patch available, then it is the applied patch version if applied. If both don't exist, it is the base version of the service.
	Version NullableString `json:"version,omitempty"`
	// Specifies the version of the imported service patch.
	ImportVersion NullableString `json:"import_version,omitempty"`
	// Specifies the status of the patch whether it is accepted or rejected. A patch is rejected if it is older than the version available or applied on the cluster.
	Status NullableString `json:"status,omitempty"`
}

// NewPatchDetail instantiates a new PatchDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPatchDetail() *PatchDetail {
	this := PatchDetail{}
	return &this
}

// NewPatchDetailWithDefaults instantiates a new PatchDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPatchDetailWithDefaults() *PatchDetail {
	this := PatchDetail{}
	return &this
}

// GetService returns the Service field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchDetail) GetService() string {
	if o == nil || o.Service.Get() == nil {
		var ret string
		return ret
	}
	return *o.Service.Get()
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchDetail) GetServiceOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Service.Get(), o.Service.IsSet()
}

// HasService returns a boolean if a field has been set.
func (o *PatchDetail) HasService() bool {
	if o != nil && o.Service.IsSet() {
		return true
	}

	return false
}

// SetService gets a reference to the given NullableString and assigns it to the Service field.
func (o *PatchDetail) SetService(v string) {
	o.Service.Set(&v)
}
// SetServiceNil sets the value for Service to be an explicit nil
func (o *PatchDetail) SetServiceNil() {
	o.Service.Set(nil)
}

// UnsetService ensures that no value is present for Service, not even an explicit nil
func (o *PatchDetail) UnsetService() {
	o.Service.Unset()
}

// GetComponent returns the Component field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchDetail) GetComponent() string {
	if o == nil || o.Component.Get() == nil {
		var ret string
		return ret
	}
	return *o.Component.Get()
}

// GetComponentOk returns a tuple with the Component field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchDetail) GetComponentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Component.Get(), o.Component.IsSet()
}

// HasComponent returns a boolean if a field has been set.
func (o *PatchDetail) HasComponent() bool {
	if o != nil && o.Component.IsSet() {
		return true
	}

	return false
}

// SetComponent gets a reference to the given NullableString and assigns it to the Component field.
func (o *PatchDetail) SetComponent(v string) {
	o.Component.Set(&v)
}
// SetComponentNil sets the value for Component to be an explicit nil
func (o *PatchDetail) SetComponentNil() {
	o.Component.Set(nil)
}

// UnsetComponent ensures that no value is present for Component, not even an explicit nil
func (o *PatchDetail) UnsetComponent() {
	o.Component.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchDetail) GetVersion() string {
	if o == nil || o.Version.Get() == nil {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchDetail) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *PatchDetail) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *PatchDetail) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *PatchDetail) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *PatchDetail) UnsetVersion() {
	o.Version.Unset()
}

// GetImportVersion returns the ImportVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchDetail) GetImportVersion() string {
	if o == nil || o.ImportVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.ImportVersion.Get()
}

// GetImportVersionOk returns a tuple with the ImportVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchDetail) GetImportVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ImportVersion.Get(), o.ImportVersion.IsSet()
}

// HasImportVersion returns a boolean if a field has been set.
func (o *PatchDetail) HasImportVersion() bool {
	if o != nil && o.ImportVersion.IsSet() {
		return true
	}

	return false
}

// SetImportVersion gets a reference to the given NullableString and assigns it to the ImportVersion field.
func (o *PatchDetail) SetImportVersion(v string) {
	o.ImportVersion.Set(&v)
}
// SetImportVersionNil sets the value for ImportVersion to be an explicit nil
func (o *PatchDetail) SetImportVersionNil() {
	o.ImportVersion.Set(nil)
}

// UnsetImportVersion ensures that no value is present for ImportVersion, not even an explicit nil
func (o *PatchDetail) UnsetImportVersion() {
	o.ImportVersion.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PatchDetail) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PatchDetail) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *PatchDetail) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *PatchDetail) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *PatchDetail) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *PatchDetail) UnsetStatus() {
	o.Status.Unset()
}

func (o PatchDetail) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Service.IsSet() {
		toSerialize["service"] = o.Service.Get()
	}
	if o.Component.IsSet() {
		toSerialize["component"] = o.Component.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.ImportVersion.IsSet() {
		toSerialize["import_version"] = o.ImportVersion.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePatchDetail struct {
	value *PatchDetail
	isSet bool
}

func (v NullablePatchDetail) Get() *PatchDetail {
	return v.value
}

func (v *NullablePatchDetail) Set(val *PatchDetail) {
	v.value = val
	v.isSet = true
}

func (v NullablePatchDetail) IsSet() bool {
	return v.isSet
}

func (v *NullablePatchDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePatchDetail(val *PatchDetail) *NullablePatchDetail {
	return &NullablePatchDetail{value: val, isSet: true}
}

func (v NullablePatchDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePatchDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


