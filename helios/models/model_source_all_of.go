/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SourceAllOf struct for SourceAllOf
type SourceAllOf struct {
	// Time at which the data about this protection source was last refreshed.
	LastRefreshedTime NullableInt64 `json:"lastRefreshedTime,omitempty"`
	// Id of the registration as part of which this source was discovered.
	RegistrationId NullableInt64 `json:"registrationId,omitempty"`
}

// NewSourceAllOf instantiates a new SourceAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceAllOf() *SourceAllOf {
	this := SourceAllOf{}
	return &this
}

// NewSourceAllOfWithDefaults instantiates a new SourceAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceAllOfWithDefaults() *SourceAllOf {
	this := SourceAllOf{}
	return &this
}

// GetLastRefreshedTime returns the LastRefreshedTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceAllOf) GetLastRefreshedTime() int64 {
	if o == nil || o.LastRefreshedTime.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastRefreshedTime.Get()
}

// GetLastRefreshedTimeOk returns a tuple with the LastRefreshedTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceAllOf) GetLastRefreshedTimeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastRefreshedTime.Get(), o.LastRefreshedTime.IsSet()
}

// HasLastRefreshedTime returns a boolean if a field has been set.
func (o *SourceAllOf) HasLastRefreshedTime() bool {
	if o != nil && o.LastRefreshedTime.IsSet() {
		return true
	}

	return false
}

// SetLastRefreshedTime gets a reference to the given NullableInt64 and assigns it to the LastRefreshedTime field.
func (o *SourceAllOf) SetLastRefreshedTime(v int64) {
	o.LastRefreshedTime.Set(&v)
}
// SetLastRefreshedTimeNil sets the value for LastRefreshedTime to be an explicit nil
func (o *SourceAllOf) SetLastRefreshedTimeNil() {
	o.LastRefreshedTime.Set(nil)
}

// UnsetLastRefreshedTime ensures that no value is present for LastRefreshedTime, not even an explicit nil
func (o *SourceAllOf) UnsetLastRefreshedTime() {
	o.LastRefreshedTime.Unset()
}

// GetRegistrationId returns the RegistrationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SourceAllOf) GetRegistrationId() int64 {
	if o == nil || o.RegistrationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RegistrationId.Get()
}

// GetRegistrationIdOk returns a tuple with the RegistrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SourceAllOf) GetRegistrationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegistrationId.Get(), o.RegistrationId.IsSet()
}

// HasRegistrationId returns a boolean if a field has been set.
func (o *SourceAllOf) HasRegistrationId() bool {
	if o != nil && o.RegistrationId.IsSet() {
		return true
	}

	return false
}

// SetRegistrationId gets a reference to the given NullableInt64 and assigns it to the RegistrationId field.
func (o *SourceAllOf) SetRegistrationId(v int64) {
	o.RegistrationId.Set(&v)
}
// SetRegistrationIdNil sets the value for RegistrationId to be an explicit nil
func (o *SourceAllOf) SetRegistrationIdNil() {
	o.RegistrationId.Set(nil)
}

// UnsetRegistrationId ensures that no value is present for RegistrationId, not even an explicit nil
func (o *SourceAllOf) UnsetRegistrationId() {
	o.RegistrationId.Unset()
}

func (o SourceAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LastRefreshedTime.IsSet() {
		toSerialize["lastRefreshedTime"] = o.LastRefreshedTime.Get()
	}
	if o.RegistrationId.IsSet() {
		toSerialize["registrationId"] = o.RegistrationId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSourceAllOf struct {
	value *SourceAllOf
	isSet bool
}

func (v NullableSourceAllOf) Get() *SourceAllOf {
	return v.value
}

func (v *NullableSourceAllOf) Set(val *SourceAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceAllOf(val *SourceAllOf) *NullableSourceAllOf {
	return &NullableSourceAllOf{value: val, isSet: true}
}

func (v NullableSourceAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


