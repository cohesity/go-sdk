/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CommonPrePostScriptParams Specifies the path to the remote script and any common parameters expected by the remote script.
type CommonPrePostScriptParams struct {
	// Specifies the absolute path to the script on the remote host.
	Path string `json:"path"`
	// Specifies the arguments or parameters and values to pass into the remote script. For example if the script expects values for the 'database' and 'user' parameters, specify the parameters and values using the following string: \"database=myDatabase user=me\".
	Params NullableString `json:"params,omitempty"`
	// Specifies the timeout of the script in seconds. The script will be killed if it exceeds this value. By default, no timeout will occur if left empty.
	TimeoutSecs NullableInt32 `json:"timeoutSecs,omitempty"`
	// Specifies whether the script should be enabled, default value set to true.
	IsActive NullableBool `json:"isActive,omitempty"`
}

// NewCommonPrePostScriptParams instantiates a new CommonPrePostScriptParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonPrePostScriptParams(path string) *CommonPrePostScriptParams {
	this := CommonPrePostScriptParams{}
	this.Path = path
	return &this
}

// NewCommonPrePostScriptParamsWithDefaults instantiates a new CommonPrePostScriptParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonPrePostScriptParamsWithDefaults() *CommonPrePostScriptParams {
	this := CommonPrePostScriptParams{}
	return &this
}

// GetPath returns the Path field value
func (o *CommonPrePostScriptParams) GetPath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Path
}

// GetPathOk returns a tuple with the Path field value
// and a boolean to check if the value has been set.
func (o *CommonPrePostScriptParams) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Path, true
}

// SetPath sets field value
func (o *CommonPrePostScriptParams) SetPath(v string) {
	o.Path = v
}

// GetParams returns the Params field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonPrePostScriptParams) GetParams() string {
	if o == nil || o.Params.Get() == nil {
		var ret string
		return ret
	}
	return *o.Params.Get()
}

// GetParamsOk returns a tuple with the Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonPrePostScriptParams) GetParamsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Params.Get(), o.Params.IsSet()
}

// HasParams returns a boolean if a field has been set.
func (o *CommonPrePostScriptParams) HasParams() bool {
	if o != nil && o.Params.IsSet() {
		return true
	}

	return false
}

// SetParams gets a reference to the given NullableString and assigns it to the Params field.
func (o *CommonPrePostScriptParams) SetParams(v string) {
	o.Params.Set(&v)
}
// SetParamsNil sets the value for Params to be an explicit nil
func (o *CommonPrePostScriptParams) SetParamsNil() {
	o.Params.Set(nil)
}

// UnsetParams ensures that no value is present for Params, not even an explicit nil
func (o *CommonPrePostScriptParams) UnsetParams() {
	o.Params.Unset()
}

// GetTimeoutSecs returns the TimeoutSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonPrePostScriptParams) GetTimeoutSecs() int32 {
	if o == nil || o.TimeoutSecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TimeoutSecs.Get()
}

// GetTimeoutSecsOk returns a tuple with the TimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonPrePostScriptParams) GetTimeoutSecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimeoutSecs.Get(), o.TimeoutSecs.IsSet()
}

// HasTimeoutSecs returns a boolean if a field has been set.
func (o *CommonPrePostScriptParams) HasTimeoutSecs() bool {
	if o != nil && o.TimeoutSecs.IsSet() {
		return true
	}

	return false
}

// SetTimeoutSecs gets a reference to the given NullableInt32 and assigns it to the TimeoutSecs field.
func (o *CommonPrePostScriptParams) SetTimeoutSecs(v int32) {
	o.TimeoutSecs.Set(&v)
}
// SetTimeoutSecsNil sets the value for TimeoutSecs to be an explicit nil
func (o *CommonPrePostScriptParams) SetTimeoutSecsNil() {
	o.TimeoutSecs.Set(nil)
}

// UnsetTimeoutSecs ensures that no value is present for TimeoutSecs, not even an explicit nil
func (o *CommonPrePostScriptParams) UnsetTimeoutSecs() {
	o.TimeoutSecs.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonPrePostScriptParams) GetIsActive() bool {
	if o == nil || o.IsActive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonPrePostScriptParams) GetIsActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *CommonPrePostScriptParams) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *CommonPrePostScriptParams) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *CommonPrePostScriptParams) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *CommonPrePostScriptParams) UnsetIsActive() {
	o.IsActive.Unset()
}

func (o CommonPrePostScriptParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["path"] = o.Path
	}
	if o.Params.IsSet() {
		toSerialize["params"] = o.Params.Get()
	}
	if o.TimeoutSecs.IsSet() {
		toSerialize["timeoutSecs"] = o.TimeoutSecs.Get()
	}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCommonPrePostScriptParams struct {
	value *CommonPrePostScriptParams
	isSet bool
}

func (v NullableCommonPrePostScriptParams) Get() *CommonPrePostScriptParams {
	return v.value
}

func (v *NullableCommonPrePostScriptParams) Set(val *CommonPrePostScriptParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonPrePostScriptParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonPrePostScriptParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonPrePostScriptParams(val *CommonPrePostScriptParams) *NullableCommonPrePostScriptParams {
	return &NullableCommonPrePostScriptParams{value: val, isSet: true}
}

func (v NullableCommonPrePostScriptParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonPrePostScriptParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


