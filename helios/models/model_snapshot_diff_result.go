/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SnapshotDiffResult struct for SnapshotDiffResult
type SnapshotDiffResult struct {
	Status string `json:"status"`
	FileOperations *[]FileOperation `json:"fileOperations,omitempty"`
}

// NewSnapshotDiffResult instantiates a new SnapshotDiffResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotDiffResult(status string) *SnapshotDiffResult {
	this := SnapshotDiffResult{}
	this.Status = status
	return &this
}

// NewSnapshotDiffResultWithDefaults instantiates a new SnapshotDiffResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotDiffResultWithDefaults() *SnapshotDiffResult {
	this := SnapshotDiffResult{}
	return &this
}

// GetStatus returns the Status field value
func (o *SnapshotDiffResult) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *SnapshotDiffResult) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *SnapshotDiffResult) SetStatus(v string) {
	o.Status = v
}

// GetFileOperations returns the FileOperations field value if set, zero value otherwise.
func (o *SnapshotDiffResult) GetFileOperations() []FileOperation {
	if o == nil || o.FileOperations == nil {
		var ret []FileOperation
		return ret
	}
	return *o.FileOperations
}

// GetFileOperationsOk returns a tuple with the FileOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotDiffResult) GetFileOperationsOk() (*[]FileOperation, bool) {
	if o == nil || o.FileOperations == nil {
		return nil, false
	}
	return o.FileOperations, true
}

// HasFileOperations returns a boolean if a field has been set.
func (o *SnapshotDiffResult) HasFileOperations() bool {
	if o != nil && o.FileOperations != nil {
		return true
	}

	return false
}

// SetFileOperations gets a reference to the given []FileOperation and assigns it to the FileOperations field.
func (o *SnapshotDiffResult) SetFileOperations(v []FileOperation) {
	o.FileOperations = &v
}

func (o SnapshotDiffResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["status"] = o.Status
	}
	if o.FileOperations != nil {
		toSerialize["fileOperations"] = o.FileOperations
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotDiffResult struct {
	value *SnapshotDiffResult
	isSet bool
}

func (v NullableSnapshotDiffResult) Get() *SnapshotDiffResult {
	return v.value
}

func (v *NullableSnapshotDiffResult) Set(val *SnapshotDiffResult) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotDiffResult) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotDiffResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotDiffResult(val *SnapshotDiffResult) *NullableSnapshotDiffResult {
	return &NullableSnapshotDiffResult{value: val, isSet: true}
}

func (v NullableSnapshotDiffResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotDiffResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


