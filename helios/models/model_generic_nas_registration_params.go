/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// GenericNasRegistrationParams Specifies parameters to register GenericNas MountPoint.
type GenericNasRegistrationParams struct {
	// Specifies the MountPoint for Generic NAS Source.
	MountPoint NullableString `json:"mountPoint"`
	// Specifies the mode of the source. 'kNfs3' indicates NFS mode. 'kCifs1' indicates SMB mode.
	Mode NullableString `json:"mode"`
	// Specifies the Description for Generic NAS Source.
	Description NullableString `json:"description,omitempty"`
	// Specifies if validation has to be skipped while registering the mount point.
	SkipValidation NullableBool `json:"skipValidation,omitempty"`
	SmbMountCredentials *SmbMountCredentials `json:"smbMountCredentials,omitempty"`
	ThrottlingConfig *NasThrottlingConfig `json:"throttlingConfig,omitempty"`
}

// NewGenericNasRegistrationParams instantiates a new GenericNasRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGenericNasRegistrationParams(mountPoint NullableString, mode NullableString) *GenericNasRegistrationParams {
	this := GenericNasRegistrationParams{}
	this.MountPoint = mountPoint
	this.Mode = mode
	return &this
}

// NewGenericNasRegistrationParamsWithDefaults instantiates a new GenericNasRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGenericNasRegistrationParamsWithDefaults() *GenericNasRegistrationParams {
	this := GenericNasRegistrationParams{}
	return &this
}

// GetMountPoint returns the MountPoint field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GenericNasRegistrationParams) GetMountPoint() string {
	if o == nil || o.MountPoint.Get() == nil {
		var ret string
		return ret
	}

	return *o.MountPoint.Get()
}

// GetMountPointOk returns a tuple with the MountPoint field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenericNasRegistrationParams) GetMountPointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountPoint.Get(), o.MountPoint.IsSet()
}

// SetMountPoint sets field value
func (o *GenericNasRegistrationParams) SetMountPoint(v string) {
	o.MountPoint.Set(&v)
}

// GetMode returns the Mode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *GenericNasRegistrationParams) GetMode() string {
	if o == nil || o.Mode.Get() == nil {
		var ret string
		return ret
	}

	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenericNasRegistrationParams) GetModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// SetMode sets field value
func (o *GenericNasRegistrationParams) SetMode(v string) {
	o.Mode.Set(&v)
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenericNasRegistrationParams) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenericNasRegistrationParams) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *GenericNasRegistrationParams) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *GenericNasRegistrationParams) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *GenericNasRegistrationParams) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *GenericNasRegistrationParams) UnsetDescription() {
	o.Description.Unset()
}

// GetSkipValidation returns the SkipValidation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GenericNasRegistrationParams) GetSkipValidation() bool {
	if o == nil || o.SkipValidation.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SkipValidation.Get()
}

// GetSkipValidationOk returns a tuple with the SkipValidation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GenericNasRegistrationParams) GetSkipValidationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SkipValidation.Get(), o.SkipValidation.IsSet()
}

// HasSkipValidation returns a boolean if a field has been set.
func (o *GenericNasRegistrationParams) HasSkipValidation() bool {
	if o != nil && o.SkipValidation.IsSet() {
		return true
	}

	return false
}

// SetSkipValidation gets a reference to the given NullableBool and assigns it to the SkipValidation field.
func (o *GenericNasRegistrationParams) SetSkipValidation(v bool) {
	o.SkipValidation.Set(&v)
}
// SetSkipValidationNil sets the value for SkipValidation to be an explicit nil
func (o *GenericNasRegistrationParams) SetSkipValidationNil() {
	o.SkipValidation.Set(nil)
}

// UnsetSkipValidation ensures that no value is present for SkipValidation, not even an explicit nil
func (o *GenericNasRegistrationParams) UnsetSkipValidation() {
	o.SkipValidation.Unset()
}

// GetSmbMountCredentials returns the SmbMountCredentials field value if set, zero value otherwise.
func (o *GenericNasRegistrationParams) GetSmbMountCredentials() SmbMountCredentials {
	if o == nil || o.SmbMountCredentials == nil {
		var ret SmbMountCredentials
		return ret
	}
	return *o.SmbMountCredentials
}

// GetSmbMountCredentialsOk returns a tuple with the SmbMountCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericNasRegistrationParams) GetSmbMountCredentialsOk() (*SmbMountCredentials, bool) {
	if o == nil || o.SmbMountCredentials == nil {
		return nil, false
	}
	return o.SmbMountCredentials, true
}

// HasSmbMountCredentials returns a boolean if a field has been set.
func (o *GenericNasRegistrationParams) HasSmbMountCredentials() bool {
	if o != nil && o.SmbMountCredentials != nil {
		return true
	}

	return false
}

// SetSmbMountCredentials gets a reference to the given SmbMountCredentials and assigns it to the SmbMountCredentials field.
func (o *GenericNasRegistrationParams) SetSmbMountCredentials(v SmbMountCredentials) {
	o.SmbMountCredentials = &v
}

// GetThrottlingConfig returns the ThrottlingConfig field value if set, zero value otherwise.
func (o *GenericNasRegistrationParams) GetThrottlingConfig() NasThrottlingConfig {
	if o == nil || o.ThrottlingConfig == nil {
		var ret NasThrottlingConfig
		return ret
	}
	return *o.ThrottlingConfig
}

// GetThrottlingConfigOk returns a tuple with the ThrottlingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GenericNasRegistrationParams) GetThrottlingConfigOk() (*NasThrottlingConfig, bool) {
	if o == nil || o.ThrottlingConfig == nil {
		return nil, false
	}
	return o.ThrottlingConfig, true
}

// HasThrottlingConfig returns a boolean if a field has been set.
func (o *GenericNasRegistrationParams) HasThrottlingConfig() bool {
	if o != nil && o.ThrottlingConfig != nil {
		return true
	}

	return false
}

// SetThrottlingConfig gets a reference to the given NasThrottlingConfig and assigns it to the ThrottlingConfig field.
func (o *GenericNasRegistrationParams) SetThrottlingConfig(v NasThrottlingConfig) {
	o.ThrottlingConfig = &v
}

func (o GenericNasRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["mountPoint"] = o.MountPoint.Get()
	}
	if true {
		toSerialize["mode"] = o.Mode.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.SkipValidation.IsSet() {
		toSerialize["skipValidation"] = o.SkipValidation.Get()
	}
	if o.SmbMountCredentials != nil {
		toSerialize["smbMountCredentials"] = o.SmbMountCredentials
	}
	if o.ThrottlingConfig != nil {
		toSerialize["throttlingConfig"] = o.ThrottlingConfig
	}
	return json.Marshal(toSerialize)
}

type NullableGenericNasRegistrationParams struct {
	value *GenericNasRegistrationParams
	isSet bool
}

func (v NullableGenericNasRegistrationParams) Get() *GenericNasRegistrationParams {
	return v.value
}

func (v *NullableGenericNasRegistrationParams) Set(val *GenericNasRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableGenericNasRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableGenericNasRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGenericNasRegistrationParams(val *GenericNasRegistrationParams) *NullableGenericNasRegistrationParams {
	return &NullableGenericNasRegistrationParams{value: val, isSet: true}
}

func (v NullableGenericNasRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGenericNasRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


