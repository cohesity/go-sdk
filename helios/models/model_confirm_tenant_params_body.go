/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ConfirmTenantParamsBody Enable Helios management for a Tenant.
type ConfirmTenantParamsBody struct {
	// Name of the Tenant.
	Name NullableString `json:"name"`
	// Description about the Tenant.
	Description NullableString `json:"description,omitempty"`
}

// NewConfirmTenantParamsBody instantiates a new ConfirmTenantParamsBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConfirmTenantParamsBody(name NullableString) *ConfirmTenantParamsBody {
	this := ConfirmTenantParamsBody{}
	this.Name = name
	return &this
}

// NewConfirmTenantParamsBodyWithDefaults instantiates a new ConfirmTenantParamsBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConfirmTenantParamsBodyWithDefaults() *ConfirmTenantParamsBody {
	this := ConfirmTenantParamsBody{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ConfirmTenantParamsBody) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfirmTenantParamsBody) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *ConfirmTenantParamsBody) SetName(v string) {
	o.Name.Set(&v)
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ConfirmTenantParamsBody) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ConfirmTenantParamsBody) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ConfirmTenantParamsBody) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ConfirmTenantParamsBody) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ConfirmTenantParamsBody) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ConfirmTenantParamsBody) UnsetDescription() {
	o.Description.Unset()
}

func (o ConfirmTenantParamsBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableConfirmTenantParamsBody struct {
	value *ConfirmTenantParamsBody
	isSet bool
}

func (v NullableConfirmTenantParamsBody) Get() *ConfirmTenantParamsBody {
	return v.value
}

func (v *NullableConfirmTenantParamsBody) Set(val *ConfirmTenantParamsBody) {
	v.value = val
	v.isSet = true
}

func (v NullableConfirmTenantParamsBody) IsSet() bool {
	return v.isSet
}

func (v *NullableConfirmTenantParamsBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConfirmTenantParamsBody(val *ConfirmTenantParamsBody) *NullableConfirmTenantParamsBody {
	return &NullableConfirmTenantParamsBody{value: val, isSet: true}
}

func (v NullableConfirmTenantParamsBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConfirmTenantParamsBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


