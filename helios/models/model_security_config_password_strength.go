/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SecurityConfigPasswordStrength Specifies security config for password strength.
type SecurityConfigPasswordStrength struct {
	// Specifies the password minimum length.
	MinLength NullableInt32 `json:"minLength,omitempty"`
	// Specifies if the password needs to have at least one uppercase letter.
	IncludeUpperLetter NullableBool `json:"includeUpperLetter,omitempty"`
	// Specifies if the password needs to have at least one lowercase letter.
	IncludeLowerLetter NullableBool `json:"includeLowerLetter,omitempty"`
	// Specifies if the password needs to have at least one number.
	IncludeNumber NullableBool `json:"includeNumber,omitempty"`
	// Specifies if the password needs to have at least one special character.
	IncludeSpecialChar NullableBool `json:"includeSpecialChar,omitempty"`
}

// NewSecurityConfigPasswordStrength instantiates a new SecurityConfigPasswordStrength object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityConfigPasswordStrength() *SecurityConfigPasswordStrength {
	this := SecurityConfigPasswordStrength{}
	return &this
}

// NewSecurityConfigPasswordStrengthWithDefaults instantiates a new SecurityConfigPasswordStrength object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityConfigPasswordStrengthWithDefaults() *SecurityConfigPasswordStrength {
	this := SecurityConfigPasswordStrength{}
	return &this
}

// GetMinLength returns the MinLength field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigPasswordStrength) GetMinLength() int32 {
	if o == nil || o.MinLength.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MinLength.Get()
}

// GetMinLengthOk returns a tuple with the MinLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigPasswordStrength) GetMinLengthOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinLength.Get(), o.MinLength.IsSet()
}

// HasMinLength returns a boolean if a field has been set.
func (o *SecurityConfigPasswordStrength) HasMinLength() bool {
	if o != nil && o.MinLength.IsSet() {
		return true
	}

	return false
}

// SetMinLength gets a reference to the given NullableInt32 and assigns it to the MinLength field.
func (o *SecurityConfigPasswordStrength) SetMinLength(v int32) {
	o.MinLength.Set(&v)
}
// SetMinLengthNil sets the value for MinLength to be an explicit nil
func (o *SecurityConfigPasswordStrength) SetMinLengthNil() {
	o.MinLength.Set(nil)
}

// UnsetMinLength ensures that no value is present for MinLength, not even an explicit nil
func (o *SecurityConfigPasswordStrength) UnsetMinLength() {
	o.MinLength.Unset()
}

// GetIncludeUpperLetter returns the IncludeUpperLetter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigPasswordStrength) GetIncludeUpperLetter() bool {
	if o == nil || o.IncludeUpperLetter.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IncludeUpperLetter.Get()
}

// GetIncludeUpperLetterOk returns a tuple with the IncludeUpperLetter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigPasswordStrength) GetIncludeUpperLetterOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncludeUpperLetter.Get(), o.IncludeUpperLetter.IsSet()
}

// HasIncludeUpperLetter returns a boolean if a field has been set.
func (o *SecurityConfigPasswordStrength) HasIncludeUpperLetter() bool {
	if o != nil && o.IncludeUpperLetter.IsSet() {
		return true
	}

	return false
}

// SetIncludeUpperLetter gets a reference to the given NullableBool and assigns it to the IncludeUpperLetter field.
func (o *SecurityConfigPasswordStrength) SetIncludeUpperLetter(v bool) {
	o.IncludeUpperLetter.Set(&v)
}
// SetIncludeUpperLetterNil sets the value for IncludeUpperLetter to be an explicit nil
func (o *SecurityConfigPasswordStrength) SetIncludeUpperLetterNil() {
	o.IncludeUpperLetter.Set(nil)
}

// UnsetIncludeUpperLetter ensures that no value is present for IncludeUpperLetter, not even an explicit nil
func (o *SecurityConfigPasswordStrength) UnsetIncludeUpperLetter() {
	o.IncludeUpperLetter.Unset()
}

// GetIncludeLowerLetter returns the IncludeLowerLetter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigPasswordStrength) GetIncludeLowerLetter() bool {
	if o == nil || o.IncludeLowerLetter.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IncludeLowerLetter.Get()
}

// GetIncludeLowerLetterOk returns a tuple with the IncludeLowerLetter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigPasswordStrength) GetIncludeLowerLetterOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncludeLowerLetter.Get(), o.IncludeLowerLetter.IsSet()
}

// HasIncludeLowerLetter returns a boolean if a field has been set.
func (o *SecurityConfigPasswordStrength) HasIncludeLowerLetter() bool {
	if o != nil && o.IncludeLowerLetter.IsSet() {
		return true
	}

	return false
}

// SetIncludeLowerLetter gets a reference to the given NullableBool and assigns it to the IncludeLowerLetter field.
func (o *SecurityConfigPasswordStrength) SetIncludeLowerLetter(v bool) {
	o.IncludeLowerLetter.Set(&v)
}
// SetIncludeLowerLetterNil sets the value for IncludeLowerLetter to be an explicit nil
func (o *SecurityConfigPasswordStrength) SetIncludeLowerLetterNil() {
	o.IncludeLowerLetter.Set(nil)
}

// UnsetIncludeLowerLetter ensures that no value is present for IncludeLowerLetter, not even an explicit nil
func (o *SecurityConfigPasswordStrength) UnsetIncludeLowerLetter() {
	o.IncludeLowerLetter.Unset()
}

// GetIncludeNumber returns the IncludeNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigPasswordStrength) GetIncludeNumber() bool {
	if o == nil || o.IncludeNumber.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IncludeNumber.Get()
}

// GetIncludeNumberOk returns a tuple with the IncludeNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigPasswordStrength) GetIncludeNumberOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncludeNumber.Get(), o.IncludeNumber.IsSet()
}

// HasIncludeNumber returns a boolean if a field has been set.
func (o *SecurityConfigPasswordStrength) HasIncludeNumber() bool {
	if o != nil && o.IncludeNumber.IsSet() {
		return true
	}

	return false
}

// SetIncludeNumber gets a reference to the given NullableBool and assigns it to the IncludeNumber field.
func (o *SecurityConfigPasswordStrength) SetIncludeNumber(v bool) {
	o.IncludeNumber.Set(&v)
}
// SetIncludeNumberNil sets the value for IncludeNumber to be an explicit nil
func (o *SecurityConfigPasswordStrength) SetIncludeNumberNil() {
	o.IncludeNumber.Set(nil)
}

// UnsetIncludeNumber ensures that no value is present for IncludeNumber, not even an explicit nil
func (o *SecurityConfigPasswordStrength) UnsetIncludeNumber() {
	o.IncludeNumber.Unset()
}

// GetIncludeSpecialChar returns the IncludeSpecialChar field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigPasswordStrength) GetIncludeSpecialChar() bool {
	if o == nil || o.IncludeSpecialChar.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IncludeSpecialChar.Get()
}

// GetIncludeSpecialCharOk returns a tuple with the IncludeSpecialChar field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigPasswordStrength) GetIncludeSpecialCharOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncludeSpecialChar.Get(), o.IncludeSpecialChar.IsSet()
}

// HasIncludeSpecialChar returns a boolean if a field has been set.
func (o *SecurityConfigPasswordStrength) HasIncludeSpecialChar() bool {
	if o != nil && o.IncludeSpecialChar.IsSet() {
		return true
	}

	return false
}

// SetIncludeSpecialChar gets a reference to the given NullableBool and assigns it to the IncludeSpecialChar field.
func (o *SecurityConfigPasswordStrength) SetIncludeSpecialChar(v bool) {
	o.IncludeSpecialChar.Set(&v)
}
// SetIncludeSpecialCharNil sets the value for IncludeSpecialChar to be an explicit nil
func (o *SecurityConfigPasswordStrength) SetIncludeSpecialCharNil() {
	o.IncludeSpecialChar.Set(nil)
}

// UnsetIncludeSpecialChar ensures that no value is present for IncludeSpecialChar, not even an explicit nil
func (o *SecurityConfigPasswordStrength) UnsetIncludeSpecialChar() {
	o.IncludeSpecialChar.Unset()
}

func (o SecurityConfigPasswordStrength) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MinLength.IsSet() {
		toSerialize["minLength"] = o.MinLength.Get()
	}
	if o.IncludeUpperLetter.IsSet() {
		toSerialize["includeUpperLetter"] = o.IncludeUpperLetter.Get()
	}
	if o.IncludeLowerLetter.IsSet() {
		toSerialize["includeLowerLetter"] = o.IncludeLowerLetter.Get()
	}
	if o.IncludeNumber.IsSet() {
		toSerialize["includeNumber"] = o.IncludeNumber.Get()
	}
	if o.IncludeSpecialChar.IsSet() {
		toSerialize["includeSpecialChar"] = o.IncludeSpecialChar.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityConfigPasswordStrength struct {
	value *SecurityConfigPasswordStrength
	isSet bool
}

func (v NullableSecurityConfigPasswordStrength) Get() *SecurityConfigPasswordStrength {
	return v.value
}

func (v *NullableSecurityConfigPasswordStrength) Set(val *SecurityConfigPasswordStrength) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityConfigPasswordStrength) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityConfigPasswordStrength) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityConfigPasswordStrength(val *SecurityConfigPasswordStrength) *NullableSecurityConfigPasswordStrength {
	return &NullableSecurityConfigPasswordStrength{value: val, isSet: true}
}

func (v NullableSecurityConfigPasswordStrength) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityConfigPasswordStrength) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


