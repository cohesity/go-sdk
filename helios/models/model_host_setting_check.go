/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// HostSettingCheck Specifies the host checking details.
type HostSettingCheck struct {
	// Specifies the type of host checking that was performed.
	Type NullableString `json:"type,omitempty"`
	// Specifies the result of host checking performed by agent.
	Result NullableString `json:"result,omitempty"`
}

// NewHostSettingCheck instantiates a new HostSettingCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHostSettingCheck() *HostSettingCheck {
	this := HostSettingCheck{}
	return &this
}

// NewHostSettingCheckWithDefaults instantiates a new HostSettingCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHostSettingCheckWithDefaults() *HostSettingCheck {
	this := HostSettingCheck{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HostSettingCheck) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HostSettingCheck) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *HostSettingCheck) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *HostSettingCheck) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *HostSettingCheck) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *HostSettingCheck) UnsetType() {
	o.Type.Unset()
}

// GetResult returns the Result field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HostSettingCheck) GetResult() string {
	if o == nil || o.Result.Get() == nil {
		var ret string
		return ret
	}
	return *o.Result.Get()
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HostSettingCheck) GetResultOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Result.Get(), o.Result.IsSet()
}

// HasResult returns a boolean if a field has been set.
func (o *HostSettingCheck) HasResult() bool {
	if o != nil && o.Result.IsSet() {
		return true
	}

	return false
}

// SetResult gets a reference to the given NullableString and assigns it to the Result field.
func (o *HostSettingCheck) SetResult(v string) {
	o.Result.Set(&v)
}
// SetResultNil sets the value for Result to be an explicit nil
func (o *HostSettingCheck) SetResultNil() {
	o.Result.Set(nil)
}

// UnsetResult ensures that no value is present for Result, not even an explicit nil
func (o *HostSettingCheck) UnsetResult() {
	o.Result.Unset()
}

func (o HostSettingCheck) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Result.IsSet() {
		toSerialize["result"] = o.Result.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHostSettingCheck struct {
	value *HostSettingCheck
	isSet bool
}

func (v NullableHostSettingCheck) Get() *HostSettingCheck {
	return v.value
}

func (v *NullableHostSettingCheck) Set(val *HostSettingCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableHostSettingCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableHostSettingCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHostSettingCheck(val *HostSettingCheck) *NullableHostSettingCheck {
	return &NullableHostSettingCheck{value: val, isSet: true}
}

func (v NullableHostSettingCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHostSettingCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


