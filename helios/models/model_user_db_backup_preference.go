/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// UserDbBackupPreference Specifies User Database Backup Preference Type.
type UserDbBackupPreference struct {
	// Specifies User Database Backup Preference Type.
	UserDbBackupPreference *string `json:"userDbBackupPreference,omitempty"`
}

// NewUserDbBackupPreference instantiates a new UserDbBackupPreference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserDbBackupPreference() *UserDbBackupPreference {
	this := UserDbBackupPreference{}
	return &this
}

// NewUserDbBackupPreferenceWithDefaults instantiates a new UserDbBackupPreference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserDbBackupPreferenceWithDefaults() *UserDbBackupPreference {
	this := UserDbBackupPreference{}
	return &this
}

// GetUserDbBackupPreference returns the UserDbBackupPreference field value if set, zero value otherwise.
func (o *UserDbBackupPreference) GetUserDbBackupPreference() string {
	if o == nil || o.UserDbBackupPreference == nil {
		var ret string
		return ret
	}
	return *o.UserDbBackupPreference
}

// GetUserDbBackupPreferenceOk returns a tuple with the UserDbBackupPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserDbBackupPreference) GetUserDbBackupPreferenceOk() (*string, bool) {
	if o == nil || o.UserDbBackupPreference == nil {
		return nil, false
	}
	return o.UserDbBackupPreference, true
}

// HasUserDbBackupPreference returns a boolean if a field has been set.
func (o *UserDbBackupPreference) HasUserDbBackupPreference() bool {
	if o != nil && o.UserDbBackupPreference != nil {
		return true
	}

	return false
}

// SetUserDbBackupPreference gets a reference to the given string and assigns it to the UserDbBackupPreference field.
func (o *UserDbBackupPreference) SetUserDbBackupPreference(v string) {
	o.UserDbBackupPreference = &v
}

func (o UserDbBackupPreference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserDbBackupPreference != nil {
		toSerialize["userDbBackupPreference"] = o.UserDbBackupPreference
	}
	return json.Marshal(toSerialize)
}

type NullableUserDbBackupPreference struct {
	value *UserDbBackupPreference
	isSet bool
}

func (v NullableUserDbBackupPreference) Get() *UserDbBackupPreference {
	return v.value
}

func (v *NullableUserDbBackupPreference) Set(val *UserDbBackupPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableUserDbBackupPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableUserDbBackupPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserDbBackupPreference(val *UserDbBackupPreference) *NullableUserDbBackupPreference {
	return &NullableUserDbBackupPreference{value: val, isSet: true}
}

func (v NullableUserDbBackupPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserDbBackupPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


