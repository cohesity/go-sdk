/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// FileOperation struct for FileOperation
type FileOperation struct {
	FilePath string `json:"filePath"`
	Operation string `json:"operation"`
}

// NewFileOperation instantiates a new FileOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileOperation(filePath string, operation string) *FileOperation {
	this := FileOperation{}
	this.FilePath = filePath
	this.Operation = operation
	return &this
}

// NewFileOperationWithDefaults instantiates a new FileOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileOperationWithDefaults() *FileOperation {
	this := FileOperation{}
	return &this
}

// GetFilePath returns the FilePath field value
func (o *FileOperation) GetFilePath() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value
// and a boolean to check if the value has been set.
func (o *FileOperation) GetFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.FilePath, true
}

// SetFilePath sets field value
func (o *FileOperation) SetFilePath(v string) {
	o.FilePath = v
}

// GetOperation returns the Operation field value
func (o *FileOperation) GetOperation() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Operation
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
func (o *FileOperation) GetOperationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Operation, true
}

// SetOperation sets field value
func (o *FileOperation) SetOperation(v string) {
	o.Operation = v
}

func (o FileOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["filePath"] = o.FilePath
	}
	if true {
		toSerialize["operation"] = o.Operation
	}
	return json.Marshal(toSerialize)
}

type NullableFileOperation struct {
	value *FileOperation
	isSet bool
}

func (v NullableFileOperation) Get() *FileOperation {
	return v.value
}

func (v *NullableFileOperation) Set(val *FileOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableFileOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableFileOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileOperation(val *FileOperation) *NullableFileOperation {
	return &NullableFileOperation{value: val, isSet: true}
}

func (v NullableFileOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


