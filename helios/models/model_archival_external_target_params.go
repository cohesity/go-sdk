/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ArchivalExternalTargetParams Specifies the parameters which are specific to Archival purpose type External Targets.
type ArchivalExternalTargetParams struct {
	// Specifies the Storage type of the External Target.
	StorageType NullableString `json:"storageType"`
	Encryption EncryptionSettings `json:"encryption"`
	TargetBandwidthThrottlings *TargetBandwidthThrottlings `json:"targetBandwidthThrottlings,omitempty"`
	AzureParams *ArchivalAzureExternalTargetParams `json:"azureParams,omitempty"`
	GcpParams *ArchivalGcpExternalTargetParams `json:"gcpParams,omitempty"`
	AwsParams *ArchivalAwsExternalTargetParams `json:"awsParams,omitempty"`
	OracleParams *ArchivalOracleExternalTargetParams `json:"oracleParams,omitempty"`
	NasParams *ArchivalNasExternalTargetParams `json:"nasParams,omitempty"`
	QstarTapeParams *ArchivalQstarTapeExternalTargetParams `json:"qstarTapeParams,omitempty"`
	S3CompParams *ArchivalS3CompExternalTargetParams `json:"s3CompParams,omitempty"`
}

// NewArchivalExternalTargetParams instantiates a new ArchivalExternalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalExternalTargetParams(storageType NullableString, encryption EncryptionSettings) *ArchivalExternalTargetParams {
	this := ArchivalExternalTargetParams{}
	this.StorageType = storageType
	this.Encryption = encryption
	return &this
}

// NewArchivalExternalTargetParamsWithDefaults instantiates a new ArchivalExternalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalExternalTargetParamsWithDefaults() *ArchivalExternalTargetParams {
	this := ArchivalExternalTargetParams{}
	return &this
}

// GetStorageType returns the StorageType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalExternalTargetParams) GetStorageType() string {
	if o == nil || o.StorageType.Get() == nil {
		var ret string
		return ret
	}

	return *o.StorageType.Get()
}

// GetStorageTypeOk returns a tuple with the StorageType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalExternalTargetParams) GetStorageTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageType.Get(), o.StorageType.IsSet()
}

// SetStorageType sets field value
func (o *ArchivalExternalTargetParams) SetStorageType(v string) {
	o.StorageType.Set(&v)
}

// GetEncryption returns the Encryption field value
func (o *ArchivalExternalTargetParams) GetEncryption() EncryptionSettings {
	if o == nil {
		var ret EncryptionSettings
		return ret
	}

	return o.Encryption
}

// GetEncryptionOk returns a tuple with the Encryption field value
// and a boolean to check if the value has been set.
func (o *ArchivalExternalTargetParams) GetEncryptionOk() (*EncryptionSettings, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Encryption, true
}

// SetEncryption sets field value
func (o *ArchivalExternalTargetParams) SetEncryption(v EncryptionSettings) {
	o.Encryption = v
}

// GetTargetBandwidthThrottlings returns the TargetBandwidthThrottlings field value if set, zero value otherwise.
func (o *ArchivalExternalTargetParams) GetTargetBandwidthThrottlings() TargetBandwidthThrottlings {
	if o == nil || o.TargetBandwidthThrottlings == nil {
		var ret TargetBandwidthThrottlings
		return ret
	}
	return *o.TargetBandwidthThrottlings
}

// GetTargetBandwidthThrottlingsOk returns a tuple with the TargetBandwidthThrottlings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalExternalTargetParams) GetTargetBandwidthThrottlingsOk() (*TargetBandwidthThrottlings, bool) {
	if o == nil || o.TargetBandwidthThrottlings == nil {
		return nil, false
	}
	return o.TargetBandwidthThrottlings, true
}

// HasTargetBandwidthThrottlings returns a boolean if a field has been set.
func (o *ArchivalExternalTargetParams) HasTargetBandwidthThrottlings() bool {
	if o != nil && o.TargetBandwidthThrottlings != nil {
		return true
	}

	return false
}

// SetTargetBandwidthThrottlings gets a reference to the given TargetBandwidthThrottlings and assigns it to the TargetBandwidthThrottlings field.
func (o *ArchivalExternalTargetParams) SetTargetBandwidthThrottlings(v TargetBandwidthThrottlings) {
	o.TargetBandwidthThrottlings = &v
}

// GetAzureParams returns the AzureParams field value if set, zero value otherwise.
func (o *ArchivalExternalTargetParams) GetAzureParams() ArchivalAzureExternalTargetParams {
	if o == nil || o.AzureParams == nil {
		var ret ArchivalAzureExternalTargetParams
		return ret
	}
	return *o.AzureParams
}

// GetAzureParamsOk returns a tuple with the AzureParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalExternalTargetParams) GetAzureParamsOk() (*ArchivalAzureExternalTargetParams, bool) {
	if o == nil || o.AzureParams == nil {
		return nil, false
	}
	return o.AzureParams, true
}

// HasAzureParams returns a boolean if a field has been set.
func (o *ArchivalExternalTargetParams) HasAzureParams() bool {
	if o != nil && o.AzureParams != nil {
		return true
	}

	return false
}

// SetAzureParams gets a reference to the given ArchivalAzureExternalTargetParams and assigns it to the AzureParams field.
func (o *ArchivalExternalTargetParams) SetAzureParams(v ArchivalAzureExternalTargetParams) {
	o.AzureParams = &v
}

// GetGcpParams returns the GcpParams field value if set, zero value otherwise.
func (o *ArchivalExternalTargetParams) GetGcpParams() ArchivalGcpExternalTargetParams {
	if o == nil || o.GcpParams == nil {
		var ret ArchivalGcpExternalTargetParams
		return ret
	}
	return *o.GcpParams
}

// GetGcpParamsOk returns a tuple with the GcpParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalExternalTargetParams) GetGcpParamsOk() (*ArchivalGcpExternalTargetParams, bool) {
	if o == nil || o.GcpParams == nil {
		return nil, false
	}
	return o.GcpParams, true
}

// HasGcpParams returns a boolean if a field has been set.
func (o *ArchivalExternalTargetParams) HasGcpParams() bool {
	if o != nil && o.GcpParams != nil {
		return true
	}

	return false
}

// SetGcpParams gets a reference to the given ArchivalGcpExternalTargetParams and assigns it to the GcpParams field.
func (o *ArchivalExternalTargetParams) SetGcpParams(v ArchivalGcpExternalTargetParams) {
	o.GcpParams = &v
}

// GetAwsParams returns the AwsParams field value if set, zero value otherwise.
func (o *ArchivalExternalTargetParams) GetAwsParams() ArchivalAwsExternalTargetParams {
	if o == nil || o.AwsParams == nil {
		var ret ArchivalAwsExternalTargetParams
		return ret
	}
	return *o.AwsParams
}

// GetAwsParamsOk returns a tuple with the AwsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalExternalTargetParams) GetAwsParamsOk() (*ArchivalAwsExternalTargetParams, bool) {
	if o == nil || o.AwsParams == nil {
		return nil, false
	}
	return o.AwsParams, true
}

// HasAwsParams returns a boolean if a field has been set.
func (o *ArchivalExternalTargetParams) HasAwsParams() bool {
	if o != nil && o.AwsParams != nil {
		return true
	}

	return false
}

// SetAwsParams gets a reference to the given ArchivalAwsExternalTargetParams and assigns it to the AwsParams field.
func (o *ArchivalExternalTargetParams) SetAwsParams(v ArchivalAwsExternalTargetParams) {
	o.AwsParams = &v
}

// GetOracleParams returns the OracleParams field value if set, zero value otherwise.
func (o *ArchivalExternalTargetParams) GetOracleParams() ArchivalOracleExternalTargetParams {
	if o == nil || o.OracleParams == nil {
		var ret ArchivalOracleExternalTargetParams
		return ret
	}
	return *o.OracleParams
}

// GetOracleParamsOk returns a tuple with the OracleParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalExternalTargetParams) GetOracleParamsOk() (*ArchivalOracleExternalTargetParams, bool) {
	if o == nil || o.OracleParams == nil {
		return nil, false
	}
	return o.OracleParams, true
}

// HasOracleParams returns a boolean if a field has been set.
func (o *ArchivalExternalTargetParams) HasOracleParams() bool {
	if o != nil && o.OracleParams != nil {
		return true
	}

	return false
}

// SetOracleParams gets a reference to the given ArchivalOracleExternalTargetParams and assigns it to the OracleParams field.
func (o *ArchivalExternalTargetParams) SetOracleParams(v ArchivalOracleExternalTargetParams) {
	o.OracleParams = &v
}

// GetNasParams returns the NasParams field value if set, zero value otherwise.
func (o *ArchivalExternalTargetParams) GetNasParams() ArchivalNasExternalTargetParams {
	if o == nil || o.NasParams == nil {
		var ret ArchivalNasExternalTargetParams
		return ret
	}
	return *o.NasParams
}

// GetNasParamsOk returns a tuple with the NasParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalExternalTargetParams) GetNasParamsOk() (*ArchivalNasExternalTargetParams, bool) {
	if o == nil || o.NasParams == nil {
		return nil, false
	}
	return o.NasParams, true
}

// HasNasParams returns a boolean if a field has been set.
func (o *ArchivalExternalTargetParams) HasNasParams() bool {
	if o != nil && o.NasParams != nil {
		return true
	}

	return false
}

// SetNasParams gets a reference to the given ArchivalNasExternalTargetParams and assigns it to the NasParams field.
func (o *ArchivalExternalTargetParams) SetNasParams(v ArchivalNasExternalTargetParams) {
	o.NasParams = &v
}

// GetQstarTapeParams returns the QstarTapeParams field value if set, zero value otherwise.
func (o *ArchivalExternalTargetParams) GetQstarTapeParams() ArchivalQstarTapeExternalTargetParams {
	if o == nil || o.QstarTapeParams == nil {
		var ret ArchivalQstarTapeExternalTargetParams
		return ret
	}
	return *o.QstarTapeParams
}

// GetQstarTapeParamsOk returns a tuple with the QstarTapeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalExternalTargetParams) GetQstarTapeParamsOk() (*ArchivalQstarTapeExternalTargetParams, bool) {
	if o == nil || o.QstarTapeParams == nil {
		return nil, false
	}
	return o.QstarTapeParams, true
}

// HasQstarTapeParams returns a boolean if a field has been set.
func (o *ArchivalExternalTargetParams) HasQstarTapeParams() bool {
	if o != nil && o.QstarTapeParams != nil {
		return true
	}

	return false
}

// SetQstarTapeParams gets a reference to the given ArchivalQstarTapeExternalTargetParams and assigns it to the QstarTapeParams field.
func (o *ArchivalExternalTargetParams) SetQstarTapeParams(v ArchivalQstarTapeExternalTargetParams) {
	o.QstarTapeParams = &v
}

// GetS3CompParams returns the S3CompParams field value if set, zero value otherwise.
func (o *ArchivalExternalTargetParams) GetS3CompParams() ArchivalS3CompExternalTargetParams {
	if o == nil || o.S3CompParams == nil {
		var ret ArchivalS3CompExternalTargetParams
		return ret
	}
	return *o.S3CompParams
}

// GetS3CompParamsOk returns a tuple with the S3CompParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalExternalTargetParams) GetS3CompParamsOk() (*ArchivalS3CompExternalTargetParams, bool) {
	if o == nil || o.S3CompParams == nil {
		return nil, false
	}
	return o.S3CompParams, true
}

// HasS3CompParams returns a boolean if a field has been set.
func (o *ArchivalExternalTargetParams) HasS3CompParams() bool {
	if o != nil && o.S3CompParams != nil {
		return true
	}

	return false
}

// SetS3CompParams gets a reference to the given ArchivalS3CompExternalTargetParams and assigns it to the S3CompParams field.
func (o *ArchivalExternalTargetParams) SetS3CompParams(v ArchivalS3CompExternalTargetParams) {
	o.S3CompParams = &v
}

func (o ArchivalExternalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["storageType"] = o.StorageType.Get()
	}
	if true {
		toSerialize["encryption"] = o.Encryption
	}
	if o.TargetBandwidthThrottlings != nil {
		toSerialize["targetBandwidthThrottlings"] = o.TargetBandwidthThrottlings
	}
	if o.AzureParams != nil {
		toSerialize["azureParams"] = o.AzureParams
	}
	if o.GcpParams != nil {
		toSerialize["gcpParams"] = o.GcpParams
	}
	if o.AwsParams != nil {
		toSerialize["awsParams"] = o.AwsParams
	}
	if o.OracleParams != nil {
		toSerialize["oracleParams"] = o.OracleParams
	}
	if o.NasParams != nil {
		toSerialize["nasParams"] = o.NasParams
	}
	if o.QstarTapeParams != nil {
		toSerialize["qstarTapeParams"] = o.QstarTapeParams
	}
	if o.S3CompParams != nil {
		toSerialize["s3CompParams"] = o.S3CompParams
	}
	return json.Marshal(toSerialize)
}

type NullableArchivalExternalTargetParams struct {
	value *ArchivalExternalTargetParams
	isSet bool
}

func (v NullableArchivalExternalTargetParams) Get() *ArchivalExternalTargetParams {
	return v.value
}

func (v *NullableArchivalExternalTargetParams) Set(val *ArchivalExternalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalExternalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalExternalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalExternalTargetParams(val *ArchivalExternalTargetParams) *NullableArchivalExternalTargetParams {
	return &NullableArchivalExternalTargetParams{value: val, isSet: true}
}

func (v NullableArchivalExternalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalExternalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


