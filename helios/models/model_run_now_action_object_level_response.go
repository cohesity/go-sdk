/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RunNowActionObjectLevelResponse Specifies the infomration about status of run now action.
type RunNowActionObjectLevelResponse struct {
	Error *Error `json:"error,omitempty"`
}

// NewRunNowActionObjectLevelResponse instantiates a new RunNowActionObjectLevelResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunNowActionObjectLevelResponse() *RunNowActionObjectLevelResponse {
	this := RunNowActionObjectLevelResponse{}
	return &this
}

// NewRunNowActionObjectLevelResponseWithDefaults instantiates a new RunNowActionObjectLevelResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunNowActionObjectLevelResponseWithDefaults() *RunNowActionObjectLevelResponse {
	this := RunNowActionObjectLevelResponse{}
	return &this
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *RunNowActionObjectLevelResponse) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunNowActionObjectLevelResponse) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *RunNowActionObjectLevelResponse) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *RunNowActionObjectLevelResponse) SetError(v Error) {
	o.Error = &v
}

func (o RunNowActionObjectLevelResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	return json.Marshal(toSerialize)
}

type NullableRunNowActionObjectLevelResponse struct {
	value *RunNowActionObjectLevelResponse
	isSet bool
}

func (v NullableRunNowActionObjectLevelResponse) Get() *RunNowActionObjectLevelResponse {
	return v.value
}

func (v *NullableRunNowActionObjectLevelResponse) Set(val *RunNowActionObjectLevelResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRunNowActionObjectLevelResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRunNowActionObjectLevelResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunNowActionObjectLevelResponse(val *RunNowActionObjectLevelResponse) *NullableRunNowActionObjectLevelResponse {
	return &NullableRunNowActionObjectLevelResponse{value: val, isSet: true}
}

func (v NullableRunNowActionObjectLevelResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunNowActionObjectLevelResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


