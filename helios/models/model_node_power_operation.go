/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// NodePowerOperation struct for NodePowerOperation
type NodePowerOperation struct {
	// The operation clould be poweroff, reboot.
	Operation NullableString `json:"operation"`
	// Id of the node to do the specified operation.
	NodeId NullableInt64 `json:"nodeId,omitempty"`
}

// NewNodePowerOperation instantiates a new NodePowerOperation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodePowerOperation(operation NullableString) *NodePowerOperation {
	this := NodePowerOperation{}
	this.Operation = operation
	return &this
}

// NewNodePowerOperationWithDefaults instantiates a new NodePowerOperation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodePowerOperationWithDefaults() *NodePowerOperation {
	this := NodePowerOperation{}
	return &this
}

// GetOperation returns the Operation field value
// If the value is explicit nil, the zero value for string will be returned
func (o *NodePowerOperation) GetOperation() string {
	if o == nil || o.Operation.Get() == nil {
		var ret string
		return ret
	}

	return *o.Operation.Get()
}

// GetOperationOk returns a tuple with the Operation field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodePowerOperation) GetOperationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Operation.Get(), o.Operation.IsSet()
}

// SetOperation sets field value
func (o *NodePowerOperation) SetOperation(v string) {
	o.Operation.Set(&v)
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodePowerOperation) GetNodeId() int64 {
	if o == nil || o.NodeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodePowerOperation) GetNodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *NodePowerOperation) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableInt64 and assigns it to the NodeId field.
func (o *NodePowerOperation) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *NodePowerOperation) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *NodePowerOperation) UnsetNodeId() {
	o.NodeId.Unset()
}

func (o NodePowerOperation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["operation"] = o.Operation.Get()
	}
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNodePowerOperation struct {
	value *NodePowerOperation
	isSet bool
}

func (v NullableNodePowerOperation) Get() *NodePowerOperation {
	return v.value
}

func (v *NullableNodePowerOperation) Set(val *NodePowerOperation) {
	v.value = val
	v.isSet = true
}

func (v NullableNodePowerOperation) IsSet() bool {
	return v.isSet
}

func (v *NullableNodePowerOperation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodePowerOperation(val *NodePowerOperation) *NullableNodePowerOperation {
	return &NullableNodePowerOperation{value: val, isSet: true}
}

func (v NullableNodePowerOperation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodePowerOperation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


