/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RetentionUnits Retention Units.
type RetentionUnits struct {
	// Specifies the retention unit.
	RetentionUnits *string `json:"retentionUnits,omitempty"`
}

// NewRetentionUnits instantiates a new RetentionUnits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetentionUnits() *RetentionUnits {
	this := RetentionUnits{}
	return &this
}

// NewRetentionUnitsWithDefaults instantiates a new RetentionUnits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetentionUnitsWithDefaults() *RetentionUnits {
	this := RetentionUnits{}
	return &this
}

// GetRetentionUnits returns the RetentionUnits field value if set, zero value otherwise.
func (o *RetentionUnits) GetRetentionUnits() string {
	if o == nil || o.RetentionUnits == nil {
		var ret string
		return ret
	}
	return *o.RetentionUnits
}

// GetRetentionUnitsOk returns a tuple with the RetentionUnits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetentionUnits) GetRetentionUnitsOk() (*string, bool) {
	if o == nil || o.RetentionUnits == nil {
		return nil, false
	}
	return o.RetentionUnits, true
}

// HasRetentionUnits returns a boolean if a field has been set.
func (o *RetentionUnits) HasRetentionUnits() bool {
	if o != nil && o.RetentionUnits != nil {
		return true
	}

	return false
}

// SetRetentionUnits gets a reference to the given string and assigns it to the RetentionUnits field.
func (o *RetentionUnits) SetRetentionUnits(v string) {
	o.RetentionUnits = &v
}

func (o RetentionUnits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RetentionUnits != nil {
		toSerialize["retentionUnits"] = o.RetentionUnits
	}
	return json.Marshal(toSerialize)
}

type NullableRetentionUnits struct {
	value *RetentionUnits
	isSet bool
}

func (v NullableRetentionUnits) Get() *RetentionUnits {
	return v.value
}

func (v *NullableRetentionUnits) Set(val *RetentionUnits) {
	v.value = val
	v.isSet = true
}

func (v NullableRetentionUnits) IsSet() bool {
	return v.isSet
}

func (v *NullableRetentionUnits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetentionUnits(val *RetentionUnits) *NullableRetentionUnits {
	return &NullableRetentionUnits{value: val, isSet: true}
}

func (v NullableRetentionUnits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetentionUnits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


