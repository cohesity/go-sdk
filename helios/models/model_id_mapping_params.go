/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// IdMappingParams Specifies the params of the user id mapping info of an Active Directory.
type IdMappingParams struct {
	// Specifies the sid of an Active Directory domain user mapping to unix root user.
	SidMappedToUnixRootUser NullableString `json:"sidMappedToUnixRootUser"`
	// Specifies the information about how the Unix and Windows users are mapped for this domain.
	UserIdMappingParams NullableUserIdMappingParams `json:"userIdMappingParams"`
}

// NewIdMappingParams instantiates a new IdMappingParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdMappingParams(sidMappedToUnixRootUser NullableString, userIdMappingParams NullableUserIdMappingParams) *IdMappingParams {
	this := IdMappingParams{}
	this.SidMappedToUnixRootUser = sidMappedToUnixRootUser
	this.UserIdMappingParams = userIdMappingParams
	return &this
}

// NewIdMappingParamsWithDefaults instantiates a new IdMappingParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdMappingParamsWithDefaults() *IdMappingParams {
	this := IdMappingParams{}
	return &this
}

// GetSidMappedToUnixRootUser returns the SidMappedToUnixRootUser field value
// If the value is explicit nil, the zero value for string will be returned
func (o *IdMappingParams) GetSidMappedToUnixRootUser() string {
	if o == nil || o.SidMappedToUnixRootUser.Get() == nil {
		var ret string
		return ret
	}

	return *o.SidMappedToUnixRootUser.Get()
}

// GetSidMappedToUnixRootUserOk returns a tuple with the SidMappedToUnixRootUser field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParams) GetSidMappedToUnixRootUserOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SidMappedToUnixRootUser.Get(), o.SidMappedToUnixRootUser.IsSet()
}

// SetSidMappedToUnixRootUser sets field value
func (o *IdMappingParams) SetSidMappedToUnixRootUser(v string) {
	o.SidMappedToUnixRootUser.Set(&v)
}

// GetUserIdMappingParams returns the UserIdMappingParams field value
// If the value is explicit nil, the zero value for UserIdMappingParams will be returned
func (o *IdMappingParams) GetUserIdMappingParams() UserIdMappingParams {
	if o == nil || o.UserIdMappingParams.Get() == nil {
		var ret UserIdMappingParams
		return ret
	}

	return *o.UserIdMappingParams.Get()
}

// GetUserIdMappingParamsOk returns a tuple with the UserIdMappingParams field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IdMappingParams) GetUserIdMappingParamsOk() (*UserIdMappingParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserIdMappingParams.Get(), o.UserIdMappingParams.IsSet()
}

// SetUserIdMappingParams sets field value
func (o *IdMappingParams) SetUserIdMappingParams(v UserIdMappingParams) {
	o.UserIdMappingParams.Set(&v)
}

func (o IdMappingParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sidMappedToUnixRootUser"] = o.SidMappedToUnixRootUser.Get()
	}
	if true {
		toSerialize["userIdMappingParams"] = o.UserIdMappingParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIdMappingParams struct {
	value *IdMappingParams
	isSet bool
}

func (v NullableIdMappingParams) Get() *IdMappingParams {
	return v.value
}

func (v *NullableIdMappingParams) Set(val *IdMappingParams) {
	v.value = val
	v.isSet = true
}

func (v NullableIdMappingParams) IsSet() bool {
	return v.isSet
}

func (v *NullableIdMappingParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdMappingParams(val *IdMappingParams) *NullableIdMappingParams {
	return &NullableIdMappingParams{value: val, isSet: true}
}

func (v NullableIdMappingParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdMappingParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


