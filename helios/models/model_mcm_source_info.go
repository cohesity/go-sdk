/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmSourceInfo Specifies the Protection Source information.
type McmSourceInfo struct {
	// Specifies the cluster id.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the cluster incarnation id.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId,omitempty"`
	// Specifies the region id.
	RegionId NullableString `json:"regionId,omitempty"`
	// Specifies the id of the Protection Source.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Specifies the registration id of the Protection Source.
	RegistrationId NullableString `json:"registrationId,omitempty"`
	RegistrationDetails *McmSourceRegistrationInfo `json:"registrationDetails,omitempty"`
	// Specifies the list of applications registered with current Source.
	Applications []string `json:"applications,omitempty"`
	// Specifies the protection statistics of the Source.
	ProtectionStats []ObjectProtectionStatsSummary `json:"protectionStats,omitempty"`
	PhysicalSourceInfo *McmPhysicalSourceInfo `json:"physicalSourceInfo,omitempty"`
}

// NewMcmSourceInfo instantiates a new McmSourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmSourceInfo() *McmSourceInfo {
	this := McmSourceInfo{}
	return &this
}

// NewMcmSourceInfoWithDefaults instantiates a new McmSourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmSourceInfoWithDefaults() *McmSourceInfo {
	this := McmSourceInfo{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceInfo) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceInfo) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *McmSourceInfo) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *McmSourceInfo) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *McmSourceInfo) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *McmSourceInfo) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceInfo) GetClusterIncarnationId() int64 {
	if o == nil || o.ClusterIncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceInfo) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *McmSourceInfo) HasClusterIncarnationId() bool {
	if o != nil && o.ClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the ClusterIncarnationId field.
func (o *McmSourceInfo) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}
// SetClusterIncarnationIdNil sets the value for ClusterIncarnationId to be an explicit nil
func (o *McmSourceInfo) SetClusterIncarnationIdNil() {
	o.ClusterIncarnationId.Set(nil)
}

// UnsetClusterIncarnationId ensures that no value is present for ClusterIncarnationId, not even an explicit nil
func (o *McmSourceInfo) UnsetClusterIncarnationId() {
	o.ClusterIncarnationId.Unset()
}

// GetRegionId returns the RegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceInfo) GetRegionId() string {
	if o == nil || o.RegionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegionId.Get()
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceInfo) GetRegionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegionId.Get(), o.RegionId.IsSet()
}

// HasRegionId returns a boolean if a field has been set.
func (o *McmSourceInfo) HasRegionId() bool {
	if o != nil && o.RegionId.IsSet() {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given NullableString and assigns it to the RegionId field.
func (o *McmSourceInfo) SetRegionId(v string) {
	o.RegionId.Set(&v)
}
// SetRegionIdNil sets the value for RegionId to be an explicit nil
func (o *McmSourceInfo) SetRegionIdNil() {
	o.RegionId.Set(nil)
}

// UnsetRegionId ensures that no value is present for RegionId, not even an explicit nil
func (o *McmSourceInfo) UnsetRegionId() {
	o.RegionId.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceInfo) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceInfo) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *McmSourceInfo) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *McmSourceInfo) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *McmSourceInfo) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *McmSourceInfo) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetRegistrationId returns the RegistrationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceInfo) GetRegistrationId() string {
	if o == nil || o.RegistrationId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegistrationId.Get()
}

// GetRegistrationIdOk returns a tuple with the RegistrationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceInfo) GetRegistrationIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegistrationId.Get(), o.RegistrationId.IsSet()
}

// HasRegistrationId returns a boolean if a field has been set.
func (o *McmSourceInfo) HasRegistrationId() bool {
	if o != nil && o.RegistrationId.IsSet() {
		return true
	}

	return false
}

// SetRegistrationId gets a reference to the given NullableString and assigns it to the RegistrationId field.
func (o *McmSourceInfo) SetRegistrationId(v string) {
	o.RegistrationId.Set(&v)
}
// SetRegistrationIdNil sets the value for RegistrationId to be an explicit nil
func (o *McmSourceInfo) SetRegistrationIdNil() {
	o.RegistrationId.Set(nil)
}

// UnsetRegistrationId ensures that no value is present for RegistrationId, not even an explicit nil
func (o *McmSourceInfo) UnsetRegistrationId() {
	o.RegistrationId.Unset()
}

// GetRegistrationDetails returns the RegistrationDetails field value if set, zero value otherwise.
func (o *McmSourceInfo) GetRegistrationDetails() McmSourceRegistrationInfo {
	if o == nil || o.RegistrationDetails == nil {
		var ret McmSourceRegistrationInfo
		return ret
	}
	return *o.RegistrationDetails
}

// GetRegistrationDetailsOk returns a tuple with the RegistrationDetails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceInfo) GetRegistrationDetailsOk() (*McmSourceRegistrationInfo, bool) {
	if o == nil || o.RegistrationDetails == nil {
		return nil, false
	}
	return o.RegistrationDetails, true
}

// HasRegistrationDetails returns a boolean if a field has been set.
func (o *McmSourceInfo) HasRegistrationDetails() bool {
	if o != nil && o.RegistrationDetails != nil {
		return true
	}

	return false
}

// SetRegistrationDetails gets a reference to the given McmSourceRegistrationInfo and assigns it to the RegistrationDetails field.
func (o *McmSourceInfo) SetRegistrationDetails(v McmSourceRegistrationInfo) {
	o.RegistrationDetails = &v
}

// GetApplications returns the Applications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceInfo) GetApplications() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceInfo) GetApplicationsOk() (*[]string, bool) {
	if o == nil || o.Applications == nil {
		return nil, false
	}
	return &o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *McmSourceInfo) HasApplications() bool {
	if o != nil && o.Applications != nil {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []string and assigns it to the Applications field.
func (o *McmSourceInfo) SetApplications(v []string) {
	o.Applications = v
}

// GetProtectionStats returns the ProtectionStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceInfo) GetProtectionStats() []ObjectProtectionStatsSummary {
	if o == nil  {
		var ret []ObjectProtectionStatsSummary
		return ret
	}
	return o.ProtectionStats
}

// GetProtectionStatsOk returns a tuple with the ProtectionStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceInfo) GetProtectionStatsOk() (*[]ObjectProtectionStatsSummary, bool) {
	if o == nil || o.ProtectionStats == nil {
		return nil, false
	}
	return &o.ProtectionStats, true
}

// HasProtectionStats returns a boolean if a field has been set.
func (o *McmSourceInfo) HasProtectionStats() bool {
	if o != nil && o.ProtectionStats != nil {
		return true
	}

	return false
}

// SetProtectionStats gets a reference to the given []ObjectProtectionStatsSummary and assigns it to the ProtectionStats field.
func (o *McmSourceInfo) SetProtectionStats(v []ObjectProtectionStatsSummary) {
	o.ProtectionStats = v
}

// GetPhysicalSourceInfo returns the PhysicalSourceInfo field value if set, zero value otherwise.
func (o *McmSourceInfo) GetPhysicalSourceInfo() McmPhysicalSourceInfo {
	if o == nil || o.PhysicalSourceInfo == nil {
		var ret McmPhysicalSourceInfo
		return ret
	}
	return *o.PhysicalSourceInfo
}

// GetPhysicalSourceInfoOk returns a tuple with the PhysicalSourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceInfo) GetPhysicalSourceInfoOk() (*McmPhysicalSourceInfo, bool) {
	if o == nil || o.PhysicalSourceInfo == nil {
		return nil, false
	}
	return o.PhysicalSourceInfo, true
}

// HasPhysicalSourceInfo returns a boolean if a field has been set.
func (o *McmSourceInfo) HasPhysicalSourceInfo() bool {
	if o != nil && o.PhysicalSourceInfo != nil {
		return true
	}

	return false
}

// SetPhysicalSourceInfo gets a reference to the given McmPhysicalSourceInfo and assigns it to the PhysicalSourceInfo field.
func (o *McmSourceInfo) SetPhysicalSourceInfo(v McmPhysicalSourceInfo) {
	o.PhysicalSourceInfo = &v
}

func (o McmSourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterIncarnationId.IsSet() {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if o.RegionId.IsSet() {
		toSerialize["regionId"] = o.RegionId.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.RegistrationId.IsSet() {
		toSerialize["registrationId"] = o.RegistrationId.Get()
	}
	if o.RegistrationDetails != nil {
		toSerialize["registrationDetails"] = o.RegistrationDetails
	}
	if o.Applications != nil {
		toSerialize["applications"] = o.Applications
	}
	if o.ProtectionStats != nil {
		toSerialize["protectionStats"] = o.ProtectionStats
	}
	if o.PhysicalSourceInfo != nil {
		toSerialize["physicalSourceInfo"] = o.PhysicalSourceInfo
	}
	return json.Marshal(toSerialize)
}

type NullableMcmSourceInfo struct {
	value *McmSourceInfo
	isSet bool
}

func (v NullableMcmSourceInfo) Get() *McmSourceInfo {
	return v.value
}

func (v *NullableMcmSourceInfo) Set(val *McmSourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmSourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmSourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmSourceInfo(val *McmSourceInfo) *NullableMcmSourceInfo {
	return &NullableMcmSourceInfo{value: val, isSet: true}
}

func (v NullableMcmSourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmSourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


