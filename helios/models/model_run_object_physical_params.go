/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RunObjectPhysicalParams Specifies physical parameters for this run.
type RunObjectPhysicalParams struct {
	// Specifies metadata file path during run-now requests for physical file based backups for some specific source. If specified, it will override any default metadata/directive file path set at the object level for the source. Also note that if the job default does not specify a metadata/directive file path for the source, then specifying this field for that source during run-now request will be rejected.
	MetadataFilePath NullableString `json:"metadataFilePath,omitempty"`
}

// NewRunObjectPhysicalParams instantiates a new RunObjectPhysicalParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunObjectPhysicalParams() *RunObjectPhysicalParams {
	this := RunObjectPhysicalParams{}
	return &this
}

// NewRunObjectPhysicalParamsWithDefaults instantiates a new RunObjectPhysicalParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunObjectPhysicalParamsWithDefaults() *RunObjectPhysicalParams {
	this := RunObjectPhysicalParams{}
	return &this
}

// GetMetadataFilePath returns the MetadataFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RunObjectPhysicalParams) GetMetadataFilePath() string {
	if o == nil || o.MetadataFilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetadataFilePath.Get()
}

// GetMetadataFilePathOk returns a tuple with the MetadataFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunObjectPhysicalParams) GetMetadataFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetadataFilePath.Get(), o.MetadataFilePath.IsSet()
}

// HasMetadataFilePath returns a boolean if a field has been set.
func (o *RunObjectPhysicalParams) HasMetadataFilePath() bool {
	if o != nil && o.MetadataFilePath.IsSet() {
		return true
	}

	return false
}

// SetMetadataFilePath gets a reference to the given NullableString and assigns it to the MetadataFilePath field.
func (o *RunObjectPhysicalParams) SetMetadataFilePath(v string) {
	o.MetadataFilePath.Set(&v)
}
// SetMetadataFilePathNil sets the value for MetadataFilePath to be an explicit nil
func (o *RunObjectPhysicalParams) SetMetadataFilePathNil() {
	o.MetadataFilePath.Set(nil)
}

// UnsetMetadataFilePath ensures that no value is present for MetadataFilePath, not even an explicit nil
func (o *RunObjectPhysicalParams) UnsetMetadataFilePath() {
	o.MetadataFilePath.Unset()
}

func (o RunObjectPhysicalParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MetadataFilePath.IsSet() {
		toSerialize["metadataFilePath"] = o.MetadataFilePath.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRunObjectPhysicalParams struct {
	value *RunObjectPhysicalParams
	isSet bool
}

func (v NullableRunObjectPhysicalParams) Get() *RunObjectPhysicalParams {
	return v.value
}

func (v *NullableRunObjectPhysicalParams) Set(val *RunObjectPhysicalParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRunObjectPhysicalParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRunObjectPhysicalParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunObjectPhysicalParams(val *RunObjectPhysicalParams) *NullableRunObjectPhysicalParams {
	return &NullableRunObjectPhysicalParams{value: val, isSet: true}
}

func (v NullableRunObjectPhysicalParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunObjectPhysicalParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


