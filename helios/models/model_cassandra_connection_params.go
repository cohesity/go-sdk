/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CassandraConnectionParams Specifies the parameters to connect to a Cassandra seed node and fetch information from its cassandra config file.
type CassandraConnectionParams struct {
	// Any one seed node of the Cassandra cluster.
	SeedNode string `json:"seedNode"`
	// Directory path containing Cassandra configuration YAML file.
	ConfigDirectory string `json:"configDirectory"`
	// Directory from where DSE specific configuration can be read. This should be set only when you are using the DSE distribution of Cassandra.
	DseConfigurationDirectory NullableString `json:"dseConfigurationDirectory,omitempty"`
	// Set to true if this cluster has DSE tiered storage.
	IsDseTieredStorage bool `json:"isDseTieredStorage"`
	// Set to true if this cluster has DSE Authenticator.
	IsDseAuthenticator bool `json:"isDseAuthenticator"`
	SshPasswordCredentials NullableCassandraConnectionParamsSshPasswordCredentials `json:"sshPasswordCredentials,omitempty"`
	SshPrivateKeyCredentials NullableCassandraConnectionParamsSshPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
}

// NewCassandraConnectionParams instantiates a new CassandraConnectionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCassandraConnectionParams(seedNode string, configDirectory string, isDseTieredStorage bool, isDseAuthenticator bool) *CassandraConnectionParams {
	this := CassandraConnectionParams{}
	this.SeedNode = seedNode
	this.ConfigDirectory = configDirectory
	this.IsDseTieredStorage = isDseTieredStorage
	this.IsDseAuthenticator = isDseAuthenticator
	return &this
}

// NewCassandraConnectionParamsWithDefaults instantiates a new CassandraConnectionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCassandraConnectionParamsWithDefaults() *CassandraConnectionParams {
	this := CassandraConnectionParams{}
	return &this
}

// GetSeedNode returns the SeedNode field value
func (o *CassandraConnectionParams) GetSeedNode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SeedNode
}

// GetSeedNodeOk returns a tuple with the SeedNode field value
// and a boolean to check if the value has been set.
func (o *CassandraConnectionParams) GetSeedNodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SeedNode, true
}

// SetSeedNode sets field value
func (o *CassandraConnectionParams) SetSeedNode(v string) {
	o.SeedNode = v
}

// GetConfigDirectory returns the ConfigDirectory field value
func (o *CassandraConnectionParams) GetConfigDirectory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigDirectory
}

// GetConfigDirectoryOk returns a tuple with the ConfigDirectory field value
// and a boolean to check if the value has been set.
func (o *CassandraConnectionParams) GetConfigDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigDirectory, true
}

// SetConfigDirectory sets field value
func (o *CassandraConnectionParams) SetConfigDirectory(v string) {
	o.ConfigDirectory = v
}

// GetDseConfigurationDirectory returns the DseConfigurationDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectionParams) GetDseConfigurationDirectory() string {
	if o == nil || o.DseConfigurationDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.DseConfigurationDirectory.Get()
}

// GetDseConfigurationDirectoryOk returns a tuple with the DseConfigurationDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectionParams) GetDseConfigurationDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DseConfigurationDirectory.Get(), o.DseConfigurationDirectory.IsSet()
}

// HasDseConfigurationDirectory returns a boolean if a field has been set.
func (o *CassandraConnectionParams) HasDseConfigurationDirectory() bool {
	if o != nil && o.DseConfigurationDirectory.IsSet() {
		return true
	}

	return false
}

// SetDseConfigurationDirectory gets a reference to the given NullableString and assigns it to the DseConfigurationDirectory field.
func (o *CassandraConnectionParams) SetDseConfigurationDirectory(v string) {
	o.DseConfigurationDirectory.Set(&v)
}
// SetDseConfigurationDirectoryNil sets the value for DseConfigurationDirectory to be an explicit nil
func (o *CassandraConnectionParams) SetDseConfigurationDirectoryNil() {
	o.DseConfigurationDirectory.Set(nil)
}

// UnsetDseConfigurationDirectory ensures that no value is present for DseConfigurationDirectory, not even an explicit nil
func (o *CassandraConnectionParams) UnsetDseConfigurationDirectory() {
	o.DseConfigurationDirectory.Unset()
}

// GetIsDseTieredStorage returns the IsDseTieredStorage field value
func (o *CassandraConnectionParams) GetIsDseTieredStorage() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDseTieredStorage
}

// GetIsDseTieredStorageOk returns a tuple with the IsDseTieredStorage field value
// and a boolean to check if the value has been set.
func (o *CassandraConnectionParams) GetIsDseTieredStorageOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsDseTieredStorage, true
}

// SetIsDseTieredStorage sets field value
func (o *CassandraConnectionParams) SetIsDseTieredStorage(v bool) {
	o.IsDseTieredStorage = v
}

// GetIsDseAuthenticator returns the IsDseAuthenticator field value
func (o *CassandraConnectionParams) GetIsDseAuthenticator() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsDseAuthenticator
}

// GetIsDseAuthenticatorOk returns a tuple with the IsDseAuthenticator field value
// and a boolean to check if the value has been set.
func (o *CassandraConnectionParams) GetIsDseAuthenticatorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.IsDseAuthenticator, true
}

// SetIsDseAuthenticator sets field value
func (o *CassandraConnectionParams) SetIsDseAuthenticator(v bool) {
	o.IsDseAuthenticator = v
}

// GetSshPasswordCredentials returns the SshPasswordCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectionParams) GetSshPasswordCredentials() CassandraConnectionParamsSshPasswordCredentials {
	if o == nil || o.SshPasswordCredentials.Get() == nil {
		var ret CassandraConnectionParamsSshPasswordCredentials
		return ret
	}
	return *o.SshPasswordCredentials.Get()
}

// GetSshPasswordCredentialsOk returns a tuple with the SshPasswordCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectionParams) GetSshPasswordCredentialsOk() (*CassandraConnectionParamsSshPasswordCredentials, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshPasswordCredentials.Get(), o.SshPasswordCredentials.IsSet()
}

// HasSshPasswordCredentials returns a boolean if a field has been set.
func (o *CassandraConnectionParams) HasSshPasswordCredentials() bool {
	if o != nil && o.SshPasswordCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshPasswordCredentials gets a reference to the given NullableCassandraConnectionParamsSshPasswordCredentials and assigns it to the SshPasswordCredentials field.
func (o *CassandraConnectionParams) SetSshPasswordCredentials(v CassandraConnectionParamsSshPasswordCredentials) {
	o.SshPasswordCredentials.Set(&v)
}
// SetSshPasswordCredentialsNil sets the value for SshPasswordCredentials to be an explicit nil
func (o *CassandraConnectionParams) SetSshPasswordCredentialsNil() {
	o.SshPasswordCredentials.Set(nil)
}

// UnsetSshPasswordCredentials ensures that no value is present for SshPasswordCredentials, not even an explicit nil
func (o *CassandraConnectionParams) UnsetSshPasswordCredentials() {
	o.SshPasswordCredentials.Unset()
}

// GetSshPrivateKeyCredentials returns the SshPrivateKeyCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraConnectionParams) GetSshPrivateKeyCredentials() CassandraConnectionParamsSshPrivateKeyCredentials {
	if o == nil || o.SshPrivateKeyCredentials.Get() == nil {
		var ret CassandraConnectionParamsSshPrivateKeyCredentials
		return ret
	}
	return *o.SshPrivateKeyCredentials.Get()
}

// GetSshPrivateKeyCredentialsOk returns a tuple with the SshPrivateKeyCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraConnectionParams) GetSshPrivateKeyCredentialsOk() (*CassandraConnectionParamsSshPrivateKeyCredentials, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshPrivateKeyCredentials.Get(), o.SshPrivateKeyCredentials.IsSet()
}

// HasSshPrivateKeyCredentials returns a boolean if a field has been set.
func (o *CassandraConnectionParams) HasSshPrivateKeyCredentials() bool {
	if o != nil && o.SshPrivateKeyCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshPrivateKeyCredentials gets a reference to the given NullableCassandraConnectionParamsSshPrivateKeyCredentials and assigns it to the SshPrivateKeyCredentials field.
func (o *CassandraConnectionParams) SetSshPrivateKeyCredentials(v CassandraConnectionParamsSshPrivateKeyCredentials) {
	o.SshPrivateKeyCredentials.Set(&v)
}
// SetSshPrivateKeyCredentialsNil sets the value for SshPrivateKeyCredentials to be an explicit nil
func (o *CassandraConnectionParams) SetSshPrivateKeyCredentialsNil() {
	o.SshPrivateKeyCredentials.Set(nil)
}

// UnsetSshPrivateKeyCredentials ensures that no value is present for SshPrivateKeyCredentials, not even an explicit nil
func (o *CassandraConnectionParams) UnsetSshPrivateKeyCredentials() {
	o.SshPrivateKeyCredentials.Unset()
}

func (o CassandraConnectionParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["seedNode"] = o.SeedNode
	}
	if true {
		toSerialize["configDirectory"] = o.ConfigDirectory
	}
	if o.DseConfigurationDirectory.IsSet() {
		toSerialize["dseConfigurationDirectory"] = o.DseConfigurationDirectory.Get()
	}
	if true {
		toSerialize["isDseTieredStorage"] = o.IsDseTieredStorage
	}
	if true {
		toSerialize["isDseAuthenticator"] = o.IsDseAuthenticator
	}
	if o.SshPasswordCredentials.IsSet() {
		toSerialize["sshPasswordCredentials"] = o.SshPasswordCredentials.Get()
	}
	if o.SshPrivateKeyCredentials.IsSet() {
		toSerialize["sshPrivateKeyCredentials"] = o.SshPrivateKeyCredentials.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCassandraConnectionParams struct {
	value *CassandraConnectionParams
	isSet bool
}

func (v NullableCassandraConnectionParams) Get() *CassandraConnectionParams {
	return v.value
}

func (v *NullableCassandraConnectionParams) Set(val *CassandraConnectionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCassandraConnectionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCassandraConnectionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCassandraConnectionParams(val *CassandraConnectionParams) *NullableCassandraConnectionParams {
	return &NullableCassandraConnectionParams{value: val, isSet: true}
}

func (v NullableCassandraConnectionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCassandraConnectionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


