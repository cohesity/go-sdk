/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// VmwareObjectEntityParams Object details for Vmware.
type VmwareObjectEntityParams struct {
	// VMware Object type.
	Type NullableString `json:"type,omitempty"`
	CdpInfo *VmwareCdpObject `json:"cdpInfo,omitempty"`
	// Specifies if the object is a VM template.
	IsTemplate NullableBool `json:"isTemplate,omitempty"`
}

// NewVmwareObjectEntityParams instantiates a new VmwareObjectEntityParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmwareObjectEntityParams() *VmwareObjectEntityParams {
	this := VmwareObjectEntityParams{}
	return &this
}

// NewVmwareObjectEntityParamsWithDefaults instantiates a new VmwareObjectEntityParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmwareObjectEntityParamsWithDefaults() *VmwareObjectEntityParams {
	this := VmwareObjectEntityParams{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareObjectEntityParams) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareObjectEntityParams) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *VmwareObjectEntityParams) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *VmwareObjectEntityParams) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *VmwareObjectEntityParams) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *VmwareObjectEntityParams) UnsetType() {
	o.Type.Unset()
}

// GetCdpInfo returns the CdpInfo field value if set, zero value otherwise.
func (o *VmwareObjectEntityParams) GetCdpInfo() VmwareCdpObject {
	if o == nil || o.CdpInfo == nil {
		var ret VmwareCdpObject
		return ret
	}
	return *o.CdpInfo
}

// GetCdpInfoOk returns a tuple with the CdpInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VmwareObjectEntityParams) GetCdpInfoOk() (*VmwareCdpObject, bool) {
	if o == nil || o.CdpInfo == nil {
		return nil, false
	}
	return o.CdpInfo, true
}

// HasCdpInfo returns a boolean if a field has been set.
func (o *VmwareObjectEntityParams) HasCdpInfo() bool {
	if o != nil && o.CdpInfo != nil {
		return true
	}

	return false
}

// SetCdpInfo gets a reference to the given VmwareCdpObject and assigns it to the CdpInfo field.
func (o *VmwareObjectEntityParams) SetCdpInfo(v VmwareCdpObject) {
	o.CdpInfo = &v
}

// GetIsTemplate returns the IsTemplate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmwareObjectEntityParams) GetIsTemplate() bool {
	if o == nil || o.IsTemplate.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsTemplate.Get()
}

// GetIsTemplateOk returns a tuple with the IsTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmwareObjectEntityParams) GetIsTemplateOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsTemplate.Get(), o.IsTemplate.IsSet()
}

// HasIsTemplate returns a boolean if a field has been set.
func (o *VmwareObjectEntityParams) HasIsTemplate() bool {
	if o != nil && o.IsTemplate.IsSet() {
		return true
	}

	return false
}

// SetIsTemplate gets a reference to the given NullableBool and assigns it to the IsTemplate field.
func (o *VmwareObjectEntityParams) SetIsTemplate(v bool) {
	o.IsTemplate.Set(&v)
}
// SetIsTemplateNil sets the value for IsTemplate to be an explicit nil
func (o *VmwareObjectEntityParams) SetIsTemplateNil() {
	o.IsTemplate.Set(nil)
}

// UnsetIsTemplate ensures that no value is present for IsTemplate, not even an explicit nil
func (o *VmwareObjectEntityParams) UnsetIsTemplate() {
	o.IsTemplate.Unset()
}

func (o VmwareObjectEntityParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.CdpInfo != nil {
		toSerialize["cdpInfo"] = o.CdpInfo
	}
	if o.IsTemplate.IsSet() {
		toSerialize["isTemplate"] = o.IsTemplate.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVmwareObjectEntityParams struct {
	value *VmwareObjectEntityParams
	isSet bool
}

func (v NullableVmwareObjectEntityParams) Get() *VmwareObjectEntityParams {
	return v.value
}

func (v *NullableVmwareObjectEntityParams) Set(val *VmwareObjectEntityParams) {
	v.value = val
	v.isSet = true
}

func (v NullableVmwareObjectEntityParams) IsSet() bool {
	return v.isSet
}

func (v *NullableVmwareObjectEntityParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmwareObjectEntityParams(val *VmwareObjectEntityParams) *NullableVmwareObjectEntityParams {
	return &NullableVmwareObjectEntityParams{value: val, isSet: true}
}

func (v NullableVmwareObjectEntityParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmwareObjectEntityParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


