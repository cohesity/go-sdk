/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ArchivalAwsExternalTargetParams Specifies the common parameters which are specific to AWS related External Targets.
type ArchivalAwsExternalTargetParams struct {
	// Specifies bucket name of the External Target.
	BucketName NullableString `json:"bucketName"`
	// Specifies region of the External Target.
	Region NullableString `json:"region"`
	// Specifies the AWS External Target storage class.
	StorageClass NullableString `json:"storageClass"`
	// Specifies the Source Side Deduplication setting for the AWS external target
	SourceSideDeduplication NullableBool `json:"sourceSideDeduplication,omitempty"`
	// Specifies if Incremental Archival setting is enabled or not.
	IsIncrementalArchivalEnabled NullableBool `json:"isIncrementalArchivalEnabled,omitempty"`
	// Specifies if Forever Incremental Archival setting is enabled or not.
	IsForeverIncrementalArchivalEnabled NullableBool `json:"isForeverIncrementalArchivalEnabled,omitempty"`
	AwsS3StandardParams *AwsS3StandardParams `json:"awsS3StandardParams,omitempty"`
	AwsS3StandardIAParams *AwsS3StandardIAParams `json:"awsS3StandardIAParams,omitempty"`
	AwsS3OneZoneIAParams *AwsS3OneZoneIAParams `json:"awsS3OneZoneIAParams,omitempty"`
	AwsS3IntelligentParams *AwsS3IntelligentParams `json:"awsS3IntelligentParams,omitempty"`
	AwsS3GlacierParams *AwsS3GlacierParams `json:"awsS3GlacierParams,omitempty"`
	AwsS3GlacierDeepArchiveParams *AwsS3GlacierDeepArchiveParams `json:"awsS3GlacierDeepArchiveParams,omitempty"`
	AwsGlacierParams *AwsGlacierParams `json:"awsGlacierParams,omitempty"`
}

// NewArchivalAwsExternalTargetParams instantiates a new ArchivalAwsExternalTargetParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalAwsExternalTargetParams(bucketName NullableString, region NullableString, storageClass NullableString) *ArchivalAwsExternalTargetParams {
	this := ArchivalAwsExternalTargetParams{}
	this.BucketName = bucketName
	this.Region = region
	this.StorageClass = storageClass
	return &this
}

// NewArchivalAwsExternalTargetParamsWithDefaults instantiates a new ArchivalAwsExternalTargetParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalAwsExternalTargetParamsWithDefaults() *ArchivalAwsExternalTargetParams {
	this := ArchivalAwsExternalTargetParams{}
	return &this
}

// GetBucketName returns the BucketName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalAwsExternalTargetParams) GetBucketName() string {
	if o == nil || o.BucketName.Get() == nil {
		var ret string
		return ret
	}

	return *o.BucketName.Get()
}

// GetBucketNameOk returns a tuple with the BucketName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAwsExternalTargetParams) GetBucketNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BucketName.Get(), o.BucketName.IsSet()
}

// SetBucketName sets field value
func (o *ArchivalAwsExternalTargetParams) SetBucketName(v string) {
	o.BucketName.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalAwsExternalTargetParams) GetRegion() string {
	if o == nil || o.Region.Get() == nil {
		var ret string
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAwsExternalTargetParams) GetRegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *ArchivalAwsExternalTargetParams) SetRegion(v string) {
	o.Region.Set(&v)
}

// GetStorageClass returns the StorageClass field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ArchivalAwsExternalTargetParams) GetStorageClass() string {
	if o == nil || o.StorageClass.Get() == nil {
		var ret string
		return ret
	}

	return *o.StorageClass.Get()
}

// GetStorageClassOk returns a tuple with the StorageClass field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAwsExternalTargetParams) GetStorageClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageClass.Get(), o.StorageClass.IsSet()
}

// SetStorageClass sets field value
func (o *ArchivalAwsExternalTargetParams) SetStorageClass(v string) {
	o.StorageClass.Set(&v)
}

// GetSourceSideDeduplication returns the SourceSideDeduplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalAwsExternalTargetParams) GetSourceSideDeduplication() bool {
	if o == nil || o.SourceSideDeduplication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SourceSideDeduplication.Get()
}

// GetSourceSideDeduplicationOk returns a tuple with the SourceSideDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAwsExternalTargetParams) GetSourceSideDeduplicationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceSideDeduplication.Get(), o.SourceSideDeduplication.IsSet()
}

// HasSourceSideDeduplication returns a boolean if a field has been set.
func (o *ArchivalAwsExternalTargetParams) HasSourceSideDeduplication() bool {
	if o != nil && o.SourceSideDeduplication.IsSet() {
		return true
	}

	return false
}

// SetSourceSideDeduplication gets a reference to the given NullableBool and assigns it to the SourceSideDeduplication field.
func (o *ArchivalAwsExternalTargetParams) SetSourceSideDeduplication(v bool) {
	o.SourceSideDeduplication.Set(&v)
}
// SetSourceSideDeduplicationNil sets the value for SourceSideDeduplication to be an explicit nil
func (o *ArchivalAwsExternalTargetParams) SetSourceSideDeduplicationNil() {
	o.SourceSideDeduplication.Set(nil)
}

// UnsetSourceSideDeduplication ensures that no value is present for SourceSideDeduplication, not even an explicit nil
func (o *ArchivalAwsExternalTargetParams) UnsetSourceSideDeduplication() {
	o.SourceSideDeduplication.Unset()
}

// GetIsIncrementalArchivalEnabled returns the IsIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalAwsExternalTargetParams) GetIsIncrementalArchivalEnabled() bool {
	if o == nil || o.IsIncrementalArchivalEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsIncrementalArchivalEnabled.Get()
}

// GetIsIncrementalArchivalEnabledOk returns a tuple with the IsIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAwsExternalTargetParams) GetIsIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsIncrementalArchivalEnabled.Get(), o.IsIncrementalArchivalEnabled.IsSet()
}

// HasIsIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalAwsExternalTargetParams) HasIsIncrementalArchivalEnabled() bool {
	if o != nil && o.IsIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsIncrementalArchivalEnabled field.
func (o *ArchivalAwsExternalTargetParams) SetIsIncrementalArchivalEnabled(v bool) {
	o.IsIncrementalArchivalEnabled.Set(&v)
}
// SetIsIncrementalArchivalEnabledNil sets the value for IsIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalAwsExternalTargetParams) SetIsIncrementalArchivalEnabledNil() {
	o.IsIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsIncrementalArchivalEnabled ensures that no value is present for IsIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalAwsExternalTargetParams) UnsetIsIncrementalArchivalEnabled() {
	o.IsIncrementalArchivalEnabled.Unset()
}

// GetIsForeverIncrementalArchivalEnabled returns the IsForeverIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalAwsExternalTargetParams) GetIsForeverIncrementalArchivalEnabled() bool {
	if o == nil || o.IsForeverIncrementalArchivalEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsForeverIncrementalArchivalEnabled.Get()
}

// GetIsForeverIncrementalArchivalEnabledOk returns a tuple with the IsForeverIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalAwsExternalTargetParams) GetIsForeverIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsForeverIncrementalArchivalEnabled.Get(), o.IsForeverIncrementalArchivalEnabled.IsSet()
}

// HasIsForeverIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalAwsExternalTargetParams) HasIsForeverIncrementalArchivalEnabled() bool {
	if o != nil && o.IsForeverIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsForeverIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsForeverIncrementalArchivalEnabled field.
func (o *ArchivalAwsExternalTargetParams) SetIsForeverIncrementalArchivalEnabled(v bool) {
	o.IsForeverIncrementalArchivalEnabled.Set(&v)
}
// SetIsForeverIncrementalArchivalEnabledNil sets the value for IsForeverIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalAwsExternalTargetParams) SetIsForeverIncrementalArchivalEnabledNil() {
	o.IsForeverIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsForeverIncrementalArchivalEnabled ensures that no value is present for IsForeverIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalAwsExternalTargetParams) UnsetIsForeverIncrementalArchivalEnabled() {
	o.IsForeverIncrementalArchivalEnabled.Unset()
}

// GetAwsS3StandardParams returns the AwsS3StandardParams field value if set, zero value otherwise.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3StandardParams() AwsS3StandardParams {
	if o == nil || o.AwsS3StandardParams == nil {
		var ret AwsS3StandardParams
		return ret
	}
	return *o.AwsS3StandardParams
}

// GetAwsS3StandardParamsOk returns a tuple with the AwsS3StandardParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3StandardParamsOk() (*AwsS3StandardParams, bool) {
	if o == nil || o.AwsS3StandardParams == nil {
		return nil, false
	}
	return o.AwsS3StandardParams, true
}

// HasAwsS3StandardParams returns a boolean if a field has been set.
func (o *ArchivalAwsExternalTargetParams) HasAwsS3StandardParams() bool {
	if o != nil && o.AwsS3StandardParams != nil {
		return true
	}

	return false
}

// SetAwsS3StandardParams gets a reference to the given AwsS3StandardParams and assigns it to the AwsS3StandardParams field.
func (o *ArchivalAwsExternalTargetParams) SetAwsS3StandardParams(v AwsS3StandardParams) {
	o.AwsS3StandardParams = &v
}

// GetAwsS3StandardIAParams returns the AwsS3StandardIAParams field value if set, zero value otherwise.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3StandardIAParams() AwsS3StandardIAParams {
	if o == nil || o.AwsS3StandardIAParams == nil {
		var ret AwsS3StandardIAParams
		return ret
	}
	return *o.AwsS3StandardIAParams
}

// GetAwsS3StandardIAParamsOk returns a tuple with the AwsS3StandardIAParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3StandardIAParamsOk() (*AwsS3StandardIAParams, bool) {
	if o == nil || o.AwsS3StandardIAParams == nil {
		return nil, false
	}
	return o.AwsS3StandardIAParams, true
}

// HasAwsS3StandardIAParams returns a boolean if a field has been set.
func (o *ArchivalAwsExternalTargetParams) HasAwsS3StandardIAParams() bool {
	if o != nil && o.AwsS3StandardIAParams != nil {
		return true
	}

	return false
}

// SetAwsS3StandardIAParams gets a reference to the given AwsS3StandardIAParams and assigns it to the AwsS3StandardIAParams field.
func (o *ArchivalAwsExternalTargetParams) SetAwsS3StandardIAParams(v AwsS3StandardIAParams) {
	o.AwsS3StandardIAParams = &v
}

// GetAwsS3OneZoneIAParams returns the AwsS3OneZoneIAParams field value if set, zero value otherwise.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3OneZoneIAParams() AwsS3OneZoneIAParams {
	if o == nil || o.AwsS3OneZoneIAParams == nil {
		var ret AwsS3OneZoneIAParams
		return ret
	}
	return *o.AwsS3OneZoneIAParams
}

// GetAwsS3OneZoneIAParamsOk returns a tuple with the AwsS3OneZoneIAParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3OneZoneIAParamsOk() (*AwsS3OneZoneIAParams, bool) {
	if o == nil || o.AwsS3OneZoneIAParams == nil {
		return nil, false
	}
	return o.AwsS3OneZoneIAParams, true
}

// HasAwsS3OneZoneIAParams returns a boolean if a field has been set.
func (o *ArchivalAwsExternalTargetParams) HasAwsS3OneZoneIAParams() bool {
	if o != nil && o.AwsS3OneZoneIAParams != nil {
		return true
	}

	return false
}

// SetAwsS3OneZoneIAParams gets a reference to the given AwsS3OneZoneIAParams and assigns it to the AwsS3OneZoneIAParams field.
func (o *ArchivalAwsExternalTargetParams) SetAwsS3OneZoneIAParams(v AwsS3OneZoneIAParams) {
	o.AwsS3OneZoneIAParams = &v
}

// GetAwsS3IntelligentParams returns the AwsS3IntelligentParams field value if set, zero value otherwise.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3IntelligentParams() AwsS3IntelligentParams {
	if o == nil || o.AwsS3IntelligentParams == nil {
		var ret AwsS3IntelligentParams
		return ret
	}
	return *o.AwsS3IntelligentParams
}

// GetAwsS3IntelligentParamsOk returns a tuple with the AwsS3IntelligentParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3IntelligentParamsOk() (*AwsS3IntelligentParams, bool) {
	if o == nil || o.AwsS3IntelligentParams == nil {
		return nil, false
	}
	return o.AwsS3IntelligentParams, true
}

// HasAwsS3IntelligentParams returns a boolean if a field has been set.
func (o *ArchivalAwsExternalTargetParams) HasAwsS3IntelligentParams() bool {
	if o != nil && o.AwsS3IntelligentParams != nil {
		return true
	}

	return false
}

// SetAwsS3IntelligentParams gets a reference to the given AwsS3IntelligentParams and assigns it to the AwsS3IntelligentParams field.
func (o *ArchivalAwsExternalTargetParams) SetAwsS3IntelligentParams(v AwsS3IntelligentParams) {
	o.AwsS3IntelligentParams = &v
}

// GetAwsS3GlacierParams returns the AwsS3GlacierParams field value if set, zero value otherwise.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3GlacierParams() AwsS3GlacierParams {
	if o == nil || o.AwsS3GlacierParams == nil {
		var ret AwsS3GlacierParams
		return ret
	}
	return *o.AwsS3GlacierParams
}

// GetAwsS3GlacierParamsOk returns a tuple with the AwsS3GlacierParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3GlacierParamsOk() (*AwsS3GlacierParams, bool) {
	if o == nil || o.AwsS3GlacierParams == nil {
		return nil, false
	}
	return o.AwsS3GlacierParams, true
}

// HasAwsS3GlacierParams returns a boolean if a field has been set.
func (o *ArchivalAwsExternalTargetParams) HasAwsS3GlacierParams() bool {
	if o != nil && o.AwsS3GlacierParams != nil {
		return true
	}

	return false
}

// SetAwsS3GlacierParams gets a reference to the given AwsS3GlacierParams and assigns it to the AwsS3GlacierParams field.
func (o *ArchivalAwsExternalTargetParams) SetAwsS3GlacierParams(v AwsS3GlacierParams) {
	o.AwsS3GlacierParams = &v
}

// GetAwsS3GlacierDeepArchiveParams returns the AwsS3GlacierDeepArchiveParams field value if set, zero value otherwise.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3GlacierDeepArchiveParams() AwsS3GlacierDeepArchiveParams {
	if o == nil || o.AwsS3GlacierDeepArchiveParams == nil {
		var ret AwsS3GlacierDeepArchiveParams
		return ret
	}
	return *o.AwsS3GlacierDeepArchiveParams
}

// GetAwsS3GlacierDeepArchiveParamsOk returns a tuple with the AwsS3GlacierDeepArchiveParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalAwsExternalTargetParams) GetAwsS3GlacierDeepArchiveParamsOk() (*AwsS3GlacierDeepArchiveParams, bool) {
	if o == nil || o.AwsS3GlacierDeepArchiveParams == nil {
		return nil, false
	}
	return o.AwsS3GlacierDeepArchiveParams, true
}

// HasAwsS3GlacierDeepArchiveParams returns a boolean if a field has been set.
func (o *ArchivalAwsExternalTargetParams) HasAwsS3GlacierDeepArchiveParams() bool {
	if o != nil && o.AwsS3GlacierDeepArchiveParams != nil {
		return true
	}

	return false
}

// SetAwsS3GlacierDeepArchiveParams gets a reference to the given AwsS3GlacierDeepArchiveParams and assigns it to the AwsS3GlacierDeepArchiveParams field.
func (o *ArchivalAwsExternalTargetParams) SetAwsS3GlacierDeepArchiveParams(v AwsS3GlacierDeepArchiveParams) {
	o.AwsS3GlacierDeepArchiveParams = &v
}

// GetAwsGlacierParams returns the AwsGlacierParams field value if set, zero value otherwise.
func (o *ArchivalAwsExternalTargetParams) GetAwsGlacierParams() AwsGlacierParams {
	if o == nil || o.AwsGlacierParams == nil {
		var ret AwsGlacierParams
		return ret
	}
	return *o.AwsGlacierParams
}

// GetAwsGlacierParamsOk returns a tuple with the AwsGlacierParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalAwsExternalTargetParams) GetAwsGlacierParamsOk() (*AwsGlacierParams, bool) {
	if o == nil || o.AwsGlacierParams == nil {
		return nil, false
	}
	return o.AwsGlacierParams, true
}

// HasAwsGlacierParams returns a boolean if a field has been set.
func (o *ArchivalAwsExternalTargetParams) HasAwsGlacierParams() bool {
	if o != nil && o.AwsGlacierParams != nil {
		return true
	}

	return false
}

// SetAwsGlacierParams gets a reference to the given AwsGlacierParams and assigns it to the AwsGlacierParams field.
func (o *ArchivalAwsExternalTargetParams) SetAwsGlacierParams(v AwsGlacierParams) {
	o.AwsGlacierParams = &v
}

func (o ArchivalAwsExternalTargetParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bucketName"] = o.BucketName.Get()
	}
	if true {
		toSerialize["region"] = o.Region.Get()
	}
	if true {
		toSerialize["storageClass"] = o.StorageClass.Get()
	}
	if o.SourceSideDeduplication.IsSet() {
		toSerialize["sourceSideDeduplication"] = o.SourceSideDeduplication.Get()
	}
	if o.IsIncrementalArchivalEnabled.IsSet() {
		toSerialize["isIncrementalArchivalEnabled"] = o.IsIncrementalArchivalEnabled.Get()
	}
	if o.IsForeverIncrementalArchivalEnabled.IsSet() {
		toSerialize["isForeverIncrementalArchivalEnabled"] = o.IsForeverIncrementalArchivalEnabled.Get()
	}
	if o.AwsS3StandardParams != nil {
		toSerialize["awsS3StandardParams"] = o.AwsS3StandardParams
	}
	if o.AwsS3StandardIAParams != nil {
		toSerialize["awsS3StandardIAParams"] = o.AwsS3StandardIAParams
	}
	if o.AwsS3OneZoneIAParams != nil {
		toSerialize["awsS3OneZoneIAParams"] = o.AwsS3OneZoneIAParams
	}
	if o.AwsS3IntelligentParams != nil {
		toSerialize["awsS3IntelligentParams"] = o.AwsS3IntelligentParams
	}
	if o.AwsS3GlacierParams != nil {
		toSerialize["awsS3GlacierParams"] = o.AwsS3GlacierParams
	}
	if o.AwsS3GlacierDeepArchiveParams != nil {
		toSerialize["awsS3GlacierDeepArchiveParams"] = o.AwsS3GlacierDeepArchiveParams
	}
	if o.AwsGlacierParams != nil {
		toSerialize["awsGlacierParams"] = o.AwsGlacierParams
	}
	return json.Marshal(toSerialize)
}

type NullableArchivalAwsExternalTargetParams struct {
	value *ArchivalAwsExternalTargetParams
	isSet bool
}

func (v NullableArchivalAwsExternalTargetParams) Get() *ArchivalAwsExternalTargetParams {
	return v.value
}

func (v *NullableArchivalAwsExternalTargetParams) Set(val *ArchivalAwsExternalTargetParams) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalAwsExternalTargetParams) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalAwsExternalTargetParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalAwsExternalTargetParams(val *ArchivalAwsExternalTargetParams) *NullableArchivalAwsExternalTargetParams {
	return &NullableArchivalAwsExternalTargetParams{value: val, isSet: true}
}

func (v NullableArchivalAwsExternalTargetParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalAwsExternalTargetParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


