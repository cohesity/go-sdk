/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// FlashbladeRegistrationParams Specifies parameters to register an Flashblade Source.
type FlashbladeRegistrationParams struct {
	// Specifies the Hostname or IP Address Endpoint for the Flashblade Source.
	Endpoint NullableString `json:"endpoint"`
	// Specifies the API Token of the Flashblade Source
	ApiToken NullableString `json:"apiToken,omitempty"`
	// Specifies whether or not to back up SMB Volumes.
	BackUpSMBVolumes NullableBool `json:"backUpSMBVolumes,omitempty"`
	SmbCredentials *SmbMountCredentials `json:"smbCredentials,omitempty"`
	ThrottlingConfig *NasThrottlingConfig `json:"throttlingConfig,omitempty"`
}

// NewFlashbladeRegistrationParams instantiates a new FlashbladeRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlashbladeRegistrationParams(endpoint NullableString) *FlashbladeRegistrationParams {
	this := FlashbladeRegistrationParams{}
	this.Endpoint = endpoint
	return &this
}

// NewFlashbladeRegistrationParamsWithDefaults instantiates a new FlashbladeRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlashbladeRegistrationParamsWithDefaults() *FlashbladeRegistrationParams {
	this := FlashbladeRegistrationParams{}
	return &this
}

// GetEndpoint returns the Endpoint field value
// If the value is explicit nil, the zero value for string will be returned
func (o *FlashbladeRegistrationParams) GetEndpoint() string {
	if o == nil || o.Endpoint.Get() == nil {
		var ret string
		return ret
	}

	return *o.Endpoint.Get()
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashbladeRegistrationParams) GetEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Endpoint.Get(), o.Endpoint.IsSet()
}

// SetEndpoint sets field value
func (o *FlashbladeRegistrationParams) SetEndpoint(v string) {
	o.Endpoint.Set(&v)
}

// GetApiToken returns the ApiToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashbladeRegistrationParams) GetApiToken() string {
	if o == nil || o.ApiToken.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApiToken.Get()
}

// GetApiTokenOk returns a tuple with the ApiToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashbladeRegistrationParams) GetApiTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApiToken.Get(), o.ApiToken.IsSet()
}

// HasApiToken returns a boolean if a field has been set.
func (o *FlashbladeRegistrationParams) HasApiToken() bool {
	if o != nil && o.ApiToken.IsSet() {
		return true
	}

	return false
}

// SetApiToken gets a reference to the given NullableString and assigns it to the ApiToken field.
func (o *FlashbladeRegistrationParams) SetApiToken(v string) {
	o.ApiToken.Set(&v)
}
// SetApiTokenNil sets the value for ApiToken to be an explicit nil
func (o *FlashbladeRegistrationParams) SetApiTokenNil() {
	o.ApiToken.Set(nil)
}

// UnsetApiToken ensures that no value is present for ApiToken, not even an explicit nil
func (o *FlashbladeRegistrationParams) UnsetApiToken() {
	o.ApiToken.Unset()
}

// GetBackUpSMBVolumes returns the BackUpSMBVolumes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FlashbladeRegistrationParams) GetBackUpSMBVolumes() bool {
	if o == nil || o.BackUpSMBVolumes.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BackUpSMBVolumes.Get()
}

// GetBackUpSMBVolumesOk returns a tuple with the BackUpSMBVolumes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FlashbladeRegistrationParams) GetBackUpSMBVolumesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BackUpSMBVolumes.Get(), o.BackUpSMBVolumes.IsSet()
}

// HasBackUpSMBVolumes returns a boolean if a field has been set.
func (o *FlashbladeRegistrationParams) HasBackUpSMBVolumes() bool {
	if o != nil && o.BackUpSMBVolumes.IsSet() {
		return true
	}

	return false
}

// SetBackUpSMBVolumes gets a reference to the given NullableBool and assigns it to the BackUpSMBVolumes field.
func (o *FlashbladeRegistrationParams) SetBackUpSMBVolumes(v bool) {
	o.BackUpSMBVolumes.Set(&v)
}
// SetBackUpSMBVolumesNil sets the value for BackUpSMBVolumes to be an explicit nil
func (o *FlashbladeRegistrationParams) SetBackUpSMBVolumesNil() {
	o.BackUpSMBVolumes.Set(nil)
}

// UnsetBackUpSMBVolumes ensures that no value is present for BackUpSMBVolumes, not even an explicit nil
func (o *FlashbladeRegistrationParams) UnsetBackUpSMBVolumes() {
	o.BackUpSMBVolumes.Unset()
}

// GetSmbCredentials returns the SmbCredentials field value if set, zero value otherwise.
func (o *FlashbladeRegistrationParams) GetSmbCredentials() SmbMountCredentials {
	if o == nil || o.SmbCredentials == nil {
		var ret SmbMountCredentials
		return ret
	}
	return *o.SmbCredentials
}

// GetSmbCredentialsOk returns a tuple with the SmbCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlashbladeRegistrationParams) GetSmbCredentialsOk() (*SmbMountCredentials, bool) {
	if o == nil || o.SmbCredentials == nil {
		return nil, false
	}
	return o.SmbCredentials, true
}

// HasSmbCredentials returns a boolean if a field has been set.
func (o *FlashbladeRegistrationParams) HasSmbCredentials() bool {
	if o != nil && o.SmbCredentials != nil {
		return true
	}

	return false
}

// SetSmbCredentials gets a reference to the given SmbMountCredentials and assigns it to the SmbCredentials field.
func (o *FlashbladeRegistrationParams) SetSmbCredentials(v SmbMountCredentials) {
	o.SmbCredentials = &v
}

// GetThrottlingConfig returns the ThrottlingConfig field value if set, zero value otherwise.
func (o *FlashbladeRegistrationParams) GetThrottlingConfig() NasThrottlingConfig {
	if o == nil || o.ThrottlingConfig == nil {
		var ret NasThrottlingConfig
		return ret
	}
	return *o.ThrottlingConfig
}

// GetThrottlingConfigOk returns a tuple with the ThrottlingConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlashbladeRegistrationParams) GetThrottlingConfigOk() (*NasThrottlingConfig, bool) {
	if o == nil || o.ThrottlingConfig == nil {
		return nil, false
	}
	return o.ThrottlingConfig, true
}

// HasThrottlingConfig returns a boolean if a field has been set.
func (o *FlashbladeRegistrationParams) HasThrottlingConfig() bool {
	if o != nil && o.ThrottlingConfig != nil {
		return true
	}

	return false
}

// SetThrottlingConfig gets a reference to the given NasThrottlingConfig and assigns it to the ThrottlingConfig field.
func (o *FlashbladeRegistrationParams) SetThrottlingConfig(v NasThrottlingConfig) {
	o.ThrottlingConfig = &v
}

func (o FlashbladeRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["endpoint"] = o.Endpoint.Get()
	}
	if o.ApiToken.IsSet() {
		toSerialize["apiToken"] = o.ApiToken.Get()
	}
	if o.BackUpSMBVolumes.IsSet() {
		toSerialize["backUpSMBVolumes"] = o.BackUpSMBVolumes.Get()
	}
	if o.SmbCredentials != nil {
		toSerialize["smbCredentials"] = o.SmbCredentials
	}
	if o.ThrottlingConfig != nil {
		toSerialize["throttlingConfig"] = o.ThrottlingConfig
	}
	return json.Marshal(toSerialize)
}

type NullableFlashbladeRegistrationParams struct {
	value *FlashbladeRegistrationParams
	isSet bool
}

func (v NullableFlashbladeRegistrationParams) Get() *FlashbladeRegistrationParams {
	return v.value
}

func (v *NullableFlashbladeRegistrationParams) Set(val *FlashbladeRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFlashbladeRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFlashbladeRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlashbladeRegistrationParams(val *FlashbladeRegistrationParams) *NullableFlashbladeRegistrationParams {
	return &NullableFlashbladeRegistrationParams{value: val, isSet: true}
}

func (v NullableFlashbladeRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlashbladeRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


