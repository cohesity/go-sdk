/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// TenantsInfo A List of tenants.
type TenantsInfo struct {
	// List of Tenants.
	Tenants *[]TenantInfo `json:"tenants,omitempty"`
}

// NewTenantsInfo instantiates a new TenantsInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantsInfo() *TenantsInfo {
	this := TenantsInfo{}
	return &this
}

// NewTenantsInfoWithDefaults instantiates a new TenantsInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantsInfoWithDefaults() *TenantsInfo {
	this := TenantsInfo{}
	return &this
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *TenantsInfo) GetTenants() []TenantInfo {
	if o == nil || o.Tenants == nil {
		var ret []TenantInfo
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantsInfo) GetTenantsOk() (*[]TenantInfo, bool) {
	if o == nil || o.Tenants == nil {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *TenantsInfo) HasTenants() bool {
	if o != nil && o.Tenants != nil {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []TenantInfo and assigns it to the Tenants field.
func (o *TenantsInfo) SetTenants(v []TenantInfo) {
	o.Tenants = &v
}

func (o TenantsInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	return json.Marshal(toSerialize)
}

type NullableTenantsInfo struct {
	value *TenantsInfo
	isSet bool
}

func (v NullableTenantsInfo) Get() *TenantsInfo {
	return v.value
}

func (v *NullableTenantsInfo) Set(val *TenantsInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantsInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantsInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantsInfo(val *TenantsInfo) *NullableTenantsInfo {
	return &NullableTenantsInfo{value: val, isSet: true}
}

func (v NullableTenantsInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantsInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


