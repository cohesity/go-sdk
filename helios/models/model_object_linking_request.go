/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ObjectLinkingRequest Request for linking replicated objects to failover objects on replication cluster.
type ObjectLinkingRequest struct {
	// Specifies the objectMap that will be used to create linking between given replicated source entity and newly restored entity on erplication cluster.
	ObjectMap []ReplicaFailoverObject `json:"objectMap,omitempty"`
}

// NewObjectLinkingRequest instantiates a new ObjectLinkingRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectLinkingRequest() *ObjectLinkingRequest {
	this := ObjectLinkingRequest{}
	return &this
}

// NewObjectLinkingRequestWithDefaults instantiates a new ObjectLinkingRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectLinkingRequestWithDefaults() *ObjectLinkingRequest {
	this := ObjectLinkingRequest{}
	return &this
}

// GetObjectMap returns the ObjectMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectLinkingRequest) GetObjectMap() []ReplicaFailoverObject {
	if o == nil  {
		var ret []ReplicaFailoverObject
		return ret
	}
	return o.ObjectMap
}

// GetObjectMapOk returns a tuple with the ObjectMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectLinkingRequest) GetObjectMapOk() (*[]ReplicaFailoverObject, bool) {
	if o == nil || o.ObjectMap == nil {
		return nil, false
	}
	return &o.ObjectMap, true
}

// HasObjectMap returns a boolean if a field has been set.
func (o *ObjectLinkingRequest) HasObjectMap() bool {
	if o != nil && o.ObjectMap != nil {
		return true
	}

	return false
}

// SetObjectMap gets a reference to the given []ReplicaFailoverObject and assigns it to the ObjectMap field.
func (o *ObjectLinkingRequest) SetObjectMap(v []ReplicaFailoverObject) {
	o.ObjectMap = v
}

func (o ObjectLinkingRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectMap != nil {
		toSerialize["objectMap"] = o.ObjectMap
	}
	return json.Marshal(toSerialize)
}

type NullableObjectLinkingRequest struct {
	value *ObjectLinkingRequest
	isSet bool
}

func (v NullableObjectLinkingRequest) Get() *ObjectLinkingRequest {
	return v.value
}

func (v *NullableObjectLinkingRequest) Set(val *ObjectLinkingRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectLinkingRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectLinkingRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectLinkingRequest(val *ObjectLinkingRequest) *NullableObjectLinkingRequest {
	return &NullableObjectLinkingRequest{value: val, isSet: true}
}

func (v NullableObjectLinkingRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectLinkingRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


