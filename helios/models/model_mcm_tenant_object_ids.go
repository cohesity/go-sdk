/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmTenantObjectIds Specifies the object IDs for a given tenant.
type McmTenantObjectIds struct {
	ObjectIds *[]McmTenantObjectIdentifier `json:"objectIds,omitempty"`
}

// NewMcmTenantObjectIds instantiates a new McmTenantObjectIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmTenantObjectIds() *McmTenantObjectIds {
	this := McmTenantObjectIds{}
	return &this
}

// NewMcmTenantObjectIdsWithDefaults instantiates a new McmTenantObjectIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmTenantObjectIdsWithDefaults() *McmTenantObjectIds {
	this := McmTenantObjectIds{}
	return &this
}

// GetObjectIds returns the ObjectIds field value if set, zero value otherwise.
func (o *McmTenantObjectIds) GetObjectIds() []McmTenantObjectIdentifier {
	if o == nil || o.ObjectIds == nil {
		var ret []McmTenantObjectIdentifier
		return ret
	}
	return *o.ObjectIds
}

// GetObjectIdsOk returns a tuple with the ObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmTenantObjectIds) GetObjectIdsOk() (*[]McmTenantObjectIdentifier, bool) {
	if o == nil || o.ObjectIds == nil {
		return nil, false
	}
	return o.ObjectIds, true
}

// HasObjectIds returns a boolean if a field has been set.
func (o *McmTenantObjectIds) HasObjectIds() bool {
	if o != nil && o.ObjectIds != nil {
		return true
	}

	return false
}

// SetObjectIds gets a reference to the given []McmTenantObjectIdentifier and assigns it to the ObjectIds field.
func (o *McmTenantObjectIds) SetObjectIds(v []McmTenantObjectIdentifier) {
	o.ObjectIds = &v
}

func (o McmTenantObjectIds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectIds != nil {
		toSerialize["objectIds"] = o.ObjectIds
	}
	return json.Marshal(toSerialize)
}

type NullableMcmTenantObjectIds struct {
	value *McmTenantObjectIds
	isSet bool
}

func (v NullableMcmTenantObjectIds) Get() *McmTenantObjectIds {
	return v.value
}

func (v *NullableMcmTenantObjectIds) Set(val *McmTenantObjectIds) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmTenantObjectIds) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmTenantObjectIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmTenantObjectIds(val *McmTenantObjectIds) *NullableMcmTenantObjectIds {
	return &NullableMcmTenantObjectIds{value: val, isSet: true}
}

func (v NullableMcmTenantObjectIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmTenantObjectIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


