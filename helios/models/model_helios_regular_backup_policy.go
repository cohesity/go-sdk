/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// HeliosRegularBackupPolicy Specifies the Incremental and Full policy settings and also the common Retention policy settings.\"
type HeliosRegularBackupPolicy struct {
	Incremental *HeliosIncrementalBackupPolicy `json:"incremental,omitempty"`
	Full *HeliosFullBackupPolicy `json:"full,omitempty"`
	Retention *HeliosRetention `json:"retention,omitempty"`
}

// NewHeliosRegularBackupPolicy instantiates a new HeliosRegularBackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosRegularBackupPolicy() *HeliosRegularBackupPolicy {
	this := HeliosRegularBackupPolicy{}
	return &this
}

// NewHeliosRegularBackupPolicyWithDefaults instantiates a new HeliosRegularBackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosRegularBackupPolicyWithDefaults() *HeliosRegularBackupPolicy {
	this := HeliosRegularBackupPolicy{}
	return &this
}

// GetIncremental returns the Incremental field value if set, zero value otherwise.
func (o *HeliosRegularBackupPolicy) GetIncremental() HeliosIncrementalBackupPolicy {
	if o == nil || o.Incremental == nil {
		var ret HeliosIncrementalBackupPolicy
		return ret
	}
	return *o.Incremental
}

// GetIncrementalOk returns a tuple with the Incremental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRegularBackupPolicy) GetIncrementalOk() (*HeliosIncrementalBackupPolicy, bool) {
	if o == nil || o.Incremental == nil {
		return nil, false
	}
	return o.Incremental, true
}

// HasIncremental returns a boolean if a field has been set.
func (o *HeliosRegularBackupPolicy) HasIncremental() bool {
	if o != nil && o.Incremental != nil {
		return true
	}

	return false
}

// SetIncremental gets a reference to the given HeliosIncrementalBackupPolicy and assigns it to the Incremental field.
func (o *HeliosRegularBackupPolicy) SetIncremental(v HeliosIncrementalBackupPolicy) {
	o.Incremental = &v
}

// GetFull returns the Full field value if set, zero value otherwise.
func (o *HeliosRegularBackupPolicy) GetFull() HeliosFullBackupPolicy {
	if o == nil || o.Full == nil {
		var ret HeliosFullBackupPolicy
		return ret
	}
	return *o.Full
}

// GetFullOk returns a tuple with the Full field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRegularBackupPolicy) GetFullOk() (*HeliosFullBackupPolicy, bool) {
	if o == nil || o.Full == nil {
		return nil, false
	}
	return o.Full, true
}

// HasFull returns a boolean if a field has been set.
func (o *HeliosRegularBackupPolicy) HasFull() bool {
	if o != nil && o.Full != nil {
		return true
	}

	return false
}

// SetFull gets a reference to the given HeliosFullBackupPolicy and assigns it to the Full field.
func (o *HeliosRegularBackupPolicy) SetFull(v HeliosFullBackupPolicy) {
	o.Full = &v
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *HeliosRegularBackupPolicy) GetRetention() HeliosRetention {
	if o == nil || o.Retention == nil {
		var ret HeliosRetention
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HeliosRegularBackupPolicy) GetRetentionOk() (*HeliosRetention, bool) {
	if o == nil || o.Retention == nil {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *HeliosRegularBackupPolicy) HasRetention() bool {
	if o != nil && o.Retention != nil {
		return true
	}

	return false
}

// SetRetention gets a reference to the given HeliosRetention and assigns it to the Retention field.
func (o *HeliosRegularBackupPolicy) SetRetention(v HeliosRetention) {
	o.Retention = &v
}

func (o HeliosRegularBackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Incremental != nil {
		toSerialize["incremental"] = o.Incremental
	}
	if o.Full != nil {
		toSerialize["full"] = o.Full
	}
	if o.Retention != nil {
		toSerialize["retention"] = o.Retention
	}
	return json.Marshal(toSerialize)
}

type NullableHeliosRegularBackupPolicy struct {
	value *HeliosRegularBackupPolicy
	isSet bool
}

func (v NullableHeliosRegularBackupPolicy) Get() *HeliosRegularBackupPolicy {
	return v.value
}

func (v *NullableHeliosRegularBackupPolicy) Set(val *HeliosRegularBackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosRegularBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosRegularBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosRegularBackupPolicy(val *HeliosRegularBackupPolicy) *NullableHeliosRegularBackupPolicy {
	return &NullableHeliosRegularBackupPolicy{value: val, isSet: true}
}

func (v NullableHeliosRegularBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosRegularBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


