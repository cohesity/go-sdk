/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// Privilege Specifies a Privileges.
type Privilege struct {
	// Specifies the Privilege id.
	Id NullableInt32 `json:"id,omitempty"`
	// Specifies the Privilege name.
	Name NullableString `json:"name,omitempty"`
	// Specifies the Privilege label.
	Label NullableString `json:"label,omitempty"`
	// Specifies the Privilege category.
	Category NullableString `json:"category,omitempty"`
	// Specifies the description message for the Privilege.
	Description NullableString `json:"description,omitempty"`
	// Specifies whether the Privilege is available for Helios operations.
	IsAvailableOnHelios NullableBool `json:"isAvailableOnHelios,omitempty"`
	// Specifies whether the Privilege is auto assigned to custom Roles.
	IsCustomRoleDefault NullableBool `json:"isCustomRoleDefault,omitempty"`
	// Specifies whether the Privilege is a special privilege. Special Privileges are not assigned to builtin 'Admin' Role.
	IsSpecial NullableBool `json:"isSpecial,omitempty"`
	// Specifies whether the Privilege is a read-only privilege. Read-only Previlege only grants read access to a Role.
	IsViewOnly NullableBool `json:"isViewOnly,omitempty"`
}

// NewPrivilege instantiates a new Privilege object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilege() *Privilege {
	this := Privilege{}
	return &this
}

// NewPrivilegeWithDefaults instantiates a new Privilege object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegeWithDefaults() *Privilege {
	this := Privilege{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Privilege) GetId() int32 {
	if o == nil || o.Id.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Privilege) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Privilege) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *Privilege) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Privilege) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Privilege) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Privilege) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Privilege) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Privilege) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Privilege) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Privilege) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Privilege) UnsetName() {
	o.Name.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Privilege) GetLabel() string {
	if o == nil || o.Label.Get() == nil {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Privilege) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *Privilege) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *Privilege) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *Privilege) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *Privilege) UnsetLabel() {
	o.Label.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Privilege) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Privilege) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *Privilege) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *Privilege) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *Privilege) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *Privilege) UnsetCategory() {
	o.Category.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Privilege) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Privilege) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Privilege) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Privilege) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Privilege) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Privilege) UnsetDescription() {
	o.Description.Unset()
}

// GetIsAvailableOnHelios returns the IsAvailableOnHelios field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Privilege) GetIsAvailableOnHelios() bool {
	if o == nil || o.IsAvailableOnHelios.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAvailableOnHelios.Get()
}

// GetIsAvailableOnHeliosOk returns a tuple with the IsAvailableOnHelios field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Privilege) GetIsAvailableOnHeliosOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAvailableOnHelios.Get(), o.IsAvailableOnHelios.IsSet()
}

// HasIsAvailableOnHelios returns a boolean if a field has been set.
func (o *Privilege) HasIsAvailableOnHelios() bool {
	if o != nil && o.IsAvailableOnHelios.IsSet() {
		return true
	}

	return false
}

// SetIsAvailableOnHelios gets a reference to the given NullableBool and assigns it to the IsAvailableOnHelios field.
func (o *Privilege) SetIsAvailableOnHelios(v bool) {
	o.IsAvailableOnHelios.Set(&v)
}
// SetIsAvailableOnHeliosNil sets the value for IsAvailableOnHelios to be an explicit nil
func (o *Privilege) SetIsAvailableOnHeliosNil() {
	o.IsAvailableOnHelios.Set(nil)
}

// UnsetIsAvailableOnHelios ensures that no value is present for IsAvailableOnHelios, not even an explicit nil
func (o *Privilege) UnsetIsAvailableOnHelios() {
	o.IsAvailableOnHelios.Unset()
}

// GetIsCustomRoleDefault returns the IsCustomRoleDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Privilege) GetIsCustomRoleDefault() bool {
	if o == nil || o.IsCustomRoleDefault.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsCustomRoleDefault.Get()
}

// GetIsCustomRoleDefaultOk returns a tuple with the IsCustomRoleDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Privilege) GetIsCustomRoleDefaultOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsCustomRoleDefault.Get(), o.IsCustomRoleDefault.IsSet()
}

// HasIsCustomRoleDefault returns a boolean if a field has been set.
func (o *Privilege) HasIsCustomRoleDefault() bool {
	if o != nil && o.IsCustomRoleDefault.IsSet() {
		return true
	}

	return false
}

// SetIsCustomRoleDefault gets a reference to the given NullableBool and assigns it to the IsCustomRoleDefault field.
func (o *Privilege) SetIsCustomRoleDefault(v bool) {
	o.IsCustomRoleDefault.Set(&v)
}
// SetIsCustomRoleDefaultNil sets the value for IsCustomRoleDefault to be an explicit nil
func (o *Privilege) SetIsCustomRoleDefaultNil() {
	o.IsCustomRoleDefault.Set(nil)
}

// UnsetIsCustomRoleDefault ensures that no value is present for IsCustomRoleDefault, not even an explicit nil
func (o *Privilege) UnsetIsCustomRoleDefault() {
	o.IsCustomRoleDefault.Unset()
}

// GetIsSpecial returns the IsSpecial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Privilege) GetIsSpecial() bool {
	if o == nil || o.IsSpecial.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSpecial.Get()
}

// GetIsSpecialOk returns a tuple with the IsSpecial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Privilege) GetIsSpecialOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSpecial.Get(), o.IsSpecial.IsSet()
}

// HasIsSpecial returns a boolean if a field has been set.
func (o *Privilege) HasIsSpecial() bool {
	if o != nil && o.IsSpecial.IsSet() {
		return true
	}

	return false
}

// SetIsSpecial gets a reference to the given NullableBool and assigns it to the IsSpecial field.
func (o *Privilege) SetIsSpecial(v bool) {
	o.IsSpecial.Set(&v)
}
// SetIsSpecialNil sets the value for IsSpecial to be an explicit nil
func (o *Privilege) SetIsSpecialNil() {
	o.IsSpecial.Set(nil)
}

// UnsetIsSpecial ensures that no value is present for IsSpecial, not even an explicit nil
func (o *Privilege) UnsetIsSpecial() {
	o.IsSpecial.Unset()
}

// GetIsViewOnly returns the IsViewOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Privilege) GetIsViewOnly() bool {
	if o == nil || o.IsViewOnly.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsViewOnly.Get()
}

// GetIsViewOnlyOk returns a tuple with the IsViewOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Privilege) GetIsViewOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsViewOnly.Get(), o.IsViewOnly.IsSet()
}

// HasIsViewOnly returns a boolean if a field has been set.
func (o *Privilege) HasIsViewOnly() bool {
	if o != nil && o.IsViewOnly.IsSet() {
		return true
	}

	return false
}

// SetIsViewOnly gets a reference to the given NullableBool and assigns it to the IsViewOnly field.
func (o *Privilege) SetIsViewOnly(v bool) {
	o.IsViewOnly.Set(&v)
}
// SetIsViewOnlyNil sets the value for IsViewOnly to be an explicit nil
func (o *Privilege) SetIsViewOnlyNil() {
	o.IsViewOnly.Set(nil)
}

// UnsetIsViewOnly ensures that no value is present for IsViewOnly, not even an explicit nil
func (o *Privilege) UnsetIsViewOnly() {
	o.IsViewOnly.Unset()
}

func (o Privilege) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.IsAvailableOnHelios.IsSet() {
		toSerialize["isAvailableOnHelios"] = o.IsAvailableOnHelios.Get()
	}
	if o.IsCustomRoleDefault.IsSet() {
		toSerialize["isCustomRoleDefault"] = o.IsCustomRoleDefault.Get()
	}
	if o.IsSpecial.IsSet() {
		toSerialize["isSpecial"] = o.IsSpecial.Get()
	}
	if o.IsViewOnly.IsSet() {
		toSerialize["isViewOnly"] = o.IsViewOnly.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePrivilege struct {
	value *Privilege
	isSet bool
}

func (v NullablePrivilege) Get() *Privilege {
	return v.value
}

func (v *NullablePrivilege) Set(val *Privilege) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilege) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilege) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilege(val *Privilege) *NullablePrivilege {
	return &NullablePrivilege{value: val, isSet: true}
}

func (v NullablePrivilege) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilege) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


