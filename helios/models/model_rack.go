/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// Rack Specifies information about rack.
type Rack struct {
	// Specifies unique id of the rack.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies name of the rack
	Name NullableString `json:"name,omitempty"`
	// Specifies location of the rack.
	Location NullableString `json:"location,omitempty"`
	// List of chassis ids that are part of the rack.
	ChassisIds *[]int64 `json:"chassisIds,omitempty"`
}

// NewRack instantiates a new Rack object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRack() *Rack {
	this := Rack{}
	return &this
}

// NewRackWithDefaults instantiates a new Rack object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRackWithDefaults() *Rack {
	this := Rack{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rack) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rack) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *Rack) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *Rack) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *Rack) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *Rack) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rack) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rack) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Rack) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Rack) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Rack) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Rack) UnsetName() {
	o.Name.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Rack) GetLocation() string {
	if o == nil || o.Location.Get() == nil {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Rack) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *Rack) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *Rack) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *Rack) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *Rack) UnsetLocation() {
	o.Location.Unset()
}

// GetChassisIds returns the ChassisIds field value if set, zero value otherwise.
func (o *Rack) GetChassisIds() []int64 {
	if o == nil || o.ChassisIds == nil {
		var ret []int64
		return ret
	}
	return *o.ChassisIds
}

// GetChassisIdsOk returns a tuple with the ChassisIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Rack) GetChassisIdsOk() (*[]int64, bool) {
	if o == nil || o.ChassisIds == nil {
		return nil, false
	}
	return o.ChassisIds, true
}

// HasChassisIds returns a boolean if a field has been set.
func (o *Rack) HasChassisIds() bool {
	if o != nil && o.ChassisIds != nil {
		return true
	}

	return false
}

// SetChassisIds gets a reference to the given []int64 and assigns it to the ChassisIds field.
func (o *Rack) SetChassisIds(v []int64) {
	o.ChassisIds = &v
}

func (o Rack) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.ChassisIds != nil {
		toSerialize["chassisIds"] = o.ChassisIds
	}
	return json.Marshal(toSerialize)
}

type NullableRack struct {
	value *Rack
	isSet bool
}

func (v NullableRack) Get() *Rack {
	return v.value
}

func (v *NullableRack) Set(val *Rack) {
	v.value = val
	v.isSet = true
}

func (v NullableRack) IsSet() bool {
	return v.isSet
}

func (v *NullableRack) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRack(val *Rack) *NullableRack {
	return &NullableRack{value: val, isSet: true}
}

func (v NullableRack) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRack) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


