/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// BifrostConnection Specify a connection of Bifrost.
type BifrostConnection struct {
	// Specifies the id of the connection.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the name of the connection.
	Name NullableString `json:"name,omitempty"`
	Subnet *ConnectionSubnet `json:"subnet,omitempty"`
	// Specifies the version of the connection's certificate. The version is used to revoke/renew connection's certificates.
	CertificateVersion NullableInt64 `json:"certificateVersion,omitempty"`
	NetworkConnectionInfo *NetworkConnectionInfo `json:"networkConnectionInfo,omitempty"`
}

// NewBifrostConnection instantiates a new BifrostConnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBifrostConnection() *BifrostConnection {
	this := BifrostConnection{}
	return &this
}

// NewBifrostConnectionWithDefaults instantiates a new BifrostConnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBifrostConnectionWithDefaults() *BifrostConnection {
	this := BifrostConnection{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BifrostConnection) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnection) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *BifrostConnection) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *BifrostConnection) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *BifrostConnection) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *BifrostConnection) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BifrostConnection) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnection) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BifrostConnection) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BifrostConnection) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *BifrostConnection) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BifrostConnection) UnsetName() {
	o.Name.Unset()
}

// GetSubnet returns the Subnet field value if set, zero value otherwise.
func (o *BifrostConnection) GetSubnet() ConnectionSubnet {
	if o == nil || o.Subnet == nil {
		var ret ConnectionSubnet
		return ret
	}
	return *o.Subnet
}

// GetSubnetOk returns a tuple with the Subnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BifrostConnection) GetSubnetOk() (*ConnectionSubnet, bool) {
	if o == nil || o.Subnet == nil {
		return nil, false
	}
	return o.Subnet, true
}

// HasSubnet returns a boolean if a field has been set.
func (o *BifrostConnection) HasSubnet() bool {
	if o != nil && o.Subnet != nil {
		return true
	}

	return false
}

// SetSubnet gets a reference to the given ConnectionSubnet and assigns it to the Subnet field.
func (o *BifrostConnection) SetSubnet(v ConnectionSubnet) {
	o.Subnet = &v
}

// GetCertificateVersion returns the CertificateVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BifrostConnection) GetCertificateVersion() int64 {
	if o == nil || o.CertificateVersion.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CertificateVersion.Get()
}

// GetCertificateVersionOk returns a tuple with the CertificateVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BifrostConnection) GetCertificateVersionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertificateVersion.Get(), o.CertificateVersion.IsSet()
}

// HasCertificateVersion returns a boolean if a field has been set.
func (o *BifrostConnection) HasCertificateVersion() bool {
	if o != nil && o.CertificateVersion.IsSet() {
		return true
	}

	return false
}

// SetCertificateVersion gets a reference to the given NullableInt64 and assigns it to the CertificateVersion field.
func (o *BifrostConnection) SetCertificateVersion(v int64) {
	o.CertificateVersion.Set(&v)
}
// SetCertificateVersionNil sets the value for CertificateVersion to be an explicit nil
func (o *BifrostConnection) SetCertificateVersionNil() {
	o.CertificateVersion.Set(nil)
}

// UnsetCertificateVersion ensures that no value is present for CertificateVersion, not even an explicit nil
func (o *BifrostConnection) UnsetCertificateVersion() {
	o.CertificateVersion.Unset()
}

// GetNetworkConnectionInfo returns the NetworkConnectionInfo field value if set, zero value otherwise.
func (o *BifrostConnection) GetNetworkConnectionInfo() NetworkConnectionInfo {
	if o == nil || o.NetworkConnectionInfo == nil {
		var ret NetworkConnectionInfo
		return ret
	}
	return *o.NetworkConnectionInfo
}

// GetNetworkConnectionInfoOk returns a tuple with the NetworkConnectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BifrostConnection) GetNetworkConnectionInfoOk() (*NetworkConnectionInfo, bool) {
	if o == nil || o.NetworkConnectionInfo == nil {
		return nil, false
	}
	return o.NetworkConnectionInfo, true
}

// HasNetworkConnectionInfo returns a boolean if a field has been set.
func (o *BifrostConnection) HasNetworkConnectionInfo() bool {
	if o != nil && o.NetworkConnectionInfo != nil {
		return true
	}

	return false
}

// SetNetworkConnectionInfo gets a reference to the given NetworkConnectionInfo and assigns it to the NetworkConnectionInfo field.
func (o *BifrostConnection) SetNetworkConnectionInfo(v NetworkConnectionInfo) {
	o.NetworkConnectionInfo = &v
}

func (o BifrostConnection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Subnet != nil {
		toSerialize["subnet"] = o.Subnet
	}
	if o.CertificateVersion.IsSet() {
		toSerialize["certificateVersion"] = o.CertificateVersion.Get()
	}
	if o.NetworkConnectionInfo != nil {
		toSerialize["networkConnectionInfo"] = o.NetworkConnectionInfo
	}
	return json.Marshal(toSerialize)
}

type NullableBifrostConnection struct {
	value *BifrostConnection
	isSet bool
}

func (v NullableBifrostConnection) Get() *BifrostConnection {
	return v.value
}

func (v *NullableBifrostConnection) Set(val *BifrostConnection) {
	v.value = val
	v.isSet = true
}

func (v NullableBifrostConnection) IsSet() bool {
	return v.isSet
}

func (v *NullableBifrostConnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBifrostConnection(val *BifrostConnection) *NullableBifrostConnection {
	return &NullableBifrostConnection{value: val, isSet: true}
}

func (v NullableBifrostConnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBifrostConnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


