/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmTenantObjectIdentifier Specifies an object protection for a given tenant.
type McmTenantObjectIdentifier struct {
	// Specifies the id assigned to the object.
	ObjectId NullableInt64 `json:"objectId,omitempty"`
	// Specifies the object hash of the object.
	ObjectHash NullableString `json:"objectHash,omitempty"`
}

// NewMcmTenantObjectIdentifier instantiates a new McmTenantObjectIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmTenantObjectIdentifier() *McmTenantObjectIdentifier {
	this := McmTenantObjectIdentifier{}
	return &this
}

// NewMcmTenantObjectIdentifierWithDefaults instantiates a new McmTenantObjectIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmTenantObjectIdentifierWithDefaults() *McmTenantObjectIdentifier {
	this := McmTenantObjectIdentifier{}
	return &this
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmTenantObjectIdentifier) GetObjectId() int64 {
	if o == nil || o.ObjectId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmTenantObjectIdentifier) GetObjectIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// HasObjectId returns a boolean if a field has been set.
func (o *McmTenantObjectIdentifier) HasObjectId() bool {
	if o != nil && o.ObjectId.IsSet() {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given NullableInt64 and assigns it to the ObjectId field.
func (o *McmTenantObjectIdentifier) SetObjectId(v int64) {
	o.ObjectId.Set(&v)
}
// SetObjectIdNil sets the value for ObjectId to be an explicit nil
func (o *McmTenantObjectIdentifier) SetObjectIdNil() {
	o.ObjectId.Set(nil)
}

// UnsetObjectId ensures that no value is present for ObjectId, not even an explicit nil
func (o *McmTenantObjectIdentifier) UnsetObjectId() {
	o.ObjectId.Unset()
}

// GetObjectHash returns the ObjectHash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmTenantObjectIdentifier) GetObjectHash() string {
	if o == nil || o.ObjectHash.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectHash.Get()
}

// GetObjectHashOk returns a tuple with the ObjectHash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmTenantObjectIdentifier) GetObjectHashOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectHash.Get(), o.ObjectHash.IsSet()
}

// HasObjectHash returns a boolean if a field has been set.
func (o *McmTenantObjectIdentifier) HasObjectHash() bool {
	if o != nil && o.ObjectHash.IsSet() {
		return true
	}

	return false
}

// SetObjectHash gets a reference to the given NullableString and assigns it to the ObjectHash field.
func (o *McmTenantObjectIdentifier) SetObjectHash(v string) {
	o.ObjectHash.Set(&v)
}
// SetObjectHashNil sets the value for ObjectHash to be an explicit nil
func (o *McmTenantObjectIdentifier) SetObjectHashNil() {
	o.ObjectHash.Set(nil)
}

// UnsetObjectHash ensures that no value is present for ObjectHash, not even an explicit nil
func (o *McmTenantObjectIdentifier) UnsetObjectHash() {
	o.ObjectHash.Unset()
}

func (o McmTenantObjectIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectId.IsSet() {
		toSerialize["objectId"] = o.ObjectId.Get()
	}
	if o.ObjectHash.IsSet() {
		toSerialize["objectHash"] = o.ObjectHash.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMcmTenantObjectIdentifier struct {
	value *McmTenantObjectIdentifier
	isSet bool
}

func (v NullableMcmTenantObjectIdentifier) Get() *McmTenantObjectIdentifier {
	return v.value
}

func (v *NullableMcmTenantObjectIdentifier) Set(val *McmTenantObjectIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmTenantObjectIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmTenantObjectIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmTenantObjectIdentifier(val *McmTenantObjectIdentifier) *NullableMcmTenantObjectIdentifier {
	return &NullableMcmTenantObjectIdentifier{value: val, isSet: true}
}

func (v NullableMcmTenantObjectIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmTenantObjectIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


