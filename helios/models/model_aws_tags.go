/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// AWSTags Specifies the AWS tags.
type AWSTags struct {
	// Array of Arrays of VMs Tags Ids that Specify VMs to Protect. Optionally specify a list of VMs to protect by listing Protection Source ids of VM Tags in this two dimensional array. Using this two dimensional array of Tag ids, the Cluster generates a list of VMs to protect which are derived from intersections of the inner arrays and union of the outer array, as shown by the following example. To protect only 'Eng' VMs in the East and all the VMs in the West, specify the following tag id array: [ [1101, 2221], [3031] ], where 1101 is the 'Eng' VM Tag id, 2221 is the 'East' VM Tag id and 3031 is the 'West' VM Tag id. The inner array [1101, 2221] produces a list of VMs that are both tagged with 'Eng' and 'East' (an intersection). The outer array combines the list from the inner array with list of VMs tagged with 'West' (a union). The list of resulting VMs are protected by this Protection Group.
	VmTagIds [][]int64 `json:"vmTagIds,omitempty"`
}

// NewAWSTags instantiates a new AWSTags object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAWSTags() *AWSTags {
	this := AWSTags{}
	return &this
}

// NewAWSTagsWithDefaults instantiates a new AWSTags object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAWSTagsWithDefaults() *AWSTags {
	this := AWSTags{}
	return &this
}

// GetVmTagIds returns the VmTagIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AWSTags) GetVmTagIds() [][]int64 {
	if o == nil  {
		var ret [][]int64
		return ret
	}
	return o.VmTagIds
}

// GetVmTagIdsOk returns a tuple with the VmTagIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AWSTags) GetVmTagIdsOk() (*[][]int64, bool) {
	if o == nil || o.VmTagIds == nil {
		return nil, false
	}
	return &o.VmTagIds, true
}

// HasVmTagIds returns a boolean if a field has been set.
func (o *AWSTags) HasVmTagIds() bool {
	if o != nil && o.VmTagIds != nil {
		return true
	}

	return false
}

// SetVmTagIds gets a reference to the given [][]int64 and assigns it to the VmTagIds field.
func (o *AWSTags) SetVmTagIds(v [][]int64) {
	o.VmTagIds = v
}

func (o AWSTags) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VmTagIds != nil {
		toSerialize["vmTagIds"] = o.VmTagIds
	}
	return json.Marshal(toSerialize)
}

type NullableAWSTags struct {
	value *AWSTags
	isSet bool
}

func (v NullableAWSTags) Get() *AWSTags {
	return v.value
}

func (v *NullableAWSTags) Set(val *AWSTags) {
	v.value = val
	v.isSet = true
}

func (v NullableAWSTags) IsSet() bool {
	return v.isSet
}

func (v *NullableAWSTags) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAWSTags(val *AWSTags) *NullableAWSTags {
	return &NullableAWSTags{value: val, isSet: true}
}

func (v NullableAWSTags) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAWSTags) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


