/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// DiskIdentify Specifies the parameters needed to identify disk.
type DiskIdentify struct {
	// Specifies the node id of node that disk belongs to.
	NodeId NullableInt64 `json:"nodeId"`
	// Specifies serial number of disk.
	SerialNumber NullableString `json:"serialNumber"`
	// Turn on/off led light if it is set to true/false
	Identify NullableBool `json:"identify"`
}

// NewDiskIdentify instantiates a new DiskIdentify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskIdentify(nodeId NullableInt64, serialNumber NullableString, identify NullableBool) *DiskIdentify {
	this := DiskIdentify{}
	this.NodeId = nodeId
	this.SerialNumber = serialNumber
	this.Identify = identify
	return &this
}

// NewDiskIdentifyWithDefaults instantiates a new DiskIdentify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskIdentifyWithDefaults() *DiskIdentify {
	this := DiskIdentify{}
	return &this
}

// GetNodeId returns the NodeId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *DiskIdentify) GetNodeId() int64 {
	if o == nil || o.NodeId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskIdentify) GetNodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// SetNodeId sets field value
func (o *DiskIdentify) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}

// GetSerialNumber returns the SerialNumber field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DiskIdentify) GetSerialNumber() string {
	if o == nil || o.SerialNumber.Get() == nil {
		var ret string
		return ret
	}

	return *o.SerialNumber.Get()
}

// GetSerialNumberOk returns a tuple with the SerialNumber field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskIdentify) GetSerialNumberOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SerialNumber.Get(), o.SerialNumber.IsSet()
}

// SetSerialNumber sets field value
func (o *DiskIdentify) SetSerialNumber(v string) {
	o.SerialNumber.Set(&v)
}

// GetIdentify returns the Identify field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *DiskIdentify) GetIdentify() bool {
	if o == nil || o.Identify.Get() == nil {
		var ret bool
		return ret
	}

	return *o.Identify.Get()
}

// GetIdentifyOk returns a tuple with the Identify field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskIdentify) GetIdentifyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Identify.Get(), o.Identify.IsSet()
}

// SetIdentify sets field value
func (o *DiskIdentify) SetIdentify(v bool) {
	o.Identify.Set(&v)
}

func (o DiskIdentify) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	if true {
		toSerialize["serialNumber"] = o.SerialNumber.Get()
	}
	if true {
		toSerialize["identify"] = o.Identify.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDiskIdentify struct {
	value *DiskIdentify
	isSet bool
}

func (v NullableDiskIdentify) Get() *DiskIdentify {
	return v.value
}

func (v *NullableDiskIdentify) Set(val *DiskIdentify) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskIdentify) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskIdentify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskIdentify(val *DiskIdentify) *NullableDiskIdentify {
	return &NullableDiskIdentify{value: val, isSet: true}
}

func (v NullableDiskIdentify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskIdentify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


