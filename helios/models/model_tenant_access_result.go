/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// TenantAccessResult Specifies a List of Tenant Access.
type TenantAccessResult struct {
	// List of available Tenant Access.
	TenantAccesses *[]TenantAccess `json:"tenantAccesses,omitempty"`
}

// NewTenantAccessResult instantiates a new TenantAccessResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantAccessResult() *TenantAccessResult {
	this := TenantAccessResult{}
	return &this
}

// NewTenantAccessResultWithDefaults instantiates a new TenantAccessResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantAccessResultWithDefaults() *TenantAccessResult {
	this := TenantAccessResult{}
	return &this
}

// GetTenantAccesses returns the TenantAccesses field value if set, zero value otherwise.
func (o *TenantAccessResult) GetTenantAccesses() []TenantAccess {
	if o == nil || o.TenantAccesses == nil {
		var ret []TenantAccess
		return ret
	}
	return *o.TenantAccesses
}

// GetTenantAccessesOk returns a tuple with the TenantAccesses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantAccessResult) GetTenantAccessesOk() (*[]TenantAccess, bool) {
	if o == nil || o.TenantAccesses == nil {
		return nil, false
	}
	return o.TenantAccesses, true
}

// HasTenantAccesses returns a boolean if a field has been set.
func (o *TenantAccessResult) HasTenantAccesses() bool {
	if o != nil && o.TenantAccesses != nil {
		return true
	}

	return false
}

// SetTenantAccesses gets a reference to the given []TenantAccess and assigns it to the TenantAccesses field.
func (o *TenantAccessResult) SetTenantAccesses(v []TenantAccess) {
	o.TenantAccesses = &v
}

func (o TenantAccessResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TenantAccesses != nil {
		toSerialize["tenantAccesses"] = o.TenantAccesses
	}
	return json.Marshal(toSerialize)
}

type NullableTenantAccessResult struct {
	value *TenantAccessResult
	isSet bool
}

func (v NullableTenantAccessResult) Get() *TenantAccessResult {
	return v.value
}

func (v *NullableTenantAccessResult) Set(val *TenantAccessResult) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantAccessResult) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantAccessResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantAccessResult(val *TenantAccessResult) *NullableTenantAccessResult {
	return &NullableTenantAccessResult{value: val, isSet: true}
}

func (v NullableTenantAccessResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantAccessResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


