/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ImportCertificateByClientcsrResponseBody Specifies the response to import a certificate.
type ImportCertificateByClientcsrResponseBody struct {
	// Specifies the server certificate.
	CertificateServer NullableString `json:"certificateServer,omitempty"`
	// Specifies the private key of agent.
	PrivateKey NullableString `json:"privateKey,omitempty"`
	// Specifies the path to the file to be uploaded to server. This file has the server cert, id and encrypted private key
	FileServerCert NullableString `json:"fileServerCert,omitempty"`
}

// NewImportCertificateByClientcsrResponseBody instantiates a new ImportCertificateByClientcsrResponseBody object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewImportCertificateByClientcsrResponseBody() *ImportCertificateByClientcsrResponseBody {
	this := ImportCertificateByClientcsrResponseBody{}
	return &this
}

// NewImportCertificateByClientcsrResponseBodyWithDefaults instantiates a new ImportCertificateByClientcsrResponseBody object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewImportCertificateByClientcsrResponseBodyWithDefaults() *ImportCertificateByClientcsrResponseBody {
	this := ImportCertificateByClientcsrResponseBody{}
	return &this
}

// GetCertificateServer returns the CertificateServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportCertificateByClientcsrResponseBody) GetCertificateServer() string {
	if o == nil || o.CertificateServer.Get() == nil {
		var ret string
		return ret
	}
	return *o.CertificateServer.Get()
}

// GetCertificateServerOk returns a tuple with the CertificateServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportCertificateByClientcsrResponseBody) GetCertificateServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CertificateServer.Get(), o.CertificateServer.IsSet()
}

// HasCertificateServer returns a boolean if a field has been set.
func (o *ImportCertificateByClientcsrResponseBody) HasCertificateServer() bool {
	if o != nil && o.CertificateServer.IsSet() {
		return true
	}

	return false
}

// SetCertificateServer gets a reference to the given NullableString and assigns it to the CertificateServer field.
func (o *ImportCertificateByClientcsrResponseBody) SetCertificateServer(v string) {
	o.CertificateServer.Set(&v)
}
// SetCertificateServerNil sets the value for CertificateServer to be an explicit nil
func (o *ImportCertificateByClientcsrResponseBody) SetCertificateServerNil() {
	o.CertificateServer.Set(nil)
}

// UnsetCertificateServer ensures that no value is present for CertificateServer, not even an explicit nil
func (o *ImportCertificateByClientcsrResponseBody) UnsetCertificateServer() {
	o.CertificateServer.Unset()
}

// GetPrivateKey returns the PrivateKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportCertificateByClientcsrResponseBody) GetPrivateKey() string {
	if o == nil || o.PrivateKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrivateKey.Get()
}

// GetPrivateKeyOk returns a tuple with the PrivateKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportCertificateByClientcsrResponseBody) GetPrivateKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrivateKey.Get(), o.PrivateKey.IsSet()
}

// HasPrivateKey returns a boolean if a field has been set.
func (o *ImportCertificateByClientcsrResponseBody) HasPrivateKey() bool {
	if o != nil && o.PrivateKey.IsSet() {
		return true
	}

	return false
}

// SetPrivateKey gets a reference to the given NullableString and assigns it to the PrivateKey field.
func (o *ImportCertificateByClientcsrResponseBody) SetPrivateKey(v string) {
	o.PrivateKey.Set(&v)
}
// SetPrivateKeyNil sets the value for PrivateKey to be an explicit nil
func (o *ImportCertificateByClientcsrResponseBody) SetPrivateKeyNil() {
	o.PrivateKey.Set(nil)
}

// UnsetPrivateKey ensures that no value is present for PrivateKey, not even an explicit nil
func (o *ImportCertificateByClientcsrResponseBody) UnsetPrivateKey() {
	o.PrivateKey.Unset()
}

// GetFileServerCert returns the FileServerCert field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ImportCertificateByClientcsrResponseBody) GetFileServerCert() string {
	if o == nil || o.FileServerCert.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileServerCert.Get()
}

// GetFileServerCertOk returns a tuple with the FileServerCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ImportCertificateByClientcsrResponseBody) GetFileServerCertOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileServerCert.Get(), o.FileServerCert.IsSet()
}

// HasFileServerCert returns a boolean if a field has been set.
func (o *ImportCertificateByClientcsrResponseBody) HasFileServerCert() bool {
	if o != nil && o.FileServerCert.IsSet() {
		return true
	}

	return false
}

// SetFileServerCert gets a reference to the given NullableString and assigns it to the FileServerCert field.
func (o *ImportCertificateByClientcsrResponseBody) SetFileServerCert(v string) {
	o.FileServerCert.Set(&v)
}
// SetFileServerCertNil sets the value for FileServerCert to be an explicit nil
func (o *ImportCertificateByClientcsrResponseBody) SetFileServerCertNil() {
	o.FileServerCert.Set(nil)
}

// UnsetFileServerCert ensures that no value is present for FileServerCert, not even an explicit nil
func (o *ImportCertificateByClientcsrResponseBody) UnsetFileServerCert() {
	o.FileServerCert.Unset()
}

func (o ImportCertificateByClientcsrResponseBody) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CertificateServer.IsSet() {
		toSerialize["certificateServer"] = o.CertificateServer.Get()
	}
	if o.PrivateKey.IsSet() {
		toSerialize["privateKey"] = o.PrivateKey.Get()
	}
	if o.FileServerCert.IsSet() {
		toSerialize["fileServerCert"] = o.FileServerCert.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableImportCertificateByClientcsrResponseBody struct {
	value *ImportCertificateByClientcsrResponseBody
	isSet bool
}

func (v NullableImportCertificateByClientcsrResponseBody) Get() *ImportCertificateByClientcsrResponseBody {
	return v.value
}

func (v *NullableImportCertificateByClientcsrResponseBody) Set(val *ImportCertificateByClientcsrResponseBody) {
	v.value = val
	v.isSet = true
}

func (v NullableImportCertificateByClientcsrResponseBody) IsSet() bool {
	return v.isSet
}

func (v *NullableImportCertificateByClientcsrResponseBody) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableImportCertificateByClientcsrResponseBody(val *ImportCertificateByClientcsrResponseBody) *NullableImportCertificateByClientcsrResponseBody {
	return &NullableImportCertificateByClientcsrResponseBody{value: val, isSet: true}
}

func (v NullableImportCertificateByClientcsrResponseBody) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableImportCertificateByClientcsrResponseBody) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


