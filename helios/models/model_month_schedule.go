/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// MonthSchedule Specifies settings that define a schedule for a Protection Group runs to on specific week and specific days of that week.
type MonthSchedule struct {
	// Specifies a list of days of the week when to start Protection Group Runs. <br> Example: To run a Protection Group on every Monday and Tuesday, set the schedule with following values: <br>  unit: 'Weeks' <br>  dayOfWeek: ['Monday','Tuesday']
	DayOfWeek []string `json:"dayOfWeek"`
	// Specifies the week of the month (such as 'Third') in a Monthly Schedule specified by unit field as 'Months'. <br>This field is used in combination with 'dayOfWeek' to define the day in the month to start the Protection Group Run. <br> Example: if 'weekOfMonth' is set to 'Third' and day is set to 'Monday', a backup is performed on the third Monday of every month.
	WeekOfMonth NullableString `json:"weekOfMonth"`
}

// NewMonthSchedule instantiates a new MonthSchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthSchedule(dayOfWeek []string, weekOfMonth NullableString) *MonthSchedule {
	this := MonthSchedule{}
	this.DayOfWeek = dayOfWeek
	this.WeekOfMonth = weekOfMonth
	return &this
}

// NewMonthScheduleWithDefaults instantiates a new MonthSchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthScheduleWithDefaults() *MonthSchedule {
	this := MonthSchedule{}
	return &this
}

// GetDayOfWeek returns the DayOfWeek field value
// If the value is explicit nil, the zero value for []string will be returned
func (o *MonthSchedule) GetDayOfWeek() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.DayOfWeek
}

// GetDayOfWeekOk returns a tuple with the DayOfWeek field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthSchedule) GetDayOfWeekOk() (*[]string, bool) {
	if o == nil || o.DayOfWeek == nil {
		return nil, false
	}
	return &o.DayOfWeek, true
}

// SetDayOfWeek sets field value
func (o *MonthSchedule) SetDayOfWeek(v []string) {
	o.DayOfWeek = v
}

// GetWeekOfMonth returns the WeekOfMonth field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MonthSchedule) GetWeekOfMonth() string {
	if o == nil || o.WeekOfMonth.Get() == nil {
		var ret string
		return ret
	}

	return *o.WeekOfMonth.Get()
}

// GetWeekOfMonthOk returns a tuple with the WeekOfMonth field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthSchedule) GetWeekOfMonthOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WeekOfMonth.Get(), o.WeekOfMonth.IsSet()
}

// SetWeekOfMonth sets field value
func (o *MonthSchedule) SetWeekOfMonth(v string) {
	o.WeekOfMonth.Set(&v)
}

func (o MonthSchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DayOfWeek != nil {
		toSerialize["dayOfWeek"] = o.DayOfWeek
	}
	if true {
		toSerialize["weekOfMonth"] = o.WeekOfMonth.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMonthSchedule struct {
	value *MonthSchedule
	isSet bool
}

func (v NullableMonthSchedule) Get() *MonthSchedule {
	return v.value
}

func (v *NullableMonthSchedule) Set(val *MonthSchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthSchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthSchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthSchedule(val *MonthSchedule) *NullableMonthSchedule {
	return &NullableMonthSchedule{value: val, isSet: true}
}

func (v NullableMonthSchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthSchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


