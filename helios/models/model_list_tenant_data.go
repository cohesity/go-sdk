/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ListTenantData List of tenants and the clusters to which they belong.
type ListTenantData struct {
	// List of tenants and the clusters to which they belong.
	Tenants *[]HeliosTenant `json:"tenants,omitempty"`
}

// NewListTenantData instantiates a new ListTenantData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListTenantData() *ListTenantData {
	this := ListTenantData{}
	return &this
}

// NewListTenantDataWithDefaults instantiates a new ListTenantData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListTenantDataWithDefaults() *ListTenantData {
	this := ListTenantData{}
	return &this
}

// GetTenants returns the Tenants field value if set, zero value otherwise.
func (o *ListTenantData) GetTenants() []HeliosTenant {
	if o == nil || o.Tenants == nil {
		var ret []HeliosTenant
		return ret
	}
	return *o.Tenants
}

// GetTenantsOk returns a tuple with the Tenants field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListTenantData) GetTenantsOk() (*[]HeliosTenant, bool) {
	if o == nil || o.Tenants == nil {
		return nil, false
	}
	return o.Tenants, true
}

// HasTenants returns a boolean if a field has been set.
func (o *ListTenantData) HasTenants() bool {
	if o != nil && o.Tenants != nil {
		return true
	}

	return false
}

// SetTenants gets a reference to the given []HeliosTenant and assigns it to the Tenants field.
func (o *ListTenantData) SetTenants(v []HeliosTenant) {
	o.Tenants = &v
}

func (o ListTenantData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Tenants != nil {
		toSerialize["tenants"] = o.Tenants
	}
	return json.Marshal(toSerialize)
}

type NullableListTenantData struct {
	value *ListTenantData
	isSet bool
}

func (v NullableListTenantData) Get() *ListTenantData {
	return v.value
}

func (v *NullableListTenantData) Set(val *ListTenantData) {
	v.value = val
	v.isSet = true
}

func (v NullableListTenantData) IsSet() bool {
	return v.isSet
}

func (v *NullableListTenantData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListTenantData(val *ListTenantData) *NullableListTenantData {
	return &NullableListTenantData{value: val, isSet: true}
}

func (v NullableListTenantData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListTenantData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


