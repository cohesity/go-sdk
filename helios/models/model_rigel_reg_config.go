/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RigelRegConfig Specifies the Rigel Registration Config.
type RigelRegConfig struct {
	RegInfo *RigelClaimInfo `json:"regInfo,omitempty"`
	ControlPlaneConnectionInfo *RigelConnectionInfo `json:"controlPlaneConnectionInfo,omitempty"`
	DataPlaneConnectionInfo *RigelConnectionInfo `json:"dataPlaneConnectionInfo,omitempty"`
}

// NewRigelRegConfig instantiates a new RigelRegConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRigelRegConfig() *RigelRegConfig {
	this := RigelRegConfig{}
	return &this
}

// NewRigelRegConfigWithDefaults instantiates a new RigelRegConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRigelRegConfigWithDefaults() *RigelRegConfig {
	this := RigelRegConfig{}
	return &this
}

// GetRegInfo returns the RegInfo field value if set, zero value otherwise.
func (o *RigelRegConfig) GetRegInfo() RigelClaimInfo {
	if o == nil || o.RegInfo == nil {
		var ret RigelClaimInfo
		return ret
	}
	return *o.RegInfo
}

// GetRegInfoOk returns a tuple with the RegInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RigelRegConfig) GetRegInfoOk() (*RigelClaimInfo, bool) {
	if o == nil || o.RegInfo == nil {
		return nil, false
	}
	return o.RegInfo, true
}

// HasRegInfo returns a boolean if a field has been set.
func (o *RigelRegConfig) HasRegInfo() bool {
	if o != nil && o.RegInfo != nil {
		return true
	}

	return false
}

// SetRegInfo gets a reference to the given RigelClaimInfo and assigns it to the RegInfo field.
func (o *RigelRegConfig) SetRegInfo(v RigelClaimInfo) {
	o.RegInfo = &v
}

// GetControlPlaneConnectionInfo returns the ControlPlaneConnectionInfo field value if set, zero value otherwise.
func (o *RigelRegConfig) GetControlPlaneConnectionInfo() RigelConnectionInfo {
	if o == nil || o.ControlPlaneConnectionInfo == nil {
		var ret RigelConnectionInfo
		return ret
	}
	return *o.ControlPlaneConnectionInfo
}

// GetControlPlaneConnectionInfoOk returns a tuple with the ControlPlaneConnectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RigelRegConfig) GetControlPlaneConnectionInfoOk() (*RigelConnectionInfo, bool) {
	if o == nil || o.ControlPlaneConnectionInfo == nil {
		return nil, false
	}
	return o.ControlPlaneConnectionInfo, true
}

// HasControlPlaneConnectionInfo returns a boolean if a field has been set.
func (o *RigelRegConfig) HasControlPlaneConnectionInfo() bool {
	if o != nil && o.ControlPlaneConnectionInfo != nil {
		return true
	}

	return false
}

// SetControlPlaneConnectionInfo gets a reference to the given RigelConnectionInfo and assigns it to the ControlPlaneConnectionInfo field.
func (o *RigelRegConfig) SetControlPlaneConnectionInfo(v RigelConnectionInfo) {
	o.ControlPlaneConnectionInfo = &v
}

// GetDataPlaneConnectionInfo returns the DataPlaneConnectionInfo field value if set, zero value otherwise.
func (o *RigelRegConfig) GetDataPlaneConnectionInfo() RigelConnectionInfo {
	if o == nil || o.DataPlaneConnectionInfo == nil {
		var ret RigelConnectionInfo
		return ret
	}
	return *o.DataPlaneConnectionInfo
}

// GetDataPlaneConnectionInfoOk returns a tuple with the DataPlaneConnectionInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RigelRegConfig) GetDataPlaneConnectionInfoOk() (*RigelConnectionInfo, bool) {
	if o == nil || o.DataPlaneConnectionInfo == nil {
		return nil, false
	}
	return o.DataPlaneConnectionInfo, true
}

// HasDataPlaneConnectionInfo returns a boolean if a field has been set.
func (o *RigelRegConfig) HasDataPlaneConnectionInfo() bool {
	if o != nil && o.DataPlaneConnectionInfo != nil {
		return true
	}

	return false
}

// SetDataPlaneConnectionInfo gets a reference to the given RigelConnectionInfo and assigns it to the DataPlaneConnectionInfo field.
func (o *RigelRegConfig) SetDataPlaneConnectionInfo(v RigelConnectionInfo) {
	o.DataPlaneConnectionInfo = &v
}

func (o RigelRegConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RegInfo != nil {
		toSerialize["regInfo"] = o.RegInfo
	}
	if o.ControlPlaneConnectionInfo != nil {
		toSerialize["controlPlaneConnectionInfo"] = o.ControlPlaneConnectionInfo
	}
	if o.DataPlaneConnectionInfo != nil {
		toSerialize["dataPlaneConnectionInfo"] = o.DataPlaneConnectionInfo
	}
	return json.Marshal(toSerialize)
}

type NullableRigelRegConfig struct {
	value *RigelRegConfig
	isSet bool
}

func (v NullableRigelRegConfig) Get() *RigelRegConfig {
	return v.value
}

func (v *NullableRigelRegConfig) Set(val *RigelRegConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRigelRegConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRigelRegConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRigelRegConfig(val *RigelRegConfig) *NullableRigelRegConfig {
	return &NullableRigelRegConfig{value: val, isSet: true}
}

func (v NullableRigelRegConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRigelRegConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


