/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// DataTieringTaskRunRequest Specifies the request to run tiering task once.
type DataTieringTaskRunRequest struct {
	// Only applicable for uptiering tasks. Ignore the uptiering policy and uptier the directory pointed by the 'uptierPath'. If path is '/', then uptier everything.  This is a global property which will be applied to all shares by default. This can be overriden by specifying uptierPath for each share.
	UptierPath NullableString `json:"uptierPath,omitempty"`
	// Specifies the list of shares to tier.
	Shares []DataTieringShareInfo `json:"shares,omitempty"`
}

// NewDataTieringTaskRunRequest instantiates a new DataTieringTaskRunRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTieringTaskRunRequest() *DataTieringTaskRunRequest {
	this := DataTieringTaskRunRequest{}
	return &this
}

// NewDataTieringTaskRunRequestWithDefaults instantiates a new DataTieringTaskRunRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTieringTaskRunRequestWithDefaults() *DataTieringTaskRunRequest {
	this := DataTieringTaskRunRequest{}
	return &this
}

// GetUptierPath returns the UptierPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTaskRunRequest) GetUptierPath() string {
	if o == nil || o.UptierPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.UptierPath.Get()
}

// GetUptierPathOk returns a tuple with the UptierPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTaskRunRequest) GetUptierPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UptierPath.Get(), o.UptierPath.IsSet()
}

// HasUptierPath returns a boolean if a field has been set.
func (o *DataTieringTaskRunRequest) HasUptierPath() bool {
	if o != nil && o.UptierPath.IsSet() {
		return true
	}

	return false
}

// SetUptierPath gets a reference to the given NullableString and assigns it to the UptierPath field.
func (o *DataTieringTaskRunRequest) SetUptierPath(v string) {
	o.UptierPath.Set(&v)
}
// SetUptierPathNil sets the value for UptierPath to be an explicit nil
func (o *DataTieringTaskRunRequest) SetUptierPathNil() {
	o.UptierPath.Set(nil)
}

// UnsetUptierPath ensures that no value is present for UptierPath, not even an explicit nil
func (o *DataTieringTaskRunRequest) UnsetUptierPath() {
	o.UptierPath.Unset()
}

// GetShares returns the Shares field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringTaskRunRequest) GetShares() []DataTieringShareInfo {
	if o == nil  {
		var ret []DataTieringShareInfo
		return ret
	}
	return o.Shares
}

// GetSharesOk returns a tuple with the Shares field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringTaskRunRequest) GetSharesOk() (*[]DataTieringShareInfo, bool) {
	if o == nil || o.Shares == nil {
		return nil, false
	}
	return &o.Shares, true
}

// HasShares returns a boolean if a field has been set.
func (o *DataTieringTaskRunRequest) HasShares() bool {
	if o != nil && o.Shares != nil {
		return true
	}

	return false
}

// SetShares gets a reference to the given []DataTieringShareInfo and assigns it to the Shares field.
func (o *DataTieringTaskRunRequest) SetShares(v []DataTieringShareInfo) {
	o.Shares = v
}

func (o DataTieringTaskRunRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UptierPath.IsSet() {
		toSerialize["uptierPath"] = o.UptierPath.Get()
	}
	if o.Shares != nil {
		toSerialize["shares"] = o.Shares
	}
	return json.Marshal(toSerialize)
}

type NullableDataTieringTaskRunRequest struct {
	value *DataTieringTaskRunRequest
	isSet bool
}

func (v NullableDataTieringTaskRunRequest) Get() *DataTieringTaskRunRequest {
	return v.value
}

func (v *NullableDataTieringTaskRunRequest) Set(val *DataTieringTaskRunRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTieringTaskRunRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTieringTaskRunRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTieringTaskRunRequest(val *DataTieringTaskRunRequest) *NullableDataTieringTaskRunRequest {
	return &NullableDataTieringTaskRunRequest{value: val, isSet: true}
}

func (v NullableDataTieringTaskRunRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTieringTaskRunRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


