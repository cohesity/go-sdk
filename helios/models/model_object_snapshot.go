/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ObjectSnapshot Specifies an Object Snapshot.
type ObjectSnapshot struct {
	// Specifies the id of the snapshot.
	Id NullableString `json:"id,omitempty"`
	// Specifies the target type where the Object's snapshot resides.
	SnapshotTargetType NullableString `json:"snapshotTargetType,omitempty"`
	// Specifies the indexing status of objects in this snapshot.<br> 'InProgress' indicates the indexing is in progress.<br> 'Done' indicates indexing is done.<br> 'NoIndex' indicates indexing is not applicable.<br> 'Error' indicates indexing failed with error.
	IndexingStatus NullableString `json:"indexingStatus,omitempty"`
	// Specifies id of the Protection Group.
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
	// Specifies name of the Protection Group.
	ProtectionGroupName NullableString `json:"protectionGroupName,omitempty"`
	// Specifies id of the Protection Group Run.
	ProtectionGroupRunId NullableString `json:"protectionGroupRunId,omitempty"`
	// Specifies the instance id of the protection run which create the snapshot.
	RunInstanceId NullableInt64 `json:"runInstanceId,omitempty"`
	// Specifies the start time of the run in micro seconds.
	RunStartTimeUsecs NullableInt64 `json:"runStartTimeUsecs,omitempty"`
	// Specifies the source protection group id in case of replication.
	SourceGroupId NullableString `json:"sourceGroupId,omitempty"`
	// Specifies the type of protection run created this snapshot.
	RunType NullableString `json:"runType,omitempty"`
	// Specifies the snapshot environment.
	Environment NullableString `json:"environment,omitempty"`
	// Specifies the timestamp in Unix time epoch in microseconds when the snapshot is taken for the specified Object.
	SnapshotTimestampUsecs NullableInt64 `json:"snapshotTimestampUsecs,omitempty"`
	// Specifies the expiry time of the snapshot in Unix timestamp epoch in microseconds. If the snapshot has no expiry, this property will not be set.
	ExpiryTimeUsecs NullableInt64 `json:"expiryTimeUsecs,omitempty"`
	// Specifies the external target information if this is an archival snapshot.
	ExternalTargetInfo NullableArchivalTargetSummaryInfo `json:"externalTargetInfo,omitempty"`
	// Specifies the Storage Domain id where the snapshot of object is present.
	StorageDomainId NullableInt64 `json:"storageDomainId,omitempty"`
	// Specifies if this snapshot has datalock.
	HasDataLock NullableBool `json:"hasDataLock,omitempty"`
	// Specifies if this snapshot is on legalhold.
	OnLegalHold NullableBool `json:"onLegalHold,omitempty"`
	// Specifies the object id which the snapshot is taken from.
	ObjectId NullableInt64 `json:"objectId,omitempty"`
	// Specifies the object name which the snapshot is taken from.
	ObjectName NullableString `json:"objectName,omitempty"`
	// Specifies the object source id which the snapshot is taken from.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Specifies the region id where this snapshot belongs to.
	RegionId NullableString `json:"regionId,omitempty"`
	// Specifies the cluster id where this snapshot belongs to.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the cluster incarnation id where this snapshot belongs to.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId,omitempty"`
	// Specifies the parameters specific to Physical type snapshot.
	PhysicalParams *PhysicalSnapshotParams `json:"physicalParams,omitempty"`
	// Specifies the parameters specific to HyperV type snapshot.
	HypervParams *HypervSnapshotParams `json:"hypervParams,omitempty"`
	// Specifies the parameters specific to AWS type snapshot.
	AwsParams *AwsSnapshotParams `json:"awsParams,omitempty"`
	// Specifies the parameters specific to Azure type snapshot.
	AzureParams *AzureSnapshotParams `json:"azureParams,omitempty"`
	// Specifies the parameters specific to NetApp type snapshot.
	NetappParams *NetappObjectParams `json:"netappParams,omitempty"`
	// Specifies the parameters specific to Isilon type snapshot.
	IsilonParams *IsilonObjectParams `json:"isilonParams,omitempty"`
	// Specifies the parameters specific to GPFS type snapshot.
	GpfsParams *CommonNasObjectParams `json:"gpfsParams,omitempty"`
	// Specifies the parameters specific to Flashblade type snapshot.
	FlashbladeParams *FlashbladeObjectParams `json:"flashbladeParams,omitempty"`
	// Specifies the parameters specific to Generic NAS type snapshot.
	GenericNasParams *CommonNasObjectParams `json:"genericNasParams,omitempty"`
	// Specifies the parameters specific to NetApp type snapshot.
	ElastifileParams *CommonNasObjectParams `json:"elastifileParams,omitempty"`
}

// NewObjectSnapshot instantiates a new ObjectSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectSnapshot() *ObjectSnapshot {
	this := ObjectSnapshot{}
	return &this
}

// NewObjectSnapshotWithDefaults instantiates a new ObjectSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectSnapshotWithDefaults() *ObjectSnapshot {
	this := ObjectSnapshot{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *ObjectSnapshot) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ObjectSnapshot) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ObjectSnapshot) UnsetId() {
	o.Id.Unset()
}

// GetSnapshotTargetType returns the SnapshotTargetType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetSnapshotTargetType() string {
	if o == nil || o.SnapshotTargetType.Get() == nil {
		var ret string
		return ret
	}
	return *o.SnapshotTargetType.Get()
}

// GetSnapshotTargetTypeOk returns a tuple with the SnapshotTargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetSnapshotTargetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotTargetType.Get(), o.SnapshotTargetType.IsSet()
}

// HasSnapshotTargetType returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasSnapshotTargetType() bool {
	if o != nil && o.SnapshotTargetType.IsSet() {
		return true
	}

	return false
}

// SetSnapshotTargetType gets a reference to the given NullableString and assigns it to the SnapshotTargetType field.
func (o *ObjectSnapshot) SetSnapshotTargetType(v string) {
	o.SnapshotTargetType.Set(&v)
}
// SetSnapshotTargetTypeNil sets the value for SnapshotTargetType to be an explicit nil
func (o *ObjectSnapshot) SetSnapshotTargetTypeNil() {
	o.SnapshotTargetType.Set(nil)
}

// UnsetSnapshotTargetType ensures that no value is present for SnapshotTargetType, not even an explicit nil
func (o *ObjectSnapshot) UnsetSnapshotTargetType() {
	o.SnapshotTargetType.Unset()
}

// GetIndexingStatus returns the IndexingStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetIndexingStatus() string {
	if o == nil || o.IndexingStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.IndexingStatus.Get()
}

// GetIndexingStatusOk returns a tuple with the IndexingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetIndexingStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IndexingStatus.Get(), o.IndexingStatus.IsSet()
}

// HasIndexingStatus returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasIndexingStatus() bool {
	if o != nil && o.IndexingStatus.IsSet() {
		return true
	}

	return false
}

// SetIndexingStatus gets a reference to the given NullableString and assigns it to the IndexingStatus field.
func (o *ObjectSnapshot) SetIndexingStatus(v string) {
	o.IndexingStatus.Set(&v)
}
// SetIndexingStatusNil sets the value for IndexingStatus to be an explicit nil
func (o *ObjectSnapshot) SetIndexingStatusNil() {
	o.IndexingStatus.Set(nil)
}

// UnsetIndexingStatus ensures that no value is present for IndexingStatus, not even an explicit nil
func (o *ObjectSnapshot) UnsetIndexingStatus() {
	o.IndexingStatus.Unset()
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetProtectionGroupId() string {
	if o == nil || o.ProtectionGroupId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *ObjectSnapshot) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *ObjectSnapshot) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *ObjectSnapshot) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

// GetProtectionGroupName returns the ProtectionGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetProtectionGroupName() string {
	if o == nil || o.ProtectionGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupName.Get()
}

// GetProtectionGroupNameOk returns a tuple with the ProtectionGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetProtectionGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupName.Get(), o.ProtectionGroupName.IsSet()
}

// HasProtectionGroupName returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasProtectionGroupName() bool {
	if o != nil && o.ProtectionGroupName.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupName gets a reference to the given NullableString and assigns it to the ProtectionGroupName field.
func (o *ObjectSnapshot) SetProtectionGroupName(v string) {
	o.ProtectionGroupName.Set(&v)
}
// SetProtectionGroupNameNil sets the value for ProtectionGroupName to be an explicit nil
func (o *ObjectSnapshot) SetProtectionGroupNameNil() {
	o.ProtectionGroupName.Set(nil)
}

// UnsetProtectionGroupName ensures that no value is present for ProtectionGroupName, not even an explicit nil
func (o *ObjectSnapshot) UnsetProtectionGroupName() {
	o.ProtectionGroupName.Unset()
}

// GetProtectionGroupRunId returns the ProtectionGroupRunId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetProtectionGroupRunId() string {
	if o == nil || o.ProtectionGroupRunId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupRunId.Get()
}

// GetProtectionGroupRunIdOk returns a tuple with the ProtectionGroupRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetProtectionGroupRunIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupRunId.Get(), o.ProtectionGroupRunId.IsSet()
}

// HasProtectionGroupRunId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasProtectionGroupRunId() bool {
	if o != nil && o.ProtectionGroupRunId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupRunId gets a reference to the given NullableString and assigns it to the ProtectionGroupRunId field.
func (o *ObjectSnapshot) SetProtectionGroupRunId(v string) {
	o.ProtectionGroupRunId.Set(&v)
}
// SetProtectionGroupRunIdNil sets the value for ProtectionGroupRunId to be an explicit nil
func (o *ObjectSnapshot) SetProtectionGroupRunIdNil() {
	o.ProtectionGroupRunId.Set(nil)
}

// UnsetProtectionGroupRunId ensures that no value is present for ProtectionGroupRunId, not even an explicit nil
func (o *ObjectSnapshot) UnsetProtectionGroupRunId() {
	o.ProtectionGroupRunId.Unset()
}

// GetRunInstanceId returns the RunInstanceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetRunInstanceId() int64 {
	if o == nil || o.RunInstanceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RunInstanceId.Get()
}

// GetRunInstanceIdOk returns a tuple with the RunInstanceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetRunInstanceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunInstanceId.Get(), o.RunInstanceId.IsSet()
}

// HasRunInstanceId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasRunInstanceId() bool {
	if o != nil && o.RunInstanceId.IsSet() {
		return true
	}

	return false
}

// SetRunInstanceId gets a reference to the given NullableInt64 and assigns it to the RunInstanceId field.
func (o *ObjectSnapshot) SetRunInstanceId(v int64) {
	o.RunInstanceId.Set(&v)
}
// SetRunInstanceIdNil sets the value for RunInstanceId to be an explicit nil
func (o *ObjectSnapshot) SetRunInstanceIdNil() {
	o.RunInstanceId.Set(nil)
}

// UnsetRunInstanceId ensures that no value is present for RunInstanceId, not even an explicit nil
func (o *ObjectSnapshot) UnsetRunInstanceId() {
	o.RunInstanceId.Unset()
}

// GetRunStartTimeUsecs returns the RunStartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetRunStartTimeUsecs() int64 {
	if o == nil || o.RunStartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RunStartTimeUsecs.Get()
}

// GetRunStartTimeUsecsOk returns a tuple with the RunStartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetRunStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunStartTimeUsecs.Get(), o.RunStartTimeUsecs.IsSet()
}

// HasRunStartTimeUsecs returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasRunStartTimeUsecs() bool {
	if o != nil && o.RunStartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRunStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RunStartTimeUsecs field.
func (o *ObjectSnapshot) SetRunStartTimeUsecs(v int64) {
	o.RunStartTimeUsecs.Set(&v)
}
// SetRunStartTimeUsecsNil sets the value for RunStartTimeUsecs to be an explicit nil
func (o *ObjectSnapshot) SetRunStartTimeUsecsNil() {
	o.RunStartTimeUsecs.Set(nil)
}

// UnsetRunStartTimeUsecs ensures that no value is present for RunStartTimeUsecs, not even an explicit nil
func (o *ObjectSnapshot) UnsetRunStartTimeUsecs() {
	o.RunStartTimeUsecs.Unset()
}

// GetSourceGroupId returns the SourceGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetSourceGroupId() string {
	if o == nil || o.SourceGroupId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceGroupId.Get()
}

// GetSourceGroupIdOk returns a tuple with the SourceGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetSourceGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceGroupId.Get(), o.SourceGroupId.IsSet()
}

// HasSourceGroupId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasSourceGroupId() bool {
	if o != nil && o.SourceGroupId.IsSet() {
		return true
	}

	return false
}

// SetSourceGroupId gets a reference to the given NullableString and assigns it to the SourceGroupId field.
func (o *ObjectSnapshot) SetSourceGroupId(v string) {
	o.SourceGroupId.Set(&v)
}
// SetSourceGroupIdNil sets the value for SourceGroupId to be an explicit nil
func (o *ObjectSnapshot) SetSourceGroupIdNil() {
	o.SourceGroupId.Set(nil)
}

// UnsetSourceGroupId ensures that no value is present for SourceGroupId, not even an explicit nil
func (o *ObjectSnapshot) UnsetSourceGroupId() {
	o.SourceGroupId.Unset()
}

// GetRunType returns the RunType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetRunType() string {
	if o == nil || o.RunType.Get() == nil {
		var ret string
		return ret
	}
	return *o.RunType.Get()
}

// GetRunTypeOk returns a tuple with the RunType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetRunTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunType.Get(), o.RunType.IsSet()
}

// HasRunType returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasRunType() bool {
	if o != nil && o.RunType.IsSet() {
		return true
	}

	return false
}

// SetRunType gets a reference to the given NullableString and assigns it to the RunType field.
func (o *ObjectSnapshot) SetRunType(v string) {
	o.RunType.Set(&v)
}
// SetRunTypeNil sets the value for RunType to be an explicit nil
func (o *ObjectSnapshot) SetRunTypeNil() {
	o.RunType.Set(nil)
}

// UnsetRunType ensures that no value is present for RunType, not even an explicit nil
func (o *ObjectSnapshot) UnsetRunType() {
	o.RunType.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *ObjectSnapshot) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *ObjectSnapshot) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *ObjectSnapshot) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetSnapshotTimestampUsecs returns the SnapshotTimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetSnapshotTimestampUsecs() int64 {
	if o == nil || o.SnapshotTimestampUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SnapshotTimestampUsecs.Get()
}

// GetSnapshotTimestampUsecsOk returns a tuple with the SnapshotTimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetSnapshotTimestampUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotTimestampUsecs.Get(), o.SnapshotTimestampUsecs.IsSet()
}

// HasSnapshotTimestampUsecs returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasSnapshotTimestampUsecs() bool {
	if o != nil && o.SnapshotTimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetSnapshotTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the SnapshotTimestampUsecs field.
func (o *ObjectSnapshot) SetSnapshotTimestampUsecs(v int64) {
	o.SnapshotTimestampUsecs.Set(&v)
}
// SetSnapshotTimestampUsecsNil sets the value for SnapshotTimestampUsecs to be an explicit nil
func (o *ObjectSnapshot) SetSnapshotTimestampUsecsNil() {
	o.SnapshotTimestampUsecs.Set(nil)
}

// UnsetSnapshotTimestampUsecs ensures that no value is present for SnapshotTimestampUsecs, not even an explicit nil
func (o *ObjectSnapshot) UnsetSnapshotTimestampUsecs() {
	o.SnapshotTimestampUsecs.Unset()
}

// GetExpiryTimeUsecs returns the ExpiryTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetExpiryTimeUsecs() int64 {
	if o == nil || o.ExpiryTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiryTimeUsecs.Get()
}

// GetExpiryTimeUsecsOk returns a tuple with the ExpiryTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetExpiryTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTimeUsecs.Get(), o.ExpiryTimeUsecs.IsSet()
}

// HasExpiryTimeUsecs returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasExpiryTimeUsecs() bool {
	if o != nil && o.ExpiryTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ExpiryTimeUsecs field.
func (o *ObjectSnapshot) SetExpiryTimeUsecs(v int64) {
	o.ExpiryTimeUsecs.Set(&v)
}
// SetExpiryTimeUsecsNil sets the value for ExpiryTimeUsecs to be an explicit nil
func (o *ObjectSnapshot) SetExpiryTimeUsecsNil() {
	o.ExpiryTimeUsecs.Set(nil)
}

// UnsetExpiryTimeUsecs ensures that no value is present for ExpiryTimeUsecs, not even an explicit nil
func (o *ObjectSnapshot) UnsetExpiryTimeUsecs() {
	o.ExpiryTimeUsecs.Unset()
}

// GetExternalTargetInfo returns the ExternalTargetInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetExternalTargetInfo() ArchivalTargetSummaryInfo {
	if o == nil || o.ExternalTargetInfo.Get() == nil {
		var ret ArchivalTargetSummaryInfo
		return ret
	}
	return *o.ExternalTargetInfo.Get()
}

// GetExternalTargetInfoOk returns a tuple with the ExternalTargetInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetExternalTargetInfoOk() (*ArchivalTargetSummaryInfo, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExternalTargetInfo.Get(), o.ExternalTargetInfo.IsSet()
}

// HasExternalTargetInfo returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasExternalTargetInfo() bool {
	if o != nil && o.ExternalTargetInfo.IsSet() {
		return true
	}

	return false
}

// SetExternalTargetInfo gets a reference to the given NullableArchivalTargetSummaryInfo and assigns it to the ExternalTargetInfo field.
func (o *ObjectSnapshot) SetExternalTargetInfo(v ArchivalTargetSummaryInfo) {
	o.ExternalTargetInfo.Set(&v)
}
// SetExternalTargetInfoNil sets the value for ExternalTargetInfo to be an explicit nil
func (o *ObjectSnapshot) SetExternalTargetInfoNil() {
	o.ExternalTargetInfo.Set(nil)
}

// UnsetExternalTargetInfo ensures that no value is present for ExternalTargetInfo, not even an explicit nil
func (o *ObjectSnapshot) UnsetExternalTargetInfo() {
	o.ExternalTargetInfo.Unset()
}

// GetStorageDomainId returns the StorageDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetStorageDomainId() int64 {
	if o == nil || o.StorageDomainId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageDomainId.Get()
}

// GetStorageDomainIdOk returns a tuple with the StorageDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetStorageDomainIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageDomainId.Get(), o.StorageDomainId.IsSet()
}

// HasStorageDomainId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasStorageDomainId() bool {
	if o != nil && o.StorageDomainId.IsSet() {
		return true
	}

	return false
}

// SetStorageDomainId gets a reference to the given NullableInt64 and assigns it to the StorageDomainId field.
func (o *ObjectSnapshot) SetStorageDomainId(v int64) {
	o.StorageDomainId.Set(&v)
}
// SetStorageDomainIdNil sets the value for StorageDomainId to be an explicit nil
func (o *ObjectSnapshot) SetStorageDomainIdNil() {
	o.StorageDomainId.Set(nil)
}

// UnsetStorageDomainId ensures that no value is present for StorageDomainId, not even an explicit nil
func (o *ObjectSnapshot) UnsetStorageDomainId() {
	o.StorageDomainId.Unset()
}

// GetHasDataLock returns the HasDataLock field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetHasDataLock() bool {
	if o == nil || o.HasDataLock.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasDataLock.Get()
}

// GetHasDataLockOk returns a tuple with the HasDataLock field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetHasDataLockOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasDataLock.Get(), o.HasDataLock.IsSet()
}

// HasHasDataLock returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasHasDataLock() bool {
	if o != nil && o.HasDataLock.IsSet() {
		return true
	}

	return false
}

// SetHasDataLock gets a reference to the given NullableBool and assigns it to the HasDataLock field.
func (o *ObjectSnapshot) SetHasDataLock(v bool) {
	o.HasDataLock.Set(&v)
}
// SetHasDataLockNil sets the value for HasDataLock to be an explicit nil
func (o *ObjectSnapshot) SetHasDataLockNil() {
	o.HasDataLock.Set(nil)
}

// UnsetHasDataLock ensures that no value is present for HasDataLock, not even an explicit nil
func (o *ObjectSnapshot) UnsetHasDataLock() {
	o.HasDataLock.Unset()
}

// GetOnLegalHold returns the OnLegalHold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetOnLegalHold() bool {
	if o == nil || o.OnLegalHold.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OnLegalHold.Get()
}

// GetOnLegalHoldOk returns a tuple with the OnLegalHold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetOnLegalHoldOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OnLegalHold.Get(), o.OnLegalHold.IsSet()
}

// HasOnLegalHold returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasOnLegalHold() bool {
	if o != nil && o.OnLegalHold.IsSet() {
		return true
	}

	return false
}

// SetOnLegalHold gets a reference to the given NullableBool and assigns it to the OnLegalHold field.
func (o *ObjectSnapshot) SetOnLegalHold(v bool) {
	o.OnLegalHold.Set(&v)
}
// SetOnLegalHoldNil sets the value for OnLegalHold to be an explicit nil
func (o *ObjectSnapshot) SetOnLegalHoldNil() {
	o.OnLegalHold.Set(nil)
}

// UnsetOnLegalHold ensures that no value is present for OnLegalHold, not even an explicit nil
func (o *ObjectSnapshot) UnsetOnLegalHold() {
	o.OnLegalHold.Unset()
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetObjectId() int64 {
	if o == nil || o.ObjectId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ObjectId.Get()
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetObjectIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectId.Get(), o.ObjectId.IsSet()
}

// HasObjectId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasObjectId() bool {
	if o != nil && o.ObjectId.IsSet() {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given NullableInt64 and assigns it to the ObjectId field.
func (o *ObjectSnapshot) SetObjectId(v int64) {
	o.ObjectId.Set(&v)
}
// SetObjectIdNil sets the value for ObjectId to be an explicit nil
func (o *ObjectSnapshot) SetObjectIdNil() {
	o.ObjectId.Set(nil)
}

// UnsetObjectId ensures that no value is present for ObjectId, not even an explicit nil
func (o *ObjectSnapshot) UnsetObjectId() {
	o.ObjectId.Unset()
}

// GetObjectName returns the ObjectName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetObjectName() string {
	if o == nil || o.ObjectName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectName.Get()
}

// GetObjectNameOk returns a tuple with the ObjectName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetObjectNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectName.Get(), o.ObjectName.IsSet()
}

// HasObjectName returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasObjectName() bool {
	if o != nil && o.ObjectName.IsSet() {
		return true
	}

	return false
}

// SetObjectName gets a reference to the given NullableString and assigns it to the ObjectName field.
func (o *ObjectSnapshot) SetObjectName(v string) {
	o.ObjectName.Set(&v)
}
// SetObjectNameNil sets the value for ObjectName to be an explicit nil
func (o *ObjectSnapshot) SetObjectNameNil() {
	o.ObjectName.Set(nil)
}

// UnsetObjectName ensures that no value is present for ObjectName, not even an explicit nil
func (o *ObjectSnapshot) UnsetObjectName() {
	o.ObjectName.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *ObjectSnapshot) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *ObjectSnapshot) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *ObjectSnapshot) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetRegionId returns the RegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetRegionId() string {
	if o == nil || o.RegionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegionId.Get()
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetRegionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegionId.Get(), o.RegionId.IsSet()
}

// HasRegionId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasRegionId() bool {
	if o != nil && o.RegionId.IsSet() {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given NullableString and assigns it to the RegionId field.
func (o *ObjectSnapshot) SetRegionId(v string) {
	o.RegionId.Set(&v)
}
// SetRegionIdNil sets the value for RegionId to be an explicit nil
func (o *ObjectSnapshot) SetRegionIdNil() {
	o.RegionId.Set(nil)
}

// UnsetRegionId ensures that no value is present for RegionId, not even an explicit nil
func (o *ObjectSnapshot) UnsetRegionId() {
	o.RegionId.Unset()
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *ObjectSnapshot) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *ObjectSnapshot) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *ObjectSnapshot) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectSnapshot) GetClusterIncarnationId() int64 {
	if o == nil || o.ClusterIncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectSnapshot) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasClusterIncarnationId() bool {
	if o != nil && o.ClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the ClusterIncarnationId field.
func (o *ObjectSnapshot) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}
// SetClusterIncarnationIdNil sets the value for ClusterIncarnationId to be an explicit nil
func (o *ObjectSnapshot) SetClusterIncarnationIdNil() {
	o.ClusterIncarnationId.Set(nil)
}

// UnsetClusterIncarnationId ensures that no value is present for ClusterIncarnationId, not even an explicit nil
func (o *ObjectSnapshot) UnsetClusterIncarnationId() {
	o.ClusterIncarnationId.Unset()
}

// GetPhysicalParams returns the PhysicalParams field value if set, zero value otherwise.
func (o *ObjectSnapshot) GetPhysicalParams() PhysicalSnapshotParams {
	if o == nil || o.PhysicalParams == nil {
		var ret PhysicalSnapshotParams
		return ret
	}
	return *o.PhysicalParams
}

// GetPhysicalParamsOk returns a tuple with the PhysicalParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSnapshot) GetPhysicalParamsOk() (*PhysicalSnapshotParams, bool) {
	if o == nil || o.PhysicalParams == nil {
		return nil, false
	}
	return o.PhysicalParams, true
}

// HasPhysicalParams returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasPhysicalParams() bool {
	if o != nil && o.PhysicalParams != nil {
		return true
	}

	return false
}

// SetPhysicalParams gets a reference to the given PhysicalSnapshotParams and assigns it to the PhysicalParams field.
func (o *ObjectSnapshot) SetPhysicalParams(v PhysicalSnapshotParams) {
	o.PhysicalParams = &v
}

// GetHypervParams returns the HypervParams field value if set, zero value otherwise.
func (o *ObjectSnapshot) GetHypervParams() HypervSnapshotParams {
	if o == nil || o.HypervParams == nil {
		var ret HypervSnapshotParams
		return ret
	}
	return *o.HypervParams
}

// GetHypervParamsOk returns a tuple with the HypervParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSnapshot) GetHypervParamsOk() (*HypervSnapshotParams, bool) {
	if o == nil || o.HypervParams == nil {
		return nil, false
	}
	return o.HypervParams, true
}

// HasHypervParams returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasHypervParams() bool {
	if o != nil && o.HypervParams != nil {
		return true
	}

	return false
}

// SetHypervParams gets a reference to the given HypervSnapshotParams and assigns it to the HypervParams field.
func (o *ObjectSnapshot) SetHypervParams(v HypervSnapshotParams) {
	o.HypervParams = &v
}

// GetAwsParams returns the AwsParams field value if set, zero value otherwise.
func (o *ObjectSnapshot) GetAwsParams() AwsSnapshotParams {
	if o == nil || o.AwsParams == nil {
		var ret AwsSnapshotParams
		return ret
	}
	return *o.AwsParams
}

// GetAwsParamsOk returns a tuple with the AwsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSnapshot) GetAwsParamsOk() (*AwsSnapshotParams, bool) {
	if o == nil || o.AwsParams == nil {
		return nil, false
	}
	return o.AwsParams, true
}

// HasAwsParams returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasAwsParams() bool {
	if o != nil && o.AwsParams != nil {
		return true
	}

	return false
}

// SetAwsParams gets a reference to the given AwsSnapshotParams and assigns it to the AwsParams field.
func (o *ObjectSnapshot) SetAwsParams(v AwsSnapshotParams) {
	o.AwsParams = &v
}

// GetAzureParams returns the AzureParams field value if set, zero value otherwise.
func (o *ObjectSnapshot) GetAzureParams() AzureSnapshotParams {
	if o == nil || o.AzureParams == nil {
		var ret AzureSnapshotParams
		return ret
	}
	return *o.AzureParams
}

// GetAzureParamsOk returns a tuple with the AzureParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSnapshot) GetAzureParamsOk() (*AzureSnapshotParams, bool) {
	if o == nil || o.AzureParams == nil {
		return nil, false
	}
	return o.AzureParams, true
}

// HasAzureParams returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasAzureParams() bool {
	if o != nil && o.AzureParams != nil {
		return true
	}

	return false
}

// SetAzureParams gets a reference to the given AzureSnapshotParams and assigns it to the AzureParams field.
func (o *ObjectSnapshot) SetAzureParams(v AzureSnapshotParams) {
	o.AzureParams = &v
}

// GetNetappParams returns the NetappParams field value if set, zero value otherwise.
func (o *ObjectSnapshot) GetNetappParams() NetappObjectParams {
	if o == nil || o.NetappParams == nil {
		var ret NetappObjectParams
		return ret
	}
	return *o.NetappParams
}

// GetNetappParamsOk returns a tuple with the NetappParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSnapshot) GetNetappParamsOk() (*NetappObjectParams, bool) {
	if o == nil || o.NetappParams == nil {
		return nil, false
	}
	return o.NetappParams, true
}

// HasNetappParams returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasNetappParams() bool {
	if o != nil && o.NetappParams != nil {
		return true
	}

	return false
}

// SetNetappParams gets a reference to the given NetappObjectParams and assigns it to the NetappParams field.
func (o *ObjectSnapshot) SetNetappParams(v NetappObjectParams) {
	o.NetappParams = &v
}

// GetIsilonParams returns the IsilonParams field value if set, zero value otherwise.
func (o *ObjectSnapshot) GetIsilonParams() IsilonObjectParams {
	if o == nil || o.IsilonParams == nil {
		var ret IsilonObjectParams
		return ret
	}
	return *o.IsilonParams
}

// GetIsilonParamsOk returns a tuple with the IsilonParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSnapshot) GetIsilonParamsOk() (*IsilonObjectParams, bool) {
	if o == nil || o.IsilonParams == nil {
		return nil, false
	}
	return o.IsilonParams, true
}

// HasIsilonParams returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasIsilonParams() bool {
	if o != nil && o.IsilonParams != nil {
		return true
	}

	return false
}

// SetIsilonParams gets a reference to the given IsilonObjectParams and assigns it to the IsilonParams field.
func (o *ObjectSnapshot) SetIsilonParams(v IsilonObjectParams) {
	o.IsilonParams = &v
}

// GetGpfsParams returns the GpfsParams field value if set, zero value otherwise.
func (o *ObjectSnapshot) GetGpfsParams() CommonNasObjectParams {
	if o == nil || o.GpfsParams == nil {
		var ret CommonNasObjectParams
		return ret
	}
	return *o.GpfsParams
}

// GetGpfsParamsOk returns a tuple with the GpfsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSnapshot) GetGpfsParamsOk() (*CommonNasObjectParams, bool) {
	if o == nil || o.GpfsParams == nil {
		return nil, false
	}
	return o.GpfsParams, true
}

// HasGpfsParams returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasGpfsParams() bool {
	if o != nil && o.GpfsParams != nil {
		return true
	}

	return false
}

// SetGpfsParams gets a reference to the given CommonNasObjectParams and assigns it to the GpfsParams field.
func (o *ObjectSnapshot) SetGpfsParams(v CommonNasObjectParams) {
	o.GpfsParams = &v
}

// GetFlashbladeParams returns the FlashbladeParams field value if set, zero value otherwise.
func (o *ObjectSnapshot) GetFlashbladeParams() FlashbladeObjectParams {
	if o == nil || o.FlashbladeParams == nil {
		var ret FlashbladeObjectParams
		return ret
	}
	return *o.FlashbladeParams
}

// GetFlashbladeParamsOk returns a tuple with the FlashbladeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSnapshot) GetFlashbladeParamsOk() (*FlashbladeObjectParams, bool) {
	if o == nil || o.FlashbladeParams == nil {
		return nil, false
	}
	return o.FlashbladeParams, true
}

// HasFlashbladeParams returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasFlashbladeParams() bool {
	if o != nil && o.FlashbladeParams != nil {
		return true
	}

	return false
}

// SetFlashbladeParams gets a reference to the given FlashbladeObjectParams and assigns it to the FlashbladeParams field.
func (o *ObjectSnapshot) SetFlashbladeParams(v FlashbladeObjectParams) {
	o.FlashbladeParams = &v
}

// GetGenericNasParams returns the GenericNasParams field value if set, zero value otherwise.
func (o *ObjectSnapshot) GetGenericNasParams() CommonNasObjectParams {
	if o == nil || o.GenericNasParams == nil {
		var ret CommonNasObjectParams
		return ret
	}
	return *o.GenericNasParams
}

// GetGenericNasParamsOk returns a tuple with the GenericNasParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSnapshot) GetGenericNasParamsOk() (*CommonNasObjectParams, bool) {
	if o == nil || o.GenericNasParams == nil {
		return nil, false
	}
	return o.GenericNasParams, true
}

// HasGenericNasParams returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasGenericNasParams() bool {
	if o != nil && o.GenericNasParams != nil {
		return true
	}

	return false
}

// SetGenericNasParams gets a reference to the given CommonNasObjectParams and assigns it to the GenericNasParams field.
func (o *ObjectSnapshot) SetGenericNasParams(v CommonNasObjectParams) {
	o.GenericNasParams = &v
}

// GetElastifileParams returns the ElastifileParams field value if set, zero value otherwise.
func (o *ObjectSnapshot) GetElastifileParams() CommonNasObjectParams {
	if o == nil || o.ElastifileParams == nil {
		var ret CommonNasObjectParams
		return ret
	}
	return *o.ElastifileParams
}

// GetElastifileParamsOk returns a tuple with the ElastifileParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectSnapshot) GetElastifileParamsOk() (*CommonNasObjectParams, bool) {
	if o == nil || o.ElastifileParams == nil {
		return nil, false
	}
	return o.ElastifileParams, true
}

// HasElastifileParams returns a boolean if a field has been set.
func (o *ObjectSnapshot) HasElastifileParams() bool {
	if o != nil && o.ElastifileParams != nil {
		return true
	}

	return false
}

// SetElastifileParams gets a reference to the given CommonNasObjectParams and assigns it to the ElastifileParams field.
func (o *ObjectSnapshot) SetElastifileParams(v CommonNasObjectParams) {
	o.ElastifileParams = &v
}

func (o ObjectSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.SnapshotTargetType.IsSet() {
		toSerialize["snapshotTargetType"] = o.SnapshotTargetType.Get()
	}
	if o.IndexingStatus.IsSet() {
		toSerialize["indexingStatus"] = o.IndexingStatus.Get()
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	if o.ProtectionGroupName.IsSet() {
		toSerialize["protectionGroupName"] = o.ProtectionGroupName.Get()
	}
	if o.ProtectionGroupRunId.IsSet() {
		toSerialize["protectionGroupRunId"] = o.ProtectionGroupRunId.Get()
	}
	if o.RunInstanceId.IsSet() {
		toSerialize["runInstanceId"] = o.RunInstanceId.Get()
	}
	if o.RunStartTimeUsecs.IsSet() {
		toSerialize["runStartTimeUsecs"] = o.RunStartTimeUsecs.Get()
	}
	if o.SourceGroupId.IsSet() {
		toSerialize["sourceGroupId"] = o.SourceGroupId.Get()
	}
	if o.RunType.IsSet() {
		toSerialize["runType"] = o.RunType.Get()
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.SnapshotTimestampUsecs.IsSet() {
		toSerialize["snapshotTimestampUsecs"] = o.SnapshotTimestampUsecs.Get()
	}
	if o.ExpiryTimeUsecs.IsSet() {
		toSerialize["expiryTimeUsecs"] = o.ExpiryTimeUsecs.Get()
	}
	if o.ExternalTargetInfo.IsSet() {
		toSerialize["externalTargetInfo"] = o.ExternalTargetInfo.Get()
	}
	if o.StorageDomainId.IsSet() {
		toSerialize["storageDomainId"] = o.StorageDomainId.Get()
	}
	if o.HasDataLock.IsSet() {
		toSerialize["hasDataLock"] = o.HasDataLock.Get()
	}
	if o.OnLegalHold.IsSet() {
		toSerialize["onLegalHold"] = o.OnLegalHold.Get()
	}
	if o.ObjectId.IsSet() {
		toSerialize["objectId"] = o.ObjectId.Get()
	}
	if o.ObjectName.IsSet() {
		toSerialize["objectName"] = o.ObjectName.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.RegionId.IsSet() {
		toSerialize["regionId"] = o.RegionId.Get()
	}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterIncarnationId.IsSet() {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if o.PhysicalParams != nil {
		toSerialize["physicalParams"] = o.PhysicalParams
	}
	if o.HypervParams != nil {
		toSerialize["hypervParams"] = o.HypervParams
	}
	if o.AwsParams != nil {
		toSerialize["awsParams"] = o.AwsParams
	}
	if o.AzureParams != nil {
		toSerialize["azureParams"] = o.AzureParams
	}
	if o.NetappParams != nil {
		toSerialize["netappParams"] = o.NetappParams
	}
	if o.IsilonParams != nil {
		toSerialize["isilonParams"] = o.IsilonParams
	}
	if o.GpfsParams != nil {
		toSerialize["gpfsParams"] = o.GpfsParams
	}
	if o.FlashbladeParams != nil {
		toSerialize["flashbladeParams"] = o.FlashbladeParams
	}
	if o.GenericNasParams != nil {
		toSerialize["genericNasParams"] = o.GenericNasParams
	}
	if o.ElastifileParams != nil {
		toSerialize["elastifileParams"] = o.ElastifileParams
	}
	return json.Marshal(toSerialize)
}

type NullableObjectSnapshot struct {
	value *ObjectSnapshot
	isSet bool
}

func (v NullableObjectSnapshot) Get() *ObjectSnapshot {
	return v.value
}

func (v *NullableObjectSnapshot) Set(val *ObjectSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectSnapshot(val *ObjectSnapshot) *NullableObjectSnapshot {
	return &NullableObjectSnapshot{value: val, isSet: true}
}

func (v NullableObjectSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


