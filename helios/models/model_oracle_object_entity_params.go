/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// OracleObjectEntityParams Object details for Oracle.
type OracleObjectEntityParams struct {
	DatabaseEntityInfo *DatabaseEntityInfo `json:"databaseEntityInfo,omitempty"`
	HostInfo *HostInformation `json:"hostInfo,omitempty"`
}

// NewOracleObjectEntityParams instantiates a new OracleObjectEntityParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleObjectEntityParams() *OracleObjectEntityParams {
	this := OracleObjectEntityParams{}
	return &this
}

// NewOracleObjectEntityParamsWithDefaults instantiates a new OracleObjectEntityParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleObjectEntityParamsWithDefaults() *OracleObjectEntityParams {
	this := OracleObjectEntityParams{}
	return &this
}

// GetDatabaseEntityInfo returns the DatabaseEntityInfo field value if set, zero value otherwise.
func (o *OracleObjectEntityParams) GetDatabaseEntityInfo() DatabaseEntityInfo {
	if o == nil || o.DatabaseEntityInfo == nil {
		var ret DatabaseEntityInfo
		return ret
	}
	return *o.DatabaseEntityInfo
}

// GetDatabaseEntityInfoOk returns a tuple with the DatabaseEntityInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleObjectEntityParams) GetDatabaseEntityInfoOk() (*DatabaseEntityInfo, bool) {
	if o == nil || o.DatabaseEntityInfo == nil {
		return nil, false
	}
	return o.DatabaseEntityInfo, true
}

// HasDatabaseEntityInfo returns a boolean if a field has been set.
func (o *OracleObjectEntityParams) HasDatabaseEntityInfo() bool {
	if o != nil && o.DatabaseEntityInfo != nil {
		return true
	}

	return false
}

// SetDatabaseEntityInfo gets a reference to the given DatabaseEntityInfo and assigns it to the DatabaseEntityInfo field.
func (o *OracleObjectEntityParams) SetDatabaseEntityInfo(v DatabaseEntityInfo) {
	o.DatabaseEntityInfo = &v
}

// GetHostInfo returns the HostInfo field value if set, zero value otherwise.
func (o *OracleObjectEntityParams) GetHostInfo() HostInformation {
	if o == nil || o.HostInfo == nil {
		var ret HostInformation
		return ret
	}
	return *o.HostInfo
}

// GetHostInfoOk returns a tuple with the HostInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleObjectEntityParams) GetHostInfoOk() (*HostInformation, bool) {
	if o == nil || o.HostInfo == nil {
		return nil, false
	}
	return o.HostInfo, true
}

// HasHostInfo returns a boolean if a field has been set.
func (o *OracleObjectEntityParams) HasHostInfo() bool {
	if o != nil && o.HostInfo != nil {
		return true
	}

	return false
}

// SetHostInfo gets a reference to the given HostInformation and assigns it to the HostInfo field.
func (o *OracleObjectEntityParams) SetHostInfo(v HostInformation) {
	o.HostInfo = &v
}

func (o OracleObjectEntityParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatabaseEntityInfo != nil {
		toSerialize["databaseEntityInfo"] = o.DatabaseEntityInfo
	}
	if o.HostInfo != nil {
		toSerialize["hostInfo"] = o.HostInfo
	}
	return json.Marshal(toSerialize)
}

type NullableOracleObjectEntityParams struct {
	value *OracleObjectEntityParams
	isSet bool
}

func (v NullableOracleObjectEntityParams) Get() *OracleObjectEntityParams {
	return v.value
}

func (v *NullableOracleObjectEntityParams) Set(val *OracleObjectEntityParams) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleObjectEntityParams) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleObjectEntityParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleObjectEntityParams(val *OracleObjectEntityParams) *NullableOracleObjectEntityParams {
	return &NullableOracleObjectEntityParams{value: val, isSet: true}
}

func (v NullableOracleObjectEntityParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleObjectEntityParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


