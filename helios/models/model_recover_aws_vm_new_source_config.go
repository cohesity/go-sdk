/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RecoverAwsVmNewSourceConfig Specifies the new destination Source configuration where the VMs will be recovered.
type RecoverAwsVmNewSourceConfig struct {
	// Specifies the id of the parent source to recover the VMs.
	Source NullableRecoveryObjectIdentifier `json:"source"`
	// Specifies the AWS region in which to deploy the VM.
	Region NullableRecoveryObjectIdentifier `json:"region"`
	// Specifies the pair of public and private key used to login into the VM
	KeyPair NullableRecoveryObjectIdentifier `json:"keyPair,omitempty"`
	// Specifies the networking configuration to be applied to the recovered VMs.
	NetworkConfig NullableRecoverAwsVmNewSourceNetworkConfig `json:"networkConfig"`
}

// NewRecoverAwsVmNewSourceConfig instantiates a new RecoverAwsVmNewSourceConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAwsVmNewSourceConfig(source NullableRecoveryObjectIdentifier, region NullableRecoveryObjectIdentifier, networkConfig NullableRecoverAwsVmNewSourceNetworkConfig) *RecoverAwsVmNewSourceConfig {
	this := RecoverAwsVmNewSourceConfig{}
	this.Source = source
	this.Region = region
	this.NetworkConfig = networkConfig
	return &this
}

// NewRecoverAwsVmNewSourceConfigWithDefaults instantiates a new RecoverAwsVmNewSourceConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAwsVmNewSourceConfigWithDefaults() *RecoverAwsVmNewSourceConfig {
	this := RecoverAwsVmNewSourceConfig{}
	return &this
}

// GetSource returns the Source field value
// If the value is explicit nil, the zero value for RecoveryObjectIdentifier will be returned
func (o *RecoverAwsVmNewSourceConfig) GetSource() RecoveryObjectIdentifier {
	if o == nil || o.Source.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}

	return *o.Source.Get()
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsVmNewSourceConfig) GetSourceOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Source.Get(), o.Source.IsSet()
}

// SetSource sets field value
func (o *RecoverAwsVmNewSourceConfig) SetSource(v RecoveryObjectIdentifier) {
	o.Source.Set(&v)
}

// GetRegion returns the Region field value
// If the value is explicit nil, the zero value for RecoveryObjectIdentifier will be returned
func (o *RecoverAwsVmNewSourceConfig) GetRegion() RecoveryObjectIdentifier {
	if o == nil || o.Region.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}

	return *o.Region.Get()
}

// GetRegionOk returns a tuple with the Region field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsVmNewSourceConfig) GetRegionOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Region.Get(), o.Region.IsSet()
}

// SetRegion sets field value
func (o *RecoverAwsVmNewSourceConfig) SetRegion(v RecoveryObjectIdentifier) {
	o.Region.Set(&v)
}

// GetKeyPair returns the KeyPair field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAwsVmNewSourceConfig) GetKeyPair() RecoveryObjectIdentifier {
	if o == nil || o.KeyPair.Get() == nil {
		var ret RecoveryObjectIdentifier
		return ret
	}
	return *o.KeyPair.Get()
}

// GetKeyPairOk returns a tuple with the KeyPair field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsVmNewSourceConfig) GetKeyPairOk() (*RecoveryObjectIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeyPair.Get(), o.KeyPair.IsSet()
}

// HasKeyPair returns a boolean if a field has been set.
func (o *RecoverAwsVmNewSourceConfig) HasKeyPair() bool {
	if o != nil && o.KeyPair.IsSet() {
		return true
	}

	return false
}

// SetKeyPair gets a reference to the given NullableRecoveryObjectIdentifier and assigns it to the KeyPair field.
func (o *RecoverAwsVmNewSourceConfig) SetKeyPair(v RecoveryObjectIdentifier) {
	o.KeyPair.Set(&v)
}
// SetKeyPairNil sets the value for KeyPair to be an explicit nil
func (o *RecoverAwsVmNewSourceConfig) SetKeyPairNil() {
	o.KeyPair.Set(nil)
}

// UnsetKeyPair ensures that no value is present for KeyPair, not even an explicit nil
func (o *RecoverAwsVmNewSourceConfig) UnsetKeyPair() {
	o.KeyPair.Unset()
}

// GetNetworkConfig returns the NetworkConfig field value
// If the value is explicit nil, the zero value for RecoverAwsVmNewSourceNetworkConfig will be returned
func (o *RecoverAwsVmNewSourceConfig) GetNetworkConfig() RecoverAwsVmNewSourceNetworkConfig {
	if o == nil || o.NetworkConfig.Get() == nil {
		var ret RecoverAwsVmNewSourceNetworkConfig
		return ret
	}

	return *o.NetworkConfig.Get()
}

// GetNetworkConfigOk returns a tuple with the NetworkConfig field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAwsVmNewSourceConfig) GetNetworkConfigOk() (*RecoverAwsVmNewSourceNetworkConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetworkConfig.Get(), o.NetworkConfig.IsSet()
}

// SetNetworkConfig sets field value
func (o *RecoverAwsVmNewSourceConfig) SetNetworkConfig(v RecoverAwsVmNewSourceNetworkConfig) {
	o.NetworkConfig.Set(&v)
}

func (o RecoverAwsVmNewSourceConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["source"] = o.Source.Get()
	}
	if true {
		toSerialize["region"] = o.Region.Get()
	}
	if o.KeyPair.IsSet() {
		toSerialize["keyPair"] = o.KeyPair.Get()
	}
	if true {
		toSerialize["networkConfig"] = o.NetworkConfig.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverAwsVmNewSourceConfig struct {
	value *RecoverAwsVmNewSourceConfig
	isSet bool
}

func (v NullableRecoverAwsVmNewSourceConfig) Get() *RecoverAwsVmNewSourceConfig {
	return v.value
}

func (v *NullableRecoverAwsVmNewSourceConfig) Set(val *RecoverAwsVmNewSourceConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAwsVmNewSourceConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAwsVmNewSourceConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAwsVmNewSourceConfig(val *RecoverAwsVmNewSourceConfig) *NullableRecoverAwsVmNewSourceConfig {
	return &NullableRecoverAwsVmNewSourceConfig{value: val, isSet: true}
}

func (v NullableRecoverAwsVmNewSourceConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAwsVmNewSourceConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


