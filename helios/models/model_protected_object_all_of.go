/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ProtectedObjectAllOf struct for ProtectedObjectAllOf
type ProtectedObjectAllOf struct {
	// Specifies the Source Object information.
	SourceInfo NullableObjectSummary `json:"sourceInfo,omitempty"`
	// Specifies the latest snapshot information for every Protection Group for a given object.
	LatestSnapshotsInfo []ObjectSnapshotsInfo `json:"latestSnapshotsInfo,omitempty"`
}

// NewProtectedObjectAllOf instantiates a new ProtectedObjectAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectedObjectAllOf() *ProtectedObjectAllOf {
	this := ProtectedObjectAllOf{}
	return &this
}

// NewProtectedObjectAllOfWithDefaults instantiates a new ProtectedObjectAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectedObjectAllOfWithDefaults() *ProtectedObjectAllOf {
	this := ProtectedObjectAllOf{}
	return &this
}

// GetSourceInfo returns the SourceInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectAllOf) GetSourceInfo() ObjectSummary {
	if o == nil || o.SourceInfo.Get() == nil {
		var ret ObjectSummary
		return ret
	}
	return *o.SourceInfo.Get()
}

// GetSourceInfoOk returns a tuple with the SourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectAllOf) GetSourceInfoOk() (*ObjectSummary, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceInfo.Get(), o.SourceInfo.IsSet()
}

// HasSourceInfo returns a boolean if a field has been set.
func (o *ProtectedObjectAllOf) HasSourceInfo() bool {
	if o != nil && o.SourceInfo.IsSet() {
		return true
	}

	return false
}

// SetSourceInfo gets a reference to the given NullableObjectSummary and assigns it to the SourceInfo field.
func (o *ProtectedObjectAllOf) SetSourceInfo(v ObjectSummary) {
	o.SourceInfo.Set(&v)
}
// SetSourceInfoNil sets the value for SourceInfo to be an explicit nil
func (o *ProtectedObjectAllOf) SetSourceInfoNil() {
	o.SourceInfo.Set(nil)
}

// UnsetSourceInfo ensures that no value is present for SourceInfo, not even an explicit nil
func (o *ProtectedObjectAllOf) UnsetSourceInfo() {
	o.SourceInfo.Unset()
}

// GetLatestSnapshotsInfo returns the LatestSnapshotsInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectedObjectAllOf) GetLatestSnapshotsInfo() []ObjectSnapshotsInfo {
	if o == nil  {
		var ret []ObjectSnapshotsInfo
		return ret
	}
	return o.LatestSnapshotsInfo
}

// GetLatestSnapshotsInfoOk returns a tuple with the LatestSnapshotsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectedObjectAllOf) GetLatestSnapshotsInfoOk() (*[]ObjectSnapshotsInfo, bool) {
	if o == nil || o.LatestSnapshotsInfo == nil {
		return nil, false
	}
	return &o.LatestSnapshotsInfo, true
}

// HasLatestSnapshotsInfo returns a boolean if a field has been set.
func (o *ProtectedObjectAllOf) HasLatestSnapshotsInfo() bool {
	if o != nil && o.LatestSnapshotsInfo != nil {
		return true
	}

	return false
}

// SetLatestSnapshotsInfo gets a reference to the given []ObjectSnapshotsInfo and assigns it to the LatestSnapshotsInfo field.
func (o *ProtectedObjectAllOf) SetLatestSnapshotsInfo(v []ObjectSnapshotsInfo) {
	o.LatestSnapshotsInfo = v
}

func (o ProtectedObjectAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceInfo.IsSet() {
		toSerialize["sourceInfo"] = o.SourceInfo.Get()
	}
	if o.LatestSnapshotsInfo != nil {
		toSerialize["latestSnapshotsInfo"] = o.LatestSnapshotsInfo
	}
	return json.Marshal(toSerialize)
}

type NullableProtectedObjectAllOf struct {
	value *ProtectedObjectAllOf
	isSet bool
}

func (v NullableProtectedObjectAllOf) Get() *ProtectedObjectAllOf {
	return v.value
}

func (v *NullableProtectedObjectAllOf) Set(val *ProtectedObjectAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectedObjectAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectedObjectAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectedObjectAllOf(val *ProtectedObjectAllOf) *NullableProtectedObjectAllOf {
	return &NullableProtectedObjectAllOf{value: val, isSet: true}
}

func (v NullableProtectedObjectAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectedObjectAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


