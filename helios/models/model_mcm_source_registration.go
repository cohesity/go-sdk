/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmSourceRegistration Specifies a Protection Source registration.
type McmSourceRegistration struct {
	// Specifies the cluster id.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the cluster incarnation id.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId,omitempty"`
	// Specifies the region id.
	RegionId NullableString `json:"regionId,omitempty"`
	// Source Registration ID. This can be used to retrieve, edit or delete the source registration.
	Id NullableString `json:"id,omitempty"`
	// Specifies the id of the connection from where this source is reachable.
	ConnectionId NullableInt64 `json:"connectionId,omitempty"`
	// ID of top level source object discovered after the registration.
	SourceId NullableString `json:"sourceId,omitempty"`
	// Specifies the environment type of the Protection Source.
	Environment NullableString `json:"environment,omitempty"`
	VmwareParams *VmwareSourceRegistrationParams `json:"vmwareParams,omitempty"`
	PhysicalParams *PhysicalSourceRegistrationParams `json:"physicalParams,omitempty"`
	GenericNasParams *GenericNasRegistrationParams `json:"genericNasParams,omitempty"`
	IsilonParams *IsilonRegistrationParams `json:"isilonParams,omitempty"`
	NetappParams *NetappRegistrationParams `json:"netappParams,omitempty"`
	CassandraParams *CassandraSourceRegistrationParams `json:"cassandraParams,omitempty"`
	MongodbParams *MongoDBSourceRegistrationParams `json:"mongodbParams,omitempty"`
	CouchbaseParams *CouchbaseSourceRegistrationParams `json:"couchbaseParams,omitempty"`
	HdfsParams *HdfsSourceRegistrationParams `json:"hdfsParams,omitempty"`
	HbaseParams *HbaseSourceRegistrationParams `json:"hbaseParams,omitempty"`
	HiveParams *HiveSourceRegistrationParams `json:"hiveParams,omitempty"`
	AwsParams *AwsSourceRegistrationParams `json:"awsParams,omitempty"`
	Office365Params *Office365SourceRegistrationParams `json:"office365Params,omitempty"`
	HypervParams *HyperVSourceRegistrationParams `json:"hypervParams,omitempty"`
}

// NewMcmSourceRegistration instantiates a new McmSourceRegistration object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmSourceRegistration() *McmSourceRegistration {
	this := McmSourceRegistration{}
	return &this
}

// NewMcmSourceRegistrationWithDefaults instantiates a new McmSourceRegistration object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmSourceRegistrationWithDefaults() *McmSourceRegistration {
	this := McmSourceRegistration{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistration) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistration) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *McmSourceRegistration) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *McmSourceRegistration) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *McmSourceRegistration) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistration) GetClusterIncarnationId() int64 {
	if o == nil || o.ClusterIncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistration) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasClusterIncarnationId() bool {
	if o != nil && o.ClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the ClusterIncarnationId field.
func (o *McmSourceRegistration) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}
// SetClusterIncarnationIdNil sets the value for ClusterIncarnationId to be an explicit nil
func (o *McmSourceRegistration) SetClusterIncarnationIdNil() {
	o.ClusterIncarnationId.Set(nil)
}

// UnsetClusterIncarnationId ensures that no value is present for ClusterIncarnationId, not even an explicit nil
func (o *McmSourceRegistration) UnsetClusterIncarnationId() {
	o.ClusterIncarnationId.Unset()
}

// GetRegionId returns the RegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistration) GetRegionId() string {
	if o == nil || o.RegionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegionId.Get()
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistration) GetRegionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegionId.Get(), o.RegionId.IsSet()
}

// HasRegionId returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasRegionId() bool {
	if o != nil && o.RegionId.IsSet() {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given NullableString and assigns it to the RegionId field.
func (o *McmSourceRegistration) SetRegionId(v string) {
	o.RegionId.Set(&v)
}
// SetRegionIdNil sets the value for RegionId to be an explicit nil
func (o *McmSourceRegistration) SetRegionIdNil() {
	o.RegionId.Set(nil)
}

// UnsetRegionId ensures that no value is present for RegionId, not even an explicit nil
func (o *McmSourceRegistration) UnsetRegionId() {
	o.RegionId.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistration) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistration) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *McmSourceRegistration) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *McmSourceRegistration) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *McmSourceRegistration) UnsetId() {
	o.Id.Unset()
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistration) GetConnectionId() int64 {
	if o == nil || o.ConnectionId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistration) GetConnectionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// HasConnectionId returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasConnectionId() bool {
	if o != nil && o.ConnectionId.IsSet() {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given NullableInt64 and assigns it to the ConnectionId field.
func (o *McmSourceRegistration) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}
// SetConnectionIdNil sets the value for ConnectionId to be an explicit nil
func (o *McmSourceRegistration) SetConnectionIdNil() {
	o.ConnectionId.Set(nil)
}

// UnsetConnectionId ensures that no value is present for ConnectionId, not even an explicit nil
func (o *McmSourceRegistration) UnsetConnectionId() {
	o.ConnectionId.Unset()
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistration) GetSourceId() string {
	if o == nil || o.SourceId.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistration) GetSourceIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableString and assigns it to the SourceId field.
func (o *McmSourceRegistration) SetSourceId(v string) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *McmSourceRegistration) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *McmSourceRegistration) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistration) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistration) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *McmSourceRegistration) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *McmSourceRegistration) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *McmSourceRegistration) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetVmwareParams returns the VmwareParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetVmwareParams() VmwareSourceRegistrationParams {
	if o == nil || o.VmwareParams == nil {
		var ret VmwareSourceRegistrationParams
		return ret
	}
	return *o.VmwareParams
}

// GetVmwareParamsOk returns a tuple with the VmwareParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetVmwareParamsOk() (*VmwareSourceRegistrationParams, bool) {
	if o == nil || o.VmwareParams == nil {
		return nil, false
	}
	return o.VmwareParams, true
}

// HasVmwareParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasVmwareParams() bool {
	if o != nil && o.VmwareParams != nil {
		return true
	}

	return false
}

// SetVmwareParams gets a reference to the given VmwareSourceRegistrationParams and assigns it to the VmwareParams field.
func (o *McmSourceRegistration) SetVmwareParams(v VmwareSourceRegistrationParams) {
	o.VmwareParams = &v
}

// GetPhysicalParams returns the PhysicalParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetPhysicalParams() PhysicalSourceRegistrationParams {
	if o == nil || o.PhysicalParams == nil {
		var ret PhysicalSourceRegistrationParams
		return ret
	}
	return *o.PhysicalParams
}

// GetPhysicalParamsOk returns a tuple with the PhysicalParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetPhysicalParamsOk() (*PhysicalSourceRegistrationParams, bool) {
	if o == nil || o.PhysicalParams == nil {
		return nil, false
	}
	return o.PhysicalParams, true
}

// HasPhysicalParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasPhysicalParams() bool {
	if o != nil && o.PhysicalParams != nil {
		return true
	}

	return false
}

// SetPhysicalParams gets a reference to the given PhysicalSourceRegistrationParams and assigns it to the PhysicalParams field.
func (o *McmSourceRegistration) SetPhysicalParams(v PhysicalSourceRegistrationParams) {
	o.PhysicalParams = &v
}

// GetGenericNasParams returns the GenericNasParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetGenericNasParams() GenericNasRegistrationParams {
	if o == nil || o.GenericNasParams == nil {
		var ret GenericNasRegistrationParams
		return ret
	}
	return *o.GenericNasParams
}

// GetGenericNasParamsOk returns a tuple with the GenericNasParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetGenericNasParamsOk() (*GenericNasRegistrationParams, bool) {
	if o == nil || o.GenericNasParams == nil {
		return nil, false
	}
	return o.GenericNasParams, true
}

// HasGenericNasParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasGenericNasParams() bool {
	if o != nil && o.GenericNasParams != nil {
		return true
	}

	return false
}

// SetGenericNasParams gets a reference to the given GenericNasRegistrationParams and assigns it to the GenericNasParams field.
func (o *McmSourceRegistration) SetGenericNasParams(v GenericNasRegistrationParams) {
	o.GenericNasParams = &v
}

// GetIsilonParams returns the IsilonParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetIsilonParams() IsilonRegistrationParams {
	if o == nil || o.IsilonParams == nil {
		var ret IsilonRegistrationParams
		return ret
	}
	return *o.IsilonParams
}

// GetIsilonParamsOk returns a tuple with the IsilonParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetIsilonParamsOk() (*IsilonRegistrationParams, bool) {
	if o == nil || o.IsilonParams == nil {
		return nil, false
	}
	return o.IsilonParams, true
}

// HasIsilonParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasIsilonParams() bool {
	if o != nil && o.IsilonParams != nil {
		return true
	}

	return false
}

// SetIsilonParams gets a reference to the given IsilonRegistrationParams and assigns it to the IsilonParams field.
func (o *McmSourceRegistration) SetIsilonParams(v IsilonRegistrationParams) {
	o.IsilonParams = &v
}

// GetNetappParams returns the NetappParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetNetappParams() NetappRegistrationParams {
	if o == nil || o.NetappParams == nil {
		var ret NetappRegistrationParams
		return ret
	}
	return *o.NetappParams
}

// GetNetappParamsOk returns a tuple with the NetappParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetNetappParamsOk() (*NetappRegistrationParams, bool) {
	if o == nil || o.NetappParams == nil {
		return nil, false
	}
	return o.NetappParams, true
}

// HasNetappParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasNetappParams() bool {
	if o != nil && o.NetappParams != nil {
		return true
	}

	return false
}

// SetNetappParams gets a reference to the given NetappRegistrationParams and assigns it to the NetappParams field.
func (o *McmSourceRegistration) SetNetappParams(v NetappRegistrationParams) {
	o.NetappParams = &v
}

// GetCassandraParams returns the CassandraParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetCassandraParams() CassandraSourceRegistrationParams {
	if o == nil || o.CassandraParams == nil {
		var ret CassandraSourceRegistrationParams
		return ret
	}
	return *o.CassandraParams
}

// GetCassandraParamsOk returns a tuple with the CassandraParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetCassandraParamsOk() (*CassandraSourceRegistrationParams, bool) {
	if o == nil || o.CassandraParams == nil {
		return nil, false
	}
	return o.CassandraParams, true
}

// HasCassandraParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasCassandraParams() bool {
	if o != nil && o.CassandraParams != nil {
		return true
	}

	return false
}

// SetCassandraParams gets a reference to the given CassandraSourceRegistrationParams and assigns it to the CassandraParams field.
func (o *McmSourceRegistration) SetCassandraParams(v CassandraSourceRegistrationParams) {
	o.CassandraParams = &v
}

// GetMongodbParams returns the MongodbParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetMongodbParams() MongoDBSourceRegistrationParams {
	if o == nil || o.MongodbParams == nil {
		var ret MongoDBSourceRegistrationParams
		return ret
	}
	return *o.MongodbParams
}

// GetMongodbParamsOk returns a tuple with the MongodbParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetMongodbParamsOk() (*MongoDBSourceRegistrationParams, bool) {
	if o == nil || o.MongodbParams == nil {
		return nil, false
	}
	return o.MongodbParams, true
}

// HasMongodbParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasMongodbParams() bool {
	if o != nil && o.MongodbParams != nil {
		return true
	}

	return false
}

// SetMongodbParams gets a reference to the given MongoDBSourceRegistrationParams and assigns it to the MongodbParams field.
func (o *McmSourceRegistration) SetMongodbParams(v MongoDBSourceRegistrationParams) {
	o.MongodbParams = &v
}

// GetCouchbaseParams returns the CouchbaseParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetCouchbaseParams() CouchbaseSourceRegistrationParams {
	if o == nil || o.CouchbaseParams == nil {
		var ret CouchbaseSourceRegistrationParams
		return ret
	}
	return *o.CouchbaseParams
}

// GetCouchbaseParamsOk returns a tuple with the CouchbaseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetCouchbaseParamsOk() (*CouchbaseSourceRegistrationParams, bool) {
	if o == nil || o.CouchbaseParams == nil {
		return nil, false
	}
	return o.CouchbaseParams, true
}

// HasCouchbaseParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasCouchbaseParams() bool {
	if o != nil && o.CouchbaseParams != nil {
		return true
	}

	return false
}

// SetCouchbaseParams gets a reference to the given CouchbaseSourceRegistrationParams and assigns it to the CouchbaseParams field.
func (o *McmSourceRegistration) SetCouchbaseParams(v CouchbaseSourceRegistrationParams) {
	o.CouchbaseParams = &v
}

// GetHdfsParams returns the HdfsParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetHdfsParams() HdfsSourceRegistrationParams {
	if o == nil || o.HdfsParams == nil {
		var ret HdfsSourceRegistrationParams
		return ret
	}
	return *o.HdfsParams
}

// GetHdfsParamsOk returns a tuple with the HdfsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetHdfsParamsOk() (*HdfsSourceRegistrationParams, bool) {
	if o == nil || o.HdfsParams == nil {
		return nil, false
	}
	return o.HdfsParams, true
}

// HasHdfsParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasHdfsParams() bool {
	if o != nil && o.HdfsParams != nil {
		return true
	}

	return false
}

// SetHdfsParams gets a reference to the given HdfsSourceRegistrationParams and assigns it to the HdfsParams field.
func (o *McmSourceRegistration) SetHdfsParams(v HdfsSourceRegistrationParams) {
	o.HdfsParams = &v
}

// GetHbaseParams returns the HbaseParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetHbaseParams() HbaseSourceRegistrationParams {
	if o == nil || o.HbaseParams == nil {
		var ret HbaseSourceRegistrationParams
		return ret
	}
	return *o.HbaseParams
}

// GetHbaseParamsOk returns a tuple with the HbaseParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetHbaseParamsOk() (*HbaseSourceRegistrationParams, bool) {
	if o == nil || o.HbaseParams == nil {
		return nil, false
	}
	return o.HbaseParams, true
}

// HasHbaseParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasHbaseParams() bool {
	if o != nil && o.HbaseParams != nil {
		return true
	}

	return false
}

// SetHbaseParams gets a reference to the given HbaseSourceRegistrationParams and assigns it to the HbaseParams field.
func (o *McmSourceRegistration) SetHbaseParams(v HbaseSourceRegistrationParams) {
	o.HbaseParams = &v
}

// GetHiveParams returns the HiveParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetHiveParams() HiveSourceRegistrationParams {
	if o == nil || o.HiveParams == nil {
		var ret HiveSourceRegistrationParams
		return ret
	}
	return *o.HiveParams
}

// GetHiveParamsOk returns a tuple with the HiveParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetHiveParamsOk() (*HiveSourceRegistrationParams, bool) {
	if o == nil || o.HiveParams == nil {
		return nil, false
	}
	return o.HiveParams, true
}

// HasHiveParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasHiveParams() bool {
	if o != nil && o.HiveParams != nil {
		return true
	}

	return false
}

// SetHiveParams gets a reference to the given HiveSourceRegistrationParams and assigns it to the HiveParams field.
func (o *McmSourceRegistration) SetHiveParams(v HiveSourceRegistrationParams) {
	o.HiveParams = &v
}

// GetAwsParams returns the AwsParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetAwsParams() AwsSourceRegistrationParams {
	if o == nil || o.AwsParams == nil {
		var ret AwsSourceRegistrationParams
		return ret
	}
	return *o.AwsParams
}

// GetAwsParamsOk returns a tuple with the AwsParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetAwsParamsOk() (*AwsSourceRegistrationParams, bool) {
	if o == nil || o.AwsParams == nil {
		return nil, false
	}
	return o.AwsParams, true
}

// HasAwsParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasAwsParams() bool {
	if o != nil && o.AwsParams != nil {
		return true
	}

	return false
}

// SetAwsParams gets a reference to the given AwsSourceRegistrationParams and assigns it to the AwsParams field.
func (o *McmSourceRegistration) SetAwsParams(v AwsSourceRegistrationParams) {
	o.AwsParams = &v
}

// GetOffice365Params returns the Office365Params field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetOffice365Params() Office365SourceRegistrationParams {
	if o == nil || o.Office365Params == nil {
		var ret Office365SourceRegistrationParams
		return ret
	}
	return *o.Office365Params
}

// GetOffice365ParamsOk returns a tuple with the Office365Params field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetOffice365ParamsOk() (*Office365SourceRegistrationParams, bool) {
	if o == nil || o.Office365Params == nil {
		return nil, false
	}
	return o.Office365Params, true
}

// HasOffice365Params returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasOffice365Params() bool {
	if o != nil && o.Office365Params != nil {
		return true
	}

	return false
}

// SetOffice365Params gets a reference to the given Office365SourceRegistrationParams and assigns it to the Office365Params field.
func (o *McmSourceRegistration) SetOffice365Params(v Office365SourceRegistrationParams) {
	o.Office365Params = &v
}

// GetHypervParams returns the HypervParams field value if set, zero value otherwise.
func (o *McmSourceRegistration) GetHypervParams() HyperVSourceRegistrationParams {
	if o == nil || o.HypervParams == nil {
		var ret HyperVSourceRegistrationParams
		return ret
	}
	return *o.HypervParams
}

// GetHypervParamsOk returns a tuple with the HypervParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmSourceRegistration) GetHypervParamsOk() (*HyperVSourceRegistrationParams, bool) {
	if o == nil || o.HypervParams == nil {
		return nil, false
	}
	return o.HypervParams, true
}

// HasHypervParams returns a boolean if a field has been set.
func (o *McmSourceRegistration) HasHypervParams() bool {
	if o != nil && o.HypervParams != nil {
		return true
	}

	return false
}

// SetHypervParams gets a reference to the given HyperVSourceRegistrationParams and assigns it to the HypervParams field.
func (o *McmSourceRegistration) SetHypervParams(v HyperVSourceRegistrationParams) {
	o.HypervParams = &v
}

func (o McmSourceRegistration) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterIncarnationId.IsSet() {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if o.RegionId.IsSet() {
		toSerialize["regionId"] = o.RegionId.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ConnectionId.IsSet() {
		toSerialize["connectionId"] = o.ConnectionId.Get()
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.VmwareParams != nil {
		toSerialize["vmwareParams"] = o.VmwareParams
	}
	if o.PhysicalParams != nil {
		toSerialize["physicalParams"] = o.PhysicalParams
	}
	if o.GenericNasParams != nil {
		toSerialize["genericNasParams"] = o.GenericNasParams
	}
	if o.IsilonParams != nil {
		toSerialize["isilonParams"] = o.IsilonParams
	}
	if o.NetappParams != nil {
		toSerialize["netappParams"] = o.NetappParams
	}
	if o.CassandraParams != nil {
		toSerialize["cassandraParams"] = o.CassandraParams
	}
	if o.MongodbParams != nil {
		toSerialize["mongodbParams"] = o.MongodbParams
	}
	if o.CouchbaseParams != nil {
		toSerialize["couchbaseParams"] = o.CouchbaseParams
	}
	if o.HdfsParams != nil {
		toSerialize["hdfsParams"] = o.HdfsParams
	}
	if o.HbaseParams != nil {
		toSerialize["hbaseParams"] = o.HbaseParams
	}
	if o.HiveParams != nil {
		toSerialize["hiveParams"] = o.HiveParams
	}
	if o.AwsParams != nil {
		toSerialize["awsParams"] = o.AwsParams
	}
	if o.Office365Params != nil {
		toSerialize["office365Params"] = o.Office365Params
	}
	if o.HypervParams != nil {
		toSerialize["hypervParams"] = o.HypervParams
	}
	return json.Marshal(toSerialize)
}

type NullableMcmSourceRegistration struct {
	value *McmSourceRegistration
	isSet bool
}

func (v NullableMcmSourceRegistration) Get() *McmSourceRegistration {
	return v.value
}

func (v *NullableMcmSourceRegistration) Set(val *McmSourceRegistration) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmSourceRegistration) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmSourceRegistration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmSourceRegistration(val *McmSourceRegistration) *NullableMcmSourceRegistration {
	return &NullableMcmSourceRegistration{value: val, isSet: true}
}

func (v NullableMcmSourceRegistration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmSourceRegistration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


