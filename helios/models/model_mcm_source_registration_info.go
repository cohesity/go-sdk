/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmSourceRegistrationInfo Specifies the registration details and errors occured during registration of a protection source.
type McmSourceRegistrationInfo struct {
	// Specifies the id of the connection from where this source is reachable.
	ConnectionId NullableInt64 `json:"connectionId,omitempty"`
	// Specifies the registration time of the Source in Unix time epoch in microseconds.
	RegistrationTimeUsecs NullableInt64 `json:"registrationTimeUsecs,omitempty"`
	// Specifies the error detail occured during the protection source registration.
	RegistrationError NullableString `json:"registrationError,omitempty"`
	// Specifies the registration time of the Source in Unix time epoch in microseconds.
	LastRefreshTimeUsecs NullableInt64 `json:"lastRefreshTimeUsecs,omitempty"`
	// Specifies the error detail occured during the refersh of a protection source.
	RefreshError NullableString `json:"refreshError,omitempty"`
}

// NewMcmSourceRegistrationInfo instantiates a new McmSourceRegistrationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmSourceRegistrationInfo() *McmSourceRegistrationInfo {
	this := McmSourceRegistrationInfo{}
	return &this
}

// NewMcmSourceRegistrationInfoWithDefaults instantiates a new McmSourceRegistrationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmSourceRegistrationInfoWithDefaults() *McmSourceRegistrationInfo {
	this := McmSourceRegistrationInfo{}
	return &this
}

// GetConnectionId returns the ConnectionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistrationInfo) GetConnectionId() int64 {
	if o == nil || o.ConnectionId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ConnectionId.Get()
}

// GetConnectionIdOk returns a tuple with the ConnectionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistrationInfo) GetConnectionIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConnectionId.Get(), o.ConnectionId.IsSet()
}

// HasConnectionId returns a boolean if a field has been set.
func (o *McmSourceRegistrationInfo) HasConnectionId() bool {
	if o != nil && o.ConnectionId.IsSet() {
		return true
	}

	return false
}

// SetConnectionId gets a reference to the given NullableInt64 and assigns it to the ConnectionId field.
func (o *McmSourceRegistrationInfo) SetConnectionId(v int64) {
	o.ConnectionId.Set(&v)
}
// SetConnectionIdNil sets the value for ConnectionId to be an explicit nil
func (o *McmSourceRegistrationInfo) SetConnectionIdNil() {
	o.ConnectionId.Set(nil)
}

// UnsetConnectionId ensures that no value is present for ConnectionId, not even an explicit nil
func (o *McmSourceRegistrationInfo) UnsetConnectionId() {
	o.ConnectionId.Unset()
}

// GetRegistrationTimeUsecs returns the RegistrationTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistrationInfo) GetRegistrationTimeUsecs() int64 {
	if o == nil || o.RegistrationTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RegistrationTimeUsecs.Get()
}

// GetRegistrationTimeUsecsOk returns a tuple with the RegistrationTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistrationInfo) GetRegistrationTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegistrationTimeUsecs.Get(), o.RegistrationTimeUsecs.IsSet()
}

// HasRegistrationTimeUsecs returns a boolean if a field has been set.
func (o *McmSourceRegistrationInfo) HasRegistrationTimeUsecs() bool {
	if o != nil && o.RegistrationTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRegistrationTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RegistrationTimeUsecs field.
func (o *McmSourceRegistrationInfo) SetRegistrationTimeUsecs(v int64) {
	o.RegistrationTimeUsecs.Set(&v)
}
// SetRegistrationTimeUsecsNil sets the value for RegistrationTimeUsecs to be an explicit nil
func (o *McmSourceRegistrationInfo) SetRegistrationTimeUsecsNil() {
	o.RegistrationTimeUsecs.Set(nil)
}

// UnsetRegistrationTimeUsecs ensures that no value is present for RegistrationTimeUsecs, not even an explicit nil
func (o *McmSourceRegistrationInfo) UnsetRegistrationTimeUsecs() {
	o.RegistrationTimeUsecs.Unset()
}

// GetRegistrationError returns the RegistrationError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistrationInfo) GetRegistrationError() string {
	if o == nil || o.RegistrationError.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegistrationError.Get()
}

// GetRegistrationErrorOk returns a tuple with the RegistrationError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistrationInfo) GetRegistrationErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegistrationError.Get(), o.RegistrationError.IsSet()
}

// HasRegistrationError returns a boolean if a field has been set.
func (o *McmSourceRegistrationInfo) HasRegistrationError() bool {
	if o != nil && o.RegistrationError.IsSet() {
		return true
	}

	return false
}

// SetRegistrationError gets a reference to the given NullableString and assigns it to the RegistrationError field.
func (o *McmSourceRegistrationInfo) SetRegistrationError(v string) {
	o.RegistrationError.Set(&v)
}
// SetRegistrationErrorNil sets the value for RegistrationError to be an explicit nil
func (o *McmSourceRegistrationInfo) SetRegistrationErrorNil() {
	o.RegistrationError.Set(nil)
}

// UnsetRegistrationError ensures that no value is present for RegistrationError, not even an explicit nil
func (o *McmSourceRegistrationInfo) UnsetRegistrationError() {
	o.RegistrationError.Unset()
}

// GetLastRefreshTimeUsecs returns the LastRefreshTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistrationInfo) GetLastRefreshTimeUsecs() int64 {
	if o == nil || o.LastRefreshTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastRefreshTimeUsecs.Get()
}

// GetLastRefreshTimeUsecsOk returns a tuple with the LastRefreshTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistrationInfo) GetLastRefreshTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastRefreshTimeUsecs.Get(), o.LastRefreshTimeUsecs.IsSet()
}

// HasLastRefreshTimeUsecs returns a boolean if a field has been set.
func (o *McmSourceRegistrationInfo) HasLastRefreshTimeUsecs() bool {
	if o != nil && o.LastRefreshTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetLastRefreshTimeUsecs gets a reference to the given NullableInt64 and assigns it to the LastRefreshTimeUsecs field.
func (o *McmSourceRegistrationInfo) SetLastRefreshTimeUsecs(v int64) {
	o.LastRefreshTimeUsecs.Set(&v)
}
// SetLastRefreshTimeUsecsNil sets the value for LastRefreshTimeUsecs to be an explicit nil
func (o *McmSourceRegistrationInfo) SetLastRefreshTimeUsecsNil() {
	o.LastRefreshTimeUsecs.Set(nil)
}

// UnsetLastRefreshTimeUsecs ensures that no value is present for LastRefreshTimeUsecs, not even an explicit nil
func (o *McmSourceRegistrationInfo) UnsetLastRefreshTimeUsecs() {
	o.LastRefreshTimeUsecs.Unset()
}

// GetRefreshError returns the RefreshError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSourceRegistrationInfo) GetRefreshError() string {
	if o == nil || o.RefreshError.Get() == nil {
		var ret string
		return ret
	}
	return *o.RefreshError.Get()
}

// GetRefreshErrorOk returns a tuple with the RefreshError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSourceRegistrationInfo) GetRefreshErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RefreshError.Get(), o.RefreshError.IsSet()
}

// HasRefreshError returns a boolean if a field has been set.
func (o *McmSourceRegistrationInfo) HasRefreshError() bool {
	if o != nil && o.RefreshError.IsSet() {
		return true
	}

	return false
}

// SetRefreshError gets a reference to the given NullableString and assigns it to the RefreshError field.
func (o *McmSourceRegistrationInfo) SetRefreshError(v string) {
	o.RefreshError.Set(&v)
}
// SetRefreshErrorNil sets the value for RefreshError to be an explicit nil
func (o *McmSourceRegistrationInfo) SetRefreshErrorNil() {
	o.RefreshError.Set(nil)
}

// UnsetRefreshError ensures that no value is present for RefreshError, not even an explicit nil
func (o *McmSourceRegistrationInfo) UnsetRefreshError() {
	o.RefreshError.Unset()
}

func (o McmSourceRegistrationInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionId.IsSet() {
		toSerialize["connectionId"] = o.ConnectionId.Get()
	}
	if o.RegistrationTimeUsecs.IsSet() {
		toSerialize["registrationTimeUsecs"] = o.RegistrationTimeUsecs.Get()
	}
	if o.RegistrationError.IsSet() {
		toSerialize["registrationError"] = o.RegistrationError.Get()
	}
	if o.LastRefreshTimeUsecs.IsSet() {
		toSerialize["lastRefreshTimeUsecs"] = o.LastRefreshTimeUsecs.Get()
	}
	if o.RefreshError.IsSet() {
		toSerialize["refreshError"] = o.RefreshError.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMcmSourceRegistrationInfo struct {
	value *McmSourceRegistrationInfo
	isSet bool
}

func (v NullableMcmSourceRegistrationInfo) Get() *McmSourceRegistrationInfo {
	return v.value
}

func (v *NullableMcmSourceRegistrationInfo) Set(val *McmSourceRegistrationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmSourceRegistrationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmSourceRegistrationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmSourceRegistrationInfo(val *McmSourceRegistrationInfo) *NullableMcmSourceRegistrationInfo {
	return &NullableMcmSourceRegistrationInfo{value: val, isSet: true}
}

func (v NullableMcmSourceRegistrationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmSourceRegistrationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


