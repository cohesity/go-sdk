/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CommonRecoverFileAndFolderInfo Specifies the information about the specific file or folder to recover.
type CommonRecoverFileAndFolderInfo struct {
	// Specifies the absolute path to the file or folder.
	AbsolutePath NullableString `json:"absolutePath"`
	// Specifies the destination directory where the file/directory was copied.
	DestinationDir NullableString `json:"destinationDir,omitempty"`
	// Specifies whether this is a directory or not.
	IsDirectory NullableBool `json:"isDirectory,omitempty"`
	// Specifies the recovery status for this file or folder.
	Status NullableString `json:"status,omitempty"`
	// Specify error messages about the file during recovery.
	Messages []string `json:"messages,omitempty"`
}

// NewCommonRecoverFileAndFolderInfo instantiates a new CommonRecoverFileAndFolderInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonRecoverFileAndFolderInfo(absolutePath NullableString) *CommonRecoverFileAndFolderInfo {
	this := CommonRecoverFileAndFolderInfo{}
	this.AbsolutePath = absolutePath
	return &this
}

// NewCommonRecoverFileAndFolderInfoWithDefaults instantiates a new CommonRecoverFileAndFolderInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonRecoverFileAndFolderInfoWithDefaults() *CommonRecoverFileAndFolderInfo {
	this := CommonRecoverFileAndFolderInfo{}
	return &this
}

// GetAbsolutePath returns the AbsolutePath field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CommonRecoverFileAndFolderInfo) GetAbsolutePath() string {
	if o == nil || o.AbsolutePath.Get() == nil {
		var ret string
		return ret
	}

	return *o.AbsolutePath.Get()
}

// GetAbsolutePathOk returns a tuple with the AbsolutePath field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonRecoverFileAndFolderInfo) GetAbsolutePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AbsolutePath.Get(), o.AbsolutePath.IsSet()
}

// SetAbsolutePath sets field value
func (o *CommonRecoverFileAndFolderInfo) SetAbsolutePath(v string) {
	o.AbsolutePath.Set(&v)
}

// GetDestinationDir returns the DestinationDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonRecoverFileAndFolderInfo) GetDestinationDir() string {
	if o == nil || o.DestinationDir.Get() == nil {
		var ret string
		return ret
	}
	return *o.DestinationDir.Get()
}

// GetDestinationDirOk returns a tuple with the DestinationDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonRecoverFileAndFolderInfo) GetDestinationDirOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DestinationDir.Get(), o.DestinationDir.IsSet()
}

// HasDestinationDir returns a boolean if a field has been set.
func (o *CommonRecoverFileAndFolderInfo) HasDestinationDir() bool {
	if o != nil && o.DestinationDir.IsSet() {
		return true
	}

	return false
}

// SetDestinationDir gets a reference to the given NullableString and assigns it to the DestinationDir field.
func (o *CommonRecoverFileAndFolderInfo) SetDestinationDir(v string) {
	o.DestinationDir.Set(&v)
}
// SetDestinationDirNil sets the value for DestinationDir to be an explicit nil
func (o *CommonRecoverFileAndFolderInfo) SetDestinationDirNil() {
	o.DestinationDir.Set(nil)
}

// UnsetDestinationDir ensures that no value is present for DestinationDir, not even an explicit nil
func (o *CommonRecoverFileAndFolderInfo) UnsetDestinationDir() {
	o.DestinationDir.Unset()
}

// GetIsDirectory returns the IsDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonRecoverFileAndFolderInfo) GetIsDirectory() bool {
	if o == nil || o.IsDirectory.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDirectory.Get()
}

// GetIsDirectoryOk returns a tuple with the IsDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonRecoverFileAndFolderInfo) GetIsDirectoryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDirectory.Get(), o.IsDirectory.IsSet()
}

// HasIsDirectory returns a boolean if a field has been set.
func (o *CommonRecoverFileAndFolderInfo) HasIsDirectory() bool {
	if o != nil && o.IsDirectory.IsSet() {
		return true
	}

	return false
}

// SetIsDirectory gets a reference to the given NullableBool and assigns it to the IsDirectory field.
func (o *CommonRecoverFileAndFolderInfo) SetIsDirectory(v bool) {
	o.IsDirectory.Set(&v)
}
// SetIsDirectoryNil sets the value for IsDirectory to be an explicit nil
func (o *CommonRecoverFileAndFolderInfo) SetIsDirectoryNil() {
	o.IsDirectory.Set(nil)
}

// UnsetIsDirectory ensures that no value is present for IsDirectory, not even an explicit nil
func (o *CommonRecoverFileAndFolderInfo) UnsetIsDirectory() {
	o.IsDirectory.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonRecoverFileAndFolderInfo) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonRecoverFileAndFolderInfo) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *CommonRecoverFileAndFolderInfo) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *CommonRecoverFileAndFolderInfo) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *CommonRecoverFileAndFolderInfo) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *CommonRecoverFileAndFolderInfo) UnsetStatus() {
	o.Status.Unset()
}

// GetMessages returns the Messages field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonRecoverFileAndFolderInfo) GetMessages() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Messages
}

// GetMessagesOk returns a tuple with the Messages field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonRecoverFileAndFolderInfo) GetMessagesOk() (*[]string, bool) {
	if o == nil || o.Messages == nil {
		return nil, false
	}
	return &o.Messages, true
}

// HasMessages returns a boolean if a field has been set.
func (o *CommonRecoverFileAndFolderInfo) HasMessages() bool {
	if o != nil && o.Messages != nil {
		return true
	}

	return false
}

// SetMessages gets a reference to the given []string and assigns it to the Messages field.
func (o *CommonRecoverFileAndFolderInfo) SetMessages(v []string) {
	o.Messages = v
}

func (o CommonRecoverFileAndFolderInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["absolutePath"] = o.AbsolutePath.Get()
	}
	if o.DestinationDir.IsSet() {
		toSerialize["destinationDir"] = o.DestinationDir.Get()
	}
	if o.IsDirectory.IsSet() {
		toSerialize["isDirectory"] = o.IsDirectory.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Messages != nil {
		toSerialize["messages"] = o.Messages
	}
	return json.Marshal(toSerialize)
}

type NullableCommonRecoverFileAndFolderInfo struct {
	value *CommonRecoverFileAndFolderInfo
	isSet bool
}

func (v NullableCommonRecoverFileAndFolderInfo) Get() *CommonRecoverFileAndFolderInfo {
	return v.value
}

func (v *NullableCommonRecoverFileAndFolderInfo) Set(val *CommonRecoverFileAndFolderInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonRecoverFileAndFolderInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonRecoverFileAndFolderInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonRecoverFileAndFolderInfo(val *CommonRecoverFileAndFolderInfo) *NullableCommonRecoverFileAndFolderInfo {
	return &NullableCommonRecoverFileAndFolderInfo{value: val, isSet: true}
}

func (v NullableCommonRecoverFileAndFolderInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonRecoverFileAndFolderInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


