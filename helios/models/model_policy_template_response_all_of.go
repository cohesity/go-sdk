/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// PolicyTemplateResponseAllOf struct for PolicyTemplateResponseAllOf
type PolicyTemplateResponseAllOf struct {
	// Specifies a unique Policy id assigned by the Cohesity Cluster.
	Id NullableString `json:"id,omitempty"`
	// Specifies the number of policies linked to this policy template. Only applicable in case of policy template.
	NumLinkedPolicies NullableInt64 `json:"numLinkedPolicies,omitempty"`
	// This field is set to true if this policy template qualifies to create more policies. If the template is partially filled and can not create a working policy then this field will be set to false.
	IsUsable NullableBool `json:"isUsable,omitempty"`
}

// NewPolicyTemplateResponseAllOf instantiates a new PolicyTemplateResponseAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyTemplateResponseAllOf() *PolicyTemplateResponseAllOf {
	this := PolicyTemplateResponseAllOf{}
	return &this
}

// NewPolicyTemplateResponseAllOfWithDefaults instantiates a new PolicyTemplateResponseAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyTemplateResponseAllOfWithDefaults() *PolicyTemplateResponseAllOf {
	this := PolicyTemplateResponseAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyTemplateResponseAllOf) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyTemplateResponseAllOf) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PolicyTemplateResponseAllOf) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PolicyTemplateResponseAllOf) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PolicyTemplateResponseAllOf) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PolicyTemplateResponseAllOf) UnsetId() {
	o.Id.Unset()
}

// GetNumLinkedPolicies returns the NumLinkedPolicies field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyTemplateResponseAllOf) GetNumLinkedPolicies() int64 {
	if o == nil || o.NumLinkedPolicies.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumLinkedPolicies.Get()
}

// GetNumLinkedPoliciesOk returns a tuple with the NumLinkedPolicies field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyTemplateResponseAllOf) GetNumLinkedPoliciesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumLinkedPolicies.Get(), o.NumLinkedPolicies.IsSet()
}

// HasNumLinkedPolicies returns a boolean if a field has been set.
func (o *PolicyTemplateResponseAllOf) HasNumLinkedPolicies() bool {
	if o != nil && o.NumLinkedPolicies.IsSet() {
		return true
	}

	return false
}

// SetNumLinkedPolicies gets a reference to the given NullableInt64 and assigns it to the NumLinkedPolicies field.
func (o *PolicyTemplateResponseAllOf) SetNumLinkedPolicies(v int64) {
	o.NumLinkedPolicies.Set(&v)
}
// SetNumLinkedPoliciesNil sets the value for NumLinkedPolicies to be an explicit nil
func (o *PolicyTemplateResponseAllOf) SetNumLinkedPoliciesNil() {
	o.NumLinkedPolicies.Set(nil)
}

// UnsetNumLinkedPolicies ensures that no value is present for NumLinkedPolicies, not even an explicit nil
func (o *PolicyTemplateResponseAllOf) UnsetNumLinkedPolicies() {
	o.NumLinkedPolicies.Unset()
}

// GetIsUsable returns the IsUsable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PolicyTemplateResponseAllOf) GetIsUsable() bool {
	if o == nil || o.IsUsable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsUsable.Get()
}

// GetIsUsableOk returns a tuple with the IsUsable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PolicyTemplateResponseAllOf) GetIsUsableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsUsable.Get(), o.IsUsable.IsSet()
}

// HasIsUsable returns a boolean if a field has been set.
func (o *PolicyTemplateResponseAllOf) HasIsUsable() bool {
	if o != nil && o.IsUsable.IsSet() {
		return true
	}

	return false
}

// SetIsUsable gets a reference to the given NullableBool and assigns it to the IsUsable field.
func (o *PolicyTemplateResponseAllOf) SetIsUsable(v bool) {
	o.IsUsable.Set(&v)
}
// SetIsUsableNil sets the value for IsUsable to be an explicit nil
func (o *PolicyTemplateResponseAllOf) SetIsUsableNil() {
	o.IsUsable.Set(nil)
}

// UnsetIsUsable ensures that no value is present for IsUsable, not even an explicit nil
func (o *PolicyTemplateResponseAllOf) UnsetIsUsable() {
	o.IsUsable.Unset()
}

func (o PolicyTemplateResponseAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.NumLinkedPolicies.IsSet() {
		toSerialize["numLinkedPolicies"] = o.NumLinkedPolicies.Get()
	}
	if o.IsUsable.IsSet() {
		toSerialize["isUsable"] = o.IsUsable.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyTemplateResponseAllOf struct {
	value *PolicyTemplateResponseAllOf
	isSet bool
}

func (v NullablePolicyTemplateResponseAllOf) Get() *PolicyTemplateResponseAllOf {
	return v.value
}

func (v *NullablePolicyTemplateResponseAllOf) Set(val *PolicyTemplateResponseAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyTemplateResponseAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyTemplateResponseAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyTemplateResponseAllOf(val *PolicyTemplateResponseAllOf) *NullablePolicyTemplateResponseAllOf {
	return &NullablePolicyTemplateResponseAllOf{value: val, isSet: true}
}

func (v NullablePolicyTemplateResponseAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyTemplateResponseAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


