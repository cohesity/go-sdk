/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SecurityConfigAccountLockout Specifies security config for account lockout.
type SecurityConfigAccountLockout struct {
	// Specifies the maximum number of consecutive fail login attempts.
	MaxFailedLoginAttempts NullableInt32 `json:"maxFailedLoginAttempts,omitempty"`
	// Specifies the time duration within which the consecutive failed login attempts causes a local user account to be locked and the lockout duration time due to that.
	FailedLoginLockTimeDurationMins NullableInt32 `json:"failedLoginLockTimeDurationMins,omitempty"`
	// Specifies the lockout inactivity time range in days.
	InactivityTimeDays NullableInt32 `json:"inactivityTimeDays,omitempty"`
}

// NewSecurityConfigAccountLockout instantiates a new SecurityConfigAccountLockout object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecurityConfigAccountLockout() *SecurityConfigAccountLockout {
	this := SecurityConfigAccountLockout{}
	return &this
}

// NewSecurityConfigAccountLockoutWithDefaults instantiates a new SecurityConfigAccountLockout object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecurityConfigAccountLockoutWithDefaults() *SecurityConfigAccountLockout {
	this := SecurityConfigAccountLockout{}
	return &this
}

// GetMaxFailedLoginAttempts returns the MaxFailedLoginAttempts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigAccountLockout) GetMaxFailedLoginAttempts() int32 {
	if o == nil || o.MaxFailedLoginAttempts.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MaxFailedLoginAttempts.Get()
}

// GetMaxFailedLoginAttemptsOk returns a tuple with the MaxFailedLoginAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigAccountLockout) GetMaxFailedLoginAttemptsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxFailedLoginAttempts.Get(), o.MaxFailedLoginAttempts.IsSet()
}

// HasMaxFailedLoginAttempts returns a boolean if a field has been set.
func (o *SecurityConfigAccountLockout) HasMaxFailedLoginAttempts() bool {
	if o != nil && o.MaxFailedLoginAttempts.IsSet() {
		return true
	}

	return false
}

// SetMaxFailedLoginAttempts gets a reference to the given NullableInt32 and assigns it to the MaxFailedLoginAttempts field.
func (o *SecurityConfigAccountLockout) SetMaxFailedLoginAttempts(v int32) {
	o.MaxFailedLoginAttempts.Set(&v)
}
// SetMaxFailedLoginAttemptsNil sets the value for MaxFailedLoginAttempts to be an explicit nil
func (o *SecurityConfigAccountLockout) SetMaxFailedLoginAttemptsNil() {
	o.MaxFailedLoginAttempts.Set(nil)
}

// UnsetMaxFailedLoginAttempts ensures that no value is present for MaxFailedLoginAttempts, not even an explicit nil
func (o *SecurityConfigAccountLockout) UnsetMaxFailedLoginAttempts() {
	o.MaxFailedLoginAttempts.Unset()
}

// GetFailedLoginLockTimeDurationMins returns the FailedLoginLockTimeDurationMins field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigAccountLockout) GetFailedLoginLockTimeDurationMins() int32 {
	if o == nil || o.FailedLoginLockTimeDurationMins.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FailedLoginLockTimeDurationMins.Get()
}

// GetFailedLoginLockTimeDurationMinsOk returns a tuple with the FailedLoginLockTimeDurationMins field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigAccountLockout) GetFailedLoginLockTimeDurationMinsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FailedLoginLockTimeDurationMins.Get(), o.FailedLoginLockTimeDurationMins.IsSet()
}

// HasFailedLoginLockTimeDurationMins returns a boolean if a field has been set.
func (o *SecurityConfigAccountLockout) HasFailedLoginLockTimeDurationMins() bool {
	if o != nil && o.FailedLoginLockTimeDurationMins.IsSet() {
		return true
	}

	return false
}

// SetFailedLoginLockTimeDurationMins gets a reference to the given NullableInt32 and assigns it to the FailedLoginLockTimeDurationMins field.
func (o *SecurityConfigAccountLockout) SetFailedLoginLockTimeDurationMins(v int32) {
	o.FailedLoginLockTimeDurationMins.Set(&v)
}
// SetFailedLoginLockTimeDurationMinsNil sets the value for FailedLoginLockTimeDurationMins to be an explicit nil
func (o *SecurityConfigAccountLockout) SetFailedLoginLockTimeDurationMinsNil() {
	o.FailedLoginLockTimeDurationMins.Set(nil)
}

// UnsetFailedLoginLockTimeDurationMins ensures that no value is present for FailedLoginLockTimeDurationMins, not even an explicit nil
func (o *SecurityConfigAccountLockout) UnsetFailedLoginLockTimeDurationMins() {
	o.FailedLoginLockTimeDurationMins.Unset()
}

// GetInactivityTimeDays returns the InactivityTimeDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SecurityConfigAccountLockout) GetInactivityTimeDays() int32 {
	if o == nil || o.InactivityTimeDays.Get() == nil {
		var ret int32
		return ret
	}
	return *o.InactivityTimeDays.Get()
}

// GetInactivityTimeDaysOk returns a tuple with the InactivityTimeDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SecurityConfigAccountLockout) GetInactivityTimeDaysOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InactivityTimeDays.Get(), o.InactivityTimeDays.IsSet()
}

// HasInactivityTimeDays returns a boolean if a field has been set.
func (o *SecurityConfigAccountLockout) HasInactivityTimeDays() bool {
	if o != nil && o.InactivityTimeDays.IsSet() {
		return true
	}

	return false
}

// SetInactivityTimeDays gets a reference to the given NullableInt32 and assigns it to the InactivityTimeDays field.
func (o *SecurityConfigAccountLockout) SetInactivityTimeDays(v int32) {
	o.InactivityTimeDays.Set(&v)
}
// SetInactivityTimeDaysNil sets the value for InactivityTimeDays to be an explicit nil
func (o *SecurityConfigAccountLockout) SetInactivityTimeDaysNil() {
	o.InactivityTimeDays.Set(nil)
}

// UnsetInactivityTimeDays ensures that no value is present for InactivityTimeDays, not even an explicit nil
func (o *SecurityConfigAccountLockout) UnsetInactivityTimeDays() {
	o.InactivityTimeDays.Unset()
}

func (o SecurityConfigAccountLockout) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MaxFailedLoginAttempts.IsSet() {
		toSerialize["maxFailedLoginAttempts"] = o.MaxFailedLoginAttempts.Get()
	}
	if o.FailedLoginLockTimeDurationMins.IsSet() {
		toSerialize["failedLoginLockTimeDurationMins"] = o.FailedLoginLockTimeDurationMins.Get()
	}
	if o.InactivityTimeDays.IsSet() {
		toSerialize["inactivityTimeDays"] = o.InactivityTimeDays.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSecurityConfigAccountLockout struct {
	value *SecurityConfigAccountLockout
	isSet bool
}

func (v NullableSecurityConfigAccountLockout) Get() *SecurityConfigAccountLockout {
	return v.value
}

func (v *NullableSecurityConfigAccountLockout) Set(val *SecurityConfigAccountLockout) {
	v.value = val
	v.isSet = true
}

func (v NullableSecurityConfigAccountLockout) IsSet() bool {
	return v.isSet
}

func (v *NullableSecurityConfigAccountLockout) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecurityConfigAccountLockout(val *SecurityConfigAccountLockout) *NullableSecurityConfigAccountLockout {
	return &NullableSecurityConfigAccountLockout{value: val, isSet: true}
}

func (v NullableSecurityConfigAccountLockout) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecurityConfigAccountLockout) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


