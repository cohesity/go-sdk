/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// BackupDataStats Specifies statistics about local snapshot.
type BackupDataStats struct {
	// Specifies total logical size of object(s) in bytes.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
	// Specifies total size of data in bytes written after taking backup.
	BytesWritten NullableInt64 `json:"bytesWritten,omitempty"`
	// Specifies total logical bytes read for creating the snapshot.
	BytesRead NullableInt64 `json:"bytesRead,omitempty"`
}

// NewBackupDataStats instantiates a new BackupDataStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupDataStats() *BackupDataStats {
	this := BackupDataStats{}
	return &this
}

// NewBackupDataStatsWithDefaults instantiates a new BackupDataStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupDataStatsWithDefaults() *BackupDataStats {
	this := BackupDataStats{}
	return &this
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupDataStats) GetLogicalSizeBytes() int64 {
	if o == nil || o.LogicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupDataStats) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *BackupDataStats) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *BackupDataStats) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *BackupDataStats) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *BackupDataStats) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetBytesWritten returns the BytesWritten field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupDataStats) GetBytesWritten() int64 {
	if o == nil || o.BytesWritten.Get() == nil {
		var ret int64
		return ret
	}
	return *o.BytesWritten.Get()
}

// GetBytesWrittenOk returns a tuple with the BytesWritten field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupDataStats) GetBytesWrittenOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BytesWritten.Get(), o.BytesWritten.IsSet()
}

// HasBytesWritten returns a boolean if a field has been set.
func (o *BackupDataStats) HasBytesWritten() bool {
	if o != nil && o.BytesWritten.IsSet() {
		return true
	}

	return false
}

// SetBytesWritten gets a reference to the given NullableInt64 and assigns it to the BytesWritten field.
func (o *BackupDataStats) SetBytesWritten(v int64) {
	o.BytesWritten.Set(&v)
}
// SetBytesWrittenNil sets the value for BytesWritten to be an explicit nil
func (o *BackupDataStats) SetBytesWrittenNil() {
	o.BytesWritten.Set(nil)
}

// UnsetBytesWritten ensures that no value is present for BytesWritten, not even an explicit nil
func (o *BackupDataStats) UnsetBytesWritten() {
	o.BytesWritten.Unset()
}

// GetBytesRead returns the BytesRead field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BackupDataStats) GetBytesRead() int64 {
	if o == nil || o.BytesRead.Get() == nil {
		var ret int64
		return ret
	}
	return *o.BytesRead.Get()
}

// GetBytesReadOk returns a tuple with the BytesRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BackupDataStats) GetBytesReadOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BytesRead.Get(), o.BytesRead.IsSet()
}

// HasBytesRead returns a boolean if a field has been set.
func (o *BackupDataStats) HasBytesRead() bool {
	if o != nil && o.BytesRead.IsSet() {
		return true
	}

	return false
}

// SetBytesRead gets a reference to the given NullableInt64 and assigns it to the BytesRead field.
func (o *BackupDataStats) SetBytesRead(v int64) {
	o.BytesRead.Set(&v)
}
// SetBytesReadNil sets the value for BytesRead to be an explicit nil
func (o *BackupDataStats) SetBytesReadNil() {
	o.BytesRead.Set(nil)
}

// UnsetBytesRead ensures that no value is present for BytesRead, not even an explicit nil
func (o *BackupDataStats) UnsetBytesRead() {
	o.BytesRead.Unset()
}

func (o BackupDataStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.BytesWritten.IsSet() {
		toSerialize["bytesWritten"] = o.BytesWritten.Get()
	}
	if o.BytesRead.IsSet() {
		toSerialize["bytesRead"] = o.BytesRead.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBackupDataStats struct {
	value *BackupDataStats
	isSet bool
}

func (v NullableBackupDataStats) Get() *BackupDataStats {
	return v.value
}

func (v *NullableBackupDataStats) Set(val *BackupDataStats) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupDataStats) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupDataStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupDataStats(val *BackupDataStats) *NullableBackupDataStats {
	return &NullableBackupDataStats{value: val, isSet: true}
}

func (v NullableBackupDataStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupDataStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


