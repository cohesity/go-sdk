/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// OracleDataGuardInfo Dataguard info about Oracle database.
type OracleDataGuardInfo struct {
	// Specifies the role of the Oracle DataGuard database.
	Role *string `json:"role,omitempty"`
	// Specifies the type of the standby oracle database.
	StandbyType *string `json:"standbyType,omitempty"`
}

// NewOracleDataGuardInfo instantiates a new OracleDataGuardInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDataGuardInfo() *OracleDataGuardInfo {
	this := OracleDataGuardInfo{}
	return &this
}

// NewOracleDataGuardInfoWithDefaults instantiates a new OracleDataGuardInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDataGuardInfoWithDefaults() *OracleDataGuardInfo {
	this := OracleDataGuardInfo{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *OracleDataGuardInfo) GetRole() string {
	if o == nil || o.Role == nil {
		var ret string
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDataGuardInfo) GetRoleOk() (*string, bool) {
	if o == nil || o.Role == nil {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *OracleDataGuardInfo) HasRole() bool {
	if o != nil && o.Role != nil {
		return true
	}

	return false
}

// SetRole gets a reference to the given string and assigns it to the Role field.
func (o *OracleDataGuardInfo) SetRole(v string) {
	o.Role = &v
}

// GetStandbyType returns the StandbyType field value if set, zero value otherwise.
func (o *OracleDataGuardInfo) GetStandbyType() string {
	if o == nil || o.StandbyType == nil {
		var ret string
		return ret
	}
	return *o.StandbyType
}

// GetStandbyTypeOk returns a tuple with the StandbyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDataGuardInfo) GetStandbyTypeOk() (*string, bool) {
	if o == nil || o.StandbyType == nil {
		return nil, false
	}
	return o.StandbyType, true
}

// HasStandbyType returns a boolean if a field has been set.
func (o *OracleDataGuardInfo) HasStandbyType() bool {
	if o != nil && o.StandbyType != nil {
		return true
	}

	return false
}

// SetStandbyType gets a reference to the given string and assigns it to the StandbyType field.
func (o *OracleDataGuardInfo) SetStandbyType(v string) {
	o.StandbyType = &v
}

func (o OracleDataGuardInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Role != nil {
		toSerialize["role"] = o.Role
	}
	if o.StandbyType != nil {
		toSerialize["standbyType"] = o.StandbyType
	}
	return json.Marshal(toSerialize)
}

type NullableOracleDataGuardInfo struct {
	value *OracleDataGuardInfo
	isSet bool
}

func (v NullableOracleDataGuardInfo) Get() *OracleDataGuardInfo {
	return v.value
}

func (v *NullableOracleDataGuardInfo) Set(val *OracleDataGuardInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDataGuardInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDataGuardInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDataGuardInfo(val *OracleDataGuardInfo) *NullableOracleDataGuardInfo {
	return &NullableOracleDataGuardInfo{value: val, isSet: true}
}

func (v NullableOracleDataGuardInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDataGuardInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


