/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmPhysicalSourceInfo Specifies the information for a physical source.
type McmPhysicalSourceInfo struct {
	// Specifies the upgradability of the agent software.
	Upgradability NullableString `json:"upgradability,omitempty"`
	// Specifies the current upgrade status of the agent.
	UpgradeStatus NullableString `json:"upgradeStatus,omitempty"`
	// Specifies the upgrade error if any for the agent.
	UpgradeError NullableString `json:"upgradeError,omitempty"`
	// Specifies the operating system of the physical host.
	HostType NullableString `json:"hostType,omitempty"`
	// Specifies the information for agents related to source.
	AgentsInfo *[]McmAgentInfo `json:"agentsInfo,omitempty"`
}

// NewMcmPhysicalSourceInfo instantiates a new McmPhysicalSourceInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmPhysicalSourceInfo() *McmPhysicalSourceInfo {
	this := McmPhysicalSourceInfo{}
	return &this
}

// NewMcmPhysicalSourceInfoWithDefaults instantiates a new McmPhysicalSourceInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmPhysicalSourceInfoWithDefaults() *McmPhysicalSourceInfo {
	this := McmPhysicalSourceInfo{}
	return &this
}

// GetUpgradability returns the Upgradability field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmPhysicalSourceInfo) GetUpgradability() string {
	if o == nil || o.Upgradability.Get() == nil {
		var ret string
		return ret
	}
	return *o.Upgradability.Get()
}

// GetUpgradabilityOk returns a tuple with the Upgradability field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmPhysicalSourceInfo) GetUpgradabilityOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Upgradability.Get(), o.Upgradability.IsSet()
}

// HasUpgradability returns a boolean if a field has been set.
func (o *McmPhysicalSourceInfo) HasUpgradability() bool {
	if o != nil && o.Upgradability.IsSet() {
		return true
	}

	return false
}

// SetUpgradability gets a reference to the given NullableString and assigns it to the Upgradability field.
func (o *McmPhysicalSourceInfo) SetUpgradability(v string) {
	o.Upgradability.Set(&v)
}
// SetUpgradabilityNil sets the value for Upgradability to be an explicit nil
func (o *McmPhysicalSourceInfo) SetUpgradabilityNil() {
	o.Upgradability.Set(nil)
}

// UnsetUpgradability ensures that no value is present for Upgradability, not even an explicit nil
func (o *McmPhysicalSourceInfo) UnsetUpgradability() {
	o.Upgradability.Unset()
}

// GetUpgradeStatus returns the UpgradeStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmPhysicalSourceInfo) GetUpgradeStatus() string {
	if o == nil || o.UpgradeStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.UpgradeStatus.Get()
}

// GetUpgradeStatusOk returns a tuple with the UpgradeStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmPhysicalSourceInfo) GetUpgradeStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpgradeStatus.Get(), o.UpgradeStatus.IsSet()
}

// HasUpgradeStatus returns a boolean if a field has been set.
func (o *McmPhysicalSourceInfo) HasUpgradeStatus() bool {
	if o != nil && o.UpgradeStatus.IsSet() {
		return true
	}

	return false
}

// SetUpgradeStatus gets a reference to the given NullableString and assigns it to the UpgradeStatus field.
func (o *McmPhysicalSourceInfo) SetUpgradeStatus(v string) {
	o.UpgradeStatus.Set(&v)
}
// SetUpgradeStatusNil sets the value for UpgradeStatus to be an explicit nil
func (o *McmPhysicalSourceInfo) SetUpgradeStatusNil() {
	o.UpgradeStatus.Set(nil)
}

// UnsetUpgradeStatus ensures that no value is present for UpgradeStatus, not even an explicit nil
func (o *McmPhysicalSourceInfo) UnsetUpgradeStatus() {
	o.UpgradeStatus.Unset()
}

// GetUpgradeError returns the UpgradeError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmPhysicalSourceInfo) GetUpgradeError() string {
	if o == nil || o.UpgradeError.Get() == nil {
		var ret string
		return ret
	}
	return *o.UpgradeError.Get()
}

// GetUpgradeErrorOk returns a tuple with the UpgradeError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmPhysicalSourceInfo) GetUpgradeErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UpgradeError.Get(), o.UpgradeError.IsSet()
}

// HasUpgradeError returns a boolean if a field has been set.
func (o *McmPhysicalSourceInfo) HasUpgradeError() bool {
	if o != nil && o.UpgradeError.IsSet() {
		return true
	}

	return false
}

// SetUpgradeError gets a reference to the given NullableString and assigns it to the UpgradeError field.
func (o *McmPhysicalSourceInfo) SetUpgradeError(v string) {
	o.UpgradeError.Set(&v)
}
// SetUpgradeErrorNil sets the value for UpgradeError to be an explicit nil
func (o *McmPhysicalSourceInfo) SetUpgradeErrorNil() {
	o.UpgradeError.Set(nil)
}

// UnsetUpgradeError ensures that no value is present for UpgradeError, not even an explicit nil
func (o *McmPhysicalSourceInfo) UnsetUpgradeError() {
	o.UpgradeError.Unset()
}

// GetHostType returns the HostType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmPhysicalSourceInfo) GetHostType() string {
	if o == nil || o.HostType.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostType.Get()
}

// GetHostTypeOk returns a tuple with the HostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmPhysicalSourceInfo) GetHostTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostType.Get(), o.HostType.IsSet()
}

// HasHostType returns a boolean if a field has been set.
func (o *McmPhysicalSourceInfo) HasHostType() bool {
	if o != nil && o.HostType.IsSet() {
		return true
	}

	return false
}

// SetHostType gets a reference to the given NullableString and assigns it to the HostType field.
func (o *McmPhysicalSourceInfo) SetHostType(v string) {
	o.HostType.Set(&v)
}
// SetHostTypeNil sets the value for HostType to be an explicit nil
func (o *McmPhysicalSourceInfo) SetHostTypeNil() {
	o.HostType.Set(nil)
}

// UnsetHostType ensures that no value is present for HostType, not even an explicit nil
func (o *McmPhysicalSourceInfo) UnsetHostType() {
	o.HostType.Unset()
}

// GetAgentsInfo returns the AgentsInfo field value if set, zero value otherwise.
func (o *McmPhysicalSourceInfo) GetAgentsInfo() []McmAgentInfo {
	if o == nil || o.AgentsInfo == nil {
		var ret []McmAgentInfo
		return ret
	}
	return *o.AgentsInfo
}

// GetAgentsInfoOk returns a tuple with the AgentsInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmPhysicalSourceInfo) GetAgentsInfoOk() (*[]McmAgentInfo, bool) {
	if o == nil || o.AgentsInfo == nil {
		return nil, false
	}
	return o.AgentsInfo, true
}

// HasAgentsInfo returns a boolean if a field has been set.
func (o *McmPhysicalSourceInfo) HasAgentsInfo() bool {
	if o != nil && o.AgentsInfo != nil {
		return true
	}

	return false
}

// SetAgentsInfo gets a reference to the given []McmAgentInfo and assigns it to the AgentsInfo field.
func (o *McmPhysicalSourceInfo) SetAgentsInfo(v []McmAgentInfo) {
	o.AgentsInfo = &v
}

func (o McmPhysicalSourceInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Upgradability.IsSet() {
		toSerialize["upgradability"] = o.Upgradability.Get()
	}
	if o.UpgradeStatus.IsSet() {
		toSerialize["upgradeStatus"] = o.UpgradeStatus.Get()
	}
	if o.UpgradeError.IsSet() {
		toSerialize["upgradeError"] = o.UpgradeError.Get()
	}
	if o.HostType.IsSet() {
		toSerialize["hostType"] = o.HostType.Get()
	}
	if o.AgentsInfo != nil {
		toSerialize["agentsInfo"] = o.AgentsInfo
	}
	return json.Marshal(toSerialize)
}

type NullableMcmPhysicalSourceInfo struct {
	value *McmPhysicalSourceInfo
	isSet bool
}

func (v NullableMcmPhysicalSourceInfo) Get() *McmPhysicalSourceInfo {
	return v.value
}

func (v *NullableMcmPhysicalSourceInfo) Set(val *McmPhysicalSourceInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmPhysicalSourceInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmPhysicalSourceInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmPhysicalSourceInfo(val *McmPhysicalSourceInfo) *NullableMcmPhysicalSourceInfo {
	return &NullableMcmPhysicalSourceInfo{value: val, isSet: true}
}

func (v NullableMcmPhysicalSourceInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmPhysicalSourceInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


