/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RecoveryVlanConfig Specifies the VLAN configuration for Recovery.
type RecoveryVlanConfig struct {
	// If this is set, then the Cohesity host name or the IP address associated with this vlan is used for mounting Cohesity's view on the remote host.
	Id NullableInt32 `json:"id,omitempty"`
	// If this is set to true, then even if VLANs are configured on the system, the partition VIPs will be used for the Recovery.
	DisableVlan NullableBool `json:"disableVlan,omitempty"`
	// Interface group to use for Recovery.
	InterfaceName NullableString `json:"interfaceName,omitempty"`
}

// NewRecoveryVlanConfig instantiates a new RecoveryVlanConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoveryVlanConfig() *RecoveryVlanConfig {
	this := RecoveryVlanConfig{}
	return &this
}

// NewRecoveryVlanConfigWithDefaults instantiates a new RecoveryVlanConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoveryVlanConfigWithDefaults() *RecoveryVlanConfig {
	this := RecoveryVlanConfig{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoveryVlanConfig) GetId() int32 {
	if o == nil || o.Id.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoveryVlanConfig) GetIdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *RecoveryVlanConfig) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt32 and assigns it to the Id field.
func (o *RecoveryVlanConfig) SetId(v int32) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *RecoveryVlanConfig) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *RecoveryVlanConfig) UnsetId() {
	o.Id.Unset()
}

// GetDisableVlan returns the DisableVlan field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoveryVlanConfig) GetDisableVlan() bool {
	if o == nil || o.DisableVlan.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisableVlan.Get()
}

// GetDisableVlanOk returns a tuple with the DisableVlan field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoveryVlanConfig) GetDisableVlanOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableVlan.Get(), o.DisableVlan.IsSet()
}

// HasDisableVlan returns a boolean if a field has been set.
func (o *RecoveryVlanConfig) HasDisableVlan() bool {
	if o != nil && o.DisableVlan.IsSet() {
		return true
	}

	return false
}

// SetDisableVlan gets a reference to the given NullableBool and assigns it to the DisableVlan field.
func (o *RecoveryVlanConfig) SetDisableVlan(v bool) {
	o.DisableVlan.Set(&v)
}
// SetDisableVlanNil sets the value for DisableVlan to be an explicit nil
func (o *RecoveryVlanConfig) SetDisableVlanNil() {
	o.DisableVlan.Set(nil)
}

// UnsetDisableVlan ensures that no value is present for DisableVlan, not even an explicit nil
func (o *RecoveryVlanConfig) UnsetDisableVlan() {
	o.DisableVlan.Unset()
}

// GetInterfaceName returns the InterfaceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoveryVlanConfig) GetInterfaceName() string {
	if o == nil || o.InterfaceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.InterfaceName.Get()
}

// GetInterfaceNameOk returns a tuple with the InterfaceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoveryVlanConfig) GetInterfaceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InterfaceName.Get(), o.InterfaceName.IsSet()
}

// HasInterfaceName returns a boolean if a field has been set.
func (o *RecoveryVlanConfig) HasInterfaceName() bool {
	if o != nil && o.InterfaceName.IsSet() {
		return true
	}

	return false
}

// SetInterfaceName gets a reference to the given NullableString and assigns it to the InterfaceName field.
func (o *RecoveryVlanConfig) SetInterfaceName(v string) {
	o.InterfaceName.Set(&v)
}
// SetInterfaceNameNil sets the value for InterfaceName to be an explicit nil
func (o *RecoveryVlanConfig) SetInterfaceNameNil() {
	o.InterfaceName.Set(nil)
}

// UnsetInterfaceName ensures that no value is present for InterfaceName, not even an explicit nil
func (o *RecoveryVlanConfig) UnsetInterfaceName() {
	o.InterfaceName.Unset()
}

func (o RecoveryVlanConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.DisableVlan.IsSet() {
		toSerialize["disableVlan"] = o.DisableVlan.Get()
	}
	if o.InterfaceName.IsSet() {
		toSerialize["interfaceName"] = o.InterfaceName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoveryVlanConfig struct {
	value *RecoveryVlanConfig
	isSet bool
}

func (v NullableRecoveryVlanConfig) Get() *RecoveryVlanConfig {
	return v.value
}

func (v *NullableRecoveryVlanConfig) Set(val *RecoveryVlanConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoveryVlanConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoveryVlanConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoveryVlanConfig(val *RecoveryVlanConfig) *NullableRecoveryVlanConfig {
	return &NullableRecoveryVlanConfig{value: val, isSet: true}
}

func (v NullableRecoveryVlanConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoveryVlanConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


