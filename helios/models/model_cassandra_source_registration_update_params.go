/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CassandraSourceRegistrationUpdateParams Specifies parameters to update cassandra source.
type CassandraSourceRegistrationUpdateParams struct {
	// Any one seed node of the Cassandra cluster.
	SeedNode *string `json:"seedNode,omitempty"`
	// Directory path containing Cassandra configuration YAML file.
	ConfigDirectory *string `json:"configDirectory,omitempty"`
	// Directory from where DSE specific configuration can be read. This should be set only when you are using the DSE distribution of Cassandra.
	DseConfigurationDirectory NullableString `json:"dseConfigurationDirectory,omitempty"`
	// Set to true if this cluster has DSE tiered storage.
	IsDseTieredStorage *bool `json:"isDseTieredStorage,omitempty"`
	// Set to true if this cluster has DSE Authenticator.
	IsDseAuthenticator *bool `json:"isDseAuthenticator,omitempty"`
	SshPasswordCredentials NullableCassandraConnectionParamsSshPasswordCredentials `json:"sshPasswordCredentials,omitempty"`
	SshPrivateKeyCredentials NullableCassandraConnectionParamsSshPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
	JmxCredentials NullableCassandraSourceRegistrationUpdateParamsJmxCredentials `json:"jmxCredentials,omitempty"`
	CassandraCredentials NullableCassandraSourceRegistrationUpdateParamsCassandraCredentials `json:"cassandraCredentials,omitempty"`
	// Data centers for this cluster.
	DataCenterNames *[]string `json:"dataCenterNames,omitempty"`
	// Principal for the kerberos connection. (This is required only if your Cassandra has Kerberos authentication. Please refer to the user guide.)
	KerberosPrincipal NullableString `json:"kerberosPrincipal,omitempty"`
	DseSolrInfo *DSESolrInfo `json:"dseSolrInfo,omitempty"`
}

// NewCassandraSourceRegistrationUpdateParams instantiates a new CassandraSourceRegistrationUpdateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCassandraSourceRegistrationUpdateParams() *CassandraSourceRegistrationUpdateParams {
	this := CassandraSourceRegistrationUpdateParams{}
	return &this
}

// NewCassandraSourceRegistrationUpdateParamsWithDefaults instantiates a new CassandraSourceRegistrationUpdateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCassandraSourceRegistrationUpdateParamsWithDefaults() *CassandraSourceRegistrationUpdateParams {
	this := CassandraSourceRegistrationUpdateParams{}
	return &this
}

// GetSeedNode returns the SeedNode field value if set, zero value otherwise.
func (o *CassandraSourceRegistrationUpdateParams) GetSeedNode() string {
	if o == nil || o.SeedNode == nil {
		var ret string
		return ret
	}
	return *o.SeedNode
}

// GetSeedNodeOk returns a tuple with the SeedNode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CassandraSourceRegistrationUpdateParams) GetSeedNodeOk() (*string, bool) {
	if o == nil || o.SeedNode == nil {
		return nil, false
	}
	return o.SeedNode, true
}

// HasSeedNode returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasSeedNode() bool {
	if o != nil && o.SeedNode != nil {
		return true
	}

	return false
}

// SetSeedNode gets a reference to the given string and assigns it to the SeedNode field.
func (o *CassandraSourceRegistrationUpdateParams) SetSeedNode(v string) {
	o.SeedNode = &v
}

// GetConfigDirectory returns the ConfigDirectory field value if set, zero value otherwise.
func (o *CassandraSourceRegistrationUpdateParams) GetConfigDirectory() string {
	if o == nil || o.ConfigDirectory == nil {
		var ret string
		return ret
	}
	return *o.ConfigDirectory
}

// GetConfigDirectoryOk returns a tuple with the ConfigDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CassandraSourceRegistrationUpdateParams) GetConfigDirectoryOk() (*string, bool) {
	if o == nil || o.ConfigDirectory == nil {
		return nil, false
	}
	return o.ConfigDirectory, true
}

// HasConfigDirectory returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasConfigDirectory() bool {
	if o != nil && o.ConfigDirectory != nil {
		return true
	}

	return false
}

// SetConfigDirectory gets a reference to the given string and assigns it to the ConfigDirectory field.
func (o *CassandraSourceRegistrationUpdateParams) SetConfigDirectory(v string) {
	o.ConfigDirectory = &v
}

// GetDseConfigurationDirectory returns the DseConfigurationDirectory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraSourceRegistrationUpdateParams) GetDseConfigurationDirectory() string {
	if o == nil || o.DseConfigurationDirectory.Get() == nil {
		var ret string
		return ret
	}
	return *o.DseConfigurationDirectory.Get()
}

// GetDseConfigurationDirectoryOk returns a tuple with the DseConfigurationDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraSourceRegistrationUpdateParams) GetDseConfigurationDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DseConfigurationDirectory.Get(), o.DseConfigurationDirectory.IsSet()
}

// HasDseConfigurationDirectory returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasDseConfigurationDirectory() bool {
	if o != nil && o.DseConfigurationDirectory.IsSet() {
		return true
	}

	return false
}

// SetDseConfigurationDirectory gets a reference to the given NullableString and assigns it to the DseConfigurationDirectory field.
func (o *CassandraSourceRegistrationUpdateParams) SetDseConfigurationDirectory(v string) {
	o.DseConfigurationDirectory.Set(&v)
}
// SetDseConfigurationDirectoryNil sets the value for DseConfigurationDirectory to be an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) SetDseConfigurationDirectoryNil() {
	o.DseConfigurationDirectory.Set(nil)
}

// UnsetDseConfigurationDirectory ensures that no value is present for DseConfigurationDirectory, not even an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) UnsetDseConfigurationDirectory() {
	o.DseConfigurationDirectory.Unset()
}

// GetIsDseTieredStorage returns the IsDseTieredStorage field value if set, zero value otherwise.
func (o *CassandraSourceRegistrationUpdateParams) GetIsDseTieredStorage() bool {
	if o == nil || o.IsDseTieredStorage == nil {
		var ret bool
		return ret
	}
	return *o.IsDseTieredStorage
}

// GetIsDseTieredStorageOk returns a tuple with the IsDseTieredStorage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CassandraSourceRegistrationUpdateParams) GetIsDseTieredStorageOk() (*bool, bool) {
	if o == nil || o.IsDseTieredStorage == nil {
		return nil, false
	}
	return o.IsDseTieredStorage, true
}

// HasIsDseTieredStorage returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasIsDseTieredStorage() bool {
	if o != nil && o.IsDseTieredStorage != nil {
		return true
	}

	return false
}

// SetIsDseTieredStorage gets a reference to the given bool and assigns it to the IsDseTieredStorage field.
func (o *CassandraSourceRegistrationUpdateParams) SetIsDseTieredStorage(v bool) {
	o.IsDseTieredStorage = &v
}

// GetIsDseAuthenticator returns the IsDseAuthenticator field value if set, zero value otherwise.
func (o *CassandraSourceRegistrationUpdateParams) GetIsDseAuthenticator() bool {
	if o == nil || o.IsDseAuthenticator == nil {
		var ret bool
		return ret
	}
	return *o.IsDseAuthenticator
}

// GetIsDseAuthenticatorOk returns a tuple with the IsDseAuthenticator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CassandraSourceRegistrationUpdateParams) GetIsDseAuthenticatorOk() (*bool, bool) {
	if o == nil || o.IsDseAuthenticator == nil {
		return nil, false
	}
	return o.IsDseAuthenticator, true
}

// HasIsDseAuthenticator returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasIsDseAuthenticator() bool {
	if o != nil && o.IsDseAuthenticator != nil {
		return true
	}

	return false
}

// SetIsDseAuthenticator gets a reference to the given bool and assigns it to the IsDseAuthenticator field.
func (o *CassandraSourceRegistrationUpdateParams) SetIsDseAuthenticator(v bool) {
	o.IsDseAuthenticator = &v
}

// GetSshPasswordCredentials returns the SshPasswordCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraSourceRegistrationUpdateParams) GetSshPasswordCredentials() CassandraConnectionParamsSshPasswordCredentials {
	if o == nil || o.SshPasswordCredentials.Get() == nil {
		var ret CassandraConnectionParamsSshPasswordCredentials
		return ret
	}
	return *o.SshPasswordCredentials.Get()
}

// GetSshPasswordCredentialsOk returns a tuple with the SshPasswordCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraSourceRegistrationUpdateParams) GetSshPasswordCredentialsOk() (*CassandraConnectionParamsSshPasswordCredentials, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshPasswordCredentials.Get(), o.SshPasswordCredentials.IsSet()
}

// HasSshPasswordCredentials returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasSshPasswordCredentials() bool {
	if o != nil && o.SshPasswordCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshPasswordCredentials gets a reference to the given NullableCassandraConnectionParamsSshPasswordCredentials and assigns it to the SshPasswordCredentials field.
func (o *CassandraSourceRegistrationUpdateParams) SetSshPasswordCredentials(v CassandraConnectionParamsSshPasswordCredentials) {
	o.SshPasswordCredentials.Set(&v)
}
// SetSshPasswordCredentialsNil sets the value for SshPasswordCredentials to be an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) SetSshPasswordCredentialsNil() {
	o.SshPasswordCredentials.Set(nil)
}

// UnsetSshPasswordCredentials ensures that no value is present for SshPasswordCredentials, not even an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) UnsetSshPasswordCredentials() {
	o.SshPasswordCredentials.Unset()
}

// GetSshPrivateKeyCredentials returns the SshPrivateKeyCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraSourceRegistrationUpdateParams) GetSshPrivateKeyCredentials() CassandraConnectionParamsSshPrivateKeyCredentials {
	if o == nil || o.SshPrivateKeyCredentials.Get() == nil {
		var ret CassandraConnectionParamsSshPrivateKeyCredentials
		return ret
	}
	return *o.SshPrivateKeyCredentials.Get()
}

// GetSshPrivateKeyCredentialsOk returns a tuple with the SshPrivateKeyCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraSourceRegistrationUpdateParams) GetSshPrivateKeyCredentialsOk() (*CassandraConnectionParamsSshPrivateKeyCredentials, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshPrivateKeyCredentials.Get(), o.SshPrivateKeyCredentials.IsSet()
}

// HasSshPrivateKeyCredentials returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasSshPrivateKeyCredentials() bool {
	if o != nil && o.SshPrivateKeyCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshPrivateKeyCredentials gets a reference to the given NullableCassandraConnectionParamsSshPrivateKeyCredentials and assigns it to the SshPrivateKeyCredentials field.
func (o *CassandraSourceRegistrationUpdateParams) SetSshPrivateKeyCredentials(v CassandraConnectionParamsSshPrivateKeyCredentials) {
	o.SshPrivateKeyCredentials.Set(&v)
}
// SetSshPrivateKeyCredentialsNil sets the value for SshPrivateKeyCredentials to be an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) SetSshPrivateKeyCredentialsNil() {
	o.SshPrivateKeyCredentials.Set(nil)
}

// UnsetSshPrivateKeyCredentials ensures that no value is present for SshPrivateKeyCredentials, not even an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) UnsetSshPrivateKeyCredentials() {
	o.SshPrivateKeyCredentials.Unset()
}

// GetJmxCredentials returns the JmxCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraSourceRegistrationUpdateParams) GetJmxCredentials() CassandraSourceRegistrationUpdateParamsJmxCredentials {
	if o == nil || o.JmxCredentials.Get() == nil {
		var ret CassandraSourceRegistrationUpdateParamsJmxCredentials
		return ret
	}
	return *o.JmxCredentials.Get()
}

// GetJmxCredentialsOk returns a tuple with the JmxCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraSourceRegistrationUpdateParams) GetJmxCredentialsOk() (*CassandraSourceRegistrationUpdateParamsJmxCredentials, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JmxCredentials.Get(), o.JmxCredentials.IsSet()
}

// HasJmxCredentials returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasJmxCredentials() bool {
	if o != nil && o.JmxCredentials.IsSet() {
		return true
	}

	return false
}

// SetJmxCredentials gets a reference to the given NullableCassandraSourceRegistrationUpdateParamsJmxCredentials and assigns it to the JmxCredentials field.
func (o *CassandraSourceRegistrationUpdateParams) SetJmxCredentials(v CassandraSourceRegistrationUpdateParamsJmxCredentials) {
	o.JmxCredentials.Set(&v)
}
// SetJmxCredentialsNil sets the value for JmxCredentials to be an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) SetJmxCredentialsNil() {
	o.JmxCredentials.Set(nil)
}

// UnsetJmxCredentials ensures that no value is present for JmxCredentials, not even an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) UnsetJmxCredentials() {
	o.JmxCredentials.Unset()
}

// GetCassandraCredentials returns the CassandraCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraSourceRegistrationUpdateParams) GetCassandraCredentials() CassandraSourceRegistrationUpdateParamsCassandraCredentials {
	if o == nil || o.CassandraCredentials.Get() == nil {
		var ret CassandraSourceRegistrationUpdateParamsCassandraCredentials
		return ret
	}
	return *o.CassandraCredentials.Get()
}

// GetCassandraCredentialsOk returns a tuple with the CassandraCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraSourceRegistrationUpdateParams) GetCassandraCredentialsOk() (*CassandraSourceRegistrationUpdateParamsCassandraCredentials, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CassandraCredentials.Get(), o.CassandraCredentials.IsSet()
}

// HasCassandraCredentials returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasCassandraCredentials() bool {
	if o != nil && o.CassandraCredentials.IsSet() {
		return true
	}

	return false
}

// SetCassandraCredentials gets a reference to the given NullableCassandraSourceRegistrationUpdateParamsCassandraCredentials and assigns it to the CassandraCredentials field.
func (o *CassandraSourceRegistrationUpdateParams) SetCassandraCredentials(v CassandraSourceRegistrationUpdateParamsCassandraCredentials) {
	o.CassandraCredentials.Set(&v)
}
// SetCassandraCredentialsNil sets the value for CassandraCredentials to be an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) SetCassandraCredentialsNil() {
	o.CassandraCredentials.Set(nil)
}

// UnsetCassandraCredentials ensures that no value is present for CassandraCredentials, not even an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) UnsetCassandraCredentials() {
	o.CassandraCredentials.Unset()
}

// GetDataCenterNames returns the DataCenterNames field value if set, zero value otherwise.
func (o *CassandraSourceRegistrationUpdateParams) GetDataCenterNames() []string {
	if o == nil || o.DataCenterNames == nil {
		var ret []string
		return ret
	}
	return *o.DataCenterNames
}

// GetDataCenterNamesOk returns a tuple with the DataCenterNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CassandraSourceRegistrationUpdateParams) GetDataCenterNamesOk() (*[]string, bool) {
	if o == nil || o.DataCenterNames == nil {
		return nil, false
	}
	return o.DataCenterNames, true
}

// HasDataCenterNames returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasDataCenterNames() bool {
	if o != nil && o.DataCenterNames != nil {
		return true
	}

	return false
}

// SetDataCenterNames gets a reference to the given []string and assigns it to the DataCenterNames field.
func (o *CassandraSourceRegistrationUpdateParams) SetDataCenterNames(v []string) {
	o.DataCenterNames = &v
}

// GetKerberosPrincipal returns the KerberosPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CassandraSourceRegistrationUpdateParams) GetKerberosPrincipal() string {
	if o == nil || o.KerberosPrincipal.Get() == nil {
		var ret string
		return ret
	}
	return *o.KerberosPrincipal.Get()
}

// GetKerberosPrincipalOk returns a tuple with the KerberosPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CassandraSourceRegistrationUpdateParams) GetKerberosPrincipalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KerberosPrincipal.Get(), o.KerberosPrincipal.IsSet()
}

// HasKerberosPrincipal returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasKerberosPrincipal() bool {
	if o != nil && o.KerberosPrincipal.IsSet() {
		return true
	}

	return false
}

// SetKerberosPrincipal gets a reference to the given NullableString and assigns it to the KerberosPrincipal field.
func (o *CassandraSourceRegistrationUpdateParams) SetKerberosPrincipal(v string) {
	o.KerberosPrincipal.Set(&v)
}
// SetKerberosPrincipalNil sets the value for KerberosPrincipal to be an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) SetKerberosPrincipalNil() {
	o.KerberosPrincipal.Set(nil)
}

// UnsetKerberosPrincipal ensures that no value is present for KerberosPrincipal, not even an explicit nil
func (o *CassandraSourceRegistrationUpdateParams) UnsetKerberosPrincipal() {
	o.KerberosPrincipal.Unset()
}

// GetDseSolrInfo returns the DseSolrInfo field value if set, zero value otherwise.
func (o *CassandraSourceRegistrationUpdateParams) GetDseSolrInfo() DSESolrInfo {
	if o == nil || o.DseSolrInfo == nil {
		var ret DSESolrInfo
		return ret
	}
	return *o.DseSolrInfo
}

// GetDseSolrInfoOk returns a tuple with the DseSolrInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CassandraSourceRegistrationUpdateParams) GetDseSolrInfoOk() (*DSESolrInfo, bool) {
	if o == nil || o.DseSolrInfo == nil {
		return nil, false
	}
	return o.DseSolrInfo, true
}

// HasDseSolrInfo returns a boolean if a field has been set.
func (o *CassandraSourceRegistrationUpdateParams) HasDseSolrInfo() bool {
	if o != nil && o.DseSolrInfo != nil {
		return true
	}

	return false
}

// SetDseSolrInfo gets a reference to the given DSESolrInfo and assigns it to the DseSolrInfo field.
func (o *CassandraSourceRegistrationUpdateParams) SetDseSolrInfo(v DSESolrInfo) {
	o.DseSolrInfo = &v
}

func (o CassandraSourceRegistrationUpdateParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SeedNode != nil {
		toSerialize["seedNode"] = o.SeedNode
	}
	if o.ConfigDirectory != nil {
		toSerialize["configDirectory"] = o.ConfigDirectory
	}
	if o.DseConfigurationDirectory.IsSet() {
		toSerialize["dseConfigurationDirectory"] = o.DseConfigurationDirectory.Get()
	}
	if o.IsDseTieredStorage != nil {
		toSerialize["isDseTieredStorage"] = o.IsDseTieredStorage
	}
	if o.IsDseAuthenticator != nil {
		toSerialize["isDseAuthenticator"] = o.IsDseAuthenticator
	}
	if o.SshPasswordCredentials.IsSet() {
		toSerialize["sshPasswordCredentials"] = o.SshPasswordCredentials.Get()
	}
	if o.SshPrivateKeyCredentials.IsSet() {
		toSerialize["sshPrivateKeyCredentials"] = o.SshPrivateKeyCredentials.Get()
	}
	if o.JmxCredentials.IsSet() {
		toSerialize["jmxCredentials"] = o.JmxCredentials.Get()
	}
	if o.CassandraCredentials.IsSet() {
		toSerialize["cassandraCredentials"] = o.CassandraCredentials.Get()
	}
	if o.DataCenterNames != nil {
		toSerialize["dataCenterNames"] = o.DataCenterNames
	}
	if o.KerberosPrincipal.IsSet() {
		toSerialize["kerberosPrincipal"] = o.KerberosPrincipal.Get()
	}
	if o.DseSolrInfo != nil {
		toSerialize["dseSolrInfo"] = o.DseSolrInfo
	}
	return json.Marshal(toSerialize)
}

type NullableCassandraSourceRegistrationUpdateParams struct {
	value *CassandraSourceRegistrationUpdateParams
	isSet bool
}

func (v NullableCassandraSourceRegistrationUpdateParams) Get() *CassandraSourceRegistrationUpdateParams {
	return v.value
}

func (v *NullableCassandraSourceRegistrationUpdateParams) Set(val *CassandraSourceRegistrationUpdateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCassandraSourceRegistrationUpdateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCassandraSourceRegistrationUpdateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCassandraSourceRegistrationUpdateParams(val *CassandraSourceRegistrationUpdateParams) *NullableCassandraSourceRegistrationUpdateParams {
	return &NullableCassandraSourceRegistrationUpdateParams{value: val, isSet: true}
}

func (v NullableCassandraSourceRegistrationUpdateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCassandraSourceRegistrationUpdateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


