/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ExistingGroupParam Specifies the parameters for using existing protection group.
type ExistingGroupParam struct {
	// Specifies the protection group id.
	Id NullableString `json:"id"`
}

// NewExistingGroupParam instantiates a new ExistingGroupParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExistingGroupParam(id NullableString) *ExistingGroupParam {
	this := ExistingGroupParam{}
	this.Id = id
	return &this
}

// NewExistingGroupParamWithDefaults instantiates a new ExistingGroupParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExistingGroupParamWithDefaults() *ExistingGroupParam {
	this := ExistingGroupParam{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ExistingGroupParam) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExistingGroupParam) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *ExistingGroupParam) SetId(v string) {
	o.Id.Set(&v)
}

func (o ExistingGroupParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExistingGroupParam struct {
	value *ExistingGroupParam
	isSet bool
}

func (v NullableExistingGroupParam) Get() *ExistingGroupParam {
	return v.value
}

func (v *NullableExistingGroupParam) Set(val *ExistingGroupParam) {
	v.value = val
	v.isSet = true
}

func (v NullableExistingGroupParam) IsSet() bool {
	return v.isSet
}

func (v *NullableExistingGroupParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExistingGroupParam(val *ExistingGroupParam) *NullableExistingGroupParam {
	return &NullableExistingGroupParam{value: val, isSet: true}
}

func (v NullableExistingGroupParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExistingGroupParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


