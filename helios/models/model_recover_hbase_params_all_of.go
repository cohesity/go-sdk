/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RecoverHbaseParamsAllOf struct for RecoverHbaseParamsAllOf
type RecoverHbaseParamsAllOf struct {
	// Specifies the local snapshot ids of the Objects to be recovered.
	Snapshots []RecoverHbaseSnapshotParams `json:"snapshots"`
	// A suffix that is to be applied to all recovered objects.
	Suffix NullableString `json:"suffix,omitempty"`
}

// NewRecoverHbaseParamsAllOf instantiates a new RecoverHbaseParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverHbaseParamsAllOf(snapshots []RecoverHbaseSnapshotParams) *RecoverHbaseParamsAllOf {
	this := RecoverHbaseParamsAllOf{}
	this.Snapshots = snapshots
	return &this
}

// NewRecoverHbaseParamsAllOfWithDefaults instantiates a new RecoverHbaseParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverHbaseParamsAllOfWithDefaults() *RecoverHbaseParamsAllOf {
	this := RecoverHbaseParamsAllOf{}
	return &this
}

// GetSnapshots returns the Snapshots field value
// If the value is explicit nil, the zero value for []RecoverHbaseSnapshotParams will be returned
func (o *RecoverHbaseParamsAllOf) GetSnapshots() []RecoverHbaseSnapshotParams {
	if o == nil {
		var ret []RecoverHbaseSnapshotParams
		return ret
	}

	return o.Snapshots
}

// GetSnapshotsOk returns a tuple with the Snapshots field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHbaseParamsAllOf) GetSnapshotsOk() (*[]RecoverHbaseSnapshotParams, bool) {
	if o == nil || o.Snapshots == nil {
		return nil, false
	}
	return &o.Snapshots, true
}

// SetSnapshots sets field value
func (o *RecoverHbaseParamsAllOf) SetSnapshots(v []RecoverHbaseSnapshotParams) {
	o.Snapshots = v
}

// GetSuffix returns the Suffix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverHbaseParamsAllOf) GetSuffix() string {
	if o == nil || o.Suffix.Get() == nil {
		var ret string
		return ret
	}
	return *o.Suffix.Get()
}

// GetSuffixOk returns a tuple with the Suffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverHbaseParamsAllOf) GetSuffixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Suffix.Get(), o.Suffix.IsSet()
}

// HasSuffix returns a boolean if a field has been set.
func (o *RecoverHbaseParamsAllOf) HasSuffix() bool {
	if o != nil && o.Suffix.IsSet() {
		return true
	}

	return false
}

// SetSuffix gets a reference to the given NullableString and assigns it to the Suffix field.
func (o *RecoverHbaseParamsAllOf) SetSuffix(v string) {
	o.Suffix.Set(&v)
}
// SetSuffixNil sets the value for Suffix to be an explicit nil
func (o *RecoverHbaseParamsAllOf) SetSuffixNil() {
	o.Suffix.Set(nil)
}

// UnsetSuffix ensures that no value is present for Suffix, not even an explicit nil
func (o *RecoverHbaseParamsAllOf) UnsetSuffix() {
	o.Suffix.Unset()
}

func (o RecoverHbaseParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Snapshots != nil {
		toSerialize["snapshots"] = o.Snapshots
	}
	if o.Suffix.IsSet() {
		toSerialize["suffix"] = o.Suffix.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverHbaseParamsAllOf struct {
	value *RecoverHbaseParamsAllOf
	isSet bool
}

func (v NullableRecoverHbaseParamsAllOf) Get() *RecoverHbaseParamsAllOf {
	return v.value
}

func (v *NullableRecoverHbaseParamsAllOf) Set(val *RecoverHbaseParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverHbaseParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverHbaseParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverHbaseParamsAllOf(val *RecoverHbaseParamsAllOf) *NullableRecoverHbaseParamsAllOf {
	return &NullableRecoverHbaseParamsAllOf{value: val, isSet: true}
}

func (v NullableRecoverHbaseParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverHbaseParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


