/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// IncrementalBackupPolicy Specifies incremental backup settings for a Protection Group.
type IncrementalBackupPolicy struct {
	Schedule IncrementalSchedule `json:"schedule"`
}

// NewIncrementalBackupPolicy instantiates a new IncrementalBackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIncrementalBackupPolicy(schedule IncrementalSchedule) *IncrementalBackupPolicy {
	this := IncrementalBackupPolicy{}
	this.Schedule = schedule
	return &this
}

// NewIncrementalBackupPolicyWithDefaults instantiates a new IncrementalBackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIncrementalBackupPolicyWithDefaults() *IncrementalBackupPolicy {
	this := IncrementalBackupPolicy{}
	return &this
}

// GetSchedule returns the Schedule field value
func (o *IncrementalBackupPolicy) GetSchedule() IncrementalSchedule {
	if o == nil {
		var ret IncrementalSchedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *IncrementalBackupPolicy) GetScheduleOk() (*IncrementalSchedule, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *IncrementalBackupPolicy) SetSchedule(v IncrementalSchedule) {
	o.Schedule = v
}

func (o IncrementalBackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schedule"] = o.Schedule
	}
	return json.Marshal(toSerialize)
}

type NullableIncrementalBackupPolicy struct {
	value *IncrementalBackupPolicy
	isSet bool
}

func (v NullableIncrementalBackupPolicy) Get() *IncrementalBackupPolicy {
	return v.value
}

func (v *NullableIncrementalBackupPolicy) Set(val *IncrementalBackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableIncrementalBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableIncrementalBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIncrementalBackupPolicy(val *IncrementalBackupPolicy) *NullableIncrementalBackupPolicy {
	return &NullableIncrementalBackupPolicy{value: val, isSet: true}
}

func (v NullableIncrementalBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIncrementalBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


