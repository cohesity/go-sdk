/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// LdapStatus Specifies the LDAP connection status.
type LdapStatus struct {
	// Specifies the connection status.
	ConnectionStatus NullableString `json:"connectionStatus,omitempty"`
}

// NewLdapStatus instantiates a new LdapStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLdapStatus() *LdapStatus {
	this := LdapStatus{}
	return &this
}

// NewLdapStatusWithDefaults instantiates a new LdapStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLdapStatusWithDefaults() *LdapStatus {
	this := LdapStatus{}
	return &this
}

// GetConnectionStatus returns the ConnectionStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *LdapStatus) GetConnectionStatus() string {
	if o == nil || o.ConnectionStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConnectionStatus.Get()
}

// GetConnectionStatusOk returns a tuple with the ConnectionStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *LdapStatus) GetConnectionStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConnectionStatus.Get(), o.ConnectionStatus.IsSet()
}

// HasConnectionStatus returns a boolean if a field has been set.
func (o *LdapStatus) HasConnectionStatus() bool {
	if o != nil && o.ConnectionStatus.IsSet() {
		return true
	}

	return false
}

// SetConnectionStatus gets a reference to the given NullableString and assigns it to the ConnectionStatus field.
func (o *LdapStatus) SetConnectionStatus(v string) {
	o.ConnectionStatus.Set(&v)
}
// SetConnectionStatusNil sets the value for ConnectionStatus to be an explicit nil
func (o *LdapStatus) SetConnectionStatusNil() {
	o.ConnectionStatus.Set(nil)
}

// UnsetConnectionStatus ensures that no value is present for ConnectionStatus, not even an explicit nil
func (o *LdapStatus) UnsetConnectionStatus() {
	o.ConnectionStatus.Unset()
}

func (o LdapStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConnectionStatus.IsSet() {
		toSerialize["connectionStatus"] = o.ConnectionStatus.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableLdapStatus struct {
	value *LdapStatus
	isSet bool
}

func (v NullableLdapStatus) Get() *LdapStatus {
	return v.value
}

func (v *NullableLdapStatus) Set(val *LdapStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableLdapStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableLdapStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLdapStatus(val *LdapStatus) *NullableLdapStatus {
	return &NullableLdapStatus{value: val, isSet: true}
}

func (v NullableLdapStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLdapStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


