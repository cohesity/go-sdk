/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// HeliosTenantClusterResources A list of Sources and Storage Domains assigned to the Tenant, grouped by Cluster.
type HeliosTenantClusterResources struct {
	// Specifies the list of cluster identifiers. The format is clusterId:clusterIncarnationId.
	ClusterIdentifier NullableString `json:"clusterIdentifier,omitempty"`
	// List of assigned Storage Domains.
	StorageDomainNames []string `json:"storageDomainNames,omitempty"`
	// List of completely assigned Sources.
	SourceNames []string `json:"sourceNames,omitempty"`
	// Number of assigned objects grouped by source names.
	SourceStats []HeliosSourceObjectsStats `json:"sourceStats,omitempty"`
}

// NewHeliosTenantClusterResources instantiates a new HeliosTenantClusterResources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosTenantClusterResources() *HeliosTenantClusterResources {
	this := HeliosTenantClusterResources{}
	return &this
}

// NewHeliosTenantClusterResourcesWithDefaults instantiates a new HeliosTenantClusterResources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosTenantClusterResourcesWithDefaults() *HeliosTenantClusterResources {
	this := HeliosTenantClusterResources{}
	return &this
}

// GetClusterIdentifier returns the ClusterIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTenantClusterResources) GetClusterIdentifier() string {
	if o == nil || o.ClusterIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterIdentifier.Get()
}

// GetClusterIdentifierOk returns a tuple with the ClusterIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTenantClusterResources) GetClusterIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterIdentifier.Get(), o.ClusterIdentifier.IsSet()
}

// HasClusterIdentifier returns a boolean if a field has been set.
func (o *HeliosTenantClusterResources) HasClusterIdentifier() bool {
	if o != nil && o.ClusterIdentifier.IsSet() {
		return true
	}

	return false
}

// SetClusterIdentifier gets a reference to the given NullableString and assigns it to the ClusterIdentifier field.
func (o *HeliosTenantClusterResources) SetClusterIdentifier(v string) {
	o.ClusterIdentifier.Set(&v)
}
// SetClusterIdentifierNil sets the value for ClusterIdentifier to be an explicit nil
func (o *HeliosTenantClusterResources) SetClusterIdentifierNil() {
	o.ClusterIdentifier.Set(nil)
}

// UnsetClusterIdentifier ensures that no value is present for ClusterIdentifier, not even an explicit nil
func (o *HeliosTenantClusterResources) UnsetClusterIdentifier() {
	o.ClusterIdentifier.Unset()
}

// GetStorageDomainNames returns the StorageDomainNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTenantClusterResources) GetStorageDomainNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.StorageDomainNames
}

// GetStorageDomainNamesOk returns a tuple with the StorageDomainNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTenantClusterResources) GetStorageDomainNamesOk() (*[]string, bool) {
	if o == nil || o.StorageDomainNames == nil {
		return nil, false
	}
	return &o.StorageDomainNames, true
}

// HasStorageDomainNames returns a boolean if a field has been set.
func (o *HeliosTenantClusterResources) HasStorageDomainNames() bool {
	if o != nil && o.StorageDomainNames != nil {
		return true
	}

	return false
}

// SetStorageDomainNames gets a reference to the given []string and assigns it to the StorageDomainNames field.
func (o *HeliosTenantClusterResources) SetStorageDomainNames(v []string) {
	o.StorageDomainNames = v
}

// GetSourceNames returns the SourceNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTenantClusterResources) GetSourceNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SourceNames
}

// GetSourceNamesOk returns a tuple with the SourceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTenantClusterResources) GetSourceNamesOk() (*[]string, bool) {
	if o == nil || o.SourceNames == nil {
		return nil, false
	}
	return &o.SourceNames, true
}

// HasSourceNames returns a boolean if a field has been set.
func (o *HeliosTenantClusterResources) HasSourceNames() bool {
	if o != nil && o.SourceNames != nil {
		return true
	}

	return false
}

// SetSourceNames gets a reference to the given []string and assigns it to the SourceNames field.
func (o *HeliosTenantClusterResources) SetSourceNames(v []string) {
	o.SourceNames = v
}

// GetSourceStats returns the SourceStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTenantClusterResources) GetSourceStats() []HeliosSourceObjectsStats {
	if o == nil  {
		var ret []HeliosSourceObjectsStats
		return ret
	}
	return o.SourceStats
}

// GetSourceStatsOk returns a tuple with the SourceStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTenantClusterResources) GetSourceStatsOk() (*[]HeliosSourceObjectsStats, bool) {
	if o == nil || o.SourceStats == nil {
		return nil, false
	}
	return &o.SourceStats, true
}

// HasSourceStats returns a boolean if a field has been set.
func (o *HeliosTenantClusterResources) HasSourceStats() bool {
	if o != nil && o.SourceStats != nil {
		return true
	}

	return false
}

// SetSourceStats gets a reference to the given []HeliosSourceObjectsStats and assigns it to the SourceStats field.
func (o *HeliosTenantClusterResources) SetSourceStats(v []HeliosSourceObjectsStats) {
	o.SourceStats = v
}

func (o HeliosTenantClusterResources) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterIdentifier.IsSet() {
		toSerialize["clusterIdentifier"] = o.ClusterIdentifier.Get()
	}
	if o.StorageDomainNames != nil {
		toSerialize["storageDomainNames"] = o.StorageDomainNames
	}
	if o.SourceNames != nil {
		toSerialize["sourceNames"] = o.SourceNames
	}
	if o.SourceStats != nil {
		toSerialize["sourceStats"] = o.SourceStats
	}
	return json.Marshal(toSerialize)
}

type NullableHeliosTenantClusterResources struct {
	value *HeliosTenantClusterResources
	isSet bool
}

func (v NullableHeliosTenantClusterResources) Get() *HeliosTenantClusterResources {
	return v.value
}

func (v *NullableHeliosTenantClusterResources) Set(val *HeliosTenantClusterResources) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosTenantClusterResources) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosTenantClusterResources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosTenantClusterResources(val *HeliosTenantClusterResources) *NullableHeliosTenantClusterResources {
	return &NullableHeliosTenantClusterResources{value: val, isSet: true}
}

func (v NullableHeliosTenantClusterResources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosTenantClusterResources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


