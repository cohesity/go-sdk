/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// LocalGlobalObjectIds Local and global object IDs.
type LocalGlobalObjectIds struct {
	// Specifies the local ID of the object.
	LocalId *int64 `json:"localId,omitempty"`
	// Specifies the global ID of the object.
	GlobalId *string `json:"globalId,omitempty"`
}

// NewLocalGlobalObjectIds instantiates a new LocalGlobalObjectIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocalGlobalObjectIds() *LocalGlobalObjectIds {
	this := LocalGlobalObjectIds{}
	return &this
}

// NewLocalGlobalObjectIdsWithDefaults instantiates a new LocalGlobalObjectIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocalGlobalObjectIdsWithDefaults() *LocalGlobalObjectIds {
	this := LocalGlobalObjectIds{}
	return &this
}

// GetLocalId returns the LocalId field value if set, zero value otherwise.
func (o *LocalGlobalObjectIds) GetLocalId() int64 {
	if o == nil || o.LocalId == nil {
		var ret int64
		return ret
	}
	return *o.LocalId
}

// GetLocalIdOk returns a tuple with the LocalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalGlobalObjectIds) GetLocalIdOk() (*int64, bool) {
	if o == nil || o.LocalId == nil {
		return nil, false
	}
	return o.LocalId, true
}

// HasLocalId returns a boolean if a field has been set.
func (o *LocalGlobalObjectIds) HasLocalId() bool {
	if o != nil && o.LocalId != nil {
		return true
	}

	return false
}

// SetLocalId gets a reference to the given int64 and assigns it to the LocalId field.
func (o *LocalGlobalObjectIds) SetLocalId(v int64) {
	o.LocalId = &v
}

// GetGlobalId returns the GlobalId field value if set, zero value otherwise.
func (o *LocalGlobalObjectIds) GetGlobalId() string {
	if o == nil || o.GlobalId == nil {
		var ret string
		return ret
	}
	return *o.GlobalId
}

// GetGlobalIdOk returns a tuple with the GlobalId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocalGlobalObjectIds) GetGlobalIdOk() (*string, bool) {
	if o == nil || o.GlobalId == nil {
		return nil, false
	}
	return o.GlobalId, true
}

// HasGlobalId returns a boolean if a field has been set.
func (o *LocalGlobalObjectIds) HasGlobalId() bool {
	if o != nil && o.GlobalId != nil {
		return true
	}

	return false
}

// SetGlobalId gets a reference to the given string and assigns it to the GlobalId field.
func (o *LocalGlobalObjectIds) SetGlobalId(v string) {
	o.GlobalId = &v
}

func (o LocalGlobalObjectIds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LocalId != nil {
		toSerialize["localId"] = o.LocalId
	}
	if o.GlobalId != nil {
		toSerialize["globalId"] = o.GlobalId
	}
	return json.Marshal(toSerialize)
}

type NullableLocalGlobalObjectIds struct {
	value *LocalGlobalObjectIds
	isSet bool
}

func (v NullableLocalGlobalObjectIds) Get() *LocalGlobalObjectIds {
	return v.value
}

func (v *NullableLocalGlobalObjectIds) Set(val *LocalGlobalObjectIds) {
	v.value = val
	v.isSet = true
}

func (v NullableLocalGlobalObjectIds) IsSet() bool {
	return v.isSet
}

func (v *NullableLocalGlobalObjectIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocalGlobalObjectIds(val *LocalGlobalObjectIds) *NullableLocalGlobalObjectIds {
	return &NullableLocalGlobalObjectIds{value: val, isSet: true}
}

func (v NullableLocalGlobalObjectIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocalGlobalObjectIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


