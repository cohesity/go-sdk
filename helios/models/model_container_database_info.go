/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ContainerDatabaseInfo Object details about Oracle container database.
type ContainerDatabaseInfo struct {
	// Specifies the list of Pluggable databases within a container database.
	PluggableDatabaseList []PluggableDatabaseInfo `json:"pluggableDatabaseList,omitempty"`
}

// NewContainerDatabaseInfo instantiates a new ContainerDatabaseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewContainerDatabaseInfo() *ContainerDatabaseInfo {
	this := ContainerDatabaseInfo{}
	return &this
}

// NewContainerDatabaseInfoWithDefaults instantiates a new ContainerDatabaseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewContainerDatabaseInfoWithDefaults() *ContainerDatabaseInfo {
	this := ContainerDatabaseInfo{}
	return &this
}

// GetPluggableDatabaseList returns the PluggableDatabaseList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ContainerDatabaseInfo) GetPluggableDatabaseList() []PluggableDatabaseInfo {
	if o == nil  {
		var ret []PluggableDatabaseInfo
		return ret
	}
	return o.PluggableDatabaseList
}

// GetPluggableDatabaseListOk returns a tuple with the PluggableDatabaseList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ContainerDatabaseInfo) GetPluggableDatabaseListOk() (*[]PluggableDatabaseInfo, bool) {
	if o == nil || o.PluggableDatabaseList == nil {
		return nil, false
	}
	return &o.PluggableDatabaseList, true
}

// HasPluggableDatabaseList returns a boolean if a field has been set.
func (o *ContainerDatabaseInfo) HasPluggableDatabaseList() bool {
	if o != nil && o.PluggableDatabaseList != nil {
		return true
	}

	return false
}

// SetPluggableDatabaseList gets a reference to the given []PluggableDatabaseInfo and assigns it to the PluggableDatabaseList field.
func (o *ContainerDatabaseInfo) SetPluggableDatabaseList(v []PluggableDatabaseInfo) {
	o.PluggableDatabaseList = v
}

func (o ContainerDatabaseInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PluggableDatabaseList != nil {
		toSerialize["pluggableDatabaseList"] = o.PluggableDatabaseList
	}
	return json.Marshal(toSerialize)
}

type NullableContainerDatabaseInfo struct {
	value *ContainerDatabaseInfo
	isSet bool
}

func (v NullableContainerDatabaseInfo) Get() *ContainerDatabaseInfo {
	return v.value
}

func (v *NullableContainerDatabaseInfo) Set(val *ContainerDatabaseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableContainerDatabaseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableContainerDatabaseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableContainerDatabaseInfo(val *ContainerDatabaseInfo) *NullableContainerDatabaseInfo {
	return &NullableContainerDatabaseInfo{value: val, isSet: true}
}

func (v NullableContainerDatabaseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableContainerDatabaseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


