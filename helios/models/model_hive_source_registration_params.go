/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// HiveSourceRegistrationParams Specifies parameters to register Hive source.
type HiveSourceRegistrationParams struct {
	// The MetastoreAddress for this Hive.
	MetastoreAddress *string `json:"metastoreAddress,omitempty"`
	// The MetastorePort for this Hive.
	MetastorePort *int32 `json:"metastorePort,omitempty"`
	// Authentication type.
	AuthType NullableString `json:"authType,omitempty"`
	// IP or hostname of any host from which the Hive configuration file hive-site.xml can be read.
	Host string `json:"host"`
	// The directory containing the hive-site.xml.
	ConfigurationDirectory string `json:"configurationDirectory"`
	SshPasswordCredentials NullableHiveSourceRegistrationParamsAllOfSshPasswordCredentials `json:"sshPasswordCredentials,omitempty"`
	SshPrivateKeyCredentials NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials `json:"sshPrivateKeyCredentials,omitempty"`
	// Protection Source registration id of the HDFS on which this Hive is running.
	HdfsSourceRegistrationID int64 `json:"hdfsSourceRegistrationID"`
	// The kerberos principal to be used to connect to this Hive source.
	KerberosPrincipal NullableString `json:"kerberosPrincipal,omitempty"`
}

// NewHiveSourceRegistrationParams instantiates a new HiveSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHiveSourceRegistrationParams(host string, configurationDirectory string, hdfsSourceRegistrationID int64) *HiveSourceRegistrationParams {
	this := HiveSourceRegistrationParams{}
	this.Host = host
	this.ConfigurationDirectory = configurationDirectory
	this.HdfsSourceRegistrationID = hdfsSourceRegistrationID
	return &this
}

// NewHiveSourceRegistrationParamsWithDefaults instantiates a new HiveSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHiveSourceRegistrationParamsWithDefaults() *HiveSourceRegistrationParams {
	this := HiveSourceRegistrationParams{}
	return &this
}

// GetMetastoreAddress returns the MetastoreAddress field value if set, zero value otherwise.
func (o *HiveSourceRegistrationParams) GetMetastoreAddress() string {
	if o == nil || o.MetastoreAddress == nil {
		var ret string
		return ret
	}
	return *o.MetastoreAddress
}

// GetMetastoreAddressOk returns a tuple with the MetastoreAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HiveSourceRegistrationParams) GetMetastoreAddressOk() (*string, bool) {
	if o == nil || o.MetastoreAddress == nil {
		return nil, false
	}
	return o.MetastoreAddress, true
}

// HasMetastoreAddress returns a boolean if a field has been set.
func (o *HiveSourceRegistrationParams) HasMetastoreAddress() bool {
	if o != nil && o.MetastoreAddress != nil {
		return true
	}

	return false
}

// SetMetastoreAddress gets a reference to the given string and assigns it to the MetastoreAddress field.
func (o *HiveSourceRegistrationParams) SetMetastoreAddress(v string) {
	o.MetastoreAddress = &v
}

// GetMetastorePort returns the MetastorePort field value if set, zero value otherwise.
func (o *HiveSourceRegistrationParams) GetMetastorePort() int32 {
	if o == nil || o.MetastorePort == nil {
		var ret int32
		return ret
	}
	return *o.MetastorePort
}

// GetMetastorePortOk returns a tuple with the MetastorePort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HiveSourceRegistrationParams) GetMetastorePortOk() (*int32, bool) {
	if o == nil || o.MetastorePort == nil {
		return nil, false
	}
	return o.MetastorePort, true
}

// HasMetastorePort returns a boolean if a field has been set.
func (o *HiveSourceRegistrationParams) HasMetastorePort() bool {
	if o != nil && o.MetastorePort != nil {
		return true
	}

	return false
}

// SetMetastorePort gets a reference to the given int32 and assigns it to the MetastorePort field.
func (o *HiveSourceRegistrationParams) SetMetastorePort(v int32) {
	o.MetastorePort = &v
}

// GetAuthType returns the AuthType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveSourceRegistrationParams) GetAuthType() string {
	if o == nil || o.AuthType.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthType.Get()
}

// GetAuthTypeOk returns a tuple with the AuthType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveSourceRegistrationParams) GetAuthTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthType.Get(), o.AuthType.IsSet()
}

// HasAuthType returns a boolean if a field has been set.
func (o *HiveSourceRegistrationParams) HasAuthType() bool {
	if o != nil && o.AuthType.IsSet() {
		return true
	}

	return false
}

// SetAuthType gets a reference to the given NullableString and assigns it to the AuthType field.
func (o *HiveSourceRegistrationParams) SetAuthType(v string) {
	o.AuthType.Set(&v)
}
// SetAuthTypeNil sets the value for AuthType to be an explicit nil
func (o *HiveSourceRegistrationParams) SetAuthTypeNil() {
	o.AuthType.Set(nil)
}

// UnsetAuthType ensures that no value is present for AuthType, not even an explicit nil
func (o *HiveSourceRegistrationParams) UnsetAuthType() {
	o.AuthType.Unset()
}

// GetHost returns the Host field value
func (o *HiveSourceRegistrationParams) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *HiveSourceRegistrationParams) GetHostOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *HiveSourceRegistrationParams) SetHost(v string) {
	o.Host = v
}

// GetConfigurationDirectory returns the ConfigurationDirectory field value
func (o *HiveSourceRegistrationParams) GetConfigurationDirectory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConfigurationDirectory
}

// GetConfigurationDirectoryOk returns a tuple with the ConfigurationDirectory field value
// and a boolean to check if the value has been set.
func (o *HiveSourceRegistrationParams) GetConfigurationDirectoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ConfigurationDirectory, true
}

// SetConfigurationDirectory sets field value
func (o *HiveSourceRegistrationParams) SetConfigurationDirectory(v string) {
	o.ConfigurationDirectory = v
}

// GetSshPasswordCredentials returns the SshPasswordCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveSourceRegistrationParams) GetSshPasswordCredentials() HiveSourceRegistrationParamsAllOfSshPasswordCredentials {
	if o == nil || o.SshPasswordCredentials.Get() == nil {
		var ret HiveSourceRegistrationParamsAllOfSshPasswordCredentials
		return ret
	}
	return *o.SshPasswordCredentials.Get()
}

// GetSshPasswordCredentialsOk returns a tuple with the SshPasswordCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveSourceRegistrationParams) GetSshPasswordCredentialsOk() (*HiveSourceRegistrationParamsAllOfSshPasswordCredentials, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshPasswordCredentials.Get(), o.SshPasswordCredentials.IsSet()
}

// HasSshPasswordCredentials returns a boolean if a field has been set.
func (o *HiveSourceRegistrationParams) HasSshPasswordCredentials() bool {
	if o != nil && o.SshPasswordCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshPasswordCredentials gets a reference to the given NullableHiveSourceRegistrationParamsAllOfSshPasswordCredentials and assigns it to the SshPasswordCredentials field.
func (o *HiveSourceRegistrationParams) SetSshPasswordCredentials(v HiveSourceRegistrationParamsAllOfSshPasswordCredentials) {
	o.SshPasswordCredentials.Set(&v)
}
// SetSshPasswordCredentialsNil sets the value for SshPasswordCredentials to be an explicit nil
func (o *HiveSourceRegistrationParams) SetSshPasswordCredentialsNil() {
	o.SshPasswordCredentials.Set(nil)
}

// UnsetSshPasswordCredentials ensures that no value is present for SshPasswordCredentials, not even an explicit nil
func (o *HiveSourceRegistrationParams) UnsetSshPasswordCredentials() {
	o.SshPasswordCredentials.Unset()
}

// GetSshPrivateKeyCredentials returns the SshPrivateKeyCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveSourceRegistrationParams) GetSshPrivateKeyCredentials() HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials {
	if o == nil || o.SshPrivateKeyCredentials.Get() == nil {
		var ret HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials
		return ret
	}
	return *o.SshPrivateKeyCredentials.Get()
}

// GetSshPrivateKeyCredentialsOk returns a tuple with the SshPrivateKeyCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveSourceRegistrationParams) GetSshPrivateKeyCredentialsOk() (*HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SshPrivateKeyCredentials.Get(), o.SshPrivateKeyCredentials.IsSet()
}

// HasSshPrivateKeyCredentials returns a boolean if a field has been set.
func (o *HiveSourceRegistrationParams) HasSshPrivateKeyCredentials() bool {
	if o != nil && o.SshPrivateKeyCredentials.IsSet() {
		return true
	}

	return false
}

// SetSshPrivateKeyCredentials gets a reference to the given NullableHbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials and assigns it to the SshPrivateKeyCredentials field.
func (o *HiveSourceRegistrationParams) SetSshPrivateKeyCredentials(v HbaseSourceRegistrationParamsAllOfSshPrivateKeyCredentials) {
	o.SshPrivateKeyCredentials.Set(&v)
}
// SetSshPrivateKeyCredentialsNil sets the value for SshPrivateKeyCredentials to be an explicit nil
func (o *HiveSourceRegistrationParams) SetSshPrivateKeyCredentialsNil() {
	o.SshPrivateKeyCredentials.Set(nil)
}

// UnsetSshPrivateKeyCredentials ensures that no value is present for SshPrivateKeyCredentials, not even an explicit nil
func (o *HiveSourceRegistrationParams) UnsetSshPrivateKeyCredentials() {
	o.SshPrivateKeyCredentials.Unset()
}

// GetHdfsSourceRegistrationID returns the HdfsSourceRegistrationID field value
func (o *HiveSourceRegistrationParams) GetHdfsSourceRegistrationID() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.HdfsSourceRegistrationID
}

// GetHdfsSourceRegistrationIDOk returns a tuple with the HdfsSourceRegistrationID field value
// and a boolean to check if the value has been set.
func (o *HiveSourceRegistrationParams) GetHdfsSourceRegistrationIDOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HdfsSourceRegistrationID, true
}

// SetHdfsSourceRegistrationID sets field value
func (o *HiveSourceRegistrationParams) SetHdfsSourceRegistrationID(v int64) {
	o.HdfsSourceRegistrationID = v
}

// GetKerberosPrincipal returns the KerberosPrincipal field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveSourceRegistrationParams) GetKerberosPrincipal() string {
	if o == nil || o.KerberosPrincipal.Get() == nil {
		var ret string
		return ret
	}
	return *o.KerberosPrincipal.Get()
}

// GetKerberosPrincipalOk returns a tuple with the KerberosPrincipal field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveSourceRegistrationParams) GetKerberosPrincipalOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KerberosPrincipal.Get(), o.KerberosPrincipal.IsSet()
}

// HasKerberosPrincipal returns a boolean if a field has been set.
func (o *HiveSourceRegistrationParams) HasKerberosPrincipal() bool {
	if o != nil && o.KerberosPrincipal.IsSet() {
		return true
	}

	return false
}

// SetKerberosPrincipal gets a reference to the given NullableString and assigns it to the KerberosPrincipal field.
func (o *HiveSourceRegistrationParams) SetKerberosPrincipal(v string) {
	o.KerberosPrincipal.Set(&v)
}
// SetKerberosPrincipalNil sets the value for KerberosPrincipal to be an explicit nil
func (o *HiveSourceRegistrationParams) SetKerberosPrincipalNil() {
	o.KerberosPrincipal.Set(nil)
}

// UnsetKerberosPrincipal ensures that no value is present for KerberosPrincipal, not even an explicit nil
func (o *HiveSourceRegistrationParams) UnsetKerberosPrincipal() {
	o.KerberosPrincipal.Unset()
}

func (o HiveSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MetastoreAddress != nil {
		toSerialize["metastoreAddress"] = o.MetastoreAddress
	}
	if o.MetastorePort != nil {
		toSerialize["metastorePort"] = o.MetastorePort
	}
	if o.AuthType.IsSet() {
		toSerialize["authType"] = o.AuthType.Get()
	}
	if true {
		toSerialize["host"] = o.Host
	}
	if true {
		toSerialize["configurationDirectory"] = o.ConfigurationDirectory
	}
	if o.SshPasswordCredentials.IsSet() {
		toSerialize["sshPasswordCredentials"] = o.SshPasswordCredentials.Get()
	}
	if o.SshPrivateKeyCredentials.IsSet() {
		toSerialize["sshPrivateKeyCredentials"] = o.SshPrivateKeyCredentials.Get()
	}
	if true {
		toSerialize["hdfsSourceRegistrationID"] = o.HdfsSourceRegistrationID
	}
	if o.KerberosPrincipal.IsSet() {
		toSerialize["kerberosPrincipal"] = o.KerberosPrincipal.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHiveSourceRegistrationParams struct {
	value *HiveSourceRegistrationParams
	isSet bool
}

func (v NullableHiveSourceRegistrationParams) Get() *HiveSourceRegistrationParams {
	return v.value
}

func (v *NullableHiveSourceRegistrationParams) Set(val *HiveSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableHiveSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableHiveSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHiveSourceRegistrationParams(val *HiveSourceRegistrationParams) *NullableHiveSourceRegistrationParams {
	return &NullableHiveSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableHiveSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHiveSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


