/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// KeystoneAdminParams Specifies administrator credentials of a Keystone.
type KeystoneAdminParams struct {
	// Specifies the administrator domain name.
	Domain NullableString `json:"domain"`
	// Specifies the username of Keystone administrator.
	Username NullableString `json:"username"`
	// Specifies the password of Keystone administrator.
	Password NullableString `json:"password,omitempty"`
}

// NewKeystoneAdminParams instantiates a new KeystoneAdminParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKeystoneAdminParams(domain NullableString, username NullableString) *KeystoneAdminParams {
	this := KeystoneAdminParams{}
	this.Domain = domain
	this.Username = username
	return &this
}

// NewKeystoneAdminParamsWithDefaults instantiates a new KeystoneAdminParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKeystoneAdminParamsWithDefaults() *KeystoneAdminParams {
	this := KeystoneAdminParams{}
	return &this
}

// GetDomain returns the Domain field value
// If the value is explicit nil, the zero value for string will be returned
func (o *KeystoneAdminParams) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}

	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneAdminParams) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// SetDomain sets field value
func (o *KeystoneAdminParams) SetDomain(v string) {
	o.Domain.Set(&v)
}

// GetUsername returns the Username field value
// If the value is explicit nil, the zero value for string will be returned
func (o *KeystoneAdminParams) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}

	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneAdminParams) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// SetUsername sets field value
func (o *KeystoneAdminParams) SetUsername(v string) {
	o.Username.Set(&v)
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KeystoneAdminParams) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KeystoneAdminParams) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *KeystoneAdminParams) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *KeystoneAdminParams) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *KeystoneAdminParams) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *KeystoneAdminParams) UnsetPassword() {
	o.Password.Unset()
}

func (o KeystoneAdminParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["domain"] = o.Domain.Get()
	}
	if true {
		toSerialize["username"] = o.Username.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableKeystoneAdminParams struct {
	value *KeystoneAdminParams
	isSet bool
}

func (v NullableKeystoneAdminParams) Get() *KeystoneAdminParams {
	return v.value
}

func (v *NullableKeystoneAdminParams) Set(val *KeystoneAdminParams) {
	v.value = val
	v.isSet = true
}

func (v NullableKeystoneAdminParams) IsSet() bool {
	return v.isSet
}

func (v *NullableKeystoneAdminParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKeystoneAdminParams(val *KeystoneAdminParams) *NullableKeystoneAdminParams {
	return &NullableKeystoneAdminParams{value: val, isSet: true}
}

func (v NullableKeystoneAdminParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKeystoneAdminParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


