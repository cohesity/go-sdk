/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RegisteredRemoteStorageList Specifies information about registered remote storage servers which are used by cohesity cluster.
type RegisteredRemoteStorageList struct {
	// Specifies the list of registered remote storage info.
	RemoteStorages *[]RemoteStorageInfo `json:"remoteStorages,omitempty"`
}

// NewRegisteredRemoteStorageList instantiates a new RegisteredRemoteStorageList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredRemoteStorageList() *RegisteredRemoteStorageList {
	this := RegisteredRemoteStorageList{}
	return &this
}

// NewRegisteredRemoteStorageListWithDefaults instantiates a new RegisteredRemoteStorageList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredRemoteStorageListWithDefaults() *RegisteredRemoteStorageList {
	this := RegisteredRemoteStorageList{}
	return &this
}

// GetRemoteStorages returns the RemoteStorages field value if set, zero value otherwise.
func (o *RegisteredRemoteStorageList) GetRemoteStorages() []RemoteStorageInfo {
	if o == nil || o.RemoteStorages == nil {
		var ret []RemoteStorageInfo
		return ret
	}
	return *o.RemoteStorages
}

// GetRemoteStoragesOk returns a tuple with the RemoteStorages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisteredRemoteStorageList) GetRemoteStoragesOk() (*[]RemoteStorageInfo, bool) {
	if o == nil || o.RemoteStorages == nil {
		return nil, false
	}
	return o.RemoteStorages, true
}

// HasRemoteStorages returns a boolean if a field has been set.
func (o *RegisteredRemoteStorageList) HasRemoteStorages() bool {
	if o != nil && o.RemoteStorages != nil {
		return true
	}

	return false
}

// SetRemoteStorages gets a reference to the given []RemoteStorageInfo and assigns it to the RemoteStorages field.
func (o *RegisteredRemoteStorageList) SetRemoteStorages(v []RemoteStorageInfo) {
	o.RemoteStorages = &v
}

func (o RegisteredRemoteStorageList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RemoteStorages != nil {
		toSerialize["remoteStorages"] = o.RemoteStorages
	}
	return json.Marshal(toSerialize)
}

type NullableRegisteredRemoteStorageList struct {
	value *RegisteredRemoteStorageList
	isSet bool
}

func (v NullableRegisteredRemoteStorageList) Get() *RegisteredRemoteStorageList {
	return v.value
}

func (v *NullableRegisteredRemoteStorageList) Set(val *RegisteredRemoteStorageList) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredRemoteStorageList) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredRemoteStorageList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredRemoteStorageList(val *RegisteredRemoteStorageList) *NullableRegisteredRemoteStorageList {
	return &NullableRegisteredRemoteStorageList{value: val, isSet: true}
}

func (v NullableRegisteredRemoteStorageList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredRemoteStorageList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


