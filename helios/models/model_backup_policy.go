/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// BackupPolicy Specifies the backup schedule and retentions of a Protection Policy.
type BackupPolicy struct {
	Regular RegularBackupPolicy `json:"regular"`
	Log *LogBackupPolicy `json:"log,omitempty"`
	Bmr *BmrBackupPolicy `json:"bmr,omitempty"`
	Cdp *CdpBackupPolicy `json:"cdp,omitempty"`
}

// NewBackupPolicy instantiates a new BackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBackupPolicy(regular RegularBackupPolicy) *BackupPolicy {
	this := BackupPolicy{}
	this.Regular = regular
	return &this
}

// NewBackupPolicyWithDefaults instantiates a new BackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBackupPolicyWithDefaults() *BackupPolicy {
	this := BackupPolicy{}
	return &this
}

// GetRegular returns the Regular field value
func (o *BackupPolicy) GetRegular() RegularBackupPolicy {
	if o == nil {
		var ret RegularBackupPolicy
		return ret
	}

	return o.Regular
}

// GetRegularOk returns a tuple with the Regular field value
// and a boolean to check if the value has been set.
func (o *BackupPolicy) GetRegularOk() (*RegularBackupPolicy, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Regular, true
}

// SetRegular sets field value
func (o *BackupPolicy) SetRegular(v RegularBackupPolicy) {
	o.Regular = v
}

// GetLog returns the Log field value if set, zero value otherwise.
func (o *BackupPolicy) GetLog() LogBackupPolicy {
	if o == nil || o.Log == nil {
		var ret LogBackupPolicy
		return ret
	}
	return *o.Log
}

// GetLogOk returns a tuple with the Log field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupPolicy) GetLogOk() (*LogBackupPolicy, bool) {
	if o == nil || o.Log == nil {
		return nil, false
	}
	return o.Log, true
}

// HasLog returns a boolean if a field has been set.
func (o *BackupPolicy) HasLog() bool {
	if o != nil && o.Log != nil {
		return true
	}

	return false
}

// SetLog gets a reference to the given LogBackupPolicy and assigns it to the Log field.
func (o *BackupPolicy) SetLog(v LogBackupPolicy) {
	o.Log = &v
}

// GetBmr returns the Bmr field value if set, zero value otherwise.
func (o *BackupPolicy) GetBmr() BmrBackupPolicy {
	if o == nil || o.Bmr == nil {
		var ret BmrBackupPolicy
		return ret
	}
	return *o.Bmr
}

// GetBmrOk returns a tuple with the Bmr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupPolicy) GetBmrOk() (*BmrBackupPolicy, bool) {
	if o == nil || o.Bmr == nil {
		return nil, false
	}
	return o.Bmr, true
}

// HasBmr returns a boolean if a field has been set.
func (o *BackupPolicy) HasBmr() bool {
	if o != nil && o.Bmr != nil {
		return true
	}

	return false
}

// SetBmr gets a reference to the given BmrBackupPolicy and assigns it to the Bmr field.
func (o *BackupPolicy) SetBmr(v BmrBackupPolicy) {
	o.Bmr = &v
}

// GetCdp returns the Cdp field value if set, zero value otherwise.
func (o *BackupPolicy) GetCdp() CdpBackupPolicy {
	if o == nil || o.Cdp == nil {
		var ret CdpBackupPolicy
		return ret
	}
	return *o.Cdp
}

// GetCdpOk returns a tuple with the Cdp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BackupPolicy) GetCdpOk() (*CdpBackupPolicy, bool) {
	if o == nil || o.Cdp == nil {
		return nil, false
	}
	return o.Cdp, true
}

// HasCdp returns a boolean if a field has been set.
func (o *BackupPolicy) HasCdp() bool {
	if o != nil && o.Cdp != nil {
		return true
	}

	return false
}

// SetCdp gets a reference to the given CdpBackupPolicy and assigns it to the Cdp field.
func (o *BackupPolicy) SetCdp(v CdpBackupPolicy) {
	o.Cdp = &v
}

func (o BackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["regular"] = o.Regular
	}
	if o.Log != nil {
		toSerialize["log"] = o.Log
	}
	if o.Bmr != nil {
		toSerialize["bmr"] = o.Bmr
	}
	if o.Cdp != nil {
		toSerialize["cdp"] = o.Cdp
	}
	return json.Marshal(toSerialize)
}

type NullableBackupPolicy struct {
	value *BackupPolicy
	isSet bool
}

func (v NullableBackupPolicy) Get() *BackupPolicy {
	return v.value
}

func (v *NullableBackupPolicy) Set(val *BackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBackupPolicy(val *BackupPolicy) *NullableBackupPolicy {
	return &NullableBackupPolicy{value: val, isSet: true}
}

func (v NullableBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


