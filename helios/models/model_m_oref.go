/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// MOref Specifies the MoRef for a VMware object.
type MOref struct {
	// Unique identifier for the object type.
	Item NullableString `json:"item,omitempty"`
	// Specifies the type of VMware object
	Type NullableString `json:"type,omitempty"`
}

// NewMOref instantiates a new MOref object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMOref() *MOref {
	this := MOref{}
	return &this
}

// NewMOrefWithDefaults instantiates a new MOref object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMOrefWithDefaults() *MOref {
	this := MOref{}
	return &this
}

// GetItem returns the Item field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MOref) GetItem() string {
	if o == nil || o.Item.Get() == nil {
		var ret string
		return ret
	}
	return *o.Item.Get()
}

// GetItemOk returns a tuple with the Item field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MOref) GetItemOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Item.Get(), o.Item.IsSet()
}

// HasItem returns a boolean if a field has been set.
func (o *MOref) HasItem() bool {
	if o != nil && o.Item.IsSet() {
		return true
	}

	return false
}

// SetItem gets a reference to the given NullableString and assigns it to the Item field.
func (o *MOref) SetItem(v string) {
	o.Item.Set(&v)
}
// SetItemNil sets the value for Item to be an explicit nil
func (o *MOref) SetItemNil() {
	o.Item.Set(nil)
}

// UnsetItem ensures that no value is present for Item, not even an explicit nil
func (o *MOref) UnsetItem() {
	o.Item.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MOref) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MOref) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *MOref) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *MOref) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *MOref) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *MOref) UnsetType() {
	o.Type.Unset()
}

func (o MOref) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Item.IsSet() {
		toSerialize["item"] = o.Item.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMOref struct {
	value *MOref
	isSet bool
}

func (v NullableMOref) Get() *MOref {
	return v.value
}

func (v *NullableMOref) Set(val *MOref) {
	v.value = val
	v.isSet = true
}

func (v NullableMOref) IsSet() bool {
	return v.isSet
}

func (v *NullableMOref) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMOref(val *MOref) *NullableMOref {
	return &NullableMOref{value: val, isSet: true}
}

func (v NullableMOref) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMOref) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


