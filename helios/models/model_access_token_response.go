/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// AccessTokenResponse Access token generation response
type AccessTokenResponse struct {
	// Created access token.
	AccessToken NullableString `json:"accessToken,omitempty"`
	// Privileges for the user.
	Privileges *[]string `json:"privileges,omitempty"`
	// Access token type.
	TokenType NullableString `json:"tokenType,omitempty"`
}

// NewAccessTokenResponse instantiates a new AccessTokenResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccessTokenResponse() *AccessTokenResponse {
	this := AccessTokenResponse{}
	return &this
}

// NewAccessTokenResponseWithDefaults instantiates a new AccessTokenResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccessTokenResponseWithDefaults() *AccessTokenResponse {
	this := AccessTokenResponse{}
	return &this
}

// GetAccessToken returns the AccessToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessTokenResponse) GetAccessToken() string {
	if o == nil || o.AccessToken.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccessToken.Get()
}

// GetAccessTokenOk returns a tuple with the AccessToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessTokenResponse) GetAccessTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccessToken.Get(), o.AccessToken.IsSet()
}

// HasAccessToken returns a boolean if a field has been set.
func (o *AccessTokenResponse) HasAccessToken() bool {
	if o != nil && o.AccessToken.IsSet() {
		return true
	}

	return false
}

// SetAccessToken gets a reference to the given NullableString and assigns it to the AccessToken field.
func (o *AccessTokenResponse) SetAccessToken(v string) {
	o.AccessToken.Set(&v)
}
// SetAccessTokenNil sets the value for AccessToken to be an explicit nil
func (o *AccessTokenResponse) SetAccessTokenNil() {
	o.AccessToken.Set(nil)
}

// UnsetAccessToken ensures that no value is present for AccessToken, not even an explicit nil
func (o *AccessTokenResponse) UnsetAccessToken() {
	o.AccessToken.Unset()
}

// GetPrivileges returns the Privileges field value if set, zero value otherwise.
func (o *AccessTokenResponse) GetPrivileges() []string {
	if o == nil || o.Privileges == nil {
		var ret []string
		return ret
	}
	return *o.Privileges
}

// GetPrivilegesOk returns a tuple with the Privileges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccessTokenResponse) GetPrivilegesOk() (*[]string, bool) {
	if o == nil || o.Privileges == nil {
		return nil, false
	}
	return o.Privileges, true
}

// HasPrivileges returns a boolean if a field has been set.
func (o *AccessTokenResponse) HasPrivileges() bool {
	if o != nil && o.Privileges != nil {
		return true
	}

	return false
}

// SetPrivileges gets a reference to the given []string and assigns it to the Privileges field.
func (o *AccessTokenResponse) SetPrivileges(v []string) {
	o.Privileges = &v
}

// GetTokenType returns the TokenType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AccessTokenResponse) GetTokenType() string {
	if o == nil || o.TokenType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TokenType.Get()
}

// GetTokenTypeOk returns a tuple with the TokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AccessTokenResponse) GetTokenTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TokenType.Get(), o.TokenType.IsSet()
}

// HasTokenType returns a boolean if a field has been set.
func (o *AccessTokenResponse) HasTokenType() bool {
	if o != nil && o.TokenType.IsSet() {
		return true
	}

	return false
}

// SetTokenType gets a reference to the given NullableString and assigns it to the TokenType field.
func (o *AccessTokenResponse) SetTokenType(v string) {
	o.TokenType.Set(&v)
}
// SetTokenTypeNil sets the value for TokenType to be an explicit nil
func (o *AccessTokenResponse) SetTokenTypeNil() {
	o.TokenType.Set(nil)
}

// UnsetTokenType ensures that no value is present for TokenType, not even an explicit nil
func (o *AccessTokenResponse) UnsetTokenType() {
	o.TokenType.Unset()
}

func (o AccessTokenResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessToken.IsSet() {
		toSerialize["accessToken"] = o.AccessToken.Get()
	}
	if o.Privileges != nil {
		toSerialize["privileges"] = o.Privileges
	}
	if o.TokenType.IsSet() {
		toSerialize["tokenType"] = o.TokenType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAccessTokenResponse struct {
	value *AccessTokenResponse
	isSet bool
}

func (v NullableAccessTokenResponse) Get() *AccessTokenResponse {
	return v.value
}

func (v *NullableAccessTokenResponse) Set(val *AccessTokenResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableAccessTokenResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableAccessTokenResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccessTokenResponse(val *AccessTokenResponse) *NullableAccessTokenResponse {
	return &NullableAccessTokenResponse{value: val, isSet: true}
}

func (v NullableAccessTokenResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccessTokenResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


