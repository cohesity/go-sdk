/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// FallbackUserIdMappingParams Specifies a fallback param for Unix and Windows users mapping.
type FallbackUserIdMappingParams struct {
	// Specifies the type of the mapping.
	Type string `json:"type"`
	// Specifies the params for Fixed mapping type mapping.
	FixedTypeParams NullableAdFixedTypeParams `json:"fixedTypeParams,omitempty"`
}

// NewFallbackUserIdMappingParams instantiates a new FallbackUserIdMappingParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFallbackUserIdMappingParams(type_ string) *FallbackUserIdMappingParams {
	this := FallbackUserIdMappingParams{}
	this.Type = type_
	return &this
}

// NewFallbackUserIdMappingParamsWithDefaults instantiates a new FallbackUserIdMappingParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFallbackUserIdMappingParamsWithDefaults() *FallbackUserIdMappingParams {
	this := FallbackUserIdMappingParams{}
	return &this
}

// GetType returns the Type field value
func (o *FallbackUserIdMappingParams) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FallbackUserIdMappingParams) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FallbackUserIdMappingParams) SetType(v string) {
	o.Type = v
}

// GetFixedTypeParams returns the FixedTypeParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FallbackUserIdMappingParams) GetFixedTypeParams() AdFixedTypeParams {
	if o == nil || o.FixedTypeParams.Get() == nil {
		var ret AdFixedTypeParams
		return ret
	}
	return *o.FixedTypeParams.Get()
}

// GetFixedTypeParamsOk returns a tuple with the FixedTypeParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FallbackUserIdMappingParams) GetFixedTypeParamsOk() (*AdFixedTypeParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FixedTypeParams.Get(), o.FixedTypeParams.IsSet()
}

// HasFixedTypeParams returns a boolean if a field has been set.
func (o *FallbackUserIdMappingParams) HasFixedTypeParams() bool {
	if o != nil && o.FixedTypeParams.IsSet() {
		return true
	}

	return false
}

// SetFixedTypeParams gets a reference to the given NullableAdFixedTypeParams and assigns it to the FixedTypeParams field.
func (o *FallbackUserIdMappingParams) SetFixedTypeParams(v AdFixedTypeParams) {
	o.FixedTypeParams.Set(&v)
}
// SetFixedTypeParamsNil sets the value for FixedTypeParams to be an explicit nil
func (o *FallbackUserIdMappingParams) SetFixedTypeParamsNil() {
	o.FixedTypeParams.Set(nil)
}

// UnsetFixedTypeParams ensures that no value is present for FixedTypeParams, not even an explicit nil
func (o *FallbackUserIdMappingParams) UnsetFixedTypeParams() {
	o.FixedTypeParams.Unset()
}

func (o FallbackUserIdMappingParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.FixedTypeParams.IsSet() {
		toSerialize["fixedTypeParams"] = o.FixedTypeParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFallbackUserIdMappingParams struct {
	value *FallbackUserIdMappingParams
	isSet bool
}

func (v NullableFallbackUserIdMappingParams) Get() *FallbackUserIdMappingParams {
	return v.value
}

func (v *NullableFallbackUserIdMappingParams) Set(val *FallbackUserIdMappingParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFallbackUserIdMappingParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFallbackUserIdMappingParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFallbackUserIdMappingParams(val *FallbackUserIdMappingParams) *NullableFallbackUserIdMappingParams {
	return &NullableFallbackUserIdMappingParams{value: val, isSet: true}
}

func (v NullableFallbackUserIdMappingParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFallbackUserIdMappingParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


