/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SupportChannelConfig Specifies the support channel configuration.
type SupportChannelConfig struct {
	// Specifies id the support channel is enabled.
	IsEnabled NullableBool `json:"isEnabled"`
	// Specifies the support channel expiry time.
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs"`
}

// NewSupportChannelConfig instantiates a new SupportChannelConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSupportChannelConfig(isEnabled NullableBool, endTimeUsecs NullableInt64) *SupportChannelConfig {
	this := SupportChannelConfig{}
	this.IsEnabled = isEnabled
	this.EndTimeUsecs = endTimeUsecs
	return &this
}

// NewSupportChannelConfigWithDefaults instantiates a new SupportChannelConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSupportChannelConfigWithDefaults() *SupportChannelConfig {
	this := SupportChannelConfig{}
	return &this
}

// GetIsEnabled returns the IsEnabled field value
// If the value is explicit nil, the zero value for bool will be returned
func (o *SupportChannelConfig) GetIsEnabled() bool {
	if o == nil || o.IsEnabled.Get() == nil {
		var ret bool
		return ret
	}

	return *o.IsEnabled.Get()
}

// GetIsEnabledOk returns a tuple with the IsEnabled field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportChannelConfig) GetIsEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsEnabled.Get(), o.IsEnabled.IsSet()
}

// SetIsEnabled sets field value
func (o *SupportChannelConfig) SetIsEnabled(v bool) {
	o.IsEnabled.Set(&v)
}

// GetEndTimeUsecs returns the EndTimeUsecs field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *SupportChannelConfig) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}

	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SupportChannelConfig) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// SetEndTimeUsecs sets field value
func (o *SupportChannelConfig) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}

func (o SupportChannelConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["isEnabled"] = o.IsEnabled.Get()
	}
	if true {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSupportChannelConfig struct {
	value *SupportChannelConfig
	isSet bool
}

func (v NullableSupportChannelConfig) Get() *SupportChannelConfig {
	return v.value
}

func (v *NullableSupportChannelConfig) Set(val *SupportChannelConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSupportChannelConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSupportChannelConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSupportChannelConfig(val *SupportChannelConfig) *NullableSupportChannelConfig {
	return &NullableSupportChannelConfig{value: val, isSet: true}
}

func (v NullableSupportChannelConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSupportChannelConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


