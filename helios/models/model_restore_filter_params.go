/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RestoreFilterParams Specifies the additional filtering params for recoveries.
type RestoreFilterParams struct {
	// Specifies the recovery types to filter recoveries.
	RecoveryTypes []string `json:"recoveryTypes,omitempty"`
}

// NewRestoreFilterParams instantiates a new RestoreFilterParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreFilterParams() *RestoreFilterParams {
	this := RestoreFilterParams{}
	return &this
}

// NewRestoreFilterParamsWithDefaults instantiates a new RestoreFilterParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreFilterParamsWithDefaults() *RestoreFilterParams {
	this := RestoreFilterParams{}
	return &this
}

// GetRecoveryTypes returns the RecoveryTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreFilterParams) GetRecoveryTypes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.RecoveryTypes
}

// GetRecoveryTypesOk returns a tuple with the RecoveryTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreFilterParams) GetRecoveryTypesOk() (*[]string, bool) {
	if o == nil || o.RecoveryTypes == nil {
		return nil, false
	}
	return &o.RecoveryTypes, true
}

// HasRecoveryTypes returns a boolean if a field has been set.
func (o *RestoreFilterParams) HasRecoveryTypes() bool {
	if o != nil && o.RecoveryTypes != nil {
		return true
	}

	return false
}

// SetRecoveryTypes gets a reference to the given []string and assigns it to the RecoveryTypes field.
func (o *RestoreFilterParams) SetRecoveryTypes(v []string) {
	o.RecoveryTypes = v
}

func (o RestoreFilterParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RecoveryTypes != nil {
		toSerialize["recoveryTypes"] = o.RecoveryTypes
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreFilterParams struct {
	value *RestoreFilterParams
	isSet bool
}

func (v NullableRestoreFilterParams) Get() *RestoreFilterParams {
	return v.value
}

func (v *NullableRestoreFilterParams) Set(val *RestoreFilterParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreFilterParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreFilterParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreFilterParams(val *RestoreFilterParams) *NullableRestoreFilterParams {
	return &NullableRestoreFilterParams{value: val, isSet: true}
}

func (v NullableRestoreFilterParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreFilterParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


