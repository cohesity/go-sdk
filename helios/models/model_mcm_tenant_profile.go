/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmTenantProfile Specifies tenant profile.
type McmTenantProfile struct {
	// Specifies the tenant id.
	TenantId NullableString `json:"tenantId"`
	// Specifies the tenant id.
	TenantName NullableString `json:"tenantName,omitempty"`
	// Specifies the type of tenant.
	TenantType NullableString `json:"tenantType"`
	// Specifies the list of clusters owned by this account id.
	Clusters *[]McmClusterIdentifier `json:"clusters,omitempty"`
}

// NewMcmTenantProfile instantiates a new McmTenantProfile object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmTenantProfile(tenantId NullableString, tenantType NullableString) *McmTenantProfile {
	this := McmTenantProfile{}
	this.TenantId = tenantId
	this.TenantType = tenantType
	return &this
}

// NewMcmTenantProfileWithDefaults instantiates a new McmTenantProfile object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmTenantProfileWithDefaults() *McmTenantProfile {
	this := McmTenantProfile{}
	return &this
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *McmTenantProfile) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmTenantProfile) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *McmTenantProfile) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

// GetTenantName returns the TenantName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmTenantProfile) GetTenantName() string {
	if o == nil || o.TenantName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantName.Get()
}

// GetTenantNameOk returns a tuple with the TenantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmTenantProfile) GetTenantNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantName.Get(), o.TenantName.IsSet()
}

// HasTenantName returns a boolean if a field has been set.
func (o *McmTenantProfile) HasTenantName() bool {
	if o != nil && o.TenantName.IsSet() {
		return true
	}

	return false
}

// SetTenantName gets a reference to the given NullableString and assigns it to the TenantName field.
func (o *McmTenantProfile) SetTenantName(v string) {
	o.TenantName.Set(&v)
}
// SetTenantNameNil sets the value for TenantName to be an explicit nil
func (o *McmTenantProfile) SetTenantNameNil() {
	o.TenantName.Set(nil)
}

// UnsetTenantName ensures that no value is present for TenantName, not even an explicit nil
func (o *McmTenantProfile) UnsetTenantName() {
	o.TenantName.Unset()
}

// GetTenantType returns the TenantType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *McmTenantProfile) GetTenantType() string {
	if o == nil || o.TenantType.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantType.Get()
}

// GetTenantTypeOk returns a tuple with the TenantType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmTenantProfile) GetTenantTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantType.Get(), o.TenantType.IsSet()
}

// SetTenantType sets field value
func (o *McmTenantProfile) SetTenantType(v string) {
	o.TenantType.Set(&v)
}

// GetClusters returns the Clusters field value if set, zero value otherwise.
func (o *McmTenantProfile) GetClusters() []McmClusterIdentifier {
	if o == nil || o.Clusters == nil {
		var ret []McmClusterIdentifier
		return ret
	}
	return *o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmTenantProfile) GetClustersOk() (*[]McmClusterIdentifier, bool) {
	if o == nil || o.Clusters == nil {
		return nil, false
	}
	return o.Clusters, true
}

// HasClusters returns a boolean if a field has been set.
func (o *McmTenantProfile) HasClusters() bool {
	if o != nil && o.Clusters != nil {
		return true
	}

	return false
}

// SetClusters gets a reference to the given []McmClusterIdentifier and assigns it to the Clusters field.
func (o *McmTenantProfile) SetClusters(v []McmClusterIdentifier) {
	o.Clusters = &v
}

func (o McmTenantProfile) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.TenantName.IsSet() {
		toSerialize["tenantName"] = o.TenantName.Get()
	}
	if true {
		toSerialize["tenantType"] = o.TenantType.Get()
	}
	if o.Clusters != nil {
		toSerialize["clusters"] = o.Clusters
	}
	return json.Marshal(toSerialize)
}

type NullableMcmTenantProfile struct {
	value *McmTenantProfile
	isSet bool
}

func (v NullableMcmTenantProfile) Get() *McmTenantProfile {
	return v.value
}

func (v *NullableMcmTenantProfile) Set(val *McmTenantProfile) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmTenantProfile) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmTenantProfile) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmTenantProfile(val *McmTenantProfile) *NullableMcmTenantProfile {
	return &NullableMcmTenantProfile{value: val, isSet: true}
}

func (v NullableMcmTenantProfile) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmTenantProfile) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


