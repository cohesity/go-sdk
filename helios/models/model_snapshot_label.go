/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SnapshotLabel Specifies the snapshot label for incremental and full backup of Secondary Netapp volumes (Data-Protect Volumes).
type SnapshotLabel struct {
	// Specifies the incremental snapshot label value
	IncrementalLabel NullableString `json:"incrementalLabel,omitempty"`
	// Specifies the full snapshot label value
	FullLabel NullableString `json:"fullLabel,omitempty"`
}

// NewSnapshotLabel instantiates a new SnapshotLabel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotLabel() *SnapshotLabel {
	this := SnapshotLabel{}
	return &this
}

// NewSnapshotLabelWithDefaults instantiates a new SnapshotLabel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotLabelWithDefaults() *SnapshotLabel {
	this := SnapshotLabel{}
	return &this
}

// GetIncrementalLabel returns the IncrementalLabel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotLabel) GetIncrementalLabel() string {
	if o == nil || o.IncrementalLabel.Get() == nil {
		var ret string
		return ret
	}
	return *o.IncrementalLabel.Get()
}

// GetIncrementalLabelOk returns a tuple with the IncrementalLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotLabel) GetIncrementalLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncrementalLabel.Get(), o.IncrementalLabel.IsSet()
}

// HasIncrementalLabel returns a boolean if a field has been set.
func (o *SnapshotLabel) HasIncrementalLabel() bool {
	if o != nil && o.IncrementalLabel.IsSet() {
		return true
	}

	return false
}

// SetIncrementalLabel gets a reference to the given NullableString and assigns it to the IncrementalLabel field.
func (o *SnapshotLabel) SetIncrementalLabel(v string) {
	o.IncrementalLabel.Set(&v)
}
// SetIncrementalLabelNil sets the value for IncrementalLabel to be an explicit nil
func (o *SnapshotLabel) SetIncrementalLabelNil() {
	o.IncrementalLabel.Set(nil)
}

// UnsetIncrementalLabel ensures that no value is present for IncrementalLabel, not even an explicit nil
func (o *SnapshotLabel) UnsetIncrementalLabel() {
	o.IncrementalLabel.Unset()
}

// GetFullLabel returns the FullLabel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotLabel) GetFullLabel() string {
	if o == nil || o.FullLabel.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullLabel.Get()
}

// GetFullLabelOk returns a tuple with the FullLabel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotLabel) GetFullLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullLabel.Get(), o.FullLabel.IsSet()
}

// HasFullLabel returns a boolean if a field has been set.
func (o *SnapshotLabel) HasFullLabel() bool {
	if o != nil && o.FullLabel.IsSet() {
		return true
	}

	return false
}

// SetFullLabel gets a reference to the given NullableString and assigns it to the FullLabel field.
func (o *SnapshotLabel) SetFullLabel(v string) {
	o.FullLabel.Set(&v)
}
// SetFullLabelNil sets the value for FullLabel to be an explicit nil
func (o *SnapshotLabel) SetFullLabelNil() {
	o.FullLabel.Set(nil)
}

// UnsetFullLabel ensures that no value is present for FullLabel, not even an explicit nil
func (o *SnapshotLabel) UnsetFullLabel() {
	o.FullLabel.Unset()
}

func (o SnapshotLabel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IncrementalLabel.IsSet() {
		toSerialize["incrementalLabel"] = o.IncrementalLabel.Get()
	}
	if o.FullLabel.IsSet() {
		toSerialize["fullLabel"] = o.FullLabel.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotLabel struct {
	value *SnapshotLabel
	isSet bool
}

func (v NullableSnapshotLabel) Get() *SnapshotLabel {
	return v.value
}

func (v *NullableSnapshotLabel) Set(val *SnapshotLabel) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotLabel) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotLabel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotLabel(val *SnapshotLabel) *NullableSnapshotLabel {
	return &NullableSnapshotLabel{value: val, isSet: true}
}

func (v NullableSnapshotLabel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotLabel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


