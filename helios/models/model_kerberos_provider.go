/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// KerberosProvider Specifies the the Kerberos Provider details.
type KerberosProvider struct {
	// Specifies the id.
	Id NullableString `json:"id,omitempty"`
	// Specifies the realm name.
	RealmName NullableString `json:"realmName"`
	// Specifies a list of Key distribution Centre(KDC) Severs.
	KdcServers []string `json:"kdcServers"`
	// Specifies the admin server used for registration from the list of KDC servers.
	AdminServer NullableString `json:"adminServer"`
	// Specifies the LDAP provider id to be mapped
	LdapProviderId NullableInt64 `json:"ldapProviderId,omitempty"`
	// Specifies if specified host alias should overwrite existing host alias.
	OverwritehostAlias NullableBool `json:"overwritehostAlias,omitempty"`
	// Specifies the DNS routable host alias names.
	HostAlias []string `json:"hostAlias"`
}

// NewKerberosProvider instantiates a new KerberosProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewKerberosProvider(realmName NullableString, kdcServers []string, adminServer NullableString, hostAlias []string) *KerberosProvider {
	this := KerberosProvider{}
	this.RealmName = realmName
	this.KdcServers = kdcServers
	this.AdminServer = adminServer
	this.HostAlias = hostAlias
	return &this
}

// NewKerberosProviderWithDefaults instantiates a new KerberosProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewKerberosProviderWithDefaults() *KerberosProvider {
	this := KerberosProvider{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KerberosProvider) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KerberosProvider) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *KerberosProvider) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *KerberosProvider) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *KerberosProvider) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *KerberosProvider) UnsetId() {
	o.Id.Unset()
}

// GetRealmName returns the RealmName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *KerberosProvider) GetRealmName() string {
	if o == nil || o.RealmName.Get() == nil {
		var ret string
		return ret
	}

	return *o.RealmName.Get()
}

// GetRealmNameOk returns a tuple with the RealmName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KerberosProvider) GetRealmNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RealmName.Get(), o.RealmName.IsSet()
}

// SetRealmName sets field value
func (o *KerberosProvider) SetRealmName(v string) {
	o.RealmName.Set(&v)
}

// GetKdcServers returns the KdcServers field value
func (o *KerberosProvider) GetKdcServers() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.KdcServers
}

// GetKdcServersOk returns a tuple with the KdcServers field value
// and a boolean to check if the value has been set.
func (o *KerberosProvider) GetKdcServersOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.KdcServers, true
}

// SetKdcServers sets field value
func (o *KerberosProvider) SetKdcServers(v []string) {
	o.KdcServers = v
}

// GetAdminServer returns the AdminServer field value
// If the value is explicit nil, the zero value for string will be returned
func (o *KerberosProvider) GetAdminServer() string {
	if o == nil || o.AdminServer.Get() == nil {
		var ret string
		return ret
	}

	return *o.AdminServer.Get()
}

// GetAdminServerOk returns a tuple with the AdminServer field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KerberosProvider) GetAdminServerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AdminServer.Get(), o.AdminServer.IsSet()
}

// SetAdminServer sets field value
func (o *KerberosProvider) SetAdminServer(v string) {
	o.AdminServer.Set(&v)
}

// GetLdapProviderId returns the LdapProviderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KerberosProvider) GetLdapProviderId() int64 {
	if o == nil || o.LdapProviderId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LdapProviderId.Get()
}

// GetLdapProviderIdOk returns a tuple with the LdapProviderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KerberosProvider) GetLdapProviderIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LdapProviderId.Get(), o.LdapProviderId.IsSet()
}

// HasLdapProviderId returns a boolean if a field has been set.
func (o *KerberosProvider) HasLdapProviderId() bool {
	if o != nil && o.LdapProviderId.IsSet() {
		return true
	}

	return false
}

// SetLdapProviderId gets a reference to the given NullableInt64 and assigns it to the LdapProviderId field.
func (o *KerberosProvider) SetLdapProviderId(v int64) {
	o.LdapProviderId.Set(&v)
}
// SetLdapProviderIdNil sets the value for LdapProviderId to be an explicit nil
func (o *KerberosProvider) SetLdapProviderIdNil() {
	o.LdapProviderId.Set(nil)
}

// UnsetLdapProviderId ensures that no value is present for LdapProviderId, not even an explicit nil
func (o *KerberosProvider) UnsetLdapProviderId() {
	o.LdapProviderId.Unset()
}

// GetOverwritehostAlias returns the OverwritehostAlias field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *KerberosProvider) GetOverwritehostAlias() bool {
	if o == nil || o.OverwritehostAlias.Get() == nil {
		var ret bool
		return ret
	}
	return *o.OverwritehostAlias.Get()
}

// GetOverwritehostAliasOk returns a tuple with the OverwritehostAlias field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *KerberosProvider) GetOverwritehostAliasOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OverwritehostAlias.Get(), o.OverwritehostAlias.IsSet()
}

// HasOverwritehostAlias returns a boolean if a field has been set.
func (o *KerberosProvider) HasOverwritehostAlias() bool {
	if o != nil && o.OverwritehostAlias.IsSet() {
		return true
	}

	return false
}

// SetOverwritehostAlias gets a reference to the given NullableBool and assigns it to the OverwritehostAlias field.
func (o *KerberosProvider) SetOverwritehostAlias(v bool) {
	o.OverwritehostAlias.Set(&v)
}
// SetOverwritehostAliasNil sets the value for OverwritehostAlias to be an explicit nil
func (o *KerberosProvider) SetOverwritehostAliasNil() {
	o.OverwritehostAlias.Set(nil)
}

// UnsetOverwritehostAlias ensures that no value is present for OverwritehostAlias, not even an explicit nil
func (o *KerberosProvider) UnsetOverwritehostAlias() {
	o.OverwritehostAlias.Unset()
}

// GetHostAlias returns the HostAlias field value
func (o *KerberosProvider) GetHostAlias() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.HostAlias
}

// GetHostAliasOk returns a tuple with the HostAlias field value
// and a boolean to check if the value has been set.
func (o *KerberosProvider) GetHostAliasOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.HostAlias, true
}

// SetHostAlias sets field value
func (o *KerberosProvider) SetHostAlias(v []string) {
	o.HostAlias = v
}

func (o KerberosProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if true {
		toSerialize["realmName"] = o.RealmName.Get()
	}
	if true {
		toSerialize["kdcServers"] = o.KdcServers
	}
	if true {
		toSerialize["adminServer"] = o.AdminServer.Get()
	}
	if o.LdapProviderId.IsSet() {
		toSerialize["ldapProviderId"] = o.LdapProviderId.Get()
	}
	if o.OverwritehostAlias.IsSet() {
		toSerialize["overwritehostAlias"] = o.OverwritehostAlias.Get()
	}
	if true {
		toSerialize["hostAlias"] = o.HostAlias
	}
	return json.Marshal(toSerialize)
}

type NullableKerberosProvider struct {
	value *KerberosProvider
	isSet bool
}

func (v NullableKerberosProvider) Get() *KerberosProvider {
	return v.value
}

func (v *NullableKerberosProvider) Set(val *KerberosProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableKerberosProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableKerberosProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableKerberosProvider(val *KerberosProvider) *NullableKerberosProvider {
	return &NullableKerberosProvider{value: val, isSet: true}
}

func (v NullableKerberosProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableKerberosProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


