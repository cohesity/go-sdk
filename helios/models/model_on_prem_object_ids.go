/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// OnPremObjectIds List of source ids for a cluster.
type OnPremObjectIds struct {
	// Specifies a list of object ids. Only files found in these objects will be returned.
	ObjectIds []int64 `json:"objectIds,omitempty"`
}

// NewOnPremObjectIds instantiates a new OnPremObjectIds object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOnPremObjectIds() *OnPremObjectIds {
	this := OnPremObjectIds{}
	return &this
}

// NewOnPremObjectIdsWithDefaults instantiates a new OnPremObjectIds object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOnPremObjectIdsWithDefaults() *OnPremObjectIds {
	this := OnPremObjectIds{}
	return &this
}

// GetObjectIds returns the ObjectIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OnPremObjectIds) GetObjectIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ObjectIds
}

// GetObjectIdsOk returns a tuple with the ObjectIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OnPremObjectIds) GetObjectIdsOk() (*[]int64, bool) {
	if o == nil || o.ObjectIds == nil {
		return nil, false
	}
	return &o.ObjectIds, true
}

// HasObjectIds returns a boolean if a field has been set.
func (o *OnPremObjectIds) HasObjectIds() bool {
	if o != nil && o.ObjectIds != nil {
		return true
	}

	return false
}

// SetObjectIds gets a reference to the given []int64 and assigns it to the ObjectIds field.
func (o *OnPremObjectIds) SetObjectIds(v []int64) {
	o.ObjectIds = v
}

func (o OnPremObjectIds) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectIds != nil {
		toSerialize["objectIds"] = o.ObjectIds
	}
	return json.Marshal(toSerialize)
}

type NullableOnPremObjectIds struct {
	value *OnPremObjectIds
	isSet bool
}

func (v NullableOnPremObjectIds) Get() *OnPremObjectIds {
	return v.value
}

func (v *NullableOnPremObjectIds) Set(val *OnPremObjectIds) {
	v.value = val
	v.isSet = true
}

func (v NullableOnPremObjectIds) IsSet() bool {
	return v.isSet
}

func (v *NullableOnPremObjectIds) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOnPremObjectIds(val *OnPremObjectIds) *NullableOnPremObjectIds {
	return &NullableOnPremObjectIds{value: val, isSet: true}
}

func (v NullableOnPremObjectIds) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOnPremObjectIds) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


