/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RegularBackupPolicy Specifies the Incremental and Full policy settings and also the common Retention policy settings.\"
type RegularBackupPolicy struct {
	Incremental *IncrementalBackupPolicy `json:"incremental,omitempty"`
	Full *FullBackupPolicy `json:"full,omitempty"`
	Retention Retention `json:"retention"`
	PrimaryBackupTarget *PrimaryBackupTarget `json:"primaryBackupTarget,omitempty"`
}

// NewRegularBackupPolicy instantiates a new RegularBackupPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegularBackupPolicy(retention Retention) *RegularBackupPolicy {
	this := RegularBackupPolicy{}
	this.Retention = retention
	return &this
}

// NewRegularBackupPolicyWithDefaults instantiates a new RegularBackupPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegularBackupPolicyWithDefaults() *RegularBackupPolicy {
	this := RegularBackupPolicy{}
	return &this
}

// GetIncremental returns the Incremental field value if set, zero value otherwise.
func (o *RegularBackupPolicy) GetIncremental() IncrementalBackupPolicy {
	if o == nil || o.Incremental == nil {
		var ret IncrementalBackupPolicy
		return ret
	}
	return *o.Incremental
}

// GetIncrementalOk returns a tuple with the Incremental field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegularBackupPolicy) GetIncrementalOk() (*IncrementalBackupPolicy, bool) {
	if o == nil || o.Incremental == nil {
		return nil, false
	}
	return o.Incremental, true
}

// HasIncremental returns a boolean if a field has been set.
func (o *RegularBackupPolicy) HasIncremental() bool {
	if o != nil && o.Incremental != nil {
		return true
	}

	return false
}

// SetIncremental gets a reference to the given IncrementalBackupPolicy and assigns it to the Incremental field.
func (o *RegularBackupPolicy) SetIncremental(v IncrementalBackupPolicy) {
	o.Incremental = &v
}

// GetFull returns the Full field value if set, zero value otherwise.
func (o *RegularBackupPolicy) GetFull() FullBackupPolicy {
	if o == nil || o.Full == nil {
		var ret FullBackupPolicy
		return ret
	}
	return *o.Full
}

// GetFullOk returns a tuple with the Full field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegularBackupPolicy) GetFullOk() (*FullBackupPolicy, bool) {
	if o == nil || o.Full == nil {
		return nil, false
	}
	return o.Full, true
}

// HasFull returns a boolean if a field has been set.
func (o *RegularBackupPolicy) HasFull() bool {
	if o != nil && o.Full != nil {
		return true
	}

	return false
}

// SetFull gets a reference to the given FullBackupPolicy and assigns it to the Full field.
func (o *RegularBackupPolicy) SetFull(v FullBackupPolicy) {
	o.Full = &v
}

// GetRetention returns the Retention field value
func (o *RegularBackupPolicy) GetRetention() Retention {
	if o == nil {
		var ret Retention
		return ret
	}

	return o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *RegularBackupPolicy) GetRetentionOk() (*Retention, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Retention, true
}

// SetRetention sets field value
func (o *RegularBackupPolicy) SetRetention(v Retention) {
	o.Retention = v
}

// GetPrimaryBackupTarget returns the PrimaryBackupTarget field value if set, zero value otherwise.
func (o *RegularBackupPolicy) GetPrimaryBackupTarget() PrimaryBackupTarget {
	if o == nil || o.PrimaryBackupTarget == nil {
		var ret PrimaryBackupTarget
		return ret
	}
	return *o.PrimaryBackupTarget
}

// GetPrimaryBackupTargetOk returns a tuple with the PrimaryBackupTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegularBackupPolicy) GetPrimaryBackupTargetOk() (*PrimaryBackupTarget, bool) {
	if o == nil || o.PrimaryBackupTarget == nil {
		return nil, false
	}
	return o.PrimaryBackupTarget, true
}

// HasPrimaryBackupTarget returns a boolean if a field has been set.
func (o *RegularBackupPolicy) HasPrimaryBackupTarget() bool {
	if o != nil && o.PrimaryBackupTarget != nil {
		return true
	}

	return false
}

// SetPrimaryBackupTarget gets a reference to the given PrimaryBackupTarget and assigns it to the PrimaryBackupTarget field.
func (o *RegularBackupPolicy) SetPrimaryBackupTarget(v PrimaryBackupTarget) {
	o.PrimaryBackupTarget = &v
}

func (o RegularBackupPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Incremental != nil {
		toSerialize["incremental"] = o.Incremental
	}
	if o.Full != nil {
		toSerialize["full"] = o.Full
	}
	if true {
		toSerialize["retention"] = o.Retention
	}
	if o.PrimaryBackupTarget != nil {
		toSerialize["primaryBackupTarget"] = o.PrimaryBackupTarget
	}
	return json.Marshal(toSerialize)
}

type NullableRegularBackupPolicy struct {
	value *RegularBackupPolicy
	isSet bool
}

func (v NullableRegularBackupPolicy) Get() *RegularBackupPolicy {
	return v.value
}

func (v *NullableRegularBackupPolicy) Set(val *RegularBackupPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableRegularBackupPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableRegularBackupPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegularBackupPolicy(val *RegularBackupPolicy) *NullableRegularBackupPolicy {
	return &NullableRegularBackupPolicy{value: val, isSet: true}
}

func (v NullableRegularBackupPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegularBackupPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


