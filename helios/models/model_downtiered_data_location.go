/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// DowntieredDataLocation Specifies a map between source Id and the corresponding viewName and mount path, where the source was downtiered.
type DowntieredDataLocation struct {
	// Specifies the ID of the object.
	Id NullableInt64 `json:"id"`
	// Specifies the view name.
	ViewName NullableString `json:"viewName"`
	// Specifies the mount path inside the view.
	MountPath NullableString `json:"mountPath,omitempty"`
}

// NewDowntieredDataLocation instantiates a new DowntieredDataLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDowntieredDataLocation(id NullableInt64, viewName NullableString) *DowntieredDataLocation {
	this := DowntieredDataLocation{}
	this.Id = id
	this.ViewName = viewName
	return &this
}

// NewDowntieredDataLocationWithDefaults instantiates a new DowntieredDataLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDowntieredDataLocationWithDefaults() *DowntieredDataLocation {
	this := DowntieredDataLocation{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *DowntieredDataLocation) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieredDataLocation) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *DowntieredDataLocation) SetId(v int64) {
	o.Id.Set(&v)
}

// GetViewName returns the ViewName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DowntieredDataLocation) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}

	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieredDataLocation) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// SetViewName sets field value
func (o *DowntieredDataLocation) SetViewName(v string) {
	o.ViewName.Set(&v)
}

// GetMountPath returns the MountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DowntieredDataLocation) GetMountPath() string {
	if o == nil || o.MountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.MountPath.Get()
}

// GetMountPathOk returns a tuple with the MountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DowntieredDataLocation) GetMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountPath.Get(), o.MountPath.IsSet()
}

// HasMountPath returns a boolean if a field has been set.
func (o *DowntieredDataLocation) HasMountPath() bool {
	if o != nil && o.MountPath.IsSet() {
		return true
	}

	return false
}

// SetMountPath gets a reference to the given NullableString and assigns it to the MountPath field.
func (o *DowntieredDataLocation) SetMountPath(v string) {
	o.MountPath.Set(&v)
}
// SetMountPathNil sets the value for MountPath to be an explicit nil
func (o *DowntieredDataLocation) SetMountPathNil() {
	o.MountPath.Set(nil)
}

// UnsetMountPath ensures that no value is present for MountPath, not even an explicit nil
func (o *DowntieredDataLocation) UnsetMountPath() {
	o.MountPath.Unset()
}

func (o DowntieredDataLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id.Get()
	}
	if true {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	if o.MountPath.IsSet() {
		toSerialize["mountPath"] = o.MountPath.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDowntieredDataLocation struct {
	value *DowntieredDataLocation
	isSet bool
}

func (v NullableDowntieredDataLocation) Get() *DowntieredDataLocation {
	return v.value
}

func (v *NullableDowntieredDataLocation) Set(val *DowntieredDataLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableDowntieredDataLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableDowntieredDataLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDowntieredDataLocation(val *DowntieredDataLocation) *NullableDowntieredDataLocation {
	return &NullableDowntieredDataLocation{value: val, isSet: true}
}

func (v NullableDowntieredDataLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDowntieredDataLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


