/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// MongoDbOnPremSearchParams Parameters required to search Mongo DB on a cluster.
type MongoDbOnPremSearchParams struct {
	// Specifies the search string to search the MongoDB Objects
	SearchString NullableString `json:"searchString"`
	// Specifies one or more MongoDB object types be searched.
	MongoDBObjectTypes []string `json:"mongoDBObjectTypes"`
	// Specifies a list of source ids. Only files found in these sources will be returned.
	SourceIds []int64 `json:"sourceIds,omitempty"`
}

// NewMongoDbOnPremSearchParams instantiates a new MongoDbOnPremSearchParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDbOnPremSearchParams(searchString NullableString, mongoDBObjectTypes []string) *MongoDbOnPremSearchParams {
	this := MongoDbOnPremSearchParams{}
	this.SearchString = searchString
	this.MongoDBObjectTypes = mongoDBObjectTypes
	return &this
}

// NewMongoDbOnPremSearchParamsWithDefaults instantiates a new MongoDbOnPremSearchParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDbOnPremSearchParamsWithDefaults() *MongoDbOnPremSearchParams {
	this := MongoDbOnPremSearchParams{}
	return &this
}

// GetSearchString returns the SearchString field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MongoDbOnPremSearchParams) GetSearchString() string {
	if o == nil || o.SearchString.Get() == nil {
		var ret string
		return ret
	}

	return *o.SearchString.Get()
}

// GetSearchStringOk returns a tuple with the SearchString field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDbOnPremSearchParams) GetSearchStringOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SearchString.Get(), o.SearchString.IsSet()
}

// SetSearchString sets field value
func (o *MongoDbOnPremSearchParams) SetSearchString(v string) {
	o.SearchString.Set(&v)
}

// GetMongoDBObjectTypes returns the MongoDBObjectTypes field value
func (o *MongoDbOnPremSearchParams) GetMongoDBObjectTypes() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.MongoDBObjectTypes
}

// GetMongoDBObjectTypesOk returns a tuple with the MongoDBObjectTypes field value
// and a boolean to check if the value has been set.
func (o *MongoDbOnPremSearchParams) GetMongoDBObjectTypesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MongoDBObjectTypes, true
}

// SetMongoDBObjectTypes sets field value
func (o *MongoDbOnPremSearchParams) SetMongoDBObjectTypes(v []string) {
	o.MongoDBObjectTypes = v
}

// GetSourceIds returns the SourceIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDbOnPremSearchParams) GetSourceIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.SourceIds
}

// GetSourceIdsOk returns a tuple with the SourceIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDbOnPremSearchParams) GetSourceIdsOk() (*[]int64, bool) {
	if o == nil || o.SourceIds == nil {
		return nil, false
	}
	return &o.SourceIds, true
}

// HasSourceIds returns a boolean if a field has been set.
func (o *MongoDbOnPremSearchParams) HasSourceIds() bool {
	if o != nil && o.SourceIds != nil {
		return true
	}

	return false
}

// SetSourceIds gets a reference to the given []int64 and assigns it to the SourceIds field.
func (o *MongoDbOnPremSearchParams) SetSourceIds(v []int64) {
	o.SourceIds = v
}

func (o MongoDbOnPremSearchParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["searchString"] = o.SearchString.Get()
	}
	if true {
		toSerialize["mongoDBObjectTypes"] = o.MongoDBObjectTypes
	}
	if o.SourceIds != nil {
		toSerialize["sourceIds"] = o.SourceIds
	}
	return json.Marshal(toSerialize)
}

type NullableMongoDbOnPremSearchParams struct {
	value *MongoDbOnPremSearchParams
	isSet bool
}

func (v NullableMongoDbOnPremSearchParams) Get() *MongoDbOnPremSearchParams {
	return v.value
}

func (v *NullableMongoDbOnPremSearchParams) Set(val *MongoDbOnPremSearchParams) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDbOnPremSearchParams) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDbOnPremSearchParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDbOnPremSearchParams(val *MongoDbOnPremSearchParams) *NullableMongoDbOnPremSearchParams {
	return &NullableMongoDbOnPremSearchParams{value: val, isSet: true}
}

func (v NullableMongoDbOnPremSearchParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDbOnPremSearchParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


