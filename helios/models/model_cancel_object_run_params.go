/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CancelObjectRunParams One object run to cancel.
type CancelObjectRunParams struct {
	// Specifies the id of the run to cancel.
	RunId NullableString `json:"runId"`
	// Specifies whether to cancel the local backup run. Default is false.
	CancelLocalRun NullableBool `json:"cancelLocalRun,omitempty"`
	// Specifies the archival target ids where the tasks run. If specified, the archival target ids must be present within the run specified by the runId above.
	ArchivalTargetIds []int64 `json:"archivalTargetIds,omitempty"`
	// Specifies the cluster identifiers where the tasks run. If specified, the archival target ids must be present within the run specified by the runId above.
	ReplicationTargets []ClusterIdentifier `json:"replicationTargets,omitempty"`
	// Specifies the cloud spin target ids where the tasks run. If specified, the archival target ids must be present within the run specified by the runId above.
	CloudSpinTargetIds []int64 `json:"cloudSpinTargetIds,omitempty"`
}

// NewCancelObjectRunParams instantiates a new CancelObjectRunParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelObjectRunParams(runId NullableString) *CancelObjectRunParams {
	this := CancelObjectRunParams{}
	this.RunId = runId
	return &this
}

// NewCancelObjectRunParamsWithDefaults instantiates a new CancelObjectRunParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelObjectRunParamsWithDefaults() *CancelObjectRunParams {
	this := CancelObjectRunParams{}
	return &this
}

// GetRunId returns the RunId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CancelObjectRunParams) GetRunId() string {
	if o == nil || o.RunId.Get() == nil {
		var ret string
		return ret
	}

	return *o.RunId.Get()
}

// GetRunIdOk returns a tuple with the RunId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunParams) GetRunIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunId.Get(), o.RunId.IsSet()
}

// SetRunId sets field value
func (o *CancelObjectRunParams) SetRunId(v string) {
	o.RunId.Set(&v)
}

// GetCancelLocalRun returns the CancelLocalRun field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancelObjectRunParams) GetCancelLocalRun() bool {
	if o == nil || o.CancelLocalRun.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CancelLocalRun.Get()
}

// GetCancelLocalRunOk returns a tuple with the CancelLocalRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunParams) GetCancelLocalRunOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CancelLocalRun.Get(), o.CancelLocalRun.IsSet()
}

// HasCancelLocalRun returns a boolean if a field has been set.
func (o *CancelObjectRunParams) HasCancelLocalRun() bool {
	if o != nil && o.CancelLocalRun.IsSet() {
		return true
	}

	return false
}

// SetCancelLocalRun gets a reference to the given NullableBool and assigns it to the CancelLocalRun field.
func (o *CancelObjectRunParams) SetCancelLocalRun(v bool) {
	o.CancelLocalRun.Set(&v)
}
// SetCancelLocalRunNil sets the value for CancelLocalRun to be an explicit nil
func (o *CancelObjectRunParams) SetCancelLocalRunNil() {
	o.CancelLocalRun.Set(nil)
}

// UnsetCancelLocalRun ensures that no value is present for CancelLocalRun, not even an explicit nil
func (o *CancelObjectRunParams) UnsetCancelLocalRun() {
	o.CancelLocalRun.Unset()
}

// GetArchivalTargetIds returns the ArchivalTargetIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancelObjectRunParams) GetArchivalTargetIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ArchivalTargetIds
}

// GetArchivalTargetIdsOk returns a tuple with the ArchivalTargetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunParams) GetArchivalTargetIdsOk() (*[]int64, bool) {
	if o == nil || o.ArchivalTargetIds == nil {
		return nil, false
	}
	return &o.ArchivalTargetIds, true
}

// HasArchivalTargetIds returns a boolean if a field has been set.
func (o *CancelObjectRunParams) HasArchivalTargetIds() bool {
	if o != nil && o.ArchivalTargetIds != nil {
		return true
	}

	return false
}

// SetArchivalTargetIds gets a reference to the given []int64 and assigns it to the ArchivalTargetIds field.
func (o *CancelObjectRunParams) SetArchivalTargetIds(v []int64) {
	o.ArchivalTargetIds = v
}

// GetReplicationTargets returns the ReplicationTargets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancelObjectRunParams) GetReplicationTargets() []ClusterIdentifier {
	if o == nil  {
		var ret []ClusterIdentifier
		return ret
	}
	return o.ReplicationTargets
}

// GetReplicationTargetsOk returns a tuple with the ReplicationTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunParams) GetReplicationTargetsOk() (*[]ClusterIdentifier, bool) {
	if o == nil || o.ReplicationTargets == nil {
		return nil, false
	}
	return &o.ReplicationTargets, true
}

// HasReplicationTargets returns a boolean if a field has been set.
func (o *CancelObjectRunParams) HasReplicationTargets() bool {
	if o != nil && o.ReplicationTargets != nil {
		return true
	}

	return false
}

// SetReplicationTargets gets a reference to the given []ClusterIdentifier and assigns it to the ReplicationTargets field.
func (o *CancelObjectRunParams) SetReplicationTargets(v []ClusterIdentifier) {
	o.ReplicationTargets = v
}

// GetCloudSpinTargetIds returns the CloudSpinTargetIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancelObjectRunParams) GetCloudSpinTargetIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.CloudSpinTargetIds
}

// GetCloudSpinTargetIdsOk returns a tuple with the CloudSpinTargetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunParams) GetCloudSpinTargetIdsOk() (*[]int64, bool) {
	if o == nil || o.CloudSpinTargetIds == nil {
		return nil, false
	}
	return &o.CloudSpinTargetIds, true
}

// HasCloudSpinTargetIds returns a boolean if a field has been set.
func (o *CancelObjectRunParams) HasCloudSpinTargetIds() bool {
	if o != nil && o.CloudSpinTargetIds != nil {
		return true
	}

	return false
}

// SetCloudSpinTargetIds gets a reference to the given []int64 and assigns it to the CloudSpinTargetIds field.
func (o *CancelObjectRunParams) SetCloudSpinTargetIds(v []int64) {
	o.CloudSpinTargetIds = v
}

func (o CancelObjectRunParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["runId"] = o.RunId.Get()
	}
	if o.CancelLocalRun.IsSet() {
		toSerialize["cancelLocalRun"] = o.CancelLocalRun.Get()
	}
	if o.ArchivalTargetIds != nil {
		toSerialize["archivalTargetIds"] = o.ArchivalTargetIds
	}
	if o.ReplicationTargets != nil {
		toSerialize["replicationTargets"] = o.ReplicationTargets
	}
	if o.CloudSpinTargetIds != nil {
		toSerialize["cloudSpinTargetIds"] = o.CloudSpinTargetIds
	}
	return json.Marshal(toSerialize)
}

type NullableCancelObjectRunParams struct {
	value *CancelObjectRunParams
	isSet bool
}

func (v NullableCancelObjectRunParams) Get() *CancelObjectRunParams {
	return v.value
}

func (v *NullableCancelObjectRunParams) Set(val *CancelObjectRunParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelObjectRunParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelObjectRunParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelObjectRunParams(val *CancelObjectRunParams) *NullableCancelObjectRunParams {
	return &NullableCancelObjectRunParams{value: val, isSet: true}
}

func (v NullableCancelObjectRunParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelObjectRunParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


