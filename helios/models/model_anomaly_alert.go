/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// AnomalyAlert Specifies the anomaly alert threshold.
type AnomalyAlert struct {
	NotificationInfo *NotificationInfo `json:"notificationInfo,omitempty"`
}

// NewAnomalyAlert instantiates a new AnomalyAlert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAnomalyAlert() *AnomalyAlert {
	this := AnomalyAlert{}
	return &this
}

// NewAnomalyAlertWithDefaults instantiates a new AnomalyAlert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAnomalyAlertWithDefaults() *AnomalyAlert {
	this := AnomalyAlert{}
	return &this
}

// GetNotificationInfo returns the NotificationInfo field value if set, zero value otherwise.
func (o *AnomalyAlert) GetNotificationInfo() NotificationInfo {
	if o == nil || o.NotificationInfo == nil {
		var ret NotificationInfo
		return ret
	}
	return *o.NotificationInfo
}

// GetNotificationInfoOk returns a tuple with the NotificationInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AnomalyAlert) GetNotificationInfoOk() (*NotificationInfo, bool) {
	if o == nil || o.NotificationInfo == nil {
		return nil, false
	}
	return o.NotificationInfo, true
}

// HasNotificationInfo returns a boolean if a field has been set.
func (o *AnomalyAlert) HasNotificationInfo() bool {
	if o != nil && o.NotificationInfo != nil {
		return true
	}

	return false
}

// SetNotificationInfo gets a reference to the given NotificationInfo and assigns it to the NotificationInfo field.
func (o *AnomalyAlert) SetNotificationInfo(v NotificationInfo) {
	o.NotificationInfo = &v
}

func (o AnomalyAlert) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NotificationInfo != nil {
		toSerialize["notificationInfo"] = o.NotificationInfo
	}
	return json.Marshal(toSerialize)
}

type NullableAnomalyAlert struct {
	value *AnomalyAlert
	isSet bool
}

func (v NullableAnomalyAlert) Get() *AnomalyAlert {
	return v.value
}

func (v *NullableAnomalyAlert) Set(val *AnomalyAlert) {
	v.value = val
	v.isSet = true
}

func (v NullableAnomalyAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableAnomalyAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAnomalyAlert(val *AnomalyAlert) *NullableAnomalyAlert {
	return &NullableAnomalyAlert{value: val, isSet: true}
}

func (v NullableAnomalyAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAnomalyAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


