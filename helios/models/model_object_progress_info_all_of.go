/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ObjectProgressInfoAllOf struct for ObjectProgressInfoAllOf
type ObjectProgressInfoAllOf struct {
	// Specifies progress for failed attempts of this object.
	FailedAttempts []ProgressTaskInfo `json:"failedAttempts,omitempty"`
}

// NewObjectProgressInfoAllOf instantiates a new ObjectProgressInfoAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectProgressInfoAllOf() *ObjectProgressInfoAllOf {
	this := ObjectProgressInfoAllOf{}
	return &this
}

// NewObjectProgressInfoAllOfWithDefaults instantiates a new ObjectProgressInfoAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectProgressInfoAllOfWithDefaults() *ObjectProgressInfoAllOf {
	this := ObjectProgressInfoAllOf{}
	return &this
}

// GetFailedAttempts returns the FailedAttempts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObjectProgressInfoAllOf) GetFailedAttempts() []ProgressTaskInfo {
	if o == nil  {
		var ret []ProgressTaskInfo
		return ret
	}
	return o.FailedAttempts
}

// GetFailedAttemptsOk returns a tuple with the FailedAttempts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObjectProgressInfoAllOf) GetFailedAttemptsOk() (*[]ProgressTaskInfo, bool) {
	if o == nil || o.FailedAttempts == nil {
		return nil, false
	}
	return &o.FailedAttempts, true
}

// HasFailedAttempts returns a boolean if a field has been set.
func (o *ObjectProgressInfoAllOf) HasFailedAttempts() bool {
	if o != nil && o.FailedAttempts != nil {
		return true
	}

	return false
}

// SetFailedAttempts gets a reference to the given []ProgressTaskInfo and assigns it to the FailedAttempts field.
func (o *ObjectProgressInfoAllOf) SetFailedAttempts(v []ProgressTaskInfo) {
	o.FailedAttempts = v
}

func (o ObjectProgressInfoAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FailedAttempts != nil {
		toSerialize["failedAttempts"] = o.FailedAttempts
	}
	return json.Marshal(toSerialize)
}

type NullableObjectProgressInfoAllOf struct {
	value *ObjectProgressInfoAllOf
	isSet bool
}

func (v NullableObjectProgressInfoAllOf) Get() *ObjectProgressInfoAllOf {
	return v.value
}

func (v *NullableObjectProgressInfoAllOf) Set(val *ObjectProgressInfoAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectProgressInfoAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectProgressInfoAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectProgressInfoAllOf(val *ObjectProgressInfoAllOf) *NullableObjectProgressInfoAllOf {
	return &NullableObjectProgressInfoAllOf{value: val, isSet: true}
}

func (v NullableObjectProgressInfoAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectProgressInfoAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


