/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// AwsAuroraRecoveryTargetConfig Specifies the target object parameters to recover AWS Aurora.
type AwsAuroraRecoveryTargetConfig struct {
	// Specifies the parameter whether the recovery should be performed to a new or an existing Source Target.
	RecoverToNewSource bool `json:"recoverToNewSource"`
	// Specifies the new destination Source configuration parameters where the Aurora instances will be recovered. This is mandatory if recoverToNewSource is set to true.
	NewSourceConfig NullableRecoverAwsAuroraNewSourceConfig `json:"newSourceConfig,omitempty"`
}

// NewAwsAuroraRecoveryTargetConfig instantiates a new AwsAuroraRecoveryTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsAuroraRecoveryTargetConfig(recoverToNewSource bool) *AwsAuroraRecoveryTargetConfig {
	this := AwsAuroraRecoveryTargetConfig{}
	this.RecoverToNewSource = recoverToNewSource
	return &this
}

// NewAwsAuroraRecoveryTargetConfigWithDefaults instantiates a new AwsAuroraRecoveryTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsAuroraRecoveryTargetConfigWithDefaults() *AwsAuroraRecoveryTargetConfig {
	this := AwsAuroraRecoveryTargetConfig{}
	return &this
}

// GetRecoverToNewSource returns the RecoverToNewSource field value
func (o *AwsAuroraRecoveryTargetConfig) GetRecoverToNewSource() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.RecoverToNewSource
}

// GetRecoverToNewSourceOk returns a tuple with the RecoverToNewSource field value
// and a boolean to check if the value has been set.
func (o *AwsAuroraRecoveryTargetConfig) GetRecoverToNewSourceOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.RecoverToNewSource, true
}

// SetRecoverToNewSource sets field value
func (o *AwsAuroraRecoveryTargetConfig) SetRecoverToNewSource(v bool) {
	o.RecoverToNewSource = v
}

// GetNewSourceConfig returns the NewSourceConfig field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AwsAuroraRecoveryTargetConfig) GetNewSourceConfig() RecoverAwsAuroraNewSourceConfig {
	if o == nil || o.NewSourceConfig.Get() == nil {
		var ret RecoverAwsAuroraNewSourceConfig
		return ret
	}
	return *o.NewSourceConfig.Get()
}

// GetNewSourceConfigOk returns a tuple with the NewSourceConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AwsAuroraRecoveryTargetConfig) GetNewSourceConfigOk() (*RecoverAwsAuroraNewSourceConfig, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewSourceConfig.Get(), o.NewSourceConfig.IsSet()
}

// HasNewSourceConfig returns a boolean if a field has been set.
func (o *AwsAuroraRecoveryTargetConfig) HasNewSourceConfig() bool {
	if o != nil && o.NewSourceConfig.IsSet() {
		return true
	}

	return false
}

// SetNewSourceConfig gets a reference to the given NullableRecoverAwsAuroraNewSourceConfig and assigns it to the NewSourceConfig field.
func (o *AwsAuroraRecoveryTargetConfig) SetNewSourceConfig(v RecoverAwsAuroraNewSourceConfig) {
	o.NewSourceConfig.Set(&v)
}
// SetNewSourceConfigNil sets the value for NewSourceConfig to be an explicit nil
func (o *AwsAuroraRecoveryTargetConfig) SetNewSourceConfigNil() {
	o.NewSourceConfig.Set(nil)
}

// UnsetNewSourceConfig ensures that no value is present for NewSourceConfig, not even an explicit nil
func (o *AwsAuroraRecoveryTargetConfig) UnsetNewSourceConfig() {
	o.NewSourceConfig.Unset()
}

func (o AwsAuroraRecoveryTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["recoverToNewSource"] = o.RecoverToNewSource
	}
	if o.NewSourceConfig.IsSet() {
		toSerialize["newSourceConfig"] = o.NewSourceConfig.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAwsAuroraRecoveryTargetConfig struct {
	value *AwsAuroraRecoveryTargetConfig
	isSet bool
}

func (v NullableAwsAuroraRecoveryTargetConfig) Get() *AwsAuroraRecoveryTargetConfig {
	return v.value
}

func (v *NullableAwsAuroraRecoveryTargetConfig) Set(val *AwsAuroraRecoveryTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsAuroraRecoveryTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsAuroraRecoveryTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsAuroraRecoveryTargetConfig(val *AwsAuroraRecoveryTargetConfig) *NullableAwsAuroraRecoveryTargetConfig {
	return &NullableAwsAuroraRecoveryTargetConfig{value: val, isSet: true}
}

func (v NullableAwsAuroraRecoveryTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsAuroraRecoveryTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


