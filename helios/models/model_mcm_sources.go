/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmSources Specifies the list of Protection Sources on Helios MCM.
type McmSources struct {
	// Specifies the list of Protection Sources.
	Sources []McmSource `json:"sources,omitempty"`
}

// NewMcmSources instantiates a new McmSources object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmSources() *McmSources {
	this := McmSources{}
	return &this
}

// NewMcmSourcesWithDefaults instantiates a new McmSources object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmSourcesWithDefaults() *McmSources {
	this := McmSources{}
	return &this
}

// GetSources returns the Sources field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmSources) GetSources() []McmSource {
	if o == nil  {
		var ret []McmSource
		return ret
	}
	return o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmSources) GetSourcesOk() (*[]McmSource, bool) {
	if o == nil || o.Sources == nil {
		return nil, false
	}
	return &o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *McmSources) HasSources() bool {
	if o != nil && o.Sources != nil {
		return true
	}

	return false
}

// SetSources gets a reference to the given []McmSource and assigns it to the Sources field.
func (o *McmSources) SetSources(v []McmSource) {
	o.Sources = v
}

func (o McmSources) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	return json.Marshal(toSerialize)
}

type NullableMcmSources struct {
	value *McmSources
	isSet bool
}

func (v NullableMcmSources) Get() *McmSources {
	return v.value
}

func (v *NullableMcmSources) Set(val *McmSources) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmSources) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmSources) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmSources(val *McmSources) *NullableMcmSources {
	return &NullableMcmSources{value: val, isSet: true}
}

func (v NullableMcmSources) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmSources) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


