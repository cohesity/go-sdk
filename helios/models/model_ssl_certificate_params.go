/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SslCertificateParams Specifies the parameters of an SSL Certificate.
type SslCertificateParams struct {
	// Specifies an SSL Certificate.
	SslCertificate NullableString `json:"sslCertificate,omitempty"`
}

// NewSslCertificateParams instantiates a new SslCertificateParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslCertificateParams() *SslCertificateParams {
	this := SslCertificateParams{}
	return &this
}

// NewSslCertificateParamsWithDefaults instantiates a new SslCertificateParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslCertificateParamsWithDefaults() *SslCertificateParams {
	this := SslCertificateParams{}
	return &this
}

// GetSslCertificate returns the SslCertificate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SslCertificateParams) GetSslCertificate() string {
	if o == nil || o.SslCertificate.Get() == nil {
		var ret string
		return ret
	}
	return *o.SslCertificate.Get()
}

// GetSslCertificateOk returns a tuple with the SslCertificate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SslCertificateParams) GetSslCertificateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SslCertificate.Get(), o.SslCertificate.IsSet()
}

// HasSslCertificate returns a boolean if a field has been set.
func (o *SslCertificateParams) HasSslCertificate() bool {
	if o != nil && o.SslCertificate.IsSet() {
		return true
	}

	return false
}

// SetSslCertificate gets a reference to the given NullableString and assigns it to the SslCertificate field.
func (o *SslCertificateParams) SetSslCertificate(v string) {
	o.SslCertificate.Set(&v)
}
// SetSslCertificateNil sets the value for SslCertificate to be an explicit nil
func (o *SslCertificateParams) SetSslCertificateNil() {
	o.SslCertificate.Set(nil)
}

// UnsetSslCertificate ensures that no value is present for SslCertificate, not even an explicit nil
func (o *SslCertificateParams) UnsetSslCertificate() {
	o.SslCertificate.Unset()
}

func (o SslCertificateParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SslCertificate.IsSet() {
		toSerialize["sslCertificate"] = o.SslCertificate.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSslCertificateParams struct {
	value *SslCertificateParams
	isSet bool
}

func (v NullableSslCertificateParams) Get() *SslCertificateParams {
	return v.value
}

func (v *NullableSslCertificateParams) Set(val *SslCertificateParams) {
	v.value = val
	v.isSet = true
}

func (v NullableSslCertificateParams) IsSet() bool {
	return v.isSet
}

func (v *NullableSslCertificateParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslCertificateParams(val *SslCertificateParams) *NullableSslCertificateParams {
	return &NullableSslCertificateParams{value: val, isSet: true}
}

func (v NullableSslCertificateParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslCertificateParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


