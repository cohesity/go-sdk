/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// UsersDiscoveryParams Specifies discovery params for kUser entities. It should only be populated when the 'DiscoveryParams.discoverableObjectTypeList' includes 'kUsers'.
type UsersDiscoveryParams struct {
	// Specifies if office 365 users with valid mailboxes should be discovered or not.
	DiscoverUsersWithMailbox NullableBool `json:"discoverUsersWithMailbox,omitempty"`
	// Specifies if office 365 users with valid Onedrives should be discovered or not.
	DiscoverUsersWithOnedrive NullableBool `json:"discoverUsersWithOnedrive,omitempty"`
}

// NewUsersDiscoveryParams instantiates a new UsersDiscoveryParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsersDiscoveryParams() *UsersDiscoveryParams {
	this := UsersDiscoveryParams{}
	return &this
}

// NewUsersDiscoveryParamsWithDefaults instantiates a new UsersDiscoveryParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsersDiscoveryParamsWithDefaults() *UsersDiscoveryParams {
	this := UsersDiscoveryParams{}
	return &this
}

// GetDiscoverUsersWithMailbox returns the DiscoverUsersWithMailbox field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersDiscoveryParams) GetDiscoverUsersWithMailbox() bool {
	if o == nil || o.DiscoverUsersWithMailbox.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DiscoverUsersWithMailbox.Get()
}

// GetDiscoverUsersWithMailboxOk returns a tuple with the DiscoverUsersWithMailbox field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersDiscoveryParams) GetDiscoverUsersWithMailboxOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiscoverUsersWithMailbox.Get(), o.DiscoverUsersWithMailbox.IsSet()
}

// HasDiscoverUsersWithMailbox returns a boolean if a field has been set.
func (o *UsersDiscoveryParams) HasDiscoverUsersWithMailbox() bool {
	if o != nil && o.DiscoverUsersWithMailbox.IsSet() {
		return true
	}

	return false
}

// SetDiscoverUsersWithMailbox gets a reference to the given NullableBool and assigns it to the DiscoverUsersWithMailbox field.
func (o *UsersDiscoveryParams) SetDiscoverUsersWithMailbox(v bool) {
	o.DiscoverUsersWithMailbox.Set(&v)
}
// SetDiscoverUsersWithMailboxNil sets the value for DiscoverUsersWithMailbox to be an explicit nil
func (o *UsersDiscoveryParams) SetDiscoverUsersWithMailboxNil() {
	o.DiscoverUsersWithMailbox.Set(nil)
}

// UnsetDiscoverUsersWithMailbox ensures that no value is present for DiscoverUsersWithMailbox, not even an explicit nil
func (o *UsersDiscoveryParams) UnsetDiscoverUsersWithMailbox() {
	o.DiscoverUsersWithMailbox.Unset()
}

// GetDiscoverUsersWithOnedrive returns the DiscoverUsersWithOnedrive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UsersDiscoveryParams) GetDiscoverUsersWithOnedrive() bool {
	if o == nil || o.DiscoverUsersWithOnedrive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DiscoverUsersWithOnedrive.Get()
}

// GetDiscoverUsersWithOnedriveOk returns a tuple with the DiscoverUsersWithOnedrive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UsersDiscoveryParams) GetDiscoverUsersWithOnedriveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DiscoverUsersWithOnedrive.Get(), o.DiscoverUsersWithOnedrive.IsSet()
}

// HasDiscoverUsersWithOnedrive returns a boolean if a field has been set.
func (o *UsersDiscoveryParams) HasDiscoverUsersWithOnedrive() bool {
	if o != nil && o.DiscoverUsersWithOnedrive.IsSet() {
		return true
	}

	return false
}

// SetDiscoverUsersWithOnedrive gets a reference to the given NullableBool and assigns it to the DiscoverUsersWithOnedrive field.
func (o *UsersDiscoveryParams) SetDiscoverUsersWithOnedrive(v bool) {
	o.DiscoverUsersWithOnedrive.Set(&v)
}
// SetDiscoverUsersWithOnedriveNil sets the value for DiscoverUsersWithOnedrive to be an explicit nil
func (o *UsersDiscoveryParams) SetDiscoverUsersWithOnedriveNil() {
	o.DiscoverUsersWithOnedrive.Set(nil)
}

// UnsetDiscoverUsersWithOnedrive ensures that no value is present for DiscoverUsersWithOnedrive, not even an explicit nil
func (o *UsersDiscoveryParams) UnsetDiscoverUsersWithOnedrive() {
	o.DiscoverUsersWithOnedrive.Unset()
}

func (o UsersDiscoveryParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiscoverUsersWithMailbox.IsSet() {
		toSerialize["discoverUsersWithMailbox"] = o.DiscoverUsersWithMailbox.Get()
	}
	if o.DiscoverUsersWithOnedrive.IsSet() {
		toSerialize["discoverUsersWithOnedrive"] = o.DiscoverUsersWithOnedrive.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUsersDiscoveryParams struct {
	value *UsersDiscoveryParams
	isSet bool
}

func (v NullableUsersDiscoveryParams) Get() *UsersDiscoveryParams {
	return v.value
}

func (v *NullableUsersDiscoveryParams) Set(val *UsersDiscoveryParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUsersDiscoveryParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUsersDiscoveryParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsersDiscoveryParams(val *UsersDiscoveryParams) *NullableUsersDiscoveryParams {
	return &NullableUsersDiscoveryParams{value: val, isSet: true}
}

func (v NullableUsersDiscoveryParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsersDiscoveryParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


