/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RigelClaimLogs Specifies the Rigel claim logs.
type RigelClaimLogs struct {
	// Specifies Rigel claim logs.
	RigelClaimLogs []RigelClaimLog `json:"rigelClaimLogs,omitempty"`
}

// NewRigelClaimLogs instantiates a new RigelClaimLogs object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRigelClaimLogs() *RigelClaimLogs {
	this := RigelClaimLogs{}
	return &this
}

// NewRigelClaimLogsWithDefaults instantiates a new RigelClaimLogs object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRigelClaimLogsWithDefaults() *RigelClaimLogs {
	this := RigelClaimLogs{}
	return &this
}

// GetRigelClaimLogs returns the RigelClaimLogs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelClaimLogs) GetRigelClaimLogs() []RigelClaimLog {
	if o == nil  {
		var ret []RigelClaimLog
		return ret
	}
	return o.RigelClaimLogs
}

// GetRigelClaimLogsOk returns a tuple with the RigelClaimLogs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelClaimLogs) GetRigelClaimLogsOk() (*[]RigelClaimLog, bool) {
	if o == nil || o.RigelClaimLogs == nil {
		return nil, false
	}
	return &o.RigelClaimLogs, true
}

// HasRigelClaimLogs returns a boolean if a field has been set.
func (o *RigelClaimLogs) HasRigelClaimLogs() bool {
	if o != nil && o.RigelClaimLogs != nil {
		return true
	}

	return false
}

// SetRigelClaimLogs gets a reference to the given []RigelClaimLog and assigns it to the RigelClaimLogs field.
func (o *RigelClaimLogs) SetRigelClaimLogs(v []RigelClaimLog) {
	o.RigelClaimLogs = v
}

func (o RigelClaimLogs) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RigelClaimLogs != nil {
		toSerialize["rigelClaimLogs"] = o.RigelClaimLogs
	}
	return json.Marshal(toSerialize)
}

type NullableRigelClaimLogs struct {
	value *RigelClaimLogs
	isSet bool
}

func (v NullableRigelClaimLogs) Get() *RigelClaimLogs {
	return v.value
}

func (v *NullableRigelClaimLogs) Set(val *RigelClaimLogs) {
	v.value = val
	v.isSet = true
}

func (v NullableRigelClaimLogs) IsSet() bool {
	return v.isSet
}

func (v *NullableRigelClaimLogs) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRigelClaimLogs(val *RigelClaimLogs) *NullableRigelClaimLogs {
	return &NullableRigelClaimLogs{value: val, isSet: true}
}

func (v NullableRigelClaimLogs) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRigelClaimLogs) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


