/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// NfsConfig Specifies the NFS config settings for this View.
type NfsConfig struct {
	// If set, it enables discovery of view for NFS.
	EnableNfsViewDiscovery NullableBool `json:"enableNfsViewDiscovery,omitempty"`
	// Specifies the NFS all squash config.
	NfsAllSquash *NfsSquash `json:"nfsAllSquash,omitempty"`
	// Specifies the NFS root permission config of the view file system.
	NfsRootPermissions *NfsRootPermissions `json:"nfsRootPermissions,omitempty"`
	// Specifies the NFS root squash config.
	NfsRootSquash *NfsSquash `json:"nfsRootSquash,omitempty"`
	// If set, it enables NFS UNIX Authentication
	EnableNfsUnixAuthentication NullableBool `json:"enableNfsUnixAuthentication,omitempty"`
	// If set, it enables NFS Kerberos Authentication
	EnableNfsKerberosAuthentication NullableBool `json:"enableNfsKerberosAuthentication,omitempty"`
	// If set, it enables NFS Kerberos Integrity
	EnableNfsKerberosIntegrity NullableBool `json:"enableNfsKerberosIntegrity,omitempty"`
	// If set, it enables NFS Kerberos Privacy
	EnableNfsKerberosPrivacy NullableBool `json:"enableNfsKerberosPrivacy,omitempty"`
}

// NewNfsConfig instantiates a new NfsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNfsConfig() *NfsConfig {
	this := NfsConfig{}
	return &this
}

// NewNfsConfigWithDefaults instantiates a new NfsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNfsConfigWithDefaults() *NfsConfig {
	this := NfsConfig{}
	return &this
}

// GetEnableNfsViewDiscovery returns the EnableNfsViewDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NfsConfig) GetEnableNfsViewDiscovery() bool {
	if o == nil || o.EnableNfsViewDiscovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsViewDiscovery.Get()
}

// GetEnableNfsViewDiscoveryOk returns a tuple with the EnableNfsViewDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsConfig) GetEnableNfsViewDiscoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsViewDiscovery.Get(), o.EnableNfsViewDiscovery.IsSet()
}

// HasEnableNfsViewDiscovery returns a boolean if a field has been set.
func (o *NfsConfig) HasEnableNfsViewDiscovery() bool {
	if o != nil && o.EnableNfsViewDiscovery.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsViewDiscovery gets a reference to the given NullableBool and assigns it to the EnableNfsViewDiscovery field.
func (o *NfsConfig) SetEnableNfsViewDiscovery(v bool) {
	o.EnableNfsViewDiscovery.Set(&v)
}
// SetEnableNfsViewDiscoveryNil sets the value for EnableNfsViewDiscovery to be an explicit nil
func (o *NfsConfig) SetEnableNfsViewDiscoveryNil() {
	o.EnableNfsViewDiscovery.Set(nil)
}

// UnsetEnableNfsViewDiscovery ensures that no value is present for EnableNfsViewDiscovery, not even an explicit nil
func (o *NfsConfig) UnsetEnableNfsViewDiscovery() {
	o.EnableNfsViewDiscovery.Unset()
}

// GetNfsAllSquash returns the NfsAllSquash field value if set, zero value otherwise.
func (o *NfsConfig) GetNfsAllSquash() NfsSquash {
	if o == nil || o.NfsAllSquash == nil {
		var ret NfsSquash
		return ret
	}
	return *o.NfsAllSquash
}

// GetNfsAllSquashOk returns a tuple with the NfsAllSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsConfig) GetNfsAllSquashOk() (*NfsSquash, bool) {
	if o == nil || o.NfsAllSquash == nil {
		return nil, false
	}
	return o.NfsAllSquash, true
}

// HasNfsAllSquash returns a boolean if a field has been set.
func (o *NfsConfig) HasNfsAllSquash() bool {
	if o != nil && o.NfsAllSquash != nil {
		return true
	}

	return false
}

// SetNfsAllSquash gets a reference to the given NfsSquash and assigns it to the NfsAllSquash field.
func (o *NfsConfig) SetNfsAllSquash(v NfsSquash) {
	o.NfsAllSquash = &v
}

// GetNfsRootPermissions returns the NfsRootPermissions field value if set, zero value otherwise.
func (o *NfsConfig) GetNfsRootPermissions() NfsRootPermissions {
	if o == nil || o.NfsRootPermissions == nil {
		var ret NfsRootPermissions
		return ret
	}
	return *o.NfsRootPermissions
}

// GetNfsRootPermissionsOk returns a tuple with the NfsRootPermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsConfig) GetNfsRootPermissionsOk() (*NfsRootPermissions, bool) {
	if o == nil || o.NfsRootPermissions == nil {
		return nil, false
	}
	return o.NfsRootPermissions, true
}

// HasNfsRootPermissions returns a boolean if a field has been set.
func (o *NfsConfig) HasNfsRootPermissions() bool {
	if o != nil && o.NfsRootPermissions != nil {
		return true
	}

	return false
}

// SetNfsRootPermissions gets a reference to the given NfsRootPermissions and assigns it to the NfsRootPermissions field.
func (o *NfsConfig) SetNfsRootPermissions(v NfsRootPermissions) {
	o.NfsRootPermissions = &v
}

// GetNfsRootSquash returns the NfsRootSquash field value if set, zero value otherwise.
func (o *NfsConfig) GetNfsRootSquash() NfsSquash {
	if o == nil || o.NfsRootSquash == nil {
		var ret NfsSquash
		return ret
	}
	return *o.NfsRootSquash
}

// GetNfsRootSquashOk returns a tuple with the NfsRootSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NfsConfig) GetNfsRootSquashOk() (*NfsSquash, bool) {
	if o == nil || o.NfsRootSquash == nil {
		return nil, false
	}
	return o.NfsRootSquash, true
}

// HasNfsRootSquash returns a boolean if a field has been set.
func (o *NfsConfig) HasNfsRootSquash() bool {
	if o != nil && o.NfsRootSquash != nil {
		return true
	}

	return false
}

// SetNfsRootSquash gets a reference to the given NfsSquash and assigns it to the NfsRootSquash field.
func (o *NfsConfig) SetNfsRootSquash(v NfsSquash) {
	o.NfsRootSquash = &v
}

// GetEnableNfsUnixAuthentication returns the EnableNfsUnixAuthentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NfsConfig) GetEnableNfsUnixAuthentication() bool {
	if o == nil || o.EnableNfsUnixAuthentication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsUnixAuthentication.Get()
}

// GetEnableNfsUnixAuthenticationOk returns a tuple with the EnableNfsUnixAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsConfig) GetEnableNfsUnixAuthenticationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsUnixAuthentication.Get(), o.EnableNfsUnixAuthentication.IsSet()
}

// HasEnableNfsUnixAuthentication returns a boolean if a field has been set.
func (o *NfsConfig) HasEnableNfsUnixAuthentication() bool {
	if o != nil && o.EnableNfsUnixAuthentication.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsUnixAuthentication gets a reference to the given NullableBool and assigns it to the EnableNfsUnixAuthentication field.
func (o *NfsConfig) SetEnableNfsUnixAuthentication(v bool) {
	o.EnableNfsUnixAuthentication.Set(&v)
}
// SetEnableNfsUnixAuthenticationNil sets the value for EnableNfsUnixAuthentication to be an explicit nil
func (o *NfsConfig) SetEnableNfsUnixAuthenticationNil() {
	o.EnableNfsUnixAuthentication.Set(nil)
}

// UnsetEnableNfsUnixAuthentication ensures that no value is present for EnableNfsUnixAuthentication, not even an explicit nil
func (o *NfsConfig) UnsetEnableNfsUnixAuthentication() {
	o.EnableNfsUnixAuthentication.Unset()
}

// GetEnableNfsKerberosAuthentication returns the EnableNfsKerberosAuthentication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NfsConfig) GetEnableNfsKerberosAuthentication() bool {
	if o == nil || o.EnableNfsKerberosAuthentication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsKerberosAuthentication.Get()
}

// GetEnableNfsKerberosAuthenticationOk returns a tuple with the EnableNfsKerberosAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsConfig) GetEnableNfsKerberosAuthenticationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsKerberosAuthentication.Get(), o.EnableNfsKerberosAuthentication.IsSet()
}

// HasEnableNfsKerberosAuthentication returns a boolean if a field has been set.
func (o *NfsConfig) HasEnableNfsKerberosAuthentication() bool {
	if o != nil && o.EnableNfsKerberosAuthentication.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsKerberosAuthentication gets a reference to the given NullableBool and assigns it to the EnableNfsKerberosAuthentication field.
func (o *NfsConfig) SetEnableNfsKerberosAuthentication(v bool) {
	o.EnableNfsKerberosAuthentication.Set(&v)
}
// SetEnableNfsKerberosAuthenticationNil sets the value for EnableNfsKerberosAuthentication to be an explicit nil
func (o *NfsConfig) SetEnableNfsKerberosAuthenticationNil() {
	o.EnableNfsKerberosAuthentication.Set(nil)
}

// UnsetEnableNfsKerberosAuthentication ensures that no value is present for EnableNfsKerberosAuthentication, not even an explicit nil
func (o *NfsConfig) UnsetEnableNfsKerberosAuthentication() {
	o.EnableNfsKerberosAuthentication.Unset()
}

// GetEnableNfsKerberosIntegrity returns the EnableNfsKerberosIntegrity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NfsConfig) GetEnableNfsKerberosIntegrity() bool {
	if o == nil || o.EnableNfsKerberosIntegrity.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsKerberosIntegrity.Get()
}

// GetEnableNfsKerberosIntegrityOk returns a tuple with the EnableNfsKerberosIntegrity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsConfig) GetEnableNfsKerberosIntegrityOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsKerberosIntegrity.Get(), o.EnableNfsKerberosIntegrity.IsSet()
}

// HasEnableNfsKerberosIntegrity returns a boolean if a field has been set.
func (o *NfsConfig) HasEnableNfsKerberosIntegrity() bool {
	if o != nil && o.EnableNfsKerberosIntegrity.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsKerberosIntegrity gets a reference to the given NullableBool and assigns it to the EnableNfsKerberosIntegrity field.
func (o *NfsConfig) SetEnableNfsKerberosIntegrity(v bool) {
	o.EnableNfsKerberosIntegrity.Set(&v)
}
// SetEnableNfsKerberosIntegrityNil sets the value for EnableNfsKerberosIntegrity to be an explicit nil
func (o *NfsConfig) SetEnableNfsKerberosIntegrityNil() {
	o.EnableNfsKerberosIntegrity.Set(nil)
}

// UnsetEnableNfsKerberosIntegrity ensures that no value is present for EnableNfsKerberosIntegrity, not even an explicit nil
func (o *NfsConfig) UnsetEnableNfsKerberosIntegrity() {
	o.EnableNfsKerberosIntegrity.Unset()
}

// GetEnableNfsKerberosPrivacy returns the EnableNfsKerberosPrivacy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NfsConfig) GetEnableNfsKerberosPrivacy() bool {
	if o == nil || o.EnableNfsKerberosPrivacy.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableNfsKerberosPrivacy.Get()
}

// GetEnableNfsKerberosPrivacyOk returns a tuple with the EnableNfsKerberosPrivacy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NfsConfig) GetEnableNfsKerberosPrivacyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableNfsKerberosPrivacy.Get(), o.EnableNfsKerberosPrivacy.IsSet()
}

// HasEnableNfsKerberosPrivacy returns a boolean if a field has been set.
func (o *NfsConfig) HasEnableNfsKerberosPrivacy() bool {
	if o != nil && o.EnableNfsKerberosPrivacy.IsSet() {
		return true
	}

	return false
}

// SetEnableNfsKerberosPrivacy gets a reference to the given NullableBool and assigns it to the EnableNfsKerberosPrivacy field.
func (o *NfsConfig) SetEnableNfsKerberosPrivacy(v bool) {
	o.EnableNfsKerberosPrivacy.Set(&v)
}
// SetEnableNfsKerberosPrivacyNil sets the value for EnableNfsKerberosPrivacy to be an explicit nil
func (o *NfsConfig) SetEnableNfsKerberosPrivacyNil() {
	o.EnableNfsKerberosPrivacy.Set(nil)
}

// UnsetEnableNfsKerberosPrivacy ensures that no value is present for EnableNfsKerberosPrivacy, not even an explicit nil
func (o *NfsConfig) UnsetEnableNfsKerberosPrivacy() {
	o.EnableNfsKerberosPrivacy.Unset()
}

func (o NfsConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableNfsViewDiscovery.IsSet() {
		toSerialize["enableNfsViewDiscovery"] = o.EnableNfsViewDiscovery.Get()
	}
	if o.NfsAllSquash != nil {
		toSerialize["nfsAllSquash"] = o.NfsAllSquash
	}
	if o.NfsRootPermissions != nil {
		toSerialize["nfsRootPermissions"] = o.NfsRootPermissions
	}
	if o.NfsRootSquash != nil {
		toSerialize["nfsRootSquash"] = o.NfsRootSquash
	}
	if o.EnableNfsUnixAuthentication.IsSet() {
		toSerialize["enableNfsUnixAuthentication"] = o.EnableNfsUnixAuthentication.Get()
	}
	if o.EnableNfsKerberosAuthentication.IsSet() {
		toSerialize["enableNfsKerberosAuthentication"] = o.EnableNfsKerberosAuthentication.Get()
	}
	if o.EnableNfsKerberosIntegrity.IsSet() {
		toSerialize["enableNfsKerberosIntegrity"] = o.EnableNfsKerberosIntegrity.Get()
	}
	if o.EnableNfsKerberosPrivacy.IsSet() {
		toSerialize["enableNfsKerberosPrivacy"] = o.EnableNfsKerberosPrivacy.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNfsConfig struct {
	value *NfsConfig
	isSet bool
}

func (v NullableNfsConfig) Get() *NfsConfig {
	return v.value
}

func (v *NullableNfsConfig) Set(val *NfsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableNfsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableNfsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNfsConfig(val *NfsConfig) *NullableNfsConfig {
	return &NullableNfsConfig{value: val, isSet: true}
}

func (v NullableNfsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNfsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


