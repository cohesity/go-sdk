/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// TenantAccess Specifies the Tenant Access.
type TenantAccess struct {
	// Specifies the Tenant Id of the tenant access.
	TenantId NullableString `json:"tenantId"`
	// Specifies a list of roles associated with this access.
	Roles []string `json:"roles"`
	// Specifies the list of clusters accessible by this access.
	Clusters []McmClusterIdentifier `json:"clusters"`
	// Specifies the timestamp in milliseconds since the epoch when this access was created.
	CreatedTimeMsecs NullableInt64 `json:"createdTimeMsecs,omitempty"`
	// Specifies the timestamp in milliseconds since the epoch when this access was updated.
	LastUpdatedTimeMsecs NullableInt64 `json:"lastUpdatedTimeMsecs,omitempty"`
	// Specifies whether or not this access is currently active.
	IsAccessActive NullableBool `json:"isAccessActive,omitempty"`
	// Specifies the starting timestamp in milliseconds since the epoch when this access will be able allowed.
	EffectiveTimeMsecs NullableInt64 `json:"effectiveTimeMsecs,omitempty"`
	// Specifies the timestamp in milliseconds since the epoch when this access will no longer be allowed.
	ExpiredTimeMsecs NullableInt64 `json:"expiredTimeMsecs,omitempty"`
	// Name of the Tenant.
	TenantName NullableString `json:"tenantName,omitempty"`
	// Specifies the Tenant status.
	TenantStatus NullableString `json:"tenantStatus,omitempty"`
	// Specifies the type of the tenant.
	TenantType NullableString `json:"tenantType,omitempty"`
}

// NewTenantAccess instantiates a new TenantAccess object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantAccess(tenantId NullableString, roles []string, clusters []McmClusterIdentifier) *TenantAccess {
	this := TenantAccess{}
	this.TenantId = tenantId
	this.Roles = roles
	this.Clusters = clusters
	return &this
}

// NewTenantAccessWithDefaults instantiates a new TenantAccess object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantAccessWithDefaults() *TenantAccess {
	this := TenantAccess{}
	return &this
}

// GetTenantId returns the TenantId field value
// If the value is explicit nil, the zero value for string will be returned
func (o *TenantAccess) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}

	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAccess) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// SetTenantId sets field value
func (o *TenantAccess) SetTenantId(v string) {
	o.TenantId.Set(&v)
}

// GetRoles returns the Roles field value
func (o *TenantAccess) GetRoles() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value
// and a boolean to check if the value has been set.
func (o *TenantAccess) GetRolesOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Roles, true
}

// SetRoles sets field value
func (o *TenantAccess) SetRoles(v []string) {
	o.Roles = v
}

// GetClusters returns the Clusters field value
func (o *TenantAccess) GetClusters() []McmClusterIdentifier {
	if o == nil {
		var ret []McmClusterIdentifier
		return ret
	}

	return o.Clusters
}

// GetClustersOk returns a tuple with the Clusters field value
// and a boolean to check if the value has been set.
func (o *TenantAccess) GetClustersOk() (*[]McmClusterIdentifier, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Clusters, true
}

// SetClusters sets field value
func (o *TenantAccess) SetClusters(v []McmClusterIdentifier) {
	o.Clusters = v
}

// GetCreatedTimeMsecs returns the CreatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAccess) GetCreatedTimeMsecs() int64 {
	if o == nil || o.CreatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedTimeMsecs.Get()
}

// GetCreatedTimeMsecsOk returns a tuple with the CreatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAccess) GetCreatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedTimeMsecs.Get(), o.CreatedTimeMsecs.IsSet()
}

// HasCreatedTimeMsecs returns a boolean if a field has been set.
func (o *TenantAccess) HasCreatedTimeMsecs() bool {
	if o != nil && o.CreatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetCreatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the CreatedTimeMsecs field.
func (o *TenantAccess) SetCreatedTimeMsecs(v int64) {
	o.CreatedTimeMsecs.Set(&v)
}
// SetCreatedTimeMsecsNil sets the value for CreatedTimeMsecs to be an explicit nil
func (o *TenantAccess) SetCreatedTimeMsecsNil() {
	o.CreatedTimeMsecs.Set(nil)
}

// UnsetCreatedTimeMsecs ensures that no value is present for CreatedTimeMsecs, not even an explicit nil
func (o *TenantAccess) UnsetCreatedTimeMsecs() {
	o.CreatedTimeMsecs.Unset()
}

// GetLastUpdatedTimeMsecs returns the LastUpdatedTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAccess) GetLastUpdatedTimeMsecs() int64 {
	if o == nil || o.LastUpdatedTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastUpdatedTimeMsecs.Get()
}

// GetLastUpdatedTimeMsecsOk returns a tuple with the LastUpdatedTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAccess) GetLastUpdatedTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastUpdatedTimeMsecs.Get(), o.LastUpdatedTimeMsecs.IsSet()
}

// HasLastUpdatedTimeMsecs returns a boolean if a field has been set.
func (o *TenantAccess) HasLastUpdatedTimeMsecs() bool {
	if o != nil && o.LastUpdatedTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetLastUpdatedTimeMsecs gets a reference to the given NullableInt64 and assigns it to the LastUpdatedTimeMsecs field.
func (o *TenantAccess) SetLastUpdatedTimeMsecs(v int64) {
	o.LastUpdatedTimeMsecs.Set(&v)
}
// SetLastUpdatedTimeMsecsNil sets the value for LastUpdatedTimeMsecs to be an explicit nil
func (o *TenantAccess) SetLastUpdatedTimeMsecsNil() {
	o.LastUpdatedTimeMsecs.Set(nil)
}

// UnsetLastUpdatedTimeMsecs ensures that no value is present for LastUpdatedTimeMsecs, not even an explicit nil
func (o *TenantAccess) UnsetLastUpdatedTimeMsecs() {
	o.LastUpdatedTimeMsecs.Unset()
}

// GetIsAccessActive returns the IsAccessActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAccess) GetIsAccessActive() bool {
	if o == nil || o.IsAccessActive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAccessActive.Get()
}

// GetIsAccessActiveOk returns a tuple with the IsAccessActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAccess) GetIsAccessActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAccessActive.Get(), o.IsAccessActive.IsSet()
}

// HasIsAccessActive returns a boolean if a field has been set.
func (o *TenantAccess) HasIsAccessActive() bool {
	if o != nil && o.IsAccessActive.IsSet() {
		return true
	}

	return false
}

// SetIsAccessActive gets a reference to the given NullableBool and assigns it to the IsAccessActive field.
func (o *TenantAccess) SetIsAccessActive(v bool) {
	o.IsAccessActive.Set(&v)
}
// SetIsAccessActiveNil sets the value for IsAccessActive to be an explicit nil
func (o *TenantAccess) SetIsAccessActiveNil() {
	o.IsAccessActive.Set(nil)
}

// UnsetIsAccessActive ensures that no value is present for IsAccessActive, not even an explicit nil
func (o *TenantAccess) UnsetIsAccessActive() {
	o.IsAccessActive.Unset()
}

// GetEffectiveTimeMsecs returns the EffectiveTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAccess) GetEffectiveTimeMsecs() int64 {
	if o == nil || o.EffectiveTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EffectiveTimeMsecs.Get()
}

// GetEffectiveTimeMsecsOk returns a tuple with the EffectiveTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAccess) GetEffectiveTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EffectiveTimeMsecs.Get(), o.EffectiveTimeMsecs.IsSet()
}

// HasEffectiveTimeMsecs returns a boolean if a field has been set.
func (o *TenantAccess) HasEffectiveTimeMsecs() bool {
	if o != nil && o.EffectiveTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetEffectiveTimeMsecs gets a reference to the given NullableInt64 and assigns it to the EffectiveTimeMsecs field.
func (o *TenantAccess) SetEffectiveTimeMsecs(v int64) {
	o.EffectiveTimeMsecs.Set(&v)
}
// SetEffectiveTimeMsecsNil sets the value for EffectiveTimeMsecs to be an explicit nil
func (o *TenantAccess) SetEffectiveTimeMsecsNil() {
	o.EffectiveTimeMsecs.Set(nil)
}

// UnsetEffectiveTimeMsecs ensures that no value is present for EffectiveTimeMsecs, not even an explicit nil
func (o *TenantAccess) UnsetEffectiveTimeMsecs() {
	o.EffectiveTimeMsecs.Unset()
}

// GetExpiredTimeMsecs returns the ExpiredTimeMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAccess) GetExpiredTimeMsecs() int64 {
	if o == nil || o.ExpiredTimeMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiredTimeMsecs.Get()
}

// GetExpiredTimeMsecsOk returns a tuple with the ExpiredTimeMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAccess) GetExpiredTimeMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiredTimeMsecs.Get(), o.ExpiredTimeMsecs.IsSet()
}

// HasExpiredTimeMsecs returns a boolean if a field has been set.
func (o *TenantAccess) HasExpiredTimeMsecs() bool {
	if o != nil && o.ExpiredTimeMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiredTimeMsecs gets a reference to the given NullableInt64 and assigns it to the ExpiredTimeMsecs field.
func (o *TenantAccess) SetExpiredTimeMsecs(v int64) {
	o.ExpiredTimeMsecs.Set(&v)
}
// SetExpiredTimeMsecsNil sets the value for ExpiredTimeMsecs to be an explicit nil
func (o *TenantAccess) SetExpiredTimeMsecsNil() {
	o.ExpiredTimeMsecs.Set(nil)
}

// UnsetExpiredTimeMsecs ensures that no value is present for ExpiredTimeMsecs, not even an explicit nil
func (o *TenantAccess) UnsetExpiredTimeMsecs() {
	o.ExpiredTimeMsecs.Unset()
}

// GetTenantName returns the TenantName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAccess) GetTenantName() string {
	if o == nil || o.TenantName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantName.Get()
}

// GetTenantNameOk returns a tuple with the TenantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAccess) GetTenantNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantName.Get(), o.TenantName.IsSet()
}

// HasTenantName returns a boolean if a field has been set.
func (o *TenantAccess) HasTenantName() bool {
	if o != nil && o.TenantName.IsSet() {
		return true
	}

	return false
}

// SetTenantName gets a reference to the given NullableString and assigns it to the TenantName field.
func (o *TenantAccess) SetTenantName(v string) {
	o.TenantName.Set(&v)
}
// SetTenantNameNil sets the value for TenantName to be an explicit nil
func (o *TenantAccess) SetTenantNameNil() {
	o.TenantName.Set(nil)
}

// UnsetTenantName ensures that no value is present for TenantName, not even an explicit nil
func (o *TenantAccess) UnsetTenantName() {
	o.TenantName.Unset()
}

// GetTenantStatus returns the TenantStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAccess) GetTenantStatus() string {
	if o == nil || o.TenantStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantStatus.Get()
}

// GetTenantStatusOk returns a tuple with the TenantStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAccess) GetTenantStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantStatus.Get(), o.TenantStatus.IsSet()
}

// HasTenantStatus returns a boolean if a field has been set.
func (o *TenantAccess) HasTenantStatus() bool {
	if o != nil && o.TenantStatus.IsSet() {
		return true
	}

	return false
}

// SetTenantStatus gets a reference to the given NullableString and assigns it to the TenantStatus field.
func (o *TenantAccess) SetTenantStatus(v string) {
	o.TenantStatus.Set(&v)
}
// SetTenantStatusNil sets the value for TenantStatus to be an explicit nil
func (o *TenantAccess) SetTenantStatusNil() {
	o.TenantStatus.Set(nil)
}

// UnsetTenantStatus ensures that no value is present for TenantStatus, not even an explicit nil
func (o *TenantAccess) UnsetTenantStatus() {
	o.TenantStatus.Unset()
}

// GetTenantType returns the TenantType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantAccess) GetTenantType() string {
	if o == nil || o.TenantType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantType.Get()
}

// GetTenantTypeOk returns a tuple with the TenantType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantAccess) GetTenantTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantType.Get(), o.TenantType.IsSet()
}

// HasTenantType returns a boolean if a field has been set.
func (o *TenantAccess) HasTenantType() bool {
	if o != nil && o.TenantType.IsSet() {
		return true
	}

	return false
}

// SetTenantType gets a reference to the given NullableString and assigns it to the TenantType field.
func (o *TenantAccess) SetTenantType(v string) {
	o.TenantType.Set(&v)
}
// SetTenantTypeNil sets the value for TenantType to be an explicit nil
func (o *TenantAccess) SetTenantTypeNil() {
	o.TenantType.Set(nil)
}

// UnsetTenantType ensures that no value is present for TenantType, not even an explicit nil
func (o *TenantAccess) UnsetTenantType() {
	o.TenantType.Unset()
}

func (o TenantAccess) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if true {
		toSerialize["roles"] = o.Roles
	}
	if true {
		toSerialize["clusters"] = o.Clusters
	}
	if o.CreatedTimeMsecs.IsSet() {
		toSerialize["createdTimeMsecs"] = o.CreatedTimeMsecs.Get()
	}
	if o.LastUpdatedTimeMsecs.IsSet() {
		toSerialize["lastUpdatedTimeMsecs"] = o.LastUpdatedTimeMsecs.Get()
	}
	if o.IsAccessActive.IsSet() {
		toSerialize["isAccessActive"] = o.IsAccessActive.Get()
	}
	if o.EffectiveTimeMsecs.IsSet() {
		toSerialize["effectiveTimeMsecs"] = o.EffectiveTimeMsecs.Get()
	}
	if o.ExpiredTimeMsecs.IsSet() {
		toSerialize["expiredTimeMsecs"] = o.ExpiredTimeMsecs.Get()
	}
	if o.TenantName.IsSet() {
		toSerialize["tenantName"] = o.TenantName.Get()
	}
	if o.TenantStatus.IsSet() {
		toSerialize["tenantStatus"] = o.TenantStatus.Get()
	}
	if o.TenantType.IsSet() {
		toSerialize["tenantType"] = o.TenantType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTenantAccess struct {
	value *TenantAccess
	isSet bool
}

func (v NullableTenantAccess) Get() *TenantAccess {
	return v.value
}

func (v *NullableTenantAccess) Set(val *TenantAccess) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantAccess) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantAccess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantAccess(val *TenantAccess) *NullableTenantAccess {
	return &NullableTenantAccess{value: val, isSet: true}
}

func (v NullableTenantAccess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantAccess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


