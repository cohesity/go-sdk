/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RecoverAcropolisFileAndFolderParams Specifies the parameters to recover Acropolis files and folders.
type RecoverAcropolisFileAndFolderParams struct {
	// Specifies the info about the files and folders to be recovered.
	FilesAndFolders []CommonRecoverFileAndFolderInfo `json:"filesAndFolders"`
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	// Specifies the params for recovering to an Acropolis target.
	AcropolisTargetParams NullableAcropolisTargetParamsForRecoverFileAndFolder `json:"acropolisTargetParams,omitempty"`
}

// NewRecoverAcropolisFileAndFolderParams instantiates a new RecoverAcropolisFileAndFolderParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverAcropolisFileAndFolderParams(filesAndFolders []CommonRecoverFileAndFolderInfo, targetEnvironment string) *RecoverAcropolisFileAndFolderParams {
	this := RecoverAcropolisFileAndFolderParams{}
	this.FilesAndFolders = filesAndFolders
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverAcropolisFileAndFolderParamsWithDefaults instantiates a new RecoverAcropolisFileAndFolderParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverAcropolisFileAndFolderParamsWithDefaults() *RecoverAcropolisFileAndFolderParams {
	this := RecoverAcropolisFileAndFolderParams{}
	return &this
}

// GetFilesAndFolders returns the FilesAndFolders field value
// If the value is explicit nil, the zero value for []CommonRecoverFileAndFolderInfo will be returned
func (o *RecoverAcropolisFileAndFolderParams) GetFilesAndFolders() []CommonRecoverFileAndFolderInfo {
	if o == nil {
		var ret []CommonRecoverFileAndFolderInfo
		return ret
	}

	return o.FilesAndFolders
}

// GetFilesAndFoldersOk returns a tuple with the FilesAndFolders field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAcropolisFileAndFolderParams) GetFilesAndFoldersOk() (*[]CommonRecoverFileAndFolderInfo, bool) {
	if o == nil || o.FilesAndFolders == nil {
		return nil, false
	}
	return &o.FilesAndFolders, true
}

// SetFilesAndFolders sets field value
func (o *RecoverAcropolisFileAndFolderParams) SetFilesAndFolders(v []CommonRecoverFileAndFolderInfo) {
	o.FilesAndFolders = v
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverAcropolisFileAndFolderParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverAcropolisFileAndFolderParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverAcropolisFileAndFolderParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetAcropolisTargetParams returns the AcropolisTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverAcropolisFileAndFolderParams) GetAcropolisTargetParams() AcropolisTargetParamsForRecoverFileAndFolder {
	if o == nil || o.AcropolisTargetParams.Get() == nil {
		var ret AcropolisTargetParamsForRecoverFileAndFolder
		return ret
	}
	return *o.AcropolisTargetParams.Get()
}

// GetAcropolisTargetParamsOk returns a tuple with the AcropolisTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverAcropolisFileAndFolderParams) GetAcropolisTargetParamsOk() (*AcropolisTargetParamsForRecoverFileAndFolder, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AcropolisTargetParams.Get(), o.AcropolisTargetParams.IsSet()
}

// HasAcropolisTargetParams returns a boolean if a field has been set.
func (o *RecoverAcropolisFileAndFolderParams) HasAcropolisTargetParams() bool {
	if o != nil && o.AcropolisTargetParams.IsSet() {
		return true
	}

	return false
}

// SetAcropolisTargetParams gets a reference to the given NullableAcropolisTargetParamsForRecoverFileAndFolder and assigns it to the AcropolisTargetParams field.
func (o *RecoverAcropolisFileAndFolderParams) SetAcropolisTargetParams(v AcropolisTargetParamsForRecoverFileAndFolder) {
	o.AcropolisTargetParams.Set(&v)
}
// SetAcropolisTargetParamsNil sets the value for AcropolisTargetParams to be an explicit nil
func (o *RecoverAcropolisFileAndFolderParams) SetAcropolisTargetParamsNil() {
	o.AcropolisTargetParams.Set(nil)
}

// UnsetAcropolisTargetParams ensures that no value is present for AcropolisTargetParams, not even an explicit nil
func (o *RecoverAcropolisFileAndFolderParams) UnsetAcropolisTargetParams() {
	o.AcropolisTargetParams.Unset()
}

func (o RecoverAcropolisFileAndFolderParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesAndFolders != nil {
		toSerialize["filesAndFolders"] = o.FilesAndFolders
	}
	if true {
		toSerialize["targetEnvironment"] = o.TargetEnvironment
	}
	if o.AcropolisTargetParams.IsSet() {
		toSerialize["acropolisTargetParams"] = o.AcropolisTargetParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverAcropolisFileAndFolderParams struct {
	value *RecoverAcropolisFileAndFolderParams
	isSet bool
}

func (v NullableRecoverAcropolisFileAndFolderParams) Get() *RecoverAcropolisFileAndFolderParams {
	return v.value
}

func (v *NullableRecoverAcropolisFileAndFolderParams) Set(val *RecoverAcropolisFileAndFolderParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverAcropolisFileAndFolderParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverAcropolisFileAndFolderParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverAcropolisFileAndFolderParams(val *RecoverAcropolisFileAndFolderParams) *NullableRecoverAcropolisFileAndFolderParams {
	return &NullableRecoverAcropolisFileAndFolderParams{value: val, isSet: true}
}

func (v NullableRecoverAcropolisFileAndFolderParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverAcropolisFileAndFolderParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


