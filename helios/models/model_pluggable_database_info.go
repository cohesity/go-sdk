/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// PluggableDatabaseInfo Specifies the information about Pluggable databases.
type PluggableDatabaseInfo struct {
	// Specifies the database Id of the Pluggable DB.
	DatabaseId NullableString `json:"databaseId,omitempty"`
	// Specifies the name of the Pluggable DB.
	DatabaseName NullableString `json:"databaseName,omitempty"`
}

// NewPluggableDatabaseInfo instantiates a new PluggableDatabaseInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPluggableDatabaseInfo() *PluggableDatabaseInfo {
	this := PluggableDatabaseInfo{}
	return &this
}

// NewPluggableDatabaseInfoWithDefaults instantiates a new PluggableDatabaseInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPluggableDatabaseInfoWithDefaults() *PluggableDatabaseInfo {
	this := PluggableDatabaseInfo{}
	return &this
}

// GetDatabaseId returns the DatabaseId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PluggableDatabaseInfo) GetDatabaseId() string {
	if o == nil || o.DatabaseId.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseId.Get()
}

// GetDatabaseIdOk returns a tuple with the DatabaseId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PluggableDatabaseInfo) GetDatabaseIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseId.Get(), o.DatabaseId.IsSet()
}

// HasDatabaseId returns a boolean if a field has been set.
func (o *PluggableDatabaseInfo) HasDatabaseId() bool {
	if o != nil && o.DatabaseId.IsSet() {
		return true
	}

	return false
}

// SetDatabaseId gets a reference to the given NullableString and assigns it to the DatabaseId field.
func (o *PluggableDatabaseInfo) SetDatabaseId(v string) {
	o.DatabaseId.Set(&v)
}
// SetDatabaseIdNil sets the value for DatabaseId to be an explicit nil
func (o *PluggableDatabaseInfo) SetDatabaseIdNil() {
	o.DatabaseId.Set(nil)
}

// UnsetDatabaseId ensures that no value is present for DatabaseId, not even an explicit nil
func (o *PluggableDatabaseInfo) UnsetDatabaseId() {
	o.DatabaseId.Unset()
}

// GetDatabaseName returns the DatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PluggableDatabaseInfo) GetDatabaseName() string {
	if o == nil || o.DatabaseName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseName.Get()
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PluggableDatabaseInfo) GetDatabaseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseName.Get(), o.DatabaseName.IsSet()
}

// HasDatabaseName returns a boolean if a field has been set.
func (o *PluggableDatabaseInfo) HasDatabaseName() bool {
	if o != nil && o.DatabaseName.IsSet() {
		return true
	}

	return false
}

// SetDatabaseName gets a reference to the given NullableString and assigns it to the DatabaseName field.
func (o *PluggableDatabaseInfo) SetDatabaseName(v string) {
	o.DatabaseName.Set(&v)
}
// SetDatabaseNameNil sets the value for DatabaseName to be an explicit nil
func (o *PluggableDatabaseInfo) SetDatabaseNameNil() {
	o.DatabaseName.Set(nil)
}

// UnsetDatabaseName ensures that no value is present for DatabaseName, not even an explicit nil
func (o *PluggableDatabaseInfo) UnsetDatabaseName() {
	o.DatabaseName.Unset()
}

func (o PluggableDatabaseInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatabaseId.IsSet() {
		toSerialize["databaseId"] = o.DatabaseId.Get()
	}
	if o.DatabaseName.IsSet() {
		toSerialize["databaseName"] = o.DatabaseName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePluggableDatabaseInfo struct {
	value *PluggableDatabaseInfo
	isSet bool
}

func (v NullablePluggableDatabaseInfo) Get() *PluggableDatabaseInfo {
	return v.value
}

func (v *NullablePluggableDatabaseInfo) Set(val *PluggableDatabaseInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePluggableDatabaseInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePluggableDatabaseInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePluggableDatabaseInfo(val *PluggableDatabaseInfo) *NullablePluggableDatabaseInfo {
	return &NullablePluggableDatabaseInfo{value: val, isSet: true}
}

func (v NullablePluggableDatabaseInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePluggableDatabaseInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


