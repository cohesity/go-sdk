/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmTenantSourceRegistrations Specifies the source registrations for a given tenant.
type McmTenantSourceRegistrations struct {
	SourceRegistrations *[]McmTenantSourceRegistration `json:"sourceRegistrations,omitempty"`
}

// NewMcmTenantSourceRegistrations instantiates a new McmTenantSourceRegistrations object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmTenantSourceRegistrations() *McmTenantSourceRegistrations {
	this := McmTenantSourceRegistrations{}
	return &this
}

// NewMcmTenantSourceRegistrationsWithDefaults instantiates a new McmTenantSourceRegistrations object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmTenantSourceRegistrationsWithDefaults() *McmTenantSourceRegistrations {
	this := McmTenantSourceRegistrations{}
	return &this
}

// GetSourceRegistrations returns the SourceRegistrations field value if set, zero value otherwise.
func (o *McmTenantSourceRegistrations) GetSourceRegistrations() []McmTenantSourceRegistration {
	if o == nil || o.SourceRegistrations == nil {
		var ret []McmTenantSourceRegistration
		return ret
	}
	return *o.SourceRegistrations
}

// GetSourceRegistrationsOk returns a tuple with the SourceRegistrations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmTenantSourceRegistrations) GetSourceRegistrationsOk() (*[]McmTenantSourceRegistration, bool) {
	if o == nil || o.SourceRegistrations == nil {
		return nil, false
	}
	return o.SourceRegistrations, true
}

// HasSourceRegistrations returns a boolean if a field has been set.
func (o *McmTenantSourceRegistrations) HasSourceRegistrations() bool {
	if o != nil && o.SourceRegistrations != nil {
		return true
	}

	return false
}

// SetSourceRegistrations gets a reference to the given []McmTenantSourceRegistration and assigns it to the SourceRegistrations field.
func (o *McmTenantSourceRegistrations) SetSourceRegistrations(v []McmTenantSourceRegistration) {
	o.SourceRegistrations = &v
}

func (o McmTenantSourceRegistrations) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceRegistrations != nil {
		toSerialize["sourceRegistrations"] = o.SourceRegistrations
	}
	return json.Marshal(toSerialize)
}

type NullableMcmTenantSourceRegistrations struct {
	value *McmTenantSourceRegistrations
	isSet bool
}

func (v NullableMcmTenantSourceRegistrations) Get() *McmTenantSourceRegistrations {
	return v.value
}

func (v *NullableMcmTenantSourceRegistrations) Set(val *McmTenantSourceRegistrations) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmTenantSourceRegistrations) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmTenantSourceRegistrations) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmTenantSourceRegistrations(val *McmTenantSourceRegistrations) *NullableMcmTenantSourceRegistrations {
	return &NullableMcmTenantSourceRegistrations{value: val, isSet: true}
}

func (v NullableMcmTenantSourceRegistrations) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmTenantSourceRegistrations) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


