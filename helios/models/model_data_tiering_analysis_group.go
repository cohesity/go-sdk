/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// DataTieringAnalysisGroup Specifies the data tiering analysis group.
type DataTieringAnalysisGroup struct {
	// Specifies the name of the data tiering analysis group.
	Name NullableString `json:"name"`
	Source DataTieringSource `json:"source"`
	// Specifies the ID of the data tiering analysis group.
	Id NullableString `json:"id,omitempty"`
	LastRun *DataTieringAnalysisGroupRun `json:"lastRun,omitempty"`
}

// NewDataTieringAnalysisGroup instantiates a new DataTieringAnalysisGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTieringAnalysisGroup(name NullableString, source DataTieringSource) *DataTieringAnalysisGroup {
	this := DataTieringAnalysisGroup{}
	this.Name = name
	this.Source = source
	return &this
}

// NewDataTieringAnalysisGroupWithDefaults instantiates a new DataTieringAnalysisGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTieringAnalysisGroupWithDefaults() *DataTieringAnalysisGroup {
	this := DataTieringAnalysisGroup{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DataTieringAnalysisGroup) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringAnalysisGroup) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *DataTieringAnalysisGroup) SetName(v string) {
	o.Name.Set(&v)
}

// GetSource returns the Source field value
func (o *DataTieringAnalysisGroup) GetSource() DataTieringSource {
	if o == nil {
		var ret DataTieringSource
		return ret
	}

	return o.Source
}

// GetSourceOk returns a tuple with the Source field value
// and a boolean to check if the value has been set.
func (o *DataTieringAnalysisGroup) GetSourceOk() (*DataTieringSource, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Source, true
}

// SetSource sets field value
func (o *DataTieringAnalysisGroup) SetSource(v DataTieringSource) {
	o.Source = v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringAnalysisGroup) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringAnalysisGroup) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *DataTieringAnalysisGroup) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *DataTieringAnalysisGroup) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *DataTieringAnalysisGroup) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *DataTieringAnalysisGroup) UnsetId() {
	o.Id.Unset()
}

// GetLastRun returns the LastRun field value if set, zero value otherwise.
func (o *DataTieringAnalysisGroup) GetLastRun() DataTieringAnalysisGroupRun {
	if o == nil || o.LastRun == nil {
		var ret DataTieringAnalysisGroupRun
		return ret
	}
	return *o.LastRun
}

// GetLastRunOk returns a tuple with the LastRun field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringAnalysisGroup) GetLastRunOk() (*DataTieringAnalysisGroupRun, bool) {
	if o == nil || o.LastRun == nil {
		return nil, false
	}
	return o.LastRun, true
}

// HasLastRun returns a boolean if a field has been set.
func (o *DataTieringAnalysisGroup) HasLastRun() bool {
	if o != nil && o.LastRun != nil {
		return true
	}

	return false
}

// SetLastRun gets a reference to the given DataTieringAnalysisGroupRun and assigns it to the LastRun field.
func (o *DataTieringAnalysisGroup) SetLastRun(v DataTieringAnalysisGroupRun) {
	o.LastRun = &v
}

func (o DataTieringAnalysisGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["source"] = o.Source
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.LastRun != nil {
		toSerialize["lastRun"] = o.LastRun
	}
	return json.Marshal(toSerialize)
}

type NullableDataTieringAnalysisGroup struct {
	value *DataTieringAnalysisGroup
	isSet bool
}

func (v NullableDataTieringAnalysisGroup) Get() *DataTieringAnalysisGroup {
	return v.value
}

func (v *NullableDataTieringAnalysisGroup) Set(val *DataTieringAnalysisGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTieringAnalysisGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTieringAnalysisGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTieringAnalysisGroup(val *DataTieringAnalysisGroup) *NullableDataTieringAnalysisGroup {
	return &NullableDataTieringAnalysisGroup{value: val, isSet: true}
}

func (v NullableDataTieringAnalysisGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTieringAnalysisGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


