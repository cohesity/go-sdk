/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CreateMcmClaimRequest Specifies the request params to claim an entity to Helios.
type CreateMcmClaimRequest struct {
	// Specfies the type of entity.
	EntityType string `json:"entityType"`
	RigelParams *McmRigelClaimRequestParams `json:"rigelParams,omitempty"`
	ClusterParams *McmClusterClaimRequestParams `json:"clusterParams,omitempty"`
}

// NewCreateMcmClaimRequest instantiates a new CreateMcmClaimRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateMcmClaimRequest(entityType string) *CreateMcmClaimRequest {
	this := CreateMcmClaimRequest{}
	this.EntityType = entityType
	return &this
}

// NewCreateMcmClaimRequestWithDefaults instantiates a new CreateMcmClaimRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateMcmClaimRequestWithDefaults() *CreateMcmClaimRequest {
	this := CreateMcmClaimRequest{}
	return &this
}

// GetEntityType returns the EntityType field value
func (o *CreateMcmClaimRequest) GetEntityType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EntityType
}

// GetEntityTypeOk returns a tuple with the EntityType field value
// and a boolean to check if the value has been set.
func (o *CreateMcmClaimRequest) GetEntityTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EntityType, true
}

// SetEntityType sets field value
func (o *CreateMcmClaimRequest) SetEntityType(v string) {
	o.EntityType = v
}

// GetRigelParams returns the RigelParams field value if set, zero value otherwise.
func (o *CreateMcmClaimRequest) GetRigelParams() McmRigelClaimRequestParams {
	if o == nil || o.RigelParams == nil {
		var ret McmRigelClaimRequestParams
		return ret
	}
	return *o.RigelParams
}

// GetRigelParamsOk returns a tuple with the RigelParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMcmClaimRequest) GetRigelParamsOk() (*McmRigelClaimRequestParams, bool) {
	if o == nil || o.RigelParams == nil {
		return nil, false
	}
	return o.RigelParams, true
}

// HasRigelParams returns a boolean if a field has been set.
func (o *CreateMcmClaimRequest) HasRigelParams() bool {
	if o != nil && o.RigelParams != nil {
		return true
	}

	return false
}

// SetRigelParams gets a reference to the given McmRigelClaimRequestParams and assigns it to the RigelParams field.
func (o *CreateMcmClaimRequest) SetRigelParams(v McmRigelClaimRequestParams) {
	o.RigelParams = &v
}

// GetClusterParams returns the ClusterParams field value if set, zero value otherwise.
func (o *CreateMcmClaimRequest) GetClusterParams() McmClusterClaimRequestParams {
	if o == nil || o.ClusterParams == nil {
		var ret McmClusterClaimRequestParams
		return ret
	}
	return *o.ClusterParams
}

// GetClusterParamsOk returns a tuple with the ClusterParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateMcmClaimRequest) GetClusterParamsOk() (*McmClusterClaimRequestParams, bool) {
	if o == nil || o.ClusterParams == nil {
		return nil, false
	}
	return o.ClusterParams, true
}

// HasClusterParams returns a boolean if a field has been set.
func (o *CreateMcmClaimRequest) HasClusterParams() bool {
	if o != nil && o.ClusterParams != nil {
		return true
	}

	return false
}

// SetClusterParams gets a reference to the given McmClusterClaimRequestParams and assigns it to the ClusterParams field.
func (o *CreateMcmClaimRequest) SetClusterParams(v McmClusterClaimRequestParams) {
	o.ClusterParams = &v
}

func (o CreateMcmClaimRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["entityType"] = o.EntityType
	}
	if o.RigelParams != nil {
		toSerialize["rigelParams"] = o.RigelParams
	}
	if o.ClusterParams != nil {
		toSerialize["clusterParams"] = o.ClusterParams
	}
	return json.Marshal(toSerialize)
}

type NullableCreateMcmClaimRequest struct {
	value *CreateMcmClaimRequest
	isSet bool
}

func (v NullableCreateMcmClaimRequest) Get() *CreateMcmClaimRequest {
	return v.value
}

func (v *NullableCreateMcmClaimRequest) Set(val *CreateMcmClaimRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateMcmClaimRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateMcmClaimRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateMcmClaimRequest(val *CreateMcmClaimRequest) *NullableCreateMcmClaimRequest {
	return &NullableCreateMcmClaimRequest{value: val, isSet: true}
}

func (v NullableCreateMcmClaimRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateMcmClaimRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


