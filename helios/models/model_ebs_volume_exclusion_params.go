/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// EbsVolumeExclusionParams Specifies the parameters to exclude EBS volumes attached to EC2 instances at global and object level. A volume satisfying any of these criteria will be excluded.
type EbsVolumeExclusionParams struct {
	// Array of volume IDs that are to be excluded. This is only for object level exclusion.
	VolumeIds []string `json:"volumeIds,omitempty"`
	// Any volume larger than this size will be excluded.
	MaxVolumeSizeBytes NullableInt64 `json:"maxVolumeSizeBytes,omitempty"`
	// Array of volume types to exclude. Eg - gp2, gp3.
	VolumeTypes []string `json:"volumeTypes,omitempty"`
	// Array of device names to exclude. Eg - /dev/sda.
	DeviceNames []string `json:"deviceNames,omitempty"`
}

// NewEbsVolumeExclusionParams instantiates a new EbsVolumeExclusionParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEbsVolumeExclusionParams() *EbsVolumeExclusionParams {
	this := EbsVolumeExclusionParams{}
	return &this
}

// NewEbsVolumeExclusionParamsWithDefaults instantiates a new EbsVolumeExclusionParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEbsVolumeExclusionParamsWithDefaults() *EbsVolumeExclusionParams {
	this := EbsVolumeExclusionParams{}
	return &this
}

// GetVolumeIds returns the VolumeIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EbsVolumeExclusionParams) GetVolumeIds() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.VolumeIds
}

// GetVolumeIdsOk returns a tuple with the VolumeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EbsVolumeExclusionParams) GetVolumeIdsOk() (*[]string, bool) {
	if o == nil || o.VolumeIds == nil {
		return nil, false
	}
	return &o.VolumeIds, true
}

// HasVolumeIds returns a boolean if a field has been set.
func (o *EbsVolumeExclusionParams) HasVolumeIds() bool {
	if o != nil && o.VolumeIds != nil {
		return true
	}

	return false
}

// SetVolumeIds gets a reference to the given []string and assigns it to the VolumeIds field.
func (o *EbsVolumeExclusionParams) SetVolumeIds(v []string) {
	o.VolumeIds = v
}

// GetMaxVolumeSizeBytes returns the MaxVolumeSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EbsVolumeExclusionParams) GetMaxVolumeSizeBytes() int64 {
	if o == nil || o.MaxVolumeSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MaxVolumeSizeBytes.Get()
}

// GetMaxVolumeSizeBytesOk returns a tuple with the MaxVolumeSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EbsVolumeExclusionParams) GetMaxVolumeSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxVolumeSizeBytes.Get(), o.MaxVolumeSizeBytes.IsSet()
}

// HasMaxVolumeSizeBytes returns a boolean if a field has been set.
func (o *EbsVolumeExclusionParams) HasMaxVolumeSizeBytes() bool {
	if o != nil && o.MaxVolumeSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetMaxVolumeSizeBytes gets a reference to the given NullableInt64 and assigns it to the MaxVolumeSizeBytes field.
func (o *EbsVolumeExclusionParams) SetMaxVolumeSizeBytes(v int64) {
	o.MaxVolumeSizeBytes.Set(&v)
}
// SetMaxVolumeSizeBytesNil sets the value for MaxVolumeSizeBytes to be an explicit nil
func (o *EbsVolumeExclusionParams) SetMaxVolumeSizeBytesNil() {
	o.MaxVolumeSizeBytes.Set(nil)
}

// UnsetMaxVolumeSizeBytes ensures that no value is present for MaxVolumeSizeBytes, not even an explicit nil
func (o *EbsVolumeExclusionParams) UnsetMaxVolumeSizeBytes() {
	o.MaxVolumeSizeBytes.Unset()
}

// GetVolumeTypes returns the VolumeTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EbsVolumeExclusionParams) GetVolumeTypes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.VolumeTypes
}

// GetVolumeTypesOk returns a tuple with the VolumeTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EbsVolumeExclusionParams) GetVolumeTypesOk() (*[]string, bool) {
	if o == nil || o.VolumeTypes == nil {
		return nil, false
	}
	return &o.VolumeTypes, true
}

// HasVolumeTypes returns a boolean if a field has been set.
func (o *EbsVolumeExclusionParams) HasVolumeTypes() bool {
	if o != nil && o.VolumeTypes != nil {
		return true
	}

	return false
}

// SetVolumeTypes gets a reference to the given []string and assigns it to the VolumeTypes field.
func (o *EbsVolumeExclusionParams) SetVolumeTypes(v []string) {
	o.VolumeTypes = v
}

// GetDeviceNames returns the DeviceNames field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EbsVolumeExclusionParams) GetDeviceNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DeviceNames
}

// GetDeviceNamesOk returns a tuple with the DeviceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EbsVolumeExclusionParams) GetDeviceNamesOk() (*[]string, bool) {
	if o == nil || o.DeviceNames == nil {
		return nil, false
	}
	return &o.DeviceNames, true
}

// HasDeviceNames returns a boolean if a field has been set.
func (o *EbsVolumeExclusionParams) HasDeviceNames() bool {
	if o != nil && o.DeviceNames != nil {
		return true
	}

	return false
}

// SetDeviceNames gets a reference to the given []string and assigns it to the DeviceNames field.
func (o *EbsVolumeExclusionParams) SetDeviceNames(v []string) {
	o.DeviceNames = v
}

func (o EbsVolumeExclusionParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.VolumeIds != nil {
		toSerialize["volumeIds"] = o.VolumeIds
	}
	if o.MaxVolumeSizeBytes.IsSet() {
		toSerialize["maxVolumeSizeBytes"] = o.MaxVolumeSizeBytes.Get()
	}
	if o.VolumeTypes != nil {
		toSerialize["volumeTypes"] = o.VolumeTypes
	}
	if o.DeviceNames != nil {
		toSerialize["deviceNames"] = o.DeviceNames
	}
	return json.Marshal(toSerialize)
}

type NullableEbsVolumeExclusionParams struct {
	value *EbsVolumeExclusionParams
	isSet bool
}

func (v NullableEbsVolumeExclusionParams) Get() *EbsVolumeExclusionParams {
	return v.value
}

func (v *NullableEbsVolumeExclusionParams) Set(val *EbsVolumeExclusionParams) {
	v.value = val
	v.isSet = true
}

func (v NullableEbsVolumeExclusionParams) IsSet() bool {
	return v.isSet
}

func (v *NullableEbsVolumeExclusionParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEbsVolumeExclusionParams(val *EbsVolumeExclusionParams) *NullableEbsVolumeExclusionParams {
	return &NullableEbsVolumeExclusionParams{value: val, isSet: true}
}

func (v NullableEbsVolumeExclusionParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEbsVolumeExclusionParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


