/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// SQLServer Specifies the details of a SQL server.
type SQLServer struct {
	// Specifies the unique identifier of the SQL server host.
	Id NullableString `json:"id,omitempty"`
	ResourceInfo *AppResource `json:"resourceInfo,omitempty"`
	AgentInfo *AgentInformation `json:"agentInfo,omitempty"`
	Error *Error `json:"error,omitempty"`
	// Indicates whether this is a active node of a FCI cluster or hosts primary replica of a AAG group.
	IsPrimary NullableBool `json:"isPrimary,omitempty"`
	// Specifies the list of all sql instances running inside the current SQL host.
	Instances []SQLServerInstance `json:"instances,omitempty"`
	// Indicates to the UI whether this server should be selected by default
	IsSelectedByDefault NullableBool `json:"isSelectedByDefault,omitempty"`
}

// NewSQLServer instantiates a new SQLServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSQLServer() *SQLServer {
	this := SQLServer{}
	return &this
}

// NewSQLServerWithDefaults instantiates a new SQLServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSQLServerWithDefaults() *SQLServer {
	this := SQLServer{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SQLServer) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SQLServer) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SQLServer) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SQLServer) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SQLServer) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SQLServer) UnsetId() {
	o.Id.Unset()
}

// GetResourceInfo returns the ResourceInfo field value if set, zero value otherwise.
func (o *SQLServer) GetResourceInfo() AppResource {
	if o == nil || o.ResourceInfo == nil {
		var ret AppResource
		return ret
	}
	return *o.ResourceInfo
}

// GetResourceInfoOk returns a tuple with the ResourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLServer) GetResourceInfoOk() (*AppResource, bool) {
	if o == nil || o.ResourceInfo == nil {
		return nil, false
	}
	return o.ResourceInfo, true
}

// HasResourceInfo returns a boolean if a field has been set.
func (o *SQLServer) HasResourceInfo() bool {
	if o != nil && o.ResourceInfo != nil {
		return true
	}

	return false
}

// SetResourceInfo gets a reference to the given AppResource and assigns it to the ResourceInfo field.
func (o *SQLServer) SetResourceInfo(v AppResource) {
	o.ResourceInfo = &v
}

// GetAgentInfo returns the AgentInfo field value if set, zero value otherwise.
func (o *SQLServer) GetAgentInfo() AgentInformation {
	if o == nil || o.AgentInfo == nil {
		var ret AgentInformation
		return ret
	}
	return *o.AgentInfo
}

// GetAgentInfoOk returns a tuple with the AgentInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLServer) GetAgentInfoOk() (*AgentInformation, bool) {
	if o == nil || o.AgentInfo == nil {
		return nil, false
	}
	return o.AgentInfo, true
}

// HasAgentInfo returns a boolean if a field has been set.
func (o *SQLServer) HasAgentInfo() bool {
	if o != nil && o.AgentInfo != nil {
		return true
	}

	return false
}

// SetAgentInfo gets a reference to the given AgentInformation and assigns it to the AgentInfo field.
func (o *SQLServer) SetAgentInfo(v AgentInformation) {
	o.AgentInfo = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *SQLServer) GetError() Error {
	if o == nil || o.Error == nil {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SQLServer) GetErrorOk() (*Error, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *SQLServer) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *SQLServer) SetError(v Error) {
	o.Error = &v
}

// GetIsPrimary returns the IsPrimary field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SQLServer) GetIsPrimary() bool {
	if o == nil || o.IsPrimary.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsPrimary.Get()
}

// GetIsPrimaryOk returns a tuple with the IsPrimary field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SQLServer) GetIsPrimaryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsPrimary.Get(), o.IsPrimary.IsSet()
}

// HasIsPrimary returns a boolean if a field has been set.
func (o *SQLServer) HasIsPrimary() bool {
	if o != nil && o.IsPrimary.IsSet() {
		return true
	}

	return false
}

// SetIsPrimary gets a reference to the given NullableBool and assigns it to the IsPrimary field.
func (o *SQLServer) SetIsPrimary(v bool) {
	o.IsPrimary.Set(&v)
}
// SetIsPrimaryNil sets the value for IsPrimary to be an explicit nil
func (o *SQLServer) SetIsPrimaryNil() {
	o.IsPrimary.Set(nil)
}

// UnsetIsPrimary ensures that no value is present for IsPrimary, not even an explicit nil
func (o *SQLServer) UnsetIsPrimary() {
	o.IsPrimary.Unset()
}

// GetInstances returns the Instances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SQLServer) GetInstances() []SQLServerInstance {
	if o == nil  {
		var ret []SQLServerInstance
		return ret
	}
	return o.Instances
}

// GetInstancesOk returns a tuple with the Instances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SQLServer) GetInstancesOk() (*[]SQLServerInstance, bool) {
	if o == nil || o.Instances == nil {
		return nil, false
	}
	return &o.Instances, true
}

// HasInstances returns a boolean if a field has been set.
func (o *SQLServer) HasInstances() bool {
	if o != nil && o.Instances != nil {
		return true
	}

	return false
}

// SetInstances gets a reference to the given []SQLServerInstance and assigns it to the Instances field.
func (o *SQLServer) SetInstances(v []SQLServerInstance) {
	o.Instances = v
}

// GetIsSelectedByDefault returns the IsSelectedByDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SQLServer) GetIsSelectedByDefault() bool {
	if o == nil || o.IsSelectedByDefault.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSelectedByDefault.Get()
}

// GetIsSelectedByDefaultOk returns a tuple with the IsSelectedByDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SQLServer) GetIsSelectedByDefaultOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSelectedByDefault.Get(), o.IsSelectedByDefault.IsSet()
}

// HasIsSelectedByDefault returns a boolean if a field has been set.
func (o *SQLServer) HasIsSelectedByDefault() bool {
	if o != nil && o.IsSelectedByDefault.IsSet() {
		return true
	}

	return false
}

// SetIsSelectedByDefault gets a reference to the given NullableBool and assigns it to the IsSelectedByDefault field.
func (o *SQLServer) SetIsSelectedByDefault(v bool) {
	o.IsSelectedByDefault.Set(&v)
}
// SetIsSelectedByDefaultNil sets the value for IsSelectedByDefault to be an explicit nil
func (o *SQLServer) SetIsSelectedByDefaultNil() {
	o.IsSelectedByDefault.Set(nil)
}

// UnsetIsSelectedByDefault ensures that no value is present for IsSelectedByDefault, not even an explicit nil
func (o *SQLServer) UnsetIsSelectedByDefault() {
	o.IsSelectedByDefault.Unset()
}

func (o SQLServer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ResourceInfo != nil {
		toSerialize["resourceInfo"] = o.ResourceInfo
	}
	if o.AgentInfo != nil {
		toSerialize["agentInfo"] = o.AgentInfo
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.IsPrimary.IsSet() {
		toSerialize["isPrimary"] = o.IsPrimary.Get()
	}
	if o.Instances != nil {
		toSerialize["instances"] = o.Instances
	}
	if o.IsSelectedByDefault.IsSet() {
		toSerialize["isSelectedByDefault"] = o.IsSelectedByDefault.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSQLServer struct {
	value *SQLServer
	isSet bool
}

func (v NullableSQLServer) Get() *SQLServer {
	return v.value
}

func (v *NullableSQLServer) Set(val *SQLServer) {
	v.value = val
	v.isSet = true
}

func (v NullableSQLServer) IsSet() bool {
	return v.isSet
}

func (v *NullableSQLServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSQLServer(val *SQLServer) *NullableSQLServer {
	return &NullableSQLServer{value: val, isSet: true}
}

func (v NullableSQLServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSQLServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


