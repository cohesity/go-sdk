/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// Idps Identity Providers.
type Idps struct {
	// Specifies the list of Idps.
	Idps []Idp `json:"idps,omitempty"`
}

// NewIdps instantiates a new Idps object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdps() *Idps {
	this := Idps{}
	return &this
}

// NewIdpsWithDefaults instantiates a new Idps object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpsWithDefaults() *Idps {
	this := Idps{}
	return &this
}

// GetIdps returns the Idps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Idps) GetIdps() []Idp {
	if o == nil  {
		var ret []Idp
		return ret
	}
	return o.Idps
}

// GetIdpsOk returns a tuple with the Idps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Idps) GetIdpsOk() (*[]Idp, bool) {
	if o == nil || o.Idps == nil {
		return nil, false
	}
	return &o.Idps, true
}

// HasIdps returns a boolean if a field has been set.
func (o *Idps) HasIdps() bool {
	if o != nil && o.Idps != nil {
		return true
	}

	return false
}

// SetIdps gets a reference to the given []Idp and assigns it to the Idps field.
func (o *Idps) SetIdps(v []Idp) {
	o.Idps = v
}

func (o Idps) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Idps != nil {
		toSerialize["idps"] = o.Idps
	}
	return json.Marshal(toSerialize)
}

type NullableIdps struct {
	value *Idps
	isSet bool
}

func (v NullableIdps) Get() *Idps {
	return v.value
}

func (v *NullableIdps) Set(val *Idps) {
	v.value = val
	v.isSet = true
}

func (v NullableIdps) IsSet() bool {
	return v.isSet
}

func (v *NullableIdps) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdps(val *Idps) *NullableIdps {
	return &NullableIdps{value: val, isSet: true}
}

func (v NullableIdps) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdps) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


