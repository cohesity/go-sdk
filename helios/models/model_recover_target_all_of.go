/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RecoverTargetAllOf struct for RecoverTargetAllOf
type RecoverTargetAllOf struct {
	// Specifies the id of the parent source of the target.
	ParentSourceId NullableInt64 `json:"parentSourceId,omitempty"`
	// Specifies the name of the parent source of the target.
	ParentSourceName NullableString `json:"parentSourceName,omitempty"`
}

// NewRecoverTargetAllOf instantiates a new RecoverTargetAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverTargetAllOf() *RecoverTargetAllOf {
	this := RecoverTargetAllOf{}
	return &this
}

// NewRecoverTargetAllOfWithDefaults instantiates a new RecoverTargetAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverTargetAllOfWithDefaults() *RecoverTargetAllOf {
	this := RecoverTargetAllOf{}
	return &this
}

// GetParentSourceId returns the ParentSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverTargetAllOf) GetParentSourceId() int64 {
	if o == nil || o.ParentSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ParentSourceId.Get()
}

// GetParentSourceIdOk returns a tuple with the ParentSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverTargetAllOf) GetParentSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentSourceId.Get(), o.ParentSourceId.IsSet()
}

// HasParentSourceId returns a boolean if a field has been set.
func (o *RecoverTargetAllOf) HasParentSourceId() bool {
	if o != nil && o.ParentSourceId.IsSet() {
		return true
	}

	return false
}

// SetParentSourceId gets a reference to the given NullableInt64 and assigns it to the ParentSourceId field.
func (o *RecoverTargetAllOf) SetParentSourceId(v int64) {
	o.ParentSourceId.Set(&v)
}
// SetParentSourceIdNil sets the value for ParentSourceId to be an explicit nil
func (o *RecoverTargetAllOf) SetParentSourceIdNil() {
	o.ParentSourceId.Set(nil)
}

// UnsetParentSourceId ensures that no value is present for ParentSourceId, not even an explicit nil
func (o *RecoverTargetAllOf) UnsetParentSourceId() {
	o.ParentSourceId.Unset()
}

// GetParentSourceName returns the ParentSourceName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverTargetAllOf) GetParentSourceName() string {
	if o == nil || o.ParentSourceName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentSourceName.Get()
}

// GetParentSourceNameOk returns a tuple with the ParentSourceName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverTargetAllOf) GetParentSourceNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentSourceName.Get(), o.ParentSourceName.IsSet()
}

// HasParentSourceName returns a boolean if a field has been set.
func (o *RecoverTargetAllOf) HasParentSourceName() bool {
	if o != nil && o.ParentSourceName.IsSet() {
		return true
	}

	return false
}

// SetParentSourceName gets a reference to the given NullableString and assigns it to the ParentSourceName field.
func (o *RecoverTargetAllOf) SetParentSourceName(v string) {
	o.ParentSourceName.Set(&v)
}
// SetParentSourceNameNil sets the value for ParentSourceName to be an explicit nil
func (o *RecoverTargetAllOf) SetParentSourceNameNil() {
	o.ParentSourceName.Set(nil)
}

// UnsetParentSourceName ensures that no value is present for ParentSourceName, not even an explicit nil
func (o *RecoverTargetAllOf) UnsetParentSourceName() {
	o.ParentSourceName.Unset()
}

func (o RecoverTargetAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ParentSourceId.IsSet() {
		toSerialize["parentSourceId"] = o.ParentSourceId.Get()
	}
	if o.ParentSourceName.IsSet() {
		toSerialize["parentSourceName"] = o.ParentSourceName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverTargetAllOf struct {
	value *RecoverTargetAllOf
	isSet bool
}

func (v NullableRecoverTargetAllOf) Get() *RecoverTargetAllOf {
	return v.value
}

func (v *NullableRecoverTargetAllOf) Set(val *RecoverTargetAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverTargetAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverTargetAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverTargetAllOf(val *RecoverTargetAllOf) *NullableRecoverTargetAllOf {
	return &NullableRecoverTargetAllOf{value: val, isSet: true}
}

func (v NullableRecoverTargetAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverTargetAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


