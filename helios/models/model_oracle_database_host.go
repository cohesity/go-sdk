/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// OracleDatabaseHost Specifies details about an Oracle database host.
type OracleDatabaseHost struct {
	// Specifies the id of the database host from which backup is allowed.
	HostId NullableString `json:"hostId,omitempty"`
	// Specifies the number of channels to be created for this host. Default value for the number of channels will be calculated as the minimum of number of nodes in Cohesity cluster and 2 * number of CPU on the host.
	ChannelCount *int32 `json:"channelCount,omitempty"`
	// Specifies the port where the Database is listening.
	Port *int64 `json:"port,omitempty"`
	SbtHostParams *OracleSbtHostParams `json:"sbtHostParams,omitempty"`
}

// NewOracleDatabaseHost instantiates a new OracleDatabaseHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDatabaseHost() *OracleDatabaseHost {
	this := OracleDatabaseHost{}
	return &this
}

// NewOracleDatabaseHostWithDefaults instantiates a new OracleDatabaseHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDatabaseHostWithDefaults() *OracleDatabaseHost {
	this := OracleDatabaseHost{}
	return &this
}

// GetHostId returns the HostId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseHost) GetHostId() string {
	if o == nil || o.HostId.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostId.Get()
}

// GetHostIdOk returns a tuple with the HostId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseHost) GetHostIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostId.Get(), o.HostId.IsSet()
}

// HasHostId returns a boolean if a field has been set.
func (o *OracleDatabaseHost) HasHostId() bool {
	if o != nil && o.HostId.IsSet() {
		return true
	}

	return false
}

// SetHostId gets a reference to the given NullableString and assigns it to the HostId field.
func (o *OracleDatabaseHost) SetHostId(v string) {
	o.HostId.Set(&v)
}
// SetHostIdNil sets the value for HostId to be an explicit nil
func (o *OracleDatabaseHost) SetHostIdNil() {
	o.HostId.Set(nil)
}

// UnsetHostId ensures that no value is present for HostId, not even an explicit nil
func (o *OracleDatabaseHost) UnsetHostId() {
	o.HostId.Unset()
}

// GetChannelCount returns the ChannelCount field value if set, zero value otherwise.
func (o *OracleDatabaseHost) GetChannelCount() int32 {
	if o == nil || o.ChannelCount == nil {
		var ret int32
		return ret
	}
	return *o.ChannelCount
}

// GetChannelCountOk returns a tuple with the ChannelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDatabaseHost) GetChannelCountOk() (*int32, bool) {
	if o == nil || o.ChannelCount == nil {
		return nil, false
	}
	return o.ChannelCount, true
}

// HasChannelCount returns a boolean if a field has been set.
func (o *OracleDatabaseHost) HasChannelCount() bool {
	if o != nil && o.ChannelCount != nil {
		return true
	}

	return false
}

// SetChannelCount gets a reference to the given int32 and assigns it to the ChannelCount field.
func (o *OracleDatabaseHost) SetChannelCount(v int32) {
	o.ChannelCount = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *OracleDatabaseHost) GetPort() int64 {
	if o == nil || o.Port == nil {
		var ret int64
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDatabaseHost) GetPortOk() (*int64, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *OracleDatabaseHost) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int64 and assigns it to the Port field.
func (o *OracleDatabaseHost) SetPort(v int64) {
	o.Port = &v
}

// GetSbtHostParams returns the SbtHostParams field value if set, zero value otherwise.
func (o *OracleDatabaseHost) GetSbtHostParams() OracleSbtHostParams {
	if o == nil || o.SbtHostParams == nil {
		var ret OracleSbtHostParams
		return ret
	}
	return *o.SbtHostParams
}

// GetSbtHostParamsOk returns a tuple with the SbtHostParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleDatabaseHost) GetSbtHostParamsOk() (*OracleSbtHostParams, bool) {
	if o == nil || o.SbtHostParams == nil {
		return nil, false
	}
	return o.SbtHostParams, true
}

// HasSbtHostParams returns a boolean if a field has been set.
func (o *OracleDatabaseHost) HasSbtHostParams() bool {
	if o != nil && o.SbtHostParams != nil {
		return true
	}

	return false
}

// SetSbtHostParams gets a reference to the given OracleSbtHostParams and assigns it to the SbtHostParams field.
func (o *OracleDatabaseHost) SetSbtHostParams(v OracleSbtHostParams) {
	o.SbtHostParams = &v
}

func (o OracleDatabaseHost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.HostId.IsSet() {
		toSerialize["hostId"] = o.HostId.Get()
	}
	if o.ChannelCount != nil {
		toSerialize["channelCount"] = o.ChannelCount
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	if o.SbtHostParams != nil {
		toSerialize["sbtHostParams"] = o.SbtHostParams
	}
	return json.Marshal(toSerialize)
}

type NullableOracleDatabaseHost struct {
	value *OracleDatabaseHost
	isSet bool
}

func (v NullableOracleDatabaseHost) Get() *OracleDatabaseHost {
	return v.value
}

func (v *NullableOracleDatabaseHost) Set(val *OracleDatabaseHost) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDatabaseHost) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDatabaseHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDatabaseHost(val *OracleDatabaseHost) *NullableOracleDatabaseHost {
	return &NullableOracleDatabaseHost{value: val, isSet: true}
}

func (v NullableOracleDatabaseHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDatabaseHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


