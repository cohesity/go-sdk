/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ViewUserQuotas Specifies a list of View user quotas.
type ViewUserQuotas struct {
	// Specifies the list of View user quotas.
	UserQuotas []ViewUserQuota `json:"userQuotas,omitempty"`
	// Specifies the pagination cookie.
	Cookie NullableString `json:"cookie,omitempty"`
}

// NewViewUserQuotas instantiates a new ViewUserQuotas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewUserQuotas() *ViewUserQuotas {
	this := ViewUserQuotas{}
	return &this
}

// NewViewUserQuotasWithDefaults instantiates a new ViewUserQuotas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewUserQuotasWithDefaults() *ViewUserQuotas {
	this := ViewUserQuotas{}
	return &this
}

// GetUserQuotas returns the UserQuotas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewUserQuotas) GetUserQuotas() []ViewUserQuota {
	if o == nil  {
		var ret []ViewUserQuota
		return ret
	}
	return o.UserQuotas
}

// GetUserQuotasOk returns a tuple with the UserQuotas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewUserQuotas) GetUserQuotasOk() (*[]ViewUserQuota, bool) {
	if o == nil || o.UserQuotas == nil {
		return nil, false
	}
	return &o.UserQuotas, true
}

// HasUserQuotas returns a boolean if a field has been set.
func (o *ViewUserQuotas) HasUserQuotas() bool {
	if o != nil && o.UserQuotas != nil {
		return true
	}

	return false
}

// SetUserQuotas gets a reference to the given []ViewUserQuota and assigns it to the UserQuotas field.
func (o *ViewUserQuotas) SetUserQuotas(v []ViewUserQuota) {
	o.UserQuotas = v
}

// GetCookie returns the Cookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewUserQuotas) GetCookie() string {
	if o == nil || o.Cookie.Get() == nil {
		var ret string
		return ret
	}
	return *o.Cookie.Get()
}

// GetCookieOk returns a tuple with the Cookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewUserQuotas) GetCookieOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cookie.Get(), o.Cookie.IsSet()
}

// HasCookie returns a boolean if a field has been set.
func (o *ViewUserQuotas) HasCookie() bool {
	if o != nil && o.Cookie.IsSet() {
		return true
	}

	return false
}

// SetCookie gets a reference to the given NullableString and assigns it to the Cookie field.
func (o *ViewUserQuotas) SetCookie(v string) {
	o.Cookie.Set(&v)
}
// SetCookieNil sets the value for Cookie to be an explicit nil
func (o *ViewUserQuotas) SetCookieNil() {
	o.Cookie.Set(nil)
}

// UnsetCookie ensures that no value is present for Cookie, not even an explicit nil
func (o *ViewUserQuotas) UnsetCookie() {
	o.Cookie.Unset()
}

func (o ViewUserQuotas) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UserQuotas != nil {
		toSerialize["userQuotas"] = o.UserQuotas
	}
	if o.Cookie.IsSet() {
		toSerialize["cookie"] = o.Cookie.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableViewUserQuotas struct {
	value *ViewUserQuotas
	isSet bool
}

func (v NullableViewUserQuotas) Get() *ViewUserQuotas {
	return v.value
}

func (v *NullableViewUserQuotas) Set(val *ViewUserQuotas) {
	v.value = val
	v.isSet = true
}

func (v NullableViewUserQuotas) IsSet() bool {
	return v.isSet
}

func (v *NullableViewUserQuotas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewUserQuotas(val *ViewUserQuotas) *NullableViewUserQuotas {
	return &NullableViewUserQuotas{value: val, isSet: true}
}

func (v NullableViewUserQuotas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewUserQuotas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


