/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ExternalTargets List of External Target.
type ExternalTargets struct {
	// Specifies the list of External Targets which were returned by the request.
	ExternalTargets []ExternalTarget `json:"externalTargets,omitempty"`
}

// NewExternalTargets instantiates a new ExternalTargets object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalTargets() *ExternalTargets {
	this := ExternalTargets{}
	return &this
}

// NewExternalTargetsWithDefaults instantiates a new ExternalTargets object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalTargetsWithDefaults() *ExternalTargets {
	this := ExternalTargets{}
	return &this
}

// GetExternalTargets returns the ExternalTargets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTargets) GetExternalTargets() []ExternalTarget {
	if o == nil  {
		var ret []ExternalTarget
		return ret
	}
	return o.ExternalTargets
}

// GetExternalTargetsOk returns a tuple with the ExternalTargets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTargets) GetExternalTargetsOk() (*[]ExternalTarget, bool) {
	if o == nil || o.ExternalTargets == nil {
		return nil, false
	}
	return &o.ExternalTargets, true
}

// HasExternalTargets returns a boolean if a field has been set.
func (o *ExternalTargets) HasExternalTargets() bool {
	if o != nil && o.ExternalTargets != nil {
		return true
	}

	return false
}

// SetExternalTargets gets a reference to the given []ExternalTarget and assigns it to the ExternalTargets field.
func (o *ExternalTargets) SetExternalTargets(v []ExternalTarget) {
	o.ExternalTargets = v
}

func (o ExternalTargets) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ExternalTargets != nil {
		toSerialize["externalTargets"] = o.ExternalTargets
	}
	return json.Marshal(toSerialize)
}

type NullableExternalTargets struct {
	value *ExternalTargets
	isSet bool
}

func (v NullableExternalTargets) Get() *ExternalTargets {
	return v.value
}

func (v *NullableExternalTargets) Set(val *ExternalTargets) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalTargets) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalTargets) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalTargets(val *ExternalTargets) *NullableExternalTargets {
	return &NullableExternalTargets{value: val, isSet: true}
}

func (v NullableExternalTargets) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalTargets) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


