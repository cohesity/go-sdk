/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmObjectsActivity Specifies the Objects activity.
type McmObjectsActivity struct {
	// Specifies the activity list per object.
	Activity []McmObjectActivity `json:"activity,omitempty"`
}

// NewMcmObjectsActivity instantiates a new McmObjectsActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmObjectsActivity() *McmObjectsActivity {
	this := McmObjectsActivity{}
	return &this
}

// NewMcmObjectsActivityWithDefaults instantiates a new McmObjectsActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmObjectsActivityWithDefaults() *McmObjectsActivity {
	this := McmObjectsActivity{}
	return &this
}

// GetActivity returns the Activity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmObjectsActivity) GetActivity() []McmObjectActivity {
	if o == nil  {
		var ret []McmObjectActivity
		return ret
	}
	return o.Activity
}

// GetActivityOk returns a tuple with the Activity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmObjectsActivity) GetActivityOk() (*[]McmObjectActivity, bool) {
	if o == nil || o.Activity == nil {
		return nil, false
	}
	return &o.Activity, true
}

// HasActivity returns a boolean if a field has been set.
func (o *McmObjectsActivity) HasActivity() bool {
	if o != nil && o.Activity != nil {
		return true
	}

	return false
}

// SetActivity gets a reference to the given []McmObjectActivity and assigns it to the Activity field.
func (o *McmObjectsActivity) SetActivity(v []McmObjectActivity) {
	o.Activity = v
}

func (o McmObjectsActivity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Activity != nil {
		toSerialize["activity"] = o.Activity
	}
	return json.Marshal(toSerialize)
}

type NullableMcmObjectsActivity struct {
	value *McmObjectsActivity
	isSet bool
}

func (v NullableMcmObjectsActivity) Get() *McmObjectsActivity {
	return v.value
}

func (v *NullableMcmObjectsActivity) Set(val *McmObjectsActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmObjectsActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmObjectsActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmObjectsActivity(val *McmObjectsActivity) *NullableMcmObjectsActivity {
	return &NullableMcmObjectsActivity{value: val, isSet: true}
}

func (v NullableMcmObjectsActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmObjectsActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


