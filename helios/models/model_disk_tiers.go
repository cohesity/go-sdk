/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// DiskTiers Disk Tiers
type DiskTiers struct {
	// Disk Tiers
	DiskTiers *string `json:"diskTiers,omitempty"`
}

// NewDiskTiers instantiates a new DiskTiers object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskTiers() *DiskTiers {
	this := DiskTiers{}
	return &this
}

// NewDiskTiersWithDefaults instantiates a new DiskTiers object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskTiersWithDefaults() *DiskTiers {
	this := DiskTiers{}
	return &this
}

// GetDiskTiers returns the DiskTiers field value if set, zero value otherwise.
func (o *DiskTiers) GetDiskTiers() string {
	if o == nil || o.DiskTiers == nil {
		var ret string
		return ret
	}
	return *o.DiskTiers
}

// GetDiskTiersOk returns a tuple with the DiskTiers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DiskTiers) GetDiskTiersOk() (*string, bool) {
	if o == nil || o.DiskTiers == nil {
		return nil, false
	}
	return o.DiskTiers, true
}

// HasDiskTiers returns a boolean if a field has been set.
func (o *DiskTiers) HasDiskTiers() bool {
	if o != nil && o.DiskTiers != nil {
		return true
	}

	return false
}

// SetDiskTiers gets a reference to the given string and assigns it to the DiskTiers field.
func (o *DiskTiers) SetDiskTiers(v string) {
	o.DiskTiers = &v
}

func (o DiskTiers) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DiskTiers != nil {
		toSerialize["diskTiers"] = o.DiskTiers
	}
	return json.Marshal(toSerialize)
}

type NullableDiskTiers struct {
	value *DiskTiers
	isSet bool
}

func (v NullableDiskTiers) Get() *DiskTiers {
	return v.value
}

func (v *NullableDiskTiers) Set(val *DiskTiers) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskTiers) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskTiers) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskTiers(val *DiskTiers) *NullableDiskTiers {
	return &NullableDiskTiers{value: val, isSet: true}
}

func (v NullableDiskTiers) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskTiers) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


