/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// HeliosTier Specifies the Helios Tier details.
type HeliosTier struct {
	// Specifies the tier type.
	Type NullableString `json:"type,omitempty"`
	// Specifies whether the current tier will be the default tier for primary retention.
	IsDefaultTier NullableBool `json:"isDefaultTier,omitempty"`
	// Specificies the time unit after which backup will be moved to next tier.
	Unit NullableString `json:"unit,omitempty"`
	// Specifies the duration after which the backup will be moved to next tier.
	MoveAfter NullableInt64 `json:"moveAfter,omitempty"`
}

// NewHeliosTier instantiates a new HeliosTier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHeliosTier() *HeliosTier {
	this := HeliosTier{}
	return &this
}

// NewHeliosTierWithDefaults instantiates a new HeliosTier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHeliosTierWithDefaults() *HeliosTier {
	this := HeliosTier{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTier) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTier) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *HeliosTier) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *HeliosTier) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *HeliosTier) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *HeliosTier) UnsetType() {
	o.Type.Unset()
}

// GetIsDefaultTier returns the IsDefaultTier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTier) GetIsDefaultTier() bool {
	if o == nil || o.IsDefaultTier.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsDefaultTier.Get()
}

// GetIsDefaultTierOk returns a tuple with the IsDefaultTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTier) GetIsDefaultTierOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsDefaultTier.Get(), o.IsDefaultTier.IsSet()
}

// HasIsDefaultTier returns a boolean if a field has been set.
func (o *HeliosTier) HasIsDefaultTier() bool {
	if o != nil && o.IsDefaultTier.IsSet() {
		return true
	}

	return false
}

// SetIsDefaultTier gets a reference to the given NullableBool and assigns it to the IsDefaultTier field.
func (o *HeliosTier) SetIsDefaultTier(v bool) {
	o.IsDefaultTier.Set(&v)
}
// SetIsDefaultTierNil sets the value for IsDefaultTier to be an explicit nil
func (o *HeliosTier) SetIsDefaultTierNil() {
	o.IsDefaultTier.Set(nil)
}

// UnsetIsDefaultTier ensures that no value is present for IsDefaultTier, not even an explicit nil
func (o *HeliosTier) UnsetIsDefaultTier() {
	o.IsDefaultTier.Unset()
}

// GetUnit returns the Unit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTier) GetUnit() string {
	if o == nil || o.Unit.Get() == nil {
		var ret string
		return ret
	}
	return *o.Unit.Get()
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTier) GetUnitOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Unit.Get(), o.Unit.IsSet()
}

// HasUnit returns a boolean if a field has been set.
func (o *HeliosTier) HasUnit() bool {
	if o != nil && o.Unit.IsSet() {
		return true
	}

	return false
}

// SetUnit gets a reference to the given NullableString and assigns it to the Unit field.
func (o *HeliosTier) SetUnit(v string) {
	o.Unit.Set(&v)
}
// SetUnitNil sets the value for Unit to be an explicit nil
func (o *HeliosTier) SetUnitNil() {
	o.Unit.Set(nil)
}

// UnsetUnit ensures that no value is present for Unit, not even an explicit nil
func (o *HeliosTier) UnsetUnit() {
	o.Unit.Unset()
}

// GetMoveAfter returns the MoveAfter field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HeliosTier) GetMoveAfter() int64 {
	if o == nil || o.MoveAfter.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MoveAfter.Get()
}

// GetMoveAfterOk returns a tuple with the MoveAfter field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HeliosTier) GetMoveAfterOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MoveAfter.Get(), o.MoveAfter.IsSet()
}

// HasMoveAfter returns a boolean if a field has been set.
func (o *HeliosTier) HasMoveAfter() bool {
	if o != nil && o.MoveAfter.IsSet() {
		return true
	}

	return false
}

// SetMoveAfter gets a reference to the given NullableInt64 and assigns it to the MoveAfter field.
func (o *HeliosTier) SetMoveAfter(v int64) {
	o.MoveAfter.Set(&v)
}
// SetMoveAfterNil sets the value for MoveAfter to be an explicit nil
func (o *HeliosTier) SetMoveAfterNil() {
	o.MoveAfter.Set(nil)
}

// UnsetMoveAfter ensures that no value is present for MoveAfter, not even an explicit nil
func (o *HeliosTier) UnsetMoveAfter() {
	o.MoveAfter.Unset()
}

func (o HeliosTier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.IsDefaultTier.IsSet() {
		toSerialize["isDefaultTier"] = o.IsDefaultTier.Get()
	}
	if o.Unit.IsSet() {
		toSerialize["unit"] = o.Unit.Get()
	}
	if o.MoveAfter.IsSet() {
		toSerialize["moveAfter"] = o.MoveAfter.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHeliosTier struct {
	value *HeliosTier
	isSet bool
}

func (v NullableHeliosTier) Get() *HeliosTier {
	return v.value
}

func (v *NullableHeliosTier) Set(val *HeliosTier) {
	v.value = val
	v.isSet = true
}

func (v NullableHeliosTier) IsSet() bool {
	return v.isSet
}

func (v *NullableHeliosTier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHeliosTier(val *HeliosTier) *NullableHeliosTier {
	return &NullableHeliosTier{value: val, isSet: true}
}

func (v NullableHeliosTier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHeliosTier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


