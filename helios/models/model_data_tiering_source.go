/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// DataTieringSource Specifies the source data tiering details.
type DataTieringSource struct {
	// Specifies the environment type of the data tiering source.
	Environment NullableString `json:"environment,omitempty"`
	GenericNasParams *GenericNasDataTieringParams `json:"genericNasParams,omitempty"`
	IsilonParams *IsilonDataTieringParams `json:"isilonParams,omitempty"`
	NetappParams *NetappDataTieringParams `json:"netappParams,omitempty"`
}

// NewDataTieringSource instantiates a new DataTieringSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataTieringSource() *DataTieringSource {
	this := DataTieringSource{}
	return &this
}

// NewDataTieringSourceWithDefaults instantiates a new DataTieringSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataTieringSourceWithDefaults() *DataTieringSource {
	this := DataTieringSource{}
	return &this
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataTieringSource) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataTieringSource) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *DataTieringSource) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *DataTieringSource) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *DataTieringSource) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *DataTieringSource) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetGenericNasParams returns the GenericNasParams field value if set, zero value otherwise.
func (o *DataTieringSource) GetGenericNasParams() GenericNasDataTieringParams {
	if o == nil || o.GenericNasParams == nil {
		var ret GenericNasDataTieringParams
		return ret
	}
	return *o.GenericNasParams
}

// GetGenericNasParamsOk returns a tuple with the GenericNasParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringSource) GetGenericNasParamsOk() (*GenericNasDataTieringParams, bool) {
	if o == nil || o.GenericNasParams == nil {
		return nil, false
	}
	return o.GenericNasParams, true
}

// HasGenericNasParams returns a boolean if a field has been set.
func (o *DataTieringSource) HasGenericNasParams() bool {
	if o != nil && o.GenericNasParams != nil {
		return true
	}

	return false
}

// SetGenericNasParams gets a reference to the given GenericNasDataTieringParams and assigns it to the GenericNasParams field.
func (o *DataTieringSource) SetGenericNasParams(v GenericNasDataTieringParams) {
	o.GenericNasParams = &v
}

// GetIsilonParams returns the IsilonParams field value if set, zero value otherwise.
func (o *DataTieringSource) GetIsilonParams() IsilonDataTieringParams {
	if o == nil || o.IsilonParams == nil {
		var ret IsilonDataTieringParams
		return ret
	}
	return *o.IsilonParams
}

// GetIsilonParamsOk returns a tuple with the IsilonParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringSource) GetIsilonParamsOk() (*IsilonDataTieringParams, bool) {
	if o == nil || o.IsilonParams == nil {
		return nil, false
	}
	return o.IsilonParams, true
}

// HasIsilonParams returns a boolean if a field has been set.
func (o *DataTieringSource) HasIsilonParams() bool {
	if o != nil && o.IsilonParams != nil {
		return true
	}

	return false
}

// SetIsilonParams gets a reference to the given IsilonDataTieringParams and assigns it to the IsilonParams field.
func (o *DataTieringSource) SetIsilonParams(v IsilonDataTieringParams) {
	o.IsilonParams = &v
}

// GetNetappParams returns the NetappParams field value if set, zero value otherwise.
func (o *DataTieringSource) GetNetappParams() NetappDataTieringParams {
	if o == nil || o.NetappParams == nil {
		var ret NetappDataTieringParams
		return ret
	}
	return *o.NetappParams
}

// GetNetappParamsOk returns a tuple with the NetappParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DataTieringSource) GetNetappParamsOk() (*NetappDataTieringParams, bool) {
	if o == nil || o.NetappParams == nil {
		return nil, false
	}
	return o.NetappParams, true
}

// HasNetappParams returns a boolean if a field has been set.
func (o *DataTieringSource) HasNetappParams() bool {
	if o != nil && o.NetappParams != nil {
		return true
	}

	return false
}

// SetNetappParams gets a reference to the given NetappDataTieringParams and assigns it to the NetappParams field.
func (o *DataTieringSource) SetNetappParams(v NetappDataTieringParams) {
	o.NetappParams = &v
}

func (o DataTieringSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.GenericNasParams != nil {
		toSerialize["genericNasParams"] = o.GenericNasParams
	}
	if o.IsilonParams != nil {
		toSerialize["isilonParams"] = o.IsilonParams
	}
	if o.NetappParams != nil {
		toSerialize["netappParams"] = o.NetappParams
	}
	return json.Marshal(toSerialize)
}

type NullableDataTieringSource struct {
	value *DataTieringSource
	isSet bool
}

func (v NullableDataTieringSource) Get() *DataTieringSource {
	return v.value
}

func (v *NullableDataTieringSource) Set(val *DataTieringSource) {
	v.value = val
	v.isSet = true
}

func (v NullableDataTieringSource) IsSet() bool {
	return v.isSet
}

func (v *NullableDataTieringSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataTieringSource(val *DataTieringSource) *NullableDataTieringSource {
	return &NullableDataTieringSource{value: val, isSet: true}
}

func (v NullableDataTieringSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataTieringSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


