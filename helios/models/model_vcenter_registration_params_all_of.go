/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// VcenterRegistrationParamsAllOf struct for VcenterRegistrationParamsAllOf
type VcenterRegistrationParamsAllOf struct {
	// Specifies the CA certificate to enable SSL communication between host and cluster.
	CaCert NullableString `json:"caCert,omitempty"`
	// Specifies to use VM BIOS UUID to track virtual machines in the host.
	UseVmBiosUuid NullableBool `json:"useVmBiosUuid,omitempty"`
	// Specifies the minimum free space (in GB) expected to be available in the datastore where the virtual disks of the VM being backed up reside. If the space available is lower than the specified value, backup will be aborted.
	MinFreeDatastoreSpaceForBackupGb NullableInt64 `json:"minFreeDatastoreSpaceForBackupGb,omitempty"`
	ThrottlingParams *VmwareThrottlingParams `json:"throttlingParams,omitempty"`
	// Specifies datastore specific parameters.
	DataStoreParams []DatastoreParams `json:"dataStoreParams,omitempty"`
}

// NewVcenterRegistrationParamsAllOf instantiates a new VcenterRegistrationParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVcenterRegistrationParamsAllOf() *VcenterRegistrationParamsAllOf {
	this := VcenterRegistrationParamsAllOf{}
	return &this
}

// NewVcenterRegistrationParamsAllOfWithDefaults instantiates a new VcenterRegistrationParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVcenterRegistrationParamsAllOfWithDefaults() *VcenterRegistrationParamsAllOf {
	this := VcenterRegistrationParamsAllOf{}
	return &this
}

// GetCaCert returns the CaCert field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VcenterRegistrationParamsAllOf) GetCaCert() string {
	if o == nil || o.CaCert.Get() == nil {
		var ret string
		return ret
	}
	return *o.CaCert.Get()
}

// GetCaCertOk returns a tuple with the CaCert field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VcenterRegistrationParamsAllOf) GetCaCertOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CaCert.Get(), o.CaCert.IsSet()
}

// HasCaCert returns a boolean if a field has been set.
func (o *VcenterRegistrationParamsAllOf) HasCaCert() bool {
	if o != nil && o.CaCert.IsSet() {
		return true
	}

	return false
}

// SetCaCert gets a reference to the given NullableString and assigns it to the CaCert field.
func (o *VcenterRegistrationParamsAllOf) SetCaCert(v string) {
	o.CaCert.Set(&v)
}
// SetCaCertNil sets the value for CaCert to be an explicit nil
func (o *VcenterRegistrationParamsAllOf) SetCaCertNil() {
	o.CaCert.Set(nil)
}

// UnsetCaCert ensures that no value is present for CaCert, not even an explicit nil
func (o *VcenterRegistrationParamsAllOf) UnsetCaCert() {
	o.CaCert.Unset()
}

// GetUseVmBiosUuid returns the UseVmBiosUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VcenterRegistrationParamsAllOf) GetUseVmBiosUuid() bool {
	if o == nil || o.UseVmBiosUuid.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseVmBiosUuid.Get()
}

// GetUseVmBiosUuidOk returns a tuple with the UseVmBiosUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VcenterRegistrationParamsAllOf) GetUseVmBiosUuidOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseVmBiosUuid.Get(), o.UseVmBiosUuid.IsSet()
}

// HasUseVmBiosUuid returns a boolean if a field has been set.
func (o *VcenterRegistrationParamsAllOf) HasUseVmBiosUuid() bool {
	if o != nil && o.UseVmBiosUuid.IsSet() {
		return true
	}

	return false
}

// SetUseVmBiosUuid gets a reference to the given NullableBool and assigns it to the UseVmBiosUuid field.
func (o *VcenterRegistrationParamsAllOf) SetUseVmBiosUuid(v bool) {
	o.UseVmBiosUuid.Set(&v)
}
// SetUseVmBiosUuidNil sets the value for UseVmBiosUuid to be an explicit nil
func (o *VcenterRegistrationParamsAllOf) SetUseVmBiosUuidNil() {
	o.UseVmBiosUuid.Set(nil)
}

// UnsetUseVmBiosUuid ensures that no value is present for UseVmBiosUuid, not even an explicit nil
func (o *VcenterRegistrationParamsAllOf) UnsetUseVmBiosUuid() {
	o.UseVmBiosUuid.Unset()
}

// GetMinFreeDatastoreSpaceForBackupGb returns the MinFreeDatastoreSpaceForBackupGb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VcenterRegistrationParamsAllOf) GetMinFreeDatastoreSpaceForBackupGb() int64 {
	if o == nil || o.MinFreeDatastoreSpaceForBackupGb.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MinFreeDatastoreSpaceForBackupGb.Get()
}

// GetMinFreeDatastoreSpaceForBackupGbOk returns a tuple with the MinFreeDatastoreSpaceForBackupGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VcenterRegistrationParamsAllOf) GetMinFreeDatastoreSpaceForBackupGbOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinFreeDatastoreSpaceForBackupGb.Get(), o.MinFreeDatastoreSpaceForBackupGb.IsSet()
}

// HasMinFreeDatastoreSpaceForBackupGb returns a boolean if a field has been set.
func (o *VcenterRegistrationParamsAllOf) HasMinFreeDatastoreSpaceForBackupGb() bool {
	if o != nil && o.MinFreeDatastoreSpaceForBackupGb.IsSet() {
		return true
	}

	return false
}

// SetMinFreeDatastoreSpaceForBackupGb gets a reference to the given NullableInt64 and assigns it to the MinFreeDatastoreSpaceForBackupGb field.
func (o *VcenterRegistrationParamsAllOf) SetMinFreeDatastoreSpaceForBackupGb(v int64) {
	o.MinFreeDatastoreSpaceForBackupGb.Set(&v)
}
// SetMinFreeDatastoreSpaceForBackupGbNil sets the value for MinFreeDatastoreSpaceForBackupGb to be an explicit nil
func (o *VcenterRegistrationParamsAllOf) SetMinFreeDatastoreSpaceForBackupGbNil() {
	o.MinFreeDatastoreSpaceForBackupGb.Set(nil)
}

// UnsetMinFreeDatastoreSpaceForBackupGb ensures that no value is present for MinFreeDatastoreSpaceForBackupGb, not even an explicit nil
func (o *VcenterRegistrationParamsAllOf) UnsetMinFreeDatastoreSpaceForBackupGb() {
	o.MinFreeDatastoreSpaceForBackupGb.Unset()
}

// GetThrottlingParams returns the ThrottlingParams field value if set, zero value otherwise.
func (o *VcenterRegistrationParamsAllOf) GetThrottlingParams() VmwareThrottlingParams {
	if o == nil || o.ThrottlingParams == nil {
		var ret VmwareThrottlingParams
		return ret
	}
	return *o.ThrottlingParams
}

// GetThrottlingParamsOk returns a tuple with the ThrottlingParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VcenterRegistrationParamsAllOf) GetThrottlingParamsOk() (*VmwareThrottlingParams, bool) {
	if o == nil || o.ThrottlingParams == nil {
		return nil, false
	}
	return o.ThrottlingParams, true
}

// HasThrottlingParams returns a boolean if a field has been set.
func (o *VcenterRegistrationParamsAllOf) HasThrottlingParams() bool {
	if o != nil && o.ThrottlingParams != nil {
		return true
	}

	return false
}

// SetThrottlingParams gets a reference to the given VmwareThrottlingParams and assigns it to the ThrottlingParams field.
func (o *VcenterRegistrationParamsAllOf) SetThrottlingParams(v VmwareThrottlingParams) {
	o.ThrottlingParams = &v
}

// GetDataStoreParams returns the DataStoreParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VcenterRegistrationParamsAllOf) GetDataStoreParams() []DatastoreParams {
	if o == nil  {
		var ret []DatastoreParams
		return ret
	}
	return o.DataStoreParams
}

// GetDataStoreParamsOk returns a tuple with the DataStoreParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VcenterRegistrationParamsAllOf) GetDataStoreParamsOk() (*[]DatastoreParams, bool) {
	if o == nil || o.DataStoreParams == nil {
		return nil, false
	}
	return &o.DataStoreParams, true
}

// HasDataStoreParams returns a boolean if a field has been set.
func (o *VcenterRegistrationParamsAllOf) HasDataStoreParams() bool {
	if o != nil && o.DataStoreParams != nil {
		return true
	}

	return false
}

// SetDataStoreParams gets a reference to the given []DatastoreParams and assigns it to the DataStoreParams field.
func (o *VcenterRegistrationParamsAllOf) SetDataStoreParams(v []DatastoreParams) {
	o.DataStoreParams = v
}

func (o VcenterRegistrationParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CaCert.IsSet() {
		toSerialize["caCert"] = o.CaCert.Get()
	}
	if o.UseVmBiosUuid.IsSet() {
		toSerialize["useVmBiosUuid"] = o.UseVmBiosUuid.Get()
	}
	if o.MinFreeDatastoreSpaceForBackupGb.IsSet() {
		toSerialize["minFreeDatastoreSpaceForBackupGb"] = o.MinFreeDatastoreSpaceForBackupGb.Get()
	}
	if o.ThrottlingParams != nil {
		toSerialize["throttlingParams"] = o.ThrottlingParams
	}
	if o.DataStoreParams != nil {
		toSerialize["dataStoreParams"] = o.DataStoreParams
	}
	return json.Marshal(toSerialize)
}

type NullableVcenterRegistrationParamsAllOf struct {
	value *VcenterRegistrationParamsAllOf
	isSet bool
}

func (v NullableVcenterRegistrationParamsAllOf) Get() *VcenterRegistrationParamsAllOf {
	return v.value
}

func (v *NullableVcenterRegistrationParamsAllOf) Set(val *VcenterRegistrationParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableVcenterRegistrationParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableVcenterRegistrationParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVcenterRegistrationParamsAllOf(val *VcenterRegistrationParamsAllOf) *NullableVcenterRegistrationParamsAllOf {
	return &NullableVcenterRegistrationParamsAllOf{value: val, isSet: true}
}

func (v NullableVcenterRegistrationParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVcenterRegistrationParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


