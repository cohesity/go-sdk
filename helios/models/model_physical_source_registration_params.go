/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// PhysicalSourceRegistrationParams Specifies parameters to register physical server.
type PhysicalSourceRegistrationParams struct {
	// Specifies the endpoint IPaddress, URL or hostname of the physical host.
	Endpoint string `json:"endpoint"`
	// The agent running on a physical host will fail the registration if it is already registered as part of another cluster. By setting this option to true, agent can be forced to register with the current cluster.
	ForceRegister NullableBool `json:"forceRegister,omitempty"`
	// Specifies the type of host.
	HostType NullableString `json:"hostType,omitempty"`
	// Specifies the type of physical server.
	PhysicalType NullableString `json:"physicalType,omitempty"`
	// Specifies the list of applications to be registered with Physical Source.
	Applications []string `json:"applications,omitempty"`
}

// NewPhysicalSourceRegistrationParams instantiates a new PhysicalSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalSourceRegistrationParams(endpoint string) *PhysicalSourceRegistrationParams {
	this := PhysicalSourceRegistrationParams{}
	this.Endpoint = endpoint
	return &this
}

// NewPhysicalSourceRegistrationParamsWithDefaults instantiates a new PhysicalSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalSourceRegistrationParamsWithDefaults() *PhysicalSourceRegistrationParams {
	this := PhysicalSourceRegistrationParams{}
	return &this
}

// GetEndpoint returns the Endpoint field value
func (o *PhysicalSourceRegistrationParams) GetEndpoint() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Endpoint
}

// GetEndpointOk returns a tuple with the Endpoint field value
// and a boolean to check if the value has been set.
func (o *PhysicalSourceRegistrationParams) GetEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Endpoint, true
}

// SetEndpoint sets field value
func (o *PhysicalSourceRegistrationParams) SetEndpoint(v string) {
	o.Endpoint = v
}

// GetForceRegister returns the ForceRegister field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalSourceRegistrationParams) GetForceRegister() bool {
	if o == nil || o.ForceRegister.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ForceRegister.Get()
}

// GetForceRegisterOk returns a tuple with the ForceRegister field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalSourceRegistrationParams) GetForceRegisterOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ForceRegister.Get(), o.ForceRegister.IsSet()
}

// HasForceRegister returns a boolean if a field has been set.
func (o *PhysicalSourceRegistrationParams) HasForceRegister() bool {
	if o != nil && o.ForceRegister.IsSet() {
		return true
	}

	return false
}

// SetForceRegister gets a reference to the given NullableBool and assigns it to the ForceRegister field.
func (o *PhysicalSourceRegistrationParams) SetForceRegister(v bool) {
	o.ForceRegister.Set(&v)
}
// SetForceRegisterNil sets the value for ForceRegister to be an explicit nil
func (o *PhysicalSourceRegistrationParams) SetForceRegisterNil() {
	o.ForceRegister.Set(nil)
}

// UnsetForceRegister ensures that no value is present for ForceRegister, not even an explicit nil
func (o *PhysicalSourceRegistrationParams) UnsetForceRegister() {
	o.ForceRegister.Unset()
}

// GetHostType returns the HostType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalSourceRegistrationParams) GetHostType() string {
	if o == nil || o.HostType.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostType.Get()
}

// GetHostTypeOk returns a tuple with the HostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalSourceRegistrationParams) GetHostTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostType.Get(), o.HostType.IsSet()
}

// HasHostType returns a boolean if a field has been set.
func (o *PhysicalSourceRegistrationParams) HasHostType() bool {
	if o != nil && o.HostType.IsSet() {
		return true
	}

	return false
}

// SetHostType gets a reference to the given NullableString and assigns it to the HostType field.
func (o *PhysicalSourceRegistrationParams) SetHostType(v string) {
	o.HostType.Set(&v)
}
// SetHostTypeNil sets the value for HostType to be an explicit nil
func (o *PhysicalSourceRegistrationParams) SetHostTypeNil() {
	o.HostType.Set(nil)
}

// UnsetHostType ensures that no value is present for HostType, not even an explicit nil
func (o *PhysicalSourceRegistrationParams) UnsetHostType() {
	o.HostType.Unset()
}

// GetPhysicalType returns the PhysicalType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalSourceRegistrationParams) GetPhysicalType() string {
	if o == nil || o.PhysicalType.Get() == nil {
		var ret string
		return ret
	}
	return *o.PhysicalType.Get()
}

// GetPhysicalTypeOk returns a tuple with the PhysicalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalSourceRegistrationParams) GetPhysicalTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalType.Get(), o.PhysicalType.IsSet()
}

// HasPhysicalType returns a boolean if a field has been set.
func (o *PhysicalSourceRegistrationParams) HasPhysicalType() bool {
	if o != nil && o.PhysicalType.IsSet() {
		return true
	}

	return false
}

// SetPhysicalType gets a reference to the given NullableString and assigns it to the PhysicalType field.
func (o *PhysicalSourceRegistrationParams) SetPhysicalType(v string) {
	o.PhysicalType.Set(&v)
}
// SetPhysicalTypeNil sets the value for PhysicalType to be an explicit nil
func (o *PhysicalSourceRegistrationParams) SetPhysicalTypeNil() {
	o.PhysicalType.Set(nil)
}

// UnsetPhysicalType ensures that no value is present for PhysicalType, not even an explicit nil
func (o *PhysicalSourceRegistrationParams) UnsetPhysicalType() {
	o.PhysicalType.Unset()
}

// GetApplications returns the Applications field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalSourceRegistrationParams) GetApplications() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Applications
}

// GetApplicationsOk returns a tuple with the Applications field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalSourceRegistrationParams) GetApplicationsOk() (*[]string, bool) {
	if o == nil || o.Applications == nil {
		return nil, false
	}
	return &o.Applications, true
}

// HasApplications returns a boolean if a field has been set.
func (o *PhysicalSourceRegistrationParams) HasApplications() bool {
	if o != nil && o.Applications != nil {
		return true
	}

	return false
}

// SetApplications gets a reference to the given []string and assigns it to the Applications field.
func (o *PhysicalSourceRegistrationParams) SetApplications(v []string) {
	o.Applications = v
}

func (o PhysicalSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["endpoint"] = o.Endpoint
	}
	if o.ForceRegister.IsSet() {
		toSerialize["forceRegister"] = o.ForceRegister.Get()
	}
	if o.HostType.IsSet() {
		toSerialize["hostType"] = o.HostType.Get()
	}
	if o.PhysicalType.IsSet() {
		toSerialize["physicalType"] = o.PhysicalType.Get()
	}
	if o.Applications != nil {
		toSerialize["applications"] = o.Applications
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalSourceRegistrationParams struct {
	value *PhysicalSourceRegistrationParams
	isSet bool
}

func (v NullablePhysicalSourceRegistrationParams) Get() *PhysicalSourceRegistrationParams {
	return v.value
}

func (v *NullablePhysicalSourceRegistrationParams) Set(val *PhysicalSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalSourceRegistrationParams(val *PhysicalSourceRegistrationParams) *NullablePhysicalSourceRegistrationParams {
	return &NullablePhysicalSourceRegistrationParams{value: val, isSet: true}
}

func (v NullablePhysicalSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


