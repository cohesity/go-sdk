/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// DeduplicationParams Specifies parameters for deduplication.
type DeduplicationParams struct {
	// Specifies whether deduplication is enabled on this Storage Domain. If enabled, cohesity cluster will eliminate duplicate blocks and thus reducing the amount of storage space.
	Enabled NullableBool `json:"enabled,omitempty"`
	// Specifies if inline deduplication is enabled. This field is appliciable only if deduplicationEnabled is set to true.
	InlineEnabled NullableBool `json:"inlineEnabled,omitempty"`
}

// NewDeduplicationParams instantiates a new DeduplicationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeduplicationParams() *DeduplicationParams {
	this := DeduplicationParams{}
	return &this
}

// NewDeduplicationParamsWithDefaults instantiates a new DeduplicationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeduplicationParamsWithDefaults() *DeduplicationParams {
	this := DeduplicationParams{}
	return &this
}

// GetEnabled returns the Enabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeduplicationParams) GetEnabled() bool {
	if o == nil || o.Enabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Enabled.Get()
}

// GetEnabledOk returns a tuple with the Enabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeduplicationParams) GetEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Enabled.Get(), o.Enabled.IsSet()
}

// HasEnabled returns a boolean if a field has been set.
func (o *DeduplicationParams) HasEnabled() bool {
	if o != nil && o.Enabled.IsSet() {
		return true
	}

	return false
}

// SetEnabled gets a reference to the given NullableBool and assigns it to the Enabled field.
func (o *DeduplicationParams) SetEnabled(v bool) {
	o.Enabled.Set(&v)
}
// SetEnabledNil sets the value for Enabled to be an explicit nil
func (o *DeduplicationParams) SetEnabledNil() {
	o.Enabled.Set(nil)
}

// UnsetEnabled ensures that no value is present for Enabled, not even an explicit nil
func (o *DeduplicationParams) UnsetEnabled() {
	o.Enabled.Unset()
}

// GetInlineEnabled returns the InlineEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DeduplicationParams) GetInlineEnabled() bool {
	if o == nil || o.InlineEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.InlineEnabled.Get()
}

// GetInlineEnabledOk returns a tuple with the InlineEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeduplicationParams) GetInlineEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.InlineEnabled.Get(), o.InlineEnabled.IsSet()
}

// HasInlineEnabled returns a boolean if a field has been set.
func (o *DeduplicationParams) HasInlineEnabled() bool {
	if o != nil && o.InlineEnabled.IsSet() {
		return true
	}

	return false
}

// SetInlineEnabled gets a reference to the given NullableBool and assigns it to the InlineEnabled field.
func (o *DeduplicationParams) SetInlineEnabled(v bool) {
	o.InlineEnabled.Set(&v)
}
// SetInlineEnabledNil sets the value for InlineEnabled to be an explicit nil
func (o *DeduplicationParams) SetInlineEnabledNil() {
	o.InlineEnabled.Set(nil)
}

// UnsetInlineEnabled ensures that no value is present for InlineEnabled, not even an explicit nil
func (o *DeduplicationParams) UnsetInlineEnabled() {
	o.InlineEnabled.Unset()
}

func (o DeduplicationParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Enabled.IsSet() {
		toSerialize["enabled"] = o.Enabled.Get()
	}
	if o.InlineEnabled.IsSet() {
		toSerialize["inlineEnabled"] = o.InlineEnabled.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeduplicationParams struct {
	value *DeduplicationParams
	isSet bool
}

func (v NullableDeduplicationParams) Get() *DeduplicationParams {
	return v.value
}

func (v *NullableDeduplicationParams) Set(val *DeduplicationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableDeduplicationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableDeduplicationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeduplicationParams(val *DeduplicationParams) *NullableDeduplicationParams {
	return &NullableDeduplicationParams{value: val, isSet: true}
}

func (v NullableDeduplicationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeduplicationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


