/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ExternalTarget External Target.
type ExternalTarget struct {
	// Specifies the ID of the External Target.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the name of the External Target.
	Name NullableString `json:"name"`
	// Specifies the purpose of the External Target.
	PurposeType NullableString `json:"purposeType"`
	// Specifies whether the type of compression of the External Target
	Compression NullableString `json:"compression,omitempty"`
	// Specifies the registration status of the External Target
	Status NullableString `json:"status,omitempty"`
	// Specifies the list of tenantIds for the External Target
	TenantIds *[]string `json:"tenantIds,omitempty"`
	// Specifies the cloud domain information.
	CloudDomains []CloudDomain `json:"cloudDomains,omitempty"`
	ArchivalParams *ArchivalExternalTargetParams `json:"archivalParams,omitempty"`
	TieringParams *TieringExternalTargetParams `json:"tieringParams,omitempty"`
}

// NewExternalTarget instantiates a new ExternalTarget object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExternalTarget(name NullableString, purposeType NullableString) *ExternalTarget {
	this := ExternalTarget{}
	this.Name = name
	this.PurposeType = purposeType
	return &this
}

// NewExternalTargetWithDefaults instantiates a new ExternalTarget object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExternalTargetWithDefaults() *ExternalTarget {
	this := ExternalTarget{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTarget) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTarget) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ExternalTarget) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ExternalTarget) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ExternalTarget) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ExternalTarget) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ExternalTarget) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTarget) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *ExternalTarget) SetName(v string) {
	o.Name.Set(&v)
}

// GetPurposeType returns the PurposeType field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ExternalTarget) GetPurposeType() string {
	if o == nil || o.PurposeType.Get() == nil {
		var ret string
		return ret
	}

	return *o.PurposeType.Get()
}

// GetPurposeTypeOk returns a tuple with the PurposeType field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTarget) GetPurposeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PurposeType.Get(), o.PurposeType.IsSet()
}

// SetPurposeType sets field value
func (o *ExternalTarget) SetPurposeType(v string) {
	o.PurposeType.Set(&v)
}

// GetCompression returns the Compression field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTarget) GetCompression() string {
	if o == nil || o.Compression.Get() == nil {
		var ret string
		return ret
	}
	return *o.Compression.Get()
}

// GetCompressionOk returns a tuple with the Compression field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTarget) GetCompressionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Compression.Get(), o.Compression.IsSet()
}

// HasCompression returns a boolean if a field has been set.
func (o *ExternalTarget) HasCompression() bool {
	if o != nil && o.Compression.IsSet() {
		return true
	}

	return false
}

// SetCompression gets a reference to the given NullableString and assigns it to the Compression field.
func (o *ExternalTarget) SetCompression(v string) {
	o.Compression.Set(&v)
}
// SetCompressionNil sets the value for Compression to be an explicit nil
func (o *ExternalTarget) SetCompressionNil() {
	o.Compression.Set(nil)
}

// UnsetCompression ensures that no value is present for Compression, not even an explicit nil
func (o *ExternalTarget) UnsetCompression() {
	o.Compression.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTarget) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTarget) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *ExternalTarget) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *ExternalTarget) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *ExternalTarget) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *ExternalTarget) UnsetStatus() {
	o.Status.Unset()
}

// GetTenantIds returns the TenantIds field value if set, zero value otherwise.
func (o *ExternalTarget) GetTenantIds() []string {
	if o == nil || o.TenantIds == nil {
		var ret []string
		return ret
	}
	return *o.TenantIds
}

// GetTenantIdsOk returns a tuple with the TenantIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalTarget) GetTenantIdsOk() (*[]string, bool) {
	if o == nil || o.TenantIds == nil {
		return nil, false
	}
	return o.TenantIds, true
}

// HasTenantIds returns a boolean if a field has been set.
func (o *ExternalTarget) HasTenantIds() bool {
	if o != nil && o.TenantIds != nil {
		return true
	}

	return false
}

// SetTenantIds gets a reference to the given []string and assigns it to the TenantIds field.
func (o *ExternalTarget) SetTenantIds(v []string) {
	o.TenantIds = &v
}

// GetCloudDomains returns the CloudDomains field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExternalTarget) GetCloudDomains() []CloudDomain {
	if o == nil  {
		var ret []CloudDomain
		return ret
	}
	return o.CloudDomains
}

// GetCloudDomainsOk returns a tuple with the CloudDomains field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExternalTarget) GetCloudDomainsOk() (*[]CloudDomain, bool) {
	if o == nil || o.CloudDomains == nil {
		return nil, false
	}
	return &o.CloudDomains, true
}

// HasCloudDomains returns a boolean if a field has been set.
func (o *ExternalTarget) HasCloudDomains() bool {
	if o != nil && o.CloudDomains != nil {
		return true
	}

	return false
}

// SetCloudDomains gets a reference to the given []CloudDomain and assigns it to the CloudDomains field.
func (o *ExternalTarget) SetCloudDomains(v []CloudDomain) {
	o.CloudDomains = v
}

// GetArchivalParams returns the ArchivalParams field value if set, zero value otherwise.
func (o *ExternalTarget) GetArchivalParams() ArchivalExternalTargetParams {
	if o == nil || o.ArchivalParams == nil {
		var ret ArchivalExternalTargetParams
		return ret
	}
	return *o.ArchivalParams
}

// GetArchivalParamsOk returns a tuple with the ArchivalParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalTarget) GetArchivalParamsOk() (*ArchivalExternalTargetParams, bool) {
	if o == nil || o.ArchivalParams == nil {
		return nil, false
	}
	return o.ArchivalParams, true
}

// HasArchivalParams returns a boolean if a field has been set.
func (o *ExternalTarget) HasArchivalParams() bool {
	if o != nil && o.ArchivalParams != nil {
		return true
	}

	return false
}

// SetArchivalParams gets a reference to the given ArchivalExternalTargetParams and assigns it to the ArchivalParams field.
func (o *ExternalTarget) SetArchivalParams(v ArchivalExternalTargetParams) {
	o.ArchivalParams = &v
}

// GetTieringParams returns the TieringParams field value if set, zero value otherwise.
func (o *ExternalTarget) GetTieringParams() TieringExternalTargetParams {
	if o == nil || o.TieringParams == nil {
		var ret TieringExternalTargetParams
		return ret
	}
	return *o.TieringParams
}

// GetTieringParamsOk returns a tuple with the TieringParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExternalTarget) GetTieringParamsOk() (*TieringExternalTargetParams, bool) {
	if o == nil || o.TieringParams == nil {
		return nil, false
	}
	return o.TieringParams, true
}

// HasTieringParams returns a boolean if a field has been set.
func (o *ExternalTarget) HasTieringParams() bool {
	if o != nil && o.TieringParams != nil {
		return true
	}

	return false
}

// SetTieringParams gets a reference to the given TieringExternalTargetParams and assigns it to the TieringParams field.
func (o *ExternalTarget) SetTieringParams(v TieringExternalTargetParams) {
	o.TieringParams = &v
}

func (o ExternalTarget) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if true {
		toSerialize["purposeType"] = o.PurposeType.Get()
	}
	if o.Compression.IsSet() {
		toSerialize["compression"] = o.Compression.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.TenantIds != nil {
		toSerialize["tenantIds"] = o.TenantIds
	}
	if o.CloudDomains != nil {
		toSerialize["cloudDomains"] = o.CloudDomains
	}
	if o.ArchivalParams != nil {
		toSerialize["archivalParams"] = o.ArchivalParams
	}
	if o.TieringParams != nil {
		toSerialize["tieringParams"] = o.TieringParams
	}
	return json.Marshal(toSerialize)
}

type NullableExternalTarget struct {
	value *ExternalTarget
	isSet bool
}

func (v NullableExternalTarget) Get() *ExternalTarget {
	return v.value
}

func (v *NullableExternalTarget) Set(val *ExternalTarget) {
	v.value = val
	v.isSet = true
}

func (v NullableExternalTarget) IsSet() bool {
	return v.isSet
}

func (v *NullableExternalTarget) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExternalTarget(val *ExternalTarget) *NullableExternalTarget {
	return &NullableExternalTarget{value: val, isSet: true}
}

func (v NullableExternalTarget) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExternalTarget) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


