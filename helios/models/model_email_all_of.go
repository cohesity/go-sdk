/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// EmailAllOf struct for EmailAllOf
type EmailAllOf struct {
	// Specifies the id of the email object.
	Id NullableString `json:"id,omitempty"`
	UserObjectInfo *ObjectSummary `json:"userObjectInfo,omitempty"`
	// Specify the name of the email folder.
	FolderName NullableString `json:"folderName,omitempty"`
	// Specifies the id of parent folder the mailbox item.
	ParentFolderId NullableInt64 `json:"parentFolderId,omitempty"`
	// Specifies the path to this mailbox item.
	Path NullableString `json:"path,omitempty"`
	// Specifies the Mailbox item type.
	Type NullableString `json:"type,omitempty"`
	// Specifies the subject of this email.
	EmailSubject NullableString `json:"emailSubject,omitempty"`
	// Specifies whether email has an attachment.
	HasAttachment NullableBool `json:"hasAttachment,omitempty"`
	// Specifies the sender's email address.
	SenderAddress NullableString `json:"senderAddress,omitempty"`
	// \"Specifies the email addresses of all receipients of this email.\"
	RecipientAddresses []string `json:"recipientAddresses,omitempty"`
	// \"Specifies the email addresses of all the CC receipients of this email.\"
	CcRecipientAddresses []string `json:"ccRecipientAddresses,omitempty"`
	// \"Specifies the email addresses of all the BCC receipients of this email.\"
	BccRecipientAddresses []string `json:"bccRecipientAddresses,omitempty"`
	// \"Specifies the Unix timestamp epoch in seconds at which this email is sent.\"
	SentTimeSecs NullableInt64 `json:"sentTimeSecs,omitempty"`
	// \"Specifies the Unix timestamp epoch in seconds at which this email is received.\"
	ReceivedTimeSecs NullableInt64 `json:"receivedTimeSecs,omitempty"`
	// \"Specifies the Protection Group id protecting the mailbox.\"
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
	// \"Specifies the Storage Domain id where the backup data of Object is present.\"
	StorageDomainId NullableInt64 `json:"storageDomainId,omitempty"`
	// \"Specify the tenant id to which this email belongs to.\"
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewEmailAllOf instantiates a new EmailAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEmailAllOf() *EmailAllOf {
	this := EmailAllOf{}
	return &this
}

// NewEmailAllOfWithDefaults instantiates a new EmailAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEmailAllOfWithDefaults() *EmailAllOf {
	this := EmailAllOf{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *EmailAllOf) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *EmailAllOf) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *EmailAllOf) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *EmailAllOf) UnsetId() {
	o.Id.Unset()
}

// GetUserObjectInfo returns the UserObjectInfo field value if set, zero value otherwise.
func (o *EmailAllOf) GetUserObjectInfo() ObjectSummary {
	if o == nil || o.UserObjectInfo == nil {
		var ret ObjectSummary
		return ret
	}
	return *o.UserObjectInfo
}

// GetUserObjectInfoOk returns a tuple with the UserObjectInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EmailAllOf) GetUserObjectInfoOk() (*ObjectSummary, bool) {
	if o == nil || o.UserObjectInfo == nil {
		return nil, false
	}
	return o.UserObjectInfo, true
}

// HasUserObjectInfo returns a boolean if a field has been set.
func (o *EmailAllOf) HasUserObjectInfo() bool {
	if o != nil && o.UserObjectInfo != nil {
		return true
	}

	return false
}

// SetUserObjectInfo gets a reference to the given ObjectSummary and assigns it to the UserObjectInfo field.
func (o *EmailAllOf) SetUserObjectInfo(v ObjectSummary) {
	o.UserObjectInfo = &v
}

// GetFolderName returns the FolderName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetFolderName() string {
	if o == nil || o.FolderName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FolderName.Get()
}

// GetFolderNameOk returns a tuple with the FolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetFolderNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FolderName.Get(), o.FolderName.IsSet()
}

// HasFolderName returns a boolean if a field has been set.
func (o *EmailAllOf) HasFolderName() bool {
	if o != nil && o.FolderName.IsSet() {
		return true
	}

	return false
}

// SetFolderName gets a reference to the given NullableString and assigns it to the FolderName field.
func (o *EmailAllOf) SetFolderName(v string) {
	o.FolderName.Set(&v)
}
// SetFolderNameNil sets the value for FolderName to be an explicit nil
func (o *EmailAllOf) SetFolderNameNil() {
	o.FolderName.Set(nil)
}

// UnsetFolderName ensures that no value is present for FolderName, not even an explicit nil
func (o *EmailAllOf) UnsetFolderName() {
	o.FolderName.Unset()
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetParentFolderId() int64 {
	if o == nil || o.ParentFolderId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ParentFolderId.Get()
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetParentFolderIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentFolderId.Get(), o.ParentFolderId.IsSet()
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *EmailAllOf) HasParentFolderId() bool {
	if o != nil && o.ParentFolderId.IsSet() {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given NullableInt64 and assigns it to the ParentFolderId field.
func (o *EmailAllOf) SetParentFolderId(v int64) {
	o.ParentFolderId.Set(&v)
}
// SetParentFolderIdNil sets the value for ParentFolderId to be an explicit nil
func (o *EmailAllOf) SetParentFolderIdNil() {
	o.ParentFolderId.Set(nil)
}

// UnsetParentFolderId ensures that no value is present for ParentFolderId, not even an explicit nil
func (o *EmailAllOf) UnsetParentFolderId() {
	o.ParentFolderId.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *EmailAllOf) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *EmailAllOf) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *EmailAllOf) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *EmailAllOf) UnsetPath() {
	o.Path.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *EmailAllOf) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *EmailAllOf) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *EmailAllOf) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *EmailAllOf) UnsetType() {
	o.Type.Unset()
}

// GetEmailSubject returns the EmailSubject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetEmailSubject() string {
	if o == nil || o.EmailSubject.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailSubject.Get()
}

// GetEmailSubjectOk returns a tuple with the EmailSubject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetEmailSubjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmailSubject.Get(), o.EmailSubject.IsSet()
}

// HasEmailSubject returns a boolean if a field has been set.
func (o *EmailAllOf) HasEmailSubject() bool {
	if o != nil && o.EmailSubject.IsSet() {
		return true
	}

	return false
}

// SetEmailSubject gets a reference to the given NullableString and assigns it to the EmailSubject field.
func (o *EmailAllOf) SetEmailSubject(v string) {
	o.EmailSubject.Set(&v)
}
// SetEmailSubjectNil sets the value for EmailSubject to be an explicit nil
func (o *EmailAllOf) SetEmailSubjectNil() {
	o.EmailSubject.Set(nil)
}

// UnsetEmailSubject ensures that no value is present for EmailSubject, not even an explicit nil
func (o *EmailAllOf) UnsetEmailSubject() {
	o.EmailSubject.Unset()
}

// GetHasAttachment returns the HasAttachment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetHasAttachment() bool {
	if o == nil || o.HasAttachment.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasAttachment.Get()
}

// GetHasAttachmentOk returns a tuple with the HasAttachment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetHasAttachmentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasAttachment.Get(), o.HasAttachment.IsSet()
}

// HasHasAttachment returns a boolean if a field has been set.
func (o *EmailAllOf) HasHasAttachment() bool {
	if o != nil && o.HasAttachment.IsSet() {
		return true
	}

	return false
}

// SetHasAttachment gets a reference to the given NullableBool and assigns it to the HasAttachment field.
func (o *EmailAllOf) SetHasAttachment(v bool) {
	o.HasAttachment.Set(&v)
}
// SetHasAttachmentNil sets the value for HasAttachment to be an explicit nil
func (o *EmailAllOf) SetHasAttachmentNil() {
	o.HasAttachment.Set(nil)
}

// UnsetHasAttachment ensures that no value is present for HasAttachment, not even an explicit nil
func (o *EmailAllOf) UnsetHasAttachment() {
	o.HasAttachment.Unset()
}

// GetSenderAddress returns the SenderAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetSenderAddress() string {
	if o == nil || o.SenderAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.SenderAddress.Get()
}

// GetSenderAddressOk returns a tuple with the SenderAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetSenderAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SenderAddress.Get(), o.SenderAddress.IsSet()
}

// HasSenderAddress returns a boolean if a field has been set.
func (o *EmailAllOf) HasSenderAddress() bool {
	if o != nil && o.SenderAddress.IsSet() {
		return true
	}

	return false
}

// SetSenderAddress gets a reference to the given NullableString and assigns it to the SenderAddress field.
func (o *EmailAllOf) SetSenderAddress(v string) {
	o.SenderAddress.Set(&v)
}
// SetSenderAddressNil sets the value for SenderAddress to be an explicit nil
func (o *EmailAllOf) SetSenderAddressNil() {
	o.SenderAddress.Set(nil)
}

// UnsetSenderAddress ensures that no value is present for SenderAddress, not even an explicit nil
func (o *EmailAllOf) UnsetSenderAddress() {
	o.SenderAddress.Unset()
}

// GetRecipientAddresses returns the RecipientAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetRecipientAddresses() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.RecipientAddresses
}

// GetRecipientAddressesOk returns a tuple with the RecipientAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetRecipientAddressesOk() (*[]string, bool) {
	if o == nil || o.RecipientAddresses == nil {
		return nil, false
	}
	return &o.RecipientAddresses, true
}

// HasRecipientAddresses returns a boolean if a field has been set.
func (o *EmailAllOf) HasRecipientAddresses() bool {
	if o != nil && o.RecipientAddresses != nil {
		return true
	}

	return false
}

// SetRecipientAddresses gets a reference to the given []string and assigns it to the RecipientAddresses field.
func (o *EmailAllOf) SetRecipientAddresses(v []string) {
	o.RecipientAddresses = v
}

// GetCcRecipientAddresses returns the CcRecipientAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetCcRecipientAddresses() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.CcRecipientAddresses
}

// GetCcRecipientAddressesOk returns a tuple with the CcRecipientAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetCcRecipientAddressesOk() (*[]string, bool) {
	if o == nil || o.CcRecipientAddresses == nil {
		return nil, false
	}
	return &o.CcRecipientAddresses, true
}

// HasCcRecipientAddresses returns a boolean if a field has been set.
func (o *EmailAllOf) HasCcRecipientAddresses() bool {
	if o != nil && o.CcRecipientAddresses != nil {
		return true
	}

	return false
}

// SetCcRecipientAddresses gets a reference to the given []string and assigns it to the CcRecipientAddresses field.
func (o *EmailAllOf) SetCcRecipientAddresses(v []string) {
	o.CcRecipientAddresses = v
}

// GetBccRecipientAddresses returns the BccRecipientAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetBccRecipientAddresses() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.BccRecipientAddresses
}

// GetBccRecipientAddressesOk returns a tuple with the BccRecipientAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetBccRecipientAddressesOk() (*[]string, bool) {
	if o == nil || o.BccRecipientAddresses == nil {
		return nil, false
	}
	return &o.BccRecipientAddresses, true
}

// HasBccRecipientAddresses returns a boolean if a field has been set.
func (o *EmailAllOf) HasBccRecipientAddresses() bool {
	if o != nil && o.BccRecipientAddresses != nil {
		return true
	}

	return false
}

// SetBccRecipientAddresses gets a reference to the given []string and assigns it to the BccRecipientAddresses field.
func (o *EmailAllOf) SetBccRecipientAddresses(v []string) {
	o.BccRecipientAddresses = v
}

// GetSentTimeSecs returns the SentTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetSentTimeSecs() int64 {
	if o == nil || o.SentTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SentTimeSecs.Get()
}

// GetSentTimeSecsOk returns a tuple with the SentTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetSentTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SentTimeSecs.Get(), o.SentTimeSecs.IsSet()
}

// HasSentTimeSecs returns a boolean if a field has been set.
func (o *EmailAllOf) HasSentTimeSecs() bool {
	if o != nil && o.SentTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetSentTimeSecs gets a reference to the given NullableInt64 and assigns it to the SentTimeSecs field.
func (o *EmailAllOf) SetSentTimeSecs(v int64) {
	o.SentTimeSecs.Set(&v)
}
// SetSentTimeSecsNil sets the value for SentTimeSecs to be an explicit nil
func (o *EmailAllOf) SetSentTimeSecsNil() {
	o.SentTimeSecs.Set(nil)
}

// UnsetSentTimeSecs ensures that no value is present for SentTimeSecs, not even an explicit nil
func (o *EmailAllOf) UnsetSentTimeSecs() {
	o.SentTimeSecs.Unset()
}

// GetReceivedTimeSecs returns the ReceivedTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetReceivedTimeSecs() int64 {
	if o == nil || o.ReceivedTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ReceivedTimeSecs.Get()
}

// GetReceivedTimeSecsOk returns a tuple with the ReceivedTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetReceivedTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReceivedTimeSecs.Get(), o.ReceivedTimeSecs.IsSet()
}

// HasReceivedTimeSecs returns a boolean if a field has been set.
func (o *EmailAllOf) HasReceivedTimeSecs() bool {
	if o != nil && o.ReceivedTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetReceivedTimeSecs gets a reference to the given NullableInt64 and assigns it to the ReceivedTimeSecs field.
func (o *EmailAllOf) SetReceivedTimeSecs(v int64) {
	o.ReceivedTimeSecs.Set(&v)
}
// SetReceivedTimeSecsNil sets the value for ReceivedTimeSecs to be an explicit nil
func (o *EmailAllOf) SetReceivedTimeSecsNil() {
	o.ReceivedTimeSecs.Set(nil)
}

// UnsetReceivedTimeSecs ensures that no value is present for ReceivedTimeSecs, not even an explicit nil
func (o *EmailAllOf) UnsetReceivedTimeSecs() {
	o.ReceivedTimeSecs.Unset()
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetProtectionGroupId() string {
	if o == nil || o.ProtectionGroupId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *EmailAllOf) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *EmailAllOf) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *EmailAllOf) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *EmailAllOf) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

// GetStorageDomainId returns the StorageDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetStorageDomainId() int64 {
	if o == nil || o.StorageDomainId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageDomainId.Get()
}

// GetStorageDomainIdOk returns a tuple with the StorageDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetStorageDomainIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageDomainId.Get(), o.StorageDomainId.IsSet()
}

// HasStorageDomainId returns a boolean if a field has been set.
func (o *EmailAllOf) HasStorageDomainId() bool {
	if o != nil && o.StorageDomainId.IsSet() {
		return true
	}

	return false
}

// SetStorageDomainId gets a reference to the given NullableInt64 and assigns it to the StorageDomainId field.
func (o *EmailAllOf) SetStorageDomainId(v int64) {
	o.StorageDomainId.Set(&v)
}
// SetStorageDomainIdNil sets the value for StorageDomainId to be an explicit nil
func (o *EmailAllOf) SetStorageDomainIdNil() {
	o.StorageDomainId.Set(nil)
}

// UnsetStorageDomainId ensures that no value is present for StorageDomainId, not even an explicit nil
func (o *EmailAllOf) UnsetStorageDomainId() {
	o.StorageDomainId.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EmailAllOf) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EmailAllOf) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *EmailAllOf) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *EmailAllOf) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *EmailAllOf) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *EmailAllOf) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o EmailAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.UserObjectInfo != nil {
		toSerialize["userObjectInfo"] = o.UserObjectInfo
	}
	if o.FolderName.IsSet() {
		toSerialize["folderName"] = o.FolderName.Get()
	}
	if o.ParentFolderId.IsSet() {
		toSerialize["parentFolderId"] = o.ParentFolderId.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.EmailSubject.IsSet() {
		toSerialize["emailSubject"] = o.EmailSubject.Get()
	}
	if o.HasAttachment.IsSet() {
		toSerialize["hasAttachment"] = o.HasAttachment.Get()
	}
	if o.SenderAddress.IsSet() {
		toSerialize["senderAddress"] = o.SenderAddress.Get()
	}
	if o.RecipientAddresses != nil {
		toSerialize["recipientAddresses"] = o.RecipientAddresses
	}
	if o.CcRecipientAddresses != nil {
		toSerialize["ccRecipientAddresses"] = o.CcRecipientAddresses
	}
	if o.BccRecipientAddresses != nil {
		toSerialize["bccRecipientAddresses"] = o.BccRecipientAddresses
	}
	if o.SentTimeSecs.IsSet() {
		toSerialize["sentTimeSecs"] = o.SentTimeSecs.Get()
	}
	if o.ReceivedTimeSecs.IsSet() {
		toSerialize["receivedTimeSecs"] = o.ReceivedTimeSecs.Get()
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	if o.StorageDomainId.IsSet() {
		toSerialize["storageDomainId"] = o.StorageDomainId.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEmailAllOf struct {
	value *EmailAllOf
	isSet bool
}

func (v NullableEmailAllOf) Get() *EmailAllOf {
	return v.value
}

func (v *NullableEmailAllOf) Set(val *EmailAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEmailAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEmailAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEmailAllOf(val *EmailAllOf) *NullableEmailAllOf {
	return &NullableEmailAllOf{value: val, isSet: true}
}

func (v NullableEmailAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEmailAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


