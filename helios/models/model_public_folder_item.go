/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// PublicFolderItem Specifies an Public folder indexed item.
type PublicFolderItem struct {
	// Specifies the name of the object.
	Name NullableString `json:"name,omitempty"`
	// Specifies the path of the object.
	Path NullableString `json:"path,omitempty"`
	// \"Specifies the protection group id which contains this object.\"
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
	// \"Specifies the protection group name which contains this object.\"
	ProtectionGroupName NullableString `json:"protectionGroupName,omitempty"`
	// \"Specifies the Storage Domain id where the backup data of Object is present.\"
	StorageDomainId NullableInt64 `json:"storageDomainId,omitempty"`
	// Specifies the Source Object information.
	SourceInfo *ObjectSummary `json:"sourceInfo,omitempty"`
	// Specifies tag applied to the object.
	Tags []TagInfo `json:"tags,omitempty"`
	// Specifies snapshot tags applied to the object.
	SnapshotTags []SnapshotTagInfo `json:"snapshotTags,omitempty"`
	// Specifies the Public folder item type.
	Type NullableString `json:"type,omitempty"`
	// Specifies the id of the indexed item.
	Id NullableString `json:"id,omitempty"`
	// Specifies the subject of the indexed item.
	Subject NullableString `json:"subject,omitempty"`
	// Specifies whether the item has any attachments
	HasAttachments NullableBool `json:"hasAttachments,omitempty"`
	// Specifies the item class of the indexed item.
	ItemClass NullableString `json:"itemClass,omitempty"`
	// Specifies the Unix timestamp epoch in seconds at which this item is received.
	ReceivedTimeSecs NullableInt64 `json:"receivedTimeSecs,omitempty"`
	// Specifies the size in bytes for the indexed item.
	ItemSize NullableInt64 `json:"itemSize,omitempty"`
	// Specifies the id of parent folder the indexed item.
	ParentFolderId NullableString `json:"parentFolderId,omitempty"`
}

// NewPublicFolderItem instantiates a new PublicFolderItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublicFolderItem() *PublicFolderItem {
	this := PublicFolderItem{}
	return &this
}

// NewPublicFolderItemWithDefaults instantiates a new PublicFolderItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublicFolderItemWithDefaults() *PublicFolderItem {
	this := PublicFolderItem{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PublicFolderItem) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PublicFolderItem) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PublicFolderItem) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PublicFolderItem) UnsetName() {
	o.Name.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *PublicFolderItem) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *PublicFolderItem) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *PublicFolderItem) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *PublicFolderItem) UnsetPath() {
	o.Path.Unset()
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetProtectionGroupId() string {
	if o == nil || o.ProtectionGroupId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *PublicFolderItem) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *PublicFolderItem) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *PublicFolderItem) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *PublicFolderItem) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

// GetProtectionGroupName returns the ProtectionGroupName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetProtectionGroupName() string {
	if o == nil || o.ProtectionGroupName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupName.Get()
}

// GetProtectionGroupNameOk returns a tuple with the ProtectionGroupName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetProtectionGroupNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupName.Get(), o.ProtectionGroupName.IsSet()
}

// HasProtectionGroupName returns a boolean if a field has been set.
func (o *PublicFolderItem) HasProtectionGroupName() bool {
	if o != nil && o.ProtectionGroupName.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupName gets a reference to the given NullableString and assigns it to the ProtectionGroupName field.
func (o *PublicFolderItem) SetProtectionGroupName(v string) {
	o.ProtectionGroupName.Set(&v)
}
// SetProtectionGroupNameNil sets the value for ProtectionGroupName to be an explicit nil
func (o *PublicFolderItem) SetProtectionGroupNameNil() {
	o.ProtectionGroupName.Set(nil)
}

// UnsetProtectionGroupName ensures that no value is present for ProtectionGroupName, not even an explicit nil
func (o *PublicFolderItem) UnsetProtectionGroupName() {
	o.ProtectionGroupName.Unset()
}

// GetStorageDomainId returns the StorageDomainId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetStorageDomainId() int64 {
	if o == nil || o.StorageDomainId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StorageDomainId.Get()
}

// GetStorageDomainIdOk returns a tuple with the StorageDomainId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetStorageDomainIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageDomainId.Get(), o.StorageDomainId.IsSet()
}

// HasStorageDomainId returns a boolean if a field has been set.
func (o *PublicFolderItem) HasStorageDomainId() bool {
	if o != nil && o.StorageDomainId.IsSet() {
		return true
	}

	return false
}

// SetStorageDomainId gets a reference to the given NullableInt64 and assigns it to the StorageDomainId field.
func (o *PublicFolderItem) SetStorageDomainId(v int64) {
	o.StorageDomainId.Set(&v)
}
// SetStorageDomainIdNil sets the value for StorageDomainId to be an explicit nil
func (o *PublicFolderItem) SetStorageDomainIdNil() {
	o.StorageDomainId.Set(nil)
}

// UnsetStorageDomainId ensures that no value is present for StorageDomainId, not even an explicit nil
func (o *PublicFolderItem) UnsetStorageDomainId() {
	o.StorageDomainId.Unset()
}

// GetSourceInfo returns the SourceInfo field value if set, zero value otherwise.
func (o *PublicFolderItem) GetSourceInfo() ObjectSummary {
	if o == nil || o.SourceInfo == nil {
		var ret ObjectSummary
		return ret
	}
	return *o.SourceInfo
}

// GetSourceInfoOk returns a tuple with the SourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublicFolderItem) GetSourceInfoOk() (*ObjectSummary, bool) {
	if o == nil || o.SourceInfo == nil {
		return nil, false
	}
	return o.SourceInfo, true
}

// HasSourceInfo returns a boolean if a field has been set.
func (o *PublicFolderItem) HasSourceInfo() bool {
	if o != nil && o.SourceInfo != nil {
		return true
	}

	return false
}

// SetSourceInfo gets a reference to the given ObjectSummary and assigns it to the SourceInfo field.
func (o *PublicFolderItem) SetSourceInfo(v ObjectSummary) {
	o.SourceInfo = &v
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetTags() []TagInfo {
	if o == nil  {
		var ret []TagInfo
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetTagsOk() (*[]TagInfo, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *PublicFolderItem) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []TagInfo and assigns it to the Tags field.
func (o *PublicFolderItem) SetTags(v []TagInfo) {
	o.Tags = v
}

// GetSnapshotTags returns the SnapshotTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetSnapshotTags() []SnapshotTagInfo {
	if o == nil  {
		var ret []SnapshotTagInfo
		return ret
	}
	return o.SnapshotTags
}

// GetSnapshotTagsOk returns a tuple with the SnapshotTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetSnapshotTagsOk() (*[]SnapshotTagInfo, bool) {
	if o == nil || o.SnapshotTags == nil {
		return nil, false
	}
	return &o.SnapshotTags, true
}

// HasSnapshotTags returns a boolean if a field has been set.
func (o *PublicFolderItem) HasSnapshotTags() bool {
	if o != nil && o.SnapshotTags != nil {
		return true
	}

	return false
}

// SetSnapshotTags gets a reference to the given []SnapshotTagInfo and assigns it to the SnapshotTags field.
func (o *PublicFolderItem) SetSnapshotTags(v []SnapshotTagInfo) {
	o.SnapshotTags = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *PublicFolderItem) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *PublicFolderItem) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *PublicFolderItem) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *PublicFolderItem) UnsetType() {
	o.Type.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *PublicFolderItem) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *PublicFolderItem) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *PublicFolderItem) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *PublicFolderItem) UnsetId() {
	o.Id.Unset()
}

// GetSubject returns the Subject field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetSubject() string {
	if o == nil || o.Subject.Get() == nil {
		var ret string
		return ret
	}
	return *o.Subject.Get()
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetSubjectOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Subject.Get(), o.Subject.IsSet()
}

// HasSubject returns a boolean if a field has been set.
func (o *PublicFolderItem) HasSubject() bool {
	if o != nil && o.Subject.IsSet() {
		return true
	}

	return false
}

// SetSubject gets a reference to the given NullableString and assigns it to the Subject field.
func (o *PublicFolderItem) SetSubject(v string) {
	o.Subject.Set(&v)
}
// SetSubjectNil sets the value for Subject to be an explicit nil
func (o *PublicFolderItem) SetSubjectNil() {
	o.Subject.Set(nil)
}

// UnsetSubject ensures that no value is present for Subject, not even an explicit nil
func (o *PublicFolderItem) UnsetSubject() {
	o.Subject.Unset()
}

// GetHasAttachments returns the HasAttachments field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetHasAttachments() bool {
	if o == nil || o.HasAttachments.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HasAttachments.Get()
}

// GetHasAttachmentsOk returns a tuple with the HasAttachments field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetHasAttachmentsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HasAttachments.Get(), o.HasAttachments.IsSet()
}

// HasHasAttachments returns a boolean if a field has been set.
func (o *PublicFolderItem) HasHasAttachments() bool {
	if o != nil && o.HasAttachments.IsSet() {
		return true
	}

	return false
}

// SetHasAttachments gets a reference to the given NullableBool and assigns it to the HasAttachments field.
func (o *PublicFolderItem) SetHasAttachments(v bool) {
	o.HasAttachments.Set(&v)
}
// SetHasAttachmentsNil sets the value for HasAttachments to be an explicit nil
func (o *PublicFolderItem) SetHasAttachmentsNil() {
	o.HasAttachments.Set(nil)
}

// UnsetHasAttachments ensures that no value is present for HasAttachments, not even an explicit nil
func (o *PublicFolderItem) UnsetHasAttachments() {
	o.HasAttachments.Unset()
}

// GetItemClass returns the ItemClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetItemClass() string {
	if o == nil || o.ItemClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemClass.Get()
}

// GetItemClassOk returns a tuple with the ItemClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetItemClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemClass.Get(), o.ItemClass.IsSet()
}

// HasItemClass returns a boolean if a field has been set.
func (o *PublicFolderItem) HasItemClass() bool {
	if o != nil && o.ItemClass.IsSet() {
		return true
	}

	return false
}

// SetItemClass gets a reference to the given NullableString and assigns it to the ItemClass field.
func (o *PublicFolderItem) SetItemClass(v string) {
	o.ItemClass.Set(&v)
}
// SetItemClassNil sets the value for ItemClass to be an explicit nil
func (o *PublicFolderItem) SetItemClassNil() {
	o.ItemClass.Set(nil)
}

// UnsetItemClass ensures that no value is present for ItemClass, not even an explicit nil
func (o *PublicFolderItem) UnsetItemClass() {
	o.ItemClass.Unset()
}

// GetReceivedTimeSecs returns the ReceivedTimeSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetReceivedTimeSecs() int64 {
	if o == nil || o.ReceivedTimeSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ReceivedTimeSecs.Get()
}

// GetReceivedTimeSecsOk returns a tuple with the ReceivedTimeSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetReceivedTimeSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReceivedTimeSecs.Get(), o.ReceivedTimeSecs.IsSet()
}

// HasReceivedTimeSecs returns a boolean if a field has been set.
func (o *PublicFolderItem) HasReceivedTimeSecs() bool {
	if o != nil && o.ReceivedTimeSecs.IsSet() {
		return true
	}

	return false
}

// SetReceivedTimeSecs gets a reference to the given NullableInt64 and assigns it to the ReceivedTimeSecs field.
func (o *PublicFolderItem) SetReceivedTimeSecs(v int64) {
	o.ReceivedTimeSecs.Set(&v)
}
// SetReceivedTimeSecsNil sets the value for ReceivedTimeSecs to be an explicit nil
func (o *PublicFolderItem) SetReceivedTimeSecsNil() {
	o.ReceivedTimeSecs.Set(nil)
}

// UnsetReceivedTimeSecs ensures that no value is present for ReceivedTimeSecs, not even an explicit nil
func (o *PublicFolderItem) UnsetReceivedTimeSecs() {
	o.ReceivedTimeSecs.Unset()
}

// GetItemSize returns the ItemSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetItemSize() int64 {
	if o == nil || o.ItemSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ItemSize.Get()
}

// GetItemSizeOk returns a tuple with the ItemSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetItemSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemSize.Get(), o.ItemSize.IsSet()
}

// HasItemSize returns a boolean if a field has been set.
func (o *PublicFolderItem) HasItemSize() bool {
	if o != nil && o.ItemSize.IsSet() {
		return true
	}

	return false
}

// SetItemSize gets a reference to the given NullableInt64 and assigns it to the ItemSize field.
func (o *PublicFolderItem) SetItemSize(v int64) {
	o.ItemSize.Set(&v)
}
// SetItemSizeNil sets the value for ItemSize to be an explicit nil
func (o *PublicFolderItem) SetItemSizeNil() {
	o.ItemSize.Set(nil)
}

// UnsetItemSize ensures that no value is present for ItemSize, not even an explicit nil
func (o *PublicFolderItem) UnsetItemSize() {
	o.ItemSize.Unset()
}

// GetParentFolderId returns the ParentFolderId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PublicFolderItem) GetParentFolderId() string {
	if o == nil || o.ParentFolderId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentFolderId.Get()
}

// GetParentFolderIdOk returns a tuple with the ParentFolderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PublicFolderItem) GetParentFolderIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentFolderId.Get(), o.ParentFolderId.IsSet()
}

// HasParentFolderId returns a boolean if a field has been set.
func (o *PublicFolderItem) HasParentFolderId() bool {
	if o != nil && o.ParentFolderId.IsSet() {
		return true
	}

	return false
}

// SetParentFolderId gets a reference to the given NullableString and assigns it to the ParentFolderId field.
func (o *PublicFolderItem) SetParentFolderId(v string) {
	o.ParentFolderId.Set(&v)
}
// SetParentFolderIdNil sets the value for ParentFolderId to be an explicit nil
func (o *PublicFolderItem) SetParentFolderIdNil() {
	o.ParentFolderId.Set(nil)
}

// UnsetParentFolderId ensures that no value is present for ParentFolderId, not even an explicit nil
func (o *PublicFolderItem) UnsetParentFolderId() {
	o.ParentFolderId.Unset()
}

func (o PublicFolderItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	if o.ProtectionGroupName.IsSet() {
		toSerialize["protectionGroupName"] = o.ProtectionGroupName.Get()
	}
	if o.StorageDomainId.IsSet() {
		toSerialize["storageDomainId"] = o.StorageDomainId.Get()
	}
	if o.SourceInfo != nil {
		toSerialize["sourceInfo"] = o.SourceInfo
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.SnapshotTags != nil {
		toSerialize["snapshotTags"] = o.SnapshotTags
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Subject.IsSet() {
		toSerialize["subject"] = o.Subject.Get()
	}
	if o.HasAttachments.IsSet() {
		toSerialize["hasAttachments"] = o.HasAttachments.Get()
	}
	if o.ItemClass.IsSet() {
		toSerialize["itemClass"] = o.ItemClass.Get()
	}
	if o.ReceivedTimeSecs.IsSet() {
		toSerialize["receivedTimeSecs"] = o.ReceivedTimeSecs.Get()
	}
	if o.ItemSize.IsSet() {
		toSerialize["itemSize"] = o.ItemSize.Get()
	}
	if o.ParentFolderId.IsSet() {
		toSerialize["parentFolderId"] = o.ParentFolderId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePublicFolderItem struct {
	value *PublicFolderItem
	isSet bool
}

func (v NullablePublicFolderItem) Get() *PublicFolderItem {
	return v.value
}

func (v *NullablePublicFolderItem) Set(val *PublicFolderItem) {
	v.value = val
	v.isSet = true
}

func (v NullablePublicFolderItem) IsSet() bool {
	return v.isSet
}

func (v *NullablePublicFolderItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublicFolderItem(val *PublicFolderItem) *NullablePublicFolderItem {
	return &NullablePublicFolderItem{value: val, isSet: true}
}

func (v NullablePublicFolderItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublicFolderItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


