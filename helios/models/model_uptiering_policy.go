/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// UptieringPolicy Specifies the data uptiering policy.
type UptieringPolicy struct {
	FileAge *UptieringFileAgePolicy `json:"fileAge,omitempty"`
	// If set, all files in the view will be uptiered regardless of file_select_policy, num_file_access, hot_file_window, file_size constraints.
	IncludeAllFiles NullableBool `json:"includeAllFiles,omitempty"`
	Target NullableUptieringTarget `json:"target,omitempty"`
	// Specifies whether to audit log the file tiering activity.
	EnableAuditLogging NullableBool `json:"enableAuditLogging,omitempty"`
	FileSize *FileSizePolicy `json:"fileSize,omitempty"`
	FilePath *FileFilteringPolicy `json:"filePath,omitempty"`
}

// NewUptieringPolicy instantiates a new UptieringPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUptieringPolicy() *UptieringPolicy {
	this := UptieringPolicy{}
	var includeAllFiles bool = false
	this.IncludeAllFiles = *NewNullableBool(&includeAllFiles)
	var enableAuditLogging bool = false
	this.EnableAuditLogging = *NewNullableBool(&enableAuditLogging)
	return &this
}

// NewUptieringPolicyWithDefaults instantiates a new UptieringPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUptieringPolicyWithDefaults() *UptieringPolicy {
	this := UptieringPolicy{}
	var includeAllFiles bool = false
	this.IncludeAllFiles = *NewNullableBool(&includeAllFiles) // model_simple false
	var enableAuditLogging bool = false
	this.EnableAuditLogging = *NewNullableBool(&enableAuditLogging) // model_simple false
	return &this
}

// GetFileAge returns the FileAge field value if set, zero value otherwise.
func (o *UptieringPolicy) GetFileAge() UptieringFileAgePolicy {
	if o == nil || o.FileAge == nil {
		var ret UptieringFileAgePolicy
		return ret
	}
	return *o.FileAge
}

// GetFileAgeOk returns a tuple with the FileAge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UptieringPolicy) GetFileAgeOk() (*UptieringFileAgePolicy, bool) {
	if o == nil || o.FileAge == nil {
		return nil, false
	}
	return o.FileAge, true
}

// HasFileAge returns a boolean if a field has been set.
func (o *UptieringPolicy) HasFileAge() bool {
	if o != nil && o.FileAge != nil {
		return true
	}

	return false
}

// SetFileAge gets a reference to the given UptieringFileAgePolicy and assigns it to the FileAge field.
func (o *UptieringPolicy) SetFileAge(v UptieringFileAgePolicy) {
	o.FileAge = &v
}

// GetIncludeAllFiles returns the IncludeAllFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UptieringPolicy) GetIncludeAllFiles() bool {
	if o == nil || o.IncludeAllFiles.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IncludeAllFiles.Get()
}

// GetIncludeAllFilesOk returns a tuple with the IncludeAllFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UptieringPolicy) GetIncludeAllFilesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncludeAllFiles.Get(), o.IncludeAllFiles.IsSet()
}

// HasIncludeAllFiles returns a boolean if a field has been set.
func (o *UptieringPolicy) HasIncludeAllFiles() bool {
	if o != nil && o.IncludeAllFiles.IsSet() {
		return true
	}

	return false
}

// SetIncludeAllFiles gets a reference to the given NullableBool and assigns it to the IncludeAllFiles field.
func (o *UptieringPolicy) SetIncludeAllFiles(v bool) {
	o.IncludeAllFiles.Set(&v)
}
// SetIncludeAllFilesNil sets the value for IncludeAllFiles to be an explicit nil
func (o *UptieringPolicy) SetIncludeAllFilesNil() {
	o.IncludeAllFiles.Set(nil)
}

// UnsetIncludeAllFiles ensures that no value is present for IncludeAllFiles, not even an explicit nil
func (o *UptieringPolicy) UnsetIncludeAllFiles() {
	o.IncludeAllFiles.Unset()
}

// GetTarget returns the Target field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UptieringPolicy) GetTarget() UptieringTarget {
	if o == nil || o.Target.Get() == nil {
		var ret UptieringTarget
		return ret
	}
	return *o.Target.Get()
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UptieringPolicy) GetTargetOk() (*UptieringTarget, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Target.Get(), o.Target.IsSet()
}

// HasTarget returns a boolean if a field has been set.
func (o *UptieringPolicy) HasTarget() bool {
	if o != nil && o.Target.IsSet() {
		return true
	}

	return false
}

// SetTarget gets a reference to the given NullableUptieringTarget and assigns it to the Target field.
func (o *UptieringPolicy) SetTarget(v UptieringTarget) {
	o.Target.Set(&v)
}
// SetTargetNil sets the value for Target to be an explicit nil
func (o *UptieringPolicy) SetTargetNil() {
	o.Target.Set(nil)
}

// UnsetTarget ensures that no value is present for Target, not even an explicit nil
func (o *UptieringPolicy) UnsetTarget() {
	o.Target.Unset()
}

// GetEnableAuditLogging returns the EnableAuditLogging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UptieringPolicy) GetEnableAuditLogging() bool {
	if o == nil || o.EnableAuditLogging.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableAuditLogging.Get()
}

// GetEnableAuditLoggingOk returns a tuple with the EnableAuditLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UptieringPolicy) GetEnableAuditLoggingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableAuditLogging.Get(), o.EnableAuditLogging.IsSet()
}

// HasEnableAuditLogging returns a boolean if a field has been set.
func (o *UptieringPolicy) HasEnableAuditLogging() bool {
	if o != nil && o.EnableAuditLogging.IsSet() {
		return true
	}

	return false
}

// SetEnableAuditLogging gets a reference to the given NullableBool and assigns it to the EnableAuditLogging field.
func (o *UptieringPolicy) SetEnableAuditLogging(v bool) {
	o.EnableAuditLogging.Set(&v)
}
// SetEnableAuditLoggingNil sets the value for EnableAuditLogging to be an explicit nil
func (o *UptieringPolicy) SetEnableAuditLoggingNil() {
	o.EnableAuditLogging.Set(nil)
}

// UnsetEnableAuditLogging ensures that no value is present for EnableAuditLogging, not even an explicit nil
func (o *UptieringPolicy) UnsetEnableAuditLogging() {
	o.EnableAuditLogging.Unset()
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *UptieringPolicy) GetFileSize() FileSizePolicy {
	if o == nil || o.FileSize == nil {
		var ret FileSizePolicy
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UptieringPolicy) GetFileSizeOk() (*FileSizePolicy, bool) {
	if o == nil || o.FileSize == nil {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *UptieringPolicy) HasFileSize() bool {
	if o != nil && o.FileSize != nil {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given FileSizePolicy and assigns it to the FileSize field.
func (o *UptieringPolicy) SetFileSize(v FileSizePolicy) {
	o.FileSize = &v
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *UptieringPolicy) GetFilePath() FileFilteringPolicy {
	if o == nil || o.FilePath == nil {
		var ret FileFilteringPolicy
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UptieringPolicy) GetFilePathOk() (*FileFilteringPolicy, bool) {
	if o == nil || o.FilePath == nil {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *UptieringPolicy) HasFilePath() bool {
	if o != nil && o.FilePath != nil {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given FileFilteringPolicy and assigns it to the FilePath field.
func (o *UptieringPolicy) SetFilePath(v FileFilteringPolicy) {
	o.FilePath = &v
}

func (o UptieringPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileAge != nil {
		toSerialize["fileAge"] = o.FileAge
	}
	if o.IncludeAllFiles.IsSet() {
		toSerialize["includeAllFiles"] = o.IncludeAllFiles.Get()
	}
	if o.Target.IsSet() {
		toSerialize["target"] = o.Target.Get()
	}
	if o.EnableAuditLogging.IsSet() {
		toSerialize["enableAuditLogging"] = o.EnableAuditLogging.Get()
	}
	if o.FileSize != nil {
		toSerialize["fileSize"] = o.FileSize
	}
	if o.FilePath != nil {
		toSerialize["filePath"] = o.FilePath
	}
	return json.Marshal(toSerialize)
}

type NullableUptieringPolicy struct {
	value *UptieringPolicy
	isSet bool
}

func (v NullableUptieringPolicy) Get() *UptieringPolicy {
	return v.value
}

func (v *NullableUptieringPolicy) Set(val *UptieringPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableUptieringPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableUptieringPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUptieringPolicy(val *UptieringPolicy) *NullableUptieringPolicy {
	return &NullableUptieringPolicy{value: val, isSet: true}
}

func (v NullableUptieringPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUptieringPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


