/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmLastRunStatusStats Specifies the last run's status and count of objects having that status.
type McmLastRunStatusStats struct {
	// Specifies the status of last run.
	Status NullableString `json:"status,omitempty"`
	// Specifies the number of objects having this status.
	Count NullableInt64 `json:"count,omitempty"`
}

// NewMcmLastRunStatusStats instantiates a new McmLastRunStatusStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmLastRunStatusStats() *McmLastRunStatusStats {
	this := McmLastRunStatusStats{}
	return &this
}

// NewMcmLastRunStatusStatsWithDefaults instantiates a new McmLastRunStatusStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmLastRunStatusStatsWithDefaults() *McmLastRunStatusStats {
	this := McmLastRunStatusStats{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmLastRunStatusStats) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmLastRunStatusStats) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *McmLastRunStatusStats) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *McmLastRunStatusStats) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *McmLastRunStatusStats) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *McmLastRunStatusStats) UnsetStatus() {
	o.Status.Unset()
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmLastRunStatusStats) GetCount() int64 {
	if o == nil || o.Count.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmLastRunStatusStats) GetCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *McmLastRunStatusStats) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt64 and assigns it to the Count field.
func (o *McmLastRunStatusStats) SetCount(v int64) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *McmLastRunStatusStats) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *McmLastRunStatusStats) UnsetCount() {
	o.Count.Unset()
}

func (o McmLastRunStatusStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMcmLastRunStatusStats struct {
	value *McmLastRunStatusStats
	isSet bool
}

func (v NullableMcmLastRunStatusStats) Get() *McmLastRunStatusStats {
	return v.value
}

func (v *NullableMcmLastRunStatusStats) Set(val *McmLastRunStatusStats) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmLastRunStatusStats) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmLastRunStatusStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmLastRunStatusStats(val *McmLastRunStatusStats) *NullableMcmLastRunStatusStats {
	return &NullableMcmLastRunStatusStats{value: val, isSet: true}
}

func (v NullableMcmLastRunStatusStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmLastRunStatusStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


