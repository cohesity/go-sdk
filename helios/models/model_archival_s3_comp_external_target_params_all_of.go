/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ArchivalS3CompExternalTargetParamsAllOf struct for ArchivalS3CompExternalTargetParamsAllOf
type ArchivalS3CompExternalTargetParamsAllOf struct {
	// Specifies the Source Side Deduplication setting for the S3 Compatible external target
	SourceSideDeduplication NullableBool `json:"sourceSideDeduplication,omitempty"`
	// Specifies if Incremental Archival setting is enabled or not.
	IsIncrementalArchivalEnabled NullableBool `json:"isIncrementalArchivalEnabled,omitempty"`
	// Specifies if Forever Incremental Archival setting is enabled or not.
	IsForeverIncrementalArchivalEnabled NullableBool `json:"isForeverIncrementalArchivalEnabled,omitempty"`
}

// NewArchivalS3CompExternalTargetParamsAllOf instantiates a new ArchivalS3CompExternalTargetParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalS3CompExternalTargetParamsAllOf() *ArchivalS3CompExternalTargetParamsAllOf {
	this := ArchivalS3CompExternalTargetParamsAllOf{}
	return &this
}

// NewArchivalS3CompExternalTargetParamsAllOfWithDefaults instantiates a new ArchivalS3CompExternalTargetParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalS3CompExternalTargetParamsAllOfWithDefaults() *ArchivalS3CompExternalTargetParamsAllOf {
	this := ArchivalS3CompExternalTargetParamsAllOf{}
	return &this
}

// GetSourceSideDeduplication returns the SourceSideDeduplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalS3CompExternalTargetParamsAllOf) GetSourceSideDeduplication() bool {
	if o == nil || o.SourceSideDeduplication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SourceSideDeduplication.Get()
}

// GetSourceSideDeduplicationOk returns a tuple with the SourceSideDeduplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalS3CompExternalTargetParamsAllOf) GetSourceSideDeduplicationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceSideDeduplication.Get(), o.SourceSideDeduplication.IsSet()
}

// HasSourceSideDeduplication returns a boolean if a field has been set.
func (o *ArchivalS3CompExternalTargetParamsAllOf) HasSourceSideDeduplication() bool {
	if o != nil && o.SourceSideDeduplication.IsSet() {
		return true
	}

	return false
}

// SetSourceSideDeduplication gets a reference to the given NullableBool and assigns it to the SourceSideDeduplication field.
func (o *ArchivalS3CompExternalTargetParamsAllOf) SetSourceSideDeduplication(v bool) {
	o.SourceSideDeduplication.Set(&v)
}
// SetSourceSideDeduplicationNil sets the value for SourceSideDeduplication to be an explicit nil
func (o *ArchivalS3CompExternalTargetParamsAllOf) SetSourceSideDeduplicationNil() {
	o.SourceSideDeduplication.Set(nil)
}

// UnsetSourceSideDeduplication ensures that no value is present for SourceSideDeduplication, not even an explicit nil
func (o *ArchivalS3CompExternalTargetParamsAllOf) UnsetSourceSideDeduplication() {
	o.SourceSideDeduplication.Unset()
}

// GetIsIncrementalArchivalEnabled returns the IsIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalS3CompExternalTargetParamsAllOf) GetIsIncrementalArchivalEnabled() bool {
	if o == nil || o.IsIncrementalArchivalEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsIncrementalArchivalEnabled.Get()
}

// GetIsIncrementalArchivalEnabledOk returns a tuple with the IsIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalS3CompExternalTargetParamsAllOf) GetIsIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsIncrementalArchivalEnabled.Get(), o.IsIncrementalArchivalEnabled.IsSet()
}

// HasIsIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalS3CompExternalTargetParamsAllOf) HasIsIncrementalArchivalEnabled() bool {
	if o != nil && o.IsIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsIncrementalArchivalEnabled field.
func (o *ArchivalS3CompExternalTargetParamsAllOf) SetIsIncrementalArchivalEnabled(v bool) {
	o.IsIncrementalArchivalEnabled.Set(&v)
}
// SetIsIncrementalArchivalEnabledNil sets the value for IsIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalS3CompExternalTargetParamsAllOf) SetIsIncrementalArchivalEnabledNil() {
	o.IsIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsIncrementalArchivalEnabled ensures that no value is present for IsIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalS3CompExternalTargetParamsAllOf) UnsetIsIncrementalArchivalEnabled() {
	o.IsIncrementalArchivalEnabled.Unset()
}

// GetIsForeverIncrementalArchivalEnabled returns the IsForeverIncrementalArchivalEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalS3CompExternalTargetParamsAllOf) GetIsForeverIncrementalArchivalEnabled() bool {
	if o == nil || o.IsForeverIncrementalArchivalEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsForeverIncrementalArchivalEnabled.Get()
}

// GetIsForeverIncrementalArchivalEnabledOk returns a tuple with the IsForeverIncrementalArchivalEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalS3CompExternalTargetParamsAllOf) GetIsForeverIncrementalArchivalEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsForeverIncrementalArchivalEnabled.Get(), o.IsForeverIncrementalArchivalEnabled.IsSet()
}

// HasIsForeverIncrementalArchivalEnabled returns a boolean if a field has been set.
func (o *ArchivalS3CompExternalTargetParamsAllOf) HasIsForeverIncrementalArchivalEnabled() bool {
	if o != nil && o.IsForeverIncrementalArchivalEnabled.IsSet() {
		return true
	}

	return false
}

// SetIsForeverIncrementalArchivalEnabled gets a reference to the given NullableBool and assigns it to the IsForeverIncrementalArchivalEnabled field.
func (o *ArchivalS3CompExternalTargetParamsAllOf) SetIsForeverIncrementalArchivalEnabled(v bool) {
	o.IsForeverIncrementalArchivalEnabled.Set(&v)
}
// SetIsForeverIncrementalArchivalEnabledNil sets the value for IsForeverIncrementalArchivalEnabled to be an explicit nil
func (o *ArchivalS3CompExternalTargetParamsAllOf) SetIsForeverIncrementalArchivalEnabledNil() {
	o.IsForeverIncrementalArchivalEnabled.Set(nil)
}

// UnsetIsForeverIncrementalArchivalEnabled ensures that no value is present for IsForeverIncrementalArchivalEnabled, not even an explicit nil
func (o *ArchivalS3CompExternalTargetParamsAllOf) UnsetIsForeverIncrementalArchivalEnabled() {
	o.IsForeverIncrementalArchivalEnabled.Unset()
}

func (o ArchivalS3CompExternalTargetParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SourceSideDeduplication.IsSet() {
		toSerialize["sourceSideDeduplication"] = o.SourceSideDeduplication.Get()
	}
	if o.IsIncrementalArchivalEnabled.IsSet() {
		toSerialize["isIncrementalArchivalEnabled"] = o.IsIncrementalArchivalEnabled.Get()
	}
	if o.IsForeverIncrementalArchivalEnabled.IsSet() {
		toSerialize["isForeverIncrementalArchivalEnabled"] = o.IsForeverIncrementalArchivalEnabled.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableArchivalS3CompExternalTargetParamsAllOf struct {
	value *ArchivalS3CompExternalTargetParamsAllOf
	isSet bool
}

func (v NullableArchivalS3CompExternalTargetParamsAllOf) Get() *ArchivalS3CompExternalTargetParamsAllOf {
	return v.value
}

func (v *NullableArchivalS3CompExternalTargetParamsAllOf) Set(val *ArchivalS3CompExternalTargetParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalS3CompExternalTargetParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalS3CompExternalTargetParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalS3CompExternalTargetParamsAllOf(val *ArchivalS3CompExternalTargetParamsAllOf) *NullableArchivalS3CompExternalTargetParamsAllOf {
	return &NullableArchivalS3CompExternalTargetParamsAllOf{value: val, isSet: true}
}

func (v NullableArchivalS3CompExternalTargetParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalS3CompExternalTargetParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


