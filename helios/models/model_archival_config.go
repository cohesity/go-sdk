/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ArchivalConfig Specifies settings for copying Snapshots External Targets (such as AWS or Tape). This also specifies the retention policy that should be applied to Snapshots after they have been copied to the specified target.
type ArchivalConfig struct {
	Schedule TargetSchedule `json:"schedule"`
	Retention Retention `json:"retention"`
	// Specifies if Snapshots are copied from the first completely successful Protection Group Run or the first partially successful Protection Group Run occurring at the start of the replication schedule. <br> If true, Snapshots are copied from the first Protection Group Run occurring at the start of the replication schedule that was completely successful i.e. Snapshots for all the Objects in the Protection Group were successfully captured. <br> If false, Snapshots are copied from the first Protection Group Run occurring at the start of the replication schedule, even if first Protection Group Run was not completely successful i.e. Snapshots were not captured for all Objects in the Protection Group.
	CopyOnRunSuccess NullableBool `json:"copyOnRunSuccess,omitempty"`
	// Specifies the unique identifier for the target getting added. This field need to be passed only when policies are being updated.
	ConfigId NullableString `json:"configId,omitempty"`
	// Specifies the Archival target to copy the Snapshots to.
	TargetId NullableInt64 `json:"targetId"`
	// Specifies the Archival target name where Snapshots are copied.
	TargetName NullableString `json:"targetName,omitempty"`
	// Specifies the Archival target type where Snapshots are copied.
	TargetType NullableString `json:"targetType,omitempty"`
	TierSettings *TierLevelSettings `json:"tierSettings,omitempty"`
	// Specifies additional retention policies that should be applied to the archived backup. Archived backup snapshot will be retained up to a time that is the maximum of all retention policies that are applicable to it.
	ExtendedRetention []ExtendedRetentionPolicy `json:"extendedRetention,omitempty"`
}

// NewArchivalConfig instantiates a new ArchivalConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArchivalConfig(schedule TargetSchedule, retention Retention, targetId NullableInt64) *ArchivalConfig {
	this := ArchivalConfig{}
	this.Schedule = schedule
	this.Retention = retention
	this.TargetId = targetId
	return &this
}

// NewArchivalConfigWithDefaults instantiates a new ArchivalConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArchivalConfigWithDefaults() *ArchivalConfig {
	this := ArchivalConfig{}
	return &this
}

// GetSchedule returns the Schedule field value
func (o *ArchivalConfig) GetSchedule() TargetSchedule {
	if o == nil {
		var ret TargetSchedule
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *ArchivalConfig) GetScheduleOk() (*TargetSchedule, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Schedule, true
}

// SetSchedule sets field value
func (o *ArchivalConfig) SetSchedule(v TargetSchedule) {
	o.Schedule = v
}

// GetRetention returns the Retention field value
func (o *ArchivalConfig) GetRetention() Retention {
	if o == nil {
		var ret Retention
		return ret
	}

	return o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value
// and a boolean to check if the value has been set.
func (o *ArchivalConfig) GetRetentionOk() (*Retention, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Retention, true
}

// SetRetention sets field value
func (o *ArchivalConfig) SetRetention(v Retention) {
	o.Retention = v
}

// GetCopyOnRunSuccess returns the CopyOnRunSuccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalConfig) GetCopyOnRunSuccess() bool {
	if o == nil || o.CopyOnRunSuccess.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CopyOnRunSuccess.Get()
}

// GetCopyOnRunSuccessOk returns a tuple with the CopyOnRunSuccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalConfig) GetCopyOnRunSuccessOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CopyOnRunSuccess.Get(), o.CopyOnRunSuccess.IsSet()
}

// HasCopyOnRunSuccess returns a boolean if a field has been set.
func (o *ArchivalConfig) HasCopyOnRunSuccess() bool {
	if o != nil && o.CopyOnRunSuccess.IsSet() {
		return true
	}

	return false
}

// SetCopyOnRunSuccess gets a reference to the given NullableBool and assigns it to the CopyOnRunSuccess field.
func (o *ArchivalConfig) SetCopyOnRunSuccess(v bool) {
	o.CopyOnRunSuccess.Set(&v)
}
// SetCopyOnRunSuccessNil sets the value for CopyOnRunSuccess to be an explicit nil
func (o *ArchivalConfig) SetCopyOnRunSuccessNil() {
	o.CopyOnRunSuccess.Set(nil)
}

// UnsetCopyOnRunSuccess ensures that no value is present for CopyOnRunSuccess, not even an explicit nil
func (o *ArchivalConfig) UnsetCopyOnRunSuccess() {
	o.CopyOnRunSuccess.Unset()
}

// GetConfigId returns the ConfigId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalConfig) GetConfigId() string {
	if o == nil || o.ConfigId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ConfigId.Get()
}

// GetConfigIdOk returns a tuple with the ConfigId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalConfig) GetConfigIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConfigId.Get(), o.ConfigId.IsSet()
}

// HasConfigId returns a boolean if a field has been set.
func (o *ArchivalConfig) HasConfigId() bool {
	if o != nil && o.ConfigId.IsSet() {
		return true
	}

	return false
}

// SetConfigId gets a reference to the given NullableString and assigns it to the ConfigId field.
func (o *ArchivalConfig) SetConfigId(v string) {
	o.ConfigId.Set(&v)
}
// SetConfigIdNil sets the value for ConfigId to be an explicit nil
func (o *ArchivalConfig) SetConfigIdNil() {
	o.ConfigId.Set(nil)
}

// UnsetConfigId ensures that no value is present for ConfigId, not even an explicit nil
func (o *ArchivalConfig) UnsetConfigId() {
	o.ConfigId.Unset()
}

// GetTargetId returns the TargetId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *ArchivalConfig) GetTargetId() int64 {
	if o == nil || o.TargetId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.TargetId.Get()
}

// GetTargetIdOk returns a tuple with the TargetId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalConfig) GetTargetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetId.Get(), o.TargetId.IsSet()
}

// SetTargetId sets field value
func (o *ArchivalConfig) SetTargetId(v int64) {
	o.TargetId.Set(&v)
}

// GetTargetName returns the TargetName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalConfig) GetTargetName() string {
	if o == nil || o.TargetName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetName.Get()
}

// GetTargetNameOk returns a tuple with the TargetName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalConfig) GetTargetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetName.Get(), o.TargetName.IsSet()
}

// HasTargetName returns a boolean if a field has been set.
func (o *ArchivalConfig) HasTargetName() bool {
	if o != nil && o.TargetName.IsSet() {
		return true
	}

	return false
}

// SetTargetName gets a reference to the given NullableString and assigns it to the TargetName field.
func (o *ArchivalConfig) SetTargetName(v string) {
	o.TargetName.Set(&v)
}
// SetTargetNameNil sets the value for TargetName to be an explicit nil
func (o *ArchivalConfig) SetTargetNameNil() {
	o.TargetName.Set(nil)
}

// UnsetTargetName ensures that no value is present for TargetName, not even an explicit nil
func (o *ArchivalConfig) UnsetTargetName() {
	o.TargetName.Unset()
}

// GetTargetType returns the TargetType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalConfig) GetTargetType() string {
	if o == nil || o.TargetType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetType.Get()
}

// GetTargetTypeOk returns a tuple with the TargetType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalConfig) GetTargetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetType.Get(), o.TargetType.IsSet()
}

// HasTargetType returns a boolean if a field has been set.
func (o *ArchivalConfig) HasTargetType() bool {
	if o != nil && o.TargetType.IsSet() {
		return true
	}

	return false
}

// SetTargetType gets a reference to the given NullableString and assigns it to the TargetType field.
func (o *ArchivalConfig) SetTargetType(v string) {
	o.TargetType.Set(&v)
}
// SetTargetTypeNil sets the value for TargetType to be an explicit nil
func (o *ArchivalConfig) SetTargetTypeNil() {
	o.TargetType.Set(nil)
}

// UnsetTargetType ensures that no value is present for TargetType, not even an explicit nil
func (o *ArchivalConfig) UnsetTargetType() {
	o.TargetType.Unset()
}

// GetTierSettings returns the TierSettings field value if set, zero value otherwise.
func (o *ArchivalConfig) GetTierSettings() TierLevelSettings {
	if o == nil || o.TierSettings == nil {
		var ret TierLevelSettings
		return ret
	}
	return *o.TierSettings
}

// GetTierSettingsOk returns a tuple with the TierSettings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArchivalConfig) GetTierSettingsOk() (*TierLevelSettings, bool) {
	if o == nil || o.TierSettings == nil {
		return nil, false
	}
	return o.TierSettings, true
}

// HasTierSettings returns a boolean if a field has been set.
func (o *ArchivalConfig) HasTierSettings() bool {
	if o != nil && o.TierSettings != nil {
		return true
	}

	return false
}

// SetTierSettings gets a reference to the given TierLevelSettings and assigns it to the TierSettings field.
func (o *ArchivalConfig) SetTierSettings(v TierLevelSettings) {
	o.TierSettings = &v
}

// GetExtendedRetention returns the ExtendedRetention field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ArchivalConfig) GetExtendedRetention() []ExtendedRetentionPolicy {
	if o == nil  {
		var ret []ExtendedRetentionPolicy
		return ret
	}
	return o.ExtendedRetention
}

// GetExtendedRetentionOk returns a tuple with the ExtendedRetention field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ArchivalConfig) GetExtendedRetentionOk() (*[]ExtendedRetentionPolicy, bool) {
	if o == nil || o.ExtendedRetention == nil {
		return nil, false
	}
	return &o.ExtendedRetention, true
}

// HasExtendedRetention returns a boolean if a field has been set.
func (o *ArchivalConfig) HasExtendedRetention() bool {
	if o != nil && o.ExtendedRetention != nil {
		return true
	}

	return false
}

// SetExtendedRetention gets a reference to the given []ExtendedRetentionPolicy and assigns it to the ExtendedRetention field.
func (o *ArchivalConfig) SetExtendedRetention(v []ExtendedRetentionPolicy) {
	o.ExtendedRetention = v
}

func (o ArchivalConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["schedule"] = o.Schedule
	}
	if true {
		toSerialize["retention"] = o.Retention
	}
	if o.CopyOnRunSuccess.IsSet() {
		toSerialize["copyOnRunSuccess"] = o.CopyOnRunSuccess.Get()
	}
	if o.ConfigId.IsSet() {
		toSerialize["configId"] = o.ConfigId.Get()
	}
	if true {
		toSerialize["targetId"] = o.TargetId.Get()
	}
	if o.TargetName.IsSet() {
		toSerialize["targetName"] = o.TargetName.Get()
	}
	if o.TargetType.IsSet() {
		toSerialize["targetType"] = o.TargetType.Get()
	}
	if o.TierSettings != nil {
		toSerialize["tierSettings"] = o.TierSettings
	}
	if o.ExtendedRetention != nil {
		toSerialize["extendedRetention"] = o.ExtendedRetention
	}
	return json.Marshal(toSerialize)
}

type NullableArchivalConfig struct {
	value *ArchivalConfig
	isSet bool
}

func (v NullableArchivalConfig) Get() *ArchivalConfig {
	return v.value
}

func (v *NullableArchivalConfig) Set(val *ArchivalConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableArchivalConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableArchivalConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArchivalConfig(val *ArchivalConfig) *NullableArchivalConfig {
	return &NullableArchivalConfig{value: val, isSet: true}
}

func (v NullableArchivalConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArchivalConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


