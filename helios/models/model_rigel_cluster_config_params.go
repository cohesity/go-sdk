/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RigelClusterConfigParams Params for Rigel Cluster Creation
type RigelClusterConfigParams struct {
	// Specifies the Nodes present in this Cluster.
	Nodes []RigelClusterNode `json:"nodes,omitempty"`
	// Specifies the endpoint of the dataplane cluster which is associated with this rigel.
	DataplaneEndpoint NullableString `json:"dataplaneEndpoint,omitempty"`
	// Specifies the token which is used to claim this Cluster to Helios.
	ClaimToken NullableString `json:"claimToken,omitempty"`
}

// NewRigelClusterConfigParams instantiates a new RigelClusterConfigParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRigelClusterConfigParams() *RigelClusterConfigParams {
	this := RigelClusterConfigParams{}
	return &this
}

// NewRigelClusterConfigParamsWithDefaults instantiates a new RigelClusterConfigParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRigelClusterConfigParamsWithDefaults() *RigelClusterConfigParams {
	this := RigelClusterConfigParams{}
	return &this
}

// GetNodes returns the Nodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelClusterConfigParams) GetNodes() []RigelClusterNode {
	if o == nil  {
		var ret []RigelClusterNode
		return ret
	}
	return o.Nodes
}

// GetNodesOk returns a tuple with the Nodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelClusterConfigParams) GetNodesOk() (*[]RigelClusterNode, bool) {
	if o == nil || o.Nodes == nil {
		return nil, false
	}
	return &o.Nodes, true
}

// HasNodes returns a boolean if a field has been set.
func (o *RigelClusterConfigParams) HasNodes() bool {
	if o != nil && o.Nodes != nil {
		return true
	}

	return false
}

// SetNodes gets a reference to the given []RigelClusterNode and assigns it to the Nodes field.
func (o *RigelClusterConfigParams) SetNodes(v []RigelClusterNode) {
	o.Nodes = v
}

// GetDataplaneEndpoint returns the DataplaneEndpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelClusterConfigParams) GetDataplaneEndpoint() string {
	if o == nil || o.DataplaneEndpoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.DataplaneEndpoint.Get()
}

// GetDataplaneEndpointOk returns a tuple with the DataplaneEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelClusterConfigParams) GetDataplaneEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataplaneEndpoint.Get(), o.DataplaneEndpoint.IsSet()
}

// HasDataplaneEndpoint returns a boolean if a field has been set.
func (o *RigelClusterConfigParams) HasDataplaneEndpoint() bool {
	if o != nil && o.DataplaneEndpoint.IsSet() {
		return true
	}

	return false
}

// SetDataplaneEndpoint gets a reference to the given NullableString and assigns it to the DataplaneEndpoint field.
func (o *RigelClusterConfigParams) SetDataplaneEndpoint(v string) {
	o.DataplaneEndpoint.Set(&v)
}
// SetDataplaneEndpointNil sets the value for DataplaneEndpoint to be an explicit nil
func (o *RigelClusterConfigParams) SetDataplaneEndpointNil() {
	o.DataplaneEndpoint.Set(nil)
}

// UnsetDataplaneEndpoint ensures that no value is present for DataplaneEndpoint, not even an explicit nil
func (o *RigelClusterConfigParams) UnsetDataplaneEndpoint() {
	o.DataplaneEndpoint.Unset()
}

// GetClaimToken returns the ClaimToken field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RigelClusterConfigParams) GetClaimToken() string {
	if o == nil || o.ClaimToken.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClaimToken.Get()
}

// GetClaimTokenOk returns a tuple with the ClaimToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RigelClusterConfigParams) GetClaimTokenOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClaimToken.Get(), o.ClaimToken.IsSet()
}

// HasClaimToken returns a boolean if a field has been set.
func (o *RigelClusterConfigParams) HasClaimToken() bool {
	if o != nil && o.ClaimToken.IsSet() {
		return true
	}

	return false
}

// SetClaimToken gets a reference to the given NullableString and assigns it to the ClaimToken field.
func (o *RigelClusterConfigParams) SetClaimToken(v string) {
	o.ClaimToken.Set(&v)
}
// SetClaimTokenNil sets the value for ClaimToken to be an explicit nil
func (o *RigelClusterConfigParams) SetClaimTokenNil() {
	o.ClaimToken.Set(nil)
}

// UnsetClaimToken ensures that no value is present for ClaimToken, not even an explicit nil
func (o *RigelClusterConfigParams) UnsetClaimToken() {
	o.ClaimToken.Unset()
}

func (o RigelClusterConfigParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Nodes != nil {
		toSerialize["nodes"] = o.Nodes
	}
	if o.DataplaneEndpoint.IsSet() {
		toSerialize["dataplaneEndpoint"] = o.DataplaneEndpoint.Get()
	}
	if o.ClaimToken.IsSet() {
		toSerialize["claimToken"] = o.ClaimToken.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRigelClusterConfigParams struct {
	value *RigelClusterConfigParams
	isSet bool
}

func (v NullableRigelClusterConfigParams) Get() *RigelClusterConfigParams {
	return v.value
}

func (v *NullableRigelClusterConfigParams) Set(val *RigelClusterConfigParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRigelClusterConfigParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRigelClusterConfigParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRigelClusterConfigParams(val *RigelClusterConfigParams) *NullableRigelClusterConfigParams {
	return &NullableRigelClusterConfigParams{value: val, isSet: true}
}

func (v NullableRigelClusterConfigParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRigelClusterConfigParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


