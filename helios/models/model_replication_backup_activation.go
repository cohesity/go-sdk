/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// ReplicationBackupActivation Specifies the request parmeters to activate the backup of failover entities on replication cluster.
type ReplicationBackupActivation struct {
	// Specifies the list of failover object that need to be protected on replication cluster. If the object set that was sent earlier is provided again then API will return an error. If this objects list is not specified then internally it will be inferred if '/objectLinkage' API has been called previously.
	Objects []FailoverObject `json:"objects,omitempty"`
	// Specifies the protection group id that will be used for backing up the failover entities on replication cluster. This is a optional argument and only need to be passed if user wants to use the existing job for the backup. If specified then Orchastrator should enusre that protection group is compatible to handle all provided failover objects.
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
	// If this is specifed as true, then reverse replication of failover objects will be enabled from replication cluster to source cluster. If source cluster is not reachable, then replications will fail until source cluster comes up again. Here orchastrator should also ensure that storage domain on replication cluster is correctly mapped to the same storage domain on the source cluster.
	EnableReverseReplication NullableBool `json:"enableReverseReplication,omitempty"`
}

// NewReplicationBackupActivation instantiates a new ReplicationBackupActivation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReplicationBackupActivation() *ReplicationBackupActivation {
	this := ReplicationBackupActivation{}
	return &this
}

// NewReplicationBackupActivationWithDefaults instantiates a new ReplicationBackupActivation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReplicationBackupActivationWithDefaults() *ReplicationBackupActivation {
	this := ReplicationBackupActivation{}
	return &this
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationBackupActivation) GetObjects() []FailoverObject {
	if o == nil  {
		var ret []FailoverObject
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationBackupActivation) GetObjectsOk() (*[]FailoverObject, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return &o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *ReplicationBackupActivation) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []FailoverObject and assigns it to the Objects field.
func (o *ReplicationBackupActivation) SetObjects(v []FailoverObject) {
	o.Objects = v
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationBackupActivation) GetProtectionGroupId() string {
	if o == nil || o.ProtectionGroupId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationBackupActivation) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *ReplicationBackupActivation) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *ReplicationBackupActivation) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *ReplicationBackupActivation) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *ReplicationBackupActivation) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

// GetEnableReverseReplication returns the EnableReverseReplication field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReplicationBackupActivation) GetEnableReverseReplication() bool {
	if o == nil || o.EnableReverseReplication.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableReverseReplication.Get()
}

// GetEnableReverseReplicationOk returns a tuple with the EnableReverseReplication field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReplicationBackupActivation) GetEnableReverseReplicationOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableReverseReplication.Get(), o.EnableReverseReplication.IsSet()
}

// HasEnableReverseReplication returns a boolean if a field has been set.
func (o *ReplicationBackupActivation) HasEnableReverseReplication() bool {
	if o != nil && o.EnableReverseReplication.IsSet() {
		return true
	}

	return false
}

// SetEnableReverseReplication gets a reference to the given NullableBool and assigns it to the EnableReverseReplication field.
func (o *ReplicationBackupActivation) SetEnableReverseReplication(v bool) {
	o.EnableReverseReplication.Set(&v)
}
// SetEnableReverseReplicationNil sets the value for EnableReverseReplication to be an explicit nil
func (o *ReplicationBackupActivation) SetEnableReverseReplicationNil() {
	o.EnableReverseReplication.Set(nil)
}

// UnsetEnableReverseReplication ensures that no value is present for EnableReverseReplication, not even an explicit nil
func (o *ReplicationBackupActivation) UnsetEnableReverseReplication() {
	o.EnableReverseReplication.Unset()
}

func (o ReplicationBackupActivation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	if o.EnableReverseReplication.IsSet() {
		toSerialize["enableReverseReplication"] = o.EnableReverseReplication.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableReplicationBackupActivation struct {
	value *ReplicationBackupActivation
	isSet bool
}

func (v NullableReplicationBackupActivation) Get() *ReplicationBackupActivation {
	return v.value
}

func (v *NullableReplicationBackupActivation) Set(val *ReplicationBackupActivation) {
	v.value = val
	v.isSet = true
}

func (v NullableReplicationBackupActivation) IsSet() bool {
	return v.isSet
}

func (v *NullableReplicationBackupActivation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReplicationBackupActivation(val *ReplicationBackupActivation) *NullableReplicationBackupActivation {
	return &NullableReplicationBackupActivation{value: val, isSet: true}
}

func (v NullableReplicationBackupActivation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReplicationBackupActivation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


