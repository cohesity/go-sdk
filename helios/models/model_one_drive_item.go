/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// OneDriveItem Specifies a OneDrive item to recover.
type OneDriveItem struct {
	// Specifies the item id.
	Id NullableString `json:"id,omitempty"`
	// Specifies the path to the OneDrive item.
	ItemPath NullableString `json:"itemPath,omitempty"`
	// Specifies if the item is a file.
	IsFile NullableBool `json:"isFile,omitempty"`
}

// NewOneDriveItem instantiates a new OneDriveItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOneDriveItem() *OneDriveItem {
	this := OneDriveItem{}
	return &this
}

// NewOneDriveItemWithDefaults instantiates a new OneDriveItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOneDriveItemWithDefaults() *OneDriveItem {
	this := OneDriveItem{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveItem) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveItem) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *OneDriveItem) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *OneDriveItem) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *OneDriveItem) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *OneDriveItem) UnsetId() {
	o.Id.Unset()
}

// GetItemPath returns the ItemPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveItem) GetItemPath() string {
	if o == nil || o.ItemPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemPath.Get()
}

// GetItemPathOk returns a tuple with the ItemPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveItem) GetItemPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemPath.Get(), o.ItemPath.IsSet()
}

// HasItemPath returns a boolean if a field has been set.
func (o *OneDriveItem) HasItemPath() bool {
	if o != nil && o.ItemPath.IsSet() {
		return true
	}

	return false
}

// SetItemPath gets a reference to the given NullableString and assigns it to the ItemPath field.
func (o *OneDriveItem) SetItemPath(v string) {
	o.ItemPath.Set(&v)
}
// SetItemPathNil sets the value for ItemPath to be an explicit nil
func (o *OneDriveItem) SetItemPathNil() {
	o.ItemPath.Set(nil)
}

// UnsetItemPath ensures that no value is present for ItemPath, not even an explicit nil
func (o *OneDriveItem) UnsetItemPath() {
	o.ItemPath.Unset()
}

// GetIsFile returns the IsFile field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveItem) GetIsFile() bool {
	if o == nil || o.IsFile.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsFile.Get()
}

// GetIsFileOk returns a tuple with the IsFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveItem) GetIsFileOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsFile.Get(), o.IsFile.IsSet()
}

// HasIsFile returns a boolean if a field has been set.
func (o *OneDriveItem) HasIsFile() bool {
	if o != nil && o.IsFile.IsSet() {
		return true
	}

	return false
}

// SetIsFile gets a reference to the given NullableBool and assigns it to the IsFile field.
func (o *OneDriveItem) SetIsFile(v bool) {
	o.IsFile.Set(&v)
}
// SetIsFileNil sets the value for IsFile to be an explicit nil
func (o *OneDriveItem) SetIsFileNil() {
	o.IsFile.Set(nil)
}

// UnsetIsFile ensures that no value is present for IsFile, not even an explicit nil
func (o *OneDriveItem) UnsetIsFile() {
	o.IsFile.Unset()
}

func (o OneDriveItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.ItemPath.IsSet() {
		toSerialize["itemPath"] = o.ItemPath.Get()
	}
	if o.IsFile.IsSet() {
		toSerialize["isFile"] = o.IsFile.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOneDriveItem struct {
	value *OneDriveItem
	isSet bool
}

func (v NullableOneDriveItem) Get() *OneDriveItem {
	return v.value
}

func (v *NullableOneDriveItem) Set(val *OneDriveItem) {
	v.value = val
	v.isSet = true
}

func (v NullableOneDriveItem) IsSet() bool {
	return v.isSet
}

func (v *NullableOneDriveItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneDriveItem(val *OneDriveItem) *NullableOneDriveItem {
	return &NullableOneDriveItem{value: val, isSet: true}
}

func (v NullableOneDriveItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneDriveItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


