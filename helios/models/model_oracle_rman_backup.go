/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// OracleRmanBackup Specifies Oracle RMAN backup requested type.
type OracleRmanBackup struct {
	// Specifies Oracle RMAN backup requested type.
	OracleRmanBackup *string `json:"oracleRmanBackup,omitempty"`
}

// NewOracleRmanBackup instantiates a new OracleRmanBackup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRmanBackup() *OracleRmanBackup {
	this := OracleRmanBackup{}
	return &this
}

// NewOracleRmanBackupWithDefaults instantiates a new OracleRmanBackup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRmanBackupWithDefaults() *OracleRmanBackup {
	this := OracleRmanBackup{}
	return &this
}

// GetOracleRmanBackup returns the OracleRmanBackup field value if set, zero value otherwise.
func (o *OracleRmanBackup) GetOracleRmanBackup() string {
	if o == nil || o.OracleRmanBackup == nil {
		var ret string
		return ret
	}
	return *o.OracleRmanBackup
}

// GetOracleRmanBackupOk returns a tuple with the OracleRmanBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OracleRmanBackup) GetOracleRmanBackupOk() (*string, bool) {
	if o == nil || o.OracleRmanBackup == nil {
		return nil, false
	}
	return o.OracleRmanBackup, true
}

// HasOracleRmanBackup returns a boolean if a field has been set.
func (o *OracleRmanBackup) HasOracleRmanBackup() bool {
	if o != nil && o.OracleRmanBackup != nil {
		return true
	}

	return false
}

// SetOracleRmanBackup gets a reference to the given string and assigns it to the OracleRmanBackup field.
func (o *OracleRmanBackup) SetOracleRmanBackup(v string) {
	o.OracleRmanBackup = &v
}

func (o OracleRmanBackup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.OracleRmanBackup != nil {
		toSerialize["oracleRmanBackup"] = o.OracleRmanBackup
	}
	return json.Marshal(toSerialize)
}

type NullableOracleRmanBackup struct {
	value *OracleRmanBackup
	isSet bool
}

func (v NullableOracleRmanBackup) Get() *OracleRmanBackup {
	return v.value
}

func (v *NullableOracleRmanBackup) Set(val *OracleRmanBackup) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRmanBackup) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRmanBackup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRmanBackup(val *OracleRmanBackup) *NullableOracleRmanBackup {
	return &NullableOracleRmanBackup{value: val, isSet: true}
}

func (v NullableOracleRmanBackup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRmanBackup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


