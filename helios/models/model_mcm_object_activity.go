/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// McmObjectActivity Specifies the Object activity.
type McmObjectActivity struct {
	// Specifies the unique id of the activity event.
	Id NullableString `json:"id,omitempty"`
	Object *ObjectSummary `json:"object,omitempty"`
	SourceInfo *ObjectSummary `json:"sourceInfo,omitempty"`
	// Specifies the cluster id.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the cluster incarnation id.
	ClusterIncarnationId NullableInt64 `json:"clusterIncarnationId,omitempty"`
	// Specifies the region id. Applicable only in case of DMaaS.
	RegionId NullableString `json:"regionId,omitempty"`
	// Specifies the timestamp in Unix timestamp epoch in microseconds at which this activity occured.
	TimestampUsecs NullableInt64 `json:"timestampUsecs,omitempty"`
	// Specifies the type of activity event.
	Type NullableString `json:"type,omitempty"`
	BackupRunParams *McmObjectBackupRunActivityParams `json:"backupRunParams,omitempty"`
	RecoveryParams *McmObjectRecoverActivityParams `json:"recoveryParams,omitempty"`
	ArchivalRunParams *McmObjectArchivalRunActivityParams `json:"archivalRunParams,omitempty"`
}

// NewMcmObjectActivity instantiates a new McmObjectActivity object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMcmObjectActivity() *McmObjectActivity {
	this := McmObjectActivity{}
	return &this
}

// NewMcmObjectActivityWithDefaults instantiates a new McmObjectActivity object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMcmObjectActivityWithDefaults() *McmObjectActivity {
	this := McmObjectActivity{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmObjectActivity) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmObjectActivity) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *McmObjectActivity) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *McmObjectActivity) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *McmObjectActivity) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *McmObjectActivity) UnsetId() {
	o.Id.Unset()
}

// GetObject returns the Object field value if set, zero value otherwise.
func (o *McmObjectActivity) GetObject() ObjectSummary {
	if o == nil || o.Object == nil {
		var ret ObjectSummary
		return ret
	}
	return *o.Object
}

// GetObjectOk returns a tuple with the Object field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmObjectActivity) GetObjectOk() (*ObjectSummary, bool) {
	if o == nil || o.Object == nil {
		return nil, false
	}
	return o.Object, true
}

// HasObject returns a boolean if a field has been set.
func (o *McmObjectActivity) HasObject() bool {
	if o != nil && o.Object != nil {
		return true
	}

	return false
}

// SetObject gets a reference to the given ObjectSummary and assigns it to the Object field.
func (o *McmObjectActivity) SetObject(v ObjectSummary) {
	o.Object = &v
}

// GetSourceInfo returns the SourceInfo field value if set, zero value otherwise.
func (o *McmObjectActivity) GetSourceInfo() ObjectSummary {
	if o == nil || o.SourceInfo == nil {
		var ret ObjectSummary
		return ret
	}
	return *o.SourceInfo
}

// GetSourceInfoOk returns a tuple with the SourceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmObjectActivity) GetSourceInfoOk() (*ObjectSummary, bool) {
	if o == nil || o.SourceInfo == nil {
		return nil, false
	}
	return o.SourceInfo, true
}

// HasSourceInfo returns a boolean if a field has been set.
func (o *McmObjectActivity) HasSourceInfo() bool {
	if o != nil && o.SourceInfo != nil {
		return true
	}

	return false
}

// SetSourceInfo gets a reference to the given ObjectSummary and assigns it to the SourceInfo field.
func (o *McmObjectActivity) SetSourceInfo(v ObjectSummary) {
	o.SourceInfo = &v
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmObjectActivity) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmObjectActivity) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *McmObjectActivity) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *McmObjectActivity) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *McmObjectActivity) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *McmObjectActivity) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterIncarnationId returns the ClusterIncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmObjectActivity) GetClusterIncarnationId() int64 {
	if o == nil || o.ClusterIncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterIncarnationId.Get()
}

// GetClusterIncarnationIdOk returns a tuple with the ClusterIncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmObjectActivity) GetClusterIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterIncarnationId.Get(), o.ClusterIncarnationId.IsSet()
}

// HasClusterIncarnationId returns a boolean if a field has been set.
func (o *McmObjectActivity) HasClusterIncarnationId() bool {
	if o != nil && o.ClusterIncarnationId.IsSet() {
		return true
	}

	return false
}

// SetClusterIncarnationId gets a reference to the given NullableInt64 and assigns it to the ClusterIncarnationId field.
func (o *McmObjectActivity) SetClusterIncarnationId(v int64) {
	o.ClusterIncarnationId.Set(&v)
}
// SetClusterIncarnationIdNil sets the value for ClusterIncarnationId to be an explicit nil
func (o *McmObjectActivity) SetClusterIncarnationIdNil() {
	o.ClusterIncarnationId.Set(nil)
}

// UnsetClusterIncarnationId ensures that no value is present for ClusterIncarnationId, not even an explicit nil
func (o *McmObjectActivity) UnsetClusterIncarnationId() {
	o.ClusterIncarnationId.Unset()
}

// GetRegionId returns the RegionId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmObjectActivity) GetRegionId() string {
	if o == nil || o.RegionId.Get() == nil {
		var ret string
		return ret
	}
	return *o.RegionId.Get()
}

// GetRegionIdOk returns a tuple with the RegionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmObjectActivity) GetRegionIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegionId.Get(), o.RegionId.IsSet()
}

// HasRegionId returns a boolean if a field has been set.
func (o *McmObjectActivity) HasRegionId() bool {
	if o != nil && o.RegionId.IsSet() {
		return true
	}

	return false
}

// SetRegionId gets a reference to the given NullableString and assigns it to the RegionId field.
func (o *McmObjectActivity) SetRegionId(v string) {
	o.RegionId.Set(&v)
}
// SetRegionIdNil sets the value for RegionId to be an explicit nil
func (o *McmObjectActivity) SetRegionIdNil() {
	o.RegionId.Set(nil)
}

// UnsetRegionId ensures that no value is present for RegionId, not even an explicit nil
func (o *McmObjectActivity) UnsetRegionId() {
	o.RegionId.Unset()
}

// GetTimestampUsecs returns the TimestampUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmObjectActivity) GetTimestampUsecs() int64 {
	if o == nil || o.TimestampUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TimestampUsecs.Get()
}

// GetTimestampUsecsOk returns a tuple with the TimestampUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmObjectActivity) GetTimestampUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimestampUsecs.Get(), o.TimestampUsecs.IsSet()
}

// HasTimestampUsecs returns a boolean if a field has been set.
func (o *McmObjectActivity) HasTimestampUsecs() bool {
	if o != nil && o.TimestampUsecs.IsSet() {
		return true
	}

	return false
}

// SetTimestampUsecs gets a reference to the given NullableInt64 and assigns it to the TimestampUsecs field.
func (o *McmObjectActivity) SetTimestampUsecs(v int64) {
	o.TimestampUsecs.Set(&v)
}
// SetTimestampUsecsNil sets the value for TimestampUsecs to be an explicit nil
func (o *McmObjectActivity) SetTimestampUsecsNil() {
	o.TimestampUsecs.Set(nil)
}

// UnsetTimestampUsecs ensures that no value is present for TimestampUsecs, not even an explicit nil
func (o *McmObjectActivity) UnsetTimestampUsecs() {
	o.TimestampUsecs.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *McmObjectActivity) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *McmObjectActivity) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *McmObjectActivity) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *McmObjectActivity) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *McmObjectActivity) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *McmObjectActivity) UnsetType() {
	o.Type.Unset()
}

// GetBackupRunParams returns the BackupRunParams field value if set, zero value otherwise.
func (o *McmObjectActivity) GetBackupRunParams() McmObjectBackupRunActivityParams {
	if o == nil || o.BackupRunParams == nil {
		var ret McmObjectBackupRunActivityParams
		return ret
	}
	return *o.BackupRunParams
}

// GetBackupRunParamsOk returns a tuple with the BackupRunParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmObjectActivity) GetBackupRunParamsOk() (*McmObjectBackupRunActivityParams, bool) {
	if o == nil || o.BackupRunParams == nil {
		return nil, false
	}
	return o.BackupRunParams, true
}

// HasBackupRunParams returns a boolean if a field has been set.
func (o *McmObjectActivity) HasBackupRunParams() bool {
	if o != nil && o.BackupRunParams != nil {
		return true
	}

	return false
}

// SetBackupRunParams gets a reference to the given McmObjectBackupRunActivityParams and assigns it to the BackupRunParams field.
func (o *McmObjectActivity) SetBackupRunParams(v McmObjectBackupRunActivityParams) {
	o.BackupRunParams = &v
}

// GetRecoveryParams returns the RecoveryParams field value if set, zero value otherwise.
func (o *McmObjectActivity) GetRecoveryParams() McmObjectRecoverActivityParams {
	if o == nil || o.RecoveryParams == nil {
		var ret McmObjectRecoverActivityParams
		return ret
	}
	return *o.RecoveryParams
}

// GetRecoveryParamsOk returns a tuple with the RecoveryParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmObjectActivity) GetRecoveryParamsOk() (*McmObjectRecoverActivityParams, bool) {
	if o == nil || o.RecoveryParams == nil {
		return nil, false
	}
	return o.RecoveryParams, true
}

// HasRecoveryParams returns a boolean if a field has been set.
func (o *McmObjectActivity) HasRecoveryParams() bool {
	if o != nil && o.RecoveryParams != nil {
		return true
	}

	return false
}

// SetRecoveryParams gets a reference to the given McmObjectRecoverActivityParams and assigns it to the RecoveryParams field.
func (o *McmObjectActivity) SetRecoveryParams(v McmObjectRecoverActivityParams) {
	o.RecoveryParams = &v
}

// GetArchivalRunParams returns the ArchivalRunParams field value if set, zero value otherwise.
func (o *McmObjectActivity) GetArchivalRunParams() McmObjectArchivalRunActivityParams {
	if o == nil || o.ArchivalRunParams == nil {
		var ret McmObjectArchivalRunActivityParams
		return ret
	}
	return *o.ArchivalRunParams
}

// GetArchivalRunParamsOk returns a tuple with the ArchivalRunParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *McmObjectActivity) GetArchivalRunParamsOk() (*McmObjectArchivalRunActivityParams, bool) {
	if o == nil || o.ArchivalRunParams == nil {
		return nil, false
	}
	return o.ArchivalRunParams, true
}

// HasArchivalRunParams returns a boolean if a field has been set.
func (o *McmObjectActivity) HasArchivalRunParams() bool {
	if o != nil && o.ArchivalRunParams != nil {
		return true
	}

	return false
}

// SetArchivalRunParams gets a reference to the given McmObjectArchivalRunActivityParams and assigns it to the ArchivalRunParams field.
func (o *McmObjectActivity) SetArchivalRunParams(v McmObjectArchivalRunActivityParams) {
	o.ArchivalRunParams = &v
}

func (o McmObjectActivity) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Object != nil {
		toSerialize["object"] = o.Object
	}
	if o.SourceInfo != nil {
		toSerialize["sourceInfo"] = o.SourceInfo
	}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterIncarnationId.IsSet() {
		toSerialize["clusterIncarnationId"] = o.ClusterIncarnationId.Get()
	}
	if o.RegionId.IsSet() {
		toSerialize["regionId"] = o.RegionId.Get()
	}
	if o.TimestampUsecs.IsSet() {
		toSerialize["timestampUsecs"] = o.TimestampUsecs.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.BackupRunParams != nil {
		toSerialize["backupRunParams"] = o.BackupRunParams
	}
	if o.RecoveryParams != nil {
		toSerialize["recoveryParams"] = o.RecoveryParams
	}
	if o.ArchivalRunParams != nil {
		toSerialize["archivalRunParams"] = o.ArchivalRunParams
	}
	return json.Marshal(toSerialize)
}

type NullableMcmObjectActivity struct {
	value *McmObjectActivity
	isSet bool
}

func (v NullableMcmObjectActivity) Get() *McmObjectActivity {
	return v.value
}

func (v *NullableMcmObjectActivity) Set(val *McmObjectActivity) {
	v.value = val
	v.isSet = true
}

func (v NullableMcmObjectActivity) IsSet() bool {
	return v.isSet
}

func (v *NullableMcmObjectActivity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMcmObjectActivity(val *McmObjectActivity) *NullableMcmObjectActivity {
	return &NullableMcmObjectActivity{value: val, isSet: true}
}

func (v NullableMcmObjectActivity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMcmObjectActivity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


