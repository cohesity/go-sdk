/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// UdaSourceRegistrationParams Specifies parameters to register a Universal Data Adapter source.
type UdaSourceRegistrationParams struct {
	// Specifies the source type for Universal Data Adapter source.
	SourceType string `json:"sourceType"`
	// Specifies the IPs/hostnames for the nodes forming the Universal Data Adapter source cluster.
	Hosts []string `json:"hosts"`
	Credentials *UdaSourceRegistrationParamsCredentials `json:"credentials,omitempty"`
	// Specifies the absolute path of scripts used to interact with the Universal Data Adapter source.
	ScriptDir string `json:"scriptDir"`
	// Specifies if SMB/NFS view mounting should be enabled on source. Default value is false.
	MountView NullableBool `json:"mountView,omitempty"`
	ViewParams NullableUdaSourceRegistrationParamsViewParams `json:"viewParams,omitempty"`
	// Specifies custom arguments to be supplied to the source registration scripts.
	SourceRegistrationArgs NullableString `json:"sourceRegistrationArgs,omitempty"`
}

// NewUdaSourceRegistrationParams instantiates a new UdaSourceRegistrationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaSourceRegistrationParams(sourceType string, hosts []string, scriptDir string) *UdaSourceRegistrationParams {
	this := UdaSourceRegistrationParams{}
	this.SourceType = sourceType
	this.Hosts = hosts
	this.ScriptDir = scriptDir
	return &this
}

// NewUdaSourceRegistrationParamsWithDefaults instantiates a new UdaSourceRegistrationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaSourceRegistrationParamsWithDefaults() *UdaSourceRegistrationParams {
	this := UdaSourceRegistrationParams{}
	return &this
}

// GetSourceType returns the SourceType field value
func (o *UdaSourceRegistrationParams) GetSourceType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.SourceType
}

// GetSourceTypeOk returns a tuple with the SourceType field value
// and a boolean to check if the value has been set.
func (o *UdaSourceRegistrationParams) GetSourceTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SourceType, true
}

// SetSourceType sets field value
func (o *UdaSourceRegistrationParams) SetSourceType(v string) {
	o.SourceType = v
}

// GetHosts returns the Hosts field value
func (o *UdaSourceRegistrationParams) GetHosts() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value
// and a boolean to check if the value has been set.
func (o *UdaSourceRegistrationParams) GetHostsOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.Hosts, true
}

// SetHosts sets field value
func (o *UdaSourceRegistrationParams) SetHosts(v []string) {
	o.Hosts = v
}

// GetCredentials returns the Credentials field value if set, zero value otherwise.
func (o *UdaSourceRegistrationParams) GetCredentials() UdaSourceRegistrationParamsCredentials {
	if o == nil || o.Credentials == nil {
		var ret UdaSourceRegistrationParamsCredentials
		return ret
	}
	return *o.Credentials
}

// GetCredentialsOk returns a tuple with the Credentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UdaSourceRegistrationParams) GetCredentialsOk() (*UdaSourceRegistrationParamsCredentials, bool) {
	if o == nil || o.Credentials == nil {
		return nil, false
	}
	return o.Credentials, true
}

// HasCredentials returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParams) HasCredentials() bool {
	if o != nil && o.Credentials != nil {
		return true
	}

	return false
}

// SetCredentials gets a reference to the given UdaSourceRegistrationParamsCredentials and assigns it to the Credentials field.
func (o *UdaSourceRegistrationParams) SetCredentials(v UdaSourceRegistrationParamsCredentials) {
	o.Credentials = &v
}

// GetScriptDir returns the ScriptDir field value
func (o *UdaSourceRegistrationParams) GetScriptDir() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ScriptDir
}

// GetScriptDirOk returns a tuple with the ScriptDir field value
// and a boolean to check if the value has been set.
func (o *UdaSourceRegistrationParams) GetScriptDirOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ScriptDir, true
}

// SetScriptDir sets field value
func (o *UdaSourceRegistrationParams) SetScriptDir(v string) {
	o.ScriptDir = v
}

// GetMountView returns the MountView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaSourceRegistrationParams) GetMountView() bool {
	if o == nil || o.MountView.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MountView.Get()
}

// GetMountViewOk returns a tuple with the MountView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaSourceRegistrationParams) GetMountViewOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountView.Get(), o.MountView.IsSet()
}

// HasMountView returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParams) HasMountView() bool {
	if o != nil && o.MountView.IsSet() {
		return true
	}

	return false
}

// SetMountView gets a reference to the given NullableBool and assigns it to the MountView field.
func (o *UdaSourceRegistrationParams) SetMountView(v bool) {
	o.MountView.Set(&v)
}
// SetMountViewNil sets the value for MountView to be an explicit nil
func (o *UdaSourceRegistrationParams) SetMountViewNil() {
	o.MountView.Set(nil)
}

// UnsetMountView ensures that no value is present for MountView, not even an explicit nil
func (o *UdaSourceRegistrationParams) UnsetMountView() {
	o.MountView.Unset()
}

// GetViewParams returns the ViewParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaSourceRegistrationParams) GetViewParams() UdaSourceRegistrationParamsViewParams {
	if o == nil || o.ViewParams.Get() == nil {
		var ret UdaSourceRegistrationParamsViewParams
		return ret
	}
	return *o.ViewParams.Get()
}

// GetViewParamsOk returns a tuple with the ViewParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaSourceRegistrationParams) GetViewParamsOk() (*UdaSourceRegistrationParamsViewParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewParams.Get(), o.ViewParams.IsSet()
}

// HasViewParams returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParams) HasViewParams() bool {
	if o != nil && o.ViewParams.IsSet() {
		return true
	}

	return false
}

// SetViewParams gets a reference to the given NullableUdaSourceRegistrationParamsViewParams and assigns it to the ViewParams field.
func (o *UdaSourceRegistrationParams) SetViewParams(v UdaSourceRegistrationParamsViewParams) {
	o.ViewParams.Set(&v)
}
// SetViewParamsNil sets the value for ViewParams to be an explicit nil
func (o *UdaSourceRegistrationParams) SetViewParamsNil() {
	o.ViewParams.Set(nil)
}

// UnsetViewParams ensures that no value is present for ViewParams, not even an explicit nil
func (o *UdaSourceRegistrationParams) UnsetViewParams() {
	o.ViewParams.Unset()
}

// GetSourceRegistrationArgs returns the SourceRegistrationArgs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaSourceRegistrationParams) GetSourceRegistrationArgs() string {
	if o == nil || o.SourceRegistrationArgs.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceRegistrationArgs.Get()
}

// GetSourceRegistrationArgsOk returns a tuple with the SourceRegistrationArgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaSourceRegistrationParams) GetSourceRegistrationArgsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceRegistrationArgs.Get(), o.SourceRegistrationArgs.IsSet()
}

// HasSourceRegistrationArgs returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParams) HasSourceRegistrationArgs() bool {
	if o != nil && o.SourceRegistrationArgs.IsSet() {
		return true
	}

	return false
}

// SetSourceRegistrationArgs gets a reference to the given NullableString and assigns it to the SourceRegistrationArgs field.
func (o *UdaSourceRegistrationParams) SetSourceRegistrationArgs(v string) {
	o.SourceRegistrationArgs.Set(&v)
}
// SetSourceRegistrationArgsNil sets the value for SourceRegistrationArgs to be an explicit nil
func (o *UdaSourceRegistrationParams) SetSourceRegistrationArgsNil() {
	o.SourceRegistrationArgs.Set(nil)
}

// UnsetSourceRegistrationArgs ensures that no value is present for SourceRegistrationArgs, not even an explicit nil
func (o *UdaSourceRegistrationParams) UnsetSourceRegistrationArgs() {
	o.SourceRegistrationArgs.Unset()
}

func (o UdaSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["sourceType"] = o.SourceType
	}
	if true {
		toSerialize["hosts"] = o.Hosts
	}
	if o.Credentials != nil {
		toSerialize["credentials"] = o.Credentials
	}
	if true {
		toSerialize["scriptDir"] = o.ScriptDir
	}
	if o.MountView.IsSet() {
		toSerialize["mountView"] = o.MountView.Get()
	}
	if o.ViewParams.IsSet() {
		toSerialize["viewParams"] = o.ViewParams.Get()
	}
	if o.SourceRegistrationArgs.IsSet() {
		toSerialize["sourceRegistrationArgs"] = o.SourceRegistrationArgs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUdaSourceRegistrationParams struct {
	value *UdaSourceRegistrationParams
	isSet bool
}

func (v NullableUdaSourceRegistrationParams) Get() *UdaSourceRegistrationParams {
	return v.value
}

func (v *NullableUdaSourceRegistrationParams) Set(val *UdaSourceRegistrationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaSourceRegistrationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaSourceRegistrationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaSourceRegistrationParams(val *UdaSourceRegistrationParams) *NullableUdaSourceRegistrationParams {
	return &NullableUdaSourceRegistrationParams{value: val, isSet: true}
}

func (v NullableUdaSourceRegistrationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaSourceRegistrationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


