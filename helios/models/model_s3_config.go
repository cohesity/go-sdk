/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// S3Config Specifies the S3 config settings for this View.
type S3Config struct {
	// Specifies the path to access this View as an S3 share.
	S3AccessPath NullableString `json:"s3AccessPath,omitempty"`
	// Specifies the ACL config of the View as an S3 bucket.
	AclConfig *AclConfig `json:"aclConfig,omitempty"`
	// Specifies the owner info of the View as an S3 bucket.
	OwnerInfo *S3OwnerInfo `json:"ownerInfo,omitempty"`
}

// NewS3Config instantiates a new S3Config object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewS3Config() *S3Config {
	this := S3Config{}
	return &this
}

// NewS3ConfigWithDefaults instantiates a new S3Config object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewS3ConfigWithDefaults() *S3Config {
	this := S3Config{}
	return &this
}

// GetS3AccessPath returns the S3AccessPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *S3Config) GetS3AccessPath() string {
	if o == nil || o.S3AccessPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.S3AccessPath.Get()
}

// GetS3AccessPathOk returns a tuple with the S3AccessPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *S3Config) GetS3AccessPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3AccessPath.Get(), o.S3AccessPath.IsSet()
}

// HasS3AccessPath returns a boolean if a field has been set.
func (o *S3Config) HasS3AccessPath() bool {
	if o != nil && o.S3AccessPath.IsSet() {
		return true
	}

	return false
}

// SetS3AccessPath gets a reference to the given NullableString and assigns it to the S3AccessPath field.
func (o *S3Config) SetS3AccessPath(v string) {
	o.S3AccessPath.Set(&v)
}
// SetS3AccessPathNil sets the value for S3AccessPath to be an explicit nil
func (o *S3Config) SetS3AccessPathNil() {
	o.S3AccessPath.Set(nil)
}

// UnsetS3AccessPath ensures that no value is present for S3AccessPath, not even an explicit nil
func (o *S3Config) UnsetS3AccessPath() {
	o.S3AccessPath.Unset()
}

// GetAclConfig returns the AclConfig field value if set, zero value otherwise.
func (o *S3Config) GetAclConfig() AclConfig {
	if o == nil || o.AclConfig == nil {
		var ret AclConfig
		return ret
	}
	return *o.AclConfig
}

// GetAclConfigOk returns a tuple with the AclConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Config) GetAclConfigOk() (*AclConfig, bool) {
	if o == nil || o.AclConfig == nil {
		return nil, false
	}
	return o.AclConfig, true
}

// HasAclConfig returns a boolean if a field has been set.
func (o *S3Config) HasAclConfig() bool {
	if o != nil && o.AclConfig != nil {
		return true
	}

	return false
}

// SetAclConfig gets a reference to the given AclConfig and assigns it to the AclConfig field.
func (o *S3Config) SetAclConfig(v AclConfig) {
	o.AclConfig = &v
}

// GetOwnerInfo returns the OwnerInfo field value if set, zero value otherwise.
func (o *S3Config) GetOwnerInfo() S3OwnerInfo {
	if o == nil || o.OwnerInfo == nil {
		var ret S3OwnerInfo
		return ret
	}
	return *o.OwnerInfo
}

// GetOwnerInfoOk returns a tuple with the OwnerInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *S3Config) GetOwnerInfoOk() (*S3OwnerInfo, bool) {
	if o == nil || o.OwnerInfo == nil {
		return nil, false
	}
	return o.OwnerInfo, true
}

// HasOwnerInfo returns a boolean if a field has been set.
func (o *S3Config) HasOwnerInfo() bool {
	if o != nil && o.OwnerInfo != nil {
		return true
	}

	return false
}

// SetOwnerInfo gets a reference to the given S3OwnerInfo and assigns it to the OwnerInfo field.
func (o *S3Config) SetOwnerInfo(v S3OwnerInfo) {
	o.OwnerInfo = &v
}

func (o S3Config) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.S3AccessPath.IsSet() {
		toSerialize["s3AccessPath"] = o.S3AccessPath.Get()
	}
	if o.AclConfig != nil {
		toSerialize["aclConfig"] = o.AclConfig
	}
	if o.OwnerInfo != nil {
		toSerialize["ownerInfo"] = o.OwnerInfo
	}
	return json.Marshal(toSerialize)
}

type NullableS3Config struct {
	value *S3Config
	isSet bool
}

func (v NullableS3Config) Get() *S3Config {
	return v.value
}

func (v *NullableS3Config) Set(val *S3Config) {
	v.value = val
	v.isSet = true
}

func (v NullableS3Config) IsSet() bool {
	return v.isSet
}

func (v *NullableS3Config) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableS3Config(val *S3Config) *NullableS3Config {
	return &NullableS3Config{value: val, isSet: true}
}

func (v NullableS3Config) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableS3Config) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


