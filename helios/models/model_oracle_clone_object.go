/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// OracleCloneObject Specifies the information about an Oracle clone object.
type OracleCloneObject struct {
	// Specifies the name of the cloned database.
	DbName NullableString `json:"dbName"`
	// Specifies the home folder for the cloned database.
	HomeFolder NullableString `json:"homeFolder"`
	// Specifies the base folder of Oracle installation on the target host.
	BaseFolder NullableString `json:"baseFolder"`
	// Specifies the System Global Area (SGA) for the clone database.
	Sga NullableString `json:"sga,omitempty"`
	// Specifies the version of the Oracle database.
	DbVersion NullableString `json:"dbVersion,omitempty"`
}

// NewOracleCloneObject instantiates a new OracleCloneObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleCloneObject(dbName NullableString, homeFolder NullableString, baseFolder NullableString) *OracleCloneObject {
	this := OracleCloneObject{}
	this.DbName = dbName
	this.HomeFolder = homeFolder
	this.BaseFolder = baseFolder
	return &this
}

// NewOracleCloneObjectWithDefaults instantiates a new OracleCloneObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleCloneObjectWithDefaults() *OracleCloneObject {
	this := OracleCloneObject{}
	return &this
}

// GetDbName returns the DbName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OracleCloneObject) GetDbName() string {
	if o == nil || o.DbName.Get() == nil {
		var ret string
		return ret
	}

	return *o.DbName.Get()
}

// GetDbNameOk returns a tuple with the DbName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneObject) GetDbNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbName.Get(), o.DbName.IsSet()
}

// SetDbName sets field value
func (o *OracleCloneObject) SetDbName(v string) {
	o.DbName.Set(&v)
}

// GetHomeFolder returns the HomeFolder field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OracleCloneObject) GetHomeFolder() string {
	if o == nil || o.HomeFolder.Get() == nil {
		var ret string
		return ret
	}

	return *o.HomeFolder.Get()
}

// GetHomeFolderOk returns a tuple with the HomeFolder field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneObject) GetHomeFolderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HomeFolder.Get(), o.HomeFolder.IsSet()
}

// SetHomeFolder sets field value
func (o *OracleCloneObject) SetHomeFolder(v string) {
	o.HomeFolder.Set(&v)
}

// GetBaseFolder returns the BaseFolder field value
// If the value is explicit nil, the zero value for string will be returned
func (o *OracleCloneObject) GetBaseFolder() string {
	if o == nil || o.BaseFolder.Get() == nil {
		var ret string
		return ret
	}

	return *o.BaseFolder.Get()
}

// GetBaseFolderOk returns a tuple with the BaseFolder field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneObject) GetBaseFolderOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BaseFolder.Get(), o.BaseFolder.IsSet()
}

// SetBaseFolder sets field value
func (o *OracleCloneObject) SetBaseFolder(v string) {
	o.BaseFolder.Set(&v)
}

// GetSga returns the Sga field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleCloneObject) GetSga() string {
	if o == nil || o.Sga.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sga.Get()
}

// GetSgaOk returns a tuple with the Sga field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneObject) GetSgaOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sga.Get(), o.Sga.IsSet()
}

// HasSga returns a boolean if a field has been set.
func (o *OracleCloneObject) HasSga() bool {
	if o != nil && o.Sga.IsSet() {
		return true
	}

	return false
}

// SetSga gets a reference to the given NullableString and assigns it to the Sga field.
func (o *OracleCloneObject) SetSga(v string) {
	o.Sga.Set(&v)
}
// SetSgaNil sets the value for Sga to be an explicit nil
func (o *OracleCloneObject) SetSgaNil() {
	o.Sga.Set(nil)
}

// UnsetSga ensures that no value is present for Sga, not even an explicit nil
func (o *OracleCloneObject) UnsetSga() {
	o.Sga.Unset()
}

// GetDbVersion returns the DbVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleCloneObject) GetDbVersion() string {
	if o == nil || o.DbVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.DbVersion.Get()
}

// GetDbVersionOk returns a tuple with the DbVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleCloneObject) GetDbVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DbVersion.Get(), o.DbVersion.IsSet()
}

// HasDbVersion returns a boolean if a field has been set.
func (o *OracleCloneObject) HasDbVersion() bool {
	if o != nil && o.DbVersion.IsSet() {
		return true
	}

	return false
}

// SetDbVersion gets a reference to the given NullableString and assigns it to the DbVersion field.
func (o *OracleCloneObject) SetDbVersion(v string) {
	o.DbVersion.Set(&v)
}
// SetDbVersionNil sets the value for DbVersion to be an explicit nil
func (o *OracleCloneObject) SetDbVersionNil() {
	o.DbVersion.Set(nil)
}

// UnsetDbVersion ensures that no value is present for DbVersion, not even an explicit nil
func (o *OracleCloneObject) UnsetDbVersion() {
	o.DbVersion.Unset()
}

func (o OracleCloneObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["dbName"] = o.DbName.Get()
	}
	if true {
		toSerialize["homeFolder"] = o.HomeFolder.Get()
	}
	if true {
		toSerialize["baseFolder"] = o.BaseFolder.Get()
	}
	if o.Sga.IsSet() {
		toSerialize["sga"] = o.Sga.Get()
	}
	if o.DbVersion.IsSet() {
		toSerialize["dbVersion"] = o.DbVersion.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleCloneObject struct {
	value *OracleCloneObject
	isSet bool
}

func (v NullableOracleCloneObject) Get() *OracleCloneObject {
	return v.value
}

func (v *NullableOracleCloneObject) Set(val *OracleCloneObject) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleCloneObject) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleCloneObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleCloneObject(val *OracleCloneObject) *NullableOracleCloneObject {
	return &NullableOracleCloneObject{value: val, isSet: true}
}

func (v NullableOracleCloneObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleCloneObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


