/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// UdaSourceRegistrationParamsViewParams Specifies optional configuration parameters for the mounted view.
type UdaSourceRegistrationParamsViewParams struct {
	// This field is deprecated and its value will be ignored. It was used to specify the absolute path on the host where the Cohesity view would be mounted. This is now controlled by the agent configuration and is common for all the Universal Data Adapter sources.
	MountDir NullableString `json:"mountDir,omitempty"`
}

// NewUdaSourceRegistrationParamsViewParams instantiates a new UdaSourceRegistrationParamsViewParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUdaSourceRegistrationParamsViewParams() *UdaSourceRegistrationParamsViewParams {
	this := UdaSourceRegistrationParamsViewParams{}
	return &this
}

// NewUdaSourceRegistrationParamsViewParamsWithDefaults instantiates a new UdaSourceRegistrationParamsViewParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUdaSourceRegistrationParamsViewParamsWithDefaults() *UdaSourceRegistrationParamsViewParams {
	this := UdaSourceRegistrationParamsViewParams{}
	return &this
}

// GetMountDir returns the MountDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UdaSourceRegistrationParamsViewParams) GetMountDir() string {
	if o == nil || o.MountDir.Get() == nil {
		var ret string
		return ret
	}
	return *o.MountDir.Get()
}

// GetMountDirOk returns a tuple with the MountDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UdaSourceRegistrationParamsViewParams) GetMountDirOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MountDir.Get(), o.MountDir.IsSet()
}

// HasMountDir returns a boolean if a field has been set.
func (o *UdaSourceRegistrationParamsViewParams) HasMountDir() bool {
	if o != nil && o.MountDir.IsSet() {
		return true
	}

	return false
}

// SetMountDir gets a reference to the given NullableString and assigns it to the MountDir field.
func (o *UdaSourceRegistrationParamsViewParams) SetMountDir(v string) {
	o.MountDir.Set(&v)
}
// SetMountDirNil sets the value for MountDir to be an explicit nil
func (o *UdaSourceRegistrationParamsViewParams) SetMountDirNil() {
	o.MountDir.Set(nil)
}

// UnsetMountDir ensures that no value is present for MountDir, not even an explicit nil
func (o *UdaSourceRegistrationParamsViewParams) UnsetMountDir() {
	o.MountDir.Unset()
}

func (o UdaSourceRegistrationParamsViewParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MountDir.IsSet() {
		toSerialize["mountDir"] = o.MountDir.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUdaSourceRegistrationParamsViewParams struct {
	value *UdaSourceRegistrationParamsViewParams
	isSet bool
}

func (v NullableUdaSourceRegistrationParamsViewParams) Get() *UdaSourceRegistrationParamsViewParams {
	return v.value
}

func (v *NullableUdaSourceRegistrationParamsViewParams) Set(val *UdaSourceRegistrationParamsViewParams) {
	v.value = val
	v.isSet = true
}

func (v NullableUdaSourceRegistrationParamsViewParams) IsSet() bool {
	return v.isSet
}

func (v *NullableUdaSourceRegistrationParamsViewParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUdaSourceRegistrationParamsViewParams(val *UdaSourceRegistrationParamsViewParams) *NullableUdaSourceRegistrationParamsViewParams {
	return &NullableUdaSourceRegistrationParamsViewParams{value: val, isSet: true}
}

func (v NullableUdaSourceRegistrationParamsViewParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUdaSourceRegistrationParamsViewParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


