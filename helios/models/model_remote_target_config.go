/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RemoteTargetConfig Specifies the configuration for adding remote cluster as repilcation target
type RemoteTargetConfig struct {
	// Specifies the cluster id of the target replication cluster.
	ClusterId NullableInt64 `json:"clusterId"`
	// Specifies the cluster name of the target replication cluster.
	ClusterName NullableString `json:"clusterName,omitempty"`
}

// NewRemoteTargetConfig instantiates a new RemoteTargetConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteTargetConfig(clusterId NullableInt64) *RemoteTargetConfig {
	this := RemoteTargetConfig{}
	this.ClusterId = clusterId
	return &this
}

// NewRemoteTargetConfigWithDefaults instantiates a new RemoteTargetConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteTargetConfigWithDefaults() *RemoteTargetConfig {
	this := RemoteTargetConfig{}
	return &this
}

// GetClusterId returns the ClusterId field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RemoteTargetConfig) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}

	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteTargetConfig) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// SetClusterId sets field value
func (o *RemoteTargetConfig) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteTargetConfig) GetClusterName() string {
	if o == nil || o.ClusterName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterName.Get()
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteTargetConfig) GetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterName.Get(), o.ClusterName.IsSet()
}

// HasClusterName returns a boolean if a field has been set.
func (o *RemoteTargetConfig) HasClusterName() bool {
	if o != nil && o.ClusterName.IsSet() {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given NullableString and assigns it to the ClusterName field.
func (o *RemoteTargetConfig) SetClusterName(v string) {
	o.ClusterName.Set(&v)
}
// SetClusterNameNil sets the value for ClusterName to be an explicit nil
func (o *RemoteTargetConfig) SetClusterNameNil() {
	o.ClusterName.Set(nil)
}

// UnsetClusterName ensures that no value is present for ClusterName, not even an explicit nil
func (o *RemoteTargetConfig) UnsetClusterName() {
	o.ClusterName.Unset()
}

func (o RemoteTargetConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterName.IsSet() {
		toSerialize["clusterName"] = o.ClusterName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteTargetConfig struct {
	value *RemoteTargetConfig
	isSet bool
}

func (v NullableRemoteTargetConfig) Get() *RemoteTargetConfig {
	return v.value
}

func (v *NullableRemoteTargetConfig) Set(val *RemoteTargetConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteTargetConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteTargetConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteTargetConfig(val *RemoteTargetConfig) *NullableRemoteTargetConfig {
	return &NullableRemoteTargetConfig{value: val, isSet: true}
}

func (v NullableRemoteTargetConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteTargetConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


