/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// NetworkInterfaceType Type of a network interface.
type NetworkInterfaceType struct {
	// Specifies the network interface type.
	NetworkInterfaceType *string `json:"networkInterfaceType,omitempty"`
}

// NewNetworkInterfaceType instantiates a new NetworkInterfaceType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkInterfaceType() *NetworkInterfaceType {
	this := NetworkInterfaceType{}
	return &this
}

// NewNetworkInterfaceTypeWithDefaults instantiates a new NetworkInterfaceType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkInterfaceTypeWithDefaults() *NetworkInterfaceType {
	this := NetworkInterfaceType{}
	return &this
}

// GetNetworkInterfaceType returns the NetworkInterfaceType field value if set, zero value otherwise.
func (o *NetworkInterfaceType) GetNetworkInterfaceType() string {
	if o == nil || o.NetworkInterfaceType == nil {
		var ret string
		return ret
	}
	return *o.NetworkInterfaceType
}

// GetNetworkInterfaceTypeOk returns a tuple with the NetworkInterfaceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkInterfaceType) GetNetworkInterfaceTypeOk() (*string, bool) {
	if o == nil || o.NetworkInterfaceType == nil {
		return nil, false
	}
	return o.NetworkInterfaceType, true
}

// HasNetworkInterfaceType returns a boolean if a field has been set.
func (o *NetworkInterfaceType) HasNetworkInterfaceType() bool {
	if o != nil && o.NetworkInterfaceType != nil {
		return true
	}

	return false
}

// SetNetworkInterfaceType gets a reference to the given string and assigns it to the NetworkInterfaceType field.
func (o *NetworkInterfaceType) SetNetworkInterfaceType(v string) {
	o.NetworkInterfaceType = &v
}

func (o NetworkInterfaceType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NetworkInterfaceType != nil {
		toSerialize["networkInterfaceType"] = o.NetworkInterfaceType
	}
	return json.Marshal(toSerialize)
}

type NullableNetworkInterfaceType struct {
	value *NetworkInterfaceType
	isSet bool
}

func (v NullableNetworkInterfaceType) Get() *NetworkInterfaceType {
	return v.value
}

func (v *NullableNetworkInterfaceType) Set(val *NetworkInterfaceType) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkInterfaceType) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkInterfaceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkInterfaceType(val *NetworkInterfaceType) *NullableNetworkInterfaceType {
	return &NullableNetworkInterfaceType{value: val, isSet: true}
}

func (v NullableNetworkInterfaceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkInterfaceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


