/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// FailoverSourceCluster Specifies the details about source cluster involved in the failover operation.
type FailoverSourceCluster struct {
	// Specifies the source cluster Id involved in failover operation.
	Id NullableInt64 `json:"id"`
	// Specifies the source cluster incarnation Id involved in failover operation.
	IncarnationId NullableInt64 `json:"incarnationId,omitempty"`
	// Specifies the protection group Id involved in failover operation.
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
	// If failover is initiated by view based orchastrator, then this field specifies the local view id of source cluster which is being failed over.
	ViewId NullableInt64 `json:"viewId,omitempty"`
}

// NewFailoverSourceCluster instantiates a new FailoverSourceCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverSourceCluster(id NullableInt64) *FailoverSourceCluster {
	this := FailoverSourceCluster{}
	this.Id = id
	return &this
}

// NewFailoverSourceClusterWithDefaults instantiates a new FailoverSourceCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverSourceClusterWithDefaults() *FailoverSourceCluster {
	this := FailoverSourceCluster{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *FailoverSourceCluster) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverSourceCluster) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *FailoverSourceCluster) SetId(v int64) {
	o.Id.Set(&v)
}

// GetIncarnationId returns the IncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverSourceCluster) GetIncarnationId() int64 {
	if o == nil || o.IncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.IncarnationId.Get()
}

// GetIncarnationIdOk returns a tuple with the IncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverSourceCluster) GetIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncarnationId.Get(), o.IncarnationId.IsSet()
}

// HasIncarnationId returns a boolean if a field has been set.
func (o *FailoverSourceCluster) HasIncarnationId() bool {
	if o != nil && o.IncarnationId.IsSet() {
		return true
	}

	return false
}

// SetIncarnationId gets a reference to the given NullableInt64 and assigns it to the IncarnationId field.
func (o *FailoverSourceCluster) SetIncarnationId(v int64) {
	o.IncarnationId.Set(&v)
}
// SetIncarnationIdNil sets the value for IncarnationId to be an explicit nil
func (o *FailoverSourceCluster) SetIncarnationIdNil() {
	o.IncarnationId.Set(nil)
}

// UnsetIncarnationId ensures that no value is present for IncarnationId, not even an explicit nil
func (o *FailoverSourceCluster) UnsetIncarnationId() {
	o.IncarnationId.Unset()
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverSourceCluster) GetProtectionGroupId() string {
	if o == nil || o.ProtectionGroupId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverSourceCluster) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *FailoverSourceCluster) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *FailoverSourceCluster) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *FailoverSourceCluster) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *FailoverSourceCluster) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverSourceCluster) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverSourceCluster) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *FailoverSourceCluster) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *FailoverSourceCluster) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *FailoverSourceCluster) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *FailoverSourceCluster) UnsetViewId() {
	o.ViewId.Unset()
}

func (o FailoverSourceCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id.Get()
	}
	if o.IncarnationId.IsSet() {
		toSerialize["incarnationId"] = o.IncarnationId.Get()
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFailoverSourceCluster struct {
	value *FailoverSourceCluster
	isSet bool
}

func (v NullableFailoverSourceCluster) Get() *FailoverSourceCluster {
	return v.value
}

func (v *NullableFailoverSourceCluster) Set(val *FailoverSourceCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverSourceCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverSourceCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverSourceCluster(val *FailoverSourceCluster) *NullableFailoverSourceCluster {
	return &NullableFailoverSourceCluster{value: val, isSet: true}
}

func (v NullableFailoverSourceCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverSourceCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


