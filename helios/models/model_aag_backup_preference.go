/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// AagBackupPreference Specifies Aag Backup Preference Type.
type AagBackupPreference struct {
	// Specifies Aag Backup Preference Type.
	AagBackupPreference *string `json:"aagBackupPreference,omitempty"`
}

// NewAagBackupPreference instantiates a new AagBackupPreference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAagBackupPreference() *AagBackupPreference {
	this := AagBackupPreference{}
	return &this
}

// NewAagBackupPreferenceWithDefaults instantiates a new AagBackupPreference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAagBackupPreferenceWithDefaults() *AagBackupPreference {
	this := AagBackupPreference{}
	return &this
}

// GetAagBackupPreference returns the AagBackupPreference field value if set, zero value otherwise.
func (o *AagBackupPreference) GetAagBackupPreference() string {
	if o == nil || o.AagBackupPreference == nil {
		var ret string
		return ret
	}
	return *o.AagBackupPreference
}

// GetAagBackupPreferenceOk returns a tuple with the AagBackupPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AagBackupPreference) GetAagBackupPreferenceOk() (*string, bool) {
	if o == nil || o.AagBackupPreference == nil {
		return nil, false
	}
	return o.AagBackupPreference, true
}

// HasAagBackupPreference returns a boolean if a field has been set.
func (o *AagBackupPreference) HasAagBackupPreference() bool {
	if o != nil && o.AagBackupPreference != nil {
		return true
	}

	return false
}

// SetAagBackupPreference gets a reference to the given string and assigns it to the AagBackupPreference field.
func (o *AagBackupPreference) SetAagBackupPreference(v string) {
	o.AagBackupPreference = &v
}

func (o AagBackupPreference) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AagBackupPreference != nil {
		toSerialize["aagBackupPreference"] = o.AagBackupPreference
	}
	return json.Marshal(toSerialize)
}

type NullableAagBackupPreference struct {
	value *AagBackupPreference
	isSet bool
}

func (v NullableAagBackupPreference) Get() *AagBackupPreference {
	return v.value
}

func (v *NullableAagBackupPreference) Set(val *AagBackupPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableAagBackupPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableAagBackupPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAagBackupPreference(val *AagBackupPreference) *NullableAagBackupPreference {
	return &NullableAagBackupPreference{value: val, isSet: true}
}

func (v NullableAagBackupPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAagBackupPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


