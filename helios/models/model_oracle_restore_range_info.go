/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// OracleRestoreRangeInfo Specifies Restore Ranges related to an Oracle Database
type OracleRestoreRangeInfo struct {
	// Specifies an array of SCN based oracle restore ranges.
	ScnRangeInfo []OracleRangeMetaInfo `json:"ScnRangeInfo,omitempty"`
	// Specifies an array of time based oracle restore ranges.
	TimeRangeInfo []OracleRangeMetaInfo `json:"TimeRangeInfo,omitempty"`
	// Specifies an array of time based oracle restore ranges.
	SequenceRangeInfo []OracleRangeMetaInfo `json:"SequenceRangeInfo,omitempty"`
}

// NewOracleRestoreRangeInfo instantiates a new OracleRestoreRangeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleRestoreRangeInfo() *OracleRestoreRangeInfo {
	this := OracleRestoreRangeInfo{}
	return &this
}

// NewOracleRestoreRangeInfoWithDefaults instantiates a new OracleRestoreRangeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleRestoreRangeInfoWithDefaults() *OracleRestoreRangeInfo {
	this := OracleRestoreRangeInfo{}
	return &this
}

// GetScnRangeInfo returns the ScnRangeInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleRestoreRangeInfo) GetScnRangeInfo() []OracleRangeMetaInfo {
	if o == nil  {
		var ret []OracleRangeMetaInfo
		return ret
	}
	return o.ScnRangeInfo
}

// GetScnRangeInfoOk returns a tuple with the ScnRangeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleRestoreRangeInfo) GetScnRangeInfoOk() (*[]OracleRangeMetaInfo, bool) {
	if o == nil || o.ScnRangeInfo == nil {
		return nil, false
	}
	return &o.ScnRangeInfo, true
}

// HasScnRangeInfo returns a boolean if a field has been set.
func (o *OracleRestoreRangeInfo) HasScnRangeInfo() bool {
	if o != nil && o.ScnRangeInfo != nil {
		return true
	}

	return false
}

// SetScnRangeInfo gets a reference to the given []OracleRangeMetaInfo and assigns it to the ScnRangeInfo field.
func (o *OracleRestoreRangeInfo) SetScnRangeInfo(v []OracleRangeMetaInfo) {
	o.ScnRangeInfo = v
}

// GetTimeRangeInfo returns the TimeRangeInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleRestoreRangeInfo) GetTimeRangeInfo() []OracleRangeMetaInfo {
	if o == nil  {
		var ret []OracleRangeMetaInfo
		return ret
	}
	return o.TimeRangeInfo
}

// GetTimeRangeInfoOk returns a tuple with the TimeRangeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleRestoreRangeInfo) GetTimeRangeInfoOk() (*[]OracleRangeMetaInfo, bool) {
	if o == nil || o.TimeRangeInfo == nil {
		return nil, false
	}
	return &o.TimeRangeInfo, true
}

// HasTimeRangeInfo returns a boolean if a field has been set.
func (o *OracleRestoreRangeInfo) HasTimeRangeInfo() bool {
	if o != nil && o.TimeRangeInfo != nil {
		return true
	}

	return false
}

// SetTimeRangeInfo gets a reference to the given []OracleRangeMetaInfo and assigns it to the TimeRangeInfo field.
func (o *OracleRestoreRangeInfo) SetTimeRangeInfo(v []OracleRangeMetaInfo) {
	o.TimeRangeInfo = v
}

// GetSequenceRangeInfo returns the SequenceRangeInfo field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleRestoreRangeInfo) GetSequenceRangeInfo() []OracleRangeMetaInfo {
	if o == nil  {
		var ret []OracleRangeMetaInfo
		return ret
	}
	return o.SequenceRangeInfo
}

// GetSequenceRangeInfoOk returns a tuple with the SequenceRangeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleRestoreRangeInfo) GetSequenceRangeInfoOk() (*[]OracleRangeMetaInfo, bool) {
	if o == nil || o.SequenceRangeInfo == nil {
		return nil, false
	}
	return &o.SequenceRangeInfo, true
}

// HasSequenceRangeInfo returns a boolean if a field has been set.
func (o *OracleRestoreRangeInfo) HasSequenceRangeInfo() bool {
	if o != nil && o.SequenceRangeInfo != nil {
		return true
	}

	return false
}

// SetSequenceRangeInfo gets a reference to the given []OracleRangeMetaInfo and assigns it to the SequenceRangeInfo field.
func (o *OracleRestoreRangeInfo) SetSequenceRangeInfo(v []OracleRangeMetaInfo) {
	o.SequenceRangeInfo = v
}

func (o OracleRestoreRangeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ScnRangeInfo != nil {
		toSerialize["ScnRangeInfo"] = o.ScnRangeInfo
	}
	if o.TimeRangeInfo != nil {
		toSerialize["TimeRangeInfo"] = o.TimeRangeInfo
	}
	if o.SequenceRangeInfo != nil {
		toSerialize["SequenceRangeInfo"] = o.SequenceRangeInfo
	}
	return json.Marshal(toSerialize)
}

type NullableOracleRestoreRangeInfo struct {
	value *OracleRestoreRangeInfo
	isSet bool
}

func (v NullableOracleRestoreRangeInfo) Get() *OracleRestoreRangeInfo {
	return v.value
}

func (v *NullableOracleRestoreRangeInfo) Set(val *OracleRestoreRangeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleRestoreRangeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleRestoreRangeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleRestoreRangeInfo(val *OracleRestoreRangeInfo) *NullableOracleRestoreRangeInfo {
	return &NullableOracleRestoreRangeInfo{value: val, isSet: true}
}

func (v NullableOracleRestoreRangeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleRestoreRangeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


