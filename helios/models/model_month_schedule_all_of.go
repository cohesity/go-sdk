/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// MonthScheduleAllOf struct for MonthScheduleAllOf
type MonthScheduleAllOf struct {
	// Specifies the week of the month (such as 'Third') in a Monthly Schedule specified by unit field as 'Months'. <br>This field is used in combination with 'dayOfWeek' to define the day in the month to start the Protection Group Run. <br> Example: if 'weekOfMonth' is set to 'Third' and day is set to 'Monday', a backup is performed on the third Monday of every month.
	WeekOfMonth NullableString `json:"weekOfMonth"`
}

// NewMonthScheduleAllOf instantiates a new MonthScheduleAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthScheduleAllOf(weekOfMonth NullableString) *MonthScheduleAllOf {
	this := MonthScheduleAllOf{}
	this.WeekOfMonth = weekOfMonth
	return &this
}

// NewMonthScheduleAllOfWithDefaults instantiates a new MonthScheduleAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthScheduleAllOfWithDefaults() *MonthScheduleAllOf {
	this := MonthScheduleAllOf{}
	return &this
}

// GetWeekOfMonth returns the WeekOfMonth field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MonthScheduleAllOf) GetWeekOfMonth() string {
	if o == nil || o.WeekOfMonth.Get() == nil {
		var ret string
		return ret
	}

	return *o.WeekOfMonth.Get()
}

// GetWeekOfMonthOk returns a tuple with the WeekOfMonth field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthScheduleAllOf) GetWeekOfMonthOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.WeekOfMonth.Get(), o.WeekOfMonth.IsSet()
}

// SetWeekOfMonth sets field value
func (o *MonthScheduleAllOf) SetWeekOfMonth(v string) {
	o.WeekOfMonth.Set(&v)
}

func (o MonthScheduleAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["weekOfMonth"] = o.WeekOfMonth.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMonthScheduleAllOf struct {
	value *MonthScheduleAllOf
	isSet bool
}

func (v NullableMonthScheduleAllOf) Get() *MonthScheduleAllOf {
	return v.value
}

func (v *NullableMonthScheduleAllOf) Set(val *MonthScheduleAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthScheduleAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthScheduleAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthScheduleAllOf(val *MonthScheduleAllOf) *NullableMonthScheduleAllOf {
	return &NullableMonthScheduleAllOf{value: val, isSet: true}
}

func (v NullableMonthScheduleAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthScheduleAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


