/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// FailoverReplicaCluster Specifies the details about replication cluster involved in the failover operation.
type FailoverReplicaCluster struct {
	// Specifies the details about the objects being failed over. In case if view based orchastrator is calling this then they should pass a object id for replicated view entity which belongs to the live tracking view on replication cluster.
	Objects []FailoverObject `json:"objects"`
	// Specifies the protection group id from the replication cluster from where the objects being failed over. If this is not specified then it will be infer from the list of objects being failed over. The protection group id must be specified in this format <cluster_id>:<cluster_incarnation_id:jobid>
	ProtectionGroupId NullableString `json:"protectionGroupId,omitempty"`
}

// NewFailoverReplicaCluster instantiates a new FailoverReplicaCluster object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFailoverReplicaCluster(objects []FailoverObject) *FailoverReplicaCluster {
	this := FailoverReplicaCluster{}
	this.Objects = objects
	return &this
}

// NewFailoverReplicaClusterWithDefaults instantiates a new FailoverReplicaCluster object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFailoverReplicaClusterWithDefaults() *FailoverReplicaCluster {
	this := FailoverReplicaCluster{}
	return &this
}

// GetObjects returns the Objects field value
// If the value is explicit nil, the zero value for []FailoverObject will be returned
func (o *FailoverReplicaCluster) GetObjects() []FailoverObject {
	if o == nil {
		var ret []FailoverObject
		return ret
	}

	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplicaCluster) GetObjectsOk() (*[]FailoverObject, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return &o.Objects, true
}

// SetObjects sets field value
func (o *FailoverReplicaCluster) SetObjects(v []FailoverObject) {
	o.Objects = v
}

// GetProtectionGroupId returns the ProtectionGroupId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FailoverReplicaCluster) GetProtectionGroupId() string {
	if o == nil || o.ProtectionGroupId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProtectionGroupId.Get()
}

// GetProtectionGroupIdOk returns a tuple with the ProtectionGroupId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FailoverReplicaCluster) GetProtectionGroupIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionGroupId.Get(), o.ProtectionGroupId.IsSet()
}

// HasProtectionGroupId returns a boolean if a field has been set.
func (o *FailoverReplicaCluster) HasProtectionGroupId() bool {
	if o != nil && o.ProtectionGroupId.IsSet() {
		return true
	}

	return false
}

// SetProtectionGroupId gets a reference to the given NullableString and assigns it to the ProtectionGroupId field.
func (o *FailoverReplicaCluster) SetProtectionGroupId(v string) {
	o.ProtectionGroupId.Set(&v)
}
// SetProtectionGroupIdNil sets the value for ProtectionGroupId to be an explicit nil
func (o *FailoverReplicaCluster) SetProtectionGroupIdNil() {
	o.ProtectionGroupId.Set(nil)
}

// UnsetProtectionGroupId ensures that no value is present for ProtectionGroupId, not even an explicit nil
func (o *FailoverReplicaCluster) UnsetProtectionGroupId() {
	o.ProtectionGroupId.Unset()
}

func (o FailoverReplicaCluster) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.ProtectionGroupId.IsSet() {
		toSerialize["protectionGroupId"] = o.ProtectionGroupId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFailoverReplicaCluster struct {
	value *FailoverReplicaCluster
	isSet bool
}

func (v NullableFailoverReplicaCluster) Get() *FailoverReplicaCluster {
	return v.value
}

func (v *NullableFailoverReplicaCluster) Set(val *FailoverReplicaCluster) {
	v.value = val
	v.isSet = true
}

func (v NullableFailoverReplicaCluster) IsSet() bool {
	return v.isSet
}

func (v *NullableFailoverReplicaCluster) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFailoverReplicaCluster(val *FailoverReplicaCluster) *NullableFailoverReplicaCluster {
	return &NullableFailoverReplicaCluster{value: val, isSet: true}
}

func (v NullableFailoverReplicaCluster) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFailoverReplicaCluster) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


