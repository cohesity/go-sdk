/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CommonDownloadFileAndFolderParams Specifies the parameters to download files and folders.
type CommonDownloadFileAndFolderParams struct {
	// Specifies the info about the files and folders to be recovered.
	FilesAndFolders []CommonRecoverFileAndFolderInfo `json:"filesAndFolders,omitempty"`
	// Specifies the path location to download the files and folders.
	DownloadFilePath NullableString `json:"downloadFilePath,omitempty"`
}

// NewCommonDownloadFileAndFolderParams instantiates a new CommonDownloadFileAndFolderParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonDownloadFileAndFolderParams() *CommonDownloadFileAndFolderParams {
	this := CommonDownloadFileAndFolderParams{}
	return &this
}

// NewCommonDownloadFileAndFolderParamsWithDefaults instantiates a new CommonDownloadFileAndFolderParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonDownloadFileAndFolderParamsWithDefaults() *CommonDownloadFileAndFolderParams {
	this := CommonDownloadFileAndFolderParams{}
	return &this
}

// GetFilesAndFolders returns the FilesAndFolders field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonDownloadFileAndFolderParams) GetFilesAndFolders() []CommonRecoverFileAndFolderInfo {
	if o == nil  {
		var ret []CommonRecoverFileAndFolderInfo
		return ret
	}
	return o.FilesAndFolders
}

// GetFilesAndFoldersOk returns a tuple with the FilesAndFolders field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDownloadFileAndFolderParams) GetFilesAndFoldersOk() (*[]CommonRecoverFileAndFolderInfo, bool) {
	if o == nil || o.FilesAndFolders == nil {
		return nil, false
	}
	return &o.FilesAndFolders, true
}

// HasFilesAndFolders returns a boolean if a field has been set.
func (o *CommonDownloadFileAndFolderParams) HasFilesAndFolders() bool {
	if o != nil && o.FilesAndFolders != nil {
		return true
	}

	return false
}

// SetFilesAndFolders gets a reference to the given []CommonRecoverFileAndFolderInfo and assigns it to the FilesAndFolders field.
func (o *CommonDownloadFileAndFolderParams) SetFilesAndFolders(v []CommonRecoverFileAndFolderInfo) {
	o.FilesAndFolders = v
}

// GetDownloadFilePath returns the DownloadFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonDownloadFileAndFolderParams) GetDownloadFilePath() string {
	if o == nil || o.DownloadFilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.DownloadFilePath.Get()
}

// GetDownloadFilePathOk returns a tuple with the DownloadFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonDownloadFileAndFolderParams) GetDownloadFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DownloadFilePath.Get(), o.DownloadFilePath.IsSet()
}

// HasDownloadFilePath returns a boolean if a field has been set.
func (o *CommonDownloadFileAndFolderParams) HasDownloadFilePath() bool {
	if o != nil && o.DownloadFilePath.IsSet() {
		return true
	}

	return false
}

// SetDownloadFilePath gets a reference to the given NullableString and assigns it to the DownloadFilePath field.
func (o *CommonDownloadFileAndFolderParams) SetDownloadFilePath(v string) {
	o.DownloadFilePath.Set(&v)
}
// SetDownloadFilePathNil sets the value for DownloadFilePath to be an explicit nil
func (o *CommonDownloadFileAndFolderParams) SetDownloadFilePathNil() {
	o.DownloadFilePath.Set(nil)
}

// UnsetDownloadFilePath ensures that no value is present for DownloadFilePath, not even an explicit nil
func (o *CommonDownloadFileAndFolderParams) UnsetDownloadFilePath() {
	o.DownloadFilePath.Unset()
}

func (o CommonDownloadFileAndFolderParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilesAndFolders != nil {
		toSerialize["filesAndFolders"] = o.FilesAndFolders
	}
	if o.DownloadFilePath.IsSet() {
		toSerialize["downloadFilePath"] = o.DownloadFilePath.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCommonDownloadFileAndFolderParams struct {
	value *CommonDownloadFileAndFolderParams
	isSet bool
}

func (v NullableCommonDownloadFileAndFolderParams) Get() *CommonDownloadFileAndFolderParams {
	return v.value
}

func (v *NullableCommonDownloadFileAndFolderParams) Set(val *CommonDownloadFileAndFolderParams) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonDownloadFileAndFolderParams) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonDownloadFileAndFolderParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonDownloadFileAndFolderParams(val *CommonDownloadFileAndFolderParams) *NullableCommonDownloadFileAndFolderParams {
	return &NullableCommonDownloadFileAndFolderParams{value: val, isSet: true}
}

func (v NullableCommonDownloadFileAndFolderParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonDownloadFileAndFolderParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


