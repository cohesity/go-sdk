/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// UserSession User session response
type UserSession struct {
	// Specifies the session id
	SessionId *string `json:"sessionId,omitempty"`
}

// NewUserSession instantiates a new UserSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserSession() *UserSession {
	this := UserSession{}
	return &this
}

// NewUserSessionWithDefaults instantiates a new UserSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserSessionWithDefaults() *UserSession {
	this := UserSession{}
	return &this
}

// GetSessionId returns the SessionId field value if set, zero value otherwise.
func (o *UserSession) GetSessionId() string {
	if o == nil || o.SessionId == nil {
		var ret string
		return ret
	}
	return *o.SessionId
}

// GetSessionIdOk returns a tuple with the SessionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserSession) GetSessionIdOk() (*string, bool) {
	if o == nil || o.SessionId == nil {
		return nil, false
	}
	return o.SessionId, true
}

// HasSessionId returns a boolean if a field has been set.
func (o *UserSession) HasSessionId() bool {
	if o != nil && o.SessionId != nil {
		return true
	}

	return false
}

// SetSessionId gets a reference to the given string and assigns it to the SessionId field.
func (o *UserSession) SetSessionId(v string) {
	o.SessionId = &v
}

func (o UserSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SessionId != nil {
		toSerialize["sessionId"] = o.SessionId
	}
	return json.Marshal(toSerialize)
}

type NullableUserSession struct {
	value *UserSession
	isSet bool
}

func (v NullableUserSession) Get() *UserSession {
	return v.value
}

func (v *NullableUserSession) Set(val *UserSession) {
	v.value = val
	v.isSet = true
}

func (v NullableUserSession) IsSet() bool {
	return v.isSet
}

func (v *NullableUserSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserSession(val *UserSession) *NullableUserSession {
	return &NullableUserSession{value: val, isSet: true}
}

func (v NullableUserSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


