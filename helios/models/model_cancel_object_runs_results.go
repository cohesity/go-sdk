/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CancelObjectRunsResults Results after canceling object runs. If no errors happen, this will not be returned.
type CancelObjectRunsResults struct {
	// Specifies results after canceling object runs.
	Results []CancelObjectRunsResult `json:"results,omitempty"`
}

// NewCancelObjectRunsResults instantiates a new CancelObjectRunsResults object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCancelObjectRunsResults() *CancelObjectRunsResults {
	this := CancelObjectRunsResults{}
	return &this
}

// NewCancelObjectRunsResultsWithDefaults instantiates a new CancelObjectRunsResults object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCancelObjectRunsResultsWithDefaults() *CancelObjectRunsResults {
	this := CancelObjectRunsResults{}
	return &this
}

// GetResults returns the Results field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CancelObjectRunsResults) GetResults() []CancelObjectRunsResult {
	if o == nil  {
		var ret []CancelObjectRunsResult
		return ret
	}
	return o.Results
}

// GetResultsOk returns a tuple with the Results field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CancelObjectRunsResults) GetResultsOk() (*[]CancelObjectRunsResult, bool) {
	if o == nil || o.Results == nil {
		return nil, false
	}
	return &o.Results, true
}

// HasResults returns a boolean if a field has been set.
func (o *CancelObjectRunsResults) HasResults() bool {
	if o != nil && o.Results != nil {
		return true
	}

	return false
}

// SetResults gets a reference to the given []CancelObjectRunsResult and assigns it to the Results field.
func (o *CancelObjectRunsResults) SetResults(v []CancelObjectRunsResult) {
	o.Results = v
}

func (o CancelObjectRunsResults) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Results != nil {
		toSerialize["results"] = o.Results
	}
	return json.Marshal(toSerialize)
}

type NullableCancelObjectRunsResults struct {
	value *CancelObjectRunsResults
	isSet bool
}

func (v NullableCancelObjectRunsResults) Get() *CancelObjectRunsResults {
	return v.value
}

func (v *NullableCancelObjectRunsResults) Set(val *CancelObjectRunsResults) {
	v.value = val
	v.isSet = true
}

func (v NullableCancelObjectRunsResults) IsSet() bool {
	return v.isSet
}

func (v *NullableCancelObjectRunsResults) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCancelObjectRunsResults(val *CancelObjectRunsResults) *NullableCancelObjectRunsResults {
	return &NullableCancelObjectRunsResults{value: val, isSet: true}
}

func (v NullableCancelObjectRunsResults) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCancelObjectRunsResults) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


