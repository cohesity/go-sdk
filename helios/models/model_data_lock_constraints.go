/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// DataLockConstraints Specifies the dataLock constraints for local or target snapshot.
type DataLockConstraints struct {
	// Specifies the type of WORM retention type. <br>'Compliance' implies WORM retention is set for compliance reason. <br>'Administrative' implies WORM retention is set for administrative purposes.
	Mode NullableString `json:"mode,omitempty"`
	// Specifies the expiry time of attempt in Unix epoch Timestamp (in microseconds).
	ExpiryTimeUsecs NullableInt64 `json:"expiryTimeUsecs,omitempty"`
}

// NewDataLockConstraints instantiates a new DataLockConstraints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataLockConstraints() *DataLockConstraints {
	this := DataLockConstraints{}
	return &this
}

// NewDataLockConstraintsWithDefaults instantiates a new DataLockConstraints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataLockConstraintsWithDefaults() *DataLockConstraints {
	this := DataLockConstraints{}
	return &this
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataLockConstraints) GetMode() string {
	if o == nil || o.Mode.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataLockConstraints) GetModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *DataLockConstraints) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableString and assigns it to the Mode field.
func (o *DataLockConstraints) SetMode(v string) {
	o.Mode.Set(&v)
}
// SetModeNil sets the value for Mode to be an explicit nil
func (o *DataLockConstraints) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *DataLockConstraints) UnsetMode() {
	o.Mode.Unset()
}

// GetExpiryTimeUsecs returns the ExpiryTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataLockConstraints) GetExpiryTimeUsecs() int64 {
	if o == nil || o.ExpiryTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiryTimeUsecs.Get()
}

// GetExpiryTimeUsecsOk returns a tuple with the ExpiryTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataLockConstraints) GetExpiryTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTimeUsecs.Get(), o.ExpiryTimeUsecs.IsSet()
}

// HasExpiryTimeUsecs returns a boolean if a field has been set.
func (o *DataLockConstraints) HasExpiryTimeUsecs() bool {
	if o != nil && o.ExpiryTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ExpiryTimeUsecs field.
func (o *DataLockConstraints) SetExpiryTimeUsecs(v int64) {
	o.ExpiryTimeUsecs.Set(&v)
}
// SetExpiryTimeUsecsNil sets the value for ExpiryTimeUsecs to be an explicit nil
func (o *DataLockConstraints) SetExpiryTimeUsecsNil() {
	o.ExpiryTimeUsecs.Set(nil)
}

// UnsetExpiryTimeUsecs ensures that no value is present for ExpiryTimeUsecs, not even an explicit nil
func (o *DataLockConstraints) UnsetExpiryTimeUsecs() {
	o.ExpiryTimeUsecs.Unset()
}

func (o DataLockConstraints) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	if o.ExpiryTimeUsecs.IsSet() {
		toSerialize["expiryTimeUsecs"] = o.ExpiryTimeUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataLockConstraints struct {
	value *DataLockConstraints
	isSet bool
}

func (v NullableDataLockConstraints) Get() *DataLockConstraints {
	return v.value
}

func (v *NullableDataLockConstraints) Set(val *DataLockConstraints) {
	v.value = val
	v.isSet = true
}

func (v NullableDataLockConstraints) IsSet() bool {
	return v.isSet
}

func (v *NullableDataLockConstraints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataLockConstraints(val *DataLockConstraints) *NullableDataLockConstraints {
	return &NullableDataLockConstraints{value: val, isSet: true}
}

func (v NullableDataLockConstraints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataLockConstraints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


