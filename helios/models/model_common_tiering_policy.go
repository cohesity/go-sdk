/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// CommonTieringPolicy Specifies the common tiering params between uptiering and downtiering.
type CommonTieringPolicy struct {
	// Specifies whether to audit log the file tiering activity.
	EnableAuditLogging NullableBool `json:"enableAuditLogging,omitempty"`
	FileSize *FileSizePolicy `json:"fileSize,omitempty"`
	FilePath *FileFilteringPolicy `json:"filePath,omitempty"`
}

// NewCommonTieringPolicy instantiates a new CommonTieringPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCommonTieringPolicy() *CommonTieringPolicy {
	this := CommonTieringPolicy{}
	var enableAuditLogging bool = false
	this.EnableAuditLogging = *NewNullableBool(&enableAuditLogging)
	return &this
}

// NewCommonTieringPolicyWithDefaults instantiates a new CommonTieringPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCommonTieringPolicyWithDefaults() *CommonTieringPolicy {
	this := CommonTieringPolicy{}
	var enableAuditLogging bool = false
	this.EnableAuditLogging = *NewNullableBool(&enableAuditLogging) // model_simple false
	return &this
}

// GetEnableAuditLogging returns the EnableAuditLogging field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CommonTieringPolicy) GetEnableAuditLogging() bool {
	if o == nil || o.EnableAuditLogging.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableAuditLogging.Get()
}

// GetEnableAuditLoggingOk returns a tuple with the EnableAuditLogging field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CommonTieringPolicy) GetEnableAuditLoggingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableAuditLogging.Get(), o.EnableAuditLogging.IsSet()
}

// HasEnableAuditLogging returns a boolean if a field has been set.
func (o *CommonTieringPolicy) HasEnableAuditLogging() bool {
	if o != nil && o.EnableAuditLogging.IsSet() {
		return true
	}

	return false
}

// SetEnableAuditLogging gets a reference to the given NullableBool and assigns it to the EnableAuditLogging field.
func (o *CommonTieringPolicy) SetEnableAuditLogging(v bool) {
	o.EnableAuditLogging.Set(&v)
}
// SetEnableAuditLoggingNil sets the value for EnableAuditLogging to be an explicit nil
func (o *CommonTieringPolicy) SetEnableAuditLoggingNil() {
	o.EnableAuditLogging.Set(nil)
}

// UnsetEnableAuditLogging ensures that no value is present for EnableAuditLogging, not even an explicit nil
func (o *CommonTieringPolicy) UnsetEnableAuditLogging() {
	o.EnableAuditLogging.Unset()
}

// GetFileSize returns the FileSize field value if set, zero value otherwise.
func (o *CommonTieringPolicy) GetFileSize() FileSizePolicy {
	if o == nil || o.FileSize == nil {
		var ret FileSizePolicy
		return ret
	}
	return *o.FileSize
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonTieringPolicy) GetFileSizeOk() (*FileSizePolicy, bool) {
	if o == nil || o.FileSize == nil {
		return nil, false
	}
	return o.FileSize, true
}

// HasFileSize returns a boolean if a field has been set.
func (o *CommonTieringPolicy) HasFileSize() bool {
	if o != nil && o.FileSize != nil {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given FileSizePolicy and assigns it to the FileSize field.
func (o *CommonTieringPolicy) SetFileSize(v FileSizePolicy) {
	o.FileSize = &v
}

// GetFilePath returns the FilePath field value if set, zero value otherwise.
func (o *CommonTieringPolicy) GetFilePath() FileFilteringPolicy {
	if o == nil || o.FilePath == nil {
		var ret FileFilteringPolicy
		return ret
	}
	return *o.FilePath
}

// GetFilePathOk returns a tuple with the FilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CommonTieringPolicy) GetFilePathOk() (*FileFilteringPolicy, bool) {
	if o == nil || o.FilePath == nil {
		return nil, false
	}
	return o.FilePath, true
}

// HasFilePath returns a boolean if a field has been set.
func (o *CommonTieringPolicy) HasFilePath() bool {
	if o != nil && o.FilePath != nil {
		return true
	}

	return false
}

// SetFilePath gets a reference to the given FileFilteringPolicy and assigns it to the FilePath field.
func (o *CommonTieringPolicy) SetFilePath(v FileFilteringPolicy) {
	o.FilePath = &v
}

func (o CommonTieringPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EnableAuditLogging.IsSet() {
		toSerialize["enableAuditLogging"] = o.EnableAuditLogging.Get()
	}
	if o.FileSize != nil {
		toSerialize["fileSize"] = o.FileSize
	}
	if o.FilePath != nil {
		toSerialize["filePath"] = o.FilePath
	}
	return json.Marshal(toSerialize)
}

type NullableCommonTieringPolicy struct {
	value *CommonTieringPolicy
	isSet bool
}

func (v NullableCommonTieringPolicy) Get() *CommonTieringPolicy {
	return v.value
}

func (v *NullableCommonTieringPolicy) Set(val *CommonTieringPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableCommonTieringPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableCommonTieringPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCommonTieringPolicy(val *CommonTieringPolicy) *NullableCommonTieringPolicy {
	return &NullableCommonTieringPolicy{value: val, isSet: true}
}

func (v NullableCommonTieringPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCommonTieringPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


