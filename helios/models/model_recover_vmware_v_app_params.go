/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RecoverVmwareVAppParams Specifies the parameters to recover VMware vApp.
type RecoverVmwareVAppParams struct {
	// Specifies the environment of the recovery target. The corresponding params below must be filled out.
	TargetEnvironment string `json:"targetEnvironment"`
	// Specifies the params for recovering to a VMware target.
	VmwareTargetParams NullableVmwareTargetParamsForRecoverVApp `json:"vmwareTargetParams,omitempty"`
}

// NewRecoverVmwareVAppParams instantiates a new RecoverVmwareVAppParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoverVmwareVAppParams(targetEnvironment string) *RecoverVmwareVAppParams {
	this := RecoverVmwareVAppParams{}
	this.TargetEnvironment = targetEnvironment
	return &this
}

// NewRecoverVmwareVAppParamsWithDefaults instantiates a new RecoverVmwareVAppParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoverVmwareVAppParamsWithDefaults() *RecoverVmwareVAppParams {
	this := RecoverVmwareVAppParams{}
	return &this
}

// GetTargetEnvironment returns the TargetEnvironment field value
func (o *RecoverVmwareVAppParams) GetTargetEnvironment() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TargetEnvironment
}

// GetTargetEnvironmentOk returns a tuple with the TargetEnvironment field value
// and a boolean to check if the value has been set.
func (o *RecoverVmwareVAppParams) GetTargetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TargetEnvironment, true
}

// SetTargetEnvironment sets field value
func (o *RecoverVmwareVAppParams) SetTargetEnvironment(v string) {
	o.TargetEnvironment = v
}

// GetVmwareTargetParams returns the VmwareTargetParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoverVmwareVAppParams) GetVmwareTargetParams() VmwareTargetParamsForRecoverVApp {
	if o == nil || o.VmwareTargetParams.Get() == nil {
		var ret VmwareTargetParamsForRecoverVApp
		return ret
	}
	return *o.VmwareTargetParams.Get()
}

// GetVmwareTargetParamsOk returns a tuple with the VmwareTargetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoverVmwareVAppParams) GetVmwareTargetParamsOk() (*VmwareTargetParamsForRecoverVApp, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmwareTargetParams.Get(), o.VmwareTargetParams.IsSet()
}

// HasVmwareTargetParams returns a boolean if a field has been set.
func (o *RecoverVmwareVAppParams) HasVmwareTargetParams() bool {
	if o != nil && o.VmwareTargetParams.IsSet() {
		return true
	}

	return false
}

// SetVmwareTargetParams gets a reference to the given NullableVmwareTargetParamsForRecoverVApp and assigns it to the VmwareTargetParams field.
func (o *RecoverVmwareVAppParams) SetVmwareTargetParams(v VmwareTargetParamsForRecoverVApp) {
	o.VmwareTargetParams.Set(&v)
}
// SetVmwareTargetParamsNil sets the value for VmwareTargetParams to be an explicit nil
func (o *RecoverVmwareVAppParams) SetVmwareTargetParamsNil() {
	o.VmwareTargetParams.Set(nil)
}

// UnsetVmwareTargetParams ensures that no value is present for VmwareTargetParams, not even an explicit nil
func (o *RecoverVmwareVAppParams) UnsetVmwareTargetParams() {
	o.VmwareTargetParams.Unset()
}

func (o RecoverVmwareVAppParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["targetEnvironment"] = o.TargetEnvironment
	}
	if o.VmwareTargetParams.IsSet() {
		toSerialize["vmwareTargetParams"] = o.VmwareTargetParams.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoverVmwareVAppParams struct {
	value *RecoverVmwareVAppParams
	isSet bool
}

func (v NullableRecoverVmwareVAppParams) Get() *RecoverVmwareVAppParams {
	return v.value
}

func (v *NullableRecoverVmwareVAppParams) Set(val *RecoverVmwareVAppParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoverVmwareVAppParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoverVmwareVAppParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoverVmwareVAppParams(val *RecoverVmwareVAppParams) *NullableRecoverVmwareVAppParams {
	return &NullableRecoverVmwareVAppParams{value: val, isSet: true}
}

func (v NullableRecoverVmwareVAppParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoverVmwareVAppParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


