/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// DbRecoveryOverWritingPolicy DB Recovery Overwriting Policy.
type DbRecoveryOverWritingPolicy struct {
	// Specifies the overwriting policies in case of SQL App Recoveries. 
	DbRecoveryOverWritingPolicy *string `json:"dbRecoveryOverWritingPolicy,omitempty"`
}

// NewDbRecoveryOverWritingPolicy instantiates a new DbRecoveryOverWritingPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDbRecoveryOverWritingPolicy() *DbRecoveryOverWritingPolicy {
	this := DbRecoveryOverWritingPolicy{}
	return &this
}

// NewDbRecoveryOverWritingPolicyWithDefaults instantiates a new DbRecoveryOverWritingPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDbRecoveryOverWritingPolicyWithDefaults() *DbRecoveryOverWritingPolicy {
	this := DbRecoveryOverWritingPolicy{}
	return &this
}

// GetDbRecoveryOverWritingPolicy returns the DbRecoveryOverWritingPolicy field value if set, zero value otherwise.
func (o *DbRecoveryOverWritingPolicy) GetDbRecoveryOverWritingPolicy() string {
	if o == nil || o.DbRecoveryOverWritingPolicy == nil {
		var ret string
		return ret
	}
	return *o.DbRecoveryOverWritingPolicy
}

// GetDbRecoveryOverWritingPolicyOk returns a tuple with the DbRecoveryOverWritingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DbRecoveryOverWritingPolicy) GetDbRecoveryOverWritingPolicyOk() (*string, bool) {
	if o == nil || o.DbRecoveryOverWritingPolicy == nil {
		return nil, false
	}
	return o.DbRecoveryOverWritingPolicy, true
}

// HasDbRecoveryOverWritingPolicy returns a boolean if a field has been set.
func (o *DbRecoveryOverWritingPolicy) HasDbRecoveryOverWritingPolicy() bool {
	if o != nil && o.DbRecoveryOverWritingPolicy != nil {
		return true
	}

	return false
}

// SetDbRecoveryOverWritingPolicy gets a reference to the given string and assigns it to the DbRecoveryOverWritingPolicy field.
func (o *DbRecoveryOverWritingPolicy) SetDbRecoveryOverWritingPolicy(v string) {
	o.DbRecoveryOverWritingPolicy = &v
}

func (o DbRecoveryOverWritingPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DbRecoveryOverWritingPolicy != nil {
		toSerialize["dbRecoveryOverWritingPolicy"] = o.DbRecoveryOverWritingPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableDbRecoveryOverWritingPolicy struct {
	value *DbRecoveryOverWritingPolicy
	isSet bool
}

func (v NullableDbRecoveryOverWritingPolicy) Get() *DbRecoveryOverWritingPolicy {
	return v.value
}

func (v *NullableDbRecoveryOverWritingPolicy) Set(val *DbRecoveryOverWritingPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableDbRecoveryOverWritingPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableDbRecoveryOverWritingPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDbRecoveryOverWritingPolicy(val *DbRecoveryOverWritingPolicy) *NullableDbRecoveryOverWritingPolicy {
	return &NullableDbRecoveryOverWritingPolicy{value: val, isSet: true}
}

func (v NullableDbRecoveryOverWritingPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDbRecoveryOverWritingPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


