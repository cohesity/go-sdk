/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// RunReplicationConfig Specifies settings for copying Snapshots to Remote Clusters. This also specifies the retention policy that should be applied to Snapshots after they have been copied to the specified target.
type RunReplicationConfig struct {
	// Specifies id of Remote Cluster to copy the Snapshots to.
	Id NullableInt64 `json:"id"`
	Retention *Retention `json:"retention,omitempty"`
}

// NewRunReplicationConfig instantiates a new RunReplicationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunReplicationConfig(id NullableInt64) *RunReplicationConfig {
	this := RunReplicationConfig{}
	this.Id = id
	return &this
}

// NewRunReplicationConfigWithDefaults instantiates a new RunReplicationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunReplicationConfigWithDefaults() *RunReplicationConfig {
	this := RunReplicationConfig{}
	return &this
}

// GetId returns the Id field value
// If the value is explicit nil, the zero value for int64 will be returned
func (o *RunReplicationConfig) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}

	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RunReplicationConfig) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// SetId sets field value
func (o *RunReplicationConfig) SetId(v int64) {
	o.Id.Set(&v)
}

// GetRetention returns the Retention field value if set, zero value otherwise.
func (o *RunReplicationConfig) GetRetention() Retention {
	if o == nil || o.Retention == nil {
		var ret Retention
		return ret
	}
	return *o.Retention
}

// GetRetentionOk returns a tuple with the Retention field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RunReplicationConfig) GetRetentionOk() (*Retention, bool) {
	if o == nil || o.Retention == nil {
		return nil, false
	}
	return o.Retention, true
}

// HasRetention returns a boolean if a field has been set.
func (o *RunReplicationConfig) HasRetention() bool {
	if o != nil && o.Retention != nil {
		return true
	}

	return false
}

// SetRetention gets a reference to the given Retention and assigns it to the Retention field.
func (o *RunReplicationConfig) SetRetention(v Retention) {
	o.Retention = &v
}

func (o RunReplicationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Retention != nil {
		toSerialize["retention"] = o.Retention
	}
	return json.Marshal(toSerialize)
}

type NullableRunReplicationConfig struct {
	value *RunReplicationConfig
	isSet bool
}

func (v NullableRunReplicationConfig) Get() *RunReplicationConfig {
	return v.value
}

func (v *NullableRunReplicationConfig) Set(val *RunReplicationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableRunReplicationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableRunReplicationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunReplicationConfig(val *RunReplicationConfig) *NullableRunReplicationConfig {
	return &NullableRunReplicationConfig{value: val, isSet: true}
}

func (v NullableRunReplicationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunReplicationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


