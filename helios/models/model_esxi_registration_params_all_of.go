/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// EsxiRegistrationParamsAllOf struct for EsxiRegistrationParamsAllOf
type EsxiRegistrationParamsAllOf struct {
	// Specifies the minimum free space (in GB) expected to be available in the datastore where the virtual disks of the VM being backed up reside. If the space available is lower than the specified value, backup will be aborted.
	MinFreeDatastoreSpaceForBackupGb NullableInt64 `json:"minFreeDatastoreSpaceForBackupGb,omitempty"`
	// If this value is > 0 and the number of streams concurrently active on a datastore is equal to it, then any further requests to access the datastore would be denied until the number of active streams reduces. This applies for all the datastores in the specified host.
	MaxConcurrentStreams NullableInt32 `json:"maxConcurrentStreams,omitempty"`
	// Specifies the datastore specific params.
	DataStoreParams []DatastoreParams `json:"dataStoreParams,omitempty"`
}

// NewEsxiRegistrationParamsAllOf instantiates a new EsxiRegistrationParamsAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEsxiRegistrationParamsAllOf() *EsxiRegistrationParamsAllOf {
	this := EsxiRegistrationParamsAllOf{}
	return &this
}

// NewEsxiRegistrationParamsAllOfWithDefaults instantiates a new EsxiRegistrationParamsAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEsxiRegistrationParamsAllOfWithDefaults() *EsxiRegistrationParamsAllOf {
	this := EsxiRegistrationParamsAllOf{}
	return &this
}

// GetMinFreeDatastoreSpaceForBackupGb returns the MinFreeDatastoreSpaceForBackupGb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EsxiRegistrationParamsAllOf) GetMinFreeDatastoreSpaceForBackupGb() int64 {
	if o == nil || o.MinFreeDatastoreSpaceForBackupGb.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MinFreeDatastoreSpaceForBackupGb.Get()
}

// GetMinFreeDatastoreSpaceForBackupGbOk returns a tuple with the MinFreeDatastoreSpaceForBackupGb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EsxiRegistrationParamsAllOf) GetMinFreeDatastoreSpaceForBackupGbOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinFreeDatastoreSpaceForBackupGb.Get(), o.MinFreeDatastoreSpaceForBackupGb.IsSet()
}

// HasMinFreeDatastoreSpaceForBackupGb returns a boolean if a field has been set.
func (o *EsxiRegistrationParamsAllOf) HasMinFreeDatastoreSpaceForBackupGb() bool {
	if o != nil && o.MinFreeDatastoreSpaceForBackupGb.IsSet() {
		return true
	}

	return false
}

// SetMinFreeDatastoreSpaceForBackupGb gets a reference to the given NullableInt64 and assigns it to the MinFreeDatastoreSpaceForBackupGb field.
func (o *EsxiRegistrationParamsAllOf) SetMinFreeDatastoreSpaceForBackupGb(v int64) {
	o.MinFreeDatastoreSpaceForBackupGb.Set(&v)
}
// SetMinFreeDatastoreSpaceForBackupGbNil sets the value for MinFreeDatastoreSpaceForBackupGb to be an explicit nil
func (o *EsxiRegistrationParamsAllOf) SetMinFreeDatastoreSpaceForBackupGbNil() {
	o.MinFreeDatastoreSpaceForBackupGb.Set(nil)
}

// UnsetMinFreeDatastoreSpaceForBackupGb ensures that no value is present for MinFreeDatastoreSpaceForBackupGb, not even an explicit nil
func (o *EsxiRegistrationParamsAllOf) UnsetMinFreeDatastoreSpaceForBackupGb() {
	o.MinFreeDatastoreSpaceForBackupGb.Unset()
}

// GetMaxConcurrentStreams returns the MaxConcurrentStreams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EsxiRegistrationParamsAllOf) GetMaxConcurrentStreams() int32 {
	if o == nil || o.MaxConcurrentStreams.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MaxConcurrentStreams.Get()
}

// GetMaxConcurrentStreamsOk returns a tuple with the MaxConcurrentStreams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EsxiRegistrationParamsAllOf) GetMaxConcurrentStreamsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxConcurrentStreams.Get(), o.MaxConcurrentStreams.IsSet()
}

// HasMaxConcurrentStreams returns a boolean if a field has been set.
func (o *EsxiRegistrationParamsAllOf) HasMaxConcurrentStreams() bool {
	if o != nil && o.MaxConcurrentStreams.IsSet() {
		return true
	}

	return false
}

// SetMaxConcurrentStreams gets a reference to the given NullableInt32 and assigns it to the MaxConcurrentStreams field.
func (o *EsxiRegistrationParamsAllOf) SetMaxConcurrentStreams(v int32) {
	o.MaxConcurrentStreams.Set(&v)
}
// SetMaxConcurrentStreamsNil sets the value for MaxConcurrentStreams to be an explicit nil
func (o *EsxiRegistrationParamsAllOf) SetMaxConcurrentStreamsNil() {
	o.MaxConcurrentStreams.Set(nil)
}

// UnsetMaxConcurrentStreams ensures that no value is present for MaxConcurrentStreams, not even an explicit nil
func (o *EsxiRegistrationParamsAllOf) UnsetMaxConcurrentStreams() {
	o.MaxConcurrentStreams.Unset()
}

// GetDataStoreParams returns the DataStoreParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EsxiRegistrationParamsAllOf) GetDataStoreParams() []DatastoreParams {
	if o == nil  {
		var ret []DatastoreParams
		return ret
	}
	return o.DataStoreParams
}

// GetDataStoreParamsOk returns a tuple with the DataStoreParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EsxiRegistrationParamsAllOf) GetDataStoreParamsOk() (*[]DatastoreParams, bool) {
	if o == nil || o.DataStoreParams == nil {
		return nil, false
	}
	return &o.DataStoreParams, true
}

// HasDataStoreParams returns a boolean if a field has been set.
func (o *EsxiRegistrationParamsAllOf) HasDataStoreParams() bool {
	if o != nil && o.DataStoreParams != nil {
		return true
	}

	return false
}

// SetDataStoreParams gets a reference to the given []DatastoreParams and assigns it to the DataStoreParams field.
func (o *EsxiRegistrationParamsAllOf) SetDataStoreParams(v []DatastoreParams) {
	o.DataStoreParams = v
}

func (o EsxiRegistrationParamsAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MinFreeDatastoreSpaceForBackupGb.IsSet() {
		toSerialize["minFreeDatastoreSpaceForBackupGb"] = o.MinFreeDatastoreSpaceForBackupGb.Get()
	}
	if o.MaxConcurrentStreams.IsSet() {
		toSerialize["maxConcurrentStreams"] = o.MaxConcurrentStreams.Get()
	}
	if o.DataStoreParams != nil {
		toSerialize["dataStoreParams"] = o.DataStoreParams
	}
	return json.Marshal(toSerialize)
}

type NullableEsxiRegistrationParamsAllOf struct {
	value *EsxiRegistrationParamsAllOf
	isSet bool
}

func (v NullableEsxiRegistrationParamsAllOf) Get() *EsxiRegistrationParamsAllOf {
	return v.value
}

func (v *NullableEsxiRegistrationParamsAllOf) Set(val *EsxiRegistrationParamsAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableEsxiRegistrationParamsAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableEsxiRegistrationParamsAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEsxiRegistrationParamsAllOf(val *EsxiRegistrationParamsAllOf) *NullableEsxiRegistrationParamsAllOf {
	return &NullableEsxiRegistrationParamsAllOf{value: val, isSet: true}
}

func (v NullableEsxiRegistrationParamsAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEsxiRegistrationParamsAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


