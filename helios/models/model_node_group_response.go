/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// NodeGroupResponse Specifies the details of Node Groups.
type NodeGroupResponse struct {
	// Specifies the details of a Node Group.
	NodeGroups []NodeGroup `json:"nodeGroups,omitempty"`
}

// NewNodeGroupResponse instantiates a new NodeGroupResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeGroupResponse() *NodeGroupResponse {
	this := NodeGroupResponse{}
	return &this
}

// NewNodeGroupResponseWithDefaults instantiates a new NodeGroupResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeGroupResponseWithDefaults() *NodeGroupResponse {
	this := NodeGroupResponse{}
	return &this
}

// GetNodeGroups returns the NodeGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeGroupResponse) GetNodeGroups() []NodeGroup {
	if o == nil  {
		var ret []NodeGroup
		return ret
	}
	return o.NodeGroups
}

// GetNodeGroupsOk returns a tuple with the NodeGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeGroupResponse) GetNodeGroupsOk() (*[]NodeGroup, bool) {
	if o == nil || o.NodeGroups == nil {
		return nil, false
	}
	return &o.NodeGroups, true
}

// HasNodeGroups returns a boolean if a field has been set.
func (o *NodeGroupResponse) HasNodeGroups() bool {
	if o != nil && o.NodeGroups != nil {
		return true
	}

	return false
}

// SetNodeGroups gets a reference to the given []NodeGroup and assigns it to the NodeGroups field.
func (o *NodeGroupResponse) SetNodeGroups(v []NodeGroup) {
	o.NodeGroups = v
}

func (o NodeGroupResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NodeGroups != nil {
		toSerialize["nodeGroups"] = o.NodeGroups
	}
	return json.Marshal(toSerialize)
}

type NullableNodeGroupResponse struct {
	value *NodeGroupResponse
	isSet bool
}

func (v NullableNodeGroupResponse) Get() *NodeGroupResponse {
	return v.value
}

func (v *NullableNodeGroupResponse) Set(val *NodeGroupResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeGroupResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeGroupResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeGroupResponse(val *NodeGroupResponse) *NullableNodeGroupResponse {
	return &NullableNodeGroupResponse{value: val, isSet: true}
}

func (v NullableNodeGroupResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeGroupResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


