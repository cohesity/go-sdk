/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

// package helios
package models

import (
	"encoding/json"
	. "github.com/cohesity/go-sdk/helios/utils"
)

var _ = NullableBool{}

// IdpPrincipals Specifies a list of IDP Principals.
type IdpPrincipals struct {
	// Specifies a list of IDP Principals.
	Principals *[]IdpPrincipal `json:"principals,omitempty"`
}

// NewIdpPrincipals instantiates a new IdpPrincipals object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIdpPrincipals() *IdpPrincipals {
	this := IdpPrincipals{}
	return &this
}

// NewIdpPrincipalsWithDefaults instantiates a new IdpPrincipals object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIdpPrincipalsWithDefaults() *IdpPrincipals {
	this := IdpPrincipals{}
	return &this
}

// GetPrincipals returns the Principals field value if set, zero value otherwise.
func (o *IdpPrincipals) GetPrincipals() []IdpPrincipal {
	if o == nil || o.Principals == nil {
		var ret []IdpPrincipal
		return ret
	}
	return *o.Principals
}

// GetPrincipalsOk returns a tuple with the Principals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *IdpPrincipals) GetPrincipalsOk() (*[]IdpPrincipal, bool) {
	if o == nil || o.Principals == nil {
		return nil, false
	}
	return o.Principals, true
}

// HasPrincipals returns a boolean if a field has been set.
func (o *IdpPrincipals) HasPrincipals() bool {
	if o != nil && o.Principals != nil {
		return true
	}

	return false
}

// SetPrincipals gets a reference to the given []IdpPrincipal and assigns it to the Principals field.
func (o *IdpPrincipals) SetPrincipals(v []IdpPrincipal) {
	o.Principals = &v
}

func (o IdpPrincipals) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Principals != nil {
		toSerialize["principals"] = o.Principals
	}
	return json.Marshal(toSerialize)
}

type NullableIdpPrincipals struct {
	value *IdpPrincipals
	isSet bool
}

func (v NullableIdpPrincipals) Get() *IdpPrincipals {
	return v.value
}

func (v *NullableIdpPrincipals) Set(val *IdpPrincipals) {
	v.value = val
	v.isSet = true
}

func (v NullableIdpPrincipals) IsSet() bool {
	return v.isSet
}

func (v *NullableIdpPrincipals) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIdpPrincipals(val *IdpPrincipals) *NullableIdpPrincipals {
	return &NullableIdpPrincipals{value: val, isSet: true}
}

func (v NullableIdpPrincipals) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIdpPrincipals) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


