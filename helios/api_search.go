/*
 * Cohesity REST API
 *
 * Cohesity API provides a RESTful interface to access the various data management operations on Cohesity cluster and Helios.
 *
 * API version: 2.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package helios

import (
	"bytes"
	"reflect"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"regexp"
	. "github.com/cohesity/go-sdk/helios/models"
)

// Linger please
var (
	_ _context.Context
)

// SearchService Search service
type SearchService service

type ApiGlobalSearchIndexedObjectsRequest struct {
	ctx _context.Context
	ApiService *SearchService
	Body *HeliosSearchIndexedObjectsRequest
	RegionId *string
}


func (a *SearchService) GlobalSearchIndexedObjects(r ApiGlobalSearchIndexedObjectsRequest) (HeliosSearchIndexedObjectsResponseBody, *_nethttp.Response, error) {
	if reflect.TypeOf(*a).Name() != "AccessTokenService" {
		token, err := GetTokenHelper(a.client)

		if err != nil {
			return HeliosSearchIndexedObjectsResponseBody{}, nil, GenericOpenAPIError{
				error: err.Error(),
			}
		}

		r.ctx = _context.WithValue(_context.Background(), ContextAPIKeys, map[string]APIKey{"TokenHeader": {Key: token, Prefix: "Bearer"}})
	} else {
		r.ctx = _context.Background()
	}
	r.ApiService = a

	return r.ApiService.GlobalSearchIndexedObjectsExecute(r)
}


/*
 * Execute executes the request
 * @return HeliosSearchIndexedObjectsResponseBody
 */
func (a *SearchService) GlobalSearchIndexedObjectsExecute(r ApiGlobalSearchIndexedObjectsRequest) (HeliosSearchIndexedObjectsResponseBody, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  HeliosSearchIndexedObjectsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchService.GlobalSearchIndexedObjects")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/mcm/search/indexed-objects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.Body == nil {
		return localVarReturnValue, nil, reportError("Body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.RegionId != nil {
		localVarHeaderParams["regionId"] = parameterToString(*r.RegionId, "")
	}
	// body params
	localVarPostBody = r.Body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		if match, matchErr := regexp.MatchString(`Client.Timeout exceeded`, err.Error()); matchErr == nil && match {
			serName := reflect.TypeOf(r).Name()
			serName = serName[3:len(serName)-7] // remove Api prefix, and Request suffix
			err = GenericOpenAPIError{
				error: "Network timeout when making a request of " + serName +
					". Consider increase the request timeout in the client config." ,
			}
		}
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchIndexedObjectsRequest struct {
	ctx _context.Context
	ApiService *SearchService
	Body *SearchIndexedObjectsRequest
	AccessClusterId *int64
	RegionId *string
}


func (a *SearchService) SearchIndexedObjects(r ApiSearchIndexedObjectsRequest) (SearchIndexedObjectsResponseBody, *_nethttp.Response, error) {
	if reflect.TypeOf(*a).Name() != "AccessTokenService" {
		token, err := GetTokenHelper(a.client)

		if err != nil {
			return SearchIndexedObjectsResponseBody{}, nil, GenericOpenAPIError{
				error: err.Error(),
			}
		}

		r.ctx = _context.WithValue(_context.Background(), ContextAPIKeys, map[string]APIKey{"TokenHeader": {Key: token, Prefix: "Bearer"}})
	} else {
		r.ctx = _context.Background()
	}
	r.ApiService = a

	return r.ApiService.SearchIndexedObjectsExecute(r)
}


/*
 * Execute executes the request
 * @return SearchIndexedObjectsResponseBody
 */
func (a *SearchService) SearchIndexedObjectsExecute(r ApiSearchIndexedObjectsRequest) (SearchIndexedObjectsResponseBody, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  SearchIndexedObjectsResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchService.SearchIndexedObjects")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-protect/search/indexed-objects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.Body == nil {
		return localVarReturnValue, nil, reportError("Body is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.AccessClusterId != nil {
		localVarHeaderParams["accessClusterId"] = parameterToString(*r.AccessClusterId, "")
	}
	if r.RegionId != nil {
		localVarHeaderParams["regionId"] = parameterToString(*r.RegionId, "")
	}
	// body params
	localVarPostBody = r.Body
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		if match, matchErr := regexp.MatchString(`Client.Timeout exceeded`, err.Error()); matchErr == nil && match {
			serName := reflect.TypeOf(r).Name()
			serName = serName[3:len(serName)-7] // remove Api prefix, and Request suffix
			err = GenericOpenAPIError{
				error: "Network timeout when making a request of " + serName +
					". Consider increase the request timeout in the client config." ,
			}
		}
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchObjectsRequest struct {
	ctx _context.Context
	ApiService *SearchService
	AccessClusterId *int64
	RegionId *string
	SearchString *string
	Environments *[]string
	ProtectionTypes *[]string
	TenantIds *[]string
	IncludeTenants *bool
	ProtectionGroupIds *[]string
	ObjectIds *[]int64
	OsTypes *[]string
	SourceIds *[]int64
	SourceUuids *[]string
	IsProtected *bool
	IsDeleted *bool
	LastRunStatusList *[]string
	RegionIds *[]string
	ClusterIdentifiers *[]string
	StorageDomainIds *[]string
	IncludeDeletedObjects *bool
	PaginationCookie *string
	Count *int32
	MustHaveTagIds *[]string
	MightHaveTagIds *[]string
	MustHaveSnapshotTagIds *[]string
	MightHaveSnapshotTagIds *[]string
}


func (a *SearchService) SearchObjects(r ApiSearchObjectsRequest) (ObjectsSearchResponseBody, *_nethttp.Response, error) {
	if reflect.TypeOf(*a).Name() != "AccessTokenService" {
		token, err := GetTokenHelper(a.client)

		if err != nil {
			return ObjectsSearchResponseBody{}, nil, GenericOpenAPIError{
				error: err.Error(),
			}
		}

		r.ctx = _context.WithValue(_context.Background(), ContextAPIKeys, map[string]APIKey{"TokenHeader": {Key: token, Prefix: "Bearer"}})
	} else {
		r.ctx = _context.Background()
	}
	r.ApiService = a

	return r.ApiService.SearchObjectsExecute(r)
}


/*
 * Execute executes the request
 * @return ObjectsSearchResponseBody
 */
func (a *SearchService) SearchObjectsExecute(r ApiSearchObjectsRequest) (ObjectsSearchResponseBody, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ObjectsSearchResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchService.SearchObjects")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-protect/search/objects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.SearchString != nil {
		localVarQueryParams.Add("searchString", parameterToString(*r.SearchString, ""))
	}
	if r.Environments != nil {
		localVarQueryParams.Add("environments", parameterToString(*r.Environments, "csv"))
	}
	if r.ProtectionTypes != nil {
		localVarQueryParams.Add("protectionTypes", parameterToString(*r.ProtectionTypes, "csv"))
	}
	if r.TenantIds != nil {
		localVarQueryParams.Add("tenantIds", parameterToString(*r.TenantIds, "csv"))
	}
	if r.IncludeTenants != nil {
		localVarQueryParams.Add("includeTenants", parameterToString(*r.IncludeTenants, ""))
	}
	if r.ProtectionGroupIds != nil {
		localVarQueryParams.Add("protectionGroupIds", parameterToString(*r.ProtectionGroupIds, "csv"))
	}
	if r.ObjectIds != nil {
		localVarQueryParams.Add("objectIds", parameterToString(*r.ObjectIds, "csv"))
	}
	if r.OsTypes != nil {
		localVarQueryParams.Add("osTypes", parameterToString(*r.OsTypes, "csv"))
	}
	if r.SourceIds != nil {
		localVarQueryParams.Add("sourceIds", parameterToString(*r.SourceIds, "csv"))
	}
	if r.SourceUuids != nil {
		localVarQueryParams.Add("sourceUuids", parameterToString(*r.SourceUuids, "csv"))
	}
	if r.IsProtected != nil {
		localVarQueryParams.Add("isProtected", parameterToString(*r.IsProtected, ""))
	}
	if r.IsDeleted != nil {
		localVarQueryParams.Add("isDeleted", parameterToString(*r.IsDeleted, ""))
	}
	if r.LastRunStatusList != nil {
		localVarQueryParams.Add("lastRunStatusList", parameterToString(*r.LastRunStatusList, "csv"))
	}
	if r.RegionIds != nil {
		localVarQueryParams.Add("regionIds", parameterToString(*r.RegionIds, "csv"))
	}
	if r.ClusterIdentifiers != nil {
		localVarQueryParams.Add("clusterIdentifiers", parameterToString(*r.ClusterIdentifiers, "csv"))
	}
	if r.StorageDomainIds != nil {
		localVarQueryParams.Add("storageDomainIds", parameterToString(*r.StorageDomainIds, "csv"))
	}
	if r.IncludeDeletedObjects != nil {
		localVarQueryParams.Add("includeDeletedObjects", parameterToString(*r.IncludeDeletedObjects, ""))
	}
	if r.PaginationCookie != nil {
		localVarQueryParams.Add("paginationCookie", parameterToString(*r.PaginationCookie, ""))
	}
	if r.Count != nil {
		localVarQueryParams.Add("count", parameterToString(*r.Count, ""))
	}
	if r.MustHaveTagIds != nil {
		localVarQueryParams.Add("mustHaveTagIds", parameterToString(*r.MustHaveTagIds, "csv"))
	}
	if r.MightHaveTagIds != nil {
		localVarQueryParams.Add("mightHaveTagIds", parameterToString(*r.MightHaveTagIds, "csv"))
	}
	if r.MustHaveSnapshotTagIds != nil {
		localVarQueryParams.Add("mustHaveSnapshotTagIds", parameterToString(*r.MustHaveSnapshotTagIds, "csv"))
	}
	if r.MightHaveSnapshotTagIds != nil {
		localVarQueryParams.Add("mightHaveSnapshotTagIds", parameterToString(*r.MightHaveSnapshotTagIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.AccessClusterId != nil {
		localVarHeaderParams["accessClusterId"] = parameterToString(*r.AccessClusterId, "")
	}
	if r.RegionId != nil {
		localVarHeaderParams["regionId"] = parameterToString(*r.RegionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		if match, matchErr := regexp.MatchString(`Client.Timeout exceeded`, err.Error()); matchErr == nil && match {
			serName := reflect.TypeOf(r).Name()
			serName = serName[3:len(serName)-7] // remove Api prefix, and Request suffix
			err = GenericOpenAPIError{
				error: "Network timeout when making a request of " + serName +
					". Consider increase the request timeout in the client config." ,
			}
		}
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchProtectedObjectsRequest struct {
	ctx _context.Context
	ApiService *SearchService
	AccessClusterId *int64
	RegionId *string
	SearchString *string
	Environments *[]string
	SnapshotActions *[]string
	TenantIds *[]string
	IncludeTenants *bool
	ProtectionGroupIds *[]string
	ObjectIds *[]int64
	StorageDomainIds *[]int64
	SubResultSize *int32
	FilterSnapshotFromUsecs *int64
	FilterSnapshotToUsecs *int64
	OsTypes *[]string
	SourceIds *[]int64
	RunInstanceIds *[]int64
	CdpProtectedOnly *bool
	RegionIds *[]string
}


func (a *SearchService) SearchProtectedObjects(r ApiSearchProtectedObjectsRequest) (ProtectedObjectsSearchResponseBody, *_nethttp.Response, error) {
	if reflect.TypeOf(*a).Name() != "AccessTokenService" {
		token, err := GetTokenHelper(a.client)

		if err != nil {
			return ProtectedObjectsSearchResponseBody{}, nil, GenericOpenAPIError{
				error: err.Error(),
			}
		}

		r.ctx = _context.WithValue(_context.Background(), ContextAPIKeys, map[string]APIKey{"TokenHeader": {Key: token, Prefix: "Bearer"}})
	} else {
		r.ctx = _context.Background()
	}
	r.ApiService = a

	return r.ApiService.SearchProtectedObjectsExecute(r)
}


/*
 * Execute executes the request
 * @return ProtectedObjectsSearchResponseBody
 */
func (a *SearchService) SearchProtectedObjectsExecute(r ApiSearchProtectedObjectsRequest) (ProtectedObjectsSearchResponseBody, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProtectedObjectsSearchResponseBody
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchService.SearchProtectedObjects")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/data-protect/search/protected-objects"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.SearchString != nil {
		localVarQueryParams.Add("searchString", parameterToString(*r.SearchString, ""))
	}
	if r.Environments != nil {
		localVarQueryParams.Add("environments", parameterToString(*r.Environments, "csv"))
	}
	if r.SnapshotActions != nil {
		localVarQueryParams.Add("snapshotActions", parameterToString(*r.SnapshotActions, "csv"))
	}
	if r.TenantIds != nil {
		localVarQueryParams.Add("tenantIds", parameterToString(*r.TenantIds, "csv"))
	}
	if r.IncludeTenants != nil {
		localVarQueryParams.Add("includeTenants", parameterToString(*r.IncludeTenants, ""))
	}
	if r.ProtectionGroupIds != nil {
		localVarQueryParams.Add("protectionGroupIds", parameterToString(*r.ProtectionGroupIds, "csv"))
	}
	if r.ObjectIds != nil {
		localVarQueryParams.Add("objectIds", parameterToString(*r.ObjectIds, "csv"))
	}
	if r.StorageDomainIds != nil {
		localVarQueryParams.Add("storageDomainIds", parameterToString(*r.StorageDomainIds, "csv"))
	}
	if r.SubResultSize != nil {
		localVarQueryParams.Add("subResultSize", parameterToString(*r.SubResultSize, ""))
	}
	if r.FilterSnapshotFromUsecs != nil {
		localVarQueryParams.Add("filterSnapshotFromUsecs", parameterToString(*r.FilterSnapshotFromUsecs, ""))
	}
	if r.FilterSnapshotToUsecs != nil {
		localVarQueryParams.Add("filterSnapshotToUsecs", parameterToString(*r.FilterSnapshotToUsecs, ""))
	}
	if r.OsTypes != nil {
		localVarQueryParams.Add("osTypes", parameterToString(*r.OsTypes, "csv"))
	}
	if r.SourceIds != nil {
		localVarQueryParams.Add("sourceIds", parameterToString(*r.SourceIds, "csv"))
	}
	if r.RunInstanceIds != nil {
		localVarQueryParams.Add("runInstanceIds", parameterToString(*r.RunInstanceIds, "csv"))
	}
	if r.CdpProtectedOnly != nil {
		localVarQueryParams.Add("cdpProtectedOnly", parameterToString(*r.CdpProtectedOnly, ""))
	}
	if r.RegionIds != nil {
		localVarQueryParams.Add("regionIds", parameterToString(*r.RegionIds, "csv"))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.AccessClusterId != nil {
		localVarHeaderParams["accessClusterId"] = parameterToString(*r.AccessClusterId, "")
	}
	if r.RegionId != nil {
		localVarHeaderParams["regionId"] = parameterToString(*r.RegionId, "")
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["APIKeyHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["apiKey"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		if match, matchErr := regexp.MatchString(`Client.Timeout exceeded`, err.Error()); matchErr == nil && match {
			serName := reflect.TypeOf(r).Name()
			serName = serName[3:len(serName)-7] // remove Api prefix, and Request suffix
			err = GenericOpenAPIError{
				error: "Network timeout when making a request of " + serName +
					". Consider increase the request timeout in the client config." ,
			}
		}
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v Error
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
