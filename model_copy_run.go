/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CopyRun Specifies details about the Copy Run for a backup run of a Job Run. A Copy task copies snapshots resulted from a backup run to a snapshot target which could be 'kLocal', 'kArchival', or 'kRemote'.
type CopyRun struct {
	// Specifies the status information of each task that copies the snapshot taken for a Protection Source.
	CopySnapshotTasks []CopySnapshotTaskStatus `json:"copySnapshotTasks,omitempty"`
	DataLockConstraints *DataLockConstraints `json:"dataLockConstraints,omitempty"`
	// Specifies if an error occurred (if any) while running this task. This field is populated when the status is equal to 'kFailure'.
	Error NullableString `json:"error,omitempty"`
	// Specifies expiry time of the copies of the snapshots in this Protection Run.
	ExpiryTimeUsecs NullableInt64 `json:"expiryTimeUsecs,omitempty"`
	// Specifies whether legal hold is enabled on this run. It is true if the run is put on legal hold. Independent of this flag, some of the entities may be on legal hold.
	HoldForLegalPurpose NullableBool `json:"holdForLegalPurpose,omitempty"`
	// Specifies the list of Protection Source Ids and the legal hold status.
	LegalHoldings []LegalHoldings `json:"legalHoldings,omitempty"`
	// Specifies start time of the copy run.
	RunStartTimeUsecs NullableInt64 `json:"runStartTimeUsecs,omitempty"`
	Stats *CopyRunStats `json:"stats,omitempty"`
	// Specifies the aggregated status of copy tasks such as 'kRunning', 'kSuccess', 'kFailure' etc. 'kAccepted' indicates the task is queued to run but not yet running. 'kRunning' indicates the task is running. 'kCanceling' indicates a request to cancel the task has occurred but the task is not yet canceled. 'kCanceled' indicates the task has been canceled. 'kSuccess' indicates the task was successful. 'kFailure' indicates the task failed. 'kWarning' indicates the task has finished with warning. 'kOnHold' indicates the task is kept onHold. 'kMissed' indicates the task is missed.
	Status NullableString `json:"status,omitempty"`
	Target *SnapshotTargetSettings `json:"target,omitempty"`
	// Specifies a globally unique id of the copy task.
	TaskUid NullableUniversalId `json:"taskUid,omitempty"`
	// Specifies a message to the user if any manual intervention is needed to make forward progress for the archival task. This message is mainly relevant for tape based archival tasks where a backup admin might be asked to load a new media when the tape library does not have any more media to use.
	UserActionMessage NullableString `json:"userActionMessage,omitempty"`
}

// NewCopyRun instantiates a new CopyRun object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyRun() *CopyRun {
	this := CopyRun{}
	return &this
}

// NewCopyRunWithDefaults instantiates a new CopyRun object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyRunWithDefaults() *CopyRun {
	this := CopyRun{}
	return &this
}

// GetCopySnapshotTasks returns the CopySnapshotTasks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRun) GetCopySnapshotTasks() []CopySnapshotTaskStatus {
	if o == nil  {
		var ret []CopySnapshotTaskStatus
		return ret
	}
	return o.CopySnapshotTasks
}

// GetCopySnapshotTasksOk returns a tuple with the CopySnapshotTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRun) GetCopySnapshotTasksOk() (*[]CopySnapshotTaskStatus, bool) {
	if o == nil || o.CopySnapshotTasks == nil {
		return nil, false
	}
	return &o.CopySnapshotTasks, true
}

// HasCopySnapshotTasks returns a boolean if a field has been set.
func (o *CopyRun) HasCopySnapshotTasks() bool {
	if o != nil && o.CopySnapshotTasks != nil {
		return true
	}

	return false
}

// SetCopySnapshotTasks gets a reference to the given []CopySnapshotTaskStatus and assigns it to the CopySnapshotTasks field.
func (o *CopyRun) SetCopySnapshotTasks(v []CopySnapshotTaskStatus) {
	o.CopySnapshotTasks = v
}

// GetDataLockConstraints returns the DataLockConstraints field value if set, zero value otherwise.
func (o *CopyRun) GetDataLockConstraints() DataLockConstraints {
	if o == nil || o.DataLockConstraints == nil {
		var ret DataLockConstraints
		return ret
	}
	return *o.DataLockConstraints
}

// GetDataLockConstraintsOk returns a tuple with the DataLockConstraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRun) GetDataLockConstraintsOk() (*DataLockConstraints, bool) {
	if o == nil || o.DataLockConstraints == nil {
		return nil, false
	}
	return o.DataLockConstraints, true
}

// HasDataLockConstraints returns a boolean if a field has been set.
func (o *CopyRun) HasDataLockConstraints() bool {
	if o != nil && o.DataLockConstraints != nil {
		return true
	}

	return false
}

// SetDataLockConstraints gets a reference to the given DataLockConstraints and assigns it to the DataLockConstraints field.
func (o *CopyRun) SetDataLockConstraints(v DataLockConstraints) {
	o.DataLockConstraints = &v
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRun) GetError() string {
	if o == nil || o.Error.Get() == nil {
		var ret string
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRun) GetErrorOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *CopyRun) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableString and assigns it to the Error field.
func (o *CopyRun) SetError(v string) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *CopyRun) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *CopyRun) UnsetError() {
	o.Error.Unset()
}

// GetExpiryTimeUsecs returns the ExpiryTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRun) GetExpiryTimeUsecs() int64 {
	if o == nil || o.ExpiryTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiryTimeUsecs.Get()
}

// GetExpiryTimeUsecsOk returns a tuple with the ExpiryTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRun) GetExpiryTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTimeUsecs.Get(), o.ExpiryTimeUsecs.IsSet()
}

// HasExpiryTimeUsecs returns a boolean if a field has been set.
func (o *CopyRun) HasExpiryTimeUsecs() bool {
	if o != nil && o.ExpiryTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ExpiryTimeUsecs field.
func (o *CopyRun) SetExpiryTimeUsecs(v int64) {
	o.ExpiryTimeUsecs.Set(&v)
}
// SetExpiryTimeUsecsNil sets the value for ExpiryTimeUsecs to be an explicit nil
func (o *CopyRun) SetExpiryTimeUsecsNil() {
	o.ExpiryTimeUsecs.Set(nil)
}

// UnsetExpiryTimeUsecs ensures that no value is present for ExpiryTimeUsecs, not even an explicit nil
func (o *CopyRun) UnsetExpiryTimeUsecs() {
	o.ExpiryTimeUsecs.Unset()
}

// GetHoldForLegalPurpose returns the HoldForLegalPurpose field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRun) GetHoldForLegalPurpose() bool {
	if o == nil || o.HoldForLegalPurpose.Get() == nil {
		var ret bool
		return ret
	}
	return *o.HoldForLegalPurpose.Get()
}

// GetHoldForLegalPurposeOk returns a tuple with the HoldForLegalPurpose field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRun) GetHoldForLegalPurposeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HoldForLegalPurpose.Get(), o.HoldForLegalPurpose.IsSet()
}

// HasHoldForLegalPurpose returns a boolean if a field has been set.
func (o *CopyRun) HasHoldForLegalPurpose() bool {
	if o != nil && o.HoldForLegalPurpose.IsSet() {
		return true
	}

	return false
}

// SetHoldForLegalPurpose gets a reference to the given NullableBool and assigns it to the HoldForLegalPurpose field.
func (o *CopyRun) SetHoldForLegalPurpose(v bool) {
	o.HoldForLegalPurpose.Set(&v)
}
// SetHoldForLegalPurposeNil sets the value for HoldForLegalPurpose to be an explicit nil
func (o *CopyRun) SetHoldForLegalPurposeNil() {
	o.HoldForLegalPurpose.Set(nil)
}

// UnsetHoldForLegalPurpose ensures that no value is present for HoldForLegalPurpose, not even an explicit nil
func (o *CopyRun) UnsetHoldForLegalPurpose() {
	o.HoldForLegalPurpose.Unset()
}

// GetLegalHoldings returns the LegalHoldings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRun) GetLegalHoldings() []LegalHoldings {
	if o == nil  {
		var ret []LegalHoldings
		return ret
	}
	return o.LegalHoldings
}

// GetLegalHoldingsOk returns a tuple with the LegalHoldings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRun) GetLegalHoldingsOk() (*[]LegalHoldings, bool) {
	if o == nil || o.LegalHoldings == nil {
		return nil, false
	}
	return &o.LegalHoldings, true
}

// HasLegalHoldings returns a boolean if a field has been set.
func (o *CopyRun) HasLegalHoldings() bool {
	if o != nil && o.LegalHoldings != nil {
		return true
	}

	return false
}

// SetLegalHoldings gets a reference to the given []LegalHoldings and assigns it to the LegalHoldings field.
func (o *CopyRun) SetLegalHoldings(v []LegalHoldings) {
	o.LegalHoldings = v
}

// GetRunStartTimeUsecs returns the RunStartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRun) GetRunStartTimeUsecs() int64 {
	if o == nil || o.RunStartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RunStartTimeUsecs.Get()
}

// GetRunStartTimeUsecsOk returns a tuple with the RunStartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRun) GetRunStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunStartTimeUsecs.Get(), o.RunStartTimeUsecs.IsSet()
}

// HasRunStartTimeUsecs returns a boolean if a field has been set.
func (o *CopyRun) HasRunStartTimeUsecs() bool {
	if o != nil && o.RunStartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetRunStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the RunStartTimeUsecs field.
func (o *CopyRun) SetRunStartTimeUsecs(v int64) {
	o.RunStartTimeUsecs.Set(&v)
}
// SetRunStartTimeUsecsNil sets the value for RunStartTimeUsecs to be an explicit nil
func (o *CopyRun) SetRunStartTimeUsecsNil() {
	o.RunStartTimeUsecs.Set(nil)
}

// UnsetRunStartTimeUsecs ensures that no value is present for RunStartTimeUsecs, not even an explicit nil
func (o *CopyRun) UnsetRunStartTimeUsecs() {
	o.RunStartTimeUsecs.Unset()
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *CopyRun) GetStats() CopyRunStats {
	if o == nil || o.Stats == nil {
		var ret CopyRunStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRun) GetStatsOk() (*CopyRunStats, bool) {
	if o == nil || o.Stats == nil {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *CopyRun) HasStats() bool {
	if o != nil && o.Stats != nil {
		return true
	}

	return false
}

// SetStats gets a reference to the given CopyRunStats and assigns it to the Stats field.
func (o *CopyRun) SetStats(v CopyRunStats) {
	o.Stats = &v
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRun) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRun) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *CopyRun) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *CopyRun) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *CopyRun) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *CopyRun) UnsetStatus() {
	o.Status.Unset()
}

// GetTarget returns the Target field value if set, zero value otherwise.
func (o *CopyRun) GetTarget() SnapshotTargetSettings {
	if o == nil || o.Target == nil {
		var ret SnapshotTargetSettings
		return ret
	}
	return *o.Target
}

// GetTargetOk returns a tuple with the Target field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CopyRun) GetTargetOk() (*SnapshotTargetSettings, bool) {
	if o == nil || o.Target == nil {
		return nil, false
	}
	return o.Target, true
}

// HasTarget returns a boolean if a field has been set.
func (o *CopyRun) HasTarget() bool {
	if o != nil && o.Target != nil {
		return true
	}

	return false
}

// SetTarget gets a reference to the given SnapshotTargetSettings and assigns it to the Target field.
func (o *CopyRun) SetTarget(v SnapshotTargetSettings) {
	o.Target = &v
}

// GetTaskUid returns the TaskUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRun) GetTaskUid() UniversalId {
	if o == nil || o.TaskUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.TaskUid.Get()
}

// GetTaskUidOk returns a tuple with the TaskUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRun) GetTaskUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskUid.Get(), o.TaskUid.IsSet()
}

// HasTaskUid returns a boolean if a field has been set.
func (o *CopyRun) HasTaskUid() bool {
	if o != nil && o.TaskUid.IsSet() {
		return true
	}

	return false
}

// SetTaskUid gets a reference to the given NullableUniversalId and assigns it to the TaskUid field.
func (o *CopyRun) SetTaskUid(v UniversalId) {
	o.TaskUid.Set(&v)
}
// SetTaskUidNil sets the value for TaskUid to be an explicit nil
func (o *CopyRun) SetTaskUidNil() {
	o.TaskUid.Set(nil)
}

// UnsetTaskUid ensures that no value is present for TaskUid, not even an explicit nil
func (o *CopyRun) UnsetTaskUid() {
	o.TaskUid.Unset()
}

// GetUserActionMessage returns the UserActionMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRun) GetUserActionMessage() string {
	if o == nil || o.UserActionMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserActionMessage.Get()
}

// GetUserActionMessageOk returns a tuple with the UserActionMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRun) GetUserActionMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserActionMessage.Get(), o.UserActionMessage.IsSet()
}

// HasUserActionMessage returns a boolean if a field has been set.
func (o *CopyRun) HasUserActionMessage() bool {
	if o != nil && o.UserActionMessage.IsSet() {
		return true
	}

	return false
}

// SetUserActionMessage gets a reference to the given NullableString and assigns it to the UserActionMessage field.
func (o *CopyRun) SetUserActionMessage(v string) {
	o.UserActionMessage.Set(&v)
}
// SetUserActionMessageNil sets the value for UserActionMessage to be an explicit nil
func (o *CopyRun) SetUserActionMessageNil() {
	o.UserActionMessage.Set(nil)
}

// UnsetUserActionMessage ensures that no value is present for UserActionMessage, not even an explicit nil
func (o *CopyRun) UnsetUserActionMessage() {
	o.UserActionMessage.Unset()
}

func (o CopyRun) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CopySnapshotTasks != nil {
		toSerialize["copySnapshotTasks"] = o.CopySnapshotTasks
	}
	if o.DataLockConstraints != nil {
		toSerialize["dataLockConstraints"] = o.DataLockConstraints
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.ExpiryTimeUsecs.IsSet() {
		toSerialize["expiryTimeUsecs"] = o.ExpiryTimeUsecs.Get()
	}
	if o.HoldForLegalPurpose.IsSet() {
		toSerialize["holdForLegalPurpose"] = o.HoldForLegalPurpose.Get()
	}
	if o.LegalHoldings != nil {
		toSerialize["legalHoldings"] = o.LegalHoldings
	}
	if o.RunStartTimeUsecs.IsSet() {
		toSerialize["runStartTimeUsecs"] = o.RunStartTimeUsecs.Get()
	}
	if o.Stats != nil {
		toSerialize["stats"] = o.Stats
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.Target != nil {
		toSerialize["target"] = o.Target
	}
	if o.TaskUid.IsSet() {
		toSerialize["taskUid"] = o.TaskUid.Get()
	}
	if o.UserActionMessage.IsSet() {
		toSerialize["userActionMessage"] = o.UserActionMessage.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCopyRun struct {
	value *CopyRun
	isSet bool
}

func (v NullableCopyRun) Get() *CopyRun {
	return v.value
}

func (v *NullableCopyRun) Set(val *CopyRun) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyRun) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyRun) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyRun(val *CopyRun) *NullableCopyRun {
	return &NullableCopyRun{value: val, isSet: true}
}

func (v NullableCopyRun) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyRun) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


