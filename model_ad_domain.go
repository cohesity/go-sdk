/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AdDomain Specifies information about an AD Domain.
type AdDomain struct {
	// Specifies DNS root.
	DnsRoot NullableString `json:"dnsRoot,omitempty"`
	// Specifies AD forest name.
	Forest NullableString `json:"forest,omitempty"`
	Identity *AdDomainIdentity `json:"identity,omitempty"`
	// Specifies AD NetBIOS name.
	NetbiosName NullableString `json:"netbiosName,omitempty"`
	// Specifies parent domain name.
	ParentDomain NullableString `json:"parentDomain,omitempty"`
	// Specifies tombstone time in days.
	TombstoneDays NullableInt32 `json:"tombstoneDays,omitempty"`
}

// NewAdDomain instantiates a new AdDomain object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdDomain() *AdDomain {
	this := AdDomain{}
	return &this
}

// NewAdDomainWithDefaults instantiates a new AdDomain object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdDomainWithDefaults() *AdDomain {
	this := AdDomain{}
	return &this
}

// GetDnsRoot returns the DnsRoot field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomain) GetDnsRoot() string {
	if o == nil || o.DnsRoot.Get() == nil {
		var ret string
		return ret
	}
	return *o.DnsRoot.Get()
}

// GetDnsRootOk returns a tuple with the DnsRoot field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomain) GetDnsRootOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DnsRoot.Get(), o.DnsRoot.IsSet()
}

// HasDnsRoot returns a boolean if a field has been set.
func (o *AdDomain) HasDnsRoot() bool {
	if o != nil && o.DnsRoot.IsSet() {
		return true
	}

	return false
}

// SetDnsRoot gets a reference to the given NullableString and assigns it to the DnsRoot field.
func (o *AdDomain) SetDnsRoot(v string) {
	o.DnsRoot.Set(&v)
}
// SetDnsRootNil sets the value for DnsRoot to be an explicit nil
func (o *AdDomain) SetDnsRootNil() {
	o.DnsRoot.Set(nil)
}

// UnsetDnsRoot ensures that no value is present for DnsRoot, not even an explicit nil
func (o *AdDomain) UnsetDnsRoot() {
	o.DnsRoot.Unset()
}

// GetForest returns the Forest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomain) GetForest() string {
	if o == nil || o.Forest.Get() == nil {
		var ret string
		return ret
	}
	return *o.Forest.Get()
}

// GetForestOk returns a tuple with the Forest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomain) GetForestOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Forest.Get(), o.Forest.IsSet()
}

// HasForest returns a boolean if a field has been set.
func (o *AdDomain) HasForest() bool {
	if o != nil && o.Forest.IsSet() {
		return true
	}

	return false
}

// SetForest gets a reference to the given NullableString and assigns it to the Forest field.
func (o *AdDomain) SetForest(v string) {
	o.Forest.Set(&v)
}
// SetForestNil sets the value for Forest to be an explicit nil
func (o *AdDomain) SetForestNil() {
	o.Forest.Set(nil)
}

// UnsetForest ensures that no value is present for Forest, not even an explicit nil
func (o *AdDomain) UnsetForest() {
	o.Forest.Unset()
}

// GetIdentity returns the Identity field value if set, zero value otherwise.
func (o *AdDomain) GetIdentity() AdDomainIdentity {
	if o == nil || o.Identity == nil {
		var ret AdDomainIdentity
		return ret
	}
	return *o.Identity
}

// GetIdentityOk returns a tuple with the Identity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AdDomain) GetIdentityOk() (*AdDomainIdentity, bool) {
	if o == nil || o.Identity == nil {
		return nil, false
	}
	return o.Identity, true
}

// HasIdentity returns a boolean if a field has been set.
func (o *AdDomain) HasIdentity() bool {
	if o != nil && o.Identity != nil {
		return true
	}

	return false
}

// SetIdentity gets a reference to the given AdDomainIdentity and assigns it to the Identity field.
func (o *AdDomain) SetIdentity(v AdDomainIdentity) {
	o.Identity = &v
}

// GetNetbiosName returns the NetbiosName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomain) GetNetbiosName() string {
	if o == nil || o.NetbiosName.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetbiosName.Get()
}

// GetNetbiosNameOk returns a tuple with the NetbiosName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomain) GetNetbiosNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetbiosName.Get(), o.NetbiosName.IsSet()
}

// HasNetbiosName returns a boolean if a field has been set.
func (o *AdDomain) HasNetbiosName() bool {
	if o != nil && o.NetbiosName.IsSet() {
		return true
	}

	return false
}

// SetNetbiosName gets a reference to the given NullableString and assigns it to the NetbiosName field.
func (o *AdDomain) SetNetbiosName(v string) {
	o.NetbiosName.Set(&v)
}
// SetNetbiosNameNil sets the value for NetbiosName to be an explicit nil
func (o *AdDomain) SetNetbiosNameNil() {
	o.NetbiosName.Set(nil)
}

// UnsetNetbiosName ensures that no value is present for NetbiosName, not even an explicit nil
func (o *AdDomain) UnsetNetbiosName() {
	o.NetbiosName.Unset()
}

// GetParentDomain returns the ParentDomain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomain) GetParentDomain() string {
	if o == nil || o.ParentDomain.Get() == nil {
		var ret string
		return ret
	}
	return *o.ParentDomain.Get()
}

// GetParentDomainOk returns a tuple with the ParentDomain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomain) GetParentDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ParentDomain.Get(), o.ParentDomain.IsSet()
}

// HasParentDomain returns a boolean if a field has been set.
func (o *AdDomain) HasParentDomain() bool {
	if o != nil && o.ParentDomain.IsSet() {
		return true
	}

	return false
}

// SetParentDomain gets a reference to the given NullableString and assigns it to the ParentDomain field.
func (o *AdDomain) SetParentDomain(v string) {
	o.ParentDomain.Set(&v)
}
// SetParentDomainNil sets the value for ParentDomain to be an explicit nil
func (o *AdDomain) SetParentDomainNil() {
	o.ParentDomain.Set(nil)
}

// UnsetParentDomain ensures that no value is present for ParentDomain, not even an explicit nil
func (o *AdDomain) UnsetParentDomain() {
	o.ParentDomain.Unset()
}

// GetTombstoneDays returns the TombstoneDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AdDomain) GetTombstoneDays() int32 {
	if o == nil || o.TombstoneDays.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TombstoneDays.Get()
}

// GetTombstoneDaysOk returns a tuple with the TombstoneDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AdDomain) GetTombstoneDaysOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TombstoneDays.Get(), o.TombstoneDays.IsSet()
}

// HasTombstoneDays returns a boolean if a field has been set.
func (o *AdDomain) HasTombstoneDays() bool {
	if o != nil && o.TombstoneDays.IsSet() {
		return true
	}

	return false
}

// SetTombstoneDays gets a reference to the given NullableInt32 and assigns it to the TombstoneDays field.
func (o *AdDomain) SetTombstoneDays(v int32) {
	o.TombstoneDays.Set(&v)
}
// SetTombstoneDaysNil sets the value for TombstoneDays to be an explicit nil
func (o *AdDomain) SetTombstoneDaysNil() {
	o.TombstoneDays.Set(nil)
}

// UnsetTombstoneDays ensures that no value is present for TombstoneDays, not even an explicit nil
func (o *AdDomain) UnsetTombstoneDays() {
	o.TombstoneDays.Unset()
}

func (o AdDomain) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DnsRoot.IsSet() {
		toSerialize["dnsRoot"] = o.DnsRoot.Get()
	}
	if o.Forest.IsSet() {
		toSerialize["forest"] = o.Forest.Get()
	}
	if o.Identity != nil {
		toSerialize["identity"] = o.Identity
	}
	if o.NetbiosName.IsSet() {
		toSerialize["netbiosName"] = o.NetbiosName.Get()
	}
	if o.ParentDomain.IsSet() {
		toSerialize["parentDomain"] = o.ParentDomain.Get()
	}
	if o.TombstoneDays.IsSet() {
		toSerialize["tombstoneDays"] = o.TombstoneDays.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAdDomain struct {
	value *AdDomain
	isSet bool
}

func (v NullableAdDomain) Get() *AdDomain {
	return v.value
}

func (v *NullableAdDomain) Set(val *AdDomain) {
	v.value = val
	v.isSet = true
}

func (v NullableAdDomain) IsSet() bool {
	return v.isSet
}

func (v *NullableAdDomain) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdDomain(val *AdDomain) *NullableAdDomain {
	return &NullableAdDomain{value: val, isSet: true}
}

func (v NullableAdDomain) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdDomain) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


