/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RemoteScriptPathAndParams Specifies the path to the remote script and any parameters expected by the remote script.
type RemoteScriptPathAndParams struct {
	// Specifies if the script needs to continue even if there is an occurence of an error. If this flag is set to true, then backup job will start even if the pre backup script fails. Applicable only for pre backup scripts.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies if the script is active. If set to false, this script will not be executed even if it is part of the backup job.
	IsActive NullableBool `json:"isActive,omitempty"`
	// Specifies the parameters and values to pass into the remote script. For example if the script expects values for the 'database' and 'user' parameters, specify the parameters and values using the following string: \"database=myDatabase user=me\".
	ScriptParams NullableString `json:"scriptParams,omitempty"`
	// Specifies the path to the script on the remote host.
	ScriptPath NullableString `json:"scriptPath,omitempty"`
	// Specifies the timeout of the script in seconds. The script will be killed if it exceeds this value. If the value of the field is '-1' then timeout is not set for the script.
	TimeoutSecs NullableInt32 `json:"timeoutSecs,omitempty"`
}

// NewRemoteScriptPathAndParams instantiates a new RemoteScriptPathAndParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteScriptPathAndParams() *RemoteScriptPathAndParams {
	this := RemoteScriptPathAndParams{}
	return &this
}

// NewRemoteScriptPathAndParamsWithDefaults instantiates a new RemoteScriptPathAndParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteScriptPathAndParamsWithDefaults() *RemoteScriptPathAndParams {
	this := RemoteScriptPathAndParams{}
	return &this
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteScriptPathAndParams) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteScriptPathAndParams) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *RemoteScriptPathAndParams) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *RemoteScriptPathAndParams) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *RemoteScriptPathAndParams) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *RemoteScriptPathAndParams) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetIsActive returns the IsActive field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteScriptPathAndParams) GetIsActive() bool {
	if o == nil || o.IsActive.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsActive.Get()
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteScriptPathAndParams) GetIsActiveOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsActive.Get(), o.IsActive.IsSet()
}

// HasIsActive returns a boolean if a field has been set.
func (o *RemoteScriptPathAndParams) HasIsActive() bool {
	if o != nil && o.IsActive.IsSet() {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given NullableBool and assigns it to the IsActive field.
func (o *RemoteScriptPathAndParams) SetIsActive(v bool) {
	o.IsActive.Set(&v)
}
// SetIsActiveNil sets the value for IsActive to be an explicit nil
func (o *RemoteScriptPathAndParams) SetIsActiveNil() {
	o.IsActive.Set(nil)
}

// UnsetIsActive ensures that no value is present for IsActive, not even an explicit nil
func (o *RemoteScriptPathAndParams) UnsetIsActive() {
	o.IsActive.Unset()
}

// GetScriptParams returns the ScriptParams field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteScriptPathAndParams) GetScriptParams() string {
	if o == nil || o.ScriptParams.Get() == nil {
		var ret string
		return ret
	}
	return *o.ScriptParams.Get()
}

// GetScriptParamsOk returns a tuple with the ScriptParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteScriptPathAndParams) GetScriptParamsOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ScriptParams.Get(), o.ScriptParams.IsSet()
}

// HasScriptParams returns a boolean if a field has been set.
func (o *RemoteScriptPathAndParams) HasScriptParams() bool {
	if o != nil && o.ScriptParams.IsSet() {
		return true
	}

	return false
}

// SetScriptParams gets a reference to the given NullableString and assigns it to the ScriptParams field.
func (o *RemoteScriptPathAndParams) SetScriptParams(v string) {
	o.ScriptParams.Set(&v)
}
// SetScriptParamsNil sets the value for ScriptParams to be an explicit nil
func (o *RemoteScriptPathAndParams) SetScriptParamsNil() {
	o.ScriptParams.Set(nil)
}

// UnsetScriptParams ensures that no value is present for ScriptParams, not even an explicit nil
func (o *RemoteScriptPathAndParams) UnsetScriptParams() {
	o.ScriptParams.Unset()
}

// GetScriptPath returns the ScriptPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteScriptPathAndParams) GetScriptPath() string {
	if o == nil || o.ScriptPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ScriptPath.Get()
}

// GetScriptPathOk returns a tuple with the ScriptPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteScriptPathAndParams) GetScriptPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ScriptPath.Get(), o.ScriptPath.IsSet()
}

// HasScriptPath returns a boolean if a field has been set.
func (o *RemoteScriptPathAndParams) HasScriptPath() bool {
	if o != nil && o.ScriptPath.IsSet() {
		return true
	}

	return false
}

// SetScriptPath gets a reference to the given NullableString and assigns it to the ScriptPath field.
func (o *RemoteScriptPathAndParams) SetScriptPath(v string) {
	o.ScriptPath.Set(&v)
}
// SetScriptPathNil sets the value for ScriptPath to be an explicit nil
func (o *RemoteScriptPathAndParams) SetScriptPathNil() {
	o.ScriptPath.Set(nil)
}

// UnsetScriptPath ensures that no value is present for ScriptPath, not even an explicit nil
func (o *RemoteScriptPathAndParams) UnsetScriptPath() {
	o.ScriptPath.Unset()
}

// GetTimeoutSecs returns the TimeoutSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteScriptPathAndParams) GetTimeoutSecs() int32 {
	if o == nil || o.TimeoutSecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TimeoutSecs.Get()
}

// GetTimeoutSecsOk returns a tuple with the TimeoutSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteScriptPathAndParams) GetTimeoutSecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimeoutSecs.Get(), o.TimeoutSecs.IsSet()
}

// HasTimeoutSecs returns a boolean if a field has been set.
func (o *RemoteScriptPathAndParams) HasTimeoutSecs() bool {
	if o != nil && o.TimeoutSecs.IsSet() {
		return true
	}

	return false
}

// SetTimeoutSecs gets a reference to the given NullableInt32 and assigns it to the TimeoutSecs field.
func (o *RemoteScriptPathAndParams) SetTimeoutSecs(v int32) {
	o.TimeoutSecs.Set(&v)
}
// SetTimeoutSecsNil sets the value for TimeoutSecs to be an explicit nil
func (o *RemoteScriptPathAndParams) SetTimeoutSecsNil() {
	o.TimeoutSecs.Set(nil)
}

// UnsetTimeoutSecs ensures that no value is present for TimeoutSecs, not even an explicit nil
func (o *RemoteScriptPathAndParams) UnsetTimeoutSecs() {
	o.TimeoutSecs.Unset()
}

func (o RemoteScriptPathAndParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.IsActive.IsSet() {
		toSerialize["isActive"] = o.IsActive.Get()
	}
	if o.ScriptParams.IsSet() {
		toSerialize["scriptParams"] = o.ScriptParams.Get()
	}
	if o.ScriptPath.IsSet() {
		toSerialize["scriptPath"] = o.ScriptPath.Get()
	}
	if o.TimeoutSecs.IsSet() {
		toSerialize["timeoutSecs"] = o.TimeoutSecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteScriptPathAndParams struct {
	value *RemoteScriptPathAndParams
	isSet bool
}

func (v NullableRemoteScriptPathAndParams) Get() *RemoteScriptPathAndParams {
	return v.value
}

func (v *NullableRemoteScriptPathAndParams) Set(val *RemoteScriptPathAndParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteScriptPathAndParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteScriptPathAndParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteScriptPathAndParams(val *RemoteScriptPathAndParams) *NullableRemoteScriptPathAndParams {
	return &NullableRemoteScriptPathAndParams{value: val, isSet: true}
}

func (v NullableRemoteScriptPathAndParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteScriptPathAndParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


