/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VMwareDiskExclusionProto This message contains basic info of the disk to be excluded from backup. The info contained here: 1. should be enough to identify the disk during the backup job. 2. is a subset of the message fetched to be displayed to the end user. Example: entities/vmware.proto. Note: Currently this is only implemented for VMware type source.
type VMwareDiskExclusionProto struct {
	// Controller's bus-id controlling the virtual disk in question.
	ControllerBusNumber NullableInt64 `json:"controllerBusNumber,omitempty"`
	// Controller's type (SCSI, IDE etc).
	ControllerType NullableString `json:"controllerType,omitempty"`
	// Disk unit number to identify the virtual disk within a controller.
	UnitNumber NullableInt64 `json:"unitNumber,omitempty"`
}

// NewVMwareDiskExclusionProto instantiates a new VMwareDiskExclusionProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVMwareDiskExclusionProto() *VMwareDiskExclusionProto {
	this := VMwareDiskExclusionProto{}
	return &this
}

// NewVMwareDiskExclusionProtoWithDefaults instantiates a new VMwareDiskExclusionProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVMwareDiskExclusionProtoWithDefaults() *VMwareDiskExclusionProto {
	this := VMwareDiskExclusionProto{}
	return &this
}

// GetControllerBusNumber returns the ControllerBusNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareDiskExclusionProto) GetControllerBusNumber() int64 {
	if o == nil || o.ControllerBusNumber.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ControllerBusNumber.Get()
}

// GetControllerBusNumberOk returns a tuple with the ControllerBusNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareDiskExclusionProto) GetControllerBusNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ControllerBusNumber.Get(), o.ControllerBusNumber.IsSet()
}

// HasControllerBusNumber returns a boolean if a field has been set.
func (o *VMwareDiskExclusionProto) HasControllerBusNumber() bool {
	if o != nil && o.ControllerBusNumber.IsSet() {
		return true
	}

	return false
}

// SetControllerBusNumber gets a reference to the given NullableInt64 and assigns it to the ControllerBusNumber field.
func (o *VMwareDiskExclusionProto) SetControllerBusNumber(v int64) {
	o.ControllerBusNumber.Set(&v)
}
// SetControllerBusNumberNil sets the value for ControllerBusNumber to be an explicit nil
func (o *VMwareDiskExclusionProto) SetControllerBusNumberNil() {
	o.ControllerBusNumber.Set(nil)
}

// UnsetControllerBusNumber ensures that no value is present for ControllerBusNumber, not even an explicit nil
func (o *VMwareDiskExclusionProto) UnsetControllerBusNumber() {
	o.ControllerBusNumber.Unset()
}

// GetControllerType returns the ControllerType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareDiskExclusionProto) GetControllerType() string {
	if o == nil || o.ControllerType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ControllerType.Get()
}

// GetControllerTypeOk returns a tuple with the ControllerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareDiskExclusionProto) GetControllerTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ControllerType.Get(), o.ControllerType.IsSet()
}

// HasControllerType returns a boolean if a field has been set.
func (o *VMwareDiskExclusionProto) HasControllerType() bool {
	if o != nil && o.ControllerType.IsSet() {
		return true
	}

	return false
}

// SetControllerType gets a reference to the given NullableString and assigns it to the ControllerType field.
func (o *VMwareDiskExclusionProto) SetControllerType(v string) {
	o.ControllerType.Set(&v)
}
// SetControllerTypeNil sets the value for ControllerType to be an explicit nil
func (o *VMwareDiskExclusionProto) SetControllerTypeNil() {
	o.ControllerType.Set(nil)
}

// UnsetControllerType ensures that no value is present for ControllerType, not even an explicit nil
func (o *VMwareDiskExclusionProto) UnsetControllerType() {
	o.ControllerType.Unset()
}

// GetUnitNumber returns the UnitNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VMwareDiskExclusionProto) GetUnitNumber() int64 {
	if o == nil || o.UnitNumber.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UnitNumber.Get()
}

// GetUnitNumberOk returns a tuple with the UnitNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VMwareDiskExclusionProto) GetUnitNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnitNumber.Get(), o.UnitNumber.IsSet()
}

// HasUnitNumber returns a boolean if a field has been set.
func (o *VMwareDiskExclusionProto) HasUnitNumber() bool {
	if o != nil && o.UnitNumber.IsSet() {
		return true
	}

	return false
}

// SetUnitNumber gets a reference to the given NullableInt64 and assigns it to the UnitNumber field.
func (o *VMwareDiskExclusionProto) SetUnitNumber(v int64) {
	o.UnitNumber.Set(&v)
}
// SetUnitNumberNil sets the value for UnitNumber to be an explicit nil
func (o *VMwareDiskExclusionProto) SetUnitNumberNil() {
	o.UnitNumber.Set(nil)
}

// UnsetUnitNumber ensures that no value is present for UnitNumber, not even an explicit nil
func (o *VMwareDiskExclusionProto) UnsetUnitNumber() {
	o.UnitNumber.Unset()
}

func (o VMwareDiskExclusionProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ControllerBusNumber.IsSet() {
		toSerialize["controllerBusNumber"] = o.ControllerBusNumber.Get()
	}
	if o.ControllerType.IsSet() {
		toSerialize["controllerType"] = o.ControllerType.Get()
	}
	if o.UnitNumber.IsSet() {
		toSerialize["unitNumber"] = o.UnitNumber.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVMwareDiskExclusionProto struct {
	value *VMwareDiskExclusionProto
	isSet bool
}

func (v NullableVMwareDiskExclusionProto) Get() *VMwareDiskExclusionProto {
	return v.value
}

func (v *NullableVMwareDiskExclusionProto) Set(val *VMwareDiskExclusionProto) {
	v.value = val
	v.isSet = true
}

func (v NullableVMwareDiskExclusionProto) IsSet() bool {
	return v.isSet
}

func (v *NullableVMwareDiskExclusionProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVMwareDiskExclusionProto(val *VMwareDiskExclusionProto) *NullableVMwareDiskExclusionProto {
	return &NullableVMwareDiskExclusionProto{value: val, isSet: true}
}

func (v NullableVMwareDiskExclusionProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVMwareDiskExclusionProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


