/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FilesystemVolume Specifies information about a filesystem volume.
type FilesystemVolume struct {
	// Array of Disks and Partitions.  Specifies information about all the disks and partitions needed to mount this logical volume.
	Disks []Disk `json:"disks,omitempty"`
	// Specifies a description about the filesystem.
	DisplayName NullableString `json:"displayName,omitempty"`
	// Specifies type of the filesystem on this volume.
	FilesystemType NullableString `json:"filesystemType,omitempty"`
	// Specifies the uuid of the filesystem.
	FilesystemUuid NullableString `json:"filesystemUuid,omitempty"`
	// If true, this is a supported filesystem volume type.
	IsSupported NullableBool `json:"isSupported,omitempty"`
	// Specify attributes for a kLMV (Linux) or kLDM (Windows) filesystem. This field is set only for kLVM and kLDM volume types.
	LogicalVolume NullableLogicalVolume `json:"logicalVolume,omitempty"`
	// Specifies the type of logical volume such as kSimpleVolume, kLVM or kLDM. 'kSimpleVolume' indicates a simple volume. Data can be used by just mounting the only one partition present on the disk. 'kLVM' indicates a logical volume on Linux managed by a Logical Volume Manager. In order to access the data, deviceTree must be created based on the specification in logicalVolume.deviceTree. 'kLDM' indicates a logical volume on Windows managed by Logical Disk Manager.
	LogicalVolumeType NullableString `json:"logicalVolumeType,omitempty"`
	// Specifies the name of the volume such as /C.
	Name NullableString `json:"name,omitempty"`
	// VolumeGuid is the Volume guid. This is populated for kPhysical environments.
	VolumeGuid NullableString `json:"volumeGuid,omitempty"`
}

// NewFilesystemVolume instantiates a new FilesystemVolume object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilesystemVolume() *FilesystemVolume {
	this := FilesystemVolume{}
	return &this
}

// NewFilesystemVolumeWithDefaults instantiates a new FilesystemVolume object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilesystemVolumeWithDefaults() *FilesystemVolume {
	this := FilesystemVolume{}
	return &this
}

// GetDisks returns the Disks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemVolume) GetDisks() []Disk {
	if o == nil  {
		var ret []Disk
		return ret
	}
	return o.Disks
}

// GetDisksOk returns a tuple with the Disks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemVolume) GetDisksOk() (*[]Disk, bool) {
	if o == nil || o.Disks == nil {
		return nil, false
	}
	return &o.Disks, true
}

// HasDisks returns a boolean if a field has been set.
func (o *FilesystemVolume) HasDisks() bool {
	if o != nil && o.Disks != nil {
		return true
	}

	return false
}

// SetDisks gets a reference to the given []Disk and assigns it to the Disks field.
func (o *FilesystemVolume) SetDisks(v []Disk) {
	o.Disks = v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemVolume) GetDisplayName() string {
	if o == nil || o.DisplayName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DisplayName.Get()
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemVolume) GetDisplayNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisplayName.Get(), o.DisplayName.IsSet()
}

// HasDisplayName returns a boolean if a field has been set.
func (o *FilesystemVolume) HasDisplayName() bool {
	if o != nil && o.DisplayName.IsSet() {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given NullableString and assigns it to the DisplayName field.
func (o *FilesystemVolume) SetDisplayName(v string) {
	o.DisplayName.Set(&v)
}
// SetDisplayNameNil sets the value for DisplayName to be an explicit nil
func (o *FilesystemVolume) SetDisplayNameNil() {
	o.DisplayName.Set(nil)
}

// UnsetDisplayName ensures that no value is present for DisplayName, not even an explicit nil
func (o *FilesystemVolume) UnsetDisplayName() {
	o.DisplayName.Unset()
}

// GetFilesystemType returns the FilesystemType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemVolume) GetFilesystemType() string {
	if o == nil || o.FilesystemType.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilesystemType.Get()
}

// GetFilesystemTypeOk returns a tuple with the FilesystemType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemVolume) GetFilesystemTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilesystemType.Get(), o.FilesystemType.IsSet()
}

// HasFilesystemType returns a boolean if a field has been set.
func (o *FilesystemVolume) HasFilesystemType() bool {
	if o != nil && o.FilesystemType.IsSet() {
		return true
	}

	return false
}

// SetFilesystemType gets a reference to the given NullableString and assigns it to the FilesystemType field.
func (o *FilesystemVolume) SetFilesystemType(v string) {
	o.FilesystemType.Set(&v)
}
// SetFilesystemTypeNil sets the value for FilesystemType to be an explicit nil
func (o *FilesystemVolume) SetFilesystemTypeNil() {
	o.FilesystemType.Set(nil)
}

// UnsetFilesystemType ensures that no value is present for FilesystemType, not even an explicit nil
func (o *FilesystemVolume) UnsetFilesystemType() {
	o.FilesystemType.Unset()
}

// GetFilesystemUuid returns the FilesystemUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemVolume) GetFilesystemUuid() string {
	if o == nil || o.FilesystemUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.FilesystemUuid.Get()
}

// GetFilesystemUuidOk returns a tuple with the FilesystemUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemVolume) GetFilesystemUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FilesystemUuid.Get(), o.FilesystemUuid.IsSet()
}

// HasFilesystemUuid returns a boolean if a field has been set.
func (o *FilesystemVolume) HasFilesystemUuid() bool {
	if o != nil && o.FilesystemUuid.IsSet() {
		return true
	}

	return false
}

// SetFilesystemUuid gets a reference to the given NullableString and assigns it to the FilesystemUuid field.
func (o *FilesystemVolume) SetFilesystemUuid(v string) {
	o.FilesystemUuid.Set(&v)
}
// SetFilesystemUuidNil sets the value for FilesystemUuid to be an explicit nil
func (o *FilesystemVolume) SetFilesystemUuidNil() {
	o.FilesystemUuid.Set(nil)
}

// UnsetFilesystemUuid ensures that no value is present for FilesystemUuid, not even an explicit nil
func (o *FilesystemVolume) UnsetFilesystemUuid() {
	o.FilesystemUuid.Unset()
}

// GetIsSupported returns the IsSupported field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemVolume) GetIsSupported() bool {
	if o == nil || o.IsSupported.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSupported.Get()
}

// GetIsSupportedOk returns a tuple with the IsSupported field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemVolume) GetIsSupportedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSupported.Get(), o.IsSupported.IsSet()
}

// HasIsSupported returns a boolean if a field has been set.
func (o *FilesystemVolume) HasIsSupported() bool {
	if o != nil && o.IsSupported.IsSet() {
		return true
	}

	return false
}

// SetIsSupported gets a reference to the given NullableBool and assigns it to the IsSupported field.
func (o *FilesystemVolume) SetIsSupported(v bool) {
	o.IsSupported.Set(&v)
}
// SetIsSupportedNil sets the value for IsSupported to be an explicit nil
func (o *FilesystemVolume) SetIsSupportedNil() {
	o.IsSupported.Set(nil)
}

// UnsetIsSupported ensures that no value is present for IsSupported, not even an explicit nil
func (o *FilesystemVolume) UnsetIsSupported() {
	o.IsSupported.Unset()
}

// GetLogicalVolume returns the LogicalVolume field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemVolume) GetLogicalVolume() LogicalVolume {
	if o == nil || o.LogicalVolume.Get() == nil {
		var ret LogicalVolume
		return ret
	}
	return *o.LogicalVolume.Get()
}

// GetLogicalVolumeOk returns a tuple with the LogicalVolume field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemVolume) GetLogicalVolumeOk() (*LogicalVolume, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalVolume.Get(), o.LogicalVolume.IsSet()
}

// HasLogicalVolume returns a boolean if a field has been set.
func (o *FilesystemVolume) HasLogicalVolume() bool {
	if o != nil && o.LogicalVolume.IsSet() {
		return true
	}

	return false
}

// SetLogicalVolume gets a reference to the given NullableLogicalVolume and assigns it to the LogicalVolume field.
func (o *FilesystemVolume) SetLogicalVolume(v LogicalVolume) {
	o.LogicalVolume.Set(&v)
}
// SetLogicalVolumeNil sets the value for LogicalVolume to be an explicit nil
func (o *FilesystemVolume) SetLogicalVolumeNil() {
	o.LogicalVolume.Set(nil)
}

// UnsetLogicalVolume ensures that no value is present for LogicalVolume, not even an explicit nil
func (o *FilesystemVolume) UnsetLogicalVolume() {
	o.LogicalVolume.Unset()
}

// GetLogicalVolumeType returns the LogicalVolumeType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemVolume) GetLogicalVolumeType() string {
	if o == nil || o.LogicalVolumeType.Get() == nil {
		var ret string
		return ret
	}
	return *o.LogicalVolumeType.Get()
}

// GetLogicalVolumeTypeOk returns a tuple with the LogicalVolumeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemVolume) GetLogicalVolumeTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalVolumeType.Get(), o.LogicalVolumeType.IsSet()
}

// HasLogicalVolumeType returns a boolean if a field has been set.
func (o *FilesystemVolume) HasLogicalVolumeType() bool {
	if o != nil && o.LogicalVolumeType.IsSet() {
		return true
	}

	return false
}

// SetLogicalVolumeType gets a reference to the given NullableString and assigns it to the LogicalVolumeType field.
func (o *FilesystemVolume) SetLogicalVolumeType(v string) {
	o.LogicalVolumeType.Set(&v)
}
// SetLogicalVolumeTypeNil sets the value for LogicalVolumeType to be an explicit nil
func (o *FilesystemVolume) SetLogicalVolumeTypeNil() {
	o.LogicalVolumeType.Set(nil)
}

// UnsetLogicalVolumeType ensures that no value is present for LogicalVolumeType, not even an explicit nil
func (o *FilesystemVolume) UnsetLogicalVolumeType() {
	o.LogicalVolumeType.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemVolume) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemVolume) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *FilesystemVolume) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *FilesystemVolume) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *FilesystemVolume) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *FilesystemVolume) UnsetName() {
	o.Name.Unset()
}

// GetVolumeGuid returns the VolumeGuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilesystemVolume) GetVolumeGuid() string {
	if o == nil || o.VolumeGuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.VolumeGuid.Get()
}

// GetVolumeGuidOk returns a tuple with the VolumeGuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilesystemVolume) GetVolumeGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VolumeGuid.Get(), o.VolumeGuid.IsSet()
}

// HasVolumeGuid returns a boolean if a field has been set.
func (o *FilesystemVolume) HasVolumeGuid() bool {
	if o != nil && o.VolumeGuid.IsSet() {
		return true
	}

	return false
}

// SetVolumeGuid gets a reference to the given NullableString and assigns it to the VolumeGuid field.
func (o *FilesystemVolume) SetVolumeGuid(v string) {
	o.VolumeGuid.Set(&v)
}
// SetVolumeGuidNil sets the value for VolumeGuid to be an explicit nil
func (o *FilesystemVolume) SetVolumeGuidNil() {
	o.VolumeGuid.Set(nil)
}

// UnsetVolumeGuid ensures that no value is present for VolumeGuid, not even an explicit nil
func (o *FilesystemVolume) UnsetVolumeGuid() {
	o.VolumeGuid.Unset()
}

func (o FilesystemVolume) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Disks != nil {
		toSerialize["disks"] = o.Disks
	}
	if o.DisplayName.IsSet() {
		toSerialize["displayName"] = o.DisplayName.Get()
	}
	if o.FilesystemType.IsSet() {
		toSerialize["filesystemType"] = o.FilesystemType.Get()
	}
	if o.FilesystemUuid.IsSet() {
		toSerialize["filesystemUuid"] = o.FilesystemUuid.Get()
	}
	if o.IsSupported.IsSet() {
		toSerialize["isSupported"] = o.IsSupported.Get()
	}
	if o.LogicalVolume.IsSet() {
		toSerialize["logicalVolume"] = o.LogicalVolume.Get()
	}
	if o.LogicalVolumeType.IsSet() {
		toSerialize["logicalVolumeType"] = o.LogicalVolumeType.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.VolumeGuid.IsSet() {
		toSerialize["volumeGuid"] = o.VolumeGuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFilesystemVolume struct {
	value *FilesystemVolume
	isSet bool
}

func (v NullableFilesystemVolume) Get() *FilesystemVolume {
	return v.value
}

func (v *NullableFilesystemVolume) Set(val *FilesystemVolume) {
	v.value = val
	v.isSet = true
}

func (v NullableFilesystemVolume) IsSet() bool {
	return v.isSet
}

func (v *NullableFilesystemVolume) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilesystemVolume(val *FilesystemVolume) *NullableFilesystemVolume {
	return &NullableFilesystemVolume{value: val, isSet: true}
}

func (v NullableFilesystemVolume) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilesystemVolume) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


