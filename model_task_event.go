/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TaskEvent Specifies events that clients can attach to a task.
type TaskEvent struct {
	// Specifies the message associated with an event.
	EventMessage NullableString `json:"eventMessage,omitempty"`
	// Specifies the completion percentage of the task attached to this event.
	PercentFinished NullableFloat32 `json:"percentFinished,omitempty"`
	// Specifies the amount of work remaining for the task attached to this event.
	RemainingWorkCount NullableInt64 `json:"remainingWorkCount,omitempty"`
	// Specifies the Unix timestamp that the event occurred.
	TimestampSeconds NullableInt64 `json:"timestampSeconds,omitempty"`
}

// NewTaskEvent instantiates a new TaskEvent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskEvent() *TaskEvent {
	this := TaskEvent{}
	return &this
}

// NewTaskEventWithDefaults instantiates a new TaskEvent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskEventWithDefaults() *TaskEvent {
	this := TaskEvent{}
	return &this
}

// GetEventMessage returns the EventMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskEvent) GetEventMessage() string {
	if o == nil || o.EventMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.EventMessage.Get()
}

// GetEventMessageOk returns a tuple with the EventMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskEvent) GetEventMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EventMessage.Get(), o.EventMessage.IsSet()
}

// HasEventMessage returns a boolean if a field has been set.
func (o *TaskEvent) HasEventMessage() bool {
	if o != nil && o.EventMessage.IsSet() {
		return true
	}

	return false
}

// SetEventMessage gets a reference to the given NullableString and assigns it to the EventMessage field.
func (o *TaskEvent) SetEventMessage(v string) {
	o.EventMessage.Set(&v)
}
// SetEventMessageNil sets the value for EventMessage to be an explicit nil
func (o *TaskEvent) SetEventMessageNil() {
	o.EventMessage.Set(nil)
}

// UnsetEventMessage ensures that no value is present for EventMessage, not even an explicit nil
func (o *TaskEvent) UnsetEventMessage() {
	o.EventMessage.Unset()
}

// GetPercentFinished returns the PercentFinished field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskEvent) GetPercentFinished() float32 {
	if o == nil || o.PercentFinished.Get() == nil {
		var ret float32
		return ret
	}
	return *o.PercentFinished.Get()
}

// GetPercentFinishedOk returns a tuple with the PercentFinished field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskEvent) GetPercentFinishedOk() (*float32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PercentFinished.Get(), o.PercentFinished.IsSet()
}

// HasPercentFinished returns a boolean if a field has been set.
func (o *TaskEvent) HasPercentFinished() bool {
	if o != nil && o.PercentFinished.IsSet() {
		return true
	}

	return false
}

// SetPercentFinished gets a reference to the given NullableFloat32 and assigns it to the PercentFinished field.
func (o *TaskEvent) SetPercentFinished(v float32) {
	o.PercentFinished.Set(&v)
}
// SetPercentFinishedNil sets the value for PercentFinished to be an explicit nil
func (o *TaskEvent) SetPercentFinishedNil() {
	o.PercentFinished.Set(nil)
}

// UnsetPercentFinished ensures that no value is present for PercentFinished, not even an explicit nil
func (o *TaskEvent) UnsetPercentFinished() {
	o.PercentFinished.Unset()
}

// GetRemainingWorkCount returns the RemainingWorkCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskEvent) GetRemainingWorkCount() int64 {
	if o == nil || o.RemainingWorkCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RemainingWorkCount.Get()
}

// GetRemainingWorkCountOk returns a tuple with the RemainingWorkCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskEvent) GetRemainingWorkCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RemainingWorkCount.Get(), o.RemainingWorkCount.IsSet()
}

// HasRemainingWorkCount returns a boolean if a field has been set.
func (o *TaskEvent) HasRemainingWorkCount() bool {
	if o != nil && o.RemainingWorkCount.IsSet() {
		return true
	}

	return false
}

// SetRemainingWorkCount gets a reference to the given NullableInt64 and assigns it to the RemainingWorkCount field.
func (o *TaskEvent) SetRemainingWorkCount(v int64) {
	o.RemainingWorkCount.Set(&v)
}
// SetRemainingWorkCountNil sets the value for RemainingWorkCount to be an explicit nil
func (o *TaskEvent) SetRemainingWorkCountNil() {
	o.RemainingWorkCount.Set(nil)
}

// UnsetRemainingWorkCount ensures that no value is present for RemainingWorkCount, not even an explicit nil
func (o *TaskEvent) UnsetRemainingWorkCount() {
	o.RemainingWorkCount.Unset()
}

// GetTimestampSeconds returns the TimestampSeconds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TaskEvent) GetTimestampSeconds() int64 {
	if o == nil || o.TimestampSeconds.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TimestampSeconds.Get()
}

// GetTimestampSecondsOk returns a tuple with the TimestampSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TaskEvent) GetTimestampSecondsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimestampSeconds.Get(), o.TimestampSeconds.IsSet()
}

// HasTimestampSeconds returns a boolean if a field has been set.
func (o *TaskEvent) HasTimestampSeconds() bool {
	if o != nil && o.TimestampSeconds.IsSet() {
		return true
	}

	return false
}

// SetTimestampSeconds gets a reference to the given NullableInt64 and assigns it to the TimestampSeconds field.
func (o *TaskEvent) SetTimestampSeconds(v int64) {
	o.TimestampSeconds.Set(&v)
}
// SetTimestampSecondsNil sets the value for TimestampSeconds to be an explicit nil
func (o *TaskEvent) SetTimestampSecondsNil() {
	o.TimestampSeconds.Set(nil)
}

// UnsetTimestampSeconds ensures that no value is present for TimestampSeconds, not even an explicit nil
func (o *TaskEvent) UnsetTimestampSeconds() {
	o.TimestampSeconds.Unset()
}

func (o TaskEvent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EventMessage.IsSet() {
		toSerialize["eventMessage"] = o.EventMessage.Get()
	}
	if o.PercentFinished.IsSet() {
		toSerialize["percentFinished"] = o.PercentFinished.Get()
	}
	if o.RemainingWorkCount.IsSet() {
		toSerialize["remainingWorkCount"] = o.RemainingWorkCount.Get()
	}
	if o.TimestampSeconds.IsSet() {
		toSerialize["timestampSeconds"] = o.TimestampSeconds.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTaskEvent struct {
	value *TaskEvent
	isSet bool
}

func (v NullableTaskEvent) Get() *TaskEvent {
	return v.value
}

func (v *NullableTaskEvent) Set(val *TaskEvent) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskEvent(val *TaskEvent) *NullableTaskEvent {
	return &NullableTaskEvent{value: val, isSet: true}
}

func (v NullableTaskEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


