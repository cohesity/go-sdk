/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NodeStatus Specifies the status of each node in the cluster being created.
type NodeStatus struct {
	// Specifies an optional message relating to the node status.
	ErrorMessage NullableString `json:"errorMessage,omitempty"`
	// Specifies the IPMI IP of the node (if physical cluster).
	IpmiIp NullableString `json:"ipmiIp,omitempty"`
	// Specifies the ID of the node.
	NodeId NullableInt64 `json:"nodeId,omitempty"`
	// For physical nodes this will specify the IP address of the node.
	NodeIp NullableString `json:"nodeIp,omitempty"`
}

// NewNodeStatus instantiates a new NodeStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNodeStatus() *NodeStatus {
	this := NodeStatus{}
	return &this
}

// NewNodeStatusWithDefaults instantiates a new NodeStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNodeStatusWithDefaults() *NodeStatus {
	this := NodeStatus{}
	return &this
}

// GetErrorMessage returns the ErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatus) GetErrorMessage() string {
	if o == nil || o.ErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.ErrorMessage.Get()
}

// GetErrorMessageOk returns a tuple with the ErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatus) GetErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ErrorMessage.Get(), o.ErrorMessage.IsSet()
}

// HasErrorMessage returns a boolean if a field has been set.
func (o *NodeStatus) HasErrorMessage() bool {
	if o != nil && o.ErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetErrorMessage gets a reference to the given NullableString and assigns it to the ErrorMessage field.
func (o *NodeStatus) SetErrorMessage(v string) {
	o.ErrorMessage.Set(&v)
}
// SetErrorMessageNil sets the value for ErrorMessage to be an explicit nil
func (o *NodeStatus) SetErrorMessageNil() {
	o.ErrorMessage.Set(nil)
}

// UnsetErrorMessage ensures that no value is present for ErrorMessage, not even an explicit nil
func (o *NodeStatus) UnsetErrorMessage() {
	o.ErrorMessage.Unset()
}

// GetIpmiIp returns the IpmiIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatus) GetIpmiIp() string {
	if o == nil || o.IpmiIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpmiIp.Get()
}

// GetIpmiIpOk returns a tuple with the IpmiIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatus) GetIpmiIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpmiIp.Get(), o.IpmiIp.IsSet()
}

// HasIpmiIp returns a boolean if a field has been set.
func (o *NodeStatus) HasIpmiIp() bool {
	if o != nil && o.IpmiIp.IsSet() {
		return true
	}

	return false
}

// SetIpmiIp gets a reference to the given NullableString and assigns it to the IpmiIp field.
func (o *NodeStatus) SetIpmiIp(v string) {
	o.IpmiIp.Set(&v)
}
// SetIpmiIpNil sets the value for IpmiIp to be an explicit nil
func (o *NodeStatus) SetIpmiIpNil() {
	o.IpmiIp.Set(nil)
}

// UnsetIpmiIp ensures that no value is present for IpmiIp, not even an explicit nil
func (o *NodeStatus) UnsetIpmiIp() {
	o.IpmiIp.Unset()
}

// GetNodeId returns the NodeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatus) GetNodeId() int64 {
	if o == nil || o.NodeId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NodeId.Get()
}

// GetNodeIdOk returns a tuple with the NodeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatus) GetNodeIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeId.Get(), o.NodeId.IsSet()
}

// HasNodeId returns a boolean if a field has been set.
func (o *NodeStatus) HasNodeId() bool {
	if o != nil && o.NodeId.IsSet() {
		return true
	}

	return false
}

// SetNodeId gets a reference to the given NullableInt64 and assigns it to the NodeId field.
func (o *NodeStatus) SetNodeId(v int64) {
	o.NodeId.Set(&v)
}
// SetNodeIdNil sets the value for NodeId to be an explicit nil
func (o *NodeStatus) SetNodeIdNil() {
	o.NodeId.Set(nil)
}

// UnsetNodeId ensures that no value is present for NodeId, not even an explicit nil
func (o *NodeStatus) UnsetNodeId() {
	o.NodeId.Unset()
}

// GetNodeIp returns the NodeIp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NodeStatus) GetNodeIp() string {
	if o == nil || o.NodeIp.Get() == nil {
		var ret string
		return ret
	}
	return *o.NodeIp.Get()
}

// GetNodeIpOk returns a tuple with the NodeIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NodeStatus) GetNodeIpOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NodeIp.Get(), o.NodeIp.IsSet()
}

// HasNodeIp returns a boolean if a field has been set.
func (o *NodeStatus) HasNodeIp() bool {
	if o != nil && o.NodeIp.IsSet() {
		return true
	}

	return false
}

// SetNodeIp gets a reference to the given NullableString and assigns it to the NodeIp field.
func (o *NodeStatus) SetNodeIp(v string) {
	o.NodeIp.Set(&v)
}
// SetNodeIpNil sets the value for NodeIp to be an explicit nil
func (o *NodeStatus) SetNodeIpNil() {
	o.NodeIp.Set(nil)
}

// UnsetNodeIp ensures that no value is present for NodeIp, not even an explicit nil
func (o *NodeStatus) UnsetNodeIp() {
	o.NodeIp.Unset()
}

func (o NodeStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ErrorMessage.IsSet() {
		toSerialize["errorMessage"] = o.ErrorMessage.Get()
	}
	if o.IpmiIp.IsSet() {
		toSerialize["ipmiIp"] = o.IpmiIp.Get()
	}
	if o.NodeId.IsSet() {
		toSerialize["nodeId"] = o.NodeId.Get()
	}
	if o.NodeIp.IsSet() {
		toSerialize["nodeIp"] = o.NodeIp.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNodeStatus struct {
	value *NodeStatus
	isSet bool
}

func (v NullableNodeStatus) Get() *NodeStatus {
	return v.value
}

func (v *NullableNodeStatus) Set(val *NodeStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNodeStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNodeStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNodeStatus(val *NodeStatus) *NullableNodeStatus {
	return &NullableNodeStatus{value: val, isSet: true}
}

func (v NullableNodeStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNodeStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


