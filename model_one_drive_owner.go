/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OneDriveOwner Specifies OneDrive owner details.
type OneDriveOwner struct {
	// Specifies the Drives that a user owns which are to be restored.
	DriveInfoList []OneDriveInfo `json:"driveInfoList,omitempty"`
	UserDetailObject *RestoreObjectDetails `json:"userDetailObject,omitempty"`
}

// NewOneDriveOwner instantiates a new OneDriveOwner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOneDriveOwner() *OneDriveOwner {
	this := OneDriveOwner{}
	return &this
}

// NewOneDriveOwnerWithDefaults instantiates a new OneDriveOwner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOneDriveOwnerWithDefaults() *OneDriveOwner {
	this := OneDriveOwner{}
	return &this
}

// GetDriveInfoList returns the DriveInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveOwner) GetDriveInfoList() []OneDriveInfo {
	if o == nil  {
		var ret []OneDriveInfo
		return ret
	}
	return o.DriveInfoList
}

// GetDriveInfoListOk returns a tuple with the DriveInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveOwner) GetDriveInfoListOk() (*[]OneDriveInfo, bool) {
	if o == nil || o.DriveInfoList == nil {
		return nil, false
	}
	return &o.DriveInfoList, true
}

// HasDriveInfoList returns a boolean if a field has been set.
func (o *OneDriveOwner) HasDriveInfoList() bool {
	if o != nil && o.DriveInfoList != nil {
		return true
	}

	return false
}

// SetDriveInfoList gets a reference to the given []OneDriveInfo and assigns it to the DriveInfoList field.
func (o *OneDriveOwner) SetDriveInfoList(v []OneDriveInfo) {
	o.DriveInfoList = v
}

// GetUserDetailObject returns the UserDetailObject field value if set, zero value otherwise.
func (o *OneDriveOwner) GetUserDetailObject() RestoreObjectDetails {
	if o == nil || o.UserDetailObject == nil {
		var ret RestoreObjectDetails
		return ret
	}
	return *o.UserDetailObject
}

// GetUserDetailObjectOk returns a tuple with the UserDetailObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OneDriveOwner) GetUserDetailObjectOk() (*RestoreObjectDetails, bool) {
	if o == nil || o.UserDetailObject == nil {
		return nil, false
	}
	return o.UserDetailObject, true
}

// HasUserDetailObject returns a boolean if a field has been set.
func (o *OneDriveOwner) HasUserDetailObject() bool {
	if o != nil && o.UserDetailObject != nil {
		return true
	}

	return false
}

// SetUserDetailObject gets a reference to the given RestoreObjectDetails and assigns it to the UserDetailObject field.
func (o *OneDriveOwner) SetUserDetailObject(v RestoreObjectDetails) {
	o.UserDetailObject = &v
}

func (o OneDriveOwner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DriveInfoList != nil {
		toSerialize["driveInfoList"] = o.DriveInfoList
	}
	if o.UserDetailObject != nil {
		toSerialize["userDetailObject"] = o.UserDetailObject
	}
	return json.Marshal(toSerialize)
}

type NullableOneDriveOwner struct {
	value *OneDriveOwner
	isSet bool
}

func (v NullableOneDriveOwner) Get() *OneDriveOwner {
	return v.value
}

func (v *NullableOneDriveOwner) Set(val *OneDriveOwner) {
	v.value = val
	v.isSet = true
}

func (v NullableOneDriveOwner) IsSet() bool {
	return v.isSet
}

func (v *NullableOneDriveOwner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneDriveOwner(val *OneDriveOwner) *NullableOneDriveOwner {
	return &NullableOneDriveOwner{value: val, isSet: true}
}

func (v NullableOneDriveOwner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneDriveOwner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


