/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DiskBlock Specifies a contiguous block by defining an offset and length of the block.
type DiskBlock struct {
	// Specifies the length of the block in bytes.
	LengthBytes NullableInt64 `json:"lengthBytes,omitempty"`
	// Specifies the offset of the block (in bytes) from the beginning of the containing object such as a physical disk or a virtual disk file.
	OffsetBytes NullableInt64 `json:"offsetBytes,omitempty"`
}

// NewDiskBlock instantiates a new DiskBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDiskBlock() *DiskBlock {
	this := DiskBlock{}
	return &this
}

// NewDiskBlockWithDefaults instantiates a new DiskBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDiskBlockWithDefaults() *DiskBlock {
	this := DiskBlock{}
	return &this
}

// GetLengthBytes returns the LengthBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskBlock) GetLengthBytes() int64 {
	if o == nil || o.LengthBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LengthBytes.Get()
}

// GetLengthBytesOk returns a tuple with the LengthBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskBlock) GetLengthBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LengthBytes.Get(), o.LengthBytes.IsSet()
}

// HasLengthBytes returns a boolean if a field has been set.
func (o *DiskBlock) HasLengthBytes() bool {
	if o != nil && o.LengthBytes.IsSet() {
		return true
	}

	return false
}

// SetLengthBytes gets a reference to the given NullableInt64 and assigns it to the LengthBytes field.
func (o *DiskBlock) SetLengthBytes(v int64) {
	o.LengthBytes.Set(&v)
}
// SetLengthBytesNil sets the value for LengthBytes to be an explicit nil
func (o *DiskBlock) SetLengthBytesNil() {
	o.LengthBytes.Set(nil)
}

// UnsetLengthBytes ensures that no value is present for LengthBytes, not even an explicit nil
func (o *DiskBlock) UnsetLengthBytes() {
	o.LengthBytes.Unset()
}

// GetOffsetBytes returns the OffsetBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DiskBlock) GetOffsetBytes() int64 {
	if o == nil || o.OffsetBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.OffsetBytes.Get()
}

// GetOffsetBytesOk returns a tuple with the OffsetBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DiskBlock) GetOffsetBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OffsetBytes.Get(), o.OffsetBytes.IsSet()
}

// HasOffsetBytes returns a boolean if a field has been set.
func (o *DiskBlock) HasOffsetBytes() bool {
	if o != nil && o.OffsetBytes.IsSet() {
		return true
	}

	return false
}

// SetOffsetBytes gets a reference to the given NullableInt64 and assigns it to the OffsetBytes field.
func (o *DiskBlock) SetOffsetBytes(v int64) {
	o.OffsetBytes.Set(&v)
}
// SetOffsetBytesNil sets the value for OffsetBytes to be an explicit nil
func (o *DiskBlock) SetOffsetBytesNil() {
	o.OffsetBytes.Set(nil)
}

// UnsetOffsetBytes ensures that no value is present for OffsetBytes, not even an explicit nil
func (o *DiskBlock) UnsetOffsetBytes() {
	o.OffsetBytes.Unset()
}

func (o DiskBlock) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LengthBytes.IsSet() {
		toSerialize["lengthBytes"] = o.LengthBytes.Get()
	}
	if o.OffsetBytes.IsSet() {
		toSerialize["offsetBytes"] = o.OffsetBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDiskBlock struct {
	value *DiskBlock
	isSet bool
}

func (v NullableDiskBlock) Get() *DiskBlock {
	return v.value
}

func (v *NullableDiskBlock) Set(val *DiskBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableDiskBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableDiskBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDiskBlock(val *DiskBlock) *NullableDiskBlock {
	return &NullableDiskBlock{value: val, isSet: true}
}

func (v NullableDiskBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDiskBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


