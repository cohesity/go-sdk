/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// GroupDeleteParameters Specifies the groups to delete on the Cohesity Cluster.
type GroupDeleteParameters struct {
	// Specifies the domain associated with the groups to delete. Only groups associated with the same domain can be deleted by a single request. If no domain is specified, the specified groups are deleted from the LOCAL domain on the Cohesity Cluster. If a non-LOCAL domain is specified, the specified groups are deleted on the Cohesity Cluster. However, the referenced group principals on the Active Directory are not deleted.
	Domain NullableString `json:"domain,omitempty"`
	// Array of Groups.  Specifies the list of groups to delete on the Cohesity Cluster. Only groups from the same domain can be deleted by a single request.
	Names []string `json:"names,omitempty"`
}

// NewGroupDeleteParameters instantiates a new GroupDeleteParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGroupDeleteParameters() *GroupDeleteParameters {
	this := GroupDeleteParameters{}
	return &this
}

// NewGroupDeleteParametersWithDefaults instantiates a new GroupDeleteParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGroupDeleteParametersWithDefaults() *GroupDeleteParameters {
	this := GroupDeleteParameters{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupDeleteParameters) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupDeleteParameters) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *GroupDeleteParameters) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *GroupDeleteParameters) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *GroupDeleteParameters) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *GroupDeleteParameters) UnsetDomain() {
	o.Domain.Unset()
}

// GetNames returns the Names field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GroupDeleteParameters) GetNames() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Names
}

// GetNamesOk returns a tuple with the Names field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GroupDeleteParameters) GetNamesOk() (*[]string, bool) {
	if o == nil || o.Names == nil {
		return nil, false
	}
	return &o.Names, true
}

// HasNames returns a boolean if a field has been set.
func (o *GroupDeleteParameters) HasNames() bool {
	if o != nil && o.Names != nil {
		return true
	}

	return false
}

// SetNames gets a reference to the given []string and assigns it to the Names field.
func (o *GroupDeleteParameters) SetNames(v []string) {
	o.Names = v
}

func (o GroupDeleteParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.Names != nil {
		toSerialize["names"] = o.Names
	}
	return json.Marshal(toSerialize)
}

type NullableGroupDeleteParameters struct {
	value *GroupDeleteParameters
	isSet bool
}

func (v NullableGroupDeleteParameters) Get() *GroupDeleteParameters {
	return v.value
}

func (v *NullableGroupDeleteParameters) Set(val *GroupDeleteParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableGroupDeleteParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableGroupDeleteParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGroupDeleteParameters(val *GroupDeleteParameters) *NullableGroupDeleteParameters {
	return &NullableGroupDeleteParameters{value: val, isSet: true}
}

func (v NullableGroupDeleteParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGroupDeleteParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


