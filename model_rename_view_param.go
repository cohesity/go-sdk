/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RenameViewParam Specifies the rename parameters for the view.
type RenameViewParam struct {
	// Specifies the new name of the View.
	NewViewName NullableString `json:"newViewName"`
}

// NewRenameViewParam instantiates a new RenameViewParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRenameViewParam(newViewName NullableString) *RenameViewParam {
	this := RenameViewParam{}
	this.NewViewName = newViewName
	return &this
}

// NewRenameViewParamWithDefaults instantiates a new RenameViewParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRenameViewParamWithDefaults() *RenameViewParam {
	this := RenameViewParam{}
	return &this
}

// GetNewViewName returns the NewViewName field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RenameViewParam) GetNewViewName() string {
	if o == nil || o.NewViewName.Get() == nil {
		var ret string
		return ret
	}

	return *o.NewViewName.Get()
}

// GetNewViewNameOk returns a tuple with the NewViewName field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RenameViewParam) GetNewViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewViewName.Get(), o.NewViewName.IsSet()
}

// SetNewViewName sets field value
func (o *RenameViewParam) SetNewViewName(v string) {
	o.NewViewName.Set(&v)
}

func (o RenameViewParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["newViewName"] = o.NewViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRenameViewParam struct {
	value *RenameViewParam
	isSet bool
}

func (v NullableRenameViewParam) Get() *RenameViewParam {
	return v.value
}

func (v *NullableRenameViewParam) Set(val *RenameViewParam) {
	v.value = val
	v.isSet = true
}

func (v NullableRenameViewParam) IsSet() bool {
	return v.isSet
}

func (v *NullableRenameViewParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRenameViewParam(val *RenameViewParam) *NullableRenameViewParam {
	return &NullableRenameViewParam{value: val, isSet: true}
}

func (v NullableRenameViewParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRenameViewParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


