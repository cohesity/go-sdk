/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// PrivilegeInfo Specifies details about a privilege such as the category, description, name, etc.
type PrivilegeInfo struct {
	// Specifies unique id for a privilege. This number must be unique when creating a new privilege. Type for unique privilege Id values. All below enum values specify a value for all uniquely defined privileges in Cohesity.
	PrivilegeId NullableString `json:"PrivilegeId,omitempty"`
	// Specifies a category for the privilege such as 'Access Management'.
	Category NullableString `json:"category,omitempty"`
	// Specifies a description defining what the privilege provides.
	Description NullableString `json:"description,omitempty"`
	// Specifies that this privilege is available for Helios operations.
	IsAvailableOnHelios NullableBool `json:"isAvailableOnHelios,omitempty"`
	// Specifies if this privilege is automatically assigned to custom roles.
	IsCustomRoleDefault NullableBool `json:"isCustomRoleDefault,omitempty"`
	// Specifies if this privilege is automatically assigned to the default System Admin user called 'admin'. If true, the privilege is NOT assigned to the default System Admin user called 'admin'. By default, privileges are automatically assigned to the default System Admin user called 'admin'.
	IsSpecial NullableBool `json:"isSpecial,omitempty"`
	// Specifies if privilege is view-only privilege that cannot make changes.
	IsViewOnly NullableBool `json:"isViewOnly,omitempty"`
	// Specifies the label for the privilege as displayed on the Cohesity Dashboard such as 'Access Management View'.
	Label NullableString `json:"label,omitempty"`
	// Specifies the Cluster name for the privilege such as PRINCIPAL_VIEW.
	Name NullableString `json:"name,omitempty"`
}

// NewPrivilegeInfo instantiates a new PrivilegeInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrivilegeInfo() *PrivilegeInfo {
	this := PrivilegeInfo{}
	return &this
}

// NewPrivilegeInfoWithDefaults instantiates a new PrivilegeInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPrivilegeInfoWithDefaults() *PrivilegeInfo {
	this := PrivilegeInfo{}
	return &this
}

// GetPrivilegeId returns the PrivilegeId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivilegeInfo) GetPrivilegeId() string {
	if o == nil || o.PrivilegeId.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrivilegeId.Get()
}

// GetPrivilegeIdOk returns a tuple with the PrivilegeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivilegeInfo) GetPrivilegeIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrivilegeId.Get(), o.PrivilegeId.IsSet()
}

// HasPrivilegeId returns a boolean if a field has been set.
func (o *PrivilegeInfo) HasPrivilegeId() bool {
	if o != nil && o.PrivilegeId.IsSet() {
		return true
	}

	return false
}

// SetPrivilegeId gets a reference to the given NullableString and assigns it to the PrivilegeId field.
func (o *PrivilegeInfo) SetPrivilegeId(v string) {
	o.PrivilegeId.Set(&v)
}
// SetPrivilegeIdNil sets the value for PrivilegeId to be an explicit nil
func (o *PrivilegeInfo) SetPrivilegeIdNil() {
	o.PrivilegeId.Set(nil)
}

// UnsetPrivilegeId ensures that no value is present for PrivilegeId, not even an explicit nil
func (o *PrivilegeInfo) UnsetPrivilegeId() {
	o.PrivilegeId.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivilegeInfo) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivilegeInfo) GetCategoryOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *PrivilegeInfo) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *PrivilegeInfo) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *PrivilegeInfo) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *PrivilegeInfo) UnsetCategory() {
	o.Category.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivilegeInfo) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivilegeInfo) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *PrivilegeInfo) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *PrivilegeInfo) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *PrivilegeInfo) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *PrivilegeInfo) UnsetDescription() {
	o.Description.Unset()
}

// GetIsAvailableOnHelios returns the IsAvailableOnHelios field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivilegeInfo) GetIsAvailableOnHelios() bool {
	if o == nil || o.IsAvailableOnHelios.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAvailableOnHelios.Get()
}

// GetIsAvailableOnHeliosOk returns a tuple with the IsAvailableOnHelios field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivilegeInfo) GetIsAvailableOnHeliosOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAvailableOnHelios.Get(), o.IsAvailableOnHelios.IsSet()
}

// HasIsAvailableOnHelios returns a boolean if a field has been set.
func (o *PrivilegeInfo) HasIsAvailableOnHelios() bool {
	if o != nil && o.IsAvailableOnHelios.IsSet() {
		return true
	}

	return false
}

// SetIsAvailableOnHelios gets a reference to the given NullableBool and assigns it to the IsAvailableOnHelios field.
func (o *PrivilegeInfo) SetIsAvailableOnHelios(v bool) {
	o.IsAvailableOnHelios.Set(&v)
}
// SetIsAvailableOnHeliosNil sets the value for IsAvailableOnHelios to be an explicit nil
func (o *PrivilegeInfo) SetIsAvailableOnHeliosNil() {
	o.IsAvailableOnHelios.Set(nil)
}

// UnsetIsAvailableOnHelios ensures that no value is present for IsAvailableOnHelios, not even an explicit nil
func (o *PrivilegeInfo) UnsetIsAvailableOnHelios() {
	o.IsAvailableOnHelios.Unset()
}

// GetIsCustomRoleDefault returns the IsCustomRoleDefault field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivilegeInfo) GetIsCustomRoleDefault() bool {
	if o == nil || o.IsCustomRoleDefault.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsCustomRoleDefault.Get()
}

// GetIsCustomRoleDefaultOk returns a tuple with the IsCustomRoleDefault field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivilegeInfo) GetIsCustomRoleDefaultOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsCustomRoleDefault.Get(), o.IsCustomRoleDefault.IsSet()
}

// HasIsCustomRoleDefault returns a boolean if a field has been set.
func (o *PrivilegeInfo) HasIsCustomRoleDefault() bool {
	if o != nil && o.IsCustomRoleDefault.IsSet() {
		return true
	}

	return false
}

// SetIsCustomRoleDefault gets a reference to the given NullableBool and assigns it to the IsCustomRoleDefault field.
func (o *PrivilegeInfo) SetIsCustomRoleDefault(v bool) {
	o.IsCustomRoleDefault.Set(&v)
}
// SetIsCustomRoleDefaultNil sets the value for IsCustomRoleDefault to be an explicit nil
func (o *PrivilegeInfo) SetIsCustomRoleDefaultNil() {
	o.IsCustomRoleDefault.Set(nil)
}

// UnsetIsCustomRoleDefault ensures that no value is present for IsCustomRoleDefault, not even an explicit nil
func (o *PrivilegeInfo) UnsetIsCustomRoleDefault() {
	o.IsCustomRoleDefault.Unset()
}

// GetIsSpecial returns the IsSpecial field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivilegeInfo) GetIsSpecial() bool {
	if o == nil || o.IsSpecial.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsSpecial.Get()
}

// GetIsSpecialOk returns a tuple with the IsSpecial field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivilegeInfo) GetIsSpecialOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsSpecial.Get(), o.IsSpecial.IsSet()
}

// HasIsSpecial returns a boolean if a field has been set.
func (o *PrivilegeInfo) HasIsSpecial() bool {
	if o != nil && o.IsSpecial.IsSet() {
		return true
	}

	return false
}

// SetIsSpecial gets a reference to the given NullableBool and assigns it to the IsSpecial field.
func (o *PrivilegeInfo) SetIsSpecial(v bool) {
	o.IsSpecial.Set(&v)
}
// SetIsSpecialNil sets the value for IsSpecial to be an explicit nil
func (o *PrivilegeInfo) SetIsSpecialNil() {
	o.IsSpecial.Set(nil)
}

// UnsetIsSpecial ensures that no value is present for IsSpecial, not even an explicit nil
func (o *PrivilegeInfo) UnsetIsSpecial() {
	o.IsSpecial.Unset()
}

// GetIsViewOnly returns the IsViewOnly field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivilegeInfo) GetIsViewOnly() bool {
	if o == nil || o.IsViewOnly.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsViewOnly.Get()
}

// GetIsViewOnlyOk returns a tuple with the IsViewOnly field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivilegeInfo) GetIsViewOnlyOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsViewOnly.Get(), o.IsViewOnly.IsSet()
}

// HasIsViewOnly returns a boolean if a field has been set.
func (o *PrivilegeInfo) HasIsViewOnly() bool {
	if o != nil && o.IsViewOnly.IsSet() {
		return true
	}

	return false
}

// SetIsViewOnly gets a reference to the given NullableBool and assigns it to the IsViewOnly field.
func (o *PrivilegeInfo) SetIsViewOnly(v bool) {
	o.IsViewOnly.Set(&v)
}
// SetIsViewOnlyNil sets the value for IsViewOnly to be an explicit nil
func (o *PrivilegeInfo) SetIsViewOnlyNil() {
	o.IsViewOnly.Set(nil)
}

// UnsetIsViewOnly ensures that no value is present for IsViewOnly, not even an explicit nil
func (o *PrivilegeInfo) UnsetIsViewOnly() {
	o.IsViewOnly.Unset()
}

// GetLabel returns the Label field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivilegeInfo) GetLabel() string {
	if o == nil || o.Label.Get() == nil {
		var ret string
		return ret
	}
	return *o.Label.Get()
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivilegeInfo) GetLabelOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Label.Get(), o.Label.IsSet()
}

// HasLabel returns a boolean if a field has been set.
func (o *PrivilegeInfo) HasLabel() bool {
	if o != nil && o.Label.IsSet() {
		return true
	}

	return false
}

// SetLabel gets a reference to the given NullableString and assigns it to the Label field.
func (o *PrivilegeInfo) SetLabel(v string) {
	o.Label.Set(&v)
}
// SetLabelNil sets the value for Label to be an explicit nil
func (o *PrivilegeInfo) SetLabelNil() {
	o.Label.Set(nil)
}

// UnsetLabel ensures that no value is present for Label, not even an explicit nil
func (o *PrivilegeInfo) UnsetLabel() {
	o.Label.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PrivilegeInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PrivilegeInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *PrivilegeInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *PrivilegeInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *PrivilegeInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *PrivilegeInfo) UnsetName() {
	o.Name.Unset()
}

func (o PrivilegeInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PrivilegeId.IsSet() {
		toSerialize["PrivilegeId"] = o.PrivilegeId.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.IsAvailableOnHelios.IsSet() {
		toSerialize["isAvailableOnHelios"] = o.IsAvailableOnHelios.Get()
	}
	if o.IsCustomRoleDefault.IsSet() {
		toSerialize["isCustomRoleDefault"] = o.IsCustomRoleDefault.Get()
	}
	if o.IsSpecial.IsSet() {
		toSerialize["isSpecial"] = o.IsSpecial.Get()
	}
	if o.IsViewOnly.IsSet() {
		toSerialize["isViewOnly"] = o.IsViewOnly.Get()
	}
	if o.Label.IsSet() {
		toSerialize["label"] = o.Label.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePrivilegeInfo struct {
	value *PrivilegeInfo
	isSet bool
}

func (v NullablePrivilegeInfo) Get() *PrivilegeInfo {
	return v.value
}

func (v *NullablePrivilegeInfo) Set(val *PrivilegeInfo) {
	v.value = val
	v.isSet = true
}

func (v NullablePrivilegeInfo) IsSet() bool {
	return v.isSet
}

func (v *NullablePrivilegeInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrivilegeInfo(val *PrivilegeInfo) *NullablePrivilegeInfo {
	return &NullablePrivilegeInfo{value: val, isSet: true}
}

func (v NullablePrivilegeInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrivilegeInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


