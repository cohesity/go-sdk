/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// HBaseTable Specifies an Object containing information about a HBase table.
type HBaseTable struct {
	// Specifies the approx size of the table in bytes.
	ApproxSizeBytes NullableInt64 `json:"approxSizeBytes,omitempty"`
}

// NewHBaseTable instantiates a new HBaseTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHBaseTable() *HBaseTable {
	this := HBaseTable{}
	return &this
}

// NewHBaseTableWithDefaults instantiates a new HBaseTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHBaseTableWithDefaults() *HBaseTable {
	this := HBaseTable{}
	return &this
}

// GetApproxSizeBytes returns the ApproxSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HBaseTable) GetApproxSizeBytes() int64 {
	if o == nil || o.ApproxSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ApproxSizeBytes.Get()
}

// GetApproxSizeBytesOk returns a tuple with the ApproxSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HBaseTable) GetApproxSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApproxSizeBytes.Get(), o.ApproxSizeBytes.IsSet()
}

// HasApproxSizeBytes returns a boolean if a field has been set.
func (o *HBaseTable) HasApproxSizeBytes() bool {
	if o != nil && o.ApproxSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetApproxSizeBytes gets a reference to the given NullableInt64 and assigns it to the ApproxSizeBytes field.
func (o *HBaseTable) SetApproxSizeBytes(v int64) {
	o.ApproxSizeBytes.Set(&v)
}
// SetApproxSizeBytesNil sets the value for ApproxSizeBytes to be an explicit nil
func (o *HBaseTable) SetApproxSizeBytesNil() {
	o.ApproxSizeBytes.Set(nil)
}

// UnsetApproxSizeBytes ensures that no value is present for ApproxSizeBytes, not even an explicit nil
func (o *HBaseTable) UnsetApproxSizeBytes() {
	o.ApproxSizeBytes.Unset()
}

func (o HBaseTable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApproxSizeBytes.IsSet() {
		toSerialize["approxSizeBytes"] = o.ApproxSizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHBaseTable struct {
	value *HBaseTable
	isSet bool
}

func (v NullableHBaseTable) Get() *HBaseTable {
	return v.value
}

func (v *NullableHBaseTable) Set(val *HBaseTable) {
	v.value = val
	v.isSet = true
}

func (v NullableHBaseTable) IsSet() bool {
	return v.isSet
}

func (v *NullableHBaseTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHBaseTable(val *HBaseTable) *NullableHBaseTable {
	return &NullableHBaseTable{value: val, isSet: true}
}

func (v NullableHBaseTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHBaseTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


