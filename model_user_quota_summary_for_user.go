/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UserQuotaSummaryForUser Speifies the summary of quota information for a particular user.
type UserQuotaSummaryForUser struct {
	// Number of views in which user has exceeded alert threshold limit.
	NumViewsAboveAlertThreshold NullableInt32 `json:"numViewsAboveAlertThreshold,omitempty"`
	// Number of views in which the user has exceeded hard limit.
	NumViewsAboveHardLimit NullableInt32 `json:"numViewsAboveHardLimit,omitempty"`
	// Total number of views in which the user has a quota policy specified or has non-zero usage.
	TotalNumViews NullableInt32 `json:"totalNumViews,omitempty"`
}

// NewUserQuotaSummaryForUser instantiates a new UserQuotaSummaryForUser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserQuotaSummaryForUser() *UserQuotaSummaryForUser {
	this := UserQuotaSummaryForUser{}
	return &this
}

// NewUserQuotaSummaryForUserWithDefaults instantiates a new UserQuotaSummaryForUser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserQuotaSummaryForUserWithDefaults() *UserQuotaSummaryForUser {
	this := UserQuotaSummaryForUser{}
	return &this
}

// GetNumViewsAboveAlertThreshold returns the NumViewsAboveAlertThreshold field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuotaSummaryForUser) GetNumViewsAboveAlertThreshold() int32 {
	if o == nil || o.NumViewsAboveAlertThreshold.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumViewsAboveAlertThreshold.Get()
}

// GetNumViewsAboveAlertThresholdOk returns a tuple with the NumViewsAboveAlertThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuotaSummaryForUser) GetNumViewsAboveAlertThresholdOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumViewsAboveAlertThreshold.Get(), o.NumViewsAboveAlertThreshold.IsSet()
}

// HasNumViewsAboveAlertThreshold returns a boolean if a field has been set.
func (o *UserQuotaSummaryForUser) HasNumViewsAboveAlertThreshold() bool {
	if o != nil && o.NumViewsAboveAlertThreshold.IsSet() {
		return true
	}

	return false
}

// SetNumViewsAboveAlertThreshold gets a reference to the given NullableInt32 and assigns it to the NumViewsAboveAlertThreshold field.
func (o *UserQuotaSummaryForUser) SetNumViewsAboveAlertThreshold(v int32) {
	o.NumViewsAboveAlertThreshold.Set(&v)
}
// SetNumViewsAboveAlertThresholdNil sets the value for NumViewsAboveAlertThreshold to be an explicit nil
func (o *UserQuotaSummaryForUser) SetNumViewsAboveAlertThresholdNil() {
	o.NumViewsAboveAlertThreshold.Set(nil)
}

// UnsetNumViewsAboveAlertThreshold ensures that no value is present for NumViewsAboveAlertThreshold, not even an explicit nil
func (o *UserQuotaSummaryForUser) UnsetNumViewsAboveAlertThreshold() {
	o.NumViewsAboveAlertThreshold.Unset()
}

// GetNumViewsAboveHardLimit returns the NumViewsAboveHardLimit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuotaSummaryForUser) GetNumViewsAboveHardLimit() int32 {
	if o == nil || o.NumViewsAboveHardLimit.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumViewsAboveHardLimit.Get()
}

// GetNumViewsAboveHardLimitOk returns a tuple with the NumViewsAboveHardLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuotaSummaryForUser) GetNumViewsAboveHardLimitOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumViewsAboveHardLimit.Get(), o.NumViewsAboveHardLimit.IsSet()
}

// HasNumViewsAboveHardLimit returns a boolean if a field has been set.
func (o *UserQuotaSummaryForUser) HasNumViewsAboveHardLimit() bool {
	if o != nil && o.NumViewsAboveHardLimit.IsSet() {
		return true
	}

	return false
}

// SetNumViewsAboveHardLimit gets a reference to the given NullableInt32 and assigns it to the NumViewsAboveHardLimit field.
func (o *UserQuotaSummaryForUser) SetNumViewsAboveHardLimit(v int32) {
	o.NumViewsAboveHardLimit.Set(&v)
}
// SetNumViewsAboveHardLimitNil sets the value for NumViewsAboveHardLimit to be an explicit nil
func (o *UserQuotaSummaryForUser) SetNumViewsAboveHardLimitNil() {
	o.NumViewsAboveHardLimit.Set(nil)
}

// UnsetNumViewsAboveHardLimit ensures that no value is present for NumViewsAboveHardLimit, not even an explicit nil
func (o *UserQuotaSummaryForUser) UnsetNumViewsAboveHardLimit() {
	o.NumViewsAboveHardLimit.Unset()
}

// GetTotalNumViews returns the TotalNumViews field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserQuotaSummaryForUser) GetTotalNumViews() int32 {
	if o == nil || o.TotalNumViews.Get() == nil {
		var ret int32
		return ret
	}
	return *o.TotalNumViews.Get()
}

// GetTotalNumViewsOk returns a tuple with the TotalNumViews field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserQuotaSummaryForUser) GetTotalNumViewsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalNumViews.Get(), o.TotalNumViews.IsSet()
}

// HasTotalNumViews returns a boolean if a field has been set.
func (o *UserQuotaSummaryForUser) HasTotalNumViews() bool {
	if o != nil && o.TotalNumViews.IsSet() {
		return true
	}

	return false
}

// SetTotalNumViews gets a reference to the given NullableInt32 and assigns it to the TotalNumViews field.
func (o *UserQuotaSummaryForUser) SetTotalNumViews(v int32) {
	o.TotalNumViews.Set(&v)
}
// SetTotalNumViewsNil sets the value for TotalNumViews to be an explicit nil
func (o *UserQuotaSummaryForUser) SetTotalNumViewsNil() {
	o.TotalNumViews.Set(nil)
}

// UnsetTotalNumViews ensures that no value is present for TotalNumViews, not even an explicit nil
func (o *UserQuotaSummaryForUser) UnsetTotalNumViews() {
	o.TotalNumViews.Unset()
}

func (o UserQuotaSummaryForUser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumViewsAboveAlertThreshold.IsSet() {
		toSerialize["numViewsAboveAlertThreshold"] = o.NumViewsAboveAlertThreshold.Get()
	}
	if o.NumViewsAboveHardLimit.IsSet() {
		toSerialize["numViewsAboveHardLimit"] = o.NumViewsAboveHardLimit.Get()
	}
	if o.TotalNumViews.IsSet() {
		toSerialize["totalNumViews"] = o.TotalNumViews.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUserQuotaSummaryForUser struct {
	value *UserQuotaSummaryForUser
	isSet bool
}

func (v NullableUserQuotaSummaryForUser) Get() *UserQuotaSummaryForUser {
	return v.value
}

func (v *NullableUserQuotaSummaryForUser) Set(val *UserQuotaSummaryForUser) {
	v.value = val
	v.isSet = true
}

func (v NullableUserQuotaSummaryForUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUserQuotaSummaryForUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserQuotaSummaryForUser(val *UserQuotaSummaryForUser) *NullableUserQuotaSummaryForUser {
	return &NullableUserQuotaSummaryForUser{value: val, isSet: true}
}

func (v NullableUserQuotaSummaryForUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserQuotaSummaryForUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


