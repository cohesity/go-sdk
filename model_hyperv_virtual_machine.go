/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// HypervVirtualMachine Specifies information about a VirtualMachine Object in HyperV environment.
type HypervVirtualMachine struct {
	// Specifies whether the VM is Highly Available or not.
	IsHighlyAvailable NullableBool `json:"isHighlyAvailable,omitempty"`
	// Specifies the version of the VM. For example, 8.0, 5.0 etc.
	Version NullableString `json:"version,omitempty"`
	// Specifies the status of the VM for backup purpose. overrideDescription: true Specifies the backup status of a HyperV Virtual Machine object. 'kSupported' indicates the agent on the VM can do backup. 'kUnsupportedConfig' indicates the agent on the VM cannot do backup. 'kMissing' indicates the VM is not found in SCVMM.
	VmBackupStatus NullableString `json:"vmBackupStatus,omitempty"`
	// Specifies the type of backup supported by the VM. overrideDescription: true Specifies the type of an HyperV datastore object. 'kRctBackup' indicates backup is done using RCT/checkpoints. 'kVssBackup' indicates backup is done using VSS.
	VmBackupType NullableString `json:"vmBackupType,omitempty"`
}

// NewHypervVirtualMachine instantiates a new HypervVirtualMachine object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHypervVirtualMachine() *HypervVirtualMachine {
	this := HypervVirtualMachine{}
	return &this
}

// NewHypervVirtualMachineWithDefaults instantiates a new HypervVirtualMachine object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHypervVirtualMachineWithDefaults() *HypervVirtualMachine {
	this := HypervVirtualMachine{}
	return &this
}

// GetIsHighlyAvailable returns the IsHighlyAvailable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervVirtualMachine) GetIsHighlyAvailable() bool {
	if o == nil || o.IsHighlyAvailable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsHighlyAvailable.Get()
}

// GetIsHighlyAvailableOk returns a tuple with the IsHighlyAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervVirtualMachine) GetIsHighlyAvailableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsHighlyAvailable.Get(), o.IsHighlyAvailable.IsSet()
}

// HasIsHighlyAvailable returns a boolean if a field has been set.
func (o *HypervVirtualMachine) HasIsHighlyAvailable() bool {
	if o != nil && o.IsHighlyAvailable.IsSet() {
		return true
	}

	return false
}

// SetIsHighlyAvailable gets a reference to the given NullableBool and assigns it to the IsHighlyAvailable field.
func (o *HypervVirtualMachine) SetIsHighlyAvailable(v bool) {
	o.IsHighlyAvailable.Set(&v)
}
// SetIsHighlyAvailableNil sets the value for IsHighlyAvailable to be an explicit nil
func (o *HypervVirtualMachine) SetIsHighlyAvailableNil() {
	o.IsHighlyAvailable.Set(nil)
}

// UnsetIsHighlyAvailable ensures that no value is present for IsHighlyAvailable, not even an explicit nil
func (o *HypervVirtualMachine) UnsetIsHighlyAvailable() {
	o.IsHighlyAvailable.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervVirtualMachine) GetVersion() string {
	if o == nil || o.Version.Get() == nil {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervVirtualMachine) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *HypervVirtualMachine) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *HypervVirtualMachine) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *HypervVirtualMachine) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *HypervVirtualMachine) UnsetVersion() {
	o.Version.Unset()
}

// GetVmBackupStatus returns the VmBackupStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervVirtualMachine) GetVmBackupStatus() string {
	if o == nil || o.VmBackupStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.VmBackupStatus.Get()
}

// GetVmBackupStatusOk returns a tuple with the VmBackupStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervVirtualMachine) GetVmBackupStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmBackupStatus.Get(), o.VmBackupStatus.IsSet()
}

// HasVmBackupStatus returns a boolean if a field has been set.
func (o *HypervVirtualMachine) HasVmBackupStatus() bool {
	if o != nil && o.VmBackupStatus.IsSet() {
		return true
	}

	return false
}

// SetVmBackupStatus gets a reference to the given NullableString and assigns it to the VmBackupStatus field.
func (o *HypervVirtualMachine) SetVmBackupStatus(v string) {
	o.VmBackupStatus.Set(&v)
}
// SetVmBackupStatusNil sets the value for VmBackupStatus to be an explicit nil
func (o *HypervVirtualMachine) SetVmBackupStatusNil() {
	o.VmBackupStatus.Set(nil)
}

// UnsetVmBackupStatus ensures that no value is present for VmBackupStatus, not even an explicit nil
func (o *HypervVirtualMachine) UnsetVmBackupStatus() {
	o.VmBackupStatus.Unset()
}

// GetVmBackupType returns the VmBackupType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HypervVirtualMachine) GetVmBackupType() string {
	if o == nil || o.VmBackupType.Get() == nil {
		var ret string
		return ret
	}
	return *o.VmBackupType.Get()
}

// GetVmBackupTypeOk returns a tuple with the VmBackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HypervVirtualMachine) GetVmBackupTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmBackupType.Get(), o.VmBackupType.IsSet()
}

// HasVmBackupType returns a boolean if a field has been set.
func (o *HypervVirtualMachine) HasVmBackupType() bool {
	if o != nil && o.VmBackupType.IsSet() {
		return true
	}

	return false
}

// SetVmBackupType gets a reference to the given NullableString and assigns it to the VmBackupType field.
func (o *HypervVirtualMachine) SetVmBackupType(v string) {
	o.VmBackupType.Set(&v)
}
// SetVmBackupTypeNil sets the value for VmBackupType to be an explicit nil
func (o *HypervVirtualMachine) SetVmBackupTypeNil() {
	o.VmBackupType.Set(nil)
}

// UnsetVmBackupType ensures that no value is present for VmBackupType, not even an explicit nil
func (o *HypervVirtualMachine) UnsetVmBackupType() {
	o.VmBackupType.Unset()
}

func (o HypervVirtualMachine) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsHighlyAvailable.IsSet() {
		toSerialize["isHighlyAvailable"] = o.IsHighlyAvailable.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.VmBackupStatus.IsSet() {
		toSerialize["vmBackupStatus"] = o.VmBackupStatus.Get()
	}
	if o.VmBackupType.IsSet() {
		toSerialize["vmBackupType"] = o.VmBackupType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHypervVirtualMachine struct {
	value *HypervVirtualMachine
	isSet bool
}

func (v NullableHypervVirtualMachine) Get() *HypervVirtualMachine {
	return v.value
}

func (v *NullableHypervVirtualMachine) Set(val *HypervVirtualMachine) {
	v.value = val
	v.isSet = true
}

func (v NullableHypervVirtualMachine) IsSet() bool {
	return v.isSet
}

func (v *NullableHypervVirtualMachine) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHypervVirtualMachine(val *HypervVirtualMachine) *NullableHypervVirtualMachine {
	return &NullableHypervVirtualMachine{value: val, isSet: true}
}

func (v NullableHypervVirtualMachine) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHypervVirtualMachine) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


