/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ProtectionStats Protection Statistics.
type ProtectionStats struct {
	// Number of Failed Objects.
	NumFailed NullableInt32 `json:"numFailed,omitempty"`
	// Number of Objects.
	NumObjects NullableInt32 `json:"numObjects,omitempty"`
	// Size in Bytes.
	SizeBytes NullableInt64 `json:"sizeBytes,omitempty"`
}

// NewProtectionStats instantiates a new ProtectionStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionStats() *ProtectionStats {
	this := ProtectionStats{}
	return &this
}

// NewProtectionStatsWithDefaults instantiates a new ProtectionStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionStatsWithDefaults() *ProtectionStats {
	this := ProtectionStats{}
	return &this
}

// GetNumFailed returns the NumFailed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionStats) GetNumFailed() int32 {
	if o == nil || o.NumFailed.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumFailed.Get()
}

// GetNumFailedOk returns a tuple with the NumFailed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionStats) GetNumFailedOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumFailed.Get(), o.NumFailed.IsSet()
}

// HasNumFailed returns a boolean if a field has been set.
func (o *ProtectionStats) HasNumFailed() bool {
	if o != nil && o.NumFailed.IsSet() {
		return true
	}

	return false
}

// SetNumFailed gets a reference to the given NullableInt32 and assigns it to the NumFailed field.
func (o *ProtectionStats) SetNumFailed(v int32) {
	o.NumFailed.Set(&v)
}
// SetNumFailedNil sets the value for NumFailed to be an explicit nil
func (o *ProtectionStats) SetNumFailedNil() {
	o.NumFailed.Set(nil)
}

// UnsetNumFailed ensures that no value is present for NumFailed, not even an explicit nil
func (o *ProtectionStats) UnsetNumFailed() {
	o.NumFailed.Unset()
}

// GetNumObjects returns the NumObjects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionStats) GetNumObjects() int32 {
	if o == nil || o.NumObjects.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumObjects.Get()
}

// GetNumObjectsOk returns a tuple with the NumObjects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionStats) GetNumObjectsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumObjects.Get(), o.NumObjects.IsSet()
}

// HasNumObjects returns a boolean if a field has been set.
func (o *ProtectionStats) HasNumObjects() bool {
	if o != nil && o.NumObjects.IsSet() {
		return true
	}

	return false
}

// SetNumObjects gets a reference to the given NullableInt32 and assigns it to the NumObjects field.
func (o *ProtectionStats) SetNumObjects(v int32) {
	o.NumObjects.Set(&v)
}
// SetNumObjectsNil sets the value for NumObjects to be an explicit nil
func (o *ProtectionStats) SetNumObjectsNil() {
	o.NumObjects.Set(nil)
}

// UnsetNumObjects ensures that no value is present for NumObjects, not even an explicit nil
func (o *ProtectionStats) UnsetNumObjects() {
	o.NumObjects.Unset()
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionStats) GetSizeBytes() int64 {
	if o == nil || o.SizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SizeBytes.Get()
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionStats) GetSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeBytes.Get(), o.SizeBytes.IsSet()
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *ProtectionStats) HasSizeBytes() bool {
	if o != nil && o.SizeBytes.IsSet() {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given NullableInt64 and assigns it to the SizeBytes field.
func (o *ProtectionStats) SetSizeBytes(v int64) {
	o.SizeBytes.Set(&v)
}
// SetSizeBytesNil sets the value for SizeBytes to be an explicit nil
func (o *ProtectionStats) SetSizeBytesNil() {
	o.SizeBytes.Set(nil)
}

// UnsetSizeBytes ensures that no value is present for SizeBytes, not even an explicit nil
func (o *ProtectionStats) UnsetSizeBytes() {
	o.SizeBytes.Unset()
}

func (o ProtectionStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumFailed.IsSet() {
		toSerialize["numFailed"] = o.NumFailed.Get()
	}
	if o.NumObjects.IsSet() {
		toSerialize["numObjects"] = o.NumObjects.Get()
	}
	if o.SizeBytes.IsSet() {
		toSerialize["sizeBytes"] = o.SizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionStats struct {
	value *ProtectionStats
	isSet bool
}

func (v NullableProtectionStats) Get() *ProtectionStats {
	return v.value
}

func (v *NullableProtectionStats) Set(val *ProtectionStats) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionStats) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionStats(val *ProtectionStats) *NullableProtectionStats {
	return &NullableProtectionStats{value: val, isSet: true}
}

func (v NullableProtectionStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


