/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// GranteeProto struct for GranteeProto
type GranteeProto struct {
	// If grantee is of type 'kEmailUser', this field will contain the email address of the user.
	EmailAddress NullableString `json:"emailAddress,omitempty"`
	// If grantee is of type 'kGroup', this field will contain the group to which permission is granted.
	Group NullableInt32 `json:"group,omitempty"`
	Type NullableInt32 `json:"type,omitempty"`
	// If grantee is of type 'kRegisteredUser', this field will contain the canonical id of the user.
	UserId NullableString `json:"userId,omitempty"`
}

// NewGranteeProto instantiates a new GranteeProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGranteeProto() *GranteeProto {
	this := GranteeProto{}
	return &this
}

// NewGranteeProtoWithDefaults instantiates a new GranteeProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGranteeProtoWithDefaults() *GranteeProto {
	this := GranteeProto{}
	return &this
}

// GetEmailAddress returns the EmailAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GranteeProto) GetEmailAddress() string {
	if o == nil || o.EmailAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.EmailAddress.Get()
}

// GetEmailAddressOk returns a tuple with the EmailAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GranteeProto) GetEmailAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EmailAddress.Get(), o.EmailAddress.IsSet()
}

// HasEmailAddress returns a boolean if a field has been set.
func (o *GranteeProto) HasEmailAddress() bool {
	if o != nil && o.EmailAddress.IsSet() {
		return true
	}

	return false
}

// SetEmailAddress gets a reference to the given NullableString and assigns it to the EmailAddress field.
func (o *GranteeProto) SetEmailAddress(v string) {
	o.EmailAddress.Set(&v)
}
// SetEmailAddressNil sets the value for EmailAddress to be an explicit nil
func (o *GranteeProto) SetEmailAddressNil() {
	o.EmailAddress.Set(nil)
}

// UnsetEmailAddress ensures that no value is present for EmailAddress, not even an explicit nil
func (o *GranteeProto) UnsetEmailAddress() {
	o.EmailAddress.Unset()
}

// GetGroup returns the Group field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GranteeProto) GetGroup() int32 {
	if o == nil || o.Group.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Group.Get()
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GranteeProto) GetGroupOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Group.Get(), o.Group.IsSet()
}

// HasGroup returns a boolean if a field has been set.
func (o *GranteeProto) HasGroup() bool {
	if o != nil && o.Group.IsSet() {
		return true
	}

	return false
}

// SetGroup gets a reference to the given NullableInt32 and assigns it to the Group field.
func (o *GranteeProto) SetGroup(v int32) {
	o.Group.Set(&v)
}
// SetGroupNil sets the value for Group to be an explicit nil
func (o *GranteeProto) SetGroupNil() {
	o.Group.Set(nil)
}

// UnsetGroup ensures that no value is present for Group, not even an explicit nil
func (o *GranteeProto) UnsetGroup() {
	o.Group.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GranteeProto) GetType() int32 {
	if o == nil || o.Type.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GranteeProto) GetTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *GranteeProto) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableInt32 and assigns it to the Type field.
func (o *GranteeProto) SetType(v int32) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *GranteeProto) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *GranteeProto) UnsetType() {
	o.Type.Unset()
}

// GetUserId returns the UserId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GranteeProto) GetUserId() string {
	if o == nil || o.UserId.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserId.Get()
}

// GetUserIdOk returns a tuple with the UserId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GranteeProto) GetUserIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserId.Get(), o.UserId.IsSet()
}

// HasUserId returns a boolean if a field has been set.
func (o *GranteeProto) HasUserId() bool {
	if o != nil && o.UserId.IsSet() {
		return true
	}

	return false
}

// SetUserId gets a reference to the given NullableString and assigns it to the UserId field.
func (o *GranteeProto) SetUserId(v string) {
	o.UserId.Set(&v)
}
// SetUserIdNil sets the value for UserId to be an explicit nil
func (o *GranteeProto) SetUserIdNil() {
	o.UserId.Set(nil)
}

// UnsetUserId ensures that no value is present for UserId, not even an explicit nil
func (o *GranteeProto) UnsetUserId() {
	o.UserId.Unset()
}

func (o GranteeProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EmailAddress.IsSet() {
		toSerialize["emailAddress"] = o.EmailAddress.Get()
	}
	if o.Group.IsSet() {
		toSerialize["group"] = o.Group.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.UserId.IsSet() {
		toSerialize["userId"] = o.UserId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGranteeProto struct {
	value *GranteeProto
	isSet bool
}

func (v NullableGranteeProto) Get() *GranteeProto {
	return v.value
}

func (v *NullableGranteeProto) Set(val *GranteeProto) {
	v.value = val
	v.isSet = true
}

func (v NullableGranteeProto) IsSet() bool {
	return v.isSet
}

func (v *NullableGranteeProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGranteeProto(val *GranteeProto) *NullableGranteeProto {
	return &NullableGranteeProto{value: val, isSet: true}
}

func (v NullableGranteeProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGranteeProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


