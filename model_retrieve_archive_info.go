/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RetrieveArchiveInfo Proto to describe information about the retrieval of an archive task as provided by Icebox.
type RetrieveArchiveInfo struct {
	// Average logical bytes transfer rate in bytes per second as seen by Icebox.
	AvgLogicalTransferRateBps NullableInt64 `json:"avgLogicalTransferRateBps,omitempty"`
	// Number of physical bytes transferred for this retrieval task so far.
	BytesTransferred NullableInt64 `json:"bytesTransferred,omitempty"`
	// Time when this retrieval task ended at Icebox side. If not set, then the retrieval has not ended yet.
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	Error *ErrorProto `json:"error,omitempty"`
	// Number of logical bytes transferred so far.
	LogicalBytesTransferred NullableInt64 `json:"logicalBytesTransferred,omitempty"`
	// Total logical size of the retrieval task.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
	// The root path of the progress monitor for this task.
	ProgressMonitorTaskPath NullableString `json:"progressMonitorTaskPath,omitempty"`
	// Contains info about all retrieved entities.
	RetrievedEntityVec []RetrieveArchiveInfoRetrievedEntity `json:"retrievedEntityVec,omitempty"`
	// Time when this retrieval task was started by Icebox. If not set, then retrieval has not been started yet.
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// The stub view that Icebox created. Stub view can be used for selectively restoring or accessing files from an archive location.
	StubViewName NullableString `json:"stubViewName,omitempty"`
	// Relative directory inside the stub view that corresponds with the archive.
	StubViewRelativeDirName NullableString `json:"stubViewRelativeDirName,omitempty"`
	// The name of the target view where Icebox has retrieved and staged the requested entities.
	TargetViewName NullableString `json:"targetViewName,omitempty"`
	// Message to display in the UI if any manual intervention is needed to make forward progress for the retrieve from archive task. This message is mainly relevant for tape based retrieve from archive tasks where a backup admin might be asked to load new media when the tape library does not have the relevant media to retrieve the archive from.
	UserActionRequiredMsg NullableString `json:"userActionRequiredMsg,omitempty"`
}

// NewRetrieveArchiveInfo instantiates a new RetrieveArchiveInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetrieveArchiveInfo() *RetrieveArchiveInfo {
	this := RetrieveArchiveInfo{}
	return &this
}

// NewRetrieveArchiveInfoWithDefaults instantiates a new RetrieveArchiveInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetrieveArchiveInfoWithDefaults() *RetrieveArchiveInfo {
	this := RetrieveArchiveInfo{}
	return &this
}

// GetAvgLogicalTransferRateBps returns the AvgLogicalTransferRateBps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetAvgLogicalTransferRateBps() int64 {
	if o == nil || o.AvgLogicalTransferRateBps.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AvgLogicalTransferRateBps.Get()
}

// GetAvgLogicalTransferRateBpsOk returns a tuple with the AvgLogicalTransferRateBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetAvgLogicalTransferRateBpsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AvgLogicalTransferRateBps.Get(), o.AvgLogicalTransferRateBps.IsSet()
}

// HasAvgLogicalTransferRateBps returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasAvgLogicalTransferRateBps() bool {
	if o != nil && o.AvgLogicalTransferRateBps.IsSet() {
		return true
	}

	return false
}

// SetAvgLogicalTransferRateBps gets a reference to the given NullableInt64 and assigns it to the AvgLogicalTransferRateBps field.
func (o *RetrieveArchiveInfo) SetAvgLogicalTransferRateBps(v int64) {
	o.AvgLogicalTransferRateBps.Set(&v)
}
// SetAvgLogicalTransferRateBpsNil sets the value for AvgLogicalTransferRateBps to be an explicit nil
func (o *RetrieveArchiveInfo) SetAvgLogicalTransferRateBpsNil() {
	o.AvgLogicalTransferRateBps.Set(nil)
}

// UnsetAvgLogicalTransferRateBps ensures that no value is present for AvgLogicalTransferRateBps, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetAvgLogicalTransferRateBps() {
	o.AvgLogicalTransferRateBps.Unset()
}

// GetBytesTransferred returns the BytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetBytesTransferred() int64 {
	if o == nil || o.BytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.BytesTransferred.Get()
}

// GetBytesTransferredOk returns a tuple with the BytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BytesTransferred.Get(), o.BytesTransferred.IsSet()
}

// HasBytesTransferred returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasBytesTransferred() bool {
	if o != nil && o.BytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetBytesTransferred gets a reference to the given NullableInt64 and assigns it to the BytesTransferred field.
func (o *RetrieveArchiveInfo) SetBytesTransferred(v int64) {
	o.BytesTransferred.Set(&v)
}
// SetBytesTransferredNil sets the value for BytesTransferred to be an explicit nil
func (o *RetrieveArchiveInfo) SetBytesTransferredNil() {
	o.BytesTransferred.Set(nil)
}

// UnsetBytesTransferred ensures that no value is present for BytesTransferred, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetBytesTransferred() {
	o.BytesTransferred.Unset()
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *RetrieveArchiveInfo) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *RetrieveArchiveInfo) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *RetrieveArchiveInfo) GetError() ErrorProto {
	if o == nil || o.Error == nil {
		var ret ErrorProto
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetrieveArchiveInfo) GetErrorOk() (*ErrorProto, bool) {
	if o == nil || o.Error == nil {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasError() bool {
	if o != nil && o.Error != nil {
		return true
	}

	return false
}

// SetError gets a reference to the given ErrorProto and assigns it to the Error field.
func (o *RetrieveArchiveInfo) SetError(v ErrorProto) {
	o.Error = &v
}

// GetLogicalBytesTransferred returns the LogicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetLogicalBytesTransferred() int64 {
	if o == nil || o.LogicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalBytesTransferred.Get()
}

// GetLogicalBytesTransferredOk returns a tuple with the LogicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetLogicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalBytesTransferred.Get(), o.LogicalBytesTransferred.IsSet()
}

// HasLogicalBytesTransferred returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasLogicalBytesTransferred() bool {
	if o != nil && o.LogicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetLogicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the LogicalBytesTransferred field.
func (o *RetrieveArchiveInfo) SetLogicalBytesTransferred(v int64) {
	o.LogicalBytesTransferred.Set(&v)
}
// SetLogicalBytesTransferredNil sets the value for LogicalBytesTransferred to be an explicit nil
func (o *RetrieveArchiveInfo) SetLogicalBytesTransferredNil() {
	o.LogicalBytesTransferred.Set(nil)
}

// UnsetLogicalBytesTransferred ensures that no value is present for LogicalBytesTransferred, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetLogicalBytesTransferred() {
	o.LogicalBytesTransferred.Unset()
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetLogicalSizeBytes() int64 {
	if o == nil || o.LogicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *RetrieveArchiveInfo) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *RetrieveArchiveInfo) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetProgressMonitorTaskPath returns the ProgressMonitorTaskPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetProgressMonitorTaskPath() string {
	if o == nil || o.ProgressMonitorTaskPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ProgressMonitorTaskPath.Get()
}

// GetProgressMonitorTaskPathOk returns a tuple with the ProgressMonitorTaskPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetProgressMonitorTaskPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProgressMonitorTaskPath.Get(), o.ProgressMonitorTaskPath.IsSet()
}

// HasProgressMonitorTaskPath returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasProgressMonitorTaskPath() bool {
	if o != nil && o.ProgressMonitorTaskPath.IsSet() {
		return true
	}

	return false
}

// SetProgressMonitorTaskPath gets a reference to the given NullableString and assigns it to the ProgressMonitorTaskPath field.
func (o *RetrieveArchiveInfo) SetProgressMonitorTaskPath(v string) {
	o.ProgressMonitorTaskPath.Set(&v)
}
// SetProgressMonitorTaskPathNil sets the value for ProgressMonitorTaskPath to be an explicit nil
func (o *RetrieveArchiveInfo) SetProgressMonitorTaskPathNil() {
	o.ProgressMonitorTaskPath.Set(nil)
}

// UnsetProgressMonitorTaskPath ensures that no value is present for ProgressMonitorTaskPath, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetProgressMonitorTaskPath() {
	o.ProgressMonitorTaskPath.Unset()
}

// GetRetrievedEntityVec returns the RetrievedEntityVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetRetrievedEntityVec() []RetrieveArchiveInfoRetrievedEntity {
	if o == nil  {
		var ret []RetrieveArchiveInfoRetrievedEntity
		return ret
	}
	return o.RetrievedEntityVec
}

// GetRetrievedEntityVecOk returns a tuple with the RetrievedEntityVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetRetrievedEntityVecOk() (*[]RetrieveArchiveInfoRetrievedEntity, bool) {
	if o == nil || o.RetrievedEntityVec == nil {
		return nil, false
	}
	return &o.RetrievedEntityVec, true
}

// HasRetrievedEntityVec returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasRetrievedEntityVec() bool {
	if o != nil && o.RetrievedEntityVec != nil {
		return true
	}

	return false
}

// SetRetrievedEntityVec gets a reference to the given []RetrieveArchiveInfoRetrievedEntity and assigns it to the RetrievedEntityVec field.
func (o *RetrieveArchiveInfo) SetRetrievedEntityVec(v []RetrieveArchiveInfoRetrievedEntity) {
	o.RetrievedEntityVec = v
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *RetrieveArchiveInfo) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *RetrieveArchiveInfo) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetStubViewName returns the StubViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetStubViewName() string {
	if o == nil || o.StubViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.StubViewName.Get()
}

// GetStubViewNameOk returns a tuple with the StubViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetStubViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StubViewName.Get(), o.StubViewName.IsSet()
}

// HasStubViewName returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasStubViewName() bool {
	if o != nil && o.StubViewName.IsSet() {
		return true
	}

	return false
}

// SetStubViewName gets a reference to the given NullableString and assigns it to the StubViewName field.
func (o *RetrieveArchiveInfo) SetStubViewName(v string) {
	o.StubViewName.Set(&v)
}
// SetStubViewNameNil sets the value for StubViewName to be an explicit nil
func (o *RetrieveArchiveInfo) SetStubViewNameNil() {
	o.StubViewName.Set(nil)
}

// UnsetStubViewName ensures that no value is present for StubViewName, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetStubViewName() {
	o.StubViewName.Unset()
}

// GetStubViewRelativeDirName returns the StubViewRelativeDirName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetStubViewRelativeDirName() string {
	if o == nil || o.StubViewRelativeDirName.Get() == nil {
		var ret string
		return ret
	}
	return *o.StubViewRelativeDirName.Get()
}

// GetStubViewRelativeDirNameOk returns a tuple with the StubViewRelativeDirName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetStubViewRelativeDirNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StubViewRelativeDirName.Get(), o.StubViewRelativeDirName.IsSet()
}

// HasStubViewRelativeDirName returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasStubViewRelativeDirName() bool {
	if o != nil && o.StubViewRelativeDirName.IsSet() {
		return true
	}

	return false
}

// SetStubViewRelativeDirName gets a reference to the given NullableString and assigns it to the StubViewRelativeDirName field.
func (o *RetrieveArchiveInfo) SetStubViewRelativeDirName(v string) {
	o.StubViewRelativeDirName.Set(&v)
}
// SetStubViewRelativeDirNameNil sets the value for StubViewRelativeDirName to be an explicit nil
func (o *RetrieveArchiveInfo) SetStubViewRelativeDirNameNil() {
	o.StubViewRelativeDirName.Set(nil)
}

// UnsetStubViewRelativeDirName ensures that no value is present for StubViewRelativeDirName, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetStubViewRelativeDirName() {
	o.StubViewRelativeDirName.Unset()
}

// GetTargetViewName returns the TargetViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetTargetViewName() string {
	if o == nil || o.TargetViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetViewName.Get()
}

// GetTargetViewNameOk returns a tuple with the TargetViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetTargetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetViewName.Get(), o.TargetViewName.IsSet()
}

// HasTargetViewName returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasTargetViewName() bool {
	if o != nil && o.TargetViewName.IsSet() {
		return true
	}

	return false
}

// SetTargetViewName gets a reference to the given NullableString and assigns it to the TargetViewName field.
func (o *RetrieveArchiveInfo) SetTargetViewName(v string) {
	o.TargetViewName.Set(&v)
}
// SetTargetViewNameNil sets the value for TargetViewName to be an explicit nil
func (o *RetrieveArchiveInfo) SetTargetViewNameNil() {
	o.TargetViewName.Set(nil)
}

// UnsetTargetViewName ensures that no value is present for TargetViewName, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetTargetViewName() {
	o.TargetViewName.Unset()
}

// GetUserActionRequiredMsg returns the UserActionRequiredMsg field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RetrieveArchiveInfo) GetUserActionRequiredMsg() string {
	if o == nil || o.UserActionRequiredMsg.Get() == nil {
		var ret string
		return ret
	}
	return *o.UserActionRequiredMsg.Get()
}

// GetUserActionRequiredMsgOk returns a tuple with the UserActionRequiredMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RetrieveArchiveInfo) GetUserActionRequiredMsgOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UserActionRequiredMsg.Get(), o.UserActionRequiredMsg.IsSet()
}

// HasUserActionRequiredMsg returns a boolean if a field has been set.
func (o *RetrieveArchiveInfo) HasUserActionRequiredMsg() bool {
	if o != nil && o.UserActionRequiredMsg.IsSet() {
		return true
	}

	return false
}

// SetUserActionRequiredMsg gets a reference to the given NullableString and assigns it to the UserActionRequiredMsg field.
func (o *RetrieveArchiveInfo) SetUserActionRequiredMsg(v string) {
	o.UserActionRequiredMsg.Set(&v)
}
// SetUserActionRequiredMsgNil sets the value for UserActionRequiredMsg to be an explicit nil
func (o *RetrieveArchiveInfo) SetUserActionRequiredMsgNil() {
	o.UserActionRequiredMsg.Set(nil)
}

// UnsetUserActionRequiredMsg ensures that no value is present for UserActionRequiredMsg, not even an explicit nil
func (o *RetrieveArchiveInfo) UnsetUserActionRequiredMsg() {
	o.UserActionRequiredMsg.Unset()
}

func (o RetrieveArchiveInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AvgLogicalTransferRateBps.IsSet() {
		toSerialize["avgLogicalTransferRateBps"] = o.AvgLogicalTransferRateBps.Get()
	}
	if o.BytesTransferred.IsSet() {
		toSerialize["bytesTransferred"] = o.BytesTransferred.Get()
	}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.Error != nil {
		toSerialize["error"] = o.Error
	}
	if o.LogicalBytesTransferred.IsSet() {
		toSerialize["logicalBytesTransferred"] = o.LogicalBytesTransferred.Get()
	}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.ProgressMonitorTaskPath.IsSet() {
		toSerialize["progressMonitorTaskPath"] = o.ProgressMonitorTaskPath.Get()
	}
	if o.RetrievedEntityVec != nil {
		toSerialize["retrievedEntityVec"] = o.RetrievedEntityVec
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.StubViewName.IsSet() {
		toSerialize["stubViewName"] = o.StubViewName.Get()
	}
	if o.StubViewRelativeDirName.IsSet() {
		toSerialize["stubViewRelativeDirName"] = o.StubViewRelativeDirName.Get()
	}
	if o.TargetViewName.IsSet() {
		toSerialize["targetViewName"] = o.TargetViewName.Get()
	}
	if o.UserActionRequiredMsg.IsSet() {
		toSerialize["userActionRequiredMsg"] = o.UserActionRequiredMsg.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRetrieveArchiveInfo struct {
	value *RetrieveArchiveInfo
	isSet bool
}

func (v NullableRetrieveArchiveInfo) Get() *RetrieveArchiveInfo {
	return v.value
}

func (v *NullableRetrieveArchiveInfo) Set(val *RetrieveArchiveInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRetrieveArchiveInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRetrieveArchiveInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetrieveArchiveInfo(val *RetrieveArchiveInfo) *NullableRetrieveArchiveInfo {
	return &NullableRetrieveArchiveInfo{value: val, isSet: true}
}

func (v NullableRetrieveArchiveInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetrieveArchiveInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


