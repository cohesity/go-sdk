/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleDBConfigRedoLogGroupConf GROUP1 : {DST1/CH1.log, DST2/CH1.log} GROUP2 : {DST1/CH2.log, DST2/CH2.log} GROUP3 : {DST1/CH3.log, DST2/CH3.log}
type OracleDBConfigRedoLogGroupConf struct {
	// List of members of this redo log group.
	GroupMemberVec []string `json:"groupMemberVec,omitempty"`
	// Log member name prefix.
	MemberPrefix NullableString `json:"memberPrefix,omitempty"`
	// Number of redo log groups.
	NumGroups NullableInt32 `json:"numGroups,omitempty"`
	// Size of the member in MB.
	SizeMb NullableInt32 `json:"sizeMb,omitempty"`
}

// NewOracleDBConfigRedoLogGroupConf instantiates a new OracleDBConfigRedoLogGroupConf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDBConfigRedoLogGroupConf() *OracleDBConfigRedoLogGroupConf {
	this := OracleDBConfigRedoLogGroupConf{}
	return &this
}

// NewOracleDBConfigRedoLogGroupConfWithDefaults instantiates a new OracleDBConfigRedoLogGroupConf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDBConfigRedoLogGroupConfWithDefaults() *OracleDBConfigRedoLogGroupConf {
	this := OracleDBConfigRedoLogGroupConf{}
	return &this
}

// GetGroupMemberVec returns the GroupMemberVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfigRedoLogGroupConf) GetGroupMemberVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.GroupMemberVec
}

// GetGroupMemberVecOk returns a tuple with the GroupMemberVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfigRedoLogGroupConf) GetGroupMemberVecOk() (*[]string, bool) {
	if o == nil || o.GroupMemberVec == nil {
		return nil, false
	}
	return &o.GroupMemberVec, true
}

// HasGroupMemberVec returns a boolean if a field has been set.
func (o *OracleDBConfigRedoLogGroupConf) HasGroupMemberVec() bool {
	if o != nil && o.GroupMemberVec != nil {
		return true
	}

	return false
}

// SetGroupMemberVec gets a reference to the given []string and assigns it to the GroupMemberVec field.
func (o *OracleDBConfigRedoLogGroupConf) SetGroupMemberVec(v []string) {
	o.GroupMemberVec = v
}

// GetMemberPrefix returns the MemberPrefix field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfigRedoLogGroupConf) GetMemberPrefix() string {
	if o == nil || o.MemberPrefix.Get() == nil {
		var ret string
		return ret
	}
	return *o.MemberPrefix.Get()
}

// GetMemberPrefixOk returns a tuple with the MemberPrefix field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfigRedoLogGroupConf) GetMemberPrefixOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MemberPrefix.Get(), o.MemberPrefix.IsSet()
}

// HasMemberPrefix returns a boolean if a field has been set.
func (o *OracleDBConfigRedoLogGroupConf) HasMemberPrefix() bool {
	if o != nil && o.MemberPrefix.IsSet() {
		return true
	}

	return false
}

// SetMemberPrefix gets a reference to the given NullableString and assigns it to the MemberPrefix field.
func (o *OracleDBConfigRedoLogGroupConf) SetMemberPrefix(v string) {
	o.MemberPrefix.Set(&v)
}
// SetMemberPrefixNil sets the value for MemberPrefix to be an explicit nil
func (o *OracleDBConfigRedoLogGroupConf) SetMemberPrefixNil() {
	o.MemberPrefix.Set(nil)
}

// UnsetMemberPrefix ensures that no value is present for MemberPrefix, not even an explicit nil
func (o *OracleDBConfigRedoLogGroupConf) UnsetMemberPrefix() {
	o.MemberPrefix.Unset()
}

// GetNumGroups returns the NumGroups field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfigRedoLogGroupConf) GetNumGroups() int32 {
	if o == nil || o.NumGroups.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumGroups.Get()
}

// GetNumGroupsOk returns a tuple with the NumGroups field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfigRedoLogGroupConf) GetNumGroupsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumGroups.Get(), o.NumGroups.IsSet()
}

// HasNumGroups returns a boolean if a field has been set.
func (o *OracleDBConfigRedoLogGroupConf) HasNumGroups() bool {
	if o != nil && o.NumGroups.IsSet() {
		return true
	}

	return false
}

// SetNumGroups gets a reference to the given NullableInt32 and assigns it to the NumGroups field.
func (o *OracleDBConfigRedoLogGroupConf) SetNumGroups(v int32) {
	o.NumGroups.Set(&v)
}
// SetNumGroupsNil sets the value for NumGroups to be an explicit nil
func (o *OracleDBConfigRedoLogGroupConf) SetNumGroupsNil() {
	o.NumGroups.Set(nil)
}

// UnsetNumGroups ensures that no value is present for NumGroups, not even an explicit nil
func (o *OracleDBConfigRedoLogGroupConf) UnsetNumGroups() {
	o.NumGroups.Unset()
}

// GetSizeMb returns the SizeMb field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDBConfigRedoLogGroupConf) GetSizeMb() int32 {
	if o == nil || o.SizeMb.Get() == nil {
		var ret int32
		return ret
	}
	return *o.SizeMb.Get()
}

// GetSizeMbOk returns a tuple with the SizeMb field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDBConfigRedoLogGroupConf) GetSizeMbOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeMb.Get(), o.SizeMb.IsSet()
}

// HasSizeMb returns a boolean if a field has been set.
func (o *OracleDBConfigRedoLogGroupConf) HasSizeMb() bool {
	if o != nil && o.SizeMb.IsSet() {
		return true
	}

	return false
}

// SetSizeMb gets a reference to the given NullableInt32 and assigns it to the SizeMb field.
func (o *OracleDBConfigRedoLogGroupConf) SetSizeMb(v int32) {
	o.SizeMb.Set(&v)
}
// SetSizeMbNil sets the value for SizeMb to be an explicit nil
func (o *OracleDBConfigRedoLogGroupConf) SetSizeMbNil() {
	o.SizeMb.Set(nil)
}

// UnsetSizeMb ensures that no value is present for SizeMb, not even an explicit nil
func (o *OracleDBConfigRedoLogGroupConf) UnsetSizeMb() {
	o.SizeMb.Unset()
}

func (o OracleDBConfigRedoLogGroupConf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.GroupMemberVec != nil {
		toSerialize["groupMemberVec"] = o.GroupMemberVec
	}
	if o.MemberPrefix.IsSet() {
		toSerialize["memberPrefix"] = o.MemberPrefix.Get()
	}
	if o.NumGroups.IsSet() {
		toSerialize["numGroups"] = o.NumGroups.Get()
	}
	if o.SizeMb.IsSet() {
		toSerialize["sizeMb"] = o.SizeMb.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleDBConfigRedoLogGroupConf struct {
	value *OracleDBConfigRedoLogGroupConf
	isSet bool
}

func (v NullableOracleDBConfigRedoLogGroupConf) Get() *OracleDBConfigRedoLogGroupConf {
	return v.value
}

func (v *NullableOracleDBConfigRedoLogGroupConf) Set(val *OracleDBConfigRedoLogGroupConf) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDBConfigRedoLogGroupConf) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDBConfigRedoLogGroupConf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDBConfigRedoLogGroupConf(val *OracleDBConfigRedoLogGroupConf) *NullableOracleDBConfigRedoLogGroupConf {
	return &NullableOracleDBConfigRedoLogGroupConf{value: val, isSet: true}
}

func (v NullableOracleDBConfigRedoLogGroupConf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDBConfigRedoLogGroupConf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


