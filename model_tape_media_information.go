/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TapeMediaInformation Provides information about a single tape media in a QStar Archive Vault.
type TapeMediaInformation struct {
	// Specifies a unique identifier for the media.
	Barcode NullableString `json:"barcode,omitempty"`
	// Specifies the location of the offline media as recorded by the backup administrator using media management software.
	Location NullableString `json:"location,omitempty"`
	// Specifies a flag that indicates if the media is online or offline. Offline media must be manually loaded into the media library before a recovery can occur.
	Online NullableBool `json:"online,omitempty"`
}

// NewTapeMediaInformation instantiates a new TapeMediaInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTapeMediaInformation() *TapeMediaInformation {
	this := TapeMediaInformation{}
	return &this
}

// NewTapeMediaInformationWithDefaults instantiates a new TapeMediaInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTapeMediaInformationWithDefaults() *TapeMediaInformation {
	this := TapeMediaInformation{}
	return &this
}

// GetBarcode returns the Barcode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TapeMediaInformation) GetBarcode() string {
	if o == nil || o.Barcode.Get() == nil {
		var ret string
		return ret
	}
	return *o.Barcode.Get()
}

// GetBarcodeOk returns a tuple with the Barcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TapeMediaInformation) GetBarcodeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Barcode.Get(), o.Barcode.IsSet()
}

// HasBarcode returns a boolean if a field has been set.
func (o *TapeMediaInformation) HasBarcode() bool {
	if o != nil && o.Barcode.IsSet() {
		return true
	}

	return false
}

// SetBarcode gets a reference to the given NullableString and assigns it to the Barcode field.
func (o *TapeMediaInformation) SetBarcode(v string) {
	o.Barcode.Set(&v)
}
// SetBarcodeNil sets the value for Barcode to be an explicit nil
func (o *TapeMediaInformation) SetBarcodeNil() {
	o.Barcode.Set(nil)
}

// UnsetBarcode ensures that no value is present for Barcode, not even an explicit nil
func (o *TapeMediaInformation) UnsetBarcode() {
	o.Barcode.Unset()
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TapeMediaInformation) GetLocation() string {
	if o == nil || o.Location.Get() == nil {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TapeMediaInformation) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *TapeMediaInformation) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *TapeMediaInformation) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *TapeMediaInformation) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *TapeMediaInformation) UnsetLocation() {
	o.Location.Unset()
}

// GetOnline returns the Online field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TapeMediaInformation) GetOnline() bool {
	if o == nil || o.Online.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Online.Get()
}

// GetOnlineOk returns a tuple with the Online field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TapeMediaInformation) GetOnlineOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Online.Get(), o.Online.IsSet()
}

// HasOnline returns a boolean if a field has been set.
func (o *TapeMediaInformation) HasOnline() bool {
	if o != nil && o.Online.IsSet() {
		return true
	}

	return false
}

// SetOnline gets a reference to the given NullableBool and assigns it to the Online field.
func (o *TapeMediaInformation) SetOnline(v bool) {
	o.Online.Set(&v)
}
// SetOnlineNil sets the value for Online to be an explicit nil
func (o *TapeMediaInformation) SetOnlineNil() {
	o.Online.Set(nil)
}

// UnsetOnline ensures that no value is present for Online, not even an explicit nil
func (o *TapeMediaInformation) UnsetOnline() {
	o.Online.Unset()
}

func (o TapeMediaInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Barcode.IsSet() {
		toSerialize["barcode"] = o.Barcode.Get()
	}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.Online.IsSet() {
		toSerialize["online"] = o.Online.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTapeMediaInformation struct {
	value *TapeMediaInformation
	isSet bool
}

func (v NullableTapeMediaInformation) Get() *TapeMediaInformation {
	return v.value
}

func (v *NullableTapeMediaInformation) Set(val *TapeMediaInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableTapeMediaInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableTapeMediaInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTapeMediaInformation(val *TapeMediaInformation) *NullableTapeMediaInformation {
	return &NullableTapeMediaInformation{value: val, isSet: true}
}

func (v NullableTapeMediaInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTapeMediaInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


