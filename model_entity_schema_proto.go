/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// EntitySchemaProto Specifies the meta-data associated with entity such as the list of attributes and time series data.
type EntitySchemaProto struct {
	AttributesDescriptor *EntitySchemaProtoAttributesDescriptor `json:"attributesDescriptor,omitempty"`
	// Timeseries for an entity schema is rolled up based on this setting. Rollup is disabled by default. Rollups cannot be done for metrics with value_type other than kInt64 or kDouble.
	EnableRollup NullableBool `json:"enableRollup,omitempty"`
	// Defines the interval used to flush in memory stats to scribe table. During this time if the stats server is down before flushing, it could loose some of the stats. Modules can flush any critical stats via AddEntitiesStats API. But this  should be used very judiciously as it causes lot of overhead for stats.
	FlushIntervalSecs NullableInt32 `json:"flushIntervalSecs,omitempty"`
	// Specifies if this schema should be displayed in Advanced Diagnostics of the Cohesity Dashboard. If false, the schema is displayed.
	IsInternalSchema NullableBool `json:"isInternalSchema,omitempty"`
	// Use can change the flush interval secs via gflag and this store the largest interval seconds set. This is used to round up the timestamp to this flush interval secs during range scan.
	LargestFlushIntervalSecs NullableInt32 `json:"largestFlushIntervalSecs,omitempty"`
	// Specifies a name that uniquely identifies an entity schema such as 'kBridgeClusterStats'. Name cannot have ':' as character.
	Name NullableString `json:"name,omitempty"`
	RollupGranularityVec []EntitySchemaProtoGranularity `json:"rollupGranularityVec,omitempty"`
	// Specifies the name of the Schema as displayed in Advanced Diagnostics of the Cohesity Dashboard. For example for the 'kBridgeClusterStats' Schema, the descriptive name is 'Cluster Physical Stats'.
	SchemaDescriptiveName NullableString `json:"schemaDescriptiveName,omitempty"`
	// Specifies an optional informational description about the schema.
	SchemaHelpText NullableString `json:"schemaHelpText,omitempty"`
	// Array of Time Series.  List of time series of data (set of data points) for metrics.
	TimeSeriesDescriptorVec []EntitySchemaProtoTimeSeriesDescriptor `json:"timeSeriesDescriptorVec,omitempty"`
	// Specifies how long the timeseries data of this schema will be stored. After expiry the entire data point(all metrics) is garbage collected.
	TimeToLiveSecs NullableInt64 `json:"timeToLiveSecs,omitempty"`
	// Specifies the version of the entity schema.
	Version NullableInt64 `json:"version,omitempty"`
}

// NewEntitySchemaProto instantiates a new EntitySchemaProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntitySchemaProto() *EntitySchemaProto {
	this := EntitySchemaProto{}
	return &this
}

// NewEntitySchemaProtoWithDefaults instantiates a new EntitySchemaProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntitySchemaProtoWithDefaults() *EntitySchemaProto {
	this := EntitySchemaProto{}
	return &this
}

// GetAttributesDescriptor returns the AttributesDescriptor field value if set, zero value otherwise.
func (o *EntitySchemaProto) GetAttributesDescriptor() EntitySchemaProtoAttributesDescriptor {
	if o == nil || o.AttributesDescriptor == nil {
		var ret EntitySchemaProtoAttributesDescriptor
		return ret
	}
	return *o.AttributesDescriptor
}

// GetAttributesDescriptorOk returns a tuple with the AttributesDescriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntitySchemaProto) GetAttributesDescriptorOk() (*EntitySchemaProtoAttributesDescriptor, bool) {
	if o == nil || o.AttributesDescriptor == nil {
		return nil, false
	}
	return o.AttributesDescriptor, true
}

// HasAttributesDescriptor returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasAttributesDescriptor() bool {
	if o != nil && o.AttributesDescriptor != nil {
		return true
	}

	return false
}

// SetAttributesDescriptor gets a reference to the given EntitySchemaProtoAttributesDescriptor and assigns it to the AttributesDescriptor field.
func (o *EntitySchemaProto) SetAttributesDescriptor(v EntitySchemaProtoAttributesDescriptor) {
	o.AttributesDescriptor = &v
}

// GetEnableRollup returns the EnableRollup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetEnableRollup() bool {
	if o == nil || o.EnableRollup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableRollup.Get()
}

// GetEnableRollupOk returns a tuple with the EnableRollup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetEnableRollupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableRollup.Get(), o.EnableRollup.IsSet()
}

// HasEnableRollup returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasEnableRollup() bool {
	if o != nil && o.EnableRollup.IsSet() {
		return true
	}

	return false
}

// SetEnableRollup gets a reference to the given NullableBool and assigns it to the EnableRollup field.
func (o *EntitySchemaProto) SetEnableRollup(v bool) {
	o.EnableRollup.Set(&v)
}
// SetEnableRollupNil sets the value for EnableRollup to be an explicit nil
func (o *EntitySchemaProto) SetEnableRollupNil() {
	o.EnableRollup.Set(nil)
}

// UnsetEnableRollup ensures that no value is present for EnableRollup, not even an explicit nil
func (o *EntitySchemaProto) UnsetEnableRollup() {
	o.EnableRollup.Unset()
}

// GetFlushIntervalSecs returns the FlushIntervalSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetFlushIntervalSecs() int32 {
	if o == nil || o.FlushIntervalSecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FlushIntervalSecs.Get()
}

// GetFlushIntervalSecsOk returns a tuple with the FlushIntervalSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetFlushIntervalSecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FlushIntervalSecs.Get(), o.FlushIntervalSecs.IsSet()
}

// HasFlushIntervalSecs returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasFlushIntervalSecs() bool {
	if o != nil && o.FlushIntervalSecs.IsSet() {
		return true
	}

	return false
}

// SetFlushIntervalSecs gets a reference to the given NullableInt32 and assigns it to the FlushIntervalSecs field.
func (o *EntitySchemaProto) SetFlushIntervalSecs(v int32) {
	o.FlushIntervalSecs.Set(&v)
}
// SetFlushIntervalSecsNil sets the value for FlushIntervalSecs to be an explicit nil
func (o *EntitySchemaProto) SetFlushIntervalSecsNil() {
	o.FlushIntervalSecs.Set(nil)
}

// UnsetFlushIntervalSecs ensures that no value is present for FlushIntervalSecs, not even an explicit nil
func (o *EntitySchemaProto) UnsetFlushIntervalSecs() {
	o.FlushIntervalSecs.Unset()
}

// GetIsInternalSchema returns the IsInternalSchema field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetIsInternalSchema() bool {
	if o == nil || o.IsInternalSchema.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsInternalSchema.Get()
}

// GetIsInternalSchemaOk returns a tuple with the IsInternalSchema field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetIsInternalSchemaOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsInternalSchema.Get(), o.IsInternalSchema.IsSet()
}

// HasIsInternalSchema returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasIsInternalSchema() bool {
	if o != nil && o.IsInternalSchema.IsSet() {
		return true
	}

	return false
}

// SetIsInternalSchema gets a reference to the given NullableBool and assigns it to the IsInternalSchema field.
func (o *EntitySchemaProto) SetIsInternalSchema(v bool) {
	o.IsInternalSchema.Set(&v)
}
// SetIsInternalSchemaNil sets the value for IsInternalSchema to be an explicit nil
func (o *EntitySchemaProto) SetIsInternalSchemaNil() {
	o.IsInternalSchema.Set(nil)
}

// UnsetIsInternalSchema ensures that no value is present for IsInternalSchema, not even an explicit nil
func (o *EntitySchemaProto) UnsetIsInternalSchema() {
	o.IsInternalSchema.Unset()
}

// GetLargestFlushIntervalSecs returns the LargestFlushIntervalSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetLargestFlushIntervalSecs() int32 {
	if o == nil || o.LargestFlushIntervalSecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.LargestFlushIntervalSecs.Get()
}

// GetLargestFlushIntervalSecsOk returns a tuple with the LargestFlushIntervalSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetLargestFlushIntervalSecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LargestFlushIntervalSecs.Get(), o.LargestFlushIntervalSecs.IsSet()
}

// HasLargestFlushIntervalSecs returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasLargestFlushIntervalSecs() bool {
	if o != nil && o.LargestFlushIntervalSecs.IsSet() {
		return true
	}

	return false
}

// SetLargestFlushIntervalSecs gets a reference to the given NullableInt32 and assigns it to the LargestFlushIntervalSecs field.
func (o *EntitySchemaProto) SetLargestFlushIntervalSecs(v int32) {
	o.LargestFlushIntervalSecs.Set(&v)
}
// SetLargestFlushIntervalSecsNil sets the value for LargestFlushIntervalSecs to be an explicit nil
func (o *EntitySchemaProto) SetLargestFlushIntervalSecsNil() {
	o.LargestFlushIntervalSecs.Set(nil)
}

// UnsetLargestFlushIntervalSecs ensures that no value is present for LargestFlushIntervalSecs, not even an explicit nil
func (o *EntitySchemaProto) UnsetLargestFlushIntervalSecs() {
	o.LargestFlushIntervalSecs.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *EntitySchemaProto) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *EntitySchemaProto) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *EntitySchemaProto) UnsetName() {
	o.Name.Unset()
}

// GetRollupGranularityVec returns the RollupGranularityVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetRollupGranularityVec() []EntitySchemaProtoGranularity {
	if o == nil  {
		var ret []EntitySchemaProtoGranularity
		return ret
	}
	return o.RollupGranularityVec
}

// GetRollupGranularityVecOk returns a tuple with the RollupGranularityVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetRollupGranularityVecOk() (*[]EntitySchemaProtoGranularity, bool) {
	if o == nil || o.RollupGranularityVec == nil {
		return nil, false
	}
	return &o.RollupGranularityVec, true
}

// HasRollupGranularityVec returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasRollupGranularityVec() bool {
	if o != nil && o.RollupGranularityVec != nil {
		return true
	}

	return false
}

// SetRollupGranularityVec gets a reference to the given []EntitySchemaProtoGranularity and assigns it to the RollupGranularityVec field.
func (o *EntitySchemaProto) SetRollupGranularityVec(v []EntitySchemaProtoGranularity) {
	o.RollupGranularityVec = v
}

// GetSchemaDescriptiveName returns the SchemaDescriptiveName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetSchemaDescriptiveName() string {
	if o == nil || o.SchemaDescriptiveName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SchemaDescriptiveName.Get()
}

// GetSchemaDescriptiveNameOk returns a tuple with the SchemaDescriptiveName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetSchemaDescriptiveNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SchemaDescriptiveName.Get(), o.SchemaDescriptiveName.IsSet()
}

// HasSchemaDescriptiveName returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasSchemaDescriptiveName() bool {
	if o != nil && o.SchemaDescriptiveName.IsSet() {
		return true
	}

	return false
}

// SetSchemaDescriptiveName gets a reference to the given NullableString and assigns it to the SchemaDescriptiveName field.
func (o *EntitySchemaProto) SetSchemaDescriptiveName(v string) {
	o.SchemaDescriptiveName.Set(&v)
}
// SetSchemaDescriptiveNameNil sets the value for SchemaDescriptiveName to be an explicit nil
func (o *EntitySchemaProto) SetSchemaDescriptiveNameNil() {
	o.SchemaDescriptiveName.Set(nil)
}

// UnsetSchemaDescriptiveName ensures that no value is present for SchemaDescriptiveName, not even an explicit nil
func (o *EntitySchemaProto) UnsetSchemaDescriptiveName() {
	o.SchemaDescriptiveName.Unset()
}

// GetSchemaHelpText returns the SchemaHelpText field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetSchemaHelpText() string {
	if o == nil || o.SchemaHelpText.Get() == nil {
		var ret string
		return ret
	}
	return *o.SchemaHelpText.Get()
}

// GetSchemaHelpTextOk returns a tuple with the SchemaHelpText field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetSchemaHelpTextOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SchemaHelpText.Get(), o.SchemaHelpText.IsSet()
}

// HasSchemaHelpText returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasSchemaHelpText() bool {
	if o != nil && o.SchemaHelpText.IsSet() {
		return true
	}

	return false
}

// SetSchemaHelpText gets a reference to the given NullableString and assigns it to the SchemaHelpText field.
func (o *EntitySchemaProto) SetSchemaHelpText(v string) {
	o.SchemaHelpText.Set(&v)
}
// SetSchemaHelpTextNil sets the value for SchemaHelpText to be an explicit nil
func (o *EntitySchemaProto) SetSchemaHelpTextNil() {
	o.SchemaHelpText.Set(nil)
}

// UnsetSchemaHelpText ensures that no value is present for SchemaHelpText, not even an explicit nil
func (o *EntitySchemaProto) UnsetSchemaHelpText() {
	o.SchemaHelpText.Unset()
}

// GetTimeSeriesDescriptorVec returns the TimeSeriesDescriptorVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetTimeSeriesDescriptorVec() []EntitySchemaProtoTimeSeriesDescriptor {
	if o == nil  {
		var ret []EntitySchemaProtoTimeSeriesDescriptor
		return ret
	}
	return o.TimeSeriesDescriptorVec
}

// GetTimeSeriesDescriptorVecOk returns a tuple with the TimeSeriesDescriptorVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetTimeSeriesDescriptorVecOk() (*[]EntitySchemaProtoTimeSeriesDescriptor, bool) {
	if o == nil || o.TimeSeriesDescriptorVec == nil {
		return nil, false
	}
	return &o.TimeSeriesDescriptorVec, true
}

// HasTimeSeriesDescriptorVec returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasTimeSeriesDescriptorVec() bool {
	if o != nil && o.TimeSeriesDescriptorVec != nil {
		return true
	}

	return false
}

// SetTimeSeriesDescriptorVec gets a reference to the given []EntitySchemaProtoTimeSeriesDescriptor and assigns it to the TimeSeriesDescriptorVec field.
func (o *EntitySchemaProto) SetTimeSeriesDescriptorVec(v []EntitySchemaProtoTimeSeriesDescriptor) {
	o.TimeSeriesDescriptorVec = v
}

// GetTimeToLiveSecs returns the TimeToLiveSecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetTimeToLiveSecs() int64 {
	if o == nil || o.TimeToLiveSecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TimeToLiveSecs.Get()
}

// GetTimeToLiveSecsOk returns a tuple with the TimeToLiveSecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetTimeToLiveSecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TimeToLiveSecs.Get(), o.TimeToLiveSecs.IsSet()
}

// HasTimeToLiveSecs returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasTimeToLiveSecs() bool {
	if o != nil && o.TimeToLiveSecs.IsSet() {
		return true
	}

	return false
}

// SetTimeToLiveSecs gets a reference to the given NullableInt64 and assigns it to the TimeToLiveSecs field.
func (o *EntitySchemaProto) SetTimeToLiveSecs(v int64) {
	o.TimeToLiveSecs.Set(&v)
}
// SetTimeToLiveSecsNil sets the value for TimeToLiveSecs to be an explicit nil
func (o *EntitySchemaProto) SetTimeToLiveSecsNil() {
	o.TimeToLiveSecs.Set(nil)
}

// UnsetTimeToLiveSecs ensures that no value is present for TimeToLiveSecs, not even an explicit nil
func (o *EntitySchemaProto) UnsetTimeToLiveSecs() {
	o.TimeToLiveSecs.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *EntitySchemaProto) GetVersion() int64 {
	if o == nil || o.Version.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *EntitySchemaProto) GetVersionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *EntitySchemaProto) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableInt64 and assigns it to the Version field.
func (o *EntitySchemaProto) SetVersion(v int64) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *EntitySchemaProto) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *EntitySchemaProto) UnsetVersion() {
	o.Version.Unset()
}

func (o EntitySchemaProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AttributesDescriptor != nil {
		toSerialize["attributesDescriptor"] = o.AttributesDescriptor
	}
	if o.EnableRollup.IsSet() {
		toSerialize["enableRollup"] = o.EnableRollup.Get()
	}
	if o.FlushIntervalSecs.IsSet() {
		toSerialize["flushIntervalSecs"] = o.FlushIntervalSecs.Get()
	}
	if o.IsInternalSchema.IsSet() {
		toSerialize["isInternalSchema"] = o.IsInternalSchema.Get()
	}
	if o.LargestFlushIntervalSecs.IsSet() {
		toSerialize["largestFlushIntervalSecs"] = o.LargestFlushIntervalSecs.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.RollupGranularityVec != nil {
		toSerialize["rollupGranularityVec"] = o.RollupGranularityVec
	}
	if o.SchemaDescriptiveName.IsSet() {
		toSerialize["schemaDescriptiveName"] = o.SchemaDescriptiveName.Get()
	}
	if o.SchemaHelpText.IsSet() {
		toSerialize["schemaHelpText"] = o.SchemaHelpText.Get()
	}
	if o.TimeSeriesDescriptorVec != nil {
		toSerialize["timeSeriesDescriptorVec"] = o.TimeSeriesDescriptorVec
	}
	if o.TimeToLiveSecs.IsSet() {
		toSerialize["timeToLiveSecs"] = o.TimeToLiveSecs.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableEntitySchemaProto struct {
	value *EntitySchemaProto
	isSet bool
}

func (v NullableEntitySchemaProto) Get() *EntitySchemaProto {
	return v.value
}

func (v *NullableEntitySchemaProto) Set(val *EntitySchemaProto) {
	v.value = val
	v.isSet = true
}

func (v NullableEntitySchemaProto) IsSet() bool {
	return v.isSet
}

func (v *NullableEntitySchemaProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntitySchemaProto(val *EntitySchemaProto) *NullableEntitySchemaProto {
	return &NullableEntitySchemaProto{value: val, isSet: true}
}

func (v NullableEntitySchemaProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntitySchemaProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


