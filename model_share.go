/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// Share Specifies the share details when request is made for list of shares filtered by ShareName parameter.
type Share struct {
	// Array of SMB Paths.  Specifies the possible paths that can be used to mount this Share as a SMB share. If Active Directory has multiple account names; each machine account has its own path.
	AllSmbMountPaths []string `json:"allSmbMountPaths,omitempty"`
	// Specifies the SMB encryption for the View Alias. If set, it enables the SMB encryption for the View Alias. Encryption is supported only by SMB 3.x dialects. Dialects that do not support would still access data in unencrypted format.
	EnableSmbEncryption NullableBool `json:"enableSmbEncryption,omitempty"`
	// If set, it enables discovery of view alias for SMB.
	EnableSmbViewDiscovery NullableBool `json:"enableSmbViewDiscovery,omitempty"`
	// Specifies the SMB encryption for all the sessions for the View Alias. If set, encryption is enforced for all the sessions for the View Alias. When enabled all future and existing unencrypted sessions are disallowed.
	EnforceSmbEncryption NullableBool `json:"enforceSmbEncryption,omitempty"`
	// Specifies the path for mounting this Share as an NFS share.
	NfsMountPath NullableString `json:"nfsMountPath,omitempty"`
	// Specifies the path information for this share.
	Path NullableString `json:"path,omitempty"`
	// Specifies the path to access this View as an S3 share.
	S3AccessPath NullableString `json:"s3AccessPath,omitempty"`
	// The name of the share.
	ShareName NullableString `json:"shareName,omitempty"`
	// Specifies a list of share level permissions.
	SharePermissions []SmbPermission `json:"sharePermissions,omitempty"`
	// Specifies the main path for mounting this Share as an SMB share.
	SmbMountPath NullableString `json:"smbMountPath,omitempty"`
	// Specifies a list of Subnets with IP addresses that have permissions to access the View Alias. (Overrides the Subnets specified at the global Cohesity Cluster level and View level.)
	SubnetWhitelist []Subnet `json:"subnetWhitelist,omitempty"`
	// Specifies the unique id of the tenant.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the view name this share belongs to.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewShare instantiates a new Share object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewShare() *Share {
	this := Share{}
	return &this
}

// NewShareWithDefaults instantiates a new Share object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewShareWithDefaults() *Share {
	this := Share{}
	return &this
}

// GetAllSmbMountPaths returns the AllSmbMountPaths field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetAllSmbMountPaths() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AllSmbMountPaths
}

// GetAllSmbMountPathsOk returns a tuple with the AllSmbMountPaths field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetAllSmbMountPathsOk() (*[]string, bool) {
	if o == nil || o.AllSmbMountPaths == nil {
		return nil, false
	}
	return &o.AllSmbMountPaths, true
}

// HasAllSmbMountPaths returns a boolean if a field has been set.
func (o *Share) HasAllSmbMountPaths() bool {
	if o != nil && o.AllSmbMountPaths != nil {
		return true
	}

	return false
}

// SetAllSmbMountPaths gets a reference to the given []string and assigns it to the AllSmbMountPaths field.
func (o *Share) SetAllSmbMountPaths(v []string) {
	o.AllSmbMountPaths = v
}

// GetEnableSmbEncryption returns the EnableSmbEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetEnableSmbEncryption() bool {
	if o == nil || o.EnableSmbEncryption.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbEncryption.Get()
}

// GetEnableSmbEncryptionOk returns a tuple with the EnableSmbEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetEnableSmbEncryptionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbEncryption.Get(), o.EnableSmbEncryption.IsSet()
}

// HasEnableSmbEncryption returns a boolean if a field has been set.
func (o *Share) HasEnableSmbEncryption() bool {
	if o != nil && o.EnableSmbEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbEncryption gets a reference to the given NullableBool and assigns it to the EnableSmbEncryption field.
func (o *Share) SetEnableSmbEncryption(v bool) {
	o.EnableSmbEncryption.Set(&v)
}
// SetEnableSmbEncryptionNil sets the value for EnableSmbEncryption to be an explicit nil
func (o *Share) SetEnableSmbEncryptionNil() {
	o.EnableSmbEncryption.Set(nil)
}

// UnsetEnableSmbEncryption ensures that no value is present for EnableSmbEncryption, not even an explicit nil
func (o *Share) UnsetEnableSmbEncryption() {
	o.EnableSmbEncryption.Unset()
}

// GetEnableSmbViewDiscovery returns the EnableSmbViewDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetEnableSmbViewDiscovery() bool {
	if o == nil || o.EnableSmbViewDiscovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbViewDiscovery.Get()
}

// GetEnableSmbViewDiscoveryOk returns a tuple with the EnableSmbViewDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetEnableSmbViewDiscoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbViewDiscovery.Get(), o.EnableSmbViewDiscovery.IsSet()
}

// HasEnableSmbViewDiscovery returns a boolean if a field has been set.
func (o *Share) HasEnableSmbViewDiscovery() bool {
	if o != nil && o.EnableSmbViewDiscovery.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbViewDiscovery gets a reference to the given NullableBool and assigns it to the EnableSmbViewDiscovery field.
func (o *Share) SetEnableSmbViewDiscovery(v bool) {
	o.EnableSmbViewDiscovery.Set(&v)
}
// SetEnableSmbViewDiscoveryNil sets the value for EnableSmbViewDiscovery to be an explicit nil
func (o *Share) SetEnableSmbViewDiscoveryNil() {
	o.EnableSmbViewDiscovery.Set(nil)
}

// UnsetEnableSmbViewDiscovery ensures that no value is present for EnableSmbViewDiscovery, not even an explicit nil
func (o *Share) UnsetEnableSmbViewDiscovery() {
	o.EnableSmbViewDiscovery.Unset()
}

// GetEnforceSmbEncryption returns the EnforceSmbEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetEnforceSmbEncryption() bool {
	if o == nil || o.EnforceSmbEncryption.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnforceSmbEncryption.Get()
}

// GetEnforceSmbEncryptionOk returns a tuple with the EnforceSmbEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetEnforceSmbEncryptionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnforceSmbEncryption.Get(), o.EnforceSmbEncryption.IsSet()
}

// HasEnforceSmbEncryption returns a boolean if a field has been set.
func (o *Share) HasEnforceSmbEncryption() bool {
	if o != nil && o.EnforceSmbEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnforceSmbEncryption gets a reference to the given NullableBool and assigns it to the EnforceSmbEncryption field.
func (o *Share) SetEnforceSmbEncryption(v bool) {
	o.EnforceSmbEncryption.Set(&v)
}
// SetEnforceSmbEncryptionNil sets the value for EnforceSmbEncryption to be an explicit nil
func (o *Share) SetEnforceSmbEncryptionNil() {
	o.EnforceSmbEncryption.Set(nil)
}

// UnsetEnforceSmbEncryption ensures that no value is present for EnforceSmbEncryption, not even an explicit nil
func (o *Share) UnsetEnforceSmbEncryption() {
	o.EnforceSmbEncryption.Unset()
}

// GetNfsMountPath returns the NfsMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetNfsMountPath() string {
	if o == nil || o.NfsMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.NfsMountPath.Get()
}

// GetNfsMountPathOk returns a tuple with the NfsMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetNfsMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsMountPath.Get(), o.NfsMountPath.IsSet()
}

// HasNfsMountPath returns a boolean if a field has been set.
func (o *Share) HasNfsMountPath() bool {
	if o != nil && o.NfsMountPath.IsSet() {
		return true
	}

	return false
}

// SetNfsMountPath gets a reference to the given NullableString and assigns it to the NfsMountPath field.
func (o *Share) SetNfsMountPath(v string) {
	o.NfsMountPath.Set(&v)
}
// SetNfsMountPathNil sets the value for NfsMountPath to be an explicit nil
func (o *Share) SetNfsMountPathNil() {
	o.NfsMountPath.Set(nil)
}

// UnsetNfsMountPath ensures that no value is present for NfsMountPath, not even an explicit nil
func (o *Share) UnsetNfsMountPath() {
	o.NfsMountPath.Unset()
}

// GetPath returns the Path field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetPath() string {
	if o == nil || o.Path.Get() == nil {
		var ret string
		return ret
	}
	return *o.Path.Get()
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Path.Get(), o.Path.IsSet()
}

// HasPath returns a boolean if a field has been set.
func (o *Share) HasPath() bool {
	if o != nil && o.Path.IsSet() {
		return true
	}

	return false
}

// SetPath gets a reference to the given NullableString and assigns it to the Path field.
func (o *Share) SetPath(v string) {
	o.Path.Set(&v)
}
// SetPathNil sets the value for Path to be an explicit nil
func (o *Share) SetPathNil() {
	o.Path.Set(nil)
}

// UnsetPath ensures that no value is present for Path, not even an explicit nil
func (o *Share) UnsetPath() {
	o.Path.Unset()
}

// GetS3AccessPath returns the S3AccessPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetS3AccessPath() string {
	if o == nil || o.S3AccessPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.S3AccessPath.Get()
}

// GetS3AccessPathOk returns a tuple with the S3AccessPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetS3AccessPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.S3AccessPath.Get(), o.S3AccessPath.IsSet()
}

// HasS3AccessPath returns a boolean if a field has been set.
func (o *Share) HasS3AccessPath() bool {
	if o != nil && o.S3AccessPath.IsSet() {
		return true
	}

	return false
}

// SetS3AccessPath gets a reference to the given NullableString and assigns it to the S3AccessPath field.
func (o *Share) SetS3AccessPath(v string) {
	o.S3AccessPath.Set(&v)
}
// SetS3AccessPathNil sets the value for S3AccessPath to be an explicit nil
func (o *Share) SetS3AccessPathNil() {
	o.S3AccessPath.Set(nil)
}

// UnsetS3AccessPath ensures that no value is present for S3AccessPath, not even an explicit nil
func (o *Share) UnsetS3AccessPath() {
	o.S3AccessPath.Unset()
}

// GetShareName returns the ShareName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetShareName() string {
	if o == nil || o.ShareName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShareName.Get()
}

// GetShareNameOk returns a tuple with the ShareName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetShareNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ShareName.Get(), o.ShareName.IsSet()
}

// HasShareName returns a boolean if a field has been set.
func (o *Share) HasShareName() bool {
	if o != nil && o.ShareName.IsSet() {
		return true
	}

	return false
}

// SetShareName gets a reference to the given NullableString and assigns it to the ShareName field.
func (o *Share) SetShareName(v string) {
	o.ShareName.Set(&v)
}
// SetShareNameNil sets the value for ShareName to be an explicit nil
func (o *Share) SetShareNameNil() {
	o.ShareName.Set(nil)
}

// UnsetShareName ensures that no value is present for ShareName, not even an explicit nil
func (o *Share) UnsetShareName() {
	o.ShareName.Unset()
}

// GetSharePermissions returns the SharePermissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetSharePermissions() []SmbPermission {
	if o == nil  {
		var ret []SmbPermission
		return ret
	}
	return o.SharePermissions
}

// GetSharePermissionsOk returns a tuple with the SharePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetSharePermissionsOk() (*[]SmbPermission, bool) {
	if o == nil || o.SharePermissions == nil {
		return nil, false
	}
	return &o.SharePermissions, true
}

// HasSharePermissions returns a boolean if a field has been set.
func (o *Share) HasSharePermissions() bool {
	if o != nil && o.SharePermissions != nil {
		return true
	}

	return false
}

// SetSharePermissions gets a reference to the given []SmbPermission and assigns it to the SharePermissions field.
func (o *Share) SetSharePermissions(v []SmbPermission) {
	o.SharePermissions = v
}

// GetSmbMountPath returns the SmbMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetSmbMountPath() string {
	if o == nil || o.SmbMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.SmbMountPath.Get()
}

// GetSmbMountPathOk returns a tuple with the SmbMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetSmbMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SmbMountPath.Get(), o.SmbMountPath.IsSet()
}

// HasSmbMountPath returns a boolean if a field has been set.
func (o *Share) HasSmbMountPath() bool {
	if o != nil && o.SmbMountPath.IsSet() {
		return true
	}

	return false
}

// SetSmbMountPath gets a reference to the given NullableString and assigns it to the SmbMountPath field.
func (o *Share) SetSmbMountPath(v string) {
	o.SmbMountPath.Set(&v)
}
// SetSmbMountPathNil sets the value for SmbMountPath to be an explicit nil
func (o *Share) SetSmbMountPathNil() {
	o.SmbMountPath.Set(nil)
}

// UnsetSmbMountPath ensures that no value is present for SmbMountPath, not even an explicit nil
func (o *Share) UnsetSmbMountPath() {
	o.SmbMountPath.Unset()
}

// GetSubnetWhitelist returns the SubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetSubnetWhitelist() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.SubnetWhitelist
}

// GetSubnetWhitelistOk returns a tuple with the SubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetSubnetWhitelistOk() (*[]Subnet, bool) {
	if o == nil || o.SubnetWhitelist == nil {
		return nil, false
	}
	return &o.SubnetWhitelist, true
}

// HasSubnetWhitelist returns a boolean if a field has been set.
func (o *Share) HasSubnetWhitelist() bool {
	if o != nil && o.SubnetWhitelist != nil {
		return true
	}

	return false
}

// SetSubnetWhitelist gets a reference to the given []Subnet and assigns it to the SubnetWhitelist field.
func (o *Share) SetSubnetWhitelist(v []Subnet) {
	o.SubnetWhitelist = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *Share) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *Share) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *Share) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *Share) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Share) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Share) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *Share) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *Share) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *Share) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *Share) UnsetViewName() {
	o.ViewName.Unset()
}

func (o Share) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllSmbMountPaths != nil {
		toSerialize["allSmbMountPaths"] = o.AllSmbMountPaths
	}
	if o.EnableSmbEncryption.IsSet() {
		toSerialize["enableSmbEncryption"] = o.EnableSmbEncryption.Get()
	}
	if o.EnableSmbViewDiscovery.IsSet() {
		toSerialize["enableSmbViewDiscovery"] = o.EnableSmbViewDiscovery.Get()
	}
	if o.EnforceSmbEncryption.IsSet() {
		toSerialize["enforceSmbEncryption"] = o.EnforceSmbEncryption.Get()
	}
	if o.NfsMountPath.IsSet() {
		toSerialize["nfsMountPath"] = o.NfsMountPath.Get()
	}
	if o.Path.IsSet() {
		toSerialize["path"] = o.Path.Get()
	}
	if o.S3AccessPath.IsSet() {
		toSerialize["s3AccessPath"] = o.S3AccessPath.Get()
	}
	if o.ShareName.IsSet() {
		toSerialize["shareName"] = o.ShareName.Get()
	}
	if o.SharePermissions != nil {
		toSerialize["sharePermissions"] = o.SharePermissions
	}
	if o.SmbMountPath.IsSet() {
		toSerialize["smbMountPath"] = o.SmbMountPath.Get()
	}
	if o.SubnetWhitelist != nil {
		toSerialize["subnetWhitelist"] = o.SubnetWhitelist
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableShare struct {
	value *Share
	isSet bool
}

func (v NullableShare) Get() *Share {
	return v.value
}

func (v *NullableShare) Set(val *Share) {
	v.value = val
	v.isSet = true
}

func (v NullableShare) IsSet() bool {
	return v.isSet
}

func (v *NullableShare) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableShare(val *Share) *NullableShare {
	return &NullableShare{value: val, isSet: true}
}

func (v NullableShare) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableShare) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


