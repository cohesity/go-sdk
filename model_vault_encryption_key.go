/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VaultEncryptionKey Specifies the encryption information needed to restore data.
type VaultEncryptionKey struct {
	// Specifies the name of the source Cohesity Cluster that archived the data on the Vault.
	ClusterName NullableString `json:"clusterName,omitempty"`
	// Specifies the encryption key data corresponding to the specified keyUid. It contains a Key Encryption Key (KEK) or a Encrypted Data Encryption Key (eDEK).
	EncryptionKeyData NullableString `json:"encryptionKeyData,omitempty"`
	// Specifies the universal id of the Data Encryption Key.
	KeyUid NullableUniversalId `json:"keyUid,omitempty"`
	// Specifies the id of the Vault whose data is encrypted by this key.
	VaultId NullableInt64 `json:"vaultId,omitempty"`
	// Specifies the name of the Vault whose data is encrypted by this key.
	VaultName NullableString `json:"vaultName,omitempty"`
}

// NewVaultEncryptionKey instantiates a new VaultEncryptionKey object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultEncryptionKey() *VaultEncryptionKey {
	this := VaultEncryptionKey{}
	return &this
}

// NewVaultEncryptionKeyWithDefaults instantiates a new VaultEncryptionKey object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultEncryptionKeyWithDefaults() *VaultEncryptionKey {
	this := VaultEncryptionKey{}
	return &this
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultEncryptionKey) GetClusterName() string {
	if o == nil || o.ClusterName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterName.Get()
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultEncryptionKey) GetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterName.Get(), o.ClusterName.IsSet()
}

// HasClusterName returns a boolean if a field has been set.
func (o *VaultEncryptionKey) HasClusterName() bool {
	if o != nil && o.ClusterName.IsSet() {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given NullableString and assigns it to the ClusterName field.
func (o *VaultEncryptionKey) SetClusterName(v string) {
	o.ClusterName.Set(&v)
}
// SetClusterNameNil sets the value for ClusterName to be an explicit nil
func (o *VaultEncryptionKey) SetClusterNameNil() {
	o.ClusterName.Set(nil)
}

// UnsetClusterName ensures that no value is present for ClusterName, not even an explicit nil
func (o *VaultEncryptionKey) UnsetClusterName() {
	o.ClusterName.Unset()
}

// GetEncryptionKeyData returns the EncryptionKeyData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultEncryptionKey) GetEncryptionKeyData() string {
	if o == nil || o.EncryptionKeyData.Get() == nil {
		var ret string
		return ret
	}
	return *o.EncryptionKeyData.Get()
}

// GetEncryptionKeyDataOk returns a tuple with the EncryptionKeyData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultEncryptionKey) GetEncryptionKeyDataOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EncryptionKeyData.Get(), o.EncryptionKeyData.IsSet()
}

// HasEncryptionKeyData returns a boolean if a field has been set.
func (o *VaultEncryptionKey) HasEncryptionKeyData() bool {
	if o != nil && o.EncryptionKeyData.IsSet() {
		return true
	}

	return false
}

// SetEncryptionKeyData gets a reference to the given NullableString and assigns it to the EncryptionKeyData field.
func (o *VaultEncryptionKey) SetEncryptionKeyData(v string) {
	o.EncryptionKeyData.Set(&v)
}
// SetEncryptionKeyDataNil sets the value for EncryptionKeyData to be an explicit nil
func (o *VaultEncryptionKey) SetEncryptionKeyDataNil() {
	o.EncryptionKeyData.Set(nil)
}

// UnsetEncryptionKeyData ensures that no value is present for EncryptionKeyData, not even an explicit nil
func (o *VaultEncryptionKey) UnsetEncryptionKeyData() {
	o.EncryptionKeyData.Unset()
}

// GetKeyUid returns the KeyUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultEncryptionKey) GetKeyUid() UniversalId {
	if o == nil || o.KeyUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.KeyUid.Get()
}

// GetKeyUidOk returns a tuple with the KeyUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultEncryptionKey) GetKeyUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KeyUid.Get(), o.KeyUid.IsSet()
}

// HasKeyUid returns a boolean if a field has been set.
func (o *VaultEncryptionKey) HasKeyUid() bool {
	if o != nil && o.KeyUid.IsSet() {
		return true
	}

	return false
}

// SetKeyUid gets a reference to the given NullableUniversalId and assigns it to the KeyUid field.
func (o *VaultEncryptionKey) SetKeyUid(v UniversalId) {
	o.KeyUid.Set(&v)
}
// SetKeyUidNil sets the value for KeyUid to be an explicit nil
func (o *VaultEncryptionKey) SetKeyUidNil() {
	o.KeyUid.Set(nil)
}

// UnsetKeyUid ensures that no value is present for KeyUid, not even an explicit nil
func (o *VaultEncryptionKey) UnsetKeyUid() {
	o.KeyUid.Unset()
}

// GetVaultId returns the VaultId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultEncryptionKey) GetVaultId() int64 {
	if o == nil || o.VaultId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.VaultId.Get()
}

// GetVaultIdOk returns a tuple with the VaultId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultEncryptionKey) GetVaultIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VaultId.Get(), o.VaultId.IsSet()
}

// HasVaultId returns a boolean if a field has been set.
func (o *VaultEncryptionKey) HasVaultId() bool {
	if o != nil && o.VaultId.IsSet() {
		return true
	}

	return false
}

// SetVaultId gets a reference to the given NullableInt64 and assigns it to the VaultId field.
func (o *VaultEncryptionKey) SetVaultId(v int64) {
	o.VaultId.Set(&v)
}
// SetVaultIdNil sets the value for VaultId to be an explicit nil
func (o *VaultEncryptionKey) SetVaultIdNil() {
	o.VaultId.Set(nil)
}

// UnsetVaultId ensures that no value is present for VaultId, not even an explicit nil
func (o *VaultEncryptionKey) UnsetVaultId() {
	o.VaultId.Unset()
}

// GetVaultName returns the VaultName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VaultEncryptionKey) GetVaultName() string {
	if o == nil || o.VaultName.Get() == nil {
		var ret string
		return ret
	}
	return *o.VaultName.Get()
}

// GetVaultNameOk returns a tuple with the VaultName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VaultEncryptionKey) GetVaultNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VaultName.Get(), o.VaultName.IsSet()
}

// HasVaultName returns a boolean if a field has been set.
func (o *VaultEncryptionKey) HasVaultName() bool {
	if o != nil && o.VaultName.IsSet() {
		return true
	}

	return false
}

// SetVaultName gets a reference to the given NullableString and assigns it to the VaultName field.
func (o *VaultEncryptionKey) SetVaultName(v string) {
	o.VaultName.Set(&v)
}
// SetVaultNameNil sets the value for VaultName to be an explicit nil
func (o *VaultEncryptionKey) SetVaultNameNil() {
	o.VaultName.Set(nil)
}

// UnsetVaultName ensures that no value is present for VaultName, not even an explicit nil
func (o *VaultEncryptionKey) UnsetVaultName() {
	o.VaultName.Unset()
}

func (o VaultEncryptionKey) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterName.IsSet() {
		toSerialize["clusterName"] = o.ClusterName.Get()
	}
	if o.EncryptionKeyData.IsSet() {
		toSerialize["encryptionKeyData"] = o.EncryptionKeyData.Get()
	}
	if o.KeyUid.IsSet() {
		toSerialize["keyUid"] = o.KeyUid.Get()
	}
	if o.VaultId.IsSet() {
		toSerialize["vaultId"] = o.VaultId.Get()
	}
	if o.VaultName.IsSet() {
		toSerialize["vaultName"] = o.VaultName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVaultEncryptionKey struct {
	value *VaultEncryptionKey
	isSet bool
}

func (v NullableVaultEncryptionKey) Get() *VaultEncryptionKey {
	return v.value
}

func (v *NullableVaultEncryptionKey) Set(val *VaultEncryptionKey) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultEncryptionKey) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultEncryptionKey) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultEncryptionKey(val *VaultEncryptionKey) *NullableVaultEncryptionKey {
	return &NullableVaultEncryptionKey{value: val, isSet: true}
}

func (v NullableVaultEncryptionKey) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultEncryptionKey) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


