/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ExpandPhysicalClusterParameters Specifies the parameters needed to expand a Cohesity Physical Edition Cluster.
type ExpandPhysicalClusterParameters struct {
	// ChassisSerialToRackId map.
	ChassisSerialToRackIdMap map[string]int64 `json:"chassisSerialToRackIdMap,omitempty"`
	// Specifies the configuration details of the Nodes in the Cluster.
	NodeConfigs []PhysicalNodeConfiguration `json:"nodeConfigs"`
	// Specifies the virtual IPs to add to the Cluster.
	Vips []string `json:"vips,omitempty"`
}

// NewExpandPhysicalClusterParameters instantiates a new ExpandPhysicalClusterParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExpandPhysicalClusterParameters(nodeConfigs []PhysicalNodeConfiguration) *ExpandPhysicalClusterParameters {
	this := ExpandPhysicalClusterParameters{}
	this.NodeConfigs = nodeConfigs
	return &this
}

// NewExpandPhysicalClusterParametersWithDefaults instantiates a new ExpandPhysicalClusterParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExpandPhysicalClusterParametersWithDefaults() *ExpandPhysicalClusterParameters {
	this := ExpandPhysicalClusterParameters{}
	return &this
}

// GetChassisSerialToRackIdMap returns the ChassisSerialToRackIdMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpandPhysicalClusterParameters) GetChassisSerialToRackIdMap() map[string]int64 {
	if o == nil  {
		var ret map[string]int64
		return ret
	}
	return o.ChassisSerialToRackIdMap
}

// GetChassisSerialToRackIdMapOk returns a tuple with the ChassisSerialToRackIdMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpandPhysicalClusterParameters) GetChassisSerialToRackIdMapOk() (*map[string]int64, bool) {
	if o == nil || o.ChassisSerialToRackIdMap == nil {
		return nil, false
	}
	return &o.ChassisSerialToRackIdMap, true
}

// HasChassisSerialToRackIdMap returns a boolean if a field has been set.
func (o *ExpandPhysicalClusterParameters) HasChassisSerialToRackIdMap() bool {
	if o != nil && o.ChassisSerialToRackIdMap != nil {
		return true
	}

	return false
}

// SetChassisSerialToRackIdMap gets a reference to the given map[string]int64 and assigns it to the ChassisSerialToRackIdMap field.
func (o *ExpandPhysicalClusterParameters) SetChassisSerialToRackIdMap(v map[string]int64) {
	o.ChassisSerialToRackIdMap = v
}

// GetNodeConfigs returns the NodeConfigs field value
// If the value is explicit nil, the zero value for []PhysicalNodeConfiguration will be returned
func (o *ExpandPhysicalClusterParameters) GetNodeConfigs() []PhysicalNodeConfiguration {
	if o == nil {
		var ret []PhysicalNodeConfiguration
		return ret
	}

	return o.NodeConfigs
}

// GetNodeConfigsOk returns a tuple with the NodeConfigs field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpandPhysicalClusterParameters) GetNodeConfigsOk() (*[]PhysicalNodeConfiguration, bool) {
	if o == nil || o.NodeConfigs == nil {
		return nil, false
	}
	return &o.NodeConfigs, true
}

// SetNodeConfigs sets field value
func (o *ExpandPhysicalClusterParameters) SetNodeConfigs(v []PhysicalNodeConfiguration) {
	o.NodeConfigs = v
}

// GetVips returns the Vips field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExpandPhysicalClusterParameters) GetVips() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Vips
}

// GetVipsOk returns a tuple with the Vips field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExpandPhysicalClusterParameters) GetVipsOk() (*[]string, bool) {
	if o == nil || o.Vips == nil {
		return nil, false
	}
	return &o.Vips, true
}

// HasVips returns a boolean if a field has been set.
func (o *ExpandPhysicalClusterParameters) HasVips() bool {
	if o != nil && o.Vips != nil {
		return true
	}

	return false
}

// SetVips gets a reference to the given []string and assigns it to the Vips field.
func (o *ExpandPhysicalClusterParameters) SetVips(v []string) {
	o.Vips = v
}

func (o ExpandPhysicalClusterParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChassisSerialToRackIdMap != nil {
		toSerialize["chassisSerialToRackIdMap"] = o.ChassisSerialToRackIdMap
	}
	if o.NodeConfigs != nil {
		toSerialize["nodeConfigs"] = o.NodeConfigs
	}
	if o.Vips != nil {
		toSerialize["vips"] = o.Vips
	}
	return json.Marshal(toSerialize)
}

type NullableExpandPhysicalClusterParameters struct {
	value *ExpandPhysicalClusterParameters
	isSet bool
}

func (v NullableExpandPhysicalClusterParameters) Get() *ExpandPhysicalClusterParameters {
	return v.value
}

func (v *NullableExpandPhysicalClusterParameters) Set(val *ExpandPhysicalClusterParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableExpandPhysicalClusterParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableExpandPhysicalClusterParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExpandPhysicalClusterParameters(val *ExpandPhysicalClusterParameters) *NullableExpandPhysicalClusterParameters {
	return &NullableExpandPhysicalClusterParameters{value: val, isSet: true}
}

func (v NullableExpandPhysicalClusterParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExpandPhysicalClusterParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


