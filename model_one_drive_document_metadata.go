/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OneDriveDocumentMetadata Specifies the metadata for the OneDrive document.
type OneDriveDocumentMetadata struct {
	// Specifies the type of OneDrive document(file/folder). Specifies the OneDrive document type.  'kFile' specifies a file. 'kFolder' specifies a folder.
	DocumentType NullableString `json:"documentType,omitempty"`
}

// NewOneDriveDocumentMetadata instantiates a new OneDriveDocumentMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOneDriveDocumentMetadata() *OneDriveDocumentMetadata {
	this := OneDriveDocumentMetadata{}
	return &this
}

// NewOneDriveDocumentMetadataWithDefaults instantiates a new OneDriveDocumentMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOneDriveDocumentMetadataWithDefaults() *OneDriveDocumentMetadata {
	this := OneDriveDocumentMetadata{}
	return &this
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveDocumentMetadata) GetDocumentType() string {
	if o == nil || o.DocumentType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocumentType.Get()
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveDocumentMetadata) GetDocumentTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocumentType.Get(), o.DocumentType.IsSet()
}

// HasDocumentType returns a boolean if a field has been set.
func (o *OneDriveDocumentMetadata) HasDocumentType() bool {
	if o != nil && o.DocumentType.IsSet() {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given NullableString and assigns it to the DocumentType field.
func (o *OneDriveDocumentMetadata) SetDocumentType(v string) {
	o.DocumentType.Set(&v)
}
// SetDocumentTypeNil sets the value for DocumentType to be an explicit nil
func (o *OneDriveDocumentMetadata) SetDocumentTypeNil() {
	o.DocumentType.Set(nil)
}

// UnsetDocumentType ensures that no value is present for DocumentType, not even an explicit nil
func (o *OneDriveDocumentMetadata) UnsetDocumentType() {
	o.DocumentType.Unset()
}

func (o OneDriveDocumentMetadata) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DocumentType.IsSet() {
		toSerialize["documentType"] = o.DocumentType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOneDriveDocumentMetadata struct {
	value *OneDriveDocumentMetadata
	isSet bool
}

func (v NullableOneDriveDocumentMetadata) Get() *OneDriveDocumentMetadata {
	return v.value
}

func (v *NullableOneDriveDocumentMetadata) Set(val *OneDriveDocumentMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableOneDriveDocumentMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableOneDriveDocumentMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneDriveDocumentMetadata(val *OneDriveDocumentMetadata) *NullableOneDriveDocumentMetadata {
	return &NullableOneDriveDocumentMetadata{value: val, isSet: true}
}

func (v NullableOneDriveDocumentMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneDriveDocumentMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


