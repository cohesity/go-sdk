/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CopyRunStats Stats for one copy task or aggregated stats of a Copy Run in a Protection Job Run.
type CopyRunStats struct {
	// Specifies the time when this replication ended. If not set, then the replication has not ended yet.
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// Specifies whether this archival is incremental for archival targets.
	IsIncremental NullableBool `json:"isIncremental,omitempty"`
	// Specifies the number of logical bytes transferred for this replication so far. This value can never exceed the total logical size of the replicated view.
	LogicalBytesTransferred NullableInt64 `json:"logicalBytesTransferred,omitempty"`
	// Specifies the total amount of logical data to be transferred for this replication.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
	// Specifies average logical bytes transfer rate in bytes per second for archchival targets.
	LogicalTransferRateBps NullableInt64 `json:"logicalTransferRateBps,omitempty"`
	// Specifies the number of physical bytes sent over the wire for replication targets.
	PhysicalBytesTransferred NullableInt64 `json:"physicalBytesTransferred,omitempty"`
	// Specifies the time when this replication was started. If not set, then replication has not been started yet.
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
}

// NewCopyRunStats instantiates a new CopyRunStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCopyRunStats() *CopyRunStats {
	this := CopyRunStats{}
	return &this
}

// NewCopyRunStatsWithDefaults instantiates a new CopyRunStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCopyRunStatsWithDefaults() *CopyRunStats {
	this := CopyRunStats{}
	return &this
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRunStats) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRunStats) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *CopyRunStats) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *CopyRunStats) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *CopyRunStats) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *CopyRunStats) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetIsIncremental returns the IsIncremental field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRunStats) GetIsIncremental() bool {
	if o == nil || o.IsIncremental.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsIncremental.Get()
}

// GetIsIncrementalOk returns a tuple with the IsIncremental field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRunStats) GetIsIncrementalOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsIncremental.Get(), o.IsIncremental.IsSet()
}

// HasIsIncremental returns a boolean if a field has been set.
func (o *CopyRunStats) HasIsIncremental() bool {
	if o != nil && o.IsIncremental.IsSet() {
		return true
	}

	return false
}

// SetIsIncremental gets a reference to the given NullableBool and assigns it to the IsIncremental field.
func (o *CopyRunStats) SetIsIncremental(v bool) {
	o.IsIncremental.Set(&v)
}
// SetIsIncrementalNil sets the value for IsIncremental to be an explicit nil
func (o *CopyRunStats) SetIsIncrementalNil() {
	o.IsIncremental.Set(nil)
}

// UnsetIsIncremental ensures that no value is present for IsIncremental, not even an explicit nil
func (o *CopyRunStats) UnsetIsIncremental() {
	o.IsIncremental.Unset()
}

// GetLogicalBytesTransferred returns the LogicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRunStats) GetLogicalBytesTransferred() int64 {
	if o == nil || o.LogicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalBytesTransferred.Get()
}

// GetLogicalBytesTransferredOk returns a tuple with the LogicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRunStats) GetLogicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalBytesTransferred.Get(), o.LogicalBytesTransferred.IsSet()
}

// HasLogicalBytesTransferred returns a boolean if a field has been set.
func (o *CopyRunStats) HasLogicalBytesTransferred() bool {
	if o != nil && o.LogicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetLogicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the LogicalBytesTransferred field.
func (o *CopyRunStats) SetLogicalBytesTransferred(v int64) {
	o.LogicalBytesTransferred.Set(&v)
}
// SetLogicalBytesTransferredNil sets the value for LogicalBytesTransferred to be an explicit nil
func (o *CopyRunStats) SetLogicalBytesTransferredNil() {
	o.LogicalBytesTransferred.Set(nil)
}

// UnsetLogicalBytesTransferred ensures that no value is present for LogicalBytesTransferred, not even an explicit nil
func (o *CopyRunStats) UnsetLogicalBytesTransferred() {
	o.LogicalBytesTransferred.Unset()
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRunStats) GetLogicalSizeBytes() int64 {
	if o == nil || o.LogicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRunStats) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *CopyRunStats) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *CopyRunStats) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *CopyRunStats) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *CopyRunStats) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetLogicalTransferRateBps returns the LogicalTransferRateBps field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRunStats) GetLogicalTransferRateBps() int64 {
	if o == nil || o.LogicalTransferRateBps.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalTransferRateBps.Get()
}

// GetLogicalTransferRateBpsOk returns a tuple with the LogicalTransferRateBps field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRunStats) GetLogicalTransferRateBpsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalTransferRateBps.Get(), o.LogicalTransferRateBps.IsSet()
}

// HasLogicalTransferRateBps returns a boolean if a field has been set.
func (o *CopyRunStats) HasLogicalTransferRateBps() bool {
	if o != nil && o.LogicalTransferRateBps.IsSet() {
		return true
	}

	return false
}

// SetLogicalTransferRateBps gets a reference to the given NullableInt64 and assigns it to the LogicalTransferRateBps field.
func (o *CopyRunStats) SetLogicalTransferRateBps(v int64) {
	o.LogicalTransferRateBps.Set(&v)
}
// SetLogicalTransferRateBpsNil sets the value for LogicalTransferRateBps to be an explicit nil
func (o *CopyRunStats) SetLogicalTransferRateBpsNil() {
	o.LogicalTransferRateBps.Set(nil)
}

// UnsetLogicalTransferRateBps ensures that no value is present for LogicalTransferRateBps, not even an explicit nil
func (o *CopyRunStats) UnsetLogicalTransferRateBps() {
	o.LogicalTransferRateBps.Unset()
}

// GetPhysicalBytesTransferred returns the PhysicalBytesTransferred field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRunStats) GetPhysicalBytesTransferred() int64 {
	if o == nil || o.PhysicalBytesTransferred.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PhysicalBytesTransferred.Get()
}

// GetPhysicalBytesTransferredOk returns a tuple with the PhysicalBytesTransferred field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRunStats) GetPhysicalBytesTransferredOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalBytesTransferred.Get(), o.PhysicalBytesTransferred.IsSet()
}

// HasPhysicalBytesTransferred returns a boolean if a field has been set.
func (o *CopyRunStats) HasPhysicalBytesTransferred() bool {
	if o != nil && o.PhysicalBytesTransferred.IsSet() {
		return true
	}

	return false
}

// SetPhysicalBytesTransferred gets a reference to the given NullableInt64 and assigns it to the PhysicalBytesTransferred field.
func (o *CopyRunStats) SetPhysicalBytesTransferred(v int64) {
	o.PhysicalBytesTransferred.Set(&v)
}
// SetPhysicalBytesTransferredNil sets the value for PhysicalBytesTransferred to be an explicit nil
func (o *CopyRunStats) SetPhysicalBytesTransferredNil() {
	o.PhysicalBytesTransferred.Set(nil)
}

// UnsetPhysicalBytesTransferred ensures that no value is present for PhysicalBytesTransferred, not even an explicit nil
func (o *CopyRunStats) UnsetPhysicalBytesTransferred() {
	o.PhysicalBytesTransferred.Unset()
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CopyRunStats) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CopyRunStats) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *CopyRunStats) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *CopyRunStats) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *CopyRunStats) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *CopyRunStats) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

func (o CopyRunStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.IsIncremental.IsSet() {
		toSerialize["isIncremental"] = o.IsIncremental.Get()
	}
	if o.LogicalBytesTransferred.IsSet() {
		toSerialize["logicalBytesTransferred"] = o.LogicalBytesTransferred.Get()
	}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.LogicalTransferRateBps.IsSet() {
		toSerialize["logicalTransferRateBps"] = o.LogicalTransferRateBps.Get()
	}
	if o.PhysicalBytesTransferred.IsSet() {
		toSerialize["physicalBytesTransferred"] = o.PhysicalBytesTransferred.Get()
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableCopyRunStats struct {
	value *CopyRunStats
	isSet bool
}

func (v NullableCopyRunStats) Get() *CopyRunStats {
	return v.value
}

func (v *NullableCopyRunStats) Set(val *CopyRunStats) {
	v.value = val
	v.isSet = true
}

func (v NullableCopyRunStats) IsSet() bool {
	return v.isSet
}

func (v *NullableCopyRunStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCopyRunStats(val *CopyRunStats) *NullableCopyRunStats {
	return &NullableCopyRunStats{value: val, isSet: true}
}

func (v NullableCopyRunStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCopyRunStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


