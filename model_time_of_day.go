/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TimeOfDay Specifies a time in day with hours and minutes.
type TimeOfDay struct {
	// Specifies an (0-23) hour in a day.
	Hour NullableInt32 `json:"hour,omitempty"`
	// Specifies a (0-59) minute in an hour.
	Minute NullableInt32 `json:"minute,omitempty"`
}

// NewTimeOfDay instantiates a new TimeOfDay object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimeOfDay() *TimeOfDay {
	this := TimeOfDay{}
	return &this
}

// NewTimeOfDayWithDefaults instantiates a new TimeOfDay object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimeOfDayWithDefaults() *TimeOfDay {
	this := TimeOfDay{}
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOfDay) GetHour() int32 {
	if o == nil || o.Hour.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Hour.Get()
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOfDay) GetHourOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Hour.Get(), o.Hour.IsSet()
}

// HasHour returns a boolean if a field has been set.
func (o *TimeOfDay) HasHour() bool {
	if o != nil && o.Hour.IsSet() {
		return true
	}

	return false
}

// SetHour gets a reference to the given NullableInt32 and assigns it to the Hour field.
func (o *TimeOfDay) SetHour(v int32) {
	o.Hour.Set(&v)
}
// SetHourNil sets the value for Hour to be an explicit nil
func (o *TimeOfDay) SetHourNil() {
	o.Hour.Set(nil)
}

// UnsetHour ensures that no value is present for Hour, not even an explicit nil
func (o *TimeOfDay) UnsetHour() {
	o.Hour.Unset()
}

// GetMinute returns the Minute field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TimeOfDay) GetMinute() int32 {
	if o == nil || o.Minute.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Minute.Get()
}

// GetMinuteOk returns a tuple with the Minute field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TimeOfDay) GetMinuteOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Minute.Get(), o.Minute.IsSet()
}

// HasMinute returns a boolean if a field has been set.
func (o *TimeOfDay) HasMinute() bool {
	if o != nil && o.Minute.IsSet() {
		return true
	}

	return false
}

// SetMinute gets a reference to the given NullableInt32 and assigns it to the Minute field.
func (o *TimeOfDay) SetMinute(v int32) {
	o.Minute.Set(&v)
}
// SetMinuteNil sets the value for Minute to be an explicit nil
func (o *TimeOfDay) SetMinuteNil() {
	o.Minute.Set(nil)
}

// UnsetMinute ensures that no value is present for Minute, not even an explicit nil
func (o *TimeOfDay) UnsetMinute() {
	o.Minute.Unset()
}

func (o TimeOfDay) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hour.IsSet() {
		toSerialize["hour"] = o.Hour.Get()
	}
	if o.Minute.IsSet() {
		toSerialize["minute"] = o.Minute.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTimeOfDay struct {
	value *TimeOfDay
	isSet bool
}

func (v NullableTimeOfDay) Get() *TimeOfDay {
	return v.value
}

func (v *NullableTimeOfDay) Set(val *TimeOfDay) {
	v.value = val
	v.isSet = true
}

func (v NullableTimeOfDay) IsSet() bool {
	return v.isSet
}

func (v *NullableTimeOfDay) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimeOfDay(val *TimeOfDay) *NullableTimeOfDay {
	return &NullableTimeOfDay{value: val, isSet: true}
}

func (v NullableTimeOfDay) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimeOfDay) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


