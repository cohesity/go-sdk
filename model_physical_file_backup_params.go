/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// PhysicalFileBackupParams Message to capture params when backing up files on a Physical source.
type PhysicalFileBackupParams struct {
	// Specifies the paths to backup on the Physical source.
	BackupPathInfoVec []PhysicalFileBackupParamsBackupPathInfo `json:"backupPathInfoVec,omitempty"`
	// Specifies metadata path on source. This file contains absolute paths of files that needs to be backed up on the same source. If this field is set, backup_path_info_vec will be ignored.
	MetadataFilePath NullableString `json:"metadataFilePath,omitempty"`
	// Mount types of nested volumes to be skipped.
	SkipNestedVolumesVec []string `json:"skipNestedVolumesVec,omitempty"`
	// Specifies whether to follow nas target pointed by symlink. Set to true only for windows physical file based job.
	SymlinkFollowNasTarget NullableBool `json:"symlinkFollowNasTarget,omitempty"`
	// Specifies whether to use skip_nested_volumes_vec to skip nested mounts. Before 6.4, BackupPathInfo.skip_nested_volumes boolean was used to skip nested volumes. So we use this boolean to support older jobs.
	UsesSkipNestedVolumesVec NullableBool `json:"usesSkipNestedVolumesVec,omitempty"`
}

// NewPhysicalFileBackupParams instantiates a new PhysicalFileBackupParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhysicalFileBackupParams() *PhysicalFileBackupParams {
	this := PhysicalFileBackupParams{}
	return &this
}

// NewPhysicalFileBackupParamsWithDefaults instantiates a new PhysicalFileBackupParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhysicalFileBackupParamsWithDefaults() *PhysicalFileBackupParams {
	this := PhysicalFileBackupParams{}
	return &this
}

// GetBackupPathInfoVec returns the BackupPathInfoVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupParams) GetBackupPathInfoVec() []PhysicalFileBackupParamsBackupPathInfo {
	if o == nil  {
		var ret []PhysicalFileBackupParamsBackupPathInfo
		return ret
	}
	return o.BackupPathInfoVec
}

// GetBackupPathInfoVecOk returns a tuple with the BackupPathInfoVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupParams) GetBackupPathInfoVecOk() (*[]PhysicalFileBackupParamsBackupPathInfo, bool) {
	if o == nil || o.BackupPathInfoVec == nil {
		return nil, false
	}
	return &o.BackupPathInfoVec, true
}

// HasBackupPathInfoVec returns a boolean if a field has been set.
func (o *PhysicalFileBackupParams) HasBackupPathInfoVec() bool {
	if o != nil && o.BackupPathInfoVec != nil {
		return true
	}

	return false
}

// SetBackupPathInfoVec gets a reference to the given []PhysicalFileBackupParamsBackupPathInfo and assigns it to the BackupPathInfoVec field.
func (o *PhysicalFileBackupParams) SetBackupPathInfoVec(v []PhysicalFileBackupParamsBackupPathInfo) {
	o.BackupPathInfoVec = v
}

// GetMetadataFilePath returns the MetadataFilePath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupParams) GetMetadataFilePath() string {
	if o == nil || o.MetadataFilePath.Get() == nil {
		var ret string
		return ret
	}
	return *o.MetadataFilePath.Get()
}

// GetMetadataFilePathOk returns a tuple with the MetadataFilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupParams) GetMetadataFilePathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetadataFilePath.Get(), o.MetadataFilePath.IsSet()
}

// HasMetadataFilePath returns a boolean if a field has been set.
func (o *PhysicalFileBackupParams) HasMetadataFilePath() bool {
	if o != nil && o.MetadataFilePath.IsSet() {
		return true
	}

	return false
}

// SetMetadataFilePath gets a reference to the given NullableString and assigns it to the MetadataFilePath field.
func (o *PhysicalFileBackupParams) SetMetadataFilePath(v string) {
	o.MetadataFilePath.Set(&v)
}
// SetMetadataFilePathNil sets the value for MetadataFilePath to be an explicit nil
func (o *PhysicalFileBackupParams) SetMetadataFilePathNil() {
	o.MetadataFilePath.Set(nil)
}

// UnsetMetadataFilePath ensures that no value is present for MetadataFilePath, not even an explicit nil
func (o *PhysicalFileBackupParams) UnsetMetadataFilePath() {
	o.MetadataFilePath.Unset()
}

// GetSkipNestedVolumesVec returns the SkipNestedVolumesVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupParams) GetSkipNestedVolumesVec() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SkipNestedVolumesVec
}

// GetSkipNestedVolumesVecOk returns a tuple with the SkipNestedVolumesVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupParams) GetSkipNestedVolumesVecOk() (*[]string, bool) {
	if o == nil || o.SkipNestedVolumesVec == nil {
		return nil, false
	}
	return &o.SkipNestedVolumesVec, true
}

// HasSkipNestedVolumesVec returns a boolean if a field has been set.
func (o *PhysicalFileBackupParams) HasSkipNestedVolumesVec() bool {
	if o != nil && o.SkipNestedVolumesVec != nil {
		return true
	}

	return false
}

// SetSkipNestedVolumesVec gets a reference to the given []string and assigns it to the SkipNestedVolumesVec field.
func (o *PhysicalFileBackupParams) SetSkipNestedVolumesVec(v []string) {
	o.SkipNestedVolumesVec = v
}

// GetSymlinkFollowNasTarget returns the SymlinkFollowNasTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupParams) GetSymlinkFollowNasTarget() bool {
	if o == nil || o.SymlinkFollowNasTarget.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SymlinkFollowNasTarget.Get()
}

// GetSymlinkFollowNasTargetOk returns a tuple with the SymlinkFollowNasTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupParams) GetSymlinkFollowNasTargetOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SymlinkFollowNasTarget.Get(), o.SymlinkFollowNasTarget.IsSet()
}

// HasSymlinkFollowNasTarget returns a boolean if a field has been set.
func (o *PhysicalFileBackupParams) HasSymlinkFollowNasTarget() bool {
	if o != nil && o.SymlinkFollowNasTarget.IsSet() {
		return true
	}

	return false
}

// SetSymlinkFollowNasTarget gets a reference to the given NullableBool and assigns it to the SymlinkFollowNasTarget field.
func (o *PhysicalFileBackupParams) SetSymlinkFollowNasTarget(v bool) {
	o.SymlinkFollowNasTarget.Set(&v)
}
// SetSymlinkFollowNasTargetNil sets the value for SymlinkFollowNasTarget to be an explicit nil
func (o *PhysicalFileBackupParams) SetSymlinkFollowNasTargetNil() {
	o.SymlinkFollowNasTarget.Set(nil)
}

// UnsetSymlinkFollowNasTarget ensures that no value is present for SymlinkFollowNasTarget, not even an explicit nil
func (o *PhysicalFileBackupParams) UnsetSymlinkFollowNasTarget() {
	o.SymlinkFollowNasTarget.Unset()
}

// GetUsesSkipNestedVolumesVec returns the UsesSkipNestedVolumesVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *PhysicalFileBackupParams) GetUsesSkipNestedVolumesVec() bool {
	if o == nil || o.UsesSkipNestedVolumesVec.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UsesSkipNestedVolumesVec.Get()
}

// GetUsesSkipNestedVolumesVecOk returns a tuple with the UsesSkipNestedVolumesVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *PhysicalFileBackupParams) GetUsesSkipNestedVolumesVecOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsesSkipNestedVolumesVec.Get(), o.UsesSkipNestedVolumesVec.IsSet()
}

// HasUsesSkipNestedVolumesVec returns a boolean if a field has been set.
func (o *PhysicalFileBackupParams) HasUsesSkipNestedVolumesVec() bool {
	if o != nil && o.UsesSkipNestedVolumesVec.IsSet() {
		return true
	}

	return false
}

// SetUsesSkipNestedVolumesVec gets a reference to the given NullableBool and assigns it to the UsesSkipNestedVolumesVec field.
func (o *PhysicalFileBackupParams) SetUsesSkipNestedVolumesVec(v bool) {
	o.UsesSkipNestedVolumesVec.Set(&v)
}
// SetUsesSkipNestedVolumesVecNil sets the value for UsesSkipNestedVolumesVec to be an explicit nil
func (o *PhysicalFileBackupParams) SetUsesSkipNestedVolumesVecNil() {
	o.UsesSkipNestedVolumesVec.Set(nil)
}

// UnsetUsesSkipNestedVolumesVec ensures that no value is present for UsesSkipNestedVolumesVec, not even an explicit nil
func (o *PhysicalFileBackupParams) UnsetUsesSkipNestedVolumesVec() {
	o.UsesSkipNestedVolumesVec.Unset()
}

func (o PhysicalFileBackupParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupPathInfoVec != nil {
		toSerialize["backupPathInfoVec"] = o.BackupPathInfoVec
	}
	if o.MetadataFilePath.IsSet() {
		toSerialize["metadataFilePath"] = o.MetadataFilePath.Get()
	}
	if o.SkipNestedVolumesVec != nil {
		toSerialize["skipNestedVolumesVec"] = o.SkipNestedVolumesVec
	}
	if o.SymlinkFollowNasTarget.IsSet() {
		toSerialize["symlinkFollowNasTarget"] = o.SymlinkFollowNasTarget.Get()
	}
	if o.UsesSkipNestedVolumesVec.IsSet() {
		toSerialize["usesSkipNestedVolumesVec"] = o.UsesSkipNestedVolumesVec.Get()
	}
	return json.Marshal(toSerialize)
}

type NullablePhysicalFileBackupParams struct {
	value *PhysicalFileBackupParams
	isSet bool
}

func (v NullablePhysicalFileBackupParams) Get() *PhysicalFileBackupParams {
	return v.value
}

func (v *NullablePhysicalFileBackupParams) Set(val *PhysicalFileBackupParams) {
	v.value = val
	v.isSet = true
}

func (v NullablePhysicalFileBackupParams) IsSet() bool {
	return v.isSet
}

func (v *NullablePhysicalFileBackupParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhysicalFileBackupParams(val *PhysicalFileBackupParams) *NullablePhysicalFileBackupParams {
	return &NullablePhysicalFileBackupParams{value: val, isSet: true}
}

func (v NullablePhysicalFileBackupParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhysicalFileBackupParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


