/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ReducersWrapper ReducersWrapper is the struct to define the list of reducers.
type ReducersWrapper struct {
	// Reducers specifies the list of available reducers in analytics workbench.
	Reducers []ReducerInfo `json:"reducers,omitempty"`
}

// NewReducersWrapper instantiates a new ReducersWrapper object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReducersWrapper() *ReducersWrapper {
	this := ReducersWrapper{}
	return &this
}

// NewReducersWrapperWithDefaults instantiates a new ReducersWrapper object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReducersWrapperWithDefaults() *ReducersWrapper {
	this := ReducersWrapper{}
	return &this
}

// GetReducers returns the Reducers field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ReducersWrapper) GetReducers() []ReducerInfo {
	if o == nil  {
		var ret []ReducerInfo
		return ret
	}
	return o.Reducers
}

// GetReducersOk returns a tuple with the Reducers field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ReducersWrapper) GetReducersOk() (*[]ReducerInfo, bool) {
	if o == nil || o.Reducers == nil {
		return nil, false
	}
	return &o.Reducers, true
}

// HasReducers returns a boolean if a field has been set.
func (o *ReducersWrapper) HasReducers() bool {
	if o != nil && o.Reducers != nil {
		return true
	}

	return false
}

// SetReducers gets a reference to the given []ReducerInfo and assigns it to the Reducers field.
func (o *ReducersWrapper) SetReducers(v []ReducerInfo) {
	o.Reducers = v
}

func (o ReducersWrapper) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Reducers != nil {
		toSerialize["reducers"] = o.Reducers
	}
	return json.Marshal(toSerialize)
}

type NullableReducersWrapper struct {
	value *ReducersWrapper
	isSet bool
}

func (v NullableReducersWrapper) Get() *ReducersWrapper {
	return v.value
}

func (v *NullableReducersWrapper) Set(val *ReducersWrapper) {
	v.value = val
	v.isSet = true
}

func (v NullableReducersWrapper) IsSet() bool {
	return v.isSet
}

func (v *NullableReducersWrapper) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReducersWrapper(val *ReducersWrapper) *NullableReducersWrapper {
	return &NullableReducersWrapper{value: val, isSet: true}
}

func (v NullableReducersWrapper) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReducersWrapper) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


