/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ViewBoxStats Provides statistics about the Storage Domain (View Box).
type ViewBoxStats struct {
	CloudUsagePerfStats *UsageAndPerformanceStats `json:"cloudUsagePerfStats,omitempty"`
	DataUsageStats *DataUsageStats `json:"dataUsageStats,omitempty"`
	// Specifies the id of the Storage Domain (View Box).
	Id NullableInt64 `json:"id,omitempty"`
	LocalUsagePerfStats *UsageAndPerformanceStats `json:"localUsagePerfStats,omitempty"`
	LogicalStats *LogicalStats `json:"logicalStats,omitempty"`
	UsagePerfStats *UsageAndPerformanceStats `json:"usagePerfStats,omitempty"`
}

// NewViewBoxStats instantiates a new ViewBoxStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewBoxStats() *ViewBoxStats {
	this := ViewBoxStats{}
	return &this
}

// NewViewBoxStatsWithDefaults instantiates a new ViewBoxStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewBoxStatsWithDefaults() *ViewBoxStats {
	this := ViewBoxStats{}
	return &this
}

// GetCloudUsagePerfStats returns the CloudUsagePerfStats field value if set, zero value otherwise.
func (o *ViewBoxStats) GetCloudUsagePerfStats() UsageAndPerformanceStats {
	if o == nil || o.CloudUsagePerfStats == nil {
		var ret UsageAndPerformanceStats
		return ret
	}
	return *o.CloudUsagePerfStats
}

// GetCloudUsagePerfStatsOk returns a tuple with the CloudUsagePerfStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoxStats) GetCloudUsagePerfStatsOk() (*UsageAndPerformanceStats, bool) {
	if o == nil || o.CloudUsagePerfStats == nil {
		return nil, false
	}
	return o.CloudUsagePerfStats, true
}

// HasCloudUsagePerfStats returns a boolean if a field has been set.
func (o *ViewBoxStats) HasCloudUsagePerfStats() bool {
	if o != nil && o.CloudUsagePerfStats != nil {
		return true
	}

	return false
}

// SetCloudUsagePerfStats gets a reference to the given UsageAndPerformanceStats and assigns it to the CloudUsagePerfStats field.
func (o *ViewBoxStats) SetCloudUsagePerfStats(v UsageAndPerformanceStats) {
	o.CloudUsagePerfStats = &v
}

// GetDataUsageStats returns the DataUsageStats field value if set, zero value otherwise.
func (o *ViewBoxStats) GetDataUsageStats() DataUsageStats {
	if o == nil || o.DataUsageStats == nil {
		var ret DataUsageStats
		return ret
	}
	return *o.DataUsageStats
}

// GetDataUsageStatsOk returns a tuple with the DataUsageStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoxStats) GetDataUsageStatsOk() (*DataUsageStats, bool) {
	if o == nil || o.DataUsageStats == nil {
		return nil, false
	}
	return o.DataUsageStats, true
}

// HasDataUsageStats returns a boolean if a field has been set.
func (o *ViewBoxStats) HasDataUsageStats() bool {
	if o != nil && o.DataUsageStats != nil {
		return true
	}

	return false
}

// SetDataUsageStats gets a reference to the given DataUsageStats and assigns it to the DataUsageStats field.
func (o *ViewBoxStats) SetDataUsageStats(v DataUsageStats) {
	o.DataUsageStats = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewBoxStats) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewBoxStats) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ViewBoxStats) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ViewBoxStats) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ViewBoxStats) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ViewBoxStats) UnsetId() {
	o.Id.Unset()
}

// GetLocalUsagePerfStats returns the LocalUsagePerfStats field value if set, zero value otherwise.
func (o *ViewBoxStats) GetLocalUsagePerfStats() UsageAndPerformanceStats {
	if o == nil || o.LocalUsagePerfStats == nil {
		var ret UsageAndPerformanceStats
		return ret
	}
	return *o.LocalUsagePerfStats
}

// GetLocalUsagePerfStatsOk returns a tuple with the LocalUsagePerfStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoxStats) GetLocalUsagePerfStatsOk() (*UsageAndPerformanceStats, bool) {
	if o == nil || o.LocalUsagePerfStats == nil {
		return nil, false
	}
	return o.LocalUsagePerfStats, true
}

// HasLocalUsagePerfStats returns a boolean if a field has been set.
func (o *ViewBoxStats) HasLocalUsagePerfStats() bool {
	if o != nil && o.LocalUsagePerfStats != nil {
		return true
	}

	return false
}

// SetLocalUsagePerfStats gets a reference to the given UsageAndPerformanceStats and assigns it to the LocalUsagePerfStats field.
func (o *ViewBoxStats) SetLocalUsagePerfStats(v UsageAndPerformanceStats) {
	o.LocalUsagePerfStats = &v
}

// GetLogicalStats returns the LogicalStats field value if set, zero value otherwise.
func (o *ViewBoxStats) GetLogicalStats() LogicalStats {
	if o == nil || o.LogicalStats == nil {
		var ret LogicalStats
		return ret
	}
	return *o.LogicalStats
}

// GetLogicalStatsOk returns a tuple with the LogicalStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoxStats) GetLogicalStatsOk() (*LogicalStats, bool) {
	if o == nil || o.LogicalStats == nil {
		return nil, false
	}
	return o.LogicalStats, true
}

// HasLogicalStats returns a boolean if a field has been set.
func (o *ViewBoxStats) HasLogicalStats() bool {
	if o != nil && o.LogicalStats != nil {
		return true
	}

	return false
}

// SetLogicalStats gets a reference to the given LogicalStats and assigns it to the LogicalStats field.
func (o *ViewBoxStats) SetLogicalStats(v LogicalStats) {
	o.LogicalStats = &v
}

// GetUsagePerfStats returns the UsagePerfStats field value if set, zero value otherwise.
func (o *ViewBoxStats) GetUsagePerfStats() UsageAndPerformanceStats {
	if o == nil || o.UsagePerfStats == nil {
		var ret UsageAndPerformanceStats
		return ret
	}
	return *o.UsagePerfStats
}

// GetUsagePerfStatsOk returns a tuple with the UsagePerfStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewBoxStats) GetUsagePerfStatsOk() (*UsageAndPerformanceStats, bool) {
	if o == nil || o.UsagePerfStats == nil {
		return nil, false
	}
	return o.UsagePerfStats, true
}

// HasUsagePerfStats returns a boolean if a field has been set.
func (o *ViewBoxStats) HasUsagePerfStats() bool {
	if o != nil && o.UsagePerfStats != nil {
		return true
	}

	return false
}

// SetUsagePerfStats gets a reference to the given UsageAndPerformanceStats and assigns it to the UsagePerfStats field.
func (o *ViewBoxStats) SetUsagePerfStats(v UsageAndPerformanceStats) {
	o.UsagePerfStats = &v
}

func (o ViewBoxStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CloudUsagePerfStats != nil {
		toSerialize["cloudUsagePerfStats"] = o.CloudUsagePerfStats
	}
	if o.DataUsageStats != nil {
		toSerialize["dataUsageStats"] = o.DataUsageStats
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.LocalUsagePerfStats != nil {
		toSerialize["localUsagePerfStats"] = o.LocalUsagePerfStats
	}
	if o.LogicalStats != nil {
		toSerialize["logicalStats"] = o.LogicalStats
	}
	if o.UsagePerfStats != nil {
		toSerialize["usagePerfStats"] = o.UsagePerfStats
	}
	return json.Marshal(toSerialize)
}

type NullableViewBoxStats struct {
	value *ViewBoxStats
	isSet bool
}

func (v NullableViewBoxStats) Get() *ViewBoxStats {
	return v.value
}

func (v *NullableViewBoxStats) Set(val *ViewBoxStats) {
	v.value = val
	v.isSet = true
}

func (v NullableViewBoxStats) IsSet() bool {
	return v.isSet
}

func (v *NullableViewBoxStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewBoxStats(val *ViewBoxStats) *NullableViewBoxStats {
	return &NullableViewBoxStats{value: val, isSet: true}
}

func (v NullableViewBoxStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewBoxStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


