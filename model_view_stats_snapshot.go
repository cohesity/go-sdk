/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ViewStatsSnapshot Specifies the list statistics for each View for a given timestamp.
type ViewStatsSnapshot struct {
	// Specifies the unix time in milliseconds when these values were generated
	Timestamp NullableInt64 `json:"timestamp,omitempty"`
	// Specifies the list of Views and their statistics at the given timestamp.
	ViewStatsList *[]ViewStatInfo `json:"viewStatsList,omitempty"`
}

// NewViewStatsSnapshot instantiates a new ViewStatsSnapshot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViewStatsSnapshot() *ViewStatsSnapshot {
	this := ViewStatsSnapshot{}
	return &this
}

// NewViewStatsSnapshotWithDefaults instantiates a new ViewStatsSnapshot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViewStatsSnapshotWithDefaults() *ViewStatsSnapshot {
	this := ViewStatsSnapshot{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ViewStatsSnapshot) GetTimestamp() int64 {
	if o == nil || o.Timestamp.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp.Get()
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ViewStatsSnapshot) GetTimestampOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Timestamp.Get(), o.Timestamp.IsSet()
}

// HasTimestamp returns a boolean if a field has been set.
func (o *ViewStatsSnapshot) HasTimestamp() bool {
	if o != nil && o.Timestamp.IsSet() {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given NullableInt64 and assigns it to the Timestamp field.
func (o *ViewStatsSnapshot) SetTimestamp(v int64) {
	o.Timestamp.Set(&v)
}
// SetTimestampNil sets the value for Timestamp to be an explicit nil
func (o *ViewStatsSnapshot) SetTimestampNil() {
	o.Timestamp.Set(nil)
}

// UnsetTimestamp ensures that no value is present for Timestamp, not even an explicit nil
func (o *ViewStatsSnapshot) UnsetTimestamp() {
	o.Timestamp.Unset()
}

// GetViewStatsList returns the ViewStatsList field value if set, zero value otherwise.
func (o *ViewStatsSnapshot) GetViewStatsList() []ViewStatInfo {
	if o == nil || o.ViewStatsList == nil {
		var ret []ViewStatInfo
		return ret
	}
	return *o.ViewStatsList
}

// GetViewStatsListOk returns a tuple with the ViewStatsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ViewStatsSnapshot) GetViewStatsListOk() (*[]ViewStatInfo, bool) {
	if o == nil || o.ViewStatsList == nil {
		return nil, false
	}
	return o.ViewStatsList, true
}

// HasViewStatsList returns a boolean if a field has been set.
func (o *ViewStatsSnapshot) HasViewStatsList() bool {
	if o != nil && o.ViewStatsList != nil {
		return true
	}

	return false
}

// SetViewStatsList gets a reference to the given []ViewStatInfo and assigns it to the ViewStatsList field.
func (o *ViewStatsSnapshot) SetViewStatsList(v []ViewStatInfo) {
	o.ViewStatsList = &v
}

func (o ViewStatsSnapshot) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Timestamp.IsSet() {
		toSerialize["timestamp"] = o.Timestamp.Get()
	}
	if o.ViewStatsList != nil {
		toSerialize["viewStatsList"] = o.ViewStatsList
	}
	return json.Marshal(toSerialize)
}

type NullableViewStatsSnapshot struct {
	value *ViewStatsSnapshot
	isSet bool
}

func (v NullableViewStatsSnapshot) Get() *ViewStatsSnapshot {
	return v.value
}

func (v *NullableViewStatsSnapshot) Set(val *ViewStatsSnapshot) {
	v.value = val
	v.isSet = true
}

func (v NullableViewStatsSnapshot) IsSet() bool {
	return v.isSet
}

func (v *NullableViewStatsSnapshot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViewStatsSnapshot(val *ViewStatsSnapshot) *NullableViewStatsSnapshot {
	return &NullableViewStatsSnapshot{value: val, isSet: true}
}

func (v NullableViewStatsSnapshot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViewStatsSnapshot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


