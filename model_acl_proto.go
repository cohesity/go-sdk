/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ACLProto Protobuf that describes the access control list (ACL) permissions for a bucket or for an object.
type ACLProto struct {
	CommonAcl *CommonACLProto `json:"commonAcl,omitempty"`
	GrantVec []ACLProtoGrant `json:"grantVec,omitempty"`
	KeystoneAcl *KeystoneACLProto `json:"keystoneAcl,omitempty"`
	// Swift ACL strings.
	SwiftReadAcl NullableString `json:"swiftReadAcl,omitempty"`
	SwiftWriteAcl NullableString `json:"swiftWriteAcl,omitempty"`
}

// NewACLProto instantiates a new ACLProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACLProto() *ACLProto {
	this := ACLProto{}
	return &this
}

// NewACLProtoWithDefaults instantiates a new ACLProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACLProtoWithDefaults() *ACLProto {
	this := ACLProto{}
	return &this
}

// GetCommonAcl returns the CommonAcl field value if set, zero value otherwise.
func (o *ACLProto) GetCommonAcl() CommonACLProto {
	if o == nil || o.CommonAcl == nil {
		var ret CommonACLProto
		return ret
	}
	return *o.CommonAcl
}

// GetCommonAclOk returns a tuple with the CommonAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLProto) GetCommonAclOk() (*CommonACLProto, bool) {
	if o == nil || o.CommonAcl == nil {
		return nil, false
	}
	return o.CommonAcl, true
}

// HasCommonAcl returns a boolean if a field has been set.
func (o *ACLProto) HasCommonAcl() bool {
	if o != nil && o.CommonAcl != nil {
		return true
	}

	return false
}

// SetCommonAcl gets a reference to the given CommonACLProto and assigns it to the CommonAcl field.
func (o *ACLProto) SetCommonAcl(v CommonACLProto) {
	o.CommonAcl = &v
}

// GetGrantVec returns the GrantVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ACLProto) GetGrantVec() []ACLProtoGrant {
	if o == nil  {
		var ret []ACLProtoGrant
		return ret
	}
	return o.GrantVec
}

// GetGrantVecOk returns a tuple with the GrantVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ACLProto) GetGrantVecOk() (*[]ACLProtoGrant, bool) {
	if o == nil || o.GrantVec == nil {
		return nil, false
	}
	return &o.GrantVec, true
}

// HasGrantVec returns a boolean if a field has been set.
func (o *ACLProto) HasGrantVec() bool {
	if o != nil && o.GrantVec != nil {
		return true
	}

	return false
}

// SetGrantVec gets a reference to the given []ACLProtoGrant and assigns it to the GrantVec field.
func (o *ACLProto) SetGrantVec(v []ACLProtoGrant) {
	o.GrantVec = v
}

// GetKeystoneAcl returns the KeystoneAcl field value if set, zero value otherwise.
func (o *ACLProto) GetKeystoneAcl() KeystoneACLProto {
	if o == nil || o.KeystoneAcl == nil {
		var ret KeystoneACLProto
		return ret
	}
	return *o.KeystoneAcl
}

// GetKeystoneAclOk returns a tuple with the KeystoneAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLProto) GetKeystoneAclOk() (*KeystoneACLProto, bool) {
	if o == nil || o.KeystoneAcl == nil {
		return nil, false
	}
	return o.KeystoneAcl, true
}

// HasKeystoneAcl returns a boolean if a field has been set.
func (o *ACLProto) HasKeystoneAcl() bool {
	if o != nil && o.KeystoneAcl != nil {
		return true
	}

	return false
}

// SetKeystoneAcl gets a reference to the given KeystoneACLProto and assigns it to the KeystoneAcl field.
func (o *ACLProto) SetKeystoneAcl(v KeystoneACLProto) {
	o.KeystoneAcl = &v
}

// GetSwiftReadAcl returns the SwiftReadAcl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ACLProto) GetSwiftReadAcl() string {
	if o == nil || o.SwiftReadAcl.Get() == nil {
		var ret string
		return ret
	}
	return *o.SwiftReadAcl.Get()
}

// GetSwiftReadAclOk returns a tuple with the SwiftReadAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ACLProto) GetSwiftReadAclOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftReadAcl.Get(), o.SwiftReadAcl.IsSet()
}

// HasSwiftReadAcl returns a boolean if a field has been set.
func (o *ACLProto) HasSwiftReadAcl() bool {
	if o != nil && o.SwiftReadAcl.IsSet() {
		return true
	}

	return false
}

// SetSwiftReadAcl gets a reference to the given NullableString and assigns it to the SwiftReadAcl field.
func (o *ACLProto) SetSwiftReadAcl(v string) {
	o.SwiftReadAcl.Set(&v)
}
// SetSwiftReadAclNil sets the value for SwiftReadAcl to be an explicit nil
func (o *ACLProto) SetSwiftReadAclNil() {
	o.SwiftReadAcl.Set(nil)
}

// UnsetSwiftReadAcl ensures that no value is present for SwiftReadAcl, not even an explicit nil
func (o *ACLProto) UnsetSwiftReadAcl() {
	o.SwiftReadAcl.Unset()
}

// GetSwiftWriteAcl returns the SwiftWriteAcl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ACLProto) GetSwiftWriteAcl() string {
	if o == nil || o.SwiftWriteAcl.Get() == nil {
		var ret string
		return ret
	}
	return *o.SwiftWriteAcl.Get()
}

// GetSwiftWriteAclOk returns a tuple with the SwiftWriteAcl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ACLProto) GetSwiftWriteAclOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SwiftWriteAcl.Get(), o.SwiftWriteAcl.IsSet()
}

// HasSwiftWriteAcl returns a boolean if a field has been set.
func (o *ACLProto) HasSwiftWriteAcl() bool {
	if o != nil && o.SwiftWriteAcl.IsSet() {
		return true
	}

	return false
}

// SetSwiftWriteAcl gets a reference to the given NullableString and assigns it to the SwiftWriteAcl field.
func (o *ACLProto) SetSwiftWriteAcl(v string) {
	o.SwiftWriteAcl.Set(&v)
}
// SetSwiftWriteAclNil sets the value for SwiftWriteAcl to be an explicit nil
func (o *ACLProto) SetSwiftWriteAclNil() {
	o.SwiftWriteAcl.Set(nil)
}

// UnsetSwiftWriteAcl ensures that no value is present for SwiftWriteAcl, not even an explicit nil
func (o *ACLProto) UnsetSwiftWriteAcl() {
	o.SwiftWriteAcl.Unset()
}

func (o ACLProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CommonAcl != nil {
		toSerialize["commonAcl"] = o.CommonAcl
	}
	if o.GrantVec != nil {
		toSerialize["grantVec"] = o.GrantVec
	}
	if o.KeystoneAcl != nil {
		toSerialize["keystoneAcl"] = o.KeystoneAcl
	}
	if o.SwiftReadAcl.IsSet() {
		toSerialize["swiftReadAcl"] = o.SwiftReadAcl.Get()
	}
	if o.SwiftWriteAcl.IsSet() {
		toSerialize["swiftWriteAcl"] = o.SwiftWriteAcl.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableACLProto struct {
	value *ACLProto
	isSet bool
}

func (v NullableACLProto) Get() *ACLProto {
	return v.value
}

func (v *NullableACLProto) Set(val *ACLProto) {
	v.value = val
	v.isSet = true
}

func (v NullableACLProto) IsSet() bool {
	return v.isSet
}

func (v *NullableACLProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLProto(val *ACLProto) *NullableACLProto {
	return &NullableACLProto{value: val, isSet: true}
}

func (v NullableACLProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


