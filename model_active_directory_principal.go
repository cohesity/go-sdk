/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ActiveDirectoryPrincipal Specifies information about a single principal in an Active Directory.
type ActiveDirectoryPrincipal struct {
	// Specifies the domain name of the where the principal' account is maintained.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the full name (first and last names) of the principal.
	FullName NullableString `json:"fullName,omitempty"`
	// Specifies the object class of the principal (either 'kGroup' or 'kUser'). 'kUser' specifies a user object class. 'kGroup' specifies a group object class. 'kComputer' specifies a computer object class. 'kWellKnownPrincipal' specifies a well known principal.
	ObjectClass NullableString `json:"objectClass,omitempty"`
	// Specifies the name of the principal.
	PrincipalName NullableString `json:"principalName,omitempty"`
	// Specifies the unique Security id (SID) of the principal.
	Sid NullableString `json:"sid,omitempty"`
}

// NewActiveDirectoryPrincipal instantiates a new ActiveDirectoryPrincipal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewActiveDirectoryPrincipal() *ActiveDirectoryPrincipal {
	this := ActiveDirectoryPrincipal{}
	return &this
}

// NewActiveDirectoryPrincipalWithDefaults instantiates a new ActiveDirectoryPrincipal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewActiveDirectoryPrincipalWithDefaults() *ActiveDirectoryPrincipal {
	this := ActiveDirectoryPrincipal{}
	return &this
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipal) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipal) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipal) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *ActiveDirectoryPrincipal) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *ActiveDirectoryPrincipal) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *ActiveDirectoryPrincipal) UnsetDomain() {
	o.Domain.Unset()
}

// GetFullName returns the FullName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipal) GetFullName() string {
	if o == nil || o.FullName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullName.Get()
}

// GetFullNameOk returns a tuple with the FullName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipal) GetFullNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullName.Get(), o.FullName.IsSet()
}

// HasFullName returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipal) HasFullName() bool {
	if o != nil && o.FullName.IsSet() {
		return true
	}

	return false
}

// SetFullName gets a reference to the given NullableString and assigns it to the FullName field.
func (o *ActiveDirectoryPrincipal) SetFullName(v string) {
	o.FullName.Set(&v)
}
// SetFullNameNil sets the value for FullName to be an explicit nil
func (o *ActiveDirectoryPrincipal) SetFullNameNil() {
	o.FullName.Set(nil)
}

// UnsetFullName ensures that no value is present for FullName, not even an explicit nil
func (o *ActiveDirectoryPrincipal) UnsetFullName() {
	o.FullName.Unset()
}

// GetObjectClass returns the ObjectClass field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipal) GetObjectClass() string {
	if o == nil || o.ObjectClass.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectClass.Get()
}

// GetObjectClassOk returns a tuple with the ObjectClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipal) GetObjectClassOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectClass.Get(), o.ObjectClass.IsSet()
}

// HasObjectClass returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipal) HasObjectClass() bool {
	if o != nil && o.ObjectClass.IsSet() {
		return true
	}

	return false
}

// SetObjectClass gets a reference to the given NullableString and assigns it to the ObjectClass field.
func (o *ActiveDirectoryPrincipal) SetObjectClass(v string) {
	o.ObjectClass.Set(&v)
}
// SetObjectClassNil sets the value for ObjectClass to be an explicit nil
func (o *ActiveDirectoryPrincipal) SetObjectClassNil() {
	o.ObjectClass.Set(nil)
}

// UnsetObjectClass ensures that no value is present for ObjectClass, not even an explicit nil
func (o *ActiveDirectoryPrincipal) UnsetObjectClass() {
	o.ObjectClass.Unset()
}

// GetPrincipalName returns the PrincipalName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipal) GetPrincipalName() string {
	if o == nil || o.PrincipalName.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrincipalName.Get()
}

// GetPrincipalNameOk returns a tuple with the PrincipalName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipal) GetPrincipalNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrincipalName.Get(), o.PrincipalName.IsSet()
}

// HasPrincipalName returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipal) HasPrincipalName() bool {
	if o != nil && o.PrincipalName.IsSet() {
		return true
	}

	return false
}

// SetPrincipalName gets a reference to the given NullableString and assigns it to the PrincipalName field.
func (o *ActiveDirectoryPrincipal) SetPrincipalName(v string) {
	o.PrincipalName.Set(&v)
}
// SetPrincipalNameNil sets the value for PrincipalName to be an explicit nil
func (o *ActiveDirectoryPrincipal) SetPrincipalNameNil() {
	o.PrincipalName.Set(nil)
}

// UnsetPrincipalName ensures that no value is present for PrincipalName, not even an explicit nil
func (o *ActiveDirectoryPrincipal) UnsetPrincipalName() {
	o.PrincipalName.Unset()
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ActiveDirectoryPrincipal) GetSid() string {
	if o == nil || o.Sid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ActiveDirectoryPrincipal) GetSidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *ActiveDirectoryPrincipal) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *ActiveDirectoryPrincipal) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *ActiveDirectoryPrincipal) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *ActiveDirectoryPrincipal) UnsetSid() {
	o.Sid.Unset()
}

func (o ActiveDirectoryPrincipal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.FullName.IsSet() {
		toSerialize["fullName"] = o.FullName.Get()
	}
	if o.ObjectClass.IsSet() {
		toSerialize["objectClass"] = o.ObjectClass.Get()
	}
	if o.PrincipalName.IsSet() {
		toSerialize["principalName"] = o.PrincipalName.Get()
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableActiveDirectoryPrincipal struct {
	value *ActiveDirectoryPrincipal
	isSet bool
}

func (v NullableActiveDirectoryPrincipal) Get() *ActiveDirectoryPrincipal {
	return v.value
}

func (v *NullableActiveDirectoryPrincipal) Set(val *ActiveDirectoryPrincipal) {
	v.value = val
	v.isSet = true
}

func (v NullableActiveDirectoryPrincipal) IsSet() bool {
	return v.isSet
}

func (v *NullableActiveDirectoryPrincipal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableActiveDirectoryPrincipal(val *ActiveDirectoryPrincipal) *NullableActiveDirectoryPrincipal {
	return &NullableActiveDirectoryPrincipal{value: val, isSet: true}
}

func (v NullableActiveDirectoryPrincipal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableActiveDirectoryPrincipal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


