/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleHost Specifies information about an Oracle Host.
type OracleHost struct {
	// Specifies the count of CPU available on the host.
	CpuCount NullableInt32 `json:"cpuCount,omitempty"`
	// Specifies the IP address of the host.
	IpAddresses []string `json:"ipAddresses,omitempty"`
	// Specifies ports available for this host.
	Ports []int64 `json:"ports,omitempty"`
	// Specifies multiple session configurations available for this host.
	Sessions []OracleSession `json:"sessions,omitempty"`
}

// NewOracleHost instantiates a new OracleHost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleHost() *OracleHost {
	this := OracleHost{}
	return &this
}

// NewOracleHostWithDefaults instantiates a new OracleHost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleHostWithDefaults() *OracleHost {
	this := OracleHost{}
	return &this
}

// GetCpuCount returns the CpuCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleHost) GetCpuCount() int32 {
	if o == nil || o.CpuCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.CpuCount.Get()
}

// GetCpuCountOk returns a tuple with the CpuCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleHost) GetCpuCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CpuCount.Get(), o.CpuCount.IsSet()
}

// HasCpuCount returns a boolean if a field has been set.
func (o *OracleHost) HasCpuCount() bool {
	if o != nil && o.CpuCount.IsSet() {
		return true
	}

	return false
}

// SetCpuCount gets a reference to the given NullableInt32 and assigns it to the CpuCount field.
func (o *OracleHost) SetCpuCount(v int32) {
	o.CpuCount.Set(&v)
}
// SetCpuCountNil sets the value for CpuCount to be an explicit nil
func (o *OracleHost) SetCpuCountNil() {
	o.CpuCount.Set(nil)
}

// UnsetCpuCount ensures that no value is present for CpuCount, not even an explicit nil
func (o *OracleHost) UnsetCpuCount() {
	o.CpuCount.Unset()
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleHost) GetIpAddresses() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleHost) GetIpAddressesOk() (*[]string, bool) {
	if o == nil || o.IpAddresses == nil {
		return nil, false
	}
	return &o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *OracleHost) HasIpAddresses() bool {
	if o != nil && o.IpAddresses != nil {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []string and assigns it to the IpAddresses field.
func (o *OracleHost) SetIpAddresses(v []string) {
	o.IpAddresses = v
}

// GetPorts returns the Ports field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleHost) GetPorts() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleHost) GetPortsOk() (*[]int64, bool) {
	if o == nil || o.Ports == nil {
		return nil, false
	}
	return &o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *OracleHost) HasPorts() bool {
	if o != nil && o.Ports != nil {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []int64 and assigns it to the Ports field.
func (o *OracleHost) SetPorts(v []int64) {
	o.Ports = v
}

// GetSessions returns the Sessions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleHost) GetSessions() []OracleSession {
	if o == nil  {
		var ret []OracleSession
		return ret
	}
	return o.Sessions
}

// GetSessionsOk returns a tuple with the Sessions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleHost) GetSessionsOk() (*[]OracleSession, bool) {
	if o == nil || o.Sessions == nil {
		return nil, false
	}
	return &o.Sessions, true
}

// HasSessions returns a boolean if a field has been set.
func (o *OracleHost) HasSessions() bool {
	if o != nil && o.Sessions != nil {
		return true
	}

	return false
}

// SetSessions gets a reference to the given []OracleSession and assigns it to the Sessions field.
func (o *OracleHost) SetSessions(v []OracleSession) {
	o.Sessions = v
}

func (o OracleHost) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CpuCount.IsSet() {
		toSerialize["cpuCount"] = o.CpuCount.Get()
	}
	if o.IpAddresses != nil {
		toSerialize["ipAddresses"] = o.IpAddresses
	}
	if o.Ports != nil {
		toSerialize["ports"] = o.Ports
	}
	if o.Sessions != nil {
		toSerialize["sessions"] = o.Sessions
	}
	return json.Marshal(toSerialize)
}

type NullableOracleHost struct {
	value *OracleHost
	isSet bool
}

func (v NullableOracleHost) Get() *OracleHost {
	return v.value
}

func (v *NullableOracleHost) Set(val *OracleHost) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleHost) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleHost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleHost(val *OracleHost) *NullableOracleHost {
	return &NullableOracleHost{value: val, isSet: true}
}

func (v NullableOracleHost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleHost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


