/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// InfectedFiles Specifies the Result parameters for all infected files.
type InfectedFiles struct {
	// Specifies the infected files.
	InfectedFiles []InfectedFile `json:"infectedFiles,omitempty"`
	// This cookie can be used in the succeeding call to list infected files to get the next set of infected files. If set to nil, it means that there's no more results that the server could provide.
	PaginationCookie NullableString `json:"paginationCookie,omitempty"`
}

// NewInfectedFiles instantiates a new InfectedFiles object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInfectedFiles() *InfectedFiles {
	this := InfectedFiles{}
	return &this
}

// NewInfectedFilesWithDefaults instantiates a new InfectedFiles object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInfectedFilesWithDefaults() *InfectedFiles {
	this := InfectedFiles{}
	return &this
}

// GetInfectedFiles returns the InfectedFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFiles) GetInfectedFiles() []InfectedFile {
	if o == nil  {
		var ret []InfectedFile
		return ret
	}
	return o.InfectedFiles
}

// GetInfectedFilesOk returns a tuple with the InfectedFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFiles) GetInfectedFilesOk() (*[]InfectedFile, bool) {
	if o == nil || o.InfectedFiles == nil {
		return nil, false
	}
	return &o.InfectedFiles, true
}

// HasInfectedFiles returns a boolean if a field has been set.
func (o *InfectedFiles) HasInfectedFiles() bool {
	if o != nil && o.InfectedFiles != nil {
		return true
	}

	return false
}

// SetInfectedFiles gets a reference to the given []InfectedFile and assigns it to the InfectedFiles field.
func (o *InfectedFiles) SetInfectedFiles(v []InfectedFile) {
	o.InfectedFiles = v
}

// GetPaginationCookie returns the PaginationCookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *InfectedFiles) GetPaginationCookie() string {
	if o == nil || o.PaginationCookie.Get() == nil {
		var ret string
		return ret
	}
	return *o.PaginationCookie.Get()
}

// GetPaginationCookieOk returns a tuple with the PaginationCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *InfectedFiles) GetPaginationCookieOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PaginationCookie.Get(), o.PaginationCookie.IsSet()
}

// HasPaginationCookie returns a boolean if a field has been set.
func (o *InfectedFiles) HasPaginationCookie() bool {
	if o != nil && o.PaginationCookie.IsSet() {
		return true
	}

	return false
}

// SetPaginationCookie gets a reference to the given NullableString and assigns it to the PaginationCookie field.
func (o *InfectedFiles) SetPaginationCookie(v string) {
	o.PaginationCookie.Set(&v)
}
// SetPaginationCookieNil sets the value for PaginationCookie to be an explicit nil
func (o *InfectedFiles) SetPaginationCookieNil() {
	o.PaginationCookie.Set(nil)
}

// UnsetPaginationCookie ensures that no value is present for PaginationCookie, not even an explicit nil
func (o *InfectedFiles) UnsetPaginationCookie() {
	o.PaginationCookie.Unset()
}

func (o InfectedFiles) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.InfectedFiles != nil {
		toSerialize["infectedFiles"] = o.InfectedFiles
	}
	if o.PaginationCookie.IsSet() {
		toSerialize["paginationCookie"] = o.PaginationCookie.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableInfectedFiles struct {
	value *InfectedFiles
	isSet bool
}

func (v NullableInfectedFiles) Get() *InfectedFiles {
	return v.value
}

func (v *NullableInfectedFiles) Set(val *InfectedFiles) {
	v.value = val
	v.isSet = true
}

func (v NullableInfectedFiles) IsSet() bool {
	return v.isSet
}

func (v *NullableInfectedFiles) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInfectedFiles(val *InfectedFiles) *NullableInfectedFiles {
	return &NullableInfectedFiles{value: val, isSet: true}
}

func (v NullableInfectedFiles) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInfectedFiles) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


