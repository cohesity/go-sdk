/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleSession Specifies information about session configuration for an Oracle host.
type OracleSession struct {
	// Location is the path where Oracle is installed.
	Location NullableString `json:"location,omitempty"`
	// SystemIdentifier is the unique Oracle System Identifier for the DB instance.
	SystemIdentifier NullableString `json:"systemIdentifier,omitempty"`
}

// NewOracleSession instantiates a new OracleSession object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleSession() *OracleSession {
	this := OracleSession{}
	return &this
}

// NewOracleSessionWithDefaults instantiates a new OracleSession object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleSessionWithDefaults() *OracleSession {
	this := OracleSession{}
	return &this
}

// GetLocation returns the Location field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSession) GetLocation() string {
	if o == nil || o.Location.Get() == nil {
		var ret string
		return ret
	}
	return *o.Location.Get()
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSession) GetLocationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Location.Get(), o.Location.IsSet()
}

// HasLocation returns a boolean if a field has been set.
func (o *OracleSession) HasLocation() bool {
	if o != nil && o.Location.IsSet() {
		return true
	}

	return false
}

// SetLocation gets a reference to the given NullableString and assigns it to the Location field.
func (o *OracleSession) SetLocation(v string) {
	o.Location.Set(&v)
}
// SetLocationNil sets the value for Location to be an explicit nil
func (o *OracleSession) SetLocationNil() {
	o.Location.Set(nil)
}

// UnsetLocation ensures that no value is present for Location, not even an explicit nil
func (o *OracleSession) UnsetLocation() {
	o.Location.Unset()
}

// GetSystemIdentifier returns the SystemIdentifier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleSession) GetSystemIdentifier() string {
	if o == nil || o.SystemIdentifier.Get() == nil {
		var ret string
		return ret
	}
	return *o.SystemIdentifier.Get()
}

// GetSystemIdentifierOk returns a tuple with the SystemIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleSession) GetSystemIdentifierOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SystemIdentifier.Get(), o.SystemIdentifier.IsSet()
}

// HasSystemIdentifier returns a boolean if a field has been set.
func (o *OracleSession) HasSystemIdentifier() bool {
	if o != nil && o.SystemIdentifier.IsSet() {
		return true
	}

	return false
}

// SetSystemIdentifier gets a reference to the given NullableString and assigns it to the SystemIdentifier field.
func (o *OracleSession) SetSystemIdentifier(v string) {
	o.SystemIdentifier.Set(&v)
}
// SetSystemIdentifierNil sets the value for SystemIdentifier to be an explicit nil
func (o *OracleSession) SetSystemIdentifierNil() {
	o.SystemIdentifier.Set(nil)
}

// UnsetSystemIdentifier ensures that no value is present for SystemIdentifier, not even an explicit nil
func (o *OracleSession) UnsetSystemIdentifier() {
	o.SystemIdentifier.Unset()
}

func (o OracleSession) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Location.IsSet() {
		toSerialize["location"] = o.Location.Get()
	}
	if o.SystemIdentifier.IsSet() {
		toSerialize["systemIdentifier"] = o.SystemIdentifier.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleSession struct {
	value *OracleSession
	isSet bool
}

func (v NullableOracleSession) Get() *OracleSession {
	return v.value
}

func (v *NullableOracleSession) Set(val *OracleSession) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleSession) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleSession(val *OracleSession) *NullableOracleSession {
	return &NullableOracleSession{value: val, isSet: true}
}

func (v NullableOracleSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


