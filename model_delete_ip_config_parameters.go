/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DeleteIpConfigParameters Specifies the parameters needed for an ipunconfig request.
type DeleteIpConfigParameters struct {
	// Specifies the interface name to be deleted.
	Name NullableString `json:"name"`
}

// NewDeleteIpConfigParameters instantiates a new DeleteIpConfigParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeleteIpConfigParameters(name NullableString) *DeleteIpConfigParameters {
	this := DeleteIpConfigParameters{}
	this.Name = name
	return &this
}

// NewDeleteIpConfigParametersWithDefaults instantiates a new DeleteIpConfigParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeleteIpConfigParametersWithDefaults() *DeleteIpConfigParameters {
	this := DeleteIpConfigParameters{}
	return &this
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *DeleteIpConfigParameters) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeleteIpConfigParameters) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *DeleteIpConfigParameters) SetName(v string) {
	o.Name.Set(&v)
}

func (o DeleteIpConfigParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeleteIpConfigParameters struct {
	value *DeleteIpConfigParameters
	isSet bool
}

func (v NullableDeleteIpConfigParameters) Get() *DeleteIpConfigParameters {
	return v.value
}

func (v *NullableDeleteIpConfigParameters) Set(val *DeleteIpConfigParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableDeleteIpConfigParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableDeleteIpConfigParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeleteIpConfigParameters(val *DeleteIpConfigParameters) *NullableDeleteIpConfigParameters {
	return &NullableDeleteIpConfigParameters{value: val, isSet: true}
}

func (v NullableDeleteIpConfigParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeleteIpConfigParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


