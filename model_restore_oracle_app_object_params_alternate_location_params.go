/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreOracleAppObjectParamsAlternateLocationParams For restoring to alternate location this message can not be empty and all the fields inside the message also can not be empty.
type RestoreOracleAppObjectParamsAlternateLocationParams struct {
	// Base directory of Oracle at destination. Example : /u01/app/oracle
	BaseDir NullableString `json:"baseDir,omitempty"`
	// Location to put the database files(datafiles, logfiles etc.).
	DatabaseFileDestination NullableString `json:"databaseFileDestination,omitempty"`
	// Home directory of Oracle at destination. Example : /u01/app/oracle/product/11.2.0.3/db_1
	HomeDir NullableString `json:"homeDir,omitempty"`
	// The name of the Oracle database that we restore to.
	NewDatabaseName NullableString `json:"newDatabaseName,omitempty"`
	// Deprecated field SID of new Oracle database.
	NewSidDeprecated NullableString `json:"newSidDeprecated,omitempty"`
	OracleDbConfig *OracleDBConfig `json:"oracleDbConfig,omitempty"`
}

// NewRestoreOracleAppObjectParamsAlternateLocationParams instantiates a new RestoreOracleAppObjectParamsAlternateLocationParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreOracleAppObjectParamsAlternateLocationParams() *RestoreOracleAppObjectParamsAlternateLocationParams {
	this := RestoreOracleAppObjectParamsAlternateLocationParams{}
	return &this
}

// NewRestoreOracleAppObjectParamsAlternateLocationParamsWithDefaults instantiates a new RestoreOracleAppObjectParamsAlternateLocationParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreOracleAppObjectParamsAlternateLocationParamsWithDefaults() *RestoreOracleAppObjectParamsAlternateLocationParams {
	this := RestoreOracleAppObjectParamsAlternateLocationParams{}
	return &this
}

// GetBaseDir returns the BaseDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetBaseDir() string {
	if o == nil || o.BaseDir.Get() == nil {
		var ret string
		return ret
	}
	return *o.BaseDir.Get()
}

// GetBaseDirOk returns a tuple with the BaseDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetBaseDirOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BaseDir.Get(), o.BaseDir.IsSet()
}

// HasBaseDir returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) HasBaseDir() bool {
	if o != nil && o.BaseDir.IsSet() {
		return true
	}

	return false
}

// SetBaseDir gets a reference to the given NullableString and assigns it to the BaseDir field.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetBaseDir(v string) {
	o.BaseDir.Set(&v)
}
// SetBaseDirNil sets the value for BaseDir to be an explicit nil
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetBaseDirNil() {
	o.BaseDir.Set(nil)
}

// UnsetBaseDir ensures that no value is present for BaseDir, not even an explicit nil
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) UnsetBaseDir() {
	o.BaseDir.Unset()
}

// GetDatabaseFileDestination returns the DatabaseFileDestination field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetDatabaseFileDestination() string {
	if o == nil || o.DatabaseFileDestination.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseFileDestination.Get()
}

// GetDatabaseFileDestinationOk returns a tuple with the DatabaseFileDestination field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetDatabaseFileDestinationOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseFileDestination.Get(), o.DatabaseFileDestination.IsSet()
}

// HasDatabaseFileDestination returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) HasDatabaseFileDestination() bool {
	if o != nil && o.DatabaseFileDestination.IsSet() {
		return true
	}

	return false
}

// SetDatabaseFileDestination gets a reference to the given NullableString and assigns it to the DatabaseFileDestination field.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetDatabaseFileDestination(v string) {
	o.DatabaseFileDestination.Set(&v)
}
// SetDatabaseFileDestinationNil sets the value for DatabaseFileDestination to be an explicit nil
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetDatabaseFileDestinationNil() {
	o.DatabaseFileDestination.Set(nil)
}

// UnsetDatabaseFileDestination ensures that no value is present for DatabaseFileDestination, not even an explicit nil
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) UnsetDatabaseFileDestination() {
	o.DatabaseFileDestination.Unset()
}

// GetHomeDir returns the HomeDir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetHomeDir() string {
	if o == nil || o.HomeDir.Get() == nil {
		var ret string
		return ret
	}
	return *o.HomeDir.Get()
}

// GetHomeDirOk returns a tuple with the HomeDir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetHomeDirOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HomeDir.Get(), o.HomeDir.IsSet()
}

// HasHomeDir returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) HasHomeDir() bool {
	if o != nil && o.HomeDir.IsSet() {
		return true
	}

	return false
}

// SetHomeDir gets a reference to the given NullableString and assigns it to the HomeDir field.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetHomeDir(v string) {
	o.HomeDir.Set(&v)
}
// SetHomeDirNil sets the value for HomeDir to be an explicit nil
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetHomeDirNil() {
	o.HomeDir.Set(nil)
}

// UnsetHomeDir ensures that no value is present for HomeDir, not even an explicit nil
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) UnsetHomeDir() {
	o.HomeDir.Unset()
}

// GetNewDatabaseName returns the NewDatabaseName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetNewDatabaseName() string {
	if o == nil || o.NewDatabaseName.Get() == nil {
		var ret string
		return ret
	}
	return *o.NewDatabaseName.Get()
}

// GetNewDatabaseNameOk returns a tuple with the NewDatabaseName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetNewDatabaseNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewDatabaseName.Get(), o.NewDatabaseName.IsSet()
}

// HasNewDatabaseName returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) HasNewDatabaseName() bool {
	if o != nil && o.NewDatabaseName.IsSet() {
		return true
	}

	return false
}

// SetNewDatabaseName gets a reference to the given NullableString and assigns it to the NewDatabaseName field.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetNewDatabaseName(v string) {
	o.NewDatabaseName.Set(&v)
}
// SetNewDatabaseNameNil sets the value for NewDatabaseName to be an explicit nil
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetNewDatabaseNameNil() {
	o.NewDatabaseName.Set(nil)
}

// UnsetNewDatabaseName ensures that no value is present for NewDatabaseName, not even an explicit nil
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) UnsetNewDatabaseName() {
	o.NewDatabaseName.Unset()
}

// GetNewSidDeprecated returns the NewSidDeprecated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetNewSidDeprecated() string {
	if o == nil || o.NewSidDeprecated.Get() == nil {
		var ret string
		return ret
	}
	return *o.NewSidDeprecated.Get()
}

// GetNewSidDeprecatedOk returns a tuple with the NewSidDeprecated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetNewSidDeprecatedOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewSidDeprecated.Get(), o.NewSidDeprecated.IsSet()
}

// HasNewSidDeprecated returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) HasNewSidDeprecated() bool {
	if o != nil && o.NewSidDeprecated.IsSet() {
		return true
	}

	return false
}

// SetNewSidDeprecated gets a reference to the given NullableString and assigns it to the NewSidDeprecated field.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetNewSidDeprecated(v string) {
	o.NewSidDeprecated.Set(&v)
}
// SetNewSidDeprecatedNil sets the value for NewSidDeprecated to be an explicit nil
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetNewSidDeprecatedNil() {
	o.NewSidDeprecated.Set(nil)
}

// UnsetNewSidDeprecated ensures that no value is present for NewSidDeprecated, not even an explicit nil
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) UnsetNewSidDeprecated() {
	o.NewSidDeprecated.Unset()
}

// GetOracleDbConfig returns the OracleDbConfig field value if set, zero value otherwise.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetOracleDbConfig() OracleDBConfig {
	if o == nil || o.OracleDbConfig == nil {
		var ret OracleDBConfig
		return ret
	}
	return *o.OracleDbConfig
}

// GetOracleDbConfigOk returns a tuple with the OracleDbConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) GetOracleDbConfigOk() (*OracleDBConfig, bool) {
	if o == nil || o.OracleDbConfig == nil {
		return nil, false
	}
	return o.OracleDbConfig, true
}

// HasOracleDbConfig returns a boolean if a field has been set.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) HasOracleDbConfig() bool {
	if o != nil && o.OracleDbConfig != nil {
		return true
	}

	return false
}

// SetOracleDbConfig gets a reference to the given OracleDBConfig and assigns it to the OracleDbConfig field.
func (o *RestoreOracleAppObjectParamsAlternateLocationParams) SetOracleDbConfig(v OracleDBConfig) {
	o.OracleDbConfig = &v
}

func (o RestoreOracleAppObjectParamsAlternateLocationParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BaseDir.IsSet() {
		toSerialize["baseDir"] = o.BaseDir.Get()
	}
	if o.DatabaseFileDestination.IsSet() {
		toSerialize["databaseFileDestination"] = o.DatabaseFileDestination.Get()
	}
	if o.HomeDir.IsSet() {
		toSerialize["homeDir"] = o.HomeDir.Get()
	}
	if o.NewDatabaseName.IsSet() {
		toSerialize["newDatabaseName"] = o.NewDatabaseName.Get()
	}
	if o.NewSidDeprecated.IsSet() {
		toSerialize["newSidDeprecated"] = o.NewSidDeprecated.Get()
	}
	if o.OracleDbConfig != nil {
		toSerialize["oracleDbConfig"] = o.OracleDbConfig
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreOracleAppObjectParamsAlternateLocationParams struct {
	value *RestoreOracleAppObjectParamsAlternateLocationParams
	isSet bool
}

func (v NullableRestoreOracleAppObjectParamsAlternateLocationParams) Get() *RestoreOracleAppObjectParamsAlternateLocationParams {
	return v.value
}

func (v *NullableRestoreOracleAppObjectParamsAlternateLocationParams) Set(val *RestoreOracleAppObjectParamsAlternateLocationParams) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreOracleAppObjectParamsAlternateLocationParams) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreOracleAppObjectParamsAlternateLocationParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreOracleAppObjectParamsAlternateLocationParams(val *RestoreOracleAppObjectParamsAlternateLocationParams) *NullableRestoreOracleAppObjectParamsAlternateLocationParams {
	return &NullableRestoreOracleAppObjectParamsAlternateLocationParams{value: val, isSet: true}
}

func (v NullableRestoreOracleAppObjectParamsAlternateLocationParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreOracleAppObjectParamsAlternateLocationParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


