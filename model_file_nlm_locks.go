/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FileNlmLocks Specifies per-file NLM locks
type FileNlmLocks struct {
	FileId *FileId `json:"fileId,omitempty"`
	// Specifies the list of NLM locks in a view.
	NlmLocks []NlmLock `json:"nlmLocks,omitempty"`
}

// NewFileNlmLocks instantiates a new FileNlmLocks object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileNlmLocks() *FileNlmLocks {
	this := FileNlmLocks{}
	return &this
}

// NewFileNlmLocksWithDefaults instantiates a new FileNlmLocks object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileNlmLocksWithDefaults() *FileNlmLocks {
	this := FileNlmLocks{}
	return &this
}

// GetFileId returns the FileId field value if set, zero value otherwise.
func (o *FileNlmLocks) GetFileId() FileId {
	if o == nil || o.FileId == nil {
		var ret FileId
		return ret
	}
	return *o.FileId
}

// GetFileIdOk returns a tuple with the FileId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileNlmLocks) GetFileIdOk() (*FileId, bool) {
	if o == nil || o.FileId == nil {
		return nil, false
	}
	return o.FileId, true
}

// HasFileId returns a boolean if a field has been set.
func (o *FileNlmLocks) HasFileId() bool {
	if o != nil && o.FileId != nil {
		return true
	}

	return false
}

// SetFileId gets a reference to the given FileId and assigns it to the FileId field.
func (o *FileNlmLocks) SetFileId(v FileId) {
	o.FileId = &v
}

// GetNlmLocks returns the NlmLocks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileNlmLocks) GetNlmLocks() []NlmLock {
	if o == nil  {
		var ret []NlmLock
		return ret
	}
	return o.NlmLocks
}

// GetNlmLocksOk returns a tuple with the NlmLocks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileNlmLocks) GetNlmLocksOk() (*[]NlmLock, bool) {
	if o == nil || o.NlmLocks == nil {
		return nil, false
	}
	return &o.NlmLocks, true
}

// HasNlmLocks returns a boolean if a field has been set.
func (o *FileNlmLocks) HasNlmLocks() bool {
	if o != nil && o.NlmLocks != nil {
		return true
	}

	return false
}

// SetNlmLocks gets a reference to the given []NlmLock and assigns it to the NlmLocks field.
func (o *FileNlmLocks) SetNlmLocks(v []NlmLock) {
	o.NlmLocks = v
}

func (o FileNlmLocks) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileId != nil {
		toSerialize["fileId"] = o.FileId
	}
	if o.NlmLocks != nil {
		toSerialize["nlmLocks"] = o.NlmLocks
	}
	return json.Marshal(toSerialize)
}

type NullableFileNlmLocks struct {
	value *FileNlmLocks
	isSet bool
}

func (v NullableFileNlmLocks) Get() *FileNlmLocks {
	return v.value
}

func (v *NullableFileNlmLocks) Set(val *FileNlmLocks) {
	v.value = val
	v.isSet = true
}

func (v NullableFileNlmLocks) IsSet() bool {
	return v.isSet
}

func (v *NullableFileNlmLocks) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileNlmLocks(val *FileNlmLocks) *NullableFileNlmLocks {
	return &NullableFileNlmLocks{value: val, isSet: true}
}

func (v NullableFileNlmLocks) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileNlmLocks) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


