/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RegisteredApplicationServer Specifies an Application Server and the Protection Source that registered the Application Server.
type RegisteredApplicationServer struct {
	// Specifies the child subtree used to store additional application-level Objects. Different environments use the subtree to store application-level information. For example for SQL Server, this subtree stores the SQL Server instances running on a VM.
	ApplicationServer NullableProtectionSourceNode `json:"applicationServer,omitempty"`
	// Specifies the Protection Source like a VM or Physical Server that registered the Application Server.
	RegisteredProtectionSource NullableProtectionSource `json:"registeredProtectionSource,omitempty"`
}

// NewRegisteredApplicationServer instantiates a new RegisteredApplicationServer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisteredApplicationServer() *RegisteredApplicationServer {
	this := RegisteredApplicationServer{}
	return &this
}

// NewRegisteredApplicationServerWithDefaults instantiates a new RegisteredApplicationServer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisteredApplicationServerWithDefaults() *RegisteredApplicationServer {
	this := RegisteredApplicationServer{}
	return &this
}

// GetApplicationServer returns the ApplicationServer field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredApplicationServer) GetApplicationServer() ProtectionSourceNode {
	if o == nil || o.ApplicationServer.Get() == nil {
		var ret ProtectionSourceNode
		return ret
	}
	return *o.ApplicationServer.Get()
}

// GetApplicationServerOk returns a tuple with the ApplicationServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredApplicationServer) GetApplicationServerOk() (*ProtectionSourceNode, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApplicationServer.Get(), o.ApplicationServer.IsSet()
}

// HasApplicationServer returns a boolean if a field has been set.
func (o *RegisteredApplicationServer) HasApplicationServer() bool {
	if o != nil && o.ApplicationServer.IsSet() {
		return true
	}

	return false
}

// SetApplicationServer gets a reference to the given NullableProtectionSourceNode and assigns it to the ApplicationServer field.
func (o *RegisteredApplicationServer) SetApplicationServer(v ProtectionSourceNode) {
	o.ApplicationServer.Set(&v)
}
// SetApplicationServerNil sets the value for ApplicationServer to be an explicit nil
func (o *RegisteredApplicationServer) SetApplicationServerNil() {
	o.ApplicationServer.Set(nil)
}

// UnsetApplicationServer ensures that no value is present for ApplicationServer, not even an explicit nil
func (o *RegisteredApplicationServer) UnsetApplicationServer() {
	o.ApplicationServer.Unset()
}

// GetRegisteredProtectionSource returns the RegisteredProtectionSource field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisteredApplicationServer) GetRegisteredProtectionSource() ProtectionSource {
	if o == nil || o.RegisteredProtectionSource.Get() == nil {
		var ret ProtectionSource
		return ret
	}
	return *o.RegisteredProtectionSource.Get()
}

// GetRegisteredProtectionSourceOk returns a tuple with the RegisteredProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisteredApplicationServer) GetRegisteredProtectionSourceOk() (*ProtectionSource, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegisteredProtectionSource.Get(), o.RegisteredProtectionSource.IsSet()
}

// HasRegisteredProtectionSource returns a boolean if a field has been set.
func (o *RegisteredApplicationServer) HasRegisteredProtectionSource() bool {
	if o != nil && o.RegisteredProtectionSource.IsSet() {
		return true
	}

	return false
}

// SetRegisteredProtectionSource gets a reference to the given NullableProtectionSource and assigns it to the RegisteredProtectionSource field.
func (o *RegisteredApplicationServer) SetRegisteredProtectionSource(v ProtectionSource) {
	o.RegisteredProtectionSource.Set(&v)
}
// SetRegisteredProtectionSourceNil sets the value for RegisteredProtectionSource to be an explicit nil
func (o *RegisteredApplicationServer) SetRegisteredProtectionSourceNil() {
	o.RegisteredProtectionSource.Set(nil)
}

// UnsetRegisteredProtectionSource ensures that no value is present for RegisteredProtectionSource, not even an explicit nil
func (o *RegisteredApplicationServer) UnsetRegisteredProtectionSource() {
	o.RegisteredProtectionSource.Unset()
}

func (o RegisteredApplicationServer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplicationServer.IsSet() {
		toSerialize["applicationServer"] = o.ApplicationServer.Get()
	}
	if o.RegisteredProtectionSource.IsSet() {
		toSerialize["registeredProtectionSource"] = o.RegisteredProtectionSource.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRegisteredApplicationServer struct {
	value *RegisteredApplicationServer
	isSet bool
}

func (v NullableRegisteredApplicationServer) Get() *RegisteredApplicationServer {
	return v.value
}

func (v *NullableRegisteredApplicationServer) Set(val *RegisteredApplicationServer) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisteredApplicationServer) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisteredApplicationServer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisteredApplicationServer(val *RegisteredApplicationServer) *NullableRegisteredApplicationServer {
	return &NullableRegisteredApplicationServer{value: val, isSet: true}
}

func (v NullableRegisteredApplicationServer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisteredApplicationServer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


