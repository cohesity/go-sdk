/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CloneTaskRequest Specifies the settings for a Restore Task that clones VMs or Views.
type CloneTaskRequest struct {
	// Specifies settings for cloning an existing View. This field is required for a 'kCloneView' Restore Task.
	CloneViewParameters NullableCloneViewRequest `json:"cloneViewParameters,omitempty"`
	// Specifies if the Restore Task should continue when some operations on some objects fail. If true, the Cohesity Cluster ignores intermittent errors and restores as many objects as possible.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies the way data needs to be retrieved from the external target. This information will be filled in by Iris and Magneto will pass it along to the Icebox as it is to support bulk retrieval from Glacier. Specifies the type of Restore Task.  'kStandard' specifies retrievals that allow to access any of your archives within several hours. Standard retrievals typically complete within 3–5 hours. This is the default option for retrieval requests that do not specify the retrieval option. 'kBulk' specifies retrievals that are Glacier’s lowest-cost retrieval option, which can be used to retrieve large amounts, even petabytes, of data inexpensively in a day. Bulk retrieval typically complete within 5–12 hours. 'kExpedited' specifies retrievals that allows to quickly access your data when occasional urgent requests for a subset of archives are required. For all but the largest archives (250 MB+), data accessed using Expedited retrievals are typically made available within 1–5 minutes.
	GlacierRetrievalType NullableString `json:"glacierRetrievalType,omitempty"`
	HypervParameters *HypervCloneParameters `json:"hypervParameters,omitempty"`
	// Specifies the name of the Restore Task. This field must be set and must be a unique name.
	Name NullableString `json:"name"`
	// Specify a new registered parent Protection Source. If specified the selected objects are cloned or recovered to this new Protection Source. If not specified, objects are cloned or recovered to the original Protection Source that was managing them.
	NewParentId NullableInt64 `json:"newParentId,omitempty"`
	// Array of Objects.  Specifies a list of Protection Source objects or Protection Job objects (with specified Protection Source objects).
	Objects []RestoreObjectDetails `json:"objects,omitempty"`
	// Specifies the name of the View where the cloned VMs are stored. This field is required for a 'kCloneVMs' Restore Task.
	TargetViewName NullableString `json:"targetViewName,omitempty"`
	// Specifies the type of Restore Task such as 'kCloneVMs' or 'kCloneView'. 'kCloneVMs' specifies a Restore Task that clones VMs. 'kCloneView' specifies a Restore Task that clones a View.
	Type NullableString `json:"type"`
	VlanParameters *VlanParameters `json:"vlanParameters,omitempty"`
	VmwareParameters *VmwareCloneParameters `json:"vmwareParameters,omitempty"`
}

// NewCloneTaskRequest instantiates a new CloneTaskRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCloneTaskRequest(name NullableString, type_ NullableString) *CloneTaskRequest {
	this := CloneTaskRequest{}
	this.Name = name
	this.Type = type_
	return &this
}

// NewCloneTaskRequestWithDefaults instantiates a new CloneTaskRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCloneTaskRequestWithDefaults() *CloneTaskRequest {
	this := CloneTaskRequest{}
	return &this
}

// GetCloneViewParameters returns the CloneViewParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneTaskRequest) GetCloneViewParameters() CloneViewRequest {
	if o == nil || o.CloneViewParameters.Get() == nil {
		var ret CloneViewRequest
		return ret
	}
	return *o.CloneViewParameters.Get()
}

// GetCloneViewParametersOk returns a tuple with the CloneViewParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneTaskRequest) GetCloneViewParametersOk() (*CloneViewRequest, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CloneViewParameters.Get(), o.CloneViewParameters.IsSet()
}

// HasCloneViewParameters returns a boolean if a field has been set.
func (o *CloneTaskRequest) HasCloneViewParameters() bool {
	if o != nil && o.CloneViewParameters.IsSet() {
		return true
	}

	return false
}

// SetCloneViewParameters gets a reference to the given NullableCloneViewRequest and assigns it to the CloneViewParameters field.
func (o *CloneTaskRequest) SetCloneViewParameters(v CloneViewRequest) {
	o.CloneViewParameters.Set(&v)
}
// SetCloneViewParametersNil sets the value for CloneViewParameters to be an explicit nil
func (o *CloneTaskRequest) SetCloneViewParametersNil() {
	o.CloneViewParameters.Set(nil)
}

// UnsetCloneViewParameters ensures that no value is present for CloneViewParameters, not even an explicit nil
func (o *CloneTaskRequest) UnsetCloneViewParameters() {
	o.CloneViewParameters.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneTaskRequest) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneTaskRequest) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *CloneTaskRequest) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *CloneTaskRequest) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *CloneTaskRequest) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *CloneTaskRequest) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetGlacierRetrievalType returns the GlacierRetrievalType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneTaskRequest) GetGlacierRetrievalType() string {
	if o == nil || o.GlacierRetrievalType.Get() == nil {
		var ret string
		return ret
	}
	return *o.GlacierRetrievalType.Get()
}

// GetGlacierRetrievalTypeOk returns a tuple with the GlacierRetrievalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneTaskRequest) GetGlacierRetrievalTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.GlacierRetrievalType.Get(), o.GlacierRetrievalType.IsSet()
}

// HasGlacierRetrievalType returns a boolean if a field has been set.
func (o *CloneTaskRequest) HasGlacierRetrievalType() bool {
	if o != nil && o.GlacierRetrievalType.IsSet() {
		return true
	}

	return false
}

// SetGlacierRetrievalType gets a reference to the given NullableString and assigns it to the GlacierRetrievalType field.
func (o *CloneTaskRequest) SetGlacierRetrievalType(v string) {
	o.GlacierRetrievalType.Set(&v)
}
// SetGlacierRetrievalTypeNil sets the value for GlacierRetrievalType to be an explicit nil
func (o *CloneTaskRequest) SetGlacierRetrievalTypeNil() {
	o.GlacierRetrievalType.Set(nil)
}

// UnsetGlacierRetrievalType ensures that no value is present for GlacierRetrievalType, not even an explicit nil
func (o *CloneTaskRequest) UnsetGlacierRetrievalType() {
	o.GlacierRetrievalType.Unset()
}

// GetHypervParameters returns the HypervParameters field value if set, zero value otherwise.
func (o *CloneTaskRequest) GetHypervParameters() HypervCloneParameters {
	if o == nil || o.HypervParameters == nil {
		var ret HypervCloneParameters
		return ret
	}
	return *o.HypervParameters
}

// GetHypervParametersOk returns a tuple with the HypervParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneTaskRequest) GetHypervParametersOk() (*HypervCloneParameters, bool) {
	if o == nil || o.HypervParameters == nil {
		return nil, false
	}
	return o.HypervParameters, true
}

// HasHypervParameters returns a boolean if a field has been set.
func (o *CloneTaskRequest) HasHypervParameters() bool {
	if o != nil && o.HypervParameters != nil {
		return true
	}

	return false
}

// SetHypervParameters gets a reference to the given HypervCloneParameters and assigns it to the HypervParameters field.
func (o *CloneTaskRequest) SetHypervParameters(v HypervCloneParameters) {
	o.HypervParameters = &v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CloneTaskRequest) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneTaskRequest) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *CloneTaskRequest) SetName(v string) {
	o.Name.Set(&v)
}

// GetNewParentId returns the NewParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneTaskRequest) GetNewParentId() int64 {
	if o == nil || o.NewParentId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NewParentId.Get()
}

// GetNewParentIdOk returns a tuple with the NewParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneTaskRequest) GetNewParentIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewParentId.Get(), o.NewParentId.IsSet()
}

// HasNewParentId returns a boolean if a field has been set.
func (o *CloneTaskRequest) HasNewParentId() bool {
	if o != nil && o.NewParentId.IsSet() {
		return true
	}

	return false
}

// SetNewParentId gets a reference to the given NullableInt64 and assigns it to the NewParentId field.
func (o *CloneTaskRequest) SetNewParentId(v int64) {
	o.NewParentId.Set(&v)
}
// SetNewParentIdNil sets the value for NewParentId to be an explicit nil
func (o *CloneTaskRequest) SetNewParentIdNil() {
	o.NewParentId.Set(nil)
}

// UnsetNewParentId ensures that no value is present for NewParentId, not even an explicit nil
func (o *CloneTaskRequest) UnsetNewParentId() {
	o.NewParentId.Unset()
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneTaskRequest) GetObjects() []RestoreObjectDetails {
	if o == nil  {
		var ret []RestoreObjectDetails
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneTaskRequest) GetObjectsOk() (*[]RestoreObjectDetails, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return &o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *CloneTaskRequest) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []RestoreObjectDetails and assigns it to the Objects field.
func (o *CloneTaskRequest) SetObjects(v []RestoreObjectDetails) {
	o.Objects = v
}

// GetTargetViewName returns the TargetViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CloneTaskRequest) GetTargetViewName() string {
	if o == nil || o.TargetViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetViewName.Get()
}

// GetTargetViewNameOk returns a tuple with the TargetViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneTaskRequest) GetTargetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetViewName.Get(), o.TargetViewName.IsSet()
}

// HasTargetViewName returns a boolean if a field has been set.
func (o *CloneTaskRequest) HasTargetViewName() bool {
	if o != nil && o.TargetViewName.IsSet() {
		return true
	}

	return false
}

// SetTargetViewName gets a reference to the given NullableString and assigns it to the TargetViewName field.
func (o *CloneTaskRequest) SetTargetViewName(v string) {
	o.TargetViewName.Set(&v)
}
// SetTargetViewNameNil sets the value for TargetViewName to be an explicit nil
func (o *CloneTaskRequest) SetTargetViewNameNil() {
	o.TargetViewName.Set(nil)
}

// UnsetTargetViewName ensures that no value is present for TargetViewName, not even an explicit nil
func (o *CloneTaskRequest) UnsetTargetViewName() {
	o.TargetViewName.Unset()
}

// GetType returns the Type field value
// If the value is explicit nil, the zero value for string will be returned
func (o *CloneTaskRequest) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}

	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CloneTaskRequest) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// SetType sets field value
func (o *CloneTaskRequest) SetType(v string) {
	o.Type.Set(&v)
}

// GetVlanParameters returns the VlanParameters field value if set, zero value otherwise.
func (o *CloneTaskRequest) GetVlanParameters() VlanParameters {
	if o == nil || o.VlanParameters == nil {
		var ret VlanParameters
		return ret
	}
	return *o.VlanParameters
}

// GetVlanParametersOk returns a tuple with the VlanParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneTaskRequest) GetVlanParametersOk() (*VlanParameters, bool) {
	if o == nil || o.VlanParameters == nil {
		return nil, false
	}
	return o.VlanParameters, true
}

// HasVlanParameters returns a boolean if a field has been set.
func (o *CloneTaskRequest) HasVlanParameters() bool {
	if o != nil && o.VlanParameters != nil {
		return true
	}

	return false
}

// SetVlanParameters gets a reference to the given VlanParameters and assigns it to the VlanParameters field.
func (o *CloneTaskRequest) SetVlanParameters(v VlanParameters) {
	o.VlanParameters = &v
}

// GetVmwareParameters returns the VmwareParameters field value if set, zero value otherwise.
func (o *CloneTaskRequest) GetVmwareParameters() VmwareCloneParameters {
	if o == nil || o.VmwareParameters == nil {
		var ret VmwareCloneParameters
		return ret
	}
	return *o.VmwareParameters
}

// GetVmwareParametersOk returns a tuple with the VmwareParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CloneTaskRequest) GetVmwareParametersOk() (*VmwareCloneParameters, bool) {
	if o == nil || o.VmwareParameters == nil {
		return nil, false
	}
	return o.VmwareParameters, true
}

// HasVmwareParameters returns a boolean if a field has been set.
func (o *CloneTaskRequest) HasVmwareParameters() bool {
	if o != nil && o.VmwareParameters != nil {
		return true
	}

	return false
}

// SetVmwareParameters gets a reference to the given VmwareCloneParameters and assigns it to the VmwareParameters field.
func (o *CloneTaskRequest) SetVmwareParameters(v VmwareCloneParameters) {
	o.VmwareParameters = &v
}

func (o CloneTaskRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CloneViewParameters.IsSet() {
		toSerialize["cloneViewParameters"] = o.CloneViewParameters.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.GlacierRetrievalType.IsSet() {
		toSerialize["glacierRetrievalType"] = o.GlacierRetrievalType.Get()
	}
	if o.HypervParameters != nil {
		toSerialize["hypervParameters"] = o.HypervParameters
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NewParentId.IsSet() {
		toSerialize["newParentId"] = o.NewParentId.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.TargetViewName.IsSet() {
		toSerialize["targetViewName"] = o.TargetViewName.Get()
	}
	if true {
		toSerialize["type"] = o.Type.Get()
	}
	if o.VlanParameters != nil {
		toSerialize["vlanParameters"] = o.VlanParameters
	}
	if o.VmwareParameters != nil {
		toSerialize["vmwareParameters"] = o.VmwareParameters
	}
	return json.Marshal(toSerialize)
}

type NullableCloneTaskRequest struct {
	value *CloneTaskRequest
	isSet bool
}

func (v NullableCloneTaskRequest) Get() *CloneTaskRequest {
	return v.value
}

func (v *NullableCloneTaskRequest) Set(val *CloneTaskRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCloneTaskRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCloneTaskRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCloneTaskRequest(val *CloneTaskRequest) *NullableCloneTaskRequest {
	return &NullableCloneTaskRequest{value: val, isSet: true}
}

func (v NullableCloneTaskRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCloneTaskRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


