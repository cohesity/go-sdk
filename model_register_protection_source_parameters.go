/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RegisterProtectionSourceParameters Specifies the parameters required to register a Protection Source.
type RegisterProtectionSourceParameters struct {
	// Specifies the entity type if the environment is kAcropolis. overrideDescription: true
	AcropolisType NullableString `json:"acropolisType,omitempty"`
	// Specifies the agent endpoint if it is different from the source endpoint.
	AgentEndpoint NullableString `json:"agentEndpoint,omitempty"`
	AwsCredentials *AwsCredentials `json:"awsCredentials,omitempty"`
	AwsFleetParams *AwsFleetParams `json:"awsFleetParams,omitempty"`
	AzureCredentials *AzureCredentials `json:"azureCredentials,omitempty"`
	// Specifies the list of IP Addresses on the registered source to be blacklisted for doing any type of IO operations.
	BlacklistedIpAddresses []string `json:"blacklistedIpAddresses,omitempty"`
	ClusterNetworkInfo *FleetNetworkParams `json:"clusterNetworkInfo,omitempty"`
	// Specifies the network endpoint of the Protection Source where it is reachable. It could be an URL or hostname or an IP address of the Protection Source.
	Endpoint NullableString `json:"endpoint,omitempty"`
	// Specifies the environment such as 'kPhysical' or 'kVMware' of the Protection Source. overrideDescription: true Supported environment types such as 'kView', 'kSQL', 'kVMware', etc. NOTE: 'kPuppeteer' refers to Cohesity's Remote Adapter. 'kVMware' indicates the VMware Protection Source environment. 'kHyperV' indicates the HyperV Protection Source environment. 'kSQL' indicates the SQL Protection Source environment. 'kView' indicates the View Protection Source environment. 'kPuppeteer' indicates the Cohesity's Remote Adapter. 'kPhysical' indicates the physical Protection Source environment. 'kPure' indicates the Pure Storage Protection Source environment. 'Nimble' indicates the Nimble Storage Protection Source environment. 'kAzure' indicates the Microsoft's Azure Protection Source environment. 'kNetapp' indicates the Netapp Protection Source environment. 'kAgent' indicates the Agent Protection Source environment. 'kGenericNas' indicates the Generic Network Attached Storage Protection Source environment. 'kAcropolis' indicates the Acropolis Protection Source environment. 'kPhsicalFiles' indicates the Physical Files Protection Source environment. 'kIsilon' indicates the Dell EMC's Isilon Protection Source environment. 'kGPFS' indicates IBM's GPFS Protection Source environment. 'kKVM' indicates the KVM Protection Source environment. 'kAWS' indicates the AWS Protection Source environment. 'kExchange' indicates the Exchange Protection Source environment. 'kHyperVVSS' indicates the HyperV VSS Protection Source environment. 'kOracle' indicates the Oracle Protection Source environment. 'kGCP' indicates the Google Cloud Platform Protection Source environment. 'kFlashBlade' indicates the Flash Blade Protection Source environment. 'kAWSNative' indicates the AWS Native Protection Source environment. 'kO365' indicates the Office 365 Protection Source environment. 'kO365Outlook' indicates Office 365 outlook Protection Source environment. 'kHyperFlex' indicates the Hyper Flex Protection Source environment. 'kGCPNative' indicates the GCP Native Protection Source environment. 'kAzureNative' indicates the Azure Native Protection Source environment. 'kKubernetes' indicates a Kubernetes Protection Source environment. 'kElastifile' indicates Elastifile Protection Source environment. 'kAD' indicates Active Directory Protection Source environment. 'kRDSSnapshotManager' indicates AWS RDS Protection Source environment. 'kCassandra' indicates Cassandra Protection Source environment. 'kMongoDB' indicates MongoDB Protection Source environment. 'kCouchbase' indicates Couchbase Protection Source environment. 'kHdfs' indicates Hdfs Protection Source environment. 'kHive' indicates Hive Protection Source environment. 'kHBase' indicates HBase Protection Source environment.
	Environment NullableString `json:"environment,omitempty"`
	ExchangeDagProtectionPreference *ExchangeDAGProtectionPreference `json:"exchangeDagProtectionPreference,omitempty"`
	// ForceRegister is applicable to Physical Environment. By default, the agent running on a physical host will fail the registration, if it is already registered as part of another cluster. By setting this option to true, agent can be forced to register with the current cluster. This is a hidden parameter and should not be documented externally.
	ForceRegister NullableBool `json:"forceRegister,omitempty"`
	GcpCredentials *GcpCredentials `json:"gcpCredentials,omitempty"`
	// Specifies the optional OS type of the Protection Source (such as kWindows or kLinux). overrideDescription: true 'kLinux' indicates the Linux operating system. 'kWindows' indicates the Microsoft Windows operating system. 'kAix' indicates the IBM AIX operating system. 'kSolaris' indicates the Oracle Solaris operating system. 'kSapHana' indicates the Sap Hana database system developed by SAP SE. 'kOther' indicates the other types of operating system.
	HostType NullableString `json:"hostType,omitempty"`
	// Specifies the entity type if the environment is kHyperV. overrideDescription: true
	HyperVType NullableString `json:"hyperVType,omitempty"`
	KubernetesCredentials *KubernetesCredentials `json:"kubernetesCredentials,omitempty"`
	// Specifies the entity type if the environment is kKubernetes. overrideDescription: true
	KubernetesType NullableString `json:"kubernetesType,omitempty"`
	// Specifies the entity type if the environment is kKVM. overrideDescription: true
	KvmType NullableString `json:"kvmType,omitempty"`
	// Specifies the server credentials to connect to a NetApp server. This field is required for mounting SMB volumes on NetApp servers.
	NasMountCredentials NullableNasMountCredentialParams `json:"nasMountCredentials,omitempty"`
	// Specifies the entity type such as 'kCluster,' if the environment is kNetapp.
	NetappType NullableString `json:"netappType,omitempty"`
	// Specifies the entity type such as 'kStorageArray' if the environment is kNimble. overrideDescription: true
	NimbleType NullableString `json:"nimbleType,omitempty"`
	// Office365 Source Credentials.  Specifies credentials needed to authenticate & authorize user for Office365 using MS Graph APIs.
	Office365CredentialsList []Office365Credentials `json:"office365CredentialsList,omitempty"`
	// Specifies the region for Office365.
	Office365Region NullableString `json:"office365Region,omitempty"`
	// Specifies the entity type such as 'kDomain', 'kOutlook', 'kMailbox', if the environment is kO365.
	Office365Type NullableString `json:"office365Type,omitempty"`
	// Specifies password of the username to access the target source.
	Password NullableString `json:"password,omitempty"`
	// Specifies the entity type such as 'kPhysicalHost' if the environment is kPhysical. overrideDescription: true
	PhysicalType NullableString `json:"physicalType,omitempty"`
	// Specifies the entity type such as 'kStorageArray' if the environment is kPure. overrideDescription: true
	PureType NullableString `json:"pureType,omitempty"`
	// ReRegister is applicable to Physical Environment. By default, the agent running on a physical host will fail the registration, if it is already registered with the cluster. By setting this option to true, agent can be re-registered with the current cluster.
	ReRegister NullableBool `json:"reRegister,omitempty"`
	// This controls whether to use source side dedup on the source or not. This is only applicable to sources which support source side dedup (e.g., Linux physical servers).
	SourceSideDedupEnabled NullableBool `json:"sourceSideDedupEnabled,omitempty"`
	SslVerification *SslVerification `json:"sslVerification,omitempty"`
	// Specifies the list of subnet IP addresses and CIDR prefix for enabeling network data transfer. Currently, only Subnet IP and NetbaskBits are valid input fields. All other fields provided as input will be ignored.
	Subnets []Subnet `json:"subnets,omitempty"`
	// Specifies the throttling policy that should be applied to this Source.
	ThrottlingPolicy NullableThrottlingPolicyParameters `json:"throttlingPolicy,omitempty"`
	// Array of Throttling Policy Overrides for Datastores.  Specifies a list of Throttling Policy for datastores that override the common throttling policy specified for the registered Protection Source. For datastores not in this list, common policy will still apply.
	ThrottlingPolicyOverrides []ThrottlingPolicyOverride `json:"throttlingPolicyOverrides,omitempty"`
	// Specifies whether OAuth should be used for authentication in case of Exchange Online.
	UseOAuthForExchangeOnline NullableBool `json:"useOAuthForExchangeOnline,omitempty"`
	// Specifies username to access the target source.
	Username NullableString `json:"username,omitempty"`
	VlanParams *VlanParameters `json:"vlanParams,omitempty"`
	// Specifies the entity type such as 'kVCenter' if the environment is kKMware. overrideDescription: true
	VmwareType NullableString `json:"vmwareType,omitempty"`
}

// NewRegisterProtectionSourceParameters instantiates a new RegisterProtectionSourceParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRegisterProtectionSourceParameters() *RegisterProtectionSourceParameters {
	this := RegisterProtectionSourceParameters{}
	return &this
}

// NewRegisterProtectionSourceParametersWithDefaults instantiates a new RegisterProtectionSourceParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRegisterProtectionSourceParametersWithDefaults() *RegisterProtectionSourceParameters {
	this := RegisterProtectionSourceParameters{}
	return &this
}

// GetAcropolisType returns the AcropolisType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetAcropolisType() string {
	if o == nil || o.AcropolisType.Get() == nil {
		var ret string
		return ret
	}
	return *o.AcropolisType.Get()
}

// GetAcropolisTypeOk returns a tuple with the AcropolisType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetAcropolisTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AcropolisType.Get(), o.AcropolisType.IsSet()
}

// HasAcropolisType returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasAcropolisType() bool {
	if o != nil && o.AcropolisType.IsSet() {
		return true
	}

	return false
}

// SetAcropolisType gets a reference to the given NullableString and assigns it to the AcropolisType field.
func (o *RegisterProtectionSourceParameters) SetAcropolisType(v string) {
	o.AcropolisType.Set(&v)
}
// SetAcropolisTypeNil sets the value for AcropolisType to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetAcropolisTypeNil() {
	o.AcropolisType.Set(nil)
}

// UnsetAcropolisType ensures that no value is present for AcropolisType, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetAcropolisType() {
	o.AcropolisType.Unset()
}

// GetAgentEndpoint returns the AgentEndpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetAgentEndpoint() string {
	if o == nil || o.AgentEndpoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.AgentEndpoint.Get()
}

// GetAgentEndpointOk returns a tuple with the AgentEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetAgentEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AgentEndpoint.Get(), o.AgentEndpoint.IsSet()
}

// HasAgentEndpoint returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasAgentEndpoint() bool {
	if o != nil && o.AgentEndpoint.IsSet() {
		return true
	}

	return false
}

// SetAgentEndpoint gets a reference to the given NullableString and assigns it to the AgentEndpoint field.
func (o *RegisterProtectionSourceParameters) SetAgentEndpoint(v string) {
	o.AgentEndpoint.Set(&v)
}
// SetAgentEndpointNil sets the value for AgentEndpoint to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetAgentEndpointNil() {
	o.AgentEndpoint.Set(nil)
}

// UnsetAgentEndpoint ensures that no value is present for AgentEndpoint, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetAgentEndpoint() {
	o.AgentEndpoint.Unset()
}

// GetAwsCredentials returns the AwsCredentials field value if set, zero value otherwise.
func (o *RegisterProtectionSourceParameters) GetAwsCredentials() AwsCredentials {
	if o == nil || o.AwsCredentials == nil {
		var ret AwsCredentials
		return ret
	}
	return *o.AwsCredentials
}

// GetAwsCredentialsOk returns a tuple with the AwsCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProtectionSourceParameters) GetAwsCredentialsOk() (*AwsCredentials, bool) {
	if o == nil || o.AwsCredentials == nil {
		return nil, false
	}
	return o.AwsCredentials, true
}

// HasAwsCredentials returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasAwsCredentials() bool {
	if o != nil && o.AwsCredentials != nil {
		return true
	}

	return false
}

// SetAwsCredentials gets a reference to the given AwsCredentials and assigns it to the AwsCredentials field.
func (o *RegisterProtectionSourceParameters) SetAwsCredentials(v AwsCredentials) {
	o.AwsCredentials = &v
}

// GetAwsFleetParams returns the AwsFleetParams field value if set, zero value otherwise.
func (o *RegisterProtectionSourceParameters) GetAwsFleetParams() AwsFleetParams {
	if o == nil || o.AwsFleetParams == nil {
		var ret AwsFleetParams
		return ret
	}
	return *o.AwsFleetParams
}

// GetAwsFleetParamsOk returns a tuple with the AwsFleetParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProtectionSourceParameters) GetAwsFleetParamsOk() (*AwsFleetParams, bool) {
	if o == nil || o.AwsFleetParams == nil {
		return nil, false
	}
	return o.AwsFleetParams, true
}

// HasAwsFleetParams returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasAwsFleetParams() bool {
	if o != nil && o.AwsFleetParams != nil {
		return true
	}

	return false
}

// SetAwsFleetParams gets a reference to the given AwsFleetParams and assigns it to the AwsFleetParams field.
func (o *RegisterProtectionSourceParameters) SetAwsFleetParams(v AwsFleetParams) {
	o.AwsFleetParams = &v
}

// GetAzureCredentials returns the AzureCredentials field value if set, zero value otherwise.
func (o *RegisterProtectionSourceParameters) GetAzureCredentials() AzureCredentials {
	if o == nil || o.AzureCredentials == nil {
		var ret AzureCredentials
		return ret
	}
	return *o.AzureCredentials
}

// GetAzureCredentialsOk returns a tuple with the AzureCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProtectionSourceParameters) GetAzureCredentialsOk() (*AzureCredentials, bool) {
	if o == nil || o.AzureCredentials == nil {
		return nil, false
	}
	return o.AzureCredentials, true
}

// HasAzureCredentials returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasAzureCredentials() bool {
	if o != nil && o.AzureCredentials != nil {
		return true
	}

	return false
}

// SetAzureCredentials gets a reference to the given AzureCredentials and assigns it to the AzureCredentials field.
func (o *RegisterProtectionSourceParameters) SetAzureCredentials(v AzureCredentials) {
	o.AzureCredentials = &v
}

// GetBlacklistedIpAddresses returns the BlacklistedIpAddresses field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetBlacklistedIpAddresses() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.BlacklistedIpAddresses
}

// GetBlacklistedIpAddressesOk returns a tuple with the BlacklistedIpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetBlacklistedIpAddressesOk() (*[]string, bool) {
	if o == nil || o.BlacklistedIpAddresses == nil {
		return nil, false
	}
	return &o.BlacklistedIpAddresses, true
}

// HasBlacklistedIpAddresses returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasBlacklistedIpAddresses() bool {
	if o != nil && o.BlacklistedIpAddresses != nil {
		return true
	}

	return false
}

// SetBlacklistedIpAddresses gets a reference to the given []string and assigns it to the BlacklistedIpAddresses field.
func (o *RegisterProtectionSourceParameters) SetBlacklistedIpAddresses(v []string) {
	o.BlacklistedIpAddresses = v
}

// GetClusterNetworkInfo returns the ClusterNetworkInfo field value if set, zero value otherwise.
func (o *RegisterProtectionSourceParameters) GetClusterNetworkInfo() FleetNetworkParams {
	if o == nil || o.ClusterNetworkInfo == nil {
		var ret FleetNetworkParams
		return ret
	}
	return *o.ClusterNetworkInfo
}

// GetClusterNetworkInfoOk returns a tuple with the ClusterNetworkInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProtectionSourceParameters) GetClusterNetworkInfoOk() (*FleetNetworkParams, bool) {
	if o == nil || o.ClusterNetworkInfo == nil {
		return nil, false
	}
	return o.ClusterNetworkInfo, true
}

// HasClusterNetworkInfo returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasClusterNetworkInfo() bool {
	if o != nil && o.ClusterNetworkInfo != nil {
		return true
	}

	return false
}

// SetClusterNetworkInfo gets a reference to the given FleetNetworkParams and assigns it to the ClusterNetworkInfo field.
func (o *RegisterProtectionSourceParameters) SetClusterNetworkInfo(v FleetNetworkParams) {
	o.ClusterNetworkInfo = &v
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetEndpoint() string {
	if o == nil || o.Endpoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.Endpoint.Get()
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Endpoint.Get(), o.Endpoint.IsSet()
}

// HasEndpoint returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasEndpoint() bool {
	if o != nil && o.Endpoint.IsSet() {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given NullableString and assigns it to the Endpoint field.
func (o *RegisterProtectionSourceParameters) SetEndpoint(v string) {
	o.Endpoint.Set(&v)
}
// SetEndpointNil sets the value for Endpoint to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetEndpointNil() {
	o.Endpoint.Set(nil)
}

// UnsetEndpoint ensures that no value is present for Endpoint, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetEndpoint() {
	o.Endpoint.Unset()
}

// GetEnvironment returns the Environment field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetEnvironment() string {
	if o == nil || o.Environment.Get() == nil {
		var ret string
		return ret
	}
	return *o.Environment.Get()
}

// GetEnvironmentOk returns a tuple with the Environment field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetEnvironmentOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Environment.Get(), o.Environment.IsSet()
}

// HasEnvironment returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasEnvironment() bool {
	if o != nil && o.Environment.IsSet() {
		return true
	}

	return false
}

// SetEnvironment gets a reference to the given NullableString and assigns it to the Environment field.
func (o *RegisterProtectionSourceParameters) SetEnvironment(v string) {
	o.Environment.Set(&v)
}
// SetEnvironmentNil sets the value for Environment to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetEnvironmentNil() {
	o.Environment.Set(nil)
}

// UnsetEnvironment ensures that no value is present for Environment, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetEnvironment() {
	o.Environment.Unset()
}

// GetExchangeDagProtectionPreference returns the ExchangeDagProtectionPreference field value if set, zero value otherwise.
func (o *RegisterProtectionSourceParameters) GetExchangeDagProtectionPreference() ExchangeDAGProtectionPreference {
	if o == nil || o.ExchangeDagProtectionPreference == nil {
		var ret ExchangeDAGProtectionPreference
		return ret
	}
	return *o.ExchangeDagProtectionPreference
}

// GetExchangeDagProtectionPreferenceOk returns a tuple with the ExchangeDagProtectionPreference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProtectionSourceParameters) GetExchangeDagProtectionPreferenceOk() (*ExchangeDAGProtectionPreference, bool) {
	if o == nil || o.ExchangeDagProtectionPreference == nil {
		return nil, false
	}
	return o.ExchangeDagProtectionPreference, true
}

// HasExchangeDagProtectionPreference returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasExchangeDagProtectionPreference() bool {
	if o != nil && o.ExchangeDagProtectionPreference != nil {
		return true
	}

	return false
}

// SetExchangeDagProtectionPreference gets a reference to the given ExchangeDAGProtectionPreference and assigns it to the ExchangeDagProtectionPreference field.
func (o *RegisterProtectionSourceParameters) SetExchangeDagProtectionPreference(v ExchangeDAGProtectionPreference) {
	o.ExchangeDagProtectionPreference = &v
}

// GetForceRegister returns the ForceRegister field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetForceRegister() bool {
	if o == nil || o.ForceRegister.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ForceRegister.Get()
}

// GetForceRegisterOk returns a tuple with the ForceRegister field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetForceRegisterOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ForceRegister.Get(), o.ForceRegister.IsSet()
}

// HasForceRegister returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasForceRegister() bool {
	if o != nil && o.ForceRegister.IsSet() {
		return true
	}

	return false
}

// SetForceRegister gets a reference to the given NullableBool and assigns it to the ForceRegister field.
func (o *RegisterProtectionSourceParameters) SetForceRegister(v bool) {
	o.ForceRegister.Set(&v)
}
// SetForceRegisterNil sets the value for ForceRegister to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetForceRegisterNil() {
	o.ForceRegister.Set(nil)
}

// UnsetForceRegister ensures that no value is present for ForceRegister, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetForceRegister() {
	o.ForceRegister.Unset()
}

// GetGcpCredentials returns the GcpCredentials field value if set, zero value otherwise.
func (o *RegisterProtectionSourceParameters) GetGcpCredentials() GcpCredentials {
	if o == nil || o.GcpCredentials == nil {
		var ret GcpCredentials
		return ret
	}
	return *o.GcpCredentials
}

// GetGcpCredentialsOk returns a tuple with the GcpCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProtectionSourceParameters) GetGcpCredentialsOk() (*GcpCredentials, bool) {
	if o == nil || o.GcpCredentials == nil {
		return nil, false
	}
	return o.GcpCredentials, true
}

// HasGcpCredentials returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasGcpCredentials() bool {
	if o != nil && o.GcpCredentials != nil {
		return true
	}

	return false
}

// SetGcpCredentials gets a reference to the given GcpCredentials and assigns it to the GcpCredentials field.
func (o *RegisterProtectionSourceParameters) SetGcpCredentials(v GcpCredentials) {
	o.GcpCredentials = &v
}

// GetHostType returns the HostType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetHostType() string {
	if o == nil || o.HostType.Get() == nil {
		var ret string
		return ret
	}
	return *o.HostType.Get()
}

// GetHostTypeOk returns a tuple with the HostType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetHostTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HostType.Get(), o.HostType.IsSet()
}

// HasHostType returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasHostType() bool {
	if o != nil && o.HostType.IsSet() {
		return true
	}

	return false
}

// SetHostType gets a reference to the given NullableString and assigns it to the HostType field.
func (o *RegisterProtectionSourceParameters) SetHostType(v string) {
	o.HostType.Set(&v)
}
// SetHostTypeNil sets the value for HostType to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetHostTypeNil() {
	o.HostType.Set(nil)
}

// UnsetHostType ensures that no value is present for HostType, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetHostType() {
	o.HostType.Unset()
}

// GetHyperVType returns the HyperVType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetHyperVType() string {
	if o == nil || o.HyperVType.Get() == nil {
		var ret string
		return ret
	}
	return *o.HyperVType.Get()
}

// GetHyperVTypeOk returns a tuple with the HyperVType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetHyperVTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HyperVType.Get(), o.HyperVType.IsSet()
}

// HasHyperVType returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasHyperVType() bool {
	if o != nil && o.HyperVType.IsSet() {
		return true
	}

	return false
}

// SetHyperVType gets a reference to the given NullableString and assigns it to the HyperVType field.
func (o *RegisterProtectionSourceParameters) SetHyperVType(v string) {
	o.HyperVType.Set(&v)
}
// SetHyperVTypeNil sets the value for HyperVType to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetHyperVTypeNil() {
	o.HyperVType.Set(nil)
}

// UnsetHyperVType ensures that no value is present for HyperVType, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetHyperVType() {
	o.HyperVType.Unset()
}

// GetKubernetesCredentials returns the KubernetesCredentials field value if set, zero value otherwise.
func (o *RegisterProtectionSourceParameters) GetKubernetesCredentials() KubernetesCredentials {
	if o == nil || o.KubernetesCredentials == nil {
		var ret KubernetesCredentials
		return ret
	}
	return *o.KubernetesCredentials
}

// GetKubernetesCredentialsOk returns a tuple with the KubernetesCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProtectionSourceParameters) GetKubernetesCredentialsOk() (*KubernetesCredentials, bool) {
	if o == nil || o.KubernetesCredentials == nil {
		return nil, false
	}
	return o.KubernetesCredentials, true
}

// HasKubernetesCredentials returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasKubernetesCredentials() bool {
	if o != nil && o.KubernetesCredentials != nil {
		return true
	}

	return false
}

// SetKubernetesCredentials gets a reference to the given KubernetesCredentials and assigns it to the KubernetesCredentials field.
func (o *RegisterProtectionSourceParameters) SetKubernetesCredentials(v KubernetesCredentials) {
	o.KubernetesCredentials = &v
}

// GetKubernetesType returns the KubernetesType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetKubernetesType() string {
	if o == nil || o.KubernetesType.Get() == nil {
		var ret string
		return ret
	}
	return *o.KubernetesType.Get()
}

// GetKubernetesTypeOk returns a tuple with the KubernetesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetKubernetesTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KubernetesType.Get(), o.KubernetesType.IsSet()
}

// HasKubernetesType returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasKubernetesType() bool {
	if o != nil && o.KubernetesType.IsSet() {
		return true
	}

	return false
}

// SetKubernetesType gets a reference to the given NullableString and assigns it to the KubernetesType field.
func (o *RegisterProtectionSourceParameters) SetKubernetesType(v string) {
	o.KubernetesType.Set(&v)
}
// SetKubernetesTypeNil sets the value for KubernetesType to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetKubernetesTypeNil() {
	o.KubernetesType.Set(nil)
}

// UnsetKubernetesType ensures that no value is present for KubernetesType, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetKubernetesType() {
	o.KubernetesType.Unset()
}

// GetKvmType returns the KvmType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetKvmType() string {
	if o == nil || o.KvmType.Get() == nil {
		var ret string
		return ret
	}
	return *o.KvmType.Get()
}

// GetKvmTypeOk returns a tuple with the KvmType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetKvmTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.KvmType.Get(), o.KvmType.IsSet()
}

// HasKvmType returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasKvmType() bool {
	if o != nil && o.KvmType.IsSet() {
		return true
	}

	return false
}

// SetKvmType gets a reference to the given NullableString and assigns it to the KvmType field.
func (o *RegisterProtectionSourceParameters) SetKvmType(v string) {
	o.KvmType.Set(&v)
}
// SetKvmTypeNil sets the value for KvmType to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetKvmTypeNil() {
	o.KvmType.Set(nil)
}

// UnsetKvmType ensures that no value is present for KvmType, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetKvmType() {
	o.KvmType.Unset()
}

// GetNasMountCredentials returns the NasMountCredentials field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetNasMountCredentials() NasMountCredentialParams {
	if o == nil || o.NasMountCredentials.Get() == nil {
		var ret NasMountCredentialParams
		return ret
	}
	return *o.NasMountCredentials.Get()
}

// GetNasMountCredentialsOk returns a tuple with the NasMountCredentials field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetNasMountCredentialsOk() (*NasMountCredentialParams, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NasMountCredentials.Get(), o.NasMountCredentials.IsSet()
}

// HasNasMountCredentials returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasNasMountCredentials() bool {
	if o != nil && o.NasMountCredentials.IsSet() {
		return true
	}

	return false
}

// SetNasMountCredentials gets a reference to the given NullableNasMountCredentialParams and assigns it to the NasMountCredentials field.
func (o *RegisterProtectionSourceParameters) SetNasMountCredentials(v NasMountCredentialParams) {
	o.NasMountCredentials.Set(&v)
}
// SetNasMountCredentialsNil sets the value for NasMountCredentials to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetNasMountCredentialsNil() {
	o.NasMountCredentials.Set(nil)
}

// UnsetNasMountCredentials ensures that no value is present for NasMountCredentials, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetNasMountCredentials() {
	o.NasMountCredentials.Unset()
}

// GetNetappType returns the NetappType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetNetappType() string {
	if o == nil || o.NetappType.Get() == nil {
		var ret string
		return ret
	}
	return *o.NetappType.Get()
}

// GetNetappTypeOk returns a tuple with the NetappType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetNetappTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NetappType.Get(), o.NetappType.IsSet()
}

// HasNetappType returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasNetappType() bool {
	if o != nil && o.NetappType.IsSet() {
		return true
	}

	return false
}

// SetNetappType gets a reference to the given NullableString and assigns it to the NetappType field.
func (o *RegisterProtectionSourceParameters) SetNetappType(v string) {
	o.NetappType.Set(&v)
}
// SetNetappTypeNil sets the value for NetappType to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetNetappTypeNil() {
	o.NetappType.Set(nil)
}

// UnsetNetappType ensures that no value is present for NetappType, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetNetappType() {
	o.NetappType.Unset()
}

// GetNimbleType returns the NimbleType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetNimbleType() string {
	if o == nil || o.NimbleType.Get() == nil {
		var ret string
		return ret
	}
	return *o.NimbleType.Get()
}

// GetNimbleTypeOk returns a tuple with the NimbleType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetNimbleTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NimbleType.Get(), o.NimbleType.IsSet()
}

// HasNimbleType returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasNimbleType() bool {
	if o != nil && o.NimbleType.IsSet() {
		return true
	}

	return false
}

// SetNimbleType gets a reference to the given NullableString and assigns it to the NimbleType field.
func (o *RegisterProtectionSourceParameters) SetNimbleType(v string) {
	o.NimbleType.Set(&v)
}
// SetNimbleTypeNil sets the value for NimbleType to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetNimbleTypeNil() {
	o.NimbleType.Set(nil)
}

// UnsetNimbleType ensures that no value is present for NimbleType, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetNimbleType() {
	o.NimbleType.Unset()
}

// GetOffice365CredentialsList returns the Office365CredentialsList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetOffice365CredentialsList() []Office365Credentials {
	if o == nil  {
		var ret []Office365Credentials
		return ret
	}
	return o.Office365CredentialsList
}

// GetOffice365CredentialsListOk returns a tuple with the Office365CredentialsList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetOffice365CredentialsListOk() (*[]Office365Credentials, bool) {
	if o == nil || o.Office365CredentialsList == nil {
		return nil, false
	}
	return &o.Office365CredentialsList, true
}

// HasOffice365CredentialsList returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasOffice365CredentialsList() bool {
	if o != nil && o.Office365CredentialsList != nil {
		return true
	}

	return false
}

// SetOffice365CredentialsList gets a reference to the given []Office365Credentials and assigns it to the Office365CredentialsList field.
func (o *RegisterProtectionSourceParameters) SetOffice365CredentialsList(v []Office365Credentials) {
	o.Office365CredentialsList = v
}

// GetOffice365Region returns the Office365Region field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetOffice365Region() string {
	if o == nil || o.Office365Region.Get() == nil {
		var ret string
		return ret
	}
	return *o.Office365Region.Get()
}

// GetOffice365RegionOk returns a tuple with the Office365Region field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetOffice365RegionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Office365Region.Get(), o.Office365Region.IsSet()
}

// HasOffice365Region returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasOffice365Region() bool {
	if o != nil && o.Office365Region.IsSet() {
		return true
	}

	return false
}

// SetOffice365Region gets a reference to the given NullableString and assigns it to the Office365Region field.
func (o *RegisterProtectionSourceParameters) SetOffice365Region(v string) {
	o.Office365Region.Set(&v)
}
// SetOffice365RegionNil sets the value for Office365Region to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetOffice365RegionNil() {
	o.Office365Region.Set(nil)
}

// UnsetOffice365Region ensures that no value is present for Office365Region, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetOffice365Region() {
	o.Office365Region.Unset()
}

// GetOffice365Type returns the Office365Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetOffice365Type() string {
	if o == nil || o.Office365Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Office365Type.Get()
}

// GetOffice365TypeOk returns a tuple with the Office365Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetOffice365TypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Office365Type.Get(), o.Office365Type.IsSet()
}

// HasOffice365Type returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasOffice365Type() bool {
	if o != nil && o.Office365Type.IsSet() {
		return true
	}

	return false
}

// SetOffice365Type gets a reference to the given NullableString and assigns it to the Office365Type field.
func (o *RegisterProtectionSourceParameters) SetOffice365Type(v string) {
	o.Office365Type.Set(&v)
}
// SetOffice365TypeNil sets the value for Office365Type to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetOffice365TypeNil() {
	o.Office365Type.Set(nil)
}

// UnsetOffice365Type ensures that no value is present for Office365Type, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetOffice365Type() {
	o.Office365Type.Unset()
}

// GetPassword returns the Password field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetPassword() string {
	if o == nil || o.Password.Get() == nil {
		var ret string
		return ret
	}
	return *o.Password.Get()
}

// GetPasswordOk returns a tuple with the Password field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetPasswordOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Password.Get(), o.Password.IsSet()
}

// HasPassword returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasPassword() bool {
	if o != nil && o.Password.IsSet() {
		return true
	}

	return false
}

// SetPassword gets a reference to the given NullableString and assigns it to the Password field.
func (o *RegisterProtectionSourceParameters) SetPassword(v string) {
	o.Password.Set(&v)
}
// SetPasswordNil sets the value for Password to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetPasswordNil() {
	o.Password.Set(nil)
}

// UnsetPassword ensures that no value is present for Password, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetPassword() {
	o.Password.Unset()
}

// GetPhysicalType returns the PhysicalType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetPhysicalType() string {
	if o == nil || o.PhysicalType.Get() == nil {
		var ret string
		return ret
	}
	return *o.PhysicalType.Get()
}

// GetPhysicalTypeOk returns a tuple with the PhysicalType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetPhysicalTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalType.Get(), o.PhysicalType.IsSet()
}

// HasPhysicalType returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasPhysicalType() bool {
	if o != nil && o.PhysicalType.IsSet() {
		return true
	}

	return false
}

// SetPhysicalType gets a reference to the given NullableString and assigns it to the PhysicalType field.
func (o *RegisterProtectionSourceParameters) SetPhysicalType(v string) {
	o.PhysicalType.Set(&v)
}
// SetPhysicalTypeNil sets the value for PhysicalType to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetPhysicalTypeNil() {
	o.PhysicalType.Set(nil)
}

// UnsetPhysicalType ensures that no value is present for PhysicalType, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetPhysicalType() {
	o.PhysicalType.Unset()
}

// GetPureType returns the PureType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetPureType() string {
	if o == nil || o.PureType.Get() == nil {
		var ret string
		return ret
	}
	return *o.PureType.Get()
}

// GetPureTypeOk returns a tuple with the PureType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetPureTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PureType.Get(), o.PureType.IsSet()
}

// HasPureType returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasPureType() bool {
	if o != nil && o.PureType.IsSet() {
		return true
	}

	return false
}

// SetPureType gets a reference to the given NullableString and assigns it to the PureType field.
func (o *RegisterProtectionSourceParameters) SetPureType(v string) {
	o.PureType.Set(&v)
}
// SetPureTypeNil sets the value for PureType to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetPureTypeNil() {
	o.PureType.Set(nil)
}

// UnsetPureType ensures that no value is present for PureType, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetPureType() {
	o.PureType.Unset()
}

// GetReRegister returns the ReRegister field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetReRegister() bool {
	if o == nil || o.ReRegister.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ReRegister.Get()
}

// GetReRegisterOk returns a tuple with the ReRegister field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetReRegisterOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReRegister.Get(), o.ReRegister.IsSet()
}

// HasReRegister returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasReRegister() bool {
	if o != nil && o.ReRegister.IsSet() {
		return true
	}

	return false
}

// SetReRegister gets a reference to the given NullableBool and assigns it to the ReRegister field.
func (o *RegisterProtectionSourceParameters) SetReRegister(v bool) {
	o.ReRegister.Set(&v)
}
// SetReRegisterNil sets the value for ReRegister to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetReRegisterNil() {
	o.ReRegister.Set(nil)
}

// UnsetReRegister ensures that no value is present for ReRegister, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetReRegister() {
	o.ReRegister.Unset()
}

// GetSourceSideDedupEnabled returns the SourceSideDedupEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetSourceSideDedupEnabled() bool {
	if o == nil || o.SourceSideDedupEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.SourceSideDedupEnabled.Get()
}

// GetSourceSideDedupEnabledOk returns a tuple with the SourceSideDedupEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetSourceSideDedupEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceSideDedupEnabled.Get(), o.SourceSideDedupEnabled.IsSet()
}

// HasSourceSideDedupEnabled returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasSourceSideDedupEnabled() bool {
	if o != nil && o.SourceSideDedupEnabled.IsSet() {
		return true
	}

	return false
}

// SetSourceSideDedupEnabled gets a reference to the given NullableBool and assigns it to the SourceSideDedupEnabled field.
func (o *RegisterProtectionSourceParameters) SetSourceSideDedupEnabled(v bool) {
	o.SourceSideDedupEnabled.Set(&v)
}
// SetSourceSideDedupEnabledNil sets the value for SourceSideDedupEnabled to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetSourceSideDedupEnabledNil() {
	o.SourceSideDedupEnabled.Set(nil)
}

// UnsetSourceSideDedupEnabled ensures that no value is present for SourceSideDedupEnabled, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetSourceSideDedupEnabled() {
	o.SourceSideDedupEnabled.Unset()
}

// GetSslVerification returns the SslVerification field value if set, zero value otherwise.
func (o *RegisterProtectionSourceParameters) GetSslVerification() SslVerification {
	if o == nil || o.SslVerification == nil {
		var ret SslVerification
		return ret
	}
	return *o.SslVerification
}

// GetSslVerificationOk returns a tuple with the SslVerification field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProtectionSourceParameters) GetSslVerificationOk() (*SslVerification, bool) {
	if o == nil || o.SslVerification == nil {
		return nil, false
	}
	return o.SslVerification, true
}

// HasSslVerification returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasSslVerification() bool {
	if o != nil && o.SslVerification != nil {
		return true
	}

	return false
}

// SetSslVerification gets a reference to the given SslVerification and assigns it to the SslVerification field.
func (o *RegisterProtectionSourceParameters) SetSslVerification(v SslVerification) {
	o.SslVerification = &v
}

// GetSubnets returns the Subnets field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetSubnets() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.Subnets
}

// GetSubnetsOk returns a tuple with the Subnets field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetSubnetsOk() (*[]Subnet, bool) {
	if o == nil || o.Subnets == nil {
		return nil, false
	}
	return &o.Subnets, true
}

// HasSubnets returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasSubnets() bool {
	if o != nil && o.Subnets != nil {
		return true
	}

	return false
}

// SetSubnets gets a reference to the given []Subnet and assigns it to the Subnets field.
func (o *RegisterProtectionSourceParameters) SetSubnets(v []Subnet) {
	o.Subnets = v
}

// GetThrottlingPolicy returns the ThrottlingPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetThrottlingPolicy() ThrottlingPolicyParameters {
	if o == nil || o.ThrottlingPolicy.Get() == nil {
		var ret ThrottlingPolicyParameters
		return ret
	}
	return *o.ThrottlingPolicy.Get()
}

// GetThrottlingPolicyOk returns a tuple with the ThrottlingPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetThrottlingPolicyOk() (*ThrottlingPolicyParameters, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ThrottlingPolicy.Get(), o.ThrottlingPolicy.IsSet()
}

// HasThrottlingPolicy returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasThrottlingPolicy() bool {
	if o != nil && o.ThrottlingPolicy.IsSet() {
		return true
	}

	return false
}

// SetThrottlingPolicy gets a reference to the given NullableThrottlingPolicyParameters and assigns it to the ThrottlingPolicy field.
func (o *RegisterProtectionSourceParameters) SetThrottlingPolicy(v ThrottlingPolicyParameters) {
	o.ThrottlingPolicy.Set(&v)
}
// SetThrottlingPolicyNil sets the value for ThrottlingPolicy to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetThrottlingPolicyNil() {
	o.ThrottlingPolicy.Set(nil)
}

// UnsetThrottlingPolicy ensures that no value is present for ThrottlingPolicy, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetThrottlingPolicy() {
	o.ThrottlingPolicy.Unset()
}

// GetThrottlingPolicyOverrides returns the ThrottlingPolicyOverrides field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetThrottlingPolicyOverrides() []ThrottlingPolicyOverride {
	if o == nil  {
		var ret []ThrottlingPolicyOverride
		return ret
	}
	return o.ThrottlingPolicyOverrides
}

// GetThrottlingPolicyOverridesOk returns a tuple with the ThrottlingPolicyOverrides field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetThrottlingPolicyOverridesOk() (*[]ThrottlingPolicyOverride, bool) {
	if o == nil || o.ThrottlingPolicyOverrides == nil {
		return nil, false
	}
	return &o.ThrottlingPolicyOverrides, true
}

// HasThrottlingPolicyOverrides returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasThrottlingPolicyOverrides() bool {
	if o != nil && o.ThrottlingPolicyOverrides != nil {
		return true
	}

	return false
}

// SetThrottlingPolicyOverrides gets a reference to the given []ThrottlingPolicyOverride and assigns it to the ThrottlingPolicyOverrides field.
func (o *RegisterProtectionSourceParameters) SetThrottlingPolicyOverrides(v []ThrottlingPolicyOverride) {
	o.ThrottlingPolicyOverrides = v
}

// GetUseOAuthForExchangeOnline returns the UseOAuthForExchangeOnline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetUseOAuthForExchangeOnline() bool {
	if o == nil || o.UseOAuthForExchangeOnline.Get() == nil {
		var ret bool
		return ret
	}
	return *o.UseOAuthForExchangeOnline.Get()
}

// GetUseOAuthForExchangeOnlineOk returns a tuple with the UseOAuthForExchangeOnline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetUseOAuthForExchangeOnlineOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UseOAuthForExchangeOnline.Get(), o.UseOAuthForExchangeOnline.IsSet()
}

// HasUseOAuthForExchangeOnline returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasUseOAuthForExchangeOnline() bool {
	if o != nil && o.UseOAuthForExchangeOnline.IsSet() {
		return true
	}

	return false
}

// SetUseOAuthForExchangeOnline gets a reference to the given NullableBool and assigns it to the UseOAuthForExchangeOnline field.
func (o *RegisterProtectionSourceParameters) SetUseOAuthForExchangeOnline(v bool) {
	o.UseOAuthForExchangeOnline.Set(&v)
}
// SetUseOAuthForExchangeOnlineNil sets the value for UseOAuthForExchangeOnline to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetUseOAuthForExchangeOnlineNil() {
	o.UseOAuthForExchangeOnline.Set(nil)
}

// UnsetUseOAuthForExchangeOnline ensures that no value is present for UseOAuthForExchangeOnline, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetUseOAuthForExchangeOnline() {
	o.UseOAuthForExchangeOnline.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *RegisterProtectionSourceParameters) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetUsername() {
	o.Username.Unset()
}

// GetVlanParams returns the VlanParams field value if set, zero value otherwise.
func (o *RegisterProtectionSourceParameters) GetVlanParams() VlanParameters {
	if o == nil || o.VlanParams == nil {
		var ret VlanParameters
		return ret
	}
	return *o.VlanParams
}

// GetVlanParamsOk returns a tuple with the VlanParams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RegisterProtectionSourceParameters) GetVlanParamsOk() (*VlanParameters, bool) {
	if o == nil || o.VlanParams == nil {
		return nil, false
	}
	return o.VlanParams, true
}

// HasVlanParams returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasVlanParams() bool {
	if o != nil && o.VlanParams != nil {
		return true
	}

	return false
}

// SetVlanParams gets a reference to the given VlanParameters and assigns it to the VlanParams field.
func (o *RegisterProtectionSourceParameters) SetVlanParams(v VlanParameters) {
	o.VlanParams = &v
}

// GetVmwareType returns the VmwareType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RegisterProtectionSourceParameters) GetVmwareType() string {
	if o == nil || o.VmwareType.Get() == nil {
		var ret string
		return ret
	}
	return *o.VmwareType.Get()
}

// GetVmwareTypeOk returns a tuple with the VmwareType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RegisterProtectionSourceParameters) GetVmwareTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmwareType.Get(), o.VmwareType.IsSet()
}

// HasVmwareType returns a boolean if a field has been set.
func (o *RegisterProtectionSourceParameters) HasVmwareType() bool {
	if o != nil && o.VmwareType.IsSet() {
		return true
	}

	return false
}

// SetVmwareType gets a reference to the given NullableString and assigns it to the VmwareType field.
func (o *RegisterProtectionSourceParameters) SetVmwareType(v string) {
	o.VmwareType.Set(&v)
}
// SetVmwareTypeNil sets the value for VmwareType to be an explicit nil
func (o *RegisterProtectionSourceParameters) SetVmwareTypeNil() {
	o.VmwareType.Set(nil)
}

// UnsetVmwareType ensures that no value is present for VmwareType, not even an explicit nil
func (o *RegisterProtectionSourceParameters) UnsetVmwareType() {
	o.VmwareType.Unset()
}

func (o RegisterProtectionSourceParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AcropolisType.IsSet() {
		toSerialize["acropolisType"] = o.AcropolisType.Get()
	}
	if o.AgentEndpoint.IsSet() {
		toSerialize["agentEndpoint"] = o.AgentEndpoint.Get()
	}
	if o.AwsCredentials != nil {
		toSerialize["awsCredentials"] = o.AwsCredentials
	}
	if o.AwsFleetParams != nil {
		toSerialize["awsFleetParams"] = o.AwsFleetParams
	}
	if o.AzureCredentials != nil {
		toSerialize["azureCredentials"] = o.AzureCredentials
	}
	if o.BlacklistedIpAddresses != nil {
		toSerialize["blacklistedIpAddresses"] = o.BlacklistedIpAddresses
	}
	if o.ClusterNetworkInfo != nil {
		toSerialize["clusterNetworkInfo"] = o.ClusterNetworkInfo
	}
	if o.Endpoint.IsSet() {
		toSerialize["endpoint"] = o.Endpoint.Get()
	}
	if o.Environment.IsSet() {
		toSerialize["environment"] = o.Environment.Get()
	}
	if o.ExchangeDagProtectionPreference != nil {
		toSerialize["exchangeDagProtectionPreference"] = o.ExchangeDagProtectionPreference
	}
	if o.ForceRegister.IsSet() {
		toSerialize["forceRegister"] = o.ForceRegister.Get()
	}
	if o.GcpCredentials != nil {
		toSerialize["gcpCredentials"] = o.GcpCredentials
	}
	if o.HostType.IsSet() {
		toSerialize["hostType"] = o.HostType.Get()
	}
	if o.HyperVType.IsSet() {
		toSerialize["hyperVType"] = o.HyperVType.Get()
	}
	if o.KubernetesCredentials != nil {
		toSerialize["kubernetesCredentials"] = o.KubernetesCredentials
	}
	if o.KubernetesType.IsSet() {
		toSerialize["kubernetesType"] = o.KubernetesType.Get()
	}
	if o.KvmType.IsSet() {
		toSerialize["kvmType"] = o.KvmType.Get()
	}
	if o.NasMountCredentials.IsSet() {
		toSerialize["nasMountCredentials"] = o.NasMountCredentials.Get()
	}
	if o.NetappType.IsSet() {
		toSerialize["netappType"] = o.NetappType.Get()
	}
	if o.NimbleType.IsSet() {
		toSerialize["nimbleType"] = o.NimbleType.Get()
	}
	if o.Office365CredentialsList != nil {
		toSerialize["office365CredentialsList"] = o.Office365CredentialsList
	}
	if o.Office365Region.IsSet() {
		toSerialize["office365Region"] = o.Office365Region.Get()
	}
	if o.Office365Type.IsSet() {
		toSerialize["office365Type"] = o.Office365Type.Get()
	}
	if o.Password.IsSet() {
		toSerialize["password"] = o.Password.Get()
	}
	if o.PhysicalType.IsSet() {
		toSerialize["physicalType"] = o.PhysicalType.Get()
	}
	if o.PureType.IsSet() {
		toSerialize["pureType"] = o.PureType.Get()
	}
	if o.ReRegister.IsSet() {
		toSerialize["reRegister"] = o.ReRegister.Get()
	}
	if o.SourceSideDedupEnabled.IsSet() {
		toSerialize["sourceSideDedupEnabled"] = o.SourceSideDedupEnabled.Get()
	}
	if o.SslVerification != nil {
		toSerialize["sslVerification"] = o.SslVerification
	}
	if o.Subnets != nil {
		toSerialize["subnets"] = o.Subnets
	}
	if o.ThrottlingPolicy.IsSet() {
		toSerialize["throttlingPolicy"] = o.ThrottlingPolicy.Get()
	}
	if o.ThrottlingPolicyOverrides != nil {
		toSerialize["throttlingPolicyOverrides"] = o.ThrottlingPolicyOverrides
	}
	if o.UseOAuthForExchangeOnline.IsSet() {
		toSerialize["useOAuthForExchangeOnline"] = o.UseOAuthForExchangeOnline.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.VlanParams != nil {
		toSerialize["vlanParams"] = o.VlanParams
	}
	if o.VmwareType.IsSet() {
		toSerialize["vmwareType"] = o.VmwareType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRegisterProtectionSourceParameters struct {
	value *RegisterProtectionSourceParameters
	isSet bool
}

func (v NullableRegisterProtectionSourceParameters) Get() *RegisterProtectionSourceParameters {
	return v.value
}

func (v *NullableRegisterProtectionSourceParameters) Set(val *RegisterProtectionSourceParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableRegisterProtectionSourceParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableRegisterProtectionSourceParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegisterProtectionSourceParameters(val *RegisterProtectionSourceParameters) *NullableRegisterProtectionSourceParameters {
	return &NullableRegisterProtectionSourceParameters{value: val, isSet: true}
}

func (v NullableRegisterProtectionSourceParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegisterProtectionSourceParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


