/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VmNumReplicas struct for VmNumReplicas
type VmNumReplicas struct {
	// Replica count.
	NumReplicas NullableInt64 `json:"numReplicas,omitempty"`
	// Vm-name.
	VmName NullableString `json:"vmName,omitempty"`
}

// NewVmNumReplicas instantiates a new VmNumReplicas object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmNumReplicas() *VmNumReplicas {
	this := VmNumReplicas{}
	return &this
}

// NewVmNumReplicasWithDefaults instantiates a new VmNumReplicas object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmNumReplicasWithDefaults() *VmNumReplicas {
	this := VmNumReplicas{}
	return &this
}

// GetNumReplicas returns the NumReplicas field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmNumReplicas) GetNumReplicas() int64 {
	if o == nil || o.NumReplicas.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumReplicas.Get()
}

// GetNumReplicasOk returns a tuple with the NumReplicas field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmNumReplicas) GetNumReplicasOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumReplicas.Get(), o.NumReplicas.IsSet()
}

// HasNumReplicas returns a boolean if a field has been set.
func (o *VmNumReplicas) HasNumReplicas() bool {
	if o != nil && o.NumReplicas.IsSet() {
		return true
	}

	return false
}

// SetNumReplicas gets a reference to the given NullableInt64 and assigns it to the NumReplicas field.
func (o *VmNumReplicas) SetNumReplicas(v int64) {
	o.NumReplicas.Set(&v)
}
// SetNumReplicasNil sets the value for NumReplicas to be an explicit nil
func (o *VmNumReplicas) SetNumReplicasNil() {
	o.NumReplicas.Set(nil)
}

// UnsetNumReplicas ensures that no value is present for NumReplicas, not even an explicit nil
func (o *VmNumReplicas) UnsetNumReplicas() {
	o.NumReplicas.Unset()
}

// GetVmName returns the VmName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmNumReplicas) GetVmName() string {
	if o == nil || o.VmName.Get() == nil {
		var ret string
		return ret
	}
	return *o.VmName.Get()
}

// GetVmNameOk returns a tuple with the VmName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmNumReplicas) GetVmNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.VmName.Get(), o.VmName.IsSet()
}

// HasVmName returns a boolean if a field has been set.
func (o *VmNumReplicas) HasVmName() bool {
	if o != nil && o.VmName.IsSet() {
		return true
	}

	return false
}

// SetVmName gets a reference to the given NullableString and assigns it to the VmName field.
func (o *VmNumReplicas) SetVmName(v string) {
	o.VmName.Set(&v)
}
// SetVmNameNil sets the value for VmName to be an explicit nil
func (o *VmNumReplicas) SetVmNameNil() {
	o.VmName.Set(nil)
}

// UnsetVmName ensures that no value is present for VmName, not even an explicit nil
func (o *VmNumReplicas) UnsetVmName() {
	o.VmName.Unset()
}

func (o VmNumReplicas) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.NumReplicas.IsSet() {
		toSerialize["numReplicas"] = o.NumReplicas.Get()
	}
	if o.VmName.IsSet() {
		toSerialize["vmName"] = o.VmName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableVmNumReplicas struct {
	value *VmNumReplicas
	isSet bool
}

func (v NullableVmNumReplicas) Get() *VmNumReplicas {
	return v.value
}

func (v *NullableVmNumReplicas) Set(val *VmNumReplicas) {
	v.value = val
	v.isSet = true
}

func (v NullableVmNumReplicas) IsSet() bool {
	return v.isSet
}

func (v *NullableVmNumReplicas) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmNumReplicas(val *VmNumReplicas) *NullableVmNumReplicas {
	return &NullableVmNumReplicas{value: val, isSet: true}
}

func (v NullableVmNumReplicas) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmNumReplicas) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


