/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UpdateViewAliasParam Specifies the parameters of updating view alias op.
type UpdateViewAliasParam struct {
	// Name of the alias to be updated.
	AliasName NullableString `json:"aliasName,omitempty"`
	// Specifies the SMB encryption for the View Alias. If set, it enables the SMB encryption for the View Alias. Encryption is supported only by SMB 3.x dialects. Dialects that do not support would still access data in unencrypted format.
	EnableSmbEncryption NullableBool `json:"enableSmbEncryption,omitempty"`
	// If set, it enables discovery of view alias for SMB.
	EnableSmbViewDiscovery NullableBool `json:"enableSmbViewDiscovery,omitempty"`
	// Specifies the SMB encryption for all the sessions for the View Alias. If set, encryption is enforced for all the sessions for the View Alias. When enabled all future and existing unencrypted sessions are disallowed.
	EnforceSmbEncryption NullableBool `json:"enforceSmbEncryption,omitempty"`
	// Specifies a list of share level permissions.
	SharePermissions []SmbPermission `json:"sharePermissions,omitempty"`
	// Specifies a list of Subnets with IP addresses that have permissions to access the View Alias. (Overrides the Subnets specified at the global Cohesity Cluster level and View level.)
	SubnetWhitelist []Subnet `json:"subnetWhitelist,omitempty"`
}

// NewUpdateViewAliasParam instantiates a new UpdateViewAliasParam object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateViewAliasParam() *UpdateViewAliasParam {
	this := UpdateViewAliasParam{}
	return &this
}

// NewUpdateViewAliasParamWithDefaults instantiates a new UpdateViewAliasParam object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateViewAliasParamWithDefaults() *UpdateViewAliasParam {
	this := UpdateViewAliasParam{}
	return &this
}

// GetAliasName returns the AliasName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewAliasParam) GetAliasName() string {
	if o == nil || o.AliasName.Get() == nil {
		var ret string
		return ret
	}
	return *o.AliasName.Get()
}

// GetAliasNameOk returns a tuple with the AliasName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewAliasParam) GetAliasNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AliasName.Get(), o.AliasName.IsSet()
}

// HasAliasName returns a boolean if a field has been set.
func (o *UpdateViewAliasParam) HasAliasName() bool {
	if o != nil && o.AliasName.IsSet() {
		return true
	}

	return false
}

// SetAliasName gets a reference to the given NullableString and assigns it to the AliasName field.
func (o *UpdateViewAliasParam) SetAliasName(v string) {
	o.AliasName.Set(&v)
}
// SetAliasNameNil sets the value for AliasName to be an explicit nil
func (o *UpdateViewAliasParam) SetAliasNameNil() {
	o.AliasName.Set(nil)
}

// UnsetAliasName ensures that no value is present for AliasName, not even an explicit nil
func (o *UpdateViewAliasParam) UnsetAliasName() {
	o.AliasName.Unset()
}

// GetEnableSmbEncryption returns the EnableSmbEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewAliasParam) GetEnableSmbEncryption() bool {
	if o == nil || o.EnableSmbEncryption.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbEncryption.Get()
}

// GetEnableSmbEncryptionOk returns a tuple with the EnableSmbEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewAliasParam) GetEnableSmbEncryptionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbEncryption.Get(), o.EnableSmbEncryption.IsSet()
}

// HasEnableSmbEncryption returns a boolean if a field has been set.
func (o *UpdateViewAliasParam) HasEnableSmbEncryption() bool {
	if o != nil && o.EnableSmbEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbEncryption gets a reference to the given NullableBool and assigns it to the EnableSmbEncryption field.
func (o *UpdateViewAliasParam) SetEnableSmbEncryption(v bool) {
	o.EnableSmbEncryption.Set(&v)
}
// SetEnableSmbEncryptionNil sets the value for EnableSmbEncryption to be an explicit nil
func (o *UpdateViewAliasParam) SetEnableSmbEncryptionNil() {
	o.EnableSmbEncryption.Set(nil)
}

// UnsetEnableSmbEncryption ensures that no value is present for EnableSmbEncryption, not even an explicit nil
func (o *UpdateViewAliasParam) UnsetEnableSmbEncryption() {
	o.EnableSmbEncryption.Unset()
}

// GetEnableSmbViewDiscovery returns the EnableSmbViewDiscovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewAliasParam) GetEnableSmbViewDiscovery() bool {
	if o == nil || o.EnableSmbViewDiscovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableSmbViewDiscovery.Get()
}

// GetEnableSmbViewDiscoveryOk returns a tuple with the EnableSmbViewDiscovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewAliasParam) GetEnableSmbViewDiscoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableSmbViewDiscovery.Get(), o.EnableSmbViewDiscovery.IsSet()
}

// HasEnableSmbViewDiscovery returns a boolean if a field has been set.
func (o *UpdateViewAliasParam) HasEnableSmbViewDiscovery() bool {
	if o != nil && o.EnableSmbViewDiscovery.IsSet() {
		return true
	}

	return false
}

// SetEnableSmbViewDiscovery gets a reference to the given NullableBool and assigns it to the EnableSmbViewDiscovery field.
func (o *UpdateViewAliasParam) SetEnableSmbViewDiscovery(v bool) {
	o.EnableSmbViewDiscovery.Set(&v)
}
// SetEnableSmbViewDiscoveryNil sets the value for EnableSmbViewDiscovery to be an explicit nil
func (o *UpdateViewAliasParam) SetEnableSmbViewDiscoveryNil() {
	o.EnableSmbViewDiscovery.Set(nil)
}

// UnsetEnableSmbViewDiscovery ensures that no value is present for EnableSmbViewDiscovery, not even an explicit nil
func (o *UpdateViewAliasParam) UnsetEnableSmbViewDiscovery() {
	o.EnableSmbViewDiscovery.Unset()
}

// GetEnforceSmbEncryption returns the EnforceSmbEncryption field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewAliasParam) GetEnforceSmbEncryption() bool {
	if o == nil || o.EnforceSmbEncryption.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnforceSmbEncryption.Get()
}

// GetEnforceSmbEncryptionOk returns a tuple with the EnforceSmbEncryption field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewAliasParam) GetEnforceSmbEncryptionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnforceSmbEncryption.Get(), o.EnforceSmbEncryption.IsSet()
}

// HasEnforceSmbEncryption returns a boolean if a field has been set.
func (o *UpdateViewAliasParam) HasEnforceSmbEncryption() bool {
	if o != nil && o.EnforceSmbEncryption.IsSet() {
		return true
	}

	return false
}

// SetEnforceSmbEncryption gets a reference to the given NullableBool and assigns it to the EnforceSmbEncryption field.
func (o *UpdateViewAliasParam) SetEnforceSmbEncryption(v bool) {
	o.EnforceSmbEncryption.Set(&v)
}
// SetEnforceSmbEncryptionNil sets the value for EnforceSmbEncryption to be an explicit nil
func (o *UpdateViewAliasParam) SetEnforceSmbEncryptionNil() {
	o.EnforceSmbEncryption.Set(nil)
}

// UnsetEnforceSmbEncryption ensures that no value is present for EnforceSmbEncryption, not even an explicit nil
func (o *UpdateViewAliasParam) UnsetEnforceSmbEncryption() {
	o.EnforceSmbEncryption.Unset()
}

// GetSharePermissions returns the SharePermissions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewAliasParam) GetSharePermissions() []SmbPermission {
	if o == nil  {
		var ret []SmbPermission
		return ret
	}
	return o.SharePermissions
}

// GetSharePermissionsOk returns a tuple with the SharePermissions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewAliasParam) GetSharePermissionsOk() (*[]SmbPermission, bool) {
	if o == nil || o.SharePermissions == nil {
		return nil, false
	}
	return &o.SharePermissions, true
}

// HasSharePermissions returns a boolean if a field has been set.
func (o *UpdateViewAliasParam) HasSharePermissions() bool {
	if o != nil && o.SharePermissions != nil {
		return true
	}

	return false
}

// SetSharePermissions gets a reference to the given []SmbPermission and assigns it to the SharePermissions field.
func (o *UpdateViewAliasParam) SetSharePermissions(v []SmbPermission) {
	o.SharePermissions = v
}

// GetSubnetWhitelist returns the SubnetWhitelist field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateViewAliasParam) GetSubnetWhitelist() []Subnet {
	if o == nil  {
		var ret []Subnet
		return ret
	}
	return o.SubnetWhitelist
}

// GetSubnetWhitelistOk returns a tuple with the SubnetWhitelist field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateViewAliasParam) GetSubnetWhitelistOk() (*[]Subnet, bool) {
	if o == nil || o.SubnetWhitelist == nil {
		return nil, false
	}
	return &o.SubnetWhitelist, true
}

// HasSubnetWhitelist returns a boolean if a field has been set.
func (o *UpdateViewAliasParam) HasSubnetWhitelist() bool {
	if o != nil && o.SubnetWhitelist != nil {
		return true
	}

	return false
}

// SetSubnetWhitelist gets a reference to the given []Subnet and assigns it to the SubnetWhitelist field.
func (o *UpdateViewAliasParam) SetSubnetWhitelist(v []Subnet) {
	o.SubnetWhitelist = v
}

func (o UpdateViewAliasParam) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AliasName.IsSet() {
		toSerialize["aliasName"] = o.AliasName.Get()
	}
	if o.EnableSmbEncryption.IsSet() {
		toSerialize["enableSmbEncryption"] = o.EnableSmbEncryption.Get()
	}
	if o.EnableSmbViewDiscovery.IsSet() {
		toSerialize["enableSmbViewDiscovery"] = o.EnableSmbViewDiscovery.Get()
	}
	if o.EnforceSmbEncryption.IsSet() {
		toSerialize["enforceSmbEncryption"] = o.EnforceSmbEncryption.Get()
	}
	if o.SharePermissions != nil {
		toSerialize["sharePermissions"] = o.SharePermissions
	}
	if o.SubnetWhitelist != nil {
		toSerialize["subnetWhitelist"] = o.SubnetWhitelist
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateViewAliasParam struct {
	value *UpdateViewAliasParam
	isSet bool
}

func (v NullableUpdateViewAliasParam) Get() *UpdateViewAliasParam {
	return v.value
}

func (v *NullableUpdateViewAliasParam) Set(val *UpdateViewAliasParam) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateViewAliasParam) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateViewAliasParam) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateViewAliasParam(val *UpdateViewAliasParam) *NullableUpdateViewAliasParam {
	return &NullableUpdateViewAliasParam{value: val, isSet: true}
}

func (v NullableUpdateViewAliasParam) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateViewAliasParam) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


