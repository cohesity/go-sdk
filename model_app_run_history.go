/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AppRunHistory AppRunHistory is the struct containing the run information of the application instances. An application instance can be run only once. Each run of the application creates a new application instance.
type AppRunHistory struct {
	AppInfo *MapReduceInfo `json:"appInfo,omitempty"`
	// InstancesWrapper is the slice containing the information about the map reduce application instances.
	MrInstances []MapReduceInstanceWrapper `json:"mrInstances,omitempty"`
}

// NewAppRunHistory instantiates a new AppRunHistory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppRunHistory() *AppRunHistory {
	this := AppRunHistory{}
	return &this
}

// NewAppRunHistoryWithDefaults instantiates a new AppRunHistory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppRunHistoryWithDefaults() *AppRunHistory {
	this := AppRunHistory{}
	return &this
}

// GetAppInfo returns the AppInfo field value if set, zero value otherwise.
func (o *AppRunHistory) GetAppInfo() MapReduceInfo {
	if o == nil || o.AppInfo == nil {
		var ret MapReduceInfo
		return ret
	}
	return *o.AppInfo
}

// GetAppInfoOk returns a tuple with the AppInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppRunHistory) GetAppInfoOk() (*MapReduceInfo, bool) {
	if o == nil || o.AppInfo == nil {
		return nil, false
	}
	return o.AppInfo, true
}

// HasAppInfo returns a boolean if a field has been set.
func (o *AppRunHistory) HasAppInfo() bool {
	if o != nil && o.AppInfo != nil {
		return true
	}

	return false
}

// SetAppInfo gets a reference to the given MapReduceInfo and assigns it to the AppInfo field.
func (o *AppRunHistory) SetAppInfo(v MapReduceInfo) {
	o.AppInfo = &v
}

// GetMrInstances returns the MrInstances field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppRunHistory) GetMrInstances() []MapReduceInstanceWrapper {
	if o == nil  {
		var ret []MapReduceInstanceWrapper
		return ret
	}
	return o.MrInstances
}

// GetMrInstancesOk returns a tuple with the MrInstances field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppRunHistory) GetMrInstancesOk() (*[]MapReduceInstanceWrapper, bool) {
	if o == nil || o.MrInstances == nil {
		return nil, false
	}
	return &o.MrInstances, true
}

// HasMrInstances returns a boolean if a field has been set.
func (o *AppRunHistory) HasMrInstances() bool {
	if o != nil && o.MrInstances != nil {
		return true
	}

	return false
}

// SetMrInstances gets a reference to the given []MapReduceInstanceWrapper and assigns it to the MrInstances field.
func (o *AppRunHistory) SetMrInstances(v []MapReduceInstanceWrapper) {
	o.MrInstances = v
}

func (o AppRunHistory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AppInfo != nil {
		toSerialize["appInfo"] = o.AppInfo
	}
	if o.MrInstances != nil {
		toSerialize["mrInstances"] = o.MrInstances
	}
	return json.Marshal(toSerialize)
}

type NullableAppRunHistory struct {
	value *AppRunHistory
	isSet bool
}

func (v NullableAppRunHistory) Get() *AppRunHistory {
	return v.value
}

func (v *NullableAppRunHistory) Set(val *AppRunHistory) {
	v.value = val
	v.isSet = true
}

func (v NullableAppRunHistory) IsSet() bool {
	return v.isSet
}

func (v *NullableAppRunHistory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppRunHistory(val *AppRunHistory) *NullableAppRunHistory {
	return &NullableAppRunHistory{value: val, isSet: true}
}

func (v NullableAppRunHistory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppRunHistory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


