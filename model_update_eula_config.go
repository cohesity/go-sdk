/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UpdateEulaConfig Specifies the update to the End User License Agreement information.
type UpdateEulaConfig struct {
	// Specifies the version of the End User License Agreement that was accepted.
	SignedVersion NullableInt64 `json:"signedVersion,omitempty"`
}

// NewUpdateEulaConfig instantiates a new UpdateEulaConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateEulaConfig() *UpdateEulaConfig {
	this := UpdateEulaConfig{}
	return &this
}

// NewUpdateEulaConfigWithDefaults instantiates a new UpdateEulaConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateEulaConfigWithDefaults() *UpdateEulaConfig {
	this := UpdateEulaConfig{}
	return &this
}

// GetSignedVersion returns the SignedVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateEulaConfig) GetSignedVersion() int64 {
	if o == nil || o.SignedVersion.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SignedVersion.Get()
}

// GetSignedVersionOk returns a tuple with the SignedVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateEulaConfig) GetSignedVersionOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SignedVersion.Get(), o.SignedVersion.IsSet()
}

// HasSignedVersion returns a boolean if a field has been set.
func (o *UpdateEulaConfig) HasSignedVersion() bool {
	if o != nil && o.SignedVersion.IsSet() {
		return true
	}

	return false
}

// SetSignedVersion gets a reference to the given NullableInt64 and assigns it to the SignedVersion field.
func (o *UpdateEulaConfig) SetSignedVersion(v int64) {
	o.SignedVersion.Set(&v)
}
// SetSignedVersionNil sets the value for SignedVersion to be an explicit nil
func (o *UpdateEulaConfig) SetSignedVersionNil() {
	o.SignedVersion.Set(nil)
}

// UnsetSignedVersion ensures that no value is present for SignedVersion, not even an explicit nil
func (o *UpdateEulaConfig) UnsetSignedVersion() {
	o.SignedVersion.Unset()
}

func (o UpdateEulaConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.SignedVersion.IsSet() {
		toSerialize["signedVersion"] = o.SignedVersion.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateEulaConfig struct {
	value *UpdateEulaConfig
	isSet bool
}

func (v NullableUpdateEulaConfig) Get() *UpdateEulaConfig {
	return v.value
}

func (v *NullableUpdateEulaConfig) Set(val *UpdateEulaConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateEulaConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateEulaConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateEulaConfig(val *UpdateEulaConfig) *NullableUpdateEulaConfig {
	return &NullableUpdateEulaConfig{value: val, isSet: true}
}

func (v NullableUpdateEulaConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateEulaConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


