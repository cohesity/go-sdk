/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SchedulingPolicyProtoDailySchedule Sample protos: Every n days (n >= 1) Ex: For every 2 days, { frequency : 2 } Weekly schedule (Few selected weekdays) Ex: For every Monday, Tuesday { days : {kMonday, kTuesday} } NOTE: Only one of the 'days' and 'frequency' should be populated.
type SchedulingPolicyProtoDailySchedule struct {
	// The list of weekdays for scheduling a backup. This is populated only for selected weekday schedules.
	Days []int32 `json:"days,omitempty"`
	// This is set only for every-n-day schedules.
	Frequency NullableInt64 `json:"frequency,omitempty"`
}

// NewSchedulingPolicyProtoDailySchedule instantiates a new SchedulingPolicyProtoDailySchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulingPolicyProtoDailySchedule() *SchedulingPolicyProtoDailySchedule {
	this := SchedulingPolicyProtoDailySchedule{}
	return &this
}

// NewSchedulingPolicyProtoDailyScheduleWithDefaults instantiates a new SchedulingPolicyProtoDailySchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulingPolicyProtoDailyScheduleWithDefaults() *SchedulingPolicyProtoDailySchedule {
	this := SchedulingPolicyProtoDailySchedule{}
	return &this
}

// GetDays returns the Days field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulingPolicyProtoDailySchedule) GetDays() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.Days
}

// GetDaysOk returns a tuple with the Days field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulingPolicyProtoDailySchedule) GetDaysOk() (*[]int32, bool) {
	if o == nil || o.Days == nil {
		return nil, false
	}
	return &o.Days, true
}

// HasDays returns a boolean if a field has been set.
func (o *SchedulingPolicyProtoDailySchedule) HasDays() bool {
	if o != nil && o.Days != nil {
		return true
	}

	return false
}

// SetDays gets a reference to the given []int32 and assigns it to the Days field.
func (o *SchedulingPolicyProtoDailySchedule) SetDays(v []int32) {
	o.Days = v
}

// GetFrequency returns the Frequency field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulingPolicyProtoDailySchedule) GetFrequency() int64 {
	if o == nil || o.Frequency.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Frequency.Get()
}

// GetFrequencyOk returns a tuple with the Frequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulingPolicyProtoDailySchedule) GetFrequencyOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Frequency.Get(), o.Frequency.IsSet()
}

// HasFrequency returns a boolean if a field has been set.
func (o *SchedulingPolicyProtoDailySchedule) HasFrequency() bool {
	if o != nil && o.Frequency.IsSet() {
		return true
	}

	return false
}

// SetFrequency gets a reference to the given NullableInt64 and assigns it to the Frequency field.
func (o *SchedulingPolicyProtoDailySchedule) SetFrequency(v int64) {
	o.Frequency.Set(&v)
}
// SetFrequencyNil sets the value for Frequency to be an explicit nil
func (o *SchedulingPolicyProtoDailySchedule) SetFrequencyNil() {
	o.Frequency.Set(nil)
}

// UnsetFrequency ensures that no value is present for Frequency, not even an explicit nil
func (o *SchedulingPolicyProtoDailySchedule) UnsetFrequency() {
	o.Frequency.Unset()
}

func (o SchedulingPolicyProtoDailySchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Days != nil {
		toSerialize["days"] = o.Days
	}
	if o.Frequency.IsSet() {
		toSerialize["frequency"] = o.Frequency.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSchedulingPolicyProtoDailySchedule struct {
	value *SchedulingPolicyProtoDailySchedule
	isSet bool
}

func (v NullableSchedulingPolicyProtoDailySchedule) Get() *SchedulingPolicyProtoDailySchedule {
	return v.value
}

func (v *NullableSchedulingPolicyProtoDailySchedule) Set(val *SchedulingPolicyProtoDailySchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulingPolicyProtoDailySchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulingPolicyProtoDailySchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulingPolicyProtoDailySchedule(val *SchedulingPolicyProtoDailySchedule) *NullableSchedulingPolicyProtoDailySchedule {
	return &NullableSchedulingPolicyProtoDailySchedule{value: val, isSet: true}
}

func (v NullableSchedulingPolicyProtoDailySchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulingPolicyProtoDailySchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


