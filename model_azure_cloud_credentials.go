/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AzureCloudCredentials Specifies the cloud credentials to connect to a Microsoft Azure service account.
type AzureCloudCredentials struct {
	// Specifies the access key to use when accessing a storage tier in a Azure cloud service.
	StorageAccessKey NullableString `json:"storageAccessKey,omitempty"`
	// Specifies the account name to use when accessing a storage tier in a Azure cloud service.
	StorageAccountName NullableString `json:"storageAccountName,omitempty"`
	// Specifies the storage class of Azure. AzureTierType specifies the storage class for Azure. 'kAzureTierHot' indicates a tier type of Azure properties that is accessed frequently. 'kAzureTierCool' indicates a tier type of Azure properties that is accessed less frequently, and stored for at least 30 days. 'kAzureTierArchive' indicates a tier type of Azure properties that is accessed rarely and stored for at least 180 days.
	TierType NullableString `json:"tierType,omitempty"`
}

// NewAzureCloudCredentials instantiates a new AzureCloudCredentials object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureCloudCredentials() *AzureCloudCredentials {
	this := AzureCloudCredentials{}
	return &this
}

// NewAzureCloudCredentialsWithDefaults instantiates a new AzureCloudCredentials object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureCloudCredentialsWithDefaults() *AzureCloudCredentials {
	this := AzureCloudCredentials{}
	return &this
}

// GetStorageAccessKey returns the StorageAccessKey field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureCloudCredentials) GetStorageAccessKey() string {
	if o == nil || o.StorageAccessKey.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageAccessKey.Get()
}

// GetStorageAccessKeyOk returns a tuple with the StorageAccessKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureCloudCredentials) GetStorageAccessKeyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageAccessKey.Get(), o.StorageAccessKey.IsSet()
}

// HasStorageAccessKey returns a boolean if a field has been set.
func (o *AzureCloudCredentials) HasStorageAccessKey() bool {
	if o != nil && o.StorageAccessKey.IsSet() {
		return true
	}

	return false
}

// SetStorageAccessKey gets a reference to the given NullableString and assigns it to the StorageAccessKey field.
func (o *AzureCloudCredentials) SetStorageAccessKey(v string) {
	o.StorageAccessKey.Set(&v)
}
// SetStorageAccessKeyNil sets the value for StorageAccessKey to be an explicit nil
func (o *AzureCloudCredentials) SetStorageAccessKeyNil() {
	o.StorageAccessKey.Set(nil)
}

// UnsetStorageAccessKey ensures that no value is present for StorageAccessKey, not even an explicit nil
func (o *AzureCloudCredentials) UnsetStorageAccessKey() {
	o.StorageAccessKey.Unset()
}

// GetStorageAccountName returns the StorageAccountName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureCloudCredentials) GetStorageAccountName() string {
	if o == nil || o.StorageAccountName.Get() == nil {
		var ret string
		return ret
	}
	return *o.StorageAccountName.Get()
}

// GetStorageAccountNameOk returns a tuple with the StorageAccountName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureCloudCredentials) GetStorageAccountNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StorageAccountName.Get(), o.StorageAccountName.IsSet()
}

// HasStorageAccountName returns a boolean if a field has been set.
func (o *AzureCloudCredentials) HasStorageAccountName() bool {
	if o != nil && o.StorageAccountName.IsSet() {
		return true
	}

	return false
}

// SetStorageAccountName gets a reference to the given NullableString and assigns it to the StorageAccountName field.
func (o *AzureCloudCredentials) SetStorageAccountName(v string) {
	o.StorageAccountName.Set(&v)
}
// SetStorageAccountNameNil sets the value for StorageAccountName to be an explicit nil
func (o *AzureCloudCredentials) SetStorageAccountNameNil() {
	o.StorageAccountName.Set(nil)
}

// UnsetStorageAccountName ensures that no value is present for StorageAccountName, not even an explicit nil
func (o *AzureCloudCredentials) UnsetStorageAccountName() {
	o.StorageAccountName.Unset()
}

// GetTierType returns the TierType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AzureCloudCredentials) GetTierType() string {
	if o == nil || o.TierType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TierType.Get()
}

// GetTierTypeOk returns a tuple with the TierType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AzureCloudCredentials) GetTierTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TierType.Get(), o.TierType.IsSet()
}

// HasTierType returns a boolean if a field has been set.
func (o *AzureCloudCredentials) HasTierType() bool {
	if o != nil && o.TierType.IsSet() {
		return true
	}

	return false
}

// SetTierType gets a reference to the given NullableString and assigns it to the TierType field.
func (o *AzureCloudCredentials) SetTierType(v string) {
	o.TierType.Set(&v)
}
// SetTierTypeNil sets the value for TierType to be an explicit nil
func (o *AzureCloudCredentials) SetTierTypeNil() {
	o.TierType.Set(nil)
}

// UnsetTierType ensures that no value is present for TierType, not even an explicit nil
func (o *AzureCloudCredentials) UnsetTierType() {
	o.TierType.Unset()
}

func (o AzureCloudCredentials) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.StorageAccessKey.IsSet() {
		toSerialize["storageAccessKey"] = o.StorageAccessKey.Get()
	}
	if o.StorageAccountName.IsSet() {
		toSerialize["storageAccountName"] = o.StorageAccountName.Get()
	}
	if o.TierType.IsSet() {
		toSerialize["tierType"] = o.TierType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAzureCloudCredentials struct {
	value *AzureCloudCredentials
	isSet bool
}

func (v NullableAzureCloudCredentials) Get() *AzureCloudCredentials {
	return v.value
}

func (v *NullableAzureCloudCredentials) Set(val *AzureCloudCredentials) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureCloudCredentials) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureCloudCredentials) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureCloudCredentials(val *AzureCloudCredentials) *NullableAzureCloudCredentials {
	return &NullableAzureCloudCredentials{value: val, isSet: true}
}

func (v NullableAzureCloudCredentials) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureCloudCredentials) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


