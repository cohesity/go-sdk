/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FileLevelDataLockConfig Specifies a config to lock files in a view - to protect from malicious or an accidental attempt to delete or modify the files in this view.
type FileLevelDataLockConfig struct {
	// Specifies the duration to lock a file that has not been accessed or modified (ie. has been idle) for a certain duration of time in milliseconds. Do not set if it is required to disable auto lock.
	AutoLockAfterDurationIdle NullableInt32 `json:"autoLockAfterDurationIdle,omitempty"`
	// Specifies a global default retention duration for files in this view, if file lock is enabled for this view. Also, it is a required field if file lock is enabled. Set to -1 if the required default retention period is forever.
	DefaultFileRetentionDurationMsecs NullableInt64 `json:"defaultFileRetentionDurationMsecs,omitempty"`
	// Specifies a definite timestamp in milliseconds for retaining the file.
	ExpiryTimestampMsecs NullableInt32 `json:"expiryTimestampMsecs,omitempty"`
	// Specifies the supported mechanisms to explicity lock a file from NFS/SMB interface. Supported locking protocols: kSetReadOnly, kSetAtime. 'kSetReadOnly' is compatible with Isilon/Netapp behaviour. This locks the file and the retention duration is determined in this order: 1) atime, if set by user/application and within min and max retention duration. 2) Min retention duration, if set. 3) Otherwise, file is switched to expired data automatically. 'kSetAtime' is compatible with Data Domain behaviour.
	LockingProtocol NullableString `json:"lockingProtocol,omitempty"`
	// Specifies a maximum duration in milliseconds for which any file in this view can be retained for. Set to -1 if the required retention duration is forever. If set, it should be greater than or equal to the default retention period as well as the min retention period.
	MaxRetentionDurationMsecs NullableInt64 `json:"maxRetentionDurationMsecs,omitempty"`
	// Specifies a minimum retention duration in milliseconds after a file gets locked. The file cannot be modified or deleted during this timeframe. Set to -1 if the required retention duration is forever. This should be set less than or equal to the default retention duration.
	MinRetentionDurationMsecs NullableInt64 `json:"minRetentionDurationMsecs,omitempty"`
	// Specifies the mode of file level datalock. Enterprise mode can be upgraded to Compliance mode, but Compliance mode cannot be downgraded to Enterprise mode. kCompliance: This mode would disallow all user to delete/modify file or view under any condition when it 's in locked status except for deleting view when the view is empty. kEnterprise: This mode would follow the rules as compliance mode for normal users. But it would allow the storage admin (1) to delete view or file anytime no matter it is in locked status or expired. (2) to rename the view (3) to bring back the retention period when it's in locked mode A lock mode of a file in a view can be in one of the following:  'kCompliance': Default mode of datalock, in this mode, Data Security Admin cannot modify/delete this view when datalock is in effect. Data Security Admin can delete this view when datalock is expired. 'kEnterprise' : In this mode, Data Security Admin can change view name or delete view when datalock is in effect. Datalock in this mode can be upgraded to 'kCompliance' mode.
	Mode NullableString `json:"mode,omitempty"`
}

// NewFileLevelDataLockConfig instantiates a new FileLevelDataLockConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileLevelDataLockConfig() *FileLevelDataLockConfig {
	this := FileLevelDataLockConfig{}
	return &this
}

// NewFileLevelDataLockConfigWithDefaults instantiates a new FileLevelDataLockConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileLevelDataLockConfigWithDefaults() *FileLevelDataLockConfig {
	this := FileLevelDataLockConfig{}
	return &this
}

// GetAutoLockAfterDurationIdle returns the AutoLockAfterDurationIdle field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileLevelDataLockConfig) GetAutoLockAfterDurationIdle() int32 {
	if o == nil || o.AutoLockAfterDurationIdle.Get() == nil {
		var ret int32
		return ret
	}
	return *o.AutoLockAfterDurationIdle.Get()
}

// GetAutoLockAfterDurationIdleOk returns a tuple with the AutoLockAfterDurationIdle field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileLevelDataLockConfig) GetAutoLockAfterDurationIdleOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AutoLockAfterDurationIdle.Get(), o.AutoLockAfterDurationIdle.IsSet()
}

// HasAutoLockAfterDurationIdle returns a boolean if a field has been set.
func (o *FileLevelDataLockConfig) HasAutoLockAfterDurationIdle() bool {
	if o != nil && o.AutoLockAfterDurationIdle.IsSet() {
		return true
	}

	return false
}

// SetAutoLockAfterDurationIdle gets a reference to the given NullableInt32 and assigns it to the AutoLockAfterDurationIdle field.
func (o *FileLevelDataLockConfig) SetAutoLockAfterDurationIdle(v int32) {
	o.AutoLockAfterDurationIdle.Set(&v)
}
// SetAutoLockAfterDurationIdleNil sets the value for AutoLockAfterDurationIdle to be an explicit nil
func (o *FileLevelDataLockConfig) SetAutoLockAfterDurationIdleNil() {
	o.AutoLockAfterDurationIdle.Set(nil)
}

// UnsetAutoLockAfterDurationIdle ensures that no value is present for AutoLockAfterDurationIdle, not even an explicit nil
func (o *FileLevelDataLockConfig) UnsetAutoLockAfterDurationIdle() {
	o.AutoLockAfterDurationIdle.Unset()
}

// GetDefaultFileRetentionDurationMsecs returns the DefaultFileRetentionDurationMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileLevelDataLockConfig) GetDefaultFileRetentionDurationMsecs() int64 {
	if o == nil || o.DefaultFileRetentionDurationMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DefaultFileRetentionDurationMsecs.Get()
}

// GetDefaultFileRetentionDurationMsecsOk returns a tuple with the DefaultFileRetentionDurationMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileLevelDataLockConfig) GetDefaultFileRetentionDurationMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultFileRetentionDurationMsecs.Get(), o.DefaultFileRetentionDurationMsecs.IsSet()
}

// HasDefaultFileRetentionDurationMsecs returns a boolean if a field has been set.
func (o *FileLevelDataLockConfig) HasDefaultFileRetentionDurationMsecs() bool {
	if o != nil && o.DefaultFileRetentionDurationMsecs.IsSet() {
		return true
	}

	return false
}

// SetDefaultFileRetentionDurationMsecs gets a reference to the given NullableInt64 and assigns it to the DefaultFileRetentionDurationMsecs field.
func (o *FileLevelDataLockConfig) SetDefaultFileRetentionDurationMsecs(v int64) {
	o.DefaultFileRetentionDurationMsecs.Set(&v)
}
// SetDefaultFileRetentionDurationMsecsNil sets the value for DefaultFileRetentionDurationMsecs to be an explicit nil
func (o *FileLevelDataLockConfig) SetDefaultFileRetentionDurationMsecsNil() {
	o.DefaultFileRetentionDurationMsecs.Set(nil)
}

// UnsetDefaultFileRetentionDurationMsecs ensures that no value is present for DefaultFileRetentionDurationMsecs, not even an explicit nil
func (o *FileLevelDataLockConfig) UnsetDefaultFileRetentionDurationMsecs() {
	o.DefaultFileRetentionDurationMsecs.Unset()
}

// GetExpiryTimestampMsecs returns the ExpiryTimestampMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileLevelDataLockConfig) GetExpiryTimestampMsecs() int32 {
	if o == nil || o.ExpiryTimestampMsecs.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ExpiryTimestampMsecs.Get()
}

// GetExpiryTimestampMsecsOk returns a tuple with the ExpiryTimestampMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileLevelDataLockConfig) GetExpiryTimestampMsecsOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTimestampMsecs.Get(), o.ExpiryTimestampMsecs.IsSet()
}

// HasExpiryTimestampMsecs returns a boolean if a field has been set.
func (o *FileLevelDataLockConfig) HasExpiryTimestampMsecs() bool {
	if o != nil && o.ExpiryTimestampMsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimestampMsecs gets a reference to the given NullableInt32 and assigns it to the ExpiryTimestampMsecs field.
func (o *FileLevelDataLockConfig) SetExpiryTimestampMsecs(v int32) {
	o.ExpiryTimestampMsecs.Set(&v)
}
// SetExpiryTimestampMsecsNil sets the value for ExpiryTimestampMsecs to be an explicit nil
func (o *FileLevelDataLockConfig) SetExpiryTimestampMsecsNil() {
	o.ExpiryTimestampMsecs.Set(nil)
}

// UnsetExpiryTimestampMsecs ensures that no value is present for ExpiryTimestampMsecs, not even an explicit nil
func (o *FileLevelDataLockConfig) UnsetExpiryTimestampMsecs() {
	o.ExpiryTimestampMsecs.Unset()
}

// GetLockingProtocol returns the LockingProtocol field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileLevelDataLockConfig) GetLockingProtocol() string {
	if o == nil || o.LockingProtocol.Get() == nil {
		var ret string
		return ret
	}
	return *o.LockingProtocol.Get()
}

// GetLockingProtocolOk returns a tuple with the LockingProtocol field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileLevelDataLockConfig) GetLockingProtocolOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LockingProtocol.Get(), o.LockingProtocol.IsSet()
}

// HasLockingProtocol returns a boolean if a field has been set.
func (o *FileLevelDataLockConfig) HasLockingProtocol() bool {
	if o != nil && o.LockingProtocol.IsSet() {
		return true
	}

	return false
}

// SetLockingProtocol gets a reference to the given NullableString and assigns it to the LockingProtocol field.
func (o *FileLevelDataLockConfig) SetLockingProtocol(v string) {
	o.LockingProtocol.Set(&v)
}
// SetLockingProtocolNil sets the value for LockingProtocol to be an explicit nil
func (o *FileLevelDataLockConfig) SetLockingProtocolNil() {
	o.LockingProtocol.Set(nil)
}

// UnsetLockingProtocol ensures that no value is present for LockingProtocol, not even an explicit nil
func (o *FileLevelDataLockConfig) UnsetLockingProtocol() {
	o.LockingProtocol.Unset()
}

// GetMaxRetentionDurationMsecs returns the MaxRetentionDurationMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileLevelDataLockConfig) GetMaxRetentionDurationMsecs() int64 {
	if o == nil || o.MaxRetentionDurationMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MaxRetentionDurationMsecs.Get()
}

// GetMaxRetentionDurationMsecsOk returns a tuple with the MaxRetentionDurationMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileLevelDataLockConfig) GetMaxRetentionDurationMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxRetentionDurationMsecs.Get(), o.MaxRetentionDurationMsecs.IsSet()
}

// HasMaxRetentionDurationMsecs returns a boolean if a field has been set.
func (o *FileLevelDataLockConfig) HasMaxRetentionDurationMsecs() bool {
	if o != nil && o.MaxRetentionDurationMsecs.IsSet() {
		return true
	}

	return false
}

// SetMaxRetentionDurationMsecs gets a reference to the given NullableInt64 and assigns it to the MaxRetentionDurationMsecs field.
func (o *FileLevelDataLockConfig) SetMaxRetentionDurationMsecs(v int64) {
	o.MaxRetentionDurationMsecs.Set(&v)
}
// SetMaxRetentionDurationMsecsNil sets the value for MaxRetentionDurationMsecs to be an explicit nil
func (o *FileLevelDataLockConfig) SetMaxRetentionDurationMsecsNil() {
	o.MaxRetentionDurationMsecs.Set(nil)
}

// UnsetMaxRetentionDurationMsecs ensures that no value is present for MaxRetentionDurationMsecs, not even an explicit nil
func (o *FileLevelDataLockConfig) UnsetMaxRetentionDurationMsecs() {
	o.MaxRetentionDurationMsecs.Unset()
}

// GetMinRetentionDurationMsecs returns the MinRetentionDurationMsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileLevelDataLockConfig) GetMinRetentionDurationMsecs() int64 {
	if o == nil || o.MinRetentionDurationMsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.MinRetentionDurationMsecs.Get()
}

// GetMinRetentionDurationMsecsOk returns a tuple with the MinRetentionDurationMsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileLevelDataLockConfig) GetMinRetentionDurationMsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MinRetentionDurationMsecs.Get(), o.MinRetentionDurationMsecs.IsSet()
}

// HasMinRetentionDurationMsecs returns a boolean if a field has been set.
func (o *FileLevelDataLockConfig) HasMinRetentionDurationMsecs() bool {
	if o != nil && o.MinRetentionDurationMsecs.IsSet() {
		return true
	}

	return false
}

// SetMinRetentionDurationMsecs gets a reference to the given NullableInt64 and assigns it to the MinRetentionDurationMsecs field.
func (o *FileLevelDataLockConfig) SetMinRetentionDurationMsecs(v int64) {
	o.MinRetentionDurationMsecs.Set(&v)
}
// SetMinRetentionDurationMsecsNil sets the value for MinRetentionDurationMsecs to be an explicit nil
func (o *FileLevelDataLockConfig) SetMinRetentionDurationMsecsNil() {
	o.MinRetentionDurationMsecs.Set(nil)
}

// UnsetMinRetentionDurationMsecs ensures that no value is present for MinRetentionDurationMsecs, not even an explicit nil
func (o *FileLevelDataLockConfig) UnsetMinRetentionDurationMsecs() {
	o.MinRetentionDurationMsecs.Unset()
}

// GetMode returns the Mode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileLevelDataLockConfig) GetMode() string {
	if o == nil || o.Mode.Get() == nil {
		var ret string
		return ret
	}
	return *o.Mode.Get()
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileLevelDataLockConfig) GetModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Mode.Get(), o.Mode.IsSet()
}

// HasMode returns a boolean if a field has been set.
func (o *FileLevelDataLockConfig) HasMode() bool {
	if o != nil && o.Mode.IsSet() {
		return true
	}

	return false
}

// SetMode gets a reference to the given NullableString and assigns it to the Mode field.
func (o *FileLevelDataLockConfig) SetMode(v string) {
	o.Mode.Set(&v)
}
// SetModeNil sets the value for Mode to be an explicit nil
func (o *FileLevelDataLockConfig) SetModeNil() {
	o.Mode.Set(nil)
}

// UnsetMode ensures that no value is present for Mode, not even an explicit nil
func (o *FileLevelDataLockConfig) UnsetMode() {
	o.Mode.Unset()
}

func (o FileLevelDataLockConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AutoLockAfterDurationIdle.IsSet() {
		toSerialize["autoLockAfterDurationIdle"] = o.AutoLockAfterDurationIdle.Get()
	}
	if o.DefaultFileRetentionDurationMsecs.IsSet() {
		toSerialize["defaultFileRetentionDurationMsecs"] = o.DefaultFileRetentionDurationMsecs.Get()
	}
	if o.ExpiryTimestampMsecs.IsSet() {
		toSerialize["expiryTimestampMsecs"] = o.ExpiryTimestampMsecs.Get()
	}
	if o.LockingProtocol.IsSet() {
		toSerialize["lockingProtocol"] = o.LockingProtocol.Get()
	}
	if o.MaxRetentionDurationMsecs.IsSet() {
		toSerialize["maxRetentionDurationMsecs"] = o.MaxRetentionDurationMsecs.Get()
	}
	if o.MinRetentionDurationMsecs.IsSet() {
		toSerialize["minRetentionDurationMsecs"] = o.MinRetentionDurationMsecs.Get()
	}
	if o.Mode.IsSet() {
		toSerialize["mode"] = o.Mode.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFileLevelDataLockConfig struct {
	value *FileLevelDataLockConfig
	isSet bool
}

func (v NullableFileLevelDataLockConfig) Get() *FileLevelDataLockConfig {
	return v.value
}

func (v *NullableFileLevelDataLockConfig) Set(val *FileLevelDataLockConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableFileLevelDataLockConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableFileLevelDataLockConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileLevelDataLockConfig(val *FileLevelDataLockConfig) *NullableFileLevelDataLockConfig {
	return &NullableFileLevelDataLockConfig{value: val, isSet: true}
}

func (v NullableFileLevelDataLockConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileLevelDataLockConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


