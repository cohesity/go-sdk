/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TenantProxy Specifies the data for tenant proxy which has been deployed in tenant's enviroment.
type TenantProxy struct {
	// Specifies the constituent id of the proxy.
	ConstituentId NullableInt64 `json:"constituentId,omitempty"`
	// Specifies the ip address of the proxy.
	IpAddress NullableString `json:"ipAddress,omitempty"`
	// Specifies the unique id of the tenant.
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewTenantProxy instantiates a new TenantProxy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantProxy() *TenantProxy {
	this := TenantProxy{}
	return &this
}

// NewTenantProxyWithDefaults instantiates a new TenantProxy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantProxyWithDefaults() *TenantProxy {
	this := TenantProxy{}
	return &this
}

// GetConstituentId returns the ConstituentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantProxy) GetConstituentId() int64 {
	if o == nil || o.ConstituentId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ConstituentId.Get()
}

// GetConstituentIdOk returns a tuple with the ConstituentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantProxy) GetConstituentIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ConstituentId.Get(), o.ConstituentId.IsSet()
}

// HasConstituentId returns a boolean if a field has been set.
func (o *TenantProxy) HasConstituentId() bool {
	if o != nil && o.ConstituentId.IsSet() {
		return true
	}

	return false
}

// SetConstituentId gets a reference to the given NullableInt64 and assigns it to the ConstituentId field.
func (o *TenantProxy) SetConstituentId(v int64) {
	o.ConstituentId.Set(&v)
}
// SetConstituentIdNil sets the value for ConstituentId to be an explicit nil
func (o *TenantProxy) SetConstituentIdNil() {
	o.ConstituentId.Set(nil)
}

// UnsetConstituentId ensures that no value is present for ConstituentId, not even an explicit nil
func (o *TenantProxy) UnsetConstituentId() {
	o.ConstituentId.Unset()
}

// GetIpAddress returns the IpAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantProxy) GetIpAddress() string {
	if o == nil || o.IpAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.IpAddress.Get()
}

// GetIpAddressOk returns a tuple with the IpAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantProxy) GetIpAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IpAddress.Get(), o.IpAddress.IsSet()
}

// HasIpAddress returns a boolean if a field has been set.
func (o *TenantProxy) HasIpAddress() bool {
	if o != nil && o.IpAddress.IsSet() {
		return true
	}

	return false
}

// SetIpAddress gets a reference to the given NullableString and assigns it to the IpAddress field.
func (o *TenantProxy) SetIpAddress(v string) {
	o.IpAddress.Set(&v)
}
// SetIpAddressNil sets the value for IpAddress to be an explicit nil
func (o *TenantProxy) SetIpAddressNil() {
	o.IpAddress.Set(nil)
}

// UnsetIpAddress ensures that no value is present for IpAddress, not even an explicit nil
func (o *TenantProxy) UnsetIpAddress() {
	o.IpAddress.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantProxy) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantProxy) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *TenantProxy) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *TenantProxy) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *TenantProxy) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *TenantProxy) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o TenantProxy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ConstituentId.IsSet() {
		toSerialize["constituentId"] = o.ConstituentId.Get()
	}
	if o.IpAddress.IsSet() {
		toSerialize["ipAddress"] = o.IpAddress.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTenantProxy struct {
	value *TenantProxy
	isSet bool
}

func (v NullableTenantProxy) Get() *TenantProxy {
	return v.value
}

func (v *NullableTenantProxy) Set(val *TenantProxy) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantProxy) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantProxy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantProxy(val *TenantProxy) *NullableTenantProxy {
	return &NullableTenantProxy{value: val, isSet: true}
}

func (v NullableTenantProxy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantProxy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


