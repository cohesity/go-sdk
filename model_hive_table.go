/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// HiveTable Specifies an Object containing information about a Hive table.
type HiveTable struct {
	// Specifies the approx size of the table in bytes.
	ApproxSizeBytes NullableInt64 `json:"approxSizeBytes,omitempty"`
	// Specifies the created on, epoch millis.
	CreatedOn NullableInt64 `json:"createdOn,omitempty"`
	// Specifies if this is a transactional table.
	IsTransactionalTable NullableBool `json:"isTransactionalTable,omitempty"`
	// Specifies the owner of the table.
	Owner NullableString `json:"owner,omitempty"`
	// Specifies the type of table ex. MANAGED,VIRTUAL etc. Specifies the type of an Hive table. 'kManaged' indicates a MANAGED Hive table. 'kExternal' indicates a EXTERNAL Hive table. 'kVirtual' indicates a VIRTUAL Hive tablet. 'kIndex' indicates a INDEX Hive table.
	TableType NullableString `json:"tableType,omitempty"`
}

// NewHiveTable instantiates a new HiveTable object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHiveTable() *HiveTable {
	this := HiveTable{}
	return &this
}

// NewHiveTableWithDefaults instantiates a new HiveTable object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHiveTableWithDefaults() *HiveTable {
	this := HiveTable{}
	return &this
}

// GetApproxSizeBytes returns the ApproxSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveTable) GetApproxSizeBytes() int64 {
	if o == nil || o.ApproxSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ApproxSizeBytes.Get()
}

// GetApproxSizeBytesOk returns a tuple with the ApproxSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveTable) GetApproxSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ApproxSizeBytes.Get(), o.ApproxSizeBytes.IsSet()
}

// HasApproxSizeBytes returns a boolean if a field has been set.
func (o *HiveTable) HasApproxSizeBytes() bool {
	if o != nil && o.ApproxSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetApproxSizeBytes gets a reference to the given NullableInt64 and assigns it to the ApproxSizeBytes field.
func (o *HiveTable) SetApproxSizeBytes(v int64) {
	o.ApproxSizeBytes.Set(&v)
}
// SetApproxSizeBytesNil sets the value for ApproxSizeBytes to be an explicit nil
func (o *HiveTable) SetApproxSizeBytesNil() {
	o.ApproxSizeBytes.Set(nil)
}

// UnsetApproxSizeBytes ensures that no value is present for ApproxSizeBytes, not even an explicit nil
func (o *HiveTable) UnsetApproxSizeBytes() {
	o.ApproxSizeBytes.Unset()
}

// GetCreatedOn returns the CreatedOn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveTable) GetCreatedOn() int64 {
	if o == nil || o.CreatedOn.Get() == nil {
		var ret int64
		return ret
	}
	return *o.CreatedOn.Get()
}

// GetCreatedOnOk returns a tuple with the CreatedOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveTable) GetCreatedOnOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CreatedOn.Get(), o.CreatedOn.IsSet()
}

// HasCreatedOn returns a boolean if a field has been set.
func (o *HiveTable) HasCreatedOn() bool {
	if o != nil && o.CreatedOn.IsSet() {
		return true
	}

	return false
}

// SetCreatedOn gets a reference to the given NullableInt64 and assigns it to the CreatedOn field.
func (o *HiveTable) SetCreatedOn(v int64) {
	o.CreatedOn.Set(&v)
}
// SetCreatedOnNil sets the value for CreatedOn to be an explicit nil
func (o *HiveTable) SetCreatedOnNil() {
	o.CreatedOn.Set(nil)
}

// UnsetCreatedOn ensures that no value is present for CreatedOn, not even an explicit nil
func (o *HiveTable) UnsetCreatedOn() {
	o.CreatedOn.Unset()
}

// GetIsTransactionalTable returns the IsTransactionalTable field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveTable) GetIsTransactionalTable() bool {
	if o == nil || o.IsTransactionalTable.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsTransactionalTable.Get()
}

// GetIsTransactionalTableOk returns a tuple with the IsTransactionalTable field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveTable) GetIsTransactionalTableOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsTransactionalTable.Get(), o.IsTransactionalTable.IsSet()
}

// HasIsTransactionalTable returns a boolean if a field has been set.
func (o *HiveTable) HasIsTransactionalTable() bool {
	if o != nil && o.IsTransactionalTable.IsSet() {
		return true
	}

	return false
}

// SetIsTransactionalTable gets a reference to the given NullableBool and assigns it to the IsTransactionalTable field.
func (o *HiveTable) SetIsTransactionalTable(v bool) {
	o.IsTransactionalTable.Set(&v)
}
// SetIsTransactionalTableNil sets the value for IsTransactionalTable to be an explicit nil
func (o *HiveTable) SetIsTransactionalTableNil() {
	o.IsTransactionalTable.Set(nil)
}

// UnsetIsTransactionalTable ensures that no value is present for IsTransactionalTable, not even an explicit nil
func (o *HiveTable) UnsetIsTransactionalTable() {
	o.IsTransactionalTable.Unset()
}

// GetOwner returns the Owner field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveTable) GetOwner() string {
	if o == nil || o.Owner.Get() == nil {
		var ret string
		return ret
	}
	return *o.Owner.Get()
}

// GetOwnerOk returns a tuple with the Owner field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveTable) GetOwnerOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Owner.Get(), o.Owner.IsSet()
}

// HasOwner returns a boolean if a field has been set.
func (o *HiveTable) HasOwner() bool {
	if o != nil && o.Owner.IsSet() {
		return true
	}

	return false
}

// SetOwner gets a reference to the given NullableString and assigns it to the Owner field.
func (o *HiveTable) SetOwner(v string) {
	o.Owner.Set(&v)
}
// SetOwnerNil sets the value for Owner to be an explicit nil
func (o *HiveTable) SetOwnerNil() {
	o.Owner.Set(nil)
}

// UnsetOwner ensures that no value is present for Owner, not even an explicit nil
func (o *HiveTable) UnsetOwner() {
	o.Owner.Unset()
}

// GetTableType returns the TableType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *HiveTable) GetTableType() string {
	if o == nil || o.TableType.Get() == nil {
		var ret string
		return ret
	}
	return *o.TableType.Get()
}

// GetTableTypeOk returns a tuple with the TableType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *HiveTable) GetTableTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TableType.Get(), o.TableType.IsSet()
}

// HasTableType returns a boolean if a field has been set.
func (o *HiveTable) HasTableType() bool {
	if o != nil && o.TableType.IsSet() {
		return true
	}

	return false
}

// SetTableType gets a reference to the given NullableString and assigns it to the TableType field.
func (o *HiveTable) SetTableType(v string) {
	o.TableType.Set(&v)
}
// SetTableTypeNil sets the value for TableType to be an explicit nil
func (o *HiveTable) SetTableTypeNil() {
	o.TableType.Set(nil)
}

// UnsetTableType ensures that no value is present for TableType, not even an explicit nil
func (o *HiveTable) UnsetTableType() {
	o.TableType.Unset()
}

func (o HiveTable) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApproxSizeBytes.IsSet() {
		toSerialize["approxSizeBytes"] = o.ApproxSizeBytes.Get()
	}
	if o.CreatedOn.IsSet() {
		toSerialize["createdOn"] = o.CreatedOn.Get()
	}
	if o.IsTransactionalTable.IsSet() {
		toSerialize["isTransactionalTable"] = o.IsTransactionalTable.Get()
	}
	if o.Owner.IsSet() {
		toSerialize["owner"] = o.Owner.Get()
	}
	if o.TableType.IsSet() {
		toSerialize["tableType"] = o.TableType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableHiveTable struct {
	value *HiveTable
	isSet bool
}

func (v NullableHiveTable) Get() *HiveTable {
	return v.value
}

func (v *NullableHiveTable) Set(val *HiveTable) {
	v.value = val
	v.isSet = true
}

func (v NullableHiveTable) IsSet() bool {
	return v.isSet
}

func (v *NullableHiveTable) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHiveTable(val *HiveTable) *NullableHiveTable {
	return &NullableHiveTable{value: val, isSet: true}
}

func (v NullableHiveTable) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHiveTable) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


