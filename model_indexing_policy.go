/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// IndexingPolicy Specifies settings for indexing files found in an Object (such as a VM) so these files can be searched and recovered. This also specifies inclusion and exclusion rules that determine the directories to index.
type IndexingPolicy struct {
	// Array of Indexed Directories.  Specifies a list of directories to index.
	AllowPrefixes []string `json:"allowPrefixes,omitempty"`
	// Array of Excluded Directories.  Specifies a list of directories to exclude from indexing.
	DenyPrefixes []string `json:"denyPrefixes,omitempty"`
	// Specifies if the files found in an Object (such as a VM) should be indexed. If false (the default), files are indexed.
	DisableIndexing NullableBool `json:"disableIndexing,omitempty"`
}

// NewIndexingPolicy instantiates a new IndexingPolicy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIndexingPolicy() *IndexingPolicy {
	this := IndexingPolicy{}
	return &this
}

// NewIndexingPolicyWithDefaults instantiates a new IndexingPolicy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIndexingPolicyWithDefaults() *IndexingPolicy {
	this := IndexingPolicy{}
	return &this
}

// GetAllowPrefixes returns the AllowPrefixes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexingPolicy) GetAllowPrefixes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AllowPrefixes
}

// GetAllowPrefixesOk returns a tuple with the AllowPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexingPolicy) GetAllowPrefixesOk() (*[]string, bool) {
	if o == nil || o.AllowPrefixes == nil {
		return nil, false
	}
	return &o.AllowPrefixes, true
}

// HasAllowPrefixes returns a boolean if a field has been set.
func (o *IndexingPolicy) HasAllowPrefixes() bool {
	if o != nil && o.AllowPrefixes != nil {
		return true
	}

	return false
}

// SetAllowPrefixes gets a reference to the given []string and assigns it to the AllowPrefixes field.
func (o *IndexingPolicy) SetAllowPrefixes(v []string) {
	o.AllowPrefixes = v
}

// GetDenyPrefixes returns the DenyPrefixes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexingPolicy) GetDenyPrefixes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DenyPrefixes
}

// GetDenyPrefixesOk returns a tuple with the DenyPrefixes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexingPolicy) GetDenyPrefixesOk() (*[]string, bool) {
	if o == nil || o.DenyPrefixes == nil {
		return nil, false
	}
	return &o.DenyPrefixes, true
}

// HasDenyPrefixes returns a boolean if a field has been set.
func (o *IndexingPolicy) HasDenyPrefixes() bool {
	if o != nil && o.DenyPrefixes != nil {
		return true
	}

	return false
}

// SetDenyPrefixes gets a reference to the given []string and assigns it to the DenyPrefixes field.
func (o *IndexingPolicy) SetDenyPrefixes(v []string) {
	o.DenyPrefixes = v
}

// GetDisableIndexing returns the DisableIndexing field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IndexingPolicy) GetDisableIndexing() bool {
	if o == nil || o.DisableIndexing.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DisableIndexing.Get()
}

// GetDisableIndexingOk returns a tuple with the DisableIndexing field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IndexingPolicy) GetDisableIndexingOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DisableIndexing.Get(), o.DisableIndexing.IsSet()
}

// HasDisableIndexing returns a boolean if a field has been set.
func (o *IndexingPolicy) HasDisableIndexing() bool {
	if o != nil && o.DisableIndexing.IsSet() {
		return true
	}

	return false
}

// SetDisableIndexing gets a reference to the given NullableBool and assigns it to the DisableIndexing field.
func (o *IndexingPolicy) SetDisableIndexing(v bool) {
	o.DisableIndexing.Set(&v)
}
// SetDisableIndexingNil sets the value for DisableIndexing to be an explicit nil
func (o *IndexingPolicy) SetDisableIndexingNil() {
	o.DisableIndexing.Set(nil)
}

// UnsetDisableIndexing ensures that no value is present for DisableIndexing, not even an explicit nil
func (o *IndexingPolicy) UnsetDisableIndexing() {
	o.DisableIndexing.Unset()
}

func (o IndexingPolicy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowPrefixes != nil {
		toSerialize["allowPrefixes"] = o.AllowPrefixes
	}
	if o.DenyPrefixes != nil {
		toSerialize["denyPrefixes"] = o.DenyPrefixes
	}
	if o.DisableIndexing.IsSet() {
		toSerialize["disableIndexing"] = o.DisableIndexing.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIndexingPolicy struct {
	value *IndexingPolicy
	isSet bool
}

func (v NullableIndexingPolicy) Get() *IndexingPolicy {
	return v.value
}

func (v *NullableIndexingPolicy) Set(val *IndexingPolicy) {
	v.value = val
	v.isSet = true
}

func (v NullableIndexingPolicy) IsSet() bool {
	return v.isSet
}

func (v *NullableIndexingPolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIndexingPolicy(val *IndexingPolicy) *NullableIndexingPolicy {
	return &NullableIndexingPolicy{value: val, isSet: true}
}

func (v NullableIndexingPolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIndexingPolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


