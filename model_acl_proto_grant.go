/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ACLProtoGrant struct for ACLProtoGrant
type ACLProtoGrant struct {
	Grantee *GranteeProto `json:"grantee,omitempty"`
	// Vector of permission granted to this grantee.
	PermissionVec []int32 `json:"permissionVec,omitempty"`
}

// NewACLProtoGrant instantiates a new ACLProtoGrant object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewACLProtoGrant() *ACLProtoGrant {
	this := ACLProtoGrant{}
	return &this
}

// NewACLProtoGrantWithDefaults instantiates a new ACLProtoGrant object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewACLProtoGrantWithDefaults() *ACLProtoGrant {
	this := ACLProtoGrant{}
	return &this
}

// GetGrantee returns the Grantee field value if set, zero value otherwise.
func (o *ACLProtoGrant) GetGrantee() GranteeProto {
	if o == nil || o.Grantee == nil {
		var ret GranteeProto
		return ret
	}
	return *o.Grantee
}

// GetGranteeOk returns a tuple with the Grantee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ACLProtoGrant) GetGranteeOk() (*GranteeProto, bool) {
	if o == nil || o.Grantee == nil {
		return nil, false
	}
	return o.Grantee, true
}

// HasGrantee returns a boolean if a field has been set.
func (o *ACLProtoGrant) HasGrantee() bool {
	if o != nil && o.Grantee != nil {
		return true
	}

	return false
}

// SetGrantee gets a reference to the given GranteeProto and assigns it to the Grantee field.
func (o *ACLProtoGrant) SetGrantee(v GranteeProto) {
	o.Grantee = &v
}

// GetPermissionVec returns the PermissionVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ACLProtoGrant) GetPermissionVec() []int32 {
	if o == nil  {
		var ret []int32
		return ret
	}
	return o.PermissionVec
}

// GetPermissionVecOk returns a tuple with the PermissionVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ACLProtoGrant) GetPermissionVecOk() (*[]int32, bool) {
	if o == nil || o.PermissionVec == nil {
		return nil, false
	}
	return &o.PermissionVec, true
}

// HasPermissionVec returns a boolean if a field has been set.
func (o *ACLProtoGrant) HasPermissionVec() bool {
	if o != nil && o.PermissionVec != nil {
		return true
	}

	return false
}

// SetPermissionVec gets a reference to the given []int32 and assigns it to the PermissionVec field.
func (o *ACLProtoGrant) SetPermissionVec(v []int32) {
	o.PermissionVec = v
}

func (o ACLProtoGrant) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Grantee != nil {
		toSerialize["grantee"] = o.Grantee
	}
	if o.PermissionVec != nil {
		toSerialize["permissionVec"] = o.PermissionVec
	}
	return json.Marshal(toSerialize)
}

type NullableACLProtoGrant struct {
	value *ACLProtoGrant
	isSet bool
}

func (v NullableACLProtoGrant) Get() *ACLProtoGrant {
	return v.value
}

func (v *NullableACLProtoGrant) Set(val *ACLProtoGrant) {
	v.value = val
	v.isSet = true
}

func (v NullableACLProtoGrant) IsSet() bool {
	return v.isSet
}

func (v *NullableACLProtoGrant) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableACLProtoGrant(val *ACLProtoGrant) *NullableACLProtoGrant {
	return &NullableACLProtoGrant{value: val, isSet: true}
}

func (v NullableACLProtoGrant) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableACLProtoGrant) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


