/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// StatsGroup StatsGroup describes the details of a stats group. A stats group is a basic group of usage stats, it is the usage of a tenant within a storage domain may also for a specific consumer type.
type StatsGroup struct {
	Consumer *Consumer `json:"consumer,omitempty"`
	// Specifies the entity id of the group.
	EntityId NullableString `json:"entityId,omitempty"`
	// Specifies the id of the group.
	Id NullableInt64 `json:"id,omitempty"`
	// Specifies the name of the group.
	Name NullableString `json:"name,omitempty"`
	// Specifies the id of the organization (tenant) with respect to this group.
	TenantId NullableString `json:"tenantId,omitempty"`
	// Specifies the name of the organization (tenant) with respect to this group.
	TenantName NullableString `json:"tenantName,omitempty"`
	// Specifies the id of the view box (storage domain) with respect to this group.
	ViewBoxId NullableInt64 `json:"viewBoxId,omitempty"`
	// Specifies the name of the view box (storage domain) with respect to this group.
	ViewBoxName NullableString `json:"viewBoxName,omitempty"`
}

// NewStatsGroup instantiates a new StatsGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStatsGroup() *StatsGroup {
	this := StatsGroup{}
	return &this
}

// NewStatsGroupWithDefaults instantiates a new StatsGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStatsGroupWithDefaults() *StatsGroup {
	this := StatsGroup{}
	return &this
}

// GetConsumer returns the Consumer field value if set, zero value otherwise.
func (o *StatsGroup) GetConsumer() Consumer {
	if o == nil || o.Consumer == nil {
		var ret Consumer
		return ret
	}
	return *o.Consumer
}

// GetConsumerOk returns a tuple with the Consumer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StatsGroup) GetConsumerOk() (*Consumer, bool) {
	if o == nil || o.Consumer == nil {
		return nil, false
	}
	return o.Consumer, true
}

// HasConsumer returns a boolean if a field has been set.
func (o *StatsGroup) HasConsumer() bool {
	if o != nil && o.Consumer != nil {
		return true
	}

	return false
}

// SetConsumer gets a reference to the given Consumer and assigns it to the Consumer field.
func (o *StatsGroup) SetConsumer(v Consumer) {
	o.Consumer = &v
}

// GetEntityId returns the EntityId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatsGroup) GetEntityId() string {
	if o == nil || o.EntityId.Get() == nil {
		var ret string
		return ret
	}
	return *o.EntityId.Get()
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatsGroup) GetEntityIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EntityId.Get(), o.EntityId.IsSet()
}

// HasEntityId returns a boolean if a field has been set.
func (o *StatsGroup) HasEntityId() bool {
	if o != nil && o.EntityId.IsSet() {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given NullableString and assigns it to the EntityId field.
func (o *StatsGroup) SetEntityId(v string) {
	o.EntityId.Set(&v)
}
// SetEntityIdNil sets the value for EntityId to be an explicit nil
func (o *StatsGroup) SetEntityIdNil() {
	o.EntityId.Set(nil)
}

// UnsetEntityId ensures that no value is present for EntityId, not even an explicit nil
func (o *StatsGroup) UnsetEntityId() {
	o.EntityId.Unset()
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatsGroup) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatsGroup) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *StatsGroup) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *StatsGroup) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *StatsGroup) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *StatsGroup) UnsetId() {
	o.Id.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatsGroup) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatsGroup) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *StatsGroup) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *StatsGroup) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *StatsGroup) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *StatsGroup) UnsetName() {
	o.Name.Unset()
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatsGroup) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatsGroup) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *StatsGroup) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *StatsGroup) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *StatsGroup) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *StatsGroup) UnsetTenantId() {
	o.TenantId.Unset()
}

// GetTenantName returns the TenantName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatsGroup) GetTenantName() string {
	if o == nil || o.TenantName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantName.Get()
}

// GetTenantNameOk returns a tuple with the TenantName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatsGroup) GetTenantNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantName.Get(), o.TenantName.IsSet()
}

// HasTenantName returns a boolean if a field has been set.
func (o *StatsGroup) HasTenantName() bool {
	if o != nil && o.TenantName.IsSet() {
		return true
	}

	return false
}

// SetTenantName gets a reference to the given NullableString and assigns it to the TenantName field.
func (o *StatsGroup) SetTenantName(v string) {
	o.TenantName.Set(&v)
}
// SetTenantNameNil sets the value for TenantName to be an explicit nil
func (o *StatsGroup) SetTenantNameNil() {
	o.TenantName.Set(nil)
}

// UnsetTenantName ensures that no value is present for TenantName, not even an explicit nil
func (o *StatsGroup) UnsetTenantName() {
	o.TenantName.Unset()
}

// GetViewBoxId returns the ViewBoxId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatsGroup) GetViewBoxId() int64 {
	if o == nil || o.ViewBoxId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewBoxId.Get()
}

// GetViewBoxIdOk returns a tuple with the ViewBoxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatsGroup) GetViewBoxIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewBoxId.Get(), o.ViewBoxId.IsSet()
}

// HasViewBoxId returns a boolean if a field has been set.
func (o *StatsGroup) HasViewBoxId() bool {
	if o != nil && o.ViewBoxId.IsSet() {
		return true
	}

	return false
}

// SetViewBoxId gets a reference to the given NullableInt64 and assigns it to the ViewBoxId field.
func (o *StatsGroup) SetViewBoxId(v int64) {
	o.ViewBoxId.Set(&v)
}
// SetViewBoxIdNil sets the value for ViewBoxId to be an explicit nil
func (o *StatsGroup) SetViewBoxIdNil() {
	o.ViewBoxId.Set(nil)
}

// UnsetViewBoxId ensures that no value is present for ViewBoxId, not even an explicit nil
func (o *StatsGroup) UnsetViewBoxId() {
	o.ViewBoxId.Unset()
}

// GetViewBoxName returns the ViewBoxName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StatsGroup) GetViewBoxName() string {
	if o == nil || o.ViewBoxName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewBoxName.Get()
}

// GetViewBoxNameOk returns a tuple with the ViewBoxName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StatsGroup) GetViewBoxNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewBoxName.Get(), o.ViewBoxName.IsSet()
}

// HasViewBoxName returns a boolean if a field has been set.
func (o *StatsGroup) HasViewBoxName() bool {
	if o != nil && o.ViewBoxName.IsSet() {
		return true
	}

	return false
}

// SetViewBoxName gets a reference to the given NullableString and assigns it to the ViewBoxName field.
func (o *StatsGroup) SetViewBoxName(v string) {
	o.ViewBoxName.Set(&v)
}
// SetViewBoxNameNil sets the value for ViewBoxName to be an explicit nil
func (o *StatsGroup) SetViewBoxNameNil() {
	o.ViewBoxName.Set(nil)
}

// UnsetViewBoxName ensures that no value is present for ViewBoxName, not even an explicit nil
func (o *StatsGroup) UnsetViewBoxName() {
	o.ViewBoxName.Unset()
}

func (o StatsGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Consumer != nil {
		toSerialize["consumer"] = o.Consumer
	}
	if o.EntityId.IsSet() {
		toSerialize["entityId"] = o.EntityId.Get()
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	if o.TenantName.IsSet() {
		toSerialize["tenantName"] = o.TenantName.Get()
	}
	if o.ViewBoxId.IsSet() {
		toSerialize["viewBoxId"] = o.ViewBoxId.Get()
	}
	if o.ViewBoxName.IsSet() {
		toSerialize["viewBoxName"] = o.ViewBoxName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableStatsGroup struct {
	value *StatsGroup
	isSet bool
}

func (v NullableStatsGroup) Get() *StatsGroup {
	return v.value
}

func (v *NullableStatsGroup) Set(val *StatsGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableStatsGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableStatsGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStatsGroup(val *StatsGroup) *NullableStatsGroup {
	return &NullableStatsGroup{value: val, isSet: true}
}

func (v NullableStatsGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStatsGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


