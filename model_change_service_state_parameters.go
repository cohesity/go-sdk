/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ChangeServiceStateParameters Specifies the parameters needed to change the state of one or more services running on the Cluster.
type ChangeServiceStateParameters struct {
	// Specifies the action to take on the specified service. 'kStop' indicates that the specified services will be stopped. 'kStart' indicates that the specified services will be started. 'kRestart' indicates that the specified services will be restarted.
	Action NullableString `json:"action,omitempty"`
	// Specifies the list of services to take the specified action on. If none are specified, all Cluster services will be affected. It should also be noted that some Cluster services are not stoppable and may not be affected by the action specified. 'kApollo' is a service for reclaiming freed disk sectors on Nodes in the SnapFS distributed file system. 'kBridge' is a service for managing the SnapFS distributed file system. 'kGenie' is a service that is responsible for monitoring hardware health on the Cluster. 'kGenieGofer' is a service that links the Genie service to other services on the Cluster. 'kMagneto' is the data protection service of the Cohesity Data Platform. 'kIris' is the service which serves REST API calls to the UI, CLI, and any scripts written by customers. 'kIrisProxy' is a service that links the Iris service to other services on the Cluster. 'kScribe' is the service responsible for storing filesystem metadata. 'kStats' is the service that is responsible for retrieving and aggregating disk metrics across the Cluster. 'kYoda' is an elastic search indexing service. 'kAlerts' is a publisher and subscribing service for alerts. 'kKeychain' is a service for managing disk encryption keys. 'kLogWatcher' is a service that scans the log directory and reduces the number of logs if required. 'kStatsCollector' is a service that periodically logs system stats. 'kGandalf' is a distributed lock service and coordination manager. 'kNexus' indicates the Nexus service. This is the service that is responsible for creation of Clusters and configuration of Nodes and networking. 'kNexusProxy' is a service that links the Nexus service to other services on the Cluster. 'kStorageProxy' is a service for accessing data on external entities. 'kTricorder' is a diagnostic health testing service for Clusters. 'kRtClient' is a reverse tunneling client service. 'kVaultProxy' is a service for managing external targets that Clusters can be backed up to. 'kSmbProxy' is an SMB protocol service. 'kBridgeProxy' is the service that links the Bridge service to other services on the Cluster. 'kLibrarian' is an elastic search indexing service. 'kGroot' is a service for managing replication of SQL databases across multiple nodes in a Cluster. 'kEagleAgent' is a service that is responsible for retrieving information on Cluster health. 'kAthena' is a service for running distributed containerized applications on the Cohesity Data Platform. 'kBifrostBroker' is a service for communicating with the Cohesity proxies for multitenancy. 'kSmb2Proxy' is a new SMB protocol service. 'kOs' can be specified in order to do a full reboot. 'kAtom' is a service for receiving data for the Continuous Data Protection.
	Services []string `json:"services,omitempty"`
}

// NewChangeServiceStateParameters instantiates a new ChangeServiceStateParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChangeServiceStateParameters() *ChangeServiceStateParameters {
	this := ChangeServiceStateParameters{}
	return &this
}

// NewChangeServiceStateParametersWithDefaults instantiates a new ChangeServiceStateParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChangeServiceStateParametersWithDefaults() *ChangeServiceStateParameters {
	this := ChangeServiceStateParameters{}
	return &this
}

// GetAction returns the Action field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChangeServiceStateParameters) GetAction() string {
	if o == nil || o.Action.Get() == nil {
		var ret string
		return ret
	}
	return *o.Action.Get()
}

// GetActionOk returns a tuple with the Action field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChangeServiceStateParameters) GetActionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Action.Get(), o.Action.IsSet()
}

// HasAction returns a boolean if a field has been set.
func (o *ChangeServiceStateParameters) HasAction() bool {
	if o != nil && o.Action.IsSet() {
		return true
	}

	return false
}

// SetAction gets a reference to the given NullableString and assigns it to the Action field.
func (o *ChangeServiceStateParameters) SetAction(v string) {
	o.Action.Set(&v)
}
// SetActionNil sets the value for Action to be an explicit nil
func (o *ChangeServiceStateParameters) SetActionNil() {
	o.Action.Set(nil)
}

// UnsetAction ensures that no value is present for Action, not even an explicit nil
func (o *ChangeServiceStateParameters) UnsetAction() {
	o.Action.Unset()
}

// GetServices returns the Services field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ChangeServiceStateParameters) GetServices() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Services
}

// GetServicesOk returns a tuple with the Services field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ChangeServiceStateParameters) GetServicesOk() (*[]string, bool) {
	if o == nil || o.Services == nil {
		return nil, false
	}
	return &o.Services, true
}

// HasServices returns a boolean if a field has been set.
func (o *ChangeServiceStateParameters) HasServices() bool {
	if o != nil && o.Services != nil {
		return true
	}

	return false
}

// SetServices gets a reference to the given []string and assigns it to the Services field.
func (o *ChangeServiceStateParameters) SetServices(v []string) {
	o.Services = v
}

func (o ChangeServiceStateParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Action.IsSet() {
		toSerialize["action"] = o.Action.Get()
	}
	if o.Services != nil {
		toSerialize["services"] = o.Services
	}
	return json.Marshal(toSerialize)
}

type NullableChangeServiceStateParameters struct {
	value *ChangeServiceStateParameters
	isSet bool
}

func (v NullableChangeServiceStateParameters) Get() *ChangeServiceStateParameters {
	return v.value
}

func (v *NullableChangeServiceStateParameters) Set(val *ChangeServiceStateParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableChangeServiceStateParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableChangeServiceStateParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChangeServiceStateParameters(val *ChangeServiceStateParameters) *NullableChangeServiceStateParameters {
	return &NullableChangeServiceStateParameters{value: val, isSet: true}
}

func (v NullableChangeServiceStateParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChangeServiceStateParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


