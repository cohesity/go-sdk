/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"bytes"
	"reflect"
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"regexp"
)

// Linger please
var (
	_ _context.Context
)

// SearchApiService SearchApi service
type SearchApiService service

type ApiSearchProtectionRunsRequest struct {
	ctx _context.Context
	ApiService *SearchApiService
	Uuid *string
}

/*

func (r ApiSearchProtectionRunsRequest) Uuid(uuid string) ApiSearchProtectionRunsRequest {
	r.uuid = &uuid
	return r
}
*/

/*
func (r ApiSearchProtectionRunsRequest) Execute() (ProtectionRunResponse, *_nethttp.Response, error) {
	return r.ApiService.SearchProtectionRunsExecute(r)
}

 * SearchProtectionRuns Method for SearchProtectionRuns
 * Returns the information of latest snapshot of a particular object across
all snapshot target locations.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSearchProtectionRunsRequest
 
func (a *SearchApiService) SearchProtectionRuns(ctx _context.Context) ApiSearchProtectionRunsRequest {
	return ApiSearchProtectionRunsRequest{
		ApiService: a,
		ctx: ctx,
	}
}
*/

func (a *SearchApiService) SearchProtectionRuns(r ApiSearchProtectionRunsRequest) (ProtectionRunResponse, *_nethttp.Response, error) {
	if reflect.TypeOf(*a).Name() != "AccessTokensApiService" {
		token, err := GetTokenHelper(a.client)

		if err != nil {
			return ProtectionRunResponse{}, nil, GenericOpenAPIError{
				error: err.Error(),
			}
		}

		r.ctx = _context.WithValue(_context.Background(), ContextAPIKeys, map[string]APIKey{"TokenHeader": {Key: token, Prefix: "Bearer"}})
	} else {
		r.ctx = _context.Background()
	}
	r.ApiService = a

	return r.ApiService.SearchProtectionRunsExecute(r)
}


/*
 * Execute executes the request
 * @return ProtectionRunResponse
 */
func (a *SearchApiService) SearchProtectionRunsExecute(r ApiSearchProtectionRunsRequest) (ProtectionRunResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  ProtectionRunResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.SearchProtectionRuns")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/public/search/protectionRuns"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}
	if r.Uuid == nil {
		return localVarReturnValue, nil, reportError("Uuid is required and must be specified")
	}

	localVarQueryParams.Add("uuid", parameterToString(*r.Uuid, ""))
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		if match, matchErr := regexp.MatchString(`Client.Timeout exceeded`, err.Error()); matchErr == nil && match {
			serName := reflect.TypeOf(r).Name()
			serName = serName[3:len(serName)-7] // remove Api prefix, and Request suffix
			err = GenericOpenAPIError{
				error: "Network timeout when making a request of " + serName +
					". Consider increase the request timeout in the client config." ,
			}
		}
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiSearchProtectionSourcesRequest struct {
	ctx _context.Context
	ApiService *SearchApiService
	Office365ProtectionSourceTypes *[]string
	DepartmentList *[]string
	TitleList *[]string
	CountryList *[]string
	SearchString *string
	ProtectionStatus *[]string
	Environments *[]string
	LastProtectionJobRunStatus *[]int32
	PhysicalServerHostTypes *[]string
	RegisteredSourceUuids *[]string
	StartIndex *int32
	PageCount *int32
}

/*

func (r ApiSearchProtectionSourcesRequest) Office365ProtectionSourceTypes(office365ProtectionSourceTypes []string) ApiSearchProtectionSourcesRequest {
	r.office365ProtectionSourceTypes = &office365ProtectionSourceTypes
	return r
}
func (r ApiSearchProtectionSourcesRequest) DepartmentList(departmentList []string) ApiSearchProtectionSourcesRequest {
	r.departmentList = &departmentList
	return r
}
func (r ApiSearchProtectionSourcesRequest) TitleList(titleList []string) ApiSearchProtectionSourcesRequest {
	r.titleList = &titleList
	return r
}
func (r ApiSearchProtectionSourcesRequest) CountryList(countryList []string) ApiSearchProtectionSourcesRequest {
	r.countryList = &countryList
	return r
}
func (r ApiSearchProtectionSourcesRequest) SearchString(searchString string) ApiSearchProtectionSourcesRequest {
	r.searchString = &searchString
	return r
}
func (r ApiSearchProtectionSourcesRequest) ProtectionStatus(protectionStatus []string) ApiSearchProtectionSourcesRequest {
	r.protectionStatus = &protectionStatus
	return r
}
func (r ApiSearchProtectionSourcesRequest) Environments(environments []string) ApiSearchProtectionSourcesRequest {
	r.environments = &environments
	return r
}
func (r ApiSearchProtectionSourcesRequest) LastProtectionJobRunStatus(lastProtectionJobRunStatus []int32) ApiSearchProtectionSourcesRequest {
	r.lastProtectionJobRunStatus = &lastProtectionJobRunStatus
	return r
}
func (r ApiSearchProtectionSourcesRequest) PhysicalServerHostTypes(physicalServerHostTypes []string) ApiSearchProtectionSourcesRequest {
	r.physicalServerHostTypes = &physicalServerHostTypes
	return r
}
func (r ApiSearchProtectionSourcesRequest) RegisteredSourceUuids(registeredSourceUuids []string) ApiSearchProtectionSourcesRequest {
	r.registeredSourceUuids = &registeredSourceUuids
	return r
}
func (r ApiSearchProtectionSourcesRequest) StartIndex(startIndex int32) ApiSearchProtectionSourcesRequest {
	r.startIndex = &startIndex
	return r
}
func (r ApiSearchProtectionSourcesRequest) PageCount(pageCount int32) ApiSearchProtectionSourcesRequest {
	r.pageCount = &pageCount
	return r
}
*/

/*
func (r ApiSearchProtectionSourcesRequest) Execute() ([]ProtectionSourceResponse, *_nethttp.Response, error) {
	return r.ApiService.SearchProtectionSourcesExecute(r)
}

 * SearchProtectionSources Performs search on all the objects which are registered to a cluster.
 * Returns list of all the objects along with the protection status information.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSearchProtectionSourcesRequest
 
func (a *SearchApiService) SearchProtectionSources(ctx _context.Context) ApiSearchProtectionSourcesRequest {
	return ApiSearchProtectionSourcesRequest{
		ApiService: a,
		ctx: ctx,
	}
}
*/

func (a *SearchApiService) SearchProtectionSources(r ApiSearchProtectionSourcesRequest) ([]ProtectionSourceResponse, *_nethttp.Response, error) {
	if reflect.TypeOf(*a).Name() != "AccessTokensApiService" {
		token, err := GetTokenHelper(a.client)

		if err != nil {
			return []ProtectionSourceResponse{}, nil, GenericOpenAPIError{
				error: err.Error(),
			}
		}

		r.ctx = _context.WithValue(_context.Background(), ContextAPIKeys, map[string]APIKey{"TokenHeader": {Key: token, Prefix: "Bearer"}})
	} else {
		r.ctx = _context.Background()
	}
	r.ApiService = a

	return r.ApiService.SearchProtectionSourcesExecute(r)
}


/*
 * Execute executes the request
 * @return []ProtectionSourceResponse
 */
func (a *SearchApiService) SearchProtectionSourcesExecute(r ApiSearchProtectionSourcesRequest) ([]ProtectionSourceResponse, *_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
		localVarReturnValue  []ProtectionSourceResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SearchApiService.SearchProtectionSources")
	if err != nil {
		return localVarReturnValue, nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/public/search/protectionSources"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.Office365ProtectionSourceTypes != nil {
		localVarQueryParams.Add("office365ProtectionSourceTypes", parameterToString(*r.Office365ProtectionSourceTypes, "csv"))
	}
	if r.DepartmentList != nil {
		localVarQueryParams.Add("departmentList", parameterToString(*r.DepartmentList, "csv"))
	}
	if r.TitleList != nil {
		localVarQueryParams.Add("titleList", parameterToString(*r.TitleList, "csv"))
	}
	if r.CountryList != nil {
		localVarQueryParams.Add("countryList", parameterToString(*r.CountryList, "csv"))
	}
	if r.SearchString != nil {
		localVarQueryParams.Add("searchString", parameterToString(*r.SearchString, ""))
	}
	if r.ProtectionStatus != nil {
		localVarQueryParams.Add("protectionStatus", parameterToString(*r.ProtectionStatus, "csv"))
	}
	if r.Environments != nil {
		localVarQueryParams.Add("environments", parameterToString(*r.Environments, "csv"))
	}
	if r.LastProtectionJobRunStatus != nil {
		localVarQueryParams.Add("lastProtectionJobRunStatus", parameterToString(*r.LastProtectionJobRunStatus, "csv"))
	}
	if r.PhysicalServerHostTypes != nil {
		localVarQueryParams.Add("physicalServerHostTypes", parameterToString(*r.PhysicalServerHostTypes, "csv"))
	}
	if r.RegisteredSourceUuids != nil {
		localVarQueryParams.Add("registeredSourceUuids", parameterToString(*r.RegisteredSourceUuids, "csv"))
	}
	if r.StartIndex != nil {
		localVarQueryParams.Add("startIndex", parameterToString(*r.StartIndex, ""))
	}
	if r.PageCount != nil {
		localVarQueryParams.Add("pageCount", parameterToString(*r.PageCount, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	if r.ctx != nil {
		// API Key Authentication
		if auth, ok := r.ctx.Value(ContextAPIKeys).(map[string]APIKey); ok {
			if apiKey, ok := auth["TokenHeader"]; ok {
				var key string
				if apiKey.Prefix != "" {
					key = apiKey.Prefix + " " + apiKey.Key
				} else {
					key = apiKey.Key
				}
				localVarHeaderParams["Authorization"] = key
			}
		}
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		if match, matchErr := regexp.MatchString(`Client.Timeout exceeded`, err.Error()); matchErr == nil && match {
			serName := reflect.TypeOf(r).Name()
			serName = serName[3:len(serName)-7] // remove Api prefix, and Request suffix
			err = GenericOpenAPIError{
				error: "Network timeout when making a request of " + serName +
					". Consider increase the request timeout in the client config." ,
			}
		}
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = _ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
			var v RequestError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
			newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
