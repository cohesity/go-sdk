/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// QuotaAndUsageInView Specifies the usage and quota information for a specific view.
type QuotaAndUsageInView struct {
	Quota *QuotaPolicy `json:"quota,omitempty"`
	// Usage in bytes of this user in this view.
	UsageBytes NullableInt64 `json:"usageBytes,omitempty"`
	// The usage and quota policy information of this user for this view.
	ViewId NullableInt64 `json:"viewId,omitempty"`
	// View name.
	ViewName NullableString `json:"viewName,omitempty"`
}

// NewQuotaAndUsageInView instantiates a new QuotaAndUsageInView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuotaAndUsageInView() *QuotaAndUsageInView {
	this := QuotaAndUsageInView{}
	return &this
}

// NewQuotaAndUsageInViewWithDefaults instantiates a new QuotaAndUsageInView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuotaAndUsageInViewWithDefaults() *QuotaAndUsageInView {
	this := QuotaAndUsageInView{}
	return &this
}

// GetQuota returns the Quota field value if set, zero value otherwise.
func (o *QuotaAndUsageInView) GetQuota() QuotaPolicy {
	if o == nil || o.Quota == nil {
		var ret QuotaPolicy
		return ret
	}
	return *o.Quota
}

// GetQuotaOk returns a tuple with the Quota field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuotaAndUsageInView) GetQuotaOk() (*QuotaPolicy, bool) {
	if o == nil || o.Quota == nil {
		return nil, false
	}
	return o.Quota, true
}

// HasQuota returns a boolean if a field has been set.
func (o *QuotaAndUsageInView) HasQuota() bool {
	if o != nil && o.Quota != nil {
		return true
	}

	return false
}

// SetQuota gets a reference to the given QuotaPolicy and assigns it to the Quota field.
func (o *QuotaAndUsageInView) SetQuota(v QuotaPolicy) {
	o.Quota = &v
}

// GetUsageBytes returns the UsageBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuotaAndUsageInView) GetUsageBytes() int64 {
	if o == nil || o.UsageBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UsageBytes.Get()
}

// GetUsageBytesOk returns a tuple with the UsageBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuotaAndUsageInView) GetUsageBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsageBytes.Get(), o.UsageBytes.IsSet()
}

// HasUsageBytes returns a boolean if a field has been set.
func (o *QuotaAndUsageInView) HasUsageBytes() bool {
	if o != nil && o.UsageBytes.IsSet() {
		return true
	}

	return false
}

// SetUsageBytes gets a reference to the given NullableInt64 and assigns it to the UsageBytes field.
func (o *QuotaAndUsageInView) SetUsageBytes(v int64) {
	o.UsageBytes.Set(&v)
}
// SetUsageBytesNil sets the value for UsageBytes to be an explicit nil
func (o *QuotaAndUsageInView) SetUsageBytesNil() {
	o.UsageBytes.Set(nil)
}

// UnsetUsageBytes ensures that no value is present for UsageBytes, not even an explicit nil
func (o *QuotaAndUsageInView) UnsetUsageBytes() {
	o.UsageBytes.Unset()
}

// GetViewId returns the ViewId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuotaAndUsageInView) GetViewId() int64 {
	if o == nil || o.ViewId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewId.Get()
}

// GetViewIdOk returns a tuple with the ViewId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuotaAndUsageInView) GetViewIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewId.Get(), o.ViewId.IsSet()
}

// HasViewId returns a boolean if a field has been set.
func (o *QuotaAndUsageInView) HasViewId() bool {
	if o != nil && o.ViewId.IsSet() {
		return true
	}

	return false
}

// SetViewId gets a reference to the given NullableInt64 and assigns it to the ViewId field.
func (o *QuotaAndUsageInView) SetViewId(v int64) {
	o.ViewId.Set(&v)
}
// SetViewIdNil sets the value for ViewId to be an explicit nil
func (o *QuotaAndUsageInView) SetViewIdNil() {
	o.ViewId.Set(nil)
}

// UnsetViewId ensures that no value is present for ViewId, not even an explicit nil
func (o *QuotaAndUsageInView) UnsetViewId() {
	o.ViewId.Unset()
}

// GetViewName returns the ViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuotaAndUsageInView) GetViewName() string {
	if o == nil || o.ViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ViewName.Get()
}

// GetViewNameOk returns a tuple with the ViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuotaAndUsageInView) GetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewName.Get(), o.ViewName.IsSet()
}

// HasViewName returns a boolean if a field has been set.
func (o *QuotaAndUsageInView) HasViewName() bool {
	if o != nil && o.ViewName.IsSet() {
		return true
	}

	return false
}

// SetViewName gets a reference to the given NullableString and assigns it to the ViewName field.
func (o *QuotaAndUsageInView) SetViewName(v string) {
	o.ViewName.Set(&v)
}
// SetViewNameNil sets the value for ViewName to be an explicit nil
func (o *QuotaAndUsageInView) SetViewNameNil() {
	o.ViewName.Set(nil)
}

// UnsetViewName ensures that no value is present for ViewName, not even an explicit nil
func (o *QuotaAndUsageInView) UnsetViewName() {
	o.ViewName.Unset()
}

func (o QuotaAndUsageInView) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Quota != nil {
		toSerialize["quota"] = o.Quota
	}
	if o.UsageBytes.IsSet() {
		toSerialize["usageBytes"] = o.UsageBytes.Get()
	}
	if o.ViewId.IsSet() {
		toSerialize["viewId"] = o.ViewId.Get()
	}
	if o.ViewName.IsSet() {
		toSerialize["viewName"] = o.ViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableQuotaAndUsageInView struct {
	value *QuotaAndUsageInView
	isSet bool
}

func (v NullableQuotaAndUsageInView) Get() *QuotaAndUsageInView {
	return v.value
}

func (v *NullableQuotaAndUsageInView) Set(val *QuotaAndUsageInView) {
	v.value = val
	v.isSet = true
}

func (v NullableQuotaAndUsageInView) IsSet() bool {
	return v.isSet
}

func (v *NullableQuotaAndUsageInView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuotaAndUsageInView(val *QuotaAndUsageInView) *NullableQuotaAndUsageInView {
	return &NullableQuotaAndUsageInView{value: val, isSet: true}
}

func (v NullableQuotaAndUsageInView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuotaAndUsageInView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


