/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NoSqlRestoreObject struct for NoSqlRestoreObject
type NoSqlRestoreObject struct {
	// Key-Value pair for properties to apply on restore object. Ex. Compaction for cassandra or ShardKeyJson for Mongo.
	ObjectRestorePropertiesMap []NoSqlRestoreObjectObjectRestorePropertiesMapEntry `json:"objectRestorePropertiesMap,omitempty"`
	// Uuid of the object to be restored.
	ObjectUuid NullableString `json:"objectUuid,omitempty"`
	// The new name of the object after restore.
	Rename NullableString `json:"rename,omitempty"`
}

// NewNoSqlRestoreObject instantiates a new NoSqlRestoreObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNoSqlRestoreObject() *NoSqlRestoreObject {
	this := NoSqlRestoreObject{}
	return &this
}

// NewNoSqlRestoreObjectWithDefaults instantiates a new NoSqlRestoreObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNoSqlRestoreObjectWithDefaults() *NoSqlRestoreObject {
	this := NoSqlRestoreObject{}
	return &this
}

// GetObjectRestorePropertiesMap returns the ObjectRestorePropertiesMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlRestoreObject) GetObjectRestorePropertiesMap() []NoSqlRestoreObjectObjectRestorePropertiesMapEntry {
	if o == nil  {
		var ret []NoSqlRestoreObjectObjectRestorePropertiesMapEntry
		return ret
	}
	return o.ObjectRestorePropertiesMap
}

// GetObjectRestorePropertiesMapOk returns a tuple with the ObjectRestorePropertiesMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlRestoreObject) GetObjectRestorePropertiesMapOk() (*[]NoSqlRestoreObjectObjectRestorePropertiesMapEntry, bool) {
	if o == nil || o.ObjectRestorePropertiesMap == nil {
		return nil, false
	}
	return &o.ObjectRestorePropertiesMap, true
}

// HasObjectRestorePropertiesMap returns a boolean if a field has been set.
func (o *NoSqlRestoreObject) HasObjectRestorePropertiesMap() bool {
	if o != nil && o.ObjectRestorePropertiesMap != nil {
		return true
	}

	return false
}

// SetObjectRestorePropertiesMap gets a reference to the given []NoSqlRestoreObjectObjectRestorePropertiesMapEntry and assigns it to the ObjectRestorePropertiesMap field.
func (o *NoSqlRestoreObject) SetObjectRestorePropertiesMap(v []NoSqlRestoreObjectObjectRestorePropertiesMapEntry) {
	o.ObjectRestorePropertiesMap = v
}

// GetObjectUuid returns the ObjectUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlRestoreObject) GetObjectUuid() string {
	if o == nil || o.ObjectUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.ObjectUuid.Get()
}

// GetObjectUuidOk returns a tuple with the ObjectUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlRestoreObject) GetObjectUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ObjectUuid.Get(), o.ObjectUuid.IsSet()
}

// HasObjectUuid returns a boolean if a field has been set.
func (o *NoSqlRestoreObject) HasObjectUuid() bool {
	if o != nil && o.ObjectUuid.IsSet() {
		return true
	}

	return false
}

// SetObjectUuid gets a reference to the given NullableString and assigns it to the ObjectUuid field.
func (o *NoSqlRestoreObject) SetObjectUuid(v string) {
	o.ObjectUuid.Set(&v)
}
// SetObjectUuidNil sets the value for ObjectUuid to be an explicit nil
func (o *NoSqlRestoreObject) SetObjectUuidNil() {
	o.ObjectUuid.Set(nil)
}

// UnsetObjectUuid ensures that no value is present for ObjectUuid, not even an explicit nil
func (o *NoSqlRestoreObject) UnsetObjectUuid() {
	o.ObjectUuid.Unset()
}

// GetRename returns the Rename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NoSqlRestoreObject) GetRename() string {
	if o == nil || o.Rename.Get() == nil {
		var ret string
		return ret
	}
	return *o.Rename.Get()
}

// GetRenameOk returns a tuple with the Rename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NoSqlRestoreObject) GetRenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Rename.Get(), o.Rename.IsSet()
}

// HasRename returns a boolean if a field has been set.
func (o *NoSqlRestoreObject) HasRename() bool {
	if o != nil && o.Rename.IsSet() {
		return true
	}

	return false
}

// SetRename gets a reference to the given NullableString and assigns it to the Rename field.
func (o *NoSqlRestoreObject) SetRename(v string) {
	o.Rename.Set(&v)
}
// SetRenameNil sets the value for Rename to be an explicit nil
func (o *NoSqlRestoreObject) SetRenameNil() {
	o.Rename.Set(nil)
}

// UnsetRename ensures that no value is present for Rename, not even an explicit nil
func (o *NoSqlRestoreObject) UnsetRename() {
	o.Rename.Unset()
}

func (o NoSqlRestoreObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ObjectRestorePropertiesMap != nil {
		toSerialize["objectRestorePropertiesMap"] = o.ObjectRestorePropertiesMap
	}
	if o.ObjectUuid.IsSet() {
		toSerialize["objectUuid"] = o.ObjectUuid.Get()
	}
	if o.Rename.IsSet() {
		toSerialize["rename"] = o.Rename.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNoSqlRestoreObject struct {
	value *NoSqlRestoreObject
	isSet bool
}

func (v NullableNoSqlRestoreObject) Get() *NoSqlRestoreObject {
	return v.value
}

func (v *NullableNoSqlRestoreObject) Set(val *NoSqlRestoreObject) {
	v.value = val
	v.isSet = true
}

func (v NullableNoSqlRestoreObject) IsSet() bool {
	return v.isSet
}

func (v *NullableNoSqlRestoreObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNoSqlRestoreObject(val *NoSqlRestoreObject) *NullableNoSqlRestoreObject {
	return &NullableNoSqlRestoreObject{value: val, isSet: true}
}

func (v NullableNoSqlRestoreObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNoSqlRestoreObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


