/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VaultBandwidthLimits VaultBandwidthLimits represents the network bandwidth limits while uploading/downloading data to/from the external media.
type VaultBandwidthLimits struct {
	Download *BandwidthLimit `json:"download,omitempty"`
	Upload *BandwidthLimit `json:"upload,omitempty"`
}

// NewVaultBandwidthLimits instantiates a new VaultBandwidthLimits object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVaultBandwidthLimits() *VaultBandwidthLimits {
	this := VaultBandwidthLimits{}
	return &this
}

// NewVaultBandwidthLimitsWithDefaults instantiates a new VaultBandwidthLimits object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVaultBandwidthLimitsWithDefaults() *VaultBandwidthLimits {
	this := VaultBandwidthLimits{}
	return &this
}

// GetDownload returns the Download field value if set, zero value otherwise.
func (o *VaultBandwidthLimits) GetDownload() BandwidthLimit {
	if o == nil || o.Download == nil {
		var ret BandwidthLimit
		return ret
	}
	return *o.Download
}

// GetDownloadOk returns a tuple with the Download field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultBandwidthLimits) GetDownloadOk() (*BandwidthLimit, bool) {
	if o == nil || o.Download == nil {
		return nil, false
	}
	return o.Download, true
}

// HasDownload returns a boolean if a field has been set.
func (o *VaultBandwidthLimits) HasDownload() bool {
	if o != nil && o.Download != nil {
		return true
	}

	return false
}

// SetDownload gets a reference to the given BandwidthLimit and assigns it to the Download field.
func (o *VaultBandwidthLimits) SetDownload(v BandwidthLimit) {
	o.Download = &v
}

// GetUpload returns the Upload field value if set, zero value otherwise.
func (o *VaultBandwidthLimits) GetUpload() BandwidthLimit {
	if o == nil || o.Upload == nil {
		var ret BandwidthLimit
		return ret
	}
	return *o.Upload
}

// GetUploadOk returns a tuple with the Upload field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VaultBandwidthLimits) GetUploadOk() (*BandwidthLimit, bool) {
	if o == nil || o.Upload == nil {
		return nil, false
	}
	return o.Upload, true
}

// HasUpload returns a boolean if a field has been set.
func (o *VaultBandwidthLimits) HasUpload() bool {
	if o != nil && o.Upload != nil {
		return true
	}

	return false
}

// SetUpload gets a reference to the given BandwidthLimit and assigns it to the Upload field.
func (o *VaultBandwidthLimits) SetUpload(v BandwidthLimit) {
	o.Upload = &v
}

func (o VaultBandwidthLimits) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Download != nil {
		toSerialize["download"] = o.Download
	}
	if o.Upload != nil {
		toSerialize["upload"] = o.Upload
	}
	return json.Marshal(toSerialize)
}

type NullableVaultBandwidthLimits struct {
	value *VaultBandwidthLimits
	isSet bool
}

func (v NullableVaultBandwidthLimits) Get() *VaultBandwidthLimits {
	return v.value
}

func (v *NullableVaultBandwidthLimits) Set(val *VaultBandwidthLimits) {
	v.value = val
	v.isSet = true
}

func (v NullableVaultBandwidthLimits) IsSet() bool {
	return v.isSet
}

func (v *NullableVaultBandwidthLimits) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVaultBandwidthLimits(val *VaultBandwidthLimits) *NullableVaultBandwidthLimits {
	return &NullableVaultBandwidthLimits{value: val, isSet: true}
}

func (v NullableVaultBandwidthLimits) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVaultBandwidthLimits) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


