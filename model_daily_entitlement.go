/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DailyEntitlement struct for DailyEntitlement
type DailyEntitlement struct {
	DailyEntitlement []int64 `json:"dailyEntitlement,omitempty"`
	FeatureName NullableString `json:"featureName,omitempty"`
}

// NewDailyEntitlement instantiates a new DailyEntitlement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDailyEntitlement() *DailyEntitlement {
	this := DailyEntitlement{}
	return &this
}

// NewDailyEntitlementWithDefaults instantiates a new DailyEntitlement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDailyEntitlementWithDefaults() *DailyEntitlement {
	this := DailyEntitlement{}
	return &this
}

// GetDailyEntitlement returns the DailyEntitlement field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DailyEntitlement) GetDailyEntitlement() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.DailyEntitlement
}

// GetDailyEntitlementOk returns a tuple with the DailyEntitlement field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DailyEntitlement) GetDailyEntitlementOk() (*[]int64, bool) {
	if o == nil || o.DailyEntitlement == nil {
		return nil, false
	}
	return &o.DailyEntitlement, true
}

// HasDailyEntitlement returns a boolean if a field has been set.
func (o *DailyEntitlement) HasDailyEntitlement() bool {
	if o != nil && o.DailyEntitlement != nil {
		return true
	}

	return false
}

// SetDailyEntitlement gets a reference to the given []int64 and assigns it to the DailyEntitlement field.
func (o *DailyEntitlement) SetDailyEntitlement(v []int64) {
	o.DailyEntitlement = v
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DailyEntitlement) GetFeatureName() string {
	if o == nil || o.FeatureName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FeatureName.Get()
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DailyEntitlement) GetFeatureNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FeatureName.Get(), o.FeatureName.IsSet()
}

// HasFeatureName returns a boolean if a field has been set.
func (o *DailyEntitlement) HasFeatureName() bool {
	if o != nil && o.FeatureName.IsSet() {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given NullableString and assigns it to the FeatureName field.
func (o *DailyEntitlement) SetFeatureName(v string) {
	o.FeatureName.Set(&v)
}
// SetFeatureNameNil sets the value for FeatureName to be an explicit nil
func (o *DailyEntitlement) SetFeatureNameNil() {
	o.FeatureName.Set(nil)
}

// UnsetFeatureName ensures that no value is present for FeatureName, not even an explicit nil
func (o *DailyEntitlement) UnsetFeatureName() {
	o.FeatureName.Unset()
}

func (o DailyEntitlement) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DailyEntitlement != nil {
		toSerialize["dailyEntitlement"] = o.DailyEntitlement
	}
	if o.FeatureName.IsSet() {
		toSerialize["featureName"] = o.FeatureName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDailyEntitlement struct {
	value *DailyEntitlement
	isSet bool
}

func (v NullableDailyEntitlement) Get() *DailyEntitlement {
	return v.value
}

func (v *NullableDailyEntitlement) Set(val *DailyEntitlement) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyEntitlement) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyEntitlement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyEntitlement(val *DailyEntitlement) *NullableDailyEntitlement {
	return &NullableDailyEntitlement{value: val, isSet: true}
}

func (v NullableDailyEntitlement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyEntitlement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


