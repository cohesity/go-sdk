/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// CreateClusterResult Specifies the immediate result of a Cluster creation request. Contains validation results for each node. If the request is valid, it also indicates that the individual node bringup operation is started in the background.
type CreateClusterResult struct {
	// Specifies the ID of the new Cluster.
	ClusterId NullableInt64 `json:"clusterId,omitempty"`
	// Specifies the name of the new Cluster.
	ClusterName NullableString `json:"clusterName,omitempty"`
	// Specifies the software version of the new Cluster.
	ClusterSwVersion NullableString `json:"clusterSwVersion,omitempty"`
	// Specifies the status of the Nodes in the Cluster. All Nodes that are accepted to the Cluster are appended to this list.
	HealthyNodes []NodeStatus `json:"healthyNodes,omitempty"`
	// Specifies the Incarnation ID of the new Cluster.
	IncarnationId NullableInt64 `json:"incarnationId,omitempty"`
	// Specifies an optional message field.
	Message NullableString `json:"message,omitempty"`
	// Specifies the status of the Nodes in the Cluster. All Nodes that are not accepted to the Cluster are appended to this list.
	UnhealthyNodes []NodeStatus `json:"unhealthyNodes,omitempty"`
}

// NewCreateClusterResult instantiates a new CreateClusterResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateClusterResult() *CreateClusterResult {
	this := CreateClusterResult{}
	return &this
}

// NewCreateClusterResultWithDefaults instantiates a new CreateClusterResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateClusterResultWithDefaults() *CreateClusterResult {
	this := CreateClusterResult{}
	return &this
}

// GetClusterId returns the ClusterId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateClusterResult) GetClusterId() int64 {
	if o == nil || o.ClusterId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ClusterId.Get()
}

// GetClusterIdOk returns a tuple with the ClusterId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateClusterResult) GetClusterIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterId.Get(), o.ClusterId.IsSet()
}

// HasClusterId returns a boolean if a field has been set.
func (o *CreateClusterResult) HasClusterId() bool {
	if o != nil && o.ClusterId.IsSet() {
		return true
	}

	return false
}

// SetClusterId gets a reference to the given NullableInt64 and assigns it to the ClusterId field.
func (o *CreateClusterResult) SetClusterId(v int64) {
	o.ClusterId.Set(&v)
}
// SetClusterIdNil sets the value for ClusterId to be an explicit nil
func (o *CreateClusterResult) SetClusterIdNil() {
	o.ClusterId.Set(nil)
}

// UnsetClusterId ensures that no value is present for ClusterId, not even an explicit nil
func (o *CreateClusterResult) UnsetClusterId() {
	o.ClusterId.Unset()
}

// GetClusterName returns the ClusterName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateClusterResult) GetClusterName() string {
	if o == nil || o.ClusterName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterName.Get()
}

// GetClusterNameOk returns a tuple with the ClusterName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateClusterResult) GetClusterNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterName.Get(), o.ClusterName.IsSet()
}

// HasClusterName returns a boolean if a field has been set.
func (o *CreateClusterResult) HasClusterName() bool {
	if o != nil && o.ClusterName.IsSet() {
		return true
	}

	return false
}

// SetClusterName gets a reference to the given NullableString and assigns it to the ClusterName field.
func (o *CreateClusterResult) SetClusterName(v string) {
	o.ClusterName.Set(&v)
}
// SetClusterNameNil sets the value for ClusterName to be an explicit nil
func (o *CreateClusterResult) SetClusterNameNil() {
	o.ClusterName.Set(nil)
}

// UnsetClusterName ensures that no value is present for ClusterName, not even an explicit nil
func (o *CreateClusterResult) UnsetClusterName() {
	o.ClusterName.Unset()
}

// GetClusterSwVersion returns the ClusterSwVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateClusterResult) GetClusterSwVersion() string {
	if o == nil || o.ClusterSwVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterSwVersion.Get()
}

// GetClusterSwVersionOk returns a tuple with the ClusterSwVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateClusterResult) GetClusterSwVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterSwVersion.Get(), o.ClusterSwVersion.IsSet()
}

// HasClusterSwVersion returns a boolean if a field has been set.
func (o *CreateClusterResult) HasClusterSwVersion() bool {
	if o != nil && o.ClusterSwVersion.IsSet() {
		return true
	}

	return false
}

// SetClusterSwVersion gets a reference to the given NullableString and assigns it to the ClusterSwVersion field.
func (o *CreateClusterResult) SetClusterSwVersion(v string) {
	o.ClusterSwVersion.Set(&v)
}
// SetClusterSwVersionNil sets the value for ClusterSwVersion to be an explicit nil
func (o *CreateClusterResult) SetClusterSwVersionNil() {
	o.ClusterSwVersion.Set(nil)
}

// UnsetClusterSwVersion ensures that no value is present for ClusterSwVersion, not even an explicit nil
func (o *CreateClusterResult) UnsetClusterSwVersion() {
	o.ClusterSwVersion.Unset()
}

// GetHealthyNodes returns the HealthyNodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateClusterResult) GetHealthyNodes() []NodeStatus {
	if o == nil  {
		var ret []NodeStatus
		return ret
	}
	return o.HealthyNodes
}

// GetHealthyNodesOk returns a tuple with the HealthyNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateClusterResult) GetHealthyNodesOk() (*[]NodeStatus, bool) {
	if o == nil || o.HealthyNodes == nil {
		return nil, false
	}
	return &o.HealthyNodes, true
}

// HasHealthyNodes returns a boolean if a field has been set.
func (o *CreateClusterResult) HasHealthyNodes() bool {
	if o != nil && o.HealthyNodes != nil {
		return true
	}

	return false
}

// SetHealthyNodes gets a reference to the given []NodeStatus and assigns it to the HealthyNodes field.
func (o *CreateClusterResult) SetHealthyNodes(v []NodeStatus) {
	o.HealthyNodes = v
}

// GetIncarnationId returns the IncarnationId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateClusterResult) GetIncarnationId() int64 {
	if o == nil || o.IncarnationId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.IncarnationId.Get()
}

// GetIncarnationIdOk returns a tuple with the IncarnationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateClusterResult) GetIncarnationIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncarnationId.Get(), o.IncarnationId.IsSet()
}

// HasIncarnationId returns a boolean if a field has been set.
func (o *CreateClusterResult) HasIncarnationId() bool {
	if o != nil && o.IncarnationId.IsSet() {
		return true
	}

	return false
}

// SetIncarnationId gets a reference to the given NullableInt64 and assigns it to the IncarnationId field.
func (o *CreateClusterResult) SetIncarnationId(v int64) {
	o.IncarnationId.Set(&v)
}
// SetIncarnationIdNil sets the value for IncarnationId to be an explicit nil
func (o *CreateClusterResult) SetIncarnationIdNil() {
	o.IncarnationId.Set(nil)
}

// UnsetIncarnationId ensures that no value is present for IncarnationId, not even an explicit nil
func (o *CreateClusterResult) UnsetIncarnationId() {
	o.IncarnationId.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateClusterResult) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateClusterResult) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *CreateClusterResult) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *CreateClusterResult) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *CreateClusterResult) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *CreateClusterResult) UnsetMessage() {
	o.Message.Unset()
}

// GetUnhealthyNodes returns the UnhealthyNodes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *CreateClusterResult) GetUnhealthyNodes() []NodeStatus {
	if o == nil  {
		var ret []NodeStatus
		return ret
	}
	return o.UnhealthyNodes
}

// GetUnhealthyNodesOk returns a tuple with the UnhealthyNodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *CreateClusterResult) GetUnhealthyNodesOk() (*[]NodeStatus, bool) {
	if o == nil || o.UnhealthyNodes == nil {
		return nil, false
	}
	return &o.UnhealthyNodes, true
}

// HasUnhealthyNodes returns a boolean if a field has been set.
func (o *CreateClusterResult) HasUnhealthyNodes() bool {
	if o != nil && o.UnhealthyNodes != nil {
		return true
	}

	return false
}

// SetUnhealthyNodes gets a reference to the given []NodeStatus and assigns it to the UnhealthyNodes field.
func (o *CreateClusterResult) SetUnhealthyNodes(v []NodeStatus) {
	o.UnhealthyNodes = v
}

func (o CreateClusterResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterId.IsSet() {
		toSerialize["clusterId"] = o.ClusterId.Get()
	}
	if o.ClusterName.IsSet() {
		toSerialize["clusterName"] = o.ClusterName.Get()
	}
	if o.ClusterSwVersion.IsSet() {
		toSerialize["clusterSwVersion"] = o.ClusterSwVersion.Get()
	}
	if o.HealthyNodes != nil {
		toSerialize["healthyNodes"] = o.HealthyNodes
	}
	if o.IncarnationId.IsSet() {
		toSerialize["incarnationId"] = o.IncarnationId.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.UnhealthyNodes != nil {
		toSerialize["unhealthyNodes"] = o.UnhealthyNodes
	}
	return json.Marshal(toSerialize)
}

type NullableCreateClusterResult struct {
	value *CreateClusterResult
	isSet bool
}

func (v NullableCreateClusterResult) Get() *CreateClusterResult {
	return v.value
}

func (v *NullableCreateClusterResult) Set(val *CreateClusterResult) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateClusterResult) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateClusterResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateClusterResult(val *CreateClusterResult) *NullableCreateClusterResult {
	return &NullableCreateClusterResult{value: val, isSet: true}
}

func (v NullableCreateClusterResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateClusterResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


