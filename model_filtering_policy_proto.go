/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FilteringPolicyProto Proto to encapsulate the filtering policy for backup objects like files or directories. If an object is not matched by any of the 'allow_filters', it will be excluded in the backup. If an object is matched by one of the 'deny_filters', it will always be excluded in the backup. Basically 'deny_filters' overwrite 'allow_filters' if they both match the same object. Currently we only support two kinds of filter: prefix which always starts with '/', or postfix which always starts with '*' (cannot be \"*\" only). We don't support regular expression right now. A concrete example is: Allow filters: \"/\" Deny filters: \"/tmp\", \"*.mp4\" Using such a policy will include everything under the root directory except the /tmp directory and all the mp4 files.
type FilteringPolicyProto struct {
	// List of filters to allow matched objects for backup.
	AllowFilters []string `json:"allowFilters,omitempty"`
	// List of filters to deny matched objects for backup.
	DenyFilters []string `json:"denyFilters,omitempty"`
}

// NewFilteringPolicyProto instantiates a new FilteringPolicyProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFilteringPolicyProto() *FilteringPolicyProto {
	this := FilteringPolicyProto{}
	return &this
}

// NewFilteringPolicyProtoWithDefaults instantiates a new FilteringPolicyProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFilteringPolicyProtoWithDefaults() *FilteringPolicyProto {
	this := FilteringPolicyProto{}
	return &this
}

// GetAllowFilters returns the AllowFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilteringPolicyProto) GetAllowFilters() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.AllowFilters
}

// GetAllowFiltersOk returns a tuple with the AllowFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilteringPolicyProto) GetAllowFiltersOk() (*[]string, bool) {
	if o == nil || o.AllowFilters == nil {
		return nil, false
	}
	return &o.AllowFilters, true
}

// HasAllowFilters returns a boolean if a field has been set.
func (o *FilteringPolicyProto) HasAllowFilters() bool {
	if o != nil && o.AllowFilters != nil {
		return true
	}

	return false
}

// SetAllowFilters gets a reference to the given []string and assigns it to the AllowFilters field.
func (o *FilteringPolicyProto) SetAllowFilters(v []string) {
	o.AllowFilters = v
}

// GetDenyFilters returns the DenyFilters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FilteringPolicyProto) GetDenyFilters() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DenyFilters
}

// GetDenyFiltersOk returns a tuple with the DenyFilters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FilteringPolicyProto) GetDenyFiltersOk() (*[]string, bool) {
	if o == nil || o.DenyFilters == nil {
		return nil, false
	}
	return &o.DenyFilters, true
}

// HasDenyFilters returns a boolean if a field has been set.
func (o *FilteringPolicyProto) HasDenyFilters() bool {
	if o != nil && o.DenyFilters != nil {
		return true
	}

	return false
}

// SetDenyFilters gets a reference to the given []string and assigns it to the DenyFilters field.
func (o *FilteringPolicyProto) SetDenyFilters(v []string) {
	o.DenyFilters = v
}

func (o FilteringPolicyProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowFilters != nil {
		toSerialize["allowFilters"] = o.AllowFilters
	}
	if o.DenyFilters != nil {
		toSerialize["denyFilters"] = o.DenyFilters
	}
	return json.Marshal(toSerialize)
}

type NullableFilteringPolicyProto struct {
	value *FilteringPolicyProto
	isSet bool
}

func (v NullableFilteringPolicyProto) Get() *FilteringPolicyProto {
	return v.value
}

func (v *NullableFilteringPolicyProto) Set(val *FilteringPolicyProto) {
	v.value = val
	v.isSet = true
}

func (v NullableFilteringPolicyProto) IsSet() bool {
	return v.isSet
}

func (v *NullableFilteringPolicyProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFilteringPolicyProto(val *FilteringPolicyProto) *NullableFilteringPolicyProto {
	return &NullableFilteringPolicyProto{value: val, isSet: true}
}

func (v NullableFilteringPolicyProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFilteringPolicyProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


