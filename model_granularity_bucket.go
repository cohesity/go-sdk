/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// GranularityBucket Message that specifies the frequency granularity at which to copy the snapshots from a backup job's runs.
type GranularityBucket struct {
	// The base time period granularity that determines the frequency at which backup run snapshots will be copied.  NOTE: The granularity (in combination with the 'multiplier' field below) that is specified should be such that the frequency of copying snapshots is lower than the frequency of actually creating the snapshots (i.e., lower than the frequency of the backup job runs).
	Granularity NullableInt32 `json:"granularity,omitempty"`
	// A factor to multiply the granularity by. For example, if this is 2 and the granularity is kHour, then snapshots from the first eligible run from every 2 hour period will be copied.
	Multiplier NullableInt32 `json:"multiplier,omitempty"`
}

// NewGranularityBucket instantiates a new GranularityBucket object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGranularityBucket() *GranularityBucket {
	this := GranularityBucket{}
	return &this
}

// NewGranularityBucketWithDefaults instantiates a new GranularityBucket object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGranularityBucketWithDefaults() *GranularityBucket {
	this := GranularityBucket{}
	return &this
}

// GetGranularity returns the Granularity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GranularityBucket) GetGranularity() int32 {
	if o == nil || o.Granularity.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Granularity.Get()
}

// GetGranularityOk returns a tuple with the Granularity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GranularityBucket) GetGranularityOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Granularity.Get(), o.Granularity.IsSet()
}

// HasGranularity returns a boolean if a field has been set.
func (o *GranularityBucket) HasGranularity() bool {
	if o != nil && o.Granularity.IsSet() {
		return true
	}

	return false
}

// SetGranularity gets a reference to the given NullableInt32 and assigns it to the Granularity field.
func (o *GranularityBucket) SetGranularity(v int32) {
	o.Granularity.Set(&v)
}
// SetGranularityNil sets the value for Granularity to be an explicit nil
func (o *GranularityBucket) SetGranularityNil() {
	o.Granularity.Set(nil)
}

// UnsetGranularity ensures that no value is present for Granularity, not even an explicit nil
func (o *GranularityBucket) UnsetGranularity() {
	o.Granularity.Unset()
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *GranularityBucket) GetMultiplier() int32 {
	if o == nil || o.Multiplier.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Multiplier.Get()
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *GranularityBucket) GetMultiplierOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Multiplier.Get(), o.Multiplier.IsSet()
}

// HasMultiplier returns a boolean if a field has been set.
func (o *GranularityBucket) HasMultiplier() bool {
	if o != nil && o.Multiplier.IsSet() {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given NullableInt32 and assigns it to the Multiplier field.
func (o *GranularityBucket) SetMultiplier(v int32) {
	o.Multiplier.Set(&v)
}
// SetMultiplierNil sets the value for Multiplier to be an explicit nil
func (o *GranularityBucket) SetMultiplierNil() {
	o.Multiplier.Set(nil)
}

// UnsetMultiplier ensures that no value is present for Multiplier, not even an explicit nil
func (o *GranularityBucket) UnsetMultiplier() {
	o.Multiplier.Unset()
}

func (o GranularityBucket) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Granularity.IsSet() {
		toSerialize["granularity"] = o.Granularity.Get()
	}
	if o.Multiplier.IsSet() {
		toSerialize["multiplier"] = o.Multiplier.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableGranularityBucket struct {
	value *GranularityBucket
	isSet bool
}

func (v NullableGranularityBucket) Get() *GranularityBucket {
	return v.value
}

func (v *NullableGranularityBucket) Set(val *GranularityBucket) {
	v.value = val
	v.isSet = true
}

func (v NullableGranularityBucket) IsSet() bool {
	return v.isSet
}

func (v *NullableGranularityBucket) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGranularityBucket(val *GranularityBucket) *NullableGranularityBucket {
	return &NullableGranularityBucket{value: val, isSet: true}
}

func (v NullableGranularityBucket) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGranularityBucket) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


