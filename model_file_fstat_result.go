/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FileFstatResult FileFstatResult is the struct to return the result of file Fstats.
type FileFstatResult struct {
	// Cookie is used for paginating results. If ReadVMDirResult is returning partial results, this field will be set. Supplying this cookie will resume listing from where this result left off.
	Cookie NullableInt32 `json:"cookie,omitempty"`
	FstatInfo *FileStatInfo `json:"fstatInfo,omitempty"`
}

// NewFileFstatResult instantiates a new FileFstatResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileFstatResult() *FileFstatResult {
	this := FileFstatResult{}
	return &this
}

// NewFileFstatResultWithDefaults instantiates a new FileFstatResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileFstatResultWithDefaults() *FileFstatResult {
	this := FileFstatResult{}
	return &this
}

// GetCookie returns the Cookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileFstatResult) GetCookie() int32 {
	if o == nil || o.Cookie.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Cookie.Get()
}

// GetCookieOk returns a tuple with the Cookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileFstatResult) GetCookieOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cookie.Get(), o.Cookie.IsSet()
}

// HasCookie returns a boolean if a field has been set.
func (o *FileFstatResult) HasCookie() bool {
	if o != nil && o.Cookie.IsSet() {
		return true
	}

	return false
}

// SetCookie gets a reference to the given NullableInt32 and assigns it to the Cookie field.
func (o *FileFstatResult) SetCookie(v int32) {
	o.Cookie.Set(&v)
}
// SetCookieNil sets the value for Cookie to be an explicit nil
func (o *FileFstatResult) SetCookieNil() {
	o.Cookie.Set(nil)
}

// UnsetCookie ensures that no value is present for Cookie, not even an explicit nil
func (o *FileFstatResult) UnsetCookie() {
	o.Cookie.Unset()
}

// GetFstatInfo returns the FstatInfo field value if set, zero value otherwise.
func (o *FileFstatResult) GetFstatInfo() FileStatInfo {
	if o == nil || o.FstatInfo == nil {
		var ret FileStatInfo
		return ret
	}
	return *o.FstatInfo
}

// GetFstatInfoOk returns a tuple with the FstatInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileFstatResult) GetFstatInfoOk() (*FileStatInfo, bool) {
	if o == nil || o.FstatInfo == nil {
		return nil, false
	}
	return o.FstatInfo, true
}

// HasFstatInfo returns a boolean if a field has been set.
func (o *FileFstatResult) HasFstatInfo() bool {
	if o != nil && o.FstatInfo != nil {
		return true
	}

	return false
}

// SetFstatInfo gets a reference to the given FileStatInfo and assigns it to the FstatInfo field.
func (o *FileFstatResult) SetFstatInfo(v FileStatInfo) {
	o.FstatInfo = &v
}

func (o FileFstatResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cookie.IsSet() {
		toSerialize["cookie"] = o.Cookie.Get()
	}
	if o.FstatInfo != nil {
		toSerialize["fstatInfo"] = o.FstatInfo
	}
	return json.Marshal(toSerialize)
}

type NullableFileFstatResult struct {
	value *FileFstatResult
	isSet bool
}

func (v NullableFileFstatResult) Get() *FileFstatResult {
	return v.value
}

func (v *NullableFileFstatResult) Set(val *FileFstatResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFileFstatResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFileFstatResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileFstatResult(val *FileFstatResult) *NullableFileFstatResult {
	return &NullableFileFstatResult{value: val, isSet: true}
}

func (v NullableFileFstatResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileFstatResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


