/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RestoreTask Specifies information about a Restore Task.
type RestoreTask struct {
	AcropolisParameters *AcropolisRestoreParameters `json:"acropolisParameters,omitempty"`
	ApplicationParameters *ApplicationRestoreParameters `json:"applicationParameters,omitempty"`
	// Specifies the uid of the Restore Task that retrieves objects from an archive. This field is only populated when objects must be retrieved from an archive before being restored. This field is deprecated. deprecated:true
	ArchiveTaskUid NullableUniversalId `json:"archiveTaskUid,omitempty"`
	// Specifies the uids of the Restore Task that retrieves objects from an archive. This field is only populated when objects must be retrieved from an archive before being restored. overrideDescription:true
	ArchiveTaskUids []UniversalId `json:"archiveTaskUids,omitempty"`
	// Specifies whether it is possible to tear down the objects created by the recovery.
	CanTearDown NullableBool `json:"canTearDown,omitempty"`
	// Specifies the View settings used when cloning a View.
	CloneViewParameters NullableUpdateViewParam `json:"cloneViewParameters,omitempty"`
	// Specifies if the Restore Task should continue when some operations on some objects fail. If true, the Cohesity Cluster ignores intermittent errors and restores as many objects as possible.
	ContinueOnError NullableBool `json:"continueOnError,omitempty"`
	// Specifies the datastore where the object's files are recovered to. This field is populated when objects are recovered to a different resource pool or to a different parent source. This field is not populated when objects are recovered to their original datastore locations in the original parent source.
	DatastoreId NullableInt64 `json:"datastoreId,omitempty"`
	DeployVmsToCloud *DeployVmsToCloud `json:"deployVmsToCloud,omitempty"`
	// Specifies the end time of the Restore Task as a Unix epoch Timestamp (in microseconds). This field is only populated if the Restore Task completes.
	EndTimeUsecs NullableInt64 `json:"endTimeUsecs,omitempty"`
	// Specifies the error reported by the Restore Task (if any) after the Task has finished.
	Error NullableRequestError `json:"error,omitempty"`
	// Specifies the full name of a View.
	FullViewName NullableString `json:"fullViewName,omitempty"`
	HypervParameters *HypervRestoreParameters `json:"hypervParameters,omitempty"`
	// Specifies the id of the Restore Task assigned by Cohesity Cluster.
	Id NullableInt64 `json:"id,omitempty"`
	MountVolumesState *MountVolumesState `json:"mountVolumesState,omitempty"`
	// Specifies the name of the Restore Task. This field must be set and must be a unique name.
	Name NullableString `json:"name"`
	// Specify a new registered parent Protection Source. If specified the selected objects are cloned or recovered to this new Protection Source. If not specified, objects are cloned or recovered to the original Protection Source that was managing them.
	NewParentId NullableInt64 `json:"newParentId,omitempty"`
	// Array of Objects.  Specifies a list of Protection Source objects or Protection Job objects (with specified Protection Source objects).
	Objects []RestoreObjectDetails `json:"objects,omitempty"`
	OneDriveParameters *OneDriveRestoreParameters `json:"oneDriveParameters,omitempty"`
	OutlookParameters *OutlookRestoreParameters `json:"outlookParameters,omitempty"`
	PublicFoldersParameters *PublicFoldersRestoreParameters `json:"publicFoldersParameters,omitempty"`
	// Array of Object States.  Specifies the states of all the objects for the 'kRecoverVMs' and 'kCloneVMs' Restore Tasks.
	RestoreObjectState []RestoreObjectState `json:"restoreObjectState,omitempty"`
	SharePointParameters *SharePointRestoreParameters `json:"sharePointParameters,omitempty"`
	// Specifies the start time for the Restore Task as a Unix epoch Timestamp (in microseconds).
	StartTimeUsecs NullableInt64 `json:"startTimeUsecs,omitempty"`
	// Specifies the overall status of the Restore Task. 'kReadyToSchedule' indicates the Restore Task is waiting to be scheduled. 'kProgressMonitorCreated' indicates the progress monitor for the Restore Task has been created. 'kRetrievedFromArchive' indicates that the objects to restore have been retrieved from the specified archive. A Task will only ever transition to this state if a retrieval is necessary. 'kAdmitted' indicates the task has been admitted. After a task has been admitted, its status does not move back to 'kReadyToSchedule' state even if it is rescheduled. 'kInProgress' indicates that the Restore Task is in progress. 'kFinishingProgressMonitor' indicates that the Restore Task is finishing its progress monitoring. 'kFinished' indicates that the Restore Task has finished. The status indicating success or failure is found in the error code that is stored with the Restore Task. 'kInternalViewCreated' indicates that internal view for the task has been created. 'kZipFileRequested' indicates that request has been sent to create zip files for the files to be downloaded. This state is only going to be present for kDownloadFiles Task. 'kCancelled' indicates that task or jb has been cancelled.
	Status NullableString `json:"status,omitempty"`
	// Is true if a new View was created by a 'kCloneVMs' Restore Task. This field is only set for a 'kCloneVMs' Restore Task.
	TargetViewCreated NullableBool `json:"targetViewCreated,omitempty"`
	// Specifies the error message about the tear down operation if it fails.
	TearDownErrorMessage NullableString `json:"tearDownErrorMessage,omitempty"`
	// Specifies the status of the tear down operation. This is only set when the field 'CanTearDown' is set to true. 'kReadyToSchedule' indicates that the task is waiting to be scheduled. 'kAdmitted' indicates that the task has been admitted. 'kFinished' indicates that the task is finished with or without error.
	TearDownStatus NullableString `json:"tearDownStatus,omitempty"`
	// Specifies the type of Restore Task.  'kRecoverVMs' specifies a Restore Task that recovers VMs. 'kCloneVMs' specifies a Restore Task that clones VMs. 'kCloneView' specifies a Restore Task that clones a View. 'kMountVolumes' specifies a Restore Task that mounts volumes. 'kRestoreFiles' specifies a Restore Task that recovers files and folders. 'kRecoverApp' specifies a Restore Task that recovers app. 'kCloneApp' specifies a Restore Task that clone app. 'kRecoverSanVolume' specifies a Restore Task that recovers SAN volumes. 'kConvertAndDeployVMs' specifies a Restore Task that converts and deploy VMs to a target environment. 'kMountFileVolume' specifies a Restore Task that mounts a file volume. 'kSystem' specifies a Restore Task that recovers a system. 'kRecoverVolumes' specifies a Restore Task that recovers volumes via the physical agent. 'kDeployVolumes' specifies a Restore Task that deploys volumes to a target environment. 'kDownloadFiles' specifies a Restore Task that downloads the requested files and folders in zip format. 'kRecoverEmails' specifies a Restore Task that recovers the mailbox/email items. 'kRecoverDisks' specifies a Restore Task that recovers the virtual disks. 'kRecoverNamespaces' specifies a Restore Task that recovers Kubernetes namespaces. 'kCloneVMsToView' specifies a Restore Task that clones VMs into a View.
	Type NullableString `json:"type,omitempty"`
	// Specifies the Cohesity user who requested this Restore Task.
	Username NullableString `json:"username,omitempty"`
	// Specifies the id of the Domain (View Box) where the View is stored.
	ViewBoxId NullableInt64 `json:"viewBoxId,omitempty"`
	VirtualDiskRestoreState *VirtualDiskRecoverTaskState `json:"virtualDiskRestoreState,omitempty"`
	VlanParameters *VlanParameters `json:"vlanParameters,omitempty"`
	VmwareParameters *VmwareRestoreParameters `json:"vmwareParameters,omitempty"`
}

// NewRestoreTask instantiates a new RestoreTask object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRestoreTask(name NullableString) *RestoreTask {
	this := RestoreTask{}
	this.Name = name
	return &this
}

// NewRestoreTaskWithDefaults instantiates a new RestoreTask object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRestoreTaskWithDefaults() *RestoreTask {
	this := RestoreTask{}
	return &this
}

// GetAcropolisParameters returns the AcropolisParameters field value if set, zero value otherwise.
func (o *RestoreTask) GetAcropolisParameters() AcropolisRestoreParameters {
	if o == nil || o.AcropolisParameters == nil {
		var ret AcropolisRestoreParameters
		return ret
	}
	return *o.AcropolisParameters
}

// GetAcropolisParametersOk returns a tuple with the AcropolisParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetAcropolisParametersOk() (*AcropolisRestoreParameters, bool) {
	if o == nil || o.AcropolisParameters == nil {
		return nil, false
	}
	return o.AcropolisParameters, true
}

// HasAcropolisParameters returns a boolean if a field has been set.
func (o *RestoreTask) HasAcropolisParameters() bool {
	if o != nil && o.AcropolisParameters != nil {
		return true
	}

	return false
}

// SetAcropolisParameters gets a reference to the given AcropolisRestoreParameters and assigns it to the AcropolisParameters field.
func (o *RestoreTask) SetAcropolisParameters(v AcropolisRestoreParameters) {
	o.AcropolisParameters = &v
}

// GetApplicationParameters returns the ApplicationParameters field value if set, zero value otherwise.
func (o *RestoreTask) GetApplicationParameters() ApplicationRestoreParameters {
	if o == nil || o.ApplicationParameters == nil {
		var ret ApplicationRestoreParameters
		return ret
	}
	return *o.ApplicationParameters
}

// GetApplicationParametersOk returns a tuple with the ApplicationParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetApplicationParametersOk() (*ApplicationRestoreParameters, bool) {
	if o == nil || o.ApplicationParameters == nil {
		return nil, false
	}
	return o.ApplicationParameters, true
}

// HasApplicationParameters returns a boolean if a field has been set.
func (o *RestoreTask) HasApplicationParameters() bool {
	if o != nil && o.ApplicationParameters != nil {
		return true
	}

	return false
}

// SetApplicationParameters gets a reference to the given ApplicationRestoreParameters and assigns it to the ApplicationParameters field.
func (o *RestoreTask) SetApplicationParameters(v ApplicationRestoreParameters) {
	o.ApplicationParameters = &v
}

// GetArchiveTaskUid returns the ArchiveTaskUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetArchiveTaskUid() UniversalId {
	if o == nil || o.ArchiveTaskUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.ArchiveTaskUid.Get()
}

// GetArchiveTaskUidOk returns a tuple with the ArchiveTaskUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetArchiveTaskUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchiveTaskUid.Get(), o.ArchiveTaskUid.IsSet()
}

// HasArchiveTaskUid returns a boolean if a field has been set.
func (o *RestoreTask) HasArchiveTaskUid() bool {
	if o != nil && o.ArchiveTaskUid.IsSet() {
		return true
	}

	return false
}

// SetArchiveTaskUid gets a reference to the given NullableUniversalId and assigns it to the ArchiveTaskUid field.
func (o *RestoreTask) SetArchiveTaskUid(v UniversalId) {
	o.ArchiveTaskUid.Set(&v)
}
// SetArchiveTaskUidNil sets the value for ArchiveTaskUid to be an explicit nil
func (o *RestoreTask) SetArchiveTaskUidNil() {
	o.ArchiveTaskUid.Set(nil)
}

// UnsetArchiveTaskUid ensures that no value is present for ArchiveTaskUid, not even an explicit nil
func (o *RestoreTask) UnsetArchiveTaskUid() {
	o.ArchiveTaskUid.Unset()
}

// GetArchiveTaskUids returns the ArchiveTaskUids field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetArchiveTaskUids() []UniversalId {
	if o == nil  {
		var ret []UniversalId
		return ret
	}
	return o.ArchiveTaskUids
}

// GetArchiveTaskUidsOk returns a tuple with the ArchiveTaskUids field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetArchiveTaskUidsOk() (*[]UniversalId, bool) {
	if o == nil || o.ArchiveTaskUids == nil {
		return nil, false
	}
	return &o.ArchiveTaskUids, true
}

// HasArchiveTaskUids returns a boolean if a field has been set.
func (o *RestoreTask) HasArchiveTaskUids() bool {
	if o != nil && o.ArchiveTaskUids != nil {
		return true
	}

	return false
}

// SetArchiveTaskUids gets a reference to the given []UniversalId and assigns it to the ArchiveTaskUids field.
func (o *RestoreTask) SetArchiveTaskUids(v []UniversalId) {
	o.ArchiveTaskUids = v
}

// GetCanTearDown returns the CanTearDown field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetCanTearDown() bool {
	if o == nil || o.CanTearDown.Get() == nil {
		var ret bool
		return ret
	}
	return *o.CanTearDown.Get()
}

// GetCanTearDownOk returns a tuple with the CanTearDown field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetCanTearDownOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CanTearDown.Get(), o.CanTearDown.IsSet()
}

// HasCanTearDown returns a boolean if a field has been set.
func (o *RestoreTask) HasCanTearDown() bool {
	if o != nil && o.CanTearDown.IsSet() {
		return true
	}

	return false
}

// SetCanTearDown gets a reference to the given NullableBool and assigns it to the CanTearDown field.
func (o *RestoreTask) SetCanTearDown(v bool) {
	o.CanTearDown.Set(&v)
}
// SetCanTearDownNil sets the value for CanTearDown to be an explicit nil
func (o *RestoreTask) SetCanTearDownNil() {
	o.CanTearDown.Set(nil)
}

// UnsetCanTearDown ensures that no value is present for CanTearDown, not even an explicit nil
func (o *RestoreTask) UnsetCanTearDown() {
	o.CanTearDown.Unset()
}

// GetCloneViewParameters returns the CloneViewParameters field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetCloneViewParameters() UpdateViewParam {
	if o == nil || o.CloneViewParameters.Get() == nil {
		var ret UpdateViewParam
		return ret
	}
	return *o.CloneViewParameters.Get()
}

// GetCloneViewParametersOk returns a tuple with the CloneViewParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetCloneViewParametersOk() (*UpdateViewParam, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CloneViewParameters.Get(), o.CloneViewParameters.IsSet()
}

// HasCloneViewParameters returns a boolean if a field has been set.
func (o *RestoreTask) HasCloneViewParameters() bool {
	if o != nil && o.CloneViewParameters.IsSet() {
		return true
	}

	return false
}

// SetCloneViewParameters gets a reference to the given NullableUpdateViewParam and assigns it to the CloneViewParameters field.
func (o *RestoreTask) SetCloneViewParameters(v UpdateViewParam) {
	o.CloneViewParameters.Set(&v)
}
// SetCloneViewParametersNil sets the value for CloneViewParameters to be an explicit nil
func (o *RestoreTask) SetCloneViewParametersNil() {
	o.CloneViewParameters.Set(nil)
}

// UnsetCloneViewParameters ensures that no value is present for CloneViewParameters, not even an explicit nil
func (o *RestoreTask) UnsetCloneViewParameters() {
	o.CloneViewParameters.Unset()
}

// GetContinueOnError returns the ContinueOnError field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetContinueOnError() bool {
	if o == nil || o.ContinueOnError.Get() == nil {
		var ret bool
		return ret
	}
	return *o.ContinueOnError.Get()
}

// GetContinueOnErrorOk returns a tuple with the ContinueOnError field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetContinueOnErrorOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ContinueOnError.Get(), o.ContinueOnError.IsSet()
}

// HasContinueOnError returns a boolean if a field has been set.
func (o *RestoreTask) HasContinueOnError() bool {
	if o != nil && o.ContinueOnError.IsSet() {
		return true
	}

	return false
}

// SetContinueOnError gets a reference to the given NullableBool and assigns it to the ContinueOnError field.
func (o *RestoreTask) SetContinueOnError(v bool) {
	o.ContinueOnError.Set(&v)
}
// SetContinueOnErrorNil sets the value for ContinueOnError to be an explicit nil
func (o *RestoreTask) SetContinueOnErrorNil() {
	o.ContinueOnError.Set(nil)
}

// UnsetContinueOnError ensures that no value is present for ContinueOnError, not even an explicit nil
func (o *RestoreTask) UnsetContinueOnError() {
	o.ContinueOnError.Unset()
}

// GetDatastoreId returns the DatastoreId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetDatastoreId() int64 {
	if o == nil || o.DatastoreId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DatastoreId.Get()
}

// GetDatastoreIdOk returns a tuple with the DatastoreId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetDatastoreIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatastoreId.Get(), o.DatastoreId.IsSet()
}

// HasDatastoreId returns a boolean if a field has been set.
func (o *RestoreTask) HasDatastoreId() bool {
	if o != nil && o.DatastoreId.IsSet() {
		return true
	}

	return false
}

// SetDatastoreId gets a reference to the given NullableInt64 and assigns it to the DatastoreId field.
func (o *RestoreTask) SetDatastoreId(v int64) {
	o.DatastoreId.Set(&v)
}
// SetDatastoreIdNil sets the value for DatastoreId to be an explicit nil
func (o *RestoreTask) SetDatastoreIdNil() {
	o.DatastoreId.Set(nil)
}

// UnsetDatastoreId ensures that no value is present for DatastoreId, not even an explicit nil
func (o *RestoreTask) UnsetDatastoreId() {
	o.DatastoreId.Unset()
}

// GetDeployVmsToCloud returns the DeployVmsToCloud field value if set, zero value otherwise.
func (o *RestoreTask) GetDeployVmsToCloud() DeployVmsToCloud {
	if o == nil || o.DeployVmsToCloud == nil {
		var ret DeployVmsToCloud
		return ret
	}
	return *o.DeployVmsToCloud
}

// GetDeployVmsToCloudOk returns a tuple with the DeployVmsToCloud field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetDeployVmsToCloudOk() (*DeployVmsToCloud, bool) {
	if o == nil || o.DeployVmsToCloud == nil {
		return nil, false
	}
	return o.DeployVmsToCloud, true
}

// HasDeployVmsToCloud returns a boolean if a field has been set.
func (o *RestoreTask) HasDeployVmsToCloud() bool {
	if o != nil && o.DeployVmsToCloud != nil {
		return true
	}

	return false
}

// SetDeployVmsToCloud gets a reference to the given DeployVmsToCloud and assigns it to the DeployVmsToCloud field.
func (o *RestoreTask) SetDeployVmsToCloud(v DeployVmsToCloud) {
	o.DeployVmsToCloud = &v
}

// GetEndTimeUsecs returns the EndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetEndTimeUsecs() int64 {
	if o == nil || o.EndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.EndTimeUsecs.Get()
}

// GetEndTimeUsecsOk returns a tuple with the EndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EndTimeUsecs.Get(), o.EndTimeUsecs.IsSet()
}

// HasEndTimeUsecs returns a boolean if a field has been set.
func (o *RestoreTask) HasEndTimeUsecs() bool {
	if o != nil && o.EndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the EndTimeUsecs field.
func (o *RestoreTask) SetEndTimeUsecs(v int64) {
	o.EndTimeUsecs.Set(&v)
}
// SetEndTimeUsecsNil sets the value for EndTimeUsecs to be an explicit nil
func (o *RestoreTask) SetEndTimeUsecsNil() {
	o.EndTimeUsecs.Set(nil)
}

// UnsetEndTimeUsecs ensures that no value is present for EndTimeUsecs, not even an explicit nil
func (o *RestoreTask) UnsetEndTimeUsecs() {
	o.EndTimeUsecs.Unset()
}

// GetError returns the Error field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetError() RequestError {
	if o == nil || o.Error.Get() == nil {
		var ret RequestError
		return ret
	}
	return *o.Error.Get()
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetErrorOk() (*RequestError, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Error.Get(), o.Error.IsSet()
}

// HasError returns a boolean if a field has been set.
func (o *RestoreTask) HasError() bool {
	if o != nil && o.Error.IsSet() {
		return true
	}

	return false
}

// SetError gets a reference to the given NullableRequestError and assigns it to the Error field.
func (o *RestoreTask) SetError(v RequestError) {
	o.Error.Set(&v)
}
// SetErrorNil sets the value for Error to be an explicit nil
func (o *RestoreTask) SetErrorNil() {
	o.Error.Set(nil)
}

// UnsetError ensures that no value is present for Error, not even an explicit nil
func (o *RestoreTask) UnsetError() {
	o.Error.Unset()
}

// GetFullViewName returns the FullViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetFullViewName() string {
	if o == nil || o.FullViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FullViewName.Get()
}

// GetFullViewNameOk returns a tuple with the FullViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetFullViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FullViewName.Get(), o.FullViewName.IsSet()
}

// HasFullViewName returns a boolean if a field has been set.
func (o *RestoreTask) HasFullViewName() bool {
	if o != nil && o.FullViewName.IsSet() {
		return true
	}

	return false
}

// SetFullViewName gets a reference to the given NullableString and assigns it to the FullViewName field.
func (o *RestoreTask) SetFullViewName(v string) {
	o.FullViewName.Set(&v)
}
// SetFullViewNameNil sets the value for FullViewName to be an explicit nil
func (o *RestoreTask) SetFullViewNameNil() {
	o.FullViewName.Set(nil)
}

// UnsetFullViewName ensures that no value is present for FullViewName, not even an explicit nil
func (o *RestoreTask) UnsetFullViewName() {
	o.FullViewName.Unset()
}

// GetHypervParameters returns the HypervParameters field value if set, zero value otherwise.
func (o *RestoreTask) GetHypervParameters() HypervRestoreParameters {
	if o == nil || o.HypervParameters == nil {
		var ret HypervRestoreParameters
		return ret
	}
	return *o.HypervParameters
}

// GetHypervParametersOk returns a tuple with the HypervParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetHypervParametersOk() (*HypervRestoreParameters, bool) {
	if o == nil || o.HypervParameters == nil {
		return nil, false
	}
	return o.HypervParameters, true
}

// HasHypervParameters returns a boolean if a field has been set.
func (o *RestoreTask) HasHypervParameters() bool {
	if o != nil && o.HypervParameters != nil {
		return true
	}

	return false
}

// SetHypervParameters gets a reference to the given HypervRestoreParameters and assigns it to the HypervParameters field.
func (o *RestoreTask) SetHypervParameters(v HypervRestoreParameters) {
	o.HypervParameters = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *RestoreTask) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *RestoreTask) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *RestoreTask) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *RestoreTask) UnsetId() {
	o.Id.Unset()
}

// GetMountVolumesState returns the MountVolumesState field value if set, zero value otherwise.
func (o *RestoreTask) GetMountVolumesState() MountVolumesState {
	if o == nil || o.MountVolumesState == nil {
		var ret MountVolumesState
		return ret
	}
	return *o.MountVolumesState
}

// GetMountVolumesStateOk returns a tuple with the MountVolumesState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetMountVolumesStateOk() (*MountVolumesState, bool) {
	if o == nil || o.MountVolumesState == nil {
		return nil, false
	}
	return o.MountVolumesState, true
}

// HasMountVolumesState returns a boolean if a field has been set.
func (o *RestoreTask) HasMountVolumesState() bool {
	if o != nil && o.MountVolumesState != nil {
		return true
	}

	return false
}

// SetMountVolumesState gets a reference to the given MountVolumesState and assigns it to the MountVolumesState field.
func (o *RestoreTask) SetMountVolumesState(v MountVolumesState) {
	o.MountVolumesState = &v
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *RestoreTask) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *RestoreTask) SetName(v string) {
	o.Name.Set(&v)
}

// GetNewParentId returns the NewParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetNewParentId() int64 {
	if o == nil || o.NewParentId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NewParentId.Get()
}

// GetNewParentIdOk returns a tuple with the NewParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetNewParentIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NewParentId.Get(), o.NewParentId.IsSet()
}

// HasNewParentId returns a boolean if a field has been set.
func (o *RestoreTask) HasNewParentId() bool {
	if o != nil && o.NewParentId.IsSet() {
		return true
	}

	return false
}

// SetNewParentId gets a reference to the given NullableInt64 and assigns it to the NewParentId field.
func (o *RestoreTask) SetNewParentId(v int64) {
	o.NewParentId.Set(&v)
}
// SetNewParentIdNil sets the value for NewParentId to be an explicit nil
func (o *RestoreTask) SetNewParentIdNil() {
	o.NewParentId.Set(nil)
}

// UnsetNewParentId ensures that no value is present for NewParentId, not even an explicit nil
func (o *RestoreTask) UnsetNewParentId() {
	o.NewParentId.Unset()
}

// GetObjects returns the Objects field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetObjects() []RestoreObjectDetails {
	if o == nil  {
		var ret []RestoreObjectDetails
		return ret
	}
	return o.Objects
}

// GetObjectsOk returns a tuple with the Objects field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetObjectsOk() (*[]RestoreObjectDetails, bool) {
	if o == nil || o.Objects == nil {
		return nil, false
	}
	return &o.Objects, true
}

// HasObjects returns a boolean if a field has been set.
func (o *RestoreTask) HasObjects() bool {
	if o != nil && o.Objects != nil {
		return true
	}

	return false
}

// SetObjects gets a reference to the given []RestoreObjectDetails and assigns it to the Objects field.
func (o *RestoreTask) SetObjects(v []RestoreObjectDetails) {
	o.Objects = v
}

// GetOneDriveParameters returns the OneDriveParameters field value if set, zero value otherwise.
func (o *RestoreTask) GetOneDriveParameters() OneDriveRestoreParameters {
	if o == nil || o.OneDriveParameters == nil {
		var ret OneDriveRestoreParameters
		return ret
	}
	return *o.OneDriveParameters
}

// GetOneDriveParametersOk returns a tuple with the OneDriveParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetOneDriveParametersOk() (*OneDriveRestoreParameters, bool) {
	if o == nil || o.OneDriveParameters == nil {
		return nil, false
	}
	return o.OneDriveParameters, true
}

// HasOneDriveParameters returns a boolean if a field has been set.
func (o *RestoreTask) HasOneDriveParameters() bool {
	if o != nil && o.OneDriveParameters != nil {
		return true
	}

	return false
}

// SetOneDriveParameters gets a reference to the given OneDriveRestoreParameters and assigns it to the OneDriveParameters field.
func (o *RestoreTask) SetOneDriveParameters(v OneDriveRestoreParameters) {
	o.OneDriveParameters = &v
}

// GetOutlookParameters returns the OutlookParameters field value if set, zero value otherwise.
func (o *RestoreTask) GetOutlookParameters() OutlookRestoreParameters {
	if o == nil || o.OutlookParameters == nil {
		var ret OutlookRestoreParameters
		return ret
	}
	return *o.OutlookParameters
}

// GetOutlookParametersOk returns a tuple with the OutlookParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetOutlookParametersOk() (*OutlookRestoreParameters, bool) {
	if o == nil || o.OutlookParameters == nil {
		return nil, false
	}
	return o.OutlookParameters, true
}

// HasOutlookParameters returns a boolean if a field has been set.
func (o *RestoreTask) HasOutlookParameters() bool {
	if o != nil && o.OutlookParameters != nil {
		return true
	}

	return false
}

// SetOutlookParameters gets a reference to the given OutlookRestoreParameters and assigns it to the OutlookParameters field.
func (o *RestoreTask) SetOutlookParameters(v OutlookRestoreParameters) {
	o.OutlookParameters = &v
}

// GetPublicFoldersParameters returns the PublicFoldersParameters field value if set, zero value otherwise.
func (o *RestoreTask) GetPublicFoldersParameters() PublicFoldersRestoreParameters {
	if o == nil || o.PublicFoldersParameters == nil {
		var ret PublicFoldersRestoreParameters
		return ret
	}
	return *o.PublicFoldersParameters
}

// GetPublicFoldersParametersOk returns a tuple with the PublicFoldersParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetPublicFoldersParametersOk() (*PublicFoldersRestoreParameters, bool) {
	if o == nil || o.PublicFoldersParameters == nil {
		return nil, false
	}
	return o.PublicFoldersParameters, true
}

// HasPublicFoldersParameters returns a boolean if a field has been set.
func (o *RestoreTask) HasPublicFoldersParameters() bool {
	if o != nil && o.PublicFoldersParameters != nil {
		return true
	}

	return false
}

// SetPublicFoldersParameters gets a reference to the given PublicFoldersRestoreParameters and assigns it to the PublicFoldersParameters field.
func (o *RestoreTask) SetPublicFoldersParameters(v PublicFoldersRestoreParameters) {
	o.PublicFoldersParameters = &v
}

// GetRestoreObjectState returns the RestoreObjectState field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetRestoreObjectState() []RestoreObjectState {
	if o == nil  {
		var ret []RestoreObjectState
		return ret
	}
	return o.RestoreObjectState
}

// GetRestoreObjectStateOk returns a tuple with the RestoreObjectState field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetRestoreObjectStateOk() (*[]RestoreObjectState, bool) {
	if o == nil || o.RestoreObjectState == nil {
		return nil, false
	}
	return &o.RestoreObjectState, true
}

// HasRestoreObjectState returns a boolean if a field has been set.
func (o *RestoreTask) HasRestoreObjectState() bool {
	if o != nil && o.RestoreObjectState != nil {
		return true
	}

	return false
}

// SetRestoreObjectState gets a reference to the given []RestoreObjectState and assigns it to the RestoreObjectState field.
func (o *RestoreTask) SetRestoreObjectState(v []RestoreObjectState) {
	o.RestoreObjectState = v
}

// GetSharePointParameters returns the SharePointParameters field value if set, zero value otherwise.
func (o *RestoreTask) GetSharePointParameters() SharePointRestoreParameters {
	if o == nil || o.SharePointParameters == nil {
		var ret SharePointRestoreParameters
		return ret
	}
	return *o.SharePointParameters
}

// GetSharePointParametersOk returns a tuple with the SharePointParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetSharePointParametersOk() (*SharePointRestoreParameters, bool) {
	if o == nil || o.SharePointParameters == nil {
		return nil, false
	}
	return o.SharePointParameters, true
}

// HasSharePointParameters returns a boolean if a field has been set.
func (o *RestoreTask) HasSharePointParameters() bool {
	if o != nil && o.SharePointParameters != nil {
		return true
	}

	return false
}

// SetSharePointParameters gets a reference to the given SharePointRestoreParameters and assigns it to the SharePointParameters field.
func (o *RestoreTask) SetSharePointParameters(v SharePointRestoreParameters) {
	o.SharePointParameters = &v
}

// GetStartTimeUsecs returns the StartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetStartTimeUsecs() int64 {
	if o == nil || o.StartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartTimeUsecs.Get()
}

// GetStartTimeUsecsOk returns a tuple with the StartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartTimeUsecs.Get(), o.StartTimeUsecs.IsSet()
}

// HasStartTimeUsecs returns a boolean if a field has been set.
func (o *RestoreTask) HasStartTimeUsecs() bool {
	if o != nil && o.StartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartTimeUsecs field.
func (o *RestoreTask) SetStartTimeUsecs(v int64) {
	o.StartTimeUsecs.Set(&v)
}
// SetStartTimeUsecsNil sets the value for StartTimeUsecs to be an explicit nil
func (o *RestoreTask) SetStartTimeUsecsNil() {
	o.StartTimeUsecs.Set(nil)
}

// UnsetStartTimeUsecs ensures that no value is present for StartTimeUsecs, not even an explicit nil
func (o *RestoreTask) UnsetStartTimeUsecs() {
	o.StartTimeUsecs.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *RestoreTask) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *RestoreTask) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *RestoreTask) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *RestoreTask) UnsetStatus() {
	o.Status.Unset()
}

// GetTargetViewCreated returns the TargetViewCreated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetTargetViewCreated() bool {
	if o == nil || o.TargetViewCreated.Get() == nil {
		var ret bool
		return ret
	}
	return *o.TargetViewCreated.Get()
}

// GetTargetViewCreatedOk returns a tuple with the TargetViewCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetTargetViewCreatedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetViewCreated.Get(), o.TargetViewCreated.IsSet()
}

// HasTargetViewCreated returns a boolean if a field has been set.
func (o *RestoreTask) HasTargetViewCreated() bool {
	if o != nil && o.TargetViewCreated.IsSet() {
		return true
	}

	return false
}

// SetTargetViewCreated gets a reference to the given NullableBool and assigns it to the TargetViewCreated field.
func (o *RestoreTask) SetTargetViewCreated(v bool) {
	o.TargetViewCreated.Set(&v)
}
// SetTargetViewCreatedNil sets the value for TargetViewCreated to be an explicit nil
func (o *RestoreTask) SetTargetViewCreatedNil() {
	o.TargetViewCreated.Set(nil)
}

// UnsetTargetViewCreated ensures that no value is present for TargetViewCreated, not even an explicit nil
func (o *RestoreTask) UnsetTargetViewCreated() {
	o.TargetViewCreated.Unset()
}

// GetTearDownErrorMessage returns the TearDownErrorMessage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetTearDownErrorMessage() string {
	if o == nil || o.TearDownErrorMessage.Get() == nil {
		var ret string
		return ret
	}
	return *o.TearDownErrorMessage.Get()
}

// GetTearDownErrorMessageOk returns a tuple with the TearDownErrorMessage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetTearDownErrorMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TearDownErrorMessage.Get(), o.TearDownErrorMessage.IsSet()
}

// HasTearDownErrorMessage returns a boolean if a field has been set.
func (o *RestoreTask) HasTearDownErrorMessage() bool {
	if o != nil && o.TearDownErrorMessage.IsSet() {
		return true
	}

	return false
}

// SetTearDownErrorMessage gets a reference to the given NullableString and assigns it to the TearDownErrorMessage field.
func (o *RestoreTask) SetTearDownErrorMessage(v string) {
	o.TearDownErrorMessage.Set(&v)
}
// SetTearDownErrorMessageNil sets the value for TearDownErrorMessage to be an explicit nil
func (o *RestoreTask) SetTearDownErrorMessageNil() {
	o.TearDownErrorMessage.Set(nil)
}

// UnsetTearDownErrorMessage ensures that no value is present for TearDownErrorMessage, not even an explicit nil
func (o *RestoreTask) UnsetTearDownErrorMessage() {
	o.TearDownErrorMessage.Unset()
}

// GetTearDownStatus returns the TearDownStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetTearDownStatus() string {
	if o == nil || o.TearDownStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.TearDownStatus.Get()
}

// GetTearDownStatusOk returns a tuple with the TearDownStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetTearDownStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TearDownStatus.Get(), o.TearDownStatus.IsSet()
}

// HasTearDownStatus returns a boolean if a field has been set.
func (o *RestoreTask) HasTearDownStatus() bool {
	if o != nil && o.TearDownStatus.IsSet() {
		return true
	}

	return false
}

// SetTearDownStatus gets a reference to the given NullableString and assigns it to the TearDownStatus field.
func (o *RestoreTask) SetTearDownStatus(v string) {
	o.TearDownStatus.Set(&v)
}
// SetTearDownStatusNil sets the value for TearDownStatus to be an explicit nil
func (o *RestoreTask) SetTearDownStatusNil() {
	o.TearDownStatus.Set(nil)
}

// UnsetTearDownStatus ensures that no value is present for TearDownStatus, not even an explicit nil
func (o *RestoreTask) UnsetTearDownStatus() {
	o.TearDownStatus.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *RestoreTask) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *RestoreTask) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *RestoreTask) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *RestoreTask) UnsetType() {
	o.Type.Unset()
}

// GetUsername returns the Username field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetUsername() string {
	if o == nil || o.Username.Get() == nil {
		var ret string
		return ret
	}
	return *o.Username.Get()
}

// GetUsernameOk returns a tuple with the Username field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetUsernameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Username.Get(), o.Username.IsSet()
}

// HasUsername returns a boolean if a field has been set.
func (o *RestoreTask) HasUsername() bool {
	if o != nil && o.Username.IsSet() {
		return true
	}

	return false
}

// SetUsername gets a reference to the given NullableString and assigns it to the Username field.
func (o *RestoreTask) SetUsername(v string) {
	o.Username.Set(&v)
}
// SetUsernameNil sets the value for Username to be an explicit nil
func (o *RestoreTask) SetUsernameNil() {
	o.Username.Set(nil)
}

// UnsetUsername ensures that no value is present for Username, not even an explicit nil
func (o *RestoreTask) UnsetUsername() {
	o.Username.Unset()
}

// GetViewBoxId returns the ViewBoxId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RestoreTask) GetViewBoxId() int64 {
	if o == nil || o.ViewBoxId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewBoxId.Get()
}

// GetViewBoxIdOk returns a tuple with the ViewBoxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RestoreTask) GetViewBoxIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewBoxId.Get(), o.ViewBoxId.IsSet()
}

// HasViewBoxId returns a boolean if a field has been set.
func (o *RestoreTask) HasViewBoxId() bool {
	if o != nil && o.ViewBoxId.IsSet() {
		return true
	}

	return false
}

// SetViewBoxId gets a reference to the given NullableInt64 and assigns it to the ViewBoxId field.
func (o *RestoreTask) SetViewBoxId(v int64) {
	o.ViewBoxId.Set(&v)
}
// SetViewBoxIdNil sets the value for ViewBoxId to be an explicit nil
func (o *RestoreTask) SetViewBoxIdNil() {
	o.ViewBoxId.Set(nil)
}

// UnsetViewBoxId ensures that no value is present for ViewBoxId, not even an explicit nil
func (o *RestoreTask) UnsetViewBoxId() {
	o.ViewBoxId.Unset()
}

// GetVirtualDiskRestoreState returns the VirtualDiskRestoreState field value if set, zero value otherwise.
func (o *RestoreTask) GetVirtualDiskRestoreState() VirtualDiskRecoverTaskState {
	if o == nil || o.VirtualDiskRestoreState == nil {
		var ret VirtualDiskRecoverTaskState
		return ret
	}
	return *o.VirtualDiskRestoreState
}

// GetVirtualDiskRestoreStateOk returns a tuple with the VirtualDiskRestoreState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetVirtualDiskRestoreStateOk() (*VirtualDiskRecoverTaskState, bool) {
	if o == nil || o.VirtualDiskRestoreState == nil {
		return nil, false
	}
	return o.VirtualDiskRestoreState, true
}

// HasVirtualDiskRestoreState returns a boolean if a field has been set.
func (o *RestoreTask) HasVirtualDiskRestoreState() bool {
	if o != nil && o.VirtualDiskRestoreState != nil {
		return true
	}

	return false
}

// SetVirtualDiskRestoreState gets a reference to the given VirtualDiskRecoverTaskState and assigns it to the VirtualDiskRestoreState field.
func (o *RestoreTask) SetVirtualDiskRestoreState(v VirtualDiskRecoverTaskState) {
	o.VirtualDiskRestoreState = &v
}

// GetVlanParameters returns the VlanParameters field value if set, zero value otherwise.
func (o *RestoreTask) GetVlanParameters() VlanParameters {
	if o == nil || o.VlanParameters == nil {
		var ret VlanParameters
		return ret
	}
	return *o.VlanParameters
}

// GetVlanParametersOk returns a tuple with the VlanParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetVlanParametersOk() (*VlanParameters, bool) {
	if o == nil || o.VlanParameters == nil {
		return nil, false
	}
	return o.VlanParameters, true
}

// HasVlanParameters returns a boolean if a field has been set.
func (o *RestoreTask) HasVlanParameters() bool {
	if o != nil && o.VlanParameters != nil {
		return true
	}

	return false
}

// SetVlanParameters gets a reference to the given VlanParameters and assigns it to the VlanParameters field.
func (o *RestoreTask) SetVlanParameters(v VlanParameters) {
	o.VlanParameters = &v
}

// GetVmwareParameters returns the VmwareParameters field value if set, zero value otherwise.
func (o *RestoreTask) GetVmwareParameters() VmwareRestoreParameters {
	if o == nil || o.VmwareParameters == nil {
		var ret VmwareRestoreParameters
		return ret
	}
	return *o.VmwareParameters
}

// GetVmwareParametersOk returns a tuple with the VmwareParameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RestoreTask) GetVmwareParametersOk() (*VmwareRestoreParameters, bool) {
	if o == nil || o.VmwareParameters == nil {
		return nil, false
	}
	return o.VmwareParameters, true
}

// HasVmwareParameters returns a boolean if a field has been set.
func (o *RestoreTask) HasVmwareParameters() bool {
	if o != nil && o.VmwareParameters != nil {
		return true
	}

	return false
}

// SetVmwareParameters gets a reference to the given VmwareRestoreParameters and assigns it to the VmwareParameters field.
func (o *RestoreTask) SetVmwareParameters(v VmwareRestoreParameters) {
	o.VmwareParameters = &v
}

func (o RestoreTask) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AcropolisParameters != nil {
		toSerialize["acropolisParameters"] = o.AcropolisParameters
	}
	if o.ApplicationParameters != nil {
		toSerialize["applicationParameters"] = o.ApplicationParameters
	}
	if o.ArchiveTaskUid.IsSet() {
		toSerialize["archiveTaskUid"] = o.ArchiveTaskUid.Get()
	}
	if o.ArchiveTaskUids != nil {
		toSerialize["archiveTaskUids"] = o.ArchiveTaskUids
	}
	if o.CanTearDown.IsSet() {
		toSerialize["canTearDown"] = o.CanTearDown.Get()
	}
	if o.CloneViewParameters.IsSet() {
		toSerialize["cloneViewParameters"] = o.CloneViewParameters.Get()
	}
	if o.ContinueOnError.IsSet() {
		toSerialize["continueOnError"] = o.ContinueOnError.Get()
	}
	if o.DatastoreId.IsSet() {
		toSerialize["datastoreId"] = o.DatastoreId.Get()
	}
	if o.DeployVmsToCloud != nil {
		toSerialize["deployVmsToCloud"] = o.DeployVmsToCloud
	}
	if o.EndTimeUsecs.IsSet() {
		toSerialize["endTimeUsecs"] = o.EndTimeUsecs.Get()
	}
	if o.Error.IsSet() {
		toSerialize["error"] = o.Error.Get()
	}
	if o.FullViewName.IsSet() {
		toSerialize["fullViewName"] = o.FullViewName.Get()
	}
	if o.HypervParameters != nil {
		toSerialize["hypervParameters"] = o.HypervParameters
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.MountVolumesState != nil {
		toSerialize["mountVolumesState"] = o.MountVolumesState
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NewParentId.IsSet() {
		toSerialize["newParentId"] = o.NewParentId.Get()
	}
	if o.Objects != nil {
		toSerialize["objects"] = o.Objects
	}
	if o.OneDriveParameters != nil {
		toSerialize["oneDriveParameters"] = o.OneDriveParameters
	}
	if o.OutlookParameters != nil {
		toSerialize["outlookParameters"] = o.OutlookParameters
	}
	if o.PublicFoldersParameters != nil {
		toSerialize["publicFoldersParameters"] = o.PublicFoldersParameters
	}
	if o.RestoreObjectState != nil {
		toSerialize["restoreObjectState"] = o.RestoreObjectState
	}
	if o.SharePointParameters != nil {
		toSerialize["sharePointParameters"] = o.SharePointParameters
	}
	if o.StartTimeUsecs.IsSet() {
		toSerialize["startTimeUsecs"] = o.StartTimeUsecs.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	if o.TargetViewCreated.IsSet() {
		toSerialize["targetViewCreated"] = o.TargetViewCreated.Get()
	}
	if o.TearDownErrorMessage.IsSet() {
		toSerialize["tearDownErrorMessage"] = o.TearDownErrorMessage.Get()
	}
	if o.TearDownStatus.IsSet() {
		toSerialize["tearDownStatus"] = o.TearDownStatus.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Username.IsSet() {
		toSerialize["username"] = o.Username.Get()
	}
	if o.ViewBoxId.IsSet() {
		toSerialize["viewBoxId"] = o.ViewBoxId.Get()
	}
	if o.VirtualDiskRestoreState != nil {
		toSerialize["virtualDiskRestoreState"] = o.VirtualDiskRestoreState
	}
	if o.VlanParameters != nil {
		toSerialize["vlanParameters"] = o.VlanParameters
	}
	if o.VmwareParameters != nil {
		toSerialize["vmwareParameters"] = o.VmwareParameters
	}
	return json.Marshal(toSerialize)
}

type NullableRestoreTask struct {
	value *RestoreTask
	isSet bool
}

func (v NullableRestoreTask) Get() *RestoreTask {
	return v.value
}

func (v *NullableRestoreTask) Set(val *RestoreTask) {
	v.value = val
	v.isSet = true
}

func (v NullableRestoreTask) IsSet() bool {
	return v.isSet
}

func (v *NullableRestoreTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRestoreTask(val *RestoreTask) *NullableRestoreTask {
	return &NullableRestoreTask{value: val, isSet: true}
}

func (v NullableRestoreTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRestoreTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


