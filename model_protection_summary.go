/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ProtectionSummary Specifies the number of protected and unprotected objects, and their sizes information of the given entity.
type ProtectionSummary struct {
	// Specifies the number of objects that are protected under the given entity.
	ProtectedCount NullableInt64 `json:"protectedCount,omitempty"`
	// Specifies the total size of the protected objects under the given entity.
	ProtectedSize NullableInt64 `json:"protectedSize,omitempty"`
	// Specifies the number of objects that are not protected under the given entity.
	UnprotectedCount NullableInt64 `json:"unprotectedCount,omitempty"`
	// Specifies the total size of the unprotected objects under the given entity.
	UnprotectedSize NullableInt64 `json:"unprotectedSize,omitempty"`
}

// NewProtectionSummary instantiates a new ProtectionSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionSummary() *ProtectionSummary {
	this := ProtectionSummary{}
	return &this
}

// NewProtectionSummaryWithDefaults instantiates a new ProtectionSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionSummaryWithDefaults() *ProtectionSummary {
	this := ProtectionSummary{}
	return &this
}

// GetProtectedCount returns the ProtectedCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSummary) GetProtectedCount() int64 {
	if o == nil || o.ProtectedCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ProtectedCount.Get()
}

// GetProtectedCountOk returns a tuple with the ProtectedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSummary) GetProtectedCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectedCount.Get(), o.ProtectedCount.IsSet()
}

// HasProtectedCount returns a boolean if a field has been set.
func (o *ProtectionSummary) HasProtectedCount() bool {
	if o != nil && o.ProtectedCount.IsSet() {
		return true
	}

	return false
}

// SetProtectedCount gets a reference to the given NullableInt64 and assigns it to the ProtectedCount field.
func (o *ProtectionSummary) SetProtectedCount(v int64) {
	o.ProtectedCount.Set(&v)
}
// SetProtectedCountNil sets the value for ProtectedCount to be an explicit nil
func (o *ProtectionSummary) SetProtectedCountNil() {
	o.ProtectedCount.Set(nil)
}

// UnsetProtectedCount ensures that no value is present for ProtectedCount, not even an explicit nil
func (o *ProtectionSummary) UnsetProtectedCount() {
	o.ProtectedCount.Unset()
}

// GetProtectedSize returns the ProtectedSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSummary) GetProtectedSize() int64 {
	if o == nil || o.ProtectedSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ProtectedSize.Get()
}

// GetProtectedSizeOk returns a tuple with the ProtectedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSummary) GetProtectedSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectedSize.Get(), o.ProtectedSize.IsSet()
}

// HasProtectedSize returns a boolean if a field has been set.
func (o *ProtectionSummary) HasProtectedSize() bool {
	if o != nil && o.ProtectedSize.IsSet() {
		return true
	}

	return false
}

// SetProtectedSize gets a reference to the given NullableInt64 and assigns it to the ProtectedSize field.
func (o *ProtectionSummary) SetProtectedSize(v int64) {
	o.ProtectedSize.Set(&v)
}
// SetProtectedSizeNil sets the value for ProtectedSize to be an explicit nil
func (o *ProtectionSummary) SetProtectedSizeNil() {
	o.ProtectedSize.Set(nil)
}

// UnsetProtectedSize ensures that no value is present for ProtectedSize, not even an explicit nil
func (o *ProtectionSummary) UnsetProtectedSize() {
	o.ProtectedSize.Unset()
}

// GetUnprotectedCount returns the UnprotectedCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSummary) GetUnprotectedCount() int64 {
	if o == nil || o.UnprotectedCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UnprotectedCount.Get()
}

// GetUnprotectedCountOk returns a tuple with the UnprotectedCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSummary) GetUnprotectedCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnprotectedCount.Get(), o.UnprotectedCount.IsSet()
}

// HasUnprotectedCount returns a boolean if a field has been set.
func (o *ProtectionSummary) HasUnprotectedCount() bool {
	if o != nil && o.UnprotectedCount.IsSet() {
		return true
	}

	return false
}

// SetUnprotectedCount gets a reference to the given NullableInt64 and assigns it to the UnprotectedCount field.
func (o *ProtectionSummary) SetUnprotectedCount(v int64) {
	o.UnprotectedCount.Set(&v)
}
// SetUnprotectedCountNil sets the value for UnprotectedCount to be an explicit nil
func (o *ProtectionSummary) SetUnprotectedCountNil() {
	o.UnprotectedCount.Set(nil)
}

// UnsetUnprotectedCount ensures that no value is present for UnprotectedCount, not even an explicit nil
func (o *ProtectionSummary) UnsetUnprotectedCount() {
	o.UnprotectedCount.Unset()
}

// GetUnprotectedSize returns the UnprotectedSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSummary) GetUnprotectedSize() int64 {
	if o == nil || o.UnprotectedSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UnprotectedSize.Get()
}

// GetUnprotectedSizeOk returns a tuple with the UnprotectedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSummary) GetUnprotectedSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnprotectedSize.Get(), o.UnprotectedSize.IsSet()
}

// HasUnprotectedSize returns a boolean if a field has been set.
func (o *ProtectionSummary) HasUnprotectedSize() bool {
	if o != nil && o.UnprotectedSize.IsSet() {
		return true
	}

	return false
}

// SetUnprotectedSize gets a reference to the given NullableInt64 and assigns it to the UnprotectedSize field.
func (o *ProtectionSummary) SetUnprotectedSize(v int64) {
	o.UnprotectedSize.Set(&v)
}
// SetUnprotectedSizeNil sets the value for UnprotectedSize to be an explicit nil
func (o *ProtectionSummary) SetUnprotectedSizeNil() {
	o.UnprotectedSize.Set(nil)
}

// UnsetUnprotectedSize ensures that no value is present for UnprotectedSize, not even an explicit nil
func (o *ProtectionSummary) UnsetUnprotectedSize() {
	o.UnprotectedSize.Unset()
}

func (o ProtectionSummary) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ProtectedCount.IsSet() {
		toSerialize["protectedCount"] = o.ProtectedCount.Get()
	}
	if o.ProtectedSize.IsSet() {
		toSerialize["protectedSize"] = o.ProtectedSize.Get()
	}
	if o.UnprotectedCount.IsSet() {
		toSerialize["unprotectedCount"] = o.UnprotectedCount.Get()
	}
	if o.UnprotectedSize.IsSet() {
		toSerialize["unprotectedSize"] = o.UnprotectedSize.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionSummary struct {
	value *ProtectionSummary
	isSet bool
}

func (v NullableProtectionSummary) Get() *ProtectionSummary {
	return v.value
}

func (v *NullableProtectionSummary) Set(val *ProtectionSummary) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionSummary) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionSummary(val *ProtectionSummary) *NullableProtectionSummary {
	return &NullableProtectionSummary{value: val, isSet: true}
}

func (v NullableProtectionSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


