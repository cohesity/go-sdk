/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TenantConfig Specifies struct with basic tenant specific configuration.
type TenantConfig struct {
	// Specifies name of the tenant.
	Name NullableString `json:"name,omitempty"`
	// Whether the user is a restricted user. A restricted user can only view the objects he has permissions to.
	Restricted NullableBool `json:"restricted,omitempty"`
	// Array of Roles.  Specifies the Cohesity roles to associate with the user such as such as 'Admin', 'Ops' or 'View'. The Cohesity roles determine privileges on the Cohesity Cluster for this user.
	Roles []string `json:"roles,omitempty"`
	// Specifies the unique id of the tenant.
	TenantId NullableString `json:"tenantId,omitempty"`
}

// NewTenantConfig instantiates a new TenantConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantConfig() *TenantConfig {
	this := TenantConfig{}
	return &this
}

// NewTenantConfigWithDefaults instantiates a new TenantConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantConfigWithDefaults() *TenantConfig {
	this := TenantConfig{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantConfig) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantConfig) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *TenantConfig) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *TenantConfig) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *TenantConfig) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *TenantConfig) UnsetName() {
	o.Name.Unset()
}

// GetRestricted returns the Restricted field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantConfig) GetRestricted() bool {
	if o == nil || o.Restricted.Get() == nil {
		var ret bool
		return ret
	}
	return *o.Restricted.Get()
}

// GetRestrictedOk returns a tuple with the Restricted field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantConfig) GetRestrictedOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Restricted.Get(), o.Restricted.IsSet()
}

// HasRestricted returns a boolean if a field has been set.
func (o *TenantConfig) HasRestricted() bool {
	if o != nil && o.Restricted.IsSet() {
		return true
	}

	return false
}

// SetRestricted gets a reference to the given NullableBool and assigns it to the Restricted field.
func (o *TenantConfig) SetRestricted(v bool) {
	o.Restricted.Set(&v)
}
// SetRestrictedNil sets the value for Restricted to be an explicit nil
func (o *TenantConfig) SetRestrictedNil() {
	o.Restricted.Set(nil)
}

// UnsetRestricted ensures that no value is present for Restricted, not even an explicit nil
func (o *TenantConfig) UnsetRestricted() {
	o.Restricted.Unset()
}

// GetRoles returns the Roles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantConfig) GetRoles() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantConfig) GetRolesOk() (*[]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return &o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *TenantConfig) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *TenantConfig) SetRoles(v []string) {
	o.Roles = v
}

// GetTenantId returns the TenantId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TenantConfig) GetTenantId() string {
	if o == nil || o.TenantId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TenantId.Get()
}

// GetTenantIdOk returns a tuple with the TenantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TenantConfig) GetTenantIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TenantId.Get(), o.TenantId.IsSet()
}

// HasTenantId returns a boolean if a field has been set.
func (o *TenantConfig) HasTenantId() bool {
	if o != nil && o.TenantId.IsSet() {
		return true
	}

	return false
}

// SetTenantId gets a reference to the given NullableString and assigns it to the TenantId field.
func (o *TenantConfig) SetTenantId(v string) {
	o.TenantId.Set(&v)
}
// SetTenantIdNil sets the value for TenantId to be an explicit nil
func (o *TenantConfig) SetTenantIdNil() {
	o.TenantId.Set(nil)
}

// UnsetTenantId ensures that no value is present for TenantId, not even an explicit nil
func (o *TenantConfig) UnsetTenantId() {
	o.TenantId.Unset()
}

func (o TenantConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Restricted.IsSet() {
		toSerialize["restricted"] = o.Restricted.Get()
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.TenantId.IsSet() {
		toSerialize["tenantId"] = o.TenantId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTenantConfig struct {
	value *TenantConfig
	isSet bool
}

func (v NullableTenantConfig) Get() *TenantConfig {
	return v.value
}

func (v *NullableTenantConfig) Set(val *TenantConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantConfig(val *TenantConfig) *NullableTenantConfig {
	return &NullableTenantConfig{value: val, isSet: true}
}

func (v NullableTenantConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


