/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// BasicClusterInfo Specifies basic information about the Cohesity Cluster.
type BasicClusterInfo struct {
	// Specifies the authentication scheme for the cluster. 'kPasswordOnly' indicates the normal cohesity authentication type. 'kCertificateOnly' indicates that certificate based authentication has been enabled and the password based authentication has been turned off. 'kPasswordAndCertificate' indicates that both the authenticatio schemes are required.
	AuthenticationType NullableString `json:"authenticationType,omitempty"`
	// Specifies if banner is enabled on the cluster.
	BannerEnabled NullableBool `json:"bannerEnabled,omitempty"`
	// This field is deprecated. Specifies the current release of the Cohesity software running on this Cohesity Cluster. deprecated: true
	ClusterSoftwareVersion NullableString `json:"clusterSoftwareVersion,omitempty"`
	// Specifies the type of Cohesity Cluster. 'kPhysical' indicates the Cohesity Cluster is hosted directly on hardware. 'kVirtualRobo' indicates the Cohesity Cluster is hosted in a VM on a ESXi Host of a VMware vCenter Server using Cohesity's Virtual Edition. 'kMicrosoftCloud' indicates the Cohesity Cluster is hosted in a VM on Microsoft Azure using Cohesity's Cloud Edition. 'kAmazonCloud' indicates the Cohesity Cluster is hosted in a VM on Amazon S3 using Cohesity's Cloud Edition. 'kGoogleCloud' indicates the Cohesity Cluster is hosted in a VM on Google Cloud Platform using Cohesity's Cloud Edition.
	ClusterType NullableString `json:"clusterType,omitempty"`
	// Array of Domains.  Specifies a list of domains joined to the Cohesity Cluster, including the default LOCAL Cohesity domain used to store the local Cohesity users.
	Domains []string `json:"domains,omitempty"`
	// Specifies Idp is configured for the Cluster.
	IdpConfigured NullableBool `json:"idpConfigured,omitempty"`
	// Specifies Idp is configured for a Tenant.
	IdpTenantExists NullableBool `json:"idpTenantExists,omitempty"`
	// Specifies the language and locale for the Cohesity Cluster.
	LanguageLocale NullableString `json:"languageLocale,omitempty"`
	// Specifies whether server is running in mcm-mode. If set to true, it is in mcm-mode.
	McmMode NullableBool `json:"mcmMode,omitempty"`
	// Specifies whether server is running in mcm-on-prem-mode. If set to true, it is in mcm on prem mode. This need mcm-mode to be true.
	McmOnPremMode NullableBool `json:"mcmOnPremMode,omitempty"`
	// Specifies if multi-tenancy is enabled on the cluster.
	MultiTenancyEnabled NullableBool `json:"multiTenancyEnabled,omitempty"`
	// Specifies the name of the Cohesity Cluster.
	Name NullableString `json:"name,omitempty"`
}

// NewBasicClusterInfo instantiates a new BasicClusterInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBasicClusterInfo() *BasicClusterInfo {
	this := BasicClusterInfo{}
	return &this
}

// NewBasicClusterInfoWithDefaults instantiates a new BasicClusterInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBasicClusterInfoWithDefaults() *BasicClusterInfo {
	this := BasicClusterInfo{}
	return &this
}

// GetAuthenticationType returns the AuthenticationType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetAuthenticationType() string {
	if o == nil || o.AuthenticationType.Get() == nil {
		var ret string
		return ret
	}
	return *o.AuthenticationType.Get()
}

// GetAuthenticationTypeOk returns a tuple with the AuthenticationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetAuthenticationTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AuthenticationType.Get(), o.AuthenticationType.IsSet()
}

// HasAuthenticationType returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasAuthenticationType() bool {
	if o != nil && o.AuthenticationType.IsSet() {
		return true
	}

	return false
}

// SetAuthenticationType gets a reference to the given NullableString and assigns it to the AuthenticationType field.
func (o *BasicClusterInfo) SetAuthenticationType(v string) {
	o.AuthenticationType.Set(&v)
}
// SetAuthenticationTypeNil sets the value for AuthenticationType to be an explicit nil
func (o *BasicClusterInfo) SetAuthenticationTypeNil() {
	o.AuthenticationType.Set(nil)
}

// UnsetAuthenticationType ensures that no value is present for AuthenticationType, not even an explicit nil
func (o *BasicClusterInfo) UnsetAuthenticationType() {
	o.AuthenticationType.Unset()
}

// GetBannerEnabled returns the BannerEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetBannerEnabled() bool {
	if o == nil || o.BannerEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.BannerEnabled.Get()
}

// GetBannerEnabledOk returns a tuple with the BannerEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetBannerEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BannerEnabled.Get(), o.BannerEnabled.IsSet()
}

// HasBannerEnabled returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasBannerEnabled() bool {
	if o != nil && o.BannerEnabled.IsSet() {
		return true
	}

	return false
}

// SetBannerEnabled gets a reference to the given NullableBool and assigns it to the BannerEnabled field.
func (o *BasicClusterInfo) SetBannerEnabled(v bool) {
	o.BannerEnabled.Set(&v)
}
// SetBannerEnabledNil sets the value for BannerEnabled to be an explicit nil
func (o *BasicClusterInfo) SetBannerEnabledNil() {
	o.BannerEnabled.Set(nil)
}

// UnsetBannerEnabled ensures that no value is present for BannerEnabled, not even an explicit nil
func (o *BasicClusterInfo) UnsetBannerEnabled() {
	o.BannerEnabled.Unset()
}

// GetClusterSoftwareVersion returns the ClusterSoftwareVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetClusterSoftwareVersion() string {
	if o == nil || o.ClusterSoftwareVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterSoftwareVersion.Get()
}

// GetClusterSoftwareVersionOk returns a tuple with the ClusterSoftwareVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetClusterSoftwareVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterSoftwareVersion.Get(), o.ClusterSoftwareVersion.IsSet()
}

// HasClusterSoftwareVersion returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasClusterSoftwareVersion() bool {
	if o != nil && o.ClusterSoftwareVersion.IsSet() {
		return true
	}

	return false
}

// SetClusterSoftwareVersion gets a reference to the given NullableString and assigns it to the ClusterSoftwareVersion field.
func (o *BasicClusterInfo) SetClusterSoftwareVersion(v string) {
	o.ClusterSoftwareVersion.Set(&v)
}
// SetClusterSoftwareVersionNil sets the value for ClusterSoftwareVersion to be an explicit nil
func (o *BasicClusterInfo) SetClusterSoftwareVersionNil() {
	o.ClusterSoftwareVersion.Set(nil)
}

// UnsetClusterSoftwareVersion ensures that no value is present for ClusterSoftwareVersion, not even an explicit nil
func (o *BasicClusterInfo) UnsetClusterSoftwareVersion() {
	o.ClusterSoftwareVersion.Unset()
}

// GetClusterType returns the ClusterType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetClusterType() string {
	if o == nil || o.ClusterType.Get() == nil {
		var ret string
		return ret
	}
	return *o.ClusterType.Get()
}

// GetClusterTypeOk returns a tuple with the ClusterType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetClusterTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ClusterType.Get(), o.ClusterType.IsSet()
}

// HasClusterType returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasClusterType() bool {
	if o != nil && o.ClusterType.IsSet() {
		return true
	}

	return false
}

// SetClusterType gets a reference to the given NullableString and assigns it to the ClusterType field.
func (o *BasicClusterInfo) SetClusterType(v string) {
	o.ClusterType.Set(&v)
}
// SetClusterTypeNil sets the value for ClusterType to be an explicit nil
func (o *BasicClusterInfo) SetClusterTypeNil() {
	o.ClusterType.Set(nil)
}

// UnsetClusterType ensures that no value is present for ClusterType, not even an explicit nil
func (o *BasicClusterInfo) UnsetClusterType() {
	o.ClusterType.Unset()
}

// GetDomains returns the Domains field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetDomains() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Domains
}

// GetDomainsOk returns a tuple with the Domains field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetDomainsOk() (*[]string, bool) {
	if o == nil || o.Domains == nil {
		return nil, false
	}
	return &o.Domains, true
}

// HasDomains returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasDomains() bool {
	if o != nil && o.Domains != nil {
		return true
	}

	return false
}

// SetDomains gets a reference to the given []string and assigns it to the Domains field.
func (o *BasicClusterInfo) SetDomains(v []string) {
	o.Domains = v
}

// GetIdpConfigured returns the IdpConfigured field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetIdpConfigured() bool {
	if o == nil || o.IdpConfigured.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IdpConfigured.Get()
}

// GetIdpConfiguredOk returns a tuple with the IdpConfigured field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetIdpConfiguredOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IdpConfigured.Get(), o.IdpConfigured.IsSet()
}

// HasIdpConfigured returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasIdpConfigured() bool {
	if o != nil && o.IdpConfigured.IsSet() {
		return true
	}

	return false
}

// SetIdpConfigured gets a reference to the given NullableBool and assigns it to the IdpConfigured field.
func (o *BasicClusterInfo) SetIdpConfigured(v bool) {
	o.IdpConfigured.Set(&v)
}
// SetIdpConfiguredNil sets the value for IdpConfigured to be an explicit nil
func (o *BasicClusterInfo) SetIdpConfiguredNil() {
	o.IdpConfigured.Set(nil)
}

// UnsetIdpConfigured ensures that no value is present for IdpConfigured, not even an explicit nil
func (o *BasicClusterInfo) UnsetIdpConfigured() {
	o.IdpConfigured.Unset()
}

// GetIdpTenantExists returns the IdpTenantExists field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetIdpTenantExists() bool {
	if o == nil || o.IdpTenantExists.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IdpTenantExists.Get()
}

// GetIdpTenantExistsOk returns a tuple with the IdpTenantExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetIdpTenantExistsOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IdpTenantExists.Get(), o.IdpTenantExists.IsSet()
}

// HasIdpTenantExists returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasIdpTenantExists() bool {
	if o != nil && o.IdpTenantExists.IsSet() {
		return true
	}

	return false
}

// SetIdpTenantExists gets a reference to the given NullableBool and assigns it to the IdpTenantExists field.
func (o *BasicClusterInfo) SetIdpTenantExists(v bool) {
	o.IdpTenantExists.Set(&v)
}
// SetIdpTenantExistsNil sets the value for IdpTenantExists to be an explicit nil
func (o *BasicClusterInfo) SetIdpTenantExistsNil() {
	o.IdpTenantExists.Set(nil)
}

// UnsetIdpTenantExists ensures that no value is present for IdpTenantExists, not even an explicit nil
func (o *BasicClusterInfo) UnsetIdpTenantExists() {
	o.IdpTenantExists.Unset()
}

// GetLanguageLocale returns the LanguageLocale field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetLanguageLocale() string {
	if o == nil || o.LanguageLocale.Get() == nil {
		var ret string
		return ret
	}
	return *o.LanguageLocale.Get()
}

// GetLanguageLocaleOk returns a tuple with the LanguageLocale field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetLanguageLocaleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LanguageLocale.Get(), o.LanguageLocale.IsSet()
}

// HasLanguageLocale returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasLanguageLocale() bool {
	if o != nil && o.LanguageLocale.IsSet() {
		return true
	}

	return false
}

// SetLanguageLocale gets a reference to the given NullableString and assigns it to the LanguageLocale field.
func (o *BasicClusterInfo) SetLanguageLocale(v string) {
	o.LanguageLocale.Set(&v)
}
// SetLanguageLocaleNil sets the value for LanguageLocale to be an explicit nil
func (o *BasicClusterInfo) SetLanguageLocaleNil() {
	o.LanguageLocale.Set(nil)
}

// UnsetLanguageLocale ensures that no value is present for LanguageLocale, not even an explicit nil
func (o *BasicClusterInfo) UnsetLanguageLocale() {
	o.LanguageLocale.Unset()
}

// GetMcmMode returns the McmMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetMcmMode() bool {
	if o == nil || o.McmMode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.McmMode.Get()
}

// GetMcmModeOk returns a tuple with the McmMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetMcmModeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.McmMode.Get(), o.McmMode.IsSet()
}

// HasMcmMode returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasMcmMode() bool {
	if o != nil && o.McmMode.IsSet() {
		return true
	}

	return false
}

// SetMcmMode gets a reference to the given NullableBool and assigns it to the McmMode field.
func (o *BasicClusterInfo) SetMcmMode(v bool) {
	o.McmMode.Set(&v)
}
// SetMcmModeNil sets the value for McmMode to be an explicit nil
func (o *BasicClusterInfo) SetMcmModeNil() {
	o.McmMode.Set(nil)
}

// UnsetMcmMode ensures that no value is present for McmMode, not even an explicit nil
func (o *BasicClusterInfo) UnsetMcmMode() {
	o.McmMode.Unset()
}

// GetMcmOnPremMode returns the McmOnPremMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetMcmOnPremMode() bool {
	if o == nil || o.McmOnPremMode.Get() == nil {
		var ret bool
		return ret
	}
	return *o.McmOnPremMode.Get()
}

// GetMcmOnPremModeOk returns a tuple with the McmOnPremMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetMcmOnPremModeOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.McmOnPremMode.Get(), o.McmOnPremMode.IsSet()
}

// HasMcmOnPremMode returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasMcmOnPremMode() bool {
	if o != nil && o.McmOnPremMode.IsSet() {
		return true
	}

	return false
}

// SetMcmOnPremMode gets a reference to the given NullableBool and assigns it to the McmOnPremMode field.
func (o *BasicClusterInfo) SetMcmOnPremMode(v bool) {
	o.McmOnPremMode.Set(&v)
}
// SetMcmOnPremModeNil sets the value for McmOnPremMode to be an explicit nil
func (o *BasicClusterInfo) SetMcmOnPremModeNil() {
	o.McmOnPremMode.Set(nil)
}

// UnsetMcmOnPremMode ensures that no value is present for McmOnPremMode, not even an explicit nil
func (o *BasicClusterInfo) UnsetMcmOnPremMode() {
	o.McmOnPremMode.Unset()
}

// GetMultiTenancyEnabled returns the MultiTenancyEnabled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetMultiTenancyEnabled() bool {
	if o == nil || o.MultiTenancyEnabled.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MultiTenancyEnabled.Get()
}

// GetMultiTenancyEnabledOk returns a tuple with the MultiTenancyEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetMultiTenancyEnabledOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MultiTenancyEnabled.Get(), o.MultiTenancyEnabled.IsSet()
}

// HasMultiTenancyEnabled returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasMultiTenancyEnabled() bool {
	if o != nil && o.MultiTenancyEnabled.IsSet() {
		return true
	}

	return false
}

// SetMultiTenancyEnabled gets a reference to the given NullableBool and assigns it to the MultiTenancyEnabled field.
func (o *BasicClusterInfo) SetMultiTenancyEnabled(v bool) {
	o.MultiTenancyEnabled.Set(&v)
}
// SetMultiTenancyEnabledNil sets the value for MultiTenancyEnabled to be an explicit nil
func (o *BasicClusterInfo) SetMultiTenancyEnabledNil() {
	o.MultiTenancyEnabled.Set(nil)
}

// UnsetMultiTenancyEnabled ensures that no value is present for MultiTenancyEnabled, not even an explicit nil
func (o *BasicClusterInfo) UnsetMultiTenancyEnabled() {
	o.MultiTenancyEnabled.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BasicClusterInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BasicClusterInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *BasicClusterInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *BasicClusterInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *BasicClusterInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *BasicClusterInfo) UnsetName() {
	o.Name.Unset()
}

func (o BasicClusterInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AuthenticationType.IsSet() {
		toSerialize["authenticationType"] = o.AuthenticationType.Get()
	}
	if o.BannerEnabled.IsSet() {
		toSerialize["bannerEnabled"] = o.BannerEnabled.Get()
	}
	if o.ClusterSoftwareVersion.IsSet() {
		toSerialize["clusterSoftwareVersion"] = o.ClusterSoftwareVersion.Get()
	}
	if o.ClusterType.IsSet() {
		toSerialize["clusterType"] = o.ClusterType.Get()
	}
	if o.Domains != nil {
		toSerialize["domains"] = o.Domains
	}
	if o.IdpConfigured.IsSet() {
		toSerialize["idpConfigured"] = o.IdpConfigured.Get()
	}
	if o.IdpTenantExists.IsSet() {
		toSerialize["idpTenantExists"] = o.IdpTenantExists.Get()
	}
	if o.LanguageLocale.IsSet() {
		toSerialize["languageLocale"] = o.LanguageLocale.Get()
	}
	if o.McmMode.IsSet() {
		toSerialize["mcmMode"] = o.McmMode.Get()
	}
	if o.McmOnPremMode.IsSet() {
		toSerialize["mcmOnPremMode"] = o.McmOnPremMode.Get()
	}
	if o.MultiTenancyEnabled.IsSet() {
		toSerialize["multiTenancyEnabled"] = o.MultiTenancyEnabled.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableBasicClusterInfo struct {
	value *BasicClusterInfo
	isSet bool
}

func (v NullableBasicClusterInfo) Get() *BasicClusterInfo {
	return v.value
}

func (v *NullableBasicClusterInfo) Set(val *BasicClusterInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBasicClusterInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBasicClusterInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBasicClusterInfo(val *BasicClusterInfo) *NullableBasicClusterInfo {
	return &NullableBasicClusterInfo{value: val, isSet: true}
}

func (v NullableBasicClusterInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBasicClusterInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


