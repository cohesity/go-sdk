/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// MonthlySchedule Specifies a monthly backup schedule by specifying a day in the week and a week in the month. For example, if day is set to 'kMonday' and dayCount is set to 'kThird', a Job Run is started on the third Monday of every month.
type MonthlySchedule struct {
	// Specifies the day of the week (such as 'kMonday') to start the Job Run. Used with day count to define the day in the month to start the Job Run. Specifies a day in a week such as 'kSunday', 'kMonday', etc.
	Day NullableString `json:"day,omitempty"`
	// Specifies the day count in the month (such as 'kThird') to start the Job Run. Used in combination with day to define the day in the month to start the Job Run. Specifies the day count in the month to start the backup. For example if day count is set to 'kThird' and day is set to 'kMonday', a backup is performed on the third Monday of every month. 'kFirst' indicates that the first week should be chosen for specified day of every month. 'kSecond' indicates that the second week should be chosen for specified day of every month. 'kThird' indicates that the third week should be chosen for specified day of every month. 'kFourth' indicates that the fourth week should be chosen for specified day of every month. 'kLast' indicates that the last week should be chosen for specified day of every month.
	DayCount NullableString `json:"dayCount,omitempty"`
}

// NewMonthlySchedule instantiates a new MonthlySchedule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlySchedule() *MonthlySchedule {
	this := MonthlySchedule{}
	return &this
}

// NewMonthlyScheduleWithDefaults instantiates a new MonthlySchedule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyScheduleWithDefaults() *MonthlySchedule {
	this := MonthlySchedule{}
	return &this
}

// GetDay returns the Day field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MonthlySchedule) GetDay() string {
	if o == nil || o.Day.Get() == nil {
		var ret string
		return ret
	}
	return *o.Day.Get()
}

// GetDayOk returns a tuple with the Day field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthlySchedule) GetDayOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Day.Get(), o.Day.IsSet()
}

// HasDay returns a boolean if a field has been set.
func (o *MonthlySchedule) HasDay() bool {
	if o != nil && o.Day.IsSet() {
		return true
	}

	return false
}

// SetDay gets a reference to the given NullableString and assigns it to the Day field.
func (o *MonthlySchedule) SetDay(v string) {
	o.Day.Set(&v)
}
// SetDayNil sets the value for Day to be an explicit nil
func (o *MonthlySchedule) SetDayNil() {
	o.Day.Set(nil)
}

// UnsetDay ensures that no value is present for Day, not even an explicit nil
func (o *MonthlySchedule) UnsetDay() {
	o.Day.Unset()
}

// GetDayCount returns the DayCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MonthlySchedule) GetDayCount() string {
	if o == nil || o.DayCount.Get() == nil {
		var ret string
		return ret
	}
	return *o.DayCount.Get()
}

// GetDayCountOk returns a tuple with the DayCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthlySchedule) GetDayCountOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DayCount.Get(), o.DayCount.IsSet()
}

// HasDayCount returns a boolean if a field has been set.
func (o *MonthlySchedule) HasDayCount() bool {
	if o != nil && o.DayCount.IsSet() {
		return true
	}

	return false
}

// SetDayCount gets a reference to the given NullableString and assigns it to the DayCount field.
func (o *MonthlySchedule) SetDayCount(v string) {
	o.DayCount.Set(&v)
}
// SetDayCountNil sets the value for DayCount to be an explicit nil
func (o *MonthlySchedule) SetDayCountNil() {
	o.DayCount.Set(nil)
}

// UnsetDayCount ensures that no value is present for DayCount, not even an explicit nil
func (o *MonthlySchedule) UnsetDayCount() {
	o.DayCount.Unset()
}

func (o MonthlySchedule) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Day.IsSet() {
		toSerialize["day"] = o.Day.Get()
	}
	if o.DayCount.IsSet() {
		toSerialize["dayCount"] = o.DayCount.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMonthlySchedule struct {
	value *MonthlySchedule
	isSet bool
}

func (v NullableMonthlySchedule) Get() *MonthlySchedule {
	return v.value
}

func (v *NullableMonthlySchedule) Set(val *MonthlySchedule) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlySchedule) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlySchedule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlySchedule(val *MonthlySchedule) *NullableMonthlySchedule {
	return &NullableMonthlySchedule{value: val, isSet: true}
}

func (v NullableMonthlySchedule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlySchedule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


