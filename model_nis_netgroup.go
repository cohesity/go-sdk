/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NisNetgroup Defines an NIS Netgroup.
type NisNetgroup struct {
	// Description of the netgroup.
	Description NullableString `json:"description,omitempty"`
	// Specifies the domain of the netgroup.
	Domain NullableString `json:"domain,omitempty"`
	// Specifies the name of the netgroup.
	Name NullableString `json:"name,omitempty"`
	// Specifies whether clients from this netgroup can mount using NFS protocol. Protocol access level. 'kDisabled' indicates Protocol access level 'Disabled' 'kReadOnly' indicates Protocol access level 'ReadOnly' 'kReadWrite' indicates Protocol access level 'ReadWrite'
	NfsAccess NullableString `json:"nfsAccess,omitempty"`
	// Specifies the NFS squash type.
	NfsSquash NullableInt32 `json:"nfsSquash,omitempty"`
}

// NewNisNetgroup instantiates a new NisNetgroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNisNetgroup() *NisNetgroup {
	this := NisNetgroup{}
	return &this
}

// NewNisNetgroupWithDefaults instantiates a new NisNetgroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNisNetgroupWithDefaults() *NisNetgroup {
	this := NisNetgroup{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NisNetgroup) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NisNetgroup) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *NisNetgroup) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *NisNetgroup) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *NisNetgroup) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *NisNetgroup) UnsetDescription() {
	o.Description.Unset()
}

// GetDomain returns the Domain field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NisNetgroup) GetDomain() string {
	if o == nil || o.Domain.Get() == nil {
		var ret string
		return ret
	}
	return *o.Domain.Get()
}

// GetDomainOk returns a tuple with the Domain field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NisNetgroup) GetDomainOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Domain.Get(), o.Domain.IsSet()
}

// HasDomain returns a boolean if a field has been set.
func (o *NisNetgroup) HasDomain() bool {
	if o != nil && o.Domain.IsSet() {
		return true
	}

	return false
}

// SetDomain gets a reference to the given NullableString and assigns it to the Domain field.
func (o *NisNetgroup) SetDomain(v string) {
	o.Domain.Set(&v)
}
// SetDomainNil sets the value for Domain to be an explicit nil
func (o *NisNetgroup) SetDomainNil() {
	o.Domain.Set(nil)
}

// UnsetDomain ensures that no value is present for Domain, not even an explicit nil
func (o *NisNetgroup) UnsetDomain() {
	o.Domain.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NisNetgroup) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NisNetgroup) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *NisNetgroup) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *NisNetgroup) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *NisNetgroup) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *NisNetgroup) UnsetName() {
	o.Name.Unset()
}

// GetNfsAccess returns the NfsAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NisNetgroup) GetNfsAccess() string {
	if o == nil || o.NfsAccess.Get() == nil {
		var ret string
		return ret
	}
	return *o.NfsAccess.Get()
}

// GetNfsAccessOk returns a tuple with the NfsAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NisNetgroup) GetNfsAccessOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsAccess.Get(), o.NfsAccess.IsSet()
}

// HasNfsAccess returns a boolean if a field has been set.
func (o *NisNetgroup) HasNfsAccess() bool {
	if o != nil && o.NfsAccess.IsSet() {
		return true
	}

	return false
}

// SetNfsAccess gets a reference to the given NullableString and assigns it to the NfsAccess field.
func (o *NisNetgroup) SetNfsAccess(v string) {
	o.NfsAccess.Set(&v)
}
// SetNfsAccessNil sets the value for NfsAccess to be an explicit nil
func (o *NisNetgroup) SetNfsAccessNil() {
	o.NfsAccess.Set(nil)
}

// UnsetNfsAccess ensures that no value is present for NfsAccess, not even an explicit nil
func (o *NisNetgroup) UnsetNfsAccess() {
	o.NfsAccess.Unset()
}

// GetNfsSquash returns the NfsSquash field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NisNetgroup) GetNfsSquash() int32 {
	if o == nil || o.NfsSquash.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NfsSquash.Get()
}

// GetNfsSquashOk returns a tuple with the NfsSquash field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NisNetgroup) GetNfsSquashOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsSquash.Get(), o.NfsSquash.IsSet()
}

// HasNfsSquash returns a boolean if a field has been set.
func (o *NisNetgroup) HasNfsSquash() bool {
	if o != nil && o.NfsSquash.IsSet() {
		return true
	}

	return false
}

// SetNfsSquash gets a reference to the given NullableInt32 and assigns it to the NfsSquash field.
func (o *NisNetgroup) SetNfsSquash(v int32) {
	o.NfsSquash.Set(&v)
}
// SetNfsSquashNil sets the value for NfsSquash to be an explicit nil
func (o *NisNetgroup) SetNfsSquashNil() {
	o.NfsSquash.Set(nil)
}

// UnsetNfsSquash ensures that no value is present for NfsSquash, not even an explicit nil
func (o *NisNetgroup) UnsetNfsSquash() {
	o.NfsSquash.Unset()
}

func (o NisNetgroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Domain.IsSet() {
		toSerialize["domain"] = o.Domain.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.NfsAccess.IsSet() {
		toSerialize["nfsAccess"] = o.NfsAccess.Get()
	}
	if o.NfsSquash.IsSet() {
		toSerialize["nfsSquash"] = o.NfsSquash.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNisNetgroup struct {
	value *NisNetgroup
	isSet bool
}

func (v NullableNisNetgroup) Get() *NisNetgroup {
	return v.value
}

func (v *NullableNisNetgroup) Set(val *NisNetgroup) {
	v.value = val
	v.isSet = true
}

func (v NullableNisNetgroup) IsSet() bool {
	return v.isSet
}

func (v *NullableNisNetgroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNisNetgroup(val *NisNetgroup) *NullableNisNetgroup {
	return &NullableNisNetgroup{value: val, isSet: true}
}

func (v NullableNisNetgroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNisNetgroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


