/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RemoteProtectionJobRunInstance Specifies details about one Job Run (Snapshot) archived to a remote Vault that was captured by a Protection Job.
type RemoteProtectionJobRunInstance struct {
	// Specifies the globally unique id of the archival task that archived the Snapshot to the Vault.
	ArchiveTaskUid NullableUniversalId `json:"archiveTaskUid,omitempty"`
	// Specifies the version of the archive.
	ArchiveVersion NullableInt32 `json:"archiveVersion,omitempty"`
	// Specifies the time when the archive expires. This time is recorded as a Unix epoch Timestamp (in microseconds).
	ExpiryTimeUsecs NullableInt64 `json:"expiryTimeUsecs,omitempty"`
	// Specifies the size of the index for the archive.
	IndexSizeBytes NullableInt64 `json:"indexSizeBytes,omitempty"`
	// Specifies the instance id of the Job Run task capturing the Snapshot.
	JobRunId NullableInt64 `json:"jobRunId,omitempty"`
	// Specifies whether a full set of metadata is available now.
	MetadataComplete NullableBool `json:"metadataComplete,omitempty"`
	// Specify the time the Snapshot was captured as a Unix epoch Timestamp (in microseconds).
	SnapshotTimeUsecs NullableInt64 `json:"snapshotTimeUsecs,omitempty"`
}

// NewRemoteProtectionJobRunInstance instantiates a new RemoteProtectionJobRunInstance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRemoteProtectionJobRunInstance() *RemoteProtectionJobRunInstance {
	this := RemoteProtectionJobRunInstance{}
	return &this
}

// NewRemoteProtectionJobRunInstanceWithDefaults instantiates a new RemoteProtectionJobRunInstance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRemoteProtectionJobRunInstanceWithDefaults() *RemoteProtectionJobRunInstance {
	this := RemoteProtectionJobRunInstance{}
	return &this
}

// GetArchiveTaskUid returns the ArchiveTaskUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInstance) GetArchiveTaskUid() UniversalId {
	if o == nil || o.ArchiveTaskUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.ArchiveTaskUid.Get()
}

// GetArchiveTaskUidOk returns a tuple with the ArchiveTaskUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInstance) GetArchiveTaskUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchiveTaskUid.Get(), o.ArchiveTaskUid.IsSet()
}

// HasArchiveTaskUid returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInstance) HasArchiveTaskUid() bool {
	if o != nil && o.ArchiveTaskUid.IsSet() {
		return true
	}

	return false
}

// SetArchiveTaskUid gets a reference to the given NullableUniversalId and assigns it to the ArchiveTaskUid field.
func (o *RemoteProtectionJobRunInstance) SetArchiveTaskUid(v UniversalId) {
	o.ArchiveTaskUid.Set(&v)
}
// SetArchiveTaskUidNil sets the value for ArchiveTaskUid to be an explicit nil
func (o *RemoteProtectionJobRunInstance) SetArchiveTaskUidNil() {
	o.ArchiveTaskUid.Set(nil)
}

// UnsetArchiveTaskUid ensures that no value is present for ArchiveTaskUid, not even an explicit nil
func (o *RemoteProtectionJobRunInstance) UnsetArchiveTaskUid() {
	o.ArchiveTaskUid.Unset()
}

// GetArchiveVersion returns the ArchiveVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInstance) GetArchiveVersion() int32 {
	if o == nil || o.ArchiveVersion.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ArchiveVersion.Get()
}

// GetArchiveVersionOk returns a tuple with the ArchiveVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInstance) GetArchiveVersionOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchiveVersion.Get(), o.ArchiveVersion.IsSet()
}

// HasArchiveVersion returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInstance) HasArchiveVersion() bool {
	if o != nil && o.ArchiveVersion.IsSet() {
		return true
	}

	return false
}

// SetArchiveVersion gets a reference to the given NullableInt32 and assigns it to the ArchiveVersion field.
func (o *RemoteProtectionJobRunInstance) SetArchiveVersion(v int32) {
	o.ArchiveVersion.Set(&v)
}
// SetArchiveVersionNil sets the value for ArchiveVersion to be an explicit nil
func (o *RemoteProtectionJobRunInstance) SetArchiveVersionNil() {
	o.ArchiveVersion.Set(nil)
}

// UnsetArchiveVersion ensures that no value is present for ArchiveVersion, not even an explicit nil
func (o *RemoteProtectionJobRunInstance) UnsetArchiveVersion() {
	o.ArchiveVersion.Unset()
}

// GetExpiryTimeUsecs returns the ExpiryTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInstance) GetExpiryTimeUsecs() int64 {
	if o == nil || o.ExpiryTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ExpiryTimeUsecs.Get()
}

// GetExpiryTimeUsecsOk returns a tuple with the ExpiryTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInstance) GetExpiryTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ExpiryTimeUsecs.Get(), o.ExpiryTimeUsecs.IsSet()
}

// HasExpiryTimeUsecs returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInstance) HasExpiryTimeUsecs() bool {
	if o != nil && o.ExpiryTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetExpiryTimeUsecs gets a reference to the given NullableInt64 and assigns it to the ExpiryTimeUsecs field.
func (o *RemoteProtectionJobRunInstance) SetExpiryTimeUsecs(v int64) {
	o.ExpiryTimeUsecs.Set(&v)
}
// SetExpiryTimeUsecsNil sets the value for ExpiryTimeUsecs to be an explicit nil
func (o *RemoteProtectionJobRunInstance) SetExpiryTimeUsecsNil() {
	o.ExpiryTimeUsecs.Set(nil)
}

// UnsetExpiryTimeUsecs ensures that no value is present for ExpiryTimeUsecs, not even an explicit nil
func (o *RemoteProtectionJobRunInstance) UnsetExpiryTimeUsecs() {
	o.ExpiryTimeUsecs.Unset()
}

// GetIndexSizeBytes returns the IndexSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInstance) GetIndexSizeBytes() int64 {
	if o == nil || o.IndexSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.IndexSizeBytes.Get()
}

// GetIndexSizeBytesOk returns a tuple with the IndexSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInstance) GetIndexSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IndexSizeBytes.Get(), o.IndexSizeBytes.IsSet()
}

// HasIndexSizeBytes returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInstance) HasIndexSizeBytes() bool {
	if o != nil && o.IndexSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetIndexSizeBytes gets a reference to the given NullableInt64 and assigns it to the IndexSizeBytes field.
func (o *RemoteProtectionJobRunInstance) SetIndexSizeBytes(v int64) {
	o.IndexSizeBytes.Set(&v)
}
// SetIndexSizeBytesNil sets the value for IndexSizeBytes to be an explicit nil
func (o *RemoteProtectionJobRunInstance) SetIndexSizeBytesNil() {
	o.IndexSizeBytes.Set(nil)
}

// UnsetIndexSizeBytes ensures that no value is present for IndexSizeBytes, not even an explicit nil
func (o *RemoteProtectionJobRunInstance) UnsetIndexSizeBytes() {
	o.IndexSizeBytes.Unset()
}

// GetJobRunId returns the JobRunId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInstance) GetJobRunId() int64 {
	if o == nil || o.JobRunId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.JobRunId.Get()
}

// GetJobRunIdOk returns a tuple with the JobRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInstance) GetJobRunIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobRunId.Get(), o.JobRunId.IsSet()
}

// HasJobRunId returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInstance) HasJobRunId() bool {
	if o != nil && o.JobRunId.IsSet() {
		return true
	}

	return false
}

// SetJobRunId gets a reference to the given NullableInt64 and assigns it to the JobRunId field.
func (o *RemoteProtectionJobRunInstance) SetJobRunId(v int64) {
	o.JobRunId.Set(&v)
}
// SetJobRunIdNil sets the value for JobRunId to be an explicit nil
func (o *RemoteProtectionJobRunInstance) SetJobRunIdNil() {
	o.JobRunId.Set(nil)
}

// UnsetJobRunId ensures that no value is present for JobRunId, not even an explicit nil
func (o *RemoteProtectionJobRunInstance) UnsetJobRunId() {
	o.JobRunId.Unset()
}

// GetMetadataComplete returns the MetadataComplete field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInstance) GetMetadataComplete() bool {
	if o == nil || o.MetadataComplete.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MetadataComplete.Get()
}

// GetMetadataCompleteOk returns a tuple with the MetadataComplete field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInstance) GetMetadataCompleteOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MetadataComplete.Get(), o.MetadataComplete.IsSet()
}

// HasMetadataComplete returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInstance) HasMetadataComplete() bool {
	if o != nil && o.MetadataComplete.IsSet() {
		return true
	}

	return false
}

// SetMetadataComplete gets a reference to the given NullableBool and assigns it to the MetadataComplete field.
func (o *RemoteProtectionJobRunInstance) SetMetadataComplete(v bool) {
	o.MetadataComplete.Set(&v)
}
// SetMetadataCompleteNil sets the value for MetadataComplete to be an explicit nil
func (o *RemoteProtectionJobRunInstance) SetMetadataCompleteNil() {
	o.MetadataComplete.Set(nil)
}

// UnsetMetadataComplete ensures that no value is present for MetadataComplete, not even an explicit nil
func (o *RemoteProtectionJobRunInstance) UnsetMetadataComplete() {
	o.MetadataComplete.Unset()
}

// GetSnapshotTimeUsecs returns the SnapshotTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RemoteProtectionJobRunInstance) GetSnapshotTimeUsecs() int64 {
	if o == nil || o.SnapshotTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SnapshotTimeUsecs.Get()
}

// GetSnapshotTimeUsecsOk returns a tuple with the SnapshotTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RemoteProtectionJobRunInstance) GetSnapshotTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SnapshotTimeUsecs.Get(), o.SnapshotTimeUsecs.IsSet()
}

// HasSnapshotTimeUsecs returns a boolean if a field has been set.
func (o *RemoteProtectionJobRunInstance) HasSnapshotTimeUsecs() bool {
	if o != nil && o.SnapshotTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetSnapshotTimeUsecs gets a reference to the given NullableInt64 and assigns it to the SnapshotTimeUsecs field.
func (o *RemoteProtectionJobRunInstance) SetSnapshotTimeUsecs(v int64) {
	o.SnapshotTimeUsecs.Set(&v)
}
// SetSnapshotTimeUsecsNil sets the value for SnapshotTimeUsecs to be an explicit nil
func (o *RemoteProtectionJobRunInstance) SetSnapshotTimeUsecsNil() {
	o.SnapshotTimeUsecs.Set(nil)
}

// UnsetSnapshotTimeUsecs ensures that no value is present for SnapshotTimeUsecs, not even an explicit nil
func (o *RemoteProtectionJobRunInstance) UnsetSnapshotTimeUsecs() {
	o.SnapshotTimeUsecs.Unset()
}

func (o RemoteProtectionJobRunInstance) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveTaskUid.IsSet() {
		toSerialize["archiveTaskUid"] = o.ArchiveTaskUid.Get()
	}
	if o.ArchiveVersion.IsSet() {
		toSerialize["archiveVersion"] = o.ArchiveVersion.Get()
	}
	if o.ExpiryTimeUsecs.IsSet() {
		toSerialize["expiryTimeUsecs"] = o.ExpiryTimeUsecs.Get()
	}
	if o.IndexSizeBytes.IsSet() {
		toSerialize["indexSizeBytes"] = o.IndexSizeBytes.Get()
	}
	if o.JobRunId.IsSet() {
		toSerialize["jobRunId"] = o.JobRunId.Get()
	}
	if o.MetadataComplete.IsSet() {
		toSerialize["metadataComplete"] = o.MetadataComplete.Get()
	}
	if o.SnapshotTimeUsecs.IsSet() {
		toSerialize["snapshotTimeUsecs"] = o.SnapshotTimeUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRemoteProtectionJobRunInstance struct {
	value *RemoteProtectionJobRunInstance
	isSet bool
}

func (v NullableRemoteProtectionJobRunInstance) Get() *RemoteProtectionJobRunInstance {
	return v.value
}

func (v *NullableRemoteProtectionJobRunInstance) Set(val *RemoteProtectionJobRunInstance) {
	v.value = val
	v.isSet = true
}

func (v NullableRemoteProtectionJobRunInstance) IsSet() bool {
	return v.isSet
}

func (v *NullableRemoteProtectionJobRunInstance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRemoteProtectionJobRunInstance(val *RemoteProtectionJobRunInstance) *NullableRemoteProtectionJobRunInstance {
	return &NullableRemoteProtectionJobRunInstance{value: val, isSet: true}
}

func (v NullableRemoteProtectionJobRunInstance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRemoteProtectionJobRunInstance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


