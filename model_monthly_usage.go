/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// MonthlyUsage struct for MonthlyUsage
type MonthlyUsage struct {
	FeatureName NullableString `json:"featureName,omitempty"`
	MonthlyAvgUsage []int64 `json:"monthlyAvgUsage,omitempty"`
}

// NewMonthlyUsage instantiates a new MonthlyUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMonthlyUsage() *MonthlyUsage {
	this := MonthlyUsage{}
	return &this
}

// NewMonthlyUsageWithDefaults instantiates a new MonthlyUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMonthlyUsageWithDefaults() *MonthlyUsage {
	this := MonthlyUsage{}
	return &this
}

// GetFeatureName returns the FeatureName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MonthlyUsage) GetFeatureName() string {
	if o == nil || o.FeatureName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FeatureName.Get()
}

// GetFeatureNameOk returns a tuple with the FeatureName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthlyUsage) GetFeatureNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FeatureName.Get(), o.FeatureName.IsSet()
}

// HasFeatureName returns a boolean if a field has been set.
func (o *MonthlyUsage) HasFeatureName() bool {
	if o != nil && o.FeatureName.IsSet() {
		return true
	}

	return false
}

// SetFeatureName gets a reference to the given NullableString and assigns it to the FeatureName field.
func (o *MonthlyUsage) SetFeatureName(v string) {
	o.FeatureName.Set(&v)
}
// SetFeatureNameNil sets the value for FeatureName to be an explicit nil
func (o *MonthlyUsage) SetFeatureNameNil() {
	o.FeatureName.Set(nil)
}

// UnsetFeatureName ensures that no value is present for FeatureName, not even an explicit nil
func (o *MonthlyUsage) UnsetFeatureName() {
	o.FeatureName.Unset()
}

// GetMonthlyAvgUsage returns the MonthlyAvgUsage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MonthlyUsage) GetMonthlyAvgUsage() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.MonthlyAvgUsage
}

// GetMonthlyAvgUsageOk returns a tuple with the MonthlyAvgUsage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MonthlyUsage) GetMonthlyAvgUsageOk() (*[]int64, bool) {
	if o == nil || o.MonthlyAvgUsage == nil {
		return nil, false
	}
	return &o.MonthlyAvgUsage, true
}

// HasMonthlyAvgUsage returns a boolean if a field has been set.
func (o *MonthlyUsage) HasMonthlyAvgUsage() bool {
	if o != nil && o.MonthlyAvgUsage != nil {
		return true
	}

	return false
}

// SetMonthlyAvgUsage gets a reference to the given []int64 and assigns it to the MonthlyAvgUsage field.
func (o *MonthlyUsage) SetMonthlyAvgUsage(v []int64) {
	o.MonthlyAvgUsage = v
}

func (o MonthlyUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FeatureName.IsSet() {
		toSerialize["featureName"] = o.FeatureName.Get()
	}
	if o.MonthlyAvgUsage != nil {
		toSerialize["monthlyAvgUsage"] = o.MonthlyAvgUsage
	}
	return json.Marshal(toSerialize)
}

type NullableMonthlyUsage struct {
	value *MonthlyUsage
	isSet bool
}

func (v NullableMonthlyUsage) Get() *MonthlyUsage {
	return v.value
}

func (v *NullableMonthlyUsage) Set(val *MonthlyUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableMonthlyUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableMonthlyUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMonthlyUsage(val *MonthlyUsage) *NullableMonthlyUsage {
	return &NullableMonthlyUsage{value: val, isSet: true}
}

func (v NullableMonthlyUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMonthlyUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


