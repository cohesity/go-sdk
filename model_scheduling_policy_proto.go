/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SchedulingPolicyProto struct for SchedulingPolicyProto
type SchedulingPolicyProto struct {
	ContinuousSchedule *SchedulingPolicyProtoContinuousSchedule `json:"continuousSchedule,omitempty"`
	DailySchedule *SchedulingPolicyProtoDailySchedule `json:"dailySchedule,omitempty"`
	MonthlySchedule *SchedulingPolicyProtoMonthlySchedule `json:"monthlySchedule,omitempty"`
	// Determines how often the job should be run.
	Periodicity NullableInt32 `json:"periodicity,omitempty"`
	RpoSchedule *SchedulingPolicyProtoRPOSchedule `json:"rpoSchedule,omitempty"`
}

// NewSchedulingPolicyProto instantiates a new SchedulingPolicyProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSchedulingPolicyProto() *SchedulingPolicyProto {
	this := SchedulingPolicyProto{}
	return &this
}

// NewSchedulingPolicyProtoWithDefaults instantiates a new SchedulingPolicyProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSchedulingPolicyProtoWithDefaults() *SchedulingPolicyProto {
	this := SchedulingPolicyProto{}
	return &this
}

// GetContinuousSchedule returns the ContinuousSchedule field value if set, zero value otherwise.
func (o *SchedulingPolicyProto) GetContinuousSchedule() SchedulingPolicyProtoContinuousSchedule {
	if o == nil || o.ContinuousSchedule == nil {
		var ret SchedulingPolicyProtoContinuousSchedule
		return ret
	}
	return *o.ContinuousSchedule
}

// GetContinuousScheduleOk returns a tuple with the ContinuousSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingPolicyProto) GetContinuousScheduleOk() (*SchedulingPolicyProtoContinuousSchedule, bool) {
	if o == nil || o.ContinuousSchedule == nil {
		return nil, false
	}
	return o.ContinuousSchedule, true
}

// HasContinuousSchedule returns a boolean if a field has been set.
func (o *SchedulingPolicyProto) HasContinuousSchedule() bool {
	if o != nil && o.ContinuousSchedule != nil {
		return true
	}

	return false
}

// SetContinuousSchedule gets a reference to the given SchedulingPolicyProtoContinuousSchedule and assigns it to the ContinuousSchedule field.
func (o *SchedulingPolicyProto) SetContinuousSchedule(v SchedulingPolicyProtoContinuousSchedule) {
	o.ContinuousSchedule = &v
}

// GetDailySchedule returns the DailySchedule field value if set, zero value otherwise.
func (o *SchedulingPolicyProto) GetDailySchedule() SchedulingPolicyProtoDailySchedule {
	if o == nil || o.DailySchedule == nil {
		var ret SchedulingPolicyProtoDailySchedule
		return ret
	}
	return *o.DailySchedule
}

// GetDailyScheduleOk returns a tuple with the DailySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingPolicyProto) GetDailyScheduleOk() (*SchedulingPolicyProtoDailySchedule, bool) {
	if o == nil || o.DailySchedule == nil {
		return nil, false
	}
	return o.DailySchedule, true
}

// HasDailySchedule returns a boolean if a field has been set.
func (o *SchedulingPolicyProto) HasDailySchedule() bool {
	if o != nil && o.DailySchedule != nil {
		return true
	}

	return false
}

// SetDailySchedule gets a reference to the given SchedulingPolicyProtoDailySchedule and assigns it to the DailySchedule field.
func (o *SchedulingPolicyProto) SetDailySchedule(v SchedulingPolicyProtoDailySchedule) {
	o.DailySchedule = &v
}

// GetMonthlySchedule returns the MonthlySchedule field value if set, zero value otherwise.
func (o *SchedulingPolicyProto) GetMonthlySchedule() SchedulingPolicyProtoMonthlySchedule {
	if o == nil || o.MonthlySchedule == nil {
		var ret SchedulingPolicyProtoMonthlySchedule
		return ret
	}
	return *o.MonthlySchedule
}

// GetMonthlyScheduleOk returns a tuple with the MonthlySchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingPolicyProto) GetMonthlyScheduleOk() (*SchedulingPolicyProtoMonthlySchedule, bool) {
	if o == nil || o.MonthlySchedule == nil {
		return nil, false
	}
	return o.MonthlySchedule, true
}

// HasMonthlySchedule returns a boolean if a field has been set.
func (o *SchedulingPolicyProto) HasMonthlySchedule() bool {
	if o != nil && o.MonthlySchedule != nil {
		return true
	}

	return false
}

// SetMonthlySchedule gets a reference to the given SchedulingPolicyProtoMonthlySchedule and assigns it to the MonthlySchedule field.
func (o *SchedulingPolicyProto) SetMonthlySchedule(v SchedulingPolicyProtoMonthlySchedule) {
	o.MonthlySchedule = &v
}

// GetPeriodicity returns the Periodicity field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SchedulingPolicyProto) GetPeriodicity() int32 {
	if o == nil || o.Periodicity.Get() == nil {
		var ret int32
		return ret
	}
	return *o.Periodicity.Get()
}

// GetPeriodicityOk returns a tuple with the Periodicity field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SchedulingPolicyProto) GetPeriodicityOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Periodicity.Get(), o.Periodicity.IsSet()
}

// HasPeriodicity returns a boolean if a field has been set.
func (o *SchedulingPolicyProto) HasPeriodicity() bool {
	if o != nil && o.Periodicity.IsSet() {
		return true
	}

	return false
}

// SetPeriodicity gets a reference to the given NullableInt32 and assigns it to the Periodicity field.
func (o *SchedulingPolicyProto) SetPeriodicity(v int32) {
	o.Periodicity.Set(&v)
}
// SetPeriodicityNil sets the value for Periodicity to be an explicit nil
func (o *SchedulingPolicyProto) SetPeriodicityNil() {
	o.Periodicity.Set(nil)
}

// UnsetPeriodicity ensures that no value is present for Periodicity, not even an explicit nil
func (o *SchedulingPolicyProto) UnsetPeriodicity() {
	o.Periodicity.Unset()
}

// GetRpoSchedule returns the RpoSchedule field value if set, zero value otherwise.
func (o *SchedulingPolicyProto) GetRpoSchedule() SchedulingPolicyProtoRPOSchedule {
	if o == nil || o.RpoSchedule == nil {
		var ret SchedulingPolicyProtoRPOSchedule
		return ret
	}
	return *o.RpoSchedule
}

// GetRpoScheduleOk returns a tuple with the RpoSchedule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SchedulingPolicyProto) GetRpoScheduleOk() (*SchedulingPolicyProtoRPOSchedule, bool) {
	if o == nil || o.RpoSchedule == nil {
		return nil, false
	}
	return o.RpoSchedule, true
}

// HasRpoSchedule returns a boolean if a field has been set.
func (o *SchedulingPolicyProto) HasRpoSchedule() bool {
	if o != nil && o.RpoSchedule != nil {
		return true
	}

	return false
}

// SetRpoSchedule gets a reference to the given SchedulingPolicyProtoRPOSchedule and assigns it to the RpoSchedule field.
func (o *SchedulingPolicyProto) SetRpoSchedule(v SchedulingPolicyProtoRPOSchedule) {
	o.RpoSchedule = &v
}

func (o SchedulingPolicyProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContinuousSchedule != nil {
		toSerialize["continuousSchedule"] = o.ContinuousSchedule
	}
	if o.DailySchedule != nil {
		toSerialize["dailySchedule"] = o.DailySchedule
	}
	if o.MonthlySchedule != nil {
		toSerialize["monthlySchedule"] = o.MonthlySchedule
	}
	if o.Periodicity.IsSet() {
		toSerialize["periodicity"] = o.Periodicity.Get()
	}
	if o.RpoSchedule != nil {
		toSerialize["rpoSchedule"] = o.RpoSchedule
	}
	return json.Marshal(toSerialize)
}

type NullableSchedulingPolicyProto struct {
	value *SchedulingPolicyProto
	isSet bool
}

func (v NullableSchedulingPolicyProto) Get() *SchedulingPolicyProto {
	return v.value
}

func (v *NullableSchedulingPolicyProto) Set(val *SchedulingPolicyProto) {
	v.value = val
	v.isSet = true
}

func (v NullableSchedulingPolicyProto) IsSet() bool {
	return v.isSet
}

func (v *NullableSchedulingPolicyProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSchedulingPolicyProto(val *SchedulingPolicyProto) *NullableSchedulingPolicyProto {
	return &NullableSchedulingPolicyProto{value: val, isSet: true}
}

func (v NullableSchedulingPolicyProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSchedulingPolicyProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


