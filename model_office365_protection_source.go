/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// Office365ProtectionSource Specifies a Protection Source in Office 365 environment.
type Office365ProtectionSource struct {
	// Specifies the description of the Office 365 entity.
	Description NullableString `json:"description,omitempty"`
	// Specifies the name of the office 365 entity.
	Name NullableString `json:"name,omitempty"`
	// Specifies the SMTP address for the Outlook source.
	PrimarySMTPAddress NullableString `json:"primarySMTPAddress,omitempty"`
	// Specifies the type of the Office 365 entity. Specifies the type of Office 365 entity 'kDomain' indicates the O365 domain through which authentication occurs. 'kOutlook' indicates the Exchange online entities. 'kMailbox' indicates the user's mailbox account. 'kUsers' indicates the container for User entities. 'kGroups' indicates the container for Group entities. 'kSites' indicates the container for Site entities. 'kUser' indicates an Office365 User entity. 'kGroup' indicates an Office365 Group entity. 'kSite' indicates an Office365 SharePoint Site entity.
	Type NullableString `json:"type,omitempty"`
	UserInfo *Office365UserInfo `json:"userInfo,omitempty"`
	// Specifies the UUID of the Office 365 entity.
	Uuid NullableString `json:"uuid,omitempty"`
}

// NewOffice365ProtectionSource instantiates a new Office365ProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffice365ProtectionSource() *Office365ProtectionSource {
	this := Office365ProtectionSource{}
	return &this
}

// NewOffice365ProtectionSourceWithDefaults instantiates a new Office365ProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffice365ProtectionSourceWithDefaults() *Office365ProtectionSource {
	this := Office365ProtectionSource{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365ProtectionSource) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365ProtectionSource) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *Office365ProtectionSource) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *Office365ProtectionSource) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *Office365ProtectionSource) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *Office365ProtectionSource) UnsetDescription() {
	o.Description.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365ProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365ProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *Office365ProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *Office365ProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *Office365ProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *Office365ProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetPrimarySMTPAddress returns the PrimarySMTPAddress field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365ProtectionSource) GetPrimarySMTPAddress() string {
	if o == nil || o.PrimarySMTPAddress.Get() == nil {
		var ret string
		return ret
	}
	return *o.PrimarySMTPAddress.Get()
}

// GetPrimarySMTPAddressOk returns a tuple with the PrimarySMTPAddress field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365ProtectionSource) GetPrimarySMTPAddressOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrimarySMTPAddress.Get(), o.PrimarySMTPAddress.IsSet()
}

// HasPrimarySMTPAddress returns a boolean if a field has been set.
func (o *Office365ProtectionSource) HasPrimarySMTPAddress() bool {
	if o != nil && o.PrimarySMTPAddress.IsSet() {
		return true
	}

	return false
}

// SetPrimarySMTPAddress gets a reference to the given NullableString and assigns it to the PrimarySMTPAddress field.
func (o *Office365ProtectionSource) SetPrimarySMTPAddress(v string) {
	o.PrimarySMTPAddress.Set(&v)
}
// SetPrimarySMTPAddressNil sets the value for PrimarySMTPAddress to be an explicit nil
func (o *Office365ProtectionSource) SetPrimarySMTPAddressNil() {
	o.PrimarySMTPAddress.Set(nil)
}

// UnsetPrimarySMTPAddress ensures that no value is present for PrimarySMTPAddress, not even an explicit nil
func (o *Office365ProtectionSource) UnsetPrimarySMTPAddress() {
	o.PrimarySMTPAddress.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365ProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365ProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *Office365ProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *Office365ProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *Office365ProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *Office365ProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetUserInfo returns the UserInfo field value if set, zero value otherwise.
func (o *Office365ProtectionSource) GetUserInfo() Office365UserInfo {
	if o == nil || o.UserInfo == nil {
		var ret Office365UserInfo
		return ret
	}
	return *o.UserInfo
}

// GetUserInfoOk returns a tuple with the UserInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Office365ProtectionSource) GetUserInfoOk() (*Office365UserInfo, bool) {
	if o == nil || o.UserInfo == nil {
		return nil, false
	}
	return o.UserInfo, true
}

// HasUserInfo returns a boolean if a field has been set.
func (o *Office365ProtectionSource) HasUserInfo() bool {
	if o != nil && o.UserInfo != nil {
		return true
	}

	return false
}

// SetUserInfo gets a reference to the given Office365UserInfo and assigns it to the UserInfo field.
func (o *Office365ProtectionSource) SetUserInfo(v Office365UserInfo) {
	o.UserInfo = &v
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Office365ProtectionSource) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Office365ProtectionSource) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *Office365ProtectionSource) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *Office365ProtectionSource) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *Office365ProtectionSource) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *Office365ProtectionSource) UnsetUuid() {
	o.Uuid.Unset()
}

func (o Office365ProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.PrimarySMTPAddress.IsSet() {
		toSerialize["primarySMTPAddress"] = o.PrimarySMTPAddress.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.UserInfo != nil {
		toSerialize["userInfo"] = o.UserInfo
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOffice365ProtectionSource struct {
	value *Office365ProtectionSource
	isSet bool
}

func (v NullableOffice365ProtectionSource) Get() *Office365ProtectionSource {
	return v.value
}

func (v *NullableOffice365ProtectionSource) Set(val *Office365ProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableOffice365ProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableOffice365ProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffice365ProtectionSource(val *Office365ProtectionSource) *NullableOffice365ProtectionSource {
	return &NullableOffice365ProtectionSource{value: val, isSet: true}
}

func (v NullableOffice365ProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffice365ProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


