/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// JobPolicyProto A message that specifies the policies to use for a job.
type JobPolicyProto struct {
	BackupPolicy *BackupPolicyProto `json:"backupPolicy,omitempty"`
	// Specifies additional policies that can be used to copy snapshots created by a backup run to different targets (such as a remote replica, tape etc). Each policy also specifies the retention policy that should be applied to the copied snapshots at the respective target.
	SnapshotTargetPolicyVec []SnapshotTargetPolicyProto `json:"snapshotTargetPolicyVec,omitempty"`
}

// NewJobPolicyProto instantiates a new JobPolicyProto object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJobPolicyProto() *JobPolicyProto {
	this := JobPolicyProto{}
	return &this
}

// NewJobPolicyProtoWithDefaults instantiates a new JobPolicyProto object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJobPolicyProtoWithDefaults() *JobPolicyProto {
	this := JobPolicyProto{}
	return &this
}

// GetBackupPolicy returns the BackupPolicy field value if set, zero value otherwise.
func (o *JobPolicyProto) GetBackupPolicy() BackupPolicyProto {
	if o == nil || o.BackupPolicy == nil {
		var ret BackupPolicyProto
		return ret
	}
	return *o.BackupPolicy
}

// GetBackupPolicyOk returns a tuple with the BackupPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JobPolicyProto) GetBackupPolicyOk() (*BackupPolicyProto, bool) {
	if o == nil || o.BackupPolicy == nil {
		return nil, false
	}
	return o.BackupPolicy, true
}

// HasBackupPolicy returns a boolean if a field has been set.
func (o *JobPolicyProto) HasBackupPolicy() bool {
	if o != nil && o.BackupPolicy != nil {
		return true
	}

	return false
}

// SetBackupPolicy gets a reference to the given BackupPolicyProto and assigns it to the BackupPolicy field.
func (o *JobPolicyProto) SetBackupPolicy(v BackupPolicyProto) {
	o.BackupPolicy = &v
}

// GetSnapshotTargetPolicyVec returns the SnapshotTargetPolicyVec field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *JobPolicyProto) GetSnapshotTargetPolicyVec() []SnapshotTargetPolicyProto {
	if o == nil  {
		var ret []SnapshotTargetPolicyProto
		return ret
	}
	return o.SnapshotTargetPolicyVec
}

// GetSnapshotTargetPolicyVecOk returns a tuple with the SnapshotTargetPolicyVec field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *JobPolicyProto) GetSnapshotTargetPolicyVecOk() (*[]SnapshotTargetPolicyProto, bool) {
	if o == nil || o.SnapshotTargetPolicyVec == nil {
		return nil, false
	}
	return &o.SnapshotTargetPolicyVec, true
}

// HasSnapshotTargetPolicyVec returns a boolean if a field has been set.
func (o *JobPolicyProto) HasSnapshotTargetPolicyVec() bool {
	if o != nil && o.SnapshotTargetPolicyVec != nil {
		return true
	}

	return false
}

// SetSnapshotTargetPolicyVec gets a reference to the given []SnapshotTargetPolicyProto and assigns it to the SnapshotTargetPolicyVec field.
func (o *JobPolicyProto) SetSnapshotTargetPolicyVec(v []SnapshotTargetPolicyProto) {
	o.SnapshotTargetPolicyVec = v
}

func (o JobPolicyProto) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BackupPolicy != nil {
		toSerialize["backupPolicy"] = o.BackupPolicy
	}
	if o.SnapshotTargetPolicyVec != nil {
		toSerialize["snapshotTargetPolicyVec"] = o.SnapshotTargetPolicyVec
	}
	return json.Marshal(toSerialize)
}

type NullableJobPolicyProto struct {
	value *JobPolicyProto
	isSet bool
}

func (v NullableJobPolicyProto) Get() *JobPolicyProto {
	return v.value
}

func (v *NullableJobPolicyProto) Set(val *JobPolicyProto) {
	v.value = val
	v.isSet = true
}

func (v NullableJobPolicyProto) IsSet() bool {
	return v.isSet
}

func (v *NullableJobPolicyProto) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJobPolicyProto(val *JobPolicyProto) *NullableJobPolicyProto {
	return &NullableJobPolicyProto{value: val, isSet: true}
}

func (v NullableJobPolicyProto) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJobPolicyProto) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


