/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UpdateBondParameters Specifies the parameters needed to modify the bonding mode of a bond.
type UpdateBondParameters struct {
	// Specifies the new bonding mode. 'kActiveBackup' indicates active backup bonding mode. 'k802_3ad' indicates 802.3ad bonding mode.
	BondingMode NullableString `json:"bondingMode"`
	// Specifies the LACP rate. If not specified, This value will default to 0 (slow).
	LacpRate NullableString `json:"lacpRate,omitempty"`
	// Specifies the name of the bond being updated.
	Name NullableString `json:"name"`
	// Specifies the xmit hash policy. If not specified, This value will default to 1 (layer3+4).
	XmitHashPolicy NullableString `json:"xmitHashPolicy,omitempty"`
}

// NewUpdateBondParameters instantiates a new UpdateBondParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateBondParameters(bondingMode NullableString, name NullableString) *UpdateBondParameters {
	this := UpdateBondParameters{}
	this.BondingMode = bondingMode
	this.Name = name
	return &this
}

// NewUpdateBondParametersWithDefaults instantiates a new UpdateBondParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateBondParametersWithDefaults() *UpdateBondParameters {
	this := UpdateBondParameters{}
	return &this
}

// GetBondingMode returns the BondingMode field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateBondParameters) GetBondingMode() string {
	if o == nil || o.BondingMode.Get() == nil {
		var ret string
		return ret
	}

	return *o.BondingMode.Get()
}

// GetBondingModeOk returns a tuple with the BondingMode field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateBondParameters) GetBondingModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.BondingMode.Get(), o.BondingMode.IsSet()
}

// SetBondingMode sets field value
func (o *UpdateBondParameters) SetBondingMode(v string) {
	o.BondingMode.Set(&v)
}

// GetLacpRate returns the LacpRate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateBondParameters) GetLacpRate() string {
	if o == nil || o.LacpRate.Get() == nil {
		var ret string
		return ret
	}
	return *o.LacpRate.Get()
}

// GetLacpRateOk returns a tuple with the LacpRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateBondParameters) GetLacpRateOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LacpRate.Get(), o.LacpRate.IsSet()
}

// HasLacpRate returns a boolean if a field has been set.
func (o *UpdateBondParameters) HasLacpRate() bool {
	if o != nil && o.LacpRate.IsSet() {
		return true
	}

	return false
}

// SetLacpRate gets a reference to the given NullableString and assigns it to the LacpRate field.
func (o *UpdateBondParameters) SetLacpRate(v string) {
	o.LacpRate.Set(&v)
}
// SetLacpRateNil sets the value for LacpRate to be an explicit nil
func (o *UpdateBondParameters) SetLacpRateNil() {
	o.LacpRate.Set(nil)
}

// UnsetLacpRate ensures that no value is present for LacpRate, not even an explicit nil
func (o *UpdateBondParameters) UnsetLacpRate() {
	o.LacpRate.Unset()
}

// GetName returns the Name field value
// If the value is explicit nil, the zero value for string will be returned
func (o *UpdateBondParameters) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}

	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateBondParameters) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// SetName sets field value
func (o *UpdateBondParameters) SetName(v string) {
	o.Name.Set(&v)
}

// GetXmitHashPolicy returns the XmitHashPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UpdateBondParameters) GetXmitHashPolicy() string {
	if o == nil || o.XmitHashPolicy.Get() == nil {
		var ret string
		return ret
	}
	return *o.XmitHashPolicy.Get()
}

// GetXmitHashPolicyOk returns a tuple with the XmitHashPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UpdateBondParameters) GetXmitHashPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.XmitHashPolicy.Get(), o.XmitHashPolicy.IsSet()
}

// HasXmitHashPolicy returns a boolean if a field has been set.
func (o *UpdateBondParameters) HasXmitHashPolicy() bool {
	if o != nil && o.XmitHashPolicy.IsSet() {
		return true
	}

	return false
}

// SetXmitHashPolicy gets a reference to the given NullableString and assigns it to the XmitHashPolicy field.
func (o *UpdateBondParameters) SetXmitHashPolicy(v string) {
	o.XmitHashPolicy.Set(&v)
}
// SetXmitHashPolicyNil sets the value for XmitHashPolicy to be an explicit nil
func (o *UpdateBondParameters) SetXmitHashPolicyNil() {
	o.XmitHashPolicy.Set(nil)
}

// UnsetXmitHashPolicy ensures that no value is present for XmitHashPolicy, not even an explicit nil
func (o *UpdateBondParameters) UnsetXmitHashPolicy() {
	o.XmitHashPolicy.Unset()
}

func (o UpdateBondParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["bondingMode"] = o.BondingMode.Get()
	}
	if o.LacpRate.IsSet() {
		toSerialize["lacpRate"] = o.LacpRate.Get()
	}
	if true {
		toSerialize["name"] = o.Name.Get()
	}
	if o.XmitHashPolicy.IsSet() {
		toSerialize["xmitHashPolicy"] = o.XmitHashPolicy.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUpdateBondParameters struct {
	value *UpdateBondParameters
	isSet bool
}

func (v NullableUpdateBondParameters) Get() *UpdateBondParameters {
	return v.value
}

func (v *NullableUpdateBondParameters) Set(val *UpdateBondParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateBondParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateBondParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateBondParameters(val *UpdateBondParameters) *NullableUpdateBondParameters {
	return &NullableUpdateBondParameters{value: val, isSet: true}
}

func (v NullableUpdateBondParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateBondParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


