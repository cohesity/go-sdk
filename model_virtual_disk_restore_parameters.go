/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VirtualDiskRestoreParameters Specifies the parameters to recover virtual disks of a vm.
type VirtualDiskRestoreParameters struct {
	// Specifies whether to power off the VM before recovering virtual disks.
	PowerOffVmBeforeRecovery NullableBool `json:"powerOffVmBeforeRecovery,omitempty"`
	// Specifies whether to power on the VM after recovering virtual disks.
	PowerOnVmAfterRecovery NullableBool `json:"powerOnVmAfterRecovery,omitempty"`
	// Specifies the target entity to which the disks should be attached.
	TargetSourceId NullableInt64 `json:"targetSourceId,omitempty"`
	// Specifies the list of virtual disks mappings.
	VirtualDiskMappings []VirtualDiskMapping `json:"virtualDiskMappings,omitempty"`
}

// NewVirtualDiskRestoreParameters instantiates a new VirtualDiskRestoreParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVirtualDiskRestoreParameters() *VirtualDiskRestoreParameters {
	this := VirtualDiskRestoreParameters{}
	return &this
}

// NewVirtualDiskRestoreParametersWithDefaults instantiates a new VirtualDiskRestoreParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVirtualDiskRestoreParametersWithDefaults() *VirtualDiskRestoreParameters {
	this := VirtualDiskRestoreParameters{}
	return &this
}

// GetPowerOffVmBeforeRecovery returns the PowerOffVmBeforeRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskRestoreParameters) GetPowerOffVmBeforeRecovery() bool {
	if o == nil || o.PowerOffVmBeforeRecovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PowerOffVmBeforeRecovery.Get()
}

// GetPowerOffVmBeforeRecoveryOk returns a tuple with the PowerOffVmBeforeRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskRestoreParameters) GetPowerOffVmBeforeRecoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PowerOffVmBeforeRecovery.Get(), o.PowerOffVmBeforeRecovery.IsSet()
}

// HasPowerOffVmBeforeRecovery returns a boolean if a field has been set.
func (o *VirtualDiskRestoreParameters) HasPowerOffVmBeforeRecovery() bool {
	if o != nil && o.PowerOffVmBeforeRecovery.IsSet() {
		return true
	}

	return false
}

// SetPowerOffVmBeforeRecovery gets a reference to the given NullableBool and assigns it to the PowerOffVmBeforeRecovery field.
func (o *VirtualDiskRestoreParameters) SetPowerOffVmBeforeRecovery(v bool) {
	o.PowerOffVmBeforeRecovery.Set(&v)
}
// SetPowerOffVmBeforeRecoveryNil sets the value for PowerOffVmBeforeRecovery to be an explicit nil
func (o *VirtualDiskRestoreParameters) SetPowerOffVmBeforeRecoveryNil() {
	o.PowerOffVmBeforeRecovery.Set(nil)
}

// UnsetPowerOffVmBeforeRecovery ensures that no value is present for PowerOffVmBeforeRecovery, not even an explicit nil
func (o *VirtualDiskRestoreParameters) UnsetPowerOffVmBeforeRecovery() {
	o.PowerOffVmBeforeRecovery.Unset()
}

// GetPowerOnVmAfterRecovery returns the PowerOnVmAfterRecovery field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskRestoreParameters) GetPowerOnVmAfterRecovery() bool {
	if o == nil || o.PowerOnVmAfterRecovery.Get() == nil {
		var ret bool
		return ret
	}
	return *o.PowerOnVmAfterRecovery.Get()
}

// GetPowerOnVmAfterRecoveryOk returns a tuple with the PowerOnVmAfterRecovery field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskRestoreParameters) GetPowerOnVmAfterRecoveryOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PowerOnVmAfterRecovery.Get(), o.PowerOnVmAfterRecovery.IsSet()
}

// HasPowerOnVmAfterRecovery returns a boolean if a field has been set.
func (o *VirtualDiskRestoreParameters) HasPowerOnVmAfterRecovery() bool {
	if o != nil && o.PowerOnVmAfterRecovery.IsSet() {
		return true
	}

	return false
}

// SetPowerOnVmAfterRecovery gets a reference to the given NullableBool and assigns it to the PowerOnVmAfterRecovery field.
func (o *VirtualDiskRestoreParameters) SetPowerOnVmAfterRecovery(v bool) {
	o.PowerOnVmAfterRecovery.Set(&v)
}
// SetPowerOnVmAfterRecoveryNil sets the value for PowerOnVmAfterRecovery to be an explicit nil
func (o *VirtualDiskRestoreParameters) SetPowerOnVmAfterRecoveryNil() {
	o.PowerOnVmAfterRecovery.Set(nil)
}

// UnsetPowerOnVmAfterRecovery ensures that no value is present for PowerOnVmAfterRecovery, not even an explicit nil
func (o *VirtualDiskRestoreParameters) UnsetPowerOnVmAfterRecovery() {
	o.PowerOnVmAfterRecovery.Unset()
}

// GetTargetSourceId returns the TargetSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskRestoreParameters) GetTargetSourceId() int64 {
	if o == nil || o.TargetSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TargetSourceId.Get()
}

// GetTargetSourceIdOk returns a tuple with the TargetSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskRestoreParameters) GetTargetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetSourceId.Get(), o.TargetSourceId.IsSet()
}

// HasTargetSourceId returns a boolean if a field has been set.
func (o *VirtualDiskRestoreParameters) HasTargetSourceId() bool {
	if o != nil && o.TargetSourceId.IsSet() {
		return true
	}

	return false
}

// SetTargetSourceId gets a reference to the given NullableInt64 and assigns it to the TargetSourceId field.
func (o *VirtualDiskRestoreParameters) SetTargetSourceId(v int64) {
	o.TargetSourceId.Set(&v)
}
// SetTargetSourceIdNil sets the value for TargetSourceId to be an explicit nil
func (o *VirtualDiskRestoreParameters) SetTargetSourceIdNil() {
	o.TargetSourceId.Set(nil)
}

// UnsetTargetSourceId ensures that no value is present for TargetSourceId, not even an explicit nil
func (o *VirtualDiskRestoreParameters) UnsetTargetSourceId() {
	o.TargetSourceId.Unset()
}

// GetVirtualDiskMappings returns the VirtualDiskMappings field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VirtualDiskRestoreParameters) GetVirtualDiskMappings() []VirtualDiskMapping {
	if o == nil  {
		var ret []VirtualDiskMapping
		return ret
	}
	return o.VirtualDiskMappings
}

// GetVirtualDiskMappingsOk returns a tuple with the VirtualDiskMappings field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VirtualDiskRestoreParameters) GetVirtualDiskMappingsOk() (*[]VirtualDiskMapping, bool) {
	if o == nil || o.VirtualDiskMappings == nil {
		return nil, false
	}
	return &o.VirtualDiskMappings, true
}

// HasVirtualDiskMappings returns a boolean if a field has been set.
func (o *VirtualDiskRestoreParameters) HasVirtualDiskMappings() bool {
	if o != nil && o.VirtualDiskMappings != nil {
		return true
	}

	return false
}

// SetVirtualDiskMappings gets a reference to the given []VirtualDiskMapping and assigns it to the VirtualDiskMappings field.
func (o *VirtualDiskRestoreParameters) SetVirtualDiskMappings(v []VirtualDiskMapping) {
	o.VirtualDiskMappings = v
}

func (o VirtualDiskRestoreParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PowerOffVmBeforeRecovery.IsSet() {
		toSerialize["powerOffVmBeforeRecovery"] = o.PowerOffVmBeforeRecovery.Get()
	}
	if o.PowerOnVmAfterRecovery.IsSet() {
		toSerialize["powerOnVmAfterRecovery"] = o.PowerOnVmAfterRecovery.Get()
	}
	if o.TargetSourceId.IsSet() {
		toSerialize["targetSourceId"] = o.TargetSourceId.Get()
	}
	if o.VirtualDiskMappings != nil {
		toSerialize["virtualDiskMappings"] = o.VirtualDiskMappings
	}
	return json.Marshal(toSerialize)
}

type NullableVirtualDiskRestoreParameters struct {
	value *VirtualDiskRestoreParameters
	isSet bool
}

func (v NullableVirtualDiskRestoreParameters) Get() *VirtualDiskRestoreParameters {
	return v.value
}

func (v *NullableVirtualDiskRestoreParameters) Set(val *VirtualDiskRestoreParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableVirtualDiskRestoreParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableVirtualDiskRestoreParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVirtualDiskRestoreParameters(val *VirtualDiskRestoreParameters) *NullableVirtualDiskRestoreParameters {
	return &NullableVirtualDiskRestoreParameters{value: val, isSet: true}
}

func (v NullableVirtualDiskRestoreParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVirtualDiskRestoreParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


