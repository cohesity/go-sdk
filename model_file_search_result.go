/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FileSearchResult Specifies details about the found file or folder.
type FileSearchResult struct {
	AdObjectMetaData *AdObjectMetaData `json:"adObjectMetaData,omitempty"`
	// Specifies the inferred document type.
	DocumentType NullableString `json:"documentType,omitempty"`
	EmailMetaData *EmailMetaData `json:"emailMetaData,omitempty"`
	// Array of File Versions.  Specifies the different snapshot versions of a file or folder that were captured at different times.
	FileVersions []FileVersion `json:"fileVersions,omitempty"`
	// Specifies the name of the found file or folder.
	Filename NullableString `json:"filename,omitempty"`
	// Specifies if the found item is a folder. If true, the found item is a folder.
	IsFolder NullableBool `json:"isFolder,omitempty"`
	// Specifies the Job id for the Protection Job that is currently associated with object that contains the backed up file or folder. If the file or folder was backed up on current Cohesity Cluster, this field contains the id for the Job that captured the object that contains the file or folder. If the file or folder was backed up on a Primary Cluster and replicated to this Cohesity Cluster, a new Inactive Job is created, the object that contains the file or folder is now associated with new Inactive Job, and this field contains the id of the new Inactive Job.
	JobId NullableInt64 `json:"jobId,omitempty"`
	// Specifies the universal id of the Protection Job that backed up the object that contains the file or folder.
	JobUid NullableUniversalId `json:"jobUid,omitempty"`
	OneDriveDocumentMetadata *OneDriveDocumentMetadata `json:"oneDriveDocumentMetadata,omitempty"`
	ProtectionSource *ProtectionSource `json:"protectionSource,omitempty"`
	// Specifies the id of the top-level registered source (such as a vCenter Server) where the source object that contains the the file or folder is stored.
	RegisteredSourceId NullableInt64 `json:"registeredSourceId,omitempty"`
	SharepointDocumentMetadata *SharepointDocumentMetadata `json:"sharepointDocumentMetadata,omitempty"`
	// Snapshot tags present on this document
	SnapshotTags []string `json:"snapshotTags,omitempty"`
	// Specifies the source id of the object that contains the file or folder.
	SourceId NullableInt64 `json:"sourceId,omitempty"`
	// Tags present on this document.
	Tags []string `json:"tags,omitempty"`
	// Mapping from snapshot tags to.
	TagsToSnapshotsMap map[string][]int64 `json:"tagsToSnapshotsMap,omitempty"`
	// Specifies the type of the file document such as KDirectory, kFile, etc.
	Type NullableString `json:"type,omitempty"`
	// Specifies the id of the Domain (View Box) where the source object that contains the file or folder is stored.
	ViewBoxId NullableInt64 `json:"viewBoxId,omitempty"`
}

// NewFileSearchResult instantiates a new FileSearchResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileSearchResult() *FileSearchResult {
	this := FileSearchResult{}
	return &this
}

// NewFileSearchResultWithDefaults instantiates a new FileSearchResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileSearchResultWithDefaults() *FileSearchResult {
	this := FileSearchResult{}
	return &this
}

// GetAdObjectMetaData returns the AdObjectMetaData field value if set, zero value otherwise.
func (o *FileSearchResult) GetAdObjectMetaData() AdObjectMetaData {
	if o == nil || o.AdObjectMetaData == nil {
		var ret AdObjectMetaData
		return ret
	}
	return *o.AdObjectMetaData
}

// GetAdObjectMetaDataOk returns a tuple with the AdObjectMetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSearchResult) GetAdObjectMetaDataOk() (*AdObjectMetaData, bool) {
	if o == nil || o.AdObjectMetaData == nil {
		return nil, false
	}
	return o.AdObjectMetaData, true
}

// HasAdObjectMetaData returns a boolean if a field has been set.
func (o *FileSearchResult) HasAdObjectMetaData() bool {
	if o != nil && o.AdObjectMetaData != nil {
		return true
	}

	return false
}

// SetAdObjectMetaData gets a reference to the given AdObjectMetaData and assigns it to the AdObjectMetaData field.
func (o *FileSearchResult) SetAdObjectMetaData(v AdObjectMetaData) {
	o.AdObjectMetaData = &v
}

// GetDocumentType returns the DocumentType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetDocumentType() string {
	if o == nil || o.DocumentType.Get() == nil {
		var ret string
		return ret
	}
	return *o.DocumentType.Get()
}

// GetDocumentTypeOk returns a tuple with the DocumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetDocumentTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DocumentType.Get(), o.DocumentType.IsSet()
}

// HasDocumentType returns a boolean if a field has been set.
func (o *FileSearchResult) HasDocumentType() bool {
	if o != nil && o.DocumentType.IsSet() {
		return true
	}

	return false
}

// SetDocumentType gets a reference to the given NullableString and assigns it to the DocumentType field.
func (o *FileSearchResult) SetDocumentType(v string) {
	o.DocumentType.Set(&v)
}
// SetDocumentTypeNil sets the value for DocumentType to be an explicit nil
func (o *FileSearchResult) SetDocumentTypeNil() {
	o.DocumentType.Set(nil)
}

// UnsetDocumentType ensures that no value is present for DocumentType, not even an explicit nil
func (o *FileSearchResult) UnsetDocumentType() {
	o.DocumentType.Unset()
}

// GetEmailMetaData returns the EmailMetaData field value if set, zero value otherwise.
func (o *FileSearchResult) GetEmailMetaData() EmailMetaData {
	if o == nil || o.EmailMetaData == nil {
		var ret EmailMetaData
		return ret
	}
	return *o.EmailMetaData
}

// GetEmailMetaDataOk returns a tuple with the EmailMetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSearchResult) GetEmailMetaDataOk() (*EmailMetaData, bool) {
	if o == nil || o.EmailMetaData == nil {
		return nil, false
	}
	return o.EmailMetaData, true
}

// HasEmailMetaData returns a boolean if a field has been set.
func (o *FileSearchResult) HasEmailMetaData() bool {
	if o != nil && o.EmailMetaData != nil {
		return true
	}

	return false
}

// SetEmailMetaData gets a reference to the given EmailMetaData and assigns it to the EmailMetaData field.
func (o *FileSearchResult) SetEmailMetaData(v EmailMetaData) {
	o.EmailMetaData = &v
}

// GetFileVersions returns the FileVersions field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetFileVersions() []FileVersion {
	if o == nil  {
		var ret []FileVersion
		return ret
	}
	return o.FileVersions
}

// GetFileVersionsOk returns a tuple with the FileVersions field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetFileVersionsOk() (*[]FileVersion, bool) {
	if o == nil || o.FileVersions == nil {
		return nil, false
	}
	return &o.FileVersions, true
}

// HasFileVersions returns a boolean if a field has been set.
func (o *FileSearchResult) HasFileVersions() bool {
	if o != nil && o.FileVersions != nil {
		return true
	}

	return false
}

// SetFileVersions gets a reference to the given []FileVersion and assigns it to the FileVersions field.
func (o *FileSearchResult) SetFileVersions(v []FileVersion) {
	o.FileVersions = v
}

// GetFilename returns the Filename field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetFilename() string {
	if o == nil || o.Filename.Get() == nil {
		var ret string
		return ret
	}
	return *o.Filename.Get()
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetFilenameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Filename.Get(), o.Filename.IsSet()
}

// HasFilename returns a boolean if a field has been set.
func (o *FileSearchResult) HasFilename() bool {
	if o != nil && o.Filename.IsSet() {
		return true
	}

	return false
}

// SetFilename gets a reference to the given NullableString and assigns it to the Filename field.
func (o *FileSearchResult) SetFilename(v string) {
	o.Filename.Set(&v)
}
// SetFilenameNil sets the value for Filename to be an explicit nil
func (o *FileSearchResult) SetFilenameNil() {
	o.Filename.Set(nil)
}

// UnsetFilename ensures that no value is present for Filename, not even an explicit nil
func (o *FileSearchResult) UnsetFilename() {
	o.Filename.Unset()
}

// GetIsFolder returns the IsFolder field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetIsFolder() bool {
	if o == nil || o.IsFolder.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsFolder.Get()
}

// GetIsFolderOk returns a tuple with the IsFolder field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetIsFolderOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsFolder.Get(), o.IsFolder.IsSet()
}

// HasIsFolder returns a boolean if a field has been set.
func (o *FileSearchResult) HasIsFolder() bool {
	if o != nil && o.IsFolder.IsSet() {
		return true
	}

	return false
}

// SetIsFolder gets a reference to the given NullableBool and assigns it to the IsFolder field.
func (o *FileSearchResult) SetIsFolder(v bool) {
	o.IsFolder.Set(&v)
}
// SetIsFolderNil sets the value for IsFolder to be an explicit nil
func (o *FileSearchResult) SetIsFolderNil() {
	o.IsFolder.Set(nil)
}

// UnsetIsFolder ensures that no value is present for IsFolder, not even an explicit nil
func (o *FileSearchResult) UnsetIsFolder() {
	o.IsFolder.Unset()
}

// GetJobId returns the JobId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetJobId() int64 {
	if o == nil || o.JobId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.JobId.Get()
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetJobIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobId.Get(), o.JobId.IsSet()
}

// HasJobId returns a boolean if a field has been set.
func (o *FileSearchResult) HasJobId() bool {
	if o != nil && o.JobId.IsSet() {
		return true
	}

	return false
}

// SetJobId gets a reference to the given NullableInt64 and assigns it to the JobId field.
func (o *FileSearchResult) SetJobId(v int64) {
	o.JobId.Set(&v)
}
// SetJobIdNil sets the value for JobId to be an explicit nil
func (o *FileSearchResult) SetJobIdNil() {
	o.JobId.Set(nil)
}

// UnsetJobId ensures that no value is present for JobId, not even an explicit nil
func (o *FileSearchResult) UnsetJobId() {
	o.JobId.Unset()
}

// GetJobUid returns the JobUid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetJobUid() UniversalId {
	if o == nil || o.JobUid.Get() == nil {
		var ret UniversalId
		return ret
	}
	return *o.JobUid.Get()
}

// GetJobUidOk returns a tuple with the JobUid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetJobUidOk() (*UniversalId, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobUid.Get(), o.JobUid.IsSet()
}

// HasJobUid returns a boolean if a field has been set.
func (o *FileSearchResult) HasJobUid() bool {
	if o != nil && o.JobUid.IsSet() {
		return true
	}

	return false
}

// SetJobUid gets a reference to the given NullableUniversalId and assigns it to the JobUid field.
func (o *FileSearchResult) SetJobUid(v UniversalId) {
	o.JobUid.Set(&v)
}
// SetJobUidNil sets the value for JobUid to be an explicit nil
func (o *FileSearchResult) SetJobUidNil() {
	o.JobUid.Set(nil)
}

// UnsetJobUid ensures that no value is present for JobUid, not even an explicit nil
func (o *FileSearchResult) UnsetJobUid() {
	o.JobUid.Unset()
}

// GetOneDriveDocumentMetadata returns the OneDriveDocumentMetadata field value if set, zero value otherwise.
func (o *FileSearchResult) GetOneDriveDocumentMetadata() OneDriveDocumentMetadata {
	if o == nil || o.OneDriveDocumentMetadata == nil {
		var ret OneDriveDocumentMetadata
		return ret
	}
	return *o.OneDriveDocumentMetadata
}

// GetOneDriveDocumentMetadataOk returns a tuple with the OneDriveDocumentMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSearchResult) GetOneDriveDocumentMetadataOk() (*OneDriveDocumentMetadata, bool) {
	if o == nil || o.OneDriveDocumentMetadata == nil {
		return nil, false
	}
	return o.OneDriveDocumentMetadata, true
}

// HasOneDriveDocumentMetadata returns a boolean if a field has been set.
func (o *FileSearchResult) HasOneDriveDocumentMetadata() bool {
	if o != nil && o.OneDriveDocumentMetadata != nil {
		return true
	}

	return false
}

// SetOneDriveDocumentMetadata gets a reference to the given OneDriveDocumentMetadata and assigns it to the OneDriveDocumentMetadata field.
func (o *FileSearchResult) SetOneDriveDocumentMetadata(v OneDriveDocumentMetadata) {
	o.OneDriveDocumentMetadata = &v
}

// GetProtectionSource returns the ProtectionSource field value if set, zero value otherwise.
func (o *FileSearchResult) GetProtectionSource() ProtectionSource {
	if o == nil || o.ProtectionSource == nil {
		var ret ProtectionSource
		return ret
	}
	return *o.ProtectionSource
}

// GetProtectionSourceOk returns a tuple with the ProtectionSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSearchResult) GetProtectionSourceOk() (*ProtectionSource, bool) {
	if o == nil || o.ProtectionSource == nil {
		return nil, false
	}
	return o.ProtectionSource, true
}

// HasProtectionSource returns a boolean if a field has been set.
func (o *FileSearchResult) HasProtectionSource() bool {
	if o != nil && o.ProtectionSource != nil {
		return true
	}

	return false
}

// SetProtectionSource gets a reference to the given ProtectionSource and assigns it to the ProtectionSource field.
func (o *FileSearchResult) SetProtectionSource(v ProtectionSource) {
	o.ProtectionSource = &v
}

// GetRegisteredSourceId returns the RegisteredSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetRegisteredSourceId() int64 {
	if o == nil || o.RegisteredSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.RegisteredSourceId.Get()
}

// GetRegisteredSourceIdOk returns a tuple with the RegisteredSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetRegisteredSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RegisteredSourceId.Get(), o.RegisteredSourceId.IsSet()
}

// HasRegisteredSourceId returns a boolean if a field has been set.
func (o *FileSearchResult) HasRegisteredSourceId() bool {
	if o != nil && o.RegisteredSourceId.IsSet() {
		return true
	}

	return false
}

// SetRegisteredSourceId gets a reference to the given NullableInt64 and assigns it to the RegisteredSourceId field.
func (o *FileSearchResult) SetRegisteredSourceId(v int64) {
	o.RegisteredSourceId.Set(&v)
}
// SetRegisteredSourceIdNil sets the value for RegisteredSourceId to be an explicit nil
func (o *FileSearchResult) SetRegisteredSourceIdNil() {
	o.RegisteredSourceId.Set(nil)
}

// UnsetRegisteredSourceId ensures that no value is present for RegisteredSourceId, not even an explicit nil
func (o *FileSearchResult) UnsetRegisteredSourceId() {
	o.RegisteredSourceId.Unset()
}

// GetSharepointDocumentMetadata returns the SharepointDocumentMetadata field value if set, zero value otherwise.
func (o *FileSearchResult) GetSharepointDocumentMetadata() SharepointDocumentMetadata {
	if o == nil || o.SharepointDocumentMetadata == nil {
		var ret SharepointDocumentMetadata
		return ret
	}
	return *o.SharepointDocumentMetadata
}

// GetSharepointDocumentMetadataOk returns a tuple with the SharepointDocumentMetadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileSearchResult) GetSharepointDocumentMetadataOk() (*SharepointDocumentMetadata, bool) {
	if o == nil || o.SharepointDocumentMetadata == nil {
		return nil, false
	}
	return o.SharepointDocumentMetadata, true
}

// HasSharepointDocumentMetadata returns a boolean if a field has been set.
func (o *FileSearchResult) HasSharepointDocumentMetadata() bool {
	if o != nil && o.SharepointDocumentMetadata != nil {
		return true
	}

	return false
}

// SetSharepointDocumentMetadata gets a reference to the given SharepointDocumentMetadata and assigns it to the SharepointDocumentMetadata field.
func (o *FileSearchResult) SetSharepointDocumentMetadata(v SharepointDocumentMetadata) {
	o.SharepointDocumentMetadata = &v
}

// GetSnapshotTags returns the SnapshotTags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetSnapshotTags() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.SnapshotTags
}

// GetSnapshotTagsOk returns a tuple with the SnapshotTags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetSnapshotTagsOk() (*[]string, bool) {
	if o == nil || o.SnapshotTags == nil {
		return nil, false
	}
	return &o.SnapshotTags, true
}

// HasSnapshotTags returns a boolean if a field has been set.
func (o *FileSearchResult) HasSnapshotTags() bool {
	if o != nil && o.SnapshotTags != nil {
		return true
	}

	return false
}

// SetSnapshotTags gets a reference to the given []string and assigns it to the SnapshotTags field.
func (o *FileSearchResult) SetSnapshotTags(v []string) {
	o.SnapshotTags = v
}

// GetSourceId returns the SourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetSourceId() int64 {
	if o == nil || o.SourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SourceId.Get()
}

// GetSourceIdOk returns a tuple with the SourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceId.Get(), o.SourceId.IsSet()
}

// HasSourceId returns a boolean if a field has been set.
func (o *FileSearchResult) HasSourceId() bool {
	if o != nil && o.SourceId.IsSet() {
		return true
	}

	return false
}

// SetSourceId gets a reference to the given NullableInt64 and assigns it to the SourceId field.
func (o *FileSearchResult) SetSourceId(v int64) {
	o.SourceId.Set(&v)
}
// SetSourceIdNil sets the value for SourceId to be an explicit nil
func (o *FileSearchResult) SetSourceIdNil() {
	o.SourceId.Set(nil)
}

// UnsetSourceId ensures that no value is present for SourceId, not even an explicit nil
func (o *FileSearchResult) UnsetSourceId() {
	o.SourceId.Unset()
}

// GetTags returns the Tags field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetTags() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return &o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FileSearchResult) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *FileSearchResult) SetTags(v []string) {
	o.Tags = v
}

// GetTagsToSnapshotsMap returns the TagsToSnapshotsMap field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetTagsToSnapshotsMap() map[string][]int64 {
	if o == nil  {
		var ret map[string][]int64
		return ret
	}
	return o.TagsToSnapshotsMap
}

// GetTagsToSnapshotsMapOk returns a tuple with the TagsToSnapshotsMap field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetTagsToSnapshotsMapOk() (*map[string][]int64, bool) {
	if o == nil || o.TagsToSnapshotsMap == nil {
		return nil, false
	}
	return &o.TagsToSnapshotsMap, true
}

// HasTagsToSnapshotsMap returns a boolean if a field has been set.
func (o *FileSearchResult) HasTagsToSnapshotsMap() bool {
	if o != nil && o.TagsToSnapshotsMap != nil {
		return true
	}

	return false
}

// SetTagsToSnapshotsMap gets a reference to the given map[string][]int64 and assigns it to the TagsToSnapshotsMap field.
func (o *FileSearchResult) SetTagsToSnapshotsMap(v map[string][]int64) {
	o.TagsToSnapshotsMap = v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *FileSearchResult) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *FileSearchResult) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *FileSearchResult) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *FileSearchResult) UnsetType() {
	o.Type.Unset()
}

// GetViewBoxId returns the ViewBoxId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileSearchResult) GetViewBoxId() int64 {
	if o == nil || o.ViewBoxId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ViewBoxId.Get()
}

// GetViewBoxIdOk returns a tuple with the ViewBoxId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileSearchResult) GetViewBoxIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ViewBoxId.Get(), o.ViewBoxId.IsSet()
}

// HasViewBoxId returns a boolean if a field has been set.
func (o *FileSearchResult) HasViewBoxId() bool {
	if o != nil && o.ViewBoxId.IsSet() {
		return true
	}

	return false
}

// SetViewBoxId gets a reference to the given NullableInt64 and assigns it to the ViewBoxId field.
func (o *FileSearchResult) SetViewBoxId(v int64) {
	o.ViewBoxId.Set(&v)
}
// SetViewBoxIdNil sets the value for ViewBoxId to be an explicit nil
func (o *FileSearchResult) SetViewBoxIdNil() {
	o.ViewBoxId.Set(nil)
}

// UnsetViewBoxId ensures that no value is present for ViewBoxId, not even an explicit nil
func (o *FileSearchResult) UnsetViewBoxId() {
	o.ViewBoxId.Unset()
}

func (o FileSearchResult) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdObjectMetaData != nil {
		toSerialize["adObjectMetaData"] = o.AdObjectMetaData
	}
	if o.DocumentType.IsSet() {
		toSerialize["documentType"] = o.DocumentType.Get()
	}
	if o.EmailMetaData != nil {
		toSerialize["emailMetaData"] = o.EmailMetaData
	}
	if o.FileVersions != nil {
		toSerialize["fileVersions"] = o.FileVersions
	}
	if o.Filename.IsSet() {
		toSerialize["filename"] = o.Filename.Get()
	}
	if o.IsFolder.IsSet() {
		toSerialize["isFolder"] = o.IsFolder.Get()
	}
	if o.JobId.IsSet() {
		toSerialize["jobId"] = o.JobId.Get()
	}
	if o.JobUid.IsSet() {
		toSerialize["jobUid"] = o.JobUid.Get()
	}
	if o.OneDriveDocumentMetadata != nil {
		toSerialize["oneDriveDocumentMetadata"] = o.OneDriveDocumentMetadata
	}
	if o.ProtectionSource != nil {
		toSerialize["protectionSource"] = o.ProtectionSource
	}
	if o.RegisteredSourceId.IsSet() {
		toSerialize["registeredSourceId"] = o.RegisteredSourceId.Get()
	}
	if o.SharepointDocumentMetadata != nil {
		toSerialize["sharepointDocumentMetadata"] = o.SharepointDocumentMetadata
	}
	if o.SnapshotTags != nil {
		toSerialize["snapshotTags"] = o.SnapshotTags
	}
	if o.SourceId.IsSet() {
		toSerialize["sourceId"] = o.SourceId.Get()
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.TagsToSnapshotsMap != nil {
		toSerialize["tagsToSnapshotsMap"] = o.TagsToSnapshotsMap
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.ViewBoxId.IsSet() {
		toSerialize["viewBoxId"] = o.ViewBoxId.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFileSearchResult struct {
	value *FileSearchResult
	isSet bool
}

func (v NullableFileSearchResult) Get() *FileSearchResult {
	return v.value
}

func (v *NullableFileSearchResult) Set(val *FileSearchResult) {
	v.value = val
	v.isSet = true
}

func (v NullableFileSearchResult) IsSet() bool {
	return v.isSet
}

func (v *NullableFileSearchResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileSearchResult(val *FileSearchResult) *NullableFileSearchResult {
	return &NullableFileSearchResult{value: val, isSet: true}
}

func (v NullableFileSearchResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileSearchResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


