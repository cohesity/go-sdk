/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// MongoDBCollection Specifies an Object containing information about a mongodb collection.
type MongoDBCollection struct {
	// Set to true if this is a capped Collection.
	IsCappedCollection NullableBool `json:"isCappedCollection,omitempty"`
	// Set to true if this Collection is a view.
	IsMongoView NullableBool `json:"isMongoView,omitempty"`
	// Size of this Collection.
	SizeBytes NullableInt64 `json:"sizeBytes,omitempty"`
}

// NewMongoDBCollection instantiates a new MongoDBCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMongoDBCollection() *MongoDBCollection {
	this := MongoDBCollection{}
	return &this
}

// NewMongoDBCollectionWithDefaults instantiates a new MongoDBCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMongoDBCollectionWithDefaults() *MongoDBCollection {
	this := MongoDBCollection{}
	return &this
}

// GetIsCappedCollection returns the IsCappedCollection field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBCollection) GetIsCappedCollection() bool {
	if o == nil || o.IsCappedCollection.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsCappedCollection.Get()
}

// GetIsCappedCollectionOk returns a tuple with the IsCappedCollection field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBCollection) GetIsCappedCollectionOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsCappedCollection.Get(), o.IsCappedCollection.IsSet()
}

// HasIsCappedCollection returns a boolean if a field has been set.
func (o *MongoDBCollection) HasIsCappedCollection() bool {
	if o != nil && o.IsCappedCollection.IsSet() {
		return true
	}

	return false
}

// SetIsCappedCollection gets a reference to the given NullableBool and assigns it to the IsCappedCollection field.
func (o *MongoDBCollection) SetIsCappedCollection(v bool) {
	o.IsCappedCollection.Set(&v)
}
// SetIsCappedCollectionNil sets the value for IsCappedCollection to be an explicit nil
func (o *MongoDBCollection) SetIsCappedCollectionNil() {
	o.IsCappedCollection.Set(nil)
}

// UnsetIsCappedCollection ensures that no value is present for IsCappedCollection, not even an explicit nil
func (o *MongoDBCollection) UnsetIsCappedCollection() {
	o.IsCappedCollection.Unset()
}

// GetIsMongoView returns the IsMongoView field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBCollection) GetIsMongoView() bool {
	if o == nil || o.IsMongoView.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsMongoView.Get()
}

// GetIsMongoViewOk returns a tuple with the IsMongoView field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBCollection) GetIsMongoViewOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsMongoView.Get(), o.IsMongoView.IsSet()
}

// HasIsMongoView returns a boolean if a field has been set.
func (o *MongoDBCollection) HasIsMongoView() bool {
	if o != nil && o.IsMongoView.IsSet() {
		return true
	}

	return false
}

// SetIsMongoView gets a reference to the given NullableBool and assigns it to the IsMongoView field.
func (o *MongoDBCollection) SetIsMongoView(v bool) {
	o.IsMongoView.Set(&v)
}
// SetIsMongoViewNil sets the value for IsMongoView to be an explicit nil
func (o *MongoDBCollection) SetIsMongoViewNil() {
	o.IsMongoView.Set(nil)
}

// UnsetIsMongoView ensures that no value is present for IsMongoView, not even an explicit nil
func (o *MongoDBCollection) UnsetIsMongoView() {
	o.IsMongoView.Unset()
}

// GetSizeBytes returns the SizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *MongoDBCollection) GetSizeBytes() int64 {
	if o == nil || o.SizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.SizeBytes.Get()
}

// GetSizeBytesOk returns a tuple with the SizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MongoDBCollection) GetSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SizeBytes.Get(), o.SizeBytes.IsSet()
}

// HasSizeBytes returns a boolean if a field has been set.
func (o *MongoDBCollection) HasSizeBytes() bool {
	if o != nil && o.SizeBytes.IsSet() {
		return true
	}

	return false
}

// SetSizeBytes gets a reference to the given NullableInt64 and assigns it to the SizeBytes field.
func (o *MongoDBCollection) SetSizeBytes(v int64) {
	o.SizeBytes.Set(&v)
}
// SetSizeBytesNil sets the value for SizeBytes to be an explicit nil
func (o *MongoDBCollection) SetSizeBytesNil() {
	o.SizeBytes.Set(nil)
}

// UnsetSizeBytes ensures that no value is present for SizeBytes, not even an explicit nil
func (o *MongoDBCollection) UnsetSizeBytes() {
	o.SizeBytes.Unset()
}

func (o MongoDBCollection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsCappedCollection.IsSet() {
		toSerialize["isCappedCollection"] = o.IsCappedCollection.Get()
	}
	if o.IsMongoView.IsSet() {
		toSerialize["isMongoView"] = o.IsMongoView.Get()
	}
	if o.SizeBytes.IsSet() {
		toSerialize["sizeBytes"] = o.SizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableMongoDBCollection struct {
	value *MongoDBCollection
	isSet bool
}

func (v NullableMongoDBCollection) Get() *MongoDBCollection {
	return v.value
}

func (v *NullableMongoDBCollection) Set(val *MongoDBCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableMongoDBCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableMongoDBCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMongoDBCollection(val *MongoDBCollection) *NullableMongoDBCollection {
	return &NullableMongoDBCollection{value: val, isSet: true}
}

func (v NullableMongoDBCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMongoDBCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


