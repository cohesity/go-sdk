/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// IsilonSmbMountPoint Specifies information specific to SMB shares exposed by Isilon file system.
type IsilonSmbMountPoint struct {
	// Specifies the Access Zone Id.
	AccessZoneId NullableInt64 `json:"accessZoneId,omitempty"`
	// Specifies the description of the NFS mount point.
	Description NullableString `json:"description,omitempty"`
	// Specifies the name of the SMB/CIFS share.
	ShareName NullableString `json:"shareName,omitempty"`
}

// NewIsilonSmbMountPoint instantiates a new IsilonSmbMountPoint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIsilonSmbMountPoint() *IsilonSmbMountPoint {
	this := IsilonSmbMountPoint{}
	return &this
}

// NewIsilonSmbMountPointWithDefaults instantiates a new IsilonSmbMountPoint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIsilonSmbMountPointWithDefaults() *IsilonSmbMountPoint {
	this := IsilonSmbMountPoint{}
	return &this
}

// GetAccessZoneId returns the AccessZoneId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IsilonSmbMountPoint) GetAccessZoneId() int64 {
	if o == nil || o.AccessZoneId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AccessZoneId.Get()
}

// GetAccessZoneIdOk returns a tuple with the AccessZoneId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IsilonSmbMountPoint) GetAccessZoneIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AccessZoneId.Get(), o.AccessZoneId.IsSet()
}

// HasAccessZoneId returns a boolean if a field has been set.
func (o *IsilonSmbMountPoint) HasAccessZoneId() bool {
	if o != nil && o.AccessZoneId.IsSet() {
		return true
	}

	return false
}

// SetAccessZoneId gets a reference to the given NullableInt64 and assigns it to the AccessZoneId field.
func (o *IsilonSmbMountPoint) SetAccessZoneId(v int64) {
	o.AccessZoneId.Set(&v)
}
// SetAccessZoneIdNil sets the value for AccessZoneId to be an explicit nil
func (o *IsilonSmbMountPoint) SetAccessZoneIdNil() {
	o.AccessZoneId.Set(nil)
}

// UnsetAccessZoneId ensures that no value is present for AccessZoneId, not even an explicit nil
func (o *IsilonSmbMountPoint) UnsetAccessZoneId() {
	o.AccessZoneId.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IsilonSmbMountPoint) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IsilonSmbMountPoint) GetDescriptionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *IsilonSmbMountPoint) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *IsilonSmbMountPoint) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *IsilonSmbMountPoint) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *IsilonSmbMountPoint) UnsetDescription() {
	o.Description.Unset()
}

// GetShareName returns the ShareName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *IsilonSmbMountPoint) GetShareName() string {
	if o == nil || o.ShareName.Get() == nil {
		var ret string
		return ret
	}
	return *o.ShareName.Get()
}

// GetShareNameOk returns a tuple with the ShareName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *IsilonSmbMountPoint) GetShareNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ShareName.Get(), o.ShareName.IsSet()
}

// HasShareName returns a boolean if a field has been set.
func (o *IsilonSmbMountPoint) HasShareName() bool {
	if o != nil && o.ShareName.IsSet() {
		return true
	}

	return false
}

// SetShareName gets a reference to the given NullableString and assigns it to the ShareName field.
func (o *IsilonSmbMountPoint) SetShareName(v string) {
	o.ShareName.Set(&v)
}
// SetShareNameNil sets the value for ShareName to be an explicit nil
func (o *IsilonSmbMountPoint) SetShareNameNil() {
	o.ShareName.Set(nil)
}

// UnsetShareName ensures that no value is present for ShareName, not even an explicit nil
func (o *IsilonSmbMountPoint) UnsetShareName() {
	o.ShareName.Unset()
}

func (o IsilonSmbMountPoint) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccessZoneId.IsSet() {
		toSerialize["accessZoneId"] = o.AccessZoneId.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.ShareName.IsSet() {
		toSerialize["shareName"] = o.ShareName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableIsilonSmbMountPoint struct {
	value *IsilonSmbMountPoint
	isSet bool
}

func (v NullableIsilonSmbMountPoint) Get() *IsilonSmbMountPoint {
	return v.value
}

func (v *NullableIsilonSmbMountPoint) Set(val *IsilonSmbMountPoint) {
	v.value = val
	v.isSet = true
}

func (v NullableIsilonSmbMountPoint) IsSet() bool {
	return v.isSet
}

func (v *NullableIsilonSmbMountPoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIsilonSmbMountPoint(val *IsilonSmbMountPoint) *NullableIsilonSmbMountPoint {
	return &NullableIsilonSmbMountPoint{value: val, isSet: true}
}

func (v NullableIsilonSmbMountPoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIsilonSmbMountPoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


