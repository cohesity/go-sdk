/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// DataUptierJobParameters struct for DataUptierJobParameters
type DataUptierJobParameters struct {
	// Specifies policy to select a file to uptier based on file access or modification time. eg. A file can be selected to uptier if it has been accessed in the HotFileWindow or it is modified. enum: kLastAccessed, kLastModified. Specifies policy for file selection in data uptier jobs. 'kLastAccessed': Uptier the files which are accessed for at least num_file_access in hot_file_window. 'kLastModified': Uptier the files which are modified.
	FileSelectionPolicy NullableString `json:"fileSelectionPolicy,omitempty"`
	// Gives the size criteria to be used for selecting the files to be uptiered in bytes. The hot files that are smaller or greater than this size are uptiered.
	FileSizeBytes NullableInt64 `json:"fileSizeBytes,omitempty"`
	// Specifies policy to select a file to uptier based on its size. eg. A file can be selected to uptier if its size is greater than or smaller than the FileSizeBytes. enum: kGreaterThan, kSmallerThan. Specifies policy for file selection in data uptier jobs based on file size. 'kGreaterThan': Uptier the files having size greater than file_size. 'kSmallerThan': Uptier the files having size smaller than file_size.
	FileSizePolicy NullableString `json:"fileSizePolicy,omitempty"`
	// Identifies the hot files in the NAS source. Files that have been modified in the last hot_file_window are uptiered. Applicable only when file_select_policy is kLastAccessed.
	HotFileWindow NullableInt64 `json:"hotFileWindow,omitempty"`
	// Specifies whether uptier all files found in the view by overriding the FileUptierSelectionPolicy & FileUptierSizePolicy constraints. Default value false.
	IncludeAllFiles NullableBool `json:"includeAllFiles,omitempty"`
	// Mount path where the Cohesity target view is mounted on NFS clients while migrating the data.
	NfsMountPath NullableString `json:"nfsMountPath,omitempty"`
	// Number of times file must be accessed within hot_file_window in order to qualify for uptiering. Applicable only when file_select_policy is kLastAccessed.
	NumFileAccess NullableInt32 `json:"numFileAccess,omitempty"`
	// The source view name from which the data will be uptiered.
	SourceViewName NullableString `json:"sourceViewName,omitempty"`
}

// NewDataUptierJobParameters instantiates a new DataUptierJobParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDataUptierJobParameters() *DataUptierJobParameters {
	this := DataUptierJobParameters{}
	return &this
}

// NewDataUptierJobParametersWithDefaults instantiates a new DataUptierJobParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDataUptierJobParametersWithDefaults() *DataUptierJobParameters {
	this := DataUptierJobParameters{}
	return &this
}

// GetFileSelectionPolicy returns the FileSelectionPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataUptierJobParameters) GetFileSelectionPolicy() string {
	if o == nil || o.FileSelectionPolicy.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileSelectionPolicy.Get()
}

// GetFileSelectionPolicyOk returns a tuple with the FileSelectionPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataUptierJobParameters) GetFileSelectionPolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileSelectionPolicy.Get(), o.FileSelectionPolicy.IsSet()
}

// HasFileSelectionPolicy returns a boolean if a field has been set.
func (o *DataUptierJobParameters) HasFileSelectionPolicy() bool {
	if o != nil && o.FileSelectionPolicy.IsSet() {
		return true
	}

	return false
}

// SetFileSelectionPolicy gets a reference to the given NullableString and assigns it to the FileSelectionPolicy field.
func (o *DataUptierJobParameters) SetFileSelectionPolicy(v string) {
	o.FileSelectionPolicy.Set(&v)
}
// SetFileSelectionPolicyNil sets the value for FileSelectionPolicy to be an explicit nil
func (o *DataUptierJobParameters) SetFileSelectionPolicyNil() {
	o.FileSelectionPolicy.Set(nil)
}

// UnsetFileSelectionPolicy ensures that no value is present for FileSelectionPolicy, not even an explicit nil
func (o *DataUptierJobParameters) UnsetFileSelectionPolicy() {
	o.FileSelectionPolicy.Unset()
}

// GetFileSizeBytes returns the FileSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataUptierJobParameters) GetFileSizeBytes() int64 {
	if o == nil || o.FileSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FileSizeBytes.Get()
}

// GetFileSizeBytesOk returns a tuple with the FileSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataUptierJobParameters) GetFileSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileSizeBytes.Get(), o.FileSizeBytes.IsSet()
}

// HasFileSizeBytes returns a boolean if a field has been set.
func (o *DataUptierJobParameters) HasFileSizeBytes() bool {
	if o != nil && o.FileSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetFileSizeBytes gets a reference to the given NullableInt64 and assigns it to the FileSizeBytes field.
func (o *DataUptierJobParameters) SetFileSizeBytes(v int64) {
	o.FileSizeBytes.Set(&v)
}
// SetFileSizeBytesNil sets the value for FileSizeBytes to be an explicit nil
func (o *DataUptierJobParameters) SetFileSizeBytesNil() {
	o.FileSizeBytes.Set(nil)
}

// UnsetFileSizeBytes ensures that no value is present for FileSizeBytes, not even an explicit nil
func (o *DataUptierJobParameters) UnsetFileSizeBytes() {
	o.FileSizeBytes.Unset()
}

// GetFileSizePolicy returns the FileSizePolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataUptierJobParameters) GetFileSizePolicy() string {
	if o == nil || o.FileSizePolicy.Get() == nil {
		var ret string
		return ret
	}
	return *o.FileSizePolicy.Get()
}

// GetFileSizePolicyOk returns a tuple with the FileSizePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataUptierJobParameters) GetFileSizePolicyOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileSizePolicy.Get(), o.FileSizePolicy.IsSet()
}

// HasFileSizePolicy returns a boolean if a field has been set.
func (o *DataUptierJobParameters) HasFileSizePolicy() bool {
	if o != nil && o.FileSizePolicy.IsSet() {
		return true
	}

	return false
}

// SetFileSizePolicy gets a reference to the given NullableString and assigns it to the FileSizePolicy field.
func (o *DataUptierJobParameters) SetFileSizePolicy(v string) {
	o.FileSizePolicy.Set(&v)
}
// SetFileSizePolicyNil sets the value for FileSizePolicy to be an explicit nil
func (o *DataUptierJobParameters) SetFileSizePolicyNil() {
	o.FileSizePolicy.Set(nil)
}

// UnsetFileSizePolicy ensures that no value is present for FileSizePolicy, not even an explicit nil
func (o *DataUptierJobParameters) UnsetFileSizePolicy() {
	o.FileSizePolicy.Unset()
}

// GetHotFileWindow returns the HotFileWindow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataUptierJobParameters) GetHotFileWindow() int64 {
	if o == nil || o.HotFileWindow.Get() == nil {
		var ret int64
		return ret
	}
	return *o.HotFileWindow.Get()
}

// GetHotFileWindowOk returns a tuple with the HotFileWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataUptierJobParameters) GetHotFileWindowOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.HotFileWindow.Get(), o.HotFileWindow.IsSet()
}

// HasHotFileWindow returns a boolean if a field has been set.
func (o *DataUptierJobParameters) HasHotFileWindow() bool {
	if o != nil && o.HotFileWindow.IsSet() {
		return true
	}

	return false
}

// SetHotFileWindow gets a reference to the given NullableInt64 and assigns it to the HotFileWindow field.
func (o *DataUptierJobParameters) SetHotFileWindow(v int64) {
	o.HotFileWindow.Set(&v)
}
// SetHotFileWindowNil sets the value for HotFileWindow to be an explicit nil
func (o *DataUptierJobParameters) SetHotFileWindowNil() {
	o.HotFileWindow.Set(nil)
}

// UnsetHotFileWindow ensures that no value is present for HotFileWindow, not even an explicit nil
func (o *DataUptierJobParameters) UnsetHotFileWindow() {
	o.HotFileWindow.Unset()
}

// GetIncludeAllFiles returns the IncludeAllFiles field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataUptierJobParameters) GetIncludeAllFiles() bool {
	if o == nil || o.IncludeAllFiles.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IncludeAllFiles.Get()
}

// GetIncludeAllFilesOk returns a tuple with the IncludeAllFiles field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataUptierJobParameters) GetIncludeAllFilesOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IncludeAllFiles.Get(), o.IncludeAllFiles.IsSet()
}

// HasIncludeAllFiles returns a boolean if a field has been set.
func (o *DataUptierJobParameters) HasIncludeAllFiles() bool {
	if o != nil && o.IncludeAllFiles.IsSet() {
		return true
	}

	return false
}

// SetIncludeAllFiles gets a reference to the given NullableBool and assigns it to the IncludeAllFiles field.
func (o *DataUptierJobParameters) SetIncludeAllFiles(v bool) {
	o.IncludeAllFiles.Set(&v)
}
// SetIncludeAllFilesNil sets the value for IncludeAllFiles to be an explicit nil
func (o *DataUptierJobParameters) SetIncludeAllFilesNil() {
	o.IncludeAllFiles.Set(nil)
}

// UnsetIncludeAllFiles ensures that no value is present for IncludeAllFiles, not even an explicit nil
func (o *DataUptierJobParameters) UnsetIncludeAllFiles() {
	o.IncludeAllFiles.Unset()
}

// GetNfsMountPath returns the NfsMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataUptierJobParameters) GetNfsMountPath() string {
	if o == nil || o.NfsMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.NfsMountPath.Get()
}

// GetNfsMountPathOk returns a tuple with the NfsMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataUptierJobParameters) GetNfsMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsMountPath.Get(), o.NfsMountPath.IsSet()
}

// HasNfsMountPath returns a boolean if a field has been set.
func (o *DataUptierJobParameters) HasNfsMountPath() bool {
	if o != nil && o.NfsMountPath.IsSet() {
		return true
	}

	return false
}

// SetNfsMountPath gets a reference to the given NullableString and assigns it to the NfsMountPath field.
func (o *DataUptierJobParameters) SetNfsMountPath(v string) {
	o.NfsMountPath.Set(&v)
}
// SetNfsMountPathNil sets the value for NfsMountPath to be an explicit nil
func (o *DataUptierJobParameters) SetNfsMountPathNil() {
	o.NfsMountPath.Set(nil)
}

// UnsetNfsMountPath ensures that no value is present for NfsMountPath, not even an explicit nil
func (o *DataUptierJobParameters) UnsetNfsMountPath() {
	o.NfsMountPath.Unset()
}

// GetNumFileAccess returns the NumFileAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataUptierJobParameters) GetNumFileAccess() int32 {
	if o == nil || o.NumFileAccess.Get() == nil {
		var ret int32
		return ret
	}
	return *o.NumFileAccess.Get()
}

// GetNumFileAccessOk returns a tuple with the NumFileAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataUptierJobParameters) GetNumFileAccessOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumFileAccess.Get(), o.NumFileAccess.IsSet()
}

// HasNumFileAccess returns a boolean if a field has been set.
func (o *DataUptierJobParameters) HasNumFileAccess() bool {
	if o != nil && o.NumFileAccess.IsSet() {
		return true
	}

	return false
}

// SetNumFileAccess gets a reference to the given NullableInt32 and assigns it to the NumFileAccess field.
func (o *DataUptierJobParameters) SetNumFileAccess(v int32) {
	o.NumFileAccess.Set(&v)
}
// SetNumFileAccessNil sets the value for NumFileAccess to be an explicit nil
func (o *DataUptierJobParameters) SetNumFileAccessNil() {
	o.NumFileAccess.Set(nil)
}

// UnsetNumFileAccess ensures that no value is present for NumFileAccess, not even an explicit nil
func (o *DataUptierJobParameters) UnsetNumFileAccess() {
	o.NumFileAccess.Unset()
}

// GetSourceViewName returns the SourceViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *DataUptierJobParameters) GetSourceViewName() string {
	if o == nil || o.SourceViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.SourceViewName.Get()
}

// GetSourceViewNameOk returns a tuple with the SourceViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DataUptierJobParameters) GetSourceViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.SourceViewName.Get(), o.SourceViewName.IsSet()
}

// HasSourceViewName returns a boolean if a field has been set.
func (o *DataUptierJobParameters) HasSourceViewName() bool {
	if o != nil && o.SourceViewName.IsSet() {
		return true
	}

	return false
}

// SetSourceViewName gets a reference to the given NullableString and assigns it to the SourceViewName field.
func (o *DataUptierJobParameters) SetSourceViewName(v string) {
	o.SourceViewName.Set(&v)
}
// SetSourceViewNameNil sets the value for SourceViewName to be an explicit nil
func (o *DataUptierJobParameters) SetSourceViewNameNil() {
	o.SourceViewName.Set(nil)
}

// UnsetSourceViewName ensures that no value is present for SourceViewName, not even an explicit nil
func (o *DataUptierJobParameters) UnsetSourceViewName() {
	o.SourceViewName.Unset()
}

func (o DataUptierJobParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FileSelectionPolicy.IsSet() {
		toSerialize["fileSelectionPolicy"] = o.FileSelectionPolicy.Get()
	}
	if o.FileSizeBytes.IsSet() {
		toSerialize["fileSizeBytes"] = o.FileSizeBytes.Get()
	}
	if o.FileSizePolicy.IsSet() {
		toSerialize["fileSizePolicy"] = o.FileSizePolicy.Get()
	}
	if o.HotFileWindow.IsSet() {
		toSerialize["hotFileWindow"] = o.HotFileWindow.Get()
	}
	if o.IncludeAllFiles.IsSet() {
		toSerialize["includeAllFiles"] = o.IncludeAllFiles.Get()
	}
	if o.NfsMountPath.IsSet() {
		toSerialize["nfsMountPath"] = o.NfsMountPath.Get()
	}
	if o.NumFileAccess.IsSet() {
		toSerialize["numFileAccess"] = o.NumFileAccess.Get()
	}
	if o.SourceViewName.IsSet() {
		toSerialize["sourceViewName"] = o.SourceViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDataUptierJobParameters struct {
	value *DataUptierJobParameters
	isSet bool
}

func (v NullableDataUptierJobParameters) Get() *DataUptierJobParameters {
	return v.value
}

func (v *NullableDataUptierJobParameters) Set(val *DataUptierJobParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableDataUptierJobParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableDataUptierJobParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDataUptierJobParameters(val *DataUptierJobParameters) *NullableDataUptierJobParameters {
	return &NullableDataUptierJobParameters{value: val, isSet: true}
}

func (v NullableDataUptierJobParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDataUptierJobParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


