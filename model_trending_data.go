/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// TrendingData Specifies protection runs information per object, aggregated over a period of time.
type TrendingData struct {
	// Specifies number of cancelled runs.
	Cancelled NullableInt64 `json:"cancelled,omitempty"`
	// Specifies number of failed runs.
	Failed NullableInt64 `json:"failed,omitempty"`
	// Specifies number of in-progress runs.
	Running NullableInt64 `json:"running,omitempty"`
	// Specifies number of successful runs.
	Successful NullableInt64 `json:"successful,omitempty"`
	// Specifies total number of runs.
	Total NullableInt64 `json:"total,omitempty"`
	// Specifies trend name. This is start of the day/week/month.
	TrendName NullableString `json:"trendName,omitempty"`
	// Specifies start of the day/week/month in micro seconds
	TrendStartTimeUsecs NullableInt64 `json:"trendStartTimeUsecs,omitempty"`
}

// NewTrendingData instantiates a new TrendingData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTrendingData() *TrendingData {
	this := TrendingData{}
	return &this
}

// NewTrendingDataWithDefaults instantiates a new TrendingData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTrendingDataWithDefaults() *TrendingData {
	this := TrendingData{}
	return &this
}

// GetCancelled returns the Cancelled field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrendingData) GetCancelled() int64 {
	if o == nil || o.Cancelled.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Cancelled.Get()
}

// GetCancelledOk returns a tuple with the Cancelled field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrendingData) GetCancelledOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Cancelled.Get(), o.Cancelled.IsSet()
}

// HasCancelled returns a boolean if a field has been set.
func (o *TrendingData) HasCancelled() bool {
	if o != nil && o.Cancelled.IsSet() {
		return true
	}

	return false
}

// SetCancelled gets a reference to the given NullableInt64 and assigns it to the Cancelled field.
func (o *TrendingData) SetCancelled(v int64) {
	o.Cancelled.Set(&v)
}
// SetCancelledNil sets the value for Cancelled to be an explicit nil
func (o *TrendingData) SetCancelledNil() {
	o.Cancelled.Set(nil)
}

// UnsetCancelled ensures that no value is present for Cancelled, not even an explicit nil
func (o *TrendingData) UnsetCancelled() {
	o.Cancelled.Unset()
}

// GetFailed returns the Failed field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrendingData) GetFailed() int64 {
	if o == nil || o.Failed.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Failed.Get()
}

// GetFailedOk returns a tuple with the Failed field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrendingData) GetFailedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Failed.Get(), o.Failed.IsSet()
}

// HasFailed returns a boolean if a field has been set.
func (o *TrendingData) HasFailed() bool {
	if o != nil && o.Failed.IsSet() {
		return true
	}

	return false
}

// SetFailed gets a reference to the given NullableInt64 and assigns it to the Failed field.
func (o *TrendingData) SetFailed(v int64) {
	o.Failed.Set(&v)
}
// SetFailedNil sets the value for Failed to be an explicit nil
func (o *TrendingData) SetFailedNil() {
	o.Failed.Set(nil)
}

// UnsetFailed ensures that no value is present for Failed, not even an explicit nil
func (o *TrendingData) UnsetFailed() {
	o.Failed.Unset()
}

// GetRunning returns the Running field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrendingData) GetRunning() int64 {
	if o == nil || o.Running.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Running.Get()
}

// GetRunningOk returns a tuple with the Running field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrendingData) GetRunningOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Running.Get(), o.Running.IsSet()
}

// HasRunning returns a boolean if a field has been set.
func (o *TrendingData) HasRunning() bool {
	if o != nil && o.Running.IsSet() {
		return true
	}

	return false
}

// SetRunning gets a reference to the given NullableInt64 and assigns it to the Running field.
func (o *TrendingData) SetRunning(v int64) {
	o.Running.Set(&v)
}
// SetRunningNil sets the value for Running to be an explicit nil
func (o *TrendingData) SetRunningNil() {
	o.Running.Set(nil)
}

// UnsetRunning ensures that no value is present for Running, not even an explicit nil
func (o *TrendingData) UnsetRunning() {
	o.Running.Unset()
}

// GetSuccessful returns the Successful field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrendingData) GetSuccessful() int64 {
	if o == nil || o.Successful.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Successful.Get()
}

// GetSuccessfulOk returns a tuple with the Successful field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrendingData) GetSuccessfulOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Successful.Get(), o.Successful.IsSet()
}

// HasSuccessful returns a boolean if a field has been set.
func (o *TrendingData) HasSuccessful() bool {
	if o != nil && o.Successful.IsSet() {
		return true
	}

	return false
}

// SetSuccessful gets a reference to the given NullableInt64 and assigns it to the Successful field.
func (o *TrendingData) SetSuccessful(v int64) {
	o.Successful.Set(&v)
}
// SetSuccessfulNil sets the value for Successful to be an explicit nil
func (o *TrendingData) SetSuccessfulNil() {
	o.Successful.Set(nil)
}

// UnsetSuccessful ensures that no value is present for Successful, not even an explicit nil
func (o *TrendingData) UnsetSuccessful() {
	o.Successful.Unset()
}

// GetTotal returns the Total field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrendingData) GetTotal() int64 {
	if o == nil || o.Total.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Total.Get()
}

// GetTotalOk returns a tuple with the Total field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrendingData) GetTotalOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Total.Get(), o.Total.IsSet()
}

// HasTotal returns a boolean if a field has been set.
func (o *TrendingData) HasTotal() bool {
	if o != nil && o.Total.IsSet() {
		return true
	}

	return false
}

// SetTotal gets a reference to the given NullableInt64 and assigns it to the Total field.
func (o *TrendingData) SetTotal(v int64) {
	o.Total.Set(&v)
}
// SetTotalNil sets the value for Total to be an explicit nil
func (o *TrendingData) SetTotalNil() {
	o.Total.Set(nil)
}

// UnsetTotal ensures that no value is present for Total, not even an explicit nil
func (o *TrendingData) UnsetTotal() {
	o.Total.Unset()
}

// GetTrendName returns the TrendName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrendingData) GetTrendName() string {
	if o == nil || o.TrendName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TrendName.Get()
}

// GetTrendNameOk returns a tuple with the TrendName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrendingData) GetTrendNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TrendName.Get(), o.TrendName.IsSet()
}

// HasTrendName returns a boolean if a field has been set.
func (o *TrendingData) HasTrendName() bool {
	if o != nil && o.TrendName.IsSet() {
		return true
	}

	return false
}

// SetTrendName gets a reference to the given NullableString and assigns it to the TrendName field.
func (o *TrendingData) SetTrendName(v string) {
	o.TrendName.Set(&v)
}
// SetTrendNameNil sets the value for TrendName to be an explicit nil
func (o *TrendingData) SetTrendNameNil() {
	o.TrendName.Set(nil)
}

// UnsetTrendName ensures that no value is present for TrendName, not even an explicit nil
func (o *TrendingData) UnsetTrendName() {
	o.TrendName.Unset()
}

// GetTrendStartTimeUsecs returns the TrendStartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *TrendingData) GetTrendStartTimeUsecs() int64 {
	if o == nil || o.TrendStartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TrendStartTimeUsecs.Get()
}

// GetTrendStartTimeUsecsOk returns a tuple with the TrendStartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *TrendingData) GetTrendStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TrendStartTimeUsecs.Get(), o.TrendStartTimeUsecs.IsSet()
}

// HasTrendStartTimeUsecs returns a boolean if a field has been set.
func (o *TrendingData) HasTrendStartTimeUsecs() bool {
	if o != nil && o.TrendStartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetTrendStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the TrendStartTimeUsecs field.
func (o *TrendingData) SetTrendStartTimeUsecs(v int64) {
	o.TrendStartTimeUsecs.Set(&v)
}
// SetTrendStartTimeUsecsNil sets the value for TrendStartTimeUsecs to be an explicit nil
func (o *TrendingData) SetTrendStartTimeUsecsNil() {
	o.TrendStartTimeUsecs.Set(nil)
}

// UnsetTrendStartTimeUsecs ensures that no value is present for TrendStartTimeUsecs, not even an explicit nil
func (o *TrendingData) UnsetTrendStartTimeUsecs() {
	o.TrendStartTimeUsecs.Unset()
}

func (o TrendingData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Cancelled.IsSet() {
		toSerialize["cancelled"] = o.Cancelled.Get()
	}
	if o.Failed.IsSet() {
		toSerialize["failed"] = o.Failed.Get()
	}
	if o.Running.IsSet() {
		toSerialize["running"] = o.Running.Get()
	}
	if o.Successful.IsSet() {
		toSerialize["successful"] = o.Successful.Get()
	}
	if o.Total.IsSet() {
		toSerialize["total"] = o.Total.Get()
	}
	if o.TrendName.IsSet() {
		toSerialize["trendName"] = o.TrendName.Get()
	}
	if o.TrendStartTimeUsecs.IsSet() {
		toSerialize["trendStartTimeUsecs"] = o.TrendStartTimeUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableTrendingData struct {
	value *TrendingData
	isSet bool
}

func (v NullableTrendingData) Get() *TrendingData {
	return v.value
}

func (v *NullableTrendingData) Set(val *TrendingData) {
	v.value = val
	v.isSet = true
}

func (v NullableTrendingData) IsSet() bool {
	return v.isSet
}

func (v *NullableTrendingData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTrendingData(val *TrendingData) *NullableTrendingData {
	return &NullableTrendingData{value: val, isSet: true}
}

func (v NullableTrendingData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTrendingData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


