/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ApplicationSpecialParameters Specifies additional special settings applicable for a Protection Source of 'kSQL'/'kOracle' type in a Protection Job.
type ApplicationSpecialParameters struct {
	// Array of Ids of Application Entities like SQL/Oracle instances, and databases that should be protected in a Protection Source.  Specifies the subset of application entities like SQL/Oracle instances, and databases to protect in a Protection Source of type 'kSQL'/'kOracle'. If not specified, all application entities on the Protection Source.
	ApplicationEntityIds []int64 `json:"applicationEntityIds,omitempty"`
}

// NewApplicationSpecialParameters instantiates a new ApplicationSpecialParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationSpecialParameters() *ApplicationSpecialParameters {
	this := ApplicationSpecialParameters{}
	return &this
}

// NewApplicationSpecialParametersWithDefaults instantiates a new ApplicationSpecialParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationSpecialParametersWithDefaults() *ApplicationSpecialParameters {
	this := ApplicationSpecialParameters{}
	return &this
}

// GetApplicationEntityIds returns the ApplicationEntityIds field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationSpecialParameters) GetApplicationEntityIds() []int64 {
	if o == nil  {
		var ret []int64
		return ret
	}
	return o.ApplicationEntityIds
}

// GetApplicationEntityIdsOk returns a tuple with the ApplicationEntityIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationSpecialParameters) GetApplicationEntityIdsOk() (*[]int64, bool) {
	if o == nil || o.ApplicationEntityIds == nil {
		return nil, false
	}
	return &o.ApplicationEntityIds, true
}

// HasApplicationEntityIds returns a boolean if a field has been set.
func (o *ApplicationSpecialParameters) HasApplicationEntityIds() bool {
	if o != nil && o.ApplicationEntityIds != nil {
		return true
	}

	return false
}

// SetApplicationEntityIds gets a reference to the given []int64 and assigns it to the ApplicationEntityIds field.
func (o *ApplicationSpecialParameters) SetApplicationEntityIds(v []int64) {
	o.ApplicationEntityIds = v
}

func (o ApplicationSpecialParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ApplicationEntityIds != nil {
		toSerialize["applicationEntityIds"] = o.ApplicationEntityIds
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationSpecialParameters struct {
	value *ApplicationSpecialParameters
	isSet bool
}

func (v NullableApplicationSpecialParameters) Get() *ApplicationSpecialParameters {
	return v.value
}

func (v *NullableApplicationSpecialParameters) Set(val *ApplicationSpecialParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationSpecialParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationSpecialParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationSpecialParameters(val *ApplicationSpecialParameters) *NullableApplicationSpecialParameters {
	return &NullableApplicationSpecialParameters{value: val, isSet: true}
}

func (v NullableApplicationSpecialParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationSpecialParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


