/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OneDriveItem Specifies the details about OneDrive file/folder.
type OneDriveItem struct {
	// Specifies whether the current item is a file or not.
	IsFileItem NullableBool `json:"isFileItem,omitempty"`
	// Specifies the Id of the Drive item.
	ItemId NullableString `json:"itemId,omitempty"`
	// Specifies the path of the Drive item within the drive.
	ItemPath NullableString `json:"itemPath,omitempty"`
}

// NewOneDriveItem instantiates a new OneDriveItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOneDriveItem() *OneDriveItem {
	this := OneDriveItem{}
	return &this
}

// NewOneDriveItemWithDefaults instantiates a new OneDriveItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOneDriveItemWithDefaults() *OneDriveItem {
	this := OneDriveItem{}
	return &this
}

// GetIsFileItem returns the IsFileItem field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveItem) GetIsFileItem() bool {
	if o == nil || o.IsFileItem.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsFileItem.Get()
}

// GetIsFileItemOk returns a tuple with the IsFileItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveItem) GetIsFileItemOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsFileItem.Get(), o.IsFileItem.IsSet()
}

// HasIsFileItem returns a boolean if a field has been set.
func (o *OneDriveItem) HasIsFileItem() bool {
	if o != nil && o.IsFileItem.IsSet() {
		return true
	}

	return false
}

// SetIsFileItem gets a reference to the given NullableBool and assigns it to the IsFileItem field.
func (o *OneDriveItem) SetIsFileItem(v bool) {
	o.IsFileItem.Set(&v)
}
// SetIsFileItemNil sets the value for IsFileItem to be an explicit nil
func (o *OneDriveItem) SetIsFileItemNil() {
	o.IsFileItem.Set(nil)
}

// UnsetIsFileItem ensures that no value is present for IsFileItem, not even an explicit nil
func (o *OneDriveItem) UnsetIsFileItem() {
	o.IsFileItem.Unset()
}

// GetItemId returns the ItemId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveItem) GetItemId() string {
	if o == nil || o.ItemId.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemId.Get()
}

// GetItemIdOk returns a tuple with the ItemId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveItem) GetItemIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemId.Get(), o.ItemId.IsSet()
}

// HasItemId returns a boolean if a field has been set.
func (o *OneDriveItem) HasItemId() bool {
	if o != nil && o.ItemId.IsSet() {
		return true
	}

	return false
}

// SetItemId gets a reference to the given NullableString and assigns it to the ItemId field.
func (o *OneDriveItem) SetItemId(v string) {
	o.ItemId.Set(&v)
}
// SetItemIdNil sets the value for ItemId to be an explicit nil
func (o *OneDriveItem) SetItemIdNil() {
	o.ItemId.Set(nil)
}

// UnsetItemId ensures that no value is present for ItemId, not even an explicit nil
func (o *OneDriveItem) UnsetItemId() {
	o.ItemId.Unset()
}

// GetItemPath returns the ItemPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OneDriveItem) GetItemPath() string {
	if o == nil || o.ItemPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.ItemPath.Get()
}

// GetItemPathOk returns a tuple with the ItemPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OneDriveItem) GetItemPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ItemPath.Get(), o.ItemPath.IsSet()
}

// HasItemPath returns a boolean if a field has been set.
func (o *OneDriveItem) HasItemPath() bool {
	if o != nil && o.ItemPath.IsSet() {
		return true
	}

	return false
}

// SetItemPath gets a reference to the given NullableString and assigns it to the ItemPath field.
func (o *OneDriveItem) SetItemPath(v string) {
	o.ItemPath.Set(&v)
}
// SetItemPathNil sets the value for ItemPath to be an explicit nil
func (o *OneDriveItem) SetItemPathNil() {
	o.ItemPath.Set(nil)
}

// UnsetItemPath ensures that no value is present for ItemPath, not even an explicit nil
func (o *OneDriveItem) UnsetItemPath() {
	o.ItemPath.Unset()
}

func (o OneDriveItem) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IsFileItem.IsSet() {
		toSerialize["isFileItem"] = o.IsFileItem.Get()
	}
	if o.ItemId.IsSet() {
		toSerialize["itemId"] = o.ItemId.Get()
	}
	if o.ItemPath.IsSet() {
		toSerialize["itemPath"] = o.ItemPath.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOneDriveItem struct {
	value *OneDriveItem
	isSet bool
}

func (v NullableOneDriveItem) Get() *OneDriveItem {
	return v.value
}

func (v *NullableOneDriveItem) Set(val *OneDriveItem) {
	v.value = val
	v.isSet = true
}

func (v NullableOneDriveItem) IsSet() bool {
	return v.isSet
}

func (v *NullableOneDriveItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOneDriveItem(val *OneDriveItem) *NullableOneDriveItem {
	return &NullableOneDriveItem{value: val, isSet: true}
}

func (v NullableOneDriveItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOneDriveItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


