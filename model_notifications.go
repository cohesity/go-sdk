/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// Notifications All the Notification events generated for a given user. This is used for for transferring notifications over wire.
type Notifications struct {
	// Notification Count.
	Count NullableInt64 `json:"count,omitempty"`
	// Notification list.
	NotificationList []TaskNotification `json:"notificationList,omitempty"`
	// Unread Notification Count.
	UnreadCount NullableInt64 `json:"unreadCount,omitempty"`
}

// NewNotifications instantiates a new Notifications object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNotifications() *Notifications {
	this := Notifications{}
	return &this
}

// NewNotificationsWithDefaults instantiates a new Notifications object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNotificationsWithDefaults() *Notifications {
	this := Notifications{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notifications) GetCount() int64 {
	if o == nil || o.Count.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notifications) GetCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *Notifications) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableInt64 and assigns it to the Count field.
func (o *Notifications) SetCount(v int64) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *Notifications) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *Notifications) UnsetCount() {
	o.Count.Unset()
}

// GetNotificationList returns the NotificationList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notifications) GetNotificationList() []TaskNotification {
	if o == nil  {
		var ret []TaskNotification
		return ret
	}
	return o.NotificationList
}

// GetNotificationListOk returns a tuple with the NotificationList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notifications) GetNotificationListOk() (*[]TaskNotification, bool) {
	if o == nil || o.NotificationList == nil {
		return nil, false
	}
	return &o.NotificationList, true
}

// HasNotificationList returns a boolean if a field has been set.
func (o *Notifications) HasNotificationList() bool {
	if o != nil && o.NotificationList != nil {
		return true
	}

	return false
}

// SetNotificationList gets a reference to the given []TaskNotification and assigns it to the NotificationList field.
func (o *Notifications) SetNotificationList(v []TaskNotification) {
	o.NotificationList = v
}

// GetUnreadCount returns the UnreadCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Notifications) GetUnreadCount() int64 {
	if o == nil || o.UnreadCount.Get() == nil {
		var ret int64
		return ret
	}
	return *o.UnreadCount.Get()
}

// GetUnreadCountOk returns a tuple with the UnreadCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Notifications) GetUnreadCountOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UnreadCount.Get(), o.UnreadCount.IsSet()
}

// HasUnreadCount returns a boolean if a field has been set.
func (o *Notifications) HasUnreadCount() bool {
	if o != nil && o.UnreadCount.IsSet() {
		return true
	}

	return false
}

// SetUnreadCount gets a reference to the given NullableInt64 and assigns it to the UnreadCount field.
func (o *Notifications) SetUnreadCount(v int64) {
	o.UnreadCount.Set(&v)
}
// SetUnreadCountNil sets the value for UnreadCount to be an explicit nil
func (o *Notifications) SetUnreadCountNil() {
	o.UnreadCount.Set(nil)
}

// UnsetUnreadCount ensures that no value is present for UnreadCount, not even an explicit nil
func (o *Notifications) UnsetUnreadCount() {
	o.UnreadCount.Unset()
}

func (o Notifications) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.NotificationList != nil {
		toSerialize["notificationList"] = o.NotificationList
	}
	if o.UnreadCount.IsSet() {
		toSerialize["unreadCount"] = o.UnreadCount.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNotifications struct {
	value *Notifications
	isSet bool
}

func (v NullableNotifications) Get() *Notifications {
	return v.value
}

func (v *NullableNotifications) Set(val *Notifications) {
	v.value = val
	v.isSet = true
}

func (v NullableNotifications) IsSet() bool {
	return v.isSet
}

func (v *NullableNotifications) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNotifications(val *Notifications) *NullableNotifications {
	return &NullableNotifications{value: val, isSet: true}
}

func (v NullableNotifications) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNotifications) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


