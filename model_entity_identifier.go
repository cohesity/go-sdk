/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// EntityIdentifier Specifies a unique identifier for the entity.
type EntityIdentifier struct {
	EntityId *Value `json:"entityId,omitempty"`
}

// NewEntityIdentifier instantiates a new EntityIdentifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEntityIdentifier() *EntityIdentifier {
	this := EntityIdentifier{}
	return &this
}

// NewEntityIdentifierWithDefaults instantiates a new EntityIdentifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEntityIdentifierWithDefaults() *EntityIdentifier {
	this := EntityIdentifier{}
	return &this
}

// GetEntityId returns the EntityId field value if set, zero value otherwise.
func (o *EntityIdentifier) GetEntityId() Value {
	if o == nil || o.EntityId == nil {
		var ret Value
		return ret
	}
	return *o.EntityId
}

// GetEntityIdOk returns a tuple with the EntityId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EntityIdentifier) GetEntityIdOk() (*Value, bool) {
	if o == nil || o.EntityId == nil {
		return nil, false
	}
	return o.EntityId, true
}

// HasEntityId returns a boolean if a field has been set.
func (o *EntityIdentifier) HasEntityId() bool {
	if o != nil && o.EntityId != nil {
		return true
	}

	return false
}

// SetEntityId gets a reference to the given Value and assigns it to the EntityId field.
func (o *EntityIdentifier) SetEntityId(v Value) {
	o.EntityId = &v
}

func (o EntityIdentifier) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntityId != nil {
		toSerialize["entityId"] = o.EntityId
	}
	return json.Marshal(toSerialize)
}

type NullableEntityIdentifier struct {
	value *EntityIdentifier
	isSet bool
}

func (v NullableEntityIdentifier) Get() *EntityIdentifier {
	return v.value
}

func (v *NullableEntityIdentifier) Set(val *EntityIdentifier) {
	v.value = val
	v.isSet = true
}

func (v NullableEntityIdentifier) IsSet() bool {
	return v.isSet
}

func (v *NullableEntityIdentifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEntityIdentifier(val *EntityIdentifier) *NullableEntityIdentifier {
	return &NullableEntityIdentifier{value: val, isSet: true}
}

func (v NullableEntityIdentifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEntityIdentifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


