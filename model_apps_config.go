/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AppsConfig struct for AppsConfig
type AppsConfig struct {
	// Whether to allow pod external traffic.
	AllowExternalTraffic NullableBool `json:"allowExternalTraffic,omitempty"`
	// Whether to allow apps unrestricted view access.
	AllowUnrestictedViewAccess NullableBool `json:"allowUnrestictedViewAccess,omitempty"`
	// Specifies the various modes for running apps. 'kDisabled' specifies that apps are disabled. 'kBareMetal' specifies that apps could only run in containers on the node (no VM). 'kVmOnly' specifies that apps could only run in containers on a VM hosted by the node.
	AppsMode NullableString `json:"appsMode,omitempty"`
	AppsSubnet *Subnet `json:"appsSubnet,omitempty"`
	// The system memory to overcommit for apps.
	OvercommitMemoryPct NullableInt32 `json:"overcommitMemoryPct,omitempty"`
	// The CPU millicores to reserve for apps.
	ReservedCpuMillicores NullableInt32 `json:"reservedCpuMillicores,omitempty"`
	// The system memory to reserve for apps.
	ReservedMemoryPct NullableInt32 `json:"reservedMemoryPct,omitempty"`
}

// NewAppsConfig instantiates a new AppsConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppsConfig() *AppsConfig {
	this := AppsConfig{}
	return &this
}

// NewAppsConfigWithDefaults instantiates a new AppsConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppsConfigWithDefaults() *AppsConfig {
	this := AppsConfig{}
	return &this
}

// GetAllowExternalTraffic returns the AllowExternalTraffic field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppsConfig) GetAllowExternalTraffic() bool {
	if o == nil || o.AllowExternalTraffic.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllowExternalTraffic.Get()
}

// GetAllowExternalTrafficOk returns a tuple with the AllowExternalTraffic field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppsConfig) GetAllowExternalTrafficOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllowExternalTraffic.Get(), o.AllowExternalTraffic.IsSet()
}

// HasAllowExternalTraffic returns a boolean if a field has been set.
func (o *AppsConfig) HasAllowExternalTraffic() bool {
	if o != nil && o.AllowExternalTraffic.IsSet() {
		return true
	}

	return false
}

// SetAllowExternalTraffic gets a reference to the given NullableBool and assigns it to the AllowExternalTraffic field.
func (o *AppsConfig) SetAllowExternalTraffic(v bool) {
	o.AllowExternalTraffic.Set(&v)
}
// SetAllowExternalTrafficNil sets the value for AllowExternalTraffic to be an explicit nil
func (o *AppsConfig) SetAllowExternalTrafficNil() {
	o.AllowExternalTraffic.Set(nil)
}

// UnsetAllowExternalTraffic ensures that no value is present for AllowExternalTraffic, not even an explicit nil
func (o *AppsConfig) UnsetAllowExternalTraffic() {
	o.AllowExternalTraffic.Unset()
}

// GetAllowUnrestictedViewAccess returns the AllowUnrestictedViewAccess field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppsConfig) GetAllowUnrestictedViewAccess() bool {
	if o == nil || o.AllowUnrestictedViewAccess.Get() == nil {
		var ret bool
		return ret
	}
	return *o.AllowUnrestictedViewAccess.Get()
}

// GetAllowUnrestictedViewAccessOk returns a tuple with the AllowUnrestictedViewAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppsConfig) GetAllowUnrestictedViewAccessOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AllowUnrestictedViewAccess.Get(), o.AllowUnrestictedViewAccess.IsSet()
}

// HasAllowUnrestictedViewAccess returns a boolean if a field has been set.
func (o *AppsConfig) HasAllowUnrestictedViewAccess() bool {
	if o != nil && o.AllowUnrestictedViewAccess.IsSet() {
		return true
	}

	return false
}

// SetAllowUnrestictedViewAccess gets a reference to the given NullableBool and assigns it to the AllowUnrestictedViewAccess field.
func (o *AppsConfig) SetAllowUnrestictedViewAccess(v bool) {
	o.AllowUnrestictedViewAccess.Set(&v)
}
// SetAllowUnrestictedViewAccessNil sets the value for AllowUnrestictedViewAccess to be an explicit nil
func (o *AppsConfig) SetAllowUnrestictedViewAccessNil() {
	o.AllowUnrestictedViewAccess.Set(nil)
}

// UnsetAllowUnrestictedViewAccess ensures that no value is present for AllowUnrestictedViewAccess, not even an explicit nil
func (o *AppsConfig) UnsetAllowUnrestictedViewAccess() {
	o.AllowUnrestictedViewAccess.Unset()
}

// GetAppsMode returns the AppsMode field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppsConfig) GetAppsMode() string {
	if o == nil || o.AppsMode.Get() == nil {
		var ret string
		return ret
	}
	return *o.AppsMode.Get()
}

// GetAppsModeOk returns a tuple with the AppsMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppsConfig) GetAppsModeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AppsMode.Get(), o.AppsMode.IsSet()
}

// HasAppsMode returns a boolean if a field has been set.
func (o *AppsConfig) HasAppsMode() bool {
	if o != nil && o.AppsMode.IsSet() {
		return true
	}

	return false
}

// SetAppsMode gets a reference to the given NullableString and assigns it to the AppsMode field.
func (o *AppsConfig) SetAppsMode(v string) {
	o.AppsMode.Set(&v)
}
// SetAppsModeNil sets the value for AppsMode to be an explicit nil
func (o *AppsConfig) SetAppsModeNil() {
	o.AppsMode.Set(nil)
}

// UnsetAppsMode ensures that no value is present for AppsMode, not even an explicit nil
func (o *AppsConfig) UnsetAppsMode() {
	o.AppsMode.Unset()
}

// GetAppsSubnet returns the AppsSubnet field value if set, zero value otherwise.
func (o *AppsConfig) GetAppsSubnet() Subnet {
	if o == nil || o.AppsSubnet == nil {
		var ret Subnet
		return ret
	}
	return *o.AppsSubnet
}

// GetAppsSubnetOk returns a tuple with the AppsSubnet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AppsConfig) GetAppsSubnetOk() (*Subnet, bool) {
	if o == nil || o.AppsSubnet == nil {
		return nil, false
	}
	return o.AppsSubnet, true
}

// HasAppsSubnet returns a boolean if a field has been set.
func (o *AppsConfig) HasAppsSubnet() bool {
	if o != nil && o.AppsSubnet != nil {
		return true
	}

	return false
}

// SetAppsSubnet gets a reference to the given Subnet and assigns it to the AppsSubnet field.
func (o *AppsConfig) SetAppsSubnet(v Subnet) {
	o.AppsSubnet = &v
}

// GetOvercommitMemoryPct returns the OvercommitMemoryPct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppsConfig) GetOvercommitMemoryPct() int32 {
	if o == nil || o.OvercommitMemoryPct.Get() == nil {
		var ret int32
		return ret
	}
	return *o.OvercommitMemoryPct.Get()
}

// GetOvercommitMemoryPctOk returns a tuple with the OvercommitMemoryPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppsConfig) GetOvercommitMemoryPctOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.OvercommitMemoryPct.Get(), o.OvercommitMemoryPct.IsSet()
}

// HasOvercommitMemoryPct returns a boolean if a field has been set.
func (o *AppsConfig) HasOvercommitMemoryPct() bool {
	if o != nil && o.OvercommitMemoryPct.IsSet() {
		return true
	}

	return false
}

// SetOvercommitMemoryPct gets a reference to the given NullableInt32 and assigns it to the OvercommitMemoryPct field.
func (o *AppsConfig) SetOvercommitMemoryPct(v int32) {
	o.OvercommitMemoryPct.Set(&v)
}
// SetOvercommitMemoryPctNil sets the value for OvercommitMemoryPct to be an explicit nil
func (o *AppsConfig) SetOvercommitMemoryPctNil() {
	o.OvercommitMemoryPct.Set(nil)
}

// UnsetOvercommitMemoryPct ensures that no value is present for OvercommitMemoryPct, not even an explicit nil
func (o *AppsConfig) UnsetOvercommitMemoryPct() {
	o.OvercommitMemoryPct.Unset()
}

// GetReservedCpuMillicores returns the ReservedCpuMillicores field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppsConfig) GetReservedCpuMillicores() int32 {
	if o == nil || o.ReservedCpuMillicores.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ReservedCpuMillicores.Get()
}

// GetReservedCpuMillicoresOk returns a tuple with the ReservedCpuMillicores field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppsConfig) GetReservedCpuMillicoresOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReservedCpuMillicores.Get(), o.ReservedCpuMillicores.IsSet()
}

// HasReservedCpuMillicores returns a boolean if a field has been set.
func (o *AppsConfig) HasReservedCpuMillicores() bool {
	if o != nil && o.ReservedCpuMillicores.IsSet() {
		return true
	}

	return false
}

// SetReservedCpuMillicores gets a reference to the given NullableInt32 and assigns it to the ReservedCpuMillicores field.
func (o *AppsConfig) SetReservedCpuMillicores(v int32) {
	o.ReservedCpuMillicores.Set(&v)
}
// SetReservedCpuMillicoresNil sets the value for ReservedCpuMillicores to be an explicit nil
func (o *AppsConfig) SetReservedCpuMillicoresNil() {
	o.ReservedCpuMillicores.Set(nil)
}

// UnsetReservedCpuMillicores ensures that no value is present for ReservedCpuMillicores, not even an explicit nil
func (o *AppsConfig) UnsetReservedCpuMillicores() {
	o.ReservedCpuMillicores.Unset()
}

// GetReservedMemoryPct returns the ReservedMemoryPct field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppsConfig) GetReservedMemoryPct() int32 {
	if o == nil || o.ReservedMemoryPct.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ReservedMemoryPct.Get()
}

// GetReservedMemoryPctOk returns a tuple with the ReservedMemoryPct field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppsConfig) GetReservedMemoryPctOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ReservedMemoryPct.Get(), o.ReservedMemoryPct.IsSet()
}

// HasReservedMemoryPct returns a boolean if a field has been set.
func (o *AppsConfig) HasReservedMemoryPct() bool {
	if o != nil && o.ReservedMemoryPct.IsSet() {
		return true
	}

	return false
}

// SetReservedMemoryPct gets a reference to the given NullableInt32 and assigns it to the ReservedMemoryPct field.
func (o *AppsConfig) SetReservedMemoryPct(v int32) {
	o.ReservedMemoryPct.Set(&v)
}
// SetReservedMemoryPctNil sets the value for ReservedMemoryPct to be an explicit nil
func (o *AppsConfig) SetReservedMemoryPctNil() {
	o.ReservedMemoryPct.Set(nil)
}

// UnsetReservedMemoryPct ensures that no value is present for ReservedMemoryPct, not even an explicit nil
func (o *AppsConfig) UnsetReservedMemoryPct() {
	o.ReservedMemoryPct.Unset()
}

func (o AppsConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AllowExternalTraffic.IsSet() {
		toSerialize["allowExternalTraffic"] = o.AllowExternalTraffic.Get()
	}
	if o.AllowUnrestictedViewAccess.IsSet() {
		toSerialize["allowUnrestictedViewAccess"] = o.AllowUnrestictedViewAccess.Get()
	}
	if o.AppsMode.IsSet() {
		toSerialize["appsMode"] = o.AppsMode.Get()
	}
	if o.AppsSubnet != nil {
		toSerialize["appsSubnet"] = o.AppsSubnet
	}
	if o.OvercommitMemoryPct.IsSet() {
		toSerialize["overcommitMemoryPct"] = o.OvercommitMemoryPct.Get()
	}
	if o.ReservedCpuMillicores.IsSet() {
		toSerialize["reservedCpuMillicores"] = o.ReservedCpuMillicores.Get()
	}
	if o.ReservedMemoryPct.IsSet() {
		toSerialize["reservedMemoryPct"] = o.ReservedMemoryPct.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableAppsConfig struct {
	value *AppsConfig
	isSet bool
}

func (v NullableAppsConfig) Get() *AppsConfig {
	return v.value
}

func (v *NullableAppsConfig) Set(val *AppsConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAppsConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAppsConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppsConfig(val *AppsConfig) *NullableAppsConfig {
	return &NullableAppsConfig{value: val, isSet: true}
}

func (v NullableAppsConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppsConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


