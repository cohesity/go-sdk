/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ClusterStats Specifies statistics about this Cohesity Cluster.
type ClusterStats struct {
	// Provides usage and performance statistics for the remote data stored on a Cloud Tier by the Cohesity Cluster.
	CloudUsagePerfStats NullableUsageAndPerformanceStats `json:"cloudUsagePerfStats,omitempty"`
	// Provides the ratio of Cluster Logical Data (totalLogicalUsageBytes) Managed to Cluster Storage Used (totalPhysicalUsageBytes)
	DataReductionRatio NullableFloat64 `json:"dataReductionRatio,omitempty"`
	DataUsageStats *DataUsageStats `json:"dataUsageStats,omitempty"`
	// Specifies the id of the Cohesity Cluster.
	Id NullableInt64 `json:"id,omitempty"`
	// Provides usage and performance statistics for local data stored directly on the Cohesity Cluster.
	LocalUsagePerfStats NullableUsageAndPerformanceStats `json:"localUsagePerfStats,omitempty"`
	// Specifies the total logical data size of all the local and Cloud Tier data stored by the Cohesity Cluster before the data is reduced by change-block tracking, compression and deduplication. The size of the data if the data is fully hydrated or expanded.
	LogicalStats NullableLogicalStats `json:"logicalStats,omitempty"`
	// Provides usage and performance statistics about the local data stored directly on the Cohesity Cluster and the remote data stored on a Cloud Tier for the Cohesity Cluster.
	UsagePerfStats NullableUsageAndPerformanceStats `json:"usagePerfStats,omitempty"`
}

// NewClusterStats instantiates a new ClusterStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewClusterStats() *ClusterStats {
	this := ClusterStats{}
	return &this
}

// NewClusterStatsWithDefaults instantiates a new ClusterStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewClusterStatsWithDefaults() *ClusterStats {
	this := ClusterStats{}
	return &this
}

// GetCloudUsagePerfStats returns the CloudUsagePerfStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStats) GetCloudUsagePerfStats() UsageAndPerformanceStats {
	if o == nil || o.CloudUsagePerfStats.Get() == nil {
		var ret UsageAndPerformanceStats
		return ret
	}
	return *o.CloudUsagePerfStats.Get()
}

// GetCloudUsagePerfStatsOk returns a tuple with the CloudUsagePerfStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStats) GetCloudUsagePerfStatsOk() (*UsageAndPerformanceStats, bool) {
	if o == nil  {
		return nil, false
	}
	return o.CloudUsagePerfStats.Get(), o.CloudUsagePerfStats.IsSet()
}

// HasCloudUsagePerfStats returns a boolean if a field has been set.
func (o *ClusterStats) HasCloudUsagePerfStats() bool {
	if o != nil && o.CloudUsagePerfStats.IsSet() {
		return true
	}

	return false
}

// SetCloudUsagePerfStats gets a reference to the given NullableUsageAndPerformanceStats and assigns it to the CloudUsagePerfStats field.
func (o *ClusterStats) SetCloudUsagePerfStats(v UsageAndPerformanceStats) {
	o.CloudUsagePerfStats.Set(&v)
}
// SetCloudUsagePerfStatsNil sets the value for CloudUsagePerfStats to be an explicit nil
func (o *ClusterStats) SetCloudUsagePerfStatsNil() {
	o.CloudUsagePerfStats.Set(nil)
}

// UnsetCloudUsagePerfStats ensures that no value is present for CloudUsagePerfStats, not even an explicit nil
func (o *ClusterStats) UnsetCloudUsagePerfStats() {
	o.CloudUsagePerfStats.Unset()
}

// GetDataReductionRatio returns the DataReductionRatio field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStats) GetDataReductionRatio() float64 {
	if o == nil || o.DataReductionRatio.Get() == nil {
		var ret float64
		return ret
	}
	return *o.DataReductionRatio.Get()
}

// GetDataReductionRatioOk returns a tuple with the DataReductionRatio field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStats) GetDataReductionRatioOk() (*float64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DataReductionRatio.Get(), o.DataReductionRatio.IsSet()
}

// HasDataReductionRatio returns a boolean if a field has been set.
func (o *ClusterStats) HasDataReductionRatio() bool {
	if o != nil && o.DataReductionRatio.IsSet() {
		return true
	}

	return false
}

// SetDataReductionRatio gets a reference to the given NullableFloat64 and assigns it to the DataReductionRatio field.
func (o *ClusterStats) SetDataReductionRatio(v float64) {
	o.DataReductionRatio.Set(&v)
}
// SetDataReductionRatioNil sets the value for DataReductionRatio to be an explicit nil
func (o *ClusterStats) SetDataReductionRatioNil() {
	o.DataReductionRatio.Set(nil)
}

// UnsetDataReductionRatio ensures that no value is present for DataReductionRatio, not even an explicit nil
func (o *ClusterStats) UnsetDataReductionRatio() {
	o.DataReductionRatio.Unset()
}

// GetDataUsageStats returns the DataUsageStats field value if set, zero value otherwise.
func (o *ClusterStats) GetDataUsageStats() DataUsageStats {
	if o == nil || o.DataUsageStats == nil {
		var ret DataUsageStats
		return ret
	}
	return *o.DataUsageStats
}

// GetDataUsageStatsOk returns a tuple with the DataUsageStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ClusterStats) GetDataUsageStatsOk() (*DataUsageStats, bool) {
	if o == nil || o.DataUsageStats == nil {
		return nil, false
	}
	return o.DataUsageStats, true
}

// HasDataUsageStats returns a boolean if a field has been set.
func (o *ClusterStats) HasDataUsageStats() bool {
	if o != nil && o.DataUsageStats != nil {
		return true
	}

	return false
}

// SetDataUsageStats gets a reference to the given DataUsageStats and assigns it to the DataUsageStats field.
func (o *ClusterStats) SetDataUsageStats(v DataUsageStats) {
	o.DataUsageStats = &v
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStats) GetId() int64 {
	if o == nil || o.Id.Get() == nil {
		var ret int64
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStats) GetIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *ClusterStats) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableInt64 and assigns it to the Id field.
func (o *ClusterStats) SetId(v int64) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *ClusterStats) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *ClusterStats) UnsetId() {
	o.Id.Unset()
}

// GetLocalUsagePerfStats returns the LocalUsagePerfStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStats) GetLocalUsagePerfStats() UsageAndPerformanceStats {
	if o == nil || o.LocalUsagePerfStats.Get() == nil {
		var ret UsageAndPerformanceStats
		return ret
	}
	return *o.LocalUsagePerfStats.Get()
}

// GetLocalUsagePerfStatsOk returns a tuple with the LocalUsagePerfStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStats) GetLocalUsagePerfStatsOk() (*UsageAndPerformanceStats, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalUsagePerfStats.Get(), o.LocalUsagePerfStats.IsSet()
}

// HasLocalUsagePerfStats returns a boolean if a field has been set.
func (o *ClusterStats) HasLocalUsagePerfStats() bool {
	if o != nil && o.LocalUsagePerfStats.IsSet() {
		return true
	}

	return false
}

// SetLocalUsagePerfStats gets a reference to the given NullableUsageAndPerformanceStats and assigns it to the LocalUsagePerfStats field.
func (o *ClusterStats) SetLocalUsagePerfStats(v UsageAndPerformanceStats) {
	o.LocalUsagePerfStats.Set(&v)
}
// SetLocalUsagePerfStatsNil sets the value for LocalUsagePerfStats to be an explicit nil
func (o *ClusterStats) SetLocalUsagePerfStatsNil() {
	o.LocalUsagePerfStats.Set(nil)
}

// UnsetLocalUsagePerfStats ensures that no value is present for LocalUsagePerfStats, not even an explicit nil
func (o *ClusterStats) UnsetLocalUsagePerfStats() {
	o.LocalUsagePerfStats.Unset()
}

// GetLogicalStats returns the LogicalStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStats) GetLogicalStats() LogicalStats {
	if o == nil || o.LogicalStats.Get() == nil {
		var ret LogicalStats
		return ret
	}
	return *o.LogicalStats.Get()
}

// GetLogicalStatsOk returns a tuple with the LogicalStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStats) GetLogicalStatsOk() (*LogicalStats, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalStats.Get(), o.LogicalStats.IsSet()
}

// HasLogicalStats returns a boolean if a field has been set.
func (o *ClusterStats) HasLogicalStats() bool {
	if o != nil && o.LogicalStats.IsSet() {
		return true
	}

	return false
}

// SetLogicalStats gets a reference to the given NullableLogicalStats and assigns it to the LogicalStats field.
func (o *ClusterStats) SetLogicalStats(v LogicalStats) {
	o.LogicalStats.Set(&v)
}
// SetLogicalStatsNil sets the value for LogicalStats to be an explicit nil
func (o *ClusterStats) SetLogicalStatsNil() {
	o.LogicalStats.Set(nil)
}

// UnsetLogicalStats ensures that no value is present for LogicalStats, not even an explicit nil
func (o *ClusterStats) UnsetLogicalStats() {
	o.LogicalStats.Unset()
}

// GetUsagePerfStats returns the UsagePerfStats field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ClusterStats) GetUsagePerfStats() UsageAndPerformanceStats {
	if o == nil || o.UsagePerfStats.Get() == nil {
		var ret UsageAndPerformanceStats
		return ret
	}
	return *o.UsagePerfStats.Get()
}

// GetUsagePerfStatsOk returns a tuple with the UsagePerfStats field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ClusterStats) GetUsagePerfStatsOk() (*UsageAndPerformanceStats, bool) {
	if o == nil  {
		return nil, false
	}
	return o.UsagePerfStats.Get(), o.UsagePerfStats.IsSet()
}

// HasUsagePerfStats returns a boolean if a field has been set.
func (o *ClusterStats) HasUsagePerfStats() bool {
	if o != nil && o.UsagePerfStats.IsSet() {
		return true
	}

	return false
}

// SetUsagePerfStats gets a reference to the given NullableUsageAndPerformanceStats and assigns it to the UsagePerfStats field.
func (o *ClusterStats) SetUsagePerfStats(v UsageAndPerformanceStats) {
	o.UsagePerfStats.Set(&v)
}
// SetUsagePerfStatsNil sets the value for UsagePerfStats to be an explicit nil
func (o *ClusterStats) SetUsagePerfStatsNil() {
	o.UsagePerfStats.Set(nil)
}

// UnsetUsagePerfStats ensures that no value is present for UsagePerfStats, not even an explicit nil
func (o *ClusterStats) UnsetUsagePerfStats() {
	o.UsagePerfStats.Unset()
}

func (o ClusterStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CloudUsagePerfStats.IsSet() {
		toSerialize["cloudUsagePerfStats"] = o.CloudUsagePerfStats.Get()
	}
	if o.DataReductionRatio.IsSet() {
		toSerialize["dataReductionRatio"] = o.DataReductionRatio.Get()
	}
	if o.DataUsageStats != nil {
		toSerialize["dataUsageStats"] = o.DataUsageStats
	}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.LocalUsagePerfStats.IsSet() {
		toSerialize["localUsagePerfStats"] = o.LocalUsagePerfStats.Get()
	}
	if o.LogicalStats.IsSet() {
		toSerialize["logicalStats"] = o.LogicalStats.Get()
	}
	if o.UsagePerfStats.IsSet() {
		toSerialize["usagePerfStats"] = o.UsagePerfStats.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableClusterStats struct {
	value *ClusterStats
	isSet bool
}

func (v NullableClusterStats) Get() *ClusterStats {
	return v.value
}

func (v *NullableClusterStats) Set(val *ClusterStats) {
	v.value = val
	v.isSet = true
}

func (v NullableClusterStats) IsSet() bool {
	return v.isSet
}

func (v *NullableClusterStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableClusterStats(val *ClusterStats) *NullableClusterStats {
	return &NullableClusterStats{value: val, isSet: true}
}

func (v NullableClusterStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableClusterStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


