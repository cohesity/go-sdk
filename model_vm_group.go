/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// VmGroup VmGroup specifies information of a VM Group.
type VmGroup struct {
	// Specifies name of the VM group.
	Name NullableString `json:"name,omitempty"`
	// Specifies VMs in the group.
	Vms []VmInfo `json:"vms,omitempty"`
}

// NewVmGroup instantiates a new VmGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVmGroup() *VmGroup {
	this := VmGroup{}
	return &this
}

// NewVmGroupWithDefaults instantiates a new VmGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVmGroupWithDefaults() *VmGroup {
	this := VmGroup{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmGroup) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmGroup) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *VmGroup) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *VmGroup) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *VmGroup) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *VmGroup) UnsetName() {
	o.Name.Unset()
}

// GetVms returns the Vms field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *VmGroup) GetVms() []VmInfo {
	if o == nil  {
		var ret []VmInfo
		return ret
	}
	return o.Vms
}

// GetVmsOk returns a tuple with the Vms field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *VmGroup) GetVmsOk() (*[]VmInfo, bool) {
	if o == nil || o.Vms == nil {
		return nil, false
	}
	return &o.Vms, true
}

// HasVms returns a boolean if a field has been set.
func (o *VmGroup) HasVms() bool {
	if o != nil && o.Vms != nil {
		return true
	}

	return false
}

// SetVms gets a reference to the given []VmInfo and assigns it to the Vms field.
func (o *VmGroup) SetVms(v []VmInfo) {
	o.Vms = v
}

func (o VmGroup) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Vms != nil {
		toSerialize["vms"] = o.Vms
	}
	return json.Marshal(toSerialize)
}

type NullableVmGroup struct {
	value *VmGroup
	isSet bool
}

func (v NullableVmGroup) Get() *VmGroup {
	return v.value
}

func (v *NullableVmGroup) Set(val *VmGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableVmGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableVmGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVmGroup(val *VmGroup) *NullableVmGroup {
	return &NullableVmGroup{value: val, isSet: true}
}

func (v NullableVmGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVmGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


