/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FullSnapshotInfo Specifies the info regarding how to restore to a particular full or incremental snapshot.
type FullSnapshotInfo struct {
	RestoreInfo *RestoreInfo `json:"restoreInfo,omitempty"`
	// Specifies the location holding snapshot copies that may be used for restore.
	SnapshotTarget []SnapshotTargetSettings `json:"snapshotTarget,omitempty"`
}

// NewFullSnapshotInfo instantiates a new FullSnapshotInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFullSnapshotInfo() *FullSnapshotInfo {
	this := FullSnapshotInfo{}
	return &this
}

// NewFullSnapshotInfoWithDefaults instantiates a new FullSnapshotInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFullSnapshotInfoWithDefaults() *FullSnapshotInfo {
	this := FullSnapshotInfo{}
	return &this
}

// GetRestoreInfo returns the RestoreInfo field value if set, zero value otherwise.
func (o *FullSnapshotInfo) GetRestoreInfo() RestoreInfo {
	if o == nil || o.RestoreInfo == nil {
		var ret RestoreInfo
		return ret
	}
	return *o.RestoreInfo
}

// GetRestoreInfoOk returns a tuple with the RestoreInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FullSnapshotInfo) GetRestoreInfoOk() (*RestoreInfo, bool) {
	if o == nil || o.RestoreInfo == nil {
		return nil, false
	}
	return o.RestoreInfo, true
}

// HasRestoreInfo returns a boolean if a field has been set.
func (o *FullSnapshotInfo) HasRestoreInfo() bool {
	if o != nil && o.RestoreInfo != nil {
		return true
	}

	return false
}

// SetRestoreInfo gets a reference to the given RestoreInfo and assigns it to the RestoreInfo field.
func (o *FullSnapshotInfo) SetRestoreInfo(v RestoreInfo) {
	o.RestoreInfo = &v
}

// GetSnapshotTarget returns the SnapshotTarget field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FullSnapshotInfo) GetSnapshotTarget() []SnapshotTargetSettings {
	if o == nil  {
		var ret []SnapshotTargetSettings
		return ret
	}
	return o.SnapshotTarget
}

// GetSnapshotTargetOk returns a tuple with the SnapshotTarget field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FullSnapshotInfo) GetSnapshotTargetOk() (*[]SnapshotTargetSettings, bool) {
	if o == nil || o.SnapshotTarget == nil {
		return nil, false
	}
	return &o.SnapshotTarget, true
}

// HasSnapshotTarget returns a boolean if a field has been set.
func (o *FullSnapshotInfo) HasSnapshotTarget() bool {
	if o != nil && o.SnapshotTarget != nil {
		return true
	}

	return false
}

// SetSnapshotTarget gets a reference to the given []SnapshotTargetSettings and assigns it to the SnapshotTarget field.
func (o *FullSnapshotInfo) SetSnapshotTarget(v []SnapshotTargetSettings) {
	o.SnapshotTarget = v
}

func (o FullSnapshotInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RestoreInfo != nil {
		toSerialize["restoreInfo"] = o.RestoreInfo
	}
	if o.SnapshotTarget != nil {
		toSerialize["snapshotTarget"] = o.SnapshotTarget
	}
	return json.Marshal(toSerialize)
}

type NullableFullSnapshotInfo struct {
	value *FullSnapshotInfo
	isSet bool
}

func (v NullableFullSnapshotInfo) Get() *FullSnapshotInfo {
	return v.value
}

func (v *NullableFullSnapshotInfo) Set(val *FullSnapshotInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFullSnapshotInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFullSnapshotInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFullSnapshotInfo(val *FullSnapshotInfo) *NullableFullSnapshotInfo {
	return &NullableFullSnapshotInfo{value: val, isSet: true}
}

func (v NullableFullSnapshotInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFullSnapshotInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


