/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleDataGuardInfo Specifies information about the Database in Oracle DataGuard configuration. Data GUard provides a comprehensive set of services that create, maintain, and monitor one or more standby databases to enable production Oracle databases to survive disasters and data corruptions. Data Guard maintains these standby databases as transactionally consistent copies of the production databases.
type OracleDataGuardInfo struct {
	// Specifies the role of the DataGuard database. Specifies the role of the DataGuard database.  A Data Guard configuration contains one production database, also referred to as the primary database, that functions in the primary role. The primary database can be either a single-instance Oracle database or an Oracle Real Application Clusters database.  A standby database is a transactionally consistent copy of the primary database. Similar to a primary database, a standby database can be either a single-instance Oracle database or an Oracle Real Application Clusters database. 'kPrimary' indicates that the current database is primary database. 'kStandby' indicates that the current database is standby database.
	Role NullableString `json:"role,omitempty"`
	// Specifies the type of standby database. Specifies the type of standby database. 'kPhysical' indicates that the current database provides a physically identical copy of the primary database, with on disk structures identical to the primary database on a block-for-block basis. It is kept synchronized with the primary database, though Redo Apply, which recovers the redo data received from the primary database and applies the redo to the physical standby database. 'kLogical' indicates that the current database provides the same logical information as the production database, although the physical structure can be different. It is kept synchronized with the primary database thorugh SQL Apply, which transforms the data in the redo received from the primary database into SQL statements and then executing the SQL statements on the standby database. 'kSnapshot' indicates that the current database is a fully updateable standby created by converting a physical standby database into a snasphot standby database. It receives and archives but does not apply redo data from a primary database.
	Type NullableString `json:"type,omitempty"`
}

// NewOracleDataGuardInfo instantiates a new OracleDataGuardInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDataGuardInfo() *OracleDataGuardInfo {
	this := OracleDataGuardInfo{}
	return &this
}

// NewOracleDataGuardInfoWithDefaults instantiates a new OracleDataGuardInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDataGuardInfoWithDefaults() *OracleDataGuardInfo {
	this := OracleDataGuardInfo{}
	return &this
}

// GetRole returns the Role field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDataGuardInfo) GetRole() string {
	if o == nil || o.Role.Get() == nil {
		var ret string
		return ret
	}
	return *o.Role.Get()
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDataGuardInfo) GetRoleOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Role.Get(), o.Role.IsSet()
}

// HasRole returns a boolean if a field has been set.
func (o *OracleDataGuardInfo) HasRole() bool {
	if o != nil && o.Role.IsSet() {
		return true
	}

	return false
}

// SetRole gets a reference to the given NullableString and assigns it to the Role field.
func (o *OracleDataGuardInfo) SetRole(v string) {
	o.Role.Set(&v)
}
// SetRoleNil sets the value for Role to be an explicit nil
func (o *OracleDataGuardInfo) SetRoleNil() {
	o.Role.Set(nil)
}

// UnsetRole ensures that no value is present for Role, not even an explicit nil
func (o *OracleDataGuardInfo) UnsetRole() {
	o.Role.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDataGuardInfo) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDataGuardInfo) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *OracleDataGuardInfo) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *OracleDataGuardInfo) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *OracleDataGuardInfo) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *OracleDataGuardInfo) UnsetType() {
	o.Type.Unset()
}

func (o OracleDataGuardInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Role.IsSet() {
		toSerialize["role"] = o.Role.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleDataGuardInfo struct {
	value *OracleDataGuardInfo
	isSet bool
}

func (v NullableOracleDataGuardInfo) Get() *OracleDataGuardInfo {
	return v.value
}

func (v *NullableOracleDataGuardInfo) Set(val *OracleDataGuardInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDataGuardInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDataGuardInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDataGuardInfo(val *OracleDataGuardInfo) *NullableOracleDataGuardInfo {
	return &NullableOracleDataGuardInfo{value: val, isSet: true}
}

func (v NullableOracleDataGuardInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDataGuardInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


