/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// UserIdMapping Specifies how the Unix and Windows users are mapped in an Active Directory.
type UserIdMapping struct {
	CentrifyZoneMapping *CentrifyZone `json:"centrifyZoneMapping,omitempty"`
	CustomAttributesMapping *CustomUnixIdAttributes `json:"customAttributesMapping,omitempty"`
	FixedMapping *FixedUnixIdMapping `json:"fixedMapping,omitempty"`
	// Specifies the mapping type used. 'kRid' indicates the kRid mapping type. 'kRfc2307' indicates the kRfc2307 mapping type. 'kSfu30' indicates the kSfu30 mapping type. 'kCentrify' indicates the mapping type to refer to a centrify zone. 'kFixed' indicates the mapping from all Active Directory users to a fixed Unix uid, and gid. 'kCustomAttributes' indicates the mapping to derive from custom attributes defined in an AD domain. 'kLdapProvider' indicates the Active Directory to LDAP provider mapping.
	Type NullableString `json:"type,omitempty"`
}

// NewUserIdMapping instantiates a new UserIdMapping object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserIdMapping() *UserIdMapping {
	this := UserIdMapping{}
	return &this
}

// NewUserIdMappingWithDefaults instantiates a new UserIdMapping object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserIdMappingWithDefaults() *UserIdMapping {
	this := UserIdMapping{}
	return &this
}

// GetCentrifyZoneMapping returns the CentrifyZoneMapping field value if set, zero value otherwise.
func (o *UserIdMapping) GetCentrifyZoneMapping() CentrifyZone {
	if o == nil || o.CentrifyZoneMapping == nil {
		var ret CentrifyZone
		return ret
	}
	return *o.CentrifyZoneMapping
}

// GetCentrifyZoneMappingOk returns a tuple with the CentrifyZoneMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdMapping) GetCentrifyZoneMappingOk() (*CentrifyZone, bool) {
	if o == nil || o.CentrifyZoneMapping == nil {
		return nil, false
	}
	return o.CentrifyZoneMapping, true
}

// HasCentrifyZoneMapping returns a boolean if a field has been set.
func (o *UserIdMapping) HasCentrifyZoneMapping() bool {
	if o != nil && o.CentrifyZoneMapping != nil {
		return true
	}

	return false
}

// SetCentrifyZoneMapping gets a reference to the given CentrifyZone and assigns it to the CentrifyZoneMapping field.
func (o *UserIdMapping) SetCentrifyZoneMapping(v CentrifyZone) {
	o.CentrifyZoneMapping = &v
}

// GetCustomAttributesMapping returns the CustomAttributesMapping field value if set, zero value otherwise.
func (o *UserIdMapping) GetCustomAttributesMapping() CustomUnixIdAttributes {
	if o == nil || o.CustomAttributesMapping == nil {
		var ret CustomUnixIdAttributes
		return ret
	}
	return *o.CustomAttributesMapping
}

// GetCustomAttributesMappingOk returns a tuple with the CustomAttributesMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdMapping) GetCustomAttributesMappingOk() (*CustomUnixIdAttributes, bool) {
	if o == nil || o.CustomAttributesMapping == nil {
		return nil, false
	}
	return o.CustomAttributesMapping, true
}

// HasCustomAttributesMapping returns a boolean if a field has been set.
func (o *UserIdMapping) HasCustomAttributesMapping() bool {
	if o != nil && o.CustomAttributesMapping != nil {
		return true
	}

	return false
}

// SetCustomAttributesMapping gets a reference to the given CustomUnixIdAttributes and assigns it to the CustomAttributesMapping field.
func (o *UserIdMapping) SetCustomAttributesMapping(v CustomUnixIdAttributes) {
	o.CustomAttributesMapping = &v
}

// GetFixedMapping returns the FixedMapping field value if set, zero value otherwise.
func (o *UserIdMapping) GetFixedMapping() FixedUnixIdMapping {
	if o == nil || o.FixedMapping == nil {
		var ret FixedUnixIdMapping
		return ret
	}
	return *o.FixedMapping
}

// GetFixedMappingOk returns a tuple with the FixedMapping field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UserIdMapping) GetFixedMappingOk() (*FixedUnixIdMapping, bool) {
	if o == nil || o.FixedMapping == nil {
		return nil, false
	}
	return o.FixedMapping, true
}

// HasFixedMapping returns a boolean if a field has been set.
func (o *UserIdMapping) HasFixedMapping() bool {
	if o != nil && o.FixedMapping != nil {
		return true
	}

	return false
}

// SetFixedMapping gets a reference to the given FixedUnixIdMapping and assigns it to the FixedMapping field.
func (o *UserIdMapping) SetFixedMapping(v FixedUnixIdMapping) {
	o.FixedMapping = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *UserIdMapping) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *UserIdMapping) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *UserIdMapping) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *UserIdMapping) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *UserIdMapping) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *UserIdMapping) UnsetType() {
	o.Type.Unset()
}

func (o UserIdMapping) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CentrifyZoneMapping != nil {
		toSerialize["centrifyZoneMapping"] = o.CentrifyZoneMapping
	}
	if o.CustomAttributesMapping != nil {
		toSerialize["customAttributesMapping"] = o.CustomAttributesMapping
	}
	if o.FixedMapping != nil {
		toSerialize["fixedMapping"] = o.FixedMapping
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableUserIdMapping struct {
	value *UserIdMapping
	isSet bool
}

func (v NullableUserIdMapping) Get() *UserIdMapping {
	return v.value
}

func (v *NullableUserIdMapping) Set(val *UserIdMapping) {
	v.value = val
	v.isSet = true
}

func (v NullableUserIdMapping) IsSet() bool {
	return v.isSet
}

func (v *NullableUserIdMapping) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserIdMapping(val *UserIdMapping) *NullableUserIdMapping {
	return &NullableUserIdMapping{value: val, isSet: true}
}

func (v NullableUserIdMapping) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserIdMapping) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


