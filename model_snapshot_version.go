/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SnapshotVersion Specifies information about snapshots of a backup object.
type SnapshotVersion struct {
	// Specifies the number of the attempts made by the Job Run to capture a snapshot of the object. For example, if an snapshot is successfully captured after three attempts, this field equals 3.
	AttemptNumber NullableInt64 `json:"attemptNumber,omitempty"`
	// Specifies the size of the data captured from the source object. For a full backup (where Change Block Tracking is not utilized) this field is equal to logicalSizeBytes. For an incremental backup (where Change Block Tracking is utilized), this field specifies the size of the data that has changed since the last backup.
	DeltaSizeBytes NullableInt64 `json:"deltaSizeBytes,omitempty"`
	// Specifies the indexing status of the snapshot. Specifies the indexing status of the snapshot. 'kStarted' indicates that indexing has started. 'kDone' indicates that indexing has been completed according to the type of object. 'kNoIndex' indicates that the snapshot cannot be indexed. This is the case during archival restore. 'kIceboxRestoreStarted' indicates that indexing is started from an archive. 'kIceboxRestoreError' indicates that an error occurred during restore from archiveand there is no index present. 'kSkipped' indicates that indexing is skipped due to indexing backlog.
	IndexingStatus NullableString `json:"indexingStatus,omitempty"`
	// Specifies if an app-consistent snapshot was captured. For example, was the VM was quiesced before the snapshot was captured.
	IsAppConsistent NullableBool `json:"isAppConsistent,omitempty"`
	// Specifies if the snapshot is a full backup. For example, all blocks of the VM is captured and Change Block Tracking is not utilized.
	IsFullBackup NullableBool `json:"isFullBackup,omitempty"`
	// Specifies the id of the Job Run that captured the snapshot.
	JobRunId NullableInt64 `json:"jobRunId,omitempty"`
	// Specifies the local path relative to the View, without the ViewBox/View prefix.
	LocalMountPath NullableString `json:"localMountPath,omitempty"`
	// Specifies the size of the snapshot if the data is fully hydrated or expanded and not reduced by change-block tracking, compression and deduplication. For example if a VMDK of size 100GB is created with thin provisioning and the disk size to store the VMDK is 20GB. The logical size of this object is 100GB and the physical size is 20GB.
	LogicalSizeBytes NullableInt64 `json:"logicalSizeBytes,omitempty"`
	// Specifies the amount of data actually used on the disk to store this object after being reduced by change-block tracking, compression and deduplication.
	PhysicalSizeBytes NullableInt64 `json:"physicalSizeBytes,omitempty"`
	// Specifies the total amount of disk space used to store this object on the primary storage. For example the total amount of disk space used to store the VM files (such as the VMDK files) on the primary datastore.
	PrimaryPhysicalSizeBytes NullableInt64 `json:"primaryPhysicalSizeBytes,omitempty"`
	// Specifies the list of replication information about the current snapshot.
	ReplicaInfoList []ReplicaInfo `json:"replicaInfoList,omitempty"`
	// Specifies the time when the Job Run starts capturing a snapshot. Specified as a Unix epoch Timestamp (in microseconds).
	StartedTimeUsecs NullableInt64 `json:"startedTimeUsecs,omitempty"`
}

// NewSnapshotVersion instantiates a new SnapshotVersion object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotVersion() *SnapshotVersion {
	this := SnapshotVersion{}
	return &this
}

// NewSnapshotVersionWithDefaults instantiates a new SnapshotVersion object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotVersionWithDefaults() *SnapshotVersion {
	this := SnapshotVersion{}
	return &this
}

// GetAttemptNumber returns the AttemptNumber field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetAttemptNumber() int64 {
	if o == nil || o.AttemptNumber.Get() == nil {
		var ret int64
		return ret
	}
	return *o.AttemptNumber.Get()
}

// GetAttemptNumberOk returns a tuple with the AttemptNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetAttemptNumberOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AttemptNumber.Get(), o.AttemptNumber.IsSet()
}

// HasAttemptNumber returns a boolean if a field has been set.
func (o *SnapshotVersion) HasAttemptNumber() bool {
	if o != nil && o.AttemptNumber.IsSet() {
		return true
	}

	return false
}

// SetAttemptNumber gets a reference to the given NullableInt64 and assigns it to the AttemptNumber field.
func (o *SnapshotVersion) SetAttemptNumber(v int64) {
	o.AttemptNumber.Set(&v)
}
// SetAttemptNumberNil sets the value for AttemptNumber to be an explicit nil
func (o *SnapshotVersion) SetAttemptNumberNil() {
	o.AttemptNumber.Set(nil)
}

// UnsetAttemptNumber ensures that no value is present for AttemptNumber, not even an explicit nil
func (o *SnapshotVersion) UnsetAttemptNumber() {
	o.AttemptNumber.Unset()
}

// GetDeltaSizeBytes returns the DeltaSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetDeltaSizeBytes() int64 {
	if o == nil || o.DeltaSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.DeltaSizeBytes.Get()
}

// GetDeltaSizeBytesOk returns a tuple with the DeltaSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetDeltaSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeltaSizeBytes.Get(), o.DeltaSizeBytes.IsSet()
}

// HasDeltaSizeBytes returns a boolean if a field has been set.
func (o *SnapshotVersion) HasDeltaSizeBytes() bool {
	if o != nil && o.DeltaSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetDeltaSizeBytes gets a reference to the given NullableInt64 and assigns it to the DeltaSizeBytes field.
func (o *SnapshotVersion) SetDeltaSizeBytes(v int64) {
	o.DeltaSizeBytes.Set(&v)
}
// SetDeltaSizeBytesNil sets the value for DeltaSizeBytes to be an explicit nil
func (o *SnapshotVersion) SetDeltaSizeBytesNil() {
	o.DeltaSizeBytes.Set(nil)
}

// UnsetDeltaSizeBytes ensures that no value is present for DeltaSizeBytes, not even an explicit nil
func (o *SnapshotVersion) UnsetDeltaSizeBytes() {
	o.DeltaSizeBytes.Unset()
}

// GetIndexingStatus returns the IndexingStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetIndexingStatus() string {
	if o == nil || o.IndexingStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.IndexingStatus.Get()
}

// GetIndexingStatusOk returns a tuple with the IndexingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetIndexingStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IndexingStatus.Get(), o.IndexingStatus.IsSet()
}

// HasIndexingStatus returns a boolean if a field has been set.
func (o *SnapshotVersion) HasIndexingStatus() bool {
	if o != nil && o.IndexingStatus.IsSet() {
		return true
	}

	return false
}

// SetIndexingStatus gets a reference to the given NullableString and assigns it to the IndexingStatus field.
func (o *SnapshotVersion) SetIndexingStatus(v string) {
	o.IndexingStatus.Set(&v)
}
// SetIndexingStatusNil sets the value for IndexingStatus to be an explicit nil
func (o *SnapshotVersion) SetIndexingStatusNil() {
	o.IndexingStatus.Set(nil)
}

// UnsetIndexingStatus ensures that no value is present for IndexingStatus, not even an explicit nil
func (o *SnapshotVersion) UnsetIndexingStatus() {
	o.IndexingStatus.Unset()
}

// GetIsAppConsistent returns the IsAppConsistent field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetIsAppConsistent() bool {
	if o == nil || o.IsAppConsistent.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsAppConsistent.Get()
}

// GetIsAppConsistentOk returns a tuple with the IsAppConsistent field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetIsAppConsistentOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsAppConsistent.Get(), o.IsAppConsistent.IsSet()
}

// HasIsAppConsistent returns a boolean if a field has been set.
func (o *SnapshotVersion) HasIsAppConsistent() bool {
	if o != nil && o.IsAppConsistent.IsSet() {
		return true
	}

	return false
}

// SetIsAppConsistent gets a reference to the given NullableBool and assigns it to the IsAppConsistent field.
func (o *SnapshotVersion) SetIsAppConsistent(v bool) {
	o.IsAppConsistent.Set(&v)
}
// SetIsAppConsistentNil sets the value for IsAppConsistent to be an explicit nil
func (o *SnapshotVersion) SetIsAppConsistentNil() {
	o.IsAppConsistent.Set(nil)
}

// UnsetIsAppConsistent ensures that no value is present for IsAppConsistent, not even an explicit nil
func (o *SnapshotVersion) UnsetIsAppConsistent() {
	o.IsAppConsistent.Unset()
}

// GetIsFullBackup returns the IsFullBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetIsFullBackup() bool {
	if o == nil || o.IsFullBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsFullBackup.Get()
}

// GetIsFullBackupOk returns a tuple with the IsFullBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetIsFullBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsFullBackup.Get(), o.IsFullBackup.IsSet()
}

// HasIsFullBackup returns a boolean if a field has been set.
func (o *SnapshotVersion) HasIsFullBackup() bool {
	if o != nil && o.IsFullBackup.IsSet() {
		return true
	}

	return false
}

// SetIsFullBackup gets a reference to the given NullableBool and assigns it to the IsFullBackup field.
func (o *SnapshotVersion) SetIsFullBackup(v bool) {
	o.IsFullBackup.Set(&v)
}
// SetIsFullBackupNil sets the value for IsFullBackup to be an explicit nil
func (o *SnapshotVersion) SetIsFullBackupNil() {
	o.IsFullBackup.Set(nil)
}

// UnsetIsFullBackup ensures that no value is present for IsFullBackup, not even an explicit nil
func (o *SnapshotVersion) UnsetIsFullBackup() {
	o.IsFullBackup.Unset()
}

// GetJobRunId returns the JobRunId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetJobRunId() int64 {
	if o == nil || o.JobRunId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.JobRunId.Get()
}

// GetJobRunIdOk returns a tuple with the JobRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetJobRunIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobRunId.Get(), o.JobRunId.IsSet()
}

// HasJobRunId returns a boolean if a field has been set.
func (o *SnapshotVersion) HasJobRunId() bool {
	if o != nil && o.JobRunId.IsSet() {
		return true
	}

	return false
}

// SetJobRunId gets a reference to the given NullableInt64 and assigns it to the JobRunId field.
func (o *SnapshotVersion) SetJobRunId(v int64) {
	o.JobRunId.Set(&v)
}
// SetJobRunIdNil sets the value for JobRunId to be an explicit nil
func (o *SnapshotVersion) SetJobRunIdNil() {
	o.JobRunId.Set(nil)
}

// UnsetJobRunId ensures that no value is present for JobRunId, not even an explicit nil
func (o *SnapshotVersion) UnsetJobRunId() {
	o.JobRunId.Unset()
}

// GetLocalMountPath returns the LocalMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetLocalMountPath() string {
	if o == nil || o.LocalMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.LocalMountPath.Get()
}

// GetLocalMountPathOk returns a tuple with the LocalMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetLocalMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LocalMountPath.Get(), o.LocalMountPath.IsSet()
}

// HasLocalMountPath returns a boolean if a field has been set.
func (o *SnapshotVersion) HasLocalMountPath() bool {
	if o != nil && o.LocalMountPath.IsSet() {
		return true
	}

	return false
}

// SetLocalMountPath gets a reference to the given NullableString and assigns it to the LocalMountPath field.
func (o *SnapshotVersion) SetLocalMountPath(v string) {
	o.LocalMountPath.Set(&v)
}
// SetLocalMountPathNil sets the value for LocalMountPath to be an explicit nil
func (o *SnapshotVersion) SetLocalMountPathNil() {
	o.LocalMountPath.Set(nil)
}

// UnsetLocalMountPath ensures that no value is present for LocalMountPath, not even an explicit nil
func (o *SnapshotVersion) UnsetLocalMountPath() {
	o.LocalMountPath.Unset()
}

// GetLogicalSizeBytes returns the LogicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetLogicalSizeBytes() int64 {
	if o == nil || o.LogicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LogicalSizeBytes.Get()
}

// GetLogicalSizeBytesOk returns a tuple with the LogicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetLogicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LogicalSizeBytes.Get(), o.LogicalSizeBytes.IsSet()
}

// HasLogicalSizeBytes returns a boolean if a field has been set.
func (o *SnapshotVersion) HasLogicalSizeBytes() bool {
	if o != nil && o.LogicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetLogicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the LogicalSizeBytes field.
func (o *SnapshotVersion) SetLogicalSizeBytes(v int64) {
	o.LogicalSizeBytes.Set(&v)
}
// SetLogicalSizeBytesNil sets the value for LogicalSizeBytes to be an explicit nil
func (o *SnapshotVersion) SetLogicalSizeBytesNil() {
	o.LogicalSizeBytes.Set(nil)
}

// UnsetLogicalSizeBytes ensures that no value is present for LogicalSizeBytes, not even an explicit nil
func (o *SnapshotVersion) UnsetLogicalSizeBytes() {
	o.LogicalSizeBytes.Unset()
}

// GetPhysicalSizeBytes returns the PhysicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetPhysicalSizeBytes() int64 {
	if o == nil || o.PhysicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PhysicalSizeBytes.Get()
}

// GetPhysicalSizeBytesOk returns a tuple with the PhysicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetPhysicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PhysicalSizeBytes.Get(), o.PhysicalSizeBytes.IsSet()
}

// HasPhysicalSizeBytes returns a boolean if a field has been set.
func (o *SnapshotVersion) HasPhysicalSizeBytes() bool {
	if o != nil && o.PhysicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetPhysicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the PhysicalSizeBytes field.
func (o *SnapshotVersion) SetPhysicalSizeBytes(v int64) {
	o.PhysicalSizeBytes.Set(&v)
}
// SetPhysicalSizeBytesNil sets the value for PhysicalSizeBytes to be an explicit nil
func (o *SnapshotVersion) SetPhysicalSizeBytesNil() {
	o.PhysicalSizeBytes.Set(nil)
}

// UnsetPhysicalSizeBytes ensures that no value is present for PhysicalSizeBytes, not even an explicit nil
func (o *SnapshotVersion) UnsetPhysicalSizeBytes() {
	o.PhysicalSizeBytes.Unset()
}

// GetPrimaryPhysicalSizeBytes returns the PrimaryPhysicalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetPrimaryPhysicalSizeBytes() int64 {
	if o == nil || o.PrimaryPhysicalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.PrimaryPhysicalSizeBytes.Get()
}

// GetPrimaryPhysicalSizeBytesOk returns a tuple with the PrimaryPhysicalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetPrimaryPhysicalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PrimaryPhysicalSizeBytes.Get(), o.PrimaryPhysicalSizeBytes.IsSet()
}

// HasPrimaryPhysicalSizeBytes returns a boolean if a field has been set.
func (o *SnapshotVersion) HasPrimaryPhysicalSizeBytes() bool {
	if o != nil && o.PrimaryPhysicalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetPrimaryPhysicalSizeBytes gets a reference to the given NullableInt64 and assigns it to the PrimaryPhysicalSizeBytes field.
func (o *SnapshotVersion) SetPrimaryPhysicalSizeBytes(v int64) {
	o.PrimaryPhysicalSizeBytes.Set(&v)
}
// SetPrimaryPhysicalSizeBytesNil sets the value for PrimaryPhysicalSizeBytes to be an explicit nil
func (o *SnapshotVersion) SetPrimaryPhysicalSizeBytesNil() {
	o.PrimaryPhysicalSizeBytes.Set(nil)
}

// UnsetPrimaryPhysicalSizeBytes ensures that no value is present for PrimaryPhysicalSizeBytes, not even an explicit nil
func (o *SnapshotVersion) UnsetPrimaryPhysicalSizeBytes() {
	o.PrimaryPhysicalSizeBytes.Unset()
}

// GetReplicaInfoList returns the ReplicaInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetReplicaInfoList() []ReplicaInfo {
	if o == nil  {
		var ret []ReplicaInfo
		return ret
	}
	return o.ReplicaInfoList
}

// GetReplicaInfoListOk returns a tuple with the ReplicaInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetReplicaInfoListOk() (*[]ReplicaInfo, bool) {
	if o == nil || o.ReplicaInfoList == nil {
		return nil, false
	}
	return &o.ReplicaInfoList, true
}

// HasReplicaInfoList returns a boolean if a field has been set.
func (o *SnapshotVersion) HasReplicaInfoList() bool {
	if o != nil && o.ReplicaInfoList != nil {
		return true
	}

	return false
}

// SetReplicaInfoList gets a reference to the given []ReplicaInfo and assigns it to the ReplicaInfoList field.
func (o *SnapshotVersion) SetReplicaInfoList(v []ReplicaInfo) {
	o.ReplicaInfoList = v
}

// GetStartedTimeUsecs returns the StartedTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SnapshotVersion) GetStartedTimeUsecs() int64 {
	if o == nil || o.StartedTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.StartedTimeUsecs.Get()
}

// GetStartedTimeUsecsOk returns a tuple with the StartedTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SnapshotVersion) GetStartedTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.StartedTimeUsecs.Get(), o.StartedTimeUsecs.IsSet()
}

// HasStartedTimeUsecs returns a boolean if a field has been set.
func (o *SnapshotVersion) HasStartedTimeUsecs() bool {
	if o != nil && o.StartedTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetStartedTimeUsecs gets a reference to the given NullableInt64 and assigns it to the StartedTimeUsecs field.
func (o *SnapshotVersion) SetStartedTimeUsecs(v int64) {
	o.StartedTimeUsecs.Set(&v)
}
// SetStartedTimeUsecsNil sets the value for StartedTimeUsecs to be an explicit nil
func (o *SnapshotVersion) SetStartedTimeUsecsNil() {
	o.StartedTimeUsecs.Set(nil)
}

// UnsetStartedTimeUsecs ensures that no value is present for StartedTimeUsecs, not even an explicit nil
func (o *SnapshotVersion) UnsetStartedTimeUsecs() {
	o.StartedTimeUsecs.Unset()
}

func (o SnapshotVersion) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AttemptNumber.IsSet() {
		toSerialize["attemptNumber"] = o.AttemptNumber.Get()
	}
	if o.DeltaSizeBytes.IsSet() {
		toSerialize["deltaSizeBytes"] = o.DeltaSizeBytes.Get()
	}
	if o.IndexingStatus.IsSet() {
		toSerialize["indexingStatus"] = o.IndexingStatus.Get()
	}
	if o.IsAppConsistent.IsSet() {
		toSerialize["isAppConsistent"] = o.IsAppConsistent.Get()
	}
	if o.IsFullBackup.IsSet() {
		toSerialize["isFullBackup"] = o.IsFullBackup.Get()
	}
	if o.JobRunId.IsSet() {
		toSerialize["jobRunId"] = o.JobRunId.Get()
	}
	if o.LocalMountPath.IsSet() {
		toSerialize["localMountPath"] = o.LocalMountPath.Get()
	}
	if o.LogicalSizeBytes.IsSet() {
		toSerialize["logicalSizeBytes"] = o.LogicalSizeBytes.Get()
	}
	if o.PhysicalSizeBytes.IsSet() {
		toSerialize["physicalSizeBytes"] = o.PhysicalSizeBytes.Get()
	}
	if o.PrimaryPhysicalSizeBytes.IsSet() {
		toSerialize["primaryPhysicalSizeBytes"] = o.PrimaryPhysicalSizeBytes.Get()
	}
	if o.ReplicaInfoList != nil {
		toSerialize["replicaInfoList"] = o.ReplicaInfoList
	}
	if o.StartedTimeUsecs.IsSet() {
		toSerialize["startedTimeUsecs"] = o.StartedTimeUsecs.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSnapshotVersion struct {
	value *SnapshotVersion
	isSet bool
}

func (v NullableSnapshotVersion) Get() *SnapshotVersion {
	return v.value
}

func (v *NullableSnapshotVersion) Set(val *SnapshotVersion) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotVersion) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotVersion) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotVersion(val *SnapshotVersion) *NullableSnapshotVersion {
	return &NullableSnapshotVersion{value: val, isSet: true}
}

func (v NullableSnapshotVersion) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotVersion) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


