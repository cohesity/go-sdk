/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// SanStorageArray Specifies a SAN Storage Array.
type SanStorageArray struct {
	// Specifies a unique id of a SAN Storage Array. The id is unique across Cohesity Clusters.
	Id NullableString `json:"id,omitempty"`
	// Specifies the SAN ports of the SAN Storage Array.
	Ports []IscsiSanPort `json:"ports,omitempty"`
	// Specifies the revision of the SAN Storage Array.
	Revision NullableString `json:"revision,omitempty"`
	// Specifies the version of the SAN Storage Array.
	Version NullableString `json:"version,omitempty"`
}

// NewSanStorageArray instantiates a new SanStorageArray object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSanStorageArray() *SanStorageArray {
	this := SanStorageArray{}
	return &this
}

// NewSanStorageArrayWithDefaults instantiates a new SanStorageArray object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSanStorageArrayWithDefaults() *SanStorageArray {
	this := SanStorageArray{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SanStorageArray) GetId() string {
	if o == nil || o.Id.Get() == nil {
		var ret string
		return ret
	}
	return *o.Id.Get()
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SanStorageArray) GetIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Id.Get(), o.Id.IsSet()
}

// HasId returns a boolean if a field has been set.
func (o *SanStorageArray) HasId() bool {
	if o != nil && o.Id.IsSet() {
		return true
	}

	return false
}

// SetId gets a reference to the given NullableString and assigns it to the Id field.
func (o *SanStorageArray) SetId(v string) {
	o.Id.Set(&v)
}
// SetIdNil sets the value for Id to be an explicit nil
func (o *SanStorageArray) SetIdNil() {
	o.Id.Set(nil)
}

// UnsetId ensures that no value is present for Id, not even an explicit nil
func (o *SanStorageArray) UnsetId() {
	o.Id.Unset()
}

// GetPorts returns the Ports field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SanStorageArray) GetPorts() []IscsiSanPort {
	if o == nil  {
		var ret []IscsiSanPort
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SanStorageArray) GetPortsOk() (*[]IscsiSanPort, bool) {
	if o == nil || o.Ports == nil {
		return nil, false
	}
	return &o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *SanStorageArray) HasPorts() bool {
	if o != nil && o.Ports != nil {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []IscsiSanPort and assigns it to the Ports field.
func (o *SanStorageArray) SetPorts(v []IscsiSanPort) {
	o.Ports = v
}

// GetRevision returns the Revision field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SanStorageArray) GetRevision() string {
	if o == nil || o.Revision.Get() == nil {
		var ret string
		return ret
	}
	return *o.Revision.Get()
}

// GetRevisionOk returns a tuple with the Revision field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SanStorageArray) GetRevisionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Revision.Get(), o.Revision.IsSet()
}

// HasRevision returns a boolean if a field has been set.
func (o *SanStorageArray) HasRevision() bool {
	if o != nil && o.Revision.IsSet() {
		return true
	}

	return false
}

// SetRevision gets a reference to the given NullableString and assigns it to the Revision field.
func (o *SanStorageArray) SetRevision(v string) {
	o.Revision.Set(&v)
}
// SetRevisionNil sets the value for Revision to be an explicit nil
func (o *SanStorageArray) SetRevisionNil() {
	o.Revision.Set(nil)
}

// UnsetRevision ensures that no value is present for Revision, not even an explicit nil
func (o *SanStorageArray) UnsetRevision() {
	o.Revision.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *SanStorageArray) GetVersion() string {
	if o == nil || o.Version.Get() == nil {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *SanStorageArray) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *SanStorageArray) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *SanStorageArray) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *SanStorageArray) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *SanStorageArray) UnsetVersion() {
	o.Version.Unset()
}

func (o SanStorageArray) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Id.IsSet() {
		toSerialize["id"] = o.Id.Get()
	}
	if o.Ports != nil {
		toSerialize["ports"] = o.Ports
	}
	if o.Revision.IsSet() {
		toSerialize["revision"] = o.Revision.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableSanStorageArray struct {
	value *SanStorageArray
	isSet bool
}

func (v NullableSanStorageArray) Get() *SanStorageArray {
	return v.value
}

func (v *NullableSanStorageArray) Set(val *SanStorageArray) {
	v.value = val
	v.isSet = true
}

func (v NullableSanStorageArray) IsSet() bool {
	return v.isSet
}

func (v *NullableSanStorageArray) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSanStorageArray(val *SanStorageArray) *NullableSanStorageArray {
	return &NullableSanStorageArray{value: val, isSet: true}
}

func (v NullableSanStorageArray) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSanStorageArray) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


