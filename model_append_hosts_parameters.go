/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// AppendHostsParameters Specifies the parameters needed for an append hosts request.
type AppendHostsParameters struct {
	// Specifies the list of host entries to be added to the Cluster's etc/hosts file.
	Hosts []HostEntry `json:"hosts,omitempty"`
}

// NewAppendHostsParameters instantiates a new AppendHostsParameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppendHostsParameters() *AppendHostsParameters {
	this := AppendHostsParameters{}
	return &this
}

// NewAppendHostsParametersWithDefaults instantiates a new AppendHostsParameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppendHostsParametersWithDefaults() *AppendHostsParameters {
	this := AppendHostsParameters{}
	return &this
}

// GetHosts returns the Hosts field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *AppendHostsParameters) GetHosts() []HostEntry {
	if o == nil  {
		var ret []HostEntry
		return ret
	}
	return o.Hosts
}

// GetHostsOk returns a tuple with the Hosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *AppendHostsParameters) GetHostsOk() (*[]HostEntry, bool) {
	if o == nil || o.Hosts == nil {
		return nil, false
	}
	return &o.Hosts, true
}

// HasHosts returns a boolean if a field has been set.
func (o *AppendHostsParameters) HasHosts() bool {
	if o != nil && o.Hosts != nil {
		return true
	}

	return false
}

// SetHosts gets a reference to the given []HostEntry and assigns it to the Hosts field.
func (o *AppendHostsParameters) SetHosts(v []HostEntry) {
	o.Hosts = v
}

func (o AppendHostsParameters) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hosts != nil {
		toSerialize["hosts"] = o.Hosts
	}
	return json.Marshal(toSerialize)
}

type NullableAppendHostsParameters struct {
	value *AppendHostsParameters
	isSet bool
}

func (v NullableAppendHostsParameters) Get() *AppendHostsParameters {
	return v.value
}

func (v *NullableAppendHostsParameters) Set(val *AppendHostsParameters) {
	v.value = val
	v.isSet = true
}

func (v NullableAppendHostsParameters) IsSet() bool {
	return v.isSet
}

func (v *NullableAppendHostsParameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppendHostsParameters(val *AppendHostsParameters) *NullableAppendHostsParameters {
	return &NullableAppendHostsParameters{value: val, isSet: true}
}

func (v NullableAppendHostsParameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppendHostsParameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


