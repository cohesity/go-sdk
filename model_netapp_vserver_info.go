/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NetappVserverInfo Specifies information about a NetApp Vserver in a NetApp Protection Source.
type NetappVserverInfo struct {
	// Array of Data Protocols.  Specifies the set of data protocols supported by this Vserver. The kManagement protocol is not supported for this case. 'kNfs' indicates NFS connections. 'kCifs' indicates SMB (CIFS) connections. 'kIscsi' indicates iSCSI connections. 'kFc' indicates Fiber Channel connections. 'kFcache' indicates Flex Cache connections. 'kHttp' indicates HTTP connections. 'kNdmp' indicates NDMP connections. 'kManagement' indicates non-data connections used for management purposes. 'kNvme' indicates NVMe connections.
	DataProtocols []string `json:"dataProtocols,omitempty"`
	// Array of Interfaces.  Specifies information about all interfaces on this Vserver.
	Interfaces []VserverNetworkInterface `json:"interfaces,omitempty"`
	RootCifsShare *CifsShareInfo `json:"rootCifsShare,omitempty"`
	// Specifies the type of this Vserver. Specifies the type of the NetApp Vserver. 'kData' indicates the Vserver is used for data backup and restore. 'kAdmin' indicates the Vserver is used for cluster-wide management. 'kSystem' indicates the Vserver is used for cluster-scoped communications in an IPspace. 'kNode' indicates the Vserver is used as the physical controller. 'kUnknown' indicates the Vserver is used for an unknown purpose.
	Type NullableString `json:"type,omitempty"`
}

// NewNetappVserverInfo instantiates a new NetappVserverInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetappVserverInfo() *NetappVserverInfo {
	this := NetappVserverInfo{}
	return &this
}

// NewNetappVserverInfoWithDefaults instantiates a new NetappVserverInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetappVserverInfoWithDefaults() *NetappVserverInfo {
	this := NetappVserverInfo{}
	return &this
}

// GetDataProtocols returns the DataProtocols field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappVserverInfo) GetDataProtocols() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.DataProtocols
}

// GetDataProtocolsOk returns a tuple with the DataProtocols field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappVserverInfo) GetDataProtocolsOk() (*[]string, bool) {
	if o == nil || o.DataProtocols == nil {
		return nil, false
	}
	return &o.DataProtocols, true
}

// HasDataProtocols returns a boolean if a field has been set.
func (o *NetappVserverInfo) HasDataProtocols() bool {
	if o != nil && o.DataProtocols != nil {
		return true
	}

	return false
}

// SetDataProtocols gets a reference to the given []string and assigns it to the DataProtocols field.
func (o *NetappVserverInfo) SetDataProtocols(v []string) {
	o.DataProtocols = v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappVserverInfo) GetInterfaces() []VserverNetworkInterface {
	if o == nil  {
		var ret []VserverNetworkInterface
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappVserverInfo) GetInterfacesOk() (*[]VserverNetworkInterface, bool) {
	if o == nil || o.Interfaces == nil {
		return nil, false
	}
	return &o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *NetappVserverInfo) HasInterfaces() bool {
	if o != nil && o.Interfaces != nil {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []VserverNetworkInterface and assigns it to the Interfaces field.
func (o *NetappVserverInfo) SetInterfaces(v []VserverNetworkInterface) {
	o.Interfaces = v
}

// GetRootCifsShare returns the RootCifsShare field value if set, zero value otherwise.
func (o *NetappVserverInfo) GetRootCifsShare() CifsShareInfo {
	if o == nil || o.RootCifsShare == nil {
		var ret CifsShareInfo
		return ret
	}
	return *o.RootCifsShare
}

// GetRootCifsShareOk returns a tuple with the RootCifsShare field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappVserverInfo) GetRootCifsShareOk() (*CifsShareInfo, bool) {
	if o == nil || o.RootCifsShare == nil {
		return nil, false
	}
	return o.RootCifsShare, true
}

// HasRootCifsShare returns a boolean if a field has been set.
func (o *NetappVserverInfo) HasRootCifsShare() bool {
	if o != nil && o.RootCifsShare != nil {
		return true
	}

	return false
}

// SetRootCifsShare gets a reference to the given CifsShareInfo and assigns it to the RootCifsShare field.
func (o *NetappVserverInfo) SetRootCifsShare(v CifsShareInfo) {
	o.RootCifsShare = &v
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappVserverInfo) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappVserverInfo) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *NetappVserverInfo) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *NetappVserverInfo) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *NetappVserverInfo) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *NetappVserverInfo) UnsetType() {
	o.Type.Unset()
}

func (o NetappVserverInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DataProtocols != nil {
		toSerialize["dataProtocols"] = o.DataProtocols
	}
	if o.Interfaces != nil {
		toSerialize["interfaces"] = o.Interfaces
	}
	if o.RootCifsShare != nil {
		toSerialize["rootCifsShare"] = o.RootCifsShare
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableNetappVserverInfo struct {
	value *NetappVserverInfo
	isSet bool
}

func (v NullableNetappVserverInfo) Get() *NetappVserverInfo {
	return v.value
}

func (v *NullableNetappVserverInfo) Set(val *NetappVserverInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableNetappVserverInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableNetappVserverInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetappVserverInfo(val *NetappVserverInfo) *NullableNetappVserverInfo {
	return &NullableNetappVserverInfo{value: val, isSet: true}
}

func (v NullableNetappVserverInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetappVserverInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


