/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ExchangeHostInfo Specifies the Information about the Exchange host.
type ExchangeHostInfo struct {
	// Specifies the status of the agent on the Exchange host. Specifies the status of agent on Exchange Application Server. 'kSupported' indicates the agent is supported for Exchange data protection. 'kUnSupported' indicates the agent is not supported for Exchange data protection. 'kUpgrade' indicates the agent of server need to be upgraded.
	AgentStatus NullableString `json:"agentStatus,omitempty"`
	// Specifies the endpoint of the Exchange host.
	Endpoint NullableString `json:"endpoint,omitempty"`
	// Specifies the guid of the Exchange host.
	Guid NullableString `json:"guid,omitempty"`
	// Specifies the display name of the Exchange host.
	Name NullableString `json:"name,omitempty"`
	// Specifies the Protection source id of the Physical Host if the Exchange application is already registered on the physical host with the above endpoint.
	ProtectionSourceId NullableInt64 `json:"protectionSourceId,omitempty"`
	// Specifies the status of the registration of the Exchange Host. Specifies the status of registration of Exchange Application Server. 'kUnknown' indicates the status is not known. 'kHealthy' indicates the status is healty and is registered as Exchange Server. 'kUnHealthy' indicates the exchange application is registered on the physical server but it is unreachable now. 'kUnregistered' indicates the server is not registered as physical source. 'kUnreachable' indicates the server is not reachable from the cohesity cluster or the cohesity protection server is not installed on the exchange server. 'kDetached' indicates the server is removed from the ExchangeDAG.
	Status NullableString `json:"status,omitempty"`
}

// NewExchangeHostInfo instantiates a new ExchangeHostInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExchangeHostInfo() *ExchangeHostInfo {
	this := ExchangeHostInfo{}
	return &this
}

// NewExchangeHostInfoWithDefaults instantiates a new ExchangeHostInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExchangeHostInfoWithDefaults() *ExchangeHostInfo {
	this := ExchangeHostInfo{}
	return &this
}

// GetAgentStatus returns the AgentStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeHostInfo) GetAgentStatus() string {
	if o == nil || o.AgentStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.AgentStatus.Get()
}

// GetAgentStatusOk returns a tuple with the AgentStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeHostInfo) GetAgentStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.AgentStatus.Get(), o.AgentStatus.IsSet()
}

// HasAgentStatus returns a boolean if a field has been set.
func (o *ExchangeHostInfo) HasAgentStatus() bool {
	if o != nil && o.AgentStatus.IsSet() {
		return true
	}

	return false
}

// SetAgentStatus gets a reference to the given NullableString and assigns it to the AgentStatus field.
func (o *ExchangeHostInfo) SetAgentStatus(v string) {
	o.AgentStatus.Set(&v)
}
// SetAgentStatusNil sets the value for AgentStatus to be an explicit nil
func (o *ExchangeHostInfo) SetAgentStatusNil() {
	o.AgentStatus.Set(nil)
}

// UnsetAgentStatus ensures that no value is present for AgentStatus, not even an explicit nil
func (o *ExchangeHostInfo) UnsetAgentStatus() {
	o.AgentStatus.Unset()
}

// GetEndpoint returns the Endpoint field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeHostInfo) GetEndpoint() string {
	if o == nil || o.Endpoint.Get() == nil {
		var ret string
		return ret
	}
	return *o.Endpoint.Get()
}

// GetEndpointOk returns a tuple with the Endpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeHostInfo) GetEndpointOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Endpoint.Get(), o.Endpoint.IsSet()
}

// HasEndpoint returns a boolean if a field has been set.
func (o *ExchangeHostInfo) HasEndpoint() bool {
	if o != nil && o.Endpoint.IsSet() {
		return true
	}

	return false
}

// SetEndpoint gets a reference to the given NullableString and assigns it to the Endpoint field.
func (o *ExchangeHostInfo) SetEndpoint(v string) {
	o.Endpoint.Set(&v)
}
// SetEndpointNil sets the value for Endpoint to be an explicit nil
func (o *ExchangeHostInfo) SetEndpointNil() {
	o.Endpoint.Set(nil)
}

// UnsetEndpoint ensures that no value is present for Endpoint, not even an explicit nil
func (o *ExchangeHostInfo) UnsetEndpoint() {
	o.Endpoint.Unset()
}

// GetGuid returns the Guid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeHostInfo) GetGuid() string {
	if o == nil || o.Guid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Guid.Get()
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeHostInfo) GetGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Guid.Get(), o.Guid.IsSet()
}

// HasGuid returns a boolean if a field has been set.
func (o *ExchangeHostInfo) HasGuid() bool {
	if o != nil && o.Guid.IsSet() {
		return true
	}

	return false
}

// SetGuid gets a reference to the given NullableString and assigns it to the Guid field.
func (o *ExchangeHostInfo) SetGuid(v string) {
	o.Guid.Set(&v)
}
// SetGuidNil sets the value for Guid to be an explicit nil
func (o *ExchangeHostInfo) SetGuidNil() {
	o.Guid.Set(nil)
}

// UnsetGuid ensures that no value is present for Guid, not even an explicit nil
func (o *ExchangeHostInfo) UnsetGuid() {
	o.Guid.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeHostInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeHostInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ExchangeHostInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ExchangeHostInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ExchangeHostInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ExchangeHostInfo) UnsetName() {
	o.Name.Unset()
}

// GetProtectionSourceId returns the ProtectionSourceId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeHostInfo) GetProtectionSourceId() int64 {
	if o == nil || o.ProtectionSourceId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ProtectionSourceId.Get()
}

// GetProtectionSourceIdOk returns a tuple with the ProtectionSourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeHostInfo) GetProtectionSourceIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ProtectionSourceId.Get(), o.ProtectionSourceId.IsSet()
}

// HasProtectionSourceId returns a boolean if a field has been set.
func (o *ExchangeHostInfo) HasProtectionSourceId() bool {
	if o != nil && o.ProtectionSourceId.IsSet() {
		return true
	}

	return false
}

// SetProtectionSourceId gets a reference to the given NullableInt64 and assigns it to the ProtectionSourceId field.
func (o *ExchangeHostInfo) SetProtectionSourceId(v int64) {
	o.ProtectionSourceId.Set(&v)
}
// SetProtectionSourceIdNil sets the value for ProtectionSourceId to be an explicit nil
func (o *ExchangeHostInfo) SetProtectionSourceIdNil() {
	o.ProtectionSourceId.Set(nil)
}

// UnsetProtectionSourceId ensures that no value is present for ProtectionSourceId, not even an explicit nil
func (o *ExchangeHostInfo) UnsetProtectionSourceId() {
	o.ProtectionSourceId.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ExchangeHostInfo) GetStatus() string {
	if o == nil || o.Status.Get() == nil {
		var ret string
		return ret
	}
	return *o.Status.Get()
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ExchangeHostInfo) GetStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Status.Get(), o.Status.IsSet()
}

// HasStatus returns a boolean if a field has been set.
func (o *ExchangeHostInfo) HasStatus() bool {
	if o != nil && o.Status.IsSet() {
		return true
	}

	return false
}

// SetStatus gets a reference to the given NullableString and assigns it to the Status field.
func (o *ExchangeHostInfo) SetStatus(v string) {
	o.Status.Set(&v)
}
// SetStatusNil sets the value for Status to be an explicit nil
func (o *ExchangeHostInfo) SetStatusNil() {
	o.Status.Set(nil)
}

// UnsetStatus ensures that no value is present for Status, not even an explicit nil
func (o *ExchangeHostInfo) UnsetStatus() {
	o.Status.Unset()
}

func (o ExchangeHostInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AgentStatus.IsSet() {
		toSerialize["agentStatus"] = o.AgentStatus.Get()
	}
	if o.Endpoint.IsSet() {
		toSerialize["endpoint"] = o.Endpoint.Get()
	}
	if o.Guid.IsSet() {
		toSerialize["guid"] = o.Guid.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.ProtectionSourceId.IsSet() {
		toSerialize["protectionSourceId"] = o.ProtectionSourceId.Get()
	}
	if o.Status.IsSet() {
		toSerialize["status"] = o.Status.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableExchangeHostInfo struct {
	value *ExchangeHostInfo
	isSet bool
}

func (v NullableExchangeHostInfo) Get() *ExchangeHostInfo {
	return v.value
}

func (v *NullableExchangeHostInfo) Set(val *ExchangeHostInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableExchangeHostInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableExchangeHostInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExchangeHostInfo(val *ExchangeHostInfo) *NullableExchangeHostInfo {
	return &NullableExchangeHostInfo{value: val, isSet: true}
}

func (v NullableExchangeHostInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExchangeHostInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


