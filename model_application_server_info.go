/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ApplicationServerInfo Specifies the Information about the Exchange Server Node.
type ApplicationServerInfo struct {
	// Specifies the list of all the copies of the Exchange databases(that are part of DAG) that are present on this Exchange Node.
	DatabaseCopyInfoList []ExchangeDatabaseCopyInfo `json:"databaseCopyInfoList,omitempty"`
	// Specifies the list of all the databases available on the standalone Exchange server node. This is populated for the Standlone Exchange Servers.
	DatabaseInfoList []ExchangeDatabaseInfo `json:"databaseInfoList,omitempty"`
	// Specifies the fully qualified domain name of the Exchange Server.
	Fqdn NullableString `json:"fqdn,omitempty"`
	// Specifies the Guid of the Exchange Application Server.
	Guid NullableString `json:"guid,omitempty"`
	// Specifies the display name of the Exchange Application Server.
	Name NullableString `json:"name,omitempty"`
	// Specifies the total size of all Exchange database copies in all the Exchange Application Servers that are part of the DAG.
	TotalSizeBytes NullableInt64 `json:"totalSizeBytes,omitempty"`
}

// NewApplicationServerInfo instantiates a new ApplicationServerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApplicationServerInfo() *ApplicationServerInfo {
	this := ApplicationServerInfo{}
	return &this
}

// NewApplicationServerInfoWithDefaults instantiates a new ApplicationServerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApplicationServerInfoWithDefaults() *ApplicationServerInfo {
	this := ApplicationServerInfo{}
	return &this
}

// GetDatabaseCopyInfoList returns the DatabaseCopyInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationServerInfo) GetDatabaseCopyInfoList() []ExchangeDatabaseCopyInfo {
	if o == nil  {
		var ret []ExchangeDatabaseCopyInfo
		return ret
	}
	return o.DatabaseCopyInfoList
}

// GetDatabaseCopyInfoListOk returns a tuple with the DatabaseCopyInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationServerInfo) GetDatabaseCopyInfoListOk() (*[]ExchangeDatabaseCopyInfo, bool) {
	if o == nil || o.DatabaseCopyInfoList == nil {
		return nil, false
	}
	return &o.DatabaseCopyInfoList, true
}

// HasDatabaseCopyInfoList returns a boolean if a field has been set.
func (o *ApplicationServerInfo) HasDatabaseCopyInfoList() bool {
	if o != nil && o.DatabaseCopyInfoList != nil {
		return true
	}

	return false
}

// SetDatabaseCopyInfoList gets a reference to the given []ExchangeDatabaseCopyInfo and assigns it to the DatabaseCopyInfoList field.
func (o *ApplicationServerInfo) SetDatabaseCopyInfoList(v []ExchangeDatabaseCopyInfo) {
	o.DatabaseCopyInfoList = v
}

// GetDatabaseInfoList returns the DatabaseInfoList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationServerInfo) GetDatabaseInfoList() []ExchangeDatabaseInfo {
	if o == nil  {
		var ret []ExchangeDatabaseInfo
		return ret
	}
	return o.DatabaseInfoList
}

// GetDatabaseInfoListOk returns a tuple with the DatabaseInfoList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationServerInfo) GetDatabaseInfoListOk() (*[]ExchangeDatabaseInfo, bool) {
	if o == nil || o.DatabaseInfoList == nil {
		return nil, false
	}
	return &o.DatabaseInfoList, true
}

// HasDatabaseInfoList returns a boolean if a field has been set.
func (o *ApplicationServerInfo) HasDatabaseInfoList() bool {
	if o != nil && o.DatabaseInfoList != nil {
		return true
	}

	return false
}

// SetDatabaseInfoList gets a reference to the given []ExchangeDatabaseInfo and assigns it to the DatabaseInfoList field.
func (o *ApplicationServerInfo) SetDatabaseInfoList(v []ExchangeDatabaseInfo) {
	o.DatabaseInfoList = v
}

// GetFqdn returns the Fqdn field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationServerInfo) GetFqdn() string {
	if o == nil || o.Fqdn.Get() == nil {
		var ret string
		return ret
	}
	return *o.Fqdn.Get()
}

// GetFqdnOk returns a tuple with the Fqdn field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationServerInfo) GetFqdnOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Fqdn.Get(), o.Fqdn.IsSet()
}

// HasFqdn returns a boolean if a field has been set.
func (o *ApplicationServerInfo) HasFqdn() bool {
	if o != nil && o.Fqdn.IsSet() {
		return true
	}

	return false
}

// SetFqdn gets a reference to the given NullableString and assigns it to the Fqdn field.
func (o *ApplicationServerInfo) SetFqdn(v string) {
	o.Fqdn.Set(&v)
}
// SetFqdnNil sets the value for Fqdn to be an explicit nil
func (o *ApplicationServerInfo) SetFqdnNil() {
	o.Fqdn.Set(nil)
}

// UnsetFqdn ensures that no value is present for Fqdn, not even an explicit nil
func (o *ApplicationServerInfo) UnsetFqdn() {
	o.Fqdn.Unset()
}

// GetGuid returns the Guid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationServerInfo) GetGuid() string {
	if o == nil || o.Guid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Guid.Get()
}

// GetGuidOk returns a tuple with the Guid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationServerInfo) GetGuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Guid.Get(), o.Guid.IsSet()
}

// HasGuid returns a boolean if a field has been set.
func (o *ApplicationServerInfo) HasGuid() bool {
	if o != nil && o.Guid.IsSet() {
		return true
	}

	return false
}

// SetGuid gets a reference to the given NullableString and assigns it to the Guid field.
func (o *ApplicationServerInfo) SetGuid(v string) {
	o.Guid.Set(&v)
}
// SetGuidNil sets the value for Guid to be an explicit nil
func (o *ApplicationServerInfo) SetGuidNil() {
	o.Guid.Set(nil)
}

// UnsetGuid ensures that no value is present for Guid, not even an explicit nil
func (o *ApplicationServerInfo) UnsetGuid() {
	o.Guid.Unset()
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationServerInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationServerInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *ApplicationServerInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *ApplicationServerInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *ApplicationServerInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *ApplicationServerInfo) UnsetName() {
	o.Name.Unset()
}

// GetTotalSizeBytes returns the TotalSizeBytes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApplicationServerInfo) GetTotalSizeBytes() int64 {
	if o == nil || o.TotalSizeBytes.Get() == nil {
		var ret int64
		return ret
	}
	return *o.TotalSizeBytes.Get()
}

// GetTotalSizeBytesOk returns a tuple with the TotalSizeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApplicationServerInfo) GetTotalSizeBytesOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TotalSizeBytes.Get(), o.TotalSizeBytes.IsSet()
}

// HasTotalSizeBytes returns a boolean if a field has been set.
func (o *ApplicationServerInfo) HasTotalSizeBytes() bool {
	if o != nil && o.TotalSizeBytes.IsSet() {
		return true
	}

	return false
}

// SetTotalSizeBytes gets a reference to the given NullableInt64 and assigns it to the TotalSizeBytes field.
func (o *ApplicationServerInfo) SetTotalSizeBytes(v int64) {
	o.TotalSizeBytes.Set(&v)
}
// SetTotalSizeBytesNil sets the value for TotalSizeBytes to be an explicit nil
func (o *ApplicationServerInfo) SetTotalSizeBytesNil() {
	o.TotalSizeBytes.Set(nil)
}

// UnsetTotalSizeBytes ensures that no value is present for TotalSizeBytes, not even an explicit nil
func (o *ApplicationServerInfo) UnsetTotalSizeBytes() {
	o.TotalSizeBytes.Unset()
}

func (o ApplicationServerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DatabaseCopyInfoList != nil {
		toSerialize["databaseCopyInfoList"] = o.DatabaseCopyInfoList
	}
	if o.DatabaseInfoList != nil {
		toSerialize["databaseInfoList"] = o.DatabaseInfoList
	}
	if o.Fqdn.IsSet() {
		toSerialize["fqdn"] = o.Fqdn.Get()
	}
	if o.Guid.IsSet() {
		toSerialize["guid"] = o.Guid.Get()
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.TotalSizeBytes.IsSet() {
		toSerialize["totalSizeBytes"] = o.TotalSizeBytes.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableApplicationServerInfo struct {
	value *ApplicationServerInfo
	isSet bool
}

func (v NullableApplicationServerInfo) Get() *ApplicationServerInfo {
	return v.value
}

func (v *NullableApplicationServerInfo) Set(val *ApplicationServerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableApplicationServerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableApplicationServerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApplicationServerInfo(val *ApplicationServerInfo) *NullableApplicationServerInfo {
	return &NullableApplicationServerInfo{value: val, isSet: true}
}

func (v NullableApplicationServerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApplicationServerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


