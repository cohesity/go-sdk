/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// NetappProtectionSource Specifies a Protection Source in a NetApp environment.
type NetappProtectionSource struct {
	ClusterInfo *NetappClusterInfo `json:"clusterInfo,omitempty"`
	// Specifies if this Object is a top level Object. Because a top level Object can either be a NetApp cluster or a Vserver, this cannot be determined only by type.
	IsTopLevel NullableBool `json:"isTopLevel,omitempty"`
	// Specifies the type of license available on Netapp Cluster 'kSnapmirrorCloud' indicates a SnapMirror license on Netapp.
	LicenseTypes []string `json:"licenseTypes,omitempty"`
	// Specifies the name of the NetApp Object.
	Name NullableString `json:"name,omitempty"`
	// Specifies the type of managed NetApp Object in a NetApp Protection Source such as 'kCluster', 'kVserver' or 'kVolume'. 'kCluster' indicates a Netapp cluster as a protection source. 'kVserver' indicates a Netapp vserver in a cluster as a protection source. 'kVolume' indicates  a volume in Netapp vserver as a protection source.
	Type NullableString `json:"type,omitempty"`
	// Specifies the globally unique ID of this Object assigned by the NetApp server.
	Uuid NullableString `json:"uuid,omitempty"`
	// Specifies the version of Netapp Cluster.
	Version NullableString `json:"version,omitempty"`
	VolumeInfo *NetappVolumeInfo `json:"volumeInfo,omitempty"`
	VserverInfo *NetappVserverInfo `json:"vserverInfo,omitempty"`
}

// NewNetappProtectionSource instantiates a new NetappProtectionSource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetappProtectionSource() *NetappProtectionSource {
	this := NetappProtectionSource{}
	return &this
}

// NewNetappProtectionSourceWithDefaults instantiates a new NetappProtectionSource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetappProtectionSourceWithDefaults() *NetappProtectionSource {
	this := NetappProtectionSource{}
	return &this
}

// GetClusterInfo returns the ClusterInfo field value if set, zero value otherwise.
func (o *NetappProtectionSource) GetClusterInfo() NetappClusterInfo {
	if o == nil || o.ClusterInfo == nil {
		var ret NetappClusterInfo
		return ret
	}
	return *o.ClusterInfo
}

// GetClusterInfoOk returns a tuple with the ClusterInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionSource) GetClusterInfoOk() (*NetappClusterInfo, bool) {
	if o == nil || o.ClusterInfo == nil {
		return nil, false
	}
	return o.ClusterInfo, true
}

// HasClusterInfo returns a boolean if a field has been set.
func (o *NetappProtectionSource) HasClusterInfo() bool {
	if o != nil && o.ClusterInfo != nil {
		return true
	}

	return false
}

// SetClusterInfo gets a reference to the given NetappClusterInfo and assigns it to the ClusterInfo field.
func (o *NetappProtectionSource) SetClusterInfo(v NetappClusterInfo) {
	o.ClusterInfo = &v
}

// GetIsTopLevel returns the IsTopLevel field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionSource) GetIsTopLevel() bool {
	if o == nil || o.IsTopLevel.Get() == nil {
		var ret bool
		return ret
	}
	return *o.IsTopLevel.Get()
}

// GetIsTopLevelOk returns a tuple with the IsTopLevel field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionSource) GetIsTopLevelOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.IsTopLevel.Get(), o.IsTopLevel.IsSet()
}

// HasIsTopLevel returns a boolean if a field has been set.
func (o *NetappProtectionSource) HasIsTopLevel() bool {
	if o != nil && o.IsTopLevel.IsSet() {
		return true
	}

	return false
}

// SetIsTopLevel gets a reference to the given NullableBool and assigns it to the IsTopLevel field.
func (o *NetappProtectionSource) SetIsTopLevel(v bool) {
	o.IsTopLevel.Set(&v)
}
// SetIsTopLevelNil sets the value for IsTopLevel to be an explicit nil
func (o *NetappProtectionSource) SetIsTopLevelNil() {
	o.IsTopLevel.Set(nil)
}

// UnsetIsTopLevel ensures that no value is present for IsTopLevel, not even an explicit nil
func (o *NetappProtectionSource) UnsetIsTopLevel() {
	o.IsTopLevel.Unset()
}

// GetLicenseTypes returns the LicenseTypes field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionSource) GetLicenseTypes() []string {
	if o == nil  {
		var ret []string
		return ret
	}
	return o.LicenseTypes
}

// GetLicenseTypesOk returns a tuple with the LicenseTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionSource) GetLicenseTypesOk() (*[]string, bool) {
	if o == nil || o.LicenseTypes == nil {
		return nil, false
	}
	return &o.LicenseTypes, true
}

// HasLicenseTypes returns a boolean if a field has been set.
func (o *NetappProtectionSource) HasLicenseTypes() bool {
	if o != nil && o.LicenseTypes != nil {
		return true
	}

	return false
}

// SetLicenseTypes gets a reference to the given []string and assigns it to the LicenseTypes field.
func (o *NetappProtectionSource) SetLicenseTypes(v []string) {
	o.LicenseTypes = v
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionSource) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionSource) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *NetappProtectionSource) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *NetappProtectionSource) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *NetappProtectionSource) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *NetappProtectionSource) UnsetName() {
	o.Name.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionSource) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionSource) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *NetappProtectionSource) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *NetappProtectionSource) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *NetappProtectionSource) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *NetappProtectionSource) UnsetType() {
	o.Type.Unset()
}

// GetUuid returns the Uuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionSource) GetUuid() string {
	if o == nil || o.Uuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uuid.Get()
}

// GetUuidOk returns a tuple with the Uuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionSource) GetUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Uuid.Get(), o.Uuid.IsSet()
}

// HasUuid returns a boolean if a field has been set.
func (o *NetappProtectionSource) HasUuid() bool {
	if o != nil && o.Uuid.IsSet() {
		return true
	}

	return false
}

// SetUuid gets a reference to the given NullableString and assigns it to the Uuid field.
func (o *NetappProtectionSource) SetUuid(v string) {
	o.Uuid.Set(&v)
}
// SetUuidNil sets the value for Uuid to be an explicit nil
func (o *NetappProtectionSource) SetUuidNil() {
	o.Uuid.Set(nil)
}

// UnsetUuid ensures that no value is present for Uuid, not even an explicit nil
func (o *NetappProtectionSource) UnsetUuid() {
	o.Uuid.Unset()
}

// GetVersion returns the Version field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *NetappProtectionSource) GetVersion() string {
	if o == nil || o.Version.Get() == nil {
		var ret string
		return ret
	}
	return *o.Version.Get()
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *NetappProtectionSource) GetVersionOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Version.Get(), o.Version.IsSet()
}

// HasVersion returns a boolean if a field has been set.
func (o *NetappProtectionSource) HasVersion() bool {
	if o != nil && o.Version.IsSet() {
		return true
	}

	return false
}

// SetVersion gets a reference to the given NullableString and assigns it to the Version field.
func (o *NetappProtectionSource) SetVersion(v string) {
	o.Version.Set(&v)
}
// SetVersionNil sets the value for Version to be an explicit nil
func (o *NetappProtectionSource) SetVersionNil() {
	o.Version.Set(nil)
}

// UnsetVersion ensures that no value is present for Version, not even an explicit nil
func (o *NetappProtectionSource) UnsetVersion() {
	o.Version.Unset()
}

// GetVolumeInfo returns the VolumeInfo field value if set, zero value otherwise.
func (o *NetappProtectionSource) GetVolumeInfo() NetappVolumeInfo {
	if o == nil || o.VolumeInfo == nil {
		var ret NetappVolumeInfo
		return ret
	}
	return *o.VolumeInfo
}

// GetVolumeInfoOk returns a tuple with the VolumeInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionSource) GetVolumeInfoOk() (*NetappVolumeInfo, bool) {
	if o == nil || o.VolumeInfo == nil {
		return nil, false
	}
	return o.VolumeInfo, true
}

// HasVolumeInfo returns a boolean if a field has been set.
func (o *NetappProtectionSource) HasVolumeInfo() bool {
	if o != nil && o.VolumeInfo != nil {
		return true
	}

	return false
}

// SetVolumeInfo gets a reference to the given NetappVolumeInfo and assigns it to the VolumeInfo field.
func (o *NetappProtectionSource) SetVolumeInfo(v NetappVolumeInfo) {
	o.VolumeInfo = &v
}

// GetVserverInfo returns the VserverInfo field value if set, zero value otherwise.
func (o *NetappProtectionSource) GetVserverInfo() NetappVserverInfo {
	if o == nil || o.VserverInfo == nil {
		var ret NetappVserverInfo
		return ret
	}
	return *o.VserverInfo
}

// GetVserverInfoOk returns a tuple with the VserverInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetappProtectionSource) GetVserverInfoOk() (*NetappVserverInfo, bool) {
	if o == nil || o.VserverInfo == nil {
		return nil, false
	}
	return o.VserverInfo, true
}

// HasVserverInfo returns a boolean if a field has been set.
func (o *NetappProtectionSource) HasVserverInfo() bool {
	if o != nil && o.VserverInfo != nil {
		return true
	}

	return false
}

// SetVserverInfo gets a reference to the given NetappVserverInfo and assigns it to the VserverInfo field.
func (o *NetappProtectionSource) SetVserverInfo(v NetappVserverInfo) {
	o.VserverInfo = &v
}

func (o NetappProtectionSource) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClusterInfo != nil {
		toSerialize["clusterInfo"] = o.ClusterInfo
	}
	if o.IsTopLevel.IsSet() {
		toSerialize["isTopLevel"] = o.IsTopLevel.Get()
	}
	if o.LicenseTypes != nil {
		toSerialize["licenseTypes"] = o.LicenseTypes
	}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	if o.Uuid.IsSet() {
		toSerialize["uuid"] = o.Uuid.Get()
	}
	if o.Version.IsSet() {
		toSerialize["version"] = o.Version.Get()
	}
	if o.VolumeInfo != nil {
		toSerialize["volumeInfo"] = o.VolumeInfo
	}
	if o.VserverInfo != nil {
		toSerialize["vserverInfo"] = o.VserverInfo
	}
	return json.Marshal(toSerialize)
}

type NullableNetappProtectionSource struct {
	value *NetappProtectionSource
	isSet bool
}

func (v NullableNetappProtectionSource) Get() *NetappProtectionSource {
	return v.value
}

func (v *NullableNetappProtectionSource) Set(val *NetappProtectionSource) {
	v.value = val
	v.isSet = true
}

func (v NullableNetappProtectionSource) IsSet() bool {
	return v.isSet
}

func (v *NullableNetappProtectionSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetappProtectionSource(val *NetappProtectionSource) *NullableNetappProtectionSource {
	return &NullableNetappProtectionSource{value: val, isSet: true}
}

func (v NullableNetappProtectionSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetappProtectionSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


