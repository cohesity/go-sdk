/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// RecoveryTaskInfo Parameters for a recovery op.
type RecoveryTaskInfo struct {
	// Name of the recovery task.
	Name NullableString `json:"name,omitempty"`
	// Id of the recovery task.
	TaskId NullableString `json:"taskId,omitempty"`
	// Denotes if the recovery task has an archival target. This param is used to reflect if the recovery op has an archival target to work with. 'local' indicates no archival target. 'archive' indicates that objects restored using an archival target.
	Type NullableString `json:"type,omitempty"`
}

// NewRecoveryTaskInfo instantiates a new RecoveryTaskInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRecoveryTaskInfo() *RecoveryTaskInfo {
	this := RecoveryTaskInfo{}
	return &this
}

// NewRecoveryTaskInfoWithDefaults instantiates a new RecoveryTaskInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRecoveryTaskInfoWithDefaults() *RecoveryTaskInfo {
	this := RecoveryTaskInfo{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoveryTaskInfo) GetName() string {
	if o == nil || o.Name.Get() == nil {
		var ret string
		return ret
	}
	return *o.Name.Get()
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoveryTaskInfo) GetNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Name.Get(), o.Name.IsSet()
}

// HasName returns a boolean if a field has been set.
func (o *RecoveryTaskInfo) HasName() bool {
	if o != nil && o.Name.IsSet() {
		return true
	}

	return false
}

// SetName gets a reference to the given NullableString and assigns it to the Name field.
func (o *RecoveryTaskInfo) SetName(v string) {
	o.Name.Set(&v)
}
// SetNameNil sets the value for Name to be an explicit nil
func (o *RecoveryTaskInfo) SetNameNil() {
	o.Name.Set(nil)
}

// UnsetName ensures that no value is present for Name, not even an explicit nil
func (o *RecoveryTaskInfo) UnsetName() {
	o.Name.Unset()
}

// GetTaskId returns the TaskId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoveryTaskInfo) GetTaskId() string {
	if o == nil || o.TaskId.Get() == nil {
		var ret string
		return ret
	}
	return *o.TaskId.Get()
}

// GetTaskIdOk returns a tuple with the TaskId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoveryTaskInfo) GetTaskIdOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TaskId.Get(), o.TaskId.IsSet()
}

// HasTaskId returns a boolean if a field has been set.
func (o *RecoveryTaskInfo) HasTaskId() bool {
	if o != nil && o.TaskId.IsSet() {
		return true
	}

	return false
}

// SetTaskId gets a reference to the given NullableString and assigns it to the TaskId field.
func (o *RecoveryTaskInfo) SetTaskId(v string) {
	o.TaskId.Set(&v)
}
// SetTaskIdNil sets the value for TaskId to be an explicit nil
func (o *RecoveryTaskInfo) SetTaskIdNil() {
	o.TaskId.Set(nil)
}

// UnsetTaskId ensures that no value is present for TaskId, not even an explicit nil
func (o *RecoveryTaskInfo) UnsetTaskId() {
	o.TaskId.Unset()
}

// GetType returns the Type field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *RecoveryTaskInfo) GetType() string {
	if o == nil || o.Type.Get() == nil {
		var ret string
		return ret
	}
	return *o.Type.Get()
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *RecoveryTaskInfo) GetTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Type.Get(), o.Type.IsSet()
}

// HasType returns a boolean if a field has been set.
func (o *RecoveryTaskInfo) HasType() bool {
	if o != nil && o.Type.IsSet() {
		return true
	}

	return false
}

// SetType gets a reference to the given NullableString and assigns it to the Type field.
func (o *RecoveryTaskInfo) SetType(v string) {
	o.Type.Set(&v)
}
// SetTypeNil sets the value for Type to be an explicit nil
func (o *RecoveryTaskInfo) SetTypeNil() {
	o.Type.Set(nil)
}

// UnsetType ensures that no value is present for Type, not even an explicit nil
func (o *RecoveryTaskInfo) UnsetType() {
	o.Type.Unset()
}

func (o RecoveryTaskInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name.IsSet() {
		toSerialize["name"] = o.Name.Get()
	}
	if o.TaskId.IsSet() {
		toSerialize["taskId"] = o.TaskId.Get()
	}
	if o.Type.IsSet() {
		toSerialize["type"] = o.Type.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableRecoveryTaskInfo struct {
	value *RecoveryTaskInfo
	isSet bool
}

func (v NullableRecoveryTaskInfo) Get() *RecoveryTaskInfo {
	return v.value
}

func (v *NullableRecoveryTaskInfo) Set(val *RecoveryTaskInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableRecoveryTaskInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableRecoveryTaskInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRecoveryTaskInfo(val *RecoveryTaskInfo) *NullableRecoveryTaskInfo {
	return &NullableRecoveryTaskInfo{value: val, isSet: true}
}

func (v NullableRecoveryTaskInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRecoveryTaskInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


