/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// OracleDatabaseNodeChannel Specifies node and channel info required for the backup and restore of a database.
type OracleDatabaseNodeChannel struct {
	// Specifies the number of days archive log should be stored.
	ArchiveLogKeepDays NullableInt32 `json:"archiveLogKeepDays,omitempty"`
	// Array of nodes of a database.  Specifies the Node info from where we are allowed to take the backup/restore.
	DatabaseNodeList []OracleDatabaseNode `json:"databaseNodeList,omitempty"`
	// Specifies the unique Name of the database.
	DatabaseUniqueName NullableString `json:"databaseUniqueName,omitempty"`
	// Specifies the database unique id. This is an internal field and is filled by magneto master based on corresponding app entity id.
	DatabaseUuid NullableString `json:"databaseUuid,omitempty"`
	// Specifies the default number of channels to use per node per database. The default number of channels to use per host per db. This value is used on all OracleDatabaseNode's unless databaseNodeList item's channelCount is specified for the node.
	DefaultChannelCount NullableInt32 `json:"defaultChannelCount,omitempty"`
	// Specifies whether the database having the Primary role within Data Guard configuration is to be backed up.
	EnableDgPrimaryBackup NullableBool `json:"enableDgPrimaryBackup,omitempty"`
	// Specifies the maximum number of nodes from which we are allowed to take backup/restore.
	MaxNodeCount NullableInt32 `json:"maxNodeCount,omitempty"`
	// Specifies the type of Oracle RMAN backup.
	RmanBackupType NullableInt32 `json:"rmanBackupType,omitempty"`
}

// NewOracleDatabaseNodeChannel instantiates a new OracleDatabaseNodeChannel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOracleDatabaseNodeChannel() *OracleDatabaseNodeChannel {
	this := OracleDatabaseNodeChannel{}
	return &this
}

// NewOracleDatabaseNodeChannelWithDefaults instantiates a new OracleDatabaseNodeChannel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOracleDatabaseNodeChannelWithDefaults() *OracleDatabaseNodeChannel {
	this := OracleDatabaseNodeChannel{}
	return &this
}

// GetArchiveLogKeepDays returns the ArchiveLogKeepDays field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNodeChannel) GetArchiveLogKeepDays() int32 {
	if o == nil || o.ArchiveLogKeepDays.Get() == nil {
		var ret int32
		return ret
	}
	return *o.ArchiveLogKeepDays.Get()
}

// GetArchiveLogKeepDaysOk returns a tuple with the ArchiveLogKeepDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNodeChannel) GetArchiveLogKeepDaysOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ArchiveLogKeepDays.Get(), o.ArchiveLogKeepDays.IsSet()
}

// HasArchiveLogKeepDays returns a boolean if a field has been set.
func (o *OracleDatabaseNodeChannel) HasArchiveLogKeepDays() bool {
	if o != nil && o.ArchiveLogKeepDays.IsSet() {
		return true
	}

	return false
}

// SetArchiveLogKeepDays gets a reference to the given NullableInt32 and assigns it to the ArchiveLogKeepDays field.
func (o *OracleDatabaseNodeChannel) SetArchiveLogKeepDays(v int32) {
	o.ArchiveLogKeepDays.Set(&v)
}
// SetArchiveLogKeepDaysNil sets the value for ArchiveLogKeepDays to be an explicit nil
func (o *OracleDatabaseNodeChannel) SetArchiveLogKeepDaysNil() {
	o.ArchiveLogKeepDays.Set(nil)
}

// UnsetArchiveLogKeepDays ensures that no value is present for ArchiveLogKeepDays, not even an explicit nil
func (o *OracleDatabaseNodeChannel) UnsetArchiveLogKeepDays() {
	o.ArchiveLogKeepDays.Unset()
}

// GetDatabaseNodeList returns the DatabaseNodeList field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNodeChannel) GetDatabaseNodeList() []OracleDatabaseNode {
	if o == nil  {
		var ret []OracleDatabaseNode
		return ret
	}
	return o.DatabaseNodeList
}

// GetDatabaseNodeListOk returns a tuple with the DatabaseNodeList field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNodeChannel) GetDatabaseNodeListOk() (*[]OracleDatabaseNode, bool) {
	if o == nil || o.DatabaseNodeList == nil {
		return nil, false
	}
	return &o.DatabaseNodeList, true
}

// HasDatabaseNodeList returns a boolean if a field has been set.
func (o *OracleDatabaseNodeChannel) HasDatabaseNodeList() bool {
	if o != nil && o.DatabaseNodeList != nil {
		return true
	}

	return false
}

// SetDatabaseNodeList gets a reference to the given []OracleDatabaseNode and assigns it to the DatabaseNodeList field.
func (o *OracleDatabaseNodeChannel) SetDatabaseNodeList(v []OracleDatabaseNode) {
	o.DatabaseNodeList = v
}

// GetDatabaseUniqueName returns the DatabaseUniqueName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNodeChannel) GetDatabaseUniqueName() string {
	if o == nil || o.DatabaseUniqueName.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseUniqueName.Get()
}

// GetDatabaseUniqueNameOk returns a tuple with the DatabaseUniqueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNodeChannel) GetDatabaseUniqueNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseUniqueName.Get(), o.DatabaseUniqueName.IsSet()
}

// HasDatabaseUniqueName returns a boolean if a field has been set.
func (o *OracleDatabaseNodeChannel) HasDatabaseUniqueName() bool {
	if o != nil && o.DatabaseUniqueName.IsSet() {
		return true
	}

	return false
}

// SetDatabaseUniqueName gets a reference to the given NullableString and assigns it to the DatabaseUniqueName field.
func (o *OracleDatabaseNodeChannel) SetDatabaseUniqueName(v string) {
	o.DatabaseUniqueName.Set(&v)
}
// SetDatabaseUniqueNameNil sets the value for DatabaseUniqueName to be an explicit nil
func (o *OracleDatabaseNodeChannel) SetDatabaseUniqueNameNil() {
	o.DatabaseUniqueName.Set(nil)
}

// UnsetDatabaseUniqueName ensures that no value is present for DatabaseUniqueName, not even an explicit nil
func (o *OracleDatabaseNodeChannel) UnsetDatabaseUniqueName() {
	o.DatabaseUniqueName.Unset()
}

// GetDatabaseUuid returns the DatabaseUuid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNodeChannel) GetDatabaseUuid() string {
	if o == nil || o.DatabaseUuid.Get() == nil {
		var ret string
		return ret
	}
	return *o.DatabaseUuid.Get()
}

// GetDatabaseUuidOk returns a tuple with the DatabaseUuid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNodeChannel) GetDatabaseUuidOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DatabaseUuid.Get(), o.DatabaseUuid.IsSet()
}

// HasDatabaseUuid returns a boolean if a field has been set.
func (o *OracleDatabaseNodeChannel) HasDatabaseUuid() bool {
	if o != nil && o.DatabaseUuid.IsSet() {
		return true
	}

	return false
}

// SetDatabaseUuid gets a reference to the given NullableString and assigns it to the DatabaseUuid field.
func (o *OracleDatabaseNodeChannel) SetDatabaseUuid(v string) {
	o.DatabaseUuid.Set(&v)
}
// SetDatabaseUuidNil sets the value for DatabaseUuid to be an explicit nil
func (o *OracleDatabaseNodeChannel) SetDatabaseUuidNil() {
	o.DatabaseUuid.Set(nil)
}

// UnsetDatabaseUuid ensures that no value is present for DatabaseUuid, not even an explicit nil
func (o *OracleDatabaseNodeChannel) UnsetDatabaseUuid() {
	o.DatabaseUuid.Unset()
}

// GetDefaultChannelCount returns the DefaultChannelCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNodeChannel) GetDefaultChannelCount() int32 {
	if o == nil || o.DefaultChannelCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.DefaultChannelCount.Get()
}

// GetDefaultChannelCountOk returns a tuple with the DefaultChannelCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNodeChannel) GetDefaultChannelCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DefaultChannelCount.Get(), o.DefaultChannelCount.IsSet()
}

// HasDefaultChannelCount returns a boolean if a field has been set.
func (o *OracleDatabaseNodeChannel) HasDefaultChannelCount() bool {
	if o != nil && o.DefaultChannelCount.IsSet() {
		return true
	}

	return false
}

// SetDefaultChannelCount gets a reference to the given NullableInt32 and assigns it to the DefaultChannelCount field.
func (o *OracleDatabaseNodeChannel) SetDefaultChannelCount(v int32) {
	o.DefaultChannelCount.Set(&v)
}
// SetDefaultChannelCountNil sets the value for DefaultChannelCount to be an explicit nil
func (o *OracleDatabaseNodeChannel) SetDefaultChannelCountNil() {
	o.DefaultChannelCount.Set(nil)
}

// UnsetDefaultChannelCount ensures that no value is present for DefaultChannelCount, not even an explicit nil
func (o *OracleDatabaseNodeChannel) UnsetDefaultChannelCount() {
	o.DefaultChannelCount.Unset()
}

// GetEnableDgPrimaryBackup returns the EnableDgPrimaryBackup field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNodeChannel) GetEnableDgPrimaryBackup() bool {
	if o == nil || o.EnableDgPrimaryBackup.Get() == nil {
		var ret bool
		return ret
	}
	return *o.EnableDgPrimaryBackup.Get()
}

// GetEnableDgPrimaryBackupOk returns a tuple with the EnableDgPrimaryBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNodeChannel) GetEnableDgPrimaryBackupOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.EnableDgPrimaryBackup.Get(), o.EnableDgPrimaryBackup.IsSet()
}

// HasEnableDgPrimaryBackup returns a boolean if a field has been set.
func (o *OracleDatabaseNodeChannel) HasEnableDgPrimaryBackup() bool {
	if o != nil && o.EnableDgPrimaryBackup.IsSet() {
		return true
	}

	return false
}

// SetEnableDgPrimaryBackup gets a reference to the given NullableBool and assigns it to the EnableDgPrimaryBackup field.
func (o *OracleDatabaseNodeChannel) SetEnableDgPrimaryBackup(v bool) {
	o.EnableDgPrimaryBackup.Set(&v)
}
// SetEnableDgPrimaryBackupNil sets the value for EnableDgPrimaryBackup to be an explicit nil
func (o *OracleDatabaseNodeChannel) SetEnableDgPrimaryBackupNil() {
	o.EnableDgPrimaryBackup.Set(nil)
}

// UnsetEnableDgPrimaryBackup ensures that no value is present for EnableDgPrimaryBackup, not even an explicit nil
func (o *OracleDatabaseNodeChannel) UnsetEnableDgPrimaryBackup() {
	o.EnableDgPrimaryBackup.Unset()
}

// GetMaxNodeCount returns the MaxNodeCount field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNodeChannel) GetMaxNodeCount() int32 {
	if o == nil || o.MaxNodeCount.Get() == nil {
		var ret int32
		return ret
	}
	return *o.MaxNodeCount.Get()
}

// GetMaxNodeCountOk returns a tuple with the MaxNodeCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNodeChannel) GetMaxNodeCountOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MaxNodeCount.Get(), o.MaxNodeCount.IsSet()
}

// HasMaxNodeCount returns a boolean if a field has been set.
func (o *OracleDatabaseNodeChannel) HasMaxNodeCount() bool {
	if o != nil && o.MaxNodeCount.IsSet() {
		return true
	}

	return false
}

// SetMaxNodeCount gets a reference to the given NullableInt32 and assigns it to the MaxNodeCount field.
func (o *OracleDatabaseNodeChannel) SetMaxNodeCount(v int32) {
	o.MaxNodeCount.Set(&v)
}
// SetMaxNodeCountNil sets the value for MaxNodeCount to be an explicit nil
func (o *OracleDatabaseNodeChannel) SetMaxNodeCountNil() {
	o.MaxNodeCount.Set(nil)
}

// UnsetMaxNodeCount ensures that no value is present for MaxNodeCount, not even an explicit nil
func (o *OracleDatabaseNodeChannel) UnsetMaxNodeCount() {
	o.MaxNodeCount.Unset()
}

// GetRmanBackupType returns the RmanBackupType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *OracleDatabaseNodeChannel) GetRmanBackupType() int32 {
	if o == nil || o.RmanBackupType.Get() == nil {
		var ret int32
		return ret
	}
	return *o.RmanBackupType.Get()
}

// GetRmanBackupTypeOk returns a tuple with the RmanBackupType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *OracleDatabaseNodeChannel) GetRmanBackupTypeOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RmanBackupType.Get(), o.RmanBackupType.IsSet()
}

// HasRmanBackupType returns a boolean if a field has been set.
func (o *OracleDatabaseNodeChannel) HasRmanBackupType() bool {
	if o != nil && o.RmanBackupType.IsSet() {
		return true
	}

	return false
}

// SetRmanBackupType gets a reference to the given NullableInt32 and assigns it to the RmanBackupType field.
func (o *OracleDatabaseNodeChannel) SetRmanBackupType(v int32) {
	o.RmanBackupType.Set(&v)
}
// SetRmanBackupTypeNil sets the value for RmanBackupType to be an explicit nil
func (o *OracleDatabaseNodeChannel) SetRmanBackupTypeNil() {
	o.RmanBackupType.Set(nil)
}

// UnsetRmanBackupType ensures that no value is present for RmanBackupType, not even an explicit nil
func (o *OracleDatabaseNodeChannel) UnsetRmanBackupType() {
	o.RmanBackupType.Unset()
}

func (o OracleDatabaseNodeChannel) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ArchiveLogKeepDays.IsSet() {
		toSerialize["archiveLogKeepDays"] = o.ArchiveLogKeepDays.Get()
	}
	if o.DatabaseNodeList != nil {
		toSerialize["databaseNodeList"] = o.DatabaseNodeList
	}
	if o.DatabaseUniqueName.IsSet() {
		toSerialize["databaseUniqueName"] = o.DatabaseUniqueName.Get()
	}
	if o.DatabaseUuid.IsSet() {
		toSerialize["databaseUuid"] = o.DatabaseUuid.Get()
	}
	if o.DefaultChannelCount.IsSet() {
		toSerialize["defaultChannelCount"] = o.DefaultChannelCount.Get()
	}
	if o.EnableDgPrimaryBackup.IsSet() {
		toSerialize["enableDgPrimaryBackup"] = o.EnableDgPrimaryBackup.Get()
	}
	if o.MaxNodeCount.IsSet() {
		toSerialize["maxNodeCount"] = o.MaxNodeCount.Get()
	}
	if o.RmanBackupType.IsSet() {
		toSerialize["rmanBackupType"] = o.RmanBackupType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableOracleDatabaseNodeChannel struct {
	value *OracleDatabaseNodeChannel
	isSet bool
}

func (v NullableOracleDatabaseNodeChannel) Get() *OracleDatabaseNodeChannel {
	return v.value
}

func (v *NullableOracleDatabaseNodeChannel) Set(val *OracleDatabaseNodeChannel) {
	v.value = val
	v.isSet = true
}

func (v NullableOracleDatabaseNodeChannel) IsSet() bool {
	return v.isSet
}

func (v *NullableOracleDatabaseNodeChannel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOracleDatabaseNodeChannel(val *OracleDatabaseNodeChannel) *NullableOracleDatabaseNodeChannel {
	return &NullableOracleDatabaseNodeChannel{value: val, isSet: true}
}

func (v NullableOracleDatabaseNodeChannel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOracleDatabaseNodeChannel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


