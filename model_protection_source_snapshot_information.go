/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// ProtectionSourceSnapshotInformation Specifies details about a Snapshot that backups up a leaf Protection Source Object.
type ProtectionSourceSnapshotInformation struct {
	// Array of Snapshot Copy Tasks.  Specifies a list of copy tasks (such as replication and archival tasks).
	CopyTasks []SnapshotCopyTask `json:"copyTasks,omitempty"`
	// Specifies the id of the Protection Job.
	JobId NullableInt64 `json:"jobId,omitempty"`
	// Specifies the name of the Protection Job.
	JobName NullableString `json:"jobName,omitempty"`
	// Specifies the id of the Job Run.
	JobRunId NullableInt64 `json:"jobRunId,omitempty"`
	// Specifies the start time of the Job which this object is part of. The time is specified in Unix epoch Timestamp (in microseconds).
	JobRunStartTimeUsecs NullableInt64 `json:"jobRunStartTimeUsecs,omitempty"`
	// Specifies the end time of the last Run of this object's snapshot. The time is specified in Unix epoch Timestamp (in microseconds).
	LastRunEndTimeUsecs NullableInt64 `json:"lastRunEndTimeUsecs,omitempty"`
	// Specifies the start time of the last Run of this object's snapshot. The time is specified in Unix epoch Timestamp (in microseconds).
	LastRunStartTimeUsecs NullableInt64 `json:"lastRunStartTimeUsecs,omitempty"`
	// Specifies warning or error information when the Job Run is not successful.
	Message NullableString `json:"message,omitempty"`
	// Specifies the total number of bytes read.
	NumBytesRead NullableInt64 `json:"numBytesRead,omitempty"`
	// Specifies the total number of logical bytes that are protected. The logical size is when the data is fully hydrated or expanded.
	NumLogicalBytesProtected NullableInt64 `json:"numLogicalBytesProtected,omitempty"`
	// Specifies an opaque string to pass into the next request to get the next set of Snapshots for pagination purposes. If null, this is the last set of Snapshots or the number of Snapshots returned is equal to or less than the specified pageCount.
	PaginationCookie NullableInt32 `json:"paginationCookie,omitempty"`
	// Specifies the type of the Job Run. 'kSuccess' indicates that the Job Run was successful. 'kRunning' indicates that the Job Run is currently running. 'kWarning' indicates that the Job Run was successful but warnings were issued. 'kCancelled' indicates that the Job Run was canceled. 'kError' indicates the Job Run encountered an error and did not run to completion.
	RunStatus NullableString `json:"runStatus,omitempty"`
	// Specifies the status of the Job Run. 'kRegular' indicates an incremental (CBT) backup. Incremental backups utilizing CBT (if supported) are captured of the target protection objects. The first run of a kRegular schedule captures all the blocks. 'kFull' indicates a full (no CBT) backup. A complete backup (all blocks) of the target protection objects are always captured and Change Block Tracking (CBT) is not utilized. 'kLog' indicates a Database Log backup. Capture the database transaction logs to allow rolling back to a specific point in time. 'kSystem' indicates system volume backup. It produces an image for bare metal recovery.
	RunType NullableString `json:"runType,omitempty"`
}

// NewProtectionSourceSnapshotInformation instantiates a new ProtectionSourceSnapshotInformation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProtectionSourceSnapshotInformation() *ProtectionSourceSnapshotInformation {
	this := ProtectionSourceSnapshotInformation{}
	return &this
}

// NewProtectionSourceSnapshotInformationWithDefaults instantiates a new ProtectionSourceSnapshotInformation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProtectionSourceSnapshotInformationWithDefaults() *ProtectionSourceSnapshotInformation {
	this := ProtectionSourceSnapshotInformation{}
	return &this
}

// GetCopyTasks returns the CopyTasks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetCopyTasks() []SnapshotCopyTask {
	if o == nil  {
		var ret []SnapshotCopyTask
		return ret
	}
	return o.CopyTasks
}

// GetCopyTasksOk returns a tuple with the CopyTasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetCopyTasksOk() (*[]SnapshotCopyTask, bool) {
	if o == nil || o.CopyTasks == nil {
		return nil, false
	}
	return &o.CopyTasks, true
}

// HasCopyTasks returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasCopyTasks() bool {
	if o != nil && o.CopyTasks != nil {
		return true
	}

	return false
}

// SetCopyTasks gets a reference to the given []SnapshotCopyTask and assigns it to the CopyTasks field.
func (o *ProtectionSourceSnapshotInformation) SetCopyTasks(v []SnapshotCopyTask) {
	o.CopyTasks = v
}

// GetJobId returns the JobId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetJobId() int64 {
	if o == nil || o.JobId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.JobId.Get()
}

// GetJobIdOk returns a tuple with the JobId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetJobIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobId.Get(), o.JobId.IsSet()
}

// HasJobId returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasJobId() bool {
	if o != nil && o.JobId.IsSet() {
		return true
	}

	return false
}

// SetJobId gets a reference to the given NullableInt64 and assigns it to the JobId field.
func (o *ProtectionSourceSnapshotInformation) SetJobId(v int64) {
	o.JobId.Set(&v)
}
// SetJobIdNil sets the value for JobId to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetJobIdNil() {
	o.JobId.Set(nil)
}

// UnsetJobId ensures that no value is present for JobId, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetJobId() {
	o.JobId.Unset()
}

// GetJobName returns the JobName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetJobName() string {
	if o == nil || o.JobName.Get() == nil {
		var ret string
		return ret
	}
	return *o.JobName.Get()
}

// GetJobNameOk returns a tuple with the JobName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetJobNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobName.Get(), o.JobName.IsSet()
}

// HasJobName returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasJobName() bool {
	if o != nil && o.JobName.IsSet() {
		return true
	}

	return false
}

// SetJobName gets a reference to the given NullableString and assigns it to the JobName field.
func (o *ProtectionSourceSnapshotInformation) SetJobName(v string) {
	o.JobName.Set(&v)
}
// SetJobNameNil sets the value for JobName to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetJobNameNil() {
	o.JobName.Set(nil)
}

// UnsetJobName ensures that no value is present for JobName, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetJobName() {
	o.JobName.Unset()
}

// GetJobRunId returns the JobRunId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetJobRunId() int64 {
	if o == nil || o.JobRunId.Get() == nil {
		var ret int64
		return ret
	}
	return *o.JobRunId.Get()
}

// GetJobRunIdOk returns a tuple with the JobRunId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetJobRunIdOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobRunId.Get(), o.JobRunId.IsSet()
}

// HasJobRunId returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasJobRunId() bool {
	if o != nil && o.JobRunId.IsSet() {
		return true
	}

	return false
}

// SetJobRunId gets a reference to the given NullableInt64 and assigns it to the JobRunId field.
func (o *ProtectionSourceSnapshotInformation) SetJobRunId(v int64) {
	o.JobRunId.Set(&v)
}
// SetJobRunIdNil sets the value for JobRunId to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetJobRunIdNil() {
	o.JobRunId.Set(nil)
}

// UnsetJobRunId ensures that no value is present for JobRunId, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetJobRunId() {
	o.JobRunId.Unset()
}

// GetJobRunStartTimeUsecs returns the JobRunStartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetJobRunStartTimeUsecs() int64 {
	if o == nil || o.JobRunStartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.JobRunStartTimeUsecs.Get()
}

// GetJobRunStartTimeUsecsOk returns a tuple with the JobRunStartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetJobRunStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.JobRunStartTimeUsecs.Get(), o.JobRunStartTimeUsecs.IsSet()
}

// HasJobRunStartTimeUsecs returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasJobRunStartTimeUsecs() bool {
	if o != nil && o.JobRunStartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetJobRunStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the JobRunStartTimeUsecs field.
func (o *ProtectionSourceSnapshotInformation) SetJobRunStartTimeUsecs(v int64) {
	o.JobRunStartTimeUsecs.Set(&v)
}
// SetJobRunStartTimeUsecsNil sets the value for JobRunStartTimeUsecs to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetJobRunStartTimeUsecsNil() {
	o.JobRunStartTimeUsecs.Set(nil)
}

// UnsetJobRunStartTimeUsecs ensures that no value is present for JobRunStartTimeUsecs, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetJobRunStartTimeUsecs() {
	o.JobRunStartTimeUsecs.Unset()
}

// GetLastRunEndTimeUsecs returns the LastRunEndTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetLastRunEndTimeUsecs() int64 {
	if o == nil || o.LastRunEndTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastRunEndTimeUsecs.Get()
}

// GetLastRunEndTimeUsecsOk returns a tuple with the LastRunEndTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetLastRunEndTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastRunEndTimeUsecs.Get(), o.LastRunEndTimeUsecs.IsSet()
}

// HasLastRunEndTimeUsecs returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasLastRunEndTimeUsecs() bool {
	if o != nil && o.LastRunEndTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetLastRunEndTimeUsecs gets a reference to the given NullableInt64 and assigns it to the LastRunEndTimeUsecs field.
func (o *ProtectionSourceSnapshotInformation) SetLastRunEndTimeUsecs(v int64) {
	o.LastRunEndTimeUsecs.Set(&v)
}
// SetLastRunEndTimeUsecsNil sets the value for LastRunEndTimeUsecs to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetLastRunEndTimeUsecsNil() {
	o.LastRunEndTimeUsecs.Set(nil)
}

// UnsetLastRunEndTimeUsecs ensures that no value is present for LastRunEndTimeUsecs, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetLastRunEndTimeUsecs() {
	o.LastRunEndTimeUsecs.Unset()
}

// GetLastRunStartTimeUsecs returns the LastRunStartTimeUsecs field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetLastRunStartTimeUsecs() int64 {
	if o == nil || o.LastRunStartTimeUsecs.Get() == nil {
		var ret int64
		return ret
	}
	return *o.LastRunStartTimeUsecs.Get()
}

// GetLastRunStartTimeUsecsOk returns a tuple with the LastRunStartTimeUsecs field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetLastRunStartTimeUsecsOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.LastRunStartTimeUsecs.Get(), o.LastRunStartTimeUsecs.IsSet()
}

// HasLastRunStartTimeUsecs returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasLastRunStartTimeUsecs() bool {
	if o != nil && o.LastRunStartTimeUsecs.IsSet() {
		return true
	}

	return false
}

// SetLastRunStartTimeUsecs gets a reference to the given NullableInt64 and assigns it to the LastRunStartTimeUsecs field.
func (o *ProtectionSourceSnapshotInformation) SetLastRunStartTimeUsecs(v int64) {
	o.LastRunStartTimeUsecs.Set(&v)
}
// SetLastRunStartTimeUsecsNil sets the value for LastRunStartTimeUsecs to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetLastRunStartTimeUsecsNil() {
	o.LastRunStartTimeUsecs.Set(nil)
}

// UnsetLastRunStartTimeUsecs ensures that no value is present for LastRunStartTimeUsecs, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetLastRunStartTimeUsecs() {
	o.LastRunStartTimeUsecs.Unset()
}

// GetMessage returns the Message field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetMessage() string {
	if o == nil || o.Message.Get() == nil {
		var ret string
		return ret
	}
	return *o.Message.Get()
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetMessageOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.Message.Get(), o.Message.IsSet()
}

// HasMessage returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasMessage() bool {
	if o != nil && o.Message.IsSet() {
		return true
	}

	return false
}

// SetMessage gets a reference to the given NullableString and assigns it to the Message field.
func (o *ProtectionSourceSnapshotInformation) SetMessage(v string) {
	o.Message.Set(&v)
}
// SetMessageNil sets the value for Message to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetMessageNil() {
	o.Message.Set(nil)
}

// UnsetMessage ensures that no value is present for Message, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetMessage() {
	o.Message.Unset()
}

// GetNumBytesRead returns the NumBytesRead field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetNumBytesRead() int64 {
	if o == nil || o.NumBytesRead.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumBytesRead.Get()
}

// GetNumBytesReadOk returns a tuple with the NumBytesRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetNumBytesReadOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumBytesRead.Get(), o.NumBytesRead.IsSet()
}

// HasNumBytesRead returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasNumBytesRead() bool {
	if o != nil && o.NumBytesRead.IsSet() {
		return true
	}

	return false
}

// SetNumBytesRead gets a reference to the given NullableInt64 and assigns it to the NumBytesRead field.
func (o *ProtectionSourceSnapshotInformation) SetNumBytesRead(v int64) {
	o.NumBytesRead.Set(&v)
}
// SetNumBytesReadNil sets the value for NumBytesRead to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetNumBytesReadNil() {
	o.NumBytesRead.Set(nil)
}

// UnsetNumBytesRead ensures that no value is present for NumBytesRead, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetNumBytesRead() {
	o.NumBytesRead.Unset()
}

// GetNumLogicalBytesProtected returns the NumLogicalBytesProtected field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetNumLogicalBytesProtected() int64 {
	if o == nil || o.NumLogicalBytesProtected.Get() == nil {
		var ret int64
		return ret
	}
	return *o.NumLogicalBytesProtected.Get()
}

// GetNumLogicalBytesProtectedOk returns a tuple with the NumLogicalBytesProtected field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetNumLogicalBytesProtectedOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NumLogicalBytesProtected.Get(), o.NumLogicalBytesProtected.IsSet()
}

// HasNumLogicalBytesProtected returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasNumLogicalBytesProtected() bool {
	if o != nil && o.NumLogicalBytesProtected.IsSet() {
		return true
	}

	return false
}

// SetNumLogicalBytesProtected gets a reference to the given NullableInt64 and assigns it to the NumLogicalBytesProtected field.
func (o *ProtectionSourceSnapshotInformation) SetNumLogicalBytesProtected(v int64) {
	o.NumLogicalBytesProtected.Set(&v)
}
// SetNumLogicalBytesProtectedNil sets the value for NumLogicalBytesProtected to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetNumLogicalBytesProtectedNil() {
	o.NumLogicalBytesProtected.Set(nil)
}

// UnsetNumLogicalBytesProtected ensures that no value is present for NumLogicalBytesProtected, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetNumLogicalBytesProtected() {
	o.NumLogicalBytesProtected.Unset()
}

// GetPaginationCookie returns the PaginationCookie field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetPaginationCookie() int32 {
	if o == nil || o.PaginationCookie.Get() == nil {
		var ret int32
		return ret
	}
	return *o.PaginationCookie.Get()
}

// GetPaginationCookieOk returns a tuple with the PaginationCookie field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetPaginationCookieOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.PaginationCookie.Get(), o.PaginationCookie.IsSet()
}

// HasPaginationCookie returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasPaginationCookie() bool {
	if o != nil && o.PaginationCookie.IsSet() {
		return true
	}

	return false
}

// SetPaginationCookie gets a reference to the given NullableInt32 and assigns it to the PaginationCookie field.
func (o *ProtectionSourceSnapshotInformation) SetPaginationCookie(v int32) {
	o.PaginationCookie.Set(&v)
}
// SetPaginationCookieNil sets the value for PaginationCookie to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetPaginationCookieNil() {
	o.PaginationCookie.Set(nil)
}

// UnsetPaginationCookie ensures that no value is present for PaginationCookie, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetPaginationCookie() {
	o.PaginationCookie.Unset()
}

// GetRunStatus returns the RunStatus field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetRunStatus() string {
	if o == nil || o.RunStatus.Get() == nil {
		var ret string
		return ret
	}
	return *o.RunStatus.Get()
}

// GetRunStatusOk returns a tuple with the RunStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetRunStatusOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunStatus.Get(), o.RunStatus.IsSet()
}

// HasRunStatus returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasRunStatus() bool {
	if o != nil && o.RunStatus.IsSet() {
		return true
	}

	return false
}

// SetRunStatus gets a reference to the given NullableString and assigns it to the RunStatus field.
func (o *ProtectionSourceSnapshotInformation) SetRunStatus(v string) {
	o.RunStatus.Set(&v)
}
// SetRunStatusNil sets the value for RunStatus to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetRunStatusNil() {
	o.RunStatus.Set(nil)
}

// UnsetRunStatus ensures that no value is present for RunStatus, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetRunStatus() {
	o.RunStatus.Unset()
}

// GetRunType returns the RunType field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ProtectionSourceSnapshotInformation) GetRunType() string {
	if o == nil || o.RunType.Get() == nil {
		var ret string
		return ret
	}
	return *o.RunType.Get()
}

// GetRunTypeOk returns a tuple with the RunType field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProtectionSourceSnapshotInformation) GetRunTypeOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.RunType.Get(), o.RunType.IsSet()
}

// HasRunType returns a boolean if a field has been set.
func (o *ProtectionSourceSnapshotInformation) HasRunType() bool {
	if o != nil && o.RunType.IsSet() {
		return true
	}

	return false
}

// SetRunType gets a reference to the given NullableString and assigns it to the RunType field.
func (o *ProtectionSourceSnapshotInformation) SetRunType(v string) {
	o.RunType.Set(&v)
}
// SetRunTypeNil sets the value for RunType to be an explicit nil
func (o *ProtectionSourceSnapshotInformation) SetRunTypeNil() {
	o.RunType.Set(nil)
}

// UnsetRunType ensures that no value is present for RunType, not even an explicit nil
func (o *ProtectionSourceSnapshotInformation) UnsetRunType() {
	o.RunType.Unset()
}

func (o ProtectionSourceSnapshotInformation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CopyTasks != nil {
		toSerialize["copyTasks"] = o.CopyTasks
	}
	if o.JobId.IsSet() {
		toSerialize["jobId"] = o.JobId.Get()
	}
	if o.JobName.IsSet() {
		toSerialize["jobName"] = o.JobName.Get()
	}
	if o.JobRunId.IsSet() {
		toSerialize["jobRunId"] = o.JobRunId.Get()
	}
	if o.JobRunStartTimeUsecs.IsSet() {
		toSerialize["jobRunStartTimeUsecs"] = o.JobRunStartTimeUsecs.Get()
	}
	if o.LastRunEndTimeUsecs.IsSet() {
		toSerialize["lastRunEndTimeUsecs"] = o.LastRunEndTimeUsecs.Get()
	}
	if o.LastRunStartTimeUsecs.IsSet() {
		toSerialize["lastRunStartTimeUsecs"] = o.LastRunStartTimeUsecs.Get()
	}
	if o.Message.IsSet() {
		toSerialize["message"] = o.Message.Get()
	}
	if o.NumBytesRead.IsSet() {
		toSerialize["numBytesRead"] = o.NumBytesRead.Get()
	}
	if o.NumLogicalBytesProtected.IsSet() {
		toSerialize["numLogicalBytesProtected"] = o.NumLogicalBytesProtected.Get()
	}
	if o.PaginationCookie.IsSet() {
		toSerialize["paginationCookie"] = o.PaginationCookie.Get()
	}
	if o.RunStatus.IsSet() {
		toSerialize["runStatus"] = o.RunStatus.Get()
	}
	if o.RunType.IsSet() {
		toSerialize["runType"] = o.RunType.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableProtectionSourceSnapshotInformation struct {
	value *ProtectionSourceSnapshotInformation
	isSet bool
}

func (v NullableProtectionSourceSnapshotInformation) Get() *ProtectionSourceSnapshotInformation {
	return v.value
}

func (v *NullableProtectionSourceSnapshotInformation) Set(val *ProtectionSourceSnapshotInformation) {
	v.value = val
	v.isSet = true
}

func (v NullableProtectionSourceSnapshotInformation) IsSet() bool {
	return v.isSet
}

func (v *NullableProtectionSourceSnapshotInformation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProtectionSourceSnapshotInformation(val *ProtectionSourceSnapshotInformation) *NullableProtectionSourceSnapshotInformation {
	return &NullableProtectionSourceSnapshotInformation{value: val, isSet: true}
}

func (v NullableProtectionSourceSnapshotInformation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProtectionSourceSnapshotInformation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


