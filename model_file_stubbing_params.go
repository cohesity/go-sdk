/*
 * Cohesity REST API
 *
 * This API list provides operations for interfacing with the Cohesity Cluster.
 *
 * API version: 1.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package cohesitysdk

import (
	"encoding/json"
)

// FileStubbingParams File Stubbing Parameters Message to capture the additional stubbing params for a file-based environment.
type FileStubbingParams struct {
	// Identifies the cold files in the NAS source. Files that haven't been accessed/modified in the last cold_file_window msecs or are older than cold_window_msecs are migrated.
	ColdFileWindow NullableInt64 `json:"coldFileWindow,omitempty"`
	// Delete migrated data if no symlink at source is pointing to it.
	DeleteOrphanData NullableBool `json:"deleteOrphanData,omitempty"`
	// File migrate policy based on file access/modify time and age.
	FileSelectPolicy NullableInt32 `json:"fileSelectPolicy,omitempty"`
	// Gives the size criteria to be used for selecting the files to be migrated. The cold files that are equal and greater than file_size or smaller than file_size are migrated.
	FileSize NullableInt64 `json:"fileSize,omitempty"`
	// File size policy for selecting files to migrate.
	FileSizePolicy NullableInt32 `json:"fileSizePolicy,omitempty"`
	FilteringPolicy *FilteringPolicyProto `json:"filteringPolicy,omitempty"`
	// Migrate data without stub.
	MigrateWithoutStub NullableBool `json:"migrateWithoutStub,omitempty"`
	// Mount path where the Cohesity target view must be mounted on all NFS clients for accessing the migrated data.
	NfsMountPath NullableString `json:"nfsMountPath,omitempty"`
	// The target view name to which the data will be migrated.
	TargetViewName NullableString `json:"targetViewName,omitempty"`
}

// NewFileStubbingParams instantiates a new FileStubbingParams object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFileStubbingParams() *FileStubbingParams {
	this := FileStubbingParams{}
	return &this
}

// NewFileStubbingParamsWithDefaults instantiates a new FileStubbingParams object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFileStubbingParamsWithDefaults() *FileStubbingParams {
	this := FileStubbingParams{}
	return &this
}

// GetColdFileWindow returns the ColdFileWindow field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStubbingParams) GetColdFileWindow() int64 {
	if o == nil || o.ColdFileWindow.Get() == nil {
		var ret int64
		return ret
	}
	return *o.ColdFileWindow.Get()
}

// GetColdFileWindowOk returns a tuple with the ColdFileWindow field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStubbingParams) GetColdFileWindowOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.ColdFileWindow.Get(), o.ColdFileWindow.IsSet()
}

// HasColdFileWindow returns a boolean if a field has been set.
func (o *FileStubbingParams) HasColdFileWindow() bool {
	if o != nil && o.ColdFileWindow.IsSet() {
		return true
	}

	return false
}

// SetColdFileWindow gets a reference to the given NullableInt64 and assigns it to the ColdFileWindow field.
func (o *FileStubbingParams) SetColdFileWindow(v int64) {
	o.ColdFileWindow.Set(&v)
}
// SetColdFileWindowNil sets the value for ColdFileWindow to be an explicit nil
func (o *FileStubbingParams) SetColdFileWindowNil() {
	o.ColdFileWindow.Set(nil)
}

// UnsetColdFileWindow ensures that no value is present for ColdFileWindow, not even an explicit nil
func (o *FileStubbingParams) UnsetColdFileWindow() {
	o.ColdFileWindow.Unset()
}

// GetDeleteOrphanData returns the DeleteOrphanData field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStubbingParams) GetDeleteOrphanData() bool {
	if o == nil || o.DeleteOrphanData.Get() == nil {
		var ret bool
		return ret
	}
	return *o.DeleteOrphanData.Get()
}

// GetDeleteOrphanDataOk returns a tuple with the DeleteOrphanData field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStubbingParams) GetDeleteOrphanDataOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.DeleteOrphanData.Get(), o.DeleteOrphanData.IsSet()
}

// HasDeleteOrphanData returns a boolean if a field has been set.
func (o *FileStubbingParams) HasDeleteOrphanData() bool {
	if o != nil && o.DeleteOrphanData.IsSet() {
		return true
	}

	return false
}

// SetDeleteOrphanData gets a reference to the given NullableBool and assigns it to the DeleteOrphanData field.
func (o *FileStubbingParams) SetDeleteOrphanData(v bool) {
	o.DeleteOrphanData.Set(&v)
}
// SetDeleteOrphanDataNil sets the value for DeleteOrphanData to be an explicit nil
func (o *FileStubbingParams) SetDeleteOrphanDataNil() {
	o.DeleteOrphanData.Set(nil)
}

// UnsetDeleteOrphanData ensures that no value is present for DeleteOrphanData, not even an explicit nil
func (o *FileStubbingParams) UnsetDeleteOrphanData() {
	o.DeleteOrphanData.Unset()
}

// GetFileSelectPolicy returns the FileSelectPolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStubbingParams) GetFileSelectPolicy() int32 {
	if o == nil || o.FileSelectPolicy.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FileSelectPolicy.Get()
}

// GetFileSelectPolicyOk returns a tuple with the FileSelectPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStubbingParams) GetFileSelectPolicyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileSelectPolicy.Get(), o.FileSelectPolicy.IsSet()
}

// HasFileSelectPolicy returns a boolean if a field has been set.
func (o *FileStubbingParams) HasFileSelectPolicy() bool {
	if o != nil && o.FileSelectPolicy.IsSet() {
		return true
	}

	return false
}

// SetFileSelectPolicy gets a reference to the given NullableInt32 and assigns it to the FileSelectPolicy field.
func (o *FileStubbingParams) SetFileSelectPolicy(v int32) {
	o.FileSelectPolicy.Set(&v)
}
// SetFileSelectPolicyNil sets the value for FileSelectPolicy to be an explicit nil
func (o *FileStubbingParams) SetFileSelectPolicyNil() {
	o.FileSelectPolicy.Set(nil)
}

// UnsetFileSelectPolicy ensures that no value is present for FileSelectPolicy, not even an explicit nil
func (o *FileStubbingParams) UnsetFileSelectPolicy() {
	o.FileSelectPolicy.Unset()
}

// GetFileSize returns the FileSize field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStubbingParams) GetFileSize() int64 {
	if o == nil || o.FileSize.Get() == nil {
		var ret int64
		return ret
	}
	return *o.FileSize.Get()
}

// GetFileSizeOk returns a tuple with the FileSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStubbingParams) GetFileSizeOk() (*int64, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileSize.Get(), o.FileSize.IsSet()
}

// HasFileSize returns a boolean if a field has been set.
func (o *FileStubbingParams) HasFileSize() bool {
	if o != nil && o.FileSize.IsSet() {
		return true
	}

	return false
}

// SetFileSize gets a reference to the given NullableInt64 and assigns it to the FileSize field.
func (o *FileStubbingParams) SetFileSize(v int64) {
	o.FileSize.Set(&v)
}
// SetFileSizeNil sets the value for FileSize to be an explicit nil
func (o *FileStubbingParams) SetFileSizeNil() {
	o.FileSize.Set(nil)
}

// UnsetFileSize ensures that no value is present for FileSize, not even an explicit nil
func (o *FileStubbingParams) UnsetFileSize() {
	o.FileSize.Unset()
}

// GetFileSizePolicy returns the FileSizePolicy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStubbingParams) GetFileSizePolicy() int32 {
	if o == nil || o.FileSizePolicy.Get() == nil {
		var ret int32
		return ret
	}
	return *o.FileSizePolicy.Get()
}

// GetFileSizePolicyOk returns a tuple with the FileSizePolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStubbingParams) GetFileSizePolicyOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return o.FileSizePolicy.Get(), o.FileSizePolicy.IsSet()
}

// HasFileSizePolicy returns a boolean if a field has been set.
func (o *FileStubbingParams) HasFileSizePolicy() bool {
	if o != nil && o.FileSizePolicy.IsSet() {
		return true
	}

	return false
}

// SetFileSizePolicy gets a reference to the given NullableInt32 and assigns it to the FileSizePolicy field.
func (o *FileStubbingParams) SetFileSizePolicy(v int32) {
	o.FileSizePolicy.Set(&v)
}
// SetFileSizePolicyNil sets the value for FileSizePolicy to be an explicit nil
func (o *FileStubbingParams) SetFileSizePolicyNil() {
	o.FileSizePolicy.Set(nil)
}

// UnsetFileSizePolicy ensures that no value is present for FileSizePolicy, not even an explicit nil
func (o *FileStubbingParams) UnsetFileSizePolicy() {
	o.FileSizePolicy.Unset()
}

// GetFilteringPolicy returns the FilteringPolicy field value if set, zero value otherwise.
func (o *FileStubbingParams) GetFilteringPolicy() FilteringPolicyProto {
	if o == nil || o.FilteringPolicy == nil {
		var ret FilteringPolicyProto
		return ret
	}
	return *o.FilteringPolicy
}

// GetFilteringPolicyOk returns a tuple with the FilteringPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FileStubbingParams) GetFilteringPolicyOk() (*FilteringPolicyProto, bool) {
	if o == nil || o.FilteringPolicy == nil {
		return nil, false
	}
	return o.FilteringPolicy, true
}

// HasFilteringPolicy returns a boolean if a field has been set.
func (o *FileStubbingParams) HasFilteringPolicy() bool {
	if o != nil && o.FilteringPolicy != nil {
		return true
	}

	return false
}

// SetFilteringPolicy gets a reference to the given FilteringPolicyProto and assigns it to the FilteringPolicy field.
func (o *FileStubbingParams) SetFilteringPolicy(v FilteringPolicyProto) {
	o.FilteringPolicy = &v
}

// GetMigrateWithoutStub returns the MigrateWithoutStub field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStubbingParams) GetMigrateWithoutStub() bool {
	if o == nil || o.MigrateWithoutStub.Get() == nil {
		var ret bool
		return ret
	}
	return *o.MigrateWithoutStub.Get()
}

// GetMigrateWithoutStubOk returns a tuple with the MigrateWithoutStub field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStubbingParams) GetMigrateWithoutStubOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return o.MigrateWithoutStub.Get(), o.MigrateWithoutStub.IsSet()
}

// HasMigrateWithoutStub returns a boolean if a field has been set.
func (o *FileStubbingParams) HasMigrateWithoutStub() bool {
	if o != nil && o.MigrateWithoutStub.IsSet() {
		return true
	}

	return false
}

// SetMigrateWithoutStub gets a reference to the given NullableBool and assigns it to the MigrateWithoutStub field.
func (o *FileStubbingParams) SetMigrateWithoutStub(v bool) {
	o.MigrateWithoutStub.Set(&v)
}
// SetMigrateWithoutStubNil sets the value for MigrateWithoutStub to be an explicit nil
func (o *FileStubbingParams) SetMigrateWithoutStubNil() {
	o.MigrateWithoutStub.Set(nil)
}

// UnsetMigrateWithoutStub ensures that no value is present for MigrateWithoutStub, not even an explicit nil
func (o *FileStubbingParams) UnsetMigrateWithoutStub() {
	o.MigrateWithoutStub.Unset()
}

// GetNfsMountPath returns the NfsMountPath field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStubbingParams) GetNfsMountPath() string {
	if o == nil || o.NfsMountPath.Get() == nil {
		var ret string
		return ret
	}
	return *o.NfsMountPath.Get()
}

// GetNfsMountPathOk returns a tuple with the NfsMountPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStubbingParams) GetNfsMountPathOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.NfsMountPath.Get(), o.NfsMountPath.IsSet()
}

// HasNfsMountPath returns a boolean if a field has been set.
func (o *FileStubbingParams) HasNfsMountPath() bool {
	if o != nil && o.NfsMountPath.IsSet() {
		return true
	}

	return false
}

// SetNfsMountPath gets a reference to the given NullableString and assigns it to the NfsMountPath field.
func (o *FileStubbingParams) SetNfsMountPath(v string) {
	o.NfsMountPath.Set(&v)
}
// SetNfsMountPathNil sets the value for NfsMountPath to be an explicit nil
func (o *FileStubbingParams) SetNfsMountPathNil() {
	o.NfsMountPath.Set(nil)
}

// UnsetNfsMountPath ensures that no value is present for NfsMountPath, not even an explicit nil
func (o *FileStubbingParams) UnsetNfsMountPath() {
	o.NfsMountPath.Unset()
}

// GetTargetViewName returns the TargetViewName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FileStubbingParams) GetTargetViewName() string {
	if o == nil || o.TargetViewName.Get() == nil {
		var ret string
		return ret
	}
	return *o.TargetViewName.Get()
}

// GetTargetViewNameOk returns a tuple with the TargetViewName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FileStubbingParams) GetTargetViewNameOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return o.TargetViewName.Get(), o.TargetViewName.IsSet()
}

// HasTargetViewName returns a boolean if a field has been set.
func (o *FileStubbingParams) HasTargetViewName() bool {
	if o != nil && o.TargetViewName.IsSet() {
		return true
	}

	return false
}

// SetTargetViewName gets a reference to the given NullableString and assigns it to the TargetViewName field.
func (o *FileStubbingParams) SetTargetViewName(v string) {
	o.TargetViewName.Set(&v)
}
// SetTargetViewNameNil sets the value for TargetViewName to be an explicit nil
func (o *FileStubbingParams) SetTargetViewNameNil() {
	o.TargetViewName.Set(nil)
}

// UnsetTargetViewName ensures that no value is present for TargetViewName, not even an explicit nil
func (o *FileStubbingParams) UnsetTargetViewName() {
	o.TargetViewName.Unset()
}

func (o FileStubbingParams) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ColdFileWindow.IsSet() {
		toSerialize["coldFileWindow"] = o.ColdFileWindow.Get()
	}
	if o.DeleteOrphanData.IsSet() {
		toSerialize["deleteOrphanData"] = o.DeleteOrphanData.Get()
	}
	if o.FileSelectPolicy.IsSet() {
		toSerialize["fileSelectPolicy"] = o.FileSelectPolicy.Get()
	}
	if o.FileSize.IsSet() {
		toSerialize["fileSize"] = o.FileSize.Get()
	}
	if o.FileSizePolicy.IsSet() {
		toSerialize["fileSizePolicy"] = o.FileSizePolicy.Get()
	}
	if o.FilteringPolicy != nil {
		toSerialize["filteringPolicy"] = o.FilteringPolicy
	}
	if o.MigrateWithoutStub.IsSet() {
		toSerialize["migrateWithoutStub"] = o.MigrateWithoutStub.Get()
	}
	if o.NfsMountPath.IsSet() {
		toSerialize["nfsMountPath"] = o.NfsMountPath.Get()
	}
	if o.TargetViewName.IsSet() {
		toSerialize["targetViewName"] = o.TargetViewName.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableFileStubbingParams struct {
	value *FileStubbingParams
	isSet bool
}

func (v NullableFileStubbingParams) Get() *FileStubbingParams {
	return v.value
}

func (v *NullableFileStubbingParams) Set(val *FileStubbingParams) {
	v.value = val
	v.isSet = true
}

func (v NullableFileStubbingParams) IsSet() bool {
	return v.isSet
}

func (v *NullableFileStubbingParams) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFileStubbingParams(val *FileStubbingParams) *NullableFileStubbingParams {
	return &NullableFileStubbingParams{value: val, isSet: true}
}

func (v NullableFileStubbingParams) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFileStubbingParams) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


